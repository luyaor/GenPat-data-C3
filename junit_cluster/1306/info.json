{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79db9e4e3ff4be619d99fb7c7bfd611f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0868595b95e46e03041bfd67cd351d44", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate static boolean equalsRegardingNull(Object expected, Object actual)", "signatureAfterChange": "      private static boolean equalsRegardingNull(Object expected, Object actual)", "diff": ["-\t", "-\tprivate static boolean equalsRegardingNull(Object expected, Object actual) {", "-\t\tif (expected == null)", "-\t\t\treturn actual == null;", "-\t\t", "-\t\treturn isEquals(expected, actual);", "-\t}", "+    private static boolean equalsRegardingNull(Object expected, Object actual) {", "+        if (expected == null) {", "+            return actual == null;", "+        }", "+        return isEquals(expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a26c546e44cfc91452ccffaf899a1a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/TemporaryFolder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic File newFile(String fileName) throws IOException", "signatureAfterChange": "     public File newFile(String fileName) throws IOException", "diff": ["-\t */", "-\tpublic File newFile(String fileName) throws IOException {", "-\t\tFile file= new File(getRoot(), fileName);", "-\t\tif (!file.createNewFile())", "-\t\t\tthrow new IOException(", "-\t\t\t\t\t\"a file with the name \\'\" + fileName + \"\\' already exists in the test folder\");", "-\t\treturn file;", "-\t}", "+     */", "+    public File newFile(String fileName) throws IOException {", "+        File file = new File(getRoot(), fileName);", "+        if (!file.createNewFile()) {", "+            throw new IOException(", "+                    \"a file with the name \\'\" + fileName + \"\\' already exists in the test folder\");", "+        }", "+        return file;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "666bf3c4f78e56d205ad6e85a5478950", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void addSinglePointMethods(ParameterSignature sig, \t\t\t\t\t\t\t\t\t   List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "diff": ["-\tprivate void addSinglePointMethods(ParameterSignature sig,", "-\t\t\t\t\t\t\t\t\t   List<PotentialAssignment> list) {", "-\t\tfor (FrameworkMethod dataPointMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoint.class)) {", "-\t\t\tif (isCorrectlyTyped(sig, dataPointMethod.getType()))", "-\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod));", "-\t\t}", "-\t}", "+    private void addSinglePointMethods(ParameterSignature sig,", "+            List<PotentialAssignment> list) {", "+        for (FrameworkMethod dataPointMethod : fClass", "+                .getAnnotatedMethods(DataPoint.class)) {", "+            if (isCorrectlyTyped(sig, dataPointMethod.getType())) {", "+                list.add(new MethodParameterValue(dataPointMethod));", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70bf94d6ed8bc51b2f3ec53b99ef1a35", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkAccess(Thread t)", "signatureAfterChange": "          @Override         public void checkAccess(Thread t)", "diff": ["-\t\t@Override", "-\t\tpublic void checkAccess(Thread t) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkAccess(t);", "-\t\t}", "+        @Override", "+        public void checkAccess(Thread t) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkAccess(t);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f2574f1a0ce07784a543ebacfb38ac7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tstatic public void assertTrue(String message, boolean condition)", "signatureAfterChange": "     static public void assertTrue(String message, boolean condition)", "diff": ["-\t */", "-\tstatic public void assertTrue(String message, boolean condition) {", "-\t\tif (!condition)", "-\t\t\tfail(message);", "-\t}", "+     */", "+    static public void assertTrue(String message, boolean condition) {", "+        if (!condition) {", "+            fail(message);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cca80cdbe2cace98f33340bf191a8554", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner runnerForClass(Class<?> testClass) throws Exception", "signatureAfterChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Exception", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) throws Exception {", "-\t\tRunWith annotation= testClass.getAnnotation(RunWith.class);", "-\t\tif (annotation != null)", "-\t\t\treturn buildRunner(annotation.value(), testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) throws Exception {", "+        RunWith annotation = testClass.getAnnotation(RunWith.class);", "+        if (annotation != null) {", "+            return buildRunner(annotation.value(), testClass);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc734159f31b74c018319d1e64f3bef3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkCreateClassLoader()", "signatureAfterChange": "          @Override         public void checkCreateClassLoader()", "diff": ["-\t\t@Override", "-\t\tpublic void checkCreateClassLoader() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkCreateClassLoader();", "-\t\t}", "+        @Override", "+        public void checkCreateClassLoader() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkCreateClassLoader();", "+            }", "+        }"]}]}
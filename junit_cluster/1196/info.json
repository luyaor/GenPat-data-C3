{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb11a2ac70e4b482796c109d32a1d4ff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae32fce2fe346f39a56cab9afa3b0990", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "cde32fb62ad8f5a05d700ce3189e131fa51739cb", "commitAfterChange": "4f405a49eba4822fbdda0c9415d2dc4fd82fb14b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "signatureAfterChange": "  \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "diff": ["-\t", "+", "-\t\tfor (final Method method : fClass.getMethods()) {", "-\t\t\tif ((method.getParameterTypes().length == 0 && sig.getType()", "-\t\t\t\t\t.isAssignableFrom(method.getReturnType()))", "-\t\t\t\t\t&& method.isAnnotationPresent(DataPoint.class)) {", "-\t\t\t\tlist.add(new MethodParameterValue(method));", "-\t\t\t} else if (method.isAnnotationPresent(DataPoints.class)) {", "-\t\t\t\ttry {", "-\t\t\t\t\taddArrayValues(list, method.invoke(null));", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t// ignore and move on", "-\t\t\t\t}", "+\t\t// TODO: (Jan 25, 2008 8:32:47 AM) extract these", "+", "+\t\tfor (FrameworkMethod dataPointMethod : fClass", "+\t\t\t\t.getAnnotatedMethods(DataPoint.class))", "+\t\t\tif ((dataPointMethod.getParameterTypes().length == 0 && sig", "+\t\t\t\t\t.getType()", "+\t\t\t\t\t.isAssignableFrom(dataPointMethod.getReturnType())))", "+\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod.getMethod()));", "+", "+\t\tfor (FrameworkMethod dataPointsMethod : fClass", "+\t\t\t\t.getAnnotatedMethods(DataPoints.class))", "+\t\t\ttry {", "+\t\t\t\taddArrayValues(list, dataPointsMethod.invokeExplosively(null));", "+\t\t\t} catch (Throwable e) {", "+\t\t\t\t// ignore and move on", "-\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b1b392842574e1e4dfc2658f621f87", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "db89759c22060a89f6750e2e92ce93072eace561", "commitAfterChange": "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\t \t\tprivate Method getParametersMethod() throws Exception", "signatureAfterChange": " \t \tprivate Method getParametersMethod() throws Exception", "diff": ["-\t\tprivate Method getParametersMethod() throws Exception {", "-\t\t\tfor (Method each : fKlass.getMethods()) {", "-\t\t\t\tif (Modifier.isStatic(each.getModifiers())) {", "-\t\t\t\t\tAnnotation[] annotations= each.getAnnotations();", "-\t\t\t\t\tfor (Annotation annotation : annotations) {", "-\t\t\t\t\t\tif (annotation.annotationType() == Parameters.class)", "-\t\t\t\t\t\t\treturn each;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow new Exception(\"No public static parameters method on class \"", "-\t\t\t\t\t+ getName());", "+\t", "+\tprivate Method getParametersMethod() throws Exception {", "+\t\tList<Method> methods= fTestClass.getAnnotatedMethods(Parameters.class);", "+\t\tfor (Method each : methods) {", "+\t\t\tint modifiers= each.getModifiers();", "+\t\t\tif (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))", "+\t\t\t\treturn each;", "+\t\t}", "+", "+\t\tthrow new Exception(\"No public static parameters method on class \" + getName());", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dea9ee613da15a2d24992a84bed7ab4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c76860e35d1ce00b9b5d1c4bff3c5025", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t\t\t@Override \t\t\tpublic Statement chain(TestMethod method)", "signatureAfterChange": " \t\t\t\t\t \t\t\t\t\t@Override \t\t\t\t\tpublic Statement childBlock(TestMethod method)", "diff": ["-", "-\t\t\t@Override", "-\t\t\tpublic Statement chain(TestMethod method) {", "-\t\t\t\t// TODO: (Oct 12, 2007 2:00:52 PM) Name this Link", "-\t\t\t\tfinal Statement link= super.chain(method);", "-\t\t\t\treturn new Statement() {", "-\t\t\t\t", "-\t\t\t\t\t@Override", "-\t\t\t\t\tpublic void evaluate() throws Throwable {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tlink.evaluate();", "-\t\t\t\t\t\t\tsuccesses++;", "-\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:07:01 PM) DUP? even correct?", "-\t\t\t\t\t\t\t// do nothing", "-\t\t\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t\t\t // TODO: (Oct 12, 2007 2:04:01 PM) nullsOk as argument to Assignments constructor", "-", "-\t\t\t\t\t\t\t\treportParameterizedError(e, fComplete.getAllArguments(nullsOk()));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t// TODO Auto-generated method stub", "-\t\t\t\t", "-\t\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t};", "-\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic Statement childBlock(TestMethod method) {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:00:52 PM) Name this Link", "+\t\t\t\t\t\tfinal Statement link= super.childBlock(method);", "+\t\t\t\t\t\treturn new Statement() {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t@Override", "+\t\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tlink.evaluate();", "+\t\t\t\t\t\t\t\t\tsuccesses++;", "+\t\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:07:01 PM) DUP? even correct?", "+\t\t\t\t\t\t\t\t\t// do nothing", "+\t\t\t\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t\t\t\t // TODO: (Oct 12, 2007 2:04:01 PM) nullsOk as argument to Assignments constructor", "+", "+\t\t\t\t\t\t\t\t\t\treportParameterizedError(e, complete.getAllArguments(nullsOk()));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// TODO Auto-generated method stub", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t};", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2615f0f660c4f3a46d1dfacd73ae795", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c", "commitAfterChange": "94ebd93396420bcd03ab99a352e38df822d59f67", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "diff": ["-\t\t\ttry {", "-\t\t\t\tnew JUnit4ClassRunner(getTestClass().getJavaClass()) {", "-\t\t\t\t\t@Override", "-\t\t\t\t\tprotected void collectInitializationErrors(", "-\t\t\t\t\t\t\tList<Throwable> errors) {", "-\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:08:03 PM) DUP", "-\t\t\t\t\t\t// do nothing", "-\t\t\t\t\t}", "+\t\t\tnew JUnit4ClassRunner(getTestClass().getJavaClass()) {", "+\t\t\t\t@Override", "+\t\t\t\tprotected void collectInitializationErrors(", "+\t\t\t\t\t\tList<Throwable> errors) {", "+\t\t\t\t\t// TODO: (Oct 12, 2007 12:08:03 PM) DUP", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "-\t\t\t\t\t@Override", "-\t\t\t\t\tpublic Statement childBlock(FrameworkMethod method) {", "-\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:00:52 PM) Name this Link", "-\t\t\t\t\t\tfinal Statement link= super.childBlock(method);", "-\t\t\t\t\t\treturn new Statement() {", "+\t\t\t\t@Override", "+\t\t\t\tpublic Statement childBlock(FrameworkMethod method) {", "+\t\t\t\t\t// TODO: (Oct 12, 2007 2:00:52 PM) Name this Link", "+\t\t\t\t\tfinal Statement link= super.childBlock(method);", "+\t\t\t\t\treturn new Statement() {", "-\t\t\t\t\t\t\t@Override", "-\t\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tlink.evaluate();", "-\t\t\t\t\t\t\t\t\tsuccesses++;", "-\t\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:07:01 PM) DUP? even", "-\t\t\t\t\t\t\t\t\t// correct?", "-\t\t\t\t\t\t\t\t\t// do nothing", "-\t\t\t\t\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:04:01 PM) nullsOk", "-\t\t\t\t\t\t\t\t\t// as argument to Assignments constructor", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tlink.evaluate();", "+\t\t\t\t\t\t\t\tsuccesses++;", "+\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\t\t\t\t\thandleAssumptionViolation(e);", "+\t\t\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:04:01 PM) nullsOk", "+\t\t\t\t\t\t\t\t// as argument to Assignments constructor", "-\t\t\t\t\t\t\t\t\treportParameterizedError(e, complete", "-\t\t\t\t\t\t\t\t\t\t\t.getAllArguments(nullsOk()));", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treportParameterizedError(e, complete", "+\t\t\t\t\t\t\t\t\t\t.getAllArguments(nullsOk()));", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t}", "+\t\t\t\t\t};", "+\t\t\t\t}", "-\t\t\t\t\t@Override", "-\t\t\t\t\tprotected Statement invoke(FrameworkMethod method, Object test) {", "-\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:07:28 PM) push method in", "-\t\t\t\t\t\treturn methodCompletesWithParameters(complete, test);", "-\t\t\t\t\t}", "+\t\t\t\t@Override", "+\t\t\t\tprotected Statement invoke(FrameworkMethod method, Object test) {", "+\t\t\t\t\t// TODO: (Oct 12, 2007 12:07:28 PM) push method in", "+\t\t\t\t\treturn methodCompletesWithParameters(complete, test);", "+\t\t\t\t}", "-\t\t\t\t\t@Override", "-\t\t\t\t\tprotected Statement ignoreViolatedAssumptions(", "-\t\t\t\t\t\t\tfinal Statement next) {", "-\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:15:02 PM) name this", "+\t\t\t\t@Override", "+\t\t\t\tpublic Object createTest() throws Exception {", "+\t\t\t\t\t// TODO: (Nov 26, 2007 8:44:14 PM) no matching data should", "+\t\t\t\t\t// ignore", "+\t\t\t\t\t// TODO: (Oct 12, 2007 12:31:12 PM) DUP", "+\t\t\t\t\t// TODO: (Oct 12, 2007 12:40:33 PM) honor assumption", "+\t\t\t\t\t// violations in JUnit4ClassRunner constructor", "+\t\t\t\t\t// invocations", "-\t\t\t\t\t\treturn new Statement() {", "-", "-\t\t\t\t\t\t\t@Override", "-\t\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tnext.evaluate();", "-\t\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:19:52 PM) This", "-\t\t\t\t\t\t\t\t\t// feels hacky", "-", "-\t\t\t\t\t\t\t\t\tsuccesses--;", "-\t\t\t\t\t\t\t\t\thandleAssumptionViolation(e);", "-\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:15:44 PM) Can I", "-\t\t\t\t\t\t\t\t\t// remove other calls?", "-", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t}", "-", "-\t\t\t\t\t@Override", "-\t\t\t\t\tpublic Object createTest() throws Exception {", "-\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:31:12 PM) DUP", "-\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:40:33 PM) honor assumption", "-\t\t\t\t\t\t// violations in JUnit4ClassRunner constructor", "-\t\t\t\t\t\t// invocations", "-", "-\t\t\t\t\t\treturn getTestClass().getJavaClass().getConstructors()[0]", "-\t\t\t\t\t\t\t\t.newInstance(complete", "-\t\t\t\t\t\t\t\t\t\t.getConstructorArguments(nullsOk()));", "-\t\t\t\t\t}", "-\t\t\t\t}.childBlock(fTestMethod).evaluate();", "-\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\thandleAssumptionViolation(e);", "-\t\t\t}", "+\t\t\t\t\treturn getTestClass().getJavaClass().getConstructors()[0]", "+\t\t\t\t\t\t\t.newInstance(complete", "+\t\t\t\t\t\t\t\t\t.getConstructorArguments(nullsOk()));", "+\t\t\t\t}", "+\t\t\t}.childBlock(fTestMethod).evaluate();"]}]}
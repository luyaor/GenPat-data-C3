{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f340df71dcc0975d322a77686976ea43", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a22c329d24b8552ba2901a2b27a1f2e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "0f0152a8cd6dcbdb9f9cbb6ec5ca1cf2629dc12a", "commitAfterChange": "a90b496a6595856066504baf4f737fb853a6e45d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void runChild(final FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": "      @Override     protected void runChild(final FrameworkMethod method, RunNotifier notifier)", "diff": ["-            runLeaf(methodBlock(method), description, notifier);", "+            Statement statement;", "+            try {", "+                statement = methodBlock(method);", "+            }", "+            catch (Throwable ex) {", "+                statement = new Fail(ex);", "+            }", "+            runLeaf(statement, description, notifier);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5915d79d03fc8043eee256d469e5bae4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java", "commitBeforeChange": "414e31f00b97bdd1242063495b5db7ff0c22ee5a", "commitAfterChange": "2adef6f30c64c5e5e14e9261637d113f7adda884", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public Object createTest() throws Exception", "signatureAfterChange": "      @Override     public Object createTest() throws Exception", "diff": ["-        if (fieldsAreAnnotated()) {", "-            return createTestUsingFieldInjection();", "-        } else {", "-            return createTestUsingConstructorInjection();", "+        InjectionType injectionType = getInjectionType();", "+        switch (injectionType) {", "+            case CONSTRUCTOR:", "+                return createTestUsingConstructorInjection();", "+            case FIELD:", "+                return createTestUsingFieldInjection();", "+            default:", "+                throw new IllegalStateException(\"The injection type \"", "+                        + injectionType + \" is not supported.\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc4caeebe983d4de6c0a718684bbf079", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ae6d9a0bcb668d2a4ba3038e041daa0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/model/EachTestNotifier.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void addFailure(Throwable targetException)", "signatureAfterChange": "  \tpublic void addFailure(Throwable targetException)", "diff": ["-\t", "+", "-\t\t\tMultipleFailureException mfe= (MultipleFailureException) targetException;", "-\t\t\tfor (Throwable each : mfe.getFailures())", "-\t\t\t\taddFailure(each);", "-\t\t\treturn;", "+\t\t\taddMultipleFailureException((MultipleFailureException) targetException);", "+\t\t} else {", "+\t\t\tfNotifier", "+\t\t\t\t\t.fireTestFailure(new Failure(fDescription, targetException));", "-\t\tfNotifier.fireTestFailure(new Failure(fDescription, targetException));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908f3c5591700ffee9271fb35c5ced51", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/runner/LoadingTestCollector.java", "commitBeforeChange": "b6a023c447628100c104708666eddd0b2eaa41d3", "commitAfterChange": "86b71cb1b9784a9b87c86b4f3f12632ae6773d1f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tboolean hasPublicConstructor(Class testClass)", "signatureAfterChange": " \t \tboolean hasPublicConstructor(Class testClass)", "diff": ["-\t\tClass[] args= { String.class };", "-\t\tConstructor c= null;", "-\t\t\tc= testClass.getConstructor(args);", "-\t\t} catch(Exception e) {", "+\t\t\tTestSuite.getTestConstructor(testClass);", "+\t\t} catch(NoSuchMethodException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be51146a84434941b2f03b0c15a75fb0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "c7300033b5622aa02a58d4570e598697e58b0b4d", "commitAfterChange": "0804ef4cd09b0e94783a9882c60914e22fca5108", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public ErrorReportingRunner(Class<?> testClass, Throwable cause)", "signatureAfterChange": "      public ErrorReportingRunner(Class<?> testClass, Throwable cause)", "diff": ["-        if (testClass == null) {", "-            throw new NullPointerException(\"Test class cannot be null\");", "+        this(cause, new Class<?>[] { testClass });", "+    }", "-        this.testClass = testClass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5af069901583616058c88315f4042a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "ff7c54f564eac489de1aef062ff0048c128e1c4f", "commitAfterChange": "b23ffd790b06f561290239ef3b7a5239ba755f10", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void validateFields(List<Throwable> errors)", "signatureAfterChange": "  \tprivate void validateFields(List<Throwable> errors)", "diff": ["-\t\tfor (FrameworkField each : getTestClass()", "-\t\t\t\t.getAnnotatedFields(Rule.class))", "-\t\t\tvalidateRuleField(each.getField(), errors);", "-\t}", "+\t\tRULE_VALIDATOR.validate(getTestClass(), errors);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0a829148624fdc1459abb2ddb1ff3df", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/TestSuite.java", "commitBeforeChange": "5139a1be36da4ed64a860de82e7d74f2e5405037", "commitAfterChange": "0cdf29715af64edd05229c400f214417fecdef89", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t  \tprivate boolean isTestMethod(Method m)", "signatureAfterChange": " \t  \tprivate boolean isTestMethod(Method m)", "diff": ["-\t\tString name= m.getName();", "-\t\tClass[] parameters= m.getParameterTypes();", "-\t\tClass returnType= m.getReturnType();", "-\t\treturn parameters.length == 0 && name.startsWith(\"test\") && returnType.equals(Void.TYPE);", "+\t\treturn ", "+\t\t\tm.getParameterTypes().length == 0 && ", "+\t\t\tm.getName().startsWith(\"test\") && ", "+\t\t\tm.getReturnType().equals(Void.TYPE);"]}]}
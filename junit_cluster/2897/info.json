{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13be88d1a93e65c5cfa9c79ecb5d8583", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bf5786a075fbef0385a8c74a9aea318", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "a8629da96207e1ce71ead9ba9f85bc324f09bcab", "commitAfterChange": "28d398d01c7a294ca9db34b90e2b1e3c874a8bc0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\tvoid run()", "signatureAfterChange": " \t\tvoid run()", "diff": ["-\t\t\tfor (Iterator<RunListener> all= fListeners.iterator(); all.hasNext();)", "-\t\t\t\ttry {", "-\t\t\t\t\tnotifyListener(all.next());", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\tall.remove(); // Remove the offending listener first to avoid an infinite loop", "-\t\t\t\t\tfireTestFailure(new Failure(Description.TEST_MECHANISM, e));", "-\t\t\t\t}", "+            synchronized ( fListenersLock) {", "+                for (Iterator<RunListener> all= fListeners.iterator(); all.hasNext();)", "+                    try {", "+                        notifyListener(all.next());", "+                    } catch (Exception e) {", "+                        all.remove(); // Remove the offending listener first to avoid an infinite loop", "+                        fireTestFailure(new Failure(Description.TEST_MECHANISM, e));", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878a4ff16773b1a42b7126d61d420998", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "a8629da96207e1ce71ead9ba9f85bc324f09bcab", "commitAfterChange": "28d398d01c7a294ca9db34b90e2b1e3c874a8bc0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void addFirstListener(RunListener listener)", "signatureAfterChange": " \tpublic void addFirstListener(RunListener listener)", "diff": ["-\t\tfListeners.add(0, listener);", "+        synchronized ( fListenersLock) {", "+\t\t    fListeners.add(0, listener);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f6221795453fddd2db846b60dbf967d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b3b930e29a301704d7c990621f5be2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "commitAfterChange": "fba19ba73a93dcc2d18942b3cf4992ce010afdb2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private Thread getStuckThread (Thread mainThread)", "signatureAfterChange": "     private Thread getStuckThread (Thread mainThread)", "diff": ["-    \tif (fThreadGroup == null) return null;", "-    \tfinal int count = fThreadGroup.activeCount(); // this is just an estimate", "-    \tint enumSize = Math.max (count * 2, 100);", "-    \tint enumCount;", "-    \tThread[] threads;", "-\t\tint loopCount = 0;", "-    \twhile (true) {", "-    \t\tthreads = new Thread[enumSize];", "-    \t\tenumCount = fThreadGroup.enumerate (threads);", "-    \t\tif (enumCount < enumSize) break;", "+        if (fThreadGroup == null) return null;", "+        Thread[] threadsInGroup = getThreadArray(fThreadGroup);", "+        if (threadsInGroup == null) return null;", "+        ", "+        // Now that we have all the threads in the test's thread group: Assume that", "+        // any thread we're \"stuck\" in is RUNNABLE.  Look for all RUNNABLE threads. ", "+        // If just one, we return that (unless it equals threadMain).  If there's more", "+        // than one, pick the one that's using the most CPU time, if this feature is", "+        // supported.", "+        Thread stuckThread = null;", "+        long maxCpuTime = 0;", "+        for (Thread thread : threadsInGroup) {", "+            if (thread.getState() == Thread.State.RUNNABLE) {", "+                long threadCpuTime = cpuTime(thread);", "+                if (stuckThread == null || threadCpuTime > maxCpuTime) {", "+                    stuckThread = thread;", "+                    maxCpuTime = threadCpuTime;", "+                }", "+            }               ", "+        }", "+        return (stuckThread == mainThread) ? null : stuckThread;", "+    }", "-    \t\tenumSize += 100;", "-    \t\tif (++loopCount >= 5) return null;", "-    \t\t// threads are proliferating too fast for us.  Bail before we get into ", "-    \t\t// trouble.", "-    \t} ", "-    \t", "-    \t// Now that we have all the threads in the test's thread group: Assume that", "-    \t// any thread we're \"stuck\" in is RUNNABLE.  Look for all RUNNABLE threads. ", "-    \t// If just one, we return that (unless it equals threadMain).  If there's more", "-    \t// than one, pick the one that's using the most CPU time, if this feature is", "-    \t// supported.", "-    \tThread stuckThread = null;", "-    \tlong maxCpuTime = 0;", "-    \tfor (int i = 0; i < enumCount; i++) {", "-    \t\tif (threads[i].getState() == Thread.State.RUNNABLE) {", "-                long threadCpuTime = cpuTime (threads [i]);", "-                if (stuckThread == null || threadCpuTime > maxCpuTime) {", "-                    stuckThread = threads[i];", "-                    maxCpuTime = threadCpuTime;", "-                }", "-    \t\t}   \t\t\t", "-    \t}", "-    \treturn (stuckThread == mainThread) ? null : stuckThread;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caa28d50822baecb845cbf52f28ea021", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "commitAfterChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String[] args)", "diff": ["-", "-    String[] parseOptions(String[] args) {", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-", "-        for (int i = 0; i != args.length; ++i) {", "-            String arg = args[i];", "-", "-            try {", "-                if (arg.equals(\"--\")) {", "-                    return Arrays.copyOfRange(args, i + 1, args.length);", "-                } else if (arg.startsWith(\"--\")) {", "-                    if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {", "-                        String filterSpec;", "-                        if (arg.equals(\"--filter\")) {", "-                            ++i;", "-                            filterSpec = args[i];", "-                        } else {", "-                            filterSpec = arg.substring(arg.indexOf('=') + 1);", "-                        }", "-", "-                        filter = filter.intersect(filterFactoryFactory.createFilterFromFilterSpec(filterSpec));", "-                    } else {", "-                        Description description = Description.createSuiteDescription(arg);", "-                        Failure failure =", "-                                new Failure(description, new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));", "-", "-                        failures.add(failure);", "-                    }", "-                } else {", "-                    return Arrays.copyOfRange(args, i, args.length);", "-                }", "-            } catch (FilterFactory.FilterNotCreatedException e) {", "-                system.out().println(\"Could not find filter: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(arg);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch(FilterFactoryFactory.FilterFactoryNotCreatedException e) {", "-                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(arg);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            }", "-        }", "-", "-        return null;", "-    }", "+\r", "+    String[] parseOptions(String[] args) {\r", "+        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();\r", "+\r", "+        for (int i = 0; i != args.length; ++i) {\r", "+            String arg = args[i];\r", "+\r", "+            try {\r", "+                if (arg.equals(\"--\")) {\r", "+                    return Arrays.copyOfRange(args, i + 1, args.length);\r", "+                } else if (arg.startsWith(\"--\")) {\r", "+                    if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {\r", "+                        String filterSpec;\r", "+                        if (arg.equals(\"--filter\")) {\r", "+                            ++i;\r", "+                            filterSpec = args[i];\r", "+                        } else {\r", "+                            filterSpec = arg.substring(arg.indexOf('=') + 1);\r", "+                        }\r", "+\r", "+                        filter = filter.intersect(filterFactoryFactory.createFilterFromFilterSpec(\r", "+                                createSuiteDescription(arg), filterSpec));\r", "+                    } else {\r", "+                        Description description = createSuiteDescription(arg);\r", "+                        Failure failure = new Failure(\r", "+                                description,\r", "+                                new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "+\r", "+                        failures.add(failure);\r", "+                    }\r", "+                } else {\r", "+                    return Arrays.copyOfRange(args, i, args.length);\r", "+                }\r", "+            } catch (FilterFactory.FilterNotCreatedException e) {\r", "+                system.out().println(\"Could not find filter: \" + e.getMessage());\r", "+                Description description = createSuiteDescription(arg);\r", "+                Failure failure = new Failure(description, e);\r", "+                failures.add(failure);\r", "+            } catch(FilterFactoryFactory.FilterFactoryNotCreatedException e) {\r", "+                system.out().println(\"Could not find filter factory: \" + e.getMessage());\r", "+                Description description = createSuiteDescription(arg);\r", "+                Failure failure = new Failure(description, e);\r", "+                failures.add(failure);\r", "+            }\r", "+        }\r", "+\r", "+        return null;\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea96748b8ea942ed7177f4df5bf390a8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "commitAfterChange": "318adee43493447e22bbea89e0f17260e0186a14", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     Result runMain(JUnitSystem system, String... args)", "diff": ["-        List<Class<?>> classes = new ArrayList<Class<?>>();", "-        List<Failure> failures = new ArrayList<Failure>();", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-        for (String each : args) {", "-            try {", "-                if (each.startsWith(\"--\")) {", "-                    if (each.startsWith(\"--filter\")) {", "-                        String filterSpec = each.substring(each.indexOf('=') + 1);", "-                        Filter filter = filterFactoryFactory.createFilterFromFilterSpec(filterSpec);", "+        JUnitCommandLineParser jUnitCommandLineParser = new JUnitCommandLineParser(system);", "+        jUnitCommandLineParser.parseArgs(args);", "-                        addFilter(filter);", "-                    } else {", "-                        system.out().println(\"JUnit knows nothing about the \" + each + \" option\");", "+        filter = filter.intersect(jUnitCommandLineParser.getFilter());", "+        List<Class<?>> classes = jUnitCommandLineParser.getClasses();", "+        List<Failure> failures = jUnitCommandLineParser.getFailures();", "-                        return new Result() {", "-                            @Override", "-                            public boolean wasSuccessful() {", "-                                return false;", "-                            }", "-                        };", "-                    }", "-                } else {", "-                    classes.add(Class.forName(each));", "-                }", "-            } catch (FilterFactory.FilterNotCreatedException e) {", "-                system.out().println(\"Could not find filter: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch (FilterFactoryFactory.FilterFactoryNotFoundException e) {", "-                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch (ClassNotFoundException e) {", "-                system.out().println(\"Could not find class: \" + each);", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            }", "-        }", "+", "+"]}]}
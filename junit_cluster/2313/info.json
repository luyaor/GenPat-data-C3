{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e72915238e026cee66ef5ebe095b877", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324d70dbd3a261967924b3e702f6c1bf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tif (getTest() instanceof Filterable) {", "-\t\t\tFilterable adapter= (Filterable) getTest();", "-\t\t\tadapter.filter(filter);", "-\t\t} else if (getTest() instanceof TestSuite) {", "-\t\t\tTestSuite suite= (TestSuite) getTest();", "-\t\t\tTestSuite filtered= new TestSuite(suite.getName());", "-\t\t\tint n= suite.testCount();", "-\t\t\tfor (int i= 0; i < n; i++) {", "-\t\t\t\tTest test= suite.testAt(i);", "-\t\t\t\tif (filter.shouldRun(makeDescription(test)))", "-\t\t\t\t\tfiltered.addTest(test);", "-\t\t\t}", "-\t\t\tsetTest(filtered);", "-\t\t}", "-\t}", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        if (getTest() instanceof Filterable) {", "+            Filterable adapter = (Filterable) getTest();", "+            adapter.filter(filter);", "+        } else if (getTest() instanceof TestSuite) {", "+            TestSuite suite = (TestSuite) getTest();", "+            TestSuite filtered = new TestSuite(suite.getName());", "+            int n = suite.testCount();", "+            for (int i = 0; i < n; i++) {", "+                Test test = suite.testAt(i);", "+                if (filter.shouldRun(makeDescription(test))) {", "+                    filtered.addTest(test);", "+                }", "+            }", "+            setTest(filtered);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c1c169e54c7877a5c6227cc9fcb801f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void validateInstanceMethods()", "signatureAfterChange": "      public void validateInstanceMethods()", "diff": ["-\tpublic void validateInstanceMethods() {", "-\t\tvalidateTestMethods(After.class, false);", "-\t\tvalidateTestMethods(Before.class, false);", "-\t\tvalidateTestMethods(Test.class, false);", "-\t\t", "-\t\tList<Method> methods= fTestClass.getAnnotatedMethods(Test.class);", "-\t\tif (methods.size() == 0)", "-\t\t\tfErrors.add(new Exception(\"No runnable methods\"));", "-\t}", "+    public void validateInstanceMethods() {", "+        validateTestMethods(After.class, false);", "+        validateTestMethods(Before.class, false);", "+        validateTestMethods(Test.class, false);", "+        List<Method> methods = fTestClass.getAnnotatedMethods(Test.class);", "+        if (methods.size() == 0) {", "+            fErrors.add(new Exception(\"No runnable methods\"));", "+        }", "+    }"]}]}
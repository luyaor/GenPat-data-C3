{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8147c6f8e27362bdf02549e10bd1b18", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eb7f849a87c2ea8eb06e4f3e7a5baf2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/experimental/theories/DataPointMethodTest.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate List<PotentialParameterValue> potentialValues(Method method) \t\t\tthrows Exception", "signatureAfterChange": "  \tprivate List<PotentialAssignment> potentialValues(Method method) \t\t\tthrows Exception", "diff": ["-\tprivate List<PotentialParameterValue> potentialValues(Method method)", "+\tprivate List<PotentialAssignment> potentialValues(Method method)", "-\t\treturn ParameterSignature.signatures(method).get(0).getPotentialValues(", "-\t\t\t\tnew HasDateMethod());", "+\t\treturn new AssignmentRequest(new HasDateMethod(), ParameterSignature", "+\t\t\t\t.signatures(method).get(0)).getPotentialAssignments();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963e8f41749685eff9fb9be6a187b31d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "1350d0562466adbea1a9f8408084acdd005bfc13", "commitAfterChange": "bd8a96dbbfe93f134f75c768e5c1254cff8a9e9f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic static Assignments allUnassigned(EachTestNotifier context, \t\t\tMethod testMethod, Object target)", "signatureAfterChange": "  \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass)", "diff": ["-\tpublic static Assignments allUnassigned(EachTestNotifier context,", "-\t\t\tMethod testMethod, Object target) {", "-\t\treturn new Assignments(context, ParameterSignature", "-\t\t\t\t.signatures(testMethod), target);", "+", "+\tpublic static Assignments allUnassigned(Method testMethod,", "+\t\t\tClass<?> testClass) {", "+\t\treturn new Assignments(ParameterSignature.signatures(testMethod),", "+\t\t\t\ttestClass);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe5d0fab53535271dd144217649c5bef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a8a1b7a8680f21a2da4c3fa36ad8150", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/Invoke.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void run(FailureListener listener)", "signatureAfterChange": " \t \t@Override \tpublic void run() throws Throwable", "diff": ["-\tpublic void run(FailureListener listener) {", "-\t\ttry {", "-\t\t\tfTestMethod.invokeExplosively(fTarget);", "-\t\t} catch (Throwable e) {", "-\t\t\tlistener.addFailure(e);", "-\t\t}", "+\tpublic void run() throws Throwable {", "+\t\tfTestMethod.invokeExplosively(fTarget);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de5bafc68ab5f5928f9383a283cc3306", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/model/TestElement.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic boolean runBefores(FailureListener listener, Object target)", "signatureAfterChange": "  \tpublic void runBefores(Object target) throws Throwable", "diff": ["-\tpublic boolean runBefores(FailureListener listener, Object target) {", "-\t\ttry {", "+\tpublic void runBefores(Object target) throws Throwable {", "-\t\t\treturn true;", "-\t\t} catch (AssumptionViolatedException e) {", "-\t\t\treturn false;", "-\t\t} catch (Throwable e) {", "-\t\t\tlistener.addFailure(e);", "-\t\t\treturn false;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc30e153bfc02cd1d453aef91fd12c83", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7", "commitAfterChange": "cb6abf6fc729f07c5d60b0756e91af444400b4b5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private List<Runner> createRunnersForParameters(Iterable<Object> allParameters, String namePattern) throws Exception", "signatureAfterChange": "      private List<TestWithParameters> createTestsForParameters(             Iterable<Object> allParameters, String namePattern)             throws Exception", "diff": ["-    private List<Runner> createRunnersForParameters(Iterable<Object> allParameters, String namePattern) throws Exception {", "-            int i = 0;", "-            List<Runner> children = new ArrayList<Runner>();", "-            for (Object parametersOfSingleTest : allParameters) {", "-                children.add(createRunnerWithNotNormalizedParameters(", "-                    namePattern, i++, parametersOfSingleTest));", "-            return children;", "+    private List<TestWithParameters> createTestsForParameters(", "+            Iterable<Object> allParameters, String namePattern)", "+            throws Exception {", "+        int i = 0;", "+        List<TestWithParameters> children = new ArrayList<TestWithParameters>();", "+        for (Object parametersOfSingleTest : allParameters) {", "+            children.add(createTestWithNotNormalizedParameters(namePattern,", "+                    i++, parametersOfSingleTest));", "+        }", "+        return children;", "+    }"]}]}
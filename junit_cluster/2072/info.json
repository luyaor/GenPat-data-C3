{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f5fe8c59b949ff431d0086e139c7ec1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57787f7a5f5ca6880f4a198ff94aeabc", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "bfc94ee739d62127c7477300b26127bd560765a1", "commitAfterChange": "04f4f3197084ad9ad7c050ce1a40d6f4421662f4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t\t \tprotected JCheckBox createUseLoaderCheckBox()", "signatureAfterChange": " \t\t \tprotected JCheckBox createUseLoaderCheckBox()", "diff": ["-\t\tboolean useLoader= useReoadingTestSuiteLoader();", "-\t\treturn new JCheckBox(\"Use custom class loader for loading tests\", useLoader);", "+\t\tboolean useLoader= useReloadingTestSuiteLoader();", "+\t\tJCheckBox box= new JCheckBox(\"Reload classes every run\", useLoader);", "+\t\tbox.setToolTipText(\"Use a custom class loader to reload the classes for every run\");", "+\t\treturn box;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa3ca36511b796bb44905b3756a716fb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java", "commitBeforeChange": "b28fe09d1a54955bed2e4db5352c14fae195a418", "commitAfterChange": "794abc271d82fa48681657b41e35eabb420e5172", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "          @Test         public void run5() throws IOException", "signatureAfterChange": "          @Test         public void run5() throws IOException", "diff": ["+            File tmp = File.createTempFile(\"dummy\", \".tmp\");", "+            tmp.deleteOnExit();", "-                File tmp = File.createTempFile(\"dummy\", \".tmp\");", "-                tmp.deleteOnExit();", "-                FileChannel in = new RandomAccessFile(tmp, \"rw\").getChannel();", "+                FileChannel channel = new RandomAccessFile(tmp, \"rw\").getChannel();", "-                in.write(ByteBuffer.wrap(data));//Interrupted thread closes channel and throws ClosedByInterruptException.", "-                in.close();", "+                ByteBuffer buffer = ByteBuffer.wrap(data);", "+                channel.write(buffer);//Interrupted thread closes channel and throws ClosedByInterruptException.", "+                channel.close();", "+                tmp.delete();"]}]}
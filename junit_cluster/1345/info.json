{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07fa94f70898dfff5a3aecbdad06ecec", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3e70e6572471e567a91194dde53f98", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b", "commitAfterChange": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected Notifier chain(TestMethod method, Object test)", "signatureAfterChange": " \t \tpublic Statement chain(TestMethod method)", "diff": ["+\tpublic Statement chain(TestMethod method) {", "+\t\tObject test;", "+\t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?", "+", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t\treturn new Fail(e);", "-", "-\tprotected Notifier chain(TestMethod method, Object test) {", "-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?", "-", "-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?", "-", "+\t\t", "-\t\treturn notifying(method, link);", "+\t\treturn link;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3785c48320c71a75c024403b04285da", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f0ef837a40922ac08c608661385abf71732975d3", "commitAfterChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier)", "signatureAfterChange": " \t \tprotected Link chain(TestMethod method)", "diff": ["-\tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {", "+\tprotected Link chain(TestMethod method) {", "-", "-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?", "-", "+\t\tObject test;", "+\t\ttry {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "+\t\t\treturn throwException(e);", "+\t\t}", "+\t\t", "-\t\treturn notifying(method, link, notifier);", "+\t\treturn link;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0968304544c2cc054d408ed588527b6e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026e6e51d5e2a72db544220fce53c3a0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "commitAfterChange": "421ab330509a53302f56b209595f55b23bfdfc0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t\tpublic Description getDescription()", "signatureAfterChange": "  \tprivate static String createSuiteDescription(TestSuite ts)", "diff": ["-", "-\t\tpublic Description getDescription() {", "-\t\t\tString name= fSuite.getName() == null ? \"\" : fSuite.getName();", "-\t\t\tDescription description= Description.createSuiteDescription(name);", "-\t\t\tint n= fSuite.testCount();", "-\t\t\tfor (int i= 0; i < n; i++) {", "-\t\t\t\tDescription childDescription= makeDescription(fSuite.testAt(i));", "-\t\t\t\tif (fFilter.shouldRun(childDescription)) {", "-\t\t\t\t\tdescription.addChild(childDescription);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn description;", "-\t\t}", "+\tprivate static String createSuiteDescription(TestSuite ts) {", "+\t\tint count= ts.countTestCases();", "+\t\tString example = count == 0 ? \"\" : String.format(\" [example: %s]\", ts.testAt(0));", "+\t\treturn String.format(\"TestSuite with %s tests%s\", count, example);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35fb85a6209a25e1f8fa034183b6d05a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\tprivate Object[] computeParams() throws Exception", "signatureAfterChange": "  \tprivate void createRunnersForParameters(Iterable<Object[]> allParameters) \t\t\tthrows InitializationError, Exception", "diff": ["-", "-\t\tprivate Object[] computeParams() throws Exception {", "-\t\t\ttry {", "-\t\t\t\treturn fParameterList.get(fParameterSetNumber);", "-\t\t\t} catch (ClassCastException e) {", "-\t\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\t\"%s.%s() must return a Collection of arrays.\",", "-\t\t\t\t\t\tgetTestClass().getName(), getParametersMethod(", "-\t\t\t\t\t\t\t\tgetTestClass()).getName()));", "-\t\t\t}", "+\tprivate void createRunnersForParameters(Iterable<Object[]> allParameters)", "+\t\t\tthrows InitializationError, Exception {", "+\t\ttry {", "+\t\t\tint i= 0;", "+\t\t\tfor (Object[] parametersOfSingleTest : allParameters) {", "+\t\t\t\tTestClassRunnerForParameters runner= new TestClassRunnerForParameters(", "+\t\t\t\t\t\tgetTestClass().getJavaClass(), parametersOfSingleTest,", "+\t\t\t\t\t\ti);", "+\t\t\t\trunners.add(runner);", "+\t\t\t\t++i;", "+\t\t\t}", "+\t\t} catch (ClassCastException e) {", "+\t\t\tthrow parametersMethodReturnedWrongType();", "+\t\t}", "+\t}"]}]}
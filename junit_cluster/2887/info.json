{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ffc72b4b8542936efb05a053cc0049f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3883f6c2fe870280f2b453cfb6c5b523", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic TestClass(Class<?> klass)", "signatureAfterChange": "     public TestClass(Class<?> klass)", "diff": ["-\t */", "-\tpublic TestClass(Class<?> klass) {", "-\t\tfClass= klass;", "-\t\tif (klass != null && klass.getConstructors().length > 1)", "-\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\"Test class can only have one constructor\");", "+     */", "+    public TestClass(Class<?> klass) {", "+        fClass = klass;", "+        if (klass != null && klass.getConstructors().length > 1) {", "+            throw new IllegalArgumentException(", "+                    \"Test class can only have one constructor\");", "+        }", "-\t\tfor (Class<?> eachClass : getSuperClasses(fClass)) {", "-\t\t\tfor (Method eachMethod : MethodSorter.getDeclaredMethods(eachClass))", "-\t\t\t\taddToAnnotationLists(new FrameworkMethod(eachMethod),", "-\t\t\t\t\t\tfMethodsForAnnotations);", "-\t\t\tfor (Field eachField : eachClass.getDeclaredFields())", "-\t\t\t\taddToAnnotationLists(new FrameworkField(eachField),", "-\t\t\t\t\t\tfFieldsForAnnotations);", "-\t\t}", "-\t}", "+        for (Class<?> eachClass : getSuperClasses(fClass)) {", "+            for (Method eachMethod : MethodSorter.getDeclaredMethods(eachClass)) {", "+                addToAnnotationLists(new FrameworkMethod(eachMethod),", "+                        fMethodsForAnnotations);", "+            }", "+            for (Field eachField : eachClass.getDeclaredFields()) {", "+                addToAnnotationLists(new FrameworkField(eachField),", "+                        fFieldsForAnnotations);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85220a5b4a7a1c0085845e74df10d94b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass)", "signatureAfterChange": "      public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass)", "diff": ["-\t", "-\tpublic List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {", "-\t\tList<Method> results= new ArrayList<Method>();", "-\t\tfor (Class<?> eachClass : getSuperClasses(fClass)) {", "-\t\t\tMethod[] methods= MethodSorter.getDeclaredMethods(eachClass);", "-\t\t\tfor (Method eachMethod : methods) {", "-\t\t\t\tAnnotation annotation= eachMethod.getAnnotation(annotationClass);", "-\t\t\t\tif (annotation != null && ! isShadowed(eachMethod, results)) ", "-\t\t\t\t\tresults.add(eachMethod);", "-\t\t\t}", "-\t\t}", "-\t\tif (runsTopToBottom(annotationClass))", "-\t\t\tCollections.reverse(results);", "-\t\treturn results;", "-\t}", "+    public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {", "+        List<Method> results = new ArrayList<Method>();", "+        for (Class<?> eachClass : getSuperClasses(fClass)) {", "+            Method[] methods = MethodSorter.getDeclaredMethods(eachClass);", "+            for (Method eachMethod : methods) {", "+                Annotation annotation = eachMethod.getAnnotation(annotationClass);", "+                if (annotation != null && !isShadowed(eachMethod, results)) {", "+                    results.add(eachMethod);", "+                }", "+            }", "+        }", "+        if (runsTopToBottom(annotationClass)) {", "+            Collections.reverse(results);", "+        }", "+        return results;", "+    }"]}]}
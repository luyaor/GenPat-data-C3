{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "127f495c35ff2f8742053f8d64b718ad", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f5ef7fefae509c61691ee8745eb452d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tvoid run()", "signatureAfterChange": "          void run()", "diff": ["-\t\tvoid run() {", "-\t\t\tsynchronized (fListeners) {", "-\t\t\t\tList<RunListener> safeListeners= new ArrayList<RunListener>();", "-\t\t\t\tList<Failure> failures= new ArrayList<Failure>();", "-\t\t\t\tfor (Iterator<RunListener> all= fCurrentListeners.iterator(); all", "-\t\t\t\t\t\t.hasNext();)", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tRunListener listener= all.next();", "-\t\t\t\t\t\tnotifyListener(listener);", "-\t\t\t\t\t\tsafeListeners.add(listener);", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\tfailures.add(new Failure(Description.TEST_MECHANISM, e));", "-\t\t\t\t\t}", "-\t\t\t\tfireTestFailures(safeListeners, failures);", "-\t\t\t}", "-\t\t}", "+        void run() {", "+            synchronized (fListeners) {", "+                List<RunListener> safeListeners = new ArrayList<RunListener>();", "+                List<Failure> failures = new ArrayList<Failure>();", "+                for (Iterator<RunListener> all = fCurrentListeners.iterator(); all", "+                        .hasNext(); ) {", "+                    try {", "+                        RunListener listener = all.next();", "+                        notifyListener(listener);", "+                        safeListeners.add(listener);", "+                    } catch (Exception e) {", "+                        failures.add(new Failure(Description.TEST_MECHANISM, e));", "+                    }", "+                }", "+                fireTestFailures(safeListeners, failures);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ee4bc897581954ea7eefd5fd862e46", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "6fd44daf9ecd93d78372c4a37c4d54bc3c3577d8", "commitAfterChange": "72af03c49fdad5f10e36c7eb4e7045feb971d253", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "          void run()", "signatureAfterChange": "          void run()", "diff": ["-            synchronized (fListeners) {", "-                List<RunListener> safeListeners = new ArrayList<RunListener>();", "-                List<Failure> failures = new ArrayList<Failure>();", "-                for (Iterator<RunListener> all = fCurrentListeners.iterator(); all", "-                        .hasNext(); ) {", "-                    try {", "-                        RunListener listener = all.next();", "-                        notifyListener(listener);", "-                        safeListeners.add(listener);", "-                    } catch (Exception e) {", "-                        failures.add(new Failure(Description.TEST_MECHANISM, e));", "-                    }", "+            int capacity = fCurrentListeners.size();", "+            ArrayList<RunListener> safeListeners = new ArrayList<RunListener>(capacity);", "+            ArrayList<Failure> failures = new ArrayList<Failure>(capacity);", "+            for (RunListener listener : fCurrentListeners) {", "+                try {", "+                    notifyListener(listener);", "+                    safeListeners.add(listener);", "+                } catch (Exception e) {", "+                    failures.add(new Failure(Description.TEST_MECHANISM, e));", "-                fireTestFailures(safeListeners, failures);", "+            fireTestFailures(safeListeners, failures);"]}]}
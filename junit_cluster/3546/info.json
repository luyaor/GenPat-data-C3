{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18a5d13e815d940d149f24e28436ff10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d47cbb5797d5fb0b6879586521757d86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethodRunner.java", "commitBeforeChange": "4081076e513e84bb2376f889d4108e64e9a18653", "commitAfterChange": "a58514aec7e843339be24980e92aeeb759327ffb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\t@Override \t\tpublic void run(Roadie context) throws Throwable", "signatureAfterChange": " \t\t@Override \t\tpublic void run(Roadie context) throws Throwable", "diff": ["-\t\t\ttry {", "-\t\t\t\trunWithAssignment(Assignments.allUnassigned(context,", "-\t\t\t\t\t\tfTestMethod.getMethod()));", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\tthrow new InvocationTargetException(e);", "-\t\t\t}", "+\t\t\trunWithAssignment(Assignments.allUnassigned(context, fTestMethod", "+\t\t\t\t\t.getMethod()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb61fb6dc2688f8154c131bb1504f6ed", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "4d6f0702dae590809b808230f027a60aa0a4a345", "commitAfterChange": "b737131b847c53bb4f1cf6dbf86f586008550eba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\t@Override \t\tpublic void run(RunNotifier notifier)", "signatureAfterChange": "  \t\t\tpublic void finished()", "diff": ["-", "-\t\t@Override", "-\t\tpublic void run(RunNotifier notifier) {", "-\t\t\tsuper.run(notifier);", "-\t\t\tfor (Future<Object> each : fResults)", "-\t\t\t\ttry {", "-\t\t\t\t\teach.get();", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\te.printStackTrace();", "-\t\t\t\t}", "-\t\t}", "+\t\t\tpublic void finished() {", "+\t\t\t\tfor (Future<Object> each : fResults)", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\teach.get();", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}", "+\t\t\t}"]}]}
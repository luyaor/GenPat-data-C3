{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c8cb996ea84bc7f5dd8a1dc96a3a5e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a213020c1a6471fdf1d80b53e7eba936", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "1cec456a2c5638818959856eb3cef98743cbe08b", "commitAfterChange": "0ce06206263ed060bd0ede049c1713286c2487ea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tvoid run()", "signatureAfterChange": "  \t\tvoid run()", "diff": ["+", "-\t\t\t\tfor (Iterator<RunListener> all= fListeners.iterator(); all.hasNext();)", "+\t\t\t\tList<RunListener> safeListeners= new ArrayList<RunListener>();", "+\t\t\t\tList<Failure> failures= new ArrayList<Failure>();", "+\t\t\t\tfor (Iterator<RunListener> all= fCurrentListeners.iterator(); all", "+\t\t\t\t\t\t.hasNext();)", "-\t\t\t\t\t\tnotifyListener(all.next());", "+\t\t\t\t\t\tRunListener listener= all.next();", "+\t\t\t\t\t\tnotifyListener(listener);", "+\t\t\t\t\t\tsafeListeners.add(listener);", "-\t\t\t\t\t\tall.remove(); // Remove the offending listener first to avoid an infinite loop", "-\t\t\t\t\t\tfireTestFailure(new Failure(Description.TEST_MECHANISM, e));", "+\t\t\t\t\t\tfailures.add(new Failure(Description.TEST_MECHANISM, e));", "+\t\t\t\tfireTestFailures(safeListeners, failures);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf87de67af91dad461d05c3f3522458", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-        StatementThread thread = evaluateStatement();", "-        if (!thread.fFinished) {", "-            throwExceptionForUnfinishedThread(thread);", "-        }", "-    }", "+        FutureTask<Throwable> task = new FutureTask<Throwable>(new CallableStatement());", "+        Thread thread = new Thread(task, \"Time-limited test\");", "+        Throwable throwable = getResult(task, thread);", "+        if (throwable != null) {", "+        \tthrow throwable;"]}]}
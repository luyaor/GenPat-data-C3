{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccf9d07b56e7f61189708ffa815f3f74", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4551868f2d69cd7c63ed6123f4d1276d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException, \t\t\t\tIllegalAccessException, InvocationTargetException, \t\t\t\tNoSuchMethodException, Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException, \t\t\t\tIllegalAccessException, InvocationTargetException, \t\t\t\tNoSuchMethodException, Throwable", "diff": ["-\t\t\t\tnew TheoryClassRunner(getTestClass().getJavaClass(), complete).chain(fTestMethod).evaluate();", "+\t\t\t\tnew JUnit4ClassRunner(getTestClass().getJavaClass()) {", "+\t\t\t\t\t@Override", "+\t\t\t\t\tprotected void collectInitializationErrors(", "+\t\t\t\t\t\t\tList<Throwable> errors) {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:08:03 PM) DUP", "+\t\t\t\t\t\t// do nothing", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic Statement childBlock(TestMethod method) {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:00:52 PM) Name this Link", "+\t\t\t\t\t\tfinal Statement link= super.childBlock(method);", "+\t\t\t\t\t\treturn new Statement() {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t@Override", "+\t\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tlink.evaluate();", "+\t\t\t\t\t\t\t\t\tsuccesses++;", "+\t\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:07:01 PM) DUP? even correct?", "+\t\t\t\t\t\t\t\t\t// do nothing", "+\t\t\t\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t\t\t\t // TODO: (Oct 12, 2007 2:04:01 PM) nullsOk as argument to Assignments constructor", "+", "+\t\t\t\t\t\t\t\t\t\treportParameterizedError(e, complete.getAllArguments(nullsOk()));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// TODO Auto-generated method stub", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t};", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t@Override", "+\t\t\t\t\tprotected Statement invoke(TestMethod method, Object test) {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:07:28 PM) push method in", "+\t\t\t\t\t\treturn methodCompletesWithParameters(complete, test);", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t@Override", "+\t\t\t\t\tprotected Statement ignoreViolatedAssumptions(final Statement next) {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:15:02 PM) name this", "+", "+\t\t\t\t\t\treturn new Statement() {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t@Override", "+\t\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tnext.evaluate();\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:19:52 PM) This feels hacky", "+", "+\t\t\t\t\t\t\t\t\tsuccesses--;", "+\t\t\t\t\t\t\t\t\thandleAssumptionViolation(e);", "+\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:15:44 PM) Can I remove other calls?", "+", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t};", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic Object createTest() throws Exception {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:31:12 PM) DUP", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 12:40:33 PM) honor assumption violations in JUnit4ClassRunner constructor invocations", "+", "+\t\t\t\t\t\treturn getTestClass().getJavaClass().getConstructors()[0].newInstance(complete.getConstructorArguments(nullsOk()));", "+\t\t\t\t\t}", "+\t\t\t\t}.childBlock(fTestMethod).evaluate();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef64ad72c10f8d0ced729201f7df6cbd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "4e1018a940699a38673b1861977110e6b558afb1", "commitAfterChange": "4cb9a65f450efa5f2a42128856c7b56e6d283386", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException, \t\t\t\tIllegalAccessException, InvocationTargetException, \t\t\t\tNoSuchMethodException, Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException, \t\t\t\tIllegalAccessException, InvocationTargetException, \t\t\t\tNoSuchMethodException, Throwable", "diff": ["+\t\t\t\t\tpublic Statement chain(TestMethod method) {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:00:52 PM) Name this Link", "+\t\t\t\t\t\tfinal Statement link= super.chain(method);", "+\t\t\t\t\t\treturn new Statement() {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t@Override", "+\t\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tlink.evaluate();", "+\t\t\t\t\t\t\t\t\tsuccesses++;", "+\t\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:07:01 PM) DUP? even correct?", "+\t\t\t\t\t\t\t\t\t// do nothing", "+\t\t\t\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t\t\t\t // TODO: (Oct 12, 2007 2:04:01 PM) nullsOk as argument to Assignments constructor", "+", "+\t\t\t\t\t\t\t\t\t\treportParameterizedError(e, complete.getAllArguments(nullsOk()));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// TODO Auto-generated method stub", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t};", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t@Override", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t@Override", "+\t\t\t\t\tprotected Statement ignoreViolatedAssumptions(final Statement next) {", "+\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:15:02 PM) name this", "+", "+\t\t\t\t\t\treturn new Statement() {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t@Override", "+\t\t\t\t\t\t\tpublic void evaluate() throws Throwable {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tnext.evaluate();\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:19:52 PM) This feels hacky", "+", "+\t\t\t\t\t\t\t\t\tsuccesses--;", "+\t\t\t\t\t\t\t\t\thandleAssumptionViolation(e);", "+\t\t\t\t\t\t\t\t\t// TODO: (Oct 12, 2007 2:15:44 PM) Can I remove other calls?", "+", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t};"]}]}
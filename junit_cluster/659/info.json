{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60adec0ae4f9a099f2e55845ea1e1707", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5923a0297ce96b83cdd9ec0127079c3d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@SuppressWarnings(\"deprecation\") \tprivate List<Throwable> getCauses(Throwable cause)", "signatureAfterChange": "      @SuppressWarnings(\"deprecation\")     private List<Throwable> getCauses(Throwable cause)", "diff": ["-\t@SuppressWarnings(\"deprecation\")", "-\tprivate List<Throwable> getCauses(Throwable cause) {", "-\t\tif (cause instanceof InvocationTargetException)", "-\t\t\treturn getCauses(cause.getCause());", "-\t\tif (cause instanceof InitializationError)", "-\t\t\treturn ((InitializationError) cause).getCauses();", "-\t\tif (cause instanceof org.junit.internal.runners.InitializationError)", "-\t\t\treturn ((org.junit.internal.runners.InitializationError) cause)", "-\t\t\t\t\t.getCauses();", "-\t\treturn Arrays.asList(cause);", "-\t}", "+    @SuppressWarnings(\"deprecation\")", "+    private List<Throwable> getCauses(Throwable cause) {", "+        if (cause instanceof InvocationTargetException) {", "+            return getCauses(cause.getCause());", "+        }", "+        if (cause instanceof InitializationError) {", "+            return ((InitializationError) cause).getCauses();", "+        }", "+        if (cause instanceof org.junit.internal.runners.InitializationError) {", "+            return ((org.junit.internal.runners.InitializationError) cause)", "+                    .getCauses();", "+        }", "+        return Arrays.asList(cause);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d258d5c93161d09ddc84eb27307abc1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/MultipleFailureException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"deprecation\") \tpublic static void assertEmpty(List<Throwable> errors) throws Throwable", "signatureAfterChange": "     @SuppressWarnings(\"deprecation\")     public static void assertEmpty(List<Throwable> errors) throws Throwable", "diff": ["-\t */", "-\t@SuppressWarnings(\"deprecation\")", "-\tpublic static void assertEmpty(List<Throwable> errors) throws Throwable {", "-\t\tif (errors.isEmpty())", "-\t\t\treturn;", "-\t\tif (errors.size() == 1)", "-\t\t\tthrow errors.get(0);", "-\t\t/*", "-\t\t * Many places in the code are documented to throw", "-\t\t * org.junit.internal.runners.model.MultipleFailureException.", "-\t\t * That class now extends this one, so we throw the internal", "-\t\t * exception in case developers have tests that catch", "-\t\t * MultipleFailureException.", "-\t\t */", "-\t\tthrow new org.junit.internal.runners.model.MultipleFailureException(errors);", "-\t}", "+     */", "+    @SuppressWarnings(\"deprecation\")", "+    public static void assertEmpty(List<Throwable> errors) throws Throwable {", "+        if (errors.isEmpty()) {", "+            return;", "+        }", "+        if (errors.size() == 1) {", "+            throw errors.get(0);", "+        }", "+", "+        /*", "+           * Many places in the code are documented to throw", "+           * org.junit.internal.runners.model.MultipleFailureException.", "+           * That class now extends this one, so we throw the internal", "+           * exception in case developers have tests that catch", "+           * MultipleFailureException.", "+           */", "+        throw new org.junit.internal.runners.model.MultipleFailureException(errors);", "+    }"]}]}
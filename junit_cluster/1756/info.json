{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "604171a89457c2e7871a8b3dda8d5d5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847674484d8d2cb3aaa1db65bf0cb839", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "      public ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "diff": ["-\tpublic ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)", "-\t\t\tthrows InstantiationException, IllegalAccessException {", "-\t\tParametersSuppliedBy annotation= unassigned", "-\t\t\t\t.findDeepAnnotation(ParametersSuppliedBy.class);", "-\t\tif (annotation == null)", "-\t\t\treturn null;", "-\t\treturn annotation.value().newInstance();", "-\t}", "+    public ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)", "+            throws InstantiationException, IllegalAccessException {", "+        ParametersSuppliedBy annotation = unassigned", "+                .findDeepAnnotation(ParametersSuppliedBy.class);", "+        if (annotation == null) {", "+            return null;", "+        }", "+        return annotation.value().newInstance();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5aab3eef3d84cd753a9c411605fdb5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Object[] getActualValues(int start, int stop, boolean nullsOk) \t\t\tthrows CouldNotGenerateValueException", "signatureAfterChange": "      public Object[] getActualValues(int start, int stop, boolean nullsOk)             throws CouldNotGenerateValueException", "diff": ["-\tpublic Object[] getActualValues(int start, int stop, boolean nullsOk)", "-\t\t\tthrows CouldNotGenerateValueException {", "-\t\tObject[] values= new Object[stop - start];", "-\t\tfor (int i= start; i < stop; i++) {", "-\t\t\tObject value= fAssigned.get(i).getValue();", "-\t\t\tif (value == null && !nullsOk)", "-\t\t\t\tthrow new CouldNotGenerateValueException();", "-\t\t\tvalues[i - start]= value;", "-\t\t}", "-\t\treturn values;", "-\t}", "+    public Object[] getActualValues(int start, int stop, boolean nullsOk)", "+            throws CouldNotGenerateValueException {", "+        Object[] values = new Object[stop - start];", "+        for (int i = start; i < stop; i++) {", "+            Object value = fAssigned.get(i).getValue();", "+            if (value == null && !nullsOk) {", "+                throw new CouldNotGenerateValueException();", "+            }", "+            values[i - start] = value;", "+        }", "+        return values;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e549a01763fe997ed69a3e5f8a513415", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic ParameterSupplier getSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "      public ParameterSupplier getSupplier(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "diff": ["-\tpublic ParameterSupplier getSupplier(ParameterSignature unassigned)", "-\t\t\tthrows InstantiationException, IllegalAccessException {", "-\t\tParameterSupplier supplier= getAnnotatedSupplier(unassigned);", "-\t\tif (supplier != null)", "-\t\t\treturn supplier;", "+    public ParameterSupplier getSupplier(ParameterSignature unassigned)", "+            throws InstantiationException, IllegalAccessException {", "+        ParameterSupplier supplier = getAnnotatedSupplier(unassigned);", "+        if (supplier != null) {", "+            return supplier;", "+        }", "-\t\treturn new AllMembersSupplier(fClass);", "-\t}", "+        return new AllMembersSupplier(fClass);", "+    }"]}]}
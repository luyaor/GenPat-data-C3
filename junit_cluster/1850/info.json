{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a88ee7a5e294cd64e439d9926eba4109", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f781762e40c6c98e610fe76ac242e7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "09fcafc04e07b3481ef60159de2d6ae3464b98ac", "commitAfterChange": "b8008562db24f9189b90dd0e3864a381681d527f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\tprivate List<Runner> runners(Class<?> klass, Class<?>[] annotatedClasses) \t\t\t\tthrows InitializationError", "signatureAfterChange": "  \t\tprivate List<Runner> runners(Class<?>[] children)", "diff": ["-\t\tprivate List<Runner> runners(Class<?> klass, Class<?>[] annotatedClasses)", "-\t\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "-\t\t\taddParent(klass);", "-\t\t\t\tfor (Class<?> each : annotatedClasses) {", "-\t\t\t\t\tRunner childRunner= Request.aClass(each).getRunner();", "-\t\t\t\t\tif (childRunner != null)", "-\t\t\t\t\t\trunners.add(childRunner);", "-\t\t\t\t}", "-\t\t\t\tremoveParent(klass);", "+", "+\t\tprivate List<Runner> runners(Class<?>[] children) {", "+\t\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "+\t\t\tfor (Class<?> each : children) {", "+\t\t\t\tRunner childRunner= Request.aClass(each).getRunner();", "+\t\t\t\tif (childRunner != null)", "+\t\t\t\t\trunners.add(childRunner);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6928d4e13267cb99af91db902f359d30", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "474df716f498aa2695c422cceb3e46cad999e972", "commitAfterChange": "9a2e993c544a2cd1a0b93c9f59340910f51366b4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t@Test \tpublic void rememberOldRuns()", "signatureAfterChange": "  \t@Test \tpublic void rememberOldRuns()", "diff": ["+\t\t// TODO (Mar 9, 2009 10:40:03 PM): Direct access to fHistory", "-\t\tString storedResults= fMax.fHistory.getFolder();", "-\t\tMaxCore reincarnation= MaxCore.forFolder(storedResults);", "-\t\ttry {", "-\t\t\tList<Failure> failures= reincarnation.run(TwoUnEqualTests.class)", "-\t\t\t\t\t.getFailures();", "-\t\t\tassertEquals(\"fast\", failures.get(0).getDescription()", "-\t\t\t\t\t.getMethodName());", "-\t\t\tassertEquals(\"slow\", failures.get(1).getDescription()", "-\t\t\t\t\t.getMethodName());", "-\t\t} finally {", "-\t\t\treincarnation.fHistory.forget();", "-\t\t}", "-\t}", "+\t\tMaxCore reincarnation= MaxCore.forFolder(fMaxFile);", "+\t\tList<Failure> failures= reincarnation.run(TwoUnEqualTests.class)", "+\t\t\t\t.getFailures();", "+\t\tassertEquals(\"fast\", failures.get(0).getDescription().getMethodName());", "+\t\tassertEquals(\"slow\", failures.get(1).getDescription().getMethodName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7202e582ef4be232246a26ed911b4e7c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "d6c79c0f626afd12506b6a5a672cdec84683c3ca", "commitAfterChange": "95da39292ea777ec3ff99be2bb23d46f704f683a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t@Test \tpublic void rememberOldRuns()", "signatureAfterChange": "  \t@Test \tpublic void rememberOldRuns()", "diff": ["+\t\t// TODO (Mar 9, 2009 10:40:03 PM): Direct access to fHistory", "-\t\tString storedResults= fMax.fHistory.getFolder();", "-\t\tMaxCore reincarnation= MaxCore.forFolder(storedResults);", "-\t\ttry {", "-\t\t\tList<Failure> failures= reincarnation.run(TwoUnEqualTests.class)", "-\t\t\t\t\t.getFailures();", "-\t\t\tassertEquals(\"fast\", failures.get(0).getDescription()", "-\t\t\t\t\t.getMethodName());", "-\t\t\tassertEquals(\"slow\", failures.get(1).getDescription()", "-\t\t\t\t\t.getMethodName());", "-\t\t} finally {", "-\t\t\treincarnation.fHistory.forget();", "-\t\t}", "-\t}", "+\t\tMaxCore reincarnation= MaxCore.forFolder(fMaxFile);", "+\t\tList<Failure> failures= reincarnation.run(TwoUnEqualTests.class)", "+\t\t\t\t.getFailures();", "+\t\tassertEquals(\"fast\", failures.get(0).getDescription().getMethodName());", "+\t\tassertEquals(\"slow\", failures.get(1).getDescription().getMethodName());"]}]}
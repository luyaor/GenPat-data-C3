{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "972b5fe215ad8ca56f52d08f5fdbc7a9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "112c859cdd0c622b50b25471e2217894", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/experimental/theories/runner/WithDataPointFields.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \t@Test \tpublic void honorExpected() throws Exception", "signatureAfterChange": "  \t@Ignore(\"until construction is handled in TestMethod\") \t@Test \tpublic void honorConstructorParameters()", "diff": ["-", "-\t@Test", "-\tpublic void honorExpected() throws Exception {", "-\t\tassertThat(testResult(HonorExpectedException.class).getFailures()", "-\t\t\t\t.size(), is(1));", "-\t}", "+", "+\t@Ignore(\"until construction is handled in TestMethod\")", "+\t@Test", "+\tpublic void honorConstructorParameters() {", "+\t\tassertThat(testResult(PositiveInts.class), isSuccessful());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de7248300ff43a14722695b14bd35066", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/experimental/theories/runner/WithDataPointFields.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Test \tpublic void honorTimeout() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void beforeIsCalledOnSameInstance()", "diff": ["-", "-\t@Test", "-\tpublic void honorTimeout() throws Exception {", "-\t\tassertThat(testResult(HonorTimeout.class), failureCountIs(1));", "-\t}", "+", "+\t@Test", "+\tpublic void beforeIsCalledOnSameInstance() {", "+\t\tassertThat(testResult(BeforeAndAfterOnSameInstance.class),", "+\t\t\t\tisSuccessful());", "+\t}"]}]}
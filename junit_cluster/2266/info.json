{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "517284267e1bf70d8b25147a45d4f97e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5629bd13aa5e02cbc2de39e5c8db1ba6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "74f32863f4ec20f015bd3b1a4300c93a69ce98ba", "commitAfterChange": "196c4ed79cbaca37709643b54913b361b677ae04", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     public Result runMain(JUnitSystem system, String... args)", "diff": ["-    private Result runMain(JUnitSystem system, String... args) {", "+    public Result runMain(JUnitSystem system, String... args) {", "-        List<Failure> missingClasses = new ArrayList<Failure>();", "+        List<Failure> failures = new ArrayList<Failure>();", "+        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-                classes.add(Class.forName(each));", "+                if (each.startsWith(\"--\")) {", "+                    if (each.startsWith(\"--filter\")) {", "+                        String filterSpec = each.substring(each.indexOf('=') + 1);", "+", "+                        Filter filter = filterFactoryFactory.apply(filterSpec);", "+", "+                        addFilter(filter);", "+                    } else {", "+                        system.out().println(\"JUnit knows nothing about the \" + each + \" option\");", "+", "+                        return new Result() {", "+                            @Override", "+                            public boolean wasSuccessful() {", "+                                return false;", "+                            }", "+                        };", "+                    }", "+                } else {", "+                    classes.add(Class.forName(each));", "+                }", "+            } catch (FilterFactory.FilterNotFoundException e) {", "+                system.out().println(\"Could not find filter: \" + e.getMessage());", "+                Description description = Description.createSuiteDescription(each);", "+                Failure failure = new Failure(description, e);", "+                failures.add(failure);", "+            } catch (FilterFactoryFactory.FilterFactoryNotFoundException e) {", "+                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "+                Description description = Description.createSuiteDescription(each);", "+                Failure failure = new Failure(description, e);", "+                failures.add(failure);", "-                missingClasses.add(failure);", "+                failures.add(failure);", "-        for (Failure each : missingClasses) {", "+        for (Failure each : failures) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7e27888b8f9801aa697729cedf76be", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParseResult.java", "commitBeforeChange": "4eecfb1eff9aa5304f6b30874a26734124ac902d", "commitAfterChange": "a75370887a71a09b3e5a12dec252513e80228e6b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r     String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String... args)", "diff": ["-    String[] parseOptions(String[] args) {\r", "+    String[] parseOptions(String... args) {\r", "-            try {\r", "-                if (arg.equals(\"--\")) {\r", "-                    return copyArray(args, i + 1, args.length);\r", "-                } else if (arg.startsWith(\"--\")) {\r", "-                    if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {\r", "-                        String filterSpec;\r", "-                        if (arg.equals(\"--filter\")) {\r", "-                            ++i;\r", "+            if (arg.equals(\"--\")) {\r", "+                return copyArray(args, i + 1, args.length);\r", "+            } else if (arg.startsWith(\"--\")) {\r", "+                if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {\r", "+                    String filterSpec;\r", "+                    if (arg.equals(\"--filter\")) {\r", "+                        ++i;\r", "-                            if (i < args.length) {\r", "-                                filterSpec = args[i];\r", "-                            } else {\r", "-                                parserErrors.add(new CommandLineParserError(arg + \" value not specified\"));\r", "-\r", "-                                break;\r", "-                            }\r", "+                        if (i < args.length) {\r", "+                            filterSpec = args[i];\r", "-                            filterSpec = arg.substring(arg.indexOf('=') + 1);\r", "+                            parserErrors.add(new CommandLineParserError(arg + \" value not specified\"));\r", "+                            break;\r", "-\r", "-                        filter = filter.intersect(FilterFactories.createFilterFromFilterSpec(\r", "-                                createSuiteDescription(arg), filterSpec));\r", "-                        parserErrors.add(new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "+                        filterSpec = arg.substring(arg.indexOf('=') + 1);\r", "+\r", "+                    filterSpecs.add(filterSpec);\r", "-                    return copyArray(args, i, args.length);\r", "+                    parserErrors.add(new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "-            } catch (FilterFactory.FilterNotCreatedException e) {\r", "-                parserErrors.add(e);\r", "+            } else {\r", "+                return copyArray(args, i, args.length);\r"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3392cb338aa4775c67f547035cf80e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8d8740dc9f873f58fe59191746e6a6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "a72b0dbef4b01e8ad0b832d9a579dd7fabd5a071", "commitAfterChange": "378e17964a4188bad9b3d966207a2f682072148e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \t@Test public void preferFast()", "signatureAfterChange": " \t \t@Test public void preferFast()", "diff": ["-\t\tRequest request= Request.aClass(TwoTests.class);", "+\t\tRequest request= Request.aClass(TwoUnEqualTests.class);", "-\t\tOdds thing= max.getSpreads(request).get(1);", "-\t\tassertEquals(0.0, thing.getCertainty(), 0.001); // TODO not right yet", "-\t\tassertEquals(Description.createTestDescription(TwoUnEqualTests.class, \"slow\"), thing.getDescription());", "+\t\tDescription thing= max.sort(request).get(1);", "+\t\tassertEquals(Description.createTestDescription(TwoUnEqualTests.class, \"slow\"), thing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6466077a7584cbd795f3c3c1ccfdb0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "378e17964a4188bad9b3d966207a2f682072148e", "commitAfterChange": "451ca12156d5704809a1feff78a10a9451cd2023", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \t@Test public void preferRecentlyFailed()", "signatureAfterChange": " \t \t@Test public void preferRecentlyFailed()", "diff": ["-\t\tOdds thing= max.getSpreads(request).get(1);", "-\t\tassertEquals(0.0, thing.getCertainty(), 0.001); // TODO not right yet", "-\t\tassertEquals(Description.createTestDescription(TwoTests.class, \"succeed\"), thing.getDescription());", "+\t\tList<Description> tests= max.sort(request);", "+\t\tDescription dontSucceed= Description.createTestDescription(TwoTests.class, \"dontSucceed\");", "+\t\tassertEquals(dontSucceed, tests.get(0));"]}]}
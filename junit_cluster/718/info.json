{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea3655596335aefcc298c10de10203eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48f5c0ff8962ca295232276a301c7344", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static String truncate(String s)", "signatureAfterChange": "     public static String truncate(String s)", "diff": ["-\t */", "-\tpublic static String truncate(String s) {", "-\t\tif (fgMaxMessageLength != -1 && s.length() > fgMaxMessageLength)", "-\t\t\ts= s.substring(0, fgMaxMessageLength)+\"...\";", "-\t\treturn s;", "-\t}", "+     */", "+    public static String truncate(String s) {", "+        if (fgMaxMessageLength != -1 && s.length() > fgMaxMessageLength) {", "+            s = s.substring(0, fgMaxMessageLength) + \"...\";", "+        }", "+        return s;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b6668679d9b2ddda68194aa19591882", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   \tprivate static void readPreferences()", "signatureAfterChange": "      private static void readPreferences()", "diff": ["- \tprivate static void readPreferences() {", "- \t\tInputStream is= null;", "- \t\ttry {", "- \t\t\tis= new FileInputStream(getPreferencesFile());", "- \t\t\tsetPreferences(new Properties(getPreferences()));", "-\t\t\tgetPreferences().load(is);", "-\t\t} catch (IOException e) {", "-\t\t\ttry {", "-\t\t\t\tif (is != null)", "-\t\t\t\t\tis.close();", "-\t\t\t} catch (IOException e1) {", "-\t\t\t}", "-\t\t}", "- \t}", "+    private static void readPreferences() {", "+        InputStream is = null;", "+        try {", "+            is = new FileInputStream(getPreferencesFile());", "+            setPreferences(new Properties(getPreferences()));", "+            getPreferences().load(is);", "+        } catch (IOException e) {", "+            try {", "+                if (is != null) {", "+                    is.close();", "+                }", "+            } catch (IOException e1) {", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0dd62eeda90fab2b5c1e53f5aab54a2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic Request sortRequest(Request request)", "signatureAfterChange": "     public Request sortRequest(Request request)", "diff": ["-\t */", "-\tpublic Request sortRequest(Request request) {", "-\t\tif (request instanceof SortingRequest) // We'll pay big karma points for this", "-\t\t\treturn request;", "-\t\tList<Description> leaves= findLeaves(request);", "-\t\tCollections.sort(leaves, fHistory.testComparator());", "-\t\treturn constructLeafRequest(leaves);", "-\t}", "+     */", "+    public Request sortRequest(Request request) {", "+        if (request instanceof SortingRequest) {", "+            // We'll pay big karma points for this", "+            return request;", "+        }", "+        List<Description> leaves = findLeaves(request);", "+        Collections.sort(leaves, fHistory.testComparator());", "+        return constructLeafRequest(leaves);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cc6649cd00be428a54bcab923de1562", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66bd59a332cf37f7c0fe179da12bfe34", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "commitBeforeChange": "cd6096839b5036f7c44e58ec4264de05535eea6a", "commitAfterChange": "11258fcfd07dd63754fbea374bbba59ea82bc685", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void evaluate() throws Throwable", "diff": ["-\t\tList<Throwable> fErrors = new ArrayList<Throwable>();", "-\t\tfErrors.clear();", "+\t\tList<Throwable> errors = new ArrayList<Throwable>();", "+\t\terrors.clear();", "-\t\t\tfErrors.add(e);", "+\t\t\terrors.add(e);", "-\t\t\t\t\tfErrors.add(e);", "+\t\t\t\t\terrors.add(e);", "-\t\tif (fErrors.isEmpty())", "-\t\t\treturn;", "-\t\tif (fErrors.size() == 1)", "-\t\t\tthrow fErrors.get(0);", "-\t\tthrow new MultipleFailureException(fErrors);", "+\t\tMultipleFailureException.assertEmpty(errors);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff813b27ce02879ea986149ea59a0ebb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "commitBeforeChange": "cd6096839b5036f7c44e58ec4264de05535eea6a", "commitAfterChange": "077d4657cce12a38d4f34266fc62c190b28235a9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void evaluate() throws Throwable", "diff": ["-\t\tList<Throwable> fErrors = new ArrayList<Throwable>();", "-\t\tfErrors.clear();", "+\t\tList<Throwable> errors = new ArrayList<Throwable>();", "+\t\terrors.clear();", "-\t\t\tfErrors.add(e);", "+\t\t\terrors.add(e);", "-\t\t\t\t\tfErrors.add(e);", "+\t\t\t\t\terrors.add(e);", "-\t\tif (fErrors.isEmpty())", "-\t\t\treturn;", "-\t\tif (fErrors.size() == 1)", "-\t\t\tthrow fErrors.get(0);", "-\t\tthrow new MultipleFailureException(fErrors);", "+\t\tMultipleFailureException.assertEmpty(errors);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e372e94c1b54fe7b4a6c0dec1044c352", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910166972a5b2f754d4b97fa51e252a7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected void invoke(Object target) throws IllegalAccessException, \t\t\tInvocationTargetException", "signatureAfterChange": "  \tprotected void invoke(Object target) throws Throwable", "diff": ["-\tprotected void invoke(Object target) throws IllegalAccessException,", "-\t\t\tInvocationTargetException {", "-\t\tgetMethod().invoke(target);", "+\tprotected void invoke(Object target) throws Throwable {", "+\t\tExplosiveMethod.from(getMethod()).invoke(target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4149f95f2af7b4f963949cf57ed626", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "85c570ea92f0ee7d17573966dd7f94f4c3b0b61a", "commitAfterChange": "79d696c81cb996e6a199b062c0ae1f53408d5ebd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void invoke(Object test) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException", "signatureAfterChange": "  \tprotected void invoke(Roadie context) throws IllegalArgumentException, \t\t\tIllegalAccessException, InvocationTargetException", "diff": ["-\tpublic void invoke(Object test) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {", "-\t\tfMethod.invoke(test);", "+\tprotected void invoke(Roadie context) throws IllegalArgumentException,", "+\t\t\tIllegalAccessException, InvocationTargetException {", "+\t\tfMethod.invoke(context.getTarget());"]}]}
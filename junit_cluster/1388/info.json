{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cef951c116560b87ff0d9e9ebe661fdc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cd86f65261efdbe32bc31692ab518f8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "5ace93399cbfd049dc7ea16b6392cca5246b7e4f", "commitAfterChange": "6abd4e65122ac6e3b56cf53a9a7540b61e4e687e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\t@Override \t\tprotected Statement classBlock(RunNotifier notifier)", "signatureAfterChange": "  \t\t@Override \t\tprotected Statement classBlock(RunNotifier notifier)", "diff": ["-\t\t\treturn childrenInvoker(notifier);", "+\t\t\tStatement statement= childrenInvoker(notifier);", "+\t\t\tstatement= withBeforeParameterize(statement);", "+\t\t\tstatement= withAfterParameterize(statement);", "+\t\t\treturn statement;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7659e198373ae21db40f3e6130222d41", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "af692868db814126bbac29a1f28f5adf30c6ce1c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public List<PotentialAssignment> potentialsForNextUnassigned()             throws Exception", "signatureAfterChange": "      public List<PotentialAssignment> potentialsForNextUnassigned()             throws Exception", "diff": ["-        return getSupplier(unassigned).getValueSources(unassigned);", "+        List<PotentialAssignment> assignments = getSupplier(unassigned).getValueSources(unassigned);", "+        ", "+        if (assignments.size() == 0) {", "+            assignments = generateAssignmentsFromTypeAlone(unassigned);", "+        }", "+        ", "+        return assignments;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae66e8fd273201efb0ff93f6b452bb2b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "94aa692b0489d1fabd31c779c1a700a3b0890a24", "commitAfterChange": "8f0902e5503f4b2fd5a7317ae954a136aa8af94b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private void failDueToMissingException() throws AssertionError", "signatureAfterChange": "      private void failDueToMissingException() throws AssertionError", "diff": ["-        String expectation = StringDescription.toString(fMatcherBuilder.build());", "-        fail(\"Expected test to throw \" + expectation);", "+    \tString failureMessage;", "+    \t", "+    \tif ( isMissingExceptionMessageEmpty() ) {", "+    \t\tString expectation = StringDescription.toString(fMatcherBuilder.build());", "+    \t\tfailureMessage = \"Expected test to throw \" + expectation;", "+    \t} else {", "+    \t\tfailureMessage = missingExceptionMessage;", "+    \t}", "+", "+        fail(failureMessage);"]}]}
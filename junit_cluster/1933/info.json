{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "561b14e9af8d4a56e74c48011a42d0e6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b537bad85d353840fa1d84dfc5c53a8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "f1f4fe290a3a35a9083d2e76e922b57350e05f34", "commitAfterChange": "c3873cf7b17abba564374522af2bdc02abcc509d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void findLeaves(Description parent, Description description, List<Description> results)", "signatureAfterChange": " \t \tprivate void findLeaves(Description parent, Plan plan, List<Description> results)", "diff": ["-\tprivate void findLeaves(Description parent, Description description, List<Description> results) {", "-\t\tif (description.getChildren().isEmpty())", "+\tprivate void findLeaves(Description parent, Plan plan, List<Description> results) {", "+\t\tDescription description = plan.getDescription();", "+\t\tif (plan.getChildren().isEmpty())", "-\t\t\tfor (Description each : description.getChildren())", "+\t\t\tfor (Plan each : plan.getChildren())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a16374d3abbf1c48a085dae6d16e0b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxCore.java", "commitBeforeChange": "378e17964a4188bad9b3d966207a2f682072148e", "commitAfterChange": "451ca12156d5704809a1feff78a10a9451cd2023", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate List<Description> findLeaves(Description description)", "signatureAfterChange": "  \tprivate List<Description> findLeaves(Request request)", "diff": ["-", "-\tprivate List<Description> findLeaves(Description description) {", "-\t\tList<Description> results= new ArrayList<Description>();", "-\t\tfindLeaves(description, results);", "-\t\treturn results;", "-\t}", "+", "+\tprivate List<Description> findLeaves(Request request) {", "+\t\tList<Description> results= new ArrayList<Description>();", "+\t\tfindLeaves(request.getRunner().getDescription(), results);", "+\t\treturn results;", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "868d48670fd81898d42d758c41a5b8b1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146bfc68c44383c6fcbdce8351106c52", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "db89759c22060a89f6750e2e92ce93072eace561", "commitAfterChange": "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tpublic RunAllParameterMethods(Class<?> klass) throws Exception", "signatureAfterChange": "  \tpublic Parameterized(Class<?> klass) throws Exception", "diff": ["-", "-\t\tpublic RunAllParameterMethods(Class<?> klass) throws Exception {", "-\t\t\tsuper(klass.getName());", "-\t\t\tfKlass= klass;", "-\t\t\tint i= 0;", "-\t\t\tfor (final Object each : getParametersList()) {", "-\t\t\t\tif (each instanceof Object[])", "-\t\t\t\t\tsuper.add(new TestClassRunnerForParameters(klass, (Object[])each, i++));", "-\t\t\t\telse", "-\t\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fKlass.getName(), getParametersMethod().getName()));", "-\t\t\t}", "-\t\t}", "+", "+\tpublic Parameterized(Class<?> klass) throws Exception {", "+\t\tsuper(klass.getName());", "+\t\tfTestClass= new TestClass(klass);", "+\t\t", "+\t\tMethodValidator methodValidator= new MethodValidator(fTestClass);", "+\t\tmethodValidator.validateStaticMethods();", "+\t\tmethodValidator.validateInstanceMethods();", "+\t\tmethodValidator.assertValid();", "+\t\t", "+\t\tint i= 0;", "+\t\tfor (final Object each : getParametersList()) {", "+\t\t\tif (each instanceof Object[])", "+\t\t\t\tadd(new TestClassRunnerForParameters(fTestClass, (Object[])each, i++));", "+\t\t\telse", "+\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "686975f6836fc352ed365b18c00c9f53", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic Parameterized(Class<?> klass) throws Throwable", "signatureAfterChange": "  \tpublic Parameterized(Class<?> klass) throws Throwable", "diff": ["-\t\tsuper(klass.getName());", "+\t\tsuper(klass);", "-\t\t", "-\t\tList<Throwable> errors = new ArrayList<Throwable>();", "+", "+\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\t", "-\t\tint i= 0;", "-\t\tfor (final Object each : getParametersList()) {", "-\t\t\tif (each instanceof Object[])", "-\t\t\t\tadd(new TestClassRunnerForParameters(klass, (Object[])each, i++));", "-\t\t\telse", "-\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));", "+\t\tfParameters= getParametersList();", "+\t\tfor (final Object each : fParameters) {", "+\t\t\tif (!(each instanceof Object[]))", "+\t\t\t\tthrow new Exception(String.format(", "+\t\t\t\t\t\t\"%s.%s() must return a Collection of arrays.\",", "+\t\t\t\t\t\tfTestClass.getName(), getParametersMethod().getName()));"]}]}
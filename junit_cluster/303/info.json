{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e38c3f1deedfabfb6a0ea9c680f410fc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52ab4d9813a3adcd930ebb6e41aa1e16", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "c7fe9c82850d54468bfbc900a418873d4d5107fe", "commitAfterChange": "c7874453182cde8e7b38cf3ce356d16d3d1dcde8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static MaxHistory readHistory(File storedResults) throws CouldNotReadCoreException", "signatureAfterChange": " \t \tprivate static MaxHistory readHistory(File storedResults) throws CouldNotReadCoreException", "diff": ["-", "+\t\tFileInputStream file= null;", "-\t\t\tstream= new ObjectInputStream(new FileInputStream(storedResults));", "-\t\t} catch (IOException e) {", "+\t\t\tfile= new FileInputStream(storedResults);", "+\t\t} catch (FileNotFoundException e) {", "-\t\t\treturn (MaxHistory) stream.readObject();", "-\t\t} catch (Exception e) {", "-\t\t\tthrow new CouldNotReadCoreException(e); //TODO think about what we can do better here", "-\t\t} finally {", "-\t\t\t\tstream.close();", "+\t\t\t\tstream= new ObjectInputStream(file);", "+\t\t\ttry {", "+\t\t\t\treturn (MaxHistory) stream.readObject();", "+\t\t\t} catch (Exception e) {", "+\t\t\t\tthrow new CouldNotReadCoreException(e); //TODO think about what we can do better here", "+\t\t\t} finally {", "+\t\t\t\ttry {", "+\t\t\t\t\tstream.close();", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\tthrow new CouldNotReadCoreException(e);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\ttry {", "+\t\t\t\tfile.close();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// TODO can't imagine what's gone wrong here, but who cares?", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a19dbd3a765e04b37245a66d06c13fe", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/textui/TestRunner.java", "commitBeforeChange": "fd347129415e030051b3a9ba06db4819876b6ed3", "commitAfterChange": "432e7e4e96d400e16f6fd64e01d70e6fad90bc8f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected TestResult start(String args[]) throws Exception", "signatureAfterChange": " \tpublic TestResult start(String args[]) throws Exception", "diff": ["-\tprotected TestResult start(String args[]) throws Exception {", "+\tpublic TestResult start(String args[]) throws Exception {", "+\t\tString method= \"\";", "-\t\t", "+", "-\t\t\telse if (args[i].equals(\"-c\")) ", "+\t\t\telse if (args[i].equals(\"-c\"))", "-\t\t\telse if (args[i].equals(\"-v\"))", "-\t\t\t\tSystem.err.println(\"JUnit \"+Version.id()+\" by Kent Beck and Erich Gamma\");", "+\t\t\telse if (args[i].equals(\"-m\")) {", "+\t\t\t\tString arg= args[++i];", "+\t\t\t\tint lastIndex= arg.lastIndexOf('.');", "+\t\t\t\ttestCase= arg.substring(0, lastIndex);", "+\t\t\t\tmethod= arg.substring(lastIndex + 1);", "+\t\t\t} else if (args[i].equals(\"-v\"))", "+\t\t\t\tSystem.err.println(\"JUnit \" + Version.id() + \" by Kent Beck and Erich Gamma\");", "-\t\t", "-\t\tif (testCase.equals(\"\")) ", "+", "+\t\tif (testCase.equals(\"\"))", "+\t\t\tif (method != null) ", "+\t\t\t\treturn runSingleMethod(testCase, method, wait);", "-\t\t}", "-\t\tcatch(Exception e) {", "-\t\t\tthrow new Exception(\"Could not create and run test suite: \"+e);", "+\t\t} catch (Exception e) {", "+\t\t\tthrow new Exception(\"Could not create and run test suite: \" + e);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41e2d8969f8c1fc960d4fb36a6670b5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0320b4d76eceed72e9f29bebd74bff", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "e1bf14b4d5b7aecf4611fd400417359424121544", "commitAfterChange": "f6a3d7405b72966d3714355804e1b3c14b1425cb", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 53, "signatureBeforeChange": "      @Test     public void meaningfulFailureWhenParametersAreNotArrays()", "signatureAfterChange": "      @Test     public void runsEveryTestOfArray()", "diff": ["-", "-    @Test", "-    public void meaningfulFailureWhenParametersAreNotArrays() {", "-        assertThat(", "-                testResult(WrongElementType.class).toString(),", "-                containsString(\"WrongElementType.data() must return an Iterable of arrays.\"));", "-    }", "+", "+    @Test", "+    public void runsEveryTestOfArray() {", "+        Result result= JUnitCore.runClasses(FibonacciTestWithArray.class);", "+        assertEquals(7, result.getRunCount());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "930e39e2c69db09164a7e18b33f7f94c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/categories/CategoriesAndParameterizedTest.java", "commitBeforeChange": "2adef6f30c64c5e5e14e9261637d113f7adda884", "commitAfterChange": "37a8aaba8a817b4bebbeebcd645d304601a0c8f0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void shouldFailWithMethodLevelCategoryAnnotation()", "signatureAfterChange": "      @Test     public void runsTestMethodWithCategory()", "diff": ["-", "-    @Test", "-    public void shouldFailWithMethodLevelCategoryAnnotation() {", "-        assertThat(", "-                testResult(ParameterTokenSuiteMalformed.class),", "-                hasFailureContaining(\"Category annotations on Parameterized classes are not supported on individual methods.\"));", "-    }", "+    public void runsTestMethodWithCategory() {", "+        Result result = new JUnitCore()", "+                .run(SuiteWithParameterizedTestWithMethodWithCategory.class);", "+        assertEquals(2, result.getRunCount());", "+        assertEquals(0, result.getFailureCount());"]}]}
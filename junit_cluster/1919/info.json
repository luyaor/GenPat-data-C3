{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78c2f4b3c343bfa1a396491ba4c57392", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f34c64259eafa6e25123fe9dad2353", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "ff7c54f564eac489de1aef062ff0048c128e1c4f", "commitAfterChange": "b23ffd790b06f561290239ef3b7a5239ba755f10", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedFieldValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "  \tpublic <T> List<T> getAnnotatedFieldValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["-\t\tboolean fieldsMustBeStatic= test == null;", "-\t\tfor (FrameworkField field : getAnnotatedFields(annotationClass)) {", "-\t\t\tassertFieldIsPublic(field);", "-\t\t\tif (fieldsMustBeStatic) {", "-\t\t\t\tassertFieldIsStatic(field);", "-\t\t\t}", "+\t\tfor (FrameworkField eachField : getAnnotatedFields(annotationClass)) {", "-\t\t\t\tObject fieldValue= field.get(test);", "+\t\t\t\tObject fieldValue= eachField.get(test);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c54352b759e8bd338844a781b65182f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "96af9a2a520a40404971968ee14a183d0aed1c4b", "commitAfterChange": "0ce71108da6f487d76c0f4dc46cde41e11dd3daa", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "      private Collection<T> getFilteredChildren()", "signatureAfterChange": "      private Collection<T> getFilteredChildren()", "diff": ["-", "-                setFilteredChildren(getChildren());", "+                if (fFilteredChildren == null) {", "+                    fFilteredChildren = Collections.unmodifiableCollection(getChildren());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1547eb0ac4db4297054b67244028b7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethodRunner.java", "commitBeforeChange": "a58514aec7e843339be24980e92aeeb759327ffb", "commitAfterChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tprotected Link chain()", "signatureAfterChange": "  \t@Override \tprotected Link chain()", "diff": ["-\t\treturn new Notifier(new Link() {", "+\t\tLink link= new Link() {", "-\t\t});", "+\t\t};", "+\t\tlink= new Notifier(link);", "+\t\treturn new Ignored(link);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bda21472f664b8f0ec05ba58481eacf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "d6f71260512973e70417b999f1efa9757659b1e1", "commitAfterChange": "d04a0d02ac8418c4fdbf926bdcfcb7b2bafee936", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedFieldValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "  \tpublic <T> List<T> getAnnotatedFieldValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["+\t\tboolean fieldsMustBeStatic= test == null;", "+\t\t\tif (fieldsMustBeStatic) {", "+\t\t\t\tassertFieldIsStatic(field);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa47a4116932284ae5b91e53a871ba8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "b3831d600d2d893ec6250ee930188cc373d81ee5", "commitAfterChange": "403f761da11bdaf9a03538139e7ae51601c36b0e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tprivate Description parentDescription(Description description)", "signatureAfterChange": "  \t\tprivate Description parentDescription(Description description)", "diff": ["-\t\t\treturn Description.createSuiteDescription(description.getTestClass());", "+\t\t\tClass<?> testClass= description.getTestClass();", "+\t\t\tif (testClass == null)", "+\t\t\t\treturn null;", "+\t\t\treturn Description.createSuiteDescription(testClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bb7bf35da60e3f4ec7adf21a93371b0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "778d123dc739596836916e1035f5c2c16c915665", "commitAfterChange": "2f9b53dbecad010dbb7e7cfff3a11476b7d2208a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\tprivate boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "  \t\tprivate boolean isIncludedMethod(Description description)", "diff": ["-\t\tprivate boolean hasCorrectCategoryAnnotation(Description description) {", "+\t\tprivate boolean isIncludedMethod(Description description) {", "-\t\t\tfor (Class<?> each : categories)", "-\t\t\t\tif (fExcluded != null && fExcluded.isAssignableFrom(each))", "-\t\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de88fcc276714236cfc272b9b05c5092", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "74b11e0c206faf9ca78ec14c0c16ec44152d6268", "commitAfterChange": "f17e06715488e2814b6f9b3b4e329961ce224f07", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-        FutureTask<Throwable> task = new FutureTask<Throwable>(new CallableStatement());", "+        CallableStatement callable = new CallableStatement();", "+        FutureTask<Throwable> task = new FutureTask<Throwable>(callable);", "+        callable.awaitStarted();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff5847d7386043b7617472f4d136c2de", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/samples/money/MoneyBag.java", "commitBeforeChange": "ce0bb8f59ea7de1ac3bb4f678f7ddf84fe9388ed", "commitAfterChange": "0bb3dfe2939cc214ee5e77556a48d4aea9c6396a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate boolean contains(Money aMoney)", "signatureAfterChange": " \tprivate boolean contains(Money m)", "diff": ["-\t}", "-\tprivate boolean contains(Money aMoney) {", "-\t\tMoney m= findMoney(aMoney.currency());", "-\t\treturn m.amount() == aMoney.amount();", "+\t}", "+\tprivate boolean contains(Money m) {", "+\t\tMoney found= findMoney(m.currency());", "+\t\tif (found == null) return false;", "+\t\treturn found.amount() == m.amount();"]}]}
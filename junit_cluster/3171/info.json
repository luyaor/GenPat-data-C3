{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "deb348bc3c267a887cdca8bbbcb8b874", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1531f970d5c50d6848b20f0b9b138ec4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/CategoryFilterFactory.java", "commitBeforeChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "commitAfterChange": "9d9899bce3506e7d87ebc6352a3cf3d25ea20f54", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r     @Override\r     public Filter createFilter(FilterFactoryParams params) throws FilterNotCreatedException", "signatureAfterChange": "\r     @Override\r     public Filter createFilter(FilterFactoryParams params) throws FilterNotCreatedException", "diff": ["-public abstract class CategoryFilterFactory extends FilterFactory {\r", "+public abstract class CategoryFilterFactory implements FilterFactory {\r", "-            throw new FilterNotCreatedException(e.getMessage());\r", "+            throw new FilterNotCreatedException(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2428efa48a20cdc106407df3f34c6467", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "9f52d1c93e0f8246ab5430007107e0c2599563dd", "commitAfterChange": "cde32fb62ad8f5a05d700ce3189e131fa51739cb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "diff": ["-\t\t\tnew JUnit4ClassRunner(getTestClass().getJavaClass()) {", "+\t\t\tnew JUnit4ClassRunner(getTestClass()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25af5b14d821537b890c0037e782d29f", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "45fd0de94ec90d56f0c76b896b8eb809e6858d7c", "commitAfterChange": "108dc8c751471e4737233a4fe8eff810a23977d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t \tpublic void testOneTest()", "signatureAfterChange": "  \t \tpublic void testOneTest()", "diff": ["-\t\tassertEquals(expected.toString(), output.toString());", "+\t\tassertEquals(expected, output.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba10fd194b891a48a16d63da0a2a06a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/AssumptionTest.java", "commitBeforeChange": "22a6c6857eaef07a5d54fecfaea8db7c66f65de7", "commitAfterChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Test \tpublic void assumeNotNullIncludesParameterList()", "signatureAfterChange": "  \t@Test \tpublic void assumeNotNullIncludesParameterList()", "diff": ["-\t\t\tassertThat(e.getMessage(), Matchers.containsString(\"1, 2, null\"));", "+\t\t\tassertThat(e.getMessage(), containsString(\"1, 2, null\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d2237a2d3aa720f2aa68a72a95c344e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "74fe490cc074f8be3cee760aac3f8e313698db82", "commitAfterChange": "5b5a17d3c50bf5e96f4baff2aa061ba039511048", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprotected List<MethodRule> rules(Object test)", "signatureAfterChange": " \tprotected List<MethodRule> rules(Object test)", "diff": ["-\t\t\tif (MethodRule.class.isAssignableFrom(each.getField().getType())) {", "+\t\t\tif (MethodRule.class.isAssignableFrom(each.getType())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d256dfe7f29e417945f99f3cdf4fc83", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "commitAfterChange": "d9054149988487750679e35a349df7e0e2df5870", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "diff": ["-                    errors.addAll(annotationValidator.validateAnnotatedMethod(frameworkMethod.getMethod()));", "+                    errors.addAll(annotationValidator.validateAnnotatedMethod(frameworkMethod));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310accc31fc4fd570d1cde8fe015bd82", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "45fd0de94ec90d56f0c76b896b8eb809e6858d7c", "commitAfterChange": "108dc8c751471e4737233a4fe8eff810a23977d9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic void testError()", "signatureAfterChange": " \t \tpublic void testError()", "diff": ["-\t\tassertEquals(expected.toString(), output.toString());", "+\t\tassertEquals(expected, output.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343d7eae773227f897864f466273c26f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/matchers/EachTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Test \tpublic void eachDescription()", "signatureAfterChange": " \t@Test \tpublic void eachDescription()", "diff": ["-\t\tassertThat(Each.each(Matchers.is(\"a\")).toString(), is(\"each is \\\"a\\\"\"));", "+\t\tassertThat(Each.each(is(\"a\")).toString(), is(\"each is \\\"a\\\"\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f43d7837924b7f488106a9906c5b43f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "commitAfterChange": "d9054149988487750679e35a349df7e0e2df5870", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "diff": ["-                errors.addAll(annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass()));", "+                errors.addAll(annotationValidator.validateAnnotatedClass(getTestClass()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fccbc97466a3fb5d89cbc30b0f498a0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "cde32fb62ad8f5a05d700ce3189e131fa51739cb", "commitAfterChange": "4f405a49eba4822fbdda0c9415d2dc4fd82fb14b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic ParameterSupplier getSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "  \tpublic ParameterSupplier getSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "diff": ["-\t\treturn new AllMembersSupplier(fClass.getJavaClass());", "+\t\treturn new AllMembersSupplier(fClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4176fc5ae9c74d0c913a647974092278", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "161229441b7365fa06f0d82e272e15f1f378b315", "commitAfterChange": "30a039854fd7f8cda135222054b247c158b91fa7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void addSinglePointMethods(ParameterSignature sig, \t\t\tList<PotentialAssignment> list)", "signatureAfterChange": "  \tprivate void addSinglePointMethods(ParameterSignature sig, \t\t\tList<PotentialAssignment> list)", "diff": ["-\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod.getMethod()));", "+\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4590baa76e9da7adddd1011cda1a81ce", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/imposterization/ThrownMatcher.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic static ThrownMatcher assertReturnsNormally()", "signatureAfterChange": "  \tpublic static ThrownMatcher assertReturnsNormally()", "diff": ["-\t\treturn assertThrownException(Matchers.is(((Object) null)));", "+\t\treturn assertThrownException(is(((Object) null)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45bd8ed7d8db716652e9b8b8c68f659d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/results/PrintableResultTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Theory \tpublic void includeMultipleFailures(String secondExceptionName)", "signatureAfterChange": "  \t@Theory \tpublic void includeMultipleFailures(String secondExceptionName)", "diff": ["-\t\tassertThat(backtrace.toString(), Matchers", "-\t\t\t\t.containsString(secondExceptionName));", "+\t\tassertThat(backtrace.toString(), containsString(secondExceptionName));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4633002fde89989e2347f0208d57b3a8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "commitAfterChange": "d3ee5d06c0b797ce812cbfe35addc6146d5f07cb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "diff": ["-                AnnotationValidator annotationValidator = fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46bb974843cd3fd75168dfa1dac99994", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "79d696c81cb996e6a199b062c0ae1f53408d5ebd", "commitAfterChange": "7ce9e33e556cf1817d94f769e09c9d22b8d2764d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected void invoke(Roadie context) throws IllegalArgumentException, \t\t\tIllegalAccessException, InvocationTargetException", "signatureAfterChange": "  \tprotected void invoke(Roadie context) throws IllegalArgumentException, \t\t\tIllegalAccessException, InvocationTargetException", "diff": ["-\t\tfMethod.invoke(context.getTarget());", "+\t\tinvoke(context.getTarget());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "478cd97c9f464a41f198bb159daa7578", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "20cdb2e788ba21c9de949610d597f6cc0c86899c", "commitAfterChange": "fd347129415e030051b3a9ba06db4819876b6ed3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void testTwoTests()", "signatureAfterChange": " \t \tpublic void testTwoTests()", "diff": ["-\t\tassertEquals(expected.toString(), output.toString());", "+\t\tassertEquals(expected, output.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3add11d7583fafd4935dd7fe08f90e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "commitAfterChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      void parseParameters(String[] args)", "signatureAfterChange": "\r \r     void parseParameters(String[] args)", "diff": ["-", "-    void parseParameters(String[] args) {", "-        for (String arg : args) {", "-            try {", "-                classes.add(ClassUtil.getClass(arg));", "-            } catch (ClassNotFoundException e) {", "-                system.out().println(\"Could not find class: \" + arg);", "-                Description description = Description.createSuiteDescription(arg);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            }", "-        }", "-    }", "+\r", "+    void parseParameters(String[] args) {\r", "+        for (String arg : args) {\r", "+            try {\r", "+                classes.add(ClassUtil.getClass(arg));\r", "+            } catch (ClassNotFoundException e) {\r", "+                system.out().println(\"Could not find class: \" + arg);\r", "+                Description description = createSuiteDescription(arg);\r", "+                Failure failure = new Failure(description, e);\r", "+                failures.add(failure);\r", "+            }\r", "+        }\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5668f24f1ae1ea64e0df0ec0c8d60757", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/RuleFieldValidator.java", "commitBeforeChange": "eef732f8e686d719c109a1ca66aed0dc8bba8808", "commitAfterChange": "db8c72be9df8e7d605600cc5f370dffa35112362", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate void addError(List<Throwable> errors, FrameworkField field, \t\t\tString suffix)", "signatureAfterChange": "  \tprivate void addError(List<Throwable> errors, FrameworkField field, \t\t\tString suffix)", "diff": ["-\t\tString message= \"The \" + field.getType().getSimpleName() + \" '\"", "+\t\tString message= \"The @\" + fAnnotation.getSimpleName() + \" '\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57969e7f49d443b5e858277756b14847", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryFactory.java", "commitBeforeChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "commitAfterChange": "9d9899bce3506e7d87ebc6352a3cf3d25ea20f54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r     FilterFactory createFilterFactory(Class<? extends FilterFactory> filterFactoryClass)\r             throws FilterFactoryNotCreatedException", "signatureAfterChange": "\r \r     FilterFactory createFilterFactory(Class<? extends FilterFactory> filterFactoryClass)\r             throws FilterFactoryNotCreatedException", "diff": ["-            return filterFactoryClass\r", "-                    .getConstructor()\r", "-                    .newInstance();\r", "+            return filterFactoryClass.getConstructor().newInstance();\r", "-            throw new FilterFactoryNotCreatedException(e.getMessage());\r", "+            throw new FilterFactoryNotCreatedException(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b83b0d1c64ad987fc625002a56625b2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/runner/DataPointMethodTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Matcher<Iterable<Failure>> empty()", "signatureAfterChange": "  \tprivate Matcher<Iterable<Failure>> empty()", "diff": ["-\t\treturn Each.each(nullValue);", "+\t\treturn each(nullValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ddfc4e486d53017a26e4af37c22ed04", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "161229441b7365fa06f0d82e272e15f1f378b315", "commitAfterChange": "30a039854fd7f8cda135222054b247c158b91fa7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tprotected Description describeChild(FrameworkMethod method)", "signatureAfterChange": "  \t@Override \tprotected Description describeChild(FrameworkMethod method)", "diff": ["-\t\t\t\ttestName(method), method.getMethod().getAnnotations());", "+\t\t\t\ttestName(method), method.getAnnotations());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7e18fee3af2ff0f741558d57333baf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "commitAfterChange": "d9054149988487750679e35a349df7e0e2df5870", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "diff": ["-                    errors.addAll(annotationValidator.validateAnnotatedField(frameworkField.getField()));", "+                    errors.addAll(annotationValidator.validateAnnotatedField(frameworkField));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a16076ac76c9a04ecbda9baca274b9d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "8313ec5081733230050540899d6047a02d5fb745", "commitAfterChange": "01716157f2683f5610d721929a687e7dc3aee558", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprotected List<MethodRule> rules(Object test)", "signatureAfterChange": " \tprotected List<MethodRule> rules(Object test)", "diff": ["-\t\t\tif (MethodRule.class.isAssignableFrom(each.getField().getType())) {", "+\t\t\tif (MethodRule.class.isAssignableFrom(each.getType())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c43f9501494b474a968a6c90ec788c5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/imposterization/PopperImposterizerTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Test \tpublic void canWrapImposterizedObjects()", "signatureAfterChange": " \t@Test \tpublic void canWrapImposterizedObjects()", "diff": ["-\t\t\t\tMatchers.notNullValue());", "+\t\t\t\tnotNullValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "803df14dca9c71f3c5b9e3eb67501a31", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkField.java", "commitBeforeChange": "ff7c54f564eac489de1aef062ff0048c128e1c4f", "commitAfterChange": "b23ffd790b06f561290239ef3b7a5239ba755f10", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Override \tpublic boolean isShadowedBy(FrameworkField otherMember)", "signatureAfterChange": "  \t@Override \tpublic boolean isShadowedBy(FrameworkField otherMember)", "diff": ["+", "-\t\treturn otherMember.getField().getName().equals(getField().getName());", "+\t\treturn otherMember.getField().getName().equals(getName());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8330c565f752993d9a7cd9f7320b7215", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "e07e59eb9d24f6e4fa85dd99f311c1feca6ea983", "commitAfterChange": "5d957024be0d1b181879d48b7915b3b8aad8f5d5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\tprivate Object[] computeParams() throws Exception", "signatureAfterChange": "  \t\tprivate Object[] computeParams() throws Exception", "diff": ["-\t\t\t\t\t\t\t\tgetTestClass().getJavaClass()).getName()));", "+\t\t\t\t\t\t\t\tgetTestClass()).getName()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "971701e575b328418a5baee61df7cad3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "6887479f1b64c5a18f5708ea6905bb59804a9a0f", "commitAfterChange": "b333208ccfbef77c556a270bd4385586523dcafc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic Object getTarget()", "signatureAfterChange": "  \tpublic Object getTarget()", "diff": ["-\t\treturn fContext.getTarget();", "+\t\treturn fTarget;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbfec1aa7ad5fe43e28d9be41a47af5a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/JUnit38ClassRunnerTest.java", "commitBeforeChange": "c6e3d2cf121ce6e371bafefa59f216054167845b", "commitAfterChange": "90b53f3683af074aa7aa982821219338053b0345", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void getDescriptionWithAnnotation()", "signatureAfterChange": "      @Test     public void getDescriptionWithAnnotation()", "diff": ["-        Assert.assertEquals(2, d.testCount());", "+        assertEquals(2, d.testCount());", "-                assertNull( methodDesc.getAnnotation(MyAnnotation.class));", "+                assertNull(methodDesc.getAnnotation(MyAnnotation.class));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d4062e839c78e56389e3e54f3e9eee", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "commitAfterChange": "d3ee5d06c0b797ce812cbfe35addc6146d5f07cb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "diff": ["-            AnnotationValidator annotationValidator =", "-                    fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+            AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5effb0b1b31d807fa4ef2027602f3b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/manipulation/SingleMethodTest.java", "commitBeforeChange": "66cf6859fa74021320c9b0d5e0a6ffc5c86b770f", "commitAfterChange": "b33b4b090c224c14415d0ffb68a078a097aeaf71", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \t@Test public void classesWithSuiteMethodsAreFiltered()", "signatureAfterChange": " \t \t@Test public void classesWithSuiteMethodsAreFiltered()", "diff": ["-\t\tint testCount= Request.method(HasSuiteMethod.class, \"a\").getRunner().getDescription().testCount();", "+\t\tint testCount= Request.method(HasSuiteMethod.class, \"a\").getRunner().testCount();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4db50555a2a3b5f986d902a07da8218", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "45fd0de94ec90d56f0c76b896b8eb809e6858d7c", "commitAfterChange": "108dc8c751471e4737233a4fe8eff810a23977d9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void testFailure()", "signatureAfterChange": "  \tpublic void testFailure()", "diff": ["-\t\tassertEquals(expected.toString(), output.toString());", "+\t\tassertEquals(expected, output.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbc9f269b5e5be21afa91522802dea21", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "45fd0de94ec90d56f0c76b896b8eb809e6858d7c", "commitAfterChange": "108dc8c751471e4737233a4fe8eff810a23977d9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void testEmptySuite()", "signatureAfterChange": " \t \tpublic void testEmptySuite()", "diff": ["-\t\tassertEquals(expected.toString(), output.toString());", "+\t\tassertEquals(expected, output.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4275eca99953e1d5ab6ed9692b40733", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Suite.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprotected Suite(Class<?> klass, Class<?>[] annotatedClasses) throws InitializationError", "signatureAfterChange": " \t \tprotected Suite(Class<?> klass, Class<?>[] annotatedClasses) throws InitializationError", "diff": ["-\t\t// we need to add parent be", "-\t\tsuper(klass.getName());", "+\t\tsuper(klass);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea57bbd4bcf04c992b05e22ffa9a9fdc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "161229441b7365fa06f0d82e272e15f1f378b315", "commitAfterChange": "30a039854fd7f8cda135222054b247c158b91fa7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected Annotation[] computeAnnotations(FrameworkMethod testMethod)", "signatureAfterChange": " \tprotected Annotation[] computeAnnotations(FrameworkMethod testMethod)", "diff": ["-\t\treturn testMethod.getMethod().getAnnotations();", "+\t\treturn testMethod.getAnnotations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2af6972f334a042591cea79120b0b73", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "bd7bff7c4ca18e1d0eab5260e585d3914e5fa53d", "commitAfterChange": "6acc164b4125da775cccd4035c1b99e9d404bacd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic JUnit4ClassRunner(Class<?> klass) throws InitializationError", "signatureAfterChange": "  \tpublic JUnit4ClassRunner(Class<?> klass) throws InitializationError", "diff": ["-\t\tfTestMethods= fTestClass.getTestMethods();", "+\t\tfTestMethods= getTestMethods();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3ddbe9e86f9cf5ef3cd62e6993f31de", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "commitAfterChange": "d3ee5d06c0b797ce812cbfe35addc6146d5f07cb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "diff": ["-                AnnotationValidator annotationValidator = fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7551ace9eef8b46794b80fff4b4c11e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryFactory.java", "commitBeforeChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "commitAfterChange": "9d9899bce3506e7d87ebc6352a3cf3d25ea20f54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r     FilterFactory createFilterFactory(String filterFactoryFqcn) throws FilterFactoryNotCreatedException", "signatureAfterChange": "\r \r     FilterFactory createFilterFactory(String filterFactoryFqcn) throws FilterFactoryNotCreatedException", "diff": ["-            throw new FilterFactoryNotCreatedException(e.getMessage());\r", "+            throw new FilterFactoryNotCreatedException(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7da68b8195ab568443d5e31a6a26825", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/imposterization/AssumePassingTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\") \t@Test \tpublic void removedParameterizedFailureWhenZeroParams()", "signatureAfterChange": "  \t@SuppressWarnings(\"unchecked\") \t@Test \tpublic void removedParameterizedFailureWhenZeroParams()", "diff": ["-\t\tassertThat(onlyIfPassingFailures().get(0).getException(), Matchers", "-\t\t\t\t.is(AssertionError.class));", "+\t\tassertThat(onlyIfPassingFailures().get(0).getException(), is(AssertionError.class));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95085eac82504046f8b83766e4339fe", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ParentRunner.java", "commitBeforeChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "commitAfterChange": "9c8d59d9869280a698c3f3a119eb69f0e897c94b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected Annotation[] classAnnotations()", "signatureAfterChange": "  \tprotected Annotation[] classAnnotations()", "diff": ["-\t\treturn fTestClass.getJavaClass().getAnnotations();", "+\t\treturn fTestClass.getAnnotations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd63f47e523bd5bf649866676d51e644", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/runner/ParameterizedAssertionErrorTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\") \t@Theory(nullsAccepted= false) \tpublic void buildParameterizedAssertionError(String methodName, String param)", "signatureAfterChange": "  \t@SuppressWarnings(\"unchecked\") \t@Theory(nullsAccepted= false) \tpublic void buildParameterizedAssertionError(String methodName, String param)", "diff": ["-\t\t\t\tmethodName, param).toString(), Matchers", "-\t\t\t\t.containsString(methodName));", "+\t\t\t\tmethodName, param).toString(), containsString(methodName));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "932f1285fc8b15ea56e42c28c3bfdf73", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bad66bd3612206c60c31eff5a4b3bd1", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/Assert.java", "commitBeforeChange": "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", "commitAfterChange": "478f7f9217cf5da219a7ba298e3a87f405378194", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tstatic public void assertEquals(String message, float expected, float actual, float delta)", "signatureAfterChange": " \tstatic public void assertEquals(String message, float expected, float actual, float delta)", "diff": ["- \t\t// handle infinity specially since subtracting to infinite values gives NaN and the", "-\t\t// the following test fails", "-\t\tif (Float.isInfinite(expected)) {", "-\t\t\tif (!(expected == actual))", "+\t\tif (Float.compare(expected, actual) == 0)", "+\t\t\treturn;", "+\t\tif (!(Math.abs(expected - actual) <= delta))", "-\t\t} else if (!(Math.abs(expected-actual) <= delta))", "-      \t\tfailNotEquals(message, new Float(expected), new Float(actual));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f5b5d0300bb4d23e0765883f30f575a", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/Assert.java", "commitBeforeChange": "3b3ddfb534daa710926143ca820723a4ee6c7d3d", "commitAfterChange": "20cdb2e788ba21c9de949610d597f6cc0c86899c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tstatic public void assertEquals(String message, double expected, double actual, double delta)", "signatureAfterChange": " \tstatic public void assertEquals(String message, double expected, double actual, double delta)", "diff": ["-\t\t// handle infinity specially since subtracting to infinite values gives NaN and the", "-\t\t// the following test fails", "-\t\tif (Double.isInfinite(expected)) {", "-\t\t\tif (!(expected == actual))", "-\t\t\t\tfailNotEquals(message, new Double(expected), new Double(actual));", "-\t\t} else if (!(Math.abs(expected-actual) <= delta)) // Because comparison with NaN always returns false", "+\t\tif (Double.compare(expected, actual) == 0)", "+\t\t\treturn;", "+\t\tif (!(Math.abs(expected-actual) <= delta))"]}]}
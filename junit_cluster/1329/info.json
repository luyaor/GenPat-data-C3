{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b34e9210ccfba3fa382222e4fc63325", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146bfc68c44383c6fcbdce8351106c52", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "db89759c22060a89f6750e2e92ce93072eace561", "commitAfterChange": "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tpublic RunAllParameterMethods(Class<?> klass) throws Exception", "signatureAfterChange": "  \tpublic Parameterized(Class<?> klass) throws Exception", "diff": ["-", "-\t\tpublic RunAllParameterMethods(Class<?> klass) throws Exception {", "-\t\t\tsuper(klass.getName());", "-\t\t\tfKlass= klass;", "-\t\t\tint i= 0;", "-\t\t\tfor (final Object each : getParametersList()) {", "-\t\t\t\tif (each instanceof Object[])", "-\t\t\t\t\tsuper.add(new TestClassRunnerForParameters(klass, (Object[])each, i++));", "-\t\t\t\telse", "-\t\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fKlass.getName(), getParametersMethod().getName()));", "-\t\t\t}", "-\t\t}", "+", "+\tpublic Parameterized(Class<?> klass) throws Exception {", "+\t\tsuper(klass.getName());", "+\t\tfTestClass= new TestClass(klass);", "+\t\t", "+\t\tMethodValidator methodValidator= new MethodValidator(fTestClass);", "+\t\tmethodValidator.validateStaticMethods();", "+\t\tmethodValidator.validateInstanceMethods();", "+\t\tmethodValidator.assertValid();", "+\t\t", "+\t\tint i= 0;", "+\t\tfor (final Object each : getParametersList()) {", "+\t\t\tif (each instanceof Object[])", "+\t\t\t\tadd(new TestClassRunnerForParameters(fTestClass, (Object[])each, i++));", "+\t\t\telse", "+\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b74b21c9559df2a88068c20554fab9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "9423b224d0bafeeabe485e51a7f3080cfac0a368", "commitAfterChange": "a3e0b1c6cbd770405cb7fdd4291090afc8e49df7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass)", "signatureAfterChange": "  \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass, boolean nullsOk) throws Exception", "diff": ["-", "-\t\t\tClass<?> testClass) {", "-\t\tList<ParameterSignature> signatures= ParameterSignature.signatures(testClass.getConstructors()[0]);", "-\t\tint constructorParameterCount = signatures.size();", "-\t\tsignatures.addAll(ParameterSignature.signatures(testMethod));", "-\t\treturn new Assignments(new ArrayList<PotentialAssignment>(),", "-\t\t\t\tsignatures, testClass, constructorParameterCount);", "+\t\t\tClass<?> testClass, boolean nullsOk) throws Exception {", "+\t\tList<ParameterSignature> signatures;", "+\t\t\tsignatures= ParameterSignature.signatures(new TestClass(testClass).getConstructor());", "+\t\t\tint constructorParameterCount = signatures.size();", "+\t\t\tsignatures.addAll(ParameterSignature.signatures(testMethod));", "+\t\t\treturn new Assignments(new ArrayList<PotentialAssignment>(),", "+\t\t\t\t\tsignatures, testClass, constructorParameterCount, nullsOk);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b61ba2985240e2fb5cef59399068f537", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a6206a0b2924edcfebb063a9646601", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java", "commitBeforeChange": "6e6a6e47f15e3de1fac90ecb9e3dbdb180f3a88b", "commitAfterChange": "f1be7f250156ecc0e6b6c9d7005abb53359fe2fe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t@Parameters \tpublic static Collection<Object[]> testsWithEventMatcher()", "signatureAfterChange": "  \t@Parameters \tpublic static Collection<Object[]> testsWithEventMatcher()", "diff": ["-\t\t\t\t\t\thasSingleFailureWithMessage(\"\\nExpected: exception with message a string containing \\\"expectedMessage\\\"\\n\"", "-\t\t\t\t\t\t\t\t+ \"     but: was <java.lang.IllegalArgumentException: actualMessage>\") },", "+\t\t\t\t\t\thasSingleFailureWithMessage(startsWith(\"\\nExpected: exception with message a string containing \\\"expectedMessage\\\"\\n\"", "+\t\t\t\t\t\t\t\t+ \"     but: was <java.lang.IllegalArgumentException: actualMessage>\")) },", "-\t\t\t\t\tfailureIs(causedBy(instanceOf(AssumptionViolatedException.class))) },", "+\t\t\t\t\thasSingleFailureWithMessage(containsString(\"Stacktrace was: org.junit.internal.AssumptionViolatedException\")) },", "-\t\t\t\t\t\thasSingleFailureWithMessage(both(startsWith(\"\\nExpected: (\")).and(containsString(\"exception with cause is <java.lang.NullPointerException: expected cause>\"))) }", "+\t\t\t\t\t\thasSingleFailureWithMessage(allOf(", "+\t\t\t\t\t\t\t\tstartsWith(\"\\nExpected: (\"),", "+\t\t\t\t\t\t\t\tcontainsString(\"exception with cause is <java.lang.NullPointerException: expected cause>\"),", "+\t\t\t\t\t\t\t\tcontainsString(\"Stacktrace was: java.lang.IllegalArgumentException: Ack!\"),", "+\t\t\t\t\t\t\t\tcontainsString(\"Caused by: java.lang.NullPointerException: an unexpected cause\"))) }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caa28d50822baecb845cbf52f28ea021", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "commitAfterChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String[] args)", "diff": ["-", "-    String[] parseOptions(String[] args) {", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-", "-        for (int i = 0; i != args.length; ++i) {", "-            String arg = args[i];", "-", "-            try {", "-                if (arg.equals(\"--\")) {", "-                    return Arrays.copyOfRange(args, i + 1, args.length);", "-                } else if (arg.startsWith(\"--\")) {", "-                    if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {", "-                        String filterSpec;", "-                        if (arg.equals(\"--filter\")) {", "-                            ++i;", "-                            filterSpec = args[i];", "-                        } else {", "-                            filterSpec = arg.substring(arg.indexOf('=') + 1);", "-                        }", "-", "-                        filter = filter.intersect(filterFactoryFactory.createFilterFromFilterSpec(filterSpec));", "-                    } else {", "-                        Description description = Description.createSuiteDescription(arg);", "-                        Failure failure =", "-                                new Failure(description, new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));", "-", "-                        failures.add(failure);", "-                    }", "-                } else {", "-                    return Arrays.copyOfRange(args, i, args.length);", "-                }", "-            } catch (FilterFactory.FilterNotCreatedException e) {", "-                system.out().println(\"Could not find filter: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(arg);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch(FilterFactoryFactory.FilterFactoryNotCreatedException e) {", "-                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(arg);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            }", "-        }", "-", "-        return null;", "-    }", "+\r", "+    String[] parseOptions(String[] args) {\r", "+        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();\r", "+\r", "+        for (int i = 0; i != args.length; ++i) {\r", "+            String arg = args[i];\r", "+\r", "+            try {\r", "+                if (arg.equals(\"--\")) {\r", "+                    return Arrays.copyOfRange(args, i + 1, args.length);\r", "+                } else if (arg.startsWith(\"--\")) {\r", "+                    if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {\r", "+                        String filterSpec;\r", "+                        if (arg.equals(\"--filter\")) {\r", "+                            ++i;\r", "+                            filterSpec = args[i];\r", "+                        } else {\r", "+                            filterSpec = arg.substring(arg.indexOf('=') + 1);\r", "+                        }\r", "+\r", "+                        filter = filter.intersect(filterFactoryFactory.createFilterFromFilterSpec(\r", "+                                createSuiteDescription(arg), filterSpec));\r", "+                    } else {\r", "+                        Description description = createSuiteDescription(arg);\r", "+                        Failure failure = new Failure(\r", "+                                description,\r", "+                                new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "+\r", "+                        failures.add(failure);\r", "+                    }\r", "+                } else {\r", "+                    return Arrays.copyOfRange(args, i, args.length);\r", "+                }\r", "+            } catch (FilterFactory.FilterNotCreatedException e) {\r", "+                system.out().println(\"Could not find filter: \" + e.getMessage());\r", "+                Description description = createSuiteDescription(arg);\r", "+                Failure failure = new Failure(description, e);\r", "+                failures.add(failure);\r", "+            } catch(FilterFactoryFactory.FilterFactoryNotCreatedException e) {\r", "+                system.out().println(\"Could not find filter factory: \" + e.getMessage());\r", "+                Description description = createSuiteDescription(arg);\r", "+                Failure failure = new Failure(description, e);\r", "+                failures.add(failure);\r", "+            }\r", "+        }\r", "+\r", "+        return null;\r", "+    }\r"]}]}
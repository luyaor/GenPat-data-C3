{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf37b49fe968418fdd8958a8a8ebbae3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97bcb9cb676e43a3fdbcd9a831f3bb49", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 14, "signatureBeforeChange": "          private List<Class<?>> categories(Description description)", "signatureAfterChange": "          private static Set<Class<?>> categories(Description description)", "diff": ["-        private List<Class<?>> categories(Description description) {", "-            ArrayList<Class<?>> categories = new ArrayList<Class<?>>();", "-            categories.addAll(Arrays.asList(directCategories(description)));", "-            categories.addAll(Arrays.asList(directCategories(parentDescription(description))));", "+", "+        private static Set<Class<?>> categories(Description description) {", "+            Set<Class<?>> categories= new HashSet<Class<?>>();", "+            Collections.addAll(categories, directCategories(description));", "+            Collections.addAll(categories, directCategories(parentDescription(description)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8ed7c7470212ea10c341fd65a2615a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 15, "signatureBeforeChange": "          private Description parentDescription(Description description)", "signatureAfterChange": "          private static Description parentDescription(Description description)", "diff": ["-        private Description parentDescription(Description description) {", "-            Class<?> testClass = description.getTestClass();", "-            if (testClass == null) {", "-                return null;", "-            }", "-            return Description.createSuiteDescription(testClass);", "+        private static Description parentDescription(Description description) {", "+            Class<?> testClass= description.getTestClass();", "+            return testClass == null ? null : Description.createSuiteDescription(testClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd89103d9d20639fe0fc39caa96627d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "cc8497f28e1d5a46d7940a0b36556154c83d6f7a", "commitAfterChange": "e9d4de8e15255b03b60e935390e517d4de90a73b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private boolean canAcceptBoxed(Class<?> candidate)", "signatureAfterChange": "      private boolean isAssignableViaTypeConversion(Class<?> targetType, Class<?> candidate)", "diff": ["-    private boolean canAcceptBoxed(Class<?> candidate) {", "-        if (primitivesBoxingMap.containsKey(candidate)) {", "-            Class<?> wrapperClass = primitivesBoxingMap.get(candidate);", "-            return type.isAssignableFrom(wrapperClass);", "+    private boolean isAssignableViaTypeConversion(Class<?> targetType, Class<?> candidate) {", "+        if (convertableTypesMap.containsKey(candidate)) {", "+            Class<?> wrapperClass = convertableTypesMap.get(candidate);", "+            return targetType.isAssignableFrom(wrapperClass);", "-        }", "-    }"]}]}
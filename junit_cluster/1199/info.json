{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "196567fc957533153d7b442181a08cc5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "318362dba529dcf1d890aecdf40d16bf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic ParameterSupplier getAnnotatedSupplier() \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "  \tprivate <T extends Annotation> T findDeepAnnotation(Annotation[] annotations, \t\t\tClass<T> annotationType)", "diff": ["-", "-\tpublic ParameterSupplier getAnnotatedSupplier()", "-\t\t\tthrows InstantiationException, IllegalAccessException {", "-\t\tAnnotation annotation= getSupplierAnnotation();", "-\t\tif (annotation != null)", "-\t\t\treturn getSupplier(annotation).value().newInstance();", "-\t\treturn null;", "-\t}", "+", "+\tprivate <T extends Annotation> T findDeepAnnotation(Annotation[] annotations,", "+\t\t\tClass<T> annotationType) {", "+\t\tfor (Annotation each : annotations) {", "+\t\t\tif (annotationType.isInstance(each))", "+\t\t\t\treturn annotationType.cast(each);", "+\t\t\tAnnotation candidate = findDeepAnnotation(each.annotationType().getAnnotations(), annotationType);", "+\t\t\tif (candidate != null)", "+\t\t\t\treturn annotationType.cast(candidate);", "+\t\t}", "+\t", "+\t\treturn null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c83b4378efcfb2ef44198bad8f68273b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "043e82844ef2c3c0961d98a34771c84f7a950d1a", "commitAfterChange": "1963b424c176742b711fb4226ce8f314d431813c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public ParameterSupplier getSupplier(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "signatureAfterChange": "      private ParameterSupplier getSupplier(ParameterSignature unassigned)             throws ReflectiveOperationException", "diff": ["-    public ParameterSupplier getSupplier(ParameterSignature unassigned)", "-            throws InstantiationException, IllegalAccessException {", "-        ParameterSupplier supplier = getSupplierFromAnnotation(unassigned);", "+    private ParameterSupplier getSupplier(ParameterSignature unassigned)", "+            throws ReflectiveOperationException {", "+        ParameterSupplier supplier = getAnnotatedSupplier(unassigned);", "-        ", "+"]}]}
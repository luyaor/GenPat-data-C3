{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44c532edb07794c801b9044981ca55e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305d485021816fb4829e22c51058ae5c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkWrite(FileDescriptor fd)", "signatureAfterChange": "          @Override         public void checkWrite(FileDescriptor fd)", "diff": ["-\t\t@Override", "-\t\tpublic void checkWrite(FileDescriptor fd) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkWrite(fd);", "-\t\t}", "+        @Override", "+        public void checkWrite(FileDescriptor fd) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkWrite(fd);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "449ba8abf7f9948bdfb67ef197b33940", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tstatic public void assertSame(String message, Object expected, Object actual)", "signatureAfterChange": "     static public void assertSame(String message, Object expected, Object actual)", "diff": ["-\t */", "-\tstatic public void assertSame(String message, Object expected, Object actual) {", "-\t\tif (expected == actual)", "-\t\t\treturn;", "-\t\tfailNotSame(message, expected, actual);", "-\t}", "+     */", "+    static public void assertSame(String message, Object expected, Object actual) {", "+        if (expected == actual) {", "+            return;", "+        }", "+        failNotSame(message, expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "537e7ce2214e78aa7ceee87c94f2f592", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tStatementThread thread= evaluateStatement();", "-\t\tif (!thread.fFinished)", "-\t\t\tthrowExceptionForUnfinishedThread(thread);", "-\t}", "+    @Override", "+    public void evaluate() throws Throwable {", "+        StatementThread thread = evaluateStatement();", "+        if (!thread.fFinished) {", "+            throwExceptionForUnfinishedThread(thread);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c62e453980e6e4f4b70287de211e055e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic String extractClassName(String className)", "signatureAfterChange": "     public String extractClassName(String className)", "diff": ["-\t */", "-\tpublic String extractClassName(String className) {", "-\t\tif(className.startsWith(\"Default package for\"))", "-\t\t\treturn className.substring(className.lastIndexOf(\".\")+1);", "-\t\treturn className;", "-\t}", "+     */", "+    public String extractClassName(String className) {", "+        if (className.startsWith(\"Default package for\")) {", "+            return className.substring(className.lastIndexOf(\".\") + 1);", "+        }", "+        return className;", "+    }"]}]}
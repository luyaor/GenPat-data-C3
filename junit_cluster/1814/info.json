{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9acb194e713642a9f8eab8f73e554e06", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6466077a7584cbd795f3c3c1ccfdb0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "378e17964a4188bad9b3d966207a2f682072148e", "commitAfterChange": "451ca12156d5704809a1feff78a10a9451cd2023", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \t@Test public void preferRecentlyFailed()", "signatureAfterChange": " \t \t@Test public void preferRecentlyFailed()", "diff": ["-\t\tOdds thing= max.getSpreads(request).get(1);", "-\t\tassertEquals(0.0, thing.getCertainty(), 0.001); // TODO not right yet", "-\t\tassertEquals(Description.createTestDescription(TwoTests.class, \"succeed\"), thing.getDescription());", "+\t\tList<Description> tests= max.sort(request);", "+\t\tDescription dontSucceed= Description.createTestDescription(TwoTests.class, \"dontSucceed\");", "+\t\tassertEquals(dontSucceed, tests.get(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b7bb04cb4130bb5d0099270d686791", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/runner/JUnitCommandLineParseResultTest.java", "commitBeforeChange": "4eecfb1eff9aa5304f6b30874a26734124ac902d", "commitAfterChange": "a75370887a71a09b3e5a12dec252513e80228e6b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r     @Test\r     public void shouldParseFilterArgWithEqualsSyntax() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldParseFilterArgWithEqualsSyntax() throws Exception", "diff": ["-        jUnitCommandLineParseResult.parseOptions(new String[]{\r", "-                \"--filter=\" + IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName()\r", "-        });\r", "+        String value= IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName();\r", "+        jUnitCommandLineParseResult.parseOptions(\"--filter=\" + value);\r", "-        Filter filter = jUnitCommandLineParseResult.getFilter();\r", "+        List<String> specs= jUnitCommandLineParseResult.getFilterSpecs();\r", "-        assertThat(filter.describe(), startsWith(\"includes \"));\r", "+        assertThat(specs, hasItems(value));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7de38cf4e6737833ac48fa2de4a6141", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/runner/JUnitCommandLineParseResultTest.java", "commitBeforeChange": "4eecfb1eff9aa5304f6b30874a26734124ac902d", "commitAfterChange": "a75370887a71a09b3e5a12dec252513e80228e6b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r     @Test\r     public void shouldParseFilterArgInWhichValueIsASeparateArg() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldParseFilterArgInWhichValueIsASeparateArg() throws Exception", "diff": ["-        jUnitCommandLineParseResult.parseOptions(new String[]{\r", "-                \"--filter\",\r", "-                IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName()\r", "-        });\r", "+        String value= IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName();\r", "+        jUnitCommandLineParseResult.parseOptions(\"--filter\", value);\r", "-        Filter filter = jUnitCommandLineParseResult.getFilter();\r", "+        List<String> specs= jUnitCommandLineParseResult.getFilterSpecs();\r", "-        assertThat(filter.describe(), startsWith(\"includes \"));\r", "+        assertThat(specs, hasItems(value));\r"]}]}
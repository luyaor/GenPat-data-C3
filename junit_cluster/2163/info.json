{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63cf66a4bf18fd70f568533a7a92d0a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c6d6d8680487d3d9580ad29b0e60bc0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "8672a83f51b183c756649a423b908271c894b8df", "commitAfterChange": "0215c66179ed2c04da2e53f67aefc97b6db5782a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "signatureAfterChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "diff": ["-\t\t\tObject testClassInstance = null;", "-\t\t\tList<FrameworkField> fields = getTestClass().getAnnotatedFields(Parameter.class);", "-\t\t\tif (!fields.isEmpty()) {", "-\t\t\t\tif (fields.size() != fParameters.length)", "-\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @parameter fields.\"+", "-\t\t\t\t\t\" @Parameter fields counted: \"+fields.size()+\", available parameters: \"+fParameters.length+\".\");", "-\t\t\t\ttestClassInstance = getTestClass().getJavaClass().newInstance();", "-\t\t\t\tfor (FrameworkField f : fields) {", "-\t\t\t\t\tField field = f.getField();", "-\t\t\t\t\tParameter annot = field.getAnnotation(Parameter.class);", "-\t\t\t\t\tint index = annot.value();", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfield.set(testClassInstance,  fParameters[index]);", "-\t\t\t\t\t} catch(IllegalArgumentException iare) {", "-\t\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+", "-\t\t\t\t\t\t\" with the value \"+fParameters[index]+", "-\t\t\t\t\t\t\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+", "-\t\t\t\t\t\tfield.getType().getSimpleName()+\").\", iare);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tif (fieldsAreAnnotated()) {", "+\t\t\t\treturn createTestUsingFieldInjection();", "-\t\t\t\ttestClassInstance = getTestClass().getOnlyConstructor().newInstance(fParameters);", "+\t\t\t\treturn createTestUsingConstructorInjection();", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e2465372f8ca207b600660a2ef43d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "752727de89a6bab731f49597c7ec3858ebb3e0a3", "commitAfterChange": "5042f695491027730cca2918616399d869de3973", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "signatureAfterChange": "  \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "diff": ["-\t\tfor (final Field field : fClass.getFields()) {", "-\t\t\tif (Modifier.isStatic(field.getModifiers())) {", "-\t\t\t\tClass<?> type= field.getType();", "-\t\t\t\tif (sig.canAcceptArrayType(type) && field.getAnnotation(DataPoints.class) != null) {", "-\t\t\t\t\taddArrayValues(list, getStaticFieldValue(field));", "-\t\t\t\t} else if (sig.canAcceptType(type)) {", "-\t\t\t\t\tlist.add(PotentialAssignment", "-\t\t\t\t\t\t\t.forValue(getStaticFieldValue(field)));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// TODO: (Jan 25, 2008 8:32:47 AM) extract these", "+\t\taddFields(sig, list);", "+\t\taddSinglePointMethods(sig, list);", "+\t\taddMultiPointMethods(list);", "-\t\tfor (FrameworkMethod dataPointMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoint.class))", "-\t\t\tif ((dataPointMethod.getParameterTypes().length == 0 && sig", "-\t\t\t\t\t.getType()", "-\t\t\t\t\t.isAssignableFrom(dataPointMethod.getReturnType())))", "-\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod.getMethod()));", "+\t\treturn list;", "+\t}", "-\t\treturn list;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f67a3d7826234283442fe53d2853a855", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d785d6b413fc0501ae5627dae6e0f5d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "1350d0562466adbea1a9f8408084acdd005bfc13", "commitAfterChange": "bd8a96dbbfe93f134f75c768e5c1254cff8a9e9f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic EachTestNotifier getContext()", "signatureAfterChange": "  \tpublic ParameterSupplier getSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "diff": ["-", "-\tpublic EachTestNotifier getContext() {", "-\t\treturn fContext;", "-\t}", "+", "+\tpublic ParameterSupplier getSupplier(ParameterSignature unassigned)", "+\t\t\tthrows InstantiationException, IllegalAccessException {", "+\t\tParameterSupplier supplier= getAnnotatedSupplier(unassigned);", "+\t\tif (supplier != null)", "+\t\t\treturn supplier;", "+", "+\t\treturn new AllMembersSupplier(fClass);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6788250e73966a5243cd83276eef446c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "0030e51f286ed52ad4c2c44857c4a28525c83f93", "commitAfterChange": "3375d1c3f489fc5d2b5c6629c55867bbfe2a033f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     protected void validateTestMethods(List<Throwable> errors)", "signatureAfterChange": "      @Override     protected void validateTestMethods(List<Throwable> errors)", "diff": ["+            ", "+            for (ParameterSignature signature : each.getParameterSignatures()) {", "+                ParametersSuppliedBy annotation = signature.findDeepAnnotation(ParametersSuppliedBy.class);", "+                if (annotation != null) {", "+                    validateParameterSupplier(annotation.value(), errors);", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d9485de021b370103b04c9d86780b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "1350d0562466adbea1a9f8408084acdd005bfc13", "commitAfterChange": "bd8a96dbbfe93f134f75c768e5c1254cff8a9e9f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic Object getTarget()", "signatureAfterChange": "  \tpublic ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "diff": ["-\tpublic Object getTarget() {", "-\t\treturn fTarget;", "-\t}", "+", "+\tpublic ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)", "+\t\t\tthrows InstantiationException, IllegalAccessException {", "+\t\tParametersSuppliedBy annotation= unassigned", "+\t\t\t\t.findDeepAnnotation(ParametersSuppliedBy.class);", "+\t\tif (annotation == null)", "+\t\t\treturn null;", "+\t\treturn annotation.value().newInstance();"]}]}
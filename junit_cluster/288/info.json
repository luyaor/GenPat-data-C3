{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df5c2ff636a33f60f53327ea62150a2b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9776ce1ebe78b3d7338949f597186b6a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/matchers/IsCollectionContaining.java", "commitBeforeChange": "695ae54ef17fc658734119b5378b19ff754a9951", "commitAfterChange": "52e61a55e8ffcaab2586ea8fec28e4b01336cd30", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public IsCollectionContaining(Matcher<? extends T> elementMatcher)", "signatureAfterChange": " \tprivate IsCollectionContaining(Matcher<? super T> elementMatcher)", "diff": ["-", "-    public IsCollectionContaining(Matcher<? extends T> elementMatcher) {", "-        this.elementMatcher = elementMatcher;", "-    }", "+\t// Client code should just use static factories, so this should be OK", "+\tprivate IsCollectionContaining(Matcher<? super T> elementMatcher) {", "+\t\tsuper(elementMatcher);", "+\t\t// TODO Auto-generated constructor stub", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d3f47ae739489f01768199edd44725", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/matchers/IsCollectionContaining.java", "commitBeforeChange": "7ca2c7d2e052b99526415113b8d5dcc513e7de07", "commitAfterChange": "e35fb32e07a4cfe69dd86024a79d9cb3b9132e55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public IsCollectionContaining(Matcher<? extends T> elementMatcher)", "signatureAfterChange": " \tprivate IsCollectionContaining(Matcher<? super T> elementMatcher)", "diff": ["-", "-    public IsCollectionContaining(Matcher<? extends T> elementMatcher) {", "-        this.elementMatcher = elementMatcher;", "-    }", "+\t// Client code should just use static factories, so this should be OK", "+\tprivate IsCollectionContaining(Matcher<? super T> elementMatcher) {", "+\t\tsuper(elementMatcher);", "+\t\t// TODO Auto-generated constructor stub", "+\t}"]}]}
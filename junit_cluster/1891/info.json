{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "275d15430ef4648d94590651576a2f05", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556516649d8197e0315bd222a7dee9b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "ede492496de0f3c0872216ac9c9b88a00fdef09e", "commitAfterChange": "68b4e393388627201265eb3924f3628b1c27e6ff", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private List<Runner> createRunnersForParameters(Iterable<Object[]> allParameters, String namePattern) throws Exception", "signatureAfterChange": "      private List<Runner> createRunnersForParameters(Iterable<Object[]> allParameters, String namePattern) throws Exception", "diff": ["-            List<Runner> runners = new ArrayList<Runner>();", "+            List<Runner> children = new ArrayList<Runner>();", "-                runners.add(createRunner(namePattern, i++, parametersOfSingleTest));", "+                children.add(createRunner(namePattern, i++, parametersOfSingleTest));", "-            return runners;", "+            return children;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac201a6ffc1f3f720f3a8674a849e920", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "53e85db0bec2e03bf93afc73dced9b4a0b231644", "commitAfterChange": "8bed6c9278517d9fb13f274bc5a6ade358a39745", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprotected Statement withPotentialTimeout(TestMethod method, Statement next)", "signatureAfterChange": "  \tprotected Statement withPotentialTimeout(TestAnnotation annotation, \t\t\tStatement next)", "diff": ["-\tprotected Statement withPotentialTimeout(TestMethod method, Statement next) {", "-\t\tlong timeout= method.getTimeout();", "+\tprotected Statement withPotentialTimeout(TestAnnotation annotation,", "+\t\t\tStatement next) {", "+\t\tlong timeout= annotation.getTimeout();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6b69251e45c581bb75bbb5539500343", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bba083452e6c677ca9b3f6589606b5cd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "81821e83c425202b86c27d6be9c9ebe453e6d507", "commitAfterChange": "4abb65c56382cdd4ff453ddceb70b5944e6e0b38", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "signatureAfterChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "diff": ["-\t\tif (!MethodRule.class.isAssignableFrom(field.getType()))", "-\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "-\t\t\t\t\t+ \" must implement MethodRule\"));", "+\t\tif (!MethodRule.class.isAssignableFrom(field.getType())) {", "+\t\t\tif (ClassRule.class.isAssignableFrom(field.getType())) {", "+\t\t\t\tif (!Modifier.isStatic(field.getModifiers())) {", "+\t\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "+\t\t\t\t\t\t\t+ \" must be static\"));", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "+\t\t\t\t\t\t+ \" must implement MethodRule or ClassRule\"));", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dedfd05decc351ef0bc9242b923e647d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "334bf585b5de1534d7c0ec519fa0df250d00f022", "commitAfterChange": "79ef5a7e1d7fa144cc81c9414f4791aaea8b3d75", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "signatureAfterChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "diff": ["-\t\tif (!MethodRule.class.isAssignableFrom(field.getType()))", "-\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "-\t\t\t\t\t+ \" must implement MethodRule\"));", "+\t\tif (!MethodRule.class.isAssignableFrom(field.getType())) {", "+\t\t\tif (ClassRule.class.isAssignableFrom(field.getType())) {", "+\t\t\t\tif (!Modifier.isStatic(field.getModifiers())) {", "+\t\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "+\t\t\t\t\t\t\t+ \" must be static\"));", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "+\t\t\t\t\t\t+ \" must implement MethodRule or ClassRule\"));", "+\t\t\t}", "+\t\t}"]}]}
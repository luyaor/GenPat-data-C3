{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ad9bf3dab8e0ea86e45f40e0f41c158", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "848668e565e07d9a571446f9f2eb6a47", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Description getDescription()", "signatureAfterChange": "      @Override     public Description getDescription()", "diff": ["-\t@Override", "-\tpublic Description getDescription() {", "-\t\tDescription description= Description.createSuiteDescription(fTestClass);", "-\t\tfor (Throwable each : fCauses)", "-\t\t\tdescription.addChild(describeCause(each));", "-\t\treturn description;", "-\t}", "+    @Override", "+    public Description getDescription() {", "+        Description description = Description.createSuiteDescription(fTestClass);", "+        for (Throwable each : fCauses) {", "+            description.addChild(describeCause(each));", "+        }", "+        return description;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b20a464de0f54da3e7a5e434983f16b3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,             boolean isStatic, List<Throwable> errors)", "diff": ["-\t */", "-\tprotected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,", "-\t\t\tboolean isStatic, List<Throwable> errors) {", "-\t\tList<FrameworkMethod> methods= getTestClass().getAnnotatedMethods(annotation);", "-\t\tfor (FrameworkMethod eachTestMethod : methods)", "-\t\t\teachTestMethod.validatePublicVoidNoArg(isStatic, errors);", "-\t}", "+     */", "+    protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,", "+            boolean isStatic, List<Throwable> errors) {", "+        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(annotation);", "+        for (FrameworkMethod eachTestMethod : methods) {", "+            eachTestMethod.validatePublicVoidNoArg(isStatic, errors);", "+        }", "+    }"]}]}
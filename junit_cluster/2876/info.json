{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4bbaa14b6df91913a68a1ad5570263f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c514a03207533af9b9e5484bf98acca", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "96af9a2a520a40404971968ee14a183d0aed1c4b", "commitAfterChange": "0ce71108da6f487d76c0f4dc46cde41e11dd3daa", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-            List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+            List<T> filteredChildren = new ArrayList<T>(getFilteredChildren());", "-                for (Iterator<T> iter = sortedChildren.iterator(); iter.hasNext(); ) {", "+                for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "-                setFilteredChildren(sortedChildren);", "+                fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a2ac302c1abae7a3e865ce5035831af", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "5cdd702717c5ca7dd3002e95847232681c445127", "commitAfterChange": "0956a4e6a236e9414c0d19a349206f3350501c60", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "signatureAfterChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "diff": ["-        final Collection<T> filteredChildrenWithoutIgnores = getFilteredChildrenWithoutIgnored(notifier);", "-", "-        if (filteredChildrenWithoutIgnores.isEmpty()) {", "-            return ALL_TESTS_IGNORED;", "-        }", "-", "-        return new Statement() {", "+        return new ChildrenAwareStatement(getFilteredChildren()) {", "+            ", "-                runChildren(notifier, filteredChildrenWithoutIgnores);", "+                runChildren(notifier, getChildren());", "-    }"]}]}
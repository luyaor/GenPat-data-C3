{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c120a7b100662c0acba56d2c5bcfe0a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f96253803d355b00f9a65fcd5974b0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)", "diff": ["-\t */", "-\tpublic void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors) {", "-\t\tvalidatePublicVoid(isStatic, errors);", "-\t\tif (fMethod.getParameterTypes().length != 0)", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \" should have no parameters\"));", "-\t}", "+     */", "+    public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors) {", "+        validatePublicVoid(isStatic, errors);", "+        if (fMethod.getParameterTypes().length != 0) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \" should have no parameters\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a81389df311d96fcc0d39d1ecbdedef", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "signatureAfterChange": "      private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "diff": ["-\t", "-\tprivate static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {", "-\t\tSuiteClasses annotation= klass.getAnnotation(SuiteClasses.class);", "-\t\tif (annotation == null)", "-\t\t\tthrow new InitializationError(String.format(\"class '%s' must have a SuiteClasses annotation\", klass.getName()));", "-\t\treturn annotation.value();", "-\t}", "+    private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {", "+        SuiteClasses annotation = klass.getAnnotation(SuiteClasses.class);", "+        if (annotation == null) {", "+            throw new InitializationError(String.format(\"class '%s' must have a SuiteClasses annotation\", klass.getName()));", "+        }", "+        return annotation.value();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4eb0d25f61eae508fc03c7512eca4f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Override \tpublic boolean equals(Object obj)", "signatureAfterChange": "      @Override     public boolean equals(Object obj)", "diff": ["-\t@Override", "-\tpublic boolean equals(Object obj) {", "-\t\tif (!FrameworkMethod.class.isInstance(obj))", "-\t\t\treturn false;", "-\t\treturn ((FrameworkMethod) obj).fMethod.equals(fMethod);", "-\t}", "+    @Override", "+    public boolean equals(Object obj) {", "+        if (!FrameworkMethod.class.isInstance(obj)) {", "+            return false;", "+        }", "+        return ((FrameworkMethod) obj).fMethod.equals(fMethod);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d735e9e5d5e12bd9b5a4937156a07d6b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tprivate List<T> getFilteredChildren()", "signatureAfterChange": "      private List<T> getFilteredChildren()", "diff": ["-\tprivate List<T> getFilteredChildren() {", "-\t\tif (fFilteredChildren == null)", "-\t\t\tfFilteredChildren = new ArrayList<T>(getChildren());", "-\t\treturn fFilteredChildren;", "-\t}", "+", "+    private List<T> getFilteredChildren() {", "+        if (fFilteredChildren == null) {", "+            fFilteredChildren = new ArrayList<T>(getChildren());", "+        }", "+        return fFilteredChildren;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22665f579300b7adc131510ef1f6e44e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bc0cafc8624a2ea9e2ffb1fc3b17c2e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/categories/CategoriesMark2Test.java", "commitBeforeChange": "04189a834a01ae7ff3189bfa869e90d1a7f83acf", "commitAfterChange": "1bbab715de4c64943948ecc3739c8d5569378672", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tpublic Suite2(Class<?> testClass)", "signatureAfterChange": "  \t\tpublic Suite2(Class<?> testClass) throws InitializationError", "diff": ["-\t\tpublic Suite2(Class<?> testClass) {", "-\t\t\tfTestClass= testClass;", "+", "+\t\tpublic Suite2(Class<?> testClass) throws InitializationError {", "+\t\t\tfTestClass= new TestClass(testClass);", "+\t\t\ttry {", "+\t\t\t\tfInstance= fTestClass.getOnlyConstructor().newInstance();", "+\t\t\t} catch (Exception e) {", "+\t\t\t\tthrow new InitializationError(e);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c78a8df56b26c4ab1b9a3655cf5123e3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "ce7bda3346278aab6ccebedcd5b8c8d4ab27ba02", "commitAfterChange": "df48b66e73c740acb15f065eb7a4bad433930891", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic Result run(Request request)", "signatureAfterChange": " \tpublic Result run(Request request)", "diff": ["-\t\treturn run(request.getRunner());", "-//\t\tMaxCore max= null;", "-//\t\ttry {", "-//\t\t\tmax= MaxCore.forFolder(\"defaultMaxCore\");", "-//\t\t} catch (CouldNotReadCoreException e) {", "-//\t\t\te.printStackTrace();", "-//\t\t}", "-//\t\tmax.run(request);", "-//\t\treturn null;", "+\t\t//return run(request.getRunner());", "+\t\tMaxCore max= null;", "+\t\ttry {", "+\t\t\tmax= MaxCore.forFolder(\"defaultMaxCore\");", "+\t\t} catch (CouldNotReadCoreException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\treturn max.run(request, this);"]}]}
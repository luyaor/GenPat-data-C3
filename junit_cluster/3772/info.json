{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93d5d259e509cb6a0803b802dd132366", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b42acd496e26c5116e7c2a6b41be41e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "c12af8eb53b2464efff959b633f4c189caf2f1e7", "commitAfterChange": "90bf3119a6326671cc467386036302cc6040f752", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic Class<?> parseClass()", "signatureAfterChange": " \tpublic Class<?> parseClass()", "diff": ["+\t// This seems like reasonable API once we \"Composite-ize\" Description", "-\t\tMatcher matcher= Pattern.compile(\"(.*)\\\\((.*)\\\\)\").matcher(toString());", "-\t\tif (matcher.matches())", "-\t\t\ttry {", "-\t\t\t\treturn Class.forName(matcher.group(2));", "-\t\t\t} catch (ClassNotFoundException e) {", "+\t\tString name= getClassName();", "+\t\tif (name == null)", "+\t\t\treturn null;", "+\t\ttry {", "+\t\t\treturn Class.forName(name);", "+\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\treturn null;", "+\t\t\te.printStackTrace();", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac0ee760addd62ff5f8f86544061dec3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "c7fe9c82850d54468bfbc900a418873d4d5107fe", "commitAfterChange": "c7874453182cde8e7b38cf3ce356d16d3d1dcde8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\t@SuppressWarnings(\"unchecked\") \t\tprivate Class<? extends Test> getEffectiveClass(Test test)", "signatureAfterChange": "  \t\tprivate Class<? extends Test> getEffectiveClass(Test test)", "diff": ["-\t\t@SuppressWarnings(\"unchecked\")", "-\t\t\t// TODO (Feb 23, 2009 11:45:54 PM): Think hard about this.", "-\t\t\tif (\"warning\".equals(getName(test)))", "-\t\t\t\ttry {", "-\t\t\t\t\treturn (Class<? extends Test>) Class.forName(fTest.toString());", "-\t\t\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\t\treturn test.getClass();", "-\t\t\t\t}", "+//\t\t\t// TODO (Feb 23, 2009 11:45:54 PM): Think hard about this. Didn't think hard enough. Throwing away information doesn't help error recovery.", "+//\t\t\tif (\"warning\".equals(getName(test)))", "+//\t\t\t\ttry {", "+//\t\t\t\t\treturn (Class<? extends Test>) Class.forName(fTest.toString());", "+//\t\t\t\t} catch (ClassNotFoundException e) {", "+//\t\t\t\t\treturn test.getClass();", "+//\t\t\t\t}"]}]}
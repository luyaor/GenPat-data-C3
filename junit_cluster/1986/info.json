{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7de425543e2c429b70af2875b76746d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8a32b685118a0defc05fc8e511390ae", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java", "commitBeforeChange": "eaa8d51a642df066faaa8f3c33020889fd0b758c", "commitAfterChange": "ab9caa3650a262ef4399cfd7f0d7fdc366d6e327", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Test \tpublic void dataPointsMustBePublic()", "signatureAfterChange": "  \t@Test \tpublic void dataPointsMustBePublic()", "diff": ["-\t\t\t\tboth(failureCountIs(3))", "-\t\t\t\t\t\t.and(", "-\t\t\t\t\t\t\t\thasFailureContaining(\"DataPoint field THREE must be public\"))", "-\t\t\t\t\t\t.and(", "-\t\t\t\t\t\t\t\thasFailureContaining(\"DataPoint field FOUR must be public\"))", "-\t\t\t\t\t\t.and(", "-\t\t\t\t\t\t\t\thasFailureContaining(\"DataPoint field FIVE must be public\")));", "+\t\t\t\tallOf(failureCountIs(3),", "+\t\t\t\t\t\thasFailureContaining(\"DataPoint field THREE must be public\"),", "+\t\t\t\t\t\thasFailureContaining(\"DataPoint field FOUR must be public\"),", "+\t\t\t\t\t\thasFailureContaining(\"DataPoint field FIVE must be public\")));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd1f525fb50a2683c8e0563a373f204c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/VerifierRuleTest.java", "commitBeforeChange": "8b9dfefada78a74b6b1fa34ff0bab298267f8210", "commitAfterChange": "a0eea1357f0a0f4faea1245197f20ceee5ca3a5a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \t@Test public void usedErrorCollectorCheckThatShouldFail()", "signatureAfterChange": " \t \t@Test public void usedErrorCollectorCheckThatShouldFail()", "diff": ["-\t\tassertThat(testResult, hasFailureContaining(\"got: <3>\"));", "-\t\tassertThat(testResult, hasFailureContaining(\"got: <5>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <3>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <5>\"));", "-\t\tassertThat(testResult, hasFailureContaining(\"got: <7>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <7>\"));", "-\t\tassertThat(testResult, hasFailureContaining(\"got: <9>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <9>\"));"]}]}
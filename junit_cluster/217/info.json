{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f596f6894b7ded065968342c012e93a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348b1368ca95636ef1dbf6cd8ab62e2a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tTest createTest(Description description)", "signatureAfterChange": "  \tTest createTest(Plan plan)", "diff": ["-\tTest createTest(Description description) {", "-\t\tif (description.isTest())", "-\t\t\treturn new JUnit4TestCaseFacade(description);", "+", "+\tTest createTest(Plan plan) {", "+\t\tDescription description= plan.getDescription();", "+\t\tif (plan.isTest())", "+\t\t\treturn createSingleTest(description);", "-\t\t\tfor (Description child : description.getChildren())", "+\t\t\tfor (Plan child : plan.getChildren())", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b537bad85d353840fa1d84dfc5c53a8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "f1f4fe290a3a35a9083d2e76e922b57350e05f34", "commitAfterChange": "c3873cf7b17abba564374522af2bdc02abcc509d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void findLeaves(Description parent, Description description, List<Description> results)", "signatureAfterChange": " \t \tprivate void findLeaves(Description parent, Plan plan, List<Description> results)", "diff": ["-\tprivate void findLeaves(Description parent, Description description, List<Description> results) {", "-\t\tif (description.getChildren().isEmpty())", "+\tprivate void findLeaves(Description parent, Plan plan, List<Description> results) {", "+\t\tDescription description = plan.getDescription();", "+\t\tif (plan.getChildren().isEmpty())", "-\t\t\tfor (Description each : description.getChildren())", "+\t\t\tfor (Plan each : plan.getChildren())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2cbae9aa1c3dfd89eb3950734f9a70", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "66cf6859fa74021320c9b0d5e0a6ffc5c86b770f", "commitAfterChange": "b33b4b090c224c14415d0ffb68a078a097aeaf71", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void fireTestRunStarted(final Description description)", "signatureAfterChange": " \tpublic void fireTestRunStarted(final Plan plan)", "diff": ["+\tpublic void fireTestRunStarted(final Plan plan) {", "+\t\tnew SafeNotifier() {", "+\t\t\t@SuppressWarnings(\"deprecation\")", "+\t\t\t@Override", "+\t\t\tprotected void notifyListener(RunListener each) throws Exception {", "+\t\t\t\teach.testRunStarted(plan);", "+\t\t\t\teach.testRunStarted(plan.getDescription());", "+\t\t\t};", "+\t\t}.run();", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcf13ed32263979070fa1d32712c028d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd2700981a7e633f9c7efcebc16c94e3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Parameterized(Class<?> klass) throws Throwable", "signatureAfterChange": "     public Parameterized(Class<?> klass) throws Throwable", "diff": ["-        super(klass, NO_RUNNERS);", "-        ParametersRunnerFactory runnerFactory = getParametersRunnerFactory(", "-                klass);", "-        Parameters parameters = getParametersMethod().getAnnotation(", "-                Parameters.class);", "-        runners = Collections.unmodifiableList(createRunnersForParameters(", "-                allParameters(), parameters.name(), runnerFactory));", "+        super(klass, RunnersFactory.createRunnersForClass(klass));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a093dec99d0817a7fbf1a17eb6dc5e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/MethodSorterTest.java", "commitBeforeChange": "b508fe73c26345550b13bc8ee131090f7a27b534", "commitAfterChange": "32330b13f2ded8603665264f8400ddf1f6dd969a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      @Test public void testNameAsc()", "signatureAfterChange": "      @Test public void testNameAsc()", "diff": ["-        // see http://bugs.sun.com/view_bug.do?bug_id=7023180 for why two alternatives are possible", "-        final String expectedAlternative1 = Arrays.asList(ALPHA, BETA, DELTA, EPSILON, GAMMA_VOID, GAMMA_BOOLEAN).toString();", "-        final String expectedAlternative2 = Arrays.asList(ALPHA, BETA, DELTA, EPSILON, GAMMA_BOOLEAN, GAMMA_VOID).toString();", "-", "-        assertThat(declaredMethods(DummySortWithNameAsc.class), anyOf(equalTo(expectedAlternative1), equalTo(expectedAlternative2)));", "+        String[] expected= new String[] { ALPHA, BETA, DELTA, EPSILON, GAMMA_VOID, GAMMA_BOOLEAN };", "+        assertEquals(Arrays.asList(expected).toString(), declaredMethods(DummySortWithNameAsc.class));"]}]}
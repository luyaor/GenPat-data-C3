{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed85f527af75045ea59c5bc9563493f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b0bc58f8410ce022e7d6958a483eeb4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "0956a4e6a236e9414c0d19a349206f3350501c60", "commitAfterChange": "f925a047a6e8e6c6f6996dc19a4ab9b3fc35a3ba", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Statement classBlock(final RunNotifier notifier)", "signatureAfterChange": "     protected Statement classBlock(final RunNotifier notifier)", "diff": ["-        Statement statement= childrenInvoker(notifier);", "-        if (statementHasTestsToRun(statement)) {", "-            statement= withBeforeClasses(statement);", "-            statement= withAfterClasses(statement);", "-            statement= withClassRules(statement);", "+        Statement statement = childrenInvoker(notifier);", "+        if (areAllChildrenIgnored() == false) {", "+            statement = withBeforeClasses(statement);", "+            statement = withAfterClasses(statement);", "+            statement = withClassRules(statement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b0f18ff5c63d9347d82b13b38b6b29e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "81bb4fe24756a6a21b57975cac9eda4ce2304308", "commitAfterChange": "d517352c4b06fee4d5dfddfc69c86514d09eddc3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Statement classBlock(final RunNotifier notifier)", "signatureAfterChange": "     protected Statement classBlock(final RunNotifier notifier)", "diff": ["-        Statement statement = childrenInvoker(notifier);", "-        statement = withBeforeClasses(statement);", "-        statement = withAfterClasses(statement);", "-        statement = withClassRules(statement);", "+        Statement statement= childrenInvoker(notifier);", "+        if (statement instanceof ParentRunner.EmptyStatement == false) {", "+            statement= withBeforeClasses(statement);", "+            statement= withAfterClasses(statement);", "+            statement= withClassRules(statement);", "+        }"]}]}
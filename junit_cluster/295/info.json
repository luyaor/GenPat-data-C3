{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e865b3d0f454885b8c875aa329358ca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03348a6043e833115aa51193eeeed780", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "commitAfterChange": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t\tprivate Link methodCompletesWithParameters(final Assignments complete, \t\t\t\tfinal Object freshInstance)", "signatureAfterChange": "  \t\tprivate Statement methodCompletesWithParameters(final Assignments complete, \t\t\t\tfinal Object freshInstance)", "diff": ["-\t\tprivate Link methodCompletesWithParameters(final Assignments complete,", "+\t\tprivate Statement methodCompletesWithParameters(final Assignments complete,", "-\t\t\treturn new Link() {", "+\t\t\treturn new Statement() {", "-\t\t\t\tpublic void run() throws Throwable {", "+\t\t\t\tpublic void evaluate() throws Throwable {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b454e235cec87b6402e52179b419ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "95a8c63cb0a7867d58ee4a0777fec65bab39a1ec", "commitAfterChange": "c7895eb8695d79b14ff2f903fbb2fab3e52e4c43", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate Value getClassRule(final FrameworkField field)", "signatureAfterChange": "  \tprivate BisectionRule getClassRule(final FrameworkField field)", "diff": ["-\tprivate Value getClassRule(final FrameworkField field) {", "+\tprivate BisectionRule getClassRule(final FrameworkField field) {", "-\t\t\treturn (Value) field.get(null);", "+\t\t\treturn (BisectionRule) field.get(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bd50485d93535453ebb3e1f9ca47b3d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/InvokeMethod.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-        fTestMethod.invokeExplosively(fTarget);", "+        testMethod.invokeExplosively(target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "196ba0ab036b9203fd41e99cd46944dd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/matchers/StacktracePrintingMatcherTest.java", "commitBeforeChange": "872faeab15115635b3260001979ae036e64e29bf", "commitAfterChange": "a37fd9ac8b2afc54384fd32f470b54aa69dc620a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Test \tpublic void assertThatIncludesStacktrace()", "signatureAfterChange": "  \t@Test \tpublic void assertThatIncludesStacktrace()", "diff": ["-\t\t\tassertThat(actual, withStacktrace(is(expected)));", "+\t\t\tassertThat(actual, isThrowable(equalTo(expected)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26fc86ad2f832932e57b482f7b010dd3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "commitAfterChange": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprotected NotificationStrategy notifying(TestMethod method, Link link)", "signatureAfterChange": "  \tprotected Notifier notifying(TestMethod method, Statement link)", "diff": ["-\tprotected NotificationStrategy notifying(TestMethod method, Link link) {", "+\tprotected Notifier notifying(TestMethod method, Statement link) {", "-\t\t\t? new IgnoreTest()", "-\t\t\t: new Notifying(link);", "+\t\t\t? new IgnoreTestNotifier()", "+\t\t\t: new RunTestNotifier(link);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321cfc043199002e041b3ad93b4a0d4d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/manipulation/SingleMethodTest.java", "commitBeforeChange": "c503e40d9ec79ba76b69dd31d7dd32648fa13cf2", "commitAfterChange": "66cf6859fa74021320c9b0d5e0a6ffc5c86b770f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t@Test public void eliminateUnnecessaryTreeBranches() throws Exception", "signatureAfterChange": "  \t@Test public void eliminateUnnecessaryTreeBranches() throws Exception", "diff": ["-\t\tDescription description = runner.getDescription();", "-\t\tassertEquals(1, description.getChildren().size());", "+\t\tPlan plan = runner.getPlan();", "+\t\tassertEquals(1, plan.getChildren().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4665520796c34386df44029501fd9900", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "a7c4d033c831765b5e651f2c7c4ce69c2b60ce4a", "commitAfterChange": "ec1a5c3ffcc4b9b0dda6e9a683ea51103f55853e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void expect(Matcher<?> matcher)", "signatureAfterChange": " \tpublic void expect(Matcher<?> matcher)", "diff": ["-\t\tfMatcher.andAlso(matcher);", "+\t\tfMatcherBuilder.add(matcher);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "468481197df8bd8e79169802e8bc61e2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprotected JUnit4MethodRunner getMethodRunner(Method method)", "signatureAfterChange": " \t \tprotected Link anchor(TestMethod method)", "diff": ["-", "-\tprotected JUnit4MethodRunner getMethodRunner(Method method) {", "-\t\treturn new JUnit4MethodRunner(method, fTestClass);", "-\t}", "+\t", "+\tprotected Link anchor(TestMethod method) {", "+\t\treturn new InvokeMethod(method);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c0587aaaa0f2f5d8e346833e6482de", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "61994e0c0aa768b43fad1ac6e35b1e43ffc8b142", "commitAfterChange": "97654ff38f976733fa4c6ae9b28e3fe10328183f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void failuresNamedCorrectly()", "signatureAfterChange": "      @Test     public void failuresNamedCorrectly()", "diff": ["-", "-    @Test", "-    public void failuresNamedCorrectly() {", "-        Result result = JUnitCore.runClasses(FibonacciTest.class);", "-        assertEquals(", "-                \"test[1: fib(1)=1](\" + FibonacciTest.class.getName() + \")\",", "-                result.getFailures().get(0).getTestHeader());", "+", "+    @Test", "+    public void failuresNamedCorrectly() {", "+        Result result = JUnitCore.runClasses(ThreeFailures.class);", "+        assertEquals(", "+                \"testSomething[0: x=1](\" + ThreeFailures.class.getName() + \")\",", "+                result.getFailures().get(0).getTestHeader());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f745c8a368f34e2197d846941a81c8b", "repository": "https://github.com/junit-team/junit.git", "fileName": "org/junit/runners/Parameterized.java", "commitBeforeChange": "478f7f9217cf5da219a7ba298e3a87f405378194", "commitAfterChange": "168fe0844e104a224a5899b02dfd3e0fb07a32e3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static Collection<Object[]> eachOne(Object... params)", "signatureAfterChange": "  \tpublic static Collection<Object[]> eachOne(Object... params)", "diff": ["-\t\tArrayList<Object[]> returnThis= new ArrayList<Object[]>();", "-\t\tfor (Object param : params) {", "-\t\t\treturnThis.add(new Object[] { param });", "-\t\t}", "-\t\treturn returnThis;", "+\t\tList<Object[]> results= new ArrayList<Object[]>();", "+\t\tfor (Object param : params)", "+\t\t\tresults.add(new Object[] { param });", "+\t\treturn results;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6166cb1b5df36f8d88ebf28ca2243587", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "commitAfterChange": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprotected Link ignoreViolatedAssumptions(Link next)", "signatureAfterChange": " \t \tprotected Statement ignoreViolatedAssumptions(Statement next)", "diff": ["-\tprotected Link ignoreViolatedAssumptions(Link next) {", "+\tprotected Statement ignoreViolatedAssumptions(Statement next) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "654f2cd7b2d30e7f29800e4e66e19d88", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/CategoryValidator.java", "commitBeforeChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "commitAfterChange": "d9054149988487750679e35a349df7e0e2df5870", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Override     public List<Exception> validateAnnotatedMethod(Method method)", "signatureAfterChange": "     @Override     public List<Exception> validateAnnotatedMethod(FrameworkMethod method)", "diff": ["-    public List<Exception> validateAnnotatedMethod(Method method) {", "+    public List<Exception> validateAnnotatedMethod(FrameworkMethod method) {", "-        Annotation[] declaredAnnotations = method.getDeclaredAnnotations();", "-        for (Annotation annotation : declaredAnnotations) {", "+        Annotation[] annotations = method.getAnnotations();", "+        for (Annotation annotation : annotations) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6c1dcfab2389d4de305f68f8e722c6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/assertion/ComparisonFailureTest.java", "commitBeforeChange": "a19cd9db1a4280037f0d2264e45af06eaa9f8023", "commitAfterChange": "f4327736c972fedab912ea5508095e312f1f79e1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Test     public void testEndSame()", "signatureAfterChange": "  \t@Test \tpublic void compactFailureMessage()", "diff": ["-", "-\t@Test", "-    public void testEndSame() {", "-        ComparisonFailure failure = new ComparisonFailure(\"\", \"ab\", \"cb\");", "-        assertEquals(\"expected:<[a]b> but was:<[c]b>\", failure.getMessage());", "-    }", "+\tpublic void compactFailureMessage() {", "+\t\tComparisonFailure failure = new ComparisonFailure(\"\", expected, actual);", "+\t\tassertEquals(message, failure.getMessage());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863a0e8474d9bdabb053912ef8910155", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public Description getDescription()", "signatureAfterChange": "      @Override     public Description getDescription()", "diff": ["-        Description description = Description.createSuiteDescription(fTestClass);", "-        for (Throwable each : fCauses) {", "+        Description description = Description.createSuiteDescription(testClass);", "+        for (Throwable each : causes) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8687f33c95e39aa1928bc22710f915a7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/ExpectException.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void evaluate() throws Exception", "signatureAfterChange": "      @Override     public void evaluate() throws Exception", "diff": ["-            fNext.evaluate();", "+            next.evaluate();", "-            if (!fExpected.isAssignableFrom(e.getClass())) {", "+            if (!expected.isAssignableFrom(e.getClass())) {", "-                        + fExpected.getName() + \"> but was<\"", "+                        + expected.getName() + \"> but was<\"", "-                    + fExpected.getName());", "+                    + expected.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ecc26aaa5ca6875255698ca40db8cb1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/CategoryValidator.java", "commitBeforeChange": "f5e7e1ff180bb17e4f9df702a038e06a974f78f6", "commitAfterChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private void addErrorMessage(List<Throwable> errors, Class clazz)", "signatureAfterChange": "      private void addErrorMessage(List<Exception> errors, Class clazz)", "diff": ["-", "-    private void addErrorMessage(List<Throwable> errors, Class clazz) {", "+    private void addErrorMessage(List<Exception> errors, Class clazz) {", "-        errors.add(new Throwable(message));", "+        errors.add(new Exception(message));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9101db46a0e07a719bc2850a0cb7aa77", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      public void sort(Sorter sorter)", "signatureAfterChange": "      public void sort(Sorter sorter)", "diff": ["-        synchronized (fChildrenLock) {", "+        synchronized (childrenLock) {", "-            fFilteredChildren = Collections.unmodifiableCollection(sortedChildren);", "+            filteredChildren = Collections.unmodifiableCollection(sortedChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914bd47cf7894c37dbce63d84c4ac81d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxCore.java", "commitBeforeChange": "451ca12156d5704809a1feff78a10a9451cd2023", "commitAfterChange": "ce7bda3346278aab6ccebedcd5b8c8d4ab27ba02", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \t\tprivate Long getFailure(Description o1)", "signatureAfterChange": " \t \t\tprivate Long getFailure(Description key)", "diff": ["-\t", "-\t\tprivate Long getFailure(Description o1) {", "-\t\t\tLong result= fFailures.get(o1);", "+\t\tprivate Long getFailure(Description key) {", "+\t\t\tLong result= getFailureTimestamp(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95fe15788039dbecb37a8474a1f5a54c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/categories/CategoriesMark2Test.java", "commitBeforeChange": "04189a834a01ae7ff3189bfa869e90d1a7f83acf", "commitAfterChange": "1bbab715de4c64943948ecc3739c8d5569378672", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\tpublic static CategoryFilter2 include(Class<?> included)", "signatureAfterChange": "  \t\tpublic static CategoryFilter include(Class<?> included)", "diff": ["-\t\tpublic static CategoryFilter2 include(Class<?> included) {", "-\t\t\treturn new CategoryFilter2(included);", "+\t\tpublic static CategoryFilter include(Class<?> included) {", "+\t\t\treturn new CategoryFilter(included);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8486019171e631a36299c4f4152750b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/requests/SortingRequest.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public Runner getRunner()", "signatureAfterChange": "      @Override     public Runner getRunner()", "diff": ["-        Runner runner = fRequest.getRunner();", "-        new Sorter(fComparator).apply(runner);", "+        Runner runner = request.getRunner();", "+        new Sorter(comparator).apply(runner);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89ce14270b82e9304601456fff9297a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/TestWatcher.java", "commitBeforeChange": "c63e0913154a8f01e9f78fef9de23fffd7a1a717", "commitAfterChange": "6fb53a7e272a6ecc232840c96b4cfe5235a8f823", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void skippedQuietly(AssumptionViolatedException t, Description description, \t\t\tList<Throwable> errors)", "signatureAfterChange": "  \tprivate void skippedQuietly(AssumptionViolatedException e, Description description, \t\t\tList<Throwable> errors)", "diff": ["-\tprivate void skippedQuietly(AssumptionViolatedException t, Description description,", "+\tprivate void skippedQuietly(AssumptionViolatedException e, Description description,", "-\t\t\tskipped(t, description);", "-\t\t} catch (Throwable t1) {", "-\t\t\terrors.add(t1);", "+\t\t\tskipped(e, description);", "+\t\t} catch (Throwable t) {", "+\t\t\terrors.add(t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f3053aca5dd4071b5c5daeb1e883a1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Result.java", "commitBeforeChange": "c732aa178a822671d3de88e5ece05f9bf464172b", "commitAfterChange": "af9634a3656bcd9c3988692c32381d0772077584", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t\t \t\t@Override \t\tpublic void testAssumptionInvalid(Description description, \t\t\t\tAssumptionViolatedException e)", "signatureAfterChange": " \t\t \t\t@Override \t\tpublic void testAssumptionInvalid(Description description, \t\t\t\tAssumptionViolatedException e)", "diff": ["-\t\t\t// TODO: (Dec 12, 2007 2:39:00 PM) text should be unrunnable, not IGNORED TEST", "-", "-\t\t\tfUnrunnables.add(new FailedAssumption(description, e));", "+\t\t\tfInvalidAssumptions.add(new InvalidAssumption(description, e));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b784106d978999ef3885405508ffb517", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void sort(final Sorter sorter)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\t\tCollections.sort(fTestMethods, new Comparator<Method>() {", "-\t\t\tpublic int compare(Method o1, Method o2) {", "-\t\t\t\treturn sorter.compare(methodDescription(o1), methodDescription(o2));", "+\t\tCollections.sort(fTestMethods, new Comparator<TestMethod>() {", "+\t\t\tpublic int compare(TestMethod o1, TestMethod o2) {", "+\t\t\t\treturn sorter.compare(methodDescription(o1),", "+\t\t\t\t\t\tmethodDescription(o2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90d0cc12b9316bed343aeb0160a4ad6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "53e85db0bec2e03bf93afc73dced9b4a0b231644", "commitAfterChange": "8bed6c9278517d9fb13f274bc5a6ade358a39745", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprotected Statement possiblyExpectingExceptions(TestMethod method, \t\t\tStatement next)", "signatureAfterChange": "  \tprivate Statement possiblyExpectingExceptions(TestAnnotation annotation, \t\t\tStatement next)", "diff": ["-\tprotected Statement possiblyExpectingExceptions(TestMethod method,", "+\tprivate Statement possiblyExpectingExceptions(TestAnnotation annotation,", "-\t\treturn method.expectsException() ? new ExpectException(next, method", "+\t\treturn annotation.expectsException() ? new ExpectException(next, annotation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a777e5422c6803d8cc1651abcbc929", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "          void run()", "signatureAfterChange": "          void run()", "diff": ["-            int capacity = fCurrentListeners.size();", "+            int capacity = currentListeners.size();", "-            for (RunListener listener : fCurrentListeners) {", "+            for (RunListener listener : currentListeners) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deacfe2c50e3dd75eec7ac252690590d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public BlockJUnit4ClassRunnerWithParameters(TestWithParameters test)             throws InitializationError", "signatureAfterChange": "      public BlockJUnit4ClassRunnerWithParameters(TestWithParameters test)             throws InitializationError", "diff": ["-        fParameters = test.getParameters().toArray(", "+        parameters = test.getParameters().toArray(", "-        fName = test.getName();", "+        name = test.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e700a87af220fe24f992da82f7d7ceb7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      private Collection<T> getFilteredChildren()", "signatureAfterChange": "      private Collection<T> getFilteredChildren()", "diff": ["-        if (fFilteredChildren == null) {", "-            synchronized (fChildrenLock) {", "-                if (fFilteredChildren == null) {", "-                    fFilteredChildren = Collections.unmodifiableCollection(getChildren());", "+        if (filteredChildren == null) {", "+            synchronized (childrenLock) {", "+                if (filteredChildren == null) {", "+                    filteredChildren = Collections.unmodifiableCollection(getChildren());", "-        return fFilteredChildren;", "+        return filteredChildren;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1614cf70f8919333521013c3f06f674", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "diff": ["-            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "+            errors.add(new Exception(\"Method \" + method.getName() + \"() \" + state + \" be static\"));", "-            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "+            errors.add(new Exception(\"Method \" + method.getName() + \"() should be public\"));", "-        if (fMethod.getReturnType() != Void.TYPE) {", "-            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));", "+        if (method.getReturnType() != Void.TYPE) {", "+            errors.add(new Exception(\"Method \" + method.getName() + \"() should be void\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8deb115d467f8ae1ecca92840bf7051", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Result.java", "commitBeforeChange": "c732aa178a822671d3de88e5ece05f9bf464172b", "commitAfterChange": "af9634a3656bcd9c3988692c32381d0772077584", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   \tpublic List<FailedAssumption> getFailedAssumptions()", "signatureAfterChange": " \t \tpublic List<InvalidAssumption> getInvalidAssumptions()", "diff": ["-", "-\tpublic List<FailedAssumption> getFailedAssumptions() {", "-\t\treturn fUnrunnables;", "+\t", "+\tpublic List<InvalidAssumption> getInvalidAssumptions() {", "+\t\treturn fInvalidAssumptions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffebff2a7018a776f3d70802f9b467d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "56b1d5d4342c13151ae2d4b3f9aca146732cfb42", "commitAfterChange": "0815c4d619b177431e64a2485baa0f746f3e2886", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected List<BisectionRule> classRules()", "signatureAfterChange": " \tprotected List<TestRule> classRules()", "diff": ["-\tprotected List<BisectionRule> classRules() {", "-\t\tList<BisectionRule> results= new ArrayList<BisectionRule>();", "+\tprotected List<TestRule> classRules() {", "+\t\tList<TestRule> results= new ArrayList<TestRule>();"]}]}
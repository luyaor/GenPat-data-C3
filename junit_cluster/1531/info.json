{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "589c2c97cd64311d3249e90642cb0317", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b45bc429f108e3838b248e0442abb9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "commitAfterChange": "9c8d59d9869280a698c3f3a119eb69f0e897c94b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic void run(RunNotifier notifier)", "signatureAfterChange": " \t \tprivate List<Throwable> getCauses(Throwable cause)", "diff": ["-\tpublic void run(RunNotifier notifier) {", "-\t\tnotifier.testAborted(fDescription, fCause);", "+\t", "+\tprivate List<Throwable> getCauses(Throwable cause) {", "+\t\tif (cause instanceof InvocationTargetException)", "+\t\t\treturn getCauses(cause.getCause());", "+\t\tif (cause instanceof InitializationError)", "+\t\t\treturn ((InitializationError) cause).getCauses();", "+\t\treturn Arrays.asList(cause);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f15e489efe482ed129a5bbc6c94efbd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "5408162765635af9b42a47ea865b06865284a2ab", "commitAfterChange": "07cf3c7fa446da330776502fb7cdc7329bfa2265", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private Thread[] getThreadArray(ThreadGroup group)", "signatureAfterChange": "     private List<Thread> getThreadsInGroup(ThreadGroup group)", "diff": ["-    private Thread[] getThreadArray(ThreadGroup group) {", "-        final int count = group.activeCount(); // this is just an estimate", "-        int enumSize = Math.max(count * 2, 100);", "-        int enumCount;", "-        Thread[] threads;", "-        int loopCount = 0;", "-        while (true) {", "-            threads = new Thread[enumSize];", "-            enumCount = group.enumerate(threads);", "-            if (enumCount < enumSize) {", "-                break;", "+    private List<Thread> getThreadsInGroup(ThreadGroup group) {", "+        final int activeThreadCount = group.activeCount(); // this is just an estimate", "+        int threadArraySize = Math.max(activeThreadCount * 2, 100);", "+        for (int loopCount = 0; loopCount < 5; loopCount++) {", "+            Thread[] threads = new Thread[threadArraySize];", "+            int enumCount = group.enumerate(threads);", "+            if (enumCount < threadArraySize) {", "+                return Arrays.asList(threads).subList(0, enumCount);", "-            enumSize += 100;", "-            if (++loopCount >= 5) {", "-                return null;", "-            }", "-            // threads are proliferating too fast for us.  Bail before we get into ", "-            // trouble.", "+            threadArraySize += 100;", "-        return copyThreads(threads, enumCount);", "-    }", "+        // threads are proliferating too fast for us.  Bail before we get into ", "+        // trouble.", "+        return Collections.emptyList();"]}]}
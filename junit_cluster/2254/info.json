{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "def97c1d300bbb85bc8431e442596767", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1067f201c48e6e005d9df95e813dcd09", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "cbf46b88c2937aece7018fa50ba4dbb133e03d06", "commitAfterChange": "1fa373f01d126d437f08a57a7b5e7a7ec0a01b85", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "signatureAfterChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "diff": ["-\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @parameter fields. @parameter fields counted: \"+fields.size()+\", available parameters: \"+fParameters.length+\".\");", "+\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @parameter fields.\"+", "+\t\t\t\t\t\" @Parameter fields counted: \"+fields.size()+\", available parameters: \"+fParameters.length+\".\");", "-\t\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+\" with the value \"+fParameters[index]+\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+field.getType().getSimpleName()+\").\", iare);", "+\t\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+", "+\t\t\t\t\t\t\" with the value \"+fParameters[index]+", "+\t\t\t\t\t\t\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+", "+\t\t\t\t\t\tfield.getType().getSimpleName()+\").\", iare);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73b4a0365454adc9294facac5ff3d8ea", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/OldTestClassRunner.java", "commitBeforeChange": "141a144b3d4aca9a1f39f92c1d697a249e991317", "commitAfterChange": "7f08797ece011ff765e98635323d59811363df5b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate TestListener getListener(final RunNotifier notifier)", "signatureAfterChange": "  \tpublic static TestListener createAdaptingListener(final RunNotifier notifier)", "diff": ["-\tprivate TestListener getListener(final RunNotifier notifier) {", "-\t\treturn new TestListener() {", "-\t\t\tpublic void endTest(Test test) {", "-\t\t\t\t// TODO: uncovered", "-\t\t\t\tnotifier.fireTestFinished(asDescription(test));", "-\t\t\t}", "-", "-\t\t\tpublic void startTest(Test test) {", "-\t\t\t\tnotifier.fireTestStarted(asDescription(test));", "-\t\t\t}", "-\t\t", "-\t\t\t// Implement junit.framework.TestListener", "-\t\t\t//TODO method not covered", "-\t\t\tpublic void addError(Test test, Throwable t) {", "-\t\t\t\tFailure failure= new Failure(asDescription(test), t);", "-\t\t\t\tnotifier.fireTestFailure(failure);", "-\t\t\t}", "-\t\t\t", "-\t\t\tprivate Description asDescription(Test test) {", "-\t\t\t\tif (test instanceof JUnit4TestCaseFacade) {", "-\t\t\t\t\tJUnit4TestCaseFacade facade= (JUnit4TestCaseFacade) test;", "-\t\t\t\t\treturn facade.getDescription();", "-\t\t\t\t}", "-\t\t\t\treturn Description.createTestDescription(test.getClass(), getName(test));", "-\t\t\t}", "-", "-\t\t\tprivate String getName(Test test) {", "-\t\t\t\tif (test instanceof TestCase)", "-\t\t\t\t\treturn ((TestCase) test).getName();", "-\t\t\t\telse", "-\t\t\t\t\treturn test.toString();", "-\t\t\t}", "-", "-\t\t\t//TODO method not covered", "-\t\t\tpublic void addFailure(Test test, AssertionFailedError t) {", "-\t\t\t\taddError(test, t);", "-\t\t\t}", "-\t\t};", "+\tpublic static TestListener createAdaptingListener(final RunNotifier notifier) {", "+\t\treturn new OldTestClassAdaptingListener(notifier);"]}]}
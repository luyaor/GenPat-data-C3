{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db9433545533c866a64dde4cfb43a7e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be932c0426029f89de1fa15512aed0c4", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/TestSuite.java", "commitBeforeChange": "1e752dcb0a967bcb47fae4b12fb8765e79571e69", "commitAfterChange": "bfc94ee739d62127c7477300b26127bd560765a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addTestMethod(Method m, Vector names, Constructor constructor)", "signatureAfterChange": "  \tprivate void addTestMethod(Method m, Vector names, Constructor constructor)", "diff": ["-\t\t\t} catch (Exception t) {", "-\t\t\t\taddTest(warning(\"Cannot instantiate test case: \"+name));", "+\t\t\t} catch (InstantiationException e) {", "+\t\t\t\taddTest(warning(\"Cannot instantiate test case: \"+name+\" (\"+e.toString()+\")\"));", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\taddTest(warning(\"Exception in constructor: \"+name+\" (\"+e.getTargetException().toString()+\")\"));", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\taddTest(warning(\"Cannot access test case: \"+name+\" (\"+e.toString()+\")\"));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d76d009b489a7037c9332ac8a7dbd857", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/Assert.java", "commitBeforeChange": "aa7047aacc6dee8bc7f07da92ffa4a661737ca63", "commitAfterChange": "de7ac4a1c3c7c9e59befe41d120daaa7827b7b24", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tstatic String format(String message, Object expected, Object actual)", "signatureAfterChange": "  \tstatic String format(String message, Object expected, Object actual)", "diff": ["-\t\treturn formatted + \"expected:<\" + expected + \"> but was:<\" + actual + \">\";", "+\t\tString expectedString= expected.toString();", "+\t\tString actualString= actual.toString();", "+\t\tif (expectedString.equals(actualString))", "+\t\t\treturn formatted + \"expected: \" + expected.getClass().getName() + \"<\" + expectedString + \"> but was: \" + actual.getClass().getName() + \"<\" + actualString + \">\";", "+\t\telse", "+\t\t\treturn formatted + \"expected:<\" + expectedString + \"> but was:<\" + actualString + \">\";"]}]}
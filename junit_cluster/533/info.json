{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37e875f540a9ee669545554a8cec6fd5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfccbb8bbc971cc64f8fda192a11231", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/ComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate int assertArraysAreSameLength(Object expecteds, \t\t\tObject actuals, String header)", "signatureAfterChange": "      private int assertArraysAreSameLength(Object expecteds,             Object actuals, String header)", "diff": ["-\tprivate int assertArraysAreSameLength(Object expecteds,", "-\t\t\tObject actuals, String header) {", "-\t\tif (expecteds == null)", "-\t\t\tAssert.fail(header + \"expected array was null\");", "-\t\tif (actuals == null)", "-\t\t\tAssert.fail(header + \"actual array was null\");", "-\t\tint actualsLength= Array.getLength(actuals);", "-\t\tint expectedsLength= Array.getLength(expecteds);", "-\t\tif (actualsLength != expectedsLength)", "-\t\t\tAssert.fail(header + \"array lengths differed, expected.length=\"", "-\t\t\t\t\t+ expectedsLength + \" actual.length=\" + actualsLength);", "-\t\treturn expectedsLength;", "-\t}", "+    private int assertArraysAreSameLength(Object expecteds,", "+            Object actuals, String header) {", "+        if (expecteds == null) {", "+            Assert.fail(header + \"expected array was null\");", "+        }", "+        if (actuals == null) {", "+            Assert.fail(header + \"actual array was null\");", "+        }", "+        int actualsLength = Array.getLength(actuals);", "+        int expectedsLength = Array.getLength(expecteds);", "+        if (actualsLength != expectedsLength) {", "+            Assert.fail(header + \"array lengths differed, expected.length=\"", "+                    + expectedsLength + \" actual.length=\" + actualsLength);", "+        }", "+        return expectedsLength;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36580863150f6deaea3a67930fcd4dac", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "fa6483264ce2530585b374c276c2266d0d0c4ef0", "commitAfterChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate static void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "signatureAfterChange": " \tprivate static void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "diff": ["-\t\tif (expecteds == null)", "-\t\t\tfail(header + \"expected array was null\");", "-\t\tif (actuals == null)", "-\t\t\tfail(header + \"actual array was null\");", "-\t\tint actualsLength= Array.getLength(actuals);", "-\t\tint expectedsLength= Array.getLength(expecteds);", "-\t\tif (actualsLength != expectedsLength)", "-\t\t\tfail(header + \"array lengths differed, expected.length=\"", "-\t\t\t\t\t+ expectedsLength + \" actual.length=\" + actualsLength);", "+\t\tint expectedsLength= assertArraysAreSameLength(expecteds, actuals,", "+\t\t\t\theader);", "+\t\t\t// TODO (Nov 6, 2008 12:58:55 PM): Is this a DUP?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c30a4d8949119a874355b8809d262a86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tstatic String format(String message, Object expected, Object actual)", "signatureAfterChange": "      static String format(String message, Object expected, Object actual)", "diff": ["-\tstatic String format(String message, Object expected, Object actual) {", "-\t\tString formatted= \"\";", "-\t\tif (message != null && !message.equals(\"\"))", "-\t\t\tformatted= message + \" \";", "-\t\tString expectedString= String.valueOf(expected);", "-\t\tString actualString= String.valueOf(actual);", "-\t\tif (expectedString.equals(actualString))", "-\t\t\treturn formatted + \"expected: \"", "-\t\t\t\t\t+ formatClassAndValue(expected, expectedString)", "-\t\t\t\t\t+ \" but was: \" + formatClassAndValue(actual, actualString);", "-\t\telse", "-\t\t\treturn formatted + \"expected:<\" + expectedString + \"> but was:<\"", "-\t\t\t\t\t+ actualString + \">\";", "-\t}", "+", "+    static String format(String message, Object expected, Object actual) {", "+        String formatted = \"\";", "+        if (message != null && !message.equals(\"\")) {", "+            formatted = message + \" \";", "+        }", "+        String expectedString = String.valueOf(expected);", "+        String actualString = String.valueOf(actual);", "+        if (expectedString.equals(actualString)) {", "+            return formatted + \"expected: \"", "+                    + formatClassAndValue(expected, expectedString)", "+                    + \" but was: \" + formatClassAndValue(actual, actualString);", "+        } else {", "+            return formatted + \"expected:<\" + expectedString + \"> but was:<\"", "+                    + actualString + \">\";", "+        }", "+    }"]}]}
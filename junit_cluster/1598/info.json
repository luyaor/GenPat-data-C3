{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dab6908a8f35b13e10bc2f7ffccace54", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35fb85a6209a25e1f8fa034183b6d05a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\tprivate Object[] computeParams() throws Exception", "signatureAfterChange": "  \tprivate void createRunnersForParameters(Iterable<Object[]> allParameters) \t\t\tthrows InitializationError, Exception", "diff": ["-", "-\t\tprivate Object[] computeParams() throws Exception {", "-\t\t\ttry {", "-\t\t\t\treturn fParameterList.get(fParameterSetNumber);", "-\t\t\t} catch (ClassCastException e) {", "-\t\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\t\"%s.%s() must return a Collection of arrays.\",", "-\t\t\t\t\t\tgetTestClass().getName(), getParametersMethod(", "-\t\t\t\t\t\t\t\tgetTestClass()).getName()));", "-\t\t\t}", "+\tprivate void createRunnersForParameters(Iterable<Object[]> allParameters)", "+\t\t\tthrows InitializationError, Exception {", "+\t\ttry {", "+\t\t\tint i= 0;", "+\t\t\tfor (Object[] parametersOfSingleTest : allParameters) {", "+\t\t\t\tTestClassRunnerForParameters runner= new TestClassRunnerForParameters(", "+\t\t\t\t\t\tgetTestClass().getJavaClass(), parametersOfSingleTest,", "+\t\t\t\t\t\ti);", "+\t\t\t\trunners.add(runner);", "+\t\t\t\t++i;", "+\t\t\t}", "+\t\t} catch (ClassCastException e) {", "+\t\t\tthrow parametersMethodReturnedWrongType();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "505eb113b294889b44809733455b2027", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 74, "signatureBeforeChange": " \t \tprivate void showErrorTrace()", "signatureAfterChange": "  \tprivate void showFailureDetail(Test test)", "diff": ["-\t", "-\tprivate void showErrorTrace() {", "-\t\tint index= fFailureList.getSelectedIndex();", "-\t\tif (index == -1)", "-\t\t\treturn;", "-", "-\t\tTestFailure failure= (TestFailure) fFailures.elementAt(index);", "-\t\tfTrace.setText(getTrace(failure.thrownException()));", "-\t\tfTrace.select(0, 0);", "-\t}", "+\tprivate void showFailureDetail(Test test) {", "+\t\tif (test != null) {", "+\t\t\tListModel failures= getFailures();", "+\t\t\tfor (int i= 0; i < failures.getSize(); i++) {", "+\t\t\t\tTestFailure failure= (TestFailure)failures.getElementAt(i);", "+\t\t\t\tif (failure.failedTest() == test) {", "+\t\t\t\t\tfFailureView.showFailure(failure);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfFailureView.clear();", "+\t}"]}]}
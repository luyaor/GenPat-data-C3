{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41d8cfe55c58a277d239968b7c029121", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6eb4a459de8579026116bd93480e2b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/manipulation/Filter.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void apply(Object child) throws NoTestsRemainException", "signatureAfterChange": "     public void apply(Object child) throws NoTestsRemainException", "diff": ["-\t */", "-\tpublic void apply(Object child) throws NoTestsRemainException {", "-\t\tif (!(child instanceof Filterable))", "-\t\t\treturn;", "-\t\tFilterable filterable= (Filterable) child;", "-\t\tfilterable.filter(this);", "-\t}", "+     */", "+    public void apply(Object child) throws NoTestsRemainException {", "+        if (!(child instanceof Filterable)) {", "+            return;", "+        }", "+        Filterable filterable = (Filterable) child;", "+        filterable.filter(this);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9804fb48f1b76a8aeb5eb0c0cac04b73", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/manipulation/Filter.java", "commitBeforeChange": "8964b10541f840e559a3308a043b64a8c1f6af57", "commitAfterChange": "42beed3ad166a9cceefc59f6c79a16844cae0d02", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void apply(Runner runner) throws NoTestsRemainException", "signatureAfterChange": " \tpublic void apply(Object child) throws NoTestsRemainException", "diff": ["-\tpublic void apply(Runner runner) throws NoTestsRemainException {", "-\t\tif (runner instanceof Filterable) {", "-\t\t\tFilterable filterable= (Filterable)runner;", "-\t\t\tfilterable.filter(this);", "-\t\t}", "+\tpublic void apply(Object child) throws NoTestsRemainException {", "+\t\tif (!(child instanceof Filterable))", "+\t\t\treturn;", "+\t\tFilterable filterable= (Filterable) child;", "+\t\tfilterable.filter(this);"]}]}
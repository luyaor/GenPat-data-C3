{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7acd8c046bab25fcd57b78f45c1d89c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f64f5df6f18c9caa3bce3aa4eb8108d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "0dc3de7fbcf997ca8465ed9e7793a0b4f730121b", "commitAfterChange": "3d08ecc6a661f09520559637794c9a161db90f3d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \t\t@Override \t\tprotected void runChild(final Runner runner, final RunNotifier notifier)", "signatureAfterChange": "  \t\t@Override \t\tpublic void runChild(final T child, final RunNotifier notifier)", "diff": ["-\t", "-\t\t@Override", "-\t\tprotected void runChild(final Runner runner, final RunNotifier notifier) {", "-\t\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\t\tpublic Object call() throws Exception {", "-\t\t\t\t\tsuperRunChild(runner, notifier);", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\tfCollator.process(callable);", "-\t\t}", "+", "+\t\t@Override", "+\t\tpublic void runChild(final T child, final RunNotifier notifier) {", "+\t\t\tthis.fResults.add(fService.submit(new Callable<Object>() {", "+\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\tfDelegate.internalRunChild(child, notifier);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97c8c99b1a762f20999a6e09618ea067", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "b77d9de8e3e2894fc6120c95a8e7766c38912d49", "commitAfterChange": "796e723caa0a1f75bb7b48b2454bea633fbf8e4e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \t\t@Override \t\tprotected void runChild(final Runner runner, final RunNotifier notifier)", "signatureAfterChange": "  \t\t@Override \t\tpublic void runChild(final T child, final RunNotifier notifier)", "diff": ["-\t", "-\t\t@Override", "-\t\tprotected void runChild(final Runner runner, final RunNotifier notifier) {", "-\t\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\t\tpublic Object call() throws Exception {", "-\t\t\t\t\tsuperRunChild(runner, notifier);", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\tfCollator.process(callable);", "-\t\t}", "+", "+\t\t@Override", "+\t\tpublic void runChild(final T child, final RunNotifier notifier) {", "+\t\t\tthis.fResults.add(fService.submit(new Callable<Object>() {", "+\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\tfDelegate.internalRunChild(child, notifier);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}));", "+\t\t}"]}]}
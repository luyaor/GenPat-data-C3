{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d32be7ab528bce7b245d6470601b3569", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a3c3b1a2c42d07c2bcbad58eb712d6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/runner/WithExtendedParameterSources.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void shouldFilterNull()", "signatureAfterChange": "      @Test     public void ShouldRejectTheoriesWithOnlyDisallowedNullData()", "diff": ["-    public void shouldFilterNull() {", "-        assertThat(testResult(ShouldFilterNull.class), isSuccessful());", "+", "+    @Test", "+    public void ShouldRejectTheoriesWithOnlyDisallowedNullData() {", "+        assertThat(testResult(ShouldRejectTheoriesWithOnlyDisallowedNullData.class), not(isSuccessful()));", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56f4c8967ef4f7ebbee23bfbda8c5f85", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/runner/WithDataPointMethod.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void ignoreExceptionsFromDataPointMethods()", "signatureAfterChange": "      @Test     public void shouldFailFromExceptionsInSingleDataPointMethods()", "diff": ["+", "-    public void ignoreExceptionsFromDataPointMethods() {", "-        assertThat(testResult(HasUglyDataPointMethod.class), isSuccessful());", "+    public void shouldFailFromExceptionsInSingleDataPointMethods() {", "+        assertThat(testResult(HasFailingSingleDataPointMethod.class), not(isSuccessful()));", "+    }"]}]}
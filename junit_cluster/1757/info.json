{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b29ac0c6445b60c7f59bdd3093f6a43", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27a35d524d73ee3aa2f80fd2b2222538", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tTest createTest(Description description)", "signatureAfterChange": "      Test createTest(Description description)", "diff": ["-\tTest createTest(Description description) {", "-\t\tif (description.isTest())", "-\t\t\treturn new JUnit4TestCaseFacade(description);", "-\t\telse {", "-\t\t\tTestSuite suite = new TestSuite(description.getDisplayName());", "-\t\t\tfor (Description child : description.getChildren())", "-\t\t\t\tsuite.addTest(asTest(child));", "-\t\t\treturn suite;", "-\t\t}", "-\t}", "+    Test createTest(Description description) {", "+        if (description.isTest()) {", "+            return new JUnit4TestCaseFacade(description);", "+        } else {", "+            TestSuite suite = new TestSuite(description.getDisplayName());", "+            for (Description child : description.getChildren()) {", "+                suite.addTest(asTest(child));", "+            }", "+            return suite;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c5defbfb1c834e53e2c636d812497db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/TemporaryFolder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void recursiveDelete(File file)", "signatureAfterChange": "      private void recursiveDelete(File file)", "diff": ["-\tprivate void recursiveDelete(File file) {", "-\t\tFile[] files= file.listFiles();", "-\t\tif (files != null)", "-\t\t\tfor (File each : files)", "-\t\t\t\trecursiveDelete(each);", "-\t\tfile.delete();", "-\t}", "+", "+    private void recursiveDelete(File file) {", "+        File[] files = file.listFiles();", "+        if (files != null) {", "+            for (File each : files) {", "+                recursiveDelete(each);", "+            }", "+        }", "+        file.delete();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6cc8df56348c2279ba67e627219b633", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic IMoney multiply(int factor)", "signatureAfterChange": "      public IMoney multiply(int factor)", "diff": ["-\t}", "-\tpublic IMoney multiply(int factor) {", "-\t\tMoneyBag result= new MoneyBag();", "-\t\tif (factor != 0)", "-\t\t\tfor (Money each : fMonies)", "-\t\t\t\tresult.appendMoney((Money) each.multiply(factor));", "-\t\treturn result;", "-\t}", "+", "+    public IMoney multiply(int factor) {", "+        MoneyBag result = new MoneyBag();", "+        if (factor != 0) {", "+            for (Money each : fMonies) {", "+                result.appendMoney((Money) each.multiply(factor));", "+            }", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb8c0b465355025168c6d31dfbcf46b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void assertNoCategorizedDescendentsOfUncategorizeableParents(Description description) throws InitializationError", "signatureAfterChange": "      private void assertNoCategorizedDescendentsOfUncategorizeableParents(Description description) throws InitializationError", "diff": ["-\tprivate void assertNoCategorizedDescendentsOfUncategorizeableParents(Description description) throws InitializationError {", "-\t\tif (!canHaveCategorizedChildren(description))", "-\t\t\tassertNoDescendantsHaveCategoryAnnotations(description);", "-\t\tfor (Description each : description.getChildren())", "-\t\t\tassertNoCategorizedDescendentsOfUncategorizeableParents(each);", "-\t}", "+    private void assertNoCategorizedDescendentsOfUncategorizeableParents(Description description) throws InitializationError {", "+        if (!canHaveCategorizedChildren(description)) {", "+            assertNoDescendantsHaveCategoryAnnotations(description);", "+        }", "+        for (Description each : description.getChildren()) {", "+            assertNoCategorizedDescendentsOfUncategorizeableParents(each);", "+        }", "+    }"]}]}
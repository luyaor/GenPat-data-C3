{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf85dae587e1620d7278b223b18231a2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4202b8cfcb316fadf0e87f9bc37590b8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "15566c4b6633db5cc84cae78088b36346b7d42f4", "commitAfterChange": "9d3821f6411ad85a683b8d38e4d42411229f2eec", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Test     public void annotationToMethodsReturnsValuesInTheMapThatAreUnmodifiable()", "signatureAfterChange": "          @Test     public void providesAnnotatedMethodsSortedByName()", "diff": ["+    @Test", "+    public void providesAnnotatedMethodsSortedByName() {", "+    \tTestClass tc = new TestClass(MethodsAnnotated.class);", "+    \tList<FrameworkMethod> annotatedMethods = tc.getAnnotatedMethods();", "+    \tassertThat(\"Wrong number of annotated methods.\",", "+    \t    annotatedMethods.size(), is(3));", "+    \tassertThat(\"First annotated method is wrong.\", annotatedMethods", "+    \t    .iterator().next().getName(), is(\"methodA\"));", "+    }", "-", "-    @Test", "-    public void annotationToMethodsReturnsValuesInTheMapThatAreUnmodifiable() {", "-        TestClass tc = new TestClass(MethodsAnnotated.class);", "-        Map<Class<? extends Annotation>, List<FrameworkMethod>> annotationToMethods = tc.getAnnotationToMethods();", "-        List<FrameworkMethod> methods = annotationToMethods.get(Ignore.class);", "-        exception.expect(UnsupportedOperationException.class);", "-        methods.add(null);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78ac463620c99b3a2b7ad98ce601f48c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "15566c4b6633db5cc84cae78088b36346b7d42f4", "commitAfterChange": "9d3821f6411ad85a683b8d38e4d42411229f2eec", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void annotationToFieldsReturnsValuesInTheMapThatAreUnmodifiable()", "signatureAfterChange": "          @Test     public void providesAnnotatedFieldsSortedByName()", "diff": ["+    public void providesAnnotatedFieldsSortedByName() {", "+        TestClass tc= new TestClass(FieldAnnotated.class);", "+        List<FrameworkField> annotatedFields= tc.getAnnotatedFields();", "+        assertThat(\"Wrong number of annotated fields.\", annotatedFields.size(), is(3));", "+        assertThat(\"First annotated field is wrong.\", annotatedFields", "+            .iterator().next().getName(), is(\"fieldA\"));", "+    }", "-", "-    @Test", "-    public void annotationToFieldsReturnsValuesInTheMapThatAreUnmodifiable() {", "-        TestClass tc = new TestClass(FieldAnnotated.class);", "-        Map<Class<? extends Annotation>, List<FrameworkField>> annotationToFields = tc.getAnnotationToFields();", "-        List<FrameworkField> fields = annotationToFields.get(Rule.class);", "-        exception.expect(UnsupportedOperationException.class);", "-        fields.add(null);", "-    }"]}]}
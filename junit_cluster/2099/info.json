{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac88acdd07a5a2e5a868d9e9b1dea8b0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48fecabf708c2ef98105a248bec81875", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\") \tprivate List<Object[]> getParametersList(TestClass klass) \t\t\tthrows Throwable", "signatureAfterChange": "  \t@SuppressWarnings(\"unchecked\") \tprivate Iterable<Object[]> getAllParameters() \t\t\tthrows Throwable", "diff": ["-\tprivate List<Object[]> getParametersList(TestClass klass)", "+\tprivate Iterable<Object[]> getAllParameters()", "-\t\treturn (List<Object[]>) getParametersMethod(klass).invokeExplosively(", "-\t\t\t\tnull);", "+\t\tObject parameters= getParametersMethod().invokeExplosively(null);", "+\t\tif (parameters instanceof Iterable)", "+\t\t\treturn (Iterable<Object[]>) parameters;", "+\t\telse", "+\t\t\tthrow parametersMethodReturnedWrongType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62edc2087eee27c37813f4e33e9aaab7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "126b8eb8d9e550bfe3bbb03ff92b047172d928bb", "commitAfterChange": "53929101b4d9606d92dfd8d52e87f5dda467d51a", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static <T> void assertThat(String reason, T actual, \t\t\tMatcher<? super T> matcher)", "signatureAfterChange": " \tpublic static <T> void assertThat(String reason, T actual, \t\t\tMatcher<? super T> matcher)", "diff": ["-\t\t\tthrow new java.lang.AssertionError(description.toString());", "-\t\t}", "+\t\t\tjava.lang.AssertionError assertionError= new java.lang.AssertionError(", "+\t\t\t\t\tdescription.toString());", "+\t\t\tif (actual instanceof Throwable)", "+\t\t\t\tassertionError.initCause((Throwable) actual);", "+\t\t\tthrow assertionError;", "+\t}"]}]}
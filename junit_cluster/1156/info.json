{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f78be27c0d78d780b423acfd75b4cf4f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5af028209a47777e04cfb70decb5b33f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private FrameworkMethod getParametersMethod() throws Exception", "signatureAfterChange": "          private FrameworkMethod getParametersMethod() throws Exception", "diff": ["-    private FrameworkMethod getParametersMethod() throws Exception {", "-        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(", "-                Parameters.class);", "-        for (FrameworkMethod each : methods) {", "-            if (each.isStatic() && each.isPublic()) {", "-                return each;", "-        throw new Exception(\"No public static parameters method on class \"", "-                + getTestClass().getName());", "-    }", "+        private FrameworkMethod getParametersMethod() throws Exception {", "+            List<FrameworkMethod> methods = testClass", "+                    .getAnnotatedMethods(Parameters.class);", "+            for (FrameworkMethod each : methods) {", "+                if (each.isStatic() && each.isPublic()) {", "+                    return each;", "+                }", "+            }", "+", "+            throw new Exception(\"No public static parameters method on class \"", "+                    + testClass.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9525363d845d154da9d4f7e855b807", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate FrameworkMethod getParametersMethod() throws Exception", "signatureAfterChange": "      private FrameworkMethod getParametersMethod() throws Exception", "diff": ["-\tprivate FrameworkMethod getParametersMethod() throws Exception {", "-\t\tList<FrameworkMethod> methods= getTestClass().getAnnotatedMethods(", "-\t\t\t\tParameters.class);", "-\t\tfor (FrameworkMethod each : methods) {", "-\t\t\tif (each.isStatic() && each.isPublic())", "-\t\t\t\treturn each;", "-\t\t}", "-\t\tthrow new Exception(\"No public static parameters method on class \"", "-\t\t\t\t+ getTestClass().getName());", "-\t}", "+    private FrameworkMethod getParametersMethod() throws Exception {", "+        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(", "+                Parameters.class);", "+        for (FrameworkMethod each : methods) {", "+            if (each.isStatic() && each.isPublic()) {", "+                return each;", "+            }", "+        }", "+        throw new Exception(\"No public static parameters method on class \"", "+                + getTestClass().getName());", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62292597359530e409afc4c9d51fdb69", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68518839680ebd1f68b8b4c45ca16438", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/MethodSorterTest.java", "commitBeforeChange": "99ffe0144444c0727248dad94f153b1fc91bf847", "commitAfterChange": "5976b1d40ef41cecafd9769dd8776a6e6610d0c5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "             private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest)", "signatureAfterChange": "  \tprivate List<String> getDeclaredMethodNames(Class<?> clazz)", "diff": ["-    \t// the method under test.", "+", "+\tprivate List<String> getDeclaredMethodNames(Class<?> clazz) {", "+\t\t// the method under test.", "-", "-    \t// reduce to the methods of interest.", "-    \tnames.retainAll(ofInterest);", "-    \t", "-    \treturn names;", "-    }", "+\t\treturn names;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c41c02cc996513bf1c5d3b5c51f3cd9a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/MethodSorterTest.java", "commitBeforeChange": "5ea3196f1cdbc32bc3a91b96bedc1964d3bb76d1", "commitAfterChange": "8ea7e775addfcc44f0bd7145100cca3cb301d8e1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest)", "signatureAfterChange": "      private List<String> getDeclaredMethodNames(Class<?> clazz)", "diff": ["-    private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest) {", "-        // the method under test.", "+    private List<String> getDeclaredMethodNames(Class<?> clazz) {", "-        // obtain just the names instead of the full methods.", "+        // Obtain just the names instead of the full methods.", "-            names.add(m.toString().replace(clazz.getName() + '.', \"\"));", "+            // Filter out synthetic methods from, e.g., coverage tools.", "+        \tif (!m.isSynthetic()) {", "+                names.add(m.toString().replace(clazz.getName() + '.', \"\"));", "+        \t}", "-", "-        // filter to just the methods of interest", "-        names.retainAll(ofInterest);   \t", "+        "]}]}
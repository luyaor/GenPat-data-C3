{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dedfb00b1b7a064e6a2f552d9c44704", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179f5565b0d7985d450cdda5c1320a5c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPackageAccess(String pkg)", "signatureAfterChange": "          @Override         public void checkPackageAccess(String pkg)", "diff": ["-\t\t@Override", "-\t\tpublic void checkPackageAccess(String pkg) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPackageAccess(pkg);", "-\t\t}", "+        @Override", "+        public void checkPackageAccess(String pkg) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPackageAccess(pkg);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b73b1f00f3e1d7d3b23c0412e68786", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic List<Test> asTestList(Description description)", "signatureAfterChange": "      public List<Test> asTestList(Description description)", "diff": ["-\tpublic List<Test> asTestList(Description description) {", "-\t\tif (description.isTest())", "-\t\t\treturn Arrays.asList(asTest(description));", "-\t\telse {", "-\t\t\tList<Test> returnThis = new ArrayList<Test>();", "-\t\t\tfor (Description child : description.getChildren()) {", "-\t\t\t\treturnThis.add(asTest(child));", "-\t\t\t}", "-\t\t\treturn returnThis;", "-\t\t}", "-\t}", "+", "+    public List<Test> asTestList(Description description) {", "+        if (description.isTest()) {", "+            return Arrays.asList(asTest(description));", "+        } else {", "+            List<Test> returnThis = new ArrayList<Test>();", "+            for (Description child : description.getChildren()) {", "+                returnThis.add(asTest(child));", "+            }", "+            return returnThis;", "+        }", "+    }"]}]}
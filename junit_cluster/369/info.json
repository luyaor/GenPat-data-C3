{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74b90169cc164b20ac8b5599cdb09d04", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b253ed5e7ea971f7d8c0d6c7a0b066d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "95f56b32ef3950e83273335e1ba6c2b6cf1a5540", "commitAfterChange": "674bb8f296b0bc7bbfbd8a1126cff2d98333bbf2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "          private void findCommonSuffix()", "signatureAfterChange": "          private void findCommonSuffix()", "diff": ["-            int expectedSuffix = fExpected.length() - 1;", "-            int actualSuffix = fActual.length() - 1;", "-            for (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {", "-                if (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix)) {", "+            int expectedSuffix = expected.length() - 1;", "+            int actualSuffix = actual.length() - 1;", "+            for (; actualSuffix >= prefix && expectedSuffix >= prefix; actualSuffix--, expectedSuffix--) {", "+                if (expected.charAt(expectedSuffix) != actual.charAt(actualSuffix)) {", "-            fSuffix = fExpected.length() - expectedSuffix - 1;", "+            suffix = expected.length() - expectedSuffix - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5e588cee22de6410982d96f1353456", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "95f56b32ef3950e83273335e1ba6c2b6cf1a5540", "commitAfterChange": "674bb8f296b0bc7bbfbd8a1126cff2d98333bbf2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "          private void findCommonPrefix()", "signatureAfterChange": "          private void findCommonPrefix()", "diff": ["-            fPrefix = 0;", "-            int end = Math.min(fExpected.length(), fActual.length());", "-            for (; fPrefix < end; fPrefix++) {", "-                if (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix)) {", "+            prefix = 0;", "+            int end = Math.min(expected.length(), actual.length());", "+            for (; prefix < end; prefix++) {", "+                if (expected.charAt(prefix) != actual.charAt(prefix)) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "659f54b83f0962432724e37cc1210b1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7fd124f1b2dd8127f0569ecf019d32d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/categories/CategoryValidatorTest.java", "commitBeforeChange": "f5e7e1ff180bb17e4f9df702a038e06a974f78f6", "commitAfterChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void testAndAssertErrrorMessage(Method method, String expectedErrorMessage) throws NoSuchMethodException", "signatureAfterChange": "      private void testAndAssertErrrorMessage(Method method, String expectedErrorMessage) throws NoSuchMethodException", "diff": ["-        List<Throwable> errors = new CategoryValidator().validateAnnotatedMethod(method);", "+        List<Exception> errors = new CategoryValidator().validateAnnotatedMethod(method);", "-        Throwable throwable = errors.get(0);", "-        assertThat(throwable.getMessage(), is(expectedErrorMessage));", "+        Exception exception = errors.get(0);", "+        assertThat(exception.getMessage(), is(expectedErrorMessage));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f48d0136f81d700a47cf5ca10ea9f40c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/CategoryValidator.java", "commitBeforeChange": "f5e7e1ff180bb17e4f9df702a038e06a974f78f6", "commitAfterChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Override     public List<Throwable> validateAnnotatedMethod(Method method)", "signatureAfterChange": "     @Override     public List<Exception> validateAnnotatedMethod(Method method)", "diff": ["-    public List<Throwable> validateAnnotatedMethod(Method method) {", "-        List<Throwable> errors = new ArrayList<Throwable>();", "+    public List<Exception> validateAnnotatedMethod(Method method) {", "+        List<Exception> errors = new ArrayList<Exception>();", "-            for (Class clazz : fIncompatibleAnnotations) {", "+            for (Class clazz : INCOMPATIBLE_ANNOTATIONS) {", "-        return Collections.unmodifiableList(errors);", "+        return unmodifiableList(errors);"]}]}
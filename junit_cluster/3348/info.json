{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fe7df1a5f107859656aad9eb167c0cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d68f225be29f7aa1a6b3c177bbf7810", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkAwtEventQueueAccess()", "signatureAfterChange": "          @Override         public void checkAwtEventQueueAccess()", "diff": ["-\t\t@Override", "-\t\tpublic void checkAwtEventQueueAccess() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkAwtEventQueueAccess();", "-\t\t}", "+        @Override", "+        public void checkAwtEventQueueAccess() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkAwtEventQueueAccess();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3335b66401c255e12aee46cb996ea0ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tstatic public void assertNull(String message, Object object)", "signatureAfterChange": "     static public void assertNull(String message, Object object)", "diff": ["-\t */", "-\tstatic public void assertNull(String message, Object object) {", "-\t\tif (object == null)", "-\t\t\treturn;", "-\t\tfailNotNull(message, object);", "-\t}", "+     */", "+    static public void assertNull(String message, Object object) {", "+        if (object == null) {", "+            return;", "+        }", "+        failNotNull(message, object);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41de7d4fa04075c208874f8d16fecc9c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \t\tprotected void reportParameterizedError(Throwable e, Object... params) \t\t\t\tthrows Throwable", "signatureAfterChange": "          protected void reportParameterizedError(Throwable e, Object... params)                 throws Throwable", "diff": ["-\t\tprotected void reportParameterizedError(Throwable e, Object... params)", "-\t\t\t\tthrows Throwable {", "-\t\t\tif (params.length == 0)", "-\t\t\t\tthrow e;", "-\t\t\tthrow new ParameterizedAssertionError(e, fTestMethod.getName(),", "-\t\t\t\t\tparams);", "-\t\t}", "+        protected void reportParameterizedError(Throwable e, Object... params)", "+                throws Throwable {", "+            if (params.length == 0) {", "+                throw e;", "+            }", "+            throw new ParameterizedAssertionError(e, fTestMethod.getName(),", "+                    params);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4283e2714f8db596eb50d9e17a15c19d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkListen(int port)", "signatureAfterChange": "          @Override         public void checkListen(int port)", "diff": ["-\t\t@Override", "-\t\tpublic void checkListen(int port) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkListen(port);", "-\t\t}", "+        @Override", "+        public void checkListen(int port) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkListen(port);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d71d9880e9710c2eafb0a80bc004a37", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/IgnoredBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> testClass)", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> testClass)", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) {", "-\t\tif (testClass.getAnnotation(Ignore.class) != null)", "-\t\t\treturn new IgnoredClassRunner(testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) {", "+        if (testClass.getAnnotation(Ignore.class) != null) {", "+            return new IgnoredClassRunner(testClass);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745f381f12ef3d186df039fd5f09790f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkConnect(String host, int port, Object context)", "signatureAfterChange": "          @Override         public void checkConnect(String host, int port, Object context)", "diff": ["-\t\t@Override", "-\t\tpublic void checkConnect(String host, int port, Object context) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkConnect(host, port, context);", "-\t\t}", "+        @Override", "+        public void checkConnect(String host, int port, Object context) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkConnect(host, port, context);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e28674ed37147ff7a5f8032010f476", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/ArrayComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic String getMessage()", "signatureAfterChange": "      @Override     public String getMessage()", "diff": ["-\t@Override", "-\tpublic String getMessage() {", "-\t\tStringBuilder builder= new StringBuilder();", "-\t\tif (fMessage != null)", "-\t\t\tbuilder.append(fMessage);", "-\t\tbuilder.append(\"arrays first differed at element \");", "-\t\tfor (int each : fIndices) {", "-\t\t\tbuilder.append(\"[\");", "-\t\t\tbuilder.append(each);", "-\t\t\tbuilder.append(\"]\");", "-\t\t}", "-\t\tbuilder.append(\"; \");", "-\t\tbuilder.append(fCause.getMessage());", "-\t\treturn builder.toString();", "-\t}", "+", "+    @Override", "+    public String getMessage() {", "+        StringBuilder builder = new StringBuilder();", "+        if (fMessage != null) {", "+            builder.append(fMessage);", "+        }", "+        builder.append(\"arrays first differed at element \");", "+        for (int each : fIndices) {", "+            builder.append(\"[\");", "+            builder.append(each);", "+            builder.append(\"]\");", "+        }", "+        builder.append(\"; \");", "+        builder.append(fCause.getMessage());", "+        return builder.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9434072567d192c4310c6e74576beb93", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void fireTestStarted(final Description description) throws StoppedByUserException", "signatureAfterChange": "     public void fireTestStarted(final Description description) throws StoppedByUserException", "diff": ["-\t */", "-\tpublic void fireTestStarted(final Description description) throws StoppedByUserException {", "-\t\tif (fPleaseStop)", "-\t\t\tthrow new StoppedByUserException();", "-\t\tnew SafeNotifier() {", "-\t\t\t@Override", "-\t\t\tprotected void notifyListener(RunListener each) throws Exception {", "-\t\t\t\teach.testStarted(description);", "-\t\t\t};", "-\t\t}.run();", "-\t}", "+     */", "+    public void fireTestStarted(final Description description) throws StoppedByUserException {", "+        if (fPleaseStop) {", "+            throw new StoppedByUserException();", "+        }", "+        new SafeNotifier() {", "+            @Override", "+            protected void notifyListener(RunListener each) throws Exception {", "+                each.testStarted(description);", "+            }", "+", "+            ;", "+        }.run();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d48da7f147983d22cbb6912d65dfd78a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t\tprivate boolean nullsOk()", "signatureAfterChange": "          private boolean nullsOk()", "diff": ["-\t\tprivate boolean nullsOk() {", "-\t\t\tTheory annotation= fTestMethod.getMethod().getAnnotation(", "-\t\t\t\t\tTheory.class);", "-\t\t\tif (annotation == null)", "-\t\t\t\treturn false;", "-\t\t\treturn annotation.nullsAccepted();", "-\t\t}", "+        private boolean nullsOk() {", "+            Theory annotation = fTestMethod.getMethod().getAnnotation(", "+                    Theory.class);", "+            if (annotation == null) {", "+                return false;", "+            }", "+            return annotation.nullsAccepted();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ef839f35d51e6773daa73d7073dfaf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \t\tprivate Long getFailure(Description key)", "signatureAfterChange": "          private Long getFailure(Description key)", "diff": ["-\t\tprivate Long getFailure(Description key) {", "-\t\t\tLong result= getFailureTimestamp(key);", "-\t\t\tif (result == null)", "-\t\t\t\treturn 0L; // 0 = \"never failed (that I know about)\"", "-\t\t\treturn result;", "-\t\t}", "+        private Long getFailure(Description key) {", "+            Long result = getFailureTimestamp(key);", "+            if (result == null) {", "+                return 0L; // 0 = \"never failed (that I know about)\"", "+            }", "+            return result;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb7ac375033892f3d4715660e49d5080", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b1b392842574e1e4dfc2658f621f87", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "db89759c22060a89f6750e2e92ce93072eace561", "commitAfterChange": "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\t \t\tprivate Method getParametersMethod() throws Exception", "signatureAfterChange": " \t \tprivate Method getParametersMethod() throws Exception", "diff": ["-\t\tprivate Method getParametersMethod() throws Exception {", "-\t\t\tfor (Method each : fKlass.getMethods()) {", "-\t\t\t\tif (Modifier.isStatic(each.getModifiers())) {", "-\t\t\t\t\tAnnotation[] annotations= each.getAnnotations();", "-\t\t\t\t\tfor (Annotation annotation : annotations) {", "-\t\t\t\t\t\tif (annotation.annotationType() == Parameters.class)", "-\t\t\t\t\t\t\treturn each;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow new Exception(\"No public static parameters method on class \"", "-\t\t\t\t\t+ getName());", "+\t", "+\tprivate Method getParametersMethod() throws Exception {", "+\t\tList<Method> methods= fTestClass.getAnnotatedMethods(Parameters.class);", "+\t\tfor (Method each : methods) {", "+\t\t\tint modifiers= each.getModifiers();", "+\t\t\tif (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))", "+\t\t\t\treturn each;", "+\t\t}", "+", "+\t\tthrow new Exception(\"No public static parameters method on class \" + getName());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9525363d845d154da9d4f7e855b807", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate FrameworkMethod getParametersMethod() throws Exception", "signatureAfterChange": "      private FrameworkMethod getParametersMethod() throws Exception", "diff": ["-\tprivate FrameworkMethod getParametersMethod() throws Exception {", "-\t\tList<FrameworkMethod> methods= getTestClass().getAnnotatedMethods(", "-\t\t\t\tParameters.class);", "-\t\tfor (FrameworkMethod each : methods) {", "-\t\t\tif (each.isStatic() && each.isPublic())", "-\t\t\t\treturn each;", "-\t\t}", "-\t\tthrow new Exception(\"No public static parameters method on class \"", "-\t\t\t\t+ getTestClass().getName());", "-\t}", "+    private FrameworkMethod getParametersMethod() throws Exception {", "+        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(", "+                Parameters.class);", "+        for (FrameworkMethod each : methods) {", "+            if (each.isStatic() && each.isPublic()) {", "+                return each;", "+            }", "+        }", "+        throw new Exception(\"No public static parameters method on class \"", "+                + getTestClass().getName());", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b8b9fb994d3eab145b9dd304aaba4dd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d5fe866c19d7497b26d65cfc5afb90", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "diff": ["-", "-\t\t// TODO: (Oct 10, 2007 11:36:43 AM) EachTestNotifier has bad name throughout", "-", "+\t\tObject test;", "+\t\ttry {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "+\t\t\tnotifier.testAborted(description, e);", "+\t\t\treturn;", "+\t\t}", "-\t\tnotifying(method, chain(method), roadie).run(roadie);", "+\t\trun(roadie, method, test);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3785c48320c71a75c024403b04285da", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f0ef837a40922ac08c608661385abf71732975d3", "commitAfterChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier)", "signatureAfterChange": " \t \tprotected Link chain(TestMethod method)", "diff": ["-\tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {", "+\tprotected Link chain(TestMethod method) {", "-", "-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?", "-", "+\t\tObject test;", "+\t\ttry {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "+\t\t\treturn throwException(e);", "+\t\t}", "+\t\t", "-\t\treturn notifying(method, link, notifier);", "+\t\treturn link;"]}]}
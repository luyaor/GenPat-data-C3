{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "147765b1e8e73dc2da80b874ae26420a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f9ed5a7b29176282a4c3f56e47eb364", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "8435a2a04e66546490344a028052f648b5f9f213", "commitAfterChange": "13bda470bfa1fe989ce80d616fb096af1b937146", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static <T> Runner parallelize(ParentRunner<T> runner) \t\t\tthrows InitializationError", "signatureAfterChange": "  \tprivate static void parallelize(Runner runner)", "diff": ["-\tprivate static <T> Runner parallelize(ParentRunner<T> runner)", "-\t\t\tthrows InitializationError {", "-\t\treturn new ParallelParentRunner<T>(runner);", "+\tprivate static void parallelize(Runner runner) {", "+\t\t((ParentRunner<?>) runner).installDecorator(new ParentRunner.Decorator() {", "+\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "+", "+\t\t\tprivate final ExecutorService fService= Executors", "+\t\t\t\t\t.newCachedThreadPool();", "+", "+\t\t\tpublic void runAll(SafeStatement statement) {", "+\t\t\t\tstatement.execute();", "+\t\t\t\tfor (Future<Object> each : fResults)", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\teach.get();", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}", "+", "+\t\t\t}", "+", "+\t\t\tpublic void runChild(final SafeStatement statement) {", "+\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "+\t\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\t\tstatement.execute();", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}));", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b62fb6e08a30f9d03a325cf522ab0d9f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "4d6f0702dae590809b808230f027a60aa0a4a345", "commitAfterChange": "ad5971c88fb501f007cf1a75200349fb7cbb4b25", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static <T> Runner parallelize(ParentRunner<T> runner) \t\t\tthrows InitializationError", "signatureAfterChange": "  \tprivate static void parallelize(Runner runner)", "diff": ["-\tprivate static <T> Runner parallelize(ParentRunner<T> runner)", "-\t\t\tthrows InitializationError {", "-\t\treturn new ParallelParentRunner<T>(runner);", "+\tprivate static void parallelize(Runner runner) {", "+\t\t((ParentRunner<?>) runner).installDecorator(new ParentRunner.Decorator() {", "+\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "+", "+\t\t\tprivate final ExecutorService fService= Executors", "+\t\t\t\t\t.newCachedThreadPool();", "+", "+\t\t\tpublic void runAll(SafeStatement statement) {", "+\t\t\t\tstatement.execute();", "+\t\t\t\tfor (Future<Object> each : fResults)", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\teach.get();", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}", "+", "+\t\t\t}", "+", "+\t\t\tpublic void runChild(final SafeStatement statement) {", "+\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "+\t\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\t\tstatement.execute();", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}));", "+\t\t\t}", "+\t\t});"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67b351487e4fa0df4a52360e174218db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f91723433f06dfad94a5ee62967c701", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic)", "signatureAfterChange": "      private void validateTestMethods(Class<? extends Annotation> annotation,             boolean isStatic)", "diff": ["-\tprivate void validateTestMethods(Class<? extends Annotation> annotation,", "-\t\t\tboolean isStatic) {", "-\t\tList<Method> methods= fTestClass.getAnnotatedMethods(annotation);", "-\t\t", "-\t\tfor (Method each : methods) {", "-\t\t\tif (Modifier.isStatic(each.getModifiers()) != isStatic) {", "-\t\t\t\tString state= isStatic ? \"should\" : \"should not\";", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "-\t\t\t\t\t\t+ state + \" be static\"));", "-\t\t\t}", "-\t\t\tif (!Modifier.isPublic(each.getDeclaringClass().getModifiers()))", "-\t\t\t\tfErrors.add(new Exception(\"Class \" + each.getDeclaringClass().getName()", "-\t\t\t\t\t\t+ \" should be public\"));", "-\t\t\tif (!Modifier.isPublic(each.getModifiers()))", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName()", "-\t\t\t\t\t\t+ \" should be public\"));", "-\t\t\tif (each.getReturnType() != Void.TYPE)", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName()", "-\t\t\t\t\t\t+ \" should be void\"));", "-\t\t\tif (each.getParameterTypes().length != 0)", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName()", "-\t\t\t\t\t\t+ \" should have no parameters\"));", "-\t\t}", "-\t}", "+", "+    private void validateTestMethods(Class<? extends Annotation> annotation,", "+            boolean isStatic) {", "+        List<Method> methods = fTestClass.getAnnotatedMethods(annotation);", "+", "+        for (Method each : methods) {", "+            if (Modifier.isStatic(each.getModifiers()) != isStatic) {", "+                String state = isStatic ? \"should\" : \"should not\";", "+                fErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "+                        + state + \" be static\"));", "+            }", "+            if (!Modifier.isPublic(each.getDeclaringClass().getModifiers())) {", "+                fErrors.add(new Exception(\"Class \" + each.getDeclaringClass().getName()", "+                        + \" should be public\"));", "+            }", "+            if (!Modifier.isPublic(each.getModifiers())) {", "+                fErrors.add(new Exception(\"Method \" + each.getName()", "+                        + \" should be public\"));", "+            }", "+            if (each.getReturnType() != Void.TYPE) {", "+                fErrors.add(new Exception(\"Method \" + each.getName()", "+                        + \" should be void\"));", "+            }", "+            if (each.getParameterTypes().length != 0) {", "+                fErrors.add(new Exception(\"Method \" + each.getName()", "+                        + \" should have no parameters\"));", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3591e53fe4022ea4f46117cade8eb1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/textui/TestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic TestResult start(String args[]) throws Exception", "signatureAfterChange": "     public TestResult start(String args[]) throws Exception", "diff": ["-\t */", "-\tpublic TestResult start(String args[]) throws Exception {", "-\t\tString testCase= \"\";", "-\t\tString method= \"\";", "-\t\tboolean wait= false;", "-\t\tfor (int i= 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"-wait\"))", "-\t\t\t\twait= true;", "-\t\t\telse if (args[i].equals(\"-c\"))", "-\t\t\t\ttestCase= extractClassName(args[++i]);", "-\t\t\telse if (args[i].equals(\"-m\")) {", "-\t\t\t\tString arg= args[++i];", "-\t\t\t\tint lastIndex= arg.lastIndexOf('.');", "-\t\t\t\ttestCase= arg.substring(0, lastIndex);", "-\t\t\t\tmethod= arg.substring(lastIndex + 1);", "-\t\t\t} else if (args[i].equals(\"-v\"))", "-\t\t\t\tSystem.err.println(\"JUnit \" + Version.id() + \" by Kent Beck and Erich Gamma\");", "-\t\t\telse", "-\t\t\t\ttestCase= args[i];", "-\t\t}", "-\t\tif (testCase.equals(\"\"))", "-\t\t\tthrow new Exception(\"Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class\");", "-\t\ttry {", "-\t\t\tif (!method.equals(\"\")) ", "-\t\t\t\treturn runSingleMethod(testCase, method, wait);", "-\t\t\tTest suite= getTest(testCase);", "-\t\t\treturn doRun(suite, wait);", "-\t\t} catch (Exception e) {", "-\t\t\tthrow new Exception(\"Could not create and run test suite: \" + e);", "-\t\t}", "-\t}", "+     */", "+    public TestResult start(String args[]) throws Exception {", "+        String testCase = \"\";", "+        String method = \"\";", "+        boolean wait = false;", "+", "+        for (int i = 0; i < args.length; i++) {", "+            if (args[i].equals(\"-wait\")) {", "+                wait = true;", "+            } else if (args[i].equals(\"-c\")) {", "+                testCase = extractClassName(args[++i]);", "+            } else if (args[i].equals(\"-m\")) {", "+                String arg = args[++i];", "+                int lastIndex = arg.lastIndexOf('.');", "+                testCase = arg.substring(0, lastIndex);", "+                method = arg.substring(lastIndex + 1);", "+            } else if (args[i].equals(\"-v\")) {", "+                System.err.println(\"JUnit \" + Version.id() + \" by Kent Beck and Erich Gamma\");", "+            } else {", "+                testCase = args[i];", "+            }", "+        }", "+", "+        if (testCase.equals(\"\")) {", "+            throw new Exception(\"Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class\");", "+        }", "+", "+        try {", "+            if (!method.equals(\"\")) {", "+                return runSingleMethod(testCase, method, wait);", "+            }", "+            Test suite = getTest(testCase);", "+            return doRun(suite, wait);", "+        } catch (Exception e) {", "+            throw new Exception(\"Could not create and run test suite: \" + e);", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c58221ae6036968b139a1278cec682a3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3570966052f556c4f90f17fc733e1d6b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/InexactComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tprotected void assertElementsEqual(Object expected, Object actual)", "signatureAfterChange": "      @Override     protected void assertElementsEqual(Object expected, Object actual)", "diff": ["-\t@Override", "-\tprotected void assertElementsEqual(Object expected, Object actual) {", "-\t\tif (expected instanceof Double)", "-\t\t\tAssert.assertEquals((Double)expected, (Double)actual, (Double)fDelta);", "-\t\telse", "-\t\t\tAssert.assertEquals((Float)expected, (Float)actual, (Float)fDelta);", "-\t}", "+", "+    @Override", "+    protected void assertElementsEqual(Object expected, Object actual) {", "+        if (expected instanceof Double) {", "+            Assert.assertEquals((Double) expected, (Double) actual, (Double) fDelta);", "+        } else {", "+            Assert.assertEquals((Float) expected, (Float) actual, (Float) fDelta);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45f68b360b90b1c25eb8abbf0b1fdd2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tstatic public void assertEquals(String message, Object expected, \t\t\tObject actual)", "signatureAfterChange": "     static public void assertEquals(String message, Object expected,             Object actual)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, Object expected,", "-\t\t\tObject actual) {", "-\t\tif (equalsRegardingNull(expected, actual))", "-\t\t\treturn;", "-\t\telse if (expected instanceof String && actual instanceof String) {", "-\t\t\tString cleanMessage= message == null ? \"\" : message;", "-\t\t\tthrow new ComparisonFailure(cleanMessage, (String) expected,", "-\t\t\t\t\t(String) actual);", "-\t\t} else", "-\t\t\tfailNotEquals(message, expected, actual);", "-\t}", "+     */", "+    static public void assertEquals(String message, Object expected,", "+            Object actual) {", "+        if (equalsRegardingNull(expected, actual)) {", "+            return;", "+        } else if (expected instanceof String && actual instanceof String) {", "+            String cleanMessage = message == null ? \"\" : message;", "+            throw new ComparisonFailure(cleanMessage, (String) expected,", "+                    (String) actual);", "+        } else {", "+            failNotEquals(message, expected, actual);", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8eb9fe6dbadad63fedb34c2f7e6aa2d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3631a978e417516047e54de1d1c9d928", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "cbf46b88c2937aece7018fa50ba4dbb133e03d06", "commitAfterChange": "1fa373f01d126d437f08a57a7b5e7a7ec0a01b85", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\t@Override \t\tprotected void validateFields(List<Throwable> errors)", "signatureAfterChange": "  \t\t@Override \t\tprotected void validateFields(List<Throwable> errors)", "diff": ["-\t\t\t\t\t\terrors.add(new Exception(\"Invalid @parameter value: \"+index+\". @parameter fields counted: \"+annotatedFieldsByParameter.size()+\". Please use an index between 0 and \"+(annotatedFieldsByParameter.size()-1)+\".\"));", "+\t\t\t\t\t\terrors.add(", "+\t\t\t\t\t\t\tnew Exception(\"Invalid @Parameter value: \"+index+\". @Parameter fields counted: \"+", "+\t\t\t\t\t\t\t\tannotatedFieldsByParameter.size()+\". Please use an index between 0 and \"+", "+\t\t\t\t\t\t\t\t(annotatedFieldsByParameter.size()-1)+\".\")", "+\t\t\t\t\t\t);", "-\t\t\t\t\t\terrors.add(new Exception(\"The index \"+index+\" is never used.\"));", "+\t\t\t\t\t\terrors.add(new Exception(\"@Parameter(\"+index+\") is never used.\"));", "-\t\t\t\t\t\terrors.add(new Exception(\"The index \"+index+\" is used more than once (\"+numberOfUse+\").\"));", "+\t\t\t\t\t\terrors.add(new Exception(\"@Parameter(\"+index+\") is used more than once (\"+numberOfUse+\").\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd1f525fb50a2683c8e0563a373f204c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/VerifierRuleTest.java", "commitBeforeChange": "8b9dfefada78a74b6b1fa34ff0bab298267f8210", "commitAfterChange": "a0eea1357f0a0f4faea1245197f20ceee5ca3a5a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \t@Test public void usedErrorCollectorCheckThatShouldFail()", "signatureAfterChange": " \t \t@Test public void usedErrorCollectorCheckThatShouldFail()", "diff": ["-\t\tassertThat(testResult, hasFailureContaining(\"got: <3>\"));", "-\t\tassertThat(testResult, hasFailureContaining(\"got: <5>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <3>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <5>\"));", "-\t\tassertThat(testResult, hasFailureContaining(\"got: <7>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <7>\"));", "-\t\tassertThat(testResult, hasFailureContaining(\"got: <9>\"));", "+\t\tassertThat(testResult, hasFailureContaining(\"was <9>\"));"]}]}
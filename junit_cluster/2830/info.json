{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af6d39b4eee909de013f61a0ed1a3207", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3299a3336be5a670661a412b084b6246", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "163f503af57d91f60c6b57d4c9afa768b7c04df0", "commitAfterChange": "ede492496de0f3c0872216ac9c9b88a00fdef09e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private static <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,             Class<? extends Annotation> type)", "signatureAfterChange": "      private static <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,             Class<? extends Annotation> type, boolean canFill)", "diff": ["-            Class<? extends Annotation> type) {", "-        if (!map.containsKey(type)) {", "-            map.put(type, new CopyOnWriteArrayList<T>());", "+            Class<? extends Annotation> type, boolean canFill) {", "+        if (!map.containsKey(type) && canFill) {", "+            map.put(type, new ArrayList<T>());", "-        return map.get(type);", "+        List<T> members = map.get(type);", "+        return members == null ? Collections.<T>emptyList() : members;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb292841401494fed46bddddb36a660", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public static CategoryFilter include(Class<?> categoryType)", "signatureAfterChange": "          public static CategoryFilter include(boolean matchAny, Class<?>... categories)", "diff": ["-        public static CategoryFilter include(Class<?> categoryType) {", "-            return new CategoryFilter(categoryType, null);", "+", "+        public static CategoryFilter include(boolean matchAny, Class<?>... categories) {", "+            if (hasNull(categories)) {", "+                throw new NullPointerException(\"has null category\");", "+            }", "+            return categoryFilter(matchAny, createSet(categories), true, null);"]}]}
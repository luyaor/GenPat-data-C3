{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91b83099d8f6061658582cac62432310", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "677ca05517700c953edfeebd5b43877e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "003f66a2e928691100fbe719d7253b5213e99698", "commitAfterChange": "d8da2f699a89857292e5e5b92945b2fe3c0a039a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate <T> void ensureKey(Map<Class<?>, List<T>> map, Class<?> annotation)", "signatureAfterChange": "  \tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map, \t\t\tClass<? extends Annotation> type)", "diff": ["-\tprivate <T> void ensureKey(Map<Class<?>, List<T>> map, Class<?> annotation) {", "-\t\tif (!map.containsKey(annotation))", "-\t\t\tmap.put(annotation, new ArrayList<T>());", "-\t}", "+", "+\tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,", "+\t\t\tClass<? extends Annotation> type) {", "+\t\tif (!map.containsKey(type))", "+\t\t\tmap.put(type, new ArrayList<T>());", "+\t\treturn map.get(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6a688744040103b0bfa0bfe4fc02e67", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "fc7acc64dbbf5c28ef4bd3b142e35922d6294428", "commitAfterChange": "223b34b516467bcd9cb7ebc7f49549f2e7362dca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate <T> void ensureKey(Map<Class<?>, List<T>> map, Class<?> annotation)", "signatureAfterChange": "  \tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map, \t\t\tClass<? extends Annotation> type)", "diff": ["-\tprivate <T> void ensureKey(Map<Class<?>, List<T>> map, Class<?> annotation) {", "-\t\tif (!map.containsKey(annotation))", "-\t\t\tmap.put(annotation, new ArrayList<T>());", "-\t}", "+", "+\tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,", "+\t\t\tClass<? extends Annotation> type) {", "+\t\tif (!map.containsKey(type))", "+\t\t\tmap.put(type, new ArrayList<T>());", "+\t\treturn map.get(type);"]}]}
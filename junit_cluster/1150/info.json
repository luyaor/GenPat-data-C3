{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33fc5b88e894316ed3afaf064a6fb6e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5976fdf73705bfa69b7bfb9895362b2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "4d6f0702dae590809b808230f027a60aa0a4a345", "commitAfterChange": "ad5971c88fb501f007cf1a75200349fb7cbb4b25", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tpublic ParallelParentRunner(ParentRunner<T> delegate) \t\t\t\tthrows InitializationError", "signatureAfterChange": " \t \t@Override \tprotected Runner modify(Runner runner)", "diff": ["-", "-\t\tpublic ParallelParentRunner(ParentRunner<T> delegate)", "-\t\t\t\tthrows InitializationError {", "-\t\t\tsuper(delegate.getTestClass().getJavaClass());", "-\t\t\tfDelegate= delegate;", "-\t\t}", "+\t", "+\tprotected Runner modify(Runner runner) {", "+\t\tif (shouldParallelize(runner))", "+\t\t\tparallelize(runner);", "+\t\treturn runner;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de99e4c2ebf7e74273b77705d5bef541", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "8435a2a04e66546490344a028052f648b5f9f213", "commitAfterChange": "13bda470bfa1fe989ce80d616fb096af1b937146", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tpublic ParallelParentRunner(ParentRunner<T> delegate) \t\t\t\tthrows InitializationError", "signatureAfterChange": " \t \t@Override \tprotected Runner modify(Runner runner)", "diff": ["-", "-\t\tpublic ParallelParentRunner(ParentRunner<T> delegate)", "-\t\t\t\tthrows InitializationError {", "-\t\t\tsuper(delegate.getTestClass().getJavaClass());", "-\t\t\tfDelegate= delegate;", "-\t\t}", "+\t", "+\tprotected Runner modify(Runner runner) {", "+\t\tif (shouldParallelize(runner))", "+\t\t\tparallelize(runner);", "+\t\treturn runner;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bee91f06d757ac76635854f1ed59612", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7f1c3126e8e75fe5a616a1252fb54d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "signatureAfterChange": "          @Override         public void evaluate() throws Throwable", "diff": ["-\t\t@Override", "-\t\tpublic void evaluate() throws Throwable {", "-\t\t\ttry {", "-\t\t\t\tfNext.evaluate();", "-\t\t\t\tif (fMatcherBuilder.expectsThrowable())", "-\t\t\t\t\tfailDueToMissingException();", "-\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\toptionallyHandleException(e, handleAssumptionViolatedExceptions);", "-\t\t\t} catch (AssertionError e) {", "-\t\t\t\toptionallyHandleException(e, handleAssertionErrors);", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\thandleException(e);", "-\t\t\t}", "-\t\t}", "+        @Override", "+        public void evaluate() throws Throwable {", "+            try {", "+                fNext.evaluate();", "+                if (fMatcherBuilder.expectsThrowable()) {", "+                    failDueToMissingException();", "+                }", "+            } catch (AssumptionViolatedException e) {", "+                optionallyHandleException(e, handleAssumptionViolatedExceptions);", "+            } catch (AssertionError e) {", "+                optionallyHandleException(e, handleAssertionErrors);", "+            } catch (Throwable e) {", "+                handleException(e);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac1f348303b61ba03a5d0e4ecab018c1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner runnerForClass(Class<?> testClass) throws Throwable", "signatureAfterChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Throwable", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) throws Throwable {", "-\t\tList<RunnerBuilder> builders= Arrays.asList(", "-\t\t\t\tignoredBuilder(),", "-\t\t\t\tannotatedBuilder(),", "-\t\t\t\tsuiteMethodBuilder(),", "-\t\t\t\tjunit3Builder(),", "-\t\t\t\tjunit4Builder());", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) throws Throwable {", "+        List<RunnerBuilder> builders = Arrays.asList(", "+                ignoredBuilder(),", "+                annotatedBuilder(),", "+                suiteMethodBuilder(),", "+                junit3Builder(),", "+                junit4Builder());", "-\t\tfor (RunnerBuilder each : builders) {", "-\t\t\tRunner runner= each.safeRunnerForClass(testClass);", "-\t\t\tif (runner != null)", "-\t\t\t\treturn runner;", "-\t\t}", "-\t\treturn null;", "-\t}", "+        for (RunnerBuilder each : builders) {", "+            Runner runner = each.safeRunnerForClass(testClass);", "+            if (runner != null) {", "+                return runner;", "+            }", "+        }", "+        return null;", "+    }"]}]}
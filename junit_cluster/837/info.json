{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "842bd532549058f6e2f553416a93e6e1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "211ab06cee5db719b34e4b1092f52b30", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/experimental/categories/CategoryFilterFactoryTest.java", "commitBeforeChange": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "commitAfterChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void shouldCreateFilter() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldCreateFilter() throws Exception", "diff": ["-", "-    @Test", "-    public void shouldCreateFilter() throws Exception {", "-        CategoryFilterFactory categoryFilterFactory = new CategoryFilterFactoryStub();", "-        FilterFactoryParams params = categoryFilterFactory.parseArgs(CategoryFilterFactoryStub.class.getName());", "-        Filter filter = categoryFilterFactory.createFilter(params);", "-", "-        assertThat(filter, instanceOf(DummyFilter.class));", "-    }", "+\r", "+    @Test\r", "+    public void shouldCreateFilter() throws Exception {\r", "+        CategoryFilterFactory categoryFilterFactory = new CategoryFilterFactoryStub();\r", "+        FilterFactoryParams params = new FilterFactoryParams(\r", "+                Description.createSuiteDescription(testName.getMethodName()),\r", "+                CategoryFilterFactoryStub.class.getName());\r", "+        Filter filter = categoryFilterFactory.createFilter(params);\r", "+\r", "+        assertThat(filter, instanceOf(DummyFilter.class));\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e82634963ab5dbab1526e7410d691df", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java", "commitBeforeChange": "94aa692b0489d1fabd31c779c1a700a3b0890a24", "commitAfterChange": "544e5ba3a3034932879604b72fb6f8526d27eb50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Ignore(\"For gump, for now\")     @Test(timeout = 100)     public void globalTimeoutAvoidsInfiniteLoop()", "signatureAfterChange": "      @Test     public void longTimeout() throws InterruptedException", "diff": ["-    @Ignore(\"For gump, for now\")", "-    @Test(timeout = 100)", "-    public void globalTimeoutAvoidsInfiniteLoop() {", "-        HasGlobalTimeout.log = \"\";", "-        Result result = JUnitCore.runClasses(HasGlobalTimeout.class);", "-        assertEquals(2, result.getFailureCount());", "-        assertThat(HasGlobalTimeout.log, containsString(\"ran1\"));", "-        assertThat(HasGlobalTimeout.log, containsString(\"ran2\"));", "+", "+    @Test", "+    public void longTimeout() throws InterruptedException {", "+        HasGlobalLongTimeout.logger.setLength(0);", "+        Result result = JUnitCore.runClasses(HasGlobalLongTimeout.class);", "+        assertEquals(3, result.getFailureCount());", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run1\"));", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run2\"));", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run3\"));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51c32a44ef6af463be484402b71afc12", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7175b42db65734a185dc89bf84ec5a77", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tList<Throwable> errors = new ArrayList<Throwable>();", "-\t\ttry {", "-\t\t\tfNext.evaluate();", "-\t\t} catch (Throwable e) {", "-\t\t\terrors.add(e);", "-\t\t} finally {", "-\t\t\tfor (FrameworkMethod each : fAfters)", "-\t\t\t\ttry {", "-\t\t\t\t\teach.invokeExplosively(fTarget);", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\terrors.add(e);", "-\t\t\t\t}", "-\t\t}", "-\t\tMultipleFailureException.assertEmpty(errors);", "-\t}", "+", "+    @Override", "+    public void evaluate() throws Throwable {", "+        List<Throwable> errors = new ArrayList<Throwable>();", "+        try {", "+            fNext.evaluate();", "+        } catch (Throwable e) {", "+            errors.add(e);", "+        } finally {", "+            for (FrameworkMethod each : fAfters) {", "+                try {", "+                    each.invokeExplosively(fTarget);", "+                } catch (Throwable e) {", "+                    errors.add(e);", "+                }", "+            }", "+        }", "+        MultipleFailureException.assertEmpty(errors);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7f1c3126e8e75fe5a616a1252fb54d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "signatureAfterChange": "          @Override         public void evaluate() throws Throwable", "diff": ["-\t\t@Override", "-\t\tpublic void evaluate() throws Throwable {", "-\t\t\ttry {", "-\t\t\t\tfNext.evaluate();", "-\t\t\t\tif (fMatcherBuilder.expectsThrowable())", "-\t\t\t\t\tfailDueToMissingException();", "-\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\toptionallyHandleException(e, handleAssumptionViolatedExceptions);", "-\t\t\t} catch (AssertionError e) {", "-\t\t\t\toptionallyHandleException(e, handleAssertionErrors);", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\thandleException(e);", "-\t\t\t}", "-\t\t}", "+        @Override", "+        public void evaluate() throws Throwable {", "+            try {", "+                fNext.evaluate();", "+                if (fMatcherBuilder.expectsThrowable()) {", "+                    failDueToMissingException();", "+                }", "+            } catch (AssumptionViolatedException e) {", "+                optionallyHandleException(e, handleAssumptionViolatedExceptions);", "+            } catch (AssertionError e) {", "+                optionallyHandleException(e, handleAssertionErrors);", "+            } catch (Throwable e) {", "+                handleException(e);", "+            }", "+        }"]}]}
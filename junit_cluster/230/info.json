{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01bc78b20eec76141ef1c7111a74640b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c15afd5051b3a8c4c48509076fcd96ac", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprotected void runTestMethod()", "signatureAfterChange": "      protected void runTestMethod()", "diff": ["-\t", "-\tprotected void runTestMethod() {", "-\t\ttry {", "-\t\t\tfTestMethod.invoke(fTest);", "-\t\t\tif (fTestMethod.expectsException())", "-\t\t\t\taddFailure(new AssertionError(\"Expected exception: \" + fTestMethod.getExpectedException().getName()));", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\tThrowable actual= e.getTargetException();", "-\t\t\tif (actual instanceof AssumptionViolatedException)", "-\t\t\t\treturn;", "-\t\t\telse if (!fTestMethod.expectsException())", "-\t\t\t\taddFailure(actual);", "-\t\t\telse if (fTestMethod.isUnexpected(actual)) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\" + fTestMethod.getExpectedException().getName() + \"> but was<\"", "-\t\t\t\t\t+ actual.getClass().getName() + \">\";", "-\t\t\t\taddFailure(new Exception(message, actual));", "-\t\t\t}", "-\t\t} catch (Throwable e) {", "-\t\t\taddFailure(e);", "-\t\t}", "-\t}", "+", "+    protected void runTestMethod() {", "+        try {", "+            fTestMethod.invoke(fTest);", "+            if (fTestMethod.expectsException()) {", "+                addFailure(new AssertionError(\"Expected exception: \" + fTestMethod.getExpectedException().getName()));", "+            }", "+        } catch (InvocationTargetException e) {", "+            Throwable actual = e.getTargetException();", "+            if (actual instanceof AssumptionViolatedException) {", "+                return;", "+            } else if (!fTestMethod.expectsException()) {", "+                addFailure(actual);", "+            } else if (fTestMethod.isUnexpected(actual)) {", "+                String message = \"Unexpected exception, expected<\" + fTestMethod.getExpectedException().getName() + \"> but was<\"", "+                        + actual.getClass().getName() + \">\";", "+                addFailure(new Exception(message, actual));", "+            }", "+        } catch (Throwable e) {", "+            addFailure(e);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3287cd1f12b40a4d0858e8c920e1ce7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/ExpectException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void evaluate() throws Exception", "signatureAfterChange": "      @Override     public void evaluate() throws Exception", "diff": ["-\t", "-\t@Override", "-\tpublic void evaluate() throws Exception {", "-\t\tboolean complete = false;", "-\t\ttry {", "-\t\t\tfNext.evaluate();", "-\t\t\tcomplete = true;", "-\t\t} catch (AssumptionViolatedException e) {", "-\t\t\tthrow e;", "-\t\t} catch (Throwable e) {", "-\t\t\tif (!fExpected.isAssignableFrom(e.getClass())) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t+ fExpected.getName() + \"> but was<\"", "-\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\tthrow new Exception(message, e);", "-\t\t\t}", "-\t\t}", "-\t\tif (complete)", "-\t\t\tthrow new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t+ fExpected.getName());", "-\t}", "+", "+    @Override", "+    public void evaluate() throws Exception {", "+        boolean complete = false;", "+        try {", "+            fNext.evaluate();", "+            complete = true;", "+        } catch (AssumptionViolatedException e) {", "+            throw e;", "+        } catch (Throwable e) {", "+            if (!fExpected.isAssignableFrom(e.getClass())) {", "+                String message = \"Unexpected exception, expected<\"", "+                        + fExpected.getName() + \"> but was<\"", "+                        + e.getClass().getName() + \">\";", "+                throw new Exception(message, e);", "+            }", "+        }", "+        if (complete) {", "+            throw new AssertionError(\"Expected exception: \"", "+                    + fExpected.getName());", "+        }", "+    }"]}]}
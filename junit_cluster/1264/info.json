{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f35354bd05fb64f1ff243f3bbb151e19", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324d70dbd3a261967924b3e702f6c1bf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tif (getTest() instanceof Filterable) {", "-\t\t\tFilterable adapter= (Filterable) getTest();", "-\t\t\tadapter.filter(filter);", "-\t\t} else if (getTest() instanceof TestSuite) {", "-\t\t\tTestSuite suite= (TestSuite) getTest();", "-\t\t\tTestSuite filtered= new TestSuite(suite.getName());", "-\t\t\tint n= suite.testCount();", "-\t\t\tfor (int i= 0; i < n; i++) {", "-\t\t\t\tTest test= suite.testAt(i);", "-\t\t\t\tif (filter.shouldRun(makeDescription(test)))", "-\t\t\t\t\tfiltered.addTest(test);", "-\t\t\t}", "-\t\t\tsetTest(filtered);", "-\t\t}", "-\t}", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        if (getTest() instanceof Filterable) {", "+            Filterable adapter = (Filterable) getTest();", "+            adapter.filter(filter);", "+        } else if (getTest() instanceof TestSuite) {", "+            TestSuite suite = (TestSuite) getTest();", "+            TestSuite filtered = new TestSuite(suite.getName());", "+            int n = suite.testCount();", "+            for (int i = 0; i < n; i++) {", "+                Test test = suite.testAt(i);", "+                if (filter.shouldRun(makeDescription(test))) {", "+                    filtered.addTest(test);", "+                }", "+            }", "+            setTest(filtered);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785f74824778e98ae3c2a65c4100a44b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static String getFilteredTrace(String stack)", "signatureAfterChange": "     public static String getFilteredTrace(String stack)", "diff": ["-\t */", "-\tpublic static String getFilteredTrace(String stack) {", "-\t\tif (showStackRaw())", "-\t\t\treturn stack;", "-\t\tStringWriter sw= new StringWriter();", "-\t\tPrintWriter pw= new PrintWriter(sw);", "-\t\tStringReader sr= new StringReader(stack);", "-\t\tBufferedReader br= new BufferedReader(sr);", "+     */", "+    public static String getFilteredTrace(String stack) {", "+        if (showStackRaw()) {", "+            return stack;", "+        }", "-\t\tString line;", "-\t\ttry {", "-\t\t\twhile ((line= br.readLine()) != null) {", "-\t\t\t\tif (!filterLine(line))", "-\t\t\t\t\tpw.println(line);", "-\t\t\t}", "-\t\t} catch (Exception IOException) {", "-\t\t\treturn stack; // return the stack unfiltered", "-\t\t}", "-\t\treturn sw.toString();", "-\t}", "+        StringWriter sw = new StringWriter();", "+        PrintWriter pw = new PrintWriter(sw);", "+        StringReader sr = new StringReader(stack);", "+        BufferedReader br = new BufferedReader(sr);", "+        String line;", "+        try {", "+            while ((line = br.readLine()) != null) {", "+                if (!filterLine(line)) {", "+                    pw.println(line);", "+                }", "+            }", "+        } catch (Exception IOException) {", "+            return stack; // return the stack unfiltered", "+        }", "+        return sw.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de1bd22f36226559041330313ffe958", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected String processArguments(String[] args)", "signatureAfterChange": "     protected String processArguments(String[] args)", "diff": ["-\t */", "-\tprotected String processArguments(String[] args) {", "-\t\tString suiteName= null;", "-\t\tfor (int i= 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"-noloading\")) {", "-\t\t\t\tsetLoading(false);", "-\t\t\t} else if (args[i].equals(\"-nofilterstack\")) {", "-\t\t\t\tfgFilterStack= false;", "-\t\t\t} else if (args[i].equals(\"-c\")) {", "-\t\t\t\tif (args.length > i+1)", "-\t\t\t\t\tsuiteName= extractClassName(args[i+1]);", "-\t\t\t\telse", "-\t\t\t\t\tSystem.out.println(\"Missing Test class name\");", "-\t\t\t\ti++;", "-\t\t\t} else {", "-\t\t\t\tsuiteName= args[i];", "-\t\t\t}", "-\t\t}", "-\t\treturn suiteName;", "-\t}", "+     */", "+    protected String processArguments(String[] args) {", "+        String suiteName = null;", "+        for (int i = 0; i < args.length; i++) {", "+            if (args[i].equals(\"-noloading\")) {", "+                setLoading(false);", "+            } else if (args[i].equals(\"-nofilterstack\")) {", "+                fgFilterStack = false;", "+            } else if (args[i].equals(\"-c\")) {", "+                if (args.length > i + 1) {", "+                    suiteName = extractClassName(args[i + 1]);", "+                } else {", "+                    System.out.println(\"Missing Test class name\");", "+                }", "+                i++;", "+            } else {", "+                suiteName = args[i];", "+            }", "+        }", "+        return suiteName;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c603603a0fa329dfa6833ad171f501", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/runner/TextRunnerTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tvoid execTest(String testClass, boolean success) throws Exception", "signatureAfterChange": "      void execTest(String testClass, boolean success) throws Exception", "diff": ["-\t", "-\tvoid execTest(String testClass, boolean success) throws Exception {", "-\t\tString java= System.getProperty(\"java.home\")+File.separator+\"bin\"+File.separator+\"java\";", "-\t\tString cp= System.getProperty(\"java.class.path\");", "-\t\t//use -classpath for JDK 1.1.7 compatibility", "-\t\tString [] cmd= { java, \"-classpath\", cp, \"junit.textui.TestRunner\", testClass}; ", "-\t\tProcess p= Runtime.getRuntime().exec(cmd);", "-\t\tInputStream i= p.getInputStream();", "-\t\twhile((i.read()) != -1) ", "-\t\t\t; //System.out.write(b); ", "-\t\tassertTrue((p.waitFor() == 0) == success);", "-\t\tif (success)", "-\t\t\tassertTrue(p.exitValue() == 0);", "-\t\telse", "-\t\t\tassertFalse(p.exitValue() == 0);", "-\t}", "+", "+    void execTest(String testClass, boolean success) throws Exception {", "+        String java = System.getProperty(\"java.home\") + File.separator + \"bin\" + File.separator + \"java\";", "+        String cp = System.getProperty(\"java.class.path\");", "+        //use -classpath for JDK 1.1.7 compatibility", "+        String[] cmd = {java, \"-classpath\", cp, \"junit.textui.TestRunner\", testClass};", "+        Process p = Runtime.getRuntime().exec(cmd);", "+        InputStream i = p.getInputStream();", "+        while ((i.read()) != -1)", "+            ; //System.out.write(b);", "+        assertTrue((p.waitFor() == 0) == success);", "+        if (success) {", "+            assertTrue(p.exitValue() == 0);", "+        } else {", "+            assertFalse(p.exitValue() == 0);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9cbe5699189f9cfee052a6867c848f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void validateNoTypeParameterOnType(Type type, List<Throwable> errors)", "signatureAfterChange": "      private void validateNoTypeParameterOnType(Type type, List<Throwable> errors)", "diff": ["-\tprivate void validateNoTypeParameterOnType(Type type, List<Throwable> errors) {", "-\t\tif (type instanceof TypeVariable<?>) {", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName()", "-\t\t\t\t\t+ \"() contains unresolved type variable \" + type));", "-\t\t} else if (type instanceof ParameterizedType)", "-\t\t\tvalidateNoTypeParameterOnParameterizedType((ParameterizedType) type, errors);", "-\t\telse if (type instanceof WildcardType)", "-\t\t\tvalidateNoTypeParameterOnWildcardType((WildcardType) type, errors);", "-\t\telse if (type instanceof GenericArrayType)", "-\t\t\tvalidateNoTypeParameterOnGenericArrayType((GenericArrayType) type, errors);", "-\t}", "+    private void validateNoTypeParameterOnType(Type type, List<Throwable> errors) {", "+        if (type instanceof TypeVariable<?>) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName()", "+                    + \"() contains unresolved type variable \" + type));", "+        } else if (type instanceof ParameterizedType) {", "+            validateNoTypeParameterOnParameterizedType((ParameterizedType) type, errors);", "+        } else if (type instanceof WildcardType) {", "+            validateNoTypeParameterOnWildcardType((WildcardType) type, errors);", "+        } else if (type instanceof GenericArrayType) {", "+            validateNoTypeParameterOnGenericArrayType((GenericArrayType) type, errors);", "+        }", "+    }"]}]}
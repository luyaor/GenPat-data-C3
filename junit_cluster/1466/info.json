{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd9174964a2131115e5d8ce1b045d4ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "221a5a5ad3018d4aa4891c02cc4d7da6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType)", "signatureAfterChange": "      public <T extends Annotation> T getAnnotation(Class<T> annotationType)", "diff": ["-\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "-\t\tfor (Annotation each : getAnnotations())", "-\t\t\tif (annotationType.isInstance(each))", "-\t\t\t\treturn annotationType.cast(each);", "-\t\treturn null;", "-\t}", "+    public <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "+        for (Annotation each : getAnnotations()) {", "+            if (annotationType.isInstance(each)) {", "+                return annotationType.cast(each);", "+            }", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d815921b12322ce93b3f722aa39b3a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType)", "signatureAfterChange": "     public <T extends Annotation> T getAnnotation(Class<T> annotationType)", "diff": ["-\t */", "-\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "-\t\tfor (Annotation each : fAnnotations)", "-\t\t\tif (each.annotationType().equals(annotationType))", "-\t\t\t\treturn annotationType.cast(each);", "-\t\treturn null;", "-\t}", "+     */", "+    public <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "+        for (Annotation each : fAnnotations) {", "+            if (each.annotationType().equals(annotationType)) {", "+                return annotationType.cast(each);", "+            }", "+        }", "+        return null;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b8d5b88adfec1082dcf228475240dcd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5044a16b98b71e609840573b74c0790c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java", "commitBeforeChange": "26f9ebac45e0ff95c72d356b98b64eaf3de4f618", "commitAfterChange": "99b0ebc70e061d7620179f4e72e735e3944e54cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "             public Statement apply(final Statement base,                     FrameworkMethod method, Object target)", "signatureAfterChange": "         public Statement apply(final Statement base,                 FrameworkMethod method, Object target)", "diff": ["-        private static class Increment implements MethodRule {", "-            public Statement apply(final Statement base,", "-                    FrameworkMethod method, Object target) {", "-                return new Statement() {", "-                    @Override", "-                    public void evaluate() throws Throwable {", "-                        runCount++;", "-                        base.evaluate();", "-                    }", "-", "-                    ;", "-                };", "-            }", "+    private static class Increment implements MethodRule {", "+        public Statement apply(final Statement base,", "+                FrameworkMethod method, Object target) {", "+            return new Statement() {", "+                @Override", "+                public void evaluate() throws Throwable {", "+                    runCount++;", "+                    base.evaluate();", "+                }", "+            };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a643b7136db13415073e855a4bb12416", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "commitAfterChange": "9d9899bce3506e7d87ebc6352a3cf3d25ea20f54", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r     String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String[] args)", "diff": ["-                    return Arrays.copyOfRange(args, i + 1, args.length);\r", "+                    return copyArray(args, i + 1, args.length);\r", "-                            filterSpec = args[i];\r", "+\r", "+                            if (i < args.length) {\r", "+                                filterSpec = args[i];\r", "+                            } else {\r", "+                                Description description = createSuiteDescription(arg);\r", "+                                Failure failure = new Failure(\r", "+                                        description,\r", "+                                        new CommandLineParserError(arg + \" value not specified\"));\r", "+                                failures.add(failure);\r", "+\r", "+                                break;\r", "+                            }\r", "-                    return Arrays.copyOfRange(args, i, args.length);\r", "+                    return copyArray(args, i, args.length);\r"]}]}
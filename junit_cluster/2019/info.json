{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9530367a16f2ee5d278e0d8dddad5c5d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11e58c57dbd91702157d54a37950ffaa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "diff": ["-            List<Class<?>> categories = categories(description);", "-            if (categories.isEmpty()) {", "-                return fIncluded == null;", "+            final Set<Class<?>> childCategories= categories(description);", "+", "+            // If a child has no categories, immediately return.", "+            if (childCategories.isEmpty()) {", "+                return fIncluded.isEmpty();", "-            for (Class<?> each : categories) {", "-                if (fExcluded != null && fExcluded.isAssignableFrom(each)) {", "-                    return false;", "+", "+            if (!fExcluded.isEmpty()) {", "+                if (fExcludedAny) {", "+                    if (matchesAnyParentCategories(childCategories, fExcluded)) {", "+                        return false;", "+                    }", "+                } else {", "+                    if (matchesAllParentCategories(childCategories, fExcluded)) {", "+                        return false;", "+                    }", "-            for (Class<?> each : categories) {", "-                if (fIncluded == null || fIncluded.isAssignableFrom(each)) {", "+", "+            // Couldn't be excluded, and with no suite's included categories treated as should run.", "+            if (fIncluded.isEmpty()) {", "+                return true;", "+            }", "+", "+            if (!fIncluded.isEmpty()) {", "+                if (fIncludedAny) {", "+                    return matchesAnyParentCategories(childCategories, fIncluded);", "+                } else {", "+                    return matchesAllParentCategories(childCategories, fIncluded);", "+                }", "+            }", "+", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c32f30bb5148f789bb348f12f87814dc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "diff": ["-                return fIncluded.isEmpty();", "+                return included.isEmpty();", "-            if (!fExcluded.isEmpty()) {", "-                if (fExcludedAny) {", "-                    if (matchesAnyParentCategories(childCategories, fExcluded)) {", "+            if (!excluded.isEmpty()) {", "+                if (excludedAny) {", "+                    if (matchesAnyParentCategories(childCategories, excluded)) {", "-                    if (matchesAllParentCategories(childCategories, fExcluded)) {", "+                    if (matchesAllParentCategories(childCategories, excluded)) {", "-            if (fIncluded.isEmpty()) {", "+            if (included.isEmpty()) {", "-                if (fIncludedAny) {", "-                    return matchesAnyParentCategories(childCategories, fIncluded);", "+                if (includedAny) {", "+                    return matchesAnyParentCategories(childCategories, included);", "-                    return matchesAllParentCategories(childCategories, fIncluded);", "+                    return matchesAllParentCategories(childCategories, included);"]}]}
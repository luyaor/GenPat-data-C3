{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31365f9a55ff907d171889b4d27f9344", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e107205a7a3b4314ace8a103ff7754", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "4e2455b1f142bdf8f07383082638718695e51224", "commitAfterChange": "c618504adee4bc91b3bd7e0ff06be6e1fa9d88cc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate Matcher<Throwable> hasMessage(Matcher<String> matcher)", "signatureAfterChange": "  \tprivate Matcher<Throwable> hasMessage(final Matcher<String> matcher)", "diff": ["-\tprivate Matcher<Throwable> hasMessage(Matcher<String> matcher) {", "-\t\treturn new FeatureMatcher<Throwable, String>(matcher,", "-\t\t\t\t\"exception with message\", \"getMessage()\") {", "+\tprivate Matcher<Throwable> hasMessage(final Matcher<String> matcher) {", "+\t\treturn new TypeSafeMatcher<Throwable>() {", "+\t\t\tpublic void describeTo(Description description) {", "+\t\t\t\tdescription.appendText(\"message \");", "+\t\t\t\tdescription.appendDescriptionOf(matcher);", "+\t\t\t}", "+\t\t", "-\t\t\tprotected String featureValueOf(Throwable actual) {", "-\t\t\t\treturn actual.getMessage();", "+\t\t\tpublic boolean matchesSafely(Throwable item) {", "+\t\t\t\treturn matcher.matches(item.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f844cbb042f3c98e79107cc89d4807bd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprotected Statement invoke(FrameworkMethod method, Object test)", "signatureAfterChange": "  \tprivate void testAborted(RunNotifier notifier, Description description, \t\t\tThrowable e)", "diff": ["+\tprivate void testAborted(RunNotifier notifier, Description description,", "+\t\t\tThrowable e) {", "+\t\tnotifier.fireTestStarted(description);", "+\t\tnotifier.fireTestFailure(new Failure(description, e));", "+\t\tnotifier.fireTestFinished(description);", "-\t", "-\tprotected Statement invoke(FrameworkMethod method, Object test) {", "-\t\treturn new InvokeMethod(method, test);"]}]}
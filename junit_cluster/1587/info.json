{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4b96250e59b05110d0b325871f07d78", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f56061da300c0f43f81ec27f33fd3f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "3b8708636ffc1a9fc970b66db73c09095dabc2e2", "commitAfterChange": "6b943e564adcc9a7106e54c24eb5d022bed1462f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private Matcher<Throwable> causeEquals(final Throwable expectedCause)", "signatureAfterChange": "      private Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher)", "diff": ["-    private Matcher<Throwable> causeEquals(final Throwable expectedCause) {", "+    private Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher) {", "-            @Override", "-            public boolean matchesSafely(Throwable item) {", "-                return expectedCause == null ? item.getCause() == null : expectedCause.equals(item.getCause());", "-            }", "-", "-                description.appendText(expectedCause.toString());", "+                description.appendDescriptionOf(causeMatcher);", "+            }", "+", "+            @Override", "+            public boolean matchesSafely(Throwable item) {", "+                return causeMatcher.matches(item.getCause());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb75bd81091a82c4a44bcafb85d76009", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedExceptionMatcher.java", "commitBeforeChange": "6e6a6e47f15e3de1fac90ecb9e3dbdb180f3a88b", "commitAfterChange": "f1be7f250156ecc0e6b6c9d7005abb53359fe2fe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\") \tprivate List<Matcher<? super Object>> castedMatchers()", "signatureAfterChange": "  \tprivate List<Matcher<? super Throwable>> castedMatchers()", "diff": ["+", "+\tprivate List<Matcher<? super Throwable>> castedMatchers() {", "+\t\tList<Matcher<? super Throwable>> castedMatchers = new LinkedList<Matcher<? super Throwable>>();", "+\t\tfor (Matcher<?> matcher : fMatchers) {", "+\t\t\tcastedMatchers.add(cast(matcher));", "+\t\t}", "+\t\treturn castedMatchers;", "-\tprivate List<Matcher<? super Object>> castedMatchers() {", "-\t\tList<Matcher<? super Object>> castedMatchers = new LinkedList<Matcher<? super Object>>();", "-\t\tfor (Matcher<?> matcher : fMatchers) {", "-\t\t\tcastedMatchers.add((Matcher<? super Object>) matcher);", "-\t\t}", "-\t\treturn castedMatchers;"]}]}
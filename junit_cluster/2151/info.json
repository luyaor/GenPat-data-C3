{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60861d2152be2a24b72746b03a0f758d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026e6e51d5e2a72db544220fce53c3a0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "commitAfterChange": "421ab330509a53302f56b209595f55b23bfdfc0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t\tpublic Description getDescription()", "signatureAfterChange": "  \tprivate static String createSuiteDescription(TestSuite ts)", "diff": ["-", "-\t\tpublic Description getDescription() {", "-\t\t\tString name= fSuite.getName() == null ? \"\" : fSuite.getName();", "-\t\t\tDescription description= Description.createSuiteDescription(name);", "-\t\t\tint n= fSuite.testCount();", "-\t\t\tfor (int i= 0; i < n; i++) {", "-\t\t\t\tDescription childDescription= makeDescription(fSuite.testAt(i));", "-\t\t\t\tif (fFilter.shouldRun(childDescription)) {", "-\t\t\t\t\tdescription.addChild(childDescription);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn description;", "-\t\t}", "+\tprivate static String createSuiteDescription(TestSuite ts) {", "+\t\tint count= ts.countTestCases();", "+\t\tString example = count == 0 ? \"\" : String.format(\" [example: %s]\", ts.testAt(0));", "+\t\treturn String.format(\"TestSuite with %s tests%s\", count, example);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba7bf7d741bf5aeb5d4fd004621a097", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected Statement possiblyExpectingExceptions(TestAnnotation annotation, \t\t\tStatement next)", "signatureAfterChange": "  \t@Override \tpublic Description getDescription()", "diff": ["+", "+\t@Override", "+\tpublic Description getDescription() {", "+\t\tDescription spec= Description.createSuiteDescription(getName(), classAnnotations());", "+\t\tList<Method> testMethods= fTestMethods;", "+\t\tfor (Method method : testMethods)", "+\t\t\tspec.addChild(methodDescription(method));", "+\t\treturn spec;", "+\t}", "-\tprotected Statement possiblyExpectingExceptions(TestAnnotation annotation,", "-\t\t\tStatement next) {", "-\t\treturn annotation.expectsException() ? new ExpectException(next, annotation", "-\t\t\t\t.getExpectedException()) : next;"]}]}
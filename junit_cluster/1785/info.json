{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b133e3229fa3e2453f7b25cafe6430c2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b3b930e29a301704d7c990621f5be2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "commitAfterChange": "fba19ba73a93dcc2d18942b3cf4992ce010afdb2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private Thread getStuckThread (Thread mainThread)", "signatureAfterChange": "     private Thread getStuckThread (Thread mainThread)", "diff": ["-    \tif (fThreadGroup == null) return null;", "-    \tfinal int count = fThreadGroup.activeCount(); // this is just an estimate", "-    \tint enumSize = Math.max (count * 2, 100);", "-    \tint enumCount;", "-    \tThread[] threads;", "-\t\tint loopCount = 0;", "-    \twhile (true) {", "-    \t\tthreads = new Thread[enumSize];", "-    \t\tenumCount = fThreadGroup.enumerate (threads);", "-    \t\tif (enumCount < enumSize) break;", "+        if (fThreadGroup == null) return null;", "+        Thread[] threadsInGroup = getThreadArray(fThreadGroup);", "+        if (threadsInGroup == null) return null;", "+        ", "+        // Now that we have all the threads in the test's thread group: Assume that", "+        // any thread we're \"stuck\" in is RUNNABLE.  Look for all RUNNABLE threads. ", "+        // If just one, we return that (unless it equals threadMain).  If there's more", "+        // than one, pick the one that's using the most CPU time, if this feature is", "+        // supported.", "+        Thread stuckThread = null;", "+        long maxCpuTime = 0;", "+        for (Thread thread : threadsInGroup) {", "+            if (thread.getState() == Thread.State.RUNNABLE) {", "+                long threadCpuTime = cpuTime(thread);", "+                if (stuckThread == null || threadCpuTime > maxCpuTime) {", "+                    stuckThread = thread;", "+                    maxCpuTime = threadCpuTime;", "+                }", "+            }               ", "+        }", "+        return (stuckThread == mainThread) ? null : stuckThread;", "+    }", "-    \t\tenumSize += 100;", "-    \t\tif (++loopCount >= 5) return null;", "-    \t\t// threads are proliferating too fast for us.  Bail before we get into ", "-    \t\t// trouble.", "-    \t} ", "-    \t", "-    \t// Now that we have all the threads in the test's thread group: Assume that", "-    \t// any thread we're \"stuck\" in is RUNNABLE.  Look for all RUNNABLE threads. ", "-    \t// If just one, we return that (unless it equals threadMain).  If there's more", "-    \t// than one, pick the one that's using the most CPU time, if this feature is", "-    \t// supported.", "-    \tThread stuckThread = null;", "-    \tlong maxCpuTime = 0;", "-    \tfor (int i = 0; i < enumCount; i++) {", "-    \t\tif (threads[i].getState() == Thread.State.RUNNABLE) {", "-                long threadCpuTime = cpuTime (threads [i]);", "-                if (stuckThread == null || threadCpuTime > maxCpuTime) {", "-                    stuckThread = threads[i];", "-                    maxCpuTime = threadCpuTime;", "-                }", "-    \t\t}   \t\t\t", "-    \t}", "-    \treturn (stuckThread == mainThread) ? null : stuckThread;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e704df785efd3bd43600ab9854471e0a", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/textui/TestRunner.java", "commitBeforeChange": "d8a643fbaf74011eeb64695e5ec11b448960dbd5", "commitAfterChange": "9a866f6c679298e64194fbfa5ef82262a792824d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic TestResult doRun(Test suite, boolean wait)", "signatureAfterChange": " \t \tpublic TestResult doRun(Test test)", "diff": ["+\tpublic TestResult doRun(Test test) {", "+\t\treturn doRun(test, false);", "+\t}"]}]}
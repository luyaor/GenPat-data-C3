{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24f4d54c8e8e08b52384d37d1d8f376c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d5fe866c19d7497b26d65cfc5afb90", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "diff": ["-", "-\t\t// TODO: (Oct 10, 2007 11:36:43 AM) EachTestNotifier has bad name throughout", "-", "+\t\tObject test;", "+\t\ttry {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "+\t\t\tnotifier.testAborted(description, e);", "+\t\t\treturn;", "+\t\t}", "-\t\tnotifying(method, chain(method), roadie).run(roadie);", "+\t\trun(roadie, method, test);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7045b7e49ddbfde9ec74eb9fcf6648d7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f0ef837a40922ac08c608661385abf71732975d3", "commitAfterChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "diff": ["-\t\t", "-\t\t// TODO: (Oct 10, 2007 10:57:17 AM) Still seems messy doing this here", "-\t\tObject test;", "-\t\ttry {", "-\t\t\ttest= new ReflectiveCallable() {", "-\t\t\t\t@Override", "-\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "-\t\t\t\t\treturn createTest();", "-\t\t\t\t}", "-\t\t\t}.run();", "-\t\t} catch (Throwable e) {", "-\t\t\tnotifier.testAborted(description, e);", "-\t\t\treturn;", "-\t\t}", "-\t\t", "-\t\tchain(method, test, roadie).run(roadie);", "+\t\tnotifying(method, chain(method), roadie).run(roadie);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6b9813574bc07089a1093de4a5f04aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ba32bd864142ffc43310551ea01452b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void optionallyHandleException(Throwable e, boolean handleException) \t\t\t\t\tthrows Throwable", "signatureAfterChange": "      private void optionallyHandleException(Throwable e, boolean handleException)             throws Throwable", "diff": ["-\tprivate void optionallyHandleException(Throwable e, boolean handleException)", "-\t\t\t\t\tthrows Throwable {", "-\t\tif (handleException)", "-\t\t\thandleException(e);", "-\t\telse", "-\t\t\tthrow e;", "-\t}", "+    private void optionallyHandleException(Throwable e, boolean handleException)", "+            throws Throwable {", "+        if (handleException) {", "+            handleException(e);", "+        } else {", "+            throw e;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a93ad70a0aa43ebb2e36fdc6b7d39d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void handleException(Throwable e) throws Throwable", "signatureAfterChange": "      private void handleException(Throwable e) throws Throwable", "diff": ["-\tprivate void handleException(Throwable e) throws Throwable {", "-\t\tif (fMatcherBuilder.expectsThrowable())", "-\t\t\tassertThat(e, fMatcherBuilder.build());", "-\t\telse", "-\t\t\tthrow e;", "-\t}", "+    private void handleException(Throwable e) throws Throwable {", "+        if (fMatcherBuilder.expectsThrowable()) {", "+            assertThat(e, fMatcherBuilder.build());", "+        } else {", "+            throw e;", "+        }", "+    }"]}]}
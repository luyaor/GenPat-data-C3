{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a40404c41970796dc433f34f4d3c6b18", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35fb85a6209a25e1f8fa034183b6d05a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\tprivate Object[] computeParams() throws Exception", "signatureAfterChange": "  \tprivate void createRunnersForParameters(Iterable<Object[]> allParameters) \t\t\tthrows InitializationError, Exception", "diff": ["-", "-\t\tprivate Object[] computeParams() throws Exception {", "-\t\t\ttry {", "-\t\t\t\treturn fParameterList.get(fParameterSetNumber);", "-\t\t\t} catch (ClassCastException e) {", "-\t\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\t\"%s.%s() must return a Collection of arrays.\",", "-\t\t\t\t\t\tgetTestClass().getName(), getParametersMethod(", "-\t\t\t\t\t\t\t\tgetTestClass()).getName()));", "-\t\t\t}", "+\tprivate void createRunnersForParameters(Iterable<Object[]> allParameters)", "+\t\t\tthrows InitializationError, Exception {", "+\t\ttry {", "+\t\t\tint i= 0;", "+\t\t\tfor (Object[] parametersOfSingleTest : allParameters) {", "+\t\t\t\tTestClassRunnerForParameters runner= new TestClassRunnerForParameters(", "+\t\t\t\t\t\tgetTestClass().getJavaClass(), parametersOfSingleTest,", "+\t\t\t\t\t\ti);", "+\t\t\t\trunners.add(runner);", "+\t\t\t\t++i;", "+\t\t\t}", "+\t\t} catch (ClassCastException e) {", "+\t\t\tthrow parametersMethodReturnedWrongType();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b74b21c9559df2a88068c20554fab9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "9423b224d0bafeeabe485e51a7f3080cfac0a368", "commitAfterChange": "a3e0b1c6cbd770405cb7fdd4291090afc8e49df7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass)", "signatureAfterChange": "  \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass, boolean nullsOk) throws Exception", "diff": ["-", "-\t\t\tClass<?> testClass) {", "-\t\tList<ParameterSignature> signatures= ParameterSignature.signatures(testClass.getConstructors()[0]);", "-\t\tint constructorParameterCount = signatures.size();", "-\t\tsignatures.addAll(ParameterSignature.signatures(testMethod));", "-\t\treturn new Assignments(new ArrayList<PotentialAssignment>(),", "-\t\t\t\tsignatures, testClass, constructorParameterCount);", "+\t\t\tClass<?> testClass, boolean nullsOk) throws Exception {", "+\t\tList<ParameterSignature> signatures;", "+\t\t\tsignatures= ParameterSignature.signatures(new TestClass(testClass).getConstructor());", "+\t\t\tint constructorParameterCount = signatures.size();", "+\t\t\tsignatures.addAll(ParameterSignature.signatures(testMethod));", "+\t\t\treturn new Assignments(new ArrayList<PotentialAssignment>(),", "+\t\t\t\t\tsignatures, testClass, constructorParameterCount, nullsOk);"]}]}
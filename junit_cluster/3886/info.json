{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fca937c573599fab747cddf20aef55a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27e9547c226e7bc9a1209a45303d1237", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "fcf34a36ee94cde6a5d9157a472ca65a465756ac", "commitAfterChange": "01b427b3b89ce04d01f0ddbd746d13a175feec5b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\t\tfor (T each : getChildren())", "+\t\tfor (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "+\t\t\tT each = iter.next();", "-\t\t\t\treturn;", "-\t\tthrow new NoTestsRemainException();", "+\t\t\t\ttry {", "+\t\t\t\t\tfilterChild(each);", "+\t\t\t\t} catch (NoTestsRemainException e) {", "+\t\t\t\t\titer.remove();", "+\t\t\t\t}", "+\t\t\telse", "+\t\t\t\titer.remove();", "+\t\t}", "+\t    if (getFilteredChildren().isEmpty()) {", "+\t        throw new NoTestsRemainException();", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82d73e3e5406fe5f5fc69baead317677", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\t\tfFilter= filter;", "+\t\tfor (Iterator<T> iter= getCachedChildren().iterator(); iter.hasNext();) {", "+\t\t\tT each= iter.next();", "+\t\t\tif (!filter.shouldRun(describeChild(each)))", "+\t\t\t\titer.remove();", "+\t\t\telse", "+\t\t\t\ttry {", "+\t\t\t\t\tfilter.apply(each);", "+\t\t\t\t} catch (NoTestsRemainException e) {", "+\t\t\t\t\titer.remove();", "+\t\t\t\t}", "+\t\t}", "-\t\tfor (T each : getChildren())", "-\t\t\tif (shouldRun(each))", "-\t\t\t\treturn;", "-\t\tthrow new NoTestsRemainException();", "+\t\tif (getCachedChildren().isEmpty())", "+\t\t\tthrow new NoTestsRemainException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faeccb36eaa7525211adbe26b52c5419", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "34a0ecb4ffb3cb8d33b60c222c29145d017f02c9", "commitAfterChange": "7cd277620b4c888ae4101bb3f4768af83b85313a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\t\tfFilter= filter;", "+\t\tfor (Iterator<T> iter= getCachedChildren().iterator(); iter.hasNext();) {", "+\t\t\tT each= iter.next();", "+\t\t\tif (!filter.shouldRun(describeChild(each)))", "+\t\t\t\titer.remove();", "+\t\t\telse", "+\t\t\t\ttry {", "+\t\t\t\t\tfilter.apply(each);", "+\t\t\t\t} catch (NoTestsRemainException e) {", "+\t\t\t\t\titer.remove();", "+\t\t\t\t}", "+\t\t}", "-\t\tfor (T each : getChildren())", "-\t\t\tif (shouldRun(each))", "-\t\t\t\treturn;", "-\t\tthrow new NoTestsRemainException();", "+\t\tif (getCachedChildren().isEmpty())", "+\t\t\tthrow new NoTestsRemainException();"]}]}
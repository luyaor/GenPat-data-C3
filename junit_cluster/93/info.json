{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1eae127db36e10f0a5d3e6c291f82a87", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35fb85a6209a25e1f8fa034183b6d05a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\tprivate Object[] computeParams() throws Exception", "signatureAfterChange": "  \tprivate void createRunnersForParameters(Iterable<Object[]> allParameters) \t\t\tthrows InitializationError, Exception", "diff": ["-", "-\t\tprivate Object[] computeParams() throws Exception {", "-\t\t\ttry {", "-\t\t\t\treturn fParameterList.get(fParameterSetNumber);", "-\t\t\t} catch (ClassCastException e) {", "-\t\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\t\"%s.%s() must return a Collection of arrays.\",", "-\t\t\t\t\t\tgetTestClass().getName(), getParametersMethod(", "-\t\t\t\t\t\t\t\tgetTestClass()).getName()));", "-\t\t\t}", "+\tprivate void createRunnersForParameters(Iterable<Object[]> allParameters)", "+\t\t\tthrows InitializationError, Exception {", "+\t\ttry {", "+\t\t\tint i= 0;", "+\t\t\tfor (Object[] parametersOfSingleTest : allParameters) {", "+\t\t\t\tTestClassRunnerForParameters runner= new TestClassRunnerForParameters(", "+\t\t\t\t\t\tgetTestClass().getJavaClass(), parametersOfSingleTest,", "+\t\t\t\t\t\ti);", "+\t\t\t\trunners.add(runner);", "+\t\t\t\t++i;", "+\t\t\t}", "+\t\t} catch (ClassCastException e) {", "+\t\t\tthrow parametersMethodReturnedWrongType();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "686975f6836fc352ed365b18c00c9f53", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic Parameterized(Class<?> klass) throws Throwable", "signatureAfterChange": "  \tpublic Parameterized(Class<?> klass) throws Throwable", "diff": ["-\t\tsuper(klass.getName());", "+\t\tsuper(klass);", "-\t\t", "-\t\tList<Throwable> errors = new ArrayList<Throwable>();", "+", "+\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\t", "-\t\tint i= 0;", "-\t\tfor (final Object each : getParametersList()) {", "-\t\t\tif (each instanceof Object[])", "-\t\t\t\tadd(new TestClassRunnerForParameters(klass, (Object[])each, i++));", "-\t\t\telse", "-\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));", "+\t\tfParameters= getParametersList();", "+\t\tfor (final Object each : fParameters) {", "+\t\t\tif (!(each instanceof Object[]))", "+\t\t\t\tthrow new Exception(String.format(", "+\t\t\t\t\t\t\"%s.%s() must return a Collection of arrays.\",", "+\t\t\t\t\t\tfTestClass.getName(), getParametersMethod().getName()));"]}]}
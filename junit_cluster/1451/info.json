{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ee39bfd0f906deeb79d10e22a273456", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f94a1337c07bbd994eec2ce1cf16119", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/model/TestClass.java", "commitBeforeChange": "74fe2493715dfe5b7d408411ce5d63a17398db48", "commitAfterChange": "9f52d1c93e0f8246ab5430007107e0c2599563dd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void addToAnnotationList(Class<? extends Annotation> annotation, \t\t\tFrameworkMethod testMethod)", "signatureAfterChange": "  \tprivate void addToAnnotationList(Class<? extends Annotation> annotation, \t\t\tFrameworkMethod testMethod)", "diff": ["-\t\tensureKey(annotation);", "-", "-\t\t// TODO: (Jan 10, 2008 12:18:09 AM) pass-through", "-\t\taddToAppropriateEnd(annotation, testMethod);", "-\t}", "+\t\tList<FrameworkMethod> methods= getAnnotatedMethods(annotation);", "+\t\tif (testMethod.isShadowedBy(methods))", "+\t\t\tmethods.add(0, testMethod);", "+\t\t\tmethods.add(testMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "651aca2b325f49c7713dd0e8ca2b0e8a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/links/RunAfters.java", "commitBeforeChange": "4f405a49eba4822fbdda0c9415d2dc4fd82fb14b", "commitAfterChange": "752727de89a6bab731f49597c7ec3858ebb3e0a3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void evaluate() throws Throwable", "diff": ["-\t\tMultipleFailureException errors= new MultipleFailureException();", "+\t\tfErrors.clear();", "-\t\t\terrors.add(e);", "+\t\t\tfErrors.add(e);", "-\t\t\t\t\terrors.add(e);", "+\t\t\t\t\tfErrors.add(e);", "-\t\terrors.assertEmpty();", "+\t\tif (fErrors.isEmpty())", "+\t\t\treturn;", "+\t\tif (fErrors.size() == 1)", "+\t\t\tthrow fErrors.get(0);", "+\t\tthrow new MultipleFailureException(fErrors);"]}]}
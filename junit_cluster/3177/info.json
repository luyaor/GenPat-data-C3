{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d775842937b198dd34a32a178ea6b723", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3299a3336be5a670661a412b084b6246", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "163f503af57d91f60c6b57d4c9afa768b7c04df0", "commitAfterChange": "ede492496de0f3c0872216ac9c9b88a00fdef09e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private static <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,             Class<? extends Annotation> type)", "signatureAfterChange": "      private static <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,             Class<? extends Annotation> type, boolean canFill)", "diff": ["-            Class<? extends Annotation> type) {", "-        if (!map.containsKey(type)) {", "-            map.put(type, new CopyOnWriteArrayList<T>());", "+            Class<? extends Annotation> type, boolean canFill) {", "+        if (!map.containsKey(type) && canFill) {", "+            map.put(type, new ArrayList<T>());", "-        return map.get(type);", "+        List<T> members = map.get(type);", "+        return members == null ? Collections.<T>emptyList() : members;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c493965147cc6a55857caa4117876d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void throwTimeoutException(StatementThread thread) throws Exception", "signatureAfterChange": "      private Exception createTimeoutException(Thread thread)", "diff": ["-    private void throwTimeoutException(StatementThread thread) throws Exception {", "+", "+    private Exception createTimeoutException(Thread thread) {", "+        StackTraceElement[] stackTrace = thread.getStackTrace();", "-        exception.setStackTrace(thread.getRecordedStackTrace());", "-        throw exception;", "+        if (stackTrace != null) {", "+            exception.setStackTrace(stackTrace);", "+            thread.interrupt();", "+        }", "+        return exception;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15dedb907efba21ee94c5c117f4211e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a377abfb6fd8c70345b16b6da13466", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate List<T> getFilteredChildren()", "signatureAfterChange": " \tpublic List<T> getCachedChildren()", "diff": ["-\tprivate List<T> getFilteredChildren() {", "-\t\tArrayList<T> filtered= new ArrayList<T>();", "-\t\tfor (T each : getChildren())", "-\t\t\tif (shouldRun(each))", "-\t\t\t\ttry {", "-\t\t\t\t\tfilterChild(each);", "-\t\t\t\t\tsortChild(each);", "-\t\t\t\t\tfiltered.add(each);", "-\t\t\t\t} catch (NoTestsRemainException e) {", "-\t\t\t\t\t// don't add it", "-\t\t\t\t}", "-\t\tCollections.sort(filtered, comparator());", "-\t\treturn filtered;", "+\t// TODO: public?", "+\tpublic List<T> getCachedChildren() {", "+\t\tif (fCachedChildren == null)", "+\t\t\tfCachedChildren= getChildren();", "+\t\treturn fCachedChildren;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff3fd501134ddba494d15a616b84632e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "34a0ecb4ffb3cb8d33b60c222c29145d017f02c9", "commitAfterChange": "7cd277620b4c888ae4101bb3f4768af83b85313a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate List<T> getFilteredChildren()", "signatureAfterChange": "  \tprivate List<T> getCachedChildren()", "diff": ["-\tprivate List<T> getFilteredChildren() {", "-\t\tArrayList<T> filtered= new ArrayList<T>();", "-\t\tfor (T each : getChildren())", "-\t\t\tif (shouldRun(each))", "-\t\t\t\ttry {", "-\t\t\t\t\tfilterChild(each);", "-\t\t\t\t\tsortChild(each);", "-\t\t\t\t\tfiltered.add(each);", "-\t\t\t\t} catch (NoTestsRemainException e) {", "-\t\t\t\t\t// don't add it", "-\t\t\t\t}", "-\t\tCollections.sort(filtered, comparator());", "-\t\treturn filtered;", "+\tprivate List<T> getCachedChildren() {", "+\t\tif (fCachedChildren == null)", "+\t\t\tfCachedChildren= getChildren();", "+\t\treturn fCachedChildren;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82fe985c542dc4980bb420f29469cd53", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85c4d5902057cfad6b86d1d6fea5e7ad", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/runner/BaseTestRunner.java", "commitBeforeChange": "04f4f3197084ad9ad7c050ce1a40d6f4421662f4", "commitAfterChange": "538187aac8c4858e9e366c4e4ee4e50cf40331c6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic Test getTest(String suiteClassName)", "signatureAfterChange": " \tpublic Test getTest(String suiteClassName)", "diff": ["-\t\t} catch(Exception e) {", "-\t\t\trunFailed(\"Could not invoke the suite() method\");", "+\t\t} ", "+\t\tcatch (InvocationTargetException e) {", "+\t\t\trunFailed(\"Failed to invoke suite():\" + e.getTargetException().toString());", "+\t\tcatch (IllegalAccessException e) {", "+\t\t\trunFailed(\"Failed to invoke suite():\" + e.toString());", "+\t\t\treturn null;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "985c0dcd0d7f189c1d01ab78da46749c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/validator/AnnotationValidatorFactory.java", "commitBeforeChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "commitAfterChange": "d3ee5d06c0b797ce812cbfe35addc6146d5f07cb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "signatureAfterChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "diff": ["-        if (validateWithAnnotation == null) {", "-            return new AnnotationValidator() {", "-            };", "-        }", "-", "+        if (clazz == null) {", "+            throw new IllegalArgumentException(\"Can't create validator, value is null in annotation \" + validateWithAnnotation.getClass().getName());", "+        }", "-            return annotationValidator;", "+            return fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "-            throw new RuntimeException(\"Error when creating AnnotationValidator class \" + clazz.getName(), e);", "+            throw new RuntimeException(\"Exception received when creating AnnotationValidator class \" + clazz.getName(), e);"]}]}
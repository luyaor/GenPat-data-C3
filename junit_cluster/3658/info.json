{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "075e079c6e36a1881ac091eb96bc01a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c459f501b3f3d97595a0439ea869360d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t@Deprecated \tprotected void validateInstanceMethods(List<Throwable> errors)", "signatureAfterChange": "     @Deprecated     protected void validateInstanceMethods(List<Throwable> errors)", "diff": ["-\t */", "-\t@Deprecated", "-\tprotected void validateInstanceMethods(List<Throwable> errors) {", "-\t\tvalidatePublicVoidNoArgMethods(After.class, false, errors);", "-\t\tvalidatePublicVoidNoArgMethods(Before.class, false, errors);", "-\t\tvalidateTestMethods(errors);", "+     */", "+    @Deprecated", "+    protected void validateInstanceMethods(List<Throwable> errors) {", "+        validatePublicVoidNoArgMethods(After.class, false, errors);", "+        validatePublicVoidNoArgMethods(Before.class, false, errors);", "+        validateTestMethods(errors);", "-\t\tif (computeTestMethods().size() == 0)", "-\t\t\terrors.add(new Exception(\"No runnable methods\"));", "-\t}", "+        if (computeTestMethods().size() == 0) {", "+            errors.add(new Exception(\"No runnable methods\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e9edf7025878c00755902e16ba448a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate long getTimeout(Test annotation)", "signatureAfterChange": "      private long getTimeout(Test annotation)", "diff": ["-\tprivate long getTimeout(Test annotation) {", "-\t\tif (annotation == null)", "-\t\t\treturn 0;", "-\t\treturn annotation.timeout();", "-\t}", "+", "+    private long getTimeout(Test annotation) {", "+        if (annotation == null) {", "+            return 0;", "+        }", "+        return annotation.timeout();", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad8382aaf97913fe5191a822597f5fc5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a81389df311d96fcc0d39d1ecbdedef", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "signatureAfterChange": "      private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "diff": ["-\t", "-\tprivate static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {", "-\t\tSuiteClasses annotation= klass.getAnnotation(SuiteClasses.class);", "-\t\tif (annotation == null)", "-\t\t\tthrow new InitializationError(String.format(\"class '%s' must have a SuiteClasses annotation\", klass.getName()));", "-\t\treturn annotation.value();", "-\t}", "+    private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {", "+        SuiteClasses annotation = klass.getAnnotation(SuiteClasses.class);", "+        if (annotation == null) {", "+            throw new InitializationError(String.format(\"class '%s' must have a SuiteClasses annotation\", klass.getName()));", "+        }", "+        return annotation.value();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e532015d490eca885daaa28342337a6c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/RunnerBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tClass<?> addParent(Class<?> parent) throws InitializationError", "signatureAfterChange": "      Class<?> addParent(Class<?> parent) throws InitializationError", "diff": ["-\tClass<?> addParent(Class<?> parent) throws InitializationError {", "-\t\tif (!parents.add(parent))", "-\t\t\tthrow new InitializationError(String.format(\"class '%s' (possibly indirectly) contains itself as a SuiteClass\", parent.getName()));", "-\t\treturn parent;", "-\t}", "+    Class<?> addParent(Class<?> parent) throws InitializationError {", "+        if (!parents.add(parent)) {", "+            throw new InitializationError(String.format(\"class '%s' (possibly indirectly) contains itself as a SuiteClass\", parent.getName()));", "+        }", "+        return parent;", "+    }"]}]}
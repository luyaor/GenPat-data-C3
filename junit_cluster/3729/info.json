{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9db86bbc5d4ef5124ed8d4ad71689cfc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "975e95825deb12d702556b369f5501a3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxCore.java", "commitBeforeChange": "451ca12156d5704809a1feff78a10a9451cd2023", "commitAfterChange": "ce7bda3346278aab6ccebedcd5b8c8d4ab27ba02", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void run(Request request)", "signatureAfterChange": "  \tpublic void run(Request request)", "diff": ["+", "-\t\t\tpublic void testStarted(Description description) throws Exception {", "+\t\t\t\tpublic void testStarted(Description description) throws Exception {", "-\t\t\t\tfDurations.put(description, end - start);", "+\t\t\t\tputTestDuration(description, end - start);", "-\t\t\t", "+", "-\t\t\t\tfFailures.put(failure.getDescription(), end);", "+\t\t\t\tputTestFailureTimestamp(failure.getDescription(), end);", "+\t\ttry {", "+\t\t\tsave();", "+\t\t} catch (FileNotFoundException e) {", "+\t\t\t// TODO", "+\t\t\te.printStackTrace();", "+\t\t} catch (IOException e) {", "+\t\t\t// TODO", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a13077684c70aaf2bc5f5746dbc47a29", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/internal/runners/statements/FailOnTimeoutTest.java", "commitBeforeChange": "6a302a675232ebb78ed51ed0bb33681f4797c81f", "commitAfterChange": "66bfb24d328bd480e31c3834cfdfdca53173c62a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void throwsExceptionWithTimeoutValueAndTimeUnitSet()             throws Throwable", "signatureAfterChange": "      @Test     public void throwsExceptionWithTimeoutValueAndTimeUnitSet()             throws Throwable", "diff": ["-        thrown.expect(exceptionWithTimeout(100, TimeUnit.MILLISECONDS));", "-        evaluateWithWaitDuration(TIMEOUT + 50);", "-    }", "+        try {", "+            evaluateWithWaitDuration(TIMEOUT + 50);", "+            fail(\"No exception was thrown when test timed out\");", "+        } catch (TestFailedOnTimeoutException e) {", "+            assertEquals(TIMEOUT, e.getTimeout());", "+            assertEquals(TimeUnit.MILLISECONDS, e.getTimeUnit());", "+        }"]}]}
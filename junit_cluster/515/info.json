{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a225c63bfdb99f9a01f6d0ea1d8e59e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "156e115a346222b936fc5c67bcb43762", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/DescriptionTest.java", "commitBeforeChange": "09f3e35b7f006006d44de0daccd1b4cf2c500be1", "commitAfterChange": "b564894980310e40f4c21006ff0c2346c4fc71f6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t@Test \tpublic void sameNamesButDifferentUniqueIdAreNotEqual() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void sameNamesButDifferentUniqueIdAreNotEqual() throws Exception", "diff": ["-\t\tassertThat(Description.createTestDescription(\"something that's not a class name\", \"aTestMethod\", 1),", "-\t\t\t\t\t\tnot(equalTo(Description.createTestDescription(\"something that's not a class name\", \"aTestMethod\", 2))));", "+\t\tassertThat(Description.createTestDescription(\"not a class name\", \"aTestMethod\", 1),", "+\t\t\t\t\t\tnot(equalTo(Description.createTestDescription(\"not a class name\", \"aTestMethod\", 2))));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d978852ffb8cda88bf1f525544678d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "3dd6b9fca5ccbd02a4d1cb5c5b3c921e369662a0", "commitAfterChange": "a36466e1aed381e2973e5550969474a043879611", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": " \tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "diff": ["-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() \"", "-\t\t\t\t\t+ state + \" be static\"));", "+\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "-\t\t\terrors.add(new Exception(\"Class \"", "-\t\t\t\t\t+ fMethod.getDeclaringClass().getName()", "-\t\t\t\t\t+ \" should be public\"));", "+\t\t\terrors.add(new Exception(\"Class \" + fMethod.getDeclaringClass().getName() + \" should be public\"));", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName()", "-\t\t\t\t\t+ \" should be public\"));", "+\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName()", "-\t\t\t\t\t+ \" should be void\"));", "+\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c395a8101b9f19e18eaa44eed659ceb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/TemporaryFolderUsageTest.java", "commitBeforeChange": "26caa86a40a6643d836e6939186e14145174df12", "commitAfterChange": "6012fa3b4fe4e924311d42e05e216092e425cbf9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Test(expected= IllegalStateException.class) \tpublic void newFolderWithGivenPathThrowsIllegalStateExceptionIfCreateWasNotInvoked()", "signatureAfterChange": "  \t@Test(expected= IllegalStateException.class) \tpublic void newFolderWithGivenPathThrowsIllegalStateExceptionIfCreateWasNotInvoked()", "diff": ["-\t\tnew TemporaryFolder().newFolder(\"level1\", \"leve2\", \"leve3\");", "+\t\tnew TemporaryFolder().newFolder(\"level1\", \"level2\", \"level3\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd52eb42bd52e53df322e36117d7245", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/MethodSorterTest.java", "commitBeforeChange": "dfaf332b4df0d98293ac135e5abf9de6a2623b14", "commitAfterChange": "74941e1e1482016ffe705830cefb27cd376fb5ef", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "           @Test     public void getMethodsNullSorter() throws Exception", "signatureAfterChange": "           @Test     public void getMethodsNullSorter() throws Exception", "diff": ["-        assertEquals(\"[void testOne()]\", declaredMethods(Super.class));", "-        assertEquals(\"[void testTwo()]\", declaredMethods(Sub.class));", "+        assertEquals(\"[void superMario()]\", declaredMethods(Super.class));", "+        assertEquals(\"[void subBowser()]\", declaredMethods(Sub.class));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e4ccb19214d93ccff565bbd4236cf47", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/framework/TestCaseTest.java", "commitBeforeChange": "1d1c507cec3e0fc9b9371b2501124de5eff756c8", "commitAfterChange": "3214326e44841a7bdd9139c343f4f0834d4b3c70", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testExceptionRunningAndTearDown()", "signatureAfterChange": " \tpublic void testExceptionRunningAndTearDown()", "diff": ["-\t\t// This test documents the current behavior. With 1.4, we should", "+\t\t// With 1.4, we should", "-\t\t\t\tthrow new Error(\"tearDown\");", "+\t\t\t\tthrow new Error(\"tearingDown\");", "-\t\tassertEquals(\"tearDown\", failure.thrownException().getMessage());", "+\t\tassertEquals(\"running\", failure.thrownException().getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0a1a4f6f02922c40dfb0d1211375f3a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/DescriptionTest.java", "commitBeforeChange": "09f3e35b7f006006d44de0daccd1b4cf2c500be1", "commitAfterChange": "b564894980310e40f4c21006ff0c2346c4fc71f6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Test \tpublic void parseClassNameAndMethodUniqueId() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void parseClassNameAndMethodUniqueId() throws Exception", "diff": ["-\t\tDescription description = Description.createTestDescription(\"something that's not a class name\", \"aTestMethod\", 123);", "+\t\tDescription description = Description.createTestDescription(\"not a class name\", \"aTestMethod\", 123);", "-\t\tassertThat(description.getClassName(), equalTo(\"something that's not a class name\"));", "+\t\tassertThat(description.getClassName(), equalTo(\"not a class name\"));"]}]}
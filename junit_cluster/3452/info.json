{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e45385bcd88cf20263cbc947c2508df9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09976e3731375e5706ef255cc0439f69", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/CompositeRunner.java", "commitBeforeChange": "65e9f226760647823a2d4b08bc4d2317ab62fc7d", "commitAfterChange": "478900d7d7af563a3b75b6ca9d7d44e37e2aff5b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic CompositeRunner(Class<?> type, String name)", "signatureAfterChange": " \t \tpublic CompositeRunner(Class<?> klass, String name, List<Runner> runners)", "diff": ["+\tpublic CompositeRunner(Class<?> klass, String name, List<Runner> runners) {", "+\t\tthis(klass, name);", "+\t\tfRunners= runners;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79aefc70f6260effa385e29a998e3925", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "a4c68872a91681139d404825c2bb04bd5ba804dd", "commitAfterChange": "f0ef837a40922ac08c608661385abf71732975d3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\tprotected void runWithIncompleteAssignment(Assignments incomplete, EachTestNotifier notifier) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tThrowable", "signatureAfterChange": "  \t\tprotected void runWithIncompleteAssignment(Assignments incomplete, FailureListener listener) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tThrowable", "diff": ["-\t\tprotected void runWithIncompleteAssignment(Assignments incomplete, EachTestNotifier notifier)", "+\t\tprotected void runWithIncompleteAssignment(Assignments incomplete, FailureListener listener)", "-\t\t\tfor (PotentialAssignment source : incomplete", "-\t\t\t\t\t.potentialsForNextUnassigned()) {", "-\t\t\t\trunWithAssignment(incomplete.assignNext(source), notifier);", "+\t\t\tList<PotentialAssignment> potentialsForNextUnassigned= incomplete", "+\t\t\t\t\t\t\t.potentialsForNextUnassigned();", "+\t\t\tfor (PotentialAssignment source : potentialsForNextUnassigned) {", "+\t\t\t\trunWithAssignment(incomplete.assignNext(source), listener);"]}]}
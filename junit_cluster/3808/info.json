{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f61169628ff2b63e271864715feb8f6c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027c213cb8cf424ee46e34dbeaa09ea4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4MethodRunner.java", "commitBeforeChange": "4081076e513e84bb2376f889d4108e64e9a18653", "commitAfterChange": "a58514aec7e843339be24980e92aeeb759327ffb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t\t@Override \t\tpublic void run(final Roadie context)", "signatureAfterChange": "  \t\t@Override \t\tpublic void run(final Roadie context)", "diff": ["-\t\t\t\t\tfNext.run(context);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfNext.run(context);", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t} catch (Error e) {", "+\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t// TODO: (Oct 5, 2007 11:27:11 AM) Now what?", "+\t\t\t\t\t}", "+\t\t\t} catch (ExecutionException e) {", "+\t\t\t\tcontext.addFailure(e.getCause());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a88dd06b2f01b53d08b3b50b193d24f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "4e1018a940699a38673b1861977110e6b558afb1", "commitAfterChange": "4cb9a65f450efa5f2a42128856c7b56e6d283386", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \t\tprivate void invokeWithActualParameters(Object target, \t\t\t\tAssignments complete) throws Throwable", "signatureAfterChange": "  \t\tprivate void invokeWithActualParameters(Object target, \t\t\t\tAssignments complete) throws Throwable", "diff": ["-\t\t\ttry {", "+//\t\t\ttry {", "-\t\t\t\tsuccesses++;", "-\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\thandleAssumptionViolation(e);", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\treportParameterizedError(e, values);", "-\t\t\t}", "+//\t\t\t} catch (AssumptionViolatedException e) {", "+//\t\t\t\thandleAssumptionViolation(e);", "+//\t\t\t}"]}]}
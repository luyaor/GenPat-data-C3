{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08713378130b3e5e4ba25a48fad4334b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c0587aaaa0f2f5d8e346833e6482de", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "61994e0c0aa768b43fad1ac6e35b1e43ffc8b142", "commitAfterChange": "97654ff38f976733fa4c6ae9b28e3fe10328183f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void failuresNamedCorrectly()", "signatureAfterChange": "      @Test     public void failuresNamedCorrectly()", "diff": ["-", "-    @Test", "-    public void failuresNamedCorrectly() {", "-        Result result = JUnitCore.runClasses(FibonacciTest.class);", "-        assertEquals(", "-                \"test[1: fib(1)=1](\" + FibonacciTest.class.getName() + \")\",", "-                result.getFailures().get(0).getTestHeader());", "+", "+    @Test", "+    public void failuresNamedCorrectly() {", "+        Result result = JUnitCore.runClasses(ThreeFailures.class);", "+        assertEquals(", "+                \"testSomething[0: x=1](\" + ThreeFailures.class.getName() + \")\",", "+                result.getFailures().get(0).getTestHeader());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8dd5a6b94d7a23d4a06164c4a017f3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7", "commitAfterChange": "cb6abf6fc729f07c5d60b0756e91af444400b4b5", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "      @Test     public void meaningfulFailureWhenParametersNotPublic() throws Exception", "signatureAfterChange": "      @Test     public void meaningfulFailureWhenParametersNotPublic()", "diff": ["-    public void meaningfulFailureWhenParametersNotPublic() throws Exception {", "-        Result result = JUnitCore.runClasses(ProtectedParametersTest.class);", "-        String expected = String.format(", "-                \"No public static parameters method on class %s\",", "-                ProtectedParametersTest.class.getName());", "-        assertEquals(expected, result.getFailures().get(0).getMessage());", "+    public void meaningfulFailureWhenParametersNotPublic() {", "+        assertTestCreatesSingleFailureWithMessage(ProtectedParametersTest.class,", "+                \"No public static parameters method on class \"", "+                        + ProtectedParametersTest.class.getName());"]}]}
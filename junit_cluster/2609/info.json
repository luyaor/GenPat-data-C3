{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6328767e3e6c355e35e4fdb4e32e7e6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7265e02d9ca0450bf3c66a8bd12638ec", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tstatic public void assertEquals(String message, double expected, double actual, double delta)", "signatureAfterChange": "     static public void assertEquals(String message, double expected, double actual, double delta)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, double expected, double actual, double delta) {", "-\t\tif (Double.compare(expected, actual) == 0)", "-\t\t\treturn;", "-\t\tif (!(Math.abs(expected-actual) <= delta))", "-\t\t\tfailNotEquals(message, new Double(expected), new Double(actual));", "-\t}", "+     */", "+    static public void assertEquals(String message, double expected, double actual, double delta) {", "+        if (Double.compare(expected, actual) == 0) {", "+            return;", "+        }", "+        if (!(Math.abs(expected - actual) <= delta)) {", "+            failNotEquals(message, new Double(expected), new Double(actual));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c603603a0fa329dfa6833ad171f501", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/runner/TextRunnerTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tvoid execTest(String testClass, boolean success) throws Exception", "signatureAfterChange": "      void execTest(String testClass, boolean success) throws Exception", "diff": ["-\t", "-\tvoid execTest(String testClass, boolean success) throws Exception {", "-\t\tString java= System.getProperty(\"java.home\")+File.separator+\"bin\"+File.separator+\"java\";", "-\t\tString cp= System.getProperty(\"java.class.path\");", "-\t\t//use -classpath for JDK 1.1.7 compatibility", "-\t\tString [] cmd= { java, \"-classpath\", cp, \"junit.textui.TestRunner\", testClass}; ", "-\t\tProcess p= Runtime.getRuntime().exec(cmd);", "-\t\tInputStream i= p.getInputStream();", "-\t\twhile((i.read()) != -1) ", "-\t\t\t; //System.out.write(b); ", "-\t\tassertTrue((p.waitFor() == 0) == success);", "-\t\tif (success)", "-\t\t\tassertTrue(p.exitValue() == 0);", "-\t\telse", "-\t\t\tassertFalse(p.exitValue() == 0);", "-\t}", "+", "+    void execTest(String testClass, boolean success) throws Exception {", "+        String java = System.getProperty(\"java.home\") + File.separator + \"bin\" + File.separator + \"java\";", "+        String cp = System.getProperty(\"java.class.path\");", "+        //use -classpath for JDK 1.1.7 compatibility", "+        String[] cmd = {java, \"-classpath\", cp, \"junit.textui.TestRunner\", testClass};", "+        Process p = Runtime.getRuntime().exec(cmd);", "+        InputStream i = p.getInputStream();", "+        while ((i.read()) != -1)", "+            ; //System.out.write(b);", "+        assertTrue((p.waitFor() == 0) == success);", "+        if (success) {", "+            assertTrue(p.exitValue() == 0);", "+        } else {", "+            assertFalse(p.exitValue() == 0);", "+        }", "+    }"]}]}
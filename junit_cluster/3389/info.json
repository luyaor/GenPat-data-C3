{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "010385274c0b0ccd82f4a74754dd78cb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6930db5c01deaa8470883f773021ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean shouldBeStatic)", "signatureAfterChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic)", "diff": ["-\t\t\tboolean shouldBeStatic) {", "+\t\t\tboolean isStatic) {", "-\t\t\tif (shouldBeStatic && !isStatic(each))", "+\t\t\tif (Modifier.isStatic(each.getModifiers()) != isStatic) {", "+\t\t\t\tString state= isStatic ? \"should\" : \"should not\";", "-\t\t\t\t\t\t+ \"should be static\"));", "-\t\t\tif (!shouldBeStatic && runsAsStatic(each))", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "-\t\t\t\t\t\t+ \"should not be static\"));", "+\t\t\t\t\t\t+ state + \" be static\"));", "+\t\t\t}", "-\t\t\tif (effectiveParameterCount(each, shouldBeStatic) != 0)", "+\t\t\tif (each.getParameterTypes().length != 0)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3029755f87df849765e0a5657f2e2f0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "6a83bc0f1e5f9839a36910c3a21108bc38367afb", "commitAfterChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic)", "signatureAfterChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean shouldBeStatic)", "diff": ["-\t\t\tboolean isStatic) {", "+\t\t\tboolean shouldBeStatic) {", "-\t\t\tif (Modifier.isStatic(each.getModifiers()) != isStatic) {", "-\t\t\t\tString state= isStatic ? \"should\" : \"should not\";", "+\t\t\tif (shouldBeStatic && !isStatic(each))", "-\t\t\t\t\t\t+ state + \" be static\"));", "-\t\t\t}", "+\t\t\t\t\t\t+ \"should be static\"));", "+\t\t\tif (!shouldBeStatic && runsAsStatic(each))", "+\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "+\t\t\t\t\t\t+ \"should not be static\"));", "-\t\t\tif (each.getParameterTypes().length != 0)", "+\t\t\tif (effectiveParameterCount(each, shouldBeStatic) != 0)"]}]}
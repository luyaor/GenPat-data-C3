{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38bd373e23786ecdf37abe7bc7d46ab1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0c0c6cbbc3f095cf176802f611c5e2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic Description getDescription()", "signatureAfterChange": "      @Override     public Description getDescription()", "diff": ["-\t@Override", "-\tpublic Description getDescription() {", "-\t\tDescription spec= Description.createSuiteDescription(getName(), classAnnotations());", "-\t\tList<Method> testMethods= fTestMethods;", "-\t\tfor (Method method : testMethods)", "-\t\t\tspec.addChild(methodDescription(method));", "-\t\treturn spec;", "-\t}", "+    @Override", "+    public Description getDescription() {", "+        Description spec = Description.createSuiteDescription(getName(), classAnnotations());", "+        List<Method> testMethods = fTestMethods;", "+        for (Method method : testMethods) {", "+            spec.addChild(methodDescription(method));", "+        }", "+        return spec;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfeb200f869ad9787590feae2c3153e6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate void runChildren(final RunNotifier notifier)", "signatureAfterChange": "      private void runChildren(final RunNotifier notifier)", "diff": ["-\tprivate void runChildren(final RunNotifier notifier) {", "-\t\tfor (final T each : getFilteredChildren())", "- \t\t\tfScheduler.schedule(new Runnable() {\t\t\t", "-\t\t\t\tpublic void run() {", "-\t\t\t\t\tParentRunner.this.runChild(each, notifier);", "-\t\t\t\t}", "-\t\t\t});", "-\t\tfScheduler.finished();", "-\t}", "+    private void runChildren(final RunNotifier notifier) {", "+        for (final T each : getFilteredChildren()) {", "+            fScheduler.schedule(new Runnable() {", "+                public void run() {", "+                    ParentRunner.this.runChild(each, notifier);", "+                }", "+            });", "+        }", "+        fScheduler.finished();", "+    }"]}]}
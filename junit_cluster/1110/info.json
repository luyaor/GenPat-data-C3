{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "864271fad4b979a6c57f88d33b93e275", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f8f4e6928b53febc611a6f886351ea1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\t\tfor (Iterator<T> iter= getCachedChildren().iterator(); iter.hasNext();) {", "-\t\t\tT each= iter.next();", "-\t\t\tif (!filter.shouldRun(describeChild(each)))", "-\t\t\t\titer.remove();", "-\t\t\telse", "-\t\t\t\ttry {", "-\t\t\t\t\tfilter.apply(each);", "-\t\t\t\t} catch (NoTestsRemainException e) {", "-\t\t\t\t\titer.remove();", "-\t\t\t\t}", "-\t\t}", "+\t\tfFilter= filter;", "-\t\tfDescription = null;", "-\t\t", "-\t\tif (getCachedChildren().isEmpty())", "-\t\t\tthrow new NoTestsRemainException();", "+\t\tfor (T each : getChildren())", "+\t\t\tif (shouldRun(each))", "+\t\t\t\treturn;", "+\t\tthrow new NoTestsRemainException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da9165968f5d1e3a0ee341da13a915e3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\t\tfor (Iterator<T> iter= getCachedChildren().iterator(); iter.hasNext();) {", "-\t\t\tT each= iter.next();", "-\t\t\tif (!filter.shouldRun(describeChild(each)))", "-\t\t\t\titer.remove();", "-\t\t\telse", "-\t\t\t\ttry {", "-\t\t\t\t\tfilter.apply(each);", "-\t\t\t\t} catch (NoTestsRemainException e) {", "-\t\t\t\t\titer.remove();", "-\t\t\t\t}", "-\t\t}", "+\t\tfFilter= filter;", "-\t\tfDescription = null;", "-\t\t", "-\t\tif (getCachedChildren().isEmpty())", "-\t\t\tthrow new NoTestsRemainException();", "+\t\tfor (T each : getChildren())", "+\t\t\tif (shouldRun(each))", "+\t\t\t\treturn;", "+\t\tthrow new NoTestsRemainException();"]}]}
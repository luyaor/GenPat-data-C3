{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0fbc2247456123469a8b54d24bdd5f9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "415243d3e1d4d201737fb733fd7ecb3f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java", "commitBeforeChange": "9917b9fe95fd237b824b0bb6a3f9ef9efedd2b3b", "commitAfterChange": "48af7e797dbefa1fc47e80394c7f74ef87c3c7ab", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void assertClassHasFailureMessage(Class<?> klass, String message)", "signatureAfterChange": "      private void assertClassHasFailureMessage(Class<?> klass, int failureCount, String message)", "diff": ["-    private void assertClassHasFailureMessage(Class<?> klass, String message) {", "+    private void assertClassHasFailureMessage(Class<?> klass, int failureCount, String message) {", "-        assertThat(result.getFailureCount(), is(2)); //the second failure is no runnable methods", "+        assertThat(result.getFailureCount(), is(failureCount)); //the second failure is no runnable methods"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a0f3bd0651f1c444713f7b23c7fbce8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java", "commitBeforeChange": "15566c4b6633db5cc84cae78088b36346b7d42f4", "commitAfterChange": "9d3821f6411ad85a683b8d38e4d42411229f2eec", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void assertClassHasFailureMessage(Class<?> klass, String message)", "signatureAfterChange": "      private void assertClassHasFailureMessage(Class<?> klass, String message)", "diff": ["-        List<String> messages = new ArrayList<String>();", "-        for (Failure failure : result.getFailures()) {", "-            messages.add(failure.getMessage());", "-        }", "-        assertThat(messages, hasItem(message));", "+        assertThat(result.getFailureCount(), is(2)); //the second failure is no runnable methods", "+        assertThat(result.getFailures().get(0).getMessage(),", "+                is(equalTo(message)));", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b659dd5a96d1b0424b2ff450d8c8241b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java", "commitBeforeChange": "5e71994e865d0e2ac23885a11444cda91b3bba76", "commitAfterChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void assertClassHasFailureMessage(Class<?> klass, int failureCount, String message)", "signatureAfterChange": "      private void assertClassHasFailureMessage(Class<?> klass, String message)", "diff": ["-    private void assertClassHasFailureMessage(Class<?> klass, int failureCount, String message) {", "+    private void assertClassHasFailureMessage(Class<?> klass, String message) {", "-        assertThat(result.getFailureCount(), is(failureCount));", "-        assertThat(result.getFailures().get(0).getMessage(),", "-                is(equalTo(message)));", "+        List<String> messages = new ArrayList<String>();", "+        for (Failure failure : result.getFailures()) {", "+            messages.add(failure.getMessage());", "+        }", "+        assertThat(messages, hasItem(message));"]}]}
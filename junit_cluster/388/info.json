{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6b4c6d6c3bc95b25502bd681e9feea5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a6e6dc3bd7605e42d18bd1eb462597", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/Money.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t@Override \tpublic boolean equals(Object anObject)", "signatureAfterChange": "      @Override     public boolean equals(Object anObject)", "diff": ["-\t}", "-\t@Override", "-\tpublic boolean equals(Object anObject) {", "-\t\tif (isZero()) ", "-\t\t\tif (anObject instanceof IMoney)", "-\t\t\t\treturn ((IMoney)anObject).isZero();", "-\t\tif (anObject instanceof Money) {", "-\t\t\tMoney aMoney= (Money)anObject;", "-\t\t\treturn aMoney.currency().equals(currency())", "-\t\t\t\t\t\t\t && amount() == aMoney.amount();", "-\t\t}", "-\t\treturn false;", "-\t}", "+", "+    @Override", "+    public boolean equals(Object anObject) {", "+        if (isZero()) {", "+            if (anObject instanceof IMoney) {", "+                return ((IMoney) anObject).isZero();", "+            }", "+        }", "+        if (anObject instanceof Money) {", "+            Money aMoney = (Money) anObject;", "+            return aMoney.currency().equals(currency())", "+                    && amount() == aMoney.amount();", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3570966052f556c4f90f17fc733e1d6b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/InexactComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tprotected void assertElementsEqual(Object expected, Object actual)", "signatureAfterChange": "      @Override     protected void assertElementsEqual(Object expected, Object actual)", "diff": ["-\t@Override", "-\tprotected void assertElementsEqual(Object expected, Object actual) {", "-\t\tif (expected instanceof Double)", "-\t\t\tAssert.assertEquals((Double)expected, (Double)actual, (Double)fDelta);", "-\t\telse", "-\t\t\tAssert.assertEquals((Float)expected, (Float)actual, (Float)fDelta);", "-\t}", "+", "+    @Override", "+    protected void assertElementsEqual(Object expected, Object actual) {", "+        if (expected instanceof Double) {", "+            Assert.assertEquals((Double) expected, (Double) actual, (Double) fDelta);", "+        } else {", "+            Assert.assertEquals((Float) expected, (Float) actual, (Float) fDelta);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4859f3c47e119873fdbee8d549cfab51", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tstatic public void assertEquals(String message, float expected, float actual, float delta)", "signatureAfterChange": "     static public void assertEquals(String message, float expected, float actual, float delta)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, float expected, float actual, float delta) {", "-\t\tif (Float.compare(expected, actual) == 0)", "-\t\t\treturn;", "-\t\tif (!(Math.abs(expected - actual) <= delta))", "-\t\t\tfailNotEquals(message, new Float(expected), new Float(actual));", "-\t}", "+     */", "+    static public void assertEquals(String message, float expected, float actual, float delta) {", "+        if (Float.compare(expected, actual) == 0) {", "+            return;", "+        }", "+        if (!(Math.abs(expected - actual) <= delta)) {", "+            failNotEquals(message, new Float(expected), new Float(actual));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ba32bd864142ffc43310551ea01452b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void optionallyHandleException(Throwable e, boolean handleException) \t\t\t\t\tthrows Throwable", "signatureAfterChange": "      private void optionallyHandleException(Throwable e, boolean handleException)             throws Throwable", "diff": ["-\tprivate void optionallyHandleException(Throwable e, boolean handleException)", "-\t\t\t\t\tthrows Throwable {", "-\t\tif (handleException)", "-\t\t\thandleException(e);", "-\t\telse", "-\t\t\tthrow e;", "-\t}", "+    private void optionallyHandleException(Throwable e, boolean handleException)", "+            throws Throwable {", "+        if (handleException) {", "+            handleException(e);", "+        } else {", "+            throw e;", "+        }", "+    }"]}]}
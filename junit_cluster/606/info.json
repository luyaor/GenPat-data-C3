{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6795d08323051dbcb10e556828dd4c94", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "479bac6e174e77febc4ea09f49d6adb9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/model/TestClass.java", "commitBeforeChange": "53e85db0bec2e03bf93afc73dced9b4a0b231644", "commitAfterChange": "8bed6c9278517d9fb13f274bc5a6ade358a39745", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic List<TestMethod> getAnnotatedMethods( \t\t\tClass<? extends Annotation> annotationClass)", "signatureAfterChange": "  \tpublic List<FrameworkMethod> getAnnotatedMethods( \t\t\tClass<? extends Annotation> annotationClass)", "diff": ["-\tpublic List<TestMethod> getAnnotatedMethods(", "+\tpublic List<FrameworkMethod> getAnnotatedMethods(", "-\t\tList<TestMethod> results= new ArrayList<TestMethod>();", "+\t\tList<FrameworkMethod> results= new ArrayList<FrameworkMethod>();", "-\t\t\t\tTestMethod testMethod= new TestMethod(eachMethod, this);", "+\t\t\t\tFrameworkMethod testMethod= new FrameworkMethod(eachMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48f6299ffe57ac2fb49025c47d4bef9c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/parameterized/TestWithParameters.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public String toString()", "signatureAfterChange": "      @Override     public String toString()", "diff": ["-        return fTestClass.getName() + \" '\" + fName + \"' with parameters \"", "-                + fParameters;", "+        return testClass.getName() + \" '\" + name + \"' with parameters \"", "+                + parameters;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53efe83380d859fe4db5b0c7d744d608", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "a1813f62876a6c7227ec5c866b621e01cda79664", "commitAfterChange": "97afc5e205e1c6ac0f5a9aefabed92d58d88ab81", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void setRunnerInterceptor(RunnerInterceptor runnerInterceptor)", "signatureAfterChange": " \tpublic void setScheduler(RunnerScheduler scheduler)", "diff": ["-\tpublic void setRunnerInterceptor(RunnerInterceptor runnerInterceptor) {", "-\t\tthis.fRunnerInterceptor = runnerInterceptor;", "+\t */", "+\tpublic void setScheduler(RunnerScheduler scheduler) {", "+\t\tthis.fScheduler = scheduler;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fbb3013b19051d8788e04b4c1abb400", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "a1813f62876a6c7227ec5c866b621e01cda79664", "commitAfterChange": "97afc5e205e1c6ac0f5a9aefabed92d58d88ab81", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void runChildren(final RunNotifier notifier)", "signatureAfterChange": "  \tprivate void runChildren(final RunNotifier notifier)", "diff": ["-\t\t\tfRunnerInterceptor.runChild(new Runnable() {\t\t\t", "+\t\t\tfScheduler.schedule(new Runnable() {\t\t\t", "-\t\tfRunnerInterceptor.finished();", "+\t\tfScheduler.finished();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a5c6755385cfe362dea353edcd773d2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-            fNext.evaluate();", "+            next.evaluate();", "-            for (FrameworkMethod each : fAfters) {", "+            for (FrameworkMethod each : afters) {", "-                    each.invokeExplosively(fTarget);", "+                    each.invokeExplosively(target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a298594d2c5103900d7363e86d0151bd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunBefores.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-        for (FrameworkMethod before : fBefores) {", "-            before.invokeExplosively(fTarget);", "+        for (FrameworkMethod before : befores) {", "+            before.invokeExplosively(target);", "-        fNext.evaluate();", "+        next.evaluate();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a263675adf870d960bdc1c614fd3b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/parameterized/TestWithParameters.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public int hashCode()", "signatureAfterChange": "      @Override     public int hashCode()", "diff": ["-        int result = prime + fName.hashCode();", "-        result = prime * result + fTestClass.hashCode();", "-        return prime * result + fParameters.hashCode();", "+        int result = prime + name.hashCode();", "+        result = prime * result + testClass.hashCode();", "+        return prime * result + parameters.hashCode();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51980b9d3e5b99f06e8a5f2f0a3327a0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f0377b88e078dbb71702e267dc28eb0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected void invokeAndThrow(Object target, Object... params) \t\t\tthrows IllegalAccessException, Throwable", "signatureAfterChange": "  \tprotected void invokeAndThrow(Object target, Object... params) \t\t\tthrows IllegalAccessException, Throwable", "diff": ["+", "-\t\ttry {", "-\t\t\tgetMethod().invoke(target, params);", "-\t\t\tsuccesses++;", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\tthrow e.getTargetException();", "-\t\t}", "+\t\tExplosiveMethod.from(getMethod()).invoke(target, params);", "+\t\tsuccesses++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5aee30e4aebbecff8d4d5d44f844b2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/Roadie.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tvoid runAfters(JavaElement javaElement)", "signatureAfterChange": "  \tvoid runAfters(JavaElement javaElement)", "diff": ["-\t\t\t\tafter.invoke(getTarget());", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\taddFailure(e.getTargetException());", "+\t\t\t\tExplosiveMethod.from(after).invoke(fTarget);", "-\t\t\t\taddFailure(e); // Untested, but seems impossible", "+\t\t\t\taddFailure(e);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2a3f642b86e46a0348efac91a80688e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17283206db142b8b1d2d21780dd0168a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "e727dd6b1cb2caa1699da3b2df7625c9554adc36", "commitAfterChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void fireTestIgnoredReason(final Description description, \t\t\tfinal AssumptionViolatedException e)", "signatureAfterChange": "  \t\t\tprivate String getIgnoredReason(final Description description)", "diff": ["+", "+\t\t\tprivate String getIgnoredReason(final Description description) {", "+\t\t\t\tIgnore annotation= description.getAnnotation(Ignore.class);", "+\t\t\t\tif (annotation == null)", "+\t\t\t\t\treturn null;", "+\t\t\t\treturn annotation.value();", "-\tpublic void fireTestIgnoredReason(final Description description,", "-\t\t\t\teach.testIgnoredReason(description, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f00872426c467f191bc9507fc17ce34", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "95a8c63cb0a7867d58ee4a0777fec65bab39a1ec", "commitAfterChange": "c7895eb8695d79b14ff2f903fbb2fab3e52e4c43", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate static boolean canHaveCategorizedChildren(Description description)", "signatureAfterChange": " \tprivate static boolean canHaveCategorizedChildren(Description description)", "diff": ["+\t// parentage.", "-\t\tRunWith annotation= description.getAnnotation(RunWith.class);", "-\t\tif (annotation == null)", "-\t\t\treturn true;", "-\t\t// TODO: something more general", "-\t\treturn !annotation.value().equals(Parameterized.class);", "+\t\tfor (Description each : description.getChildren())", "+\t\t\tif (each.getTestClass() == null)", "+\t\t\t\treturn false;", "+\t\treturn true;"]}]}
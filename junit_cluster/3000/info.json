{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f29e495eb45deffc81cfe6b90c4f045", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37fa3f9e631dc6e4069956c5facd2351", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "734ab5187c068599352e5fdc7374c1334d484fef", "commitAfterChange": "54917b88aab026dabb4541276ed875117c1e1faa", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprotected List<StatementInterceptor> interceptors(Object test)", "signatureAfterChange": " \tprotected List<MethodRule> rules(Object test)", "diff": ["-\tprotected List<StatementInterceptor> interceptors(Object test) {", "-\t\tList<StatementInterceptor> results= new ArrayList<StatementInterceptor>();", "-\t\tfor (FrameworkField each : interceptorFields()) {", "-\t\t\tresults.add(createInterceptor(test, each));", "-\t\t}", "+\tprotected List<MethodRule> rules(Object test) {", "+\t\tList<MethodRule> results= new ArrayList<MethodRule>();", "+\t\tfor (FrameworkField each : ruleFields())", "+\t\t\tresults.add(createRule(test, each));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3e6eb20c8ac87561330ee394cc9c9c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "8e313a1e58a56694c0441b2fa60974fa8e1bfe31", "commitAfterChange": "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprotected List<StatementInterceptor> interceptors(Object test)", "signatureAfterChange": " \tprotected List<MethodRule> rules(Object test)", "diff": ["-\tprotected List<StatementInterceptor> interceptors(Object test) {", "-\t\tList<StatementInterceptor> results= new ArrayList<StatementInterceptor>();", "-\t\tfor (FrameworkField each : interceptorFields()) {", "-\t\t\tresults.add(createInterceptor(test, each));", "-\t\t}", "+\tprotected List<MethodRule> rules(Object test) {", "+\t\tList<MethodRule> results= new ArrayList<MethodRule>();", "+\t\tfor (FrameworkField each : ruleFields())", "+\t\t\tresults.add(createRule(test, each));"]}]}
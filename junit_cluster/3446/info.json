{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "825e4b7cfa97d82bcaac6b537023aa03", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a09b3ed382c7bb941819dae4f9f82cd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["+\tprotected void invokeTestMethod(Method method, RunNotifier notifier) {", "+\t\tDescription description= methodDescription(method);", "+\t\t\ttest= createTest();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\ttestAborted(notifier, description, e.getCause());", "+\t\t\treturn;\t\t\t", "+\t\t} catch (Exception e) {", "+\t\t\ttestAborted(notifier, description, e);", "+\t\t\treturn;", "-\t", "-\t@Override", "-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\tDescription description= describeChild(method);", "-\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier,", "-\t\t\t\tdescription);", "-\t\tnotifying(method, childBlock(method)).run(eachNotifier);", "+\t\tTestMethod testMethod= wrapMethod(method);", "+\t\tnew MethodRoadie(test, testMethod, notifier, description).run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd2a655f82dc66b78a2de38046006812", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(TestMethod method, RunNotifier notifier)", "diff": ["-\tprotected void invokeTestMethod(Method method, RunNotifier notifier) {", "+\tprotected void invokeTestMethod(TestMethod method, RunNotifier notifier) {", "-\t\t\ttest= createTest();", "-\t\t} catch (InvocationTargetException e) { //TODO looks like this could use ExplosiveMethod", "-\t\t\tnotifier.testAborted(description, e.getCause());", "-\t\t\treturn;\t\t\t", "-\t\t} catch (Exception e) {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "-\t\tJUnit4MethodRunner testMethod= wrapMethod(method);", "-\t\ttestMethod.run(new Roadie(notifier, description, test));", "+\t\trun(new Roadie(notifier, description, test), method);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd2621f03bfd017863469cd8a7a01917", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf57eb4d4b62231780f3ed1147d568c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/assertion/MultipleFailureExceptionTest.java", "commitBeforeChange": "91a7ff28a3879d4a409176e092887924700d08b6", "commitAfterChange": "cb818f191ea2b9fe563aa20c581b16f3f23b7c4c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test(expected = ExpectedException.class)     public void assertEmptyRethrowsSingleThrowable() throws Throwable", "signatureAfterChange": "      public void assertEmptyRethrowsSingleRuntimeException() throws Exception", "diff": ["-    @Test(expected = ExpectedException.class)", "-    public void assertEmptyRethrowsSingleThrowable() throws Throwable {", "-        MultipleFailureException.assertEmpty(", "-                Collections.<Throwable>singletonList(new ExpectedException(\"pesto\")));", "+    public void assertEmptyRethrowsSingleRuntimeException() throws Exception {", "+        Throwable exception= new ExpectedException(\"pesto\");", "+        List<Throwable> errors= Collections.singletonList(exception);", "+        try {", "+            MultipleFailureException.assertEmpty(errors);", "+            fail();", "+        } catch (ExpectedException e) {", "+            assertSame(e, exception);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51aef4a38e2c6c2548de1a9de5c15e7c", "repository": "https://github.com/junit-team/junit.git", "fileName": "org/junit/Assert.java", "commitBeforeChange": "e060609ca85c723422684450b46dade931b0948a", "commitAfterChange": "ee76b28e432a94c33160b3edc7cb60b6394ac0cc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static void assertEquals(String message, Object[] expecteds, Object[] actuals)", "signatureAfterChange": " \tpublic static void assertEquals(String message, Object[] expecteds, Object[] actuals)", "diff": ["-\t\t\t\tassertEquals(header + \"arrays first differed at element \" + i + \";\", expected, actual);", "+\t\t\t\ttry {", "+\t\t\t\t\tassertEquals(message, expected, actual);", "+\t\t\t\t} catch (ArrayComparisonFailure e) {", "+\t\t\t\t\te.addDimension(i);", "+\t\t\t\t\tthrow e;", "+\t\t\t\t}", "-\t\t\t\tassertEquals(header + \"arrays first differed at element [\" + i + \"];\", o1, o2);", "+\t\t\t\ttry {", "+\t\t\t\t\tassertEquals(o1, o2);", "+\t\t\t\t} catch (AssertionError e) {", "+\t\t\t\t\tthrow new ArrayComparisonFailure(header, e, i);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634651054e577bf805cd3616a3429bde", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/WithTimeout.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void run(final FailureListener listener)", "signatureAfterChange": "  \t@Override \tpublic void run() throws Throwable", "diff": ["-\tpublic void run(final FailureListener listener) {", "+\tpublic void run() throws Throwable {", "-\t\t\t\tfNext.run(listener);", "+\t\t\t\t// TODO: (Oct 12, 2007 10:15:08 AM) Use MultipleFailureException", "+\t\t\t\t// TODO: (Oct 12, 2007 10:15:19 AM) Use MultipleFailureException in construction", "+\t\t\t\t// TODO: (Oct 12, 2007 10:15:29 AM) Convert to Statement?", "+", "+", "+", "+\t\t\t\ttry {", "+\t\t\t\t\tfNext.run();", "+\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} catch (Error e) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t// TODO: (Oct 5, 2007 11:27:11 AM) Now what?  Is there a useful thing to do with this?", "+\t\t\t\t}", "-\t\t\tlistener.addFailure(new Exception(String.format(", "-\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout)));", "+\t\t\tthrow new Exception(String.format(", "+\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "-\t\t\tlistener.addFailure(e.getCause());", "-\t\t} catch (InterruptedException e) {", "-\t\t\tlistener.addFailure(e);", "+\t\t\tthrow e.getCause();"]}]}
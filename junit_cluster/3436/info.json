{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94ef0cd1d6357860d16a496cc2ec48ef", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7045b7e49ddbfde9ec74eb9fcf6648d7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f0ef837a40922ac08c608661385abf71732975d3", "commitAfterChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "diff": ["-\t\t", "-\t\t// TODO: (Oct 10, 2007 10:57:17 AM) Still seems messy doing this here", "-\t\tObject test;", "-\t\ttry {", "-\t\t\ttest= new ReflectiveCallable() {", "-\t\t\t\t@Override", "-\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "-\t\t\t\t\treturn createTest();", "-\t\t\t\t}", "-\t\t\t}.run();", "-\t\t} catch (Throwable e) {", "-\t\t\tnotifier.testAborted(description, e);", "-\t\t\treturn;", "-\t\t}", "-\t\t", "-\t\tchain(method, test, roadie).run(roadie);", "+\t\tnotifying(method, chain(method), roadie).run(roadie);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba82ae8421db6c6bc646993f299f5fcb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b", "commitAfterChange": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "diff": ["-\t\tObject test;", "-\t\ttry {", "-\t\t\ttest= new ReflectiveCallable() {", "-\t\t\t\t@Override", "-\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "-\t\t\t\t\treturn createTest();", "-\t\t\t\t}", "-\t\t\t}.run();", "-\t\t} catch (Throwable e) {", "-\t\t\tnotifier.testAborted(description, e);", "-\t\t\treturn;", "-\t\t}", "-\t\tEachTestNotifier roadie= new EachTestNotifier(notifier, description);", "-\t\trun(roadie, method, test);", "+\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier, description);", "+\t\tnotifying(method, chain(method)).run(eachNotifier);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c5aa7f92c563a5007bfc12b52fa7452", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a0b124f10e4cd68d836dfe30a20c40c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "f98130957df08de9cae93169298e04bf84388cae", "commitAfterChange": "43b0fe352d5bced0c341640d0c630d23f2022a7e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected void runTestUnprotected(final Roadie context)", "signatureAfterChange": "  \tvoid assertExceptionExpected(final Roadie context, Throwable e)", "diff": ["-\tprotected void runTestUnprotected(final Roadie context) {", "-\t\ttry {", "-\t\t\tinvoke(context);", "-", "-\t\t\tif (expectsException())", "-\t\t\t\tcontext.addFailure(new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t\t+ getExpectedException().getName()));", "-\t\t} catch (Throwable e) {", "-\t\t\tif (e instanceof AssumptionViolatedException) {", "-\t\t\t\t// do nothing", "-\t\t\t} else if (!expectsException())", "-\t\t\t\tcontext.addFailure(e);", "-\t\t\telse if (isUnexpected(e)) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t+ getExpectedException().getName() + \"> but was<\"", "-\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\tcontext.addFailure(new Exception(message, e));", "-\t\t\t}", "+\tvoid assertExceptionExpected(final Roadie context, Throwable e) {", "+\t\tif (!expectsException())", "+\t\t\tcontext.addFailure(e);", "+\t\telse if (isUnexpected(e)) {", "+\t\t\tString message= \"Unexpected exception, expected<\"", "+\t\t\t\t\t+ getExpectedException().getName() + \"> but was<\"", "+\t\t\t\t\t+ e.getClass().getName() + \">\";", "+\t\t\tcontext.addFailure(new Exception(message, e));", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b791f4990e6675924e2d3e6d2ff935", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void runTestUnprotected(final Roadie context)", "signatureAfterChange": "  \tprotected void runTestUnprotected(final Roadie context)", "diff": ["-\t\t} catch (InvocationTargetException e) {", "-\t\t\tThrowable actual= e.getTargetException();", "-\t\t\tif (actual instanceof AssumptionViolatedException) {", "+\t\t} catch (Throwable e) {", "+\t\t\tif (e instanceof AssumptionViolatedException) {", "-\t\t\t\tcontext.addFailure(actual);", "-\t\t\telse if (isUnexpected(actual)) {", "+\t\t\t\tcontext.addFailure(e);", "+\t\t\telse if (isUnexpected(e)) {", "-\t\t\t\t\t\t+ actual.getClass().getName() + \">\";", "-\t\t\t\tcontext.addFailure(new Exception(message, actual));", "+\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "+\t\t\t\tcontext.addFailure(new Exception(message, e));", "-\t\t} catch (Throwable e) {", "-\t\t\tcontext.addFailure(e);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a23196ccc46c1332c498787719d1a6b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c41c02cc996513bf1c5d3b5c51f3cd9a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/MethodSorterTest.java", "commitBeforeChange": "5ea3196f1cdbc32bc3a91b96bedc1964d3bb76d1", "commitAfterChange": "8ea7e775addfcc44f0bd7145100cca3cb301d8e1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest)", "signatureAfterChange": "      private List<String> getDeclaredMethodNames(Class<?> clazz)", "diff": ["-    private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest) {", "-        // the method under test.", "+    private List<String> getDeclaredMethodNames(Class<?> clazz) {", "-        // obtain just the names instead of the full methods.", "+        // Obtain just the names instead of the full methods.", "-            names.add(m.toString().replace(clazz.getName() + '.', \"\"));", "+            // Filter out synthetic methods from, e.g., coverage tools.", "+        \tif (!m.isSynthetic()) {", "+                names.add(m.toString().replace(clazz.getName() + '.', \"\"));", "+        \t}", "-", "-        // filter to just the methods of interest", "-        names.retainAll(ofInterest);   \t", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e849a1f5cbe5a7940c5c902761ef5fc6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/MethodSorterTest.java", "commitBeforeChange": "63eebcfe396b5302cd49a7dd006eecb9b929721a", "commitAfterChange": "0676ed6363ca9935d082d39f539b263b2c3b42f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest)", "signatureAfterChange": "      private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest)", "diff": ["-    \tList<String> names= getDeclaredMethodNames(clazz);", "+    \t// the method under test.", "+\t\tMethod[] actualMethods = MethodSorter.getDeclaredMethods(clazz);", "+\t\t", "+\t\t// obtain just the names instead of the full methods.", "+\t\tList<String> names = new ArrayList<String>();", "+\t\tfor (Method m : actualMethods) {", "+\t\t\tnames.add(m.toString().replace(clazz.getName() + '.', \"\"));", "+\t\t}", "+\t\t", "+\t\t// filter to just the methods of interest"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd193918bf68e09dcb9d553a78c46286", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5629bd13aa5e02cbc2de39e5c8db1ba6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "74f32863f4ec20f015bd3b1a4300c93a69ce98ba", "commitAfterChange": "196c4ed79cbaca37709643b54913b361b677ae04", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     public Result runMain(JUnitSystem system, String... args)", "diff": ["-    private Result runMain(JUnitSystem system, String... args) {", "+    public Result runMain(JUnitSystem system, String... args) {", "-        List<Failure> missingClasses = new ArrayList<Failure>();", "+        List<Failure> failures = new ArrayList<Failure>();", "+        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-                classes.add(Class.forName(each));", "+                if (each.startsWith(\"--\")) {", "+                    if (each.startsWith(\"--filter\")) {", "+                        String filterSpec = each.substring(each.indexOf('=') + 1);", "+", "+                        Filter filter = filterFactoryFactory.apply(filterSpec);", "+", "+                        addFilter(filter);", "+                    } else {", "+                        system.out().println(\"JUnit knows nothing about the \" + each + \" option\");", "+", "+                        return new Result() {", "+                            @Override", "+                            public boolean wasSuccessful() {", "+                                return false;", "+                            }", "+                        };", "+                    }", "+                } else {", "+                    classes.add(Class.forName(each));", "+                }", "+            } catch (FilterFactory.FilterNotFoundException e) {", "+                system.out().println(\"Could not find filter: \" + e.getMessage());", "+                Description description = Description.createSuiteDescription(each);", "+                Failure failure = new Failure(description, e);", "+                failures.add(failure);", "+            } catch (FilterFactoryFactory.FilterFactoryNotFoundException e) {", "+                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "+                Description description = Description.createSuiteDescription(each);", "+                Failure failure = new Failure(description, e);", "+                failures.add(failure);", "-                missingClasses.add(failure);", "+                failures.add(failure);", "-        for (Failure each : missingClasses) {", "+        for (Failure each : failures) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea96748b8ea942ed7177f4df5bf390a8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "commitAfterChange": "318adee43493447e22bbea89e0f17260e0186a14", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     Result runMain(JUnitSystem system, String... args)", "diff": ["-        List<Class<?>> classes = new ArrayList<Class<?>>();", "-        List<Failure> failures = new ArrayList<Failure>();", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-        for (String each : args) {", "-            try {", "-                if (each.startsWith(\"--\")) {", "-                    if (each.startsWith(\"--filter\")) {", "-                        String filterSpec = each.substring(each.indexOf('=') + 1);", "-                        Filter filter = filterFactoryFactory.createFilterFromFilterSpec(filterSpec);", "+        JUnitCommandLineParser jUnitCommandLineParser = new JUnitCommandLineParser(system);", "+        jUnitCommandLineParser.parseArgs(args);", "-                        addFilter(filter);", "-                    } else {", "-                        system.out().println(\"JUnit knows nothing about the \" + each + \" option\");", "+        filter = filter.intersect(jUnitCommandLineParser.getFilter());", "+        List<Class<?>> classes = jUnitCommandLineParser.getClasses();", "+        List<Failure> failures = jUnitCommandLineParser.getFailures();", "-                        return new Result() {", "-                            @Override", "-                            public boolean wasSuccessful() {", "-                                return false;", "-                            }", "-                        };", "-                    }", "-                } else {", "-                    classes.add(Class.forName(each));", "-                }", "-            } catch (FilterFactory.FilterNotCreatedException e) {", "-                system.out().println(\"Could not find filter: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch (FilterFactoryFactory.FilterFactoryNotFoundException e) {", "-                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch (ClassNotFoundException e) {", "-                system.out().println(\"Could not find class: \" + each);", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            }", "-        }", "+", "+"]}]}
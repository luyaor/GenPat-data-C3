{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5c18cf13d2d2d7c78a2788cd65c7a9d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5abfac26c97a0a135abc697ca2de06", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "950702c6adbbcbbee0ce2061d674bf05e0c997b1", "commitAfterChange": "a5d194fcb57b1b320ae808bc5a8d153f98f18a84", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "          private void findCommonPrefix()", "signatureAfterChange": "          private String sharedPrefix()", "diff": ["-", "-        private void findCommonPrefix() {", "-            prefix = 0;", "+        private String sharedPrefix() {", "-            for (; prefix < end; prefix++) {", "-                if (expected.charAt(prefix) != actual.charAt(prefix)) {", "+            for (int i = 0; i < end; i++) {", "+                if (expected.charAt(i) != actual.charAt(i)) {", "+                    return expected.substring(0, i);", "+                }", "+            }", "+            return expected.substring(0, end);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5e588cee22de6410982d96f1353456", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "95f56b32ef3950e83273335e1ba6c2b6cf1a5540", "commitAfterChange": "674bb8f296b0bc7bbfbd8a1126cff2d98333bbf2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "          private void findCommonPrefix()", "signatureAfterChange": "          private void findCommonPrefix()", "diff": ["-            fPrefix = 0;", "-            int end = Math.min(fExpected.length(), fActual.length());", "-            for (; fPrefix < end; fPrefix++) {", "-                if (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix)) {", "+            prefix = 0;", "+            int end = Math.min(expected.length(), actual.length());", "+            for (; prefix < end; prefix++) {", "+                if (expected.charAt(prefix) != actual.charAt(prefix)) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00274555cd1d383a96200d44b75974fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b79ce0659f167e10b122e572000a5c3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tprivate void validate() throws InitializationError", "signatureAfterChange": "      private void validate() throws InitializationError", "diff": ["-\tprivate void validate() throws InitializationError {", "-\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\tcollectInitializationErrors(errors);", "-\t\tif (!errors.isEmpty())", "-\t\t\tthrow new InitializationError(errors);", "-\t}", "+", "+    private void validate() throws InitializationError {", "+        List<Throwable> errors = new ArrayList<Throwable>();", "+        collectInitializationErrors(errors);", "+        if (!errors.isEmpty()) {", "+            throw new InitializationError(errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a29e9cff3470922213beec09c84b72c5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \t\tprivate Object createTestUsingFieldInjection() throws Exception", "signatureAfterChange": "          private Object createTestUsingFieldInjection() throws Exception", "diff": ["-\t\t", "-\t\tprivate Object createTestUsingFieldInjection() throws Exception {", "-\t\t\tList<FrameworkField> annotatedFieldsByParameter = getAnnotatedFieldsByParameter();", "-\t\t\tif (annotatedFieldsByParameter.size() != fParameters.length)", "-\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @Parameter fields.\"+", "-\t\t\t\t\t\" @Parameter fields counted: \"+annotatedFieldsByParameter.size()+\", available parameters: \"+fParameters.length+\".\");", "-\t\t\tObject testClassInstance = getTestClass().getJavaClass().newInstance();", "-\t\t\tfor (FrameworkField each : annotatedFieldsByParameter) {", "-\t\t\t\tField field = each.getField();", "-\t\t\t\tParameter annotation = field.getAnnotation(Parameter.class);", "-\t\t\t\tint index = annotation.value();", "-\t\t\t\ttry {", "-\t\t\t\t\tfield.set(testClassInstance,  fParameters[index]);", "-\t\t\t\t} catch(IllegalArgumentException iare) {", "-\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+", "-\t\t\t\t\t\" with the value \"+fParameters[index]+", "-\t\t\t\t\t\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+", "-\t\t\t\t\tfield.getType().getSimpleName()+\").\", iare);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn testClassInstance;", "-\t\t}", "+        private Object createTestUsingFieldInjection() throws Exception {", "+            List<FrameworkField> annotatedFieldsByParameter = getAnnotatedFieldsByParameter();", "+            if (annotatedFieldsByParameter.size() != fParameters.length) {", "+                throw new Exception(\"Wrong number of parameters and @Parameter fields.\" +", "+                        \" @Parameter fields counted: \" + annotatedFieldsByParameter.size() + \", available parameters: \" + fParameters.length + \".\");", "+            }", "+            Object testClassInstance = getTestClass().getJavaClass().newInstance();", "+            for (FrameworkField each : annotatedFieldsByParameter) {", "+                Field field = each.getField();", "+                Parameter annotation = field.getAnnotation(Parameter.class);", "+                int index = annotation.value();", "+                try {", "+                    field.set(testClassInstance, fParameters[index]);", "+                } catch (IllegalArgumentException iare) {", "+                    throw new Exception(getTestClass().getName() + \": Trying to set \" + field.getName() +", "+                            \" with the value \" + fParameters[index] +", "+                            \" that is not the right type (\" + fParameters[index].getClass().getSimpleName() + \" instead of \" +", "+                            field.getType().getSimpleName() + \").\", iare);", "+                }", "+            }", "+            return testClassInstance;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e3e20f17b510c74e6e85df89192762", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate long getTimeout(Test annotation)", "signatureAfterChange": "      private long getTimeout(Test annotation)", "diff": ["-\tprivate long getTimeout(Test annotation) {", "-\t\tif (annotation == null)", "-\t\t\treturn 0;", "-\t\treturn annotation.timeout();", "-\t}", "+", "+    private long getTimeout(Test annotation) {", "+        if (annotation == null) {", "+            return 0;", "+        }", "+        return annotation.timeout();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9525363d845d154da9d4f7e855b807", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate FrameworkMethod getParametersMethod() throws Exception", "signatureAfterChange": "      private FrameworkMethod getParametersMethod() throws Exception", "diff": ["-\tprivate FrameworkMethod getParametersMethod() throws Exception {", "-\t\tList<FrameworkMethod> methods= getTestClass().getAnnotatedMethods(", "-\t\t\t\tParameters.class);", "-\t\tfor (FrameworkMethod each : methods) {", "-\t\t\tif (each.isStatic() && each.isPublic())", "-\t\t\t\treturn each;", "-\t\t}", "-\t\tthrow new Exception(\"No public static parameters method on class \"", "-\t\t\t\t+ getTestClass().getName());", "-\t}", "+    private FrameworkMethod getParametersMethod() throws Exception {", "+        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(", "+                Parameters.class);", "+        for (FrameworkMethod each : methods) {", "+            if (each.isStatic() && each.isPublic()) {", "+                return each;", "+            }", "+        }", "+        throw new Exception(\"No public static parameters method on class \"", "+                + getTestClass().getName());", "+    }"]}]}
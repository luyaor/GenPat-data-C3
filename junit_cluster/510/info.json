{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69d96ed2a0730371c4d80e7731c19b30", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e107205a7a3b4314ace8a103ff7754", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "4e2455b1f142bdf8f07383082638718695e51224", "commitAfterChange": "c618504adee4bc91b3bd7e0ff06be6e1fa9d88cc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate Matcher<Throwable> hasMessage(Matcher<String> matcher)", "signatureAfterChange": "  \tprivate Matcher<Throwable> hasMessage(final Matcher<String> matcher)", "diff": ["-\tprivate Matcher<Throwable> hasMessage(Matcher<String> matcher) {", "-\t\treturn new FeatureMatcher<Throwable, String>(matcher,", "-\t\t\t\t\"exception with message\", \"getMessage()\") {", "+\tprivate Matcher<Throwable> hasMessage(final Matcher<String> matcher) {", "+\t\treturn new TypeSafeMatcher<Throwable>() {", "+\t\t\tpublic void describeTo(Description description) {", "+\t\t\t\tdescription.appendText(\"message \");", "+\t\t\t\tdescription.appendDescriptionOf(matcher);", "+\t\t\t}", "+\t\t", "-\t\t\tprotected String featureValueOf(Throwable actual) {", "-\t\t\t\treturn actual.getMessage();", "+\t\t\tpublic boolean matchesSafely(Throwable item) {", "+\t\t\t\treturn matcher.matches(item.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5795d8ba527abb02eb391e74286619ca", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/matchers/Each.java", "commitBeforeChange": "017ce048adbc360fed2e8d7ae55dfbb3dbdc76dc", "commitAfterChange": "4e2455b1f142bdf8f07383082638718695e51224", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static <T> Matcher<Iterable<T>> each(final Matcher<T> individual)", "signatureAfterChange": " \tpublic static <T> Matcher<Iterable<T>> each(final Matcher<T> individual)", "diff": ["-\t\treturn Every.everyItem(individual);", "+\t\tfinal Matcher<Iterable<T>> allItemsAre = not(hasItem(not(individual)));", "+\t\t", "+\t\treturn new BaseMatcher<Iterable<T>>() {", "+\t\t\tpublic boolean matches(Object item) {", "+\t\t\t\treturn allItemsAre.matches(item);", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic void describeTo(Description description) {", "+\t\t\t\tdescription.appendText(\"each \");", "+\t\t\t\tindividual.describeTo(description);", "+\t\t\t}", "+\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3ec48cfb87db59279a836bb48666856", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/results/ResultMatchers.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@SuppressWarnings(\"unchecked\") \tpublic static Matcher<Object> hasSingleFailureContaining(String string)", "signatureAfterChange": " \t \t@SuppressWarnings(\"unchecked\") \tpublic static Matcher<Object> hasSingleFailureContaining(final String string)", "diff": ["-\tpublic static Matcher<Object> hasSingleFailureContaining(String string) {", "-\t\treturn allOf(hasToString(containsString(string)), failureCountIs(1));", "+\tpublic static Matcher<Object> hasSingleFailureContaining(final String string) {", "+\t\treturn new BaseMatcher<Object>() {", "+\t\t\tpublic boolean matches(Object item) {", "+\t\t\t\treturn item.toString().contains(string) && failureCountIs(1).matches(item);", "+\t\t\t}", "+", "+\t\t\tpublic void describeTo(Description description) {", "+\t\t\t\tdescription.appendText(\"has single failure containing \" + string);", "+\t\t\t}", "+\t\t};"]}]}
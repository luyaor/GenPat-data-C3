{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8fc1859ac0576df4dbf7e92249a0ae1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3890234efed5556ee1a99ab2cd6ecd88", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "b8adef37033aa4177453362d24b3f2ecb7031c59", "commitAfterChange": "043e82844ef2c3c0961d98a34771c84f7a950d1a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "signatureAfterChange": "      private ParameterSupplier getSupplierFromAnnotation(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "diff": ["-    public ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)", "+    private ParameterSupplier getSupplierFromAnnotation(ParameterSignature unassigned)", "-        ParametersSuppliedBy annotation = unassigned", "+        ParametersSuppliedBy parameterSupplierAnnotation = unassigned", "-        if (annotation == null) {", "-            return null;", "+        if (parameterSupplierAnnotation != null) {", "+            return parameterSupplierAnnotation.value().newInstance();", "-        return annotation.value().newInstance();", "+        ", "+        FromDataPoints fromDataPointsAnnotation = unassigned.getAnnotation(FromDataPoints.class);", "+        if (fromDataPointsAnnotation != null) {", "+            return new SpecificDataPointsSupplier(fClass);", "+        }", "+        ", "+        return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcceff9d296b10eb4f9a55192d630d46", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "043e82844ef2c3c0961d98a34771c84f7a950d1a", "commitAfterChange": "1963b424c176742b711fb4226ce8f314d431813c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private ParameterSupplier getSupplierFromAnnotation(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "signatureAfterChange": "      private ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)             throws ReflectiveOperationException", "diff": ["-    private ParameterSupplier getSupplierFromAnnotation(ParameterSignature unassigned)", "-            throws InstantiationException, IllegalAccessException {", "-        ParametersSuppliedBy parameterSupplierAnnotation = unassigned", "+    private ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)", "+            throws ReflectiveOperationException {", "+        ParametersSuppliedBy annotation = unassigned", "-        if (parameterSupplierAnnotation != null) {", "-            return parameterSupplierAnnotation.value().newInstance();", "+        if (annotation != null) {", "+            return buildParameterSupplierFromClass(annotation.value());", "+        } else {", "+            return null;", "-        ", "-        FromDataPoints fromDataPointsAnnotation = unassigned.getAnnotation(FromDataPoints.class);", "-        if (fromDataPointsAnnotation != null) {", "-            return new SpecificDataPointsSupplier(fClass);", "+    }", "-        ", "-        return null;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "059c2e0cd51011e62f7002094130bf54", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0903c86b7797075fc29123d7f7210f59", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/MethodSorter.java", "commitBeforeChange": "e0f84b71fcc34ab4fe244340f18753225b74128b", "commitAfterChange": "b40493d53dab022c8a58c80284c01605b71d1d92", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Method[] getDeclaredMethods(Class<?> clazz)", "signatureAfterChange": "     public static Method[] getDeclaredMethods(Class<?> clazz)", "diff": ["+        final List<String> names;", "+        try {", "+            names = methodNamesAndDescriptors(clazz);", "+        } catch (IOException x) {", "+            // TODO report somehow?", "+            return methods;", "+        }", "-                // Alpha sort by name, and secondarily by other differentiating", "-                // information (parameters and return type).", "-                return m1.toString().compareTo(m2.toString());", "+                int i1 = names.indexOf(nameAndDescriptor(m1));", "+                int i2 = names.indexOf(nameAndDescriptor(m2));", "+                return i1 != i2 ? i1 - i2 : m1.toString().compareTo(m2.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a19dbd3a765e04b37245a66d06c13fe", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/textui/TestRunner.java", "commitBeforeChange": "fd347129415e030051b3a9ba06db4819876b6ed3", "commitAfterChange": "432e7e4e96d400e16f6fd64e01d70e6fad90bc8f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected TestResult start(String args[]) throws Exception", "signatureAfterChange": " \tpublic TestResult start(String args[]) throws Exception", "diff": ["-\tprotected TestResult start(String args[]) throws Exception {", "+\tpublic TestResult start(String args[]) throws Exception {", "+\t\tString method= \"\";", "-\t\t", "+", "-\t\t\telse if (args[i].equals(\"-c\")) ", "+\t\t\telse if (args[i].equals(\"-c\"))", "-\t\t\telse if (args[i].equals(\"-v\"))", "-\t\t\t\tSystem.err.println(\"JUnit \"+Version.id()+\" by Kent Beck and Erich Gamma\");", "+\t\t\telse if (args[i].equals(\"-m\")) {", "+\t\t\t\tString arg= args[++i];", "+\t\t\t\tint lastIndex= arg.lastIndexOf('.');", "+\t\t\t\ttestCase= arg.substring(0, lastIndex);", "+\t\t\t\tmethod= arg.substring(lastIndex + 1);", "+\t\t\t} else if (args[i].equals(\"-v\"))", "+\t\t\t\tSystem.err.println(\"JUnit \" + Version.id() + \" by Kent Beck and Erich Gamma\");", "-\t\t", "-\t\tif (testCase.equals(\"\")) ", "+", "+\t\tif (testCase.equals(\"\"))", "+\t\t\tif (method != null) ", "+\t\t\t\treturn runSingleMethod(testCase, method, wait);", "-\t\t}", "-\t\tcatch(Exception e) {", "-\t\t\tthrow new Exception(\"Could not create and run test suite: \"+e);", "+\t\t} catch (Exception e) {", "+\t\t\tthrow new Exception(\"Could not create and run test suite: \" + e);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d95271e170a0582b87e07d8b276378b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46f6a6d82b64583812c532922e622a50", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "9cf5b64d8dbbb064fed3d4ee88eced2b6a7d50fe", "commitAfterChange": "bae4bd80513360c5e884e760447000d9c96ffd72", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "diff": ["-        for (Class<? extends Annotation> annotation : annotationMap.keySet()) {", "-                if (hasValidatorAnnotation(annotation)) {", "-                    for (FrameworkField frameworkField : annotationMap.get(annotation)) {", "-                        AnnotationValidator annotationValidator = getAnnotationValidator(annotation);", "-                        annotationValidator.validateAnnotatedField(frameworkField.getField(), errors);", "-                    }", "-                }", "-        }", "-    }", "+        for (Class<? extends Annotation> annotationType : annotationMap.keySet()) {", "+            ValidateWith validateWithAnnotation = annotationType.getAnnotation(ValidateWith.class);", "+            for (FrameworkField frameworkField : annotationMap.get(annotationType)) {", "+                AnnotationValidator annotationValidator = fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                annotationValidator.validateAnnotatedField(frameworkField.getField(), errors);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84c5c8a21915ff26d3716bc45e7a6d4a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "1963b424c176742b711fb4226ce8f314d431813c", "commitAfterChange": "0030e51f286ed52ad4c2c44857c4a28525c83f93", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private ParameterSupplier getSupplier(ParameterSignature unassigned)             throws ReflectiveOperationException", "signatureAfterChange": "      private ParameterSupplier getSupplier(ParameterSignature unassigned)             throws ReflectiveOperationException", "diff": ["-        ParameterSupplier supplier = getAnnotatedSupplier(unassigned);", "-        if (supplier != null) {", "-            return supplier;", "-        }", "-", "-        return new AllMembersSupplier(fClass);", "-    }", "+        ", "+            return new AllMembersSupplier(fClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917469a27908487692ff5958439d185e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "9cf5b64d8dbbb064fed3d4ee88eced2b6a7d50fe", "commitAfterChange": "bae4bd80513360c5e884e760447000d9c96ffd72", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "diff": ["-            if (hasValidatorAnnotation(annotation.annotationType())) {", "-                AnnotationValidator annotationValidator =", "-                        getAnnotationValidator(annotation.annotationType());", "-                annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass(), errors);", "-            }", "+            Class<? extends Annotation> annotationType = annotation.annotationType();", "+            ValidateWith validateWithAnnotation = annotationType.getAnnotation(ValidateWith.class);", "+            AnnotationValidator annotationValidator =", "+                    fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+            annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass(), errors);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b6f56942c914dd6f1a8e8383050aa1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "9cf5b64d8dbbb064fed3d4ee88eced2b6a7d50fe", "commitAfterChange": "bae4bd80513360c5e884e760447000d9c96ffd72", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "diff": ["-        for (Class<? extends Annotation> annotation : annotationMap.keySet()) {", "-            if (hasValidatorAnnotation(annotation)) {", "-                for (FrameworkMethod frameworkMethod : annotationMap.get(annotation)) {", "-                    AnnotationValidator annotationValidator = getAnnotationValidator(annotation);", "-                    annotationValidator.validateAnnotatedMethod(frameworkMethod.getMethod(), errors);", "-                }", "+        for (Class<? extends Annotation> annotationType : annotationMap.keySet()) {", "+            ValidateWith validateWithAnnotation = annotationType.getAnnotation(ValidateWith.class);", "+            for (FrameworkMethod frameworkMethod : annotationMap.get(annotationType)) {", "+                AnnotationValidator annotationValidator = fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                annotationValidator.validateAnnotatedMethod(frameworkMethod.getMethod(), errors);"]}]}
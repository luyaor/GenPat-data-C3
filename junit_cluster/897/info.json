{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e96099579d74316d7664c2ead0a53ea", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16854ecb028cc394c3936e621d62835d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/model/EachTestNotifier.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tprotected void handleFailure(Throwable targetException)", "signatureAfterChange": "  \tpublic void addFailure(Throwable targetException)", "diff": ["-", "-\t@Override", "-\tprotected void handleFailure(Throwable targetException) {", "+\tpublic void addFailure(Throwable targetException) {", "+\t\tif (targetException instanceof MultipleFailureException) {", "+\t\t\tMultipleFailureException mfe= (MultipleFailureException) targetException;", "+\t\t\tfor (Throwable each : mfe.getFailures()) {", "+\t\t\t\taddFailure(each);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2baa478ba5268b7b44ad09b6764efa0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/TemporaryFolderUsageTest.java", "commitBeforeChange": "6012fa3b4fe4e924311d42e05e216092e425cbf9", "commitAfterChange": "6b822aa3037d731669ace4a4bb6b859bf9986def", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Test(expected = IllegalStateException.class) \tpublic void newFolderWithGivenPathThrowsIllegalStateExceptionIfPathExists() throws IOException", "signatureAfterChange": "  \t@Test \tpublic void newFolderWithGivenPathThrowsIllegalArgumentExceptionIfPathExists() throws IOException", "diff": ["-\t@Test(expected = IllegalStateException.class)", "-\tpublic void newFolderWithGivenPathThrowsIllegalStateExceptionIfPathExists() throws IOException {", "+", "+\t@Test", "+\tpublic void newFolderWithGivenPathThrowsIllegalArgumentExceptionIfPathExists() throws IOException {", "+", "+\t\tthrown.expect(IllegalArgumentException.class);", "+\t\tthrown.expectMessage(\"a folder with the name 'level3' already exists\");"]}]}
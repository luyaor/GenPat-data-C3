{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cd9d78c4720b78cc5d18f1c2b649914", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21b69d9b197c34993f4564ef27b323c3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "2a010a89464d9879a740fc611a004a6c15ae6ed1", "commitAfterChange": "fc2d506725525f81ba61c1cd1bd830d7cf246b36", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String... args)", "signatureAfterChange": "     public static void main(String... args)", "diff": ["-        runMainAndExit(new RealSystem(), args);", "-    }", "+        Result result = new JUnitCore().runMain(new RealSystem(), args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dd85d012da9be31442f6b67354ded4c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "f691c8f29653e75a8bac5e7bec1861e948966978", "commitAfterChange": "65ff7563cc41bc7158d05e69ea0e1ec7bc0f6bd5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Override \tprotected void runChild(Throwable child, RunNotifier notifier)", "signatureAfterChange": "  \t@Override \tprotected void runChild(Throwable child, RunNotifier notifier)", "diff": ["-\t\tnotifier.testAborted(describeChild(child), child);", "+\t\tDescription description= describeChild(child);", "+\t\tnotifier.fireTestStarted(description);", "+\t\tnotifier.fireTestFailure(new Failure(description, child));", "+\t\tnotifier.fireTestFinished(description);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a79108d9e8ddfe2b9711812fcf6a4e1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "bd7bff7c4ca18e1d0eab5260e585d3914e5fa53d", "commitAfterChange": "6acc164b4125da775cccd4035c1b99e9d404bacd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["+\t\tDescription description= methodDescription(method);", "-\t\t\tnotifier.testAborted(methodDescription(method), e.getCause());", "+\t\t\tnotifier.testAborted(description, e.getCause());", "-\t\t\tnotifier.testAborted(methodDescription(method), e);", "+\t\t\tnotifier.testAborted(description, e);", "-\t\tcreateMethodRunner(test, method, notifier).run();", "+\t\tTestMethod testMethod= wrapMethod(method);", "+\t\tnew MethodRoadie(test, testMethod, notifier, description).run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63383caa1642aa1afe40d23e68627562", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b", "commitAfterChange": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass)", "signatureAfterChange": "  \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass)", "diff": ["-\t", "+\t\tArrayList<ParameterSignature> signatures= ParameterSignature.signatures(testMethod);", "+\t\tsignatures.addAll(ParameterSignature.signatures(testClass.getConstructors()[0]));", "-\t\t\t\tParameterSignature.signatures(testMethod), testClass);", "+\t\t\t\tsignatures, testClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6974e83c60ef4ea237974b52a8e69274", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "48af7e797dbefa1fc47e80394c7f74ef87c3c7ab", "commitAfterChange": "85f9d8397bfd96261c3214284672180c522e2d38", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "diff": ["-                invokeValidatorsOnClass(annotation, errors);", "+                AnnotationValidator annotationValidator =", "+                        getAnnotationValidator(annotation.annotationType());", "+                annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass(), errors);", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87717b10d49d8e4dcb729c43d4c26544", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "diff": ["-                list.add(new MethodParameterValue(dataPointMethod));", "+                try {", "+                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), dataPointMethod.invokeExplosively(null)));", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd8538ee578bf8df694d50ad98df357b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dbe8a972fadaed5d2b88f4dfa44328fa323b59a2", "commitAfterChange": "08719e9b61d07c17b6a4f599ecd2cd1a1519120a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected Description describeChild(FrameworkMethod method)", "signatureAfterChange": "      @Override     protected Description describeChild(FrameworkMethod method)", "diff": ["-        return Description.createTestDescription(getTestClass().getJavaClass(),", "-                testName(method), method.getAnnotations());", "+        Description description = fMethodDescriptions.get(method);", "+", "+        if (description == null) {", "+            description = Description.createTestDescription(getTestClass().getJavaClass(),", "+                    testName(method), method.getAnnotations());", "+            fMethodDescriptions.put(method, description);", "+        }", "+", "+        return description;"]}]}
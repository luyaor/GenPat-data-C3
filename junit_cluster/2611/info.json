{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5da8bdeadae35ee695cad2cc73ae17fb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca7ddbf9eed6c829c40afc7e8250a5a", "repository": "https://github.com/junit-team/junit.git", "fileName": "org/junit/internal/requests/FilterRequest.java", "commitBeforeChange": "478f7f9217cf5da219a7ba298e3a87f405378194", "commitAfterChange": "168fe0844e104a224a5899b02dfd3e0fb07a32e3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner getRunner()", "signatureAfterChange": "  \t@Override \tpublic Runner getRunner()", "diff": ["-\t\t\treturn fFilter.apply(fRequest.getRunner());", "+\t\t\tRunner runner= fRequest.getRunner();", "+\t\t\tfFilter.apply(runner);", "+\t\t\treturn runner;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ebd161a736d5402957143b78749705c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "49d62f902ba7dba44b0b2b3b71e45004c667b2d5", "commitAfterChange": "faba199e389e3c977fc5573315790a5cde5f7611", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate Statement withRules(FrameworkMethod method, Object target, \t\t\tStatement statement)", "signatureAfterChange": "  \tprivate Statement withRules(FrameworkMethod method, Object target, \t\t\tStatement statement)", "diff": ["+\t\tList<TestRule> testRules= getTestRules(target);", "-\t\tresult= withMethodRules(method, target, result);", "-\t\tresult= withTestRules(method, target, result);", "+\t\tresult= withMethodRules(method, testRules, target, result);", "+\t\tresult= withTestRules(method, testRules, result);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b0f0685871a04f3e523e3d9945b9d2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "6887479f1b64c5a18f5708ea6905bb59804a9a0f", "commitAfterChange": "b333208ccfbef77c556a270bd4385586523dcafc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "diff": ["-\t\trun(new Roadie(notifier, description, test), method);", "+\t\tEachTestNotifier roadie= new EachTestNotifier(notifier, description);", "+\t\trun(roadie, method, test);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74959d5b674e8bee7f7ec24ffc424898", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic <T extends Annotation> T findDeepAnnotation( \t\t\tClass<T> annotationType)", "signatureAfterChange": "  \tpublic <T extends Annotation> T findDeepAnnotation( \t\t\tClass<T> annotationType)", "diff": ["-\t\treturn findDeepAnnotation(annotations, annotationType, 3);", "+\t\tAnnotation[] annotations2= annotations;", "+\t\treturn findDeepAnnotation(annotations2, annotationType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "770f9b1e76282609018fcf70e274515f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "74f32863f4ec20f015bd3b1a4300c93a69ce98ba", "commitAfterChange": "196c4ed79cbaca37709643b54913b361b677ae04", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public Result run(Computer computer, Class<?>... classes)", "signatureAfterChange": "     public Result run(Computer computer, Class<?>... classes)", "diff": ["-        return run(Request.classes(computer, classes));", "+        final Request request = Request.classes(computer, classes).filterWith(filter);", "+", "+        return run(request);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac2c1fbebc22e8eb66ad5f0848ecc6ac", "repository": "https://github.com/junit-team/junit.git", "fileName": "org/junit/runners/Suite.java", "commitBeforeChange": "e08329cae4a1198e124c7615e92f44a7319a2cb8", "commitAfterChange": "5139a1be36da4ed64a860de82e7d74f2e5405037", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static Class[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "signatureAfterChange": "  \tprivate static Class[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "diff": ["-\t\treturn annotation.value();", "+\t\tClass[] classes= annotation.value();", "+\t\treturn classes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b560c29722f6bfb852fbecfb91b73e7e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/AllTests.java", "commitBeforeChange": "85578d48f6459a05665329faa9b52a861e9142cb", "commitAfterChange": "8d9ac8d65204fe8cd7e1d9146f123a461952bae9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static void main(String[] args) throws CouldNotReadCoreException", "signatureAfterChange": " \tpublic static void main(String[] args) throws CouldNotReadCoreException", "diff": ["-\t\tmax.run(Request.aClass(AllTests.class), core);", "+\t\tRequest request= Request.aClass(AllTests.class);", "+\t\tmax.run(request, core);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c638b51c517f1e27d185a356acde4b9e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \t\t@Override \t\tpublic void run(RunNotifier notifier)", "signatureAfterChange": "  \t\t@Override \t\tpublic void run(RunNotifier notifier)", "diff": ["-\t\t", "+", "-\t\t\trunMethods(notifier);", "+\t\t\tfor (TestMethod method : fTestMethods)", "+\t\t\t\trunChild(method, notifier);"]}]}
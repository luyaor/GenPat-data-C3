{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a320dde19f07a8994f1b907ef946c327", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "335e4311f73d9e5d0abd69c56eaf1e0a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/model/TestMethod.java", "commitBeforeChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "commitAfterChange": "44e7458b19d5cd1900a765a440c96e85b81d25fc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tboolean isUnexpected(Throwable exception)", "signatureAfterChange": "  \tboolean isShadowedBy(List<TestMethod> results)", "diff": ["-", "-\tboolean isUnexpected(Throwable exception) {", "-\t\treturn !getExpectedException().isAssignableFrom(exception.getClass());", "+", "+\tboolean isShadowedBy(List<TestMethod> results) {", "+\t\tfor (TestMethod each : results) {", "+\t\t\tif (isShadowedBy(each))", "+\t\t\t\treturn true;", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f56061da300c0f43f81ec27f33fd3f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "3b8708636ffc1a9fc970b66db73c09095dabc2e2", "commitAfterChange": "6b943e564adcc9a7106e54c24eb5d022bed1462f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private Matcher<Throwable> causeEquals(final Throwable expectedCause)", "signatureAfterChange": "      private Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher)", "diff": ["-    private Matcher<Throwable> causeEquals(final Throwable expectedCause) {", "+    private Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher) {", "-            @Override", "-            public boolean matchesSafely(Throwable item) {", "-                return expectedCause == null ? item.getCause() == null : expectedCause.equals(item.getCause());", "-            }", "-", "-                description.appendText(expectedCause.toString());", "+                description.appendDescriptionOf(causeMatcher);", "+            }", "+", "+            @Override", "+            public boolean matchesSafely(Throwable item) {", "+                return causeMatcher.matches(item.getCause());"]}]}
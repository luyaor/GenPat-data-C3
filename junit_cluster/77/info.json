{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d155f9077c48757d644b5568aedf415b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ce157db0adff95b4cb874a3fbd0aa7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "96fd024b563859eee75b68b071cb736026c47ea1", "commitAfterChange": "b5573b70809bed76a0397bb5bb196b6b2144d3d4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static <T> Runner parallelize(ParentRunner<T> runner)", "signatureAfterChange": "  \tprivate static <T> Runner parallelize(Runner runner)", "diff": ["-\tprivate static <T> Runner parallelize(ParentRunner<T> runner) {", "-\t\trunner.setRunnerInterceptor(new RunnerInterceptor() {", "-\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "+\tprivate static <T> Runner parallelize(Runner runner) {", "+\t\tif (runner instanceof ParentRunner<?>) {", "+\t\t\t((ParentRunner<?>) runner).setRunnerInterceptor(new RunnerInterceptor() {", "+\t\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "-\t\t\tprivate final ExecutorService fService= Executors", "-\t\t\t\t\t.newCachedThreadPool();", "+\t\t\t\tprivate final ExecutorService fService= Executors", "+\t\t\t\t\t\t.newCachedThreadPool();", "-\t\t\tpublic void runChild(final Runnable childStatement) {", "-\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "-\t\t\t\t\tpublic Object call() throws Exception {", "-\t\t\t\t\t\tchildStatement.run();", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t}));", "-\t\t\t}", "+\t\t\t\tpublic void runChild(final Runnable childStatement) {", "+\t\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "+\t\t\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\t\t\tchildStatement.run();", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}));", "+\t\t\t\t}", "-\t\t\tpublic void finished() {", "-\t\t\t\tfor (Future<Object> each : fResults)", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\teach.get();", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\t});", "+\t\t\t\tpublic void finished() {", "+\t\t\t\t\tfor (Future<Object> each : fResults)", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\teach.get();", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d567c0c041b505ce6097018f5a26d5c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "b8640d1e9e642aa6b2f1a2e416fdbbb87f7a4476", "commitAfterChange": "b3ee106f9f95e1f4093adb505e13a163df77f341", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static <T> Runner parallelize(ParentRunner<T> runner)", "signatureAfterChange": "  \tprivate static <T> Runner parallelize(Runner runner)", "diff": ["-\tprivate static <T> Runner parallelize(ParentRunner<T> runner) {", "-\t\trunner.setRunnerInterceptor(new RunnerInterceptor() {", "-\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "+\tprivate static <T> Runner parallelize(Runner runner) {", "+\t\tif (runner instanceof ParentRunner<?>) {", "+\t\t\t((ParentRunner<?>) runner).setRunnerInterceptor(new RunnerInterceptor() {", "+\t\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "-\t\t\tprivate final ExecutorService fService= Executors", "-\t\t\t\t\t.newCachedThreadPool();", "+\t\t\t\tprivate final ExecutorService fService= Executors", "+\t\t\t\t\t\t.newCachedThreadPool();", "-\t\t\tpublic void runChild(final Runnable childStatement) {", "-\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "-\t\t\t\t\tpublic Object call() throws Exception {", "-\t\t\t\t\t\tchildStatement.run();", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t}));", "-\t\t\t}", "+\t\t\t\tpublic void runChild(final Runnable childStatement) {", "+\t\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "+\t\t\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\t\t\tchildStatement.run();", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}));", "+\t\t\t\t}", "-\t\t\tpublic void finished() {", "-\t\t\t\tfor (Future<Object> each : fResults)", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\teach.get();", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\t});", "+\t\t\t\tpublic void finished() {", "+\t\t\t\t\tfor (Future<Object> each : fResults)", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\teach.get();", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "471ed1796a9831cf67ed14650c4a2f3c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81194b137ed32617e37ac00003155fa6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "signatureAfterChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "diff": ["-\t\t\treturn getTestClass().getOnlyConstructor().newInstance(", "-\t\t\t\t\tcomputeParams());", "-\t\t}", "+\t\t\treturn getTestClass().getOnlyConstructor().newInstance(fParameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86993eb9d5e2f6aa69e60500c4886999", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TestWithParameters createTestWithNotNormalizedParameters(             String pattern, int index, Object parametersOrSingleParameter)", "signatureAfterChange": "          private TestWithParameters createTestWithNotNormalizedParameters(                 String pattern, int index, Object parametersOrSingleParameter)", "diff": ["-", "-    private TestWithParameters createTestWithNotNormalizedParameters(", "-            String pattern, int index, Object parametersOrSingleParameter) {", "-        Object[] parameters= (parametersOrSingleParameter instanceof Object[]) ? (Object[]) parametersOrSingleParameter", "-            : new Object[] { parametersOrSingleParameter };", "-        return createTestWithParameters(getTestClass(), pattern, index,", "-                parameters);", "-    }", "+        private TestWithParameters createTestWithNotNormalizedParameters(", "+                String pattern, int index, Object parametersOrSingleParameter) {", "+            Object[] parameters = (parametersOrSingleParameter instanceof Object[]) ? (Object[]) parametersOrSingleParameter", "+                    : new Object[] { parametersOrSingleParameter };", "+            return createTestWithParameters(testClass, pattern, index,", "+                    parameters);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f4445996e64afc68522e1320f63eaa1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47674dda3d60d81769262b8f8d33d56f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "commitAfterChange": "cc8497f28e1d5a46d7940a0b36556154c83d6f7a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public boolean canAcceptArrayType(Class<?> type)", "signatureAfterChange": "      private boolean canAcceptUnboxed(Class<?> candidate)", "diff": ["+", "+    private boolean canAcceptUnboxed(Class<?> candidate) {", "+        Field primitiveClassField = null;", "+        try {", "+            primitiveClassField = candidate.getDeclaredField(\"TYPE\");", "+        } catch (NoSuchFieldException e) {", "+            return false;", "+        }", "+        ", "+        try {", "+            if (Modifier.isStatic(primitiveClassField.getModifiers())) {", "+                Class<?> primitiveClass = (Class<?>) primitiveClassField.get(null);", "+                return type.isAssignableFrom(primitiveClass);", "+            } else {", "+                return false;", "+            }", "+        } catch (Exception e) {", "+            throw new RuntimeException(e);", "+        }", "+    }", "-", "-    public boolean canAcceptArrayType(Class<?> type) {", "-        return type.isArray() && canAcceptType(type.getComponentType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67d5d3bfbe887836b84f3f335a9589bc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "commitAfterChange": "50e3d1bc87b4b16f0617b6212252363f499397ab", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "diff": ["-            addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+            try {", "+                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+            } catch (Throwable t) {", "+                DataPoints annotation = dataPointsMethod.getAnnotation(DataPoints.class);", "+                if (annotation != null) {", "+                    for (Class<? extends Throwable> ignored : annotation.ignoredExceptions()) {", "+                        if (ignored.isAssignableFrom(t.getClass())) {", "+                            return;", "+                        }", "+                    }", "+                }", "+                throw t;", "+            }"]}]}
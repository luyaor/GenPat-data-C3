{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3a35b11a2d83ebe66ceb58676b11ce4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d01ad67f142eb83e048b4d0239ad4f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t \tprivate boolean isErrorSelected()", "signatureAfterChange": " \t\t \tpublic void browseTestClasses()", "diff": ["-\t", "-\tprivate boolean isErrorSelected() {", "-\t\treturn fFailureList.getSelectedIndex() != -1;", "+\t\t", "+\tpublic void browseTestClasses() {", "+\t\tTestCollector collector= createTestCollector();\t\t", "+\t\tTestSelector selector= new TestSelector(fFrame, collector);", "+\t\tif (selector.isEmpty()) {", "+\t\t\tJOptionPane.showMessageDialog(fFrame, \"No Test Cases found.\\nCheck that the configured \\'TestCollector\\' is supported on this platform.\");", "+\t\t\treturn;", "+\t\t}", "+\t\tselector.show();", "+\t\tString className= selector.getSelectedItem();", "+\t\tif (className != null)", "+\t\t\tsetSuite(className);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27e9547c226e7bc9a1209a45303d1237", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "fcf34a36ee94cde6a5d9157a472ca65a465756ac", "commitAfterChange": "01b427b3b89ce04d01f0ddbd746d13a175feec5b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\t\tfor (T each : getChildren())", "+\t\tfor (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "+\t\t\tT each = iter.next();", "-\t\t\t\treturn;", "-\t\tthrow new NoTestsRemainException();", "+\t\t\t\ttry {", "+\t\t\t\t\tfilterChild(each);", "+\t\t\t\t} catch (NoTestsRemainException e) {", "+\t\t\t\t\titer.remove();", "+\t\t\t\t}", "+\t\t\telse", "+\t\t\t\titer.remove();", "+\t\t}", "+\t    if (getFilteredChildren().isEmpty()) {", "+\t        throw new NoTestsRemainException();", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5b4eb8d72be257b99454fa7e5cff0bf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "c618504adee4bc91b3bd7e0ff06be6e1fa9d88cc", "commitAfterChange": "15815f55d2e9ae567ef8fe0a172f498b87a3a880", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic static <T> void assertThat(String reason, T actual, \t\t\tMatcher<T> matcher)", "signatureAfterChange": " \tpublic static <T> void assertThat(String reason, T actual, \t\t\tMatcher<T> matcher)", "diff": ["-\t\tMatcherAssert.assertThat(reason, actual, matcher);", "+\t\tif (!matcher.matches(actual)) {", "+\t\t\tDescription description= new StringDescription();", "+\t\t\tdescription.appendText(reason);", "+\t\t\tdescription.appendText(\"\\nExpected: \");", "+\t\t\tdescription.appendDescriptionOf(matcher);", "+\t\t\tdescription.appendText(\"\\n     got: \");", "+\t\t\tdescription.appendValue(actual);", "+\t\t\tdescription.appendText(\"\\n\");", "+\t\t\tthrow new java.lang.AssertionError(description.toString());", "+\t\t}"]}]}
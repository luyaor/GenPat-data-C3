{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "936be88680440fd4532cbd98f4f602ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129af4f2c2320b481e2887fde8b42efc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t\tpublic int compare(Description o1, Description o2)", "signatureAfterChange": "         public int compare(Description o1, Description o2)", "diff": ["-\tprivate class TestComparator implements Comparator<Description> {", "-\t\tpublic int compare(Description o1, Description o2) {", "-\t\t\t// Always prefer new tests", "-\t\t\tif (isNewTest(o1))", "-\t\t\t\treturn -1;", "-\t\t\tif (isNewTest(o2))", "-\t\t\t\treturn 1;", "-\t\t\t// Then most recently failed first", "-\t\t\tint result= getFailure(o2).compareTo(getFailure(o1));", "-\t\t\treturn result != 0 ? result", "-\t\t\t// Then shorter tests first", "-\t\t\t\t\t: getTestDuration(o1).compareTo(getTestDuration(o2));", "-\t\t}", "+    private class TestComparator implements Comparator<Description> {", "+        public int compare(Description o1, Description o2) {", "+            // Always prefer new tests", "+            if (isNewTest(o1)) {", "+                return -1;", "+            }", "+            if (isNewTest(o2)) {", "+                return 1;", "+            }", "+            // Then most recently failed first", "+            int result = getFailure(o2).compareTo(getFailure(o1));", "+            return result != 0 ? result", "+                    // Then shorter tests first", "+                    : getTestDuration(o1).compareTo(getTestDuration(o2));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53068409c8623dbbdbe71e6263135d92", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/ComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void arrayEquals(String message, Object expecteds, Object actuals) \t\t\tthrows ArrayComparisonFailure", "signatureAfterChange": "     public void arrayEquals(String message, Object expecteds, Object actuals)             throws ArrayComparisonFailure", "diff": ["-\t */", "-\tpublic void arrayEquals(String message, Object expecteds, Object actuals)", "-\t\t\tthrows ArrayComparisonFailure {", "-\t\tif (expecteds == actuals)", "-\t\t\treturn;", "-\t\tString header= message == null ? \"\" : message + \": \";", "+     */", "+    public void arrayEquals(String message, Object expecteds, Object actuals)", "+            throws ArrayComparisonFailure {", "+        if (expecteds == actuals) {", "+            return;", "+        }", "+        String header = message == null ? \"\" : message + \": \";", "-\t\tint expectedsLength= assertArraysAreSameLength(expecteds,", "-\t\t\t\tactuals, header);", "+        int expectedsLength = assertArraysAreSameLength(expecteds,", "+                actuals, header);", "-\t\tfor (int i= 0; i < expectedsLength; i++) {", "-\t\t\tObject expected= Array.get(expecteds, i);", "-\t\t\tObject actual= Array.get(actuals, i);", "+        for (int i = 0; i < expectedsLength; i++) {", "+            Object expected = Array.get(expecteds, i);", "+            Object actual = Array.get(actuals, i);", "-\t\t\tif (isArray(expected) && isArray(actual)) {", "-\t\t\t\ttry {", "-\t\t\t\t\tarrayEquals(message, expected, actual);", "-\t\t\t\t} catch (ArrayComparisonFailure e) {", "-\t\t\t\t\te.addDimension(i);", "-\t\t\t\t\tthrow e;", "-\t\t\t\t}", "-\t\t\t} else", "-\t\t\t\ttry {", "-\t\t\t\t\tassertElementsEqual(expected, actual);", "-\t\t\t\t} catch (AssertionError e) {", "-\t\t\t\t\tthrow new ArrayComparisonFailure(header, e, i);", "-\t\t\t\t}", "-\t\t}", "-\t}", "+            if (isArray(expected) && isArray(actual)) {", "+                try {", "+                    arrayEquals(message, expected, actual);", "+                } catch (ArrayComparisonFailure e) {", "+                    e.addDimension(i);", "+                    throw e;", "+                }", "+            } else {", "+                try {", "+                    assertElementsEqual(expected, actual);", "+                } catch (AssertionError e) {", "+                    throw new ArrayComparisonFailure(header, e, i);", "+                }", "+            }", "+        }", "+    }"]}]}
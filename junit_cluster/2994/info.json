{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed116aca5b229988042a72c331969013", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5b450bd6079fe37feea1c6e3e93bd4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Suite.java", "commitBeforeChange": "db89759c22060a89f6750e2e92ce93072eace561", "commitAfterChange": "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprotected Suite(Class<?> klass, Class<?>[] annotatedClasses) throws InitializationError", "signatureAfterChange": " \t \tprotected Suite(Class<?> klass, Class<?>[] annotatedClasses) throws InitializationError", "diff": ["+\tprotected Suite(Class<?> klass, Class<?>[] annotatedClasses) throws InitializationError {", "+\t\t// we need to add parent be", "+\t\tsuper(klass.getName());", "+\t\t", "+\t\taddParent(klass);", "+\t\tfor (Class<?> each : annotatedClasses) {", "+\t\t\tRunner childRunner= Request.aClass(each).getRunner();", "+\t\t\tif (childRunner != null)", "+\t\t\t\tadd(childRunner);", "+\t\t}", "+\t\tremoveParent(klass);", "+", "+\t\tfTestClass= new TestClass(klass);", "+\t\tMethodValidator methodValidator= new MethodValidator(fTestClass);", "+\t\tmethodValidator.validateStaticMethods();", "+\t\tmethodValidator.assertValid();", "+\t}", "-\tprotected Suite(Class<?> klass, Class<?>[] annotatedClasses) throws InitializationError {", "-\t\tsuper(addParent(klass), Request.classes(klass.getName(), annotatedClasses).getRunner());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4fea9ff208ab5bd36de96484774ecdb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestIntrospector.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic List<Method> getTestMethods( \t\t\tClass<? extends Annotation> annotationClass)", "signatureAfterChange": "  \tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass)", "diff": ["-\tpublic List<Method> getTestMethods(", "-\t\t\tClass<? extends Annotation> annotationClass) {", "-\t\tList<Method> results= new MethodCollector(annotationClass).addMethods(", "-\t\t\t\tfTestClass).getMethods();", "+\tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass) {", "+\t\tList<Method> results= new ArrayList<Method>();", "+\t\tfor (Class<?> eachClass : getSuperClasses(fTestClass)) {", "+\t\t\tMethod[] methods= eachClass.getDeclaredMethods();", "+\t\t\tfor (Method eachMethod : methods) {", "+\t\t\t\tAnnotation annotation= eachMethod.getAnnotation(annotationClass);", "+\t\t\t\tif (annotation != null && ! isShadowed(eachMethod, results)) ", "+\t\t\t\t\tresults.add(eachMethod);", "+\t\t\t}", "+\t\t}"]}]}
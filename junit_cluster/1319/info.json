{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "173f8cf187a5ca07459d060e7f5e9aa4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a16374d3abbf1c48a085dae6d16e0b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxCore.java", "commitBeforeChange": "378e17964a4188bad9b3d966207a2f682072148e", "commitAfterChange": "451ca12156d5704809a1feff78a10a9451cd2023", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate List<Description> findLeaves(Description description)", "signatureAfterChange": "  \tprivate List<Description> findLeaves(Request request)", "diff": ["-", "-\tprivate List<Description> findLeaves(Description description) {", "-\t\tList<Description> results= new ArrayList<Description>();", "-\t\tfindLeaves(description, results);", "-\t\treturn results;", "-\t}", "+", "+\tprivate List<Description> findLeaves(Request request) {", "+\t\tList<Description> results= new ArrayList<Description>();", "+\t\tfindLeaves(request.getRunner().getDescription(), results);", "+\t\treturn results;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "badd9a1a523b9f8199f67d61b5f2234b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactories.java", "commitBeforeChange": "4eecfb1eff9aa5304f6b30874a26734124ac902d", "commitAfterChange": "a75370887a71a09b3e5a12dec252513e80228e6b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r     public static Filter createFilterFromFilterSpec(Description description, String filterSpec)\r             throws FilterFactory.FilterNotCreatedException", "signatureAfterChange": "\r     public static Filter createFilterFromFilterSpec(Request request, String filterSpec)\r             throws FilterFactory.FilterNotCreatedException", "diff": ["-    public static Filter createFilterFromFilterSpec(Description description, String filterSpec)\r", "+    public static Filter createFilterFromFilterSpec(Request request, String filterSpec)\r", "+        Description topLevelDescription = request.getRunner().getDescription();\r", "-        return createFilter(tuple[0], new FilterFactoryParams(tuple[1]));\r", "+        return createFilter(tuple[0], new FilterFactoryParams(topLevelDescription, tuple[1]));\r"]}]}
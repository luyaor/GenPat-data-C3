{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e69d8adeea49ebf7f89f34e72f5d03fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a47a9df87f759ad53f7a01c3ffadbd02", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "6664bd272c43bcdf00f9ef9ce6f2d73af82036b1", "commitAfterChange": "d6c79c0f626afd12506b6a5a672cdec84683c3ca", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Test \tpublic void correctErrorFromMalformedTestSqueeze()", "signatureAfterChange": "  \tprivate Result run(MaxCore reincarnation)", "diff": ["+", "+\tprivate Result run(MaxCore reincarnation) {", "+\t\tJUnitCore core= new JUnitCore();", "+\t\treturn core.run(reincarnation.sortRequest(", "+\t\t\t\tRequest.aClass(TwoUnEqualTests.class)).getRunner());", "-", "-\t@Test", "-\tpublic void correctErrorFromMalformedTestSqueeze() {", "-\t\tRequest request= Request.aClass(MalformedJUnit38TestMethod.class);", "-\t\tassertFalse(request instanceof SortingRequest);", "-\t\tJUnit38ClassRunner runner= (JUnit38ClassRunner) request.getRunner();", "-\t\tjunit.framework.Test test= runner.getTest();", "-\t\tassertThat(test, IsInstanceOf.instanceOf(TestSuite.class));", "-\t\tDescription description= JUnit38ClassRunner.makeDescription(test);", "-\t\tassertThat(description.toString(),", "-\t\t\t\tcontainsString(\"MalformedJUnit38TestMethod\"));", "-\t\t// assertFalse(description.getChildren().isEmpty());", "-\t\t// assertThat(description.getChildren().size(), is(1));", "-\t\t// assertThat(description.getChildren().get(0).toString(),", "-\t\t// containsString(\"MalformedJUnit38TestMethod\"));", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab0c70918d21c9d2c2719d731fccbaf6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "6eb76c8b08c738823546fe5b935b653951fc773e", "commitAfterChange": "474df716f498aa2695c422cceb3e46cad999e972", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Test \tpublic void correctErrorFromMalformedTestSqueeze()", "signatureAfterChange": "  \tprivate Result run(MaxCore reincarnation)", "diff": ["+", "+\tprivate Result run(MaxCore reincarnation) {", "+\t\tJUnitCore core= new JUnitCore();", "+\t\treturn core.run(reincarnation.sortRequest(", "+\t\t\t\tRequest.aClass(TwoUnEqualTests.class)).getRunner());", "-", "-\t@Test", "-\tpublic void correctErrorFromMalformedTestSqueeze() {", "-\t\tRequest request= Request.aClass(MalformedJUnit38TestMethod.class);", "-\t\tassertFalse(request instanceof SortingRequest);", "-\t\tJUnit38ClassRunner runner= (JUnit38ClassRunner) request.getRunner();", "-\t\tjunit.framework.Test test= runner.getTest();", "-\t\tassertThat(test, IsInstanceOf.instanceOf(TestSuite.class));", "-\t\tDescription description= JUnit38ClassRunner.makeDescription(test);", "-\t\tassertThat(description.toString(),", "-\t\t\t\tcontainsString(\"MalformedJUnit38TestMethod\"));", "-\t\t// assertFalse(description.getChildren().isEmpty());", "-\t\t// assertThat(description.getChildren().size(), is(1));", "-\t\t// assertThat(description.getChildren().get(0).toString(),", "-\t\t// containsString(\"MalformedJUnit38TestMethod\"));", "-\t}"]}]}
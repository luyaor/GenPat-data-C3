{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ae4d7d286d94d17176f171e84bc2e10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aaa68a6f493e3ded649a6ca894793bd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "49d62f902ba7dba44b0b2b3b71e45004c667b2d5", "commitAfterChange": "faba199e389e3c977fc5573315790a5cde5f7611", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void validateTestRuleOrMethodRule(FrameworkField field, \t\t\tList<Throwable> errors)", "signatureAfterChange": "  \tprivate void validateTestRuleOrMethodRule(FrameworkMember<?> member, \t\t\tList<Throwable> errors)", "diff": ["-\tprivate void validateTestRuleOrMethodRule(FrameworkField field,", "+\tprivate void validateTestRuleOrMethodRule(FrameworkMember<?> member,", "-\t\tif (!isMethodRule(field) && !isTestRule(field))", "-\t\t\taddError(errors, field, \"must implement MethodRule or TestRule.\");", "+\t\tif (!isMethodRule(member) && !isTestRule(member))", "+\t\t\taddError(errors, member, fMethods ?", "+\t\t\t\t\t\"must return an implementation of MethodRule or TestRule.\" :", "+\t\t\t\t\t\"must implement MethodRule or TestRule.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b01bd753463e2ea72a3286a0a5a154", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "49d62f902ba7dba44b0b2b3b71e45004c667b2d5", "commitAfterChange": "faba199e389e3c977fc5573315790a5cde5f7611", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate RuleFieldValidator(Class<? extends Annotation> annotation, \t\t\tboolean onlyStaticFields)", "signatureAfterChange": "  \tprivate RuleFieldValidator(Class<? extends Annotation> annotation, \t\t\tboolean methods, boolean fOnlyStaticMembers)", "diff": ["-\t\t\tboolean onlyStaticFields) {", "+\t\t\tboolean methods, boolean fOnlyStaticMembers) {", "-\t\tthis.fOnlyStaticFields= onlyStaticFields;", "+\t\tthis.fOnlyStaticMembers= fOnlyStaticMembers;", "+\t\tthis.fMethods= methods;"]}]}
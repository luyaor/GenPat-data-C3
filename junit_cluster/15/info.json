{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62080f2b92368c0c85bccfadbeac8110", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46bb974843cd3fd75168dfa1dac99994", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "79d696c81cb996e6a199b062c0ae1f53408d5ebd", "commitAfterChange": "7ce9e33e556cf1817d94f769e09c9d22b8d2764d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected void invoke(Roadie context) throws IllegalArgumentException, \t\t\tIllegalAccessException, InvocationTargetException", "signatureAfterChange": "  \tprotected void invoke(Roadie context) throws IllegalArgumentException, \t\t\tIllegalAccessException, InvocationTargetException", "diff": ["-\t\tfMethod.invoke(context.getTarget());", "+\t\tinvoke(context.getTarget());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3add11d7583fafd4935dd7fe08f90e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "commitAfterChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      void parseParameters(String[] args)", "signatureAfterChange": "\r \r     void parseParameters(String[] args)", "diff": ["-", "-    void parseParameters(String[] args) {", "-        for (String arg : args) {", "-            try {", "-                classes.add(ClassUtil.getClass(arg));", "-            } catch (ClassNotFoundException e) {", "-                system.out().println(\"Could not find class: \" + arg);", "-                Description description = Description.createSuiteDescription(arg);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            }", "-        }", "-    }", "+\r", "+    void parseParameters(String[] args) {\r", "+        for (String arg : args) {\r", "+            try {\r", "+                classes.add(ClassUtil.getClass(arg));\r", "+            } catch (ClassNotFoundException e) {\r", "+                system.out().println(\"Could not find class: \" + arg);\r", "+                Description description = createSuiteDescription(arg);\r", "+                Failure failure = new Failure(description, e);\r", "+                failures.add(failure);\r", "+            }\r", "+        }\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b83b0d1c64ad987fc625002a56625b2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/runner/DataPointMethodTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Matcher<Iterable<Failure>> empty()", "signatureAfterChange": "  \tprivate Matcher<Iterable<Failure>> empty()", "diff": ["-\t\treturn Each.each(nullValue);", "+\t\treturn each(nullValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbfec1aa7ad5fe43e28d9be41a47af5a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/JUnit38ClassRunnerTest.java", "commitBeforeChange": "c6e3d2cf121ce6e371bafefa59f216054167845b", "commitAfterChange": "90b53f3683af074aa7aa982821219338053b0345", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void getDescriptionWithAnnotation()", "signatureAfterChange": "      @Test     public void getDescriptionWithAnnotation()", "diff": ["-        Assert.assertEquals(2, d.testCount());", "+        assertEquals(2, d.testCount());", "-                assertNull( methodDesc.getAnnotation(MyAnnotation.class));", "+                assertNull(methodDesc.getAnnotation(MyAnnotation.class));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74b84265c4ec90e04f7deb4e523f8662", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cda79b1961fe3bb0f7c97804fb2e16a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68e59d6de3c48be43bfe2d6104fdb6e8280b1232", "commitAfterChange": "334bd9ce923cf0293cbca49be4ae5947abf51897", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        synchronized (fLock) {", "+        synchronized (fChildrenLock) {", "-            try {", "-                for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "-                    T each = iter.next();", "-                    if (shouldRun(filter, each)) {", "-                        try {", "-                            filter.apply(each);", "-                        } catch (NoTestsRemainException e) {", "-                            iter.remove();", "-                        }", "-                    } else {", "+            for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "+                T each = iter.next();", "+                if (shouldRun(filter, each)) {", "+                    try {", "+                        filter.apply(each);", "+                    } catch (NoTestsRemainException e) {", "+                } else {", "+                    iter.remove();", "-            } finally {", "-                fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "-        }", "-", "-        if (getFilteredChildren().isEmpty()) {", "-            throw new NoTestsRemainException();", "+            fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "+            if (fFilteredChildren.isEmpty()) {", "+                throw new NoTestsRemainException();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3c88520df81d58ded4749b496219b2", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/framework/AssertTest.java", "commitBeforeChange": "d3b3a19c78435ef6b0d1c8832bcdb1a8d5ed6a4e", "commitAfterChange": "f41f48d8f0a71620b878617e5fffb4b48c872978", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testAssertPosInfinityNotEquals()", "signatureAfterChange": "  \tpublic void testAssertStringNotEqualsNull()", "diff": ["-", "-\tpublic void testAssertPosInfinityNotEquals() {", "-\t\ttry {", "-\t\t\tassertEquals(Double.POSITIVE_INFINITY, 1.23, 0.0);", "-\t\t} catch (AssertionFailedError e) {", "-\t\t\treturn;", "-\t\t}", "-\t\tfail();", "-\t}", "+\t\t\tfail();", "+\t\t\te.getMessage(); // why no assertion?"]}]}
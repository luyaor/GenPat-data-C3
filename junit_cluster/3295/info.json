{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "854f35af116650c7b6dbb6cc1f243fa3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d154be9a6fc39b6e6c294dad222940", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/experimental/theories/runner/WithDataPointFields.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t\t@Test(expected= NullPointerException.class) \t\tpublic void shouldThrow()", "signatureAfterChange": "  \t\t@Theory \t\tpublic void stringsAreOK(String string)", "diff": ["-\tpublic static class HonorExpectedException {", "-\t\t@Test(expected= NullPointerException.class)", "-\t\tpublic void shouldThrow() {", "-", "-\t\t}", "+", "+\t\t@Theory", "+\t\tpublic void stringsAreOK(String string) {", "+\t\t\tassertTrue(befores == 1);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2a9367df9f28f4f1fcfc56359e35076", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java", "commitBeforeChange": "ff7c54f564eac489de1aef062ff0048c128e1c4f", "commitAfterChange": "b23ffd790b06f561290239ef3b7a5239ba755f10", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \t@Test \tpublic void shouldFailWithHelpfulMessageForNonStaticClassRule() throws Exception", "signatureAfterChange": "  \tprivate void assertClassHasFailureMessage(Class<?> klass, String message)", "diff": ["-\tpublic void shouldFailWithHelpfulMessageForNonStaticClassRule() throws Exception {", "-\t\tJUnitCore junitCore= new JUnitCore();", "-\t\tRequest request= Request.aClass(TestWithNonStaticClassRule.class);", "-\t\tResult result= junitCore.run(request);", "-\t\tassertThat(result.getFailureCount(), is(1));", "-\t\tassertThat(result.getFailures().get(0).getMessage(), is(equalTo(\"The TestRule 'x' is not static.\")));", "+\tprivate void assertClassHasFailureMessage(Class<?> klass, String message) {", "+\t\tJUnitCore junitCore= new JUnitCore();", "+\t\tRequest request= Request.aClass(klass);", "+\t\tResult result= junitCore.run(request);", "+\t\tassertThat(result.getFailureCount(), is(2)); //the second failure is no runnable methods", "+\t\tassertThat(result.getFailures().get(0).getMessage(),", "+\t\t\t\tis(equalTo(message)));"]}]}
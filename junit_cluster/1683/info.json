{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4152a029324fc502a6e822edf8b6599", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "035d24b18b7812fbef55e33ff0a03b3c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkExec(String cmd)", "signatureAfterChange": "          @Override         public void checkExec(String cmd)", "diff": ["-\t\t@Override", "-\t\tpublic void checkExec(String cmd) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkExec(cmd);", "-\t\t}", "+        @Override", "+        public void checkExec(String cmd) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkExec(cmd);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08364dc341b563bd5bb6df552b2d1cec", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tprivate void assertNoDescendantsHaveCategoryAnnotations(Description description) throws InitializationError", "signatureAfterChange": "      private void assertNoDescendantsHaveCategoryAnnotations(Description description) throws InitializationError", "diff": ["-\t", "-\tprivate void assertNoDescendantsHaveCategoryAnnotations(Description description) throws InitializationError {\t\t\t", "-\t\tfor (Description each : description.getChildren()) {", "-\t\t\tif (each.getAnnotation(Category.class) != null)", "-\t\t\t\tthrow new InitializationError(\"Category annotations on Parameterized classes are not supported on individual methods.\");", "-\t\t\tassertNoDescendantsHaveCategoryAnnotations(each);", "-\t\t}", "-\t}", "+", "+    private void assertNoDescendantsHaveCategoryAnnotations(Description description) throws InitializationError {", "+        for (Description each : description.getChildren()) {", "+            if (each.getAnnotation(Category.class) != null) {", "+                throw new InitializationError(\"Category annotations on Parameterized classes are not supported on individual methods.\");", "+            }", "+            assertNoDescendantsHaveCategoryAnnotations(each);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0868595b95e46e03041bfd67cd351d44", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate static boolean equalsRegardingNull(Object expected, Object actual)", "signatureAfterChange": "      private static boolean equalsRegardingNull(Object expected, Object actual)", "diff": ["-\t", "-\tprivate static boolean equalsRegardingNull(Object expected, Object actual) {", "-\t\tif (expected == null)", "-\t\t\treturn actual == null;", "-\t\t", "-\t\treturn isEquals(expected, actual);", "-\t}", "+    private static boolean equalsRegardingNull(Object expected, Object actual) {", "+        if (expected == null) {", "+            return actual == null;", "+        }", "+        return isEquals(expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09341415d6bdcd1792b43470674af5ea", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPermission(Permission perm)", "signatureAfterChange": "          @Override         public void checkPermission(Permission perm)", "diff": ["-\t\t@Override", "-\t\tpublic void checkPermission(Permission perm) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPermission(perm);", "-\t\t}", "+        @Override", "+        public void checkPermission(Permission perm) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPermission(perm);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a26c546e44cfc91452ccffaf899a1a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/TemporaryFolder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic File newFile(String fileName) throws IOException", "signatureAfterChange": "     public File newFile(String fileName) throws IOException", "diff": ["-\t */", "-\tpublic File newFile(String fileName) throws IOException {", "-\t\tFile file= new File(getRoot(), fileName);", "-\t\tif (!file.createNewFile())", "-\t\t\tthrow new IOException(", "-\t\t\t\t\t\"a file with the name \\'\" + fileName + \"\\' already exists in the test folder\");", "-\t\treturn file;", "-\t}", "+     */", "+    public File newFile(String fileName) throws IOException {", "+        File file = new File(getRoot(), fileName);", "+        if (!file.createNewFile()) {", "+            throw new IOException(", "+                    \"a file with the name \\'\" + fileName + \"\\' already exists in the test folder\");", "+        }", "+        return file;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179f5565b0d7985d450cdda5c1320a5c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPackageAccess(String pkg)", "signatureAfterChange": "          @Override         public void checkPackageAccess(String pkg)", "diff": ["-\t\t@Override", "-\t\tpublic void checkPackageAccess(String pkg) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPackageAccess(pkg);", "-\t\t}", "+        @Override", "+        public void checkPackageAccess(String pkg) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPackageAccess(pkg);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1976b3b2054c26b72e2dcfc7cbb69b1c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/TemporaryFolder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic File newFolder(String... folderNames) throws IOException", "signatureAfterChange": "     public File newFolder(String... folderNames) throws IOException", "diff": ["-\t */", "-\tpublic File newFolder(String... folderNames) throws IOException {", "-\t\tFile file= getRoot();", "-\t\tfor (int i = 0; i < folderNames.length; i++) {", "-\t\t\tString folderName = folderNames[i];", "-\t\t\tfile = new File(file, folderName);", "-\t\t\tif (!file.mkdir() && isLastElementInArray(i, folderNames))", "-\t\t\t\tthrow new IOException(", "-\t\t\t\t\t\t\"a folder with the name \\'\" + folderName + \"\\' already exists\");", "-\t\t}", "-\t\treturn file;", "-\t}", "+     */", "+    public File newFolder(String... folderNames) throws IOException {", "+        File file = getRoot();", "+        for (int i = 0; i < folderNames.length; i++) {", "+            String folderName = folderNames[i];", "+            file = new File(file, folderName);", "+            if (!file.mkdir() && isLastElementInArray(i, folderNames)) {", "+                throw new IOException(", "+                        \"a folder with the name \\'\" + folderName + \"\\' already exists\");", "+            }", "+        }", "+        return file;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b67196495faffa4dea34a771e0723c8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tstatic private void failNotSame(String message, Object expected, \t\t\tObject actual)", "signatureAfterChange": "      static private void failNotSame(String message, Object expected,             Object actual)", "diff": ["-\tstatic private void failNotSame(String message, Object expected,", "-\t\t\tObject actual) {", "-\t\tString formatted= \"\";", "-\t\tif (message != null)", "-\t\t\tformatted= message + \" \";", "-\t\tfail(formatted + \"expected same:<\" + expected + \"> was not:<\" + actual", "-\t\t\t\t+ \">\");", "-\t}", "+", "+    static private void failNotSame(String message, Object expected,", "+            Object actual) {", "+        String formatted = \"\";", "+        if (message != null) {", "+            formatted = message + \" \";", "+        }", "+        fail(formatted + \"expected same:<\" + expected + \"> was not:<\" + actual", "+                + \">\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6eb4a459de8579026116bd93480e2b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/manipulation/Filter.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void apply(Object child) throws NoTestsRemainException", "signatureAfterChange": "     public void apply(Object child) throws NoTestsRemainException", "diff": ["-\t */", "-\tpublic void apply(Object child) throws NoTestsRemainException {", "-\t\tif (!(child instanceof Filterable))", "-\t\t\treturn;", "-\t\tFilterable filterable= (Filterable) child;", "-\t\tfilterable.filter(this);", "-\t}", "+     */", "+    public void apply(Object child) throws NoTestsRemainException {", "+        if (!(child instanceof Filterable)) {", "+            return;", "+        }", "+        Filterable filterable = (Filterable) child;", "+        filterable.filter(this);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eef47d39ff8a9c205a62373b5556582", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\tprivate void findCommonSuffix()", "signatureAfterChange": "          private void findCommonSuffix()", "diff": ["-\t\tprivate void findCommonSuffix() {", "-\t\t\tint expectedSuffix= fExpected.length() - 1;", "-\t\t\tint actualSuffix= fActual.length() - 1;", "-\t\t\tfor (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {", "-\t\t\t\tif (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix))", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tfSuffix=  fExpected.length() - expectedSuffix;", "-\t\t}", "+", "+        private void findCommonSuffix() {", "+            int expectedSuffix = fExpected.length() - 1;", "+            int actualSuffix = fActual.length() - 1;", "+            for (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {", "+                if (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix)) {", "+                    break;", "+                }", "+            }", "+            fSuffix = fExpected.length() - expectedSuffix;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2064c7834cbfdb5cba02874512c33a63", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tstatic public void assertEquals(String message, double expected, \t\t\tdouble actual, double delta)", "signatureAfterChange": "     static public void assertEquals(String message, double expected,             double actual, double delta)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, double expected,", "-\t\t\tdouble actual, double delta) {", "-\t\tif (doubleIsDifferent(expected, actual, delta))", "-\t\t\tfailNotEquals(message, new Double(expected), new Double(actual));", "-\t}", "+     */", "+    static public void assertEquals(String message, double expected,", "+            double actual, double delta) {", "+        if (doubleIsDifferent(expected, actual, delta)) {", "+            failNotEquals(message, new Double(expected), new Double(actual));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2178f3788485ba60698a01cf466a2dc0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/extensions/RepeatedTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic RepeatedTest(Test test, int repeat)", "signatureAfterChange": "      public RepeatedTest(Test test, int repeat)", "diff": ["-\tpublic RepeatedTest(Test test, int repeat) {", "-\t\tsuper(test);", "-\t\tif (repeat < 0)", "-\t\t\tthrow new IllegalArgumentException(\"Repetition count must be >= 0\");", "-\t\tfTimesRepeat= repeat;", "-\t}", "+    public RepeatedTest(Test test, int repeat) {", "+        super(test);", "+        if (repeat < 0) {", "+            throw new IllegalArgumentException(\"Repetition count must be >= 0\");", "+        }", "+        fTimesRepeat = repeat;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25a5933289db3c1ce57d38000a0f7b36", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPropertiesAccess()", "signatureAfterChange": "          @Override         public void checkPropertiesAccess()", "diff": ["-\t\t@Override", "-\t\tpublic void checkPropertiesAccess() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPropertiesAccess();", "-\t\t}", "+        @Override", "+        public void checkPropertiesAccess() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPropertiesAccess();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2881681487286e438496999ab394577b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String getName()", "signatureAfterChange": "     public String getName()", "diff": ["-\t */", "-\tpublic String getName() {", "-\t\tif (fClass == null)", "-\t\t\treturn \"null\";", "-\t\treturn fClass.getName();", "-\t}", "+     */", "+    public String getName() {", "+        if (fClass == null) {", "+            return \"null\";", "+        }", "+        return fClass.getName();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b73b1f00f3e1d7d3b23c0412e68786", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic List<Test> asTestList(Description description)", "signatureAfterChange": "      public List<Test> asTestList(Description description)", "diff": ["-\tpublic List<Test> asTestList(Description description) {", "-\t\tif (description.isTest())", "-\t\t\treturn Arrays.asList(asTest(description));", "-\t\telse {", "-\t\t\tList<Test> returnThis = new ArrayList<Test>();", "-\t\t\tfor (Description child : description.getChildren()) {", "-\t\t\t\treturnThis.add(asTest(child));", "-\t\t\t}", "-\t\t\treturn returnThis;", "-\t\t}", "-\t}", "+", "+    public List<Test> asTestList(Description description) {", "+        if (description.isTest()) {", "+            return Arrays.asList(asTest(description));", "+        } else {", "+            List<Test> returnThis = new ArrayList<Test>();", "+            for (Description child : description.getChildren()) {", "+                returnThis.add(asTest(child));", "+            }", "+            return returnThis;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b5745defbe5f5cf710a35719d914fbd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkMulticast(InetAddress maddr, byte ttl)", "signatureAfterChange": "          @Override         public void checkMulticast(InetAddress maddr, byte ttl)", "diff": ["-\t\t@Override", "-\t\tpublic void checkMulticast(InetAddress maddr, byte ttl) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkMulticast(maddr, ttl);", "-\t\t}", "+        @Override", "+        public void checkMulticast(InetAddress maddr, byte ttl) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkMulticast(maddr, ttl);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d68f225be29f7aa1a6b3c177bbf7810", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkAwtEventQueueAccess()", "signatureAfterChange": "          @Override         public void checkAwtEventQueueAccess()", "diff": ["-\t\t@Override", "-\t\tpublic void checkAwtEventQueueAccess() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkAwtEventQueueAccess();", "-\t\t}", "+        @Override", "+        public void checkAwtEventQueueAccess() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkAwtEventQueueAccess();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e89014bc5e3774f61199410f2c70391", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void validateTestRuleOrMethodRule(FrameworkMember<?> member, \t\t\tList<Throwable> errors)", "signatureAfterChange": "      private void validateTestRuleOrMethodRule(FrameworkMember<?> member,             List<Throwable> errors)", "diff": ["-\tprivate void validateTestRuleOrMethodRule(FrameworkMember<?> member,", "-\t\t\tList<Throwable> errors) {", "-\t\tif (!isMethodRule(member) && !isTestRule(member))", "-\t\t\taddError(errors, member, fMethods ?", "-\t\t\t\t\t\"must return an implementation of MethodRule or TestRule.\" :", "-\t\t\t\t\t\"must implement MethodRule or TestRule.\");", "-\t}", "+    private void validateTestRuleOrMethodRule(FrameworkMember<?> member,", "+            List<Throwable> errors) {", "+        if (!isMethodRule(member) && !isTestRule(member)) {", "+            addError(errors, member, fMethods ?", "+                    \"must return an implementation of MethodRule or TestRule.\" :", "+                    \"must implement MethodRule or TestRule.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305d485021816fb4829e22c51058ae5c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkWrite(FileDescriptor fd)", "signatureAfterChange": "          @Override         public void checkWrite(FileDescriptor fd)", "diff": ["-\t\t@Override", "-\t\tpublic void checkWrite(FileDescriptor fd) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkWrite(fd);", "-\t\t}", "+        @Override", "+        public void checkWrite(FileDescriptor fd) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkWrite(fd);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324d70dbd3a261967924b3e702f6c1bf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tif (getTest() instanceof Filterable) {", "-\t\t\tFilterable adapter= (Filterable) getTest();", "-\t\t\tadapter.filter(filter);", "-\t\t} else if (getTest() instanceof TestSuite) {", "-\t\t\tTestSuite suite= (TestSuite) getTest();", "-\t\t\tTestSuite filtered= new TestSuite(suite.getName());", "-\t\t\tint n= suite.testCount();", "-\t\t\tfor (int i= 0; i < n; i++) {", "-\t\t\t\tTest test= suite.testAt(i);", "-\t\t\t\tif (filter.shouldRun(makeDescription(test)))", "-\t\t\t\t\tfiltered.addTest(test);", "-\t\t\t}", "-\t\t\tsetTest(filtered);", "-\t\t}", "-\t}", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        if (getTest() instanceof Filterable) {", "+            Filterable adapter = (Filterable) getTest();", "+            adapter.filter(filter);", "+        } else if (getTest() instanceof TestSuite) {", "+            TestSuite suite = (TestSuite) getTest();", "+            TestSuite filtered = new TestSuite(suite.getName());", "+            int n = suite.testCount();", "+            for (int i = 0; i < n; i++) {", "+                Test test = suite.testAt(i);", "+                if (filter.shouldRun(makeDescription(test))) {", "+                    filtered.addTest(test);", "+                }", "+            }", "+            setTest(filtered);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32c0551244e1521064905d01a3d12db8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t@Deprecated \tprotected void validateInstanceMethods(List<Throwable> errors)", "signatureAfterChange": "     @Deprecated     protected void validateInstanceMethods(List<Throwable> errors)", "diff": ["-\t */", "-\t@Deprecated", "-\tprotected void validateInstanceMethods(List<Throwable> errors) {", "-\t\tvalidatePublicVoidNoArgMethods(After.class, false, errors);", "-\t\tvalidatePublicVoidNoArgMethods(Before.class, false, errors);", "-\t\tvalidateTestMethods(errors);", "+     */", "+    @Deprecated", "+    protected void validateInstanceMethods(List<Throwable> errors) {", "+        validatePublicVoidNoArgMethods(After.class, false, errors);", "+        validatePublicVoidNoArgMethods(Before.class, false, errors);", "+        validateTestMethods(errors);", "-\t\tif (computeTestMethods().size() == 0)", "-\t\t\terrors.add(new Exception(\"No runnable methods\"));", "-\t}", "+        if (computeTestMethods().size() == 0) {", "+            errors.add(new Exception(\"No runnable methods\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3335b66401c255e12aee46cb996ea0ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tstatic public void assertNull(String message, Object object)", "signatureAfterChange": "     static public void assertNull(String message, Object object)", "diff": ["-\t */", "-\tstatic public void assertNull(String message, Object object) {", "-\t\tif (object == null)", "-\t\t\treturn;", "-\t\tfailNotNull(message, object);", "-\t}", "+     */", "+    static public void assertNull(String message, Object object) {", "+        if (object == null) {", "+            return;", "+        }", "+        failNotNull(message, object);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343b5b684f2205ae4341d4f0137f180e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkMemberAccess(Class<?> clazz, int which)", "signatureAfterChange": "          @Override         public void checkMemberAccess(Class<?> clazz, int which)", "diff": ["-\t\t@Override", "-\t\tpublic void checkMemberAccess(Class<?> clazz, int which) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkMemberAccess(clazz, which);", "-\t\t}", "+        @Override", "+        public void checkMemberAccess(Class<?> clazz, int which) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkMemberAccess(clazz, which);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343e143de3be3321e3152fee098c4503", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tstatic public void assertNotSame(String message, Object unexpected, \t\t\tObject actual)", "signatureAfterChange": "     static public void assertNotSame(String message, Object unexpected,             Object actual)", "diff": ["-\t */", "-\tstatic public void assertNotSame(String message, Object unexpected,", "-\t\t\tObject actual) {", "-\t\tif (unexpected == actual)", "-\t\t\tfailSame(message);", "-\t}", "+     */", "+    static public void assertNotSame(String message, Object unexpected,", "+            Object actual) {", "+        if (unexpected == actual) {", "+            failSame(message);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35b1f2e7314c8cd12568c19e7c6a0702", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkSystemClipboardAccess()", "signatureAfterChange": "          @Override         public void checkSystemClipboardAccess()", "diff": ["-\t\t@Override", "-\t\tpublic void checkSystemClipboardAccess() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkSystemClipboardAccess();", "-\t\t}", "+        @Override", "+        public void checkSystemClipboardAccess() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkSystemClipboardAccess();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362af86db452bab8a678c638dab08562", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void validatePublic(FrameworkMember<?> member, List<Throwable> errors)", "signatureAfterChange": "      private void validatePublic(FrameworkMember<?> member, List<Throwable> errors)", "diff": ["-\tprivate void validatePublic(FrameworkMember<?> member, List<Throwable> errors) {", "-\t\tif (!member.isPublic())", "-\t\t\taddError(errors, member, \"must be public.\");", "-\t}", "+    private void validatePublic(FrameworkMember<?> member, List<Throwable> errors) {", "+        if (!member.isPublic()) {", "+            addError(errors, member, \"must be public.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "367423a80808a6573730e19d10ab38d1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/TemporaryFolder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void delete()", "signatureAfterChange": "     public void delete()", "diff": ["-\t */", "-\tpublic void delete() {", "-\t\tif (folder != null)", "-\t\t\trecursiveDelete(folder);", "-\t}", "+     */", "+    public void delete() {", "+        if (folder != null) {", "+            recursiveDelete(folder);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39ffe933ae093a3ebb34e75b23992f87", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MaxHistory forFolder(File file)", "signatureAfterChange": "     public static MaxHistory forFolder(File file)", "diff": ["-\t */", "-\tpublic static MaxHistory forFolder(File file) {", "-\t\tif (file.exists())", "-\t\t\ttry {", "-\t\t\t\treturn readHistory(file);", "-\t\t\t} catch (CouldNotReadCoreException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t\tfile.delete();", "-\t\t\t}", "-\t\treturn new MaxHistory(file);", "-\t}", "+     */", "+    public static MaxHistory forFolder(File file) {", "+        if (file.exists()) {", "+            try {", "+                return readHistory(file);", "+            } catch (CouldNotReadCoreException e) {", "+                e.printStackTrace();", "+                file.delete();", "+            }", "+        }", "+        return new MaxHistory(file);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac93f7105ab37264b9fa20945bbd943", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate boolean isShadowed(Method method, List<Method> results)", "signatureAfterChange": "      private boolean isShadowed(Method method, List<Method> results)", "diff": ["-\t", "-\tprivate boolean isShadowed(Method method, List<Method> results) {", "-\t\tfor (Method each : results) {", "-\t\t\tif (isShadowed(method, each))", "-\t\t\t\treturn true;", "-\t\t}", "-\t\treturn false;", "-\t}", "+    private boolean isShadowed(Method method, List<Method> results) {", "+        for (Method each : results) {", "+            if (isShadowed(method, each)) {", "+                return true;", "+            }", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d881081458a87e1e7e9b7f2531a68f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/extensions/RepeatedTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic void run(TestResult result)", "signatureAfterChange": "      @Override     public void run(TestResult result)", "diff": ["-\t@Override", "-\tpublic void run(TestResult result) {", "-\t\tfor (int i= 0; i < fTimesRepeat; i++) {", "-\t\t\tif (result.shouldStop())", "-\t\t\t\tbreak;", "-\t\t\tsuper.run(result);", "-\t\t}", "-\t}", "+    @Override", "+    public void run(TestResult result) {", "+        for (int i = 0; i < fTimesRepeat; i++) {", "+            if (result.shouldStop()) {", "+                break;", "+            }", "+            super.run(result);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f95e5e1a4682e3d10d22b5e3bae69f9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tObject getGuess(MethodCall call)", "signatureAfterChange": "          Object getGuess(MethodCall call)", "diff": ["-\t\tObject getGuess(MethodCall call) {", "-\t\t\tif (!containsKey(call))", "-\t\t\t\tput(call, generateGuess(call.getReturnType()));", "-\t\t\treturn get(call);", "-\t\t}", "+        Object getGuess(MethodCall call) {", "+            if (!containsKey(call)) {", "+                put(call, generateGuess(call.getReturnType()));", "+            }", "+            return get(call);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ddc806d5c0fa27f9a324b8bdc25022", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/SuiteMethodBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> each) throws Throwable", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> each) throws Throwable", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> each) throws Throwable {", "-\t\tif (hasSuiteMethod(each))", "-\t\t\treturn new SuiteMethod(each);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> each) throws Throwable {", "+        if (hasSuiteMethod(each)) {", "+            return new SuiteMethod(each);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41de7d4fa04075c208874f8d16fecc9c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \t\tprotected void reportParameterizedError(Throwable e, Object... params) \t\t\t\tthrows Throwable", "signatureAfterChange": "          protected void reportParameterizedError(Throwable e, Object... params)                 throws Throwable", "diff": ["-\t\tprotected void reportParameterizedError(Throwable e, Object... params)", "-\t\t\t\tthrows Throwable {", "-\t\t\tif (params.length == 0)", "-\t\t\t\tthrow e;", "-\t\t\tthrow new ParameterizedAssertionError(e, fTestMethod.getName(),", "-\t\t\t\t\tparams);", "-\t\t}", "+        protected void reportParameterizedError(Throwable e, Object... params)", "+                throws Throwable {", "+            if (params.length == 0) {", "+                throw e;", "+            }", "+            throw new ParameterizedAssertionError(e, fTestMethod.getName(),", "+                    params);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4283e2714f8db596eb50d9e17a15c19d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkListen(int port)", "signatureAfterChange": "          @Override         public void checkListen(int port)", "diff": ["-\t\t@Override", "-\t\tpublic void checkListen(int port) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkListen(port);", "-\t\t}", "+        @Override", "+        public void checkListen(int port) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkListen(port);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f96253803d355b00f9a65fcd5974b0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)", "diff": ["-\t */", "-\tpublic void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors) {", "-\t\tvalidatePublicVoid(isStatic, errors);", "-\t\tif (fMethod.getParameterTypes().length != 0)", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \" should have no parameters\"));", "-\t}", "+     */", "+    public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors) {", "+        validatePublicVoid(isStatic, errors);", "+        if (fMethod.getParameterTypes().length != 0) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \" should have no parameters\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "449ba8abf7f9948bdfb67ef197b33940", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tstatic public void assertSame(String message, Object expected, Object actual)", "signatureAfterChange": "     static public void assertSame(String message, Object expected, Object actual)", "diff": ["-\t */", "-\tstatic public void assertSame(String message, Object expected, Object actual) {", "-\t\tif (expected == actual)", "-\t\t\treturn;", "-\t\tfailNotSame(message, expected, actual);", "-\t}", "+     */", "+    static public void assertSame(String message, Object expected, Object actual) {", "+        if (expected == actual) {", "+            return;", "+        }", "+        failNotSame(message, expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ab4c70b5d5a80e6c17c6549ccbc09e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tstatic private void failNotNull(String message, Object actual)", "signatureAfterChange": "      static private void failNotNull(String message, Object actual)", "diff": ["-\tstatic private void failNotNull(String message, Object actual) {", "-\t\tString formatted= \"\";", "-\t\tif (message != null)", "-\t\t\tformatted= message + \" \";", "-\t\tfail(formatted + \"expected null, but was:<\" + actual + \">\");", "-\t}", "+", "+    static private void failNotNull(String message, Object actual) {", "+        String formatted = \"\";", "+        if (message != null) {", "+            formatted = message + \" \";", "+        }", "+        fail(formatted + \"expected null, but was:<\" + actual + \">\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48da0967655117d525ff74ea4cd35207", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tstatic public void assertNotEquals(String message, Object first,  \t\t\tObject second)", "signatureAfterChange": "     static public void assertNotEquals(String message, Object first,             Object second)", "diff": ["-\t */", "-\tstatic public void assertNotEquals(String message, Object first, ", "-\t\t\tObject second) {", "-\t\tif (equalsRegardingNull(first, second))", "-\t\t\tfailEquals(message, first);", "-\t}", "+     */", "+    static public void assertNotEquals(String message, Object first,", "+            Object second) {", "+        if (equalsRegardingNull(first, second)) {", "+            failEquals(message, first);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48f5c0ff8962ca295232276a301c7344", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static String truncate(String s)", "signatureAfterChange": "     public static String truncate(String s)", "diff": ["-\t */", "-\tpublic static String truncate(String s) {", "-\t\tif (fgMaxMessageLength != -1 && s.length() > fgMaxMessageLength)", "-\t\t\ts= s.substring(0, fgMaxMessageLength)+\"...\";", "-\t\treturn s;", "-\t}", "+     */", "+    public static String truncate(String s) {", "+        if (fgMaxMessageLength != -1 && s.length() > fgMaxMessageLength) {", "+            s = s.substring(0, fgMaxMessageLength) + \"...\";", "+        }", "+        return s;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515e37afbeb0b4aaa1a3c891e5177a51", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tstatic public void assertSame(String message, Object expected, Object actual)", "signatureAfterChange": "     static public void assertSame(String message, Object expected, Object actual)", "diff": ["-\t */", "-\tstatic public void assertSame(String message, Object expected, Object actual) {", "-\t\tif (expected == actual)", "-\t\t\treturn;", "-\t\tfailNotSame(message, expected, actual);", "-\t}", "+     */", "+    static public void assertSame(String message, Object expected, Object actual) {", "+        if (expected == actual) {", "+            return;", "+        }", "+        failNotSame(message, expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "537e7ce2214e78aa7ceee87c94f2f592", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tStatementThread thread= evaluateStatement();", "-\t\tif (!thread.fFinished)", "-\t\t\tthrowExceptionForUnfinishedThread(thread);", "-\t}", "+    @Override", "+    public void evaluate() throws Throwable {", "+        StatementThread thread = evaluateStatement();", "+        if (!thread.fFinished) {", "+            throwExceptionForUnfinishedThread(thread);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56bdcdeca3de23d826bd9b2d86cd48b7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tstatic public void assertNotSame(String message, Object expected, Object actual)", "signatureAfterChange": "     static public void assertNotSame(String message, Object expected, Object actual)", "diff": ["-\t */", "-\tstatic public void assertNotSame(String message, Object expected, Object actual) {", "-\t\tif (expected == actual)", "-\t\t\tfailSame(message);", "-\t}", "+     */", "+    static public void assertNotSame(String message, Object expected, Object actual) {", "+        if (expected == actual) {", "+            failSame(message);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e2b5590296b1c66d46801871e407db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tstatic public Test createTest(Class<?> theClass, String name)", "signatureAfterChange": "     static public Test createTest(Class<?> theClass, String name)", "diff": ["-\t */", "-\tstatic public Test createTest(Class<?> theClass, String name) {", "-\t\tConstructor<?> constructor;", "-\t\ttry {", "-\t\t\tconstructor= getTestConstructor(theClass);", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\treturn warning(\"Class \"+theClass.getName()+\" has no public constructor TestCase(String name) or TestCase()\");", "-\t\t}", "-\t\tObject test;", "-\t\ttry {", "-\t\t\tif (constructor.getParameterTypes().length == 0) {", "-\t\t\t\ttest= constructor.newInstance(new Object[0]);", "-\t\t\t\tif (test instanceof TestCase)", "-\t\t\t\t\t((TestCase) test).setName(name);", "-\t\t\t} else {", "-\t\t\t\ttest= constructor.newInstance(new Object[]{name});", "-\t\t\t}", "-\t\t} catch (InstantiationException e) {", "-\t\t\treturn(warning(\"Cannot instantiate test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\treturn(warning(\"Exception in constructor: \"+name+\" (\"+exceptionToString(e.getTargetException())+\")\"));", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\treturn(warning(\"Cannot access test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t}", "-\t\treturn (Test) test;", "-\t}", "+     */", "+    static public Test createTest(Class<?> theClass, String name) {", "+        Constructor<?> constructor;", "+        try {", "+            constructor = getTestConstructor(theClass);", "+        } catch (NoSuchMethodException e) {", "+            return warning(\"Class \" + theClass.getName() + \" has no public constructor TestCase(String name) or TestCase()\");", "+        }", "+        Object test;", "+        try {", "+            if (constructor.getParameterTypes().length == 0) {", "+                test = constructor.newInstance(new Object[0]);", "+                if (test instanceof TestCase) {", "+                    ((TestCase) test).setName(name);", "+                }", "+            } else {", "+                test = constructor.newInstance(new Object[]{name});", "+            }", "+        } catch (InstantiationException e) {", "+            return (warning(\"Cannot instantiate test case: \" + name + \" (\" + exceptionToString(e) + \")\"));", "+        } catch (InvocationTargetException e) {", "+            return (warning(\"Exception in constructor: \" + name + \" (\" + exceptionToString(e.getTargetException()) + \")\"));", "+        } catch (IllegalAccessException e) {", "+            return (warning(\"Cannot access test case: \" + name + \" (\" + exceptionToString(e) + \")\"));", "+        }", "+        return (Test) test;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a81389df311d96fcc0d39d1ecbdedef", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "signatureAfterChange": "      private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError", "diff": ["-\t", "-\tprivate static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {", "-\t\tSuiteClasses annotation= klass.getAnnotation(SuiteClasses.class);", "-\t\tif (annotation == null)", "-\t\t\tthrow new InitializationError(String.format(\"class '%s' must have a SuiteClasses annotation\", klass.getName()));", "-\t\treturn annotation.value();", "-\t}", "+    private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {", "+        SuiteClasses annotation = klass.getAnnotation(SuiteClasses.class);", "+        if (annotation == null) {", "+            throw new InitializationError(String.format(\"class '%s' must have a SuiteClasses annotation\", klass.getName()));", "+        }", "+        return annotation.value();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b7e585feea69c8a8096b2a35be18408", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tstatic public void assertNull(Object object)", "signatureAfterChange": "     static public void assertNull(Object object)", "diff": ["-\t */", "-\tstatic public void assertNull(Object object) {", "-\t\tif (object != null)", "-\t\t\tassertNull(\"Expected: <null> but was: \" + object.toString(), object);", "-\t}", "+     */", "+    static public void assertNull(Object object) {", "+        if (object != null) {", "+            assertNull(\"Expected: <null> but was: \" + object.toString(), object);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d71d9880e9710c2eafb0a80bc004a37", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/IgnoredBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> testClass)", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> testClass)", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) {", "-\t\tif (testClass.getAnnotation(Ignore.class) != null)", "-\t\t\treturn new IgnoredClassRunner(testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) {", "+        if (testClass.getAnnotation(Ignore.class) != null) {", "+            return new IgnoredClassRunner(testClass);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db2aef2cd57e7bfab37653ce15be260", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assume.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static <T> void assumeThat(String message, T actual, Matcher<T> matcher)", "signatureAfterChange": "     public static <T> void assumeThat(String message, T actual, Matcher<T> matcher)", "diff": ["-\t */", "-\tpublic static <T> void assumeThat(String message, T actual, Matcher<T> matcher) {", "-\t\tif (!matcher.matches(actual))", "-\t\t\tthrow new AssumptionViolatedException(message, actual, matcher); ", "-\t}", "+     */", "+    public static <T> void assumeThat(String message, T actual, Matcher<T> matcher) {", "+        if (!matcher.matches(actual)) {", "+            throw new AssumptionViolatedException(message, actual, matcher);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619408b5a4b69ae6747cfd86bb0c1895", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/JUnit3Builder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> testClass) throws Throwable", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> testClass) throws Throwable", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) throws Throwable {", "-\t\tif (isPre4Test(testClass))", "-\t\t\treturn new JUnit38ClassRunner(testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) throws Throwable {", "+        if (isPre4Test(testClass)) {", "+            return new JUnit38ClassRunner(testClass);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64d36d2f58d450f0a87614daa3144b39", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tstatic boolean filterLine(String line)", "signatureAfterChange": "      static boolean filterLine(String line)", "diff": ["-\tstatic boolean filterLine(String line) {", "-\t\tString[] patterns= new String[] {", "-\t\t\t\"junit.framework.TestCase\",", "-\t\t\t\"junit.framework.TestResult\",", "-\t\t\t\"junit.framework.TestSuite\",", "-\t\t\t\"junit.framework.Assert.\", // don't filter AssertionFailure", "-\t\t\t\"junit.swingui.TestRunner\",", "-\t\t\t\"junit.awtui.TestRunner\",", "-\t\t\t\"junit.textui.TestRunner\",", "-\t\t\t\"java.lang.reflect.Method.invoke(\"", "-\t\t};", "-\t\tfor (int i= 0; i < patterns.length; i++) {", "-\t\t\tif (line.indexOf(patterns[i]) > 0)", "-\t\t\t\treturn true;", "-\t\t}", "-\t\treturn false;", "-\t}", "+    static boolean filterLine(String line) {", "+        String[] patterns = new String[]{", "+                \"junit.framework.TestCase\",", "+                \"junit.framework.TestResult\",", "+                \"junit.framework.TestSuite\",", "+                \"junit.framework.Assert.\", // don't filter AssertionFailure", "+                \"junit.swingui.TestRunner\",", "+                \"junit.awtui.TestRunner\",", "+                \"junit.textui.TestRunner\",", "+                \"java.lang.reflect.Method.invoke(\"", "+        };", "+        for (int i = 0; i < patterns.length; i++) {", "+            if (line.indexOf(patterns[i]) > 0) {", "+                return true;", "+            }", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e274543b1da5b0b44302dca95ef4db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   \tpublic static int getPreference(String key, int dflt)", "signatureAfterChange": "      public static int getPreference(String key, int dflt)", "diff": ["- \tpublic static int getPreference(String key, int dflt) {", "- \t\tString value= getPreference(key);", "- \t\tint intValue= dflt;", "- \t\tif (value == null)", "- \t\t\treturn intValue;", "- \t\ttry {", "- \t\t\tintValue= Integer.parseInt(value);", "- \t \t} catch (NumberFormatException ne) {", "- \t\t}", "- \t\treturn intValue;", "- \t}", "+    public static int getPreference(String key, int dflt) {", "+        String value = getPreference(key);", "+        int intValue = dflt;", "+        if (value == null) {", "+            return intValue;", "+        }", "+        try {", "+            intValue = Integer.parseInt(value);", "+        } catch (NumberFormatException ne) {", "+        }", "+        return intValue;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "666bf3c4f78e56d205ad6e85a5478950", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void addSinglePointMethods(ParameterSignature sig, \t\t\t\t\t\t\t\t\t   List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "diff": ["-\tprivate void addSinglePointMethods(ParameterSignature sig,", "-\t\t\t\t\t\t\t\t\t   List<PotentialAssignment> list) {", "-\t\tfor (FrameworkMethod dataPointMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoint.class)) {", "-\t\t\tif (isCorrectlyTyped(sig, dataPointMethod.getType()))", "-\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod));", "-\t\t}", "-\t}", "+    private void addSinglePointMethods(ParameterSignature sig,", "+            List<PotentialAssignment> list) {", "+        for (FrameworkMethod dataPointMethod : fClass", "+                .getAnnotatedMethods(DataPoint.class)) {", "+            if (isCorrectlyTyped(sig, dataPointMethod.getType())) {", "+                list.add(new MethodParameterValue(dataPointMethod));", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66e5da8b06a55719b7c97c863d7a2e1f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid appendMoney(Money aMoney)", "signatureAfterChange": "      void appendMoney(Money aMoney)", "diff": ["-\t}", "-\tvoid appendMoney(Money aMoney) {", "-\t\tif (aMoney.isZero()) return;", "-\t\tIMoney old= findMoney(aMoney.currency());", "-\t\tif (old == null) {", "-\t\t\tfMonies.add(aMoney);", "-\t\t\treturn;", "-\t\t}", "-\t\tfMonies.remove(old);", "-\t\tMoney sum= (Money) old.add(aMoney);", "-\t\tif (sum.isZero()) ", "-\t\t\treturn;", "-\t\tfMonies.add(sum);", "-\t}", "+", "+    void appendMoney(Money aMoney) {", "+        if (aMoney.isZero()) return;", "+        IMoney old = findMoney(aMoney.currency());", "+        if (old == null) {", "+            fMonies.add(aMoney);", "+            return;", "+        }", "+        fMonies.remove(old);", "+        Money sum = (Money) old.add(aMoney);", "+        if (sum.isZero()) {", "+            return;", "+        }", "+        fMonies.add(sum);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67560398e62c4e3671f780db4cf6ae1c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPackageDefinition(String pkg)", "signatureAfterChange": "          @Override         public void checkPackageDefinition(String pkg)", "diff": ["-\t\t@Override", "-\t\tpublic void checkPackageDefinition(String pkg) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPackageDefinition(pkg);", "-\t\t}", "+        @Override", "+        public void checkPackageDefinition(String pkg) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPackageDefinition(pkg);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "677277c891039d0ed4334c0dc3f9a744", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tprivate void findCommonPrefix()", "signatureAfterChange": "          private void findCommonPrefix()", "diff": ["-\t\tprivate void findCommonPrefix() {", "-\t\t\tfPrefix= 0;", "-\t\t\tint end= Math.min(fExpected.length(), fActual.length());", "-\t\t\tfor (; fPrefix < end; fPrefix++) {", "-\t\t\t\tif (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix))", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+", "+        private void findCommonPrefix() {", "+            fPrefix = 0;", "+            int end = Math.min(fExpected.length(), fActual.length());", "+            for (; fPrefix < end; fPrefix++) {", "+                if (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix)) {", "+                    break;", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b21ee2df663b1f1a0f4e2a19be6c26a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkRead(String file, Object context)", "signatureAfterChange": "          @Override         public void checkRead(String file, Object context)", "diff": ["-\t\t@Override", "-\t\tpublic void checkRead(String file, Object context) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkRead(file, context);", "-\t\t}", "+        @Override", "+        public void checkRead(String file, Object context) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkRead(file, context);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b6668679d9b2ddda68194aa19591882", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   \tprivate static void readPreferences()", "signatureAfterChange": "      private static void readPreferences()", "diff": ["- \tprivate static void readPreferences() {", "- \t\tInputStream is= null;", "- \t\ttry {", "- \t\t\tis= new FileInputStream(getPreferencesFile());", "- \t\t\tsetPreferences(new Properties(getPreferences()));", "-\t\t\tgetPreferences().load(is);", "-\t\t} catch (IOException e) {", "-\t\t\ttry {", "-\t\t\t\tif (is != null)", "-\t\t\t\t\tis.close();", "-\t\t\t} catch (IOException e1) {", "-\t\t\t}", "-\t\t}", "- \t}", "+    private static void readPreferences() {", "+        InputStream is = null;", "+        try {", "+            is = new FileInputStream(getPreferencesFile());", "+            setPreferences(new Properties(getPreferences()));", "+            getPreferences().load(is);", "+        } catch (IOException e) {", "+            try {", "+                if (is != null) {", "+                    is.close();", "+                }", "+            } catch (IOException e1) {", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b79ce0659f167e10b122e572000a5c3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tprivate void validate() throws InitializationError", "signatureAfterChange": "      private void validate() throws InitializationError", "diff": ["-\tprivate void validate() throws InitializationError {", "-\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\tcollectInitializationErrors(errors);", "-\t\tif (!errors.isEmpty())", "-\t\t\tthrow new InitializationError(errors);", "-\t}", "+", "+    private void validate() throws InitializationError {", "+        List<Throwable> errors = new ArrayList<Throwable>();", "+        collectInitializationErrors(errors);", "+        if (!errors.isEmpty()) {", "+            throw new InitializationError(errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b97c951b50480eb66e20f86352b3d0e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tstatic private void failSame(String message)", "signatureAfterChange": "      static private void failSame(String message)", "diff": ["-\tstatic private void failSame(String message) {", "-\t\tString formatted= \"\";", "-\t\tif (message != null)", "-\t\t\tformatted= message + \" \";", "-\t\tfail(formatted + \"expected not same\");", "-\t}", "+", "+    static private void failSame(String message) {", "+        String formatted = \"\";", "+        if (message != null) {", "+            formatted = message + \" \";", "+        }", "+        fail(formatted + \"expected not same\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c1c169e54c7877a5c6227cc9fcb801f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void validateInstanceMethods()", "signatureAfterChange": "      public void validateInstanceMethods()", "diff": ["-\tpublic void validateInstanceMethods() {", "-\t\tvalidateTestMethods(After.class, false);", "-\t\tvalidateTestMethods(Before.class, false);", "-\t\tvalidateTestMethods(Test.class, false);", "-\t\t", "-\t\tList<Method> methods= fTestClass.getAnnotatedMethods(Test.class);", "-\t\tif (methods.size() == 0)", "-\t\t\tfErrors.add(new Exception(\"No runnable methods\"));", "-\t}", "+    public void validateInstanceMethods() {", "+        validateTestMethods(After.class, false);", "+        validateTestMethods(Before.class, false);", "+        validateTestMethods(Test.class, false);", "+        List<Method> methods = fTestClass.getAnnotatedMethods(Test.class);", "+        if (methods.size() == 0) {", "+            fErrors.add(new Exception(\"No runnable methods\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6bb3b47a6bea656799dc981be14a31", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedMethodValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "      public <T> List<T> getAnnotatedMethodValues(Object test,             Class<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["-\tpublic <T> List<T> getAnnotatedMethodValues(Object test,", "-\t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass) {", "-\t\tList<T> results= new ArrayList<T>();", "-\t\tfor (FrameworkMethod each : getAnnotatedMethods(annotationClass)) {", "-\t\t\ttry {", "-\t\t\t\tObject fieldValue= each.invokeExplosively(test, new Object[]{});", "-\t\t\t\tif (valueClass.isInstance(fieldValue))", "-\t\t\t\t\tresults.add(valueClass.cast(fieldValue));", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"Exception in \" + each.getName(), e);", "-\t\t\t}", "-\t\t}", "-\t\treturn results;", "-\t}", "+    public <T> List<T> getAnnotatedMethodValues(Object test,", "+            Class<? extends Annotation> annotationClass, Class<T> valueClass) {", "+        List<T> results = new ArrayList<T>();", "+        for (FrameworkMethod each : getAnnotatedMethods(annotationClass)) {", "+            try {", "+                Object fieldValue = each.invokeExplosively(test, new Object[]{});", "+                if (valueClass.isInstance(fieldValue)) {", "+                    results.add(valueClass.cast(fieldValue));", "+                }", "+            } catch (Throwable e) {", "+                throw new RuntimeException(", "+                        \"Exception in \" + each.getName(), e);", "+            }", "+        }", "+        return results;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70bf94d6ed8bc51b2f3ec53b99ef1a35", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkAccess(Thread t)", "signatureAfterChange": "          @Override         public void checkAccess(Thread t)", "diff": ["-\t\t@Override", "-\t\tpublic void checkAccess(Thread t) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkAccess(t);", "-\t\t}", "+        @Override", "+        public void checkAccess(Thread t) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkAccess(t);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745f381f12ef3d186df039fd5f09790f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkConnect(String host, int port, Object context)", "signatureAfterChange": "          @Override         public void checkConnect(String host, int port, Object context)", "diff": ["-\t\t@Override", "-\t\tpublic void checkConnect(String host, int port, Object context) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkConnect(host, port, context);", "-\t\t}", "+        @Override", "+        public void checkConnect(String host, int port, Object context) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkConnect(host, port, context);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79af8223a0fcc33600a13ffe328f02b3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/MethodCall.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate String argListString()", "signatureAfterChange": "      private String argListString()", "diff": ["-\tprivate String argListString() {", "-\t\tif (args == null)", "-\t\t\treturn null;", "-\t\treturn argList().toString().substring(1, argList().toString().length() - 1);", "-\t}", "+    private String argListString() {", "+        if (args == null) {", "+            return null;", "+        }", "+        return argList().toString().substring(1, argList().toString().length() - 1);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c92f2bd8433c87b516bb704d1e5aeab", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/Money.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t@Override \tpublic int hashCode()", "signatureAfterChange": "      @Override     public int hashCode()", "diff": ["-\t}", "-\t@Override", "-\tpublic int hashCode() {", "-\t\tif (fAmount == 0)", "-\t\t\treturn 0;", "-\t\treturn fCurrency.hashCode()+fAmount;", "-\t}", "+", "+    @Override", "+    public int hashCode() {", "+        if (fAmount == 0) {", "+            return 0;", "+        }", "+        return fCurrency.hashCode() + fAmount;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d1a4a87aee032686a84697c63a5965b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkLink(String lib)", "signatureAfterChange": "          @Override         public void checkLink(String lib)", "diff": ["-\t\t@Override", "-\t\tpublic void checkLink(String lib) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkLink(lib);", "-\t\t}", "+        @Override", "+        public void checkLink(String lib) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkLink(lib);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82ce478d11179445862e952a50c905f0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t\tGuessMap replaceGuess(Object oldValue, Object newValue)", "signatureAfterChange": "          GuessMap replaceGuess(Object oldValue, Object newValue)", "diff": ["-\t\tGuessMap replaceGuess(Object oldValue, Object newValue) {", "-\t\t\tGuessMap newGuesses= new GuessMap(this);", "-\t\t\tfor (Entry<MethodCall, Object> entry : newGuesses.entrySet()) {", "-\t\t\t\tif (entry.getValue().equals(oldValue))", "-\t\t\t\t\tentry.setValue(newValue);", "-\t\t\t}", "-\t\t\treturn newGuesses;", "-\t\t}", "+        GuessMap replaceGuess(Object oldValue, Object newValue) {", "+            GuessMap newGuesses = new GuessMap(this);", "+            for (Entry<MethodCall, Object> entry : newGuesses.entrySet()) {", "+                if (entry.getValue().equals(oldValue)) {", "+                    entry.setValue(newValue);", "+                }", "+            }", "+            return newGuesses;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835ff7d5df9e5488cb45136f8388ff13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/Money.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic IMoney addMoney(Money m)", "signatureAfterChange": "      public IMoney addMoney(Money m)", "diff": ["-\t}", "-\tpublic IMoney addMoney(Money m) {", "-\t\tif (m.currency().equals(currency()) )", "-\t\t\treturn new Money(amount()+m.amount(), currency());", "-\t\treturn MoneyBag.create(this, m);", "-\t}", "+", "+    public IMoney addMoney(Money m) {", "+        if (m.currency().equals(currency())) {", "+            return new Money(amount() + m.amount(), currency());", "+        }", "+        return MoneyBag.create(this, m);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847674484d8d2cb3aaa1db65bf0cb839", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "      public ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "diff": ["-\tpublic ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)", "-\t\t\tthrows InstantiationException, IllegalAccessException {", "-\t\tParametersSuppliedBy annotation= unassigned", "-\t\t\t\t.findDeepAnnotation(ParametersSuppliedBy.class);", "-\t\tif (annotation == null)", "-\t\t\treturn null;", "-\t\treturn annotation.value().newInstance();", "-\t}", "+    public ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned)", "+            throws InstantiationException, IllegalAccessException {", "+        ParametersSuppliedBy annotation = unassigned", "+                .findDeepAnnotation(ParametersSuppliedBy.class);", "+        if (annotation == null) {", "+            return null;", "+        }", "+        return annotation.value().newInstance();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e28674ed37147ff7a5f8032010f476", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/ArrayComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic String getMessage()", "signatureAfterChange": "      @Override     public String getMessage()", "diff": ["-\t@Override", "-\tpublic String getMessage() {", "-\t\tStringBuilder builder= new StringBuilder();", "-\t\tif (fMessage != null)", "-\t\t\tbuilder.append(fMessage);", "-\t\tbuilder.append(\"arrays first differed at element \");", "-\t\tfor (int each : fIndices) {", "-\t\t\tbuilder.append(\"[\");", "-\t\t\tbuilder.append(each);", "-\t\t\tbuilder.append(\"]\");", "-\t\t}", "-\t\tbuilder.append(\"; \");", "-\t\tbuilder.append(fCause.getMessage());", "-\t\treturn builder.toString();", "-\t}", "+", "+    @Override", "+    public String getMessage() {", "+        StringBuilder builder = new StringBuilder();", "+        if (fMessage != null) {", "+            builder.append(fMessage);", "+        }", "+        builder.append(\"arrays first differed at element \");", "+        for (int each : fIndices) {", "+            builder.append(\"[\");", "+            builder.append(each);", "+            builder.append(\"]\");", "+        }", "+        builder.append(\"; \");", "+        builder.append(fCause.getMessage());", "+        return builder.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85648bc4694c3531196f824f9d960b24", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPermission(Permission perm, Object context)", "signatureAfterChange": "          @Override         public void checkPermission(Permission perm, Object context)", "diff": ["-\t\t@Override", "-\t\tpublic void checkPermission(Permission perm, Object context) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPermission(perm, context);", "-\t\t}", "+        @Override", "+        public void checkPermission(Permission perm, Object context) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPermission(perm, context);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863af040b00a70b34621d7c5cf580903", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void run(TestResult result)", "signatureAfterChange": "     public void run(TestResult result)", "diff": ["-\t */", "-\tpublic void run(TestResult result) {", "-\t\tfor (Test each : fTests) {", "-\t  \t\tif (result.shouldStop() )", "-\t  \t\t\tbreak;", "-\t\t\trunTest(each, result);", "-\t\t}", "-\t}", "+     */", "+    public void run(TestResult result) {", "+        for (Test each : fTests) {", "+            if (result.shouldStop()) {", "+                break;", "+            }", "+            runTest(each, result);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b838ce5ff3aa978dbfa6016fda89084", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void assertValid() throws InitializationError", "signatureAfterChange": "      public void assertValid() throws InitializationError", "diff": ["-\t", "-\tpublic void assertValid() throws InitializationError {", "-\t\tif (!fErrors.isEmpty())", "-\t\t\tthrow new InitializationError(fErrors);", "-\t}", "+", "+    public void assertValid() throws InitializationError {", "+        if (!fErrors.isEmpty()) {", "+            throw new InitializationError(fErrors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c008b15ed1c68e09da349cddac4da75", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkDelete(String file)", "signatureAfterChange": "          @Override         public void checkDelete(String file)", "diff": ["-\t\t@Override", "-\t\tpublic void checkDelete(String file) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkDelete(file);", "-\t\t}", "+        @Override", "+        public void checkDelete(String file) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkDelete(file);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7f1c3126e8e75fe5a616a1252fb54d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "signatureAfterChange": "          @Override         public void evaluate() throws Throwable", "diff": ["-\t\t@Override", "-\t\tpublic void evaluate() throws Throwable {", "-\t\t\ttry {", "-\t\t\t\tfNext.evaluate();", "-\t\t\t\tif (fMatcherBuilder.expectsThrowable())", "-\t\t\t\t\tfailDueToMissingException();", "-\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\toptionallyHandleException(e, handleAssumptionViolatedExceptions);", "-\t\t\t} catch (AssertionError e) {", "-\t\t\t\toptionallyHandleException(e, handleAssertionErrors);", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\thandleException(e);", "-\t\t\t}", "-\t\t}", "+        @Override", "+        public void evaluate() throws Throwable {", "+            try {", "+                fNext.evaluate();", "+                if (fMatcherBuilder.expectsThrowable()) {", "+                    failDueToMissingException();", "+                }", "+            } catch (AssumptionViolatedException e) {", "+                optionallyHandleException(e, handleAssumptionViolatedExceptions);", "+            } catch (AssertionError e) {", "+                optionallyHandleException(e, handleAssertionErrors);", "+            } catch (Throwable e) {", "+                handleException(e);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f2574f1a0ce07784a543ebacfb38ac7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tstatic public void assertTrue(String message, boolean condition)", "signatureAfterChange": "     static public void assertTrue(String message, boolean condition)", "diff": ["-\t */", "-\tstatic public void assertTrue(String message, boolean condition) {", "-\t\tif (!condition)", "-\t\t\tfail(message);", "-\t}", "+     */", "+    static public void assertTrue(String message, boolean condition) {", "+        if (!condition) {", "+            fail(message);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92dfcd3bcae07760afa0e2b122073147", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPrintJobAccess()", "signatureAfterChange": "          @Override         public void checkPrintJobAccess()", "diff": ["-\t\t@Override", "-\t\tpublic void checkPrintJobAccess() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPrintJobAccess();", "-\t\t}", "+        @Override", "+        public void checkPrintJobAccess() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPrintJobAccess();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93ec6b6779ab1f1f31abb071a6a35a90", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkAccess(ThreadGroup g)", "signatureAfterChange": "          @Override         public void checkAccess(ThreadGroup g)", "diff": ["-\t\t@Override", "-\t\tpublic void checkAccess(ThreadGroup g) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkAccess(g);", "-\t\t}", "+        @Override", "+        public void checkAccess(ThreadGroup g) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkAccess(g);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9434072567d192c4310c6e74576beb93", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void fireTestStarted(final Description description) throws StoppedByUserException", "signatureAfterChange": "     public void fireTestStarted(final Description description) throws StoppedByUserException", "diff": ["-\t */", "-\tpublic void fireTestStarted(final Description description) throws StoppedByUserException {", "-\t\tif (fPleaseStop)", "-\t\t\tthrow new StoppedByUserException();", "-\t\tnew SafeNotifier() {", "-\t\t\t@Override", "-\t\t\tprotected void notifyListener(RunListener each) throws Exception {", "-\t\t\t\teach.testStarted(description);", "-\t\t\t};", "-\t\t}.run();", "-\t}", "+     */", "+    public void fireTestStarted(final Description description) throws StoppedByUserException {", "+        if (fPleaseStop) {", "+            throw new StoppedByUserException();", "+        }", "+        new SafeNotifier() {", "+            @Override", "+            protected void notifyListener(RunListener each) throws Exception {", "+                each.testStarted(description);", "+            }", "+", "+            ;", "+        }.run();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9895170c507fcd7559ad138137112d81", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkSetFactory()", "signatureAfterChange": "          @Override         public void checkSetFactory()", "diff": ["-\t\t@Override", "-\t\tpublic void checkSetFactory() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkSetFactory();", "-\t\t}", "+        @Override", "+        public void checkSetFactory() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkSetFactory();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5aab3eef3d84cd753a9c411605fdb5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Object[] getActualValues(int start, int stop, boolean nullsOk) \t\t\tthrows CouldNotGenerateValueException", "signatureAfterChange": "      public Object[] getActualValues(int start, int stop, boolean nullsOk)             throws CouldNotGenerateValueException", "diff": ["-\tpublic Object[] getActualValues(int start, int stop, boolean nullsOk)", "-\t\t\tthrows CouldNotGenerateValueException {", "-\t\tObject[] values= new Object[stop - start];", "-\t\tfor (int i= start; i < stop; i++) {", "-\t\t\tObject value= fAssigned.get(i).getValue();", "-\t\t\tif (value == null && !nullsOk)", "-\t\t\t\tthrow new CouldNotGenerateValueException();", "-\t\t\tvalues[i - start]= value;", "-\t\t}", "-\t\treturn values;", "-\t}", "+    public Object[] getActualValues(int start, int stop, boolean nullsOk)", "+            throws CouldNotGenerateValueException {", "+        Object[] values = new Object[stop - start];", "+        for (int i = start; i < stop; i++) {", "+            Object value = fAssigned.get(i).getValue();", "+            if (value == null && !nullsOk) {", "+                throw new CouldNotGenerateValueException();", "+            }", "+            values[i - start] = value;", "+        }", "+        return values;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0dd62eeda90fab2b5c1e53f5aab54a2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic Request sortRequest(Request request)", "signatureAfterChange": "     public Request sortRequest(Request request)", "diff": ["-\t */", "-\tpublic Request sortRequest(Request request) {", "-\t\tif (request instanceof SortingRequest) // We'll pay big karma points for this", "-\t\t\treturn request;", "-\t\tList<Description> leaves= findLeaves(request);", "-\t\tCollections.sort(leaves, fHistory.testComparator());", "-\t\treturn constructLeafRequest(leaves);", "-\t}", "+     */", "+    public Request sortRequest(Request request) {", "+        if (request instanceof SortingRequest) {", "+            // We'll pay big karma points for this", "+            return request;", "+        }", "+        List<Description> leaves = findLeaves(request);", "+        Collections.sort(leaves, fHistory.testComparator());", "+        return constructLeafRequest(leaves);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0f4b607a1f6a80cc4a83ee3673d5fb9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tpublic static String format(String message, Object expected, Object actual)", "signatureAfterChange": "      public static String format(String message, Object expected, Object actual)", "diff": ["-\tpublic static String format(String message, Object expected, Object actual) {", "-\t\tString formatted= \"\";", "-\t\tif (message != null && message.length() > 0)", "-\t\t\tformatted= message+\" \";", "-\t\treturn formatted+\"expected:<\"+expected+\"> but was:<\"+actual+\">\";", "-\t}", "+", "+    public static String format(String message, Object expected, Object actual) {", "+        String formatted = \"\";", "+        if (message != null && message.length() > 0) {", "+            formatted = message + \" \";", "+        }", "+        return formatted + \"expected:<\" + expected + \"> but was:<\" + actual + \">\";", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a29e9cff3470922213beec09c84b72c5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \t\tprivate Object createTestUsingFieldInjection() throws Exception", "signatureAfterChange": "          private Object createTestUsingFieldInjection() throws Exception", "diff": ["-\t\t", "-\t\tprivate Object createTestUsingFieldInjection() throws Exception {", "-\t\t\tList<FrameworkField> annotatedFieldsByParameter = getAnnotatedFieldsByParameter();", "-\t\t\tif (annotatedFieldsByParameter.size() != fParameters.length)", "-\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @Parameter fields.\"+", "-\t\t\t\t\t\" @Parameter fields counted: \"+annotatedFieldsByParameter.size()+\", available parameters: \"+fParameters.length+\".\");", "-\t\t\tObject testClassInstance = getTestClass().getJavaClass().newInstance();", "-\t\t\tfor (FrameworkField each : annotatedFieldsByParameter) {", "-\t\t\t\tField field = each.getField();", "-\t\t\t\tParameter annotation = field.getAnnotation(Parameter.class);", "-\t\t\t\tint index = annotation.value();", "-\t\t\t\ttry {", "-\t\t\t\t\tfield.set(testClassInstance,  fParameters[index]);", "-\t\t\t\t} catch(IllegalArgumentException iare) {", "-\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+", "-\t\t\t\t\t\" with the value \"+fParameters[index]+", "-\t\t\t\t\t\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+", "-\t\t\t\t\tfield.getType().getSimpleName()+\").\", iare);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn testClassInstance;", "-\t\t}", "+        private Object createTestUsingFieldInjection() throws Exception {", "+            List<FrameworkField> annotatedFieldsByParameter = getAnnotatedFieldsByParameter();", "+            if (annotatedFieldsByParameter.size() != fParameters.length) {", "+                throw new Exception(\"Wrong number of parameters and @Parameter fields.\" +", "+                        \" @Parameter fields counted: \" + annotatedFieldsByParameter.size() + \", available parameters: \" + fParameters.length + \".\");", "+            }", "+            Object testClassInstance = getTestClass().getJavaClass().newInstance();", "+            for (FrameworkField each : annotatedFieldsByParameter) {", "+                Field field = each.getField();", "+                Parameter annotation = field.getAnnotation(Parameter.class);", "+                int index = annotation.value();", "+                try {", "+                    field.set(testClassInstance, fParameters[index]);", "+                } catch (IllegalArgumentException iare) {", "+                    throw new Exception(getTestClass().getName() + \": Trying to set \" + field.getName() +", "+                            \" with the value \" + fParameters[index] +", "+                            \" that is not the right type (\" + fParameters[index].getClass().getSimpleName() + \" instead of \" +", "+                            field.getType().getSimpleName() + \").\", iare);", "+                }", "+            }", "+            return testClassInstance;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a80a3bf128e5fee48c432175f6e80d6d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkRead(FileDescriptor fd)", "signatureAfterChange": "          @Override         public void checkRead(FileDescriptor fd)", "diff": ["-\t\t@Override", "-\t\tpublic void checkRead(FileDescriptor fd) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkRead(fd);", "-\t\t}", "+        @Override", "+        public void checkRead(FileDescriptor fd) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkRead(fd);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abe175e35a9e280cb436a064836c32ca", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkAccept(String host, int port)", "signatureAfterChange": "          @Override         public void checkAccept(String host, int port)", "diff": ["-\t\t@Override", "-\t\tpublic void checkAccept(String host, int port) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkAccept(host, port);", "-\t\t}", "+        @Override", "+        public void checkAccept(String host, int port) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkAccept(host, port);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac1f348303b61ba03a5d0e4ecab018c1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner runnerForClass(Class<?> testClass) throws Throwable", "signatureAfterChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Throwable", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) throws Throwable {", "-\t\tList<RunnerBuilder> builders= Arrays.asList(", "-\t\t\t\tignoredBuilder(),", "-\t\t\t\tannotatedBuilder(),", "-\t\t\t\tsuiteMethodBuilder(),", "-\t\t\t\tjunit3Builder(),", "-\t\t\t\tjunit4Builder());", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) throws Throwable {", "+        List<RunnerBuilder> builders = Arrays.asList(", "+                ignoredBuilder(),", "+                annotatedBuilder(),", "+                suiteMethodBuilder(),", "+                junit3Builder(),", "+                junit4Builder());", "-\t\tfor (RunnerBuilder each : builders) {", "-\t\t\tRunner runner= each.safeRunnerForClass(testClass);", "-\t\t\tif (runner != null)", "-\t\t\t\treturn runner;", "-\t\t}", "-\t\treturn null;", "-\t}", "+        for (RunnerBuilder each : builders) {", "+            Runner runner = each.safeRunnerForClass(testClass);", "+            if (runner != null) {", "+                return runner;", "+            }", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acd846acf6e3c3c826e0f7b27af198bb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkPropertyAccess(String key)", "signatureAfterChange": "          @Override         public void checkPropertyAccess(String key)", "diff": ["-\t\t@Override", "-\t\tpublic void checkPropertyAccess(String key) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkPropertyAccess(key);", "-\t\t}", "+        @Override", "+        public void checkPropertyAccess(String key) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkPropertyAccess(key);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adb3e6b1599a26ace274811edbc4abac", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assume.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static <T> void assumeThat(T actual, Matcher<T> matcher)", "signatureAfterChange": "     public static <T> void assumeThat(T actual, Matcher<T> matcher)", "diff": ["-\t */", "-\tpublic static <T> void assumeThat(T actual, Matcher<T> matcher) {", "-\t\tif (!matcher.matches(actual))", "-\t\t\tthrow new AssumptionViolatedException(actual, matcher); ", "-\t}", "+     */", "+    public static <T> void assumeThat(T actual, Matcher<T> matcher) {", "+        if (!matcher.matches(actual)) {", "+            throw new AssumptionViolatedException(actual, matcher);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae05acce6067af5433e427319fbdaf31", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedFieldValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "      public <T> List<T> getAnnotatedFieldValues(Object test,             Class<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["-\tpublic <T> List<T> getAnnotatedFieldValues(Object test,", "-\t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass) {", "-\t\tList<T> results= new ArrayList<T>();", "-\t\tfor (FrameworkField each : getAnnotatedFields(annotationClass)) {", "-\t\t\ttry {", "-\t\t\t\tObject fieldValue= each.get(test);", "-\t\t\t\tif (valueClass.isInstance(fieldValue))", "-\t\t\t\t\tresults.add(valueClass.cast(fieldValue));", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\", e);", "-\t\t\t}", "-\t\t}", "-\t\treturn results;", "-\t}", "+    public <T> List<T> getAnnotatedFieldValues(Object test,", "+            Class<? extends Annotation> annotationClass, Class<T> valueClass) {", "+        List<T> results = new ArrayList<T>();", "+        for (FrameworkField each : getAnnotatedFields(annotationClass)) {", "+            try {", "+                Object fieldValue = each.get(test);", "+                if (valueClass.isInstance(fieldValue)) {", "+                    results.add(valueClass.cast(fieldValue));", "+                }", "+            } catch (IllegalAccessException e) {", "+                throw new RuntimeException(", "+                        \"How did getFields return a field we couldn't access?\", e);", "+            }", "+        }", "+        return results;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e505cd49ba37f4e724402e01ec51bf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t@Before \tpublic void createMax()", "signatureAfterChange": "      @Before     public void createMax()", "diff": ["-\t@Before", "-\tpublic void createMax() {", "-\t\tfMaxFile= new File(\"MaxCore.ser\");", "-\t\tif (fMaxFile.exists())", "-\t\t\tfMaxFile.delete();", "-\t\tfMax= MaxCore.storedLocally(fMaxFile);", "-\t}", "+    @Before", "+    public void createMax() {", "+        fMaxFile = new File(\"MaxCore.ser\");", "+        if (fMaxFile.exists()) {", "+            fMaxFile.delete();", "+        }", "+        fMax = MaxCore.storedLocally(fMaxFile);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4eb0d25f61eae508fc03c7512eca4f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Override \tpublic boolean equals(Object obj)", "signatureAfterChange": "      @Override     public boolean equals(Object obj)", "diff": ["-\t@Override", "-\tpublic boolean equals(Object obj) {", "-\t\tif (!FrameworkMethod.class.isInstance(obj))", "-\t\t\treturn false;", "-\t\treturn ((FrameworkMethod) obj).fMethod.equals(fMethod);", "-\t}", "+    @Override", "+    public boolean equals(Object obj) {", "+        if (!FrameworkMethod.class.isInstance(obj)) {", "+            return false;", "+        }", "+        return ((FrameworkMethod) obj).fMethod.equals(fMethod);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c01e4b3abacea4cc2ee2c7c76fa65fb7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/JUnit38SortingTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t@Before \tpublic void createMax()", "signatureAfterChange": "      @Before     public void createMax()", "diff": ["-\t@Before", "-\tpublic void createMax() {", "-\t\tfMaxFile= new File(\"MaxCore.ser\");", "-\t\tif (fMaxFile.exists())", "-\t\t\tfMaxFile.delete();", "-\t\tfMax= MaxCore.storedLocally(fMaxFile);", "-\t}", "+    @Before", "+    public void createMax() {", "+        fMaxFile = new File(\"MaxCore.ser\");", "+        if (fMaxFile.exists()) {", "+            fMaxFile.delete();", "+        }", "+        fMax = MaxCore.storedLocally(fMaxFile);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c104a9694b8c5ffc41f6645eb7ff65a6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected RunnerBuilder suiteMethodBuilder()", "signatureAfterChange": "      protected RunnerBuilder suiteMethodBuilder()", "diff": ["-\tprotected RunnerBuilder suiteMethodBuilder() {", "-\t\tif (fCanUseSuiteMethod)", "-\t\t\treturn new SuiteMethodBuilder();", "-\t\treturn new NullBuilder();", "-\t}", "+    protected RunnerBuilder suiteMethodBuilder() {", "+        if (fCanUseSuiteMethod) {", "+            return new SuiteMethodBuilder();", "+        }", "+        return new NullBuilder();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3682bb75bc6fe23dce044bff0650012", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/RunnerBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate List<Runner> runners(Class<?>[] children)", "signatureAfterChange": "      private List<Runner> runners(Class<?>[] children)", "diff": ["-\t", "-\tprivate List<Runner> runners(Class<?>[] children) {", "-\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "-\t\tfor (Class<?> each : children) {", "-\t\t\tRunner childRunner= safeRunnerForClass(each);", "-\t\t\tif (childRunner != null)", "-\t\t\t\trunners.add(childRunner);", "-\t\t}", "-\t\treturn runners;", "-\t}", "+", "+    private List<Runner> runners(Class<?>[] children) {", "+        ArrayList<Runner> runners = new ArrayList<Runner>();", "+        for (Class<?> each : children) {", "+            Runner childRunner = safeRunnerForClass(each);", "+            if (childRunner != null) {", "+                runners.add(childRunner);", "+            }", "+        }", "+        return runners;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3749c96ef7fdda8a9545b14d301de29", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkWrite(String file)", "signatureAfterChange": "          @Override         public void checkWrite(String file)", "diff": ["-\t\t@Override", "-\t\tpublic void checkWrite(String file) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkWrite(file);", "-\t\t}", "+        @Override", "+        public void checkWrite(String file) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkWrite(file);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c39f9164da1b40df8fb0b2e36e83a6a5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkMulticast(InetAddress maddr)", "signatureAfterChange": "          @Override         public void checkMulticast(InetAddress maddr)", "diff": ["-\t\t@Override", "-\t\tpublic void checkMulticast(InetAddress maddr) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkMulticast(maddr);", "-\t\t}", "+        @Override", "+        public void checkMulticast(InetAddress maddr) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkMulticast(maddr);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c459f501b3f3d97595a0439ea869360d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t@Deprecated \tprotected void validateInstanceMethods(List<Throwable> errors)", "signatureAfterChange": "     @Deprecated     protected void validateInstanceMethods(List<Throwable> errors)", "diff": ["-\t */", "-\t@Deprecated", "-\tprotected void validateInstanceMethods(List<Throwable> errors) {", "-\t\tvalidatePublicVoidNoArgMethods(After.class, false, errors);", "-\t\tvalidatePublicVoidNoArgMethods(Before.class, false, errors);", "-\t\tvalidateTestMethods(errors);", "+     */", "+    @Deprecated", "+    protected void validateInstanceMethods(List<Throwable> errors) {", "+        validatePublicVoidNoArgMethods(After.class, false, errors);", "+        validatePublicVoidNoArgMethods(Before.class, false, errors);", "+        validateTestMethods(errors);", "-\t\tif (computeTestMethods().size() == 0)", "-\t\t\terrors.add(new Exception(\"No runnable methods\"));", "-\t}", "+        if (computeTestMethods().size() == 0) {", "+            errors.add(new Exception(\"No runnable methods\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c62e453980e6e4f4b70287de211e055e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic String extractClassName(String className)", "signatureAfterChange": "     public String extractClassName(String className)", "diff": ["-\t */", "-\tpublic String extractClassName(String className) {", "-\t\tif(className.startsWith(\"Default package for\"))", "-\t\t\treturn className.substring(className.lastIndexOf(\".\")+1);", "-\t\treturn className;", "-\t}", "+     */", "+    public String extractClassName(String className) {", "+        if (className.startsWith(\"Default package for\")) {", "+            return className.substring(className.lastIndexOf(\".\") + 1);", "+        }", "+        return className;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e3e20f17b510c74e6e85df89192762", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate long getTimeout(Test annotation)", "signatureAfterChange": "      private long getTimeout(Test annotation)", "diff": ["-\tprivate long getTimeout(Test annotation) {", "-\t\tif (annotation == null)", "-\t\t\treturn 0;", "-\t\treturn annotation.timeout();", "-\t}", "+", "+    private long getTimeout(Test annotation) {", "+        if (annotation == null) {", "+            return 0;", "+        }", "+        return annotation.timeout();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9ed1e52634f7d8181903c8e53fa7c63", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/textui/TestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic static void main(String args[])", "signatureAfterChange": "      public static void main(String args[])", "diff": ["-\t", "-\tpublic static void main(String args[]) {", "-\t\tTestRunner aTestRunner= new TestRunner();", "-\t\ttry {", "-\t\t\tTestResult r= aTestRunner.start(args);", "-\t\t\tif (!r.wasSuccessful()) ", "-\t\t\t\tSystem.exit(FAILURE_EXIT);", "-\t\t\tSystem.exit(SUCCESS_EXIT);", "-\t\t} catch(Exception e) {", "-\t\t\tSystem.err.println(e.getMessage());", "-\t\t\tSystem.exit(EXCEPTION_EXIT);", "-\t\t}", "-\t}", "+", "+    public static void main(String args[]) {", "+        TestRunner aTestRunner = new TestRunner();", "+        try {", "+            TestResult r = aTestRunner.start(args);", "+            if (!r.wasSuccessful()) {", "+                System.exit(FAILURE_EXIT);", "+            }", "+            System.exit(SUCCESS_EXIT);", "+        } catch (Exception e) {", "+            System.err.println(e.getMessage());", "+            System.exit(EXCEPTION_EXIT);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caccbb259bb6745ffacffb3df7998252", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/ComparisonCompactor.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void findCommonSuffix()", "signatureAfterChange": "      private void findCommonSuffix()", "diff": ["-\tprivate void findCommonSuffix() {", "-\t\tint expectedSuffix= fExpected.length() - 1;", "-\t\tint actualSuffix= fActual.length() - 1;", "-\t\tfor (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {", "-\t\t\tif (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix))", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tfSuffix=  fExpected.length() - expectedSuffix;", "-\t}", "+    private void findCommonSuffix() {", "+        int expectedSuffix = fExpected.length() - 1;", "+        int actualSuffix = fActual.length() - 1;", "+        for (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {", "+            if (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix)) {", "+                break;", "+            }", "+        }", "+        fSuffix = fExpected.length() - expectedSuffix;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cae605b50be4ec5a26de575ce549a6f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tstatic public void assertTrue(String message, boolean condition)", "signatureAfterChange": "     static public void assertTrue(String message, boolean condition)", "diff": ["-\t */", "-\tstatic public void assertTrue(String message, boolean condition) {", "-\t\tif (!condition)", "-\t\t\tfail(message);", "-\t}", "+     */", "+    static public void assertTrue(String message, boolean condition) {", "+        if (!condition) {", "+            fail(message);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cca80cdbe2cace98f33340bf191a8554", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner runnerForClass(Class<?> testClass) throws Exception", "signatureAfterChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Exception", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) throws Exception {", "-\t\tRunWith annotation= testClass.getAnnotation(RunWith.class);", "-\t\tif (annotation != null)", "-\t\t\treturn buildRunner(annotation.value(), testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) throws Exception {", "+        RunWith annotation = testClass.getAnnotation(RunWith.class);", "+        if (annotation != null) {", "+            return buildRunner(annotation.value(), testClass);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd36764372ee1446a2d7feacb9dfa8d2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\tprivate String compact(String message)", "signatureAfterChange": "          private String compact(String message)", "diff": ["-\t\tprivate String compact(String message) {", "-\t\t\tif (fExpected == null || fActual == null || areStringsEqual())", "-\t\t\t\treturn Assert.format(message, fExpected, fActual);", "-\t\t\tfindCommonPrefix();", "-\t\t\tfindCommonSuffix();", "-\t\t\tString expected= compactString(fExpected);", "-\t\t\tString actual= compactString(fActual);", "-\t\t\treturn Assert.format(message, expected, actual);", "-\t\t}", "+        private String compact(String message) {", "+            if (fExpected == null || fActual == null || areStringsEqual()) {", "+                return Assert.format(message, fExpected, fActual);", "+            }", "+            findCommonPrefix();", "+            findCommonSuffix();", "+            String expected = compactString(fExpected);", "+            String actual = compactString(fActual);", "+            return Assert.format(message, expected, actual);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf7d319fd85353383cccccc06e0a8435", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tprivate Description parentDescription(Description description)", "signatureAfterChange": "          private Description parentDescription(Description description)", "diff": ["-\t\tprivate Description parentDescription(Description description) {", "-\t\t\tClass<?> testClass= description.getTestClass();", "-\t\t\tif (testClass == null)", "-\t\t\t\treturn null;", "-\t\t\treturn Description.createSuiteDescription(testClass);", "-\t\t}", "+        private Description parentDescription(Description description) {", "+            Class<?> testClass = description.getTestClass();", "+            if (testClass == null) {", "+                return null;", "+            }", "+            return Description.createSuiteDescription(testClass);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d48da7f147983d22cbb6912d65dfd78a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t\tprivate boolean nullsOk()", "signatureAfterChange": "          private boolean nullsOk()", "diff": ["-\t\tprivate boolean nullsOk() {", "-\t\t\tTheory annotation= fTestMethod.getMethod().getAnnotation(", "-\t\t\t\t\tTheory.class);", "-\t\t\tif (annotation == null)", "-\t\t\t\treturn false;", "-\t\t\treturn annotation.nullsAccepted();", "-\t\t}", "+        private boolean nullsOk() {", "+            Theory annotation = fTestMethod.getMethod().getAnnotation(", "+                    Theory.class);", "+            if (annotation == null) {", "+                return false;", "+            }", "+            return annotation.nullsAccepted();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d735e9e5d5e12bd9b5a4937156a07d6b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tprivate List<T> getFilteredChildren()", "signatureAfterChange": "      private List<T> getFilteredChildren()", "diff": ["-\tprivate List<T> getFilteredChildren() {", "-\t\tif (fFilteredChildren == null)", "-\t\t\tfFilteredChildren = new ArrayList<T>(getChildren());", "-\t\treturn fFilteredChildren;", "-\t}", "+", "+    private List<T> getFilteredChildren() {", "+        if (fFilteredChildren == null) {", "+            fFilteredChildren = new ArrayList<T>(getChildren());", "+        }", "+        return fFilteredChildren;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9306a4dd6df972f869308f74a78e628", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic Annotation[] getAnnotations()", "signatureAfterChange": "     public Annotation[] getAnnotations()", "diff": ["-\t */", "-\tpublic Annotation[] getAnnotations() {", "-\t\tif (fClass == null)", "-\t\t\treturn new Annotation[0];", "-\t\treturn fClass.getAnnotations();", "-\t}", "+     */", "+    public Annotation[] getAnnotations() {", "+        if (fClass == null) {", "+            return new Annotation[0];", "+        }", "+        return fClass.getAnnotations();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc734159f31b74c018319d1e64f3bef3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkCreateClassLoader()", "signatureAfterChange": "          @Override         public void checkCreateClassLoader()", "diff": ["-\t\t@Override", "-\t\tpublic void checkCreateClassLoader() {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkCreateClassLoader();", "-\t\t}", "+        @Override", "+        public void checkCreateClassLoader() {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkCreateClassLoader();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df738c79ee120cc75693c703ba71f30a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map, \t\t\tClass<? extends Annotation> type)", "signatureAfterChange": "      private <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,             Class<? extends Annotation> type)", "diff": ["-\tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,", "-\t\t\tClass<? extends Annotation> type) {", "-\t\tif (!map.containsKey(type))", "-\t\t\tmap.put(type, new ArrayList<T>());", "-\t\treturn map.get(type);", "-\t}", "+    private <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,", "+            Class<? extends Annotation> type) {", "+        if (!map.containsKey(type)) {", "+            map.put(type, new ArrayList<T>());", "+        }", "+        return map.get(type);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e532015d490eca885daaa28342337a6c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/RunnerBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tClass<?> addParent(Class<?> parent) throws InitializationError", "signatureAfterChange": "      Class<?> addParent(Class<?> parent) throws InitializationError", "diff": ["-\tClass<?> addParent(Class<?> parent) throws InitializationError {", "-\t\tif (!parents.add(parent))", "-\t\t\tthrow new InitializationError(String.format(\"class '%s' (possibly indirectly) contains itself as a SuiteClass\", parent.getName()));", "-\t\treturn parent;", "-\t}", "+    Class<?> addParent(Class<?> parent) throws InitializationError {", "+        if (!parents.add(parent)) {", "+            throw new InitializationError(String.format(\"class '%s' (possibly indirectly) contains itself as a SuiteClass\", parent.getName()));", "+        }", "+        return parent;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e549a01763fe997ed69a3e5f8a513415", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic ParameterSupplier getSupplier(ParameterSignature unassigned) \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "      public ParameterSupplier getSupplier(ParameterSignature unassigned)             throws InstantiationException, IllegalAccessException", "diff": ["-\tpublic ParameterSupplier getSupplier(ParameterSignature unassigned)", "-\t\t\tthrows InstantiationException, IllegalAccessException {", "-\t\tParameterSupplier supplier= getAnnotatedSupplier(unassigned);", "-\t\tif (supplier != null)", "-\t\t\treturn supplier;", "+    public ParameterSupplier getSupplier(ParameterSignature unassigned)", "+            throws InstantiationException, IllegalAccessException {", "+        ParameterSupplier supplier = getAnnotatedSupplier(unassigned);", "+        if (supplier != null) {", "+            return supplier;", "+        }", "-\t\treturn new AllMembersSupplier(fClass);", "-\t}", "+        return new AllMembersSupplier(fClass);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7105a71c97c2fd33ee4aeb16d6d0622", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate static void failEquals(String message, Object actual)", "signatureAfterChange": "      private static void failEquals(String message, Object actual)", "diff": ["-\tprivate static void failEquals(String message, Object actual) {", "-\t\tString formatted = \"Values should be different. \";", "-\t\tif (message != null)", "-\t\t\tformatted = message + \". \";", "-\t\t", "-\t\tformatted += \"Actual: \" + actual; ", "-\t\tfail(formatted);", "-\t}", "+    private static void failEquals(String message, Object actual) {", "+        String formatted = \"Values should be different. \";", "+        if (message != null) {", "+            formatted = message + \". \";", "+        }", "+        formatted += \"Actual: \" + actual;", "+        fail(formatted);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9266bff3b815e94544c0eedda82c8f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t@Override \tpublic String toString()", "signatureAfterChange": "     @Override     public String toString()", "diff": ["-\t */", "-\t@Override", "-\tpublic String toString() {", "-\t\tif (getName() != null)", "-\t\t\treturn getName();", "-\t\treturn super.toString();", "-\t }", "+     */", "+    @Override", "+    public String toString() {", "+        if (getName() != null) {", "+            return getName();", "+        }", "+        return super.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9f331945068baa2aae23693bb126bbe", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/GuesserQueue.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void update(AssumptionViolatedException e)", "signatureAfterChange": "      public void update(AssumptionViolatedException e)", "diff": ["-\tpublic void update(AssumptionViolatedException e) {", "-\t\tif (lastRemoved != null)", "-\t\t\taddAll(lastRemoved.reguesses(e));", "-\t}", "+", "+    public void update(AssumptionViolatedException e) {", "+        if (lastRemoved != null) {", "+            addAll(lastRemoved.reguesses(e));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec200885aadc9ab18bdf6a73f017e2b1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkRead(String file)", "signatureAfterChange": "          @Override         public void checkRead(String file)", "diff": ["-\t\t@Override", "-\t\tpublic void checkRead(String file) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkRead(file);", "-\t\t}", "+        @Override", "+        public void checkRead(String file) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkRead(file);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed3490afe51b9126decd23a668455123", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/ComparisonCompactor.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic String compact(String message)", "signatureAfterChange": "      public String compact(String message)", "diff": ["-\tpublic String compact(String message) {", "-\t\tif (fExpected == null || fActual == null || areStringsEqual())", "-\t\t\treturn Assert.format(message, fExpected, fActual);", "-\t\tfindCommonPrefix();", "-\t\tfindCommonSuffix();", "-\t\tString expected= compactString(fExpected);", "-\t\tString actual= compactString(fActual);", "-\t\treturn Assert.format(message, expected, actual);", "-\t}", "+    public String compact(String message) {", "+        if (fExpected == null || fActual == null || areStringsEqual()) {", "+            return Assert.format(message, fExpected, fActual);", "+        }", "+        findCommonPrefix();", "+        findCommonSuffix();", "+        String expected = compactString(fExpected);", "+        String actual = compactString(fActual);", "+        return Assert.format(message, expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4e0d244e03ba22e937982740fa59b4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tstatic public void assertNotEquals(String message, double first,  \t\t\tdouble second, double delta)", "signatureAfterChange": "     static public void assertNotEquals(String message, double first,             double second, double delta)", "diff": ["-\t */", "-\tstatic public void assertNotEquals(String message, double first, ", "-\t\t\tdouble second, double delta) {", "-\t\tif (!doubleIsDifferent(first, second, delta))", "-\t\t\tfailEquals(message, new Double(first));", "-\t}\t", "+     */", "+    static public void assertNotEquals(String message, double first,", "+            double second, double delta) {", "+        if (!doubleIsDifferent(first, second, delta)) {", "+            failEquals(message, new Double(first));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f024f28f084b2ea6182534cbfdfa122c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/ComparisonCompactor.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void findCommonPrefix()", "signatureAfterChange": "      private void findCommonPrefix()", "diff": ["-\tprivate void findCommonPrefix() {", "-\t\tfPrefix= 0;", "-\t\tint end= Math.min(fExpected.length(), fActual.length());", "-\t\tfor (; fPrefix < end; fPrefix++) {", "-\t\t\tif (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix))", "-\t\t\t\tbreak;", "-\t\t}", "-\t}", "+    private void findCommonPrefix() {", "+        fPrefix = 0;", "+        int end = Math.min(fExpected.length(), fActual.length());", "+        for (; fPrefix < end; fPrefix++) {", "+            if (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix)) {", "+                break;", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f101ca1bd9aa51a53cdb255a72c8dbc4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate IMoney simplify()", "signatureAfterChange": "      private IMoney simplify()", "diff": ["-\t}", "-\tprivate IMoney simplify() {", "-\t\tif (fMonies.size() == 1)", "-\t\t\treturn fMonies.iterator().next();", "-\t\treturn this;", "-\t}", "+", "+    private IMoney simplify() {", "+        if (fMonies.size() == 1) {", "+            return fMonies.iterator().next();", "+        }", "+        return this;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3287cd1f12b40a4d0858e8c920e1ce7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/ExpectException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void evaluate() throws Exception", "signatureAfterChange": "      @Override     public void evaluate() throws Exception", "diff": ["-\t", "-\t@Override", "-\tpublic void evaluate() throws Exception {", "-\t\tboolean complete = false;", "-\t\ttry {", "-\t\t\tfNext.evaluate();", "-\t\t\tcomplete = true;", "-\t\t} catch (AssumptionViolatedException e) {", "-\t\t\tthrow e;", "-\t\t} catch (Throwable e) {", "-\t\t\tif (!fExpected.isAssignableFrom(e.getClass())) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t+ fExpected.getName() + \"> but was<\"", "-\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\tthrow new Exception(message, e);", "-\t\t\t}", "-\t\t}", "-\t\tif (complete)", "-\t\t\tthrow new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t+ fExpected.getName());", "-\t}", "+", "+    @Override", "+    public void evaluate() throws Exception {", "+        boolean complete = false;", "+        try {", "+            fNext.evaluate();", "+            complete = true;", "+        } catch (AssumptionViolatedException e) {", "+            throw e;", "+        } catch (Throwable e) {", "+            if (!fExpected.isAssignableFrom(e.getClass())) {", "+                String message = \"Unexpected exception, expected<\"", "+                        + fExpected.getName() + \"> but was<\"", "+                        + e.getClass().getName() + \">\";", "+                throw new Exception(message, e);", "+            }", "+        }", "+        if (complete) {", "+            throw new AssertionError(\"Expected exception: \"", "+                    + fExpected.getName());", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e9edf7025878c00755902e16ba448a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate long getTimeout(Test annotation)", "signatureAfterChange": "      private long getTimeout(Test annotation)", "diff": ["-\tprivate long getTimeout(Test annotation) {", "-\t\tif (annotation == null)", "-\t\t\treturn 0;", "-\t\treturn annotation.timeout();", "-\t}", "+", "+    private long getTimeout(Test annotation) {", "+        if (annotation == null) {", "+            return 0;", "+        }", "+        return annotation.timeout();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ef839f35d51e6773daa73d7073dfaf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \t\tprivate Long getFailure(Description key)", "signatureAfterChange": "          private Long getFailure(Description key)", "diff": ["-\t\tprivate Long getFailure(Description key) {", "-\t\t\tLong result= getFailureTimestamp(key);", "-\t\t\tif (result == null)", "-\t\t\t\treturn 0L; // 0 = \"never failed (that I know about)\"", "-\t\t\treturn result;", "-\t\t}", "+        private Long getFailure(Description key) {", "+            Long result = getFailureTimestamp(key);", "+            if (result == null) {", "+                return 0L; // 0 = \"never failed (that I know about)\"", "+            }", "+            return result;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d41473b9c9a42d3d4a641093a28007", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkSecurityAccess(String target)", "signatureAfterChange": "          @Override         public void checkSecurityAccess(String target)", "diff": ["-\t\t@Override", "-\t\tpublic void checkSecurityAccess(String target) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkSecurityAccess(target);", "-\t\t}", "+        @Override", "+        public void checkSecurityAccess(String target) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkSecurityAccess(target);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa1fcb066172aaaea7972b135f21fb3e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \t@Override \tpublic boolean equals(Object obj)", "signatureAfterChange": "      @Override     public boolean equals(Object obj)", "diff": ["-\t@Override", "-\tpublic boolean equals(Object obj) {", "-\t\tif (!(obj instanceof Description))", "-\t\t\treturn false;", "-\t\tDescription d = (Description) obj;", "-\t\treturn fUniqueId.equals(d.fUniqueId);", "-\t}", "+    @Override", "+    public boolean equals(Object obj) {", "+        if (!(obj instanceof Description)) {", "+            return false;", "+        }", "+        Description d = (Description) obj;", "+        return fUniqueId.equals(d.fUniqueId);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb33fc6aff032c9403ab7f350d0f71f6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic long getTimeout()", "signatureAfterChange": "      public long getTimeout()", "diff": ["-\tpublic long getTimeout() {", "-\t\tTest annotation= fMethod.getAnnotation(Test.class);", "-\t\tif (annotation == null)", "-\t\t\treturn 0;", "-\t\tlong timeout= annotation.timeout();", "-\t\treturn timeout;", "-\t}", "+    public long getTimeout() {", "+        Test annotation = fMethod.getAnnotation(Test.class);", "+        if (annotation == null) {", "+            return 0;", "+        }", "+        long timeout = annotation.timeout();", "+        return timeout;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbc24e0ff6a4bb5b159fc38b24dc0d1a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/core/MainRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \t\t@Override \t\tpublic void checkConnect(String host, int port)", "signatureAfterChange": "          @Override         public void checkConnect(String host, int port)", "diff": ["-\t\t@Override", "-\t\tpublic void checkConnect(String host, int port) {", "-\t\t\tif (originalSecurityManager != null)", "-\t\t\t\toriginalSecurityManager.checkConnect(host, port);", "-\t\t}", "+        @Override", "+        public void checkConnect(String host, int port) {", "+            if (originalSecurityManager != null) {", "+                originalSecurityManager.checkConnect(host, port);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9525363d845d154da9d4f7e855b807", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate FrameworkMethod getParametersMethod() throws Exception", "signatureAfterChange": "      private FrameworkMethod getParametersMethod() throws Exception", "diff": ["-\tprivate FrameworkMethod getParametersMethod() throws Exception {", "-\t\tList<FrameworkMethod> methods= getTestClass().getAnnotatedMethods(", "-\t\t\t\tParameters.class);", "-\t\tfor (FrameworkMethod each : methods) {", "-\t\t\tif (each.isStatic() && each.isPublic())", "-\t\t\t\treturn each;", "-\t\t}", "-\t\tthrow new Exception(\"No public static parameters method on class \"", "-\t\t\t\t+ getTestClass().getName());", "-\t}", "+    private FrameworkMethod getParametersMethod() throws Exception {", "+        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(", "+                Parameters.class);", "+        for (FrameworkMethod each : methods) {", "+            if (each.isStatic() && each.isPublic()) {", "+                return each;", "+            }", "+        }", "+        throw new Exception(\"No public static parameters method on class \"", "+                + getTestClass().getName());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4c1d34f7572c307bd239417976603b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tstatic public void fail(String message)", "signatureAfterChange": "     static public void fail(String message)", "diff": ["-\t */", "-\tstatic public void fail(String message) {", "-\t\tif (message == null)", "-\t\t\tthrow new AssertionError();", "-\t\tthrow new AssertionError(message);", "-\t}", "+     */", "+    static public void fail(String message) {", "+        if (message == null) {", "+            throw new AssertionError();", "+        }", "+        throw new AssertionError(message);", "+    }"]}]}
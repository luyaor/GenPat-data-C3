{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd314687afcd4f24529c8ec05e8a1a43", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ddc806d5c0fa27f9a324b8bdc25022", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/SuiteMethodBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> each) throws Throwable", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> each) throws Throwable", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> each) throws Throwable {", "-\t\tif (hasSuiteMethod(each))", "-\t\t\treturn new SuiteMethod(each);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> each) throws Throwable {", "+        if (hasSuiteMethod(each)) {", "+            return new SuiteMethod(each);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d71d9880e9710c2eafb0a80bc004a37", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/IgnoredBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> testClass)", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> testClass)", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) {", "-\t\tif (testClass.getAnnotation(Ignore.class) != null)", "-\t\t\treturn new IgnoredClassRunner(testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) {", "+        if (testClass.getAnnotation(Ignore.class) != null) {", "+            return new IgnoredClassRunner(testClass);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619408b5a4b69ae6747cfd86bb0c1895", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/JUnit3Builder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> testClass) throws Throwable", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> testClass) throws Throwable", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) throws Throwable {", "-\t\tif (isPre4Test(testClass))", "-\t\t\treturn new JUnit38ClassRunner(testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) throws Throwable {", "+        if (isPre4Test(testClass)) {", "+            return new JUnit38ClassRunner(testClass);", "+        }", "+        return null;", "+    }"]}]}
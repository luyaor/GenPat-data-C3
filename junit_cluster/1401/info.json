{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cb1dc0dc6cd5f3a2b9e778d991de0ef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6466077a7584cbd795f3c3c1ccfdb0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "378e17964a4188bad9b3d966207a2f682072148e", "commitAfterChange": "451ca12156d5704809a1feff78a10a9451cd2023", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \t@Test public void preferRecentlyFailed()", "signatureAfterChange": " \t \t@Test public void preferRecentlyFailed()", "diff": ["-\t\tOdds thing= max.getSpreads(request).get(1);", "-\t\tassertEquals(0.0, thing.getCertainty(), 0.001); // TODO not right yet", "-\t\tassertEquals(Description.createTestDescription(TwoTests.class, \"succeed\"), thing.getDescription());", "+\t\tList<Description> tests= max.sort(request);", "+\t\tDescription dontSucceed= Description.createTestDescription(TwoTests.class, \"dontSucceed\");", "+\t\tassertEquals(dontSucceed, tests.get(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ee4bc897581954ea7eefd5fd862e46", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "6fd44daf9ecd93d78372c4a37c4d54bc3c3577d8", "commitAfterChange": "72af03c49fdad5f10e36c7eb4e7045feb971d253", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "          void run()", "signatureAfterChange": "          void run()", "diff": ["-            synchronized (fListeners) {", "-                List<RunListener> safeListeners = new ArrayList<RunListener>();", "-                List<Failure> failures = new ArrayList<Failure>();", "-                for (Iterator<RunListener> all = fCurrentListeners.iterator(); all", "-                        .hasNext(); ) {", "-                    try {", "-                        RunListener listener = all.next();", "-                        notifyListener(listener);", "-                        safeListeners.add(listener);", "-                    } catch (Exception e) {", "-                        failures.add(new Failure(Description.TEST_MECHANISM, e));", "-                    }", "+            int capacity = fCurrentListeners.size();", "+            ArrayList<RunListener> safeListeners = new ArrayList<RunListener>(capacity);", "+            ArrayList<Failure> failures = new ArrayList<Failure>(capacity);", "+            for (RunListener listener : fCurrentListeners) {", "+                try {", "+                    notifyListener(listener);", "+                    safeListeners.add(listener);", "+                } catch (Exception e) {", "+                    failures.add(new Failure(Description.TEST_MECHANISM, e));", "-                fireTestFailures(safeListeners, failures);", "+            fireTestFailures(safeListeners, failures);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbd9ac532e2ab694f2a2ca0e89fbbeba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcd1fa45727a4fb5059760ee4938aa5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void validate(TestClass target, List<Throwable> errors)", "signatureAfterChange": "     public void validate(TestClass target, List<Throwable> errors)", "diff": ["-\t */", "-\tpublic void validate(TestClass target, List<Throwable> errors) {", "-\t\tList<? extends FrameworkMember<?>> members= fMethods ? target.getAnnotatedMethods(fAnnotation)", "-\t\t\t\t\t\t\t\t\t\t: target.getAnnotatedFields(fAnnotation);", "-\t\t", "-\t\tfor (FrameworkMember<?> each : members)", "-\t\t\tvalidateMember(each, errors);", "-\t}", "+     */", "+    public void validate(TestClass target, List<Throwable> errors) {", "+        List<? extends FrameworkMember<?>> members = fMethods ? target.getAnnotatedMethods(fAnnotation)", "+                : target.getAnnotatedFields(fAnnotation);", "+        for (FrameworkMember<?> each : members) {", "+            validateMember(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7175b42db65734a185dc89bf84ec5a77", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tList<Throwable> errors = new ArrayList<Throwable>();", "-\t\ttry {", "-\t\t\tfNext.evaluate();", "-\t\t} catch (Throwable e) {", "-\t\t\terrors.add(e);", "-\t\t} finally {", "-\t\t\tfor (FrameworkMethod each : fAfters)", "-\t\t\t\ttry {", "-\t\t\t\t\teach.invokeExplosively(fTarget);", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\terrors.add(e);", "-\t\t\t\t}", "-\t\t}", "-\t\tMultipleFailureException.assertEmpty(errors);", "-\t}", "+", "+    @Override", "+    public void evaluate() throws Throwable {", "+        List<Throwable> errors = new ArrayList<Throwable>();", "+        try {", "+            fNext.evaluate();", "+        } catch (Throwable e) {", "+            errors.add(e);", "+        } finally {", "+            for (FrameworkMethod each : fAfters) {", "+                try {", "+                    each.invokeExplosively(fTarget);", "+                } catch (Throwable e) {", "+                    errors.add(e);", "+                }", "+            }", "+        }", "+        MultipleFailureException.assertEmpty(errors);", "+    }"]}]}
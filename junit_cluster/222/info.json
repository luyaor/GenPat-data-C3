{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a363a5671c4a9b53e373b775ec6728c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6bb3b47a6bea656799dc981be14a31", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedMethodValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "      public <T> List<T> getAnnotatedMethodValues(Object test,             Class<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["-\tpublic <T> List<T> getAnnotatedMethodValues(Object test,", "-\t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass) {", "-\t\tList<T> results= new ArrayList<T>();", "-\t\tfor (FrameworkMethod each : getAnnotatedMethods(annotationClass)) {", "-\t\t\ttry {", "-\t\t\t\tObject fieldValue= each.invokeExplosively(test, new Object[]{});", "-\t\t\t\tif (valueClass.isInstance(fieldValue))", "-\t\t\t\t\tresults.add(valueClass.cast(fieldValue));", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"Exception in \" + each.getName(), e);", "-\t\t\t}", "-\t\t}", "-\t\treturn results;", "-\t}", "+    public <T> List<T> getAnnotatedMethodValues(Object test,", "+            Class<? extends Annotation> annotationClass, Class<T> valueClass) {", "+        List<T> results = new ArrayList<T>();", "+        for (FrameworkMethod each : getAnnotatedMethods(annotationClass)) {", "+            try {", "+                Object fieldValue = each.invokeExplosively(test, new Object[]{});", "+                if (valueClass.isInstance(fieldValue)) {", "+                    results.add(valueClass.cast(fieldValue));", "+                }", "+            } catch (Throwable e) {", "+                throw new RuntimeException(", "+                        \"Exception in \" + each.getName(), e);", "+            }", "+        }", "+        return results;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae05acce6067af5433e427319fbdaf31", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedFieldValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "      public <T> List<T> getAnnotatedFieldValues(Object test,             Class<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["-\tpublic <T> List<T> getAnnotatedFieldValues(Object test,", "-\t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass) {", "-\t\tList<T> results= new ArrayList<T>();", "-\t\tfor (FrameworkField each : getAnnotatedFields(annotationClass)) {", "-\t\t\ttry {", "-\t\t\t\tObject fieldValue= each.get(test);", "-\t\t\t\tif (valueClass.isInstance(fieldValue))", "-\t\t\t\t\tresults.add(valueClass.cast(fieldValue));", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\", e);", "-\t\t\t}", "-\t\t}", "-\t\treturn results;", "-\t}", "+    public <T> List<T> getAnnotatedFieldValues(Object test,", "+            Class<? extends Annotation> annotationClass, Class<T> valueClass) {", "+        List<T> results = new ArrayList<T>();", "+        for (FrameworkField each : getAnnotatedFields(annotationClass)) {", "+            try {", "+                Object fieldValue = each.get(test);", "+                if (valueClass.isInstance(fieldValue)) {", "+                    results.add(valueClass.cast(fieldValue));", "+                }", "+            } catch (IllegalAccessException e) {", "+                throw new RuntimeException(", "+                        \"How did getFields return a field we couldn't access?\", e);", "+            }", "+        }", "+        return results;", "+    }"]}]}
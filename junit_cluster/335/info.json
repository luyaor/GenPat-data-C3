{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "362a935b33f2357df4a2d1c522e9a2ca", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d3cbc8f6ebd5b0e8fea91349c5bb9ac", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java", "commitBeforeChange": "ff7c54f564eac489de1aef062ff0048c128e1c4f", "commitAfterChange": "b23ffd790b06f561290239ef3b7a5239ba755f10", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \t@Test \tpublic void shouldFailWithHelpfulMessageForProtectedClassRule() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void failWithHelpfulMessageForProtectedClassRule()", "diff": ["-\t", "-\t@Test", "-\tpublic void shouldFailWithHelpfulMessageForProtectedClassRule() throws Exception {", "-\t\tJUnitCore junitCore= new JUnitCore();", "-\t\tRequest request= Request.aClass(TestWithProtectedClassRule.class);", "-\t\tResult result= junitCore.run(request);", "-\t\tassertThat(result.getFailureCount(), is(1));", "-\t\tassertThat(result.getFailures().get(0).getMessage(), is(equalTo(\"The TestRule 'x' is not public.\")));", "-\t}", "+\t@Test", "+\tpublic void failWithHelpfulMessageForProtectedClassRule() {", "+\t\tassertClassHasFailureMessage(TestWithProtectedClassRule.class,", "+\t\t\t\t\"The TestRule 'temporaryFolder' must be public.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8dd5a6b94d7a23d4a06164c4a017f3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7", "commitAfterChange": "cb6abf6fc729f07c5d60b0756e91af444400b4b5", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "      @Test     public void meaningfulFailureWhenParametersNotPublic() throws Exception", "signatureAfterChange": "      @Test     public void meaningfulFailureWhenParametersNotPublic()", "diff": ["-    public void meaningfulFailureWhenParametersNotPublic() throws Exception {", "-        Result result = JUnitCore.runClasses(ProtectedParametersTest.class);", "-        String expected = String.format(", "-                \"No public static parameters method on class %s\",", "-                ProtectedParametersTest.class.getName());", "-        assertEquals(expected, result.getFailures().get(0).getMessage());", "+    public void meaningfulFailureWhenParametersNotPublic() {", "+        assertTestCreatesSingleFailureWithMessage(ProtectedParametersTest.class,", "+                \"No public static parameters method on class \"", "+                        + ProtectedParametersTest.class.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b15f124cec63643a53965ee187f32789", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/JUnit38ClassRunnerTest.java", "commitBeforeChange": "90b53f3683af074aa7aa982821219338053b0345", "commitAfterChange": "810536929044271a608e019255e87c756235bb97", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void getDescriptionWithAnnotation()", "signatureAfterChange": "      @Test     public void getDescriptionWithAnnotation()", "diff": ["+", "+        assertAnnotationFiltering(runner);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd2700981a7e633f9c7efcebc16c94e3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Parameterized(Class<?> klass) throws Throwable", "signatureAfterChange": "     public Parameterized(Class<?> klass) throws Throwable", "diff": ["-        super(klass, NO_RUNNERS);", "-        ParametersRunnerFactory runnerFactory = getParametersRunnerFactory(", "-                klass);", "-        Parameters parameters = getParametersMethod().getAnnotation(", "-                Parameters.class);", "-        runners = Collections.unmodifiableList(createRunnersForParameters(", "-                allParameters(), parameters.name(), runnerFactory));", "+        super(klass, RunnersFactory.createRunnersForClass(klass));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "111164d5eaf7825a84d4a5739e0bdf42", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bed292f272fe447dcf007d227b4d934", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\tprotected void runWithIncompleteAssignment(Assignments incomplete, FailureListener listener) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tThrowable", "signatureAfterChange": "  \t\tprotected void runWithIncompleteAssignment(Assignments incomplete) throws InstantiationException, \t\t\t\tIllegalAccessException, Throwable", "diff": ["-\t\tprotected void runWithIncompleteAssignment(Assignments incomplete, FailureListener listener)", "-\t\t\t\tthrows InstantiationException, IllegalAccessException,", "-\t\t\t\tThrowable {", "-\t\t\tList<PotentialAssignment> potentialsForNextUnassigned= incomplete", "-\t\t\t\t\t\t\t.potentialsForNextUnassigned();", "-\t\t\tfor (PotentialAssignment source : potentialsForNextUnassigned) {", "-\t\t\t\trunWithAssignment(incomplete.assignNext(source), listener);", "+\t\tprotected void runWithIncompleteAssignment(Assignments incomplete) throws InstantiationException,", "+\t\t\t\tIllegalAccessException, Throwable {", "+\t\t\tfor (PotentialAssignment source : incomplete", "+\t\t\t\t\t.potentialsForNextUnassigned()) {", "+\t\t\t\trunWithAssignment(incomplete.assignNext(source));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19a4d6fbc472c536485f85bdea357a1", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/TestSuite.java", "commitBeforeChange": "1e752dcb0a967bcb47fae4b12fb8765e79571e69", "commitAfterChange": "bfc94ee739d62127c7477300b26127bd560765a1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate Constructor getConstructor(Class theClass)", "signatureAfterChange": " \tprivate Constructor getConstructor(Class theClass) throws NoSuchMethodException", "diff": ["-\tprivate Constructor getConstructor(Class theClass) {", "+\tprivate Constructor getConstructor(Class theClass) throws NoSuchMethodException {", "-\t\tConstructor c= null;", "-\t\ttry {", "-\t\t\tc= theClass.getConstructor(args);", "-\t\t} catch(Exception e) {", "-\t\t}", "-\t\treturn c;", "+\t\treturn theClass.getConstructor(args);"]}]}
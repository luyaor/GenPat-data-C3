{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6476fab47579198aa5459cce02f47abd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed76741bdd320f9a00c20fa1b6a67ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "1768d08d029dc3bf1ab88e26df0a9b40ae61227f", "commitAfterChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private Thread getStuckThread (Thread mainThread)", "signatureAfterChange": "     private Thread getStuckThread (Thread mainThread)", "diff": ["-\t\tThreadMXBean mxBean = ManagementFactory.getThreadMXBean();", "-    \t\t// if there are too many threads to fit into the array, enumerate's result", "-    \t\t// is >= the array's length; therefore we can't trust that it returned all", "-    \t\t// the threads.  Try again.", "+            // if there are too many threads to fit into the array, enumerate's result", "+            // is >= the array's length; therefore we can't trust that it returned all", "+            // the threads.  Try again.", "-    \tThread firstRunnable = null;", "-    \tThread mostCpu = null;", "+    \tThread stuckThread = null;", "-    \tint runnableCount = 0;", "-    \t\t\trunnableCount++;", "-    \t\t\tif (firstRunnable == null) firstRunnable = threads[i];", "-    \t\t\tif (mxBean.isThreadCpuTimeSupported()) {", "-    \t\t\t\ttry {", "-    \t\t\t\t\tlong cpuTime = mxBean.getThreadCpuTime(threads[i].getId());", "-    \t\t\t\t\tif (mostCpu == null || cpuTime > maxCpuTime) {", "-    \t\t\t\t\t\tmostCpu = threads[i];", "-    \t\t\t\t\t\tmaxCpuTime = cpuTime;", "-    \t\t\t\t\t}", "-    \t\t\t\t} catch (UnsupportedOperationException e) {", "-    \t\t\t\t}", "-    \t\t\t}", "+                long threadCpuTime = cpuTime (threads [i]);", "+                if (stuckThread == null || threadCpuTime > maxCpuTime) {", "+                    stuckThread = threads[i];", "+                    maxCpuTime = threadCpuTime;", "+                }", "-    \tThread stuckThread =", "-    \t\t\t(runnableCount == 1) ? firstRunnable :", "-    \t\t\t\t((mostCpu != null) ? mostCpu : firstRunnable);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e8c0c6a76db144ca94bd9ff72c4d0f8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/requests/ErrorReportingRequest.java", "commitBeforeChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "commitAfterChange": "9c8d59d9869280a698c3f3a119eb69f0e897c94b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner getRunner()", "signatureAfterChange": "  \t@Override \tpublic Runner getRunner()", "diff": ["-\t\tList<Throwable> goofs= getCauses(fCause);", "-\t\tList<Runner> runners= new ArrayList<Runner>();", "-\t\tfor (int i= 0; i < goofs.size(); i++) {", "-\t\t\tfinal Description description= Description.createTestDescription(fClass, \"initializationError\" + i);", "-\t\t\tfinal Throwable throwable= goofs.get(i);", "-\t\t\trunners.add(new ErrorReportingRunner(description, throwable));", "-\t\t}", "-\t\tCompositeRunner runner= new CompositeRunner(fClass.getName(), runners);", "-\t\treturn runner;", "+\t\t// TODO: (Dec 10, 2007 9:41:13 PM) Should this class exist?", "+", "+\t\treturn new ErrorReportingRunner(fClass, fCause);", "+//\t\tList<Throwable> goofs= getCauses(fCause);", "+//\t\tCompositeRunner runner= new CompositeRunner(fClass.getName());", "+//\t\tfor (int i= 0; i < goofs.size(); i++) {", "+//\t\t\tfinal Description description= Description.createTestDescription(fClass, \"initializationError\" + i);", "+//\t\t\tfinal Throwable throwable= goofs.get(i);", "+//\t\t\trunner.add(new ErrorReportingRunner(fClass, throwable));", "+//\t\t}", "+//\t\treturn runner;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c829a45abcd57be7650f9723dd5fce4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "e727dd6b1cb2caa1699da3b2df7625c9554adc36", "commitAfterChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic Parameterized(Class<?> klass) throws Throwable", "signatureAfterChange": "  \tpublic Parameterized(Class<?> klass) throws Throwable", "diff": ["-", "-\t\tsuper(klass, klass.getName());", "+\t\t// TODO: (Dec 11, 2007 10:06:16 PM) is this the only call?", "+\t\tthis(klass, getParametersList(new TestClass(klass)));", "+\t}", "-\t\tgetTestClass().validateStaticMethods(errors);", "-\t\tgetTestClass().validateInstanceMethods(errors);", "-\t\tfParameters= getParametersList();", "-", "-\t\tfor (int i = 0; i < fParameters.size(); i++)", "-\t\t\t// TODO I almost finished deleting CompositeRunner.add(), but got hung up on this last invocation", "-\t\t\tadd(new TestClassRunnerForParameters(klass, i));", "-\t\t", "-\t\tfConstructor= getTestClass().getOnlyConstructor();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "868831b71b888dd06bd5e22abf48cb48", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic Parameterized(Class<?> klass) throws Throwable", "signatureAfterChange": " \tpublic Parameterized(Class<?> klass) throws Throwable", "diff": ["-\t\tsuper(klass, Collections.<Runner>emptyList());", "-\t\tList<Object[]> parametersList= getParametersList(getTestClass());", "-\t\tfor (int i= 0; i < parametersList.size(); i++)", "-\t\t\trunners.add(new TestClassRunnerForParameters(getTestClass().getJavaClass(),", "-\t\t\t\t\tparametersList, i));", "+\t\tsuper(klass, Collections.<Runner> emptyList());", "+\t\tIterable<Object[]> allParameters= getAllParameters();", "+\t\tcreateRunnersForParameters(allParameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4cb7534ca5a87e25792ae2e3e8f36e1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "94d454a32857d85e08600e38728418863478501c", "commitAfterChange": "a07f1be1bc7eb7f7d757da48d0a3110452cca4d4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate static ArrayList<Runner> runners(TestClass klass) throws Throwable", "signatureAfterChange": "  \t@Override \tprotected List<Runner> getChildren()", "diff": ["-\t", "-\tprivate static ArrayList<Runner> runners(TestClass klass) throws Throwable {", "-\t\tList<Object[]> parametersList = getParametersList(klass);", "-\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "-\t\t\trunners.add(new TestClassRunnerForParameters(klass.getJavaClass(), parametersList,", "-\t\t\t\t\ti));", "+", "+\t@Override", "+\tprotected List<Runner> getChildren() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd871d330164dc632b4ef92a489d0192", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "b1cf4b5bc6ead8c3dfcbbb9ebe69be85f5e53cb8", "commitAfterChange": "56193048f411846a58c0e0377a5f1ccfecd3d2f9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r     String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String[] args)", "diff": ["-                                Description description = createSuiteDescription(arg);\r", "-                                Failure failure = new Failure(\r", "-                                        description,\r", "-                                        new CommandLineParserError(arg + \" value not specified\"));\r", "-                                failures.add(failure);\r", "+                                parserErrors.add(new CommandLineParserError(arg + \" value not specified\"));\r", "-                        Description description = createSuiteDescription(arg);\r", "-                        Failure failure = new Failure(\r", "-                                description,\r", "-                                new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "-\r", "-                        failures.add(failure);\r", "+                        parserErrors.add(new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "-                Description description = createSuiteDescription(arg);\r", "-                Failure failure = new Failure(description, e);\r", "-                failures.add(failure);\r", "+                parserErrors.add(e);\r", "-                Description description = createSuiteDescription(arg);\r", "-                Failure failure = new Failure(description, e);\r", "-                failures.add(failure);\r", "+                parserErrors.add(e);\r"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0415f1b35fa47f2c685c2d4eb10f7a05", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39ac93ed0efa483d68b9ac4854475bae", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "a4c68872a91681139d404825c2bb04bd5ba804dd", "commitAfterChange": "f0ef837a40922ac08c608661385abf71732975d3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete, EachTestNotifier notifier) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener) \t\t\t\tthrows Throwable", "diff": ["-\t\tprotected void runWithCompleteAssignment(final Assignments complete, EachTestNotifier notifier)", "-\t\t\t\tthrows InstantiationException, IllegalAccessException,", "-\t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable {", "-\t\t\ttry {", "-\t\t\t\tfinal Object freshInstance= createTest();", "-\t\t\t\tnew WithBeforeAndAfter(new Link() {", "-\t\t\t\t\t@Override", "-\t\t\t\t\tpublic void run(EachTestNotifier context) throws Throwable {", "-\t\t\t\t\t\t\tinvokeWithActualParameters(freshInstance, complete);", "+\t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener)", "+\t\t\t\tthrows Throwable {", "+\t\t\tfinal Object freshInstance= createTest();", "+\t\t\tnew WithBeforeAndAfter(new Link() {", "+\t\t\t\t@Override", "+\t\t\t\tpublic void run(FailureListener listener) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tinvokeWithActualParameters(freshInstance, complete);", "+\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\tlistener.addFailure(e);", "-\t\t\t\t}, fTestMethod, freshInstance).run(notifier); ", "-\t\t\t} catch (CouldNotGenerateValueException e) {", "-\t\t\t\t// Do nothing", "-\t\t\t}", "+\t\t\t\t}", "+\t\t\t}, fTestMethod, freshInstance).run(new FailureListener() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected void handleFailure(Throwable error) {", "+\t\t\t\t\tif (!(error instanceof CouldNotGenerateValueException))", "+\t\t\t\t\t\tlistener.addFailure(error);", "+\t\t\t\t}", "+\t\t\t}); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc0c8a60d6ba1c61230c1961690ef3cb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener) \t\t\t\tthrows Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException, \t\t\t\tIllegalAccessException, InvocationTargetException, \t\t\t\tNoSuchMethodException, Throwable", "diff": ["-\t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener)", "-\t\t\t\tthrows Throwable {", "-\t\t\tfinal Object freshInstance= createTest();", "-\t\t\t// TODO: (Oct 10, 2007 12:30:46 PM) reuse chain method from above", "+\t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException,", "+\t\t\t\tIllegalAccessException, InvocationTargetException,", "+\t\t\t\tNoSuchMethodException, Throwable {", "+\t\t\ttry {", "+\t\t\t\tfinal Object freshInstance= createTest();", "+\t\t\t\twithAfters(fTestMethod, freshInstance, withBefores(fTestMethod, freshInstance, methodCompletesWithParameters(complete, freshInstance))).run();", "+\t\t\t} catch (CouldNotGenerateValueException e) {", "+\t\t\t\t// Do nothing", "+\t\t\t}", "+\t\t}", "-\t\t\tnew WithBeforeAndAfter(new Link() {", "-\t\t\t\tpublic void run(FailureListener listener) {", "-\t\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t\tlistener.addFailure(e);", "-\t\t\t}, fTestMethod, freshInstance).run(new FailureListener() {", "-\t\t\t\t@Override", "-\t\t\t\tprotected void handleFailure(Throwable error) {", "-\t\t\t\t\tif (!(error instanceof CouldNotGenerateValueException))", "-\t\t\t\t\t\tlistener.addFailure(error);", "-\t\t\t\t}", "-\t\t\t}); "]}]}
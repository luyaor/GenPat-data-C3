{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcc6609ffaffd9bad18bb68b5c522d69", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "413475c0c5ff8074a5ba10cec9631151", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations)", "signatureAfterChange": "      private Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations)", "diff": ["-\tprivate Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations) {", "-\t\tif ((displayName == null) || (displayName.length() == 0))", "-\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\"The display name must not be empty.\");", "-\t\tif ((uniqueId == null))", "-\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\"The unique id must not be null.\");", "-\t\tfTestClass= clazz;", "-\t\tfDisplayName= displayName;", "-\t\tfUniqueId= uniqueId;", "-\t\tfAnnotations= annotations;", "-\t}", "+    private Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations) {", "+        if ((displayName == null) || (displayName.length() == 0)) {", "+            throw new IllegalArgumentException(", "+                    \"The display name must not be empty.\");", "+        }", "+        if ((uniqueId == null)) {", "+            throw new IllegalArgumentException(", "+                    \"The unique id must not be null.\");", "+        }", "+        fTestClass = clazz;", "+        fDisplayName = displayName;", "+        fUniqueId = uniqueId;", "+        fAnnotations = annotations;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762cead3cda2512910379f5780ba2ac7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void validateStatic(FrameworkMember<?> member, \t\t\tList<Throwable> errors)", "signatureAfterChange": "      private void validateStatic(FrameworkMember<?> member,             List<Throwable> errors)", "diff": ["-\tprivate void validateStatic(FrameworkMember<?> member,", "-\t\t\tList<Throwable> errors) {", "-\t\tif (fStaticMembers && !member.isStatic())", "-\t\t\taddError(errors, member, \"must be static.\");", "-\t\tif (!fStaticMembers && member.isStatic())", "-\t\t\taddError(errors, member, \"must not be static.\");", "-\t}", "+    private void validateStatic(FrameworkMember<?> member,", "+            List<Throwable> errors) {", "+        if (fStaticMembers && !member.isStatic()) {", "+            addError(errors, member, \"must be static.\");", "+        }", "+        if (!fStaticMembers && member.isStatic()) {", "+            addError(errors, member, \"must not be static.\");", "+        }", "+    }"]}]}
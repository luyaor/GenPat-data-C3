{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3c8b7e6676d937bebc66c1e2ca25bf6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39ffe933ae093a3ebb34e75b23992f87", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MaxHistory forFolder(File file)", "signatureAfterChange": "     public static MaxHistory forFolder(File file)", "diff": ["-\t */", "-\tpublic static MaxHistory forFolder(File file) {", "-\t\tif (file.exists())", "-\t\t\ttry {", "-\t\t\t\treturn readHistory(file);", "-\t\t\t} catch (CouldNotReadCoreException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t\tfile.delete();", "-\t\t\t}", "-\t\treturn new MaxHistory(file);", "-\t}", "+     */", "+    public static MaxHistory forFolder(File file) {", "+        if (file.exists()) {", "+            try {", "+                return readHistory(file);", "+            } catch (CouldNotReadCoreException e) {", "+                e.printStackTrace();", "+                file.delete();", "+            }", "+        }", "+        return new MaxHistory(file);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "802394ac53368d3a4b7d2338e232ac54", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Test asTest(Description description)", "signatureAfterChange": "      public Test asTest(Description description)", "diff": ["-\t", "-\tpublic Test asTest(Description description) {", "-\t\tif (description.isSuite())", "-\t\t\treturn createTest(description);", "-\t\telse {", "-\t\t\tif (!containsKey(description))", "-\t\t\t\tput(description, createTest(description));", "-\t\t\treturn get(description);", "-\t\t}", "-\t}", "+    public Test asTest(Description description) {", "+        if (description.isSuite()) {", "+            return createTest(description);", "+        } else {", "+            if (!containsKey(description)) {", "+                put(description, createTest(description));", "+            }", "+            return get(description);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c2c526ca5b83e3752df2d161d9ce897", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/methods/TimeoutTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t\t \t\t@Test(timeout=1) public void test()", "signatureAfterChange": "          @Test(timeout = 1)         public void test()", "diff": ["-\t\t", "-\t\t@Test(timeout=1) public void test() {", "-\t\t\tfor(;;)", "-\t\t\t\ttry {", "-\t\t\t\t\tThread.sleep(10000);", "-\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\t// ok, tests are over", "-\t\t\t\t}", "-\t\t}", "+", "+        @Test(timeout = 1)", "+        public void test() {", "+            for (; ; ) {", "+                try {", "+                    Thread.sleep(10000);", "+                } catch (InterruptedException e) {", "+                    // ok, tests are over", "+                }", "+            }", "+        }"]}]}
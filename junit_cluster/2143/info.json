{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "266eb0c4fa4b7c2c476969aa6cbfb7eb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58914becfd61e0257203153b7b315325", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestIntrospector.java", "commitBeforeChange": "6a83bc0f1e5f9839a36910c3a21108bc38367afb", "commitAfterChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass)", "signatureAfterChange": "  \tpublic List<Method> getTestMethods( \t\t\tClass<? extends Annotation> annotationClass)", "diff": ["-\tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass) {", "-\t\tList<Method> results= new ArrayList<Method>();", "-\t\tfor (Class<?> eachClass : getSuperClasses(fTestClass)) {", "-\t\t\tMethod[] methods= eachClass.getDeclaredMethods();", "-\t\t\tfor (Method eachMethod : methods) {", "-\t\t\t\tAnnotation annotation= eachMethod.getAnnotation(annotationClass);", "-\t\t\t\tif (annotation != null && ! isShadowed(eachMethod, results)) ", "-\t\t\t\t\tresults.add(eachMethod);", "-\t\t\t}", "-\t\t}", "+\tpublic List<Method> getTestMethods(", "+\t\t\tClass<? extends Annotation> annotationClass) {", "+\t\tList<Method> results= new MethodCollector(annotationClass).addMethods(", "+\t\t\t\tfTestClass).getMethods();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4fea9ff208ab5bd36de96484774ecdb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestIntrospector.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic List<Method> getTestMethods( \t\t\tClass<? extends Annotation> annotationClass)", "signatureAfterChange": "  \tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass)", "diff": ["-\tpublic List<Method> getTestMethods(", "-\t\t\tClass<? extends Annotation> annotationClass) {", "-\t\tList<Method> results= new MethodCollector(annotationClass).addMethods(", "-\t\t\t\tfTestClass).getMethods();", "+\tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass) {", "+\t\tList<Method> results= new ArrayList<Method>();", "+\t\tfor (Class<?> eachClass : getSuperClasses(fTestClass)) {", "+\t\t\tMethod[] methods= eachClass.getDeclaredMethods();", "+\t\t\tfor (Method eachMethod : methods) {", "+\t\t\t\tAnnotation annotation= eachMethod.getAnnotation(annotationClass);", "+\t\t\t\tif (annotation != null && ! isShadowed(eachMethod, results)) ", "+\t\t\t\t\tresults.add(eachMethod);", "+\t\t\t}", "+\t\t}"]}]}
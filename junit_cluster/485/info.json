{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9cf912c11e9661c59c4f0a877e776b0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "454c7ccebc22b633735f1a9bfd7a4684", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "commitAfterChange": "cc8497f28e1d5a46d7940a0b36556154c83d6f7a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-    private void addSinglePointMethods(ParameterSignature sig,", "-            List<PotentialAssignment> list) {", "+    private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "-            if (sig.canAcceptType(dataPointMethod.getType())) {", "-                try {", "-                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), dataPointMethod.invokeExplosively(null)));", "-                } catch (Throwable e) {", "-                    // ignore and move on", "-                }", "+            Object value;", "+            ", "+            try {", "+                value = dataPointMethod.invokeExplosively(null);", "+            } catch (Throwable e) {", "+                // ignore and move on", "+                continue;", "+            }", "+                ", "+            if (sig.canAcceptValue(value)) {", "+                list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86ef1fa9f478b8222174348415289447", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "cc8497f28e1d5a46d7940a0b36556154c83d6f7a", "commitAfterChange": "e9d4de8e15255b03b60e935390e517d4de90a73b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-            Object value;", "-            ", "-            try {", "-                value = dataPointMethod.invokeExplosively(null);", "-            } catch (Throwable e) {", "-                // ignore and move on", "-                continue;", "-            }", "+            if (sig.canPotentiallyAcceptType(dataPointMethod.getReturnType())) {", "+                Object value;", "-            if (sig.canAcceptValue(value)) {", "-                list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));", "+                try {", "+                    value = dataPointMethod.invokeExplosively(null);", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+                    continue;", "+                }", "+                    ", "+                if (sig.canAcceptValue(value)) {", "+                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81d212402e7ffaeafb9eeab5a8e227d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "3209ce6e2d1b84ae2493a7906eecd76dfff1a8af", "commitAfterChange": "ccf0c0af551df541e40edb07d19a57072a8b14b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-            if (sig.canPotentiallyAcceptType(dataPointMethod.getReturnType())) {", "-                Object value;", "-                ", "-                try {", "-                    value = dataPointMethod.invokeExplosively(null);", "-                } catch (Throwable e) {", "-                    // ignore and move on", "-                    continue;", "-                }", "-                    ", "-                if (sig.canAcceptValue(value)) {", "-                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));", "-                }", "+            if (sig.canAcceptType(dataPointMethod.getType())) {", "+                list.add(new MethodParameterValue(dataPointMethod));"]}]}
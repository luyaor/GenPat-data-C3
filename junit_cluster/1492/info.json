{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bd754e55fdaa01d73336ac70f1ae0ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3883f6c2fe870280f2b453cfb6c5b523", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic TestClass(Class<?> klass)", "signatureAfterChange": "     public TestClass(Class<?> klass)", "diff": ["-\t */", "-\tpublic TestClass(Class<?> klass) {", "-\t\tfClass= klass;", "-\t\tif (klass != null && klass.getConstructors().length > 1)", "-\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\"Test class can only have one constructor\");", "+     */", "+    public TestClass(Class<?> klass) {", "+        fClass = klass;", "+        if (klass != null && klass.getConstructors().length > 1) {", "+            throw new IllegalArgumentException(", "+                    \"Test class can only have one constructor\");", "+        }", "-\t\tfor (Class<?> eachClass : getSuperClasses(fClass)) {", "-\t\t\tfor (Method eachMethod : MethodSorter.getDeclaredMethods(eachClass))", "-\t\t\t\taddToAnnotationLists(new FrameworkMethod(eachMethod),", "-\t\t\t\t\t\tfMethodsForAnnotations);", "-\t\t\tfor (Field eachField : eachClass.getDeclaredFields())", "-\t\t\t\taddToAnnotationLists(new FrameworkField(eachField),", "-\t\t\t\t\t\tfFieldsForAnnotations);", "-\t\t}", "-\t}", "+        for (Class<?> eachClass : getSuperClasses(fClass)) {", "+            for (Method eachMethod : MethodSorter.getDeclaredMethods(eachClass)) {", "+                addToAnnotationLists(new FrameworkMethod(eachMethod),", "+                        fMethodsForAnnotations);", "+            }", "+            for (Field eachField : eachClass.getDeclaredFields()) {", "+                addToAnnotationLists(new FrameworkField(eachField),", "+                        fFieldsForAnnotations);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c92271ae44afb4f37d3a604e8ae367", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\t@Override \t\tpublic boolean shouldRun(Description description)", "signatureAfterChange": "          @Override         public boolean shouldRun(Description description)", "diff": ["-\t\t@Override", "-\t\tpublic boolean shouldRun(Description description) {", "-\t\t\tif (hasCorrectCategoryAnnotation(description))", "-\t\t\t\treturn true;", "-\t\t\tfor (Description each : description.getChildren())", "-\t\t\t\tif (shouldRun(each))", "-\t\t\t\t\treturn true;", "-\t\t\treturn false;", "-\t\t}", "+        @Override", "+        public boolean shouldRun(Description description) {", "+            if (hasCorrectCategoryAnnotation(description)) {", "+                return true;", "+            }", "+            for (Description each : description.getChildren()) {", "+                if (shouldRun(each)) {", "+                    return true;", "+                }", "+            }", "+            return false;", "+        }"]}]}
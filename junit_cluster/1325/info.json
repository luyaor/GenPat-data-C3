{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19bf6c9bb03e3d16664f6399c371cba0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6b01a7b23a8d073d1376c5a57180ff", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestIntrospector.java", "commitBeforeChange": "6a83bc0f1e5f9839a36910c3a21108bc38367afb", "commitAfterChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate List<Class<?>> getSuperClasses(Class< ?> testClass)", "signatureAfterChange": "  \t\tprivate void addSuperclasses(Class<?> testClass)", "diff": ["+", "+\t\tprivate void addSuperclasses(Class<?> testClass) {", "+\t\t\tClass<?> superclass= testClass.getSuperclass();", "+\t\t\tif (superclass != null)", "+\t\t\t\taddMethods(testClass.getSuperclass());", "+\t\t}", "-", "-\tprivate List<Class<?>> getSuperClasses(Class< ?> testClass) {", "-\t\tArrayList<Class<?>> results= new ArrayList<Class<?>>();", "-\t\tClass<?> current= testClass;", "-\t\twhile (current != null) {", "-\t\t\tresults.add(current);", "-\t\t\tcurrent= current.getSuperclass();", "-\t\t}", "-\t\treturn results;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e1cdbd7a99a83f7a6c1b6cf356a8f6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestIntrospector.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tprivate void addSuperclasses(Class<?> testClass)", "signatureAfterChange": "  \tprivate List<Class<?>> getSuperClasses(Class< ?> testClass)", "diff": ["-", "-\t\tprivate void addSuperclasses(Class<?> testClass) {", "-\t\t\tClass<?> superclass= testClass.getSuperclass();", "-\t\t\tif (superclass != null)", "-\t\t\t\taddMethods(testClass.getSuperclass());", "-\t\t}", "+", "+\tprivate List<Class<?>> getSuperClasses(Class< ?> testClass) {", "+\t\tArrayList<Class<?>> results= new ArrayList<Class<?>>();", "+\t\tClass<?> current= testClass;", "+\t\twhile (current != null) {", "+\t\t\tresults.add(current);", "+\t\t\tcurrent= current.getSuperclass();", "+\t\t}", "+\t\treturn results;"]}]}
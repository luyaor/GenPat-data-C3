{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "492d73b50de7ea1af173731ba2fdbfe4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a56fa0c8f577c859d40c387ea47b40f", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/runner/BaseTestRunner.java", "commitBeforeChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "commitAfterChange": "a8ec4efa178afdbc7844e94d08ab38b811c7409a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected String processArguments(String[] args)", "signatureAfterChange": " \tprotected String processArguments(String[] args)", "diff": ["+\t\t\t} else if (args[i].equals(\"-nofilterstack\")) {", "+\t\t\t\tfgFilterStack= false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24d6476749423e98b626c396dbc40e7c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "65f717ed35a698239d4a75960b4f6de2f7cce225", "commitAfterChange": "390d5e365ab47c770c36cbee45f282d5a0d62f26", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic String getClassName()", "signatureAfterChange": " \tpublic String getClassName()", "diff": ["-\t\treturn methodAndClassNamePatternGroupOrDefault(2, toString());", "+\t\treturn fTestClass != null ? fTestClass.getName() : methodAndClassNamePatternGroupOrDefault(2, toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2543854a9b0aeb6f69ed00bb27c895e1", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/samples/money/MoneyBag.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tMoneyBag(Money bag[])", "signatureAfterChange": " \tMoneyBag(Money bag[])", "diff": ["-\t\tfor (int i= 0; i < bag.length; i++)", "-\t\t\tappendMoney(bag[i]);", "+\t\tfor (int i= 0; i < bag.length; i++) {", "+\t\t\tif (!bag[i].isZero())", "+\t\t\t\tappendMoney(bag[i]);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49441e18bd3ca9ac697c800bbe8eae83", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/Assert.java", "commitBeforeChange": "7ab8d5e4fc2a796e0e4f4fd337fa5d15d07b0993", "commitAfterChange": "a76e7c3915e821ed92e143f52e9a040123c986d3", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tstatic private void failNotEquals(String message, Object expected, Object actual)", "signatureAfterChange": "  \tstatic private void failNotEquals(String message, Object expected, Object actual)", "diff": ["-\t\tthrow new ComparisonFailure(message, expected.toString(), actual.toString());", "+\t    throw new ComparisonFailure(message, expected == null ? \"null\" : expected.toString(), actual == null ? \"null\" : actual.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86ef1fa9f478b8222174348415289447", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "cc8497f28e1d5a46d7940a0b36556154c83d6f7a", "commitAfterChange": "e9d4de8e15255b03b60e935390e517d4de90a73b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-            Object value;", "-            ", "-            try {", "-                value = dataPointMethod.invokeExplosively(null);", "-            } catch (Throwable e) {", "-                // ignore and move on", "-                continue;", "-            }", "+            if (sig.canPotentiallyAcceptType(dataPointMethod.getReturnType())) {", "+                Object value;", "-            if (sig.canAcceptValue(value)) {", "-                list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));", "+                try {", "+                    value = dataPointMethod.invokeExplosively(null);", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+                    continue;", "+                }", "+                    ", "+                if (sig.canAcceptValue(value)) {", "+                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));", "+                }"]}]}
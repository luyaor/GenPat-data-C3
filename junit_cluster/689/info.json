{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14ed431238ae3b9c571df7718d9ed706", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca46bc8c564de386984b35a3e8a33a74", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected Statement withBeforeClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withBeforeClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> befores= getTestClass().getAnnotatedMethods(", "-\t\t\t\tBeforeClass.class);", "-\t\treturn befores.isEmpty() ? statement : new RunBefores(statement,", "-\t\t\t\tbefores, null);", "+\t\tList<FrameworkMethod> befores= fTestClass", "+\t\t\t\t.getAnnotatedMethods(BeforeClass.class);", "+\t\treturn befores.isEmpty() ? statement :", "+\t\t\tnew RunBefores(statement, befores, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e81be45f4df877df1ca489778972e0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected Statement withBeforeClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withBeforeClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> befores= getTestClass().getAnnotatedMethods(", "-\t\t\t\tBeforeClass.class);", "-\t\treturn befores.isEmpty() ? statement : new RunBefores(statement,", "-\t\t\t\tbefores, null);", "+\t\tList<FrameworkMethod> befores= fTestClass", "+\t\t\t\t.getAnnotatedMethods(BeforeClass.class);", "+\t\treturn befores.isEmpty() ? statement :", "+\t\t\tnew RunBefores(statement, befores, null);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01c0b4a2d9fe259e52fbcd1af5fbf7a6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917469a27908487692ff5958439d185e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "9cf5b64d8dbbb064fed3d4ee88eced2b6a7d50fe", "commitAfterChange": "bae4bd80513360c5e884e760447000d9c96ffd72", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "diff": ["-            if (hasValidatorAnnotation(annotation.annotationType())) {", "-                AnnotationValidator annotationValidator =", "-                        getAnnotationValidator(annotation.annotationType());", "-                annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass(), errors);", "-            }", "+            Class<? extends Annotation> annotationType = annotation.annotationType();", "+            ValidateWith validateWithAnnotation = annotationType.getAnnotation(ValidateWith.class);", "+            AnnotationValidator annotationValidator =", "+                    fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+            annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass(), errors);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d137a49c8757bdb5bbcaedd971ebc861", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/validator/CategoryValidator.java", "commitBeforeChange": "9cf5b64d8dbbb064fed3d4ee88eced2b6a7d50fe", "commitAfterChange": "bae4bd80513360c5e884e760447000d9c96ffd72", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private Set<Class<?>> buildIncompatibleAnnotationsSet()", "signatureAfterChange": "      private static Set<Class<? extends Annotation>> buildIncompatibleAnnotationsSet()", "diff": ["-    private Set<Class<?>> buildIncompatibleAnnotationsSet() {", "-        if (fIncompatibleAnnotations == null) {", "-            fIncompatibleAnnotations = new HashSet<Class<?>>();", "-            fIncompatibleAnnotations.add(BeforeClass.class);", "-            fIncompatibleAnnotations.add(AfterClass.class);", "-            fIncompatibleAnnotations.add(Before.class);", "-            fIncompatibleAnnotations.add(After.class);", "-        }", "-        return fIncompatibleAnnotations;", "+    private static Set<Class<? extends Annotation>> buildIncompatibleAnnotationsSet() {", "+        Set<Class<? extends Annotation>> incompatibleAnnotations = new HashSet<Class<? extends Annotation>>();", "+        incompatibleAnnotations.add(BeforeClass.class);", "+        incompatibleAnnotations.add(AfterClass.class);", "+        incompatibleAnnotations.add(Before.class);", "+        incompatibleAnnotations.add(After.class);", "+        return Collections.unmodifiableSet(incompatibleAnnotations);"]}]}
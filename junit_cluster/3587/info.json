{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ed08cc06509831c7e8eafacbe8c847c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95451fdc91b63672799ecdc32355e282", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestResult.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void startTest(Test test)", "signatureAfterChange": "     public void startTest(Test test)", "diff": ["-\t */", "-\tpublic void startTest(Test test) {", "-\t\tfinal int count= test.countTestCases();", "-\t\tsynchronized(this) {", "-\t\t\tfRunTests+= count;", "-\t\t}", "-\t\tfor (TestListener each : cloneListeners())", "-\t\t\teach.startTest(test);", "-\t}", "+     */", "+    public void startTest(Test test) {", "+        final int count = test.countTestCases();", "+        synchronized (this) {", "+            fRunTests += count;", "+        }", "+        for (TestListener each : cloneListeners()) {", "+            each.startTest(test);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5fa41399867dcb10bb73ee92d7240f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\t@Override \t\tprotected void handleAssumptionViolation(AssumptionViolatedException e)", "signatureAfterChange": "          @Override         protected void handleAssumptionViolation(AssumptionViolatedException e)", "diff": ["-\t\t@Override", "-\t\tprotected void handleAssumptionViolation(AssumptionViolatedException e) {", "-\t\t\tsuper.handleAssumptionViolation(e);", "-\t\t\tfor (GuesserQueue queue : queues)", "-\t\t\t\tqueue.update(e);", "-\t\t}", "+        @Override", "+        protected void handleAssumptionViolation(AssumptionViolatedException e) {", "+            super.handleAssumptionViolation(e);", "+            for (GuesserQueue queue : queues) {", "+                queue.update(e);", "+            }", "+        }"]}]}
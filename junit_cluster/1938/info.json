{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87f8ac34f903c3c60f8f260e43ff5ce4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0841f0e2996f743536dbb6c63d8113c0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        synchronized (fChildrenLock) {", "-            List<T> filteredChildren = new ArrayList<T>(getFilteredChildren());", "-            for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "+        synchronized (childrenLock) {", "+            List<T> children = new ArrayList<T>(getFilteredChildren());", "+            for (Iterator<T> iter = children.iterator(); iter.hasNext(); ) {", "-            fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "-            if (fFilteredChildren.isEmpty()) {", "+            filteredChildren = Collections.unmodifiableCollection(children);", "+            if (filteredChildren.isEmpty()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0833322857954e45bdf624206f05df3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/runners/Enclosed.java", "commitBeforeChange": "ebb9d7f536a5b1be8364c6cb7367cac8c3849caa", "commitAfterChange": "229490bbf8731ec07fd7ce6d68f0e22b502b9caf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate static Class<?>[] filterAbstractClasses(final Class<?>[] classes)", "signatureAfterChange": " \t \tprivate static Class<?>[] filterAbstractClasses(final Class<?>[] classes)", "diff": ["-\t\tfinal Set<Class<?>> filteredSet = new HashSet<Class<?>>();", "+\t\tfinal List<Class<?>> filteredList = new ArrayList<Class<?>>();", "-\t\t\t\tfilteredSet.add(clazz);", "+\t\t\t\tfilteredList.add(clazz);", "-\t\treturn filteredSet.toArray(new Class<?>[filteredSet.size()]);", "+\t\treturn filteredList.toArray(new Class<?>[filteredList.size()]);"]}]}
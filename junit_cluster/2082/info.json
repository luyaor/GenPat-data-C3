{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "137db47dd04ea3578f45199509773197", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bd24867381f44518b33968be961d15d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "a681b760978751ca4c4ccc6de616b0643d6c2b0e", "commitAfterChange": "7944e8f8afbeaff17d337304df52dac227034423", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate Matcher methodStringMatcher()", "signatureAfterChange": "  \tprivate String methodAndClassNamePatternGroupOrDefault(int group, \t\t\tString defaultString)", "diff": ["-", "-\tprivate Matcher methodStringMatcher() {", "-\t\treturn Pattern.compile(\"(.*)\\\\((.*)\\\\)\").matcher(toString());", "+\tprivate String methodAndClassNamePatternGroupOrDefault(int group,", "+\t\t\tString defaultString) {", "+\t\tMatcher matcher= METHOD_AND_CLASS_NAME_PATTERN.matcher(toString());", "+\t\treturn matcher.matches() ? matcher.group(group) : defaultString;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac0ee760addd62ff5f8f86544061dec3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "c7fe9c82850d54468bfbc900a418873d4d5107fe", "commitAfterChange": "c7874453182cde8e7b38cf3ce356d16d3d1dcde8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\t@SuppressWarnings(\"unchecked\") \t\tprivate Class<? extends Test> getEffectiveClass(Test test)", "signatureAfterChange": "  \t\tprivate Class<? extends Test> getEffectiveClass(Test test)", "diff": ["-\t\t@SuppressWarnings(\"unchecked\")", "-\t\t\t// TODO (Feb 23, 2009 11:45:54 PM): Think hard about this.", "-\t\t\tif (\"warning\".equals(getName(test)))", "-\t\t\t\ttry {", "-\t\t\t\t\treturn (Class<? extends Test>) Class.forName(fTest.toString());", "-\t\t\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\t\treturn test.getClass();", "-\t\t\t\t}", "+//\t\t\t// TODO (Feb 23, 2009 11:45:54 PM): Think hard about this. Didn't think hard enough. Throwing away information doesn't help error recovery.", "+//\t\t\tif (\"warning\".equals(getName(test)))", "+//\t\t\t\ttry {", "+//\t\t\t\t\treturn (Class<? extends Test>) Class.forName(fTest.toString());", "+//\t\t\t\t} catch (ClassNotFoundException e) {", "+//\t\t\t\t\treturn test.getClass();", "+//\t\t\t\t}"]}]}
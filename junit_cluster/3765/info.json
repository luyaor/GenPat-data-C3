{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49c7da2796e4a89c5b63e48d289e87aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b275bda9ed89d09aea50a38ccd8b6f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/results/ResultMatchers.java", "commitBeforeChange": "052fc095d5b4a8af643d0e4402a504716ad8eb03", "commitAfterChange": "231241782c199d39943f742d0abe57057b0b785c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static Matcher<Result> failureIs(final Matcher<? super Throwable> failureMatcher)", "signatureAfterChange": " \tpublic static Matcher<PrintableResult> failureIs(final Matcher<? super Throwable> exceptionMatcher)", "diff": ["-\tpublic static Matcher<Result> failureIs(final Matcher<? super Throwable> failureMatcher) {", "-\t\treturn new TypeSafeMatcher<Result>() {", "+\tpublic static Matcher<PrintableResult> failureIs(final Matcher<? super Throwable> exceptionMatcher) {", "+\t\treturn new TypeSafeMatcher<PrintableResult>() {", "-\t\t\t\tfailureMatcher.describeTo(description);", "+\t\t\t\texceptionMatcher.describeTo(description);", "-\t\t\tpublic boolean matchesSafely(Result item) {", "+\t\t\tpublic boolean matchesSafely(PrintableResult item) {", "-\t\t\t\t\treturn failureMatcher.matches(f.getException());", "+\t\t\t\t\treturn exceptionMatcher.matches(f.getException());", "-\t\t\t}", "-\t\t};", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa8d11acdf4bd1c57680fb6d7db9e60c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic List<Test> asTestList(Description description)", "signatureAfterChange": "  \tpublic List<Test> asTestList(Plan plan)", "diff": ["-\tpublic List<Test> asTestList(Description description) {", "-\t\tif (description.isTest())", "-\t\t\treturn Arrays.asList(asTest(description));", "+\tpublic List<Test> asTestList(Plan plan) {", "+\t\tif (plan.isTest())", "+\t\t\treturn Arrays.asList(asTest(plan));", "-\t\t\tfor (Description child : description.getChildren()) {", "+\t\t\tfor (Plan child : plan.getChildren()) {"]}]}
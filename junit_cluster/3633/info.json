{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d84ac2192fe5673f4951225065574dd2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfccbb8bbc971cc64f8fda192a11231", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/ComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate int assertArraysAreSameLength(Object expecteds, \t\t\tObject actuals, String header)", "signatureAfterChange": "      private int assertArraysAreSameLength(Object expecteds,             Object actuals, String header)", "diff": ["-\tprivate int assertArraysAreSameLength(Object expecteds,", "-\t\t\tObject actuals, String header) {", "-\t\tif (expecteds == null)", "-\t\t\tAssert.fail(header + \"expected array was null\");", "-\t\tif (actuals == null)", "-\t\t\tAssert.fail(header + \"actual array was null\");", "-\t\tint actualsLength= Array.getLength(actuals);", "-\t\tint expectedsLength= Array.getLength(expecteds);", "-\t\tif (actualsLength != expectedsLength)", "-\t\t\tAssert.fail(header + \"array lengths differed, expected.length=\"", "-\t\t\t\t\t+ expectedsLength + \" actual.length=\" + actualsLength);", "-\t\treturn expectedsLength;", "-\t}", "+    private int assertArraysAreSameLength(Object expecteds,", "+            Object actuals, String header) {", "+        if (expecteds == null) {", "+            Assert.fail(header + \"expected array was null\");", "+        }", "+        if (actuals == null) {", "+            Assert.fail(header + \"actual array was null\");", "+        }", "+        int actualsLength = Array.getLength(actuals);", "+        int expectedsLength = Array.getLength(expecteds);", "+        if (actualsLength != expectedsLength) {", "+            Assert.fail(header + \"array lengths differed, expected.length=\"", "+                    + expectedsLength + \" actual.length=\" + actualsLength);", "+        }", "+        return expectedsLength;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da4b2dffb72c678f61015a48b3ee99f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/Assert.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static void assertEquals(String message, Object[] expecteds, Object[] actuals)", "signatureAfterChange": " \t@Deprecated \tpublic static void assertEquals(String message, Object[] expecteds, Object[] actuals)", "diff": ["-\tpublic static void assertEquals(String message, Object[] expecteds, Object[] actuals) {", "-\t\tif (expecteds == actuals)", "-\t\t\treturn;", "-\t\tString header = message == null ? \"\" : message + \": \";", "-\t\tif (expecteds == null)", "-\t\t\tfail(header + \"expected array was null\");", "-\t\tif (actuals == null)", "-\t\t\tfail(header + \"actual array was null\");", "-\t\tif (actuals.length != expecteds.length)", "-\t\t\tfail(header + \"array lengths differed, expected.length=\" + expecteds.length + \" actual.length=\" + actuals.length);", "-", "-\t\tfor (int i= 0; i < expecteds.length; i++) {", "-\t\t\tObject o1= expecteds[i];", "-\t\t\tObject o2= actuals[i];", "-\t\t\tif (o1.getClass().isArray() && o2.getClass().isArray()) {", "-\t\t\t\tObject[] expected= (Object[]) o1;", "-\t\t\t\tObject[] actual= (Object[]) o2;", "-\t\t\t\ttry {", "-\t\t\t\t\tassertEquals(message, expected, actual);", "-\t\t\t\t} catch (ArrayComparisonFailure e) {", "-\t\t\t\t\te.addDimension(i);", "-\t\t\t\t\tthrow e;", "-\t\t\t\t}", "-\t\t\t} else", "-\t\t\t\ttry {", "-\t\t\t\t\tassertEquals(o1, o2);", "-\t\t\t\t} catch (AssertionError e) {", "-\t\t\t\t\tthrow new ArrayComparisonFailure(header, e, i);", "-\t\t\t\t}", "-\t\t}", "+\t */", "+\t@Deprecated", "+\tpublic static void assertEquals(String message, Object[] expecteds, Object[] actuals) {", "+\t\tassertArrayEquals(message, expecteds, actuals);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c30a4d8949119a874355b8809d262a86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tstatic String format(String message, Object expected, Object actual)", "signatureAfterChange": "      static String format(String message, Object expected, Object actual)", "diff": ["-\tstatic String format(String message, Object expected, Object actual) {", "-\t\tString formatted= \"\";", "-\t\tif (message != null && !message.equals(\"\"))", "-\t\t\tformatted= message + \" \";", "-\t\tString expectedString= String.valueOf(expected);", "-\t\tString actualString= String.valueOf(actual);", "-\t\tif (expectedString.equals(actualString))", "-\t\t\treturn formatted + \"expected: \"", "-\t\t\t\t\t+ formatClassAndValue(expected, expectedString)", "-\t\t\t\t\t+ \" but was: \" + formatClassAndValue(actual, actualString);", "-\t\telse", "-\t\t\treturn formatted + \"expected:<\" + expectedString + \"> but was:<\"", "-\t\t\t\t\t+ actualString + \">\";", "-\t}", "+", "+    static String format(String message, Object expected, Object actual) {", "+        String formatted = \"\";", "+        if (message != null && !message.equals(\"\")) {", "+            formatted = message + \" \";", "+        }", "+        String expectedString = String.valueOf(expected);", "+        String actualString = String.valueOf(actual);", "+        if (expectedString.equals(actualString)) {", "+            return formatted + \"expected: \"", "+                    + formatClassAndValue(expected, expectedString)", "+                    + \" but was: \" + formatClassAndValue(actual, actualString);", "+        } else {", "+            return formatted + \"expected:<\" + expectedString + \"> but was:<\"", "+                    + actualString + \">\";", "+        }", "+    }"]}]}
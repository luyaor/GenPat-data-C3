{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05b0f032522e7d228432455d327db71a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678241d5110edac7f5b2bcef7cb0314f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/InexactComparisonCriteria.java", "commitBeforeChange": "06d515560f8c0e2f080e5382c555613035e8cf28", "commitAfterChange": "70986438ca98df55899e293a72931fc12bb737d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "signatureAfterChange": " \tpublic void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "diff": ["-\t\t\t\t\tAssert.assertEquals((Double)expected, (Double)actual, fDelta);", "+\t\t\t\t\tif (expected instanceof Double)", "+\t\t\t\t\t\tAssert.assertEquals((Double)expected, (Double)actual, fDelta);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tAssert.assertEquals((Float)expected, (Float)actual, fDelta);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2b37a53226a5cd29ce913ca6481ffa7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/InexactComparisonCriteria.java", "commitBeforeChange": "6abd4e65122ac6e3b56cf53a9a7540b61e4e687e", "commitAfterChange": "68e5927ecf49bb21c396c423c3669ada15b7fe1b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "signatureAfterChange": " \tpublic void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "diff": ["-\t\t\t\t\tAssert.assertEquals((Double)expected, (Double)actual, fDelta);", "+\t\t\t\t\tif (expected instanceof Double)", "+\t\t\t\t\t\tAssert.assertEquals((Double)expected, (Double)actual, fDelta);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tAssert.assertEquals((Float)expected, (Float)actual, fDelta);"]}]}
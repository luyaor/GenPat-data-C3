{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "572eb1e0a62d2ae2fbc75d518aa7d05e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e89014bc5e3774f61199410f2c70391", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void validateTestRuleOrMethodRule(FrameworkMember<?> member, \t\t\tList<Throwable> errors)", "signatureAfterChange": "      private void validateTestRuleOrMethodRule(FrameworkMember<?> member,             List<Throwable> errors)", "diff": ["-\tprivate void validateTestRuleOrMethodRule(FrameworkMember<?> member,", "-\t\t\tList<Throwable> errors) {", "-\t\tif (!isMethodRule(member) && !isTestRule(member))", "-\t\t\taddError(errors, member, fMethods ?", "-\t\t\t\t\t\"must return an implementation of MethodRule or TestRule.\" :", "-\t\t\t\t\t\"must implement MethodRule or TestRule.\");", "-\t}", "+    private void validateTestRuleOrMethodRule(FrameworkMember<?> member,", "+            List<Throwable> errors) {", "+        if (!isMethodRule(member) && !isTestRule(member)) {", "+            addError(errors, member, fMethods ?", "+                    \"must return an implementation of MethodRule or TestRule.\" :", "+                    \"must implement MethodRule or TestRule.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362af86db452bab8a678c638dab08562", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void validatePublic(FrameworkMember<?> member, List<Throwable> errors)", "signatureAfterChange": "      private void validatePublic(FrameworkMember<?> member, List<Throwable> errors)", "diff": ["-\tprivate void validatePublic(FrameworkMember<?> member, List<Throwable> errors) {", "-\t\tif (!member.isPublic())", "-\t\t\taddError(errors, member, \"must be public.\");", "-\t}", "+    private void validatePublic(FrameworkMember<?> member, List<Throwable> errors) {", "+        if (!member.isPublic()) {", "+            addError(errors, member, \"must be public.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3287cd1f12b40a4d0858e8c920e1ce7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/ExpectException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void evaluate() throws Exception", "signatureAfterChange": "      @Override     public void evaluate() throws Exception", "diff": ["-\t", "-\t@Override", "-\tpublic void evaluate() throws Exception {", "-\t\tboolean complete = false;", "-\t\ttry {", "-\t\t\tfNext.evaluate();", "-\t\t\tcomplete = true;", "-\t\t} catch (AssumptionViolatedException e) {", "-\t\t\tthrow e;", "-\t\t} catch (Throwable e) {", "-\t\t\tif (!fExpected.isAssignableFrom(e.getClass())) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t+ fExpected.getName() + \"> but was<\"", "-\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\tthrow new Exception(message, e);", "-\t\t\t}", "-\t\t}", "-\t\tif (complete)", "-\t\t\tthrow new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t+ fExpected.getName());", "-\t}", "+", "+    @Override", "+    public void evaluate() throws Exception {", "+        boolean complete = false;", "+        try {", "+            fNext.evaluate();", "+            complete = true;", "+        } catch (AssumptionViolatedException e) {", "+            throw e;", "+        } catch (Throwable e) {", "+            if (!fExpected.isAssignableFrom(e.getClass())) {", "+                String message = \"Unexpected exception, expected<\"", "+                        + fExpected.getName() + \"> but was<\"", "+                        + e.getClass().getName() + \">\";", "+                throw new Exception(message, e);", "+            }", "+        }", "+        if (complete) {", "+            throw new AssertionError(\"Expected exception: \"", "+                    + fExpected.getName());", "+        }", "+    }"]}]}
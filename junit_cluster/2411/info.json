{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "823203cf65dc21127212b473de4d486f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ab127fd65b2a69f486e3f0d78d20d5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4MethodRunner.java", "commitBeforeChange": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf", "commitAfterChange": "4081076e513e84bb2376f889d4108e64e9a18653", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected void run(Roadie context)", "signatureAfterChange": "  \t\t@Override \t\tpublic void run(final Roadie context)", "diff": ["+\t\tpublic void run(final Roadie context) {", "+\t\t\tExecutorService service= Executors.newSingleThreadExecutor();", "+\t\t\tCallable<Object> callable= new Callable<Object>() {", "+\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\tfNext.run(context);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tFuture<Object> result= service.submit(callable);", "+\t\t\tservice.shutdown();", "+\t\t\ttry {", "+\t\t\t\tboolean terminated= service.awaitTermination(timeout,", "+\t\t\t\t\t\tTimeUnit.MILLISECONDS);", "+\t\t\t\tif (!terminated)", "+\t\t\t\t\tservice.shutdownNow();", "+\t\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "+\t\t\t} catch (TimeoutException e) {", "+\t\t\t\tcontext.addFailure(new Exception(String.format(", "+\t\t\t\t\t\t\"test timed out after %d milliseconds\", timeout)));", "+\t\t\t} catch (Exception e) {", "+\t\t\t\tcontext.addFailure(e);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ec9a3a31a5616f453b513a79542565", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4MethodRunner.java", "commitBeforeChange": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf", "commitAfterChange": "4081076e513e84bb2376f889d4108e64e9a18653", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprotected void runWithActualTimeout(final Roadie context, final long timeout, final Link next)", "signatureAfterChange": "  \tprotected Anchor anchor()", "diff": ["+", "+\tprotected Anchor anchor() {", "+\t\treturn new Anchor();", "+\t}", "-", "-\tprotected void runWithActualTimeout(final Roadie context, final long timeout, final Link next) {", "-\t\tExecutorService service= Executors.newSingleThreadExecutor();", "-\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\tpublic Object call() throws Exception {", "-\t\t\t\tnext.run(context);", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t};", "-\t\tFuture<Object> result= service.submit(callable);", "-\t\tservice.shutdown();", "-\t\ttry {", "-\t\t\tboolean terminated= service.awaitTermination(timeout,", "-\t\t\t\t\tTimeUnit.MILLISECONDS);", "-\t\t\tif (!terminated)", "-\t\t\t\tservice.shutdownNow();", "-\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the", "-\t\t\t// exception if one", "-\t\t\t// occurred during", "-\t\t\t// the invocation", "-\t\t} catch (TimeoutException e) {", "-\t\t\tcontext.addFailure(new Exception(String.format(", "-\t\t\t\t\t\"test timed out after %d milliseconds\", timeout)));", "-\t\t} catch (Exception e) {", "-\t\t\tcontext.addFailure(e);", "-\t\t}"]}]}
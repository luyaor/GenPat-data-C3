{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f71a5396a35725ae31bfd2775585a76", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8224a4acdfd710371bcbcb0de8f3145c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tfor (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {", "-\t\t\tMethod method= iter.next();", "-\t\t\tif (!filter.shouldRun(methodDescription(method)))", "-\t\t\t\titer.remove();", "-\t\t}", "-\t\tif (fTestMethods.isEmpty())", "-\t\t\tthrow new NoTestsRemainException();", "-\t}", "+", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        for (Iterator<Method> iter = fTestMethods.iterator(); iter.hasNext(); ) {", "+            Method method = iter.next();", "+            if (!filter.shouldRun(methodDescription(method))) {", "+                iter.remove();", "+            }", "+        }", "+        if (fTestMethods.isEmpty()) {", "+            throw new NoTestsRemainException();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ef8ce1fb424612c03bf72c5d873b5b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprotected Statement withPotentialTimeout(TestAnnotation annotation, \t\t\tStatement next)", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tprotected Statement withPotentialTimeout(TestAnnotation annotation,", "-\t\t\tStatement next) {", "-\t\tlong timeout= annotation.getTimeout();", "-\t\treturn timeout > 0 ? new FailOnTimeout(next, timeout) : next;", "+\tpublic void filter(Filter filter) throws NoTestsRemainException {", "+\t\tfor (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {", "+\t\t\tMethod method= iter.next();", "+\t\t\tif (!filter.shouldRun(methodDescription(method)))", "+\t\t\t\titer.remove();", "+\t\t}", "+\t\tif (fTestMethods.isEmpty())", "+\t\t\tthrow new NoTestsRemainException();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1611231f27dfe2569485bd4e92cd8fa0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36580863150f6deaea3a67930fcd4dac", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "fa6483264ce2530585b374c276c2266d0d0c4ef0", "commitAfterChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate static void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "signatureAfterChange": " \tprivate static void internalArrayEquals(String message, Object expecteds, \t\t\tObject actuals) throws ArrayComparisonFailure", "diff": ["-\t\tif (expecteds == null)", "-\t\t\tfail(header + \"expected array was null\");", "-\t\tif (actuals == null)", "-\t\t\tfail(header + \"actual array was null\");", "-\t\tint actualsLength= Array.getLength(actuals);", "-\t\tint expectedsLength= Array.getLength(expecteds);", "-\t\tif (actualsLength != expectedsLength)", "-\t\t\tfail(header + \"array lengths differed, expected.length=\"", "-\t\t\t\t\t+ expectedsLength + \" actual.length=\" + actualsLength);", "+\t\tint expectedsLength= assertArraysAreSameLength(expecteds, actuals,", "+\t\t\t\theader);", "+\t\t\t// TODO (Nov 6, 2008 12:58:55 PM): Is this a DUP?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec17b54e4c4cc7021ac4e702d16c722", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/ComparisonFailure.java", "commitBeforeChange": "15a124877d38d668808ae250821aa3d4327f7758", "commitAfterChange": "0f8075aba2fc1bba1b0c145e28bb99b5da31928f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["-\t\tfor (; k >= 0 && j >= 0; k--,j--) {", "+\t\tfor (; k >= i && j >= i; k--,j--) {", "-\t\tif (j == -1 && k == -1) {", "+\t\tif (j < i && k < i) {", "-\t\t} ", "-\t\t// handle overlapping matches", "-\t\telse if (j+1 < i || k+1 < i) {", "-\t\t\texpected= \"...\"+fExpected.substring(i, j+2)+\"...\";", "-\t\t\tactual= \"...\"+fActual.substring(i, k+2)+\"...\";", "-\t\t} ", "-\t\t// otherwise replace common prefix and suffix", "-\t\telse {", "+\t\t} else {", "-\t\t\tformatted= message+\": \";", "-\t\t\t\t", "+\t\t\tformatted= message+\": \";\t"]}]}
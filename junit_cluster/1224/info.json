{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0cc5c5b7f196322774ddebe49f0eacb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18c32adddc662ad069305af1a2d20b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "a72b0dbef4b01e8ad0b832d9a579dd7fabd5a071", "commitAfterChange": "378e17964a4188bad9b3d966207a2f682072148e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t@Test public void itsMe()", "signatureAfterChange": " \t \t@Test public void twoTestsNotRun()", "diff": ["-\tpublic static class OneTest {", "-\t\t@Test public void itsMe() {}", "+\t", "+\t@Test public void twoTestsNotRun() {", "+\t\tRequest request= Request.aClass(TwoTests.class);", "+\t\tMaxCore max= new MaxCore();", "+\t\tList<Description> things= max.sort(request);", "+\t\tDescription succeed= Description.createTestDescription(TwoTests.class, \"succeed\");", "+\t\tDescription dontSucceed= Description.createTestDescription(TwoTests.class, \"dontSucceed\");", "+\t\tassertTrue(things.contains(succeed));", "+\t\tassertTrue(things.contains(dontSucceed));", "+\t\tassertEquals(2, things.size());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d0be3f1b12e4d276275260ffdd7ade", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "81bb4fe24756a6a21b57975cac9eda4ce2304308", "commitAfterChange": "d517352c4b06fee4d5dfddfc69c86514d09eddc3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "signatureAfterChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "diff": ["+        final Collection<T> filteredChildren= getFilteredChildren();", "+        Collection<T> filteredChildrenCopy= new ArrayList<T>(filteredChildren);", "+", "+        for (T child : filteredChildren) {", "+            if (isIgnoredMethod(child)) {", "+                Description childDescription= describeChild(child);", "+                notifier.fireTestIgnored(childDescription);", "+                filteredChildrenCopy.remove(child);", "+            }", "+", "+        }", "+", "+        final Collection<T> filteredChildrenWithoutIgnores= Collections", "+                .unmodifiableCollection(filteredChildrenCopy);", "+", "+        if (filteredChildrenWithoutIgnores.isEmpty()) {", "+            return new EmptyStatement();", "+        }", "+", "-                runChildren(notifier);", "+                runChildren(notifier, filteredChildrenWithoutIgnores);"]}]}
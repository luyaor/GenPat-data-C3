{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ffe9f211c35ca31523c5bac3c075438", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b290bd80adabaa6d254e299dff5f5e2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/methods/TestMethodTest.java", "commitBeforeChange": "e07e59eb9d24f6e4fa85dd99f311c1feca6ea983", "commitAfterChange": "5d957024be0d1b181879d48b7915b3b8aad8f5d5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \t \t@Test public void overloaded()", "signatureAfterChange": " \t \t@Test(expected=InitializationError.class) public void overloaded() throws InitializationError", "diff": ["-\t@Test public void overloaded() {", "-\t\tTestClass testClass= new TestClass(Confused.class);", "-\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\ttestClass.validateMethodsForDefaultRunner(errors);", "-\t\tassertFalse(errors.isEmpty());", "+\t@Test(expected=InitializationError.class) public void overloaded() throws InitializationError {", "+\t\tnew BlockJUnit4ClassRunner(Confused.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa177d6eb8e6165f7080d0e95ef5223a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/validation/InaccessibleBaseClassTest.java", "commitBeforeChange": "e07e59eb9d24f6e4fa85dd99f311c1feca6ea983", "commitAfterChange": "5d957024be0d1b181879d48b7915b3b8aad8f5d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \t@Test \tpublic void inaccessibleBaseClassIsCaughtAtValidation()", "signatureAfterChange": " \t@Test(expected= InitializationError.class) \tpublic void inaccessibleBaseClassIsCaughtAtValidation() throws InitializationError", "diff": ["-public class InaccessibleBaseClassTest {\t", "-\t@Test", "-\tpublic void inaccessibleBaseClassIsCaughtAtValidation() {", "-\t\tTestClass testClass= new TestClass(Sub.class);", "-\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\ttestClass.validateMethodsForDefaultRunner(errors);", "-\t\tassertFalse(errors.isEmpty());", "+public class InaccessibleBaseClassTest {", "+\t@Test(expected= InitializationError.class)", "+\tpublic void inaccessibleBaseClassIsCaughtAtValidation() throws InitializationError {", "+\t\tnew BlockJUnit4ClassRunner(Sub.class);"]}]}
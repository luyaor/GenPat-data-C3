{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "386bfeb62e02408bc4ab9cd80b0204ab", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9739d010409521b502b01f390a49bd7e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "41092ce4e01cc57d8aa1911e2f1169e0f355b1ae", "commitAfterChange": "3e08f69912d69189e895c279b1bece0c7c0840f4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      protected Runner createRunner(String pattern, int index, Object[] parameters) throws InitializationError", "signatureAfterChange": "      protected Runner createRunnerForTest(TestWithParameters test)             throws InitializationError", "diff": ["-    protected Runner createRunner(String pattern, int index, Object[] parameters) throws InitializationError {", "-        return new TestClassRunnerForParameters(getTestClass().getJavaClass(), pattern, index, parameters);", "+    protected Runner createRunnerForTest(TestWithParameters test)", "+            throws InitializationError {", "+        return new TestClassRunnerForParameters(test);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d981508566190fa10abe55f6f26c8d6c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate FrameworkMethod getParametersMethod(TestClass testClass) \t\t\tthrows Exception", "signatureAfterChange": "  \tprivate FrameworkMethod getParametersMethod() \t\t\tthrows Exception", "diff": ["-\tprivate FrameworkMethod getParametersMethod(TestClass testClass)", "+\tprivate FrameworkMethod getParametersMethod()", "-\t\tList<FrameworkMethod> methods= testClass", "+\t\tList<FrameworkMethod> methods= getTestClass()", "-\t\t\tint modifiers= each.getMethod().getModifiers();", "-\t\t\tif (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))", "+\t\t\tif (each.isStatic() && each.isPublic())", "-\t\t\t\t+ testClass.getName());", "+\t\t\t\t+ getTestClass().getName());"]}]}
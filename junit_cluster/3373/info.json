{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcad1649f2cc20189b6f4a111bfe5078", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12de4dab80b8d59ae9fcf1966d2238c2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/Roadie.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tvoid runBefores(JavaElement javaElement) throws FailedBefore", "signatureAfterChange": "  \tboolean runBefores(JavaElement javaElement)", "diff": ["-\tvoid runBefores(JavaElement javaElement) throws FailedBefore {", "+\tboolean runBefores(JavaElement javaElement) {", "-\t\t\ttry {", "-\t\t\t\tList<Method> befores= javaElement.getBefores();", "-\t\t\t\tfor (Method before : befores)", "-\t\t\t\t\tbefore.invoke(getTarget());", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "+\t\t\tList<Method> befores= javaElement.getBefores();", "+\t\t\tfor (Method before : befores)", "+\t\t\t\tExplosiveMethod.from(before).invoke(fTarget);", "+\t\t\treturn true;", "-\t\t\tthrow new FailedBefore();", "+\t\t\treturn false;", "-\t\t\tthrow new FailedBefore();", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f504c4c4a8b380a5ca037fe517249ce", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tvoid invokeWithActualParameters(Object target, Object[] params) \t\t\tthrows Throwable", "signatureAfterChange": "  \tprivate void invokeWithActualParameters(Object target, Object... params) \t\t\tthrows Throwable", "diff": ["-\tvoid invokeWithActualParameters(Object target, Object[] params)", "+\tprivate void invokeWithActualParameters(Object target, Object... params)", "-\t\t\ttry {", "-\t\t\t\tfMethod.invoke(target, params);", "-\t\t\t\tsuccesses++;", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "+\t\t\tinvokeAndThrow(target, params);", "-\t\t\tfInvalidParameters.add(e);", "+\t\t\thandleAssumptionViolation(e);", "-\t\t\tif (params.length == 0)", "-\t\t\t\tthrow e;", "-\t\t\tthrow new ParameterizedAssertionError(e, fMethod.getName(), params);", "+\t\t\treportParameterizedError(e, params);"]}]}
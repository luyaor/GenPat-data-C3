{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "565e3fd3e761d2b6c5a159ae255485c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d21670af11e858c7bb84ecb47a036da", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic List<Test> asTestList(Plan plan)", "signatureAfterChange": "  \tpublic List<Test> asTestList(Description description)", "diff": ["-", "-\tpublic List<Test> asTestList(Plan plan) {", "-\t\tDescription description= plan.getDescription();", "-\t\tif (description.isTest())", "-\t\t\treturn Arrays.asList(asTestCase(description));", "-\t\t\tList<Test> returnThis= new ArrayList<Test>();", "-\t\t\tfor (Plan child : plan.getChildren()) {", "+", "+\tpublic List<Test> asTestList(Description description) {", "+\t\tif (description.isTest())", "+\t\t\treturn Arrays.asList(asTest(description));", "+\t\telse {", "+\t\t\tList<Test> returnThis = new ArrayList<Test>();", "+\t\t\tfor (Description child : description.getChildren()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d2c65efd85b1f2d7d39b49cb63f74e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic List<Test> asTestList(Plan plan)", "signatureAfterChange": "  \tpublic List<Test> asTestList(Description description)", "diff": ["-", "-\tpublic List<Test> asTestList(Plan plan) {", "-\t\tDescription description= plan.getDescription();", "-\t\tif (description.isTest())", "-\t\t\treturn Arrays.asList(asTestCase(description));", "-\t\t\tList<Test> returnThis= new ArrayList<Test>();", "-\t\t\tfor (Plan child : plan.getChildren()) {", "+", "+\tpublic List<Test> asTestList(Description description) {", "+\t\tif (description.isTest())", "+\t\t\treturn Arrays.asList(asTest(description));", "+\t\telse {", "+\t\t\tList<Test> returnThis = new ArrayList<Test>();", "+\t\t\tfor (Description child : description.getChildren()) {"]}]}
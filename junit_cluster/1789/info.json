{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85da0f67011454ce720967b3ab018468", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27cfcc803557d778c39051dd2bec8fea", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t@Test \tpublic void descriptionAndRunNotificationsAreConsistent()", "signatureAfterChange": " \t@Test \tpublic void descriptionAndRunNotificationsAreConsistent()", "diff": ["-", "-\t\tRunner runner= Request.aClass(CompatibilityTest.class).getRunner();", "-\t\tPlan plan= runner.getPlan();", "-\t\tassertEquals(1, plan.getChildren().size());", "-\t\tassertEquals(\"initializationError\", plan.getChildren().get(0).getDescription()", "-\t\t\t\t.getMethodName());", "+\t\t", "+\t\tDescription description= Request.aClass(CompatibilityTest.class).getRunner().getDescription();", "+\t\tassertEquals(0, description.getChildren().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf652cc5d2385a24d23cdf6edd0c6ad", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t@Test \tpublic void descriptionAndRunNotificationsAreConsistent()", "signatureAfterChange": " \t@Test \tpublic void descriptionAndRunNotificationsAreConsistent()", "diff": ["-", "-\t\tRunner runner= Request.aClass(CompatibilityTest.class).getRunner();", "-\t\tPlan plan= runner.getPlan();", "-\t\tassertEquals(1, plan.getChildren().size());", "-\t\tassertEquals(\"initializationError\", plan.getChildren().get(0).getDescription()", "-\t\t\t\t.getMethodName());", "+\t\t", "+\t\tDescription description= Request.aClass(CompatibilityTest.class).getRunner().getDescription();", "+\t\tassertEquals(0, description.getChildren().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b791f4990e6675924e2d3e6d2ff935", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void runTestUnprotected(final Roadie context)", "signatureAfterChange": "  \tprotected void runTestUnprotected(final Roadie context)", "diff": ["-\t\t} catch (InvocationTargetException e) {", "-\t\t\tThrowable actual= e.getTargetException();", "-\t\t\tif (actual instanceof AssumptionViolatedException) {", "+\t\t} catch (Throwable e) {", "+\t\t\tif (e instanceof AssumptionViolatedException) {", "-\t\t\t\tcontext.addFailure(actual);", "-\t\t\telse if (isUnexpected(actual)) {", "+\t\t\t\tcontext.addFailure(e);", "+\t\t\telse if (isUnexpected(e)) {", "-\t\t\t\t\t\t+ actual.getClass().getName() + \">\";", "-\t\t\t\tcontext.addFailure(new Exception(message, actual));", "+\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "+\t\t\t\tcontext.addFailure(new Exception(message, e));", "-\t\t} catch (Throwable e) {", "-\t\t\tcontext.addFailure(e);"]}]}
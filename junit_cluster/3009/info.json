{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0097a7ec2886a11c7da92901aa799d8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e391d2d1f28e318edc9798e190bb1ff", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/rules/StopwatchTest.java", "commitBeforeChange": "7ae75535efbb7a95ac62cfa1d0ccb626cc23e8c7", "commitAfterChange": "0ffc637a33164dd219a6fbbb7210db84779c700a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Test     public void wrongDuration()", "signatureAfterChange": "         @Test         public void duration()", "diff": ["+    public static class DurationAfterTestTest extends AbstractStopwatchTest {", "+        @Test", "+        public void duration() {", "+            simulateTimePassing(300L);", "+            assertEquals(300L, stopwatch.runtime(MILLISECONDS));", "+        }", "-    public void wrongDuration() {", "-        Result result = runTest(WrongDurationTest.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f5f5a1360915801d05b0b46e0a331f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "8bed6c9278517d9fb13f274bc5a6ade358a39745", "commitAfterChange": "2807ff63d6b408a927fd3dd684a42a2366677657", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t \t@Test public void meaningfulFailureWhenParameterListsAreNotArrays()", "signatureAfterChange": "  \t@Test \tpublic void meaningfulFailureWhenParameterListsAreNotArrays()", "diff": ["-\t", "-\t@Test public void meaningfulFailureWhenParameterListsAreNotArrays() {", "-\t\tResult result= JUnitCore.runClasses(WrongElementType.class);", "-\t\tString expected= String.format(\"%s.data() must return a Collection of arrays.\", WrongElementType.class.getName());", "-\t\tassertEquals(expected, result.getFailures().get(0).getMessage());", "+", "+\t@Test", "+\tpublic void meaningfulFailureWhenParameterListsAreNotArrays() {", "+\t\tString expected= String.format(", "+\t\t\t\t\"%s.data() must return a Collection of arrays.\",", "+\t\t\t\tWrongElementType.class.getName());", "+\t\tassertThat(testResult(WrongElementType.class).toString(),", "+\t\t\t\tcontainsString(expected));"]}]}
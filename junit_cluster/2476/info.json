{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85b2d0313a2bd6545557767d526d800f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "042a05db439ce52705ea70f0833e0761", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \t@SuppressWarnings(\"deprecation\") \tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules, \t\t\tObject target, Statement result)", "signatureAfterChange": "      @SuppressWarnings(\"deprecation\")     private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,             Object target, Statement result)", "diff": ["-\t@SuppressWarnings(\"deprecation\")", "-\tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "-\t\t\tObject target, Statement result) {", "-\t\tfor (org.junit.rules.MethodRule each : getMethodRules(target))", "-\t\t\tif (! testRules.contains(each))", "-\t\t\t\tresult= each.apply(result, method, target);", "-\t\treturn result;", "-\t}", "+    @SuppressWarnings(\"deprecation\")", "+    private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "+            Object target, Statement result) {", "+        for (org.junit.rules.MethodRule each : getMethodRules(target)) {", "+            if (!testRules.contains(each)) {", "+                result = each.apply(result, method, target);", "+            }", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "221a5a5ad3018d4aa4891c02cc4d7da6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType)", "signatureAfterChange": "      public <T extends Annotation> T getAnnotation(Class<T> annotationType)", "diff": ["-\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "-\t\tfor (Annotation each : getAnnotations())", "-\t\t\tif (annotationType.isInstance(each))", "-\t\t\t\treturn annotationType.cast(each);", "-\t\treturn null;", "-\t}", "+    public <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "+        for (Annotation each : getAnnotations()) {", "+            if (annotationType.isInstance(each)) {", "+                return annotationType.cast(each);", "+            }", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3517b2b543cddfa62161b1b32f556203", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate Money findMoney(String currency)", "signatureAfterChange": "      private Money findMoney(String currency)", "diff": ["-\t}", "-\tprivate Money findMoney(String currency) {", "-\t\tfor (Money each : fMonies)", "-\t\t\tif (each.currency().equals(currency))", "-\t\t\t\treturn each;", "-\t\treturn null;", "-\t}", "+", "+    private Money findMoney(String currency) {", "+        for (Money each : fMonies) {", "+            if (each.currency().equals(currency)) {", "+                return each;", "+            }", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c25519dc03350069d868f4272ba1dc9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate static boolean canHaveCategorizedChildren(Description description)", "signatureAfterChange": "     private static boolean canHaveCategorizedChildren(Description description)", "diff": ["-\t// parentage.", "-\tprivate static boolean canHaveCategorizedChildren(Description description) {", "-\t\tfor (Description each : description.getChildren())", "-\t\t\tif (each.getTestClass() == null)", "-\t\t\t\treturn false;", "-\t\treturn true;", "-\t}", "+    // parentage.", "+    private static boolean canHaveCategorizedChildren(Description description) {", "+        for (Description each : description.getChildren()) {", "+            if (each.getTestClass() == null) {", "+                return false;", "+            }", "+        }", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a57786d549c3c7ab627067f120429aa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void addTestsFromTestCase(final Class<?> theClass)", "signatureAfterChange": "      private void addTestsFromTestCase(final Class<?> theClass)", "diff": ["-\tprivate void addTestsFromTestCase(final Class<?> theClass) {", "-\t\tfName= theClass.getName();", "-\t\ttry {", "-\t\t\tgetTestConstructor(theClass); // Avoid generating multiple error messages", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\taddTest(warning(\"Class \"+theClass.getName()+\" has no public constructor TestCase(String name) or TestCase()\"));", "-\t\t\treturn;", "-\t\t}", "-\t\tif (!Modifier.isPublic(theClass.getModifiers())) {", "-\t\t\taddTest(warning(\"Class \"+theClass.getName()+\" is not public\"));", "-\t\t\treturn;", "-\t\t}", "-\t\tClass<?> superClass= theClass;", "-\t\tList<String> names= new ArrayList<String>();", "-\t\twhile (Test.class.isAssignableFrom(superClass)) {", "-\t\t\tfor (Method each : MethodSorter.getDeclaredMethods(superClass))", "-\t\t\t\taddTestMethod(each, names, theClass);", "-\t\t\tsuperClass= superClass.getSuperclass();", "-\t\t}", "-\t\tif (fTests.size() == 0)", "-\t\t\taddTest(warning(\"No tests found in \"+theClass.getName()));", "-\t}", "+    private void addTestsFromTestCase(final Class<?> theClass) {", "+        fName = theClass.getName();", "+        try {", "+            getTestConstructor(theClass); // Avoid generating multiple error messages", "+        } catch (NoSuchMethodException e) {", "+            addTest(warning(\"Class \" + theClass.getName() + \" has no public constructor TestCase(String name) or TestCase()\"));", "+            return;", "+        }", "+        if (!Modifier.isPublic(theClass.getModifiers())) {", "+            addTest(warning(\"Class \" + theClass.getName() + \" is not public\"));", "+            return;", "+        }", "+        Class<?> superClass = theClass;", "+        List<String> names = new ArrayList<String>();", "+        while (Test.class.isAssignableFrom(superClass)) {", "+            for (Method each : MethodSorter.getDeclaredMethods(superClass)) {", "+                addTestMethod(each, names, theClass);", "+            }", "+            superClass = superClass.getSuperclass();", "+        }", "+        if (fTests.size() == 0) {", "+            addTest(warning(\"No tests found in \" + theClass.getName()));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d815921b12322ce93b3f722aa39b3a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType)", "signatureAfterChange": "     public <T extends Annotation> T getAnnotation(Class<T> annotationType)", "diff": ["-\t */", "-\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "-\t\tfor (Annotation each : fAnnotations)", "-\t\t\tif (each.annotationType().equals(annotationType))", "-\t\t\t\treturn annotationType.cast(each);", "-\t\treturn null;", "-\t}", "+     */", "+    public <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "+        for (Annotation each : fAnnotations) {", "+            if (each.annotationType().equals(annotationType)) {", "+                return annotationType.cast(each);", "+            }", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ac72bb9eed4d4437270e079ebf93e29", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMember.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tboolean isShadowedBy(List<T> members)", "signatureAfterChange": "      boolean isShadowedBy(List<T> members)", "diff": ["-\tboolean isShadowedBy(List<T> members) {", "-\t\tfor (T each : members)", "-\t\t\tif (isShadowedBy(each))", "-\t\t\t\treturn true;", "-\t\treturn false;", "-\t}", "+    boolean isShadowedBy(List<T> members) {", "+        for (T each : members) {", "+            if (isShadowedBy(each)) {", "+                return true;", "+            }", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f38a96e1b1837f72b4acedc8ae5ca485", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules, \t\t\tObject target, Statement result)", "signatureAfterChange": "      private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,             Object target, Statement result)", "diff": ["-\tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "-\t\t\tObject target, Statement result) {", "-\t\tfor (org.junit.rules.MethodRule each : getMethodRules(target))", "-\t\t\tif (! testRules.contains(each))", "-\t\t\t\tresult= each.apply(result, method, target);", "-\t\treturn result;", "-\t}", "+    private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "+            Object target, Statement result) {", "+        for (org.junit.rules.MethodRule each : getMethodRules(target)) {", "+            if (!testRules.contains(each)) {", "+                result = each.apply(result, method, target);", "+            }", "+        }", "+        return result;", "+    }"]}]}
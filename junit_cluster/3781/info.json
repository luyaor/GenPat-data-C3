{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c36c345a3fdf6471263560d278eb10e8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d881081458a87e1e7e9b7f2531a68f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/extensions/RepeatedTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic void run(TestResult result)", "signatureAfterChange": "      @Override     public void run(TestResult result)", "diff": ["-\t@Override", "-\tpublic void run(TestResult result) {", "-\t\tfor (int i= 0; i < fTimesRepeat; i++) {", "-\t\t\tif (result.shouldStop())", "-\t\t\t\tbreak;", "-\t\t\tsuper.run(result);", "-\t\t}", "-\t}", "+    @Override", "+    public void run(TestResult result) {", "+        for (int i = 0; i < fTimesRepeat; i++) {", "+            if (result.shouldStop()) {", "+                break;", "+            }", "+            super.run(result);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e2b5590296b1c66d46801871e407db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tstatic public Test createTest(Class<?> theClass, String name)", "signatureAfterChange": "     static public Test createTest(Class<?> theClass, String name)", "diff": ["-\t */", "-\tstatic public Test createTest(Class<?> theClass, String name) {", "-\t\tConstructor<?> constructor;", "-\t\ttry {", "-\t\t\tconstructor= getTestConstructor(theClass);", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\treturn warning(\"Class \"+theClass.getName()+\" has no public constructor TestCase(String name) or TestCase()\");", "-\t\t}", "-\t\tObject test;", "-\t\ttry {", "-\t\t\tif (constructor.getParameterTypes().length == 0) {", "-\t\t\t\ttest= constructor.newInstance(new Object[0]);", "-\t\t\t\tif (test instanceof TestCase)", "-\t\t\t\t\t((TestCase) test).setName(name);", "-\t\t\t} else {", "-\t\t\t\ttest= constructor.newInstance(new Object[]{name});", "-\t\t\t}", "-\t\t} catch (InstantiationException e) {", "-\t\t\treturn(warning(\"Cannot instantiate test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\treturn(warning(\"Exception in constructor: \"+name+\" (\"+exceptionToString(e.getTargetException())+\")\"));", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\treturn(warning(\"Cannot access test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t}", "-\t\treturn (Test) test;", "-\t}", "+     */", "+    static public Test createTest(Class<?> theClass, String name) {", "+        Constructor<?> constructor;", "+        try {", "+            constructor = getTestConstructor(theClass);", "+        } catch (NoSuchMethodException e) {", "+            return warning(\"Class \" + theClass.getName() + \" has no public constructor TestCase(String name) or TestCase()\");", "+        }", "+        Object test;", "+        try {", "+            if (constructor.getParameterTypes().length == 0) {", "+                test = constructor.newInstance(new Object[0]);", "+                if (test instanceof TestCase) {", "+                    ((TestCase) test).setName(name);", "+                }", "+            } else {", "+                test = constructor.newInstance(new Object[]{name});", "+            }", "+        } catch (InstantiationException e) {", "+            return (warning(\"Cannot instantiate test case: \" + name + \" (\" + exceptionToString(e) + \")\"));", "+        } catch (InvocationTargetException e) {", "+            return (warning(\"Exception in constructor: \" + name + \" (\" + exceptionToString(e.getTargetException()) + \")\"));", "+        } catch (IllegalAccessException e) {", "+            return (warning(\"Cannot access test case: \" + name + \" (\" + exceptionToString(e) + \")\"));", "+        }", "+        return (Test) test;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caccbb259bb6745ffacffb3df7998252", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/ComparisonCompactor.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void findCommonSuffix()", "signatureAfterChange": "      private void findCommonSuffix()", "diff": ["-\tprivate void findCommonSuffix() {", "-\t\tint expectedSuffix= fExpected.length() - 1;", "-\t\tint actualSuffix= fActual.length() - 1;", "-\t\tfor (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {", "-\t\t\tif (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix))", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tfSuffix=  fExpected.length() - expectedSuffix;", "-\t}", "+    private void findCommonSuffix() {", "+        int expectedSuffix = fExpected.length() - 1;", "+        int actualSuffix = fActual.length() - 1;", "+        for (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {", "+            if (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix)) {", "+                break;", "+            }", "+        }", "+        fSuffix = fExpected.length() - expectedSuffix;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9aff9a9139c40521fbb70e0adb3b5c1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049e27680f539ffdf3de520fc6f3d34d", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "9a866f6c679298e64194fbfa5ef82262a792824d", "commitAfterChange": "9a629cbfbc732e6b3feb382bd10e872f84ddc510", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testNormalOperation()", "signatureAfterChange": " \t \tpublic void testTwoTests()", "diff": ["-\tpublic void testNormalOperation() {", "-\t\tOutputStream output= new ByteArrayOutputStream();", "-\t\tPrintStream writer= new PrintStream(output);", "-\t\tTestRunner runner= new TestRunner(writer);", "-\t\tCollator c= Collator.getInstance(); ", "+\t", "+\tpublic void testTwoTests() {", "+\t\tString expected= expected(new String[]{\"..\", \"Time: 0\", \"\", \"OK (2 tests)\", \"\"});", "+\t\tTestSuite suite = new TestSuite();", "+\t\tsuite.addTest(new TestCase() { public void runTest() {}});", "+\t\tsuite.addTest(new TestCase() { public void runTest() {}});", "+\t\trunner.doRun(suite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc13ad463bc7ac6d4de855e8468b342", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/AllTests.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static Test suite ( )", "signatureAfterChange": " \tpublic static Test suite ( )", "diff": ["-\t\tsuite.addTest(new TestSuite(ExtensionTest.class));", "-\t    suite.addTest(new TestSuite(TestCaseTest.class));", "-\t    suite.addTest(SuiteTest.suite()); // Tests suite building, so can't use automatic test extraction ", "-\t\tsuite.addTest(new TestSuite(ExceptionTestCaseTest.class));", "-\t\tsuite.addTest(new TestSuite(TestListenerTest.class));", "-\t\tsuite.addTest(new TestSuite(ActiveTestTest.class));", "-\t\tsuite.addTest(new TestSuite(AssertTest.class));", "-\t\tsuite.addTest(new TestSuite(TextRunnerTest.class));", "-\t\t", "-\t\tif (!BaseTestRunner.inVAJava())", "+\t\tsuite.addTestSuite(ExtensionTest.class);", "+\t\tsuite.addTestSuite(TestCaseTest.class);", "+\t\tsuite.addTest(SuiteTest.suite()); // Tests suite building, so can't use automatic test extraction ", "+\t\tsuite.addTestSuite(ExceptionTestCaseTest.class);", "+\t\tsuite.addTestSuite(TestListenerTest.class);", "+\t\tsuite.addTestSuite(ActiveTestTest.class);", "+\t\tsuite.addTestSuite(AssertTest.class);", "+\t\tsuite.addTestSuite(StackFilterTest.class);", "+\t\tsuite.addTestSuite(SorterTest.class);", "+\t\tif (!BaseTestRunner.inVAJava()) {", "+\t\t\tsuite.addTestSuite(TextRunnerTest.class);", "-\t    return suite;", "+\t\t}", "+\t\treturn suite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f04f027dde35ef84c16dc268c6e215a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Suite.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \t@Override \tpublic void run(final RunNotifier notifier)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\t", "-\tpublic void run(final RunNotifier notifier) {", "-\t\tfTestClass.runProtected(notifier, getDescription(), new Statement() {", "-\t\t\t@Override", "-\t\t\tpublic void evaluate() {", "-\t\t\t\trunChildren(notifier);", "+", "+\tpublic void sort(final Sorter sorter) {", "+\t\tCollections.sort(fRunners, new Comparator<Runner>() {", "+\t\t\tpublic int compare(Runner o1, Runner o2) {", "+\t\t\t\treturn sorter.compare(describeChild(o1), describeChild(o2));", "+\t\tfor (Runner each : fRunners)", "+\t\t\tsorter.apply(each);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a113ef66bb907204d9b7e34e8b185f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprotected Statement withBefores(FrameworkMethod method, Object target, \t\t\tStatement link)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\tprotected Statement withBefores(FrameworkMethod method, Object target,", "-\t\t\tStatement link) {", "-\t\treturn new RunBefores(link, new TestMethod(getTestClass()), target);", "+\tpublic void sort(final Sorter sorter) {", "+\t\tCollections.sort(fTestMethods, new Comparator<Method>() {", "+\t\t\tpublic int compare(Method o1, Method o2) {", "+\t\t\t\treturn sorter.compare(methodDescription(o1), methodDescription(o2));", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b45bc429f108e3838b248e0442abb9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "commitAfterChange": "9c8d59d9869280a698c3f3a119eb69f0e897c94b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic void run(RunNotifier notifier)", "signatureAfterChange": " \t \tprivate List<Throwable> getCauses(Throwable cause)", "diff": ["-\tpublic void run(RunNotifier notifier) {", "-\t\tnotifier.testAborted(fDescription, fCause);", "+\t", "+\tprivate List<Throwable> getCauses(Throwable cause) {", "+\t\tif (cause instanceof InvocationTargetException)", "+\t\t\treturn getCauses(cause.getCause());", "+\t\tif (cause instanceof InitializationError)", "+\t\t\treturn ((InitializationError) cause).getCauses();", "+\t\treturn Arrays.asList(cause);\t"]}]}
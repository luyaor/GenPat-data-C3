{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c455c9da19202a10c420acdfb88d7946", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334cdffeb1c90c586a4428b7faab1a50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " private SimpleLookupTable getIndexStates()", "signatureAfterChange": " private SimpleLookupTable getIndexStates()", "diff": ["-\tif (indexStates != null) return indexStates;", "+\tif (this.indexStates != null) return this.indexStates;", "-\tchar[] savedIndexNames = readIndexState();", "-\tif (savedIndexNames.length > 0) {", "-\t\tchar[][] names = CharOperation.splitOn('\\n', savedIndexNames);", "-\t\tif (names.length > 0) {", "-\t\t\t// check to see if workspace has moved, if so then do not trust saved indexes", "-\t\t\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "-\t\t\tchar[] dirName = indexesDirectory.getAbsolutePath().toCharArray();", "-\t\t\tint delimiterPos = dirName.length;", "-\t\t\tif (CharOperation.match(names[0], 0, delimiterPos, dirName, 0, delimiterPos, true)) {", "-\t\t\t\tfor (int i = 0, l = names.length; i < l; i++) {", "-\t\t\t\t\tchar[] name = names[i];", "-\t\t\t\t\tif (name.length > 0)", "-\t\t\t\t\t\tthis.indexStates.put(new String(name), SAVED_STATE);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tsavedIndexNamesFile.delete(); // forget saved indexes & delete each index file", "-\t\t\t\tFile[] files = indexesDirectory.listFiles();", "-\t\t\t\tif (files != null) {", "-\t\t\t\t\tfor (int i = 0, l = files.length; i < l; i++) {", "-\t\t\t\t\t\tString fileName = files[i].getAbsolutePath();", "-\t\t\t\t\t\tif (fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\t\tUtil.verbose(\"Deleting index file \" + files[i]); //$NON-NLS-1$", "-\t\t\t\t\t\t\tfiles[i].delete();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\tIPath indexesDirectoryPath = getJavaPluginWorkingLocation();", "+\tchar[][] savedNames = readIndexState(indexesDirectoryPath.toOSString());", "+\tif (savedNames != null) {", "+\t\tfor (int i = 1, l = savedNames.length; i < l; i++) { // first name is saved signature, see readIndexState()", "+\t\t\tchar[] savedName = savedNames[i];", "+\t\t\tif (savedName.length > 0) {", "+\t\t\t\tIPath indexLocation = indexesDirectoryPath.append(new String(savedName)); // shares indexesDirectoryPath's segments", "+\t\t\t\tif (VERBOSE)", "+\t\t\t\t\tUtil.verbose(\"Reading saved index file \" + indexLocation); //$NON-NLS-1$", "+\t\t\t\tthis.indexStates.put(indexLocation, SAVED_STATE);", "+\t} else {", "+\t\tthis.savedIndexNamesFile.delete(); // forget saved indexes & delete each index file", "+\t\tdeleteIndexFiles(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5781b6f46be4b6b8ea5c03f64c87119c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "26246adf380e69c31de951eed4c0173edaa96dd1", "commitAfterChange": "2c076bc353a2d83c198fbf8764d9fb723677890e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "signatureAfterChange": "\r private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-private NameEnvironmentAnswer findClass(char[] name, char[][] packageName) {\r", "-\tString fullName = assembleName(name, packageName, File.separatorChar);\r", "+private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName){\r", "-\t\tif (fullName.equals(knownFileNames[i]))\r", "+\t\tif (qualifiedTypeName.equals(knownFileNames[i]))\r", "-\tString filename = new String(name);\r", "-\tString binaryFilename = filename + \".class\"; //$NON-NLS-1$\r", "-\tString sourceFilename = filename + \".java\"; //$NON-NLS-1$\r", "+\tString qualifiedBinaryFileName = qualifiedTypeName + \".class\"; //$NON-NLS-1$\r", "+\tString qualifiedPackageName =\r", "+\t\tqualifiedTypeName.length() == typeName.length\r", "+\t\t\t? \"\" //$NON-NLS-1$\r", "+\t\t\t: qualifiedBinaryFileName.substring(0, qualifiedTypeName.length() - typeName.length - 1);\r", "-\t\tClasspath classpath = classpaths[i];\r", "-\t\tboolean binaryExists = classpath.exists(binaryFilename, packageName);\r", "-\t\tboolean sourceExists = classpath.exists(sourceFilename, packageName);\r", "-\t\tif (binaryExists == sourceExists) {\r", "-\t\t\tif (binaryExists) { // so both are true\r", "-\t\t\t\tlong binaryModified = classpath.lastModified(binaryFilename, packageName);\r", "-\t\t\t\tlong sourceModified = classpath.lastModified(sourceFilename, packageName);\r", "-\t\t\t\tif (binaryModified > sourceModified)\r", "-\t\t\t\t\treturn classpath.readClassFile(binaryFilename, packageName);\r", "-\t\t\t\tif (sourceModified > 0)\r", "-\t\t\t\t\treturn classpath.readJavaFile(sourceFilename, packageName);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tif (binaryExists)\r", "-\t\t\t\treturn classpath.readClassFile(binaryFilename, packageName);\r", "-\t\t\telse\r", "-\t\t\t\treturn classpath.readJavaFile(sourceFilename, packageName);\r", "-\t\t}\r", "+\t\tNameEnvironmentAnswer answer = classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);\r", "+\t\tif (answer != null) return answer;\r", "-\treturn null; \r", "+\treturn null;\r"]}], "num": 13643}
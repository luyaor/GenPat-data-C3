{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "658236628e37f08bc3367eb94de57cff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a47dbf79433a8f5f0b1398e73a1824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c98abd1679793c741445024ae2ee115b37f6fe95", "commitAfterChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void formatClassBodyDeclarations(AstNode[] nodes)", "signatureAfterChange": " \tprivate void formatClassBodyDeclarations(AstNode[] nodes)", "diff": ["+\t */", "+\tprivate void formatClassBodyDeclarations(AstNode[] nodes) {", "+\t\tfinal int FIELD = 1, METHOD = 2, TYPE = 3;", "+\t\t", "+\t\tAlignment memberAlignment = this.scribe.createAlignment(\"typeMembers\", this.preferences.type_member_alignment, 4, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "+\t\tthis.scribe.enterAlignment(memberAlignment);", "+\t\tboolean isChunkStart = false;", "+\t\tboolean ok = false;", "+\t\tint startIndex = 0;", "+\t\tdo {", "+\t\t\ttry {", "+\t\t\t\tfor (int i = startIndex, max = nodes.length; i < max; i++) {", "+\t\t\t\t\tAstNode member = nodes[i];", "+\t\t\t\t\tif (member instanceof FieldDeclaration) {", "+\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(FIELD, i, this.scribe.scanner.currentPosition);", "+\t\t\t\t\t\tif (member instanceof MultiFieldDeclaration){", "+\t\t\t\t\t\t\tMultiFieldDeclaration multiField = (MultiFieldDeclaration) member;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (multiField.isStatic()) {", "+\t\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "+\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t} else if (member instanceof Initializer) {", "+\t\t\t\t\t\t\tInitializer initializer = (Initializer) member;", "+\t\t\t\t\t\t\tif (initializer.isStatic()) {", "+\t\t\t\t\t\t\t\tinitializer.traverse(this, null);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tinitializer.traverse(this, null);", "+\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tFieldDeclaration field = (FieldDeclaration) member;", "+\t\t\t\t\t\t\tif (field.isStatic()) {", "+\t\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "+\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (member instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(METHOD, i, this.scribe.scanner.currentPosition);", "+\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, null, isChunkStart);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(TYPE, i, this.scribe.scanner.currentPosition);", "+\t\t\t\t\t\tformat((MemberTypeDeclaration)member, null, isChunkStart);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (isSemiColon()) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tok = true;", "+\t\t\t} catch(AlignmentException e){", "+\t\t\t\tstartIndex = memberAlignment.chunkStartIndex;", "+\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t}", "+\t\t} while (!ok);\t\t", "+\t\tthis.scribe.exitAlignment(memberAlignment, true);", "+\t\tthis.scribe.printComment();", "+\t}", "-\t */", "-\tprivate void formatClassBodyDeclarations(AstNode[] nodes) {", "-\t\tfinal int FIELD = 1, METHOD = 2, TYPE = 3;", "-\t\tAlignment memberAlignment = this.scribe.createAlignment(\"typeMembers\", this.preferences.type_member_alignment, 4, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "-\t\tthis.scribe.enterAlignment(memberAlignment);", "-\t\tboolean isChunkStart = false;", "-\t\tboolean ok = false;", "-\t\tint startIndex = 0;", "-\t\tdo {", "-\t\t\ttry {", "-\t\t\t\tfor (int i = startIndex, max = nodes.length; i < max; i++) {", "-\t\t\t\t\tAstNode member = nodes[i];", "-\t\t\t\t\tif (member instanceof FieldDeclaration) {", "-\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(FIELD, i, this.scribe.scanner.currentPosition);", "-\t\t\t\t\t\tif (member instanceof MultiFieldDeclaration){", "-\t\t\t\t\t\t\tMultiFieldDeclaration multiField = (MultiFieldDeclaration) member;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tif (multiField.isStatic()) {", "-\t\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\t\t} else if (member instanceof Initializer) {", "-\t\t\t\t\t\t\tInitializer initializer = (Initializer) member;", "-\t\t\t\t\t\t\tif (initializer.isStatic()) {", "-\t\t\t\t\t\t\t\tinitializer.traverse(this, null);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tinitializer.traverse(this, null);", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tFieldDeclaration field = (FieldDeclaration) member;", "-\t\t\t\t\t\t\tif (field.isStatic()) {", "-\t\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (member instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(METHOD, i, this.scribe.scanner.currentPosition);", "-\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, null, isChunkStart);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(TYPE, i, this.scribe.scanner.currentPosition);", "-\t\t\t\t\t\tformat((MemberTypeDeclaration)member, null, isChunkStart);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (isSemiColon()) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tok = true;", "-\t\t\t} catch(AlignmentException e){", "-\t\t\t\tstartIndex = memberAlignment.chunkStartIndex;", "-\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t} while (!ok);\t\t", "-\t\tthis.scribe.exitAlignment(memberAlignment, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2234c39b42cf6a2fe83df3a1b34d3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c848c526397205050ce74f2846e59bdbf8b870a1", "commitAfterChange": "0180281f05036941ab7b6777c3d896ff4e2ae73b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "diff": ["-\t\tint startIndex = 0;", "-\t\tdo {", "-\t\t\ttry {", "-\t\t\t\tfor (int i = startIndex, max = members.length; i < max; i++) {", "-\t\t\t\t\tASTNode member = members[i];", "-\t\t\t\t\tif (member instanceof FieldDeclaration) {", "-\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(Alignment.CHUNK_FIELD, i, this.scribe.scanner.currentPosition);", "-\t\t\t\t\t\tif (member instanceof MultiFieldDeclaration) {", "-\t\t\t\t\t\t\tMultiFieldDeclaration multiField = (MultiFieldDeclaration) member;", "-", "-\t\t\t\t\t\t\tif (multiField.isStatic()) {", "-\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "+\t\tint membersLength = members.length;", "+\t\tif (membersLength > 0) {", "+\t\t\tint startIndex = 0;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tfor (int i = startIndex, max = members.length; i < max; i++) {", "+\t\t\t\t\t\tASTNode member = members[i];", "+\t\t\t\t\t\tif (member instanceof FieldDeclaration) {", "+\t\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(Alignment.CHUNK_FIELD, i, this.scribe.scanner.currentPosition);", "+\t\t\t\t\t\t\tif (member instanceof MultiFieldDeclaration) {", "+\t\t\t\t\t\t\t\tMultiFieldDeclaration multiField = (MultiFieldDeclaration) member;", "+\t", "+\t\t\t\t\t\t\t\tif (multiField.isStatic()) {", "+\t\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (member instanceof Initializer) {", "+\t\t\t\t\t\t\t\tint newLineBeforeChunk = isChunkStart ? this.preferences.blank_lines_before_new_chunk : 0;", "+\t\t\t\t\t\t\t\tif (newLineBeforeChunk > 0 && i != 0) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLineBeforeChunk);", "+\t\t\t\t\t\t\t\t} else if (i == 0) {", "+\t\t\t\t\t\t\t\t\tint newLinesBeforeFirstClassBodyDeclaration = this.preferences.blank_lines_before_first_class_body_declaration;", "+\t\t\t\t\t\t\t\t\tif (newLinesBeforeFirstClassBodyDeclaration > 0) {", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLinesBeforeFirstClassBodyDeclaration);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tInitializer initializer = (Initializer) member;", "+\t\t\t\t\t\t\t\tif (initializer.isStatic()) {", "+\t\t\t\t\t\t\t\t\tinitializer.traverse(this, typeDeclaration.staticInitializerScope);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tinitializer.traverse(this, typeDeclaration.initializerScope);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (member instanceof Initializer) {", "-\t\t\t\t\t\t\tint newLineBeforeChunk = isChunkStart ? this.preferences.blank_lines_before_new_chunk : 0;", "-\t\t\t\t\t\t\tif (newLineBeforeChunk > 0 && i != 0) {", "-\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLineBeforeChunk);", "-\t\t\t\t\t\t\t} else if (i == 0) {", "-\t\t\t\t\t\t\t\tint newLinesBeforeFirstClassBodyDeclaration = this.preferences.blank_lines_before_first_class_body_declaration;", "-\t\t\t\t\t\t\t\tif (newLinesBeforeFirstClassBodyDeclaration > 0) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLinesBeforeFirstClassBodyDeclaration);", "+\t\t\t\t\t\t\t\tFieldDeclaration field = (FieldDeclaration) member;", "+\t\t\t\t\t\t\t\tif (field.isStatic()) {", "+\t\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\tInitializer initializer = (Initializer) member;", "-\t\t\t\t\t\t\tif (initializer.isStatic()) {", "-\t\t\t\t\t\t\t\tinitializer.traverse(this, typeDeclaration.staticInitializerScope);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tinitializer.traverse(this, typeDeclaration.initializerScope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tFieldDeclaration field = (FieldDeclaration) member;", "-\t\t\t\t\t\t\tif (field.isStatic()) {", "-\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (member instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(Alignment.CHUNK_METHOD, i, this.scribe.scanner.currentPosition);", "+\t\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, typeDeclaration.scope, isChunkStart, i == 0);", "+\t\t\t\t\t\t} else if (member instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(Alignment.CHUNK_TYPE, i, this.scribe.scanner.currentPosition);", "+\t\t\t\t\t\t\tformat((TypeDeclaration)member, typeDeclaration.scope, isChunkStart, i == 0);", "-\t\t\t\t\t} else if (member instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(Alignment.CHUNK_METHOD, i, this.scribe.scanner.currentPosition);", "-\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, typeDeclaration.scope, isChunkStart, i == 0);", "-\t\t\t\t\t} else if (member instanceof TypeDeclaration) {", "-\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(Alignment.CHUNK_TYPE, i, this.scribe.scanner.currentPosition);", "-\t\t\t\t\t\tformat((TypeDeclaration)member, typeDeclaration.scope, isChunkStart, i == 0);", "+\t\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameSEMICOLON)) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t// realign to the proper value", "+\t\t\t\t\t\tif (this.scribe.memberAlignment != null) {", "+\t\t\t\t\t\t\t// select the last alignment", "+\t\t\t\t\t\t\tthis.scribe.indentationLevel = this.scribe.memberAlignment.originalIndentationLevel;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameSEMICOLON)) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\t\t// realign to the proper value", "-\t\t\t\t\tif (this.scribe.memberAlignment != null) {", "-\t\t\t\t\t\t// select the last alignment", "-\t\t\t\t\t\tthis.scribe.indentationLevel = this.scribe.memberAlignment.originalIndentationLevel;", "-\t\t\t\t\t}", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch(AlignmentException e){", "+\t\t\t\t\tstartIndex = memberAlignment.chunkStartIndex;", "+\t\t\t\t\tthis.scribe.redoMemberAlignment(e);", "-\t\t\t\tok = true;", "-\t\t\t} catch(AlignmentException e){", "-\t\t\t\tstartIndex = memberAlignment.chunkStartIndex;", "-\t\t\t\tthis.scribe.redoMemberAlignment(e);", "-\t\t\t}", "-\t\t} while (!ok);", "+\t\t\t} while (!ok);", "+\t\t} else if (isNextToken(TerminalTokens.TokenNameSEMICOLON)) {", "+\t\t\t// the only body declaration is an empty declaration (';')", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\tthis.scribe.printTrailingComment();", "+\t\t}"]}], "num": 66498}
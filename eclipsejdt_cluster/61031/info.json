{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6694b2fbd6ca68a21cd9a3e12b45d2f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "212bbf6f813fcbaa2b88fe3ea39e0205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t\tif (this.binding instanceof ParameterizedFieldBinding) {", "-\t\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "-\t\t    this.codegenBinding = parameterizedField.originalField;", "-", "-\t\t    // extra cast needed if field type has type variable", "-\t\t    if ((this.codegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "-\t\t        this.genericCast = this.codegenBinding.type.genericCast(parameterizedField.type);", "-\t\t    }\t\t    ", "-\t\t} else {", "-\t\t    this.codegenBinding = this.binding;", "-\t\t}", "+\t\tthis.codegenBinding = this.binding.original();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aecc13af7678d98b651851343f2e530a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t\t// if field from parameterized type got found, use the original field at codegen time", "-\t\tif (this.binding instanceof ParameterizedFieldBinding) {", "-\t\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "-\t\t    this.codegenBinding = parameterizedField.originalField;", "-\t\t    FieldBinding fieldCodegenBinding = (FieldBinding)this.codegenBinding;", "-\t\t    // extra cast needed if field type was type variable", "-\t\t    if ((fieldCodegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "-\t\t        this.genericCast = fieldCodegenBinding.type.genericCast(parameterizedField.type);", "-\t\t    }", "-\t\t}\t\t", "-\t\t\tFieldBinding codegenField = (FieldBinding) this.codegenBinding;", "+\t\t\tFieldBinding codegenField = fieldBinding.original();", "+\t\t\tthis.codegenBinding = codegenField;"]}], "num": 61031}
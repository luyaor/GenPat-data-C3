{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3599dd0de5aad83e889ef55db526efa0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "070e4cf6957d7a8399d889e7a0a8c7f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "commitAfterChange": "a6181d6802b5a324cb95e89162694a938fb478d8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t        default: // SUPER  // cannot use lower bound", "+\t        default :  // SUPER - cannot use lower bound", "-\t            return otherType.isCompatibleWith(this.bound);", "+\t        \tif (otherType.isWildcard()) {", "+\t        \t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t        \t\tswitch (otherWildcard.kind) {", "+\t        \t\t\tcase Wildcard.UNBOUND :", "+\t        \t\t\tdefault : // SUPER :", "+\t        \t\t\t\treturn false;", "+\t        \t\t\tcase Wildcard.EXTENDS :", "+\t        \t\t\t\treturn this.bound.isCompatibleWith(otherWildcard.bound);", "+\t        \t\t}", "+\t        \t} else {", "+\t\t            return otherType.isCompatibleWith(this.bound);", "+\t        \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e2d488461e4fb6c8ec35043f4d2f066", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "8d86c45b7dbc1d8316194b358e7234e4491fa695", "commitAfterChange": "0305482ace5c5443f44c914a225574b12096815b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["-\t    switch(this.kind) {", "-\t        case Wildcard.UNBOUND :", "-\t            return;", "-\t        case Wildcard.EXTENDS :", "-\t            this.bound.collectSubstitutes(otherType, substitutes);", "-\t            return;", "-\t        default: // SUPER", "-\t            this.bound.collectSubstitutes(otherType, substitutes);", "-\t            return;", "-\t    }", "+", "+\t\tif (this.bound == null)", "+\t\t\treturn;", "+\t\tif (otherType.isWildcard()) {", "+\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\tif (otherWildcard.bound != null) {", "+\t\t\t\tthis.bound.collectSubstitutes(otherWildcard.bound, substitutes);", "+\t\t\t}", "+\t\t} else {", "+            this.bound.collectSubstitutes(otherType, substitutes);", "+\t\t}\t    "]}], "num": 3041}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c270ef1d9824d934a063aeb21bf5abdf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46a0b4dc5cd90e3035bea6c3fc512dee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "8115b94a15102913234fbbe463796f613813039a", "commitAfterChange": "b8f3bfdacc5a2270c01f7e0bbb60d6fde20b1569", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic void run()", "signatureAfterChange": "\r \tpublic void run()", "diff": ["-\t\twhile (true) {\r", "-\t\t\ttry {\r", "-\t\t\t\tIJob job;\r", "-\t\t\t\tif ((job = currentJob()) == null) {\r", "-\t\t\t\t\tif (idlingStart < 0)\r", "-\t\t\t\t\t\tidlingStart = System.currentTimeMillis();\r", "-\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);\r", "-\t\t\t\t\tThread.currentThread().sleep(500);\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tidlingStart = -1;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (VERBOSE) {\r", "-\t\t\t\t\tJobManager.log(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$\r", "-\t\t\t\t\tJobManager.log(\"STARTING to execute - \" + job); //$NON-NLS-1$\r", "-\t\t\t\t}\r", "+\t\ttry {\r", "+\t\t\twhile (true) {\r", "-\t\t\t\t\texecuting = true;\r", "-\t\t\t\t\t/*boolean status = */job.execute(null);\r", "-\t\t\t\t\t//if (status == FAILED) request(job);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\texecuting = false;\r", "+\t\t\t\t\tIJob job;\r", "+\t\t\t\t\tif ((job = currentJob()) == null) {\r", "+\t\t\t\t\t\tif (idlingStart < 0)\r", "+\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();\r", "+\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);\r", "+\t\t\t\t\t\tThread.currentThread().sleep(500);\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tidlingStart = -1;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tJobManager.log(\"DONE executing - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\t\tJobManager.log(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\tJobManager.log(\"STARTING to execute - \" + job); //$NON-NLS-1$\r", "-\t\t\t\t\tmoveToNextJob();\r", "-\t\t\t\t\tif (this.awaitingClients == 0) {\r", "-\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\texecuting = true;\r", "+\t\t\t\t\t\t/*boolean status = */job.execute(null);\r", "+\t\t\t\t\t\t//if (status == FAILED) request(job);\r", "+\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\texecuting = false;\r", "+\t\t\t\t\t\tif (VERBOSE) {\r", "+\t\t\t\t\t\t\tJobManager.log(\"DONE executing - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tmoveToNextJob();\r", "+\t\t\t\t\t\tif (this.awaitingClients == 0) {\r", "+\t\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t} catch (InterruptedException e) { // background indexing was interrupted\r", "-\t\t\t} catch (InterruptedException e) { // background indexing was interrupted\r", "+\t\t} catch (RuntimeException e) {\r", "+\t\t\t// log exception\r", "+\t\t\tJavaCore.getPlugin().getLog().log(\r", "+\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\tIJavaModelStatus.ERROR,\r", "+\t\t\t\t\te)\r", "+\t\t\t);\r", "+\t\t\t\r", "+\t\t\t// keep job manager alive\r", "+\t\t\tthis.discardJobs(null);\r", "+\t\t\tthis.thread = null;\r", "+\t\t\tthis.reset(); // this will fork a new thread\r", "+\t\t\tthrow e;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0479cd7c7fb0eba124310f653144599", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "26de20ae619c91a55a35147a34aba32ab3111d61", "commitAfterChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate static boolean updateType(StringBuffer buf, char[] oldType, char[] newType, MergeStrategy mergeStrategy)", "signatureAfterChange": " \tprivate static boolean updateType(StringBuffer buf, char[] oldType, char[] newType, MergeStrategy mergeStrategy)", "diff": ["-\t\tSignatureWrapper oWrap = new SignatureWrapper(oldType, true, true); // may already contain annotations", "-\t\tSignatureWrapper nWrap = new SignatureWrapper(newType, true, true); // may already contain annotations", "-\t\tif (match(buf, oWrap, nWrap, 'L', false)", "-\t\t\t|| match(buf, oWrap, nWrap, 'T', false))", "-\t\t{", "-\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\tbuf.append(oWrap.nextName());", "-\t\t\tnWrap.nextName(); // skip", "-\t\t\tif (match(buf, oWrap, nWrap, '<', false)) {", "-\t\t\t\tdo {", "-\t\t\t\t\tint oStart = oWrap.start;", "-\t\t\t\t\tint nStart = nWrap.start;", "-\t\t\t\t\toWrap.computeEnd();", "-\t\t\t\t\tnWrap.computeEnd();", "-\t\t\t\t\tif (updateType(buf, oWrap.getFrom(oStart), nWrap.getFrom(nStart), mergeStrategy))", "-\t\t\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\t\t} while (!match(buf, oWrap, nWrap, '>', false));", "+\t\ttry {", "+\t\t\tSignatureWrapper oWrap = new SignatureWrapper(oldType, true, true); // may already contain annotations", "+\t\t\tSignatureWrapper nWrap = new SignatureWrapper(newType, true, true); // may already contain annotations", "+\t\t\tif (match(buf, oWrap, nWrap, 'L', false)", "+\t\t\t\t|| match(buf, oWrap, nWrap, 'T', false))", "+\t\t\t{", "+\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\tbuf.append(oWrap.nextName());", "+\t\t\t\tnWrap.nextName(); // skip", "+\t\t\t\tif (match(buf, oWrap, nWrap, '<', false)) {", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\tint oStart = oWrap.start;", "+\t\t\t\t\t\tint nStart = nWrap.start;", "+\t\t\t\t\t\toWrap.computeEnd();", "+\t\t\t\t\t\tnWrap.computeEnd();", "+\t\t\t\t\t\tif (updateType(buf, oWrap.getFrom(oStart), nWrap.getFrom(nStart), mergeStrategy))", "+\t\t\t\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\t\t} while (!match(buf, oWrap, nWrap, '>', false));", "+\t\t\t\t}", "+\t\t\t\tmatch(buf, oWrap, nWrap, ';', true);", "+\t\t\t} else if (match(buf, oWrap, nWrap, '[', false)) {", "+\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\tupdateType(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);", "+\t\t\t} else if (match(buf, oWrap, nWrap, '*', false)", "+\t\t\t\t\t|| match(buf, oWrap, nWrap, '+', false)", "+\t\t\t\t\t|| match(buf, oWrap, nWrap, '-', false))", "+\t\t\t{", "+\t\t\t\treturn true; // annotation allowed after this (not included in oldType / newType)", "+\t\t\t} else {\t\t\t", "+\t\t\t\tbuf.append(oldType);", "-\t\t\tmatch(buf, oWrap, nWrap, ';', true);", "-\t\t} else if (match(buf, oWrap, nWrap, '[', false)) {", "-\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\tupdateType(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);", "-\t\t} else if (match(buf, oWrap, nWrap, '*', false)", "-\t\t\t\t|| match(buf, oWrap, nWrap, '+', false)", "-\t\t\t\t|| match(buf, oWrap, nWrap, '-', false))", "-\t\t{", "-\t\t\treturn true; // annotation allowed after this (not included in oldType / newType)", "-\t\t} else {\t\t\t", "-\t\t\tbuf.append(oldType);", "+\t\t} catch (ArrayIndexOutOfBoundsException aioobe) { // from several locations inside match() or mergeAnnotation().", "+\t\t\tStringBuilder msg = new StringBuilder(\"Structural mismatch between \").append(oldType).append(\" and \").append(newType); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tthrow new IllegalArgumentException(msg.toString(), aioobe);"]}], "num": 18509}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8cca578f4599f9fb061e51ea5bde190", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28837f1f9569665df3e36ed26b8bfc98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "a8a55ef8028ddd96daf4473daaec157ec40ab668", "commitAfterChange": "2c2d8aa7ba193d80394867d2f6025d47f27b1f9e", "methodNumberBeforeChange": 237, "methodNumberAfterChange": 237, "signatureBeforeChange": " \tpublic void test0223() throws JavaModelException", "signatureAfterChange": " \tpublic void test0223() throws JavaModelException", "diff": ["-    \tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-    \tString contents =", "-    \t\t\"public class X {\\n\" +", "-    \t\t\"    @Zork\\n\" +", "-    \t\t\"    public void foo( ) {\\n\" +", "-    \t\t\"    }\\n\" +", "-    \t\t\"}\";", "-\t   \tASTNode node = buildAST(", "+\t\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tString contents =", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"    @Zork\\n\" +", "+\t\t\t\"    public void foo( ) {\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"}\";", "+\t\tASTNode node = buildAST(", "-    \t\t\tthis.workingCopy,", "-    \t\t\tfalse);", "+\t\t\t\tthis.workingCopy,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\ttrue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "909213e43433260e1522b17ce5df3569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void test0095() throws JavaModelException", "signatureAfterChange": " \tpublic void test0095() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"   /*start*/<T> void foo(NonExisting arg) {\\n\" + ", "-\t\t\t\t\"   }/*end*/\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy,", "-\t\t\t\tfalse);", "-\t\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "-\t\t\tassertEquals(", "-\t\t\t\tnull,", "-\t\t\t\tbinding);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"   /*start*/<T> void foo(NonExisting arg) {\\n\" + ", "+\t\t\t\"   }/*end*/\\n\" + ", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy,", "+\t\t\tfalse);", "+\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "+\t\tassertEquals(", "+\t\t\tnull,", "+\t\t\tbinding);"]}], "num": 17112}
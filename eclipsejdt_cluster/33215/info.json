{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f14dc4db26b8e1051b5c6ca3274d56f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36a13ab649df46f92f7db474a5f97c4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/BaseConfigurationBlock.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container)", "signatureAfterChange": " \t \tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container)", "diff": ["+\t", "+\tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container) {", "+\t\tfContext= context;", "+\t\tfProject= project;", "+\t\tfAllKeys= keys;", "+\t\tfContainer= container;", "+\t\t/*", "+\t\tif (container == null) {", "+\t\t\tfManager= new WorkingCopyManager();", "+\t\t} else {", "+\t\t\tfManager= container.getWorkingCopyManager();", "+\t\t}", "+\t\t*/", "+\t\t// Workaround for Bugzilla 115731 - always use our own WCM.", "+\t\tfManager = new WorkingCopyManager();", "+\t\t", "+\t\tif (fProject != null) {", "+\t\t\tfLookupOrder= new IScopeContext[] {", "+\t\t\t\tnew ProjectScope(fProject),", "+\t\t\t\tnew InstanceScope(),", "+\t\t\t\tnew DefaultScope()", "+\t\t\t};", "+\t\t} else {", "+\t\t\tfLookupOrder= new IScopeContext[] {", "+\t\t\t\tnew InstanceScope(),", "+\t\t\t\tnew DefaultScope()", "+\t\t\t};", "+\t\t}", "+\t\t", "+\t\ttestIfOptionsComplete(keys);", "+\t\tif (fProject == null || hasProjectSpecificOptions(fProject)) {", "+\t\t\tfDisabledProjectSettings= null;", "+\t\t} else {", "+\t\t\tfDisabledProjectSettings= new IdentityHashMap<Key, String>();", "+\t\t\tfor (int i= 0; i < keys.length; i++) {", "+\t\t\t\tKey curr= keys[i];", "+\t\t\t\tfDisabledProjectSettings.put(curr, curr.getStoredValue(fLookupOrder, false, fManager));", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tsettingsUpdated();", "+\t\t", "+\t\tfCheckBoxes= new ArrayList<Button>();", "+\t\tfComboBoxes= new ArrayList<Combo>();", "+\t\tfTextBoxes= new ArrayList<Text>(2);", "+\t\tfLabels= new HashMap<Scrollable, Label>();", "+\t\tfExpandedComposites= new ArrayList<ExpandableComposite>();", "+\t}", "-", "-\tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container) {", "-\t\tsuper(context, project, keys, container);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ede0f75c5366d8fba72bdec2ba660de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "bdc003280094677782597954dd2d58945742ba73", "commitAfterChange": "a5428774cbd04bd7c443f0103cafd574e0be40b3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " private ICompilationUnit[] getWorkingCopies()", "signatureAfterChange": " private ICompilationUnit[] getWorkingCopies()", "diff": ["-\t\tcopies = this.workingCopies;", "+\t\tif (this.workingCopyOwner == null) {", "+\t\t\tcopies = JavaModelManager.getJavaModelManager().getWorkingCopies(DefaultWorkingCopyOwner.PRIMARY, false/*don't add primary WCs a second time*/);", "+\t\t\tif (copies == null) {", "+\t\t\t\tcopies = this.workingCopies;", "+\t\t\t} else {", "+\t\t\t\tHashMap pathToCUs = new HashMap();", "+\t\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "+\t\t\t\t\tICompilationUnit unit = copies[i];", "+\t\t\t\t\tpathToCUs.put(unit.getPath(), unit);", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0, length = this.workingCopies.length; i < length; i++) {", "+\t\t\t\t\tICompilationUnit unit = this.workingCopies[i];", "+\t\t\t\t\tpathToCUs.put(unit.getPath(), unit);", "+\t\t\t\t}", "+\t\t\t\tint length = pathToCUs.size();", "+\t\t\t\tcopies = new ICompilationUnit[length];", "+\t\t\t\tpathToCUs.values().toArray(copies);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tcopies = this.workingCopies;", "+\t\t}"]}], "num": 33215}
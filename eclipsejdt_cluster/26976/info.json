{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19c60354bbf316223e1bf30325587c6b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19275669dc417ba39221cb8ee2b97aef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "1cd36da9dd049ac527dcab1976c08155d6c121b9", "commitAfterChange": "f2c2a11caa27156fb260986cef359f78136ce40c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\tif (isField()) {", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tif (this.getDeclaringClass() != null) {", "-\t\t\t\tbuffer.append(this.getDeclaringClass().getKey());", "-\t\t\t}", "-\t\t\tbuffer.append(this.getName());", "-\t\t\treturn buffer.toString();", "-\t\t} else {", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t", "-\t\t\t// declaring method or type", "-\t\t\tLocalVariableBinding localVarBinding = (LocalVariableBinding) this.binding;", "-\t\t\tBlockScope scope = localVarBinding.declaringScope;", "-\t\t\tMethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();", "-\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "-\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding internalBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "-\t\t\t\tIMethodBinding methodBinding = this.resolver.getMethodBinding(internalBinding);", "-\t\t\t\tif (methodBinding != null) {", "-\t\t\t\t\tbuffer.append(methodBinding.getKey());", "+\t\tif (this.key == null) {", "+\t\t\tif (isField()) {", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tif (this.getDeclaringClass() != null) {", "+\t\t\t\t\tbuffer.append(this.getDeclaringClass().getKey());", "-\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = ((TypeDeclaration) referenceContext).binding;", "-\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "-\t\t\t\tif (typeBinding != null) {", "-\t\t\t\t\tbuffer.append(typeBinding.getKey());", "+\t\t\t\tbuffer.append(this.getName());", "+\t\t\t\tthis.key = buffer.toString();", "+\t\t\t} else {", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t", "+\t\t\t\t// declaring method or type", "+\t\t\t\tLocalVariableBinding localVarBinding = (LocalVariableBinding) this.binding;", "+\t\t\t\tBlockScope scope = localVarBinding.declaringScope;", "+\t\t\t\tMethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();", "+\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding internalBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "+\t\t\t\t\tIMethodBinding methodBinding = this.resolver.getMethodBinding(internalBinding);", "+\t\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\t\tbuffer.append(methodBinding.getKey());", "+\t\t\t\t\t}", "+\t\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = ((TypeDeclaration) referenceContext).binding;", "+\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "+\t\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\t\tbuffer.append(typeBinding.getKey());", "+\t\t\t\t\t}", "+\t", "+\t\t\t\t// scope index", "+\t\t\t\tgetKey(scope, buffer);", "+\t", "+\t\t\t\t// variable name", "+\t\t\t\tbuffer.append('/');", "+\t\t\t\tbuffer.append(getName());", "+\t\t\t\t", "+\t\t\t\tthis.key = buffer.toString();", "-", "-\t\t\t// scope index", "-\t\t\tgetKey(((LocalVariableBinding) this.binding).declaringScope, buffer);", "-", "-\t\t\t// variable name", "-\t\t\tbuffer.append('/');", "-\t\t\tbuffer.append(getName());", "-\t\t\t", "-\t\t\treturn buffer.toString();", "+\t\treturn this.key;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa5411bf2ea7c8060355159a61bcb43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public char[] getSource()", "signatureAfterChange": " public char[] getSource()", "diff": ["+\tif (this.source != null) return source;", "-\t\t\treturn buffer.getCharacters();", "+\t\t\tthis.source = buffer.getCharacters();", "-\t\t\treturn Util.getResourceContentsAsCharArray((IFile)this.resource);", "+\t\t\tthis.source = Util.getResourceContentsAsCharArray((IFile)this.resource);", "-\t\t\treturn this.locator.findSource(classFile);", "-\t\t} else {", "-\t\t\treturn null;", "+\t\t\tthis.source = this.locator.findSource(classFile);", "-\t\treturn null;", "+\treturn this.source;"]}], "num": 26976}
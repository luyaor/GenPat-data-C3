{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2e9b7fb48e071a6d255b2d538f6faf7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba2b784b421cd418f4b4455cdafadef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tpublic boolean hasRangeCopySources(ASTNode parent, StructuralPropertyDescriptor property)", "signatureAfterChange": " \t \tprivate void revertListWithRanges(RewriteEvent[] childEvents, Set placeholders, List revertedChildren)", "diff": ["-\t", "-\tpublic boolean hasRangeCopySources(ASTNode parent, StructuralPropertyDescriptor property) {", "-\t\tif (this.rangeCopySources == null) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tfor (int i= 0; i < this.rangeCopySources.size(); i++) {", "-\t\t\tCopySourceInfo curr= (CopySourceInfo) this.rangeCopySources.get(i);", "-\t\t\tif (curr.parent == parent && curr.childProperty == property) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t", "+\tprivate void revertListWithRanges(RewriteEvent[] childEvents, Set placeholders, List revertedChildren) {", "+\t\tfor (int i= 0; i < childEvents.length; i++) {", "+\t\t\tRewriteEvent event= childEvents[i];", "+\t\t\tASTNode node= (ASTNode) event.getOriginalValue();", "+\t\t\tif (placeholders.contains(node)) {", "+\t\t\t\tRewriteEvent[] placeholderChildren= getListEvent(node, Block.STATEMENTS_PROPERTY, false).getChildren();", "+\t\t\t\trevertListWithRanges(placeholderChildren, placeholders, revertedChildren);", "+\t\t\t} else {", "+\t\t\t\trevertedChildren.add(event);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8abd1cb38d7555dd8835dbe8ecd7802", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "8e09a020c985a5c59c2f77650ea0c690b64e1566", "commitAfterChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected void updateLineEnd()", "signatureAfterChange": " \tprotected boolean pushThrowName(Object typeRef, boolean real)", "diff": ["-\tprotected void updateLineEnd() {", "-\t\twhile (this.index > (this.lineEnd+1)) {", "-\t\t\tif (this.linePtr < this.lastLinePtr) {", "-\t\t\t\tthis.lineEnd = this.sourceParser.scanner.getLineEnd(++this.linePtr) - 1;", "-\t\t\t} else {", "-\t\t\t\tthis.lineEnd = this.endComment;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tthis.lineStarted = false;", "+\t */", "+\tprotected boolean pushThrowName(Object typeRef, boolean real) {", "+\t\tif (this.astLengthPtr == -1) { // First push", "+\t\t\tpushOnAstStack(null, true);", "+\t\t\tpushOnAstStack(typeRef, true);", "+\t\t} else {", "+\t\t\tswitch (this.astLengthPtr % ORDERED_TAGS_NUMBER) {", "+\t\t\t\tcase PARAM_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @param tag => push new @throws tag", "+\t\t\t\t\tpushOnAstStack(typeRef, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase THROWS_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @throws tag => push another @throws tag", "+\t\t\t\t\tpushOnAstStack(typeRef, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SEE_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @see tag => push empty @param and new @throws tags", "+\t\t\t\t\tpushOnAstStack(null, true);", "+\t\t\t\t\tpushOnAstStack(typeRef, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\treturn true;", "+\t}"]}], "num": 19433}
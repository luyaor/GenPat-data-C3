{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34e9f09435cc7b2da71f028739da93f6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3be34da07a1fbc41c40d2d08d3d4cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "a6002c5b8e946e1be020c41b3eb8e042f8637f31", "commitAfterChange": "ed3347ae7ec216d556b809af245174ad70158540", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["+ \t\t\tif (timeOut == 0) {", "+ \t\t\t\t// don't try to fetch the values", "+ \t\t\t\treturn this.parameterNames = getRawParameterNames(paramCount);", "+ \t\t\t} if (timeOut == -1) {", "+ \t\t\t\ttimeOut = 0; // infinite time out, wait until the fetching is complete", "+ \t\t\t}", "+\t\t\t\t\t\t// this call has a side-effect on the per project info cache"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9104ffc3c6cf5bec124bff10f206ca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "be3b8398abdd134469cb25f74becb573498bac14", "commitAfterChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "diff": ["-\t\t\t\t\tif (isCamelCase) return false;", "-\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);", "+\t\t\t\t\tif (!isCamelCase) {", "+\t\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);", "+\t\t\t\t\t}", "+\t\t\t\t\t// fall through next case to match as prefix if camel case failed"]}], "num": 17537}
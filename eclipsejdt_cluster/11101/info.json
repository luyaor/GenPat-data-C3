{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11b3948c1ab49c8a1d29ed0b3396c8f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be844b5c000e33eea8a07674bd773629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void checkAndSetModifiers()", "signatureAfterChange": " \t \tprivate void checkAndSetModifiers()", "diff": ["-\t\tSourceTypeBinding sourceType = referenceContext.binding;", "+\t\tSourceTypeBinding sourceType = this.referenceContext.binding;", "-\t\t\t\tproblemReporter().illegalLocalTypeDeclaration(referenceContext);", "+\t\t\t\tproblemReporter().illegalLocalTypeDeclaration(this.referenceContext);", "-\t\t\t    if (referenceContext.allocation.type == null)", "+\t\t\t    if (this.referenceContext.allocation.type == null)", "-\t\t\t\t\tif ((referenceContext.bits & ASTNode.HasAbstractMethods) != 0) {", "+\t\t\t\t\tif ((this.referenceContext.bits & ASTNode.HasAbstractMethods) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feeb08c19945eebbecbf5b48dfc94127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tconstant = NotAConstant;", "+\t\tthis.constant = NotAConstant;", "-\t\tdelegateThis = scope.getField(snippetType, DELEGATE_THIS, this);", "-\t\tif (delegateThis == null) return null; // internal error, field should have been found", "-\t\tif (delegateThis.isValidBinding()) return this.resolvedType = delegateThis.type;", "+\t\tthis.delegateThis = scope.getField(snippetType, DELEGATE_THIS, this);", "+\t\tif (this.delegateThis == null) return null; // internal error, field should have been found", "+\t\tif (this.delegateThis.isValidBinding()) return this.resolvedType = this.delegateThis.type;"]}], "num": 11101}
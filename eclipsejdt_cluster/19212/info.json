{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb7bb1ce930517425bda382200bc011f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43d3dcb7032a3330a206d0090f007634", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " protected int resolveLevelForType (char[] simpleNamePattern, \t\t\t\t\t\t\t\t\tchar[] qualificationPattern, \t\t\t\t\t\t\t\t\tchar[][] typeNames, \t\t\t\t\t\t\t\t\tint[] wildcards, \t\t\t\t\t\t\t\t\tboolean mustResolve, \t\t\t\t\t\t\t\t\tboolean declaration, \t\t\t\t\t\t\t\t\tTypeBinding type)", "signatureAfterChange": " protected int resolveLevelForType (char[] simpleNamePattern, \t\t\t\t\t\t\t\t\tchar[] qualificationPattern, \t\t\t\t\t\t\t\t\tchar[] patternTypeSignature, \t\t\t\t\t\t\t\t\tboolean mustResolve, \t\t\t\t\t\t\t\t\tboolean declaration, \t\t\t\t\t\t\t\t\tTypeBinding type)", "diff": ["-\t\t\t\t\t\t\t\t\tchar[][] typeNames,", "-\t\t\t\t\t\t\t\t\tint[] wildcards,", "+\t\t\t\t\t\t\t\t\tchar[] patternTypeSignature,", "-\tif (type == null) return level;", "+\tif (type == null || patternTypeSignature == null) return level;", "-\tif (typeNames == null || typeNames.length == 0) {", "+\tchar[][] patternTypeArguments = Signature.getTypeArguments(patternTypeSignature);", "+\tif (patternTypeArguments == null || patternTypeArguments.length == 0) {", "-\t", "+", "-\t\tint length = typeNames.length;", "+\t\tint length = patternTypeArguments.length;", "-\t\t\t\tif (resolveLevelForType(enclosingSimpleNamePattern, enclosingQualificationPattern, typeNames, wildcards, mustResolve, declaration, paramTypeBinding.enclosingType()) == IMPOSSIBLE_MATCH) {", "+\t\t\t\tif (resolveLevelForType(enclosingSimpleNamePattern, enclosingQualificationPattern, patternTypeSignature, mustResolve, declaration, paramTypeBinding.enclosingType()) == IMPOSSIBLE_MATCH) {", "-\t\tint length = typeNames.length;", "+\t\tint length = patternTypeArguments.length;", "-\t\t\tchar[] argType = typeNames[i];", "+\t\t\tchar[] typeArgument = patternTypeArguments[i];", "-\t\t\tint patternWildcard = wildcards == null ? -1 : wildcards[i];", "-\t\t\tif (patternWildcard == Wildcard.UNBOUND) continue; // unbound parameter always match", "-", "-\t\t\t// try to resolve pattern", "-\t\t\tTypeBinding patternBinding = getTypeNameBinding(i);", "-\t\t\tif (patternBinding != null) {", "-\t\t\t\t// We can bind pattern type name => verify that types are compatible", "-\t\t\t\tif (argTypeBinding == patternBinding) continue;", "-\t\t\t\tif (argTypeBinding.isWildcard()) {", "-\t\t\t\t\tTypeBinding bound = ((WildcardBinding) argTypeBinding).bound;", "-\t\t\t\t\tswitch (patternWildcard) {", "-\t\t\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\t\t\tif (bound == null || patternBinding.isCompatibleWith(bound))", "-\t\t\t\t\t\t\t\t// argument type is in bound hierarchy => match", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\t\t\tif (bound == null || bound.isCompatibleWith(patternBinding))", "-\t\t\t\t\t\t\t\t// argument type is a subclass of bound => match", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault: //UNBOUND", "-\t\t\t\t\t\t\t// there's no bound name => match", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\tswitch (patternTypeArguments[i][0]) {", "+\t\t\t\tcase Signature.C_STAR : // unbound parameter always match", "+\t\t\t\tcase Signature.C_SUPER : // needs pattern type parameter binding", "+\t\t\t\t\t// skip to next type argument as it will be resolved later", "+\t\t\t\t\tcontinue;", "+\t\t\t\tcase Signature.C_EXTENDS :", "+\t\t\t\t\t// remove wildcard from patter type argument", "+\t\t\t\t\ttypeArgument = CharOperation.subarray(typeArgument, 1, typeArgument.length);", "+\t\t\t\tdefault :", "+\t\t\t\t\t// no wildcard", "+\t\t\t\t\tbreak;", "-\t\t\t", "-\t\t\t// pattern hasn't be solved, try to see if names match in hierarchy", "+\t\t\t// get pattern type argument from its signature", "+\t\t\ttypeArgument = Signature.toCharArray(typeArgument);", "+", "+\t\t\t// Verify that names match...", "-\t\t\t\t\tif (CharOperation.equals(argType, boundBinding.shortReadableName(), this.isCaseSensitive) ||", "-\t\t\t\t\t\tCharOperation.equals(argType, boundBinding.readableName(), this.isCaseSensitive)) {", "+\t\t\t\t\tif (CharOperation.equals(typeArgument, boundBinding.shortReadableName(), this.isCaseSensitive) ||", "+\t\t\t\t\t\tCharOperation.equals(typeArgument, boundBinding.readableName(), this.isCaseSensitive)) {", "-\t\t\t\tif (!CharOperation.equals(argType, argTypeBinding.shortReadableName(), this.isCaseSensitive) &&", "-\t\t\t\t\t!CharOperation.equals(argType, argTypeBinding.readableName(), this.isCaseSensitive)) {", "+\t\t\t\tif (!CharOperation.equals(typeArgument, argTypeBinding.shortReadableName(), this.isCaseSensitive) &&", "+\t\t\t\t\t!CharOperation.equals(typeArgument, argTypeBinding.readableName(), this.isCaseSensitive)) {", "-\t\t\t\t\tif (CharOperation.equals(argType, refBinding.shortReadableName(), this.isCaseSensitive) ||", "-\t\t\t\t\t\tCharOperation.equals(argType, refBinding.readableName(), this.isCaseSensitive)) {", "+\t\t\t\t\tif (CharOperation.equals(typeArgument, refBinding.shortReadableName(), this.isCaseSensitive) ||", "+\t\t\t\t\t\tCharOperation.equals(typeArgument, refBinding.readableName(), this.isCaseSensitive)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee2968cc6b7f54c341ed12d1ef32bf1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "0492d8e41c1aba4d81d43f5d644f4506ed10c8ab", "commitAfterChange": "cbb80b4c969d064367ed598ba99f074660c726c6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context) throws InferenceFailureException", "diff": ["+\t// Driver for the real workhorse - Implements generational incorporation a la generational garbage collector. ", "+\tboolean incorporate(InferenceContext18 context) throws InferenceFailureException {", "+\t\t", "+\t\tif (this.unincorporatedBoundsCount == 0 && this.captures.size() == 0)", "+\t\t\treturn true;", "+\t\t", "+\t\tdo {", "+\t\t\tTypeBound [] freshBounds;", "+\t\t\tSystem.arraycopy(this.unincorporatedBounds, 0, freshBounds = new TypeBound[this.unincorporatedBoundsCount], 0, this.unincorporatedBoundsCount);", "+\t\t\tthis.unincorporatedBoundsCount = 0;", "+\t\t\t", "+\t\t\t// Pairwise bidirectional compare all bounds from previous generation with the fresh set.", "+\t\t\tif (!incorporate(context, this.incorporatedBounds, freshBounds))", "+\t\t\t\treturn false;", "+\t\t\t// Pairwise bidirectional compare all fresh bounds. ", "+\t\t\tif (!incorporate(context, freshBounds, freshBounds))", "+\t\t\t\treturn false;", "+\t\t\tthis.captures.clear();", "+\t\t\t", "+\t\t\t// Merge the bounds into one incorporated generation.", "+\t\t\tfinal int incorporatedLength = this.incorporatedBounds.length;", "+\t\t\tfinal int unincorporatedLength = freshBounds.length;", "+\t\t\tTypeBound [] aggregate = new TypeBound[incorporatedLength + unincorporatedLength];", "+\t\t\tSystem.arraycopy(this.incorporatedBounds, 0, aggregate, 0, incorporatedLength);", "+\t\t\tSystem.arraycopy(freshBounds, 0, aggregate, incorporatedLength, unincorporatedLength);", "+\t\t\tthis.incorporatedBounds = aggregate;", "+\t\t\t", "+\t\t} while (this.unincorporatedBoundsCount > 0);", "+\t\t", "+\t\treturn true;", "+\t}", "-\tboolean incorporate(InferenceContext18 context) throws InferenceFailureException {", "-\t\tif (this.isIncorporated)", "-\t\t\treturn true;", "-\t\tdo {", "-\t\t\tthis.isIncorporated = true;", "-\t\t\t// using a flattened copy also allows us to insert more bounds during the process", "-\t\t\t// without disturbing the current round of incorporation:", "-\t\t\tTypeBound[] bounds = flatten();", "-\t\t\tint boundsCount = bounds.length;", "-\t\t\tif (boundsCount < 2)", "-\t\t\t\treturn true;", "-\t\t\t// check each pair:", "-\t\t\tfor (int i = 0; i < boundsCount; i++) {", "-\t\t\t\tTypeBound boundI = bounds[i];", "-\t\t\t\tfinal boolean setHasI = boundI.id < this.incorporatedBounds.length && this.incorporatedBounds[boundI.id] == true;", "-\t\t\t\tfor (int j = i+1; j < boundsCount; j++) {", "-\t\t\t\t\tTypeBound boundJ = bounds[j];", "-\t\t\t\t\tif (setHasI && boundJ.id < this.incorporatedBounds.length && this.incorporatedBounds[boundJ.id] == true)", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (!setHasI) {", "-\t\t\t\t\tint length = this.incorporatedBounds.length;", "-\t\t\t\t\tif (boundI.id >= length)", "-\t\t\t\t\t\tSystem.arraycopy(this.incorporatedBounds, 0, this.incorporatedBounds = new boolean[boundI.id * 2], 0, length);", "-\t\t\t\t\tthis.incorporatedBounds[boundI.id] = true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t/* TODO: are we sure this will always terminate? Cf. e.g. (Discussion in 18.3):", "-\t\t\t *  ", "-\t\t\t *    \"The assertion that incorporation reaches a fixed point oversimplifies the matter slightly. ...\"", "-\t\t\t */", "-\t\t\tIterator<Entry<ParameterizedTypeBinding, ParameterizedTypeBinding>> captIter = this.captures.entrySet().iterator();", "-\t\t\twhile (captIter.hasNext()) {", "-\t\t\t\tEntry<ParameterizedTypeBinding, ParameterizedTypeBinding> capt = captIter.next();", "-\t\t\t\tParameterizedTypeBinding gAlpha = capt.getKey();", "-\t\t\t\tParameterizedTypeBinding gA = capt.getValue();", "-\t\t\t\tReferenceBinding g = (ReferenceBinding) gA.original();", "-\t\t\t\tfinal TypeVariableBinding[] parameters = g.typeVariables();", "-\t\t\t\t// construct theta = [P1:=alpha1,...]", "-\t\t\t\tfinal InferenceVariable[] alphas = new InferenceVariable[gAlpha.arguments.length];", "-\t\t\t\tSystem.arraycopy(gAlpha.arguments, 0, alphas, 0, alphas.length);", "-\t\t\t\tInferenceSubstitution theta = new InferenceSubstitution(context.environment, alphas) {", "-\t\t\t\t\t@Override", "-\t\t\t\t\tprotected TypeBinding getP(int i) {", "-\t\t\t\t\t\treturn parameters[i];", "-\t\t\t\t};", "-\t\t\t\tfor (int i = 0, length = parameters.length; i < length; i++) {", "-\t\t\t\t\t// A set of bounds on \u03b11, ..., \u03b1n, constructed from the declared bounds of P1, ..., Pn as described in 18.1.3, is immediately implied.", "-\t\t\t\t\tTypeVariableBinding pi = parameters[i];", "-\t\t\t\t\tInferenceVariable alpha = (InferenceVariable) gAlpha.arguments[i];", "-\t\t\t\t\taddBounds(pi.getTypeBounds(alpha, theta), context.environment);", "-\t\t\t\t\tTypeBinding ai = gA.arguments[i];", "-\t\t\t\t\tif (ai instanceof WildcardBinding) {", "-\t\t\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding)ai;", "-\t\t\t\t\t\tTypeBinding t = wildcardBinding.bound;", "-\t\t\t\t\t\tThreeSets three = this.boundsPerVariable.get(alpha.prototype());", "-\t\t\t\t\t\tif (three != null) {", "-\t\t\t\t\t\t\tIterator<TypeBound> it;", "-\t\t\t\t\t\t\tif (three.sameBounds != null) {", "-\t\t\t\t\t\t\t\t//  \u03b1 = R implies false", "-\t\t\t\t\t\t\t\tit = three.sameBounds.iterator();", "-\t\t\t\t\t\t\t\twhile (it.hasNext()) {", "-\t\t\t\t\t\t\t\t\tTypeBound bound = it.next();", "-\t\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable))", "-\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (three.subBounds != null && pi.firstBound != null) {", "-\t\t\t\t\t\t\t\t// If Bi is Object, \u03b1 <: R implies \u27e8T <: R\u27e9\t(extends wildcard)", "-\t\t\t\t\t\t\t\t// \u03b1 <: R implies \u27e8\u03b8 Bi <: R\u27e9\t\t\t\t(else) ", "-\t\t\t\t\t\t\t\tit = three.subBounds.iterator();", "-\t\t\t\t\t\t\t\twhile (it.hasNext()) {", "-\t\t\t\t\t\t\t\t\tTypeBound bound = it.next();", "-\t\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable)) {", "-\t\t\t\t\t\t\t\t\t\tTypeBinding r = bound.right;", "-\t\t\t\t\t\t\t\t\t\tTypeBinding bi1 = pi.firstBound;", "-\t\t\t\t\t\t\t\t\t\tReferenceBinding[] otherBounds = pi.superInterfaces;", "-\t\t\t\t\t\t\t\t\t\tTypeBinding bi;", "-\t\t\t\t\t\t\t\t\t\tif (otherBounds == Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\t\t\t\t\t\tbi = bi1;", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tint n = otherBounds.length+1;", "-\t\t\t\t\t\t\t\t\t\t\tReferenceBinding[] allBounds = new ReferenceBinding[n];", "-\t\t\t\t\t\t\t\t\t\t\tallBounds[0] = (ReferenceBinding) bi1; // TODO is this safe?", "-\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(otherBounds, 0, allBounds, 1, n-1);", "-\t\t\t\t\t\t\t\t\t\t\tbi = new IntersectionCastTypeBinding(allBounds, context.environment);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\taddTypeBoundsFromWildcardBound(context, theta, wildcardBinding.boundKind, t, r, bi);", "-//\t\t\t\t\t\t\t\t\t\tif (otherBounds != null) {", "-//\t\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < otherBounds.length; j++) {", "-//\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding tj = otherBounds[j];", "-//\t\t\t\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(tj, t))", "-//\t\t\t\t\t\t\t\t\t\t\t\t\taddTypeBoundsFromWildcardBound(context, wildcardBinding, tj, r, bij);", "-//\t\t\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (three.superBounds != null) {", "-\t\t\t\t\t\t\t\t//  R <: \u03b1 implies \u27e8R <: T\u27e9  (super wildcard)", "-\t\t\t\t\t\t\t\t//  R <: \u03b1 implies false\t (else) ", "-\t\t\t\t\t\t\t\tit = three.superBounds.iterator();", "-\t\t\t\t\t\t\t\twhile (it.hasNext()) {", "-\t\t\t\t\t\t\t\t\tTypeBound bound = it.next();", "-\t\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable)) {", "-\t\t\t\t\t\t\t\t\t\tif (wildcardBinding.boundKind == Wildcard.SUPER)", "-\t\t\t\t\t\t\t\t\t\t\treduceOneConstraint(context, ConstraintTypeFormula.create(bound.right, t, ReductionResult.SUBTYPE));", "-\t\t\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\taddBound(new TypeBound(alpha, ai, ReductionResult.SAME), context.environment);", "-\t\t\tthis.captures.clear();", "-\t\t} while (!this.isIncorporated);"]}], "num": 19212}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44d615af685c68013893626cec0c9e5d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49cadf49b98b06fe5858061b94dfe662", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "835454076c7c84a3d008630e11d7802ddd16d580", "commitAfterChange": "dfc6a6fda29de48e066662fb088bf2e300f9b1e1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t\t \tprivate static APTResult runAPT(final List<AnnotationProcessorFactory> factories, \t\t\tIJavaProject javaProj, IFile file,  \t\t\tICompilationUnit compilationUnit )", "diff": ["+\tprivate static APTResult runAPT(final List<AnnotationProcessorFactory> factories,", "+\t\t\tIJavaProject javaProj, IFile file, ", "+\t\t\tICompilationUnit compilationUnit )", "+\t{", "+\t\t", "+\t\tAptDispatchRunnable runnable;", "+\t\tif ( file != null )", "+\t\t\t runnable = new AptDispatchRunnable( file, javaProj, factories );", "+\t\telse", "+\t\t\trunnable = new AptDispatchRunnable( compilationUnit, javaProj, factories );", "+\t\t", "+\t\tIWorkspace w = ResourcesPlugin.getWorkspace();", "+\t\ttry", "+\t\t\tw.run( runnable, null );", "-", "-\tprivate static APTResult runAPT(", "-\t\t\tfinal List<AnnotationProcessorFactory> factories,", "-\t\t\tfinal ProcessorEnvImpl processorEnv) ", "-\t{", "-\t\ttry {", "-\t\t\tif (factories.size() == 0)", "-\t\t\t{", "-\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because there are no factories\");", "-\t\t\t\treturn EMPTY_APT_RESULT;", "-\t\t\t}", "-\t\t\t\t", "-\t\t\tif ( ! processorEnv.getFile().exists() )", "-\t\t\t{", "-\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because file doesn't exist\");", "-\t\t\t\treturn EMPTY_APT_RESULT;", "-\t\t\t}", "-\t\t\t\t", "-\t\t\t// clear out all the markers from the previous round.", "-\t\t\tfinal String markerType = processorEnv.getPhase() == ProcessorEnvImpl.Phase.RECONCILE ? ProcessorEnvImpl.RECONCILE_MARKER", "-\t\t\t\t\t: ProcessorEnvImpl.BUILD_MARKER;", "-\t\t\ttry {", "-\t\t\t\tprocessorEnv.getFile().deleteMarkers(markerType, true,", "-\t\t\t\t\t\tIResource.DEPTH_INFINITE);", "-", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tthrow new IllegalStateException(e);", "-\t\t\t}", "-\t\t\tfinal Map<String, AnnotationTypeDeclaration> annotationDecls = getAnnotationTypeDeclarations(", "-\t\t\t\t\tprocessorEnv.getAstCompilationUnit(), processorEnv);", "-\t\t\t", "-\t\t\tif (annotationDecls.isEmpty())", "-\t\t\t{", "-\t\t\t\tif ( DEBUG ) trace ( \"runAPT:  leaving early because annotationDecls is empty\" );", "-\t\t\t\treturn EMPTY_APT_RESULT;", "-\t\t\t}", "-", "-\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( processorEnv.getJavaProject().getProject() );", "-\t\t\tSet<IFile> lastGeneratedFiles = gfm.getGeneratedFilesForParent( processorEnv.getFile() );", "-\t\t\t", "-\t\t\tfor (int i = 0, size = factories.size(); i < size; i++) {", "-\t\t\t\tfinal AnnotationProcessorFactory factory = (AnnotationProcessorFactory) factories.get(i);", "-\t\t\t\tSet<AnnotationTypeDeclaration> factoryDecls = getAnnotations(factory, annotationDecls);", "-\t\t\t\tboolean done = false;", "-\t\t\t\tif( factoryDecls != null ){", "-\t\t\t\t\tif(factoryDecls.size() == 0 ){", "-\t\t\t\t\t\tdone = true;", "-\t\t\t\t\t\tfactoryDecls = new HashSet(annotationDecls.values());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (factoryDecls != null && factoryDecls.size() > 0) {", "-\t\t\t\t\tfinal AnnotationProcessor processor = factory", "-\t\t\t\t\t\t\t.getProcessorFor(factoryDecls, processorEnv);", "-\t\t\t\t\tif (processor != null)", "-\t\t\t\t\t{", "-\t\t\t\t\t\tif ( DEBUG ) trace( \"runAPT: invoking processor \" + processor.getClass().getName() );", "-\t\t\t\t\t\tprocessor.process();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\tif (annotationDecls.isEmpty() || done)", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\t// TODO: (theodora) log unclaimed annotations.", "-", "-\t\t\t// notify the processor listeners", "-\t\t\tfinal Set<AnnotationProcessorListener> listeners = processorEnv", "-\t\t\t\t\t.getProcessorListeners();", "-\t\t\tfor (AnnotationProcessorListener listener : listeners) {", "-\t\t\t\tEclipseRoundCompleteEvent event = null;", "-\t\t\t\tif (listener instanceof RoundCompleteListener) {", "-\t\t\t\t\tif (event == null)", "-\t\t\t\t\t\tevent = new EclipseRoundCompleteEvent(processorEnv);", "-\t\t\t\t\tfinal RoundCompleteListener rcListener = (RoundCompleteListener) listener;", "-\t\t\t\t\trcListener.roundComplete(event);", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tfinal Set<IFile> allGeneratedFiles = new HashSet<IFile>();", "-\t\t\tSet<IFile> modifiedFiles = new HashSet<IFile>();", "-\t\t\tMap<IFile, Boolean> filesMap = processorEnv.getGeneratedFiles();", "-\t\t\tfor (Map.Entry<IFile, Boolean> entry : filesMap.entrySet()) {", "-\t\t\t\tallGeneratedFiles.add(entry.getKey());", "-\t\t\t\tif (entry.getValue()) {", "-\t\t\t\t\tmodifiedFiles.add(entry.getKey());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// any files that were generated for this parent on the last", "-\t\t\t// run, but are no longer generated should be removed", "-\t\t\tSet<IFile> deletedFiles = cleanupNoLongerGeneratedFiles( processorEnv.getFile(), lastGeneratedFiles, allGeneratedFiles, gfm );", "-", "-\t\t\tAPTResult result = new APTResult( modifiedFiles, deletedFiles, processorEnv.getTypeDependencies() );", "-\t\t\tprocessorEnv.close();", "-\t\t\treturn result;", "-", "-\t\t\t// log unclaimed annotations.", "-\t\t} catch (Throwable t) {", "-\t\t\tt.printStackTrace();", "-\t\t}", "-\t\treturn EMPTY_APT_RESULT;", "-\t}", "+\t\tcatch( CoreException ce )", "+\t\t\t// TODO:  deal with this exception", "+\t\t\tce.printStackTrace();", "+\t\t\t", "+\t\treturn runnable.getResult();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbab33ea9983252b5105a8b85aa0dc19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\t\t\t\t", "+\t\t\t// TODO: put the short circuit back in!!! (theodora)", "+\t\t\t/*\t\t\t", "-\t\t", "-\t\t\tfinal Map<String, AnnotationTypeDeclaration> annotationDecls = getAnnotationTypeDeclarations(", "-\t\t\t\t\tprocessorEnv.getAstCompilationUnit(), processorEnv);", "-\t\t\t", "-\t\t\tif (annotationDecls.isEmpty())", "-\t\t\t{", "-\t\t\t\tif ( AptPlugin.DEBUG ) trace( \"runAPT:  leaving early because annotationDecls is empty\" ); //$NON-NLS-1$", "-\t\t\t\treturn EMPTY_APT_RESULT;", "-\t\t\t}", "-", "+\t\t*/", "-\t\t\tSet<IFile> lastGeneratedFiles = gfm.getGeneratedFilesForParent( processorEnv.getFile() );", "-\t\t\t", "-\t\t\tfor (int i = 0, size = factories.size(); i < size; i++) {", "-\t\t\t\tfinal AnnotationProcessorFactory factory = factories.get(i);", "-\t\t\t\tSet<AnnotationTypeDeclaration> factoryDecls = getAnnotations(factory, annotationDecls);", "-\t\t\t\tboolean done = false;", "-\t\t\t\tif( factoryDecls != null ){", "-\t\t\t\t\tif(factoryDecls.size() == 0 ){", "-\t\t\t\t\t\tdone = true;", "-\t\t\t\t\t\tfactoryDecls = new HashSet(annotationDecls.values());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (factoryDecls != null && factoryDecls.size() > 0) {", "-\t\t\t\t\tfinal AnnotationProcessor processor = factory", "-\t\t\t\t\t\t\t.getProcessorFor(factoryDecls, processorEnv);", "-\t\t\t\t\tif (processor != null)", "-\t\t\t\t\t{", "-\t\t\t\t\t\tif ( AptPlugin.DEBUG ) trace( \"runAPT: invoking processor \" + processor.getClass().getName() ); //$NON-NLS-1$", "-                        processorEnv.setLatestProcessor(processor);", "-\t\t\t\t\t\tprocessor.process();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\tif (annotationDecls.isEmpty() || done)", "-\t\t\t\t\tbreak;", "+\t\t\tfinal Set<IFile> lastGeneratedFiles = new HashSet<IFile>();", "+\t\t\tfor( int i=0, len=_filesToProcess.length; i<len; i++ ){", "+\t\t\t\tfinal Set<IFile> genFiles = gfm.getGeneratedFilesForParent( _filesToProcess[i] );", "+\t\t\t\tif( genFiles != null )", "+\t\t\t\t\tlastGeneratedFiles.addAll(genFiles);", "-\t\t\t// TODO: (theodora) log unclaimed annotations.", "+\t\t\t", "+\t\t\tif( shouldDispatchToBatchProcessor(factories, processorEnv) )", "+\t\t\t\trunAPTInMixedMode(factories, processorEnv);", "+\t\t\telse", "+\t\t\t\trunAPTInFileBasedMode(factories, processorEnv);", "+\t\t\t", "-\t\t\tSet<IFile> deletedFiles = cleanupNoLongerGeneratedFiles( processorEnv.getFile(), processorEnv.getCompilationUnit(), lastGeneratedFiles, allGeneratedFiles, gfm );", "+\t\t\tSet<IFile> allDeletedFiles = new HashSet<IFile>();", "+\t\t\tfor( int i=0, len=_filesToProcess.length; i<len; i++ ){", "+\t\t\t\tfinal Set<IFile> deletedFiles = ", "+\t\t\t\t\tcleanupNoLongerGeneratedFiles( _filesToProcess[i], processorEnv.getCompilationUnit(), lastGeneratedFiles, allGeneratedFiles, gfm );", "+\t\t\t\tif(deletedFiles != null )", "+\t\t\t\t\tallDeletedFiles.addAll(deletedFiles);\t\t", "+\t\t\t}", "+\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t  deletedFiles, ", "+\t\t\t\t\t\t\t\t\t\t\t  allDeletedFiles, ", "-\t\t\tAptPlugin.log(t, \"Unexpected failure running APT \" + _file); //$NON-NLS-1$", "+\t\t\tAptPlugin.log(t, \"Unexpected failure running APT \" + getFileNameForPrint()); //$NON-NLS-1$", "+\t}"]}], "num": 58509}
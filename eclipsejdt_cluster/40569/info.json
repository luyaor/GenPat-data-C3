{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "707204315a0404e2ea6f32227487b56e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10333b5e26dee5ea6728da5059215350", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "259752fd2611ae86a8e7deb13311cd77026ab6f4", "commitAfterChange": "4725cc4b92cda70d0724324edfd82ed8a46041bc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate IBinding internalResolveNameForSimpleName(Name name)", "signatureAfterChange": "  \tprivate IBinding internalResolveNameForSimpleName(Name name)", "diff": ["-\t\tif (node instanceof SingleNameReference) {", "+\t\tif (node instanceof CompilationUnitDeclaration) {", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = (CompilationUnitDeclaration) node;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\tif (types == null || types.length == 0) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration type = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) types[0];", "+\t\t\tif (type != null) {", "+\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(type.binding);", "+\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\treturn typeBinding.getPackage();", "+\t\t\t}", "+\t\t} else if (node instanceof AbstractMethodDeclaration) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) node;", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(methodDeclaration.binding);", "+\t\t\t\tif (methodBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, node);", "+\t\t\t\treturn methodBinding;", "+\t\t\t}", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "+\t\t\tif (typeBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.bindingsToAstNodes.put(typeBinding, node);", "+\t\t\treturn typeBinding;", "+\t\t} if (node instanceof SingleNameReference) {", "-\t\t\tif (singleTypeReference.binding == null) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\treturn this.getTypeBinding(singleTypeReference.binding.leafComponentType());", "-\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "-\t\t\treturn this.getVariableBinding(fieldDeclaration.binding);", "-\t\t}", "-\t\treturn null;", "-\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding binding = singleTypeReference.binding;", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\treturn this.getVariableBinding(fieldDeclaration.binding);", "+\t\t} else if (node instanceof MessageSend) {", "+\t\t\tMessageSend messageSend = (MessageSend) node;", "+\t\t\treturn getMethodBinding(messageSend.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e121335bf8c1c7038e3a7e51ce62fd28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "f6b4fd201225783143c8aa7d615f417f01e17763", "commitAfterChange": "99dc83c87acb33ba34a918de9dea75beba3da624", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t}\t\t\t", "-\t\treturn null;", "+\t\t} else {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t", "+\t\t\t// declaring method or type", "+\t\t\tLocalVariableBinding localVarBinding = (LocalVariableBinding) this.binding;", "+\t\t\tBlockScope scope = localVarBinding.declaringScope;", "+\t\t\tMethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();", "+\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding internalBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "+\t\t\t\tIMethodBinding methodBinding = this.resolver.getMethodBinding(internalBinding);", "+\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\tbuffer.append(methodBinding.getKey());", "+\t\t\t\t}", "+\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = ((TypeDeclaration) referenceContext).binding;", "+\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "+\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\tbuffer.append(typeBinding.getKey());", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t// scope index", "+\t\t\tgetKey(((LocalVariableBinding) this.binding).declaringScope, buffer);", "+", "+\t\t\t// variable name", "+\t\t\tbuffer.append('/');", "+\t\t\tbuffer.append(getName());", "+\t\t\t", "+\t\t\treturn buffer.toString();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a6052c70fc497f763ddfff9db49987", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "e0e6245d2f5b446cd8eba278aee2ec57c56c32e6", "commitAfterChange": "b42787861f816a2d5e1ca0d96a18df1cf4233d07", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate static void reportProblems(CompilationUnitDeclaration unit, IAbstractSyntaxTreeVisitor visitor)", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration parse(char[] source, NodeSearcher nodeSearcher, Map settings)", "diff": ["-\tprivate static void reportProblems(CompilationUnitDeclaration unit, IAbstractSyntaxTreeVisitor visitor) {", "-\t\tCompilationResult unitResult = unit.compilationResult;", "-\t\tIProblem[] problems = unitResult.getAllProblems();", "-\t\tfor (int i = 0, problemLength = problems == null ? 0 : problems.length; i < problemLength; i++) {", "-\t\t\tvisitor.acceptProblem(problems[i]);\t\t\t\t", "-\t\t}\t", "+\tpublic static CompilationUnitDeclaration parse(char[] source, NodeSearcher nodeSearcher, Map settings) {", "+\t\tif (source == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tCompilerOptions compilerOptions = new CompilerOptions(settings);", "+\t\tParser parser = createDomParser(", "+\t\t\tnew ProblemReporter(", "+\t\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(), ", "+\t\t\t\t\tcompilerOptions, ", "+\t\t\t\t\tnew DefaultProblemFactory()));", "+\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = ", "+\t\t\tnew org.eclipse.jdt.internal.compiler.batch.CompilationUnit(", "+\t\t\t\tsource, ", "+\t\t\t\t\"\", //$NON-NLS-1$", "+\t\t\t\tcompilerOptions.defaultEncoding);", "+\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, new CompilationResult(sourceUnit, 0, 0, compilerOptions.maxProblemsPerUnit));", "+\t\t", "+\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {", "+\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;", "+\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "+\t\t\treturn null; ", "+\t\t}", "+\t\t\t\t", "+\t\tcompilationUnitDeclaration.traverse(nodeSearcher, compilationUnitDeclaration.scope);", "+\t\t", "+\t\tAstNode node = nodeSearcher.found;", "+ \t\tif (node == null) {", "+ \t\t\treturn compilationUnitDeclaration;", "+ \t\t}", "+ \t\t", "+ \t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration enclosingTypeDeclaration = nodeSearcher.enclosingType;", "+ \t\t", "+\t\tif (node instanceof AbstractMethodDeclaration) {", "+\t\t\t((AbstractMethodDeclaration)node).parseStatements(parser, compilationUnitDeclaration);", "+\t\t} else if (enclosingTypeDeclaration != null) {", "+\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(parser, enclosingTypeDeclaration, compilationUnitDeclaration);", "+\t\t\t} else {  \t\t\t\t\t", "+\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)node).parseMethod(parser, compilationUnitDeclaration);", "+\t\t\t} \t\t\t\t", "+\t\t}", "+\t\t", "+\t\treturn compilationUnitDeclaration;"]}], "num": 40569}
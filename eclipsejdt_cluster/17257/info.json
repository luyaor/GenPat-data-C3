{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a62fc4a62b5219dfee9416c632c2f9b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01134e6a3b9011f559af25c043b31ed2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ElementInfoConverter.java", "commitBeforeChange": "1a1a31d229c2fc8c04f9bd63ce751ad3b1477b30", "commitAfterChange": "e6522f026ab59e6d639e7039d4201198858d9e63", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeDeclaration convert( \t\tSourceTypeElementInfo sourceType, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceTypeElementInfo sourceType, CompilationResult compilationResult)", "diff": ["-\tprivate TypeDeclaration convert(", "-\t\tSourceTypeElementInfo sourceType,", "-\t\tCompilationResult compilationResult) {", "-\t\t/* create type declaration - can be member type */", "+\tprivate TypeDeclaration convert(SourceTypeElementInfo sourceType, CompilationResult compilationResult) {", "+\t\t", "+\t\t/* create type declaration - can be member type, local type or anonymous type */", "-\t\t// TODO (jerome) convert initializers if need local types", "-\t\t", "-\t\t/* convert fields */", "+\t\t/* convert fields and initializers */", "-\t\ttype.fields = new FieldDeclaration[sourceFieldCount];", "-\t\tfor (int i = 0; i < sourceFieldCount; i++) {", "-\t\t\ttype.fields[i] = convert((SourceFieldElementInfo)sourceFields[i], type, compilationResult);", "+\t\tInitializerElementInfo[] initializers = null;", "+\t\tint initializerCount = 0;", "+\t\tif (this.needLocalTypes) {", "+\t\t\tinitializers = sourceType.getInitializers();", "+\t\t\tinitializerCount = initializers.length;", "+\t\t\ttype.fields = new FieldDeclaration[initializerCount + sourceFieldCount];", "+\t\t\tfor (int i = 0; i < initializerCount; i++) {", "+\t\t\t\ttype.fields[i] = convert(initializers[i], compilationResult);", "+\t\t\t}", "+\t\t} else {", "+\t\t\ttype.fields = new FieldDeclaration[sourceFieldCount];", "+\t\t}", "+\t\tint length = initializerCount + sourceFieldCount;", "+\t\tint index = 0;", "+\t\tfor (int i = initializerCount; i < length; i++) {", "+\t\t\ttype.fields[i] = convert((SourceFieldElementInfo)sourceFields[index++], compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7aad98bba9e8192d73ce6c01433891e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "diff": ["+\t\t/* convert type parameters */", "+\t\tchar[][] typeParameterNames = sourceMethod.getTypeParameterNames();", "+\t\tTypeParameter[] typeParams = null;", "+\t\tif (typeParameterNames != null) {", "+\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\tchar[][][] typeParameterBounds = sourceMethod.getTypeParameterBounds();", "+\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t\tdecl.typeParameters = typeParams;", "+\t\t\tdecl.typeParameters = typeParams;", "-\t\t\t\t\tAccDefault);", "+\t\t\t\t\tAccDefault,", "+\t\t\t\t\tfalse);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db0d30570fa6cb172e0ee652e11e9505", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/StackMapTableAttribute.java", "commitBeforeChange": "900392dc83f32684036212f916a5915ba3721662", "commitAfterChange": "adfa6eea97da9a8b8e860dcf2bcb64f1459b7350", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic StackMapTableAttribute( \t\tbyte[] classFileBytes, \t\tIConstantPool constantPool, \t\tint offset) \t\tthrows ClassFormatException", "signatureAfterChange": " \tpublic StackMapTableAttribute( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) \t\t\tthrows ClassFormatException", "diff": ["-\t\tbyte[] classFileBytes,", "-\t\tIConstantPool constantPool,", "-\t\tint offset)", "-\t\tthrows ClassFormatException {", "+\t\t\tbyte[] classFileBytes,", "+\t\t\tIConstantPool constantPool,", "+\t\t\tint offset)", "+\t\t\tthrows ClassFormatException {", "-\t\tfinal int length = (int) u4At(classFileBytes, 2, offset);", "+\t\tfinal int length = u2At(classFileBytes, 6, offset); ", "+\t\tthis.numberOfEntries = length;", "+\t\tif (length != 0) {", "+\t\t\tint readOffset = 8;", "+\t\t\tthis.frames = new IStackMapFrame[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tStackMapFrame frame = new StackMapFrame(classFileBytes, constantPool, offset + readOffset);", "+\t\t\t\tthis.frames[i] = frame;", "+\t\t\t\treadOffset += frame.sizeInBytes();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.frames = NO_FRAMES;", "+\t\t}", "+\t\tfinal int byteLength = (int) u4At(classFileBytes, 2, offset);", "-\t\t\tSystem.arraycopy(classFileBytes, offset + 6, this.bytes = new byte[length], 0, length);", "+\t\t\tSystem.arraycopy(classFileBytes, offset + 6, this.bytes = new byte[byteLength], 0, byteLength);"]}], "num": 17257}
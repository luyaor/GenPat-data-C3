{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e14ff4ecef2a5086ec808a475351edea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6627e7ad8aff87f0d9e4e51f1b1e599c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8fdb14b64608b58e620c67bc0f2758fb559de717", "commitAfterChange": "447dafd45d9eea3d096b0cc1d1d11fe893f03ec0", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "-\t\t\t\t\t\t\tif (otherFields != null) {", "-\t\t\t\t\t\t\t\tint length = otherFields.length;", "-\t\t\t\t\t\t\t\tint size = 0;", "-\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "-\t\t\t\t\t\t\t\t\tsize++;", "+\t\t\t\t\t\t// standard reporting", "+\t\t\t\t\t\tif (this.patternFineGrain == 0) {", "+\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "+\t\t\t\t\t\t\t\tif (otherFields != null) {", "+\t\t\t\t\t\t\t\t\tint length = otherFields.length;", "+\t\t\t\t\t\t\t\t\tint size = 0;", "+\t\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "+\t\t\t\t\t\t\t\t\t\tsize++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "+\t\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "-\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "-\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "+\t\t\t\t\t\t } else {", "+\t\t\t\t\t\t\t// finegrain reporting", "+\t\t\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tfield.traverse(visitor, null);", "+\t\t\t\t\t\t\t} catch (WrappedCoreException e) {", "+\t\t\t\t\t\t\t\tthrow e.coreException;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// Remove all remaining nodes", "+\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t// standard reporting", "+\t\t\t\t\tif (this.patternFineGrain == 0) {", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "+\t\t\t\t\t\t\tBlockScope blockScope = null;", "+\t\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "+\t\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "+\t\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "-\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "-\t\t\t\t\t\tBlockScope blockScope = null;", "-\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "-\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "-\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\t// finegrain reporting", "+\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfield.traverse(visitor, field.isStatic() ? type.staticInitializerScope : type.initializerScope);", "+\t\t\t\t\t} catch (WrappedCoreException e) {", "+\t\t\t\t\t\tthrow e.coreException;", "+\t\t\t\t\t}", "+\t\t\t\t\t// Remove all remaining nodes", "+\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f34a277e5d0b83d161c3df615017b4ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\t// standard reporting", "-\t\t\t\t\t\tif (this.patternFineGrain == 0) {", "-\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "-\t\t\t\t\t\t\t\tif (otherFields != null) {", "-\t\t\t\t\t\t\t\t\tint length = otherFields.length;", "-\t\t\t\t\t\t\t\t\tint size = 0;", "-\t\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "-\t\t\t\t\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "-\t\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "-\t\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "+\t\t\t\t\t\t\tif (otherFields != null) {", "+\t\t\t\t\t\t\t\tint length = otherFields.length;", "+\t\t\t\t\t\t\t\tint size = 0;", "+\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "+\t\t\t\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "+\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "+\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t } else {", "-\t\t\t\t\t\t\t// finegrain reporting", "-\t\t\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tfield.traverse(visitor, null);", "-\t\t\t\t\t\t\t} catch (WrappedCoreException e) {", "-\t\t\t\t\t\t\t\tthrow e.coreException;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// Remove all remaining nodes", "-\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "-\t\t\t\t\t// standard reporting", "-\t\t\t\t\tif (this.patternFineGrain == 0) {", "-\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\t\tnode = field;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "-\t\t\t\t\t\t\tBlockScope blockScope = null;", "-\t\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "-\t\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "-\t\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t// finegrain reporting", "-\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfield.traverse(visitor, field.isStatic() ? type.staticInitializerScope : type.initializerScope);", "-\t\t\t\t\t} catch (WrappedCoreException e) {", "-\t\t\t\t\t\tthrow e.coreException;", "-\t\t\t\t\t}", "-\t\t\t\t\t// Remove all remaining nodes", "-\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "+\t\t\t\t\t\tBlockScope blockScope = null;", "+\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "+\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "+\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "+\t\t\t\t\treturn;"]}], "num": 36083}
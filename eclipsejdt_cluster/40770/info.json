{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18a123c9624185c666e63215144deb87", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2530e3df54a371f2b31879af87a78c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public static int getProblemCategory(int problemID)", "signatureAfterChange": " public static int getProblemCategory(int severity, int problemID)", "diff": ["-public static int getProblemCategory(int problemID) {", "-\tlong irritant = getIrritant(problemID);", "-\tint irritantInt = (int) irritant;", "+public static int getProblemCategory(int severity, int problemID) {", "+\t\t// fatal problems even if optional are all falling into same category (not irritant based)", "+\t\tif ((severity & ProblemSeverities.Fatal) != 0)", "+\t\t\tbreak categorizeOnIrritant;", "+\t\tlong irritant = getIrritant(problemID);", "+\t\tint irritantInt = (int) irritant;", "-\t// categorize non optional problems per ID", "+\t// categorize fatal problems per ID"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6c3b84c931e8113945d43f0c051dc20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "0c46c5213b09d0da0f69c7b26f904c0f9c4b8264", "commitAfterChange": "5bd4bb71a504f8c91120347898b17a55db5d46e8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprotected static IProblemFactory getProblemFactory(final char[] fileName, final IProblemRequestor problemRequestor)", "signatureAfterChange": " \t \tprotected static IProblemFactory getProblemFactory( \t\tfinal char[] fileName,  \t\tfinal IProblemRequestor problemRequestor, \t\tfinal IProgressMonitor monitor)", "diff": ["-\tprotected static IProblemFactory getProblemFactory(final char[] fileName, final IProblemRequestor problemRequestor) {", "+\tprotected static IProblemFactory getProblemFactory(", "+\t\tfinal char[] fileName, ", "+\t\tfinal IProblemRequestor problemRequestor,", "+\t\tfinal IProgressMonitor monitor) {", "+\t\t\t\tif (monitor != null && monitor.isCanceled()){", "+\t\t\t\t\tthrow new AbortCompilation(true, null); // silent abort", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (monitor != null && monitor.isCanceled()){", "+\t\t\t\t\tthrow new AbortCompilation(true, null); // silent abort", "+\t\t\t\t}", "+"]}], "num": 40770}
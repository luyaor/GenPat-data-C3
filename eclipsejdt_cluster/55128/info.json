{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "637a1ab6fe499ead57847063ef7575f5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "106f6929afbbe63744512b4d9b3d0f7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6c1fe14dccbeca45706f5722fa9f3aa63ceed3a", "commitAfterChange": "da86ea782d04bb2ec77f1bc7a1c7dfb5852dc748", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public synchronized IIndex getIndex(IPath path, boolean mustCreate)", "signatureAfterChange": "\r public synchronized IIndex getIndex(IPath path, boolean mustCreate)", "diff": ["+\t// Path is already canonical per construction\r", "-\t\t\t// Path is already canonical per construction\r", "-\t\t\tindex = (IIndex) indexes.get(path);\r", "-\t\t\tif (!mustCreate) return index;\r", "-\t\t\tif (index == null) {\r", "-\t\t\t\tString indexPath = computeIndexName(path.toOSString());\r", "-\t\t\t\tindex = IndexFactory.newIndex(indexPath, \"Index for \" + path.toOSString()); //$NON-NLS-1$\r", "-\t\t\t\tindexes.put(path, index);\r", "-\t\t\t\tmonitors.put(index, new ReadWriteMonitor());\r", "-\t\t\t}\r", "+\t\t\tif (!mustCreate) return null;\r", "+\r", "+\t\t\tString indexPath = computeIndexName(path.toOSString());\r", "+\t\t\tindex = IndexFactory.newIndex(indexPath, \"Index for \" + path.toOSString()); //$NON-NLS-1$\r", "+\t\t\tindexes.put(path, index);\r", "+\t\t\tmonitors.put(index, new ReadWriteMonitor());\r", "+\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad7f51dced600af7f4016ad9970727e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "ec3a4c33f32cf58050110cfdf8e4a7a59380d854", "commitAfterChange": "de600e80bc6b398dc98185397349cc8cf2c9ff79", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public synchronized IIndex getIndex(IPath path, boolean mustCreate)", "signatureAfterChange": "\r public synchronized IIndex getIndex(IPath path, boolean mustCreate)", "diff": ["-\t\t\t// Compute canonical path\r", "-\t\t\tIPath canonicalPath = JavaProject.canonicalizedPath(path);\r", "-\t\t\tindex = (IIndex) indexes.get(canonicalPath);\r", "+\t\t\t// Path is already canonical per construction\r", "+\t\t\tindex = (IIndex) indexes.get(path);\r", "-\t\t\t\t// New index: add same index for given path and canonical path\r", "-\t\t\t\tString indexPath = computeIndexName(canonicalPath.toOSString());\r", "-\t\t\t\tindex = IndexFactory.newIndex(indexPath, \"Index for \" + canonicalPath.toOSString()); //$NON-NLS-1$\r", "-\t\t\t\tindexes.put(canonicalPath, index);\r", "+\t\t\t\tString indexPath = computeIndexName(path.toOSString());\r", "+\t\t\t\tindex = IndexFactory.newIndex(indexPath, \"Index for \" + path.toOSString()); //$NON-NLS-1$\r", "-\t\t\t} else {\r", "-\t\t\t\t// Index existed for canonical path, add it for given path\r", "-\t\t\t\tindexes.put(path, index);\r"]}], "num": 55128}
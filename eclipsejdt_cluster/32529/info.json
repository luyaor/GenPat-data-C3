{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93c91840869ac333eb9534001d43378f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef001a13b3dc0445d01fac5418e218b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bf20c4733b5ba628131f77425b6d1ad646dfd787", "commitAfterChange": "4fece3d5714f1973bb889af985f57d3ae8f56e20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "diff": ["-\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], true); // cache if key is null since its a definite match", "+\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], true); // cache if key is null since its a definite match", "+\t\t\t\tObject[] values = wordsToDocNumbers.valueTable;", "-\t\t\t\t\t\tresults = addQueryResult(results, words[j], wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\t\tresults = addQueryResult(results, words[j], values[j], memoryIndex, prevResults);", "-\t\t\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], false);", "-\t\t\t\t\tif (wordsToDocNumbers != null && wordsToDocNumbers.containsKey(key))", "-\t\t\t\t\t\tresults = addQueryResult(results, key, wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tObject value;", "+\t\t\t\t\tif (wordsToDocNumbers != null && (value = wordsToDocNumbers.get(key)) != null)", "+\t\t\t\t\t\tresults = addQueryResult(results, key, value, memoryIndex, prevResults);", "-\t\t\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\t\tObject[] values = wordsToDocNumbers.valueTable;", "-\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, values[j], memoryIndex, prevResults);", "-\t\t\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\t\tObject[] values = wordsToDocNumbers.valueTable;", "-\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, values[j], memoryIndex, prevResults);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74c2622b99c5f627763a8d28808a0bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "5ca6ee5fca8063f3ae4c037e5721f50897b59fe4", "commitAfterChange": "4d4b7498948247746461ed52cdc63a141986de38", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "diff": ["-\t} else if (matchRule == (SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE)) {", "-\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "-\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "-\t\t\tif (wordsToDocNumbers != null && wordsToDocNumbers.containsKey(key))", "-\t\t\t\tresults = addQueryResult(results, key, wordsToDocNumbers, memoryIndex);", "-\t\t}", "-\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "-\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "-\t\t\tif (wordsToDocNumbers != null) {", "-\t\t\t\tchar[][] words = wordsToDocNumbers.keyTable;", "-\t\t\t\tfor (int j = 0, m = words.length; j < m; j++) {", "-\t\t\t\t\tchar[] word = words[j];", "-\t\t\t\t\tif (word != null && Index.isMatch(key, word, matchRule))", "-\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex);", "+\t\tswitch (matchRule) {", "+\t\t\tcase SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE:", "+\t\t\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tif (wordsToDocNumbers != null && wordsToDocNumbers.containsKey(key))", "+\t\t\t\t\t\tresults = addQueryResult(results, key, wordsToDocNumbers, memoryIndex);", "-\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase SearchPattern.R_PREFIX_MATCH | SearchPattern.R_CASE_SENSITIVE:", "+\t\t\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tif (wordsToDocNumbers != null) {", "+\t\t\t\t\t\tchar[][] words = wordsToDocNumbers.keyTable;", "+\t\t\t\t\t\tfor (int j = 0, m = words.length; j < m; j++) {", "+\t\t\t\t\t\t\tchar[] word = words[j];", "+\t\t\t\t\t\t\tif (word != null && key[0] == word[0] && CharOperation.prefixEquals(key, word))", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tif (wordsToDocNumbers != null) {", "+\t\t\t\t\t\tchar[][] words = wordsToDocNumbers.keyTable;", "+\t\t\t\t\t\tfor (int j = 0, m = words.length; j < m; j++) {", "+\t\t\t\t\t\t\tchar[] word = words[j];", "+\t\t\t\t\t\t\tif (word != null && Index.isMatch(key, word, matchRule))", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 32529}
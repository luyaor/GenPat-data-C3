{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cdb7d1229af46f746bb2909591c9f65", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "546765ae1f5f20e77b6e2a6948e5e286", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "68ccb4031ed08b4fe5c4be466185d9f98028d52b", "commitAfterChange": "b97b84a6370469b0432a4c45b3f13c4f7bb62ce7", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tString[] bootclasspaths = null;", "-\t\tint pathCount = 0;", "-\t\tint bootclasspathCount = 0;", "+\t\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\tString currentClasspathName = null;", "+\t\tArrayList currentRuleSpecs = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$ ", "+\t\t\tif (currentArg.endsWith(\"]\") && !(mode == InsideBootClasspath || mode == InsideClasspath) ) { //$NON-NLS-1$ ", "-\t\t\t\tif (pathCount == 0) {", "-\t\t\t\t\tthis.classpaths = new String[DEFAULT_SIZE_CLASSPATH];", "-\t\t\t\t}", "-\t\t\t\tif (bootclasspathCount > 0)", "+\t\t\t\tif (bootclasspaths.size() > 0)", "-\t\t\t\tbootclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "-\t\t\tif (mode == InsideClasspath) {", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);", "+\t\t\tif (mode == InsideClasspath || mode == InsideBootClasspath) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,", "+\t\t\t\t\t\tFile.pathSeparator + \"[]\", true); //$NON-NLS-1$", "+\t\t\t\t// state machine", "+\t\t\t\tfinal int start = 0; ", "+\t\t\t\tfinal int readyToClose = 1;", "+\t\t\t\t// 'path' 'path1[rule];path2'", "+\t\t\t\tfinal int readyToCloseEndingWithRules = 2;", "+\t\t\t\t// 'path[rule]' 'path1;path2[rule]'", "+\t\t\t\tfinal int readyToCloseOrOtherEntry = 3;", "+\t\t\t\t// 'path[rule];' 'path;' 'path1;path2;'", "+\t\t\t\tfinal int rulesNeedAnotherRule = 4;", "+\t\t\t\t// 'path[rule1;'", "+\t\t\t\tfinal int rulesStart = 5;", "+\t\t\t\t// 'path[' 'path1;path2['", "+\t\t\t\tfinal int rulesReadyToClose = 6;", "+\t\t\t\t// 'path[rule' 'path[rule1;rule2'", "+\t\t\t\tfinal int error = 99;", "+\t\t\t\tint state = start;", "+\t\t\t\tString token = null;", "-\t\t\t\t\tint length;", "-\t\t\t\t\tif ((length = this.classpaths.length) <= pathCount) {", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.classpaths,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.classpaths = new String[length * 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tif (token.equals(File.pathSeparator)) {", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase readyToClose:", "+\t\t\t\t\t\tcase readyToCloseEndingWithRules:", "+\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "+\t\t\t\t\t\t\tstate = readyToCloseOrOtherEntry;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase rulesReadyToClose:", "+\t\t\t\t\t\t\tstate = rulesNeedAnotherRule;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (token.equals(\"[\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase readyToClose:", "+\t\t\t\t\t\t\tstate = rulesStart;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (token.equals(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase rulesReadyToClose:", "+\t\t\t\t\t\t\tstate = readyToCloseEndingWithRules;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t} else // regular word", "+\t\t\t\t\t{", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase start:", "+\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "+\t\t\t\t\t\t\tstate = readyToClose;", "+\t\t\t\t\t\t\tcurrentClasspathName = token;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase rulesNeedAnotherRule:", "+\t\t\t\t\t\tcase rulesStart:", "+\t\t\t\t\t\t\tstate = rulesReadyToClose;", "+\t\t\t\t\t\t\tcurrentRuleSpecs.add(token);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tthis.classpaths[pathCount++] = tokenizer.nextToken();", "+\t\t\t\t}", "+\t\t\t\tif (state == readyToClose", "+\t\t\t\t\t\t|| state == readyToCloseEndingWithRules ", "+\t\t\t\t\t\t|| state == readyToCloseOrOtherEntry) {", "+\t\t\t\t\tAccessRule[] accessRules = new AccessRule[currentRuleSpecs", "+\t\t\t\t\t\t\t.size()];", "+\t\t\t\t\tboolean rulesOK = true;", "+\t\t\t\t\tIterator i = currentRuleSpecs.iterator();", "+\t\t\t\t\tint j = 0;", "+\t\t\t\t\twhile (i.hasNext()) {", "+\t\t\t\t\t\tString ruleSpec = (String) i.next();", "+\t\t\t\t\t\tchar key = ruleSpec.charAt(0);", "+\t\t\t\t\t\tString pattern = ruleSpec.substring(1);", "+\t\t\t\t\t\tif (pattern.length() > 0) {", "+\t\t\t\t\t\t\tswitch (key) {", "+\t\t\t\t\t\t\tcase '+':", "+\t\t\t\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t\t\t\t.toCharArray(), -1);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '~':", "+\t\t\t\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t\t\t\t.toCharArray(),", "+\t\t\t\t\t\t\t\t\t\tIProblem.DiscouragedReference);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '-':", "+\t\t\t\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t\t\t\t.toCharArray(),", "+\t\t\t\t\t\t\t\t\t\tIProblem.ForbiddenReference);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\trulesOK = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\trulesOK = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (rulesOK) {", "+\t\t\t\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(", "+\t\t\t\t\t\t\t\taccessRules, \"{0}\"); //$NON-NLS-1$", "+\t\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t\t\t\t.getClasspath(currentClasspathName,", "+\t\t\t\t\t\t\t\t\t\tcustomEncoding, 0, accessRuleSet);", "+\t\t\t\t\t\tif (currentClasspath != null) {", "+\t\t\t\t\t\t\tif (mode == InsideClasspath) {", "+\t\t\t\t\t\t\t\tclasspaths.add(currentClasspath);", "+\t\t\t\t\t\t\t} else { // inside bootclasspath", "+\t\t\t\t\t\t\t\tbootclasspaths.add(currentClasspath);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "+\t\t\t\t\t\t\t// we go on anyway", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "+\t\t\t\t\t\t// we go on anyway", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "+\t\t\t\t\t// we go on anyway", "-\t\t\tif (mode == InsideBootClasspath) {", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\tint length;", "-\t\t\t\t\tif ((length = bootclasspaths.length) <= bootclasspathCount) {", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tbootclasspaths,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(bootclasspaths = new String[length * 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t}", "-\t\t\t\t\tbootclasspaths[bootclasspathCount++] = tokenizer.nextToken();", "-\t\t\t\t}", "-\t\t\t\tmode = Default;", "-\t\t\t\tcontinue;", "-\t\t\t}\t\t\t", "-\t\tif (pathCount == 0) {", "+\t\tif (classpaths.size() == 0) {", "-\t\t\t\tclassProp = System.getProperty(\"user.dir\"); //$NON-NLS-1$", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "-\t\t\tthis.classpaths = new String[tokenizer.countTokens() + 1];", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tthis.classpaths[pathCount++] = tokenizer.nextToken();", "+\t\t\telse {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "+\t\t\t\tString token;", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t\t\t.getClasspath(token, customEncoding, 0, null);", "+\t\t\t\t\tif (currentClasspath != null) {", "+\t\t\t\t\t\tclasspaths.add(currentClasspath);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "+\t\t\t\t\t\t// should not happen - we go on anyway", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tthis.classpaths[pathCount++] = System.getProperty(\"user.dir\");//$NON-NLS-1$", "-\t\tif (bootclasspathCount == 0) {", "+\t\tif (bootclasspaths.size() == 0) {", "-\t\t\t\t\t\t\tint length = getLength(systemLibrariesJars);", "-\t\t\t\t\t\t\tbootclasspaths = new String[length];", "-\t\t\t\t\t\t\t\t\t\tbootclasspaths[bootclasspathCount++] = current[j].getAbsolutePath();", "+\t\t\t\t\t\t\t\t\t\tFileSystem.Classpath classpath = ", "+\t\t\t\t\t\t\t\t\t\t\tFileSystem.getClasspath(", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\tnull, 0, null); ", "+\t\t\t\t\t\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\tif (this.classpaths == null) {", "-\t\t\tthis.classpaths = new String[0];", "-\t\t}", "-\t\tString[] newclasspaths = null;", "-\t\tif ((pathCount + bootclasspathCount) != this.classpaths.length) {", "-\t\t\tnewclasspaths = new String[pathCount + bootclasspathCount];", "-\t\t} else {", "-\t\t\tnewclasspaths = this.classpaths;", "-\t\t}", "-\t\tSystem.arraycopy(", "-\t\t\tthis.classpaths,", "-\t\t\t0,", "-\t\t\tnewclasspaths,", "-\t\t\tbootclasspathCount,", "-\t\t\tpathCount);", "-", "-\t\tif (bootclasspathCount != 0) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tbootclasspaths,", "-\t\t\t\t0,", "-\t\t\t\tnewclasspaths,", "-\t\t\t\t0,", "-\t\t\t\tbootclasspathCount);", "-\t\t}", "-\t\tthis.classpaths = newclasspaths;", "-\t\tfor (int i = 0, max = this.classpaths.length; i < max; i++) {", "-\t\t\tFile file = new File(this.classpaths[i]);", "-\t\t\tif (!file.exists()) { // signal missing classpath entry file", "-\t\t\t\tthis.logger.logIncorrectClasspath(this.classpaths[i]); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "+\t\tbootclasspaths.addAll(classpaths);", "+\t\tclasspaths = bootclasspaths;", "+\t\tthis.checkedClasspaths = new FileSystem.Classpath[classpaths.size()];", "+\t\tclasspaths.toArray(this.checkedClasspaths);", "-\t\tthis.logger.logClasspath(this.classpaths);", "+\t\tthis.logger.logClasspath(this.checkedClasspaths);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a625b555a2d8a1535885000d60897d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "6cea394a74122bc3b2f5fee1a70c7921f0e635d8", "commitAfterChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] typeAnnotations = parameterizedQualifiedTypeReference.annotations;", "+\t\t\t\tTypeReference[] arguments = null;", "+\t\t\t\tint lenth = tokens.length;", "+\t\t\t\tint firstTypeIndex = lenth - 1;", "-\t\t\t\t\t\tif (typeArguments != null) {", "-\t\t\t\t\t\t\tint numberOfEnclosingType = 0;", "-\t\t\t\t\t\t\tint startingIndex = 0;", "-\t\t\t\t\t\t\tint endingIndex = 0;", "-\t\t\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "-\t\t\t\t\t\t\t\tif (typeArguments[i] != null) {", "-\t\t\t\t\t\t\t\t\tnumberOfEnclosingType++;", "-\t\t\t\t\t\t\t\t} else if (numberOfEnclosingType == 0) {", "-\t\t\t\t\t\t\t\t\tendingIndex++;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int i = 0; i < lenth; ++i) {", "+\t\t\t\t\t\t\tif (typeArguments != null && typeArguments[i] != null) {", "+\t\t\t\t\t\t\t\tfirstTypeIndex = i;", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tName name = null;", "-\t\t\t\t\t\t\tif (endingIndex - startingIndex == 0) {", "-\t\t\t\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[startingIndex]));", "-\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\t\t\t\tint start = (int)(positions[startingIndex]>>>32);", "-\t\t\t\t\t\t\t\tint end = (int) positions[startingIndex];", "-\t\t\t\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\t\tsimpleName.index = 1;", "-\t\t\t\t\t\t\t\tname = simpleName;", "-\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tname = this.setQualifiedNameNameAndSourceRanges(tokens, positions, endingIndex, typeReference);", "+\t\t\t\t\t\t\tif (typeAnnotations != null && typeAnnotations[i] != null) {", "+\t\t\t\t\t\t\t\tfirstTypeIndex = i;", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\t\t\t\tsimpleType.setName(name);", "-\t\t\t\t\t\t\tint start = (int)(positions[startingIndex]>>>32);", "-\t\t\t\t\t\t\tint end = (int) positions[endingIndex];", "-\t\t\t\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\tif (endingIndex == 0 && typeReference.annotations != null && (annotations = typeReference.annotations[0]) != null) {", "-\t\t\t\t\t\t\t\tannotateType(simpleType, annotations);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tParameterizedType parameterizedType = new ParameterizedType(this.ast);", "-\t\t\t\t\t\t\tparameterizedType.setType(simpleType);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tName name = null;\t\t\t\t\t\t", "+\t\t\t\t\t\tif (firstTypeIndex == 0) {", "+\t\t\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\t\t\tsimpleName.setIdentifier(new String(tokens[0]));", "+\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "+\t\t\t\t\t\t\tint start = (int) (positions[0] >>> 32);", "+\t\t\t\t\t\t\tint end = (int) positions[0];", "+\t\t\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t\tsimpleName.index = 1;", "+\t\t\t\t\t\t\tname = simpleName;", "-\t\t\t\t\t\t\t\trecordNodes(simpleType, typeReference);", "+\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tname = this.setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex, typeReference);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\tsimpleType.setName(name);", "+\t\t\t\t\t\tint start = (int)(positions[0] >>> 32);", "+\t\t\t\t\t\tint end = (int)positions[firstTypeIndex];", "+\t\t\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "+\t\t\t\t\t\t\tannotateType(simpleType, annotations);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\trecordNodes(simpleType, typeReference);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tType currentType = simpleType;\t\t\t\t\t\t", "+\t\t\t\t\t\tint indexOfEnclosingType = 1;", "+\t\t\t\t\t\tif (typeArguments != null && (arguments = typeArguments[firstTypeIndex]) != null) {", "+\t\t\t\t\t\t\tint arglen = arguments.length;", "+\t\t\t\t\t\t\tParameterizedType parameterizedType = new ParameterizedType(this.ast);", "+\t\t\t\t\t\t\tparameterizedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\tparameterizedType.setType(currentType);", "+\t\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\tstart = simpleType.getStartPosition();", "-\t\t\t\t\t\t\tend = start + simpleType.getLength() - 1;", "-\t\t\t\t\t\t\tfor (int i = 0, max = typeArguments[endingIndex].length; i < max; i++) {", "-\t\t\t\t\t\t\t\tfinal Type type2 = convertType(typeArguments[endingIndex][i]);", "+\t\t\t\t\t\t\tType type2 = null; ", "+\t\t\t\t\t\t\tfor (int i = 0; i < arglen; ++i ) {", "+\t\t\t\t\t\t\t\ttype2 = convertType(arguments[i]);", "-\t\t\t\t\t\t\t\tend = type2.getStartPosition() + type2.getLength() - 1;", "-\t\t\t\t\t\t\tint indexOfEnclosingType = 1;", "-\t\t\t\t\t\t\tparameterizedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\tend = type2 != null ? type2.getStartPosition() + type2.getLength() - 1 : end;", "-\t\t\t\t\t\t\tlength = end + 1;", "-\t\t\t\t\t\t\tstartingIndex = endingIndex + 1;", "-\t\t\t\t\t\t\tType currentType = parameterizedType;", "-\t\t\t\t\t\t\twhile(startingIndex < typeArguments.length) {", "-\t\t\t\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[startingIndex]));", "-\t\t\t\t\t\t\t\tsimpleName.index = startingIndex + 1;", "-\t\t\t\t\t\t\t\tstart = (int)(positions[startingIndex]>>>32);", "-\t\t\t\t\t\t\t\tend = (int) positions[startingIndex];", "-\t\t\t\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "-\t\t\t\t\t\t\t\tqualifiedType.setQualifier(currentType);", "-\t\t\t\t\t\t\t\tqualifiedType.setName(simpleName);", "-\t\t\t\t\t\t\t\tif (typeReference.annotations != null && (annotations = typeReference.annotations[startingIndex]) != null) {", "-\t\t\t\t\t\t\t\t\tannotateType(qualifiedType, annotations);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tstart = currentType.getStartPosition();", "-\t\t\t\t\t\t\t\tend = simpleName.getStartPosition() + simpleName.getLength() - 1;", "-\t\t\t\t\t\t\t\tqualifiedType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\t\tindexOfEnclosingType++;", "-\t\t\t\t\t\t\t\tif (typeArguments[startingIndex] != null) {", "-\t\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "-\t\t\t\t\t\t\t\t\tParameterizedType parameterizedType2 = new ParameterizedType(this.ast);", "-\t\t\t\t\t\t\t\t\tparameterizedType2.setType(qualifiedType);", "-\t\t\t\t\t\t\t\t\tparameterizedType2.index = indexOfEnclosingType;", "-\t\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\t\t\t\trecordNodes(parameterizedType2, typeReference);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfor (int i = 0, max = typeArguments[startingIndex].length; i < max; i++) {", "-\t\t\t\t\t\t\t\t\t\tfinal Type type2 = convertType(typeArguments[startingIndex][i]);", "-\t\t\t\t\t\t\t\t\t\tparameterizedType2.typeArguments().add(type2);", "-\t\t\t\t\t\t\t\t\t\tend = type2.getStartPosition() + type2.getLength() - 1;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tend = retrieveClosingAngleBracketPosition(end + 1);", "-\t\t\t\t\t\t\t\t\tlength = end + 1;", "-\t\t\t\t\t\t\t\t\tparameterizedType2.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\t\t\tcurrentType = parameterizedType2;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tcurrentType = qualifiedType;", "-\t\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tstartingIndex++;", "+\t\t\t\t\t\t\tcurrentType = parameterizedType;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "+\t\t\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\t\t\tsimpleName.setIdentifier(new String(tokens[i]));", "+\t\t\t\t\t\t\tsimpleName.index = i + 1;", "+\t\t\t\t\t\t\tstart = (int) (positions[i] >>> 32);", "+\t\t\t\t\t\t\tend = (int) positions[i];", "+\t\t\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "+\t\t\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "+\t\t\t\t\t\t\tqualifiedType.setQualifier(currentType);", "+\t\t\t\t\t\t\tqualifiedType.setName(simpleName);", "+\t\t\t\t\t\t\tif (typeAnnotations != null &&  (annotations = typeAnnotations[i]) != null) {", "+\t\t\t\t\t\t\t\tannotateType(qualifiedType, annotations);", "-\t\t\t\t\t\t\t\tthis.recordNodes(currentType, typeReference);", "+\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "-\t\t\t\t\t\t\ttype = currentType;", "-\t\t\t\t\t\t\tlength -= sourceStart;", "+\t\t\t\t\t\t\tstart = currentType.getStartPosition();", "+\t\t\t\t\t\t\tend = simpleName.getStartPosition() + simpleName.getLength() - 1;", "+\t\t\t\t\t\t\tqualifiedType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t\tcurrentType = qualifiedType;", "+\t\t\t\t\t\t\tindexOfEnclosingType++;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (typeArguments != null && (arguments = typeArguments[i]) != null) {", "+\t\t\t\t\t\t\t\tint arglen = arguments.length;", "+\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\tParameterizedType parameterizedType = new ParameterizedType(this.ast);", "+\t\t\t\t\t\t\t\tparameterizedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\tparameterizedType.setType(currentType);", "+\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\t\trecordNodes(parameterizedType, typeReference);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tType type2 = null; ", "+\t\t\t\t\t\t\t\tfor (int j = 0; j < arglen; ++j ) {", "+\t\t\t\t\t\t\t\t\ttype2 = convertType(arguments[j]);", "+\t\t\t\t\t\t\t\t\tparameterizedType.typeArguments().add(type2);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tend = type2 != null ? type2.getStartPosition() + type2.getLength() - 1 : end;", "+\t\t\t\t\t\t\t\tend = retrieveClosingAngleBracketPosition(end + 1);", "+\t\t\t\t\t\t\t\tparameterizedType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t\t\tcurrentType = parameterizedType;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\ttype = currentType;", "-\t\t\t} else if (typeReference instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) {", "-\t\t\t\tchar[][] name = ((org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) typeReference).getTypeName();", "-\t\t\t\tint nameLength = name.length;", "+\t\t\t} else if (typeReference instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) {\t\t\t", "+\t\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) typeReference;", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation [][] typeAnnotations = typeReference.annotations;", "+\t\t\t\tchar [][] tokens = qualifiedTypeReference.tokens;", "+\t\t\t\tint lenth = tokens.length;", "+\t\t\t\tint firstTypeIndex = lenth - 1;", "+\t\t\t\t", "+\t\t\t\tif (typeAnnotations != null) {", "+\t\t\t\t\tfor (int i = 0; i < lenth; ++i) {", "+\t\t\t\t\t\tif (typeAnnotations[i] != null) {", "+\t\t\t\t\t\t\tfirstTypeIndex = i;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}  ", "-\t\t\t\tlength = (int)(positions[nameLength - 1] & 0xFFFFFFFF) - sourceStart + 1;", "-\t\t\t\tfinal Name qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "-\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\tsimpleType.setName(qualifiedName);", "-\t\t\t\ttype = simpleType;", "-\t\t\t\ttype.setSourceRange(sourceStart, length);", "+\t\t\t\tName name = null;", "+\t\t\t\tif (firstTypeIndex == 0) {", "+\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[0]));", "+\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "+\t\t\t\t\tint start = (int) (positions[0] >>> 32);", "+\t\t\t\t\tint end = (int) positions[0];", "+\t\t\t\t\tsimpleName.setSourceRange(start, end);", "+\t\t\t\t\tsimpleName.index = 1;", "+\t\t\t\t\tname = simpleName;", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex, typeReference);", "+\t\t\t\t}", "+\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\tsimpleType.setName(name);", "+\t\t\t\tint start = (int)(positions[0] >>> 32);", "+\t\t\t\tint end = (int)positions[firstTypeIndex];", "+\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "+\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "+\t\t\t\t\tannotateType(simpleType, annotations);", "+\t\t\t\t}", "+\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\trecordNodes(simpleType, typeReference);", "+\t\t\t\t}", "+\t\t\t\tType currentType = simpleType;", "+\t\t\t\t", "+\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "+\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[i]));", "+\t\t\t\t\tsimpleName.index = i + 1;", "+\t\t\t\t\tstart = (int) (positions[i] >>> 32);", "+\t\t\t\t\tend = (int) positions[i];", "+\t\t\t\t\tsimpleName.setSourceRange(start, end - start +1);", "+\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "+\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "+\t\t\t\t\tqualifiedType.setQualifier(currentType);", "+\t\t\t\t\tqualifiedType.setName(simpleName);", "+\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[i]) != null) {", "+\t\t\t\t\t\tannotateType(qualifiedType, annotations);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "+\t\t\t\t\t}", "+\t\t\t\t\tstart = currentType.getStartPosition();", "+\t\t\t\t\tend = simpleName.getStartPosition() + simpleName.getLength() - 1;", "+\t\t\t\t\tqualifiedType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tcurrentType = qualifiedType;", "+\t\t\t\t\tqualifiedType.index  = 1;", "+\t\t\t\t}", "+\t\t\t\ttype = currentType;"]}], "num": 16615}
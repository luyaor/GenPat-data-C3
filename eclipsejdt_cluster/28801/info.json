{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cc1990070aa9590f1064e93c1bce4f8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a1812ff5d6a685ef51bae881a45a96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tprivate char[][] findVariableFromUnresolvedReference(LocalDeclaration variable, BlockScope scope, final char[][] discouragedNames)", "signatureAfterChange": " \tprivate char[][] findVariableFromUnresolvedReference(LocalDeclaration variable, BlockScope scope, final char[][] discouragedNames)", "diff": ["-\t\t\tfinal int discouragedNamesCount = discouragedNames == null ? 0 : discouragedNames.length;", "-\t\t\t\t\t\tfor (int i = 0; i < discouragedNamesCount; i++) {", "-\t\t\t\t\t\t\tif (CharOperation.equals(discouragedNames[i], name, false)) return;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "+\t\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\t\t\t\t\t\tdiscouragedNames,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b44a682618994e9fbd86705811046728", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CaseLabel.java", "commitBeforeChange": "e76466b5729fd993ef3dcc80ae6ab76bd33e5dcd", "commitAfterChange": "e0c80c2b16b54e5a1c86d6779d617fb326a5c618", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " void placeInstruction()", "signatureAfterChange": " void placeInstruction()", "diff": ["-\t\tif (backwardsBranch != POS_NOT_SET) {", "-\t\t\tint offset = backwardsBranch - instructionPosition;", "-\t\t\tfor (int i = 0; i < forwardReferenceCount; i++)", "-\t\t\t\tcodeStream.writeWidePosition(forwardReferences[i], offset);", "-\t\t\tbackwardsBranch = POS_NOT_SET;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d04a7afad0c15484d2c7eeca628765d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "a118736b4df6d2c2d76c2e8540c6ee6242953cb2", "commitAfterChange": "d90e3df9ed4198288c27321fc19ea2323118c013", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications, \t\tfinal char[][] typeNames, \t\tint matchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications, \t\tfinal char[][] typeNames, \t\tfinal int matchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\tint matchRule,", "+\t\tfinal int matchRule,", "-", "-\t\t// Validate match rule first", "-\t\tint namesLength = typeNames == null ? 0 : typeNames.length;", "-\t\tfor (int i=0; i<namesLength; i++) {", "-\t\t\tmatchRule &= SearchPattern.validateMatchRule(new String(typeNames[i]), matchRule);", "-\t\t}", "-\t\tfinal int validatedMatchRule = matchRule;", "-\t\tfinal MultiTypeDeclarationPattern pattern = new MultiTypeDeclarationPattern(qualifications, typeNames, typeSuffix, validatedMatchRule);", "+\t\tfinal MultiTypeDeclarationPattern pattern = new MultiTypeDeclarationPattern(qualifications, typeNames, typeSuffix, matchRule);", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), validatedMatchRule);", "+\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), matchRule);", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), validatedMatchRule);", "+\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), matchRule);"]}], "num": 28801}
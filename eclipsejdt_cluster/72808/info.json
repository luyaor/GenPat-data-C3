{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cce5b5f57706d7e0fd600bd05d6604f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "378e0d62d5c08181056e61acb32ea0ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected void processAnnotations()", "signatureAfterChange": "  protected void processAnnotations(CompilationParticipantResult[] results)", "diff": ["-", "-protected void processAnnotations() {", "-\tint size = this.filesDeclaringAnnotation.elementSize;", "-\tif (size == 0) return;", "-", "-\tObject[] values = this.filesDeclaringAnnotation.values;", "-\tCompilationParticipantResult[] results = new CompilationParticipantResult[size];", "-\tfor (int i = values.length; --i >= 0 && size > 0;)", "-\t\tif (values[i] != null)", "-\t\t\tresults[--size] = new CompilationParticipantResult((SourceFile) values[i]);", "-", "- \t// TODO (kent) do we expect to have more than one annotation processor participant?", "-\t// and if so should we pass the generated files from the each processor to the others to process?", "-\t\tif (this.javaBuilder.participants[i].isAnnotationProcessor())", "-\t\t\tthis.javaBuilder.participants[i].processAnnotations(results, this instanceof BatchImageBuilder);", "-\tprocessAnnotationResults(results);", "-}", "+", "+protected void processAnnotations(CompilationParticipantResult[] results) {", "+\tboolean hasAnnotationProcessor = false;", "+\tfor (int i = 0, l = this.javaBuilder.participants.length; !hasAnnotationProcessor && i < l; i++)", "+\t\thasAnnotationProcessor = this.javaBuilder.participants[i].isAnnotationProcessor();", "+\tif (!hasAnnotationProcessor) return;", "+", "+\tboolean foundAnnotations = this.filesWithAnnotations != null && this.filesWithAnnotations.elementSize > 0;", "+\tfor (int i = results.length; --i >= 0;)", "+\t\tresults[i].reset(foundAnnotations && this.filesWithAnnotations.includes(results[i].sourceFile));", "+", "+\t// even if no files have annotations, must still tell every annotation processor in case the file used to have them", "+\tfor (int i = 0, l = this.javaBuilder.participants.length; i < l; i++)", "+\t\tif (this.javaBuilder.participants[i].isAnnotationProcessor())", "+\t\t\tthis.javaBuilder.participants[i].processAnnotations(results);", "+\tprocessAnnotationResults(results);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "856e2a5770d5c6257979bbd3f70a7496", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "b2c3be7bd78bc61f04ab542749dc9420d42f47cb", "commitAfterChange": "bbf4c65896774d7094a1b0af184fa5e65fff430e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic IAnnotationBinding[] getParameterAnnotations(int index)", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getParameterAnnotations(int index)", "diff": ["+\t\tif (getParameterTypes() == NO_TYPE_BINDINGS) {", "+\t\t\treturn AnnotationBinding.NoAnnotations;", "+\t\t}", "-\t\t\treturn this.parameterAnnotations;", "+\t\t\treturn this.parameterAnnotations[index];", "-\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] annots = this.binding.getParameterAnnotations(index);", "-\t\tint length = annots == null ? 0 : annots.length;", "-\t\tif (length == 0) {", "-\t\t\treturn this.parameterAnnotations = AnnotationBinding.NoAnnotations;", "-\t\t}", "-\t\tIAnnotationBinding[] domInstances =new AnnotationBinding[length];", "+\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[][] bindingAnnotations = this.binding.getParameterAnnotations();", "+\t\t// bindingAnnoatations is never null as the method has one or several parameters", "+\t\tint length = bindingAnnotations.length;", "+\t\tthis.parameterAnnotations = new AnnotationBinding[length][];", "-\t\t\tfinal IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(annots[i]);", "-\t\t\tif (annotationInstance == null) {", "-\t\t\t\treturn this.parameterAnnotations = AnnotationBinding.NoAnnotations;", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] paramBindingAnnotations = bindingAnnotations[i];", "+\t\t\tint pLength = paramBindingAnnotations.length;", "+\t\t\tthis.parameterAnnotations[i] = new AnnotationBinding[pLength];", "+\t\t\tfor (int j=0; j<pLength; j++) {", "+\t\t\t\tIAnnotationBinding domAnnotation = this.resolver.getAnnotationInstance(paramBindingAnnotations[j]);", "+\t\t\t\tif (domAnnotation == null) {", "+\t\t\t\t\tthis.parameterAnnotations[i] = AnnotationBinding.NoAnnotations;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tthis.parameterAnnotations[i][j] = domAnnotation;", "-\t\t\tdomInstances[i] = annotationInstance;", "-\t\treturn this.parameterAnnotations = domInstances;", "+\t\treturn this.parameterAnnotations[index];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a717de271e62411764d2125d03c7c764", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageBinding.java", "commitBeforeChange": "ee22b953168e5eb2f8830ee8c58b8b5ee9e24014", "commitAfterChange": "263941e543d760da46f092c40a60d9eb4c5dc908", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic IResolvedAnnotation[] getAnnotations()", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "diff": ["-\tpublic IResolvedAnnotation[] getAnnotations() {", "+\tpublic IAnnotationBinding[] getAnnotations() {", "-\t\t\t\treturn ResolvedAnnotation.NoAnnotations;", "+\t\t\t\treturn AnnotationBinding.NoAnnotations;", "-\t\t\t\treturn ResolvedAnnotation.NoAnnotations;", "+\t\t\t\treturn AnnotationBinding.NoAnnotations;", "-\t\t\t\treturn ResolvedAnnotation.NoAnnotations;", "+\t\t\t\treturn AnnotationBinding.NoAnnotations;", "-\t\t\t\t\t\t\t\t\treturn ResolvedAnnotation.NoAnnotations; ", "-\t\t\t\t\t\t\t\tIResolvedAnnotation[] result = new IResolvedAnnotation[annos.size()];", "+\t\t\t\t\t\t\t\t\treturn AnnotationBinding.NoAnnotations; ", "+\t\t\t\t\t\t\t\tIAnnotationBinding[] result = new IAnnotationBinding[annos.size()];", "-\t\t\t\t\t\t\t\t\tresult[index] = ((Annotation) it.next()).resolveAnnotation();", "+\t\t\t\t\t\t\t\t\tresult[index] = ((Annotation) it.next()).resolveAnnotationBinding();", "-\t\t\t\t\t\t\t\t\t\treturn ResolvedAnnotation.NoAnnotations;\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\treturn AnnotationBinding.NoAnnotations;\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tAnnotationBinding[] binaryInstances =", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] binaryInstances =", "-\t\t\t\t\t\t\tAnnotationBinding[] allInstances =", "-\t\t\t\t\t\t\t\tAnnotationBinding.addStandardAnnotations(binaryInstances, type.getTagBits(), this.binding.environment);", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] allInstances =", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.addStandardAnnotations(binaryInstances, type.getTagBits(), this.binding.environment);", "-\t\t\t\t\t\t\tIResolvedAnnotation[] domInstances = new ResolvedAnnotation[total];", "+\t\t\t\t\t\t\tIAnnotationBinding[] domInstances = new AnnotationBinding[total];", "-\t\t\t\t\t\t\t\t\treturn ResolvedAnnotation.NoAnnotations; ", "+\t\t\t\t\t\t\t\t\treturn AnnotationBinding.NoAnnotations; ", "-\t\t\treturn ResolvedAnnotation.NoAnnotations;", "+\t\t\treturn AnnotationBinding.NoAnnotations;", "-\t\treturn ResolvedAnnotation.NoAnnotations;", "+\t\treturn AnnotationBinding.NoAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4094d30b96aafbcfa09f59669736eb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] annots = this.binding.getAnnotations();", "-\t\tint length = annots == null ? 0 : annots.length;", "-\t\tif (length == 0) {", "-\t\t\treturn this.annotations = AnnotationBinding.NoAnnotations;", "-\t\t}", "-\t\tIAnnotationBinding[] domInstances = new AnnotationBinding[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tfinal IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(annots[i]);", "-\t\t\tif (annotationInstance == null) {", "-\t\t\t\treturn this.annotations = AnnotationBinding.NoAnnotations;", "+\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] internalAnnotations = this.binding.getAnnotations();", "+\t\tint length = internalAnnotations == null ? 0 : internalAnnotations.length;", "+\t\tif (length != 0) {", "+\t\t\tIAnnotationBinding[] tempAnnotations = new IAnnotationBinding[length];", "+\t\t\tint convertedAnnotationCount = 0;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalAnnotation = internalAnnotations[i];", "+\t\t\t\tfinal IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(internalAnnotation);", "+\t\t\t\tif (annotationInstance == null) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\ttempAnnotations[convertedAnnotationCount++] = annotationInstance;", "-\t\t\tdomInstances[i] = annotationInstance;", "+\t\t\tif (convertedAnnotationCount != length) {", "+\t\t\t\tif (convertedAnnotationCount == 0) {", "+\t\t\t\t\treturn this.annotations = AnnotationBinding.NoAnnotations;", "+\t\t\t\t}", "+\t\t\t\tSystem.arraycopy(tempAnnotations, 0, (tempAnnotations = new IAnnotationBinding[convertedAnnotationCount]), 0, convertedAnnotationCount);", "+\t\t\t}", "+\t\t\treturn this.annotations = tempAnnotations;", "-\t\treturn this.annotations = domInstances;", "+\t\treturn this.annotations = AnnotationBinding.NoAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c089c7db67328b387ef2516c9657c5f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tpublic void checkRepeatableAnnotation(ASTNode valueAttribute, Scope scope, Object containingBinding)", "signatureAfterChange": "  \tpublic void checkRepeatableMetaAnnotation(BlockScope scope)", "diff": ["-\t", "-\tpublic void checkRepeatableAnnotation(ASTNode valueAttribute, Scope scope, Object containingBinding) {", "-\t\tif (! (this.recipient instanceof ReferenceBinding && containingBinding instanceof ReferenceBinding)) return; // Has deeper problems...", "-\t\tReferenceBinding containing = (ReferenceBinding)containingBinding;", "-\t\tReferenceBinding repeatableAnnotation = (ReferenceBinding) this.recipient;", "-\t\trepeatableAnnotation.setContainingAnnotation(containing);", "-\t\tcheckContainingAnnotation(valueAttribute, scope, containing, repeatableAnnotation);", "+\tpublic void checkRepeatableMetaAnnotation(BlockScope scope) {", "+\t\t", "+\t\t// `this' is the @Repeatable meta annotation, its recipient is the *repeatable* annotation type - we are at the declaration site, not the repeating use site.", "+\t\t", "+\t\tReferenceBinding repeatableAnnotationType = (ReferenceBinding) this.recipient; // know it to be an annotation type. On target miss we don't get here", "+\t\t", "+\t\tMemberValuePair[] valuePairs = this.memberValuePairs();", "+\t\tif (valuePairs == null || valuePairs.length != 1)", "+\t\t\treturn;", "+\t\t", "+\t\tObject value = valuePairs[0].compilerElementPair.value;", "+\t\tif (!(value instanceof ReferenceBinding))", "+\t\t\treturn; // Has deeper problems, will bark elsewhere.", "+\t\tReferenceBinding containerAnnotationType = (ReferenceBinding) value;", "+\t\tif (!containerAnnotationType.isAnnotationType())", "+\t\t\treturn; // Has deeper problems, will bark elsewhere.", "+\t\t", "+\t\trepeatableAnnotationType.setContainerAnnotationType(containerAnnotationType); // For now. May be reset later to PRB in case of problems.", "+\t\tcheckContainerAnnotationType(valuePairs[0], scope, containerAnnotationType, repeatableAnnotationType, false); // false => not use site, i.e declaration site error reporting requested."]}], "num": 72808}
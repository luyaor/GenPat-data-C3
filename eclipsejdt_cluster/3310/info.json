{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ab8dd818990242e8db8088f036185c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b42adfe7cf2b6d9881d7bf8f952905b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "b308074bc5b31f3a5857e47f87565296fbba4a15", "commitAfterChange": "d36a5b020e7b8fc57d912810db0ffb9dd045eb9a", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tpublic void test138()", "signatureAfterChange": "  \tpublic void test138()", "diff": ["-\t\t\t\"1. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"1. WARNING in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 2)\\n\"+", "+\t\t\t\"\timport java.util.Vector;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\"+", "+\t\t\t\"The import java.util.Vector is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 7)\\n\" +", "-\t\t\t\"2. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 8)\\n\" +", "+\t\t\t\"3. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 8)\\n\" +", "-\t\t\t\"3. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 9)\\n\" +", "+\t\t\t\"4. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 9)\\n\" +", "-\t\t\t\"4. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 10)\\n\" +", "+\t\t\t\"5. ERROR in test\\\\deep\\\\qualified\\\\name\\\\p\\\\X.java (at line 10)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4ec4b4713c9ebceeb2fa0e5f9a3d548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1023, "methodNumberAfterChange": 1023, "signatureBeforeChange": " public void test1000()", "signatureAfterChange": " public void test1000()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 9)\\n\" +", "-\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation chain(Iterator...) of the generic method chain(Iterator<? extends T>...) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 9)\\n\" +", "-\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type Iterator needs unchecked conversion to conform to Iterator<Number>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 14)\\n\" +", "-\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety : A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in X.java (at line 14)\\n\" +", "-\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Iterator<Number&Comparable<?>> to Iterator<Number>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 18)\\n\" +", "-\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety : A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. ERROR in X.java (at line 18)\\n\" +", "-\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Iterator<Integer> to Iterator<Number>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation chain(Iterator[]) of the generic method chain(Iterator<? extends T>...) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Iterator needs unchecked conversion to conform to Iterator<Number>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Iterator[] needs unchecked conversion to conform to Iterator<? extends Number>[]\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety : A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Iterator<Number&Comparable<?>> to Iterator<Number>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety : A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Iterator<Integer> to Iterator<Number>\\n\" + "]}], "num": 3310}
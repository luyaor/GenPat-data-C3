{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c724e1a5fdca787cb750726e41ae2b93", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "521fb15b8337da89a9bca63b4bcb6c8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "074bcf8e02160c02f4c4edb70f2f1ade7ede52b7", "commitAfterChange": "8c503d83a2dff1bb15e1f5e8ad0d9e213a2f4761", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (valueIfTrueType == NullBinding) {", "-\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = valueIfFalseType;", "-\t\t\t} else if (valueIfFalseType == NullBinding) {", "-\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = valueIfTrueType;", "-\t\t\t}", "-\t\t\tTypeBinding commonType = scope.lowerUpperBound(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\tTypeBinding commonType = null;", "+\t\t\tif (valueIfTrueType == NullBinding) {", "+\t\t\t\tcommonType = valueIfFalseType;", "+\t\t\t} else if (valueIfFalseType == NullBinding) {", "+\t\t\t\tcommonType = valueIfTrueType;", "+\t\t\t} else {", "+\t\t\t\tcommonType = scope.lowerUpperBound(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "694cae8384969eb224a52f9ba574607d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "9c479e8055cbe93318686e778cf375ba226b61bc", "commitAfterChange": "82c71159e4a76fe2b085325a61ccc12c857c6a1f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (valueIfFalseType.isCompatibleWith(valueIfTrueType)) {", "-\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "-\t\t\treturn this.resolvedType = valueIfTrueType;", "-\t\t}", "-\t\tif (valueIfTrueType.isCompatibleWith(valueIfFalseType)) {", "-\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\treturn this.resolvedType = valueIfFalseType;", "-\t\t}", "-\t\t// 1.5 addition: allow most common supertype ", "+\t\t\t// >= 1.5 : LUB(operand types) must exist", "+\t\t} else {", "+\t\t\t// < 1.5 : one operand must be convertible to the other", "+\t\t\tif (valueIfFalseType.isCompatibleWith(valueIfTrueType)) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfTrueType;", "+\t\t\t} else if (valueIfTrueType.isCompatibleWith(valueIfFalseType)) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfFalseType;", "+\t\t\t}"]}], "num": 37660}
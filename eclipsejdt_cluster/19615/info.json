{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6e712395aba6315e065ec23e59dc515", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8033a0947ad74d976c71fdea81941d60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractCompletionTest.java", "commitBeforeChange": "da80cfa9ed625bab885e849d64ff277d071e3e84", "commitAfterChange": "de7e4b40954d182f333159de9571c0420d75e2aa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint cursorLocation,  \t\tString expectedCompletion,  \t\tString expectedParentCompletion, \t\tString expectedUnitToString,  \t\tString expectedCompletionIdentifier,  \t\tString expectedReplacedSource, \t\tString[] expectedLabels, \t\tString testName)", "signatureAfterChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint cursorLocation,  \t\tString expectedCompletion,  \t\tString expectedParentCompletion, \t\tString expectedUnitToString,  \t\tString expectedCompletionIdentifier,  \t\tString expectedReplacedSource, \t\tString[] expectedLabels, \t\tString testName)", "diff": ["-\tassertTrue(\"no method found at cursor location\", foundMethod != null);", "-\tif (foundMethod instanceof AbstractMethodDeclaration) {", "-\t\tparser.parseBlockStatements((AbstractMethodDeclaration)foundMethod, unit);", "-\t} else {", "-\t\tTypeDeclaration type = (TypeDeclaration)foundMethod;", "-\t\tif (type.fields != null) {", "-\t\t\tfor (int i = 0; i < type.fields.length; i++) {", "-\t\t\t\tFieldDeclaration field = type.fields[i];", "-\t\t\t\tif (field.declarationSourceStart <= cursorLocation && (cursorLocation <= field.declarationSourceEnd || field.declarationSourceEnd == 0)) {", "-\t\t\t\t\tif (field instanceof Initializer) {", "-\t\t\t\t\t\tparser.parseBlockStatements((Initializer)field, type, unit);", "-\t\t\t\t\t\tbreak;", "+\t", "+\tif (foundMethod != null) {", "+\t\tif (foundMethod instanceof AbstractMethodDeclaration) {", "+\t\t\tparser.parseBlockStatements((AbstractMethodDeclaration)foundMethod, unit);", "+\t\t} else {", "+\t\t\tTypeDeclaration type = (TypeDeclaration)foundMethod;", "+\t\t\tif (type.fields != null) {", "+\t\t\t\tdone : for (int i = 0; i < type.fields.length; i++) {", "+\t\t\t\t\tFieldDeclaration field = type.fields[i];", "+\t\t\t\t\tif (field.declarationSourceStart <= cursorLocation && (cursorLocation <= field.declarationSourceEnd || field.declarationSourceEnd == 0)) {", "+\t\t\t\t\t\tif (field instanceof Initializer) {", "+\t\t\t\t\t\t\tparser.parseBlockStatements((Initializer)field, type, unit);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak done; // field initializer", "-\t\t\t\t\tassertTrue(\"TBD\", false); // field initializer", "-\tString computedCompletion = parser.assistNode == null ", "-\t\t\t\t\t\t\t\t? NONE", "-\t\t\t\t\t\t\t\t: parser.assistNode.toString();", "-\tString computedParentCompletion = parser.assistNodeParent == null ", "-\t\t\t\t\t\t\t\t? NONE", "-\t\t\t\t\t\t\t\t: parser.assistNodeParent.toString();", "-\tString computedUnitToString = unit.toString();", "-", "-\tif (!expectedCompletion.equals(computedCompletion)) {", "-\t\tSystem.out.println(Util.displayString(computedCompletion));", "-\t}", "-\tassertEquals(", "-\t\t\"invalid completion node-\" + testName,", "-\t\texpectedCompletion,", "-\t\tcomputedCompletion);", "-\t\t", "-\tif(expectedParentCompletion != null) {", "-\t\tif (!expectedParentCompletion.equals(computedParentCompletion)) {", "-\t\t\tSystem.out.println(Util.displayString(computedParentCompletion));", "-\t\t}", "-\t\tassertEquals(", "-\t\t\"invalid completion parent node-\" + testName,", "-\t\texpectedParentCompletion,", "-\t\tcomputedParentCompletion);", "-\t}", "-", "-\tif (!expectedUnitToString.equals(computedUnitToString)) {", "-\t\tSystem.out.println(Util.displayString(computedUnitToString));", "-\t}", "-\tassertEquals(", "-\t\t\"invalid completion location-\"+testName,", "-\t\texpectedUnitToString,", "-\t\tcomputedUnitToString);", "-", "-\tif (expectedCompletionIdentifier != null){", "-\t\tchar[] chars = ((CompletionScanner)parser.scanner).completionIdentifier;", "-\t\tString computedCompletionIdentifier = chars == null ? NONE : new String(chars);", "-\t\tif (!expectedCompletionIdentifier.equals(computedCompletionIdentifier)) {", "-\t\t\tSystem.out.println(Util.displayString(computedCompletionIdentifier));", "-\t\t}", "-\t\tassertEquals(", "-\t\t\t\"invalid completion identifier-\" + testName,", "+\tcheckParse(", "+\t\t\texpectedCompletion,", "+\t\t\texpectedParentCompletion,", "+\t\t\texpectedUnitToString,", "-\t\t\tcomputedCompletionIdentifier);", "-\t}", "-\tif (expectedReplacedSource != null){", "-\t\tchar[] chars = null;", "-\t\tif (parser.assistNode != null){", "-\t\t\tchars = CharOperation.subarray(", "-\t\t\t\tparser.scanner.source, ", "-\t\t\t\tparser.assistNode.sourceStart, ", "-\t\t\t\tparser.assistNode.sourceEnd + 1);", "-\t\t} else {", "-\t\t\tif (parser.assistIdentifier() != null){", "-\t\t\t\tif (((CompletionScanner)parser.scanner).completedIdentifierEnd ", "-\t\t\t\t\t>= ((CompletionScanner)parser.scanner).completedIdentifierStart){", "-\t\t\t\t\tchars = CharOperation.subarray(", "-\t\t\t\t\t\tparser.scanner.source, ", "-\t\t\t\t\t\t((CompletionScanner)parser.scanner).completedIdentifierStart, ", "-\t\t\t\t\t\t((CompletionScanner)parser.scanner).completedIdentifierEnd + 1);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tString computedReplacedSource  = chars == null ? NONE : new String(chars);", "-\t\tif (!expectedReplacedSource.equals(computedReplacedSource)) {", "-\t\t\tSystem.out.println(Util.displayString(computedReplacedSource));", "-\t\t}", "-\t\tassertEquals(", "-\t\t\t\"invalid replaced source-\" + testName,", "-\t\t\tcomputedReplacedSource);", "-\t\tif (expectedReplacedSource.length() == 0) {", "-\t\t\tassertEquals(", "-\t\t\t\t\"invalid insertion point-\" + testName,", "-\t\t\t\tcursorLocation + 1, ", "-\t\t\t\tparser.assistNode.sourceStart);", "-\t\t}", "-\t}", "-\tif (expectedLabels != null) {", "-//\t\tint length = (parser.labels == null) ? 0 : parser.labels.length;", "-//\t\tassertEquals(\"invalid number of labels-\" + testName, expectedLabels.length, length);", "-//\t\tfor (int i = 0; i < length; i++) {", "-//\t\t\tString label = new String(parser.labels[i]);", "-//\t\t\tassertEquals(\"invalid label-\" + testName, expectedLabels[i], label);", "-//\t\t}", "-\t}", "+\t\t\ttestName,", "+\t\t\tparser,", "+\t\t\tunit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991bc4164fddf42fa8ef2219fea69dab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractCompletionTest.java", "commitBeforeChange": "da80cfa9ed625bab885e849d64ff277d071e3e84", "commitAfterChange": "de7e4b40954d182f333159de9571c0420d75e2aa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void checkDietParse( \tchar[] source,  \tint cursorLocation,  \tString expectedCompletion,  \tString expectedParentCompletion, \tString expectedUnitToString,  \tString expectedCompletionIdentifier, \tString expectedReplacedSource, \tString testName)", "signatureAfterChange": " public void checkDietParse( \tchar[] source,  \tint cursorLocation,  \tString expectedCompletion,  \tString expectedParentCompletion, \tString expectedUnitToString,  \tString expectedCompletionIdentifier, \tString expectedReplacedSource, \tString testName)", "diff": ["-\tString computedCompletion = parser.assistNode == null ", "-\t\t\t\t\t\t\t\t\t? NONE", "-\t\t\t\t\t\t\t\t\t: parser.assistNode.toString();", "-\tString computedParentCompletion = parser.assistNodeParent == null ", "-\t\t\t\t\t\t\t\t? NONE", "-\t\t\t\t\t\t\t\t: parser.assistNodeParent.toString();", "-\tString computedUnitToString = unit.toString();", "-\t//System.out.println(computedUnitToString);", "-\t//System.out.println(Util.displayString(computedUnitToString));", "-\t//System.out.println(expectedUnitToString);", "-\t", "-\tif (!expectedCompletion.equals(computedCompletion)) {", "-\t\tSystem.out.println(Util.displayString(computedCompletion));", "-\t}", "-\tassertEquals(", "-\t\t\"invalid completion node-\" + testName,", "-\t\texpectedCompletion,", "-\t\tcomputedCompletion);", "-\t", "-\tif(expectedParentCompletion != null) {", "-\t\tif (!expectedParentCompletion.equals(computedParentCompletion)) {", "-\t\t\tSystem.out.println(Util.displayString(computedParentCompletion));", "-\t\t}", "-\t\tassertEquals(", "-\t\t\"invalid completion parent node-\" + testName,", "-\t\texpectedParentCompletion,", "-\t\tcomputedParentCompletion);", "-\t}", "-", "-\tif (!expectedUnitToString.equals(computedUnitToString)) {", "-\t\tSystem.out.println(Util.displayString(computedUnitToString));", "-\t}", "-\tassertEquals(", "-\t\t\"invalid completion tree-\" + testName,", "-\t\texpectedUnitToString,", "-\t\tcomputedUnitToString);", "-\t", "-\tif (expectedCompletionIdentifier != null){", "-\t\tchar[] chars = ((CompletionScanner)parser.scanner).completionIdentifier;", "-\t\tString computedCompletionIdentifier = chars == null ? NONE : new String(chars);", "-\t\tassertEquals(", "-\t\t\t\"invalid completion identifier-\" + testName,", "+\tcheckParse(", "+\t\t\texpectedCompletion,", "+\t\t\texpectedParentCompletion,", "+\t\t\texpectedUnitToString,", "-\t\t\tcomputedCompletionIdentifier);", "-\t}", "-\t", "-\tif (expectedReplacedSource != null){", "-\t\tchar[] chars = null;", "-\t\tif (parser.assistNode != null){", "-\t\t\tchars = CharOperation.subarray(", "-\t\t\t\tparser.scanner.source, ", "-\t\t\t\tparser.assistNode.sourceStart, ", "-\t\t\t\tparser.assistNode.sourceEnd + 1);", "-\t\t} else {", "-\t\t\tif (parser.assistIdentifier() != null){", "-\t\t\t\tif (((CompletionScanner)parser.scanner).completedIdentifierEnd ", "-\t\t\t\t\t>= ((CompletionScanner)parser.scanner).completedIdentifierStart){", "-\t\t\t\t\tchars = CharOperation.subarray(", "-\t\t\t\t\t\tparser.scanner.source, ", "-\t\t\t\t\t\t((CompletionScanner)parser.scanner).completedIdentifierStart, ", "-\t\t\t\t\t\t((CompletionScanner)parser.scanner).completedIdentifierEnd + 1);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tString computedReplacedSource  = chars == null ? NONE : new String(chars);", "-\t\tassertEquals(", "-\t\t\t\"invalid replaced source-\" + testName,", "-\t\t\tcomputedReplacedSource);", "-\t}", "+\t\t\ttestName,", "+\t\t\tparser,", "+\t\t\tunit);"]}], "num": 19615}
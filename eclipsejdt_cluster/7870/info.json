{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "704f5a968a7e02f294dd307aad162374", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f064091381e985de90c93c7906c260f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "ecd2d9d0e14c2688e43c7c452930452fe7a77cc0", "commitAfterChange": "9aada9a643f9161f963338b0cc5c0e55d4f0d0cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant opConstant = left.optimizedBooleanConstant();", "-\t\tif (opConstant != NotAConstant) {", "-\t\t\tif (opConstant.booleanValue() == true) {", "-\t\t\t\t// TRUE && anything", "-\t\t\t\t // need to be careful of scenario:", "-\t\t\t\t//\t\t(x && y) && !z, if passing the left info to the right, it would be swapped by the !", "-\t\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits(); ", "-\t\t\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);", "-\t\t\t\treturn mergedInfo;", "-\t\t\t}", "+\t\tConstant cst = this.left.optimizedBooleanConstant();", "+\t\tboolean isLeftOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isLeftOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+", "+\t\tif (isLeftOptimizedTrue) {", "+\t\t\t// TRUE && anything", "+\t\t\t // need to be careful of scenario:", "+\t\t\t//\t\t(x && y) && !z, if passing the left info to the right, it would be swapped by the !", "+\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits(); ", "+\t\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);", "+\t\t\tmergedInitStateIndex =", "+\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);", "+\t\t\treturn mergedInfo;", "+\t\t", "-\t\tif (opConstant != NotAConstant && opConstant.booleanValue() == false){", "+\t\tif (isLeftOptimizedFalse){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9a4bfda1ce0c2a2a068c1ddbc119c89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java", "commitBeforeChange": "ecd2d9d0e14c2688e43c7c452930452fe7a77cc0", "commitAfterChange": "9aada9a643f9161f963338b0cc5c0e55d4f0d0cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant opConstant = left.optimizedBooleanConstant();", "-\t\tif (opConstant != NotAConstant) {", "-\t\t\tif (opConstant.booleanValue() == false) {", "-\t\t\t\t// FALSE || anything", "-\t\t\t\t // need to be careful of scenario:", "-\t\t\t\t//\t\t(x || y) || !z, if passing the left info to the right, it would be swapped by the !", "-\t\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\t\t\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);", "-\t\t\t\treturn mergedInfo;", "-\t\t\t}", "+\t\tConstant cst = this.left.optimizedBooleanConstant();", "+\t\tboolean isLeftOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isLeftOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+", "+\t\tif (isLeftOptimizedFalse) {", "+\t\t\t// FALSE || anything", "+\t\t\t // need to be careful of scenario:", "+\t\t\t//\t\t(x || y) || !z, if passing the left info to the right, it would be swapped by the !", "+\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);", "+\t\t\tmergedInitStateIndex =", "+\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);", "+\t\t\treturn mergedInfo;", "-\t\tFlowInfo leftInfo, rightInfo;", "-\t\tleftInfo = left.analyseCode(currentScope, flowContext, flowInfo);", "+", "+\t\tFlowInfo leftInfo = left.analyseCode(currentScope, flowContext, flowInfo);", "-\t\trightInfo = leftInfo.initsWhenFalse().unconditionalInits().copy();", "+\t\tFlowInfo rightInfo = leftInfo.initsWhenFalse().unconditionalInits().copy();", "-\t\tif (opConstant != NotAConstant && opConstant.booleanValue() == true){", "-\t\t\trightInfo.setReachMode(FlowInfo.UNREACHABLE); //SILENT_FAKE_REACHABLE);", "+\t\tif (isLeftOptimizedTrue){", "+\t\t\trightInfo.setReachMode(FlowInfo.UNREACHABLE); "]}], "num": 7870}
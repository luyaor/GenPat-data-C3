{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7c05561efe418454e470cc214607ba9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f5343861b06739be3337eef23ce87fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "bffd05273174fba670489cd637d40ac2a4d0913b", "commitAfterChange": "5cda6ee5d9726ecd4c3800dc98f96b9913f2498c", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "\r private boolean isAffectedByPackageFragmentRoot(IJavaElementDelta delta, IJavaElement element)", "signatureAfterChange": "\r private boolean isAffectedByPackageFragmentRoot(IJavaElementDelta delta, IJavaElement element)", "diff": ["-\t\t\treturn fProjectRegion.contains(element);\r", "+\t\t\treturn this.projectRegion.contains(element);\r", "-\t\t\tif ((delta.getFlags() & IJavaElementDelta.F_REMOVED_FROM_CLASSPATH) > 0 || (delta.getFlags() & IJavaElementDelta.F_CONTENT) > 0) {\r", "+\t\t\tint flags = delta.getFlags();\r", "+\t\t\tif ((flags & IJavaElementDelta.F_ADDED_TO_CLASSPATH) > 0) {\r", "+\t\t\t\t// check if the root is in the classpath of one of the projects of this hierarchy\r", "+\t\t\t\tif (this.projectRegion != null) {\r", "+\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;\r", "+\t\t\t\t\tIPath rootPath = root.getPath();\r", "+\t\t\t\t\tIJavaElement[] elements = this.projectRegion.getElements();\r", "+\t\t\t\t\tfor (int i = 0; i < elements.length; i++) {\r", "+\t\t\t\t\t\tIJavaProject project = (IJavaProject)elements[i];\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);\r", "+\t\t\t\t\t\t\tfor (int j = 0; j < classpath.length; j++) {\r", "+\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];\r", "+\t\t\t\t\t\t\t\tif (entry.getPath().equals(rootPath)) {\r", "+\t\t\t\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t// igmore this project\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif ((flags & IJavaElementDelta.F_REMOVED_FROM_CLASSPATH) > 0 || (flags & IJavaElementDelta.F_CONTENT) > 0) {\r", "-\t\t\t\tIJavaElement[] pkgs = fPackageRegion.getElements();\r", "+\t\t\t\tIJavaElement[] pkgs = this.packageRegion.getElements();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb274b0fc5bf805bbc733bd7d0a560b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "d577fece07c4fdbce33b7bc16d2d2a9b7bf263e2", "commitAfterChange": "c4bece6f11e325ba67c44c784cdcd204e747008d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t// copy vectors into arrays", "-\tint openablesLength = potentialSubtypes.size();", "-\tOpenable[] openables = new Openable[openablesLength];", "-\tpotentialSubtypes.toArray(openables);", "-", "+\tint openablesLength = potentialSubtypes.size();", "+\t\t// copy vectors into arrays", "+\t\tOpenable[] openables = new Openable[openablesLength];", "+\t\tpotentialSubtypes.toArray(openables);", "+", "+\t\t// sort in the order of roots and in reverse alphabetical order for .class file", "+\t\t// since requesting top level types in the process of caching an enclosing type is", "+\t\t// not supported by the lookup environment", "+\t\tIPackageFragmentRoot[] roots = project.getPackageFragmentRoots();", "+\t\tint rootsLength = roots.length;", "+\t\tfinal HashtableOfObjectToInt indexes = new HashtableOfObjectToInt(openablesLength);", "+\t\tfor (int i = 0; i < openablesLength; i++) {", "+\t\t\tIJavaElement root = openables[i].getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\tint index;", "+\t\t\tfor (index = 0; index < rootsLength; index++) {", "+\t\t\t\tif (roots[index].equals(root))", "+\t\t\t\t\tbreak;", "+\t\t\t}\t\t", "+\t\t\tindexes.put(openables[i], index);", "+\t\t}", "+\t\tUtil.sort(openables, new Util.Comparer() {", "+\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\tint aIndex = indexes.get(a);", "+\t\t\t\tint bIndex = indexes.get(b);", "+\t\t\t\tif (aIndex != bIndex)", "+\t\t\t\t\treturn aIndex - bIndex;", "+\t\t\t\treturn ((Openable) b).getElementName().compareTo(((Openable) a).getElementName());", "+\t\t\t}", "+\t\t});", "+\t\t"]}], "num": 31264}
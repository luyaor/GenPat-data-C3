{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b78679ed7dde92fc0242c93d29b54d86", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7489bfd22418957e06d526f5d3fa9575", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tprivate void handleArguments(List<? extends ASTNode> arguments, int wrappingOption)", "signatureAfterChange": "  \tprivate void handleArguments(List<? extends ASTNode> arguments, int wrappingOption)", "diff": ["-\t\tfor (ASTNode argument : arguments)", "-\t\t\tthis.wrapIndexes.add(this.tm.firstIndexIn(argument, -1));", "+\t\tthis.wrapPenalties.add(1 / PREFERRED);", "+\t\tprepareElementsList(arguments, TokenNameCOMMA, TokenNameLPAREN);", "+\t\thandleWrap(wrappingOption);", "+\t}", "-\t\t\tthis.wrapParentIndex = this.tm.findIndex(firstToken.originalStart - 1, TokenNameLPAREN, false);", "-\t\t\tif (!arguments.isEmpty() && this.wrapGroupEnd < 0)", "-\t\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(arguments.get(arguments.size() - 1), -1);", "-\t\t\thandleWrap(wrappingOption, 1 / PREFERRED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb783f57dc6a554dd75c776ec186eb8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(Assignment node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(QualifiedName node)", "diff": ["+", "+\t@Override", "+\tpublic boolean visit(QualifiedName node) {", "+\t\thandleFieldAccess(node);", "+\t\treturn true;", "+\t}", "-\t\tthis.wrapIndexes.add(this.tm.firstIndexIn(node.getRightHandSide(), -1));", "-\t\tthis.wrapParentIndex = operatorIndex;"]}], "num": 58488}
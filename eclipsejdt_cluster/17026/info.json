{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9e4bfad88809796fe57b23e302cda63", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78ea64d7cff9670fc5c3be67f512ac13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LongLiteral.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void computeConstant()", "signatureAfterChange": " public void computeConstant()", "diff": ["+}", "-\t//the overflow (when radix=10) is tested using the fact that", "-\t//the value should always grow during its computation", "-\tint length = this.source.length - 1; //minus one because the last char is 'l' or 'L'", "-\tlong computedValue ;", "-\tif (this.source[0] == '0') {", "+\tchar[] token = this.reducedForm != null ? this.reducedForm : this.source;", "+\tint tokenLength = token.length;", "+\tint length = tokenLength - 1;", "+\tint radix = 10;", "+\tint j = 0;", "+\tif (token[0] == '0') {", "-\t\tfinal int shift,radix;", "-\t\tint j ;", "-\t\tif ( (this.source[1] == 'x') || (this.source[1] == 'X') ) {", "-\t\t\tshift = 4 ; j = 2; radix = 16;", "+\t\tif ((token[1] == 'x') || (token[1] == 'X')) {", "+\t\t\tradix = 16;", "+\t\t\tj = 2;", "+\t\t} else if ((token[1] == 'b') || (token[1] == 'B')) {", "+\t\t\tradix = 2;", "+\t\t\tj = 2;", "-\t\t\tshift = 3 ; j = 1; radix = 8;", "+\t\t\tradix = 8;", "+\t\t\tj = 1;", "-\t\tint nbDigit = 0;", "-\t\twhile (this.source[j]=='0') {", "-\t\t\tj++; //jump over redondant zero", "-\t\t\tif ( j == length) {", "-\t\t\t\t//watch for 0000000000000L", "-\t\t\t\tthis.constant = LongConstant.fromValue(0L);", "-\t\t\t\treturn;", "+\t}", "+\tswitch(radix) {", "+\t\tcase 2 :", "+\t\t\tif ((length - 2) > 64) { // remove 0b or 0B", "+\t\t\t\treturn; /*constant stays null*/", "-\t\t}", "-", "-\t\tint digitValue ;", "-\t\tif ((digitValue = ScannerHelper.digit(this.source[j++],radix)) < 0 ) {", "+\t\t\tcomputeValue(token, length, radix, j);", "+\t\t\tbreak;", "+\t\tcase 16 :", "+\t\t\tif (tokenLength <= 19) {", "+\t\t\t\tif (CharOperation.equals(token, HEXA_MINUS_ONE_VALUE)) {", "+\t\t\t\t\tthis.constant = LongConstant.fromValue(-1L);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tcomputeValue(token, length, radix, j);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 10 :", "+\t\t\tif (tokenLength > DECIMAL_MAX_VALUE.length", "+\t\t\t\t\t|| (tokenLength == DECIMAL_MAX_VALUE.length", "+\t\t\t\t\t\t\t&& CharOperation.compareTo(token, DECIMAL_MAX_VALUE, 0, length) > 0)) {", "+\t\t\t\treturn; /*constant stays null*/", "+\t\t\t}", "+\t\t\tcomputeValue(token, length, radix, j);", "+\t\t\tbreak;", "+\t\tcase 8 :", "+\t\t\tif (tokenLength <= 24) {", "+\t\t\t\tif (tokenLength == 24 && token[j] > '1') {", "+\t\t\t\t\treturn; /*constant stays null*/", "+\t\t\t\t}", "+\t\t\t\tif (CharOperation.equals(token, OCTAL_MINUS_ONE_VALUE)) {", "+\t\t\t\t\tthis.constant = LongConstant.fromValue(-1L);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tcomputeValue(token, length, radix, j);", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+}", "-\t\tif (digitValue >= 8)", "-\t\t\tnbDigit = 4;", "-\t\telse if (digitValue >= 4)", "-\t\t\tnbDigit = 3;", "-\t\telse if (digitValue >= 2)", "-\t\t\tnbDigit = 2;", "-\t\telse", "-\t\t\tnbDigit = 1; //digitValue is not 0", "-\t\tcomputedValue = digitValue ;", "-\t\twhile (j<length) {", "-\t\t\tif ((digitValue = ScannerHelper.digit(this.source[j++],radix)) < 0) {", "-\t\t\t\treturn; /*constant stays null*/", "-\t\t\t}", "-\t\t\tif ((nbDigit += shift) > 64)", "-\t\t\t\treturn; /*constant stays null*/", "-\t\t\tcomputedValue = (computedValue<<shift) | digitValue ;", "-\t\t}", "-\t} else {", "-\t\t//-----------case radix=10-----------------", "-\t\tlong previous = 0;", "-\t\tcomputedValue = 0;", "-\t\tfinal long limit = Long.MAX_VALUE / 10; // needed to check prior to the multiplication", "-\t\tfor (int i = 0 ; i < length; i++) {", "-\t\t\tint digitValue ;", "-\t\t\tif ((digitValue = ScannerHelper.digit(this.source[i], 10)) < 0 ) return /*constant stays null*/;", "-\t\t\tprevious = computedValue;", "-\t\t\tif (computedValue > limit)", "-\t\t\t\treturn; /*constant stays null*/", "-\t\t\tcomputedValue *= 10;", "-\t\t\tif ((computedValue + digitValue) > Long.MAX_VALUE)", "-\t\t\t\treturn; /*constant stays null*/", "-\t\t\tcomputedValue += digitValue;", "-\t\t\tif (previous > computedValue)", "-\t\t\t\treturn; /*constant stays null*/", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1f9c0e060fd6a6ef127f2c9de81bb83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntLiteral.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void computeConstant()", "signatureAfterChange": " public void computeConstant()", "diff": ["-\t//a special constant is use for the potential Integer.MAX_VALUE+1", "-\t//which is legal if used with a - as prefix....cool....", "-\t//notice that Integer.MIN_VALUE  == -2147483648", "-\tlong MAX = Integer.MAX_VALUE;", "-\tif (this == One) {\t", "-\t\tthis.constant = IntConstant.fromValue(1); ", "-\t\treturn ;", "+\tchar[] token = this.reducedForm != null ? this.reducedForm : this.source;", "+\tint tokenLength = token.length;", "+\tint radix = 10;", "+\tint j = 0;", "+\tif (token[0] == '0') {", "+\t\tif (tokenLength == 1) {", "+\t\t\tthis.constant = IntConstant.fromValue(0);", "+\t\t\treturn;", "+\t\t}", "+\t\tif ((token[1] == 'x') || (token[1] == 'X')) {", "+\t\t\tradix = 16;", "+\t\t\tj = 2;", "+\t\t} else if ((token[1] == 'b') || (token[1] == 'B')) {", "+\t\t\tradix = 2;", "+\t\t\tj = 2;", "+\t\t} else {", "+\t\t\tradix = 8;", "+\t\t\tj = 1;", "+\t\t}", "-\tint length = this.source.length;", "-\tlong computedValue = 0L;", "-\tif (this.source[0] == '0') {\t", "-\t\tMAX = 0xFFFFFFFFL ; //a long in order to be positive !", "-\t\tif (length == 1) {", "-\t\t\tthis.constant = IntConstant.fromValue(0); return ;", "-\t\t}", "-\t\tfinal int shift,radix;", "-\t\tint j ;", "-\t\tif ((this.source[1] == 'x') || (this.source[1] == 'X')) {\t", "-\t\t\tshift = 4 ; j = 2; radix = 16;", "-\t\t} else {\t", "-\t\t\tshift = 3 ; j = 1; radix = 8;", "-\t\t}", "-\t\twhile (this.source[j]=='0')\t {\t", "-\t\t\tj++; //jump over redondant zero", "-\t\t\tif (j == length) {", "-\t\t\t\t//watch for 000000000000000000", "-\t\t\t\tthis.constant = IntConstant.fromValue(this.value = (int)computedValue);", "+\tswitch(radix) {", "+\t\tcase 2 :", "+\t\t\tif ((tokenLength - 2) > 32) {", "+\t\t\t\t// remove 0b or 0B", "+\t\t\t\treturn; /*constant stays null*/", "+\t\t\t}", "+\t\t\tcomputeValue(token, tokenLength, radix, j);", "+\t\t\treturn;", "+\t\tcase 16 :", "+\t\t\tif (tokenLength <= 10) {", "+\t\t\t\tif (CharOperation.equals(token, HEXA_MINUS_ONE_VALUE)) {", "+\t\t\t\t\tthis.constant = IntConstant.fromValue(-1);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tcomputeValue(token, tokenLength, radix, j);", "-\t\t}", "-\t\twhile (j<length) {\t", "-\t\t\tint digitValue ;", "-\t\t\tif ((digitValue = ScannerHelper.digit(this.source[j++],radix))\t< 0 ) {", "+\t\t\tbreak;", "+\t\tcase 10 :", "+\t\t\tif (tokenLength > DECIMAL_MAX_VALUE.length", "+\t\t\t\t\t|| (tokenLength == DECIMAL_MAX_VALUE.length", "+\t\t\t\t\t\t\t&& CharOperation.compareTo(token, DECIMAL_MAX_VALUE) > 0)) {", "-\t\t\tcomputedValue = (computedValue<<shift) | digitValue ;", "-\t\t\tif (computedValue > MAX) return; /*constant stays null*/", "-\t\t}", "-\t} else {\t", "-\t\t//-----------regular case : radix = 10-----------", "-\t\tfor (int i = 0 ; i < length;i++) {\t", "-\t\t\tint digitValue ;", "-\t\t\tif ((digitValue = ScannerHelper.digit(this.source[i],10))\t< 0 ) {", "-\t\t\t\treturn; /*constant stays null*/", "+\t\t\tcomputeValue(token, tokenLength, radix, j);", "+\t\t\tbreak;", "+\t\tcase 8 :", "+\t\t\tif (tokenLength <= 12) {", "+\t\t\t\tif (tokenLength == 12 && token[j] > '4') {", "+\t\t\t\t\treturn; /*constant stays null*/", "+\t\t\t\t}", "+\t\t\t\tif (CharOperation.equals(token, OCTAL_MINUS_ONE_VALUE)) {", "+\t\t\t\t\tthis.constant = IntConstant.fromValue(-1);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tcomputeValue(token, tokenLength, radix, j);", "+\t\t\t\treturn;", "-\t\t\tcomputedValue = 10*computedValue + digitValue;", "-\t\t\tif (computedValue > MAX) return /*constant stays null*/ ;", "-\t\t}", "+\t\t\tbreak;", "-\tthis.constant = IntConstant.fromValue(this.value = (int)computedValue);", "-"]}], "num": 17026}
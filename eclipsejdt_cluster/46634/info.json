{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6fc99e44052012baab0f9f5736f0b69", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097e257ed61b23089b1b5aa8c7b8d172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["-\t */", "-\tpublic void acceptType(", "-\t\tchar[] packageName,", "-\t\tchar[] simpleTypeName,", "-\t\tchar[][] enclosingTypeNames,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tif (this.options.checkDeprecation && (modifiers & ClassFileConstants.AccDeprecated) != 0) return;", "-", "-\t\tif (this.options.checkVisibility) {", "-\t\t\tif((modifiers & ClassFileConstants.AccPublic) == 0) {", "-\t\t\t\tif((modifiers & ClassFileConstants.AccPrivate) != 0) return;", "-", "-\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "-\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "-\t\t\t}", "-\t\t}", "-", "-\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "-\t\tif(accessRestriction != null) {", "-\t\t\tswitch (accessRestriction.getProblemId()) {", "-\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tif (this.options.checkForbiddenReference) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\tif (this.options.checkDiscouragedReference) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-", "-\t\tif(this.acceptedTypes == null) {", "-\t\t\tthis.acceptedTypes = new ObjectVector();", "-\t\t}", "-\t\tthis.acceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "-\t}", "+\t */", "+\tpublic void acceptType(", "+\t\tchar[] packageName,", "+\t\tchar[] simpleTypeName,", "+\t\tchar[][] enclosingTypeNames,", "+\t\tint modifiers,", "+\t\tAccessRestriction accessRestriction) {", "+\t\t", "+\t\t// does not check cancellation for every types to avoid performance loss", "+\t\tif ((this.foundTypesCount % CHECK_CANCEL_FREQUENCY_IN_FIND_TYPES) == 0) checkCancel();", "+\t\tthis.foundTypesCount++;", "+\t\t", "+\t\tif (this.options.checkDeprecation && (modifiers & ClassFileConstants.AccDeprecated) != 0) return;", "+", "+\t\tif (this.options.checkVisibility) {", "+\t\t\tif((modifiers & ClassFileConstants.AccPublic) == 0) {", "+\t\t\t\tif((modifiers & ClassFileConstants.AccPrivate) != 0) return;", "+", "+\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "+\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "+\t\t\t}", "+\t\t}", "+", "+\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "+\t\tif(accessRestriction != null) {", "+\t\t\tswitch (accessRestriction.getProblemId()) {", "+\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\tif (this.options.checkForbiddenReference) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\tif (this.options.checkDiscouragedReference) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+", "+\t\tif(this.acceptedTypes == null) {", "+\t\t\tthis.acceptedTypes = new ObjectVector();", "+\t\t}", "+\t\tthis.acceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c50487236499c121863fe5ca36bba06b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "600cc6e957b3608b8d3c26027936fe87489e52d9", "commitAfterChange": "23ffb43b2ebb4c3a8ec95cae07baf3650cc30157", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tconstant = variable.constant;", "+\t\t\t\t\t\tif ((this.bits & IsStrictlyAssignedMASK) == 0) {", "+\t\t\t\t\t\t\tconstant = variable.constant;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tconstant = NotAConstant;", "+\t\t\t\t\t\t}"]}], "num": 46634}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9402a534d88628e7564ebae0e1fb42ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "166754efe5bc8828c04cbc793d35d7e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "91215d8b0f077e4a387766e53eb9ded14e3534d0", "commitAfterChange": "24dee0301b5b68b6090019ddc2ba8f236b84d827", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r protected void attachOrphanCompletionNode()", "signatureAfterChange": "\r protected void attachOrphanCompletionNode()", "diff": ["+\t\tAstNode orphan = this.assistNode;\r", "-\t\tStatement statement = (Statement)wrapWithExplicitConstructorCallIfNeeded(this.assistNode);\r", "+\t\t\r", "+\t\t\r", "+\t\t/* if in context of a type, then persists the identifier into a fake field return type */\r", "+\t\tif (currentElement instanceof RecoveredType){\r", "+\t\t\tRecoveredType recoveredType = (RecoveredType)currentElement;\r", "+\t\t\t/* filter out cases where scanner is still inside type header */\r", "+\t\t\tif (recoveredType.foundOpeningBrace) {\r", "+\t\t\t\t/* generate a pseudo field with a completion on type reference */\t\r", "+\t\t\t\tif (orphan instanceof TypeReference){\r", "+\t\t\t\t\tcurrentElement = currentElement.add(new SelectionOnFieldType((TypeReference)orphan), 0);\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\tStatement statement = (Statement)wrapWithExplicitConstructorCallIfNeeded(orphan);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d36a93dae8b9240ad132fecf8eb7a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "33e03339ed2881c9f793c3a49497633bbac5c8a8", "commitAfterChange": "09c3f545375b31028657f0b8044c5cbcb5324abc", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void recordCompletionOnReference()", "signatureAfterChange": " protected void checkAndSetModifiers(int flag)", "diff": ["+}", "+protected void checkAndSetModifiers(int flag) {", "+\tsuper.checkAndSetModifiers(flag);", "+\t", "+\tif (this.isInsideMethod()) {", "+\t\tthis.hasUnusedModifiers = true;", "+\t}", "-public void recordCompletionOnReference(){", "-", "-\tif (currentElement instanceof RecoveredType){", "-\t\tRecoveredType recoveredType = (RecoveredType)currentElement;", "-", "-\t\t/* filter out cases where scanner is still inside type header */", "-\t\tif (!recoveredType.foundOpeningBrace) return;", "-", "-\t\t/* generate a pseudo field with a completion on type reference */", "-\t\tcurrentElement.add(", "-\t\t\tnew CompletionOnFieldType(this.getTypeReference(0), false), 0);", "-\t\treturn;", "-\t}", "-\tif (!diet) return; // only record references attached to types", "-", "-}"]}], "num": 21696}
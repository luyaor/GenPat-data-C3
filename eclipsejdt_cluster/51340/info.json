{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee8e51b1850613685b5a408fbd406f59", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef4838be1a1640604c4853f4abfe602", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "241d64f631bbf77014d4fbfc8f74f781b65e5c36", "commitAfterChange": "42e53b3c82f631cac5341438af4d88461f281652", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void _testBug51617() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51617() throws JavaModelException", "diff": ["-\tpublic void _testBug51617() throws JavaModelException {", "+\tpublic void testBug51617() throws JavaModelException {", "+\t\tString [] unbound = { \"e\" };", "-\t\t\tassertNotNull(\"We should have a failure!\", this.failures);", "-\t\t\tassertEquals(\"We should have exactly one failure!\", 1, this.failures.size());", "-\t\t\t// TODO positions cannot be inlined (they will be different if compiled on Linux and run on Windows)", "-\t\t\tString expected = \"Test.java: Reference at <126> in '\\n * @exception e' should be bound!\";", "-\t\t\tString failure = (String) this.failures.remove(0);", "-\t\t\tassertEquals(\"We should have an unbound exception here!\", expected, failure);", "+\t\t\tint size = unbound.length;", "+\t\t\tfor (int i=0, f=0; i<size; i++) {", "+\t\t\t\tassertTrue(\"Invalid number of failures!\", this.failures.size()>f);", "+\t\t\t\tString failure = (String) this.failures.get(f);", "+\t\t\t\tString expected = \"Reference '\"+unbound[i]+\"' should be bound!\";", "+\t\t\t\tif (expected.equals(failure.substring(failure.indexOf(' ')+1))) {", "+\t\t\t\t\tthis.failures.remove(f);", "+\t\t\t\t} else {", "+\t\t\t\t\tf++;\t// skip offending failure", "+\t\t\t\t\ti--;\t// stay on expected string", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tthis.stopOnFailure = true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d49bc56cab9f075c910368a1382f20e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "d3e68ebc2f073155fc0135042d457eeda516d425", "commitAfterChange": "e2b82109649a9a909e8c958b4e10c6fc85813cdf", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidReference(this.scanner.getCurrentTokenStartPosition(), getTokenEndPosition());", "+\t\t\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\t\t\tboolean isUrlRef = false;", "+\t\t\t\t\t\t\t\tif (this.tagValue == TAG_SEE_VALUE) {", "+\t\t\t\t\t\t\t\t\tint length=currentError.length, i=1 /* first char is \" */;", "+\t\t\t\t\t\t\t\t\twhile (i<length && ScannerHelper.isLetter(currentError[i])) {", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (i<(length-2) && currentError[i] == ':' && currentError[i+1] == '/' && currentError[i+2] == '/') {", "+\t\t\t\t\t\t\t\t\t\tisUrlRef = true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (isUrlRef) {", "+\t\t\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=207765", "+\t\t\t\t\t\t\t\t\t// handle invalid URL references in javadoc with dedicated message", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(this.scanner.getCurrentTokenStartPosition(), getTokenEndPosition());", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidReference(this.scanner.getCurrentTokenStartPosition(), getTokenEndPosition());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}"]}], "num": 51340}
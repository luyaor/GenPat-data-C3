{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e5fd60104abb176d7b029483daa6075", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8274b5293dc576ab4ae26eb119e00d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "93444b7671b763598022452cafbe29143ff8c004", "commitAfterChange": "b9dd40f151f099ea02bdb585a636b0e4d30a3aca", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\t\t", "+", "-\t\t\t\tif (constructorDeclaration != null) {", "-\t\t\t\t\tBlock block = ast.newBlock();", "-\t\t\t\t\tblock.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] statements = constructorDeclaration.statements;", "-\t\t\t\t\tif (statements != null) {", "-\t\t\t\t\t\tint statementsLength = statements.length;", "-\t\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\t\t\t\t\tif (statements[i] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "-\t\t\t\t\t\t\t\tconverter.checkAndAddMultipleLocalDeclaration(statements, i, block.statements());", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tStatement statement = converter.convert(statements[i]);", "-\t\t\t\t\t\t\t\tif (statement != null) {", "-\t\t\t\t\t\t\t\t\tblock.statements().add(statement);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\tBlock block = ast.newBlock();", "+\t\t\t\tblock.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] statements = constructorDeclaration.statements;", "+\t\t\t\tif (statements != null) {", "+\t\t\t\t\tint statementsLength = statements.length;", "+\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "+\t\t\t\t\t\tif (statements[i] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t\t\t\t\t\tconverter.checkAndAddMultipleLocalDeclaration(statements, i, block.statements());", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tStatement statement = converter.convert(statements[i]);", "+\t\t\t\t\t\t\tif (statement != null) {", "+\t\t\t\t\t\t\t\tblock.statements().add(statement);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, compilationUnit, block, recordedParsingInformation, data);", "-\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\t\treturn block;", "-\t\t\t\t} else {", "-\t\t\t\t\tCategorizedProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\t\treturn compilationUnit;", "+\t\t\t\trootNodeToCompilationUnit(ast, compilationUnit, block, recordedParsingInformation, data);", "+\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\treturn block;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7cf61c27708fe810152542d78a34d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0bd771375c18b7c83a5adef74657e35cf2c86ff3", "commitAfterChange": "5882e29154dfffe57fe4183f714dc74947e8e98d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true, this.statementsRecovery);", "-\t\t\t\tif (nodes != null) {", "-\t\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "-\t\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "-\t\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "-\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\t\treturn typeDeclaration;", "-\t\t\t\t} else {", "-\t\t\t\t\tCategorizedProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "+\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "+\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "+\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "+\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\treturn typeDeclaration;"]}], "num": 71598}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "883fa5b831a0358c1b3c913778a97f21", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31091dfca2a91f749fa353b0149598ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \t \tprivate void createType(TypeBinding type, Scope scope, StringBuffer completion)", "signatureAfterChange": " \t \tprivate void createType(TypeBinding type, Scope scope, StringBuffer completion)", "diff": ["-\t\tif (type.isBaseType()) {", "-\t\t\tcompletion.append(type.sourceName());", "-\t\t} else if (type.isTypeVariable()) {", "-\t\t\tcompletion.append(type.sourceName());", "-\t\t} else if (type.isWildcard()) {", "-\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) type;", "-\t\t\tcompletion.append('?');", "-\t\t\tswitch (wildcardBinding.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcompletion.append(EXTENDS);", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "-\t\t\t\t\tif(wildcardBinding.otherBounds != null) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint length = wildcardBinding.otherBounds.length;", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\t\t\tcompletion.append('&');", "-\t\t\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\t\t\tcreateType(wildcardBinding.otherBounds[i], scope, completion);", "+\t\tswitch (type.kind()) {", "+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\tcompletion.append(type.sourceName());", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\tcase Binding.INTERSECTION_TYPE : // TODO (david) need to handle intersection type specifically", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) type;", "+\t\t\t\tcompletion.append('?');", "+\t\t\t\tswitch (wildcardBinding.boundKind) {", "+\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcompletion.append(EXTENDS);", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "+\t\t\t\t\t\tif(wildcardBinding.otherBounds != null) {", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tint length = wildcardBinding.otherBounds.length;", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\t\t\tcompletion.append('&');", "+\t\t\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\t\t\tcreateType(wildcardBinding.otherBounds[i], scope, completion);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcompletion.append(SUPER);", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} else if (type.isArrayType()) {", "-\t\t\tcreateType(type.leafComponentType(), scope, completion);", "-\t\t\tint dim = type.dimensions();", "-\t\t\tfor (int i = 0; i < dim; i++) {", "-\t\t\t\tcompletion.append('[');", "-\t\t\t\tcompletion.append(']');", "-\t\t\t}", "-\t\t} else if (type.isParameterizedType()) {", "-\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) type;", "-\t\t\tif (type.isMemberType()) {", "-\t\t\t\tcreateType(parameterizedType.enclosingType(), scope, completion);", "-\t\t\t\tcompletion.append('.');", "-\t\t\t\tcompletion.append(parameterizedType.sourceName);", "-\t\t\t} else {", "-\t\t\t\tcompletion.append(CharOperation.concatWith(parameterizedType.genericType().compoundName, '.'));", "-\t\t\t}\t    ", "-\t\t\tif (parameterizedType.arguments != null) {", "-\t\t\t\tcompletion.append('<');", "-\t\t\t    for (int i = 0, length = parameterizedType.arguments.length; i < length; i++) {", "-\t\t\t        if (i != 0) completion.append(',');", "-\t\t\t        createType(parameterizedType.arguments[i], scope, completion);", "-\t\t\t    }", "-\t\t\t    completion.append('>');", "-\t\t\t}", "-\t\t} else {", "-\t\t\tchar[] packageName = type.qualifiedPackageName();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcompletion.append(SUPER);", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tcreateType(type.leafComponentType(), scope, completion);", "+\t\t\t\tint dim = type.dimensions();", "+\t\t\t\tfor (int i = 0; i < dim; i++) {", "+\t\t\t\t\tcompletion.append('[');", "+\t\t\t\t\tcompletion.append(']');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) type;", "+\t\t\t\tif (type.isMemberType()) {", "+\t\t\t\t\tcreateType(parameterizedType.enclosingType(), scope, completion);", "+\t\t\t\t\tcompletion.append('.');", "+\t\t\t\t\tcompletion.append(parameterizedType.sourceName);", "+\t\t\t\t} else {", "+\t\t\t\t\tcompletion.append(CharOperation.concatWith(parameterizedType.genericType().compoundName, '.'));", "+\t\t\t\t}\t    ", "+\t\t\t\tif (parameterizedType.arguments != null) {", "+\t\t\t\t\tcompletion.append('<');", "+\t\t\t\t    for (int i = 0, length = parameterizedType.arguments.length; i < length; i++) {", "+\t\t\t\t        if (i != 0) completion.append(',');", "+\t\t\t\t        createType(parameterizedType.arguments[i], scope, completion);", "+\t\t\t\t    }", "+\t\t\t\t    completion.append('>');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tchar[] packageName = type.qualifiedPackageName();", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72992b78a5996594b61c5aaa53d278fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "1995deba8c96efdefeb6a6078c7e55c511780c0c", "commitAfterChange": "c0961b9d73157eff51e68a5c49ea401574d94c27", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " private ReferenceBinding typeToRecord(TypeBinding type)", "signatureAfterChange": " private ReferenceBinding typeToRecord(TypeBinding type)", "diff": ["-\tif (type.isParameterizedType())", "-\t\ttype = type.erasure();", "-\telse if (type.isRawType())", "-\t\ttype = type.erasure();", "-\telse if (type.isWildcard()) ", "-\t    return null;", "+\tswitch (type.bindingType()) {", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn null;", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\tcase Binding.RAW_TYPE :", "+\t\t\ttype = type.erasure();", "+\t}", "-\tif (type.isBaseType()) return null;", "-\tif (type.isTypeVariable()) return null;", "-\tif (((ReferenceBinding) type).isLocalType()) return null;", "-", "-\treturn (ReferenceBinding) type;", "+\tif (type instanceof ReferenceBinding) {", "+\t\tReferenceBinding refType = (ReferenceBinding) type;", "+\t\tif (!refType.isLocalType()) return refType;", "+\t}", "+\treturn null;"]}], "num": 40370}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a2f8c045333f680ed792df327050387", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aa171ce1a588b4f37730f86bd5693c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4e141be8003d1ef09b5a958dd38e851de76be5f5", "commitAfterChange": "d14fcf9bcec95873f54edd756055ca864aab7a2b", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 301, "signatureBeforeChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive)", "signatureAfterChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray)", "diff": ["-protected void consumeReferenceExpressionTypeForm(boolean isPrimitive) {", "-\t// ReferenceExpression ::= PrimitiveType Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Name Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "+protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray) {", "+\t", "+\t// ReferenceExpression ::= PrimitiveType Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers PrimitiveType Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers Name Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers Name PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "+\tint illegalModifiers = this.intStack[this.intPtr--];", "+\t", "-\ttype = getUnannotatedTypeReference(this.intStack[this.intPtr--]);", "+\t// Type Annotations are in the expression stack, so retrieve as unannotated type ", "+\ttype = getUnannotatedTypeReference(isArray ? this.intStack[this.intPtr--] : 0);", "+    // and attach the annotations now.", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.expressionStack,", "+\t\t\t\t(this.expressionPtr -= length) + 1,", "+\t\t\t\ttype.annotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\ttype.sourceStart = type.annotations[0].sourceStart;", "+\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "+\t}", "+\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "+\t\ttype.sourceStart = illegalModifiersSourceStart;", "+\t}", "+\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "+\t\tproblemReporter().invalidLocationForModifiers(type);", "+\t}", "+\tresetModifiers();", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfecbd12df29fde0a4385a9c02c48bb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4e141be8003d1ef09b5a958dd38e851de76be5f5", "commitAfterChange": "d14fcf9bcec95873f54edd756055ca864aab7a2b", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 306, "signatureBeforeChange": " protected void consumeReferenceExpressionGenericTypeForm()", "signatureAfterChange": " protected void consumeReferenceExpressionGenericTypeForm()", "diff": ["-\t", "-\t// ReferenceExpression ::= Name BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+", "+\t// ReferenceExpression ::= Name PushModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers Name PushRealModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t", "+\tint typeSourceEnd = this.intStack[this.intPtr--];", "-\t// Code lifted from CastExpression consumption actions and pounded into shape ...", "+", "-\t\tTypeReference rightSide = getTypeReference(0);", "-\t\tParameterizedQualifiedTypeReference qualifiedParameterizedTypeReference = computeQualifiedGenericsFromRightSide(rightSide, dims);", "-\t\tthis.intPtr--;", "-\t\tif (newForm) {", "-\t\t\trexp = new ReferenceExpression(qualifiedParameterizedTypeReference, typeArguments, newEnd);", "-\t\t} else {", "-\t\t\trexp = new ReferenceExpression(qualifiedParameterizedTypeReference, typeArguments, methodReference);", "-\t\t}", "+\t\tTypeReference rightSide = getUnannotatedTypeReference(0); // until we add support for X. @Inner Y, by design the type after '.' is unannotated.", "+\t\ttype = computeQualifiedGenericsFromRightSide(rightSide, dims);", "-\t\ttype = getTypeReference(dims);", "-\t\tif (newForm) {", "-\t\t\trexp = new ReferenceExpression(type, typeArguments, newEnd);", "-\t\t} else {", "-\t\t\trexp = new ReferenceExpression(type, typeArguments, methodReference);", "-\t\t}", "-\t\tthis.intPtr --; // pop '<' position", "+\t\ttype = getUnannotatedTypeReference(dims); // annotations attached below.", "+\tthis.intPtr--; // pop '<' position", "+\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "+\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "+\t\ttype.sourceStart = illegalModifiersSourceStart;", "+\t}", "+\ttype.sourceEnd = typeSourceEnd;", "+\t", "+\trexp = newForm ? new ReferenceExpression(type, typeArguments, newEnd) : new ReferenceExpression(type, typeArguments, methodReference);", "+", "+\t// Prefix annotations if any are on the expression stack, attach them now.", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.expressionStack,", "+\t\t\t\t(this.expressionPtr -= length) + 1,", "+\t\t\t\ttype.annotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\tint annotStart = type.annotations[0].sourceStart;", "+\t\tif (annotStart < type.sourceStart) {", "+\t\t\ttype.sourceStart = annotStart;", "+\t\t}", "+\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "+\t}", "+", "+\tint illegalModifiers = this.intStack[this.intPtr--];", "+\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "+\t\tproblemReporter().invalidLocationForModifiers(type);", "+\t}", "+\tresetModifiers();"]}], "num": 71344}
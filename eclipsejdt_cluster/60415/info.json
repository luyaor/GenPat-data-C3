{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33bc539162da2bbbc8e2537db991b0bf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ff2f2468b7e5dd0c0408a18848fcac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportMethodDeclaration(\r", "-\tAbstractMethodDeclaration methodDeclaration, \r", "-\tchar[][] definingTypeNames,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// create method handle\r", "-\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t// compute source positions of the selector \r", "-\tScanner scanner = parser.scanner;\r", "-\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\ttry {\r", "-\t\tscanner.getNextToken();\r", "-\t} catch(InvalidInputException e) {\r", "-\t}\r", "-\tint nameSourceEnd = scanner.currentPosition-1;\r", "-\r", "-\t// accept method declaration\r", "-\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-}\r", "+\t */\r", "+\tpublic void reportMethodDeclaration(\r", "+\t\tAbstractMethodDeclaration methodDeclaration,\r", "+\t\tchar[][] definingTypeNames,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// create method handle\r", "+\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\r", "+\t\t// compute source positions of the selector \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\t\ttry {\r", "+\t\t\tscanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t}\r", "+\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "+\r", "+\t\t// accept method declaration\r", "+\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61208558d783a4ea39ad02ede3fc4d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportMethodDeclaration(\r", "-\tAbstractMethodDeclaration methodDeclaration, \r", "-\tchar[][] definingTypeNames,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// create method handle\r", "-\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t// compute source positions of the selector \r", "-\tScanner scanner = parser.scanner;\r", "-\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\ttry {\r", "-\t\tscanner.getNextToken();\r", "-\t} catch(InvalidInputException e) {\r", "-\t}\r", "-\tint nameSourceEnd = scanner.currentPosition-1;\r", "-\r", "-\t// accept method declaration\r", "-\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-}\r", "+\t */\r", "+\tpublic void reportMethodDeclaration(\r", "+\t\tAbstractMethodDeclaration methodDeclaration,\r", "+\t\tchar[][] definingTypeNames,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// create method handle\r", "+\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\r", "+\t\t// compute source positions of the selector \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\t\ttry {\r", "+\t\t\tscanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t}\r", "+\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "+\r", "+\t\t// accept method declaration\r", "+\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd349a12f694a93d1acfebdc79a1ecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportMethodDeclaration(\r", "-\tAbstractMethodDeclaration methodDeclaration, \r", "-\tchar[][] definingTypeNames,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// create method handle\r", "-\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t// compute source positions of the selector \r", "-\tScanner scanner = parser.scanner;\r", "-\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\ttry {\r", "-\t\tscanner.getNextToken();\r", "-\t} catch(InvalidInputException e) {\r", "-\t}\r", "-\tint nameSourceEnd = scanner.currentPosition-1;\r", "-\r", "-\t// accept method declaration\r", "-\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-}\r", "+\t */\r", "+\tpublic void reportMethodDeclaration(\r", "+\t\tAbstractMethodDeclaration methodDeclaration,\r", "+\t\tchar[][] definingTypeNames,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// create method handle\r", "+\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\r", "+\t\t// compute source positions of the selector \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\t\ttry {\r", "+\t\t\tscanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t}\r", "+\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "+\r", "+\t\t// accept method declaration\r", "+\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+\t}\r"]}], "num": 60415}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36ec1f56f7e388ce552ef71bfbb738d6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64127acbcef25538759a39378020c0f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().forwardReference(this, this.indexOfFirstFieldBinding-1, fieldBinding);", "+\t\t\t\t\t\tif ((this.bits & IsMemberValueReference) != 0 && fieldBinding.id == methodScope.lastVisibleFieldID) {", "+\t\t\t\t\t\t\t// false alarm, location is NOT a field initializer but the value in a memberValuePair", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().forwardReference(this, this.indexOfFirstFieldBinding-1, fieldBinding);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df7aa0d26565fd35ca619748a8b92fe7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "6eb70a41e0be0423bb1f7fafc15cb4df8d80eaea", "commitAfterChange": "5837c58022f758b07c41af8b2f2cf947269d4beb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " void faultInImports()", "signatureAfterChange": " void faultInImports()", "diff": ["-\t\t\t\tproblemReporter().importProblem(importReference, importBinding);", "-\t\t\t\tcontinue nextImport;", "+\t\t\t\tif (importBinding instanceof ProblemFieldBinding && importBinding.problemId() == ProblemReasons.Ambiguous) {", "+\t\t\t\t\t// keep it unless a duplicate can be found below", "+\t\t\t\t} else {", "+\t\t\t\t\tproblemReporter().importProblem(importReference, importBinding);", "+\t\t\t\t\tcontinue nextImport;", "+\t\t\t\t}"]}], "num": 32221}
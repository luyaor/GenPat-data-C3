{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37a52709f87ae36e7e126bb42248eb23", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c8c43027df968254869b5cc5e6ec9be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "505b0db16406f11df3227a34e8e784faefbd6e90", "commitAfterChange": "09731db443a17aa3c4de981e4334f98fc716832d", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 88, "signatureBeforeChange": " private void noCycleDetection(final int numberOfParticipants, final boolean useForwardReferences) throws CoreException", "signatureAfterChange": " private void noCycleDetection(final int numberOfParticipants, final boolean useForwardReferences, final boolean createProjectsFirst) throws CoreException", "diff": ["-private void noCycleDetection(final int numberOfParticipants, final boolean useForwardReferences) throws CoreException {", "+private void noCycleDetection(final int numberOfParticipants, final boolean useForwardReferences, final boolean createProjectsFirst) throws CoreException {", "+\t\tif (createProjectsFirst) {", "+\t\t\tJavaCore.run(new IWorkspaceRunnable() {", "+\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\tfor (int i = 0; i < numberOfParticipants; i++){", "+\t\t\t\t\t\tprojectNames[i] = \"P\"+i;", "+\t\t\t\t\t\tprojects[i] = createJavaProject(projectNames[i], new String[]{\"\"}, \"\");", "+\t\t\t\t\t\tallProjectsInCycle[i] = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t},", "+\t\t\tnull);", "+\t\t}", "-\t\t\t\tfor (int i = 0; i < numberOfParticipants; i++){", "-\t\t\t\t\tprojectNames[i] = \"P\"+i;", "-\t\t\t\t\tprojects[i] = createJavaProject(projectNames[i], new String[]{\"\"}, \"\");", "-\t\t\t\t\tallProjectsInCycle[i] = 0;", "-\t\t\t\t}\t\t", "+\t\t\t\tif (!createProjectsFirst) {", "+\t\t\t\t\tfor (int i = 0; i < numberOfParticipants; i++){", "+\t\t\t\t\t\tprojectNames[i] = \"P\"+i;", "+\t\t\t\t\t\tprojects[i] = createJavaProject(projectNames[i], new String[]{\"\"}, \"\");", "+\t\t\t\t\t\tallProjectsInCycle[i] = 0;", "+\t\t\t\t\t}\t\t", "+\t\t\t\t}", "-\t\tSystem.out.println(\"No cycle check (\"+numberOfParticipants+\" participants) : \"+ time[0]+\" ms, \"+ (useForwardReferences ? \"forward references\" : \"backward references\"));", "+\t\tSystem.out.println(\"No cycle check (\"+numberOfParticipants+\" participants) : \"+ time[0]+\" ms, \"+ (useForwardReferences ? \"forward references\" : \"backward references\") + \", \" + (createProjectsFirst ? \"two steps (projects created first, then classpaths are set)\" : \"one step (projects created and classpaths set in one batch)\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5173cbe70b1acf9739dd8064c33d48e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "c74124c71dc16aadffc9c127481cf29440dd03c8", "commitAfterChange": "2d053de9651cebac3cf0a82f4012b7196ccb5c83", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\tInferenceContext18.missingImplementation(\"NYI\"); //$NON-NLS-1$", "+\t\t\t\tsuperCandidate = ((WildcardBinding) superCandidate).allBounds();", "+\t\t\t\t//$FALL-THROUGH$", "+\t\t\tcase Binding.INTERSECTION_CAST_TYPE:", "+\t\t\t\tTypeBinding[] intersectingTypes = ((IntersectionCastTypeBinding) superCandidate).intersectingTypes;", "+\t\t\t\tConstraintFormula[] result = new ConstraintFormula[intersectingTypes.length];", "+\t\t\t\tfor (int i = 0; i < intersectingTypes.length; i++) {", "+\t\t\t\t\tresult[i] = ConstraintTypeFormula.create(subCandidate, intersectingTypes[i], SUBTYPE, this.isSoft);", "+\t\t\t\t}", "+\t\t\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71d49acf2b5148792e30e822a21e365", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tObjectVector typesFound)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tboolean proposeAllMemberTypes, \t\tSourceTypeBinding typeToIgnore, \t\tObjectVector typesFound)", "diff": ["+\t}", "+\tprivate void findMemberTypes(", "+\t\tchar[] typeName,", "+\t\tReferenceBinding receiverType,", "+\t\tScope scope,", "+\t\tSourceTypeBinding typeInvocation,", "+\t\tboolean staticOnly,", "+\t\tboolean fromStaticImport,", "+\t\tboolean checkQualification,", "+\t\tboolean proposeAllMemberTypes,", "+\t\tSourceTypeBinding typeToIgnore,", "-\t\t\t\tstaticOnly);", "+\t\t\t\tstaticOnly,", "+\t\t\t\tfromStaticImport,", "+\t\t\t\tcheckQualification);", "-", "+\t\t\t", "-\t\t\t\tstaticOnly);", "+\t\t\t\tstaticOnly,", "+\t\t\t\tfromStaticImport,", "+\t\t\t\tcheckQualification);", "+\t\t\t", "+\t\t", "+\t\t", "+\t\tif(proposeAllMemberTypes) {", "+\t\t\tReferenceBinding[] memberTypes = receiverType.memberTypes();", "+\t\t\tfor (int i = 0; i < memberTypes.length; i++) {", "+\t\t\t\tif(memberTypes[i] != typeToIgnore) {", "+\t\t\t\t\tfindSubMemberTypes(", "+\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\tmemberTypes[i],", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\ttypeInvocation,", "+\t\t\t\t\t\tstaticOnly,", "+\t\t\t\t\t\tfromStaticImport,", "+\t\t\t\t\t\ttypesFound);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-", "+\t\t\t\t\t\t", "-\t\t\t\t\t\t\tstaticOnly);", "-", "+\t\t\t\t\t\t\tstaticOnly,", "+\t\t\t\t\t\t\tfromStaticImport,", "+\t\t\t\t\t\t\tcheckQualification);", "+\t\t\t\t\t\t\t\t", "+\t\t}", "+\t}"]}], "num": 9885}
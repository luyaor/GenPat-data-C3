{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e808d62b49311b6ae31ad0861c218ad4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583b28ee09dd6b44a90a14f1853fb1d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testCreateTypeSignature()", "signatureAfterChange": " public void testCreateTypeSignature()", "diff": ["+\tassertEquals(\"Signature#createTypeSignature is not correct18\", \"QList<QList<QString;>;>;\",", "+\t\t\tSignature.createTypeSignature(\"List<List<String>>\".toCharArray(), false));", "+\tassertEquals(\"Signature#createTypeSignature is not correct19\", \"QList<QList<I>;>;\",", "+\t\t\tSignature.createTypeSignature(\"List<List<int>>\".toCharArray(), false));", "+\tassertEquals(\"Signature#createTypeSignature is not correct20\", \"[QList<QList<[I>;>;\",", "+\t\t\tSignature.createTypeSignature(\"List<List<int[]>>[]\".toCharArray(), false));", "+\tassertEquals(\"Signature#createTypeSignature is not correct21\", \"Qjava.y.Map<[QObject;QString;>.MapEntry<[Qp.K<QT;>;[Qq.r.V2;>;\",", "+\t\t\tSignature.createTypeSignature(\"java.y.Map<Object[],String>.MapEntry<p.K<T>[],q.r.V2[]>\".toCharArray(), false));\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5871bfb69c54c596bffae841340233e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["+\t\tassertTrue(\"Signature#getParameterTypes is not correct: exception\", false);", "-\t\treturn;", "+\t\t// do nothing", "-\tassertTrue(\"Signature#getParameterTypes is not correct: exception\", false);", "+", "+\t// tests with 1.5-specific elements", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "+\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "+\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "+\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "+//\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+//\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "651e2f3debd8d680bb0e1bd44f2c9564", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java", "commitBeforeChange": "e65379b9057b35418a4c7491224b13ea19038724", "commitAfterChange": "6278fd1d7c6c65fb53043497c72b040b601f0f62", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void testWarningTokens()", "signatureAfterChange": " public void testWarningTokens()", "diff": ["+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.JavadocUsingDeprecatedField));", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.JavadocUsingDeprecatedConstructor));", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.JavadocUsingDeprecatedMethod));", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.JavadocUsingDeprecatedType));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa7193b3defc7c526c50574c1c8ea1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic void _test0069() throws JavaModelException", "signatureAfterChange": " \tpublic void test0069() throws JavaModelException", "diff": ["-\tpublic void _test0069() throws JavaModelException {", "+\tpublic void test0069() throws JavaModelException {", "-\t\tassertNotNull(\"No binding\", qualifiedType.resolveBinding());", "+\t\tITypeBinding typeBinding = qualifiedType.resolveBinding();", "+        assertNotNull(\"No binding\", typeBinding);", "+        assertEquals(\"Wrong name 1\", \"test0069.Outer<java.lang.String>.Inner<Integer>\", typeBinding.getQualifiedName());", "+        IBinding binding = simpleName.resolveBinding();", "+        assertEquals(\"Wrong name 2\", \"test0069.Outer<java.lang.String>.Inner<Integer>\", typeBinding.getQualifiedName());", "-\t\tassertNotNull(\"No binding\", parameterizedType2.resolveBinding());", "+        typeBinding = parameterizedType2.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+        assertEquals(\"Wrong name 3\", \"test0069.Outer<java.lang.String>\", typeBinding.getQualifiedName());", "-\t\tIBinding binding = simpleName2.resolveBinding();", "+\t\tbinding = simpleName2.resolveBinding();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e5819ace2b065057294b2067607ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "06adeb7b918b76c1d386debeff48a817c488b1af", "commitAfterChange": "8597c894f19986d55bb5c18b9a06d2d0215ee70d", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "  \tpublic void testStringLiteral()", "signatureAfterChange": "  \tpublic void testStringLiteral()", "diff": ["+\t\t", "+\t\t// test for 319900", "+\t\tx.setLiteralValue(\"'\");", "+\t\tassertEquals(\"\", \"\\\"'\\\"\", x.getEscapedValue());", "+\t\tassertEquals(\"\", \"'\", x.getLiteralValue());", "+\t\t", "+\t\t// test for 319900", "+\t\tx.setEscapedValue(\"\\\"'\\\"\");", "+\t\tassertEquals(\"\", \"\\\"'\\\"\", x.getEscapedValue());", "+\t\tassertEquals(\"\", \"'\", x.getLiteralValue());"]}], "num": 47080}
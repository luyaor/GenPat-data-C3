{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2206338cbcf85584a8d3ba54d44a71c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38006c49f119743ec1bd3db50c96c316", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tif (this.pattern.isParameterized()) {", "-\t\t// do not report import ref for generic patterns...", "-\t\treturn;", "-\t}", "+\t// set match rule", "+\tint rule = SearchMatch.A_ACCURATE;", "+\tboolean patternHasParameters = false;", "+\tif (this.pattern.isParameterized()) {", "+\t\tpatternHasParameters = this.pattern.typeArguments[0] != null && this.pattern.typeArguments[0].length != 0;", "+\t}", "+\tif (patternHasParameters) { // binding has no type params, compatible erasure if pattern does", "+\t\trule = SearchMatch.A_COMPATIBLE | SearchMatch.A_ERASURE;", "+\t}", "+\t", "+\t// Try to find best selection for match", "-\t\t\tif (resolveLevelForType(typeBinding) == ACCURATE_MATCH) {", "+\t\t\tif (resolveLevelForType(typeBinding) != IMPOSSIBLE_MATCH) {", "-\t\t\t\t\tSearchMatch match = locator.newTypeReferenceMatch(element, accuracy, start, end-start+1, importRef);", "+\t\t\t\t\t// report match", "+\t\t\t\t\tSearchMatch match = locator.newTypeReferenceMatch(element, accuracy, start, end-start+1, rule, importRef);", "-\tlocator.reportAccurateTypeReference(importRef, this.pattern.simpleName, element, accuracy);", "+\tlocator.reportAccurateTypeReference(importRef, this.pattern.simpleName, element, accuracy, rule);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adbe0da1c188930031c4cc6a82a87c8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t", "+\t// Create search match", "+\tmatch = locator.newTypeReferenceMatch(element, accuracy, importRef);", "-\t// set match rule", "-\tint rule = SearchMatch.A_ACCURATE;", "-\tif (this.pattern.hasTypeArguments()) { // binding has no type params, compatible erasure if pattern does", "-\t\trule = SearchPattern.R_EQUIVALENT_MATCH | SearchPattern.R_ERASURE_MATCH;", "+\t// set match raw flag and rule", "+\tmatch.setRaw(true);", "+\tif (this.pattern.hasTypeArguments()) {", "+\t\t// binding is raw => only compatible erasure if pattern has type arguments", "+\t\tmatch.setRule(match.getRule() & (~SearchPattern.R_FULL_MATCH));", "-\t\t\t\t\tSearchMatch match = locator.newTypeReferenceMatch(element, accuracy, start, end-start+1, rule, importRef);", "+\t\t\t\t\tmatch.setOffset(start);", "+\t\t\t\t\tmatch.setLength(end-start+1);", "-\tlocator.reportAccurateTypeReference(importRef, this.pattern.simpleName, element, accuracy, rule);", "+\tlocator.reportAccurateTypeReference(match, importRef, this.pattern.simpleName);"]}], "num": 29060}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c556932df60469f6a68eb9bd2ce0dddd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da5b89b72c0740f2de10ad541cdab2c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b25ed407ef1d09375524d9c9e824c1c1084b119b", "commitAfterChange": "0bd9f6472768db6e5f0062ffcfd17bd3adede039", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["-\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = CodeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "-\t\t\t\t\t// TODO Root the block to a compilation unit", "-\t\t\t\t\t// record the problems, comments and line numbers", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "-\t\t\t\tbreak;", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = CodeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "-\t\t\t\t\t// TODO Root the expression to a compilation unit", "-\t\t\t\t\t// record the problems, comments and line numbers", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "-\t\t\t\tbreak;", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = CodeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "-\t\t\t\t\t// TODO Root the expression to a compilation unit", "-\t\t\t\t\t// record the problems, comments and line numbers", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e838f225bb26dc29420500195fe1b890", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["-\t\t// TODO (olivier) missing implementation", "-\t\tthrow new RuntimeException();", "+\t\tASTConverter converter = new ASTConverter(options, false, null);", "+\t\tconverter.compilationUnitSource = source;", "+\t\tconverter.scanner.setSource(source);", "+\t\t", "+\t\tAST ast = new AST();", "+\t\tast.setBindingResolver(new BindingResolver());", "+\t\tconverter.setAST(ast);", "+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "+\t\tswitch(kind) {", "+\t\t\tcase K_STATEMENTS :", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options);", "+\t\t\t\tif (constructorDeclaration != null) {", "+\t\t\t\t\tBlock block = ast.newBlock();", "+\t\t\t\t\tStatement[] statements = constructorDeclaration.statements;", "+\t\t\t\t\tif (statements != null) {", "+\t\t\t\t\t\tint statementsLength = statements.length;", "+\t\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "+\t\t\t\t\t\t\tblock.statements().add(converter.convert(statements[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// TODO Root the block to a compilation unit", "+\t\t\t\t\t// record the problems, comments and line numbers", "+\t\t\t\t\treturn block;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_EXPRESSION :", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options);", "+\t\t\t\tif (expression != null) {", "+\t\t\t\t\tExpression expression2 = converter.convert(expression);", "+\t\t\t\t\t// TODO Root the expression to a compilation unit", "+\t\t\t\t\t// record the problems, comments and line numbers", "+\t\t\t\t\treturn expression2;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_CLASS_BODY_DECLARATIONS :", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options);", "+\t\t\t\tif (nodes != null) {", "+\t\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "+\t\t\t\t\t// TODO Root the expression to a compilation unit", "+\t\t\t\t\t// record the problems, comments and line numbers", "+\t\t\t\t\treturn typeDeclaration;", "+\t\t\t\t}", "+\t\t}", "+\t\tthrow new IllegalArgumentException();"]}], "num": 8742}
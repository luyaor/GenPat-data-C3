{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bb90776b84dfef2c1dfc665fe5cba61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d61f70667dd7d2c53ea9bb4c304cd3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/IncrementalImageBuilder.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r protected void addAffectedSourceFiles()", "signatureAfterChange": "\r \r protected void addAffectedSourceFiles()", "diff": ["-\t\tString location = (String) keyTable[i];\r", "-\t\tif (location != null) {\r", "-\t\t\tif (compiledAllAtOnce && previousLocations != null && previousLocations.contains(location))\r", "+\t\tString sourceLocation = (String) keyTable[i];\r", "+\t\tif (sourceLocation != null && !locations.contains(sourceLocation)) {\r", "+\t\t\tif (compiledAllAtOnce && previousLocations != null && previousLocations.contains(sourceLocation))\r", "-\t\t\tif (locations.contains(location))\r", "-\t\t\t\tcontinue next; // already know to compile this file so skip it\r", "-\t\t\t\tIResource affectedFile = javaBuilder.workspaceRoot.getFileForLocation(new Path(location));\r", "+\t\t\t\tIResource affectedFile = resourceForLocation(sourceLocation);\r", "-\t\t\t\t\t\tSystem.out.println(\"  adding affected source file \" + location); //$NON-NLS-1$\r", "-\t\t\t\t\tlocations.add(location);\r", "-\t\t\t\t\tfor (int j = 0, k = sourceFolders.length; j < k; j++) {\r", "-\t\t\t\t\t\tString sourceLocation = sourceFolders[j].getLocation().toString() + '/';\r", "-\t\t\t\t\t\tif (location.startsWith(sourceLocation)) {\r", "-\t\t\t\t\t\t\ttypeNames.add(location.substring(sourceLocation.length(), location.length() - 5)); // length of \".java\"\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttypeNames.add(location); // should not reach here\r", "+\t\t\t\t\t\tSystem.out.println(\"  adding affected source file \" + sourceLocation); //$NON-NLS-1$\r", "+\t\t\t\t\tlocations.add(sourceLocation);\r", "+\t\t\t\t\ttypeNames.add(extractTypeNameFrom(sourceLocation));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62015cb69bfb6cf7ed25c22fab6144a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic IJavaElement getHandleFromMemento(String memento) throws JavaModelException", "signatureAfterChange": " \tpublic IJavaElement getHandleFromMemento(String memento) throws JavaModelException", "diff": ["-\t\t\treturn proj.getPackageFragmentRoot(new Path(Path.SEPARATOR + memento.substring(modelEnd + 1)));", "+\t\t\treturn model.getHandleFromMementoForRoot(memento, proj, projectEnd, memento.length());", "-\t\tString rootName= null;", "-\t\tif (rootEnd == projectEnd - 1) {", "-\t\t\t//default root", "-\t\t\trootName= IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH;", "-\t\t} else {", "-\t\t\trootName= memento.substring(projectEnd + 1, rootEnd);", "-\t\t}", "-\t\tIPath rootPath= new Path(rootName);", "-\t\tIPackageFragmentRoot root= null;", "-\t\tif (rootPath.isAbsolute()) {", "-\t\t\troot= proj.getPackageFragmentRoot(rootPath);", "-\t\t} else {", "-\t\t\troot= proj.getPackageFragmentRoot(proj.getProject().getFullPath().append(rootName));", "-\t\t}", "+\t\tIPackageFragmentRoot root = model.getHandleFromMementoForRoot(memento, proj, projectEnd, rootEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc15b4378b8c80ee3c588036cd226bf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "c01d4e421a0fa2c650a398bcf3ff121ab0577af6", "commitAfterChange": "42d19dd3705bce900dfc36deb77d97fde99bf108", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprivate void runTest(DefaultCodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length)", "signatureAfterChange": " \tprivate void runTest(DefaultCodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length)", "diff": ["-", "+\t\trunTest(codeFormatter, packageName, compilationUnitName, kind, indentationLevel, checkNull, offset, length, null);", "+\t}", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, s.length());", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ead43202255489c6f7a9ab98777e96ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprivate boolean settingsChanged()", "signatureAfterChange": " \tprivate boolean settingsChanged()", "diff": ["-\t\tint count = fFactoryPathList.getSize();", "-\t\tif (fOriginalPath.size() != count) {", "-\t\t\t// something was added or removed", "+\t\tif (fOriginalPath == null) {", "+\t\t\t// shouldn't happen, but just in case it does, consider it a change.", "-\t\t// now we know both lists are the same size", "-\t\tIterator<Map.Entry<FactoryContainer, Boolean>> iOriginal = fOriginalPath.entrySet().iterator();", "-\t\tfor (int i = 0; i < count; ++i) {", "-\t\t\tMap.Entry<FactoryContainer, Boolean> entry = iOriginal.next();", "-\t\t\tBoolean wasEnabled = entry.getValue();", "-\t\t\tFactoryContainer fc = (FactoryContainer)fFactoryPathList.getElement(i);", "-\t\t\tif (!fc.equals(entry.getKey())) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tBoolean isEnabled = fFactoryPathList.isChecked(fc);", "-\t\t\tif (isEnabled ^ wasEnabled) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "+\t\t// Is the new path the same size, containing the same items", "+\t\t// in the same order?  We rely on FactoryPathEntry.equals() here.", "+\t\tList<FactoryPathEntry> newPath = getListContents();", "+\t\treturn !fOriginalPath.equals(newPath);"]}], "num": 55750}
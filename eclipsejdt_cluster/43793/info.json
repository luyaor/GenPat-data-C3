{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb3a1b28ddb32ff0f89e9e82db5fe2df", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3c1a56f588ebc470d81ffe01bbe7c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  private void parseTags()", "diff": ["-protected void parseTags(boolean hasLineComment) {", "-\tif (!hasLineComment) {", "-\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\tthis.nonNLSStrings.addAll(this.currentLine.elements);", "+private void parseTags() {", "+\tint position = 0;", "+\tfinal int currentStartPosition = this.startPosition;", "+\tfinal int currentLinePtr = this.linePtr;", "+\tif (currentLinePtr >= 0) {", "+\t\tposition = this.lineEnds[currentLinePtr] + 1; ", "+\t}", "+\twhile (Character.isWhitespace(this.source[position])) {", "+\t\tposition++;", "+\t}", "+\tif (currentStartPosition == position) {", "+\t\t// the whole line is commented out", "+\t\treturn;", "+\t}", "+\tchar[] s = null;", "+\tint sourceEnd = this.currentPosition;", "+\tint sourceStart = currentStartPosition;", "+\tint sourceDelta = 0;", "+\tif (this.withoutUnicodePtr != 0) {", "+\t\t// 0 is used as a fast test flag so the real first char is in position 1", "+\t\tSystem.arraycopy(", "+\t\t\tthis.withoutUnicodeBuffer, ", "+\t\t\t1, ", "+\t\t\ts = new char[this.withoutUnicodePtr], ", "+\t\t\t0, ", "+\t\t\tthis.withoutUnicodePtr);", "+\t\tsourceEnd = this.withoutUnicodePtr;", "+\t\tsourceStart = 1;", "+\t\tsourceDelta = currentStartPosition;", "-\t\tint position = 0;", "-\t\tif (this.linePtr >= 0) {", "-\t\t\tposition = this.lineEnds[this.linePtr] + 1; ", "+\t\ts = this.source;", "+\t}", "+\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "+\tif (pos != -1) {", "+\t\tif (this.nlsTags == null) {", "+\t\t\tthis.nlsTags = new NLSTag[10];", "+\t\t\tthis.nlsTagsPtr = 0;", "-\t\twhile (Character.isWhitespace(this.source[position])) {", "-\t\t\tposition++;", "-\t\t}", "-\t\tif (getCurrentTokenStartPosition() == position) {", "-\t\t\t// the whole line is commented out", "-\t\t\treturn;", "-\t\t}", "-\t\tfinal NLSLine line = this.currentLine;", "-\t\tchar[] s = null;", "-\t\tint sourceEnd = this.currentPosition;", "-\t\tint sourceStart = this.startPosition;", "-\t\tint sourceDelta = 0;", "-\t\tif (this.withoutUnicodePtr != 0) {", "-\t\t\t// 0 is used as a fast test flag so the real first char is in position 1", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.withoutUnicodeBuffer, ", "-\t\t\t\t1, ", "-\t\t\t\ts = new char[this.withoutUnicodePtr], ", "-\t\t\t\t0, ", "-\t\t\t\tthis.withoutUnicodePtr);", "-\t\t\tsourceEnd = this.withoutUnicodePtr;", "-\t\t\tsourceStart = 1;", "-\t\t\tsourceDelta = this.getCurrentTokenStartPosition();", "-\t\t} else {", "-\t\t\ts = this.source;", "-\t\t}", "-\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "-\t\tfinal int lineSize = line.size();", "-\t\tif (pos != -1) {", "-\t\t\tif (this.unnecessaryNLSTags == null) this.unnecessaryNLSTags = new HashSet();", "-\t\t\twhile (pos != -1) {", "-\t\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "-\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "-\t\t\t\tif (end != -1) {", "-\t\t\t\t\tString index = new String(CharOperation.subarray(s, start, end));", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfinal int i = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t\t\t\tif (i >= 0 && i < lineSize) {", "-\t\t\t\t\t\t\tif (line.get(i) == null) {", "-\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tline.set(i, null);", "-\t\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + sourceDelta , end + sourceDelta, NLSTag.USED);", "-\t\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "-\t\t\t\t\t}", "+\t\twhile (pos != -1) {", "+\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "+\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "+\t\t\tif (end != -1) {", "+\t\t\t\tNLSTag currentTag = null;", "+\t\t\t\tfinal int currentLine = currentLinePtr + 1;", "+\t\t\t\ttry {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + sourceDelta, end + sourceDelta, currentLine, extractInt(s, start, end));", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + currentStartPosition, currentStartPosition + end, currentLine, -1);", "-\t\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, start);", "-\t\t\t}", "-\t\t}", "-\t", "-\t\tif (line.remainingElementsSize != 0) {", "-\t\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\t\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "-\t\t\t\tfinal StringLiteral literal = (StringLiteral) iterator.next();", "-\t\t\t\tif (literal != null) {", "-\t\t\t\t\tthis.nonNLSStrings.add(literal);", "+\t\t\t\tif (this.nlsTagsPtr == this.nlsTags.length) {", "+\t\t\t\t\t// resize", "+\t\t\t\t\tSystem.arraycopy(this.nlsTags, 0, (this.nlsTags = new NLSTag[this.nlsTagsPtr + 10]), 0, this.nlsTagsPtr);", "+\t\t\t\tthis.nlsTags[this.nlsTagsPtr++] = currentTag;", "+\t\t\t} else {", "+\t\t\t\tend = start;", "+\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, end, sourceEnd);", "-\tif (this.currentLine != null) this.currentLine.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba091c9fdb9ddc2caa36dd4e519ba139", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  private void parseTags()", "diff": ["-protected void parseTags(boolean hasLineComment) {", "-\tif (!hasLineComment) {", "-\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\tthis.nonNLSStrings.addAll(this.currentLine.elements);", "+private void parseTags() {", "+\tint position = 0;", "+\tfinal int currentStartPosition = this.startPosition;", "+\tfinal int currentLinePtr = this.linePtr;", "+\tif (currentLinePtr >= 0) {", "+\t\tposition = this.lineEnds[currentLinePtr] + 1; ", "+\t}", "+\twhile (Character.isWhitespace(this.source[position])) {", "+\t\tposition++;", "+\t}", "+\tif (currentStartPosition == position) {", "+\t\t// the whole line is commented out", "+\t\treturn;", "+\t}", "+\tchar[] s = null;", "+\tint sourceEnd = this.currentPosition;", "+\tint sourceStart = currentStartPosition;", "+\tint sourceDelta = 0;", "+\tif (this.withoutUnicodePtr != 0) {", "+\t\t// 0 is used as a fast test flag so the real first char is in position 1", "+\t\tSystem.arraycopy(", "+\t\t\tthis.withoutUnicodeBuffer, ", "+\t\t\t1, ", "+\t\t\ts = new char[this.withoutUnicodePtr], ", "+\t\t\t0, ", "+\t\t\tthis.withoutUnicodePtr);", "+\t\tsourceEnd = this.withoutUnicodePtr;", "+\t\tsourceStart = 1;", "+\t\tsourceDelta = currentStartPosition;", "-\t\tint position = 0;", "-\t\tif (this.linePtr >= 0) {", "-\t\t\tposition = this.lineEnds[this.linePtr] + 1; ", "+\t\ts = this.source;", "+\t}", "+\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "+\tif (pos != -1) {", "+\t\tif (this.nlsTags == null) {", "+\t\t\tthis.nlsTags = new NLSTag[10];", "+\t\t\tthis.nlsTagsPtr = 0;", "-\t\twhile (Character.isWhitespace(this.source[position])) {", "-\t\t\tposition++;", "-\t\t}", "-\t\tif (getCurrentTokenStartPosition() == position) {", "-\t\t\t// the whole line is commented out", "-\t\t\treturn;", "-\t\t}", "-\t\tfinal NLSLine line = this.currentLine;", "-\t\tchar[] s = null;", "-\t\tint sourceEnd = this.currentPosition;", "-\t\tint sourceStart = this.startPosition;", "-\t\tint sourceDelta = 0;", "-\t\tif (this.withoutUnicodePtr != 0) {", "-\t\t\t// 0 is used as a fast test flag so the real first char is in position 1", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.withoutUnicodeBuffer, ", "-\t\t\t\t1, ", "-\t\t\t\ts = new char[this.withoutUnicodePtr], ", "-\t\t\t\t0, ", "-\t\t\t\tthis.withoutUnicodePtr);", "-\t\t\tsourceEnd = this.withoutUnicodePtr;", "-\t\t\tsourceStart = 1;", "-\t\t\tsourceDelta = this.getCurrentTokenStartPosition();", "-\t\t} else {", "-\t\t\ts = this.source;", "-\t\t}", "-\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "-\t\tfinal int lineSize = line.size();", "-\t\tif (pos != -1) {", "-\t\t\tif (this.unnecessaryNLSTags == null) this.unnecessaryNLSTags = new HashSet();", "-\t\t\twhile (pos != -1) {", "-\t\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "-\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "-\t\t\t\tif (end != -1) {", "-\t\t\t\t\tString index = new String(CharOperation.subarray(s, start, end));", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfinal int i = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t\t\t\tif (i >= 0 && i < lineSize) {", "-\t\t\t\t\t\t\tif (line.get(i) == null) {", "-\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tline.set(i, null);", "-\t\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + sourceDelta , end + sourceDelta, NLSTag.USED);", "-\t\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "-\t\t\t\t\t}", "+\t\twhile (pos != -1) {", "+\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "+\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "+\t\t\tif (end != -1) {", "+\t\t\t\tNLSTag currentTag = null;", "+\t\t\t\tfinal int currentLine = currentLinePtr + 1;", "+\t\t\t\ttry {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + sourceDelta, end + sourceDelta, currentLine, extractInt(s, start, end));", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + currentStartPosition, currentStartPosition + end, currentLine, -1);", "-\t\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, start);", "-\t\t\t}", "-\t\t}", "-\t", "-\t\tif (line.remainingElementsSize != 0) {", "-\t\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\t\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "-\t\t\t\tfinal StringLiteral literal = (StringLiteral) iterator.next();", "-\t\t\t\tif (literal != null) {", "-\t\t\t\t\tthis.nonNLSStrings.add(literal);", "+\t\t\t\tif (this.nlsTagsPtr == this.nlsTags.length) {", "+\t\t\t\t\t// resize", "+\t\t\t\t\tSystem.arraycopy(this.nlsTags, 0, (this.nlsTags = new NLSTag[this.nlsTagsPtr + 10]), 0, this.nlsTagsPtr);", "+\t\t\t\tthis.nlsTags[this.nlsTagsPtr++] = currentTag;", "+\t\t\t} else {", "+\t\t\t\tend = start;", "+\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, end, sourceEnd);", "-\tif (this.currentLine != null) this.currentLine.clear();"]}], "num": 43793}
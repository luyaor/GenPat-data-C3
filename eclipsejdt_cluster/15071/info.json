{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a802570dec0ef49b1c2c7bf76cd46f3f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073942cfb7b27a51e5fee3eb4c728d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "88071a18de8125978b5d3303668846dde79db410", "commitAfterChange": "37ef962b78fbc30ac28041498d0fd35e1634577e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\tString fullDeclaringName = field.getDeclaringType().getFullyQualifiedName().replace('$', '.');", "-\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');", "-\t\t\tchar[] declaringSimpleName = (lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName).toCharArray();", "-\t\t\tchar[] declaringQualification = lastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : CharOperation.NO_CHAR;", "+\t\t\tIType declaringClass = field.getDeclaringType();", "+\t\t\tchar[] declaringSimpleName = declaringClass.getElementName().toCharArray();", "+\t\t\tchar[] declaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "+\t\t\tchar[][] enclosingNames = enclosingTypeNames(declaringClass);", "+\t\t\tif (enclosingNames.length > 0)", "+\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');", "-\t\t\tfullDeclaringName = method.getDeclaringType().getFullyQualifiedName().replace('$', '.');", "-\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');", "-\t\t\tdeclaringSimpleName = (lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName).toCharArray();", "-\t\t\tdeclaringQualification = lastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : CharOperation.NO_CHAR;", "+\t\t\tdeclaringClass = method.getDeclaringType();", "+\t\t\tdeclaringSimpleName = declaringClass.getElementName().toCharArray();", "+\t\t\tdeclaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "+\t\t\tenclosingNames = enclosingTypeNames(declaringClass);", "+\t\t\tif (enclosingNames.length > 0)", "+\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2577776944ceac00124fdb962b82a9aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6acdb4510909317e02bb4ba566a6d0b5f09916da", "commitAfterChange": "9b7b19bdcdbcea831580c60277f290356f5e2da7", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " protected void validateOptions(boolean didSpecifyCompliance)", "signatureAfterChange": " protected void validateOptions(boolean didSpecifyCompliance)", "diff": ["-\tfinal Object sourceVersion = this.options.get(CompilerOptions.OPTION_Source);", "-\tfinal Object compliance = this.options.get(CompilerOptions.OPTION_Compliance);", "+\tfinal String sourceVersion = this.options.get(CompilerOptions.OPTION_Source);", "+\tfinal String compliance = this.options.get(CompilerOptions.OPTION_Compliance);", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "-\t\tfinal Object targetVersion = this.options.get(CompilerOptions.OPTION_TargetPlatform);", "+\t\tfinal String targetVersion = this.options.get(CompilerOptions.OPTION_TargetPlatform);", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForGenericSource\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForGenericSource\", targetVersion, sourceVersion)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleSourceForCldcTarget\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleSourceForCldcTarget\", targetVersion, sourceVersion)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForCldcTarget\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForCldcTarget\", targetVersion, sourceVersion)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String) targetVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForTarget\", this.options.get(CompilerOptions.OPTION_Compliance), targetVersion)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeaab2ff5be44f2b0c54fb1df264e78d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageDeclarationOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected IDOMNode generateElementDOM() throws JavaModelException", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "diff": ["-// TODO - JDOM - remove once model ported off of JDOM", "-protected IDOMNode generateElementDOM() throws JavaModelException {", "-\tIJavaElement[] children = getCompilationUnit().getChildren();", "+}", "+protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException {", "+\tIJavaElement[] children = getCompilationUnit().getChildren();", "-\t\tif (children[i].getElementType() ==  IJavaElement.PACKAGE_DECLARATION) {", "-\t\t\tIPackageDeclaration pck = (IPackageDeclaration) children[i];", "-\t\t\tIDOMPackage pack = (IDOMPackage) ((JavaElement)pck).findNode(fCUDOM);", "-\t\t\tif (!pack.getName().equals(fName)) {", "-\t\t\t\t // get the insertion position before setting the name, as this makes it a detailed node", "-\t\t\t\t // thus the start position is always 0", "-\t\t\t\tDOMNode node = (org.eclipse.jdt.internal.core.jdom.DOMNode)pack;", "-\t\t\t\tfInsertionPosition = node.getStartPosition();", "-\t\t\t\tfReplacementLength = node.getEndPosition() - fInsertionPosition + 1;", "-\t\t\t\tpack.setName(fName);", "-\t\t\t\tfCreatedElement = (org.eclipse.jdt.internal.core.jdom.DOMNode)pack;", "-\t\t\t} else {", "-\t\t\t\t//equivalent package declaration already exists", "-\t\t\t\tfCreationOccurred= false;", "-\t\t\t}", "-\t\t\t", "+\t\tif (children[i].getElementType() ==  IJavaElement.PACKAGE_DECLARATION && this.name.equals(children[i].getElementName())) {", "+\t\t\t//equivalent package declaration already exists", "+\t\t\tthis.creationOccurred = false;", "-\tIDOMPackage pack = (new DOMFactory()).createPackage();", "-\tpack.setName(fName);", "-\treturn pack;", "+\tAST ast = this.cuAST.getAST();", "+\tPackageDeclaration pkgDeclaration = ast.newPackageDeclaration();", "+\tName astName = ast.newName(new String[] {this.name});", "+\tpkgDeclaration.setName(astName);", "+\treturn pkgDeclaration;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de60b56c6fd7c6ae056fa7877b2e37b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r protected void traverseDelta(IResourceDelta delta, Openable parentElement)", "signatureAfterChange": "\r protected void traverseDelta(IResourceDelta delta, Openable parentElement)", "diff": ["-\t\t\t\t\tswitch(res.getType()) {\r", "-\t\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tcase IResource.FOLDER:\r", "-\t\t\t\t\t\t\tIProject fileProject = delta.getResource().getProject();\r", "-\t\t\t\t\t\t\tIJavaProject project = (IJavaProject) JavaCore.create(fileProject);\r", "-\t\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\t\tIPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\t\t\t\tif (parentElement != null \r", "-\t\t\t\t\t\t\t\t\t&& ((pkgRoot = parentElement.getPackageFragmentRoot()) != null)\r", "-\t\t\t\t\t\t\t\t\t&& !pkgRoot.exists()) {\r", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tPackageFragmentRoot pkgRoot;\r", "+\t\t\t\t\tif (res.getType() == IResource.FILE \r", "+\t\t\t\t\t\t&& parentElement != null \r", "+\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "+\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){\r", "+\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} catch(JavaModelException e) {\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\tswitch(res.getType()) {\r", "-\t\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tcase IResource.FOLDER:\r", "-\t\t\t\t\t\t\tIProject fileProject = delta.getResource().getProject();\r", "-\t\t\t\t\t\t\tIJavaProject project = (IJavaProject) JavaCore.create(fileProject);\r", "-\t\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\t\tIPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\t\t\t\tif (parentElement != null \r", "-\t\t\t\t\t\t\t\t\t&& ((pkgRoot = parentElement.getPackageFragmentRoot()) != null)\r", "-\t\t\t\t\t\t\t\t\t&& !pkgRoot.exists()) {\r", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (res.getType() == IResource.FILE \r", "+\t\t\t\t\t\t&& parentElement != null \r", "+\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "+\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){\r", "+\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} catch(JavaModelException e) {\r", "+\t\t\t\t\t\t}\r"]}], "num": 15071}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc1af21b0e0e2f6f1c8866fa1fc12ef0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f3f51c665f1150de56ce5f5067c562", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean parseLiteralExpressionsAsConstants, \t\tboolean storeAnnotations, \t\tboolean statementsRecovery)", "signatureAfterChange": " \tprivate Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean statementsRecovery, \t\t\tboolean flag)", "diff": ["-\t\tINameEnvironment environment,", "-\t\tIErrorHandlingPolicy policy,", "-\t\tMap settings,", "-\t\tfinal ICompilerRequestor requestor,", "-\t\tIProblemFactory problemFactory,", "-\t\tboolean parseLiteralExpressionsAsConstants,", "-\t\tboolean storeAnnotations,", "-\t\tboolean statementsRecovery) {", "+\t */", "+\tprivate Compiler(", "+\t\t\tINameEnvironment environment,", "+\t\t\tIErrorHandlingPolicy policy,", "+\t\t\tMap settings,", "+\t\t\tfinal ICompilerRequestor requestor,", "+\t\t\tIProblemFactory problemFactory,", "+\t\t\tPrintWriter out,", "+\t\t\tboolean parseLiteralExpressionsAsConstants,", "+\t\t\tboolean storeAnnotations,", "+\t\t\tboolean statementsRecovery,", "+\t\t\tboolean flag) {", "-\t\tthis.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;", "-\t\tthis.options.storeAnnotations = storeAnnotations;", "-\t\tthis.options.performStatementsRecovery =", "-\t\t\tstatementsRecovery &&", "-\t\t\tthis.options.performStatementsRecovery;// TODO temporary code to take into account the temporary JavaCore options", "+\t\tif (flag) { // boolean parameters are significant, pass them down", "+\t\t\tthis.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;", "+\t\t\tthis.options.storeAnnotations = storeAnnotations;", "+\t\t\tthis.options.performStatementsRecovery =", "+\t\t\t\tstatementsRecovery &&", "+\t\t\t\tthis.options.performStatementsRecovery;// TODO temporary code to take into account the temporary JavaCore options", "+\t\t}", "+\t\tthis.out = out == null ? new PrintWriter(System.out, true) : out;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d849e8fb4acac9fe92ac1a60ef72a22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory)", "diff": ["-\t\tINameEnvironment environment,", "-\t\tIErrorHandlingPolicy policy,", "-\t\tMap settings,", "-\t\tfinal ICompilerRequestor requestor,", "-\t\tIProblemFactory problemFactory) {", "-", "-\t\t// create a problem handler given a handling policy", "-\t\tthis.options = new CompilerOptions(settings);", "-\t\t", "-\t\t// wrap requestor in DebugRequestor if one is specified", "-\t\tif(DebugRequestor == null) {", "-\t\t\tthis.requestor = requestor;", "-\t\t} else {", "-\t\t\tthis.requestor = new ICompilerRequestor(){", "-\t\t\t\tpublic void acceptResult(CompilationResult result){", "-\t\t\t\t\tif (DebugRequestor.isActive()){", "-\t\t\t\t\t\tDebugRequestor.acceptDebugResult(result);", "-\t\t\t\t\t}", "-\t\t\t\t\trequestor.acceptResult(result);", "-\t\t\t\t}", "-\t\t\t};", "-\t\t}", "-\t\tthis.problemReporter =", "-\t\t\tnew ProblemReporter(policy, this.options, problemFactory);", "-\t\tthis.lookupEnvironment =", "-\t\t\tnew LookupEnvironment(this, this.options, this.problemReporter, environment);", "-\t\tinitializeParser();", "+\t\t\tINameEnvironment environment,", "+\t\t\tIErrorHandlingPolicy policy,", "+\t\t\tMap settings,", "+\t\t\tfinal ICompilerRequestor requestor,", "+\t\t\tIProblemFactory problemFactory) {", "+\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "+\t\t\t\tnull, false, false, false, false); // all defaults"]}], "num": 50014}
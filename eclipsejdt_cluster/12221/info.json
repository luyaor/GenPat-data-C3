{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "391f8ace5dc21d57e4bcbc3c7e20d397", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a02f2f4f3ab85ea33c5c7d9d81e9a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "9b9b413c1fc3e1733988a3ceecffb87b92306bbd", "commitAfterChange": "afdd923f425377ac0a0c68fd300457070eaabf3e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "signatureAfterChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "diff": ["+    \t", "+    \t// If we're reconciling, we do not want to actually create the text file", "+    \tif (_env.getPhase() == Phase.RECONCILE) {", "+    \t\treturn new NoOpPrintWriter();", "+    \t}", "+    \t", "-        return charsetName == null ? new RefreshingPrintWriter( path, _env.getProject() ) : ", "-        \tnew RefreshingPrintWriter( path, _env.getProject(), charsetName );", "+    \tIFile file = _env.getProject().getFile(path);", "+    \tOutputStream binaryOut = new BinaryFileOutputStream(file);", "+ ", "+    \tif (charsetName == null) {", "+    \t\treturn new PrintWriter(binaryOut);", "+    \t}", "+    \telse {", "+    \t\tOutputStreamWriter outWriter = new OutputStreamWriter(binaryOut, charsetName);", "+    \t\treturn new PrintWriter(outWriter);", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddac70805ac035045bcfa4578400ab80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "54632eb8b3fc718083fd85b7fed41bcce1a85dc7", "commitAfterChange": "bfb03069bc857fa6dbdefe509f7d5cec8610c33c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic String getOption(String optionName, boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic String getOption(String optionName, boolean inheritJavaCoreOptions)", "diff": ["-\t\treturn JavaModelManager.getJavaModelManager().getOption(optionName, inheritJavaCoreOptions, getEclipsePreferences());", "+\t\tif (JavaModelManager.getJavaModelManager().optionNames.contains(optionName)){", "+\t\t\tIEclipsePreferences projectPreferences = getEclipsePreferences();", "+\t\t\tString javaCoreDefault = inheritJavaCoreOptions ? JavaCore.getOption(optionName) : null;", "+\t\t\tif (projectPreferences == null) return javaCoreDefault;", "+\t\t\tString value = projectPreferences.get(optionName, javaCoreDefault);", "+\t\t\treturn value == null ? null : value.trim();", "+\t\t}", "+\t\treturn null;"]}], "num": 12221}
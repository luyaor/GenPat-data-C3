{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "885eaf2c78cf116cb93b5a80c46f071a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3ce3256ff7f81fa88c22c05ba1fb5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void updateProblemLength()", "signatureAfterChange": "     private void updateProblemLength()", "diff": ["-    \t// for those markers that doesn't have an ending offset, figure it out by", "+    \t// for those problems that doesn't have an ending offset, figure it out by", "-    \tint count = 0;", "-    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "-    \t\tif( _file.equals(entry.getKey()) ){", "-    \t\t\tfor(IProblem problem : entry.getValue() ){", "-    \t\t\t\tif( problem.getSourceEnd() == -1 )", "+    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){", "+    \t\tint count = 0;", "+    \t\tint fileIndex = -1;", "+    \t\tfinal IFile file = entry.getKey();", "+    \t\tfor( IProblem problem : entry.getValue() ){", "+    \t\t\tif( problem.getSourceEnd() == -1 ){", "+    \t\t\t\tif( fileIndex == -1 )", "+    \t\t\t\t\tfileIndex = getFileIndex(file);", "+    \t\t\t\t// -2 means it's not one of the files that we are processing.", "+    \t\t\t\tif( fileIndex != -2 )", "-    \t\t\t}    \t\t\t\t", "-    \t\t}", "-    \t\telse{", "-    \t\t\tfor(IProblem problem : entry.getValue() ){", "-    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "-    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "-    \t}", "-    \tif( count > 0 ){", "-\t    \tfinal int[] startingOffsets = new int[count];", "-\t    \tint index = 0;", "-\t    \t", "-\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "-\t    \t\tif( entry.getKey() == _file ){", "-\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t", "+    \t\tif( fileIndex != -2 ){", "+    \t\t\tif( count > 0 ){", "+    \t\t\t\tfinal int[] startingOffsets = new int[count];", "+    \t\t    \tint index = 0;", "+\t    \t\t\tfor( IProblem problem : entry.getValue() ){", "-\t    \t\t\t}    \t\t\t\t", "-\t    \t\t}", "-\t    \t}", "-\t    \t", "-\t    \tfinal EndingOffsetFinder lfinder = new EndingOffsetFinder(startingOffsets);", "-\t    \t_astCompilationUnit.accept( lfinder );", "-\t    \t", "-\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "-\t    \t\tif( _file.equals(entry.getKey()) ){", "-\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+\t    \t\t\t}", "+\t    \t\t\t", "+\t    \t\t\tfinal EndingOffsetFinder lfinder = new EndingOffsetFinder(startingOffsets);", "+\t    \t\t\t_astUnits[fileIndex].accept( lfinder );", "+\t    \t    \t", "+\t    \t    \tfor(IProblem problem : entry.getValue() ){", "-\t    \t\t\t}    \t\t\t\t", "-\t    \t\t}", "-\t    \t}", "+\t    \t\t\t}", "+    \t\t\t}", "+    \t\t\t// else everything is clear.", "+    \t\t}", "+    \t\telse{", "+    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t\t\t// set the -1 source end to be the same as the source start.", "+    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "+    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "+    \t\t\t}", "+    \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99ec94d46de4c029e5100883a07983eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "1af62c8ac8c29f055bb8404d4de6ad60e868f8c4", "commitAfterChange": "1c68a970a8cbd8bfa2174955d5c78e149d7e6268", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": "      void postMarkers()", "signatureAfterChange": "     private void updateProblemLength()", "diff": ["-", "-    void postMarkers()", "+     */", "+    private void updateProblemLength()", "-    \tfor( MarkerInfo markerInfo : _markerInfos ){    \t\t", "-    \t\tif( markerInfo._markerAttrs.get(IMarker.CHAR_END) == null ) ", "-    \t\t\tcount ++;", "+    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "+    \t\tif( _file.equals(entry.getKey()) ){", "+    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t\t\tif( problem.getSourceEnd() == -1 )", "+    \t\t\t\t\tcount ++;", "+    \t\t\t}    \t\t\t\t", "+    \t\t}", "+    \t\telse{", "+    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "+    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "+    \t\t\t}", "+    \t\t}", "-\t    \tfor( MarkerInfo markerInfo : _markerInfos ){    \t\t", "-\t    \t\tif( markerInfo._markerAttrs.get(IMarker.CHAR_END) == null ){", "-\t    \t\t\tfinal Integer startingOffset = (Integer)markerInfo._markerAttrs.get(IMarker.CHAR_START);", "-\t    \t\t\tstartingOffsets[index++] = startingOffset.intValue();", "+\t    \t", "+\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "+\t    \t\tif( entry.getKey() == _file ){", "+\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+\t    \t\t\t\tif( problem.getSourceEnd() == -1 )", "+\t    \t\t\t\t\tstartingOffsets[index++] = problem.getSourceStart();", "+\t    \t\t\t}    \t\t\t\t", "-\t    \tfor( MarkerInfo markerInfo : _markerInfos ){    \t\t", "-\t    \t\tif( markerInfo._markerAttrs.get(IMarker.CHAR_END) == null ){", "-\t    \t\t\tfinal int startingOffset = ", "-\t    \t\t\t\t((Integer)markerInfo._markerAttrs.get(IMarker.CHAR_START)).intValue();", "-\t    \t\t\tint endingOffset = lfinder.getEndingOffset(startingOffset);", "-\t    \t\t\tif( endingOffset == 0 )", "-\t    \t\t\t\tendingOffset = startingOffset;", "-\t    \t\t\tmarkerInfo._markerAttrs.put(IMarker.CHAR_END, endingOffset);", "+\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "+\t    \t\tif( _file.equals(entry.getKey()) ){", "+\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+\t    \t\t\t\tif( problem.getSourceEnd() == -1 ){", "+\t    \t\t\t\t\tint startingOffset = problem.getSourceStart();", "+\t    \t\t\t\t\tint endingOffset = lfinder.getEndingOffset(startingOffset);", "+\t    \t    \t\t\tif( endingOffset == 0 )", "+\t    \t    \t\t\t\tendingOffset = startingOffset;", "+\t    \t    \t\t\tproblem.setSourceEnd(endingOffset);\t    \t    \t\t\t", "+\t    \t\t\t\t}", "+\t    \t\t\t}    \t\t\t\t", "-    \t", "-\t\t// Posting all the markers to the workspace. Doing this in a batch process", "-\t\t// to minimize the amount of notification.", "-\t\ttry{", "-\t\t\t// the resource of the compilation unit in the environment.", "-\t\t\tfinal IResource currentResource = _file; ", "-\t        final IWorkspaceRunnable runnable = new IWorkspaceRunnable(){", "-\t            public void run(IProgressMonitor monitor)", "-\t            {\t            ", "-\t\t\t\t\tfinal String markerType = _phase == Phase.RECONCILE ?", "-\t\t\t\t\t\t\t\t\t\t\t  RECONCILE_MARKER : BUILD_MARKER;\t\t\t\t", "-\t                for( MarkerInfo markerInfo : _markerInfos ){", "-\t                    IResource resource = markerInfo._resource;", "-\t\t\t\t\t\tif( resource == null )", "-\t\t\t\t\t\t\tresource = currentResource;", "-\t\t\t\t\t\ttry{", "-\t\t                    final IMarker marker = resource.createMarker(markerType);", "-\t\t                    marker.setAttributes(markerInfo._markerAttrs);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcatch(CoreException e){", "-\t\t\t\t\t\t\tthrow new IllegalStateException(e);", "-\t\t\t\t\t\t}", "-\t                }", "-\t            };", "-\t        };", "-\t\t\tcurrentResource.getWorkspace().run(runnable, currentResource, IWorkspace.AVOID_UPDATE, null );", "-", "-\t\t}", "-\t\tcatch(CoreException e){", "-\t\t\tthrow new IllegalStateException(e);", "-\t\t}", "-\t\tfinally{", "-\t\t\t_markerInfos.clear();", "-\t\t}"]}], "num": 1447}
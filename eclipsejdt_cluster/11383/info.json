{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e8caade3f341eddf0fafb76d8b6cf56", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94264a178edff90ca220a60ae481a8bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "014c4b6fb1c7750e40400ac728ee53666326e3d2", "commitAfterChange": "f06de4b999ef266d99070d6e6ee7f897f16a1d0e", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t\t\tenclosingElement = ((IClassFile)this.currentPossibleMatch.openable).getType();", "+\t\t\tIOpenable openable = enclosingElement.getOpenable();", "+\t\t\tIJavaElement anonType = null;", "+\t\t\tif (openable instanceof ClassFile) {", "+\t\t\t\tBinaryType binaryType = (BinaryType)((ClassFile) openable).getType();", "+\t\t\t\tString fileName = binaryType.getPath().toOSString();", "+\t\t\t\tif ((type.bits & ASTNode.IsAnonymousType) != 0) {", "+\t\t\t\t\tif (fileName != null) {", "+\t\t\t\t\t\tif (fileName.endsWith(\"jar\") || fileName.endsWith(SuffixConstants.SUFFIX_STRING_class)) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tIClassFile classFile= binaryType.getPackageFragment().getClassFile(binaryType.getTypeQualifiedName() + ", "+\t\t\t\t\t\t\t\t\t\"$\" + Integer.toString(occurrenceCount) + SuffixConstants.SUFFIX_STRING_class);//$NON-NLS-1$", "+\t\t\t\t\t\t\tanonType =  classFile.getType();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// TODO: JAVA 9 - JIMAGE to be included later - currently assuming that only .class files will be dealt here.", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tenclosingElement = anonType != null ? anonType : ((IClassFile)this.currentPossibleMatch.openable).getType() ;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d75901ecf1ea7b431937d38825b45942", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "7af18694cb84cbe29d3fce9081ee13e2b35d1924", "commitAfterChange": "8062780b8432b1d43d5212d514fdd79cb7aae097", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public MatchingOpenable(MatchLocator locator, IResource resource, Openable openable)", "signatureAfterChange": " public static IType getTopLevelType(IType binaryType)", "diff": ["-public MatchingOpenable(MatchLocator locator, IResource resource, Openable openable) {", "-\tthis.locator = locator;", "-\tthis.resource = resource;", "-\tthis.openable = openable;", "-}", "+}", "+public static IType getTopLevelType(IType binaryType) {", "+\t", "+\t// ensure it is not a local or anoymous type (see bug 28752  J Search resports non-existent Java element)", "+\tString typeName = binaryType.getElementName();", "+\tint lastDollar = typeName.lastIndexOf('$');", "+\tint length = typeName.length();", "+\tif (lastDollar != -1 && lastDollar < length-1) {", "+\t\tif (Character.isDigit(typeName.charAt(lastDollar+1))) {", "+\t\t\t// local or anonymous type", "+\t\t\ttypeName = typeName.substring(0, lastDollar);", "+\t\t\tIClassFile classFile = binaryType.getPackageFragment().getClassFile(typeName+\".class\"); //$NON-NLS-1$", "+\t\t\ttry {", "+\t\t\t\tbinaryType = classFile.getType();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// ignore as implementation of getType() cannot throw this exception", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\t// ensure it is a top level type", "+\tIType declaringType = binaryType.getDeclaringType();", "+\twhile (declaringType != null) {", "+\t\tbinaryType = declaringType;", "+\t\tdeclaringType = binaryType.getDeclaringType();", "+\t}", "+\treturn binaryType;"]}], "num": 11383}
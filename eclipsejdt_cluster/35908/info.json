{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5490aae27bd92dfd02a941509834ba13", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49c7cd7a54ea57e15891e01b552f5603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "b418235473d69146fcb35be10bf158bb2b040cf7", "commitAfterChange": "eadf5ba6d44f28f071965cf829d67590b0a71974", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\tdiscardEnclosingInstance ? null : qualification,", "+\t\t\t\t\t(this.bits & ASTNode.DiscardEnclosingInstance) != 0 ? null : qualification,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99640f2c6b46de1da1ca6f467188766d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "cbd48da7303f20fe27c3bb57f06cce9208a1cb77", "commitAfterChange": "46aba7a0faa3c2ef72f6a161b3ec052803ab1a41", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\t\t// TODO (kent) - if ((this.bits & ASTNode.IsSuperType) != 0)", "-\t\t\t\tif (isClassScope)", "+\t\t\t\tif ((this.bits & ASTNode.IsSuperType) != 0)", "-   \t\t\t    if ((this.bits & ASTNode.IsSuperType) != 0)", "-   \t\t\t    \tif (((ClassScope) scope).detectCycle(currentType, this, null))", "-   \t\t\t    \t\treturn null;", "-   \t\t\t    if (currentType.isGenericType()) { // check raw type", "+\t\t\t\tif ((this.bits & ASTNode.IsSuperType) != 0)", "+\t\t\t\t\tif (((ClassScope) scope).detectCycle(currentType, this, null))", "+\t\t\t\t\t\treturn null;", "+", "+\t\t\t\tif (currentType.isGenericType()) { // check raw type"]}], "num": 35908}
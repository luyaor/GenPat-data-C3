{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1d20a73e975eac9a6293cdf71f7838f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92b3733830996f4a0ccf09b662b11d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "2185e673ebc08a5106079919408a2a224cdce964", "commitAfterChange": "e23315438da307f57d974add8b859548ca4a3dcb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException", "signatureAfterChange": " \t\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException", "diff": ["-\t */", "-\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException {", "-\t\tif (newName != null) {", "-\t\t\tString oldTypeName= oldName.substring(0, oldName.length() - 5);", "-\t\t\tString newTypeName= newName.substring(0, newName.length() - 5);", "-\t\t\tAST ast = astCU.getAST();", "-\t\t\t// update main type name", "-\t\t\tIType[] types = cu.getTypes();", "-\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "-\t\t\t\tIType currentType = types[i];", "-\t\t\t\tif (currentType.getElementName().equals(oldTypeName)) {", "-\t\t\t\t\tAbstractTypeDeclaration typeNode = (AbstractTypeDeclaration) ((JavaElement) currentType).findNode(astCU);", "-\t\t\t\t\tif (typeNode != null) {", "-\t\t\t\t\t\t// rename type", "-\t\t\t\t\t\trewriter.replace(typeNode.getName(), ast.newSimpleName(newTypeName), null);", "-\t\t\t\t\t\tif (typeNode instanceof TypeDeclaration) {", "+\t\t */", "+\t\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException {", "+\t\t\tif (newName != null) {", "+\t\t\t\tString oldTypeName= oldName.substring(0, oldName.length() - 5);", "+\t\t\t\tString newTypeName= newName.substring(0, newName.length() - 5);", "+\t\t\t\tAST ast = astCU.getAST();", "+\t\t\t\t// update main type name", "+\t\t\t\tIType[] types = cu.getTypes();", "+\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "+\t\t\t\t\tIType currentType = types[i];", "+\t\t\t\t\tif (currentType.getElementName().equals(oldTypeName)) {", "+\t\t\t\t\t\tAbstractTypeDeclaration typeNode = (AbstractTypeDeclaration) ((JavaElement) currentType).findNode(astCU);", "+\t\t\t\t\t\tif (typeNode != null) {", "+\t\t\t\t\t\t\t// rename type", "+\t\t\t\t\t\t\trewriter.replace(typeNode.getName(), ast.newSimpleName(newTypeName), null);", "-\t\t\t\t\t\t\tMethodDeclaration[] methods = ((TypeDeclaration) typeNode).getMethods();", "-\t\t\t\t\t\t\tfor (int j = 0, length = methods.length; j < length; j++) {", "-\t\t\t\t\t\t\t\tMethodDeclaration methodDeclaration = methods[j];", "-\t\t\t\t\t\t\t\tif (methodDeclaration.isConstructor()) {", "-\t\t\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "-\t\t\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "-\t\t\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\tIterator bodyDeclarations = typeNode.bodyDeclarations().iterator();", "+\t\t\t\t\t\t\twhile (bodyDeclarations.hasNext()) {", "+\t\t\t\t\t\t\t\tObject bodyDeclaration = bodyDeclarations.next();", "+\t\t\t\t\t\t\t\tif (bodyDeclaration instanceof MethodDeclaration) {", "+\t\t\t\t\t\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;", "+\t\t\t\t\t\t\t\t\tif (methodDeclaration.isConstructor()) {", "+\t\t\t\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "+\t\t\t\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "+\t\t\t\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baaad9fd72680c065f5d493556acda32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t\tprivate void updateTypeName(ICompilationUnit cu, IDOMCompilationUnit domCU, String oldName, String newName) throws JavaModelException", "signatureAfterChange": " \tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, IDocument document) throws JavaModelException", "diff": ["-        // TODO - JDOM - remove once model ported off of JDOM", "-\t\tprivate void updateTypeName(ICompilationUnit cu, IDOMCompilationUnit domCU, String oldName, String newName) throws JavaModelException {", "-\t\t\tif (newName != null) {", "-\t\t\t\tif (fRenamedCompilationUnits == null) {", "-\t\t\t\t\tfRenamedCompilationUnits= new ArrayList(1);", "-\t\t\t\t}", "-\t\t\t\tfRenamedCompilationUnits.add(cu);", "-\t\t\t\tString oldTypeName= oldName.substring(0, oldName.length() - 5);", "-\t\t\t\tString newTypeName= newName.substring(0, newName.length() - 5);", "-\t\t\t\t// update main type name", "-\t\t\t\tIType[] types = cu.getTypes();", "-\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "-\t\t\t\t\tIType currentType = types[i];", "-\t\t\t\t\tif (currentType.getElementName().equals(oldTypeName)) {", "-\t\t\t\t\t\tIDOMNode typeNode = ((JavaElement) currentType).findNode(domCU);", "-\t\t\t\t\t\tif (typeNode != null) {", "-\t\t\t\t\t\t\ttypeNode.setName(newTypeName);", "+\t */", "+\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, IDocument document) throws JavaModelException {", "+\t\tif (newName != null) {", "+\t\t\tString oldTypeName= oldName.substring(0, oldName.length() - 5);", "+\t\t\tString newTypeName= newName.substring(0, newName.length() - 5);", "+\t\t\tAST ast = astCU.getAST();", "+\t\t\tASTRewrite rewriter = ASTRewrite.create(ast);", "+\t\t\t// update main type name", "+\t\t\tIType[] types = cu.getTypes();", "+\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "+\t\t\t\tIType currentType = types[i];", "+\t\t\t\tif (currentType.getElementName().equals(oldTypeName)) {", "+\t\t\t\t\tTypeDeclaration typeNode = (TypeDeclaration) ((JavaElement) currentType).findNode(astCU);", "+\t\t\t\t\tif (typeNode != null) {", "+\t\t\t\t\t\t// rename type", "+\t\t\t\t\t\trewriter.replace(typeNode.getName(), ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\tMethodDeclaration[] methods = typeNode.getMethods();", "+\t\t\t\t\t\tfor (int j = 0, length = methods.length; j < length; j++) {", "+\t\t\t\t\t\t\tMethodDeclaration methodDeclaration = methods[j];", "+\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "+\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "+\t\t\t\t\t\t\t\t// rename constructor", "+\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\t}", "+\t \t\tTextEdit edits = rewriter.rewriteAST(document, null);", "+\t \t\ttry {", "+\t\t \t\tedits.apply(document);", "+\t \t\t} catch (BadLocationException e) {", "+\t \t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.INVALID_CONTENTS);", "+\t \t\t}", "+\t}"]}], "num": 24066}
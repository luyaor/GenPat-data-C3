{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68137e096250874bf7281fb9d5018d13", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "148e6047883fe7d2d7c7f4fd0d65513f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "9aa80e99c6e4c71f435d6d382fe647195afad26c", "commitAfterChange": "cb586d1ec75e8da71f4da23a7a5eb911d6960b1c", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " \t \tprivate ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession) throws JavaModelException", "signatureAfterChange": " \t \tprivate ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession) throws JavaModelException", "diff": ["+\t\t\tIClasspathEntry resolvedEntry = rawEntry;", "-\t\t\t\t\tIClasspathEntry resolvedEntry = null;", "-\t\t\t\t\trawEntry = ((ClasspathEntry) rawEntry).resolvedDotDot();", "+\t\t\t\t\tresolvedEntry = ((ClasspathEntry) rawEntry).resolvedDotDot();", "-\t\t\t\t\tif (result.rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) {", "+\t\t\t\t\tif (result.rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) {", "-\t\t\t\t\t\tresult.rootPathToResolvedEntries.put(resolvedPath, rawEntry);", "+\t\t\t\t\t\tresult.rootPathToResolvedEntries.put(resolvedPath, resolvedEntry);", "-\t\t\t\t\tresolvedEntries.add(rawEntry);", "-\t\t\t\t\tif (rawEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "+\t\t\t\t\tresolvedEntries.add(resolvedEntry);", "+\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f870e2f2e456be33500b77a874854e0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "94a425e221148886c840b4d545bf87183980be4b", "commitAfterChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException", "signatureAfterChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException", "diff": ["+\t\t\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "-\t\t\t\t\t\t\t// Catch the assertion failure and set ststus instead", "+\t\t\t\t\t\t\t// Catch the assertion failure and set status instead", "+\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "+\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered ", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (cEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "+\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered ", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (rawEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "+\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered ", "+\t\t\t\t\t\t}"]}], "num": 2484}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db89d852cc014a59b46ab5d326e03778", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53356ecce67a8b850b54986145f1ee72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "4d19416746402b8fbbfd02c13772658da70a345a", "commitAfterChange": "81400db64234d6cf1ce3b6a87a8f065ac6bd072f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r protected char[][][] collect()", "signatureAfterChange": "\r \r protected char[][][] collect() throws JavaModelException", "diff": ["-protected char[][][] collect() {\r", "-\t\t\r", "-\t// Collect the paths of the cus that declare a type which matches declaringQualification + declaringSimpleName\r", "-\tString[] paths = this.getPathsOfDeclaringType();\r", "+protected char[][][] collect() throws JavaModelException {\r", "-\t// Create bindings from source types and binary types\r", "-\t// and collect super type names of the type declaration \r", "-\t// that match the given declaring type\r", "-\tif (paths != null) {\r", "+\tif (this.type != null) {\r", "-\t\tfor (int i = 0, length = paths.length; i < length; i++) {\r", "+\t\tthis.createParser((JavaProject)this.type.getJavaProject());\r", "+\t\tif (this.type.isBinary()) {\r", "+\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(this.type);\r", "+\t\t\tthis.collectSuperTypeNames(binding);\r", "+\t\t} else {\r", "-\t\t\t\tOpenable openable = locator.handleFactory.createOpenable(paths[i]);\r", "-\t\t\t\tif (openable == null)\r", "-\t\t\t\t\tcontinue; // outside classpath\r", "-\t\t\t\tif (openable instanceof ICompilationUnit) {\r", "-\t\t\t\t\tICompilationUnit unit = (ICompilationUnit)openable;\r", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = locator.buildBindings(unit);\r", "-\t\t\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else if (openable instanceof IClassFile) {\r", "-\t\t\t\t\tIClassFile classFile = (IClassFile)openable;\r", "-\t\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(classFile.getType());\r", "-\t\t\t\t\tif (this.matches(binding)) {\r", "-\t\t\t\t\t\tthis.collectSuperTypeNames(binding);\r", "-\t\t\t\t\t}\r", "+\t\t\t\tICompilationUnit unit = this.type.getCompilationUnit();\r", "+\t\t\t\tif (unit.isWorkingCopy()) {\r", "+\t\t\t\t\tunit = (ICompilationUnit)unit.getOriginalElement();\r", "+\t\t\t\t}\r", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "+\t\t\t\tif (parsedUnit != null) {\r", "+\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "-\t\t\t\t// ignore: continue with next element\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// ignore: continue with next element\r", "+\t\t\t\t// report inacurrate matches\r", "+\t\t\t\treturn null;\r", "-\t\tSystem.arraycopy(this.result, 0, this.result = new char[this.resultIndex][][], 0, this.resultIndex);\r", "-\t} else {\r", "-\t\treturn null;\r", "+\t} else {\t\r", "+\t\t// Collect the paths of the cus that declare a type which matches declaringQualification + declaringSimpleName\r", "+\t\tString[] paths = this.getPathsOfDeclaringType();\r", "+\t\t\r", "+\t\t// Create bindings from source types and binary types\r", "+\t\t// and collect super type names of the type declaration \r", "+\t\t// that match the given declaring type\r", "+\t\tif (paths != null) {\r", "+\t\t\tUtil.sort(paths); // sort by projects\r", "+\t\t\tJavaProject previousProject = null;\r", "+\t\t\tthis.result = new char[1][][];\r", "+\t\t\tthis.resultIndex = 0;\r", "+\t\t\tfor (int i = 0, length = paths.length; i < length; i++) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tOpenable openable = this.handleFactory.createOpenable(paths[i]);\r", "+\t\t\t\t\tif (openable == null)\r", "+\t\t\t\t\t\tcontinue; // outside classpath\r", "+\t\t\t\t\tIJavaProject project = openable.getJavaProject();\r", "+\t\t\t\t\tif (previousProject == null || !previousProject.equals(project)) {\r", "+\t\t\t\t\t\tpreviousProject = (JavaProject)project;\r", "+\t\t\t\t\t\tthis.createParser(previousProject);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (openable instanceof ICompilationUnit) {\r", "+\t\t\t\t\t\tICompilationUnit unit = (ICompilationUnit)openable;\r", "+\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "+\t\t\t\t\t\tif (parsedUnit != null) {\r", "+\t\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else if (openable instanceof IClassFile) {\r", "+\t\t\t\t\t\tIClassFile classFile = (IClassFile)openable;\r", "+\t\t\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(classFile.getType());\r", "+\t\t\t\t\t\tif (this.matches(binding)) {\r", "+\t\t\t\t\t\t\tthis.collectSuperTypeNames(binding);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t\t// ignore: continue with next element\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t// ignore: continue with next element\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tSystem.arraycopy(this.result, 0, this.result = new char[this.resultIndex][][], 0, this.resultIndex);\r", "+\t\t\treturn this.result;\r", "+\t\t} else {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c94e4871cbdaa245eef1ddbea9f498ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "commitAfterChange": "179d5d1c5c2a0bb83cd907094171a8fb72cf869e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r protected char[][][] collect() throws JavaModelException", "signatureAfterChange": "\r \r protected char[][][] collect() throws JavaModelException", "diff": ["+\t\t// Collect the paths of the cus that are in the hierarchy of the given type\r", "-\t\tthis.createParser((JavaProject)this.type.getJavaProject());\r", "+\t\tJavaProject javaProject = (JavaProject)this.type.getJavaProject();\r", "+\t\tthis.locator.createParser(javaProject);\r", "+\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);\r", "-\t\t\t\tif (unit.isWorkingCopy()) {\r", "-\t\t\t\t\tunit = (ICompilationUnit)unit.getOriginalElement();\r", "-\t\t\t\t}\r", "+\t\t} finally {\r", "+\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r", "-\t\t\tfor (int i = 0, length = paths.length; i < length; i++) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tOpenable openable = this.handleFactory.createOpenable(paths[i]);\r", "-\t\t\t\t\tif (openable == null)\r", "-\t\t\t\t\t\tcontinue; // outside classpath\r", "-\t\t\t\t\tIJavaProject project = openable.getJavaProject();\r", "-\t\t\t\t\tif (previousProject == null || !previousProject.equals(project)) {\r", "-\t\t\t\t\t\tpreviousProject = (JavaProject)project;\r", "-\t\t\t\t\t\tthis.createParser(previousProject);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (openable instanceof ICompilationUnit) {\r", "-\t\t\t\t\t\tICompilationUnit unit = (ICompilationUnit)openable;\r", "-\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "-\t\t\t\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "+\t\t\ttry {\r", "+\t\t\t\tfor (int i = 0, length = paths.length; i < length; i++) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i]);\r", "+\t\t\t\t\t\tif (openable == null)\r", "+\t\t\t\t\t\t\tcontinue; // outside classpath\r", "+\t\t\t\t\t\tIJavaProject project = openable.getJavaProject();\r", "+\t\t\t\t\t\tif (!project.equals(previousProject)) {\r", "+\t\t\t\t\t\t\tif (previousProject != null) {\r", "+\t\t\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tpreviousProject = (JavaProject)project;\r", "+\t\t\t\t\t\t\tthis.locator.createParser(previousProject);\r", "+\t\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);\r", "-\t\t\t\t\t} else if (openable instanceof IClassFile) {\r", "-\t\t\t\t\t\tIClassFile classFile = (IClassFile)openable;\r", "-\t\t\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(classFile.getType());\r", "-\t\t\t\t\t\tif (this.matches(binding)) {\r", "-\t\t\t\t\t\t\tthis.collectSuperTypeNames(binding);\r", "+\t\t\t\t\t\tif (openable instanceof ICompilationUnit) {\r", "+\t\t\t\t\t\t\tICompilationUnit unit = (ICompilationUnit)openable;\r", "+\t\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "+\t\t\t\t\t\t\tif (parsedUnit != null) {\r", "+\t\t\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else if (openable instanceof IClassFile) {\r", "+\t\t\t\t\t\t\tIClassFile classFile = (IClassFile)openable;\r", "+\t\t\t\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(classFile.getType());\r", "+\t\t\t\t\t\t\tif (this.matches(binding)) {\r", "+\t\t\t\t\t\t\t\tthis.collectSuperTypeNames(binding);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t\t\t// ignore: continue with next element\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t// ignore: continue with next element\r", "-\t\t\t\t} catch (AbortCompilation e) {\r", "-\t\t\t\t\t// ignore: continue with next element\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t// ignore: continue with next element\r", "+\t\t\t\t}\r", "+\t\t\t} finally {\r", "+\t\t\t\tif (previousProject != null) {\r", "+\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r"]}], "num": 6753}
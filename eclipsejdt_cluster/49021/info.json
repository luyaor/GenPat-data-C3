{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d465994dd587de90c942d7d6fe0f86aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e8941bd4be9171c880023753eef1383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope)", "signatureAfterChange": " \t \tprotected FunctionalExpression original()", "diff": ["+\t", "+\tprotected FunctionalExpression original() {", "+\t\treturn this.original;", "-\t\t\t\t\t\tint returnExpressionsCount = 0;", "-\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "-\t\t\t\t\t\t\tthis.returnExpressions[this.returnExpressionsCount++] = expression;", "-\t\t\t\t\t\t\treturn false; // should not analyze any nested lambda returns", "-\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9fa4848d69072c25d2e6d688adf136b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ReconcileEnv.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\t\tpublic void write(int b) throws IOException", "signatureAfterChange": " \tICompilationUnit getCompilationUnit()", "diff": ["-\t\tprivate static final OutputStream NO_OP_STREAM = new OutputStream(){", "-\t\t\tpublic void write(int b) throws IOException {", "-\t\t\t\treturn;", "-\t\t\t}", "+\t/* package scope */", "+\tICompilationUnit getCompilationUnit() {", "+\t\treturn _workingCopy;", "+\t}"]}], "num": 49021}
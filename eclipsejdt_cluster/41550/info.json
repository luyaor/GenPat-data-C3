{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee1a66b4eb316cd9cd2fbaef60f189fa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f734c3aedbdb8891bc15fd50255936b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "c223ae053787e6c843ac82068147df20215c916b", "commitAfterChange": "0211ebf94321d48ca7e59da13d2b4b3ea6399b61", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.value);", "+\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, expressions[i]);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, expressions[i], false);", "-\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\tif (valueType.isArrayType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, false);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (!(expressions[i] instanceof ClassLiteralAccess)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeClassLiteral(this.binding.declaringClass, this.name, expressions[i]);", "+\t\t\t\t\t\t\t\tExpression currentExpression = expressions[i];", "+\t\t\t\t\t\t\t\tif (!(currentExpression instanceof ClassLiteralAccess)) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeClassLiteral(this.binding.declaringClass, this.name, currentExpression);", "-\t\t\t\t\t// TODO (olivier) change message for annotation value must be an *enum* constant", "-\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, true);", "+\t\t\t\t} else if (this.value instanceof ArrayInitializer) {", "+\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) this.value;", "+\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\tfor (int i =0, max = expressions.length; i < max; i++) {", "+\t\t\t\t\t\t\tExpression currentExpression = expressions[i];", "+\t\t\t\t\t\t\tif (currentExpression instanceof NullLiteral) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, currentExpression, true);", "+\t\t\t\t\t\t\t} else if (currentExpression instanceof NameReference) {", "+\t\t\t\t\t\t\t\tNameReference nameReference = (NameReference) currentExpression;", "+\t\t\t\t\t\t\t\tfinal Binding nameReferenceBinding = nameReference.binding;", "+\t\t\t\t\t\t\t\tif (nameReferenceBinding.kind() == Binding.FIELD) {", "+\t\t\t\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) nameReferenceBinding;", "+\t\t\t\t\t\t\t\t\tif (!fieldBinding.declaringClass.isEnum()) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, currentExpression, true);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (this.value instanceof NameReference) {", "+\t\t\t\t\tNameReference nameReference = (NameReference) this.value;", "+\t\t\t\t\tfinal Binding nameReferenceBinding = nameReference.binding;", "+\t\t\t\t\tif (nameReferenceBinding.kind() == Binding.FIELD) {", "+\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) nameReferenceBinding;", "+\t\t\t\t\t\tif (!fieldBinding.declaringClass.isEnum()) {", "+\t\t\t\t\t\t\tif (!fieldBinding.type.isArrayType()) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, true);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5dc265191a548d953df3859a84b72b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "7cc5105214055493937549b61fac95d343064ee5", "commitAfterChange": "7568a4350d418633b0b504fd95408219cea387db", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) this.binding;", "-\t\t\t\t\tif (!local.isFinal() && ((this.bits & ASTNode.DepthMASK) != 0))", "-\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal((LocalVariableBinding) this.binding, this);", "+\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) this.binding;", "+\t\t\t\t\tif (!local.isFinal() && ((this.bits & ASTNode.DepthMASK) != 0)) {", "+\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal((LocalVariableBinding) this.binding, this);", "+\t\t\t\t\t}", "-\t\t\t\t\tif (this.resolvedType != null", "-\t\t\t\t\t\t\t&& (this.resolvedType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tif (this.resolvedType != null && (this.resolvedType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\t\t\t\t\tthis.bits |= Binding.FIELD;", "+\t\t\t\t\tReferenceBinding declaringClass = fieldBinding.original().declaringClass;", "+\t\t\t\t\tSourceTypeBinding sourceType = methodScope.enclosingSourceType();", "-\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1", "-\t\t\t\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t\t\tif ((this.indexOfFirstFieldBinding == 1 || declaringClass.isEnum())", "+\t\t\t\t\t\t\t&& sourceType == declaringClass", "-\t\t\t\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "+\t\t\t\t\t\tscope.problemReporter().forwardReference(this, this.indexOfFirstFieldBinding-1, fieldBinding);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & ASTNode.IsStrictlyAssigned) != 0 && this.indexOfFirstFieldBinding == this.tokens.length)) {", "+\t\t\t\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);\t", "-\t\t\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t\t\t\t// only last field is actually a write access if any", "-\t\t\t\t\t\t\tSourceTypeBinding sourceType = methodScope.enclosingSourceType();", "-\t\t\t\t\t} else if (this.indexOfFirstFieldBinding == 1 && scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "-\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "+\t\t\t\t\t\tif (this.indexOfFirstFieldBinding > 1", "+\t\t\t\t\t\t\t\t&& fieldBinding.declaringClass != this.actualReceiverType", "+\t\t\t\t\t\t\t\t&& fieldBinding.declaringClass.canBeSeenBy(scope)) {", "+\t\t\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, fieldBinding);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1 && scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "+\t\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t//must check for the static status....", "+\t\t\t\t\t\tif (this.indexOfFirstFieldBinding > 1  //accessing to a field using a type as \"receiver\" is allowed only with static field", "+\t\t\t\t\t\t\t\t || scope.methodScope().isStatic) { \t// the field is the first token of the qualified reference....", "+\t\t\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t }", "-\t\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "-\t\t\t\t\tthis.bits |= Binding.FIELD;", "-", "-//\t\t\t\t\t\t// check for deprecated receiver type", "-//\t\t\t\t\t\t// deprecation check for receiver type if not first token", "-//\t\t\t\t\t\tif (indexOfFirstFieldBinding > 1) {", "-//\t\t\t\t\t\t\tif (isTypeUseDeprecated(this.actualReceiverType, scope))", "-//\t\t\t\t\t\t\t\tscope.problemReporter().deprecatedType(this.actualReceiverType, this);", "-//\t\t\t\t\t\t}", "+\t\t\t\t\t"]}], "num": 41550}
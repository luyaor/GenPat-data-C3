{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a82210545315d6710c046ac7c651fdce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53620e12f63a15e3dfc952ccae6beb58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "7d9c9b62df0b60ad9bca2e622843527910db4f9a", "commitAfterChange": "2553316bdc0b8032f2f4a80e15ded7371fde47b6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static char[] getInputStreamAsCharArray(InputStream stream, int length, String encoding) \t\tthrows IOException", "signatureAfterChange": " \tpublic static char[] getInputStreamAsCharArray(InputStream stream, int length, String encoding) \t\tthrows IOException", "diff": ["-\t\t\tint charsRead = -1;", "+\t\t\tint amountRead = -1;", "-\t\t\t\tint available = stream.available();", "+\t\t\t\tint amountRequested = Math.max(stream.available(), DEFAULT_READING_SIZE);  // read at least 8K", "-\t\t\t\tif (contentsLength + available > contents.length) {", "+\t\t\t\tif (contentsLength + amountRequested > contents.length) {", "-\t\t\t\t\t\tcontents = new char[contentsLength + available],", "+\t\t\t\t\t\tcontents = new char[contentsLength + amountRequested],", "-\t\t\t\tcharsRead = reader.read(contents, contentsLength, available);", "+\t\t\t\tamountRead = reader.read(contents, contentsLength, amountRequested);", "-\t\t\t\tif (charsRead > 0) {", "+\t\t\t\tif (amountRead > 0) {", "-\t\t\t\t\tcontentsLength += charsRead;", "+\t\t\t\t\tcontentsLength += amountRead;", "-\t\t\t} while (charsRead > 0);", "+\t\t\t} while (amountRead != -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b45c2f386f512566f788adeac6b1936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "7d9c9b62df0b60ad9bca2e622843527910db4f9a", "commitAfterChange": "2553316bdc0b8032f2f4a80e15ded7371fde47b6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static byte[] getInputStreamAsByteArray(InputStream stream, int length) \t\tthrows IOException", "signatureAfterChange": " \tpublic static byte[] getInputStreamAsByteArray(InputStream stream, int length) \t\tthrows IOException", "diff": ["-\t\t\tint bytesRead = -1;", "+\t\t\tint amountRead = -1;", "-\t\t\t\tint available = stream.available();", "-", "+\t\t\t\tint amountRequested = Math.max(stream.available(), DEFAULT_READING_SIZE);  // read at least 8K", "+\t\t\t\t", "-\t\t\t\tif (contentsLength + available > contents.length) {", "+\t\t\t\tif (contentsLength + amountRequested > contents.length) {", "-\t\t\t\t\t\tcontents = new byte[contentsLength + available],", "+\t\t\t\t\t\tcontents = new byte[contentsLength + amountRequested],", "-\t\t\t\tbytesRead = stream.read(contents, contentsLength, available);", "+\t\t\t\tamountRead = stream.read(contents, contentsLength, amountRequested);", "-\t\t\t\tif (bytesRead > 0) {", "+\t\t\t\tif (amountRead > 0) {", "-\t\t\t\t\tcontentsLength += bytesRead;", "+\t\t\t\t\tcontentsLength += amountRead;", "-\t\t\t} while (bytesRead > 0);", "+\t\t\t} while (amountRead != -1); "]}], "num": 34677}
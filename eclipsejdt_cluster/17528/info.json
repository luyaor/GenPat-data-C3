{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18b3f04b2bc250d6c55c3ce10a3fbc9c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f1766b2c577244b87b1dc537675de15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration()", "diff": ["-\t\tMemberTypeDeclaration[] memberTypeDeclarations = new MemberTypeDeclaration[existingCount + memberTypeCount];", "+\t\tTypeDeclaration[] memberTypeDeclarations = new TypeDeclaration[existingCount + memberTypeCount];", "-\t\t\tmemberTypeDeclarations[existingCount + i] = (MemberTypeDeclaration)memberTypes[i].updatedTypeDeclaration();", "+\t\t\tmemberTypeDeclarations[existingCount + i] = memberTypes[i].updatedTypeDeclaration();", "-\t/* might need to cast itself into a MemberTypeDeclaration or a LocalTypeDeclaration */", "-\tTypeDeclaration newTypeDeclaration = null;", "-\t\tnewTypeDeclaration = new MemberTypeDeclaration(typeDeclaration.compilationResult);", "-\t} else {", "-\t\tif (parent instanceof RecoveredMethod){", "-\t\t\tnewTypeDeclaration = new LocalTypeDeclaration(typeDeclaration.compilationResult);", "-\t\t}", "-\t}", "-\t/* copy slots into new type */", "-\tif (newTypeDeclaration != null){", "-\t\tnewTypeDeclaration.modifiers = typeDeclaration.modifiers;", "-\t\tnewTypeDeclaration.modifiersSourceStart = typeDeclaration.modifiersSourceStart;", "-\t\tnewTypeDeclaration.name = typeDeclaration.name;", "-\t\tnewTypeDeclaration.superclass = typeDeclaration.superclass;", "-\t\tnewTypeDeclaration.superInterfaces = typeDeclaration.superInterfaces;", "-\t\tnewTypeDeclaration.fields = typeDeclaration.fields;", "-\t\tnewTypeDeclaration.methods = typeDeclaration.methods;", "-\t\tnewTypeDeclaration.memberTypes = typeDeclaration.memberTypes;", "-\t\tnewTypeDeclaration.ignoreFurtherInvestigation = typeDeclaration.ignoreFurtherInvestigation;", "-\t\tnewTypeDeclaration.maxFieldCount = typeDeclaration.maxFieldCount;", "-\t\tnewTypeDeclaration.declarationSourceStart = typeDeclaration.declarationSourceStart;", "-\t\tnewTypeDeclaration.declarationSourceEnd = typeDeclaration.declarationSourceEnd;", "-\t\tnewTypeDeclaration.bodyEnd = typeDeclaration.bodyEnd;", "-\t\tnewTypeDeclaration.bodyStart = typeDeclaration.bodyStart;", "-\t\ttypeDeclaration = newTypeDeclaration;", "+\t\ttypeDeclaration.bits |= ASTNode.IsMemberTypeMASK;", "+\t} else if (parent instanceof RecoveredMethod){", "+\t\ttypeDeclaration.bits |= ASTNode.IsLocalTypeMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eef231a46496ae64c391c091846a9a86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredUnit.java", "commitBeforeChange": "f4fc58ef48a6d9d6c398d56576d18d3e70e62c86", "commitAfterChange": "6537a24c88f25f9b49763273df663f64d4b48580", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public CompilationUnitDeclaration updatedCompilationUnitDeclaration()", "signatureAfterChange": " public CompilationUnitDeclaration updatedCompilationUnitDeclaration()", "diff": ["-\tif (importCount > 0){", "-\t\tImportReference[] importRefences = new ImportReference[importCount];", "-\t\tfor (int i = 0; i < importCount; i++){", "-\t\t\timportRefences[i] = imports[i].updatedImportReference();", "+\tif (this.importCount > 0){", "+\t\tImportReference[] importRefences = new ImportReference[this.importCount];", "+\t\tfor (int i = 0; i < this.importCount; i++){", "+\t\t\timportRefences[i] = this.imports[i].updatedImportReference();", "-\t\tunitDeclaration.imports = importRefences;", "+\t\tthis.unitDeclaration.imports = importRefences;", "-\tif (typeCount > 0){", "-\t\tint existingCount = unitDeclaration.types == null ? 0 : unitDeclaration.types.length;", "-\t\tTypeDeclaration[] typeDeclarations = new TypeDeclaration[existingCount + typeCount];", "+\tif (this.typeCount > 0){", "+\t\tint existingCount = this.unitDeclaration.types == null ? 0 : this.unitDeclaration.types.length;", "+\t\tTypeDeclaration[] typeDeclarations = new TypeDeclaration[existingCount + this.typeCount];", "-\t\t\tSystem.arraycopy(unitDeclaration.types, 0, typeDeclarations, 0, existingCount);", "+\t\t\tSystem.arraycopy(this.unitDeclaration.types, 0, typeDeclarations, 0, existingCount);", "-\t\tif (types[typeCount - 1].typeDeclaration.declarationSourceEnd == 0){", "-\t\t\ttypes[typeCount - 1].typeDeclaration.declarationSourceEnd = unitDeclaration.sourceEnd;", "-\t\t\ttypes[typeCount - 1].typeDeclaration.bodyEnd = unitDeclaration.sourceEnd;", "+\t\tif (this.types[this.typeCount - 1].typeDeclaration.declarationSourceEnd == 0){", "+\t\t\tthis.types[this.typeCount - 1].typeDeclaration.declarationSourceEnd = this.unitDeclaration.sourceEnd;", "+\t\t\tthis.types[this.typeCount - 1].typeDeclaration.bodyEnd = this.unitDeclaration.sourceEnd;", "-\t\tfor (int i = 0; i < typeCount; i++){", "-\t\t\tTypeDeclaration typeDecl = types[i].updatedTypeDeclaration();", "+\t\tfor (int i = 0; i < this.typeCount; i++){", "+\t\t\tTypeDeclaration typeDecl = this.types[i].updatedTypeDeclaration();", "-\t\tif (actualCount != typeCount){", "+\t\tif (actualCount != this.typeCount){", "-\t\tunitDeclaration.types = typeDeclarations;", "+\t\tthis.unitDeclaration.types = typeDeclarations;", "-\treturn unitDeclaration;", "+\treturn this.unitDeclaration;"]}], "num": 17528}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1212a42ca85c3b73d021b33319f6b5b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3511e3df676b24466f13e50b0091191f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "commitAfterChange": "3388256fa80bf40daffa9f485d2674986c875b82", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "signatureAfterChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "diff": ["+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391898", "+\t\t\tif (this.ast.apiLevel() >= AST.JLS8 && !type.annotations().isEmpty()) {", "+\t\t\t\tIterator annotations = type.annotations.iterator();", "+\t\t\t\twhile (annotations.hasNext()) {", "+\t\t\t\t\tAnnotation annotation = (Annotation) annotations.next();", "+\t\t\t\t\tannotation.setParent(null, null);", "+\t\t\t\t\tvariableDecl.varargsAnnotations().add(annotation);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abbba7f750b045262e06706c02554ec1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/readannotation/ReadAnnotationProcessor.java", "commitBeforeChange": "6742a17d1caafc5993ac9b9729f35ed214601070", "commitAfterChange": "62e4b78bb9ee6e7ba05f701d984b5c8f51c919e3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void process()", "signatureAfterChange": "  \tpublic void process()", "diff": ["-\t\t\t\t// This doesn't work, until https://bugs.eclipse.org/bugs/show_bug.cgi?id=213917 is fixed:", "-\t\t\t\t// assertAnnotation(expectedPkgAnnos, _env.getPackage(\"notypes\").getAnnotationMirrors());", "+\t\t\t\t", "+\t\t\t\tfinal String[] expectedNoTypeAnnos = new String[]{ \"@SimpleAnnotation(value = foo)\" };", "+\t\t\t\tassertAnnotation(expectedNoTypeAnnos, _env.getPackage(\"notypes\").getAnnotationMirrors());"]}], "num": 50099}
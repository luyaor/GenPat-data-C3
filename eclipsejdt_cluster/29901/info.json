{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99bba7448310b816e46123b03a0f8720", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "130929366c0fdb4308751483ab13e63a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 333, "signatureBeforeChange": "\t \t \tpublic void testVariableDeclarationExpression()", "signatureAfterChange": " \t\t \tpublic void testVariableDeclarationExpression()", "diff": ["-\t", "+\t\t", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t}", "-\t\tint legal = Modifier.FINAL;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.FINAL;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}", "-\t\t// check that property cannot be set to illegal value", "-\t\ttry {", "-\t\t\tx.setModifiers(Modifier.PUBLIC);", "-\t\t\tassertTrue(false);", "-\t\t} catch (RuntimeException e) {", "-\t\t\t// pass", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.modifiers(), new Property(\"Modifiers\", true, ExtendedModifier.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tModifier result = targetAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\tTypeDeclaration pd = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\tpd.modifiers().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tSingleMemberAnnotation s1 = x.getAST().newSingleMemberAnnotation();", "+\t\t\t\t\ts1.setValue(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tSingleMemberAnnotation s1 = (SingleMemberAnnotation) x.getParent();", "+\t\t\t\t\ts1.setValue(x.getAST().newNullLiteral());", "+\t\t\t\t}", "+\t\t\t});", "+", "+\t\t\t// check that getModifiers() tracks changes to modifiers()", "+\t\t\tx.modifiers().clear();", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\tModifier[] allMods = allModifiers();", "+\t\t\t// one at a time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == allMods[i].getKeyword().toFlagValue());", "+\t\t\t\tx.modifiers().remove(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\t}", "+\t\t\t// all at same time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t}", "+\t\t\tint flags  = x.getModifiers();", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tassertTrue((flags & allMods[i].getKeyword().toFlagValue()) != 0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1e322a2fb9e695cb51914428623a7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 312, "signatureBeforeChange": "\t \t \tpublic void testVariableDeclarationStatement()", "signatureAfterChange": "\t \t \tpublic void testVariableDeclarationStatement()", "diff": ["-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t}", "-\t\tint legal = Modifier.FINAL;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.FINAL;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}", "-\t\t// check that property cannot be set to illegal value", "-\t\ttry {", "-\t\t\tx.setModifiers(Modifier.PUBLIC);", "-\t\t\tassertTrue(false);", "-\t\t} catch (RuntimeException e) {", "-\t\t\t// pass", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.modifiers(), new Property(\"Modifiers\", true, ExtendedModifier.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tModifier result = targetAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\tTypeDeclaration pd = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\tpd.modifiers().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tSingleMemberAnnotation s1 = x.getAST().newSingleMemberAnnotation();", "+\t\t\t\t\tClassInstanceCreation s2 = x.getAST().newClassInstanceCreation();", "+\t\t\t\t\tAnonymousClassDeclaration s3 = x.getAST().newAnonymousClassDeclaration();", "+\t\t\t\t\tMethodDeclaration s4 = x.getAST().newMethodDeclaration();", "+\t\t\t\t\tBlock s5 = x.getAST().newBlock();", "+\t\t\t\t\tVariableDeclarationFragment s6 = x.getAST().newVariableDeclarationFragment();", "+\t\t\t\t\tVariableDeclarationStatement s7 = x.getAST().newVariableDeclarationStatement(s6);", "+\t\t\t\t\ts1.setValue(s2);", "+\t\t\t\t\ts2.setAnonymousClassDeclaration(s3);", "+\t\t\t\t\ts3.bodyDeclarations().add(s4);", "+\t\t\t\t\ts4.setBody(s5);", "+\t\t\t\t\ts5.statements().add(s7);", "+\t\t\t\t\ts7.modifiers().add(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tVariableDeclarationStatement s7 = (VariableDeclarationStatement) x.getParent();", "+\t\t\t\t\ts7.modifiers().remove(x);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t", "+\t\t\t// check that getModifiers() tracks changes to modifiers()", "+\t\t\tx.modifiers().clear();", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\tModifier[] allMods = allModifiers();", "+\t\t\t// one at a time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == allMods[i].getKeyword().toFlagValue());", "+\t\t\t\tx.modifiers().remove(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\t}", "+\t\t\t// all at same time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t}", "+\t\t\tint flags  = x.getModifiers();", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tassertTrue((flags & allMods[i].getKeyword().toFlagValue()) != 0);", "+\t\t\t}", "-\t", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7eb0b9817bd73a8992e76ab846e5e7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 206, "signatureBeforeChange": "\t \t \tpublic void testSingleVariableDeclaration()", "signatureAfterChange": "\t\t \t \tpublic void testSingleVariableDeclaration()", "diff": ["+\t", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t\tassertTrue(x.isVariableArity() == false);", "+\t\t}", "-\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "-\t\t\t| Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL", "-\t\t\t| Modifier.TRANSIENT | Modifier.VOLATILE;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "+\t\t\t\t| Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL", "+\t\t\t\t| Modifier.TRANSIENT | Modifier.VOLATILE;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setVariableArity(true);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.isVariableArity() == true);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setVariableArity(false);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.isVariableArity() == false);", "+\t\t}", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.modifiers(), new Property(\"Modifiers\", true, ExtendedModifier.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tModifier result = targetAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\tTypeDeclaration pd = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\tpd.modifiers().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tSingleMemberAnnotation s1 = x.getAST().newSingleMemberAnnotation();", "+\t\t\t\t\tClassInstanceCreation s2 = x.getAST().newClassInstanceCreation();", "+\t\t\t\t\tAnonymousClassDeclaration s3 = x.getAST().newAnonymousClassDeclaration();", "+\t\t\t\t\tMethodDeclaration s4 = x.getAST().newMethodDeclaration();", "+\t\t\t\t\tSingleVariableDeclaration s5 = x.getAST().newSingleVariableDeclaration();", "+\t\t\t\t\ts1.setValue(s2);", "+\t\t\t\t\ts2.setAnonymousClassDeclaration(s3);", "+\t\t\t\t\ts3.bodyDeclarations().add(s4);", "+\t\t\t\t\ts4.parameters().add(s5);", "+\t\t\t\t\ts5.modifiers().add(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tSingleVariableDeclaration s5 = (SingleVariableDeclaration) x.getParent();", "+\t\t\t\t\ts5.modifiers().remove(x);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t", "+\t\t\t// check that getModifiers() tracks changes to modifiers()", "+\t\t\tx.modifiers().clear();", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\tModifier[] allMods = allModifiers();", "+\t\t\t// one at a time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == allMods[i].getKeyword().toFlagValue());", "+\t\t\t\tx.modifiers().remove(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\t}", "+\t\t\t// all at same time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t}", "+\t\t\tint flags  = x.getModifiers();", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tassertTrue((flags & allMods[i].getKeyword().toFlagValue()) != 0);", "+\t\t\t}", "+\t\t}"]}], "num": 29901}
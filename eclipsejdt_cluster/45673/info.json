{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cef577f7471b71010d419e37e4ca3fe", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ac8e902a72b8657e8e3e99f75704f97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "e05eed8d28ae76461822d5820ab4d1079041229c", "commitAfterChange": "eed1a08cebbf98096012b816207df007b92ad038", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["+\t", "+\t// Common test suites", "-//\tstandardTests.addAll(JavadocTest.allTestClasses);", "+\t// Tests to run when compliance is greater than 1.3", "+\tArrayList since_1_4 = new ArrayList();", "+\tsince_1_4.add(AssertionTest.class);", "+", "+\t// Tests to run when compliance is greater than 1.4", "+\tArrayList since_1_5 = new ArrayList();", "+\tsince_1_5.addAll(RunComparableTests.ALL_CLASSES);", "+\tsince_1_5.add(ClassFileReaderTest_1_5.class);", "+\tsince_1_5.add(GenericTypeSignatureTest.class);", "+\tsince_1_5.add(InternalHexFloatTest.class);", "+\tsince_1_5.add(JavadocTest_1_5.class);", "+\tsince_1_5.add(BatchCompilerTest.class);", "+\tsince_1_5.add(ExternalizeStringLiterals15Test.class);", "+\tsince_1_5.add(Deprecated15Test.class);", "+", "+\t// Tests to run when compliance is greater than 1.5", "+\tArrayList since_1_6 = new ArrayList();", "+\tsince_1_6.add(StackMapAttributeTest.class);", "+", "+\t// Build final test suite", "-\t\ttests_1_4.add(AssertionTest.class);", "+\t\ttests_1_4.addAll(since_1_4);", "-\t\ttests_1_5.addAll(RunComparableTests.ALL_CLASSES);", "-\t\ttests_1_5.add(AssertionTest.class);", "-\t\ttests_1_5.add(ClassFileReaderTest_1_5.class);", "-\t\ttests_1_5.add(GenericTypeSignatureTest.class);", "-\t\ttests_1_5.add(InternalHexFloatTest.class);", "-\t\ttests_1_5.add(JavadocTest_1_5.class);", "-\t\ttests_1_5.add(BatchCompilerTest.class);", "-\t\ttests_1_5.add(ExternalizeStringLiterals15Test.class);", "-\t\ttests_1_5.add(Deprecated15Test.class);", "+\t\ttests_1_5.addAll(since_1_4);", "+\t\ttests_1_5.addAll(since_1_5);", "-\t\ttests_1_6.addAll(RunComparableTests.ALL_CLASSES);", "-\t\ttests_1_6.add(AssertionTest.class);", "-\t\ttests_1_6.add(ClassFileReaderTest_1_5.class);", "-\t\ttests_1_6.add(GenericTypeSignatureTest.class);", "-\t\ttests_1_6.add(InternalHexFloatTest.class);", "-\t\ttests_1_6.add(JavadocTest_1_5.class);", "-\t\ttests_1_6.add(BatchCompilerTest.class);", "-\t\ttests_1_6.add(ExternalizeStringLiterals15Test.class);", "-\t\ttests_1_6.add(StackMapAttributeTest.class);", "+\t\ttests_1_6.addAll(since_1_4);", "+\t\ttests_1_6.addAll(since_1_5);", "+\t\ttests_1_6.addAll(since_1_6);", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_7) != 0) {", "+\t\tArrayList tests_1_7 = (ArrayList)standardTests.clone();", "+\t\ttests_1_7.addAll(since_1_4);", "+\t\ttests_1_7.addAll(since_1_5);", "+\t\ttests_1_7.addAll(since_1_6);", "+\t\t// Reset forgotten subsets tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS= null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t\tTestCase.RUN_ONLY_ID = null;", "+\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_7, tests_1_7));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de92237d2da5d2b26ec29d6974737116", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java", "commitBeforeChange": "e05eed8d28ae76461822d5820ab4d1079041229c", "commitAfterChange": "eed1a08cebbf98096012b816207df007b92ad038", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["-\t", "-\tpublic static Test suite() {", "-\t\tArrayList testClasses = new ArrayList();", "-", "-\t\ttestClasses.addAll(RunCompletionParserTests.TEST_CLASSES);", "-\t\t", "-\t\ttestClasses.add(ExplicitConstructorInvocationSelectionTest.class);", "-\t\ttestClasses.add(SelectionTest.class);", "-\t\ttestClasses.add(SelectionTest2.class);", "-\t\ttestClasses.add(SelectionJavadocTest.class);", "-\t\t", "-\t\ttestClasses.add(DietRecoveryTest.class);", "-\t\ttestClasses.add(StatementRecoveryTest.class);", "-\t\t", "-\t\t/* source element parser tests */", "-\t\ttestClasses.add(SourceElementParserTest.class);", "-", "-\t\t/* document element parser tests */", "-\t\ttestClasses.add(DocumentElementParserTest.class);", "-", "-\t\t/* syntax error diagnosis tests */", "-\t\ttestClasses.add(SyntaxErrorTest.class);", "-\t\ttestClasses.add(DualParseSyntaxErrorTest.class);", "-\t\ttestClasses.add(ParserTest.class);", "-\t\ttestClasses.add(ComplianceDiagnoseTest.class);", "-\t\t", "-\t\tTestSuite all = new TestSuite(TestAll.class.getName());", "-\t\tint possibleComplianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "-\t\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_3) != 0) {", "-\t\t\tArrayList tests_1_3 = (ArrayList)testClasses.clone();", "-\t\t\t// Reset forgotten subsets tests", "-\t\t\tTestCase.TESTS_PREFIX = null;", "-\t\t\tTestCase.TESTS_NAMES = null;", "-\t\t\tTestCase.TESTS_NUMBERS= null;", "-\t\t\tTestCase.TESTS_RANGE = null;", "-\t\t\tTestCase.RUN_ONLY_ID = null;", "-\t\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_3, tests_1_3));", "-\t\t}", "-\t\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_4) != 0) {", "-\t\t\tArrayList tests_1_4 = (ArrayList)testClasses.clone();", "-\t\t\t// Reset forgotten subsets tests", "-\t\t\tTestCase.TESTS_PREFIX = null;", "-\t\t\tTestCase.TESTS_NAMES = null;", "-\t\t\tTestCase.TESTS_NUMBERS= null;", "-\t\t\tTestCase.TESTS_RANGE = null;", "-\t\t\tTestCase.RUN_ONLY_ID = null;", "-\t\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_4, tests_1_4));", "-\t\t}", "-\t\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_5) != 0) {", "-\t\t\tArrayList tests_1_5 = (ArrayList)testClasses.clone();", "-\t\t\t/* completion tests */", "-\t\t\ttests_1_5.addAll(RunCompletionParserTests.TEST_CLASSES_1_5);", "-\t\t\t/* selection tests */", "-\t\t\ttests_1_5.add(GenericsSelectionTest.class);", "-\t\t\ttests_1_5.add(AnnotationSelectionTest.class);", "-\t\t\ttests_1_5.add(EnumSelectionTest.class);", "-\t\t\t/* recovery tests */", "-\t\t\ttests_1_5.add(GenericDietRecoveryTest.class);", "-\t\t\ttests_1_5.add(EnumDietRecoveryTest.class);", "-\t\t\ttests_1_5.add(AnnotationDietRecoveryTest.class);", "-\t\t\ttests_1_5.add(StatementRecoveryTest_1_5.class);", "-\t\t\t// Reset forgotten subsets tests", "-\t\t\tTestCase.TESTS_PREFIX = null;", "-\t\t\tTestCase.TESTS_NAMES = null;", "-\t\t\tTestCase.TESTS_NUMBERS= null;", "-\t\t\tTestCase.TESTS_RANGE = null;", "-\t\t\tTestCase.RUN_ONLY_ID = null;", "-\t\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_5, tests_1_5));", "-\t\t}", "-\t\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_6) != 0) {", "-\t\t\tArrayList tests_1_6 = (ArrayList)testClasses.clone();", "-\t\t\t/* completion tests */", "-\t\t\ttests_1_6.addAll(RunCompletionParserTests.TEST_CLASSES_1_5);", "-\t\t\t/* selection tests */", "-\t\t\ttests_1_6.add(GenericsSelectionTest.class);", "-\t\t\ttests_1_6.add(AnnotationSelectionTest.class);", "-\t\t\ttests_1_6.add(EnumSelectionTest.class);", "-\t\t\t/* recovery tests */", "-\t\t\ttests_1_6.add(GenericDietRecoveryTest.class);", "-\t\t\ttests_1_6.add(EnumDietRecoveryTest.class);", "-\t\t\ttests_1_6.add(AnnotationDietRecoveryTest.class);", "-\t\t\ttests_1_6.add(StatementRecoveryTest_1_5.class);", "-\t\t\t// Reset forgotten subsets tests", "-\t\t\tTestCase.TESTS_PREFIX = null;", "-\t\t\tTestCase.TESTS_NAMES = null;", "-\t\t\tTestCase.TESTS_NUMBERS= null;", "-\t\t\tTestCase.TESTS_RANGE = null;", "-\t\t\tTestCase.RUN_ONLY_ID = null;", "-\t\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_6, tests_1_6));", "-\t\t}", "-", "-\t\treturn all;", "+", "+public static Test suite() {", "+\tArrayList testClasses = new ArrayList();", "+", "+\t/* completion tests */", "+\ttestClasses.addAll(RunCompletionParserTests.TEST_CLASSES);", "+\t", "+\t/* selection tests */", "+\ttestClasses.add(ExplicitConstructorInvocationSelectionTest.class);", "+\ttestClasses.add(SelectionTest.class);", "+\ttestClasses.add(SelectionTest2.class);", "+\ttestClasses.add(SelectionJavadocTest.class);", "+\t", "+\t/* recovery tests */", "+\ttestClasses.add(DietRecoveryTest.class);", "+\ttestClasses.add(StatementRecoveryTest.class);", "+\t", "+\t/* source element parser tests */", "+\ttestClasses.add(SourceElementParserTest.class);", "+", "+\t/* document element parser tests */", "+\ttestClasses.add(DocumentElementParserTest.class);", "+", "+\t/* syntax error diagnosis tests */", "+\ttestClasses.add(SyntaxErrorTest.class);", "+\ttestClasses.add(DualParseSyntaxErrorTest.class);", "+\ttestClasses.add(ParserTest.class);", "+\ttestClasses.add(ComplianceDiagnoseTest.class);", "+\t", "+\tTestSuite all = new TestSuite(TestAll.class.getName());", "+\tint possibleComplianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_3) != 0) {", "+\t\tArrayList tests_1_3 = (ArrayList)testClasses.clone();", "+\t\t// Reset forgotten subsets tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS= null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t\tTestCase.RUN_ONLY_ID = null;", "+\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_3, tests_1_3));", "+\t}", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_4) != 0) {", "+\t\tArrayList tests_1_4 = (ArrayList)testClasses.clone();", "+\t\t// Reset forgotten subsets tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS= null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t\tTestCase.RUN_ONLY_ID = null;", "+\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_4, tests_1_4));", "+\t}", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_5) != 0) {", "+\t\tArrayList tests_1_5 = (ArrayList)testClasses.clone();", "+\t\ttests_1_5.addAll(TEST_CLASSES_1_5);", "+\t\t// Reset forgotten subsets tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS= null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t\tTestCase.RUN_ONLY_ID = null;", "+\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_5, tests_1_5));", "+\t}", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_6) != 0) {", "+\t\tArrayList tests_1_6 = (ArrayList)testClasses.clone();", "+\t\ttests_1_6.addAll(TEST_CLASSES_1_5);", "+\t\t// Reset forgotten subsets tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS= null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t\tTestCase.RUN_ONLY_ID = null;", "+\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_6, tests_1_6));", "+\t}", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_7) != 0) {", "+\t\tArrayList tests_1_7 = (ArrayList)testClasses.clone();", "+\t\ttests_1_7.addAll(TEST_CLASSES_1_5);", "+\t\t// Reset forgotten subsets tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS= null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t\tTestCase.RUN_ONLY_ID = null;", "+\t\tall.addTest(AbstractCompilerTest.buildComplianceTestSuite(AbstractCompilerTest.COMPLIANCE_1_7, tests_1_7));", "+\t}", "+", "+\treturn all;", "+}"]}], "num": 45673}
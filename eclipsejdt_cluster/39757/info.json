{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58647347d330f297f6aedff7a093b397", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "064c03397516c9369ad0166ef911b843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "7ed8fb3f335f5407b01a590a0c668733ebc19aa6", "commitAfterChange": "3b0a2063dbdc61567393530ebaab7037ae911123", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean cacheDocNumbers) throws IOException", "signatureAfterChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean cacheDocNumbers) throws IOException {", "+private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException {", "-\t\tif (cacheDocNumbers)", "+\t\tif (readDocNumbers)", "+\t\tint largeArraySize = 256;", "-\t\t\tif (arrayOffset > 0) {", "+\t\t\t// if arrayOffset is:", "+\t\t\t//\t\t<= 0 then the array size == 1 with the value -> -arrayOffset", "+\t\t\t//\t\t> 1 & < 256 then the size of the array is > 1 & < 256, the document array follows immediately", "+\t\t\t//\t\t256 if the array size >= 256 followed by another int which is the offset to the array (written prior to the table)", "+\t\t\tif (arrayOffset <= 0) {", "+\t\t\t\tcategoryTable.put(word, new int[] {-arrayOffset}); // store 1 element array by negating documentNumber", "+\t\t\t} else if (arrayOffset < largeArraySize) {", "+\t\t\t\tcategoryTable.put(word, readDocumentArray(stream, arrayOffset)); // read in-lined array providing size", "+\t\t\t} else {", "+\t\t\t\tarrayOffset = stream.readInt(); // read actual offset", "-\t\t\t} else {", "-\t\t\t\tcategoryTable.put(word, new int[] {-arrayOffset}); // stored a 1 element array by negating the documentNumber", "-\t\t\t\tcategoryTable.put(matchingWords[i], readDocumentArray(stream));", "+\t\t\t\tcategoryTable.put(matchingWords[i], readDocumentArray(stream, stream.readInt()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cb9de7307e4885c589aca6cb816123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "commitAfterChange": "b1617566bbecda597db8e35043fbdcfac0211c24", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "signatureAfterChange": " private synchronized CategoryTable readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException {", "+private synchronized CategoryTable readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException {", "-\t\tHashtableOfObject cachedTable = (HashtableOfObject) this.categoryTables.get(categoryName);", "+\t\tCategoryTable cachedTable = (CategoryTable) this.categoryTables.get(categoryName);", "-\tHashtableOfObject categoryTable = null;", "+\tCategoryTable categoryTable = null;", "-\t\t\tcategoryTable = new HashtableOfObject(size);", "+\t\t\tcategoryTable = new CategoryTable(size);", "-\t\t\t\tcategoryTable.put(word, new int[] {-arrayOffset}); // store 1 element array by negating documentNumber", "+\t\t\t\tcategoryTable.putUnsafely(word, new int[] {-arrayOffset}); // store 1 element array by negating documentNumber", "-\t\t\t\tcategoryTable.put(word, readStreamDocumentArray(stream, arrayOffset)); // read in-lined array providing size", "+\t\t\t\tcategoryTable.putUnsafely(word, readStreamDocumentArray(stream, arrayOffset)); // read in-lined array providing size", "-\t\t\t\tcategoryTable.put(word, new Integer(arrayOffset)); // offset to array in the file", "+\t\t\t\tcategoryTable.putUnsafely(word, new Integer(arrayOffset)); // offset to array in the file"]}], "num": 39757}
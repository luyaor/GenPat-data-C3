{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f69be859acc4c8ac8f81c2d252c1b55f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f41b58ee8ab97511bf1a08c5a12f7e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "cdf4427e144add1a36f3939b37283556991d4db8", "commitAfterChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["-\t\t\t\t\treturn Util.bind(\"element.doesNotExist\",((JavaElement)fElements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"element.doesNotExist\",((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"status.evaluationError\", fString); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"status.evaluationError\", string); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"status.invalidDestination\", ((JavaElement)fElements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"status.invalidDestination\", ((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t\t\tfor (int i= 0; i < fElements.length; i++) {", "+\t\t\t\t\tfor (int i= 0; i < elements.length; i++) {", "-\t\t\t\t\t\tbuff.append(((JavaElement)fElements[i]).toStringWithAncestors());", "+\t\t\t\t\t\tbuff.append(((JavaElement)elements[i]).toStringWithAncestors());", "-\t\t\t\t\treturn Util.bind(\"status.invalidName\", fString); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"status.invalidName\", string); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"status.invalidPackage\", fString); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"status.invalidPackage\", string); //$NON-NLS-1$", "-\t\t\t\t\tif (fString != null) {", "-\t\t\t\t\t\treturn fString;", "+\t\t\t\t\tif (string != null) {", "+\t\t\t\t\t\treturn string;", "-\t\t\t\t\treturn Util.bind(\"status.invalidProject\", fString); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"status.invalidProject\", string); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"status.invalidResource\", fString); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"status.invalidResource\", string); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"status.invalidResourceType\", fString); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"status.invalidResourceType\", string); //$NON-NLS-1$", "-\t\t\t\t\tif (fString != null) {", "-\t\t\t\t\t\treturn Util.bind(\"status.invalidSibling\", fString); //$NON-NLS-1$", "+\t\t\t\t\tif (string != null) {", "+\t\t\t\t\t\treturn Util.bind(\"status.invalidSibling\", string); //$NON-NLS-1$", "-\t\t\t\t\t\treturn Util.bind(\"status.invalidSibling\", ((JavaElement)fElements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\t\treturn Util.bind(\"status.invalidSibling\", ((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t\t\tif (fElements != null && fElements.length > 0) {", "-\t\t\t\t\t\tIJavaElement element = fElements[0];", "+\t\t\t\t\tif (elements != null && elements.length > 0) {", "+\t\t\t\t\t\tIJavaElement element = elements[0];", "-\t\t\t\t\tif (fString != null) {", "-\t\t\t\t\t\treturn fString;", "+\t\t\t\t\tif (string != null) {", "+\t\t\t\t\t\treturn string;", "-\t\t\t\t\treturn Util.bind(\"operation.pathOutsideProject\", fString, ((JavaElement)fElements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"operation.pathOutsideProject\", string, ((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t\t\tIJavaElement element = fElements[0];", "+\t\t\t\t\tIJavaElement element = elements[0];", "-\t\t\t\t\tIPath path = this.fPath;", "-\t\t\t\t\tIJavaProject javaProject = (IJavaProject)fElements[0];", "-\t\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "+\t\t\t\t\tIJavaProject javaProject = (IJavaProject)elements[0];", "+\t\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(this.path.segment(0));", "-\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "+\t\t\t\t\tif (initializer != null) description = initializer.getDescription(this.path, javaProject);", "-\t\t\t\t\tpath = this.fPath;", "-\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tjavaProject = (IJavaProject)elements[0];", "-\t\t\t\t\tpath = this.fPath;", "-\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tjavaProject = (IJavaProject)elements[0];", "-\t\t\t\t\tpath = this.fPath;", "-\t\t\t\t\tpath = this.fPath;", "+\t\t\tcase INCOMPATIBLE_JDK_LEVEL:", "+\t\t\t\t\tjavaProject = (IJavaProject)elements[0];", "+\t\t\t\t\treturn Util.bind(\"classpath.incompatibleLibraryJDKLevel\", new String[]{\t//$NON-NLS-1$", "+\t\t\t\t\t\tjavaProject.getElementName(), ", "+\t\t\t\t\t\tjavaProject.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true), ", "+\t\t\t\t\t\tpath.makeRelative().toString(),", "+\t\t\t\t\t\tstring,", "+\t\t\t\t\t});", "-\t\t\tif (fString != null) {", "-\t\t\t\treturn fString;", "+\t\t\tif (string != null) {", "+\t\t\t\treturn string;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "752b67db1ffcfb94e7430f28ecbfbb74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "cdf4427e144add1a36f3939b37283556991d4db8", "commitAfterChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["-\tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment){", "+\tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment){", "-\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(path, javaProject);", "+\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(path, project);", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND, javaProject, path);", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND, project, path);", "-\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY, javaProject, path);", "+\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY, project, path);", "-\t\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(javaProject, containerEntry, checkSourceAttachment);", "+\t\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(project, containerEntry, checkSourceAttachment);", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, javaProject, path);", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, project, path);", "-\t\t\t\t\treturn validateClasspathEntry(javaProject, entry, checkSourceAttachment);", "+\t\t\t\t\treturn validateClasspathEntry(project, entry, checkSourceAttachment);", "+\t\t\t\t\tif (target != null && project.getOption(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, true) != JavaCore.IGNORE) {", "+\t\t\t\t\t\tlong projectTargetJDK = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true));", "+\t\t\t\t\t\tlong libraryJDK = Util.getJdkLevel(target);", "+\t\t\t\t\t\tif (libraryJDK != 0 && libraryJDK > projectTargetJDK) {", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL, project, path, CompilerOptions.versionFromJdkLevel(libraryJDK)); ", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tIProject project = workspaceRoot.getProject(path.segment(0));", "+\t\t\t\t\tIProject prereqProjectRsc = workspaceRoot.getProject(path.segment(0));", "+\t\t\t\t\tIJavaProject prereqProject = JavaCore.create(prereqProjectRsc);", "-\t\t\t\t\t\tif (!project.exists() || !project.hasNature(JavaCore.NATURE_ID)){", "+\t\t\t\t\t\tif (!prereqProjectRsc.exists() || !prereqProjectRsc.hasNature(JavaCore.NATURE_ID)){", "-\t\t\t\t\t\tif (!project.isOpen()){", "+\t\t\t\t\t\tif (!prereqProjectRsc.isOpen()){", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (project.getOption(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, true) != JavaCore.IGNORE) {", "+\t\t\t\t\t\t\tlong projectTargetJDK = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true));", "+\t\t\t\t\t\t\tlong prereqProjectTargetJDK = CompilerOptions.versionToJdkLevel(prereqProject.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true));", "+\t\t\t\t\t\t\tif (prereqProjectTargetJDK > projectTargetJDK) {", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL, project, path, CompilerOptions.versionFromJdkLevel(prereqProjectTargetJDK)); ", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t&& JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "+\t\t\t\t\t\t&& JavaCore.DISABLED.equals(project.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "-\t\t\t\tif (entry.getOutputLocation() != null && JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "+\t\t\t\tif (entry.getOutputLocation() != null && JavaCore.DISABLED.equals(project.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "-\t\t\t\t\tIPath projectPath= javaProject.getProject().getFullPath();", "+\t\t\t\t\tIPath projectPath= project.getProject().getFullPath();"]}], "num": 67409}
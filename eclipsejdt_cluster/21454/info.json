{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "551776aa809c2f0f8405f6c900ffdacc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604bf8aa1b98e92d58ff0a7a40f4a801", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "6c9d3461652e1b0a1c076bd07fea25ea7241dc4b", "commitAfterChange": "fc3823ac5e20f18e24acb3b991589cbc8e132c53", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public static ClasspathLocation[] computeLocations(IJavaProject project, boolean isUsingSourceFolders, ObjectVector sourceFolders, LookupTable prereqOutputFolders) throws JavaModelException", "signatureAfterChange": "\r public static ClasspathLocation[] computeLocations(\r \tIWorkspaceRoot workspaceRoot,\r \tIJavaProject javaProject,\r \tString outputFolderLocation,\r \tArrayList sourceFolders,\r \tLookupTable prereqOutputFolders) throws JavaModelException", "diff": ["-\t*/\r", "-public static ClasspathLocation[] computeLocations(IJavaProject project, boolean isUsingSourceFolders, ObjectVector sourceFolders, LookupTable prereqOutputFolders) throws JavaModelException {\r", "+*/\r", "+public static ClasspathLocation[] computeLocations(\r", "+\tIWorkspaceRoot workspaceRoot,\r", "+\tIJavaProject javaProject,\r", "+\tString outputFolderLocation,\r", "+\tArrayList sourceFolders,\r", "+\tLookupTable prereqOutputFolders) throws JavaModelException {\r", "-\tIClasspathEntry[] classpathEntries = ((JavaProject)project).getExpandedClasspath(true);\r", "+\tIClasspathEntry[] classpathEntries = ((JavaProject) javaProject).getExpandedClasspath(true);\r", "-\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\r", "-\tIPath projectPath = project.getProject().getFullPath();\r", "-\tIResource outputFolder = workspaceRoot.findMember(project.getOutputLocation());\r", "-\t\r", "-\t\t\t\t\tif (!(resource instanceof IContainer)) continue nextEntry;\r", "-\t\t\t\t\tif (outputFolder == null || !outputFolder.exists() || !(outputFolder instanceof IContainer)){\r", "-\t\t\t\t\t\tcontinue nextEntry;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (isUsingSourceFolders){ // sources + binaries mode\r", "-\t\t\t\t\t\tif (sourceFolders != null) sourceFolders.add(resource);\r", "-\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forSourceFolder(\r", "-\t\t\t\t\t\t\tresource.getLocation().toString(),\r", "-\t\t\t\t\t\t\toutputFolder.getLocation().toString());\r", "-\t\t\t\t\t} else { // only consider binaries(once)\r", "-\t\t\t\t\t\tif (firstSourceFolder){\r", "-\t\t\t\t\t\t\tfirstSourceFolder = false;\r", "-\t\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forRequiredProject(outputFolder.getLocation().toString());\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\tif (outputFolderLocation == null || !(resource instanceof IContainer)) continue nextEntry;\r", "+\t\t\t\t\tif (sourceFolders != null) { // normal builder mode\r", "+\t\t\t\t\t\tsourceFolders.add(resource);\r", "+\t\t\t\t\t\tclasspathLocations[cpCount++] =\r", "+\t\t\t\t\t\t\tClasspathLocation.forSourceFolder(resource.getLocation().toString(), outputFolderLocation);\r", "+\t\t\t\t\t} else if (firstSourceFolder) { // add the output folder only once\r", "+\t\t\t\t\t\tfirstSourceFolder = false;\r", "+\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forRequiredProject(outputFolderLocation);\r", "-\t\t\t\t\tif (prereqOutputFolders != null) prereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "+\t\t\t\t\tif (prereqOutputFolders != null)\r", "+\t\t\t\t\t\tprereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "-\tif (cpCount < max) {\r", "+\tif (cpCount < max)\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c74278d9d721ba4ac539be0b76b95b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ac1c76084ee063c5f1c73b186747579a24f2cc96", "commitAfterChange": "a4cdcc787e229b912c4cd3f7bf733e5e5b08d021", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic final Binding getTypeOrPackage(char[][] compoundName)", "signatureAfterChange": " \tpublic final Binding getTypeOrPackage(char[][] compoundName)", "diff": ["-\t\tReferenceBinding qualifiedType = null;", "-", "-\t\tif (typeBinding.isGenericType()) {", "-\t\t\tqualifiedType = this.environment().createRawType(typeBinding, qualifiedType);", "-\t\t} else if (qualifiedType != null) {", "-\t\t\tboolean rawQualified;", "-\t\t\tif ((rawQualified = qualifiedType.isRawType()) && !typeBinding.isStatic()) {", "-\t\t\t\tqualifiedType = this.environment().createRawType((ReferenceBinding)typeBinding.erasure(), qualifiedType);", "-\t\t\t} else if (rawQualified || qualifiedType.isParameterizedType()) {", "-\t\t\t\tqualifiedType = this.environment().createParameterizedType((ReferenceBinding)typeBinding.erasure(), null, qualifiedType);", "-\t\t\t} else {", "-\t\t\t\tqualifiedType = typeBinding;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tqualifiedType = typeBinding;", "-\t\t}", "+\t\tReferenceBinding qualifiedType = (ReferenceBinding) this.environment().convertToRawType(typeBinding);"]}], "num": 21454}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bdbe7b28caf6a0a03787de00a130f8e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c4da61b021e1549701a8f7b38d63609", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope blockScope)", "diff": ["+}", "-\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "-\t\tif (!this.resolvedType.isValidBinding())", "+\tTypeBinding type;", "+\tif ((type = this.resolvedType) != null) { // is a shared type reference which was already resolved", "+\t\tif (!type.isValidBinding())", "-\t\tthis.resolvedType = getTypeBinding(blockScope);", "-\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\ttype = this.resolvedType = getTypeBinding(blockScope);", "+\t\tif (type == null)", "+\t\t\treturn null; // detected cycle while resolving hierarchy", "+\t\tif (!type.isValidBinding()) {", "-\t\tif (isTypeUseDeprecated(this.resolvedType, blockScope)) {", "+\t\tif (isTypeUseDeprecated(type, blockScope)) {", "+\t\t// check raw type", "+\t\tif (type.isArrayType()) {", "+\t\t    TypeBinding leafComponentType = type.leafComponentType();", "+\t\t    if (leafComponentType.isGenericType()) { // raw type", "+\t\t        return this.resolvedType = blockScope.createArrayType(blockScope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "+\t\t    }", "+\t\t} else if (type.isGenericType()) {", "+\t        return this.resolvedType = blockScope.environment().createRawType((ReferenceBinding)type, null); // raw type", "+\t\t}\t\t", "+\t}", "+\treturn this.resolvedType;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f39fd246e8261f7bc26812689a30e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public TypeBinding resolveType(ClassScope classScope)", "signatureAfterChange": " public TypeBinding resolveType(ClassScope classScope)", "diff": ["+}", "+public TypeBinding resolveType(ClassScope classScope) {", "+\t// handle the error here", "+\tthis.constant = NotAConstant;", "+\tTypeBinding type;", "+\tif ((type = this.resolvedType) != null) { // is a shared type reference which was already resolved", "+\t\tif (!type.isValidBinding())", "+\t\t\treturn null; // already reported error", "+\t} else {", "+\t\ttype = this.resolvedType = getTypeBinding(classScope);", "+\t\tif (type == null)", "+\t\t\treturn null; // detected cycle while resolving hierarchy\t\t", "+\t\tif (!type.isValidBinding()) {", "+\t\t\treportInvalidType(classScope);", "+\t\t\treturn null;", "+\t\t}", "+\t\tif (isTypeUseDeprecated(type, classScope)) {", "+\t\t\treportDeprecatedType(classScope);", "+\t\t}", "+\t\t// check raw type", "+\t\tif (type.isArrayType()) {", "+\t\t    TypeBinding leafComponentType = type.leafComponentType();", "+\t\t    if (leafComponentType.isGenericType()) { // raw type", "+\t\t        return this.resolvedType = classScope.createArrayType(classScope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "+\t\t    }", "+\t\t} else if (type.isGenericType()) {", "+\t        return this.resolvedType = classScope.environment().createRawType((ReferenceBinding)type, null); // raw type", "+\t\t}\t\t", "+", "-public TypeBinding resolveType(ClassScope classScope) {", "-\t// handle the error here", "-\tthis.constant = NotAConstant;", "-\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "-\t\tif (!this.resolvedType.isValidBinding())", "-\t\t\treturn null; // already reported error", "-\t} else {", "-\t\tthis.resolvedType = getTypeBinding(classScope);", "-\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\treportInvalidType(classScope);", "-\t\t\treturn null;", "-\t\t}", "-\t\tif (isTypeUseDeprecated(this.resolvedType, classScope)) {", "-\t\t\treportDeprecatedType(classScope);", "-\t\t}", "-\t}", "-\treturn this.resolvedType;"]}], "num": 8452}
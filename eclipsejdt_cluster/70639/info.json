{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f940b712762b5fe511bc179fca05656", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec2c531d0a4949e57573d0dd8c7cc6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java", "commitBeforeChange": "4ab6cc8c24529af798fcb3762ec8aa5f9887812e", "commitAfterChange": "86d04547b51d0677dda29f45b4279354b3702983", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tboolean equalSubtrees(Object other)", "signatureAfterChange": "\r \tpublic boolean subtreeMatch(ASTMatcher matcher, Object other)", "diff": ["-\tboolean equalSubtrees(Object other) {\r", "-\t\tif (!(other instanceof TypeDeclaration)) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t\tTypeDeclaration o = (TypeDeclaration) other;\r", "-\t\treturn \r", "-\t\t\t((getModifiers() == o.getModifiers())\r", "-\t\t\t&& (isInterface() == o.isInterface())\r", "-\t\t\t&& ASTNode.equalNodes(getJavadoc(), o.getJavadoc())\r", "-\t\t\t&& ASTNode.equalNodes(getName(), o.getName())\r", "-\t\t\t&& ASTNode.equalNodes(getSuperclass(), o.getSuperclass())\r", "-\t\t\t&& ASTNode.equalLists(superInterfaces(), o.superInterfaces())\r", "-\t\t\t&& ASTNode.equalLists(bodyDeclarations(), o.bodyDeclarations()));\r", "+\tpublic boolean subtreeMatch(ASTMatcher matcher, Object other) {\r", "+\t\t// dispatch to correct overloaded match method\r", "+\t\treturn matcher.match(this, other);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8e72d228d8131f28496b2b941a6c237", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java", "commitBeforeChange": "4ab6cc8c24529af798fcb3762ec8aa5f9887812e", "commitAfterChange": "86d04547b51d0677dda29f45b4279354b3702983", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tboolean equalSubtrees(Object other)", "signatureAfterChange": "\r \tpublic boolean subtreeMatch(ASTMatcher matcher, Object other)", "diff": ["-\tboolean equalSubtrees(Object other) {\r", "-\t\tif (!(other instanceof MethodDeclaration)) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t\tMethodDeclaration o = (MethodDeclaration) other;\r", "-\t\treturn \r", "-\t\t\t((getModifiers() == o.getModifiers())\r", "-\t\t\t&& (isConstructor() == o.isConstructor())\r", "-\t\t\t&& ASTNode.equalNodes(getJavadoc(), o.getJavadoc())\r", "-\t\t\t&& ASTNode.equalNodes(getReturnType(), o.getReturnType())\r", "-\t\t\t&& ASTNode.equalNodes(getName(), o.getName())\r", "-\t\t\t&& ASTNode.equalLists(parameters(), o.parameters())\r", "-\t\t\t&& ASTNode.equalLists(thrownExceptions(), o.thrownExceptions())\r", "-\t\t\t&& ASTNode.equalNodes(getBody(), o.getBody()));\r", "+\tpublic boolean subtreeMatch(ASTMatcher matcher, Object other) {\r", "+\t\t// dispatch to correct overloaded match method\r", "+\t\treturn matcher.match(this, other);\r"]}], "num": 70639}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f091c6a170ea6ac96dd525887195bb11", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1514ba701a2fdf553e43cfb614e44d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "d1d9c4b9d41b5dee6585f38ec44b96973779f261", "commitAfterChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "signatureAfterChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "diff": ["-\t\t\t\twhile (--count > 0 && areReturnTypesCompatible(first, matchingInherited[count])){/*empty*/}", "+\t\t\t\twhile (--count > 0) {", "+\t\t\t\t\tMethodBinding match = matchingInherited[count];", "+\t\t\t\t\tif (areReturnTypesCompatible(first, match)) continue;", "+\t\t\t\t\t// unrelated interfaces - check to see if return types are compatible", "+\t\t\t\t\tif (first.declaringClass.isInterface() && match.declaringClass.isInterface() && areReturnTypesCompatible(match, first))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7946c4117d2c0ed8181187286e9cbe40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "signatureAfterChange": "  boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod)", "diff": ["-boolean checkInheritedReturnTypes(MethodBinding[] methods, int length) {", "-\tMethodBinding first = methods[0];", "-\tint index = length;", "-\twhile (--index > 0 && areReturnTypesCompatible(first, methods[index])){/*empty*/}", "-\tif (index == 0)", "-\t\treturn true;", "+boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod) {", "+\tif (areReturnTypesCompatible(method, otherMethod)) return true;", "-\t// All inherited methods do NOT have the same vmSignature", "-\tif (this.type.isInterface())", "-\t\tfor (int i = length; --i >= 0;)", "-\t\t\tif (methods[i].declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\t\treturn false; // do not complain since the super interface already got blamed", "-\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\tif (!this.type.isInterface())", "+\t\tif (method.declaringClass.isClass() || !this.type.implementsInterface(method.declaringClass, false))", "+\t\t\tif (otherMethod.declaringClass.isClass() || !this.type.implementsInterface(otherMethod.declaringClass, false))", "+\t\t\t\treturn true; // do not complain since the superclass already got blamed", "+"]}], "num": 34106}
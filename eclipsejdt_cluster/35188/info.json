{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bac0ca5a3d72f70af6aef534e283a0f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2521a6b95f14d360c8ae9da0ba7b99fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "98f970f58fc61208a8cdd52e3b9981ef32c5937b", "commitAfterChange": "29a8044fc706583901ff89364d428dff04f6a567", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate List<AnnotationProcessorFactory> loadFactoryClasses(  \t\t\tFactoryContainer fc, ClassLoader classLoader, IJavaProject jproj ) \t\t\tthrows IOException", "signatureAfterChange": "  \tprivate List<AnnotationProcessorFactory> loadJava5FactoryClasses(  \t\t\tFactoryContainer fc, ClassLoader classLoader, IJavaProject jproj ) \t\t\tthrows IOException", "diff": ["-\tprivate List<AnnotationProcessorFactory> loadFactoryClasses( ", "+\tprivate List<AnnotationProcessorFactory> loadJava5FactoryClasses( ", "-\t\tList<String> factoryNames = fc.getFactoryNames();", "-\t\tList<AnnotationProcessorFactory> factories = new ArrayList<AnnotationProcessorFactory>( factoryNames.size() ); ", "-\t\tfor ( String factoryName : factoryNames )", "+\t\tMap<String, String> factoryNames = fc.getFactoryNames();", "+\t\tList<AnnotationProcessorFactory> factories = new ArrayList<AnnotationProcessorFactory>(); ", "+\t\tfor ( Entry<String, String> entry : factoryNames.entrySet() )", "-\t\t\tAnnotationProcessorFactory factory;", "-\t\t\tif ( fc.getType() == FactoryType.PLUGIN )", "-\t\t\t\tfactory = FactoryPathUtil.getFactoryFromPlugin( factoryName );", "-\t\t\telse", "-\t\t\t\tfactory = loadFactoryFromClassLoader( factoryName, classLoader, jproj );", "-\t\t\t", "-\t\t\tif ( factory != null )", "-\t\t\t\tfactories.add( factory );", "+\t\t\tif (AptPlugin.JAVA5_FACTORY_NAME.equals(entry.getValue())) {", "+\t\t\t\tString factoryName = entry.getKey();", "+\t\t\t\tAnnotationProcessorFactory factory;", "+\t\t\t\tif ( fc.getType() == FactoryType.PLUGIN )", "+\t\t\t\t\tfactory = FactoryPluginManager.getJava5FactoryFromPlugin( factoryName );", "+\t\t\t\telse", "+\t\t\t\t\tfactory = (AnnotationProcessorFactory)loadInstance( factoryName, classLoader, jproj );", "+\t\t\t\t", "+\t\t\t\tif ( factory != null )", "+\t\t\t\t\tfactories.add( factory );", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89457f3226417e0c9786c6926aff436f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "98f970f58fc61208a8cdd52e3b9981ef32c5937b", "commitAfterChange": "29a8044fc706583901ff89364d428dff04f6a567", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate AnnotationProcessorFactory loadFactoryFromClassLoader( String factoryName, ClassLoader cl, IJavaProject jproj )", "signatureAfterChange": " \t \tprivate List<IServiceFactory> loadJava6FactoryClasses(  \t\t\tFactoryContainer fc, ClassLoader classLoader, IJavaProject jproj ) \t\t\tthrows IOException", "diff": ["-\tprivate AnnotationProcessorFactory loadFactoryFromClassLoader( String factoryName, ClassLoader cl, IJavaProject jproj )", "+\tprivate List<IServiceFactory> loadJava6FactoryClasses( ", "+\t\t\tFactoryContainer fc, ClassLoader classLoader, IJavaProject jproj )", "+\t\t\tthrows IOException", "-\t\tAnnotationProcessorFactory f = null;", "-\t\ttry", "+\t\tMap<String, String> factoryNames = fc.getFactoryNames();", "+\t\tList<IServiceFactory> factories = new ArrayList<IServiceFactory>(); ", "+\t\tfor ( Entry<String, String> entry : factoryNames.entrySet() )", "-\t\t\tClass<?> c = cl.loadClass( factoryName );", "-\t\t\tf = (AnnotationProcessorFactory)c.newInstance();", "+\t\t\tif (AptPlugin.JAVA6_FACTORY_NAME.equals(entry.getValue())) {", "+\t\t\t\tString factoryName = entry.getKey();", "+\t\t\t\tIServiceFactory factory = null;", "+\t\t\t\tif ( fc.getType() == FactoryType.PLUGIN ) {", "+\t\t\t\t\tfactory = FactoryPluginManager.getJava6FactoryFromPlugin( factoryName );", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tClass<?> clazz;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tclazz = classLoader.loadClass(factoryName);", "+\t\t\t\t\t\tfactory = new ClassServiceFactory(clazz);", "+\t\t\t\t\t} catch (ClassNotFoundException e) {", "+\t\t\t\t\t\tAptPlugin.log(e, \"Unable to load annotation processor \" + factoryName); //$NON-NLS-1$", "+\t\t\t\t\t\treportFailureToLoadFactory(factoryName, jproj);", "+\t\t\t\t\t} ", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif ( factory != null )", "+\t\t\t\t\tfactories.add( factory );", "+\t\t\t}", "-\t\tcatch( Exception e )", "-\t\t{", "-\t\t\tAptPlugin.log(e, \"Failed to load \" + factoryName); //$NON-NLS-1$", "-\t\t\treportFailureToLoadFactory(factoryName, jproj);", "-\t\t}", "-\t\tcatch ( NoClassDefFoundError ncdfe )", "-\t\t{", "-\t\t\tAptPlugin.log(ncdfe, \"Failed to load \" + factoryName); //$NON-NLS-1$", "-\t\t\treportFailureToLoadFactory(factoryName, jproj);", "-\t\t}", "-\t\treturn f;", "+\t\treturn factories;"]}], "num": 35188}
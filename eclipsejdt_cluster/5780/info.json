{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4684c042a41bab6d79d76e84db0687e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeeb0d7efae4729a80c0570511e291e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "  protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["-\tthis.outputFolder = javaBuilder.outputFolder;", "-\tthis.sourceFolders = javaBuilder.sourceFolders;", "+\tthis.nameEnvironment = javaBuilder.nameEnvironment;", "+\tthis.sourceLocations = this.nameEnvironment.sourceLocations;", "-\t// only perform resource copying if the output location does not match a source folder", "-\t// corresponds to: project == src == bin, or several source folders are contributing resources,", "-\t// but one is the output location too (and would get populated with other source folder resources).", "-\tIPath outputPath = outputFolder.getFullPath();", "-\tint index = sourceFolders.length;", "-\tif (index == 0) {", "-\t\t// handle case of the last source folder is removed... so no source folders exist but the output folder must still be cleaned", "-\t\tthis.hasSeparateOutputFolder = !outputPath.equals(javaBuilder.currentProject.getFullPath());", "-\t} else {", "-\t\tthis.hasSeparateOutputFolder = true;", "-\t\twhile (this.hasSeparateOutputFolder && --index >= 0)", "-\t\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[index].getFullPath());", "-\t}", "-", "-\tthis.nameEnvironment = new NameEnvironment(javaBuilder.classpath);", "-\tthis.compiler = newCompiler(javaBuilder.currentProject);", "+\tthis.encoding = javaBuilder.javaProject.getOption(JavaCore.CORE_ENCODING, true);", "+\tthis.compiler = newCompiler();", "-\tthis.problemTypeLocations = new ArrayList(3);", "+\tthis.problemSourceFiles = new ArrayList(3);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a999b6f863ba9bb0cd188abdcf59ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "f7e03b51cbcdb65febacaecaf401f7cd7093398d", "commitAfterChange": "b41a5de95343375633384e6b1b331ea9265a7fc6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["+}", "-\t\t// must check each parameter pair to see if you have raw to parameterized conversions", "-\t\tTypeBinding[] currentArgs = currentMethod.parameters;", "-\t\tTypeBinding[] inheritedArgs = inheritedMethod.parameters;", "-\t\tif (currentArgs != inheritedArgs) {", "-\t\t\tfor (int j = 0, k = currentArgs.length; j < k; j++) {", "-\t\t\t\tTypeBinding currentArg = currentArgs[j].leafComponentType();", "-\t\t\t\tTypeBinding inheritedArg = inheritedArgs[j].leafComponentType();", "-\t\t\t\tif (currentArg != inheritedArg) {", "-\t\t\t\t\tif (currentArg.isParameterizedType() && hasBoundedParameters((ParameterizedTypeBinding) currentArg)) {", "-\t\t\t\t\t\tif (inheritedArg.isRawType()) {", "-//\t\t\t\t\t\tif (inheritedArg.isRawType() || !inheritedArg.isEquivalentTo(currentArg)) {", "-\t\t\t\t\t\t\tthis.problemReporter(currentMethod).methodNameClash(currentMethod, inheritedMethod);", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif (checkForNameClash(currentMethod, inheritedMethod)) {", "+\t\t\tthis.problemReporter(currentMethod).methodNameClash(currentMethod, inheritedMethod);", "+\t\t\tcontinue nextMethod;"]}], "num": 5780}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71823d45cc239e0af6b304b4ab6d1ed9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2135c80dc7e0591e5b0aa20b30cc85da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "9b26efa81a6e381ed8487b9883db0ad019b470e0", "commitAfterChange": "f8b4a09010dbba905cde5c02b5290761440c6661", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tpublic String getKey()", "signatureAfterChange": "\r \tpublic String getKey()", "diff": ["-\t\treturn null;\r", "+\t\tStringBuffer buffer = new StringBuffer();\r", "+\t\tbuffer.append(getReturnType().getKey());\r", "+\t\tif (!isConstructor()) {\r", "+\t\t\tbuffer.append(this.getName());\r", "+\t\t\tbuffer.append('/');\r", "+\t\t}\r", "+\t\tbuffer.append(this.getDeclaringClass().getKey());\r", "+\t\tITypeBinding[] parameters = getParameterTypes();\r", "+\t\tbuffer.append('(');\r", "+\t\tfor (int i = 0, max = parameters.length; i < max; i++) {\r", "+\t\t\tbuffer.append(parameters[i].getKey());\r", "+\t\t}\r", "+\t\tbuffer.append(')');\r", "+\t\tITypeBinding[] thrownExceptions = getExceptionTypes();\r", "+\t\tfor (int i = 0, max = thrownExceptions.length; i < max; i++) {\r", "+\t\t\tbuffer.append(thrownExceptions[i].getKey());\r", "+\t\t}\r", "+\t\treturn buffer.toString();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfcf0bca17c98f33fd9875ff77ac14ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "e0259efe596fb3e88871acf616821dc2f984a25a", "commitAfterChange": "6ccbe6e7a1eb8a287ad2e183536fbec86fa90b93", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\tbuffer.append(_returnType.getKey());", "+\t\t\tif (_returnType.isTypeVariable()) {", "+\t\t\t\tbuffer.append(_returnType.getQualifiedName());", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(_returnType.getKey());", "+\t\t\t}", "-\t\t\tITypeBinding parameter = parameters[i];", "+\t\t\tfinal ITypeBinding parameter = parameters[i];", "-\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\tif (parameter.isTypeVariable()) {", "+\t\t\t\t\tbuffer.append(parameter.getQualifiedName());", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\t}", "-\t\t\tif (thrownExceptions[i] != null) {", "-\t\t\t\tbuffer.append(thrownExceptions[i].getKey());", "+\t\t\tfinal ITypeBinding thrownException = thrownExceptions[i];", "+\t\t\tif (thrownException != null) {", "+\t\t\t\tif (thrownException.isTypeVariable()) {", "+\t\t\t\t\tbuffer.append(thrownException.getQualifiedName());\t\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append(thrownException.getKey());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e138effe53656fd0a26ee98dbdf16795", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "1fa0b970f57a68665cdfde955081db2621c42276", "commitAfterChange": "be945f896dfe94a8d4114819ea1c2afbe987ee6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["+\t\t\t\t} else if (_returnType.isArray() && _returnType.getElementType().isTypeVariable()) {", "+\t\t\t\t\tint dimensions = _returnType.getDimensions();", "+\t\t\t\t\tbuffer.append(_returnType.getElementType().getQualifiedName());", "+\t\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t}", "+\t\t\t\t\t} else if (parameter.isArray() && parameter.getElementType().isTypeVariable()) {", "+\t\t\t\t\t\tint dimensions = parameter.getDimensions();", "+\t\t\t\t\t\tbuffer.append(parameter.getElementType().getQualifiedName());", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (thrownException.isArray() && thrownException.getElementType().isTypeVariable()) {", "+\t\t\t\t\t\tint dimensions = thrownException.getDimensions();", "+\t\t\t\t\t\tbuffer.append(thrownException.getElementType().getQualifiedName());", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}"]}], "num": 48963}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f1ee886ba54c59460630c93dbff8526", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05b207d63f32c54670f79b45ad41a8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "7560640d61f8673c0bdcc6e3d95d6a5f677e0190", "commitAfterChange": "7fbc4da79ec0a9ef14be7ae27876f0928711c53f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException", "signatureAfterChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException", "diff": ["-\t\treturn internalRewriteAST(content, lineInfo, lineDelim, options, rootNode);", "+\t\tASTNode astRoot= rootNode.getRoot();", "+\t\tList commentNodes= astRoot instanceof CompilationUnit ? ((CompilationUnit) astRoot).getCommentList() : null;", "+\t\treturn internalRewriteAST(content, lineInfo, lineDelim, commentNodes, options, rootNode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b9325b2d853963b9eb773c0ba014e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "commitAfterChange": "c611850252ecccb24f660547467e0d555dd4fb70", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveType(Type type)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveType(Type type)", "diff": ["+\t\t\t\t\tboolean isVarargs = typeReference.isVarargs();", "-\t\t\t\t\t\treturn getTypeBinding(arrayBinding);", "-\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding)));", "+\t\t\t\t\t\treturn getTypeBinding(arrayBinding); // reuse.", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding, isVarargs)));", "+\t\t\t\t\tboolean isVarargs = node instanceof TypeReference && ((TypeReference) node).isVarargs();", "-\t\t\t\t\t\treturn getTypeBinding(arrayBinding);", "-\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding)));", "+\t\t\t\t\t\treturn getTypeBinding(arrayBinding); // reuse", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding, isVarargs)));"]}], "num": 62738}
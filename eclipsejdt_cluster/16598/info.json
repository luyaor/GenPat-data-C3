{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fa8c1a0811cc1a8a78c58a3035ded86", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57169e9ed70d489e7a1d848f0463d902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "da50a11f1737dbee3925e1da64ad7f9cbaff2e84", "commitAfterChange": "99342a278896e2f8caf142911ce817f7cc97d106", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "diff": ["+\t\t\t\t\t\t\t\r", "+\t\t\t\t\tif (method.declaringClass.isInterface())\r", "+\t\t\t\t\t\tif(otherMethod\r", "+\t\t\t\t\t\t\t.declaringClass\r", "+\t\t\t\t\t\t\t.implementsInterface(method.declaringClass,true))\r", "+\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\tcompletion.append(method.returnType.sourceName());\r", "+\t\t\t\tchar[] returnPackageName = method.returnType.qualifiedPackageName();\r", "+\t\t\t\tchar[] returnTypeName = CharOperation.concat(returnPackageName,method.returnType.qualifiedSourceName(),'.') ;\r", "+\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.', returnPackageName), returnTypeName)) {\r", "+\t\t\t\t\tcompletion.append(returnTypeName);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcompletion.append(method.returnType.sourceName());\r", "+\t\t\t\t}\r", "-\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',parameterPackageNames[i]), parameterTypeNames[i])){\r", "-\t\t\t\t\t\tcompletion.append(parameterPackageNames[i]);\r", "-\t\t\t\t\t\tcompletion.append('.');\r", "+\t\t\t\t\tchar[] completeParameterTypeName = CharOperation.concat(parameterPackageNames[i], parameterTypeNames[i], '.');\r", "+\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',parameterPackageNames[i]), completeParameterTypeName)){\r", "+\t\t\t\t\t\tcompletion.append(completeParameterTypeName);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tcompletion.append(parameterTypeNames[i]);\r", "-\t\t\t\t\tcompletion.append(parameterTypeNames[i]);\r", "-\t\t\t\tint exceptionCount =0;\r", "-\t\t\t\tif (exceptions != null && (( exceptionCount = exceptions.length) > 0)){\r", "+\t\t\t\t\r", "+\t\t\t\tif (exceptions != null && exceptions.length > 0){\r", "-\t\t\t\t\tfor(int i = 0; i < exceptionCount ; i++){\r", "+\t\t\t\t\tfor(int i = 0; i < exceptions.length ; i++){\r", "-\t\t\t\t\t\tchar[] typeName = exception.qualifiedSourceName();\r", "-\t\t\t\t\t\tchar[] packageName = exception.qualifiedPackageName();\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',packageName), typeName)){\r", "-\t\t\t\t\t\t\tcompletion.append(packageName);\r", "-\t\t\t\t\t\t\tcompletion.append('.');\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tcompletion.append(typeName);\r", "+\r", "+\t\t\t\t\t\tchar[] exceptionPackageName = exception.qualifiedPackageName();\r", "+\t\t\t\t\t\tchar[] exceptionTypeName = CharOperation.concat(exceptionPackageName, exception.qualifiedSourceName());\r", "-\t\t\t\t\t\tif(i != (exceptionCount - 1)){\r", "+\t\t\t\t\t\tif(i != 0){\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',exceptionPackageName), exceptionTypeName)){\r", "+\t\t\t\t\t\t\tcompletion.append(exceptionTypeName);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tcompletion.append(exception.sourceName());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b730b56036bd57f07766781dcc1cfb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2a46362da18e1189829e578c276cfbf726376a20", "commitAfterChange": "948661c4cb198af70b598b9954e5159cb73d7234", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tTypeBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tTypeBinding receiverType)", "diff": ["+\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',parameterPackageNames[i]), parameterTypeNames[i])){\r", "+\t\t\t\t\t\tcompletion.append(parameterPackageNames[i]);\r", "+\t\t\t\t\t\tcompletion.append('.');\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\tcompletion.append(parameterNames[i]);\r", "+\t\t\t\t\tif(parameterNames != null){\r", "+\t\t\t\t\t\tcompletion.append(parameterNames[i]);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tcompletion.append('%');\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\tReferenceBinding[] exceptions = method.thrownExceptions;\r", "+\t\t\t\tint exceptionCount =0;\r", "+\t\t\t\tif (exceptions != null && (( exceptionCount = exceptions.length) > 0)){\r", "+\t\t\t\t\tcompletion.append(' ');\r", "+\t\t\t\t\tcompletion.append(THROWS);\r", "+\t\t\t\t\tcompletion.append(' ');\r", "+\t\t\t\t\tfor(int i = 0; i < exceptionCount ; i++){\r", "+\t\t\t\t\t\tReferenceBinding exception = exceptions[i];\r", "+\t\t\t\t\t\tchar[] typeName = exception.qualifiedSourceName();\r", "+\t\t\t\t\t\tchar[] packageName = exception.qualifiedPackageName();\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',packageName), typeName)){\r", "+\t\t\t\t\t\t\tcompletion.append(packageName);\r", "+\t\t\t\t\t\t\tcompletion.append('.');\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tcompletion.append(typeName);\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif(i != (exceptionCount - 1)){\r", "+\t\t\t\t\t\t\tcompletion.append(',');\r", "+\t\t\t\t\t\t\tcompletion.append(' ');\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efca803b8b28692de2c562ed624b969f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1f911d51d5f7aed075946732ed8e3d1eec231ff5", "commitAfterChange": "994909f27ab64cbff8a4b8b71b6f8d78e265bc42", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "diff": ["-\t\t\t\tchar[] returnTypeName = CharOperation.concat(returnPackageName,method.returnType.qualifiedSourceName(),'.') ;\r", "-\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.', returnPackageName), returnTypeName)) {\r", "-\t\t\t\t\tcompletion.append(returnTypeName);\r", "+\t\t\t\tchar[] returnTypeName = method.returnType.qualifiedSourceName();\r", "+\t\t\t\tif(mustQualifyType(returnPackageName, returnTypeName)) {\r", "+\t\t\t\t\tcompletion.append(CharOperation.concat(returnPackageName, returnTypeName,'.'));\r", "-\t\t\t\t\tchar[] completeParameterTypeName = CharOperation.concat(parameterPackageNames[i], parameterTypeNames[i], '.');\r", "-\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',parameterPackageNames[i]), completeParameterTypeName)){\r", "-\t\t\t\t\t\tcompletion.append(completeParameterTypeName);\r", "+\t\t\t\t\tif(mustQualifyType(parameterPackageNames[i], parameterTypeNames[i])){\r", "+\t\t\t\t\t\tcompletion.append(CharOperation.concat(parameterPackageNames[i], parameterTypeNames[i], '.'));\r", "-\t\t\t\t\t\tchar[] exceptionTypeName = CharOperation.concat(exceptionPackageName, exception.qualifiedSourceName());\r", "+\t\t\t\t\t\tchar[] exceptionTypeName = exception.qualifiedSourceName();\r", "-\t\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',exceptionPackageName), exceptionTypeName)){\r", "-\t\t\t\t\t\t\tcompletion.append(exceptionTypeName);\r", "+\t\t\t\t\t\tif(mustQualifyType(exceptionPackageName, exceptionTypeName)){\r", "+\t\t\t\t\t\t\tcompletion.append(CharOperation.concat(exceptionPackageName, exceptionTypeName));\r"]}], "num": 16598}
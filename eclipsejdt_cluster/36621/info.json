{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5963096e0ac18003cc1bb27fd8bee618", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc1b54a9e2d892703f06250610568781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "76b281521e0c88d7bc9fbeb2c963d7e6c8914ee3", "commitAfterChange": "e4873234bb7d47f3f866e994a2466da3b0ee585f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\t\t\t\tTypeBinding[] innerArgumentTypes = null;", "-\t\t\t\t\t\t\tif (innerArguments != null) {", "-\t\t\t\t\t\t\t\tinnerArgumentTypes = new TypeBinding[innerArguments.length];", "-\t\t\t\t\t\t\t\tfor (int j = 0; j < innerArguments.length; j++)", "-\t\t\t\t\t\t\t\t\tinnerArgumentTypes[i] = innerArguments[i].resolvedType;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tMethodBinding improvedBinding = innerContext.inferInvocationType(innerInvocation, innerArgumentTypes, parameterizedMethod);", "+\t\t\t\t\t\t\tMethodBinding improvedBinding = innerContext.inferInvocationType(innerInvocation, parameterizedMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edf95577445459e70bce620d457826c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "d3d6e8a120fcc21d2141655c16c3f72a3fe7aa82", "commitAfterChange": "a914eaa80cfee2f1a5138d665998598bc293ae8e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["+\t\t\tif (infCtx == null && variableArity && parameters.length == arguments.length) { // re-check", "+\t\t\t\tTypeBinding lastParam = parameters[parameters.length-1];", "+\t\t\t\tExpression lastArg = arguments[arguments.length-1];", "+\t\t\t\tif (lastArg.isCompatibleWith(lastParam, null)) {", "+\t\t\t\t\tvariableArity = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\t\t\t\t\tif (!improvedBinding.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\tinnerContext.reportInvalidInvocation(innerInvocation, improvedBinding);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// TODO need to report invalidMethod if !improvedBinding.isValidBinding() ?"]}], "num": 36621}
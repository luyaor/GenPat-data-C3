{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77607eb103ffc391cc577d8ef6038f77", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fcc18ca0536b458ca81975aee501084", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "b8aa3311452be518b7f96e1cdb47c5f16b1e4cf4", "commitAfterChange": "8875593d9253c455d8f189d55bb69262f4967ae1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "signatureAfterChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "diff": ["-\t\tif ((realModifiers & ~(ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract)) != 0) {", "+\t\tint expectedModifiers = ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;", "+\t\t// 9.4 got updated for JSR 335 (default methods):", "+\t\tboolean isDefaultMethod = (modifiers & ExtraCompilerModifiers.AccDefaultMethod) != 0; // no need to check validity, is done by the parser", "+\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8 && isDefaultMethod) {", "+\t\t\texpectedModifiers |= (ClassFileConstants.AccSynchronized | ClassFileConstants.AccStrictfp);", "+\t\t}", "+\t\tif ((realModifiers & ~expectedModifiers) != 0) {", "-\t\t\t\tproblemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext);", "+\t\t\t\tproblemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext, isDefaultMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86b98045aab91482dfdec221b9c94f94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "035672481c2d56adf6c244f2439c7ebb1707c88e", "commitAfterChange": "ec5dcab20d3dd38f3f0b34d217969a2e8a9b29f6", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence)", "signatureAfterChange": " public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence, TypeDeclaration declaringType)", "diff": ["-public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence) {", "+public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence, TypeDeclaration declaringType) {", "-               if (isInRange){", "-                  requestor.enterClass(", "-                     typeDeclaration.declarationSourceStart, ", "-                     typeDeclaration.modifiers, ", "-                     typeDeclaration.name, ", "-                     typeDeclaration.sourceStart, ", "-                     sourceEnd(typeDeclaration), ", "-                     null, ", "-                     interfaceNames);", "+ \t\t\t\tif (isInRange) {", "+ \t\t\t\t\tint flags =  typeDeclaration.modifiers;", "+ \t\t\t\t\tboolean isEnumInit = typeDeclaration.allocation != null && typeDeclaration.allocation.enumConstant != null;", "+ \t\t\t\t\tif (isEnumInit)", "+ \t\t\t\t\t\tflags |= AccEnum;", "+\t\t\t\t\trequestor.enterClass(", "+\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, ", "+\t\t\t\t\t\tflags, ", "+\t\t\t\t\t\ttypeDeclaration.name, ", "+\t\t\t\t\t\ttypeDeclaration.sourceStart, ", "+\t\t\t\t\t\tsourceEnd(typeDeclaration), ", "+\t\t\t\t\t\tisEnumInit ? declaringType.name : null, ", "+\t\t\t\t\t\tinterfaceNames);", "-               if (isInRange){", "+               if (isInRange) {", "-            notifySourceElementRequestor(nextMemberDeclaration, true);", "+            notifySourceElementRequestor(nextMemberDeclaration, true, null);"]}], "num": 29765}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a41d100c775259f7241044f54679c5b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e58d1653b4bbe154d60ad3bb4cb27e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java", "commitBeforeChange": "a0e794820a3e45ac013c44e55b82e935802d5378", "commitAfterChange": "a06fd70a66cd192fe200df3baf9406d9e87b6313", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test004()", "signatureAfterChange": "  public void test004()", "diff": ["-// FAIL cannot detect errors against 2nd and 3rd lambda, because of enclosingScopesHaveErrors()", "+", "+\t\t\t\"----------\\n2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tgoo(()-> { \\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method goo(J) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\"  while (x)    ;\\n\" + ", "+\t\t\t\"})\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tgoo(()-> { \\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method goo(J) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\"  while (f)    ;\\n\" + ", "+\t\t\t\"})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5184d2a09eb59dd3ef1dc19007eaa51f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5da70e8fd8ca541611254bd2bde6b6ab6bb07e90", "commitAfterChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": " public void _test122()", "signatureAfterChange": " public void _test122()", "diff": ["-\t\t// should complain that X does not implement I#foo", "-\t\t\"1. ERROR ...\\n\" + ", "-\t\t\"----------\\n\"", "-\t);", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tpublic class X implements I {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The type X must implement the inherited abstract method I.foo(Integer, Y<String>, Y<String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tpublic void foo(Integer i, Y<String> l1, Y l2) {\\n\" + ", "+\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo(Integer, Y<String>, Y) of type X has the same erasure as foo(Integer, Y<String>, Y<String>) of type I but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tpublic void foo(Integer i, Y<String> l1, Y l2) {\\n\" + ", "+\t\t\"\t                                         ^\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0057e1409134df8367cad62733cd235", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "2d053de9651cebac3cf0a82f4012b7196ccb5c83", "commitAfterChange": "a209f427039b5b4db27a67f609cb706801ba28e5", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void _testBug428811()", "signatureAfterChange": " public void testBug428811()", "diff": ["-public void _testBug428811() {", "-\t// perhaps fail is the correct answer?", "-\trunConformTest(", "+public void testBug428811() {", "+\t// perhaps fail is the correct answer? FIXME: validate!", "+\trunNegativeTest(", "-\t\t});", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in MoreCollectors.java (at line 16)\\n\" + ", "+\t\t\"\treturn Collector.of(ArrayList<T>::new,\\n\" + ", "+\t\t\"\t                 ^^\\n\" + ", "+\t\t\"The method of(ArrayList<T>::new, List<T>::add, (<no type> left, <no type> right) -> {\\n\" + ", "+\t\t\"  left.addAll(right);\\n\" + ", "+\t\t\"  return left;\\n\" + ", "+\t\t\"}, ImmutableList::copyOf) is undefined for the type Collector\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in MoreCollectors.java (at line 23)\\n\" + ", "+\t\t\"\tpublic static <T> ImmutableList<T> copyOf (Collection<T> c) {\\n\" + ", "+\t\t\"\t                                   ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method copyOf(Collection<T>) from the type MoreCollectors.ImmutableList<T> is never used locally\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 66643}
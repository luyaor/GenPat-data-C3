{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50d17e6058d843cb0e745f4aa6d03167", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d3236897464254383cf414d99cbab63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "e44084d11b78dee2352add7a7fb666daba7d3b97", "commitAfterChange": "7594e7e641998e4b739042718fe64988f6b36839", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "diff": ["-\t\tif (buildFragments(equalExpression)) {", "-\t\t\tswitch((equalExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT) {", "-\t\t\t\tcase OperatorIds.EQUAL_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameEQUAL_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.NOT_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameNOT_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else {", "-\t\t\treturn false;", "-\t\t}", "+\t\tthis.fragmentsList.add(equalExpression);", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10439fb765758dfa05892fec18919ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "bf0ca5a4738acc7e6088e1ec076dd1837738b875", "commitAfterChange": "37faa38cc90a0ce8882c0b12a17cbeba1ded03bb", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic boolean visit(StringLiteralConcatenation stringLiteral, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(StringLiteralConcatenation stringLiteral, BlockScope scope)", "diff": ["-\t\tfor (int i = 0, max = stringLiteral.counter; i < max; i++) {", "-\t\t\tthis.addRealFragment(stringLiteral.literals[i]);", "-\t\t\tif (i < max - 1) {", "-\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNamePLUS));", "+\t\tif (((stringLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "+\t\t\taddRealFragment(stringLiteral);", "+\t\t\treturn false;", "+\t\t} else {", "+\t\t\tfor (int i = 0, max = stringLiteral.counter; i < max; i++) {", "+\t\t\t\tthis.addRealFragment(stringLiteral.literals[i]);", "+\t\t\t\tif (i < max - 1) {", "+\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNamePLUS));", "+\t\t\t\t}", "+\t\t\treturn false;", "-\t\treturn false;"]}], "num": 33126}
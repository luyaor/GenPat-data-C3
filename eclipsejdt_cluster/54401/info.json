{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d6c45e6682b545db67dc081c1321e25", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18e9e2b41b3940021651f131bf94f555", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " \tpublic void test054()", "signatureAfterChange": " \tpublic void test054()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tvoid a(Object x) {}\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method a(Object) has the same erasure a(Object) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<T> T a(T x) {  return null; }\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^\\n\" + ", "+\t\t\t\t\"Method a(T) has the same erasure a(Object) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\t\t\"\tvoid a(Object x) {}\\n\" +", "+\t\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Method a(Object) has the same erasure a(Object) as another method in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\t\t\"\t<T> T a(T x) {  return null; }\\n\" +", "+\t\t\t\t\t\"\t      ^^^^^^\\n\" +", "+\t\t\t\t\t\"Method a(T) has the same erasure a(Object) as another method in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\tvoid a(Object x) {}\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" +", "-\t\t\t\"Method a(Object) has the same erasure a(Object) as another method in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t<T> T a(T x) {  return null; }\\n\" +", "-\t\t\t\"\t      ^^^^^^\\n\" +", "-\t\t\t\"Method a(T) has the same erasure a(Object) as another method in type X\\n\" +", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fc0c13569335b90d3949283a0f9ded6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void test054c()", "signatureAfterChange": " \tpublic void test054c()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<T1 extends X<T1>> void dupT() {}\\n\" + ", "+\t\t\t\t\"\t                        ^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method dupT() in type X<T>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<T2 extends X<T2>> Object dupT() {return null;}\\n\" + ", "+\t\t\t\t\"\t                          ^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method dupT() in type X<T>\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\t\t\"\t<T1 extends X<T1>> void dupT() {}\\n\" +", "+\t\t\t\t\t\"\t                        ^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method dupT() in type X<T>\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\t\t\"\t<T2 extends X<T2>> Object dupT() {return null;}\\n\" +", "+\t\t\t\t\t\"\t                          ^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method dupT() in type X<T>\\n\" +", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\t<T1 extends X<T1>> void dupT() {}\\n\" +", "-\t\t\t\"\t                        ^^^^^^\\n\" +", "-\t\t\t\"Duplicate method dupT() in type X<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t<T2 extends X<T2>> Object dupT() {return null;}\\n\" +", "-\t\t\t\"\t                          ^^^^^^\\n\" +", "-\t\t\t\"Duplicate method dupT() in type X<T>\\n\" +", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2011ea99adcac43d805bb8066abc216b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test027()", "signatureAfterChange": " public void test027()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in J.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T extends Number> T foo(final Number p);\\n\" + ", "+\t\t\t\"\t                     ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Number) in type J\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in J.java (at line 3)\\n\" + ", "+\t\t\t\"\tFloat foo(final Number p);\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Number) in type J\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. ERROR in J.java (at line 2)\\n\" +", "+\t\t\t\t\"\t<T extends Number> T foo(final Number p);\\n\" +", "+\t\t\t\t\"\t                     ^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\"Duplicate method foo(Number) in type J\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. ERROR in J.java (at line 3)\\n\" +", "+\t\t\t\t\"\tFloat foo(final Number p);\\n\" +", "+\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\"Duplicate method foo(Number) in type J\\n\" +", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in J.java (at line 2)\\n\" +", "-\t\t\"\t<T extends Number> T foo(final Number p);\\n\" +", "-\t\t\"\t                     ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Duplicate method foo(Number) in type J\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in J.java (at line 3)\\n\" +", "-\t\t\"\tFloat foo(final Number p);\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Duplicate method foo(Number) in type J\\n\" +", "-\t\t\"----------\\n\");", "+\t\texpectedCompilerLog);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7048a9940a479c06d763ec2b5317d61a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " \tpublic void test050d()", "signatureAfterChange": " \tpublic void test050d()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<T extends Y, U> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo(Object) in type X.C7\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<T extends Z> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo(Object) in type X.C7\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Y, U> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                   ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo(Object) in type X.C7\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Z> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo(Object) in type X.C7\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\t<T extends Y, U> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C7\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t<T extends Z> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C7\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc103bbc8198a9a009900f1daea3e05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test011a()", "signatureAfterChange": " \tpublic void test011a()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in Combined.java (at line 2)\\n\" + ", "+\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in Combined.java (at line 3)\\n\" + ", "+\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Combined.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Combined.java (at line 3)\\n\" + ", "+\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Combined.java (at line 2)\\n\" + ", "-\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "-\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Combined.java (at line 3)\\n\" + ", "-\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d08f2201e14898bd1581af7a5c79747c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": " \tpublic void test054b()", "signatureAfterChange": " \tpublic void test054b()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tObject foo(X<T> t) { return null; }\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<S> String foo(X<T> s) { return null; }\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tObject foo(X<T> t) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\t<S> String foo(X<T> s) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tObject foo(X<T> t) { return null; }\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\t<S> String foo(X<T> s) { return null; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edfbe7601770f8155dc33350b26b0852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " \tpublic void test051b()", "signatureAfterChange": " \tpublic void test051b()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ec5127808cd8839a32e8bd0e7df9b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": " \tpublic void test048()", "signatureAfterChange": " \tpublic void test048()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X1.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic class X1 extends LinkedHashMap<String, String> {\\n\" + ", "+\t\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\t\"The serializable class X1 does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X1.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic Object putAll(Map<String,String> a) { return null; }\\n\" + ", "+\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method putAll(Map<String,String>) of type X1 has the same erasure as putAll(Map<? extends K,? extends V>) of type HashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. WARNING in X1.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tpublic class X1 extends LinkedHashMap<String, String> {\\n\" + ", "+\t\t\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\t\t\"The serializable class X1 does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X1.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tpublic Object putAll(Map<String,String> a) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method putAll(Map<String,String>) of type X1 has the same erasure as putAll(Map<? extends K,? extends V>) of type HashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X1.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic class X1 extends LinkedHashMap<String, String> {\\n\" + ", "-\t\t\t\"\t             ^^\\n\" + ", "-\t\t\t\"The serializable class X1 does not declare a static final serialVersionUID field of type long\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X1.java (at line 3)\\n\" + ", "-\t\t\t\"\tpublic Object putAll(Map<String,String> a) { return null; }\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method putAll(Map<String,String>) of type X1 has the same erasure as putAll(Map<? extends K,? extends V>) of type HashMap<K,V> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb19a31e4028c3aa31b06bd3a378d998", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " public void test120a()", "signatureAfterChange": " public void test120a()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Bar.java (at line 2)\\n\" + ", "+\t\t\t\"\tint getThing(V v) { return 1; }\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Bar.java (at line 3)\\n\" + ", "+\t\t\t\"\tboolean getThing(E e) { return true; }\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in Bar.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tint getThing(V v) { return 1; }\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in Bar.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tboolean getThing(E e) { return true; }\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in Bar.java (at line 2)\\n\" + ", "-\t\t\"\tint getThing(V v) { return 1; }\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in Bar.java (at line 3)\\n\" + ", "-\t\t\"\tboolean getThing(E e) { return true; }\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "-\t\t\"----------\\n\"", "+\t\texpectedCompilerLog"]}], "num": 54401}
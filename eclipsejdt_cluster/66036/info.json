{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e3d64c49ee4c6d6c1bfe254e4626d51", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c3b22c7851795f853d972cbcef665e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "88bd9c51ebfccd9b68ad18488d485e1a7c491cf8", "commitAfterChange": "955b02c11176bc9ea7783a0c545a5026fedbdadc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tTypeBinding exceptionArgumentTB = exceptionArgument.resolveType(scope);\r", "-\t\t\texceptionArgument.implicitConversion = (exceptionArgumentTB.id << 4) + exceptionArgumentTB.id;\r", "+\t\t\tTypeBinding exceptionArgumentType = exceptionArgument.resolveType(scope);\r", "+\t\t\tif (exceptionArgumentType.id == T_void){\r", "+\t\t\t\tscope.problemReporter().illegalVoidExpression(exceptionArgument);\r", "+\t\t\t}\r", "+\t\t\texceptionArgument.implicitConversion = (exceptionArgumentType.id << 4) + exceptionArgumentType.id;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1782758454f4ec3f6cc1d98919939d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.codegenBinding =", "-\t\t\tthis.binding = scope.getField(this.receiverType, token, this);", "+\t\tthis.codegenBinding = this.binding = scope.getField(this.receiverType, token, this);", "-\t\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0))", "+\t\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "-", "+\t\t}", "-\t\t\t\tscope.problemReporter().unnecessaryReceiverForStaticField(this, binding);", "+\t\t\t\tscope.problemReporter().nonStaticAccessToStaticField(this, binding);", "+\t\t\t}", "+\t\t\tif (!isImplicitThisRcv && binding.declaringClass != receiverType) {", "+\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, binding);"]}], "num": 66036}
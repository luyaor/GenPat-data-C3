{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c68fc67be30c98119acea68a53892622", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "548889cca9c078184cc935c2931e8106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "91a5b49121a22c32ff81484145fe6ce15b755e81", "commitAfterChange": "16b9910572e7876db169469e4f3c509a31490ed4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type)", "signatureAfterChange": " \tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult)", "diff": ["+\t */", "+\tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult) {", "+", "+\t\tBlock block = new Block(0);", "+\t\tInitializer initializer = new Initializer(block, IConstants.AccDefault);", "+", "+\t\tint start = initializerInfo.getDeclarationSourceStart();", "+\t\tint end = initializerInfo.getDeclarationSourceEnd();", "+", "+\t\tinitializer.name = initializerInfo.getName();", "+\t\tinitializer.sourceStart = initializer.declarationSourceStart = start;", "+\t\tinitializer.sourceEnd = initializer.declarationSourceEnd = end;", "+\t\tinitializer.modifiers = initializerInfo.getModifiers();", "+", "+\t\t/* convert local and anonymous types */", "+\t\tIJavaElement[] children = initializerInfo.getChildren();", "+\t\tint typesLength = children.length;", "+\t\tif (typesLength > 0) {", "+\t\t\tStatement[] statements = new Statement[typesLength];", "+\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\tJavaElement type = (JavaElement)children[i];", "+\t\t\t\ttry {", "+\t\t\t\t\tTypeDeclaration localType = convert((ISourceType)type.getElementInfo(), compilationResult);", "+\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "+\t\t\t\t\t\texpression.type = localType.superclass;", "+\t\t\t\t\t\tlocalType.superclass = null;", "+\t\t\t\t\t\tlocalType.superInterfaces = null;", "+\t\t\t\t\t\tlocalType.allocation = expression;", "+\t\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatements[i] = localType;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tblock.statements = statements;", "+\t\t}", "+\t\t", "+\t\treturn initializer;", "+\t}", "-\tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type) {", "-\t\t\t/* conversion of field constant */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a890f277c7087f0c4e25849bdda3da3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ElementInfoConverter.java", "commitBeforeChange": "1a1a31d229c2fc8c04f9bd63ce751ad3b1477b30", "commitAfterChange": "e6522f026ab59e6d639e7039d4201198858d9e63", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate CompilationUnitDeclaration convert( \t\tSourceTypeElementInfo[] sourceTypes, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult)", "diff": ["-\t */", "-\tprivate CompilationUnitDeclaration convert(", "-\t\tSourceTypeElementInfo[] sourceTypes,", "-\t\tCompilationResult compilationResult) {", "-\t\t", "-\t\tSourceTypeElementInfo sourceType = sourceTypes[0];", "-\t\tif (sourceType.getName() == null)", "-\t\t\treturn null; // do a basic test that the sourceType is valid", "-", "-\t\tthis.unit = new CompilationUnitDeclaration(this.problemReporter, compilationResult, 0);", "-\t\t// not filled at this point", "-", "-\t\t/* only positions available */", "-\t\tint start = sourceType.getNameSourceStart();", "-\t\tint end = sourceType.getNameSourceEnd();", "-", "-\t\t/* convert package and imports */", "-\t\tif (sourceType.getPackageName() != null", "-\t\t\t&& sourceType.getPackageName().length > 0)", "-\t\t\t// if its null then it is defined in the default package", "-\t\t\tthis.unit.currentPackage =", "-\t\t\t\tcreateImportReference(sourceType.getPackageName(), start, end, false, AccDefault);", "-\t\tISourceImport[]  sourceImports = sourceType.getImports();", "-\t\tint importCount = sourceImports == null ? 0 : sourceImports.length;", "-\t\tthis.unit.imports = new ImportReference[importCount];", "-\t\tfor (int i = 0; i < importCount; i++) {", "-\t\t\tISourceImport sourceImport = sourceImports[i];", "-\t\t\tthis.unit.imports[i] = createImportReference(", "-\t\t\t\tsourceImport.getName(), ", "-\t\t\t\tsourceImport.getDeclarationSourceStart(),", "-\t\t\t\tsourceImport.getDeclarationSourceEnd(),", "-\t\t\t\tsourceImport.onDemand(),", "-\t\t\t\tsourceImport.getModifiers());", "-\t\t}", "-\t\t/* convert type(s) */", "-\t\tint typeCount = sourceTypes.length;", "-\t\tthis.unit.types = new TypeDeclaration[typeCount];", "-\t\tfor (int i = 0; i < typeCount; i++) {", "-\t\t\tthis.unit.types[i] = convert(sourceTypes[i], compilationResult);", "-\t\t}", "-\t\treturn this.unit;", "+\t */", "+\tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult) {", "+", "+\t\tBlock block = new Block(0);", "+\t\tInitializer initializer = new Initializer(block, IConstants.AccDefault);", "+", "+\t\tint start = initializerInfo.getNameSourceStart();", "+\t\tint end = initializerInfo.getNameSourceEnd();", "+", "+\t\tinitializer.name = initializerInfo.getName();", "+\t\tinitializer.sourceStart = start;", "+\t\tinitializer.sourceEnd = end;", "+\t\tinitializer.declarationSourceStart = initializerInfo.getDeclarationSourceStart();", "+\t\tinitializer.declarationSourceEnd = initializerInfo.getDeclarationSourceEnd();", "+\t\tinitializer.modifiers = initializerInfo.getModifiers();", "+", "+\t\t/* convert local and anonymous types */", "+\t\tIJavaElement[] children = initializerInfo.getChildren();", "+\t\tint typesLength = children.length;", "+\t\tif (typesLength > 0) {", "+\t\t\tStatement[] statements = new Statement[typesLength];", "+\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\tJavaElement type = (JavaElement)children[i];", "+\t\t\t\ttry {", "+\t\t\t\t\tTypeDeclaration localType = convert((SourceTypeElementInfo)type.getElementInfo(), compilationResult);", "+\t\t\t\t\tif (localType instanceof AnonymousLocalTypeDeclaration) {", "+\t\t\t\t\t\tAnonymousLocalTypeDeclaration anonymousLocalTypeDeclaration = (AnonymousLocalTypeDeclaration)localType;", "+\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "+\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "+\t\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatements[i] = localType;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tblock.statements = statements;", "+\t\t}", "+\t\t", "+\t\treturn initializer;", "+\t}"]}], "num": 16535}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "300d5ca332cb3dd358b7f092e27ac6e8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "692b6188df1d2382569f932feb44a2d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tTypeBinding leftTb = left.resolveType(scope);", "-\tTypeBinding rightTb = right.resolveType(scope);", "-\tif (leftTb == null || rightTb == null){", "+\tTypeBinding leftType = left.resolveType(scope);", "+\tTypeBinding rightType = right.resolveType(scope);", "+\tif (leftType == null || rightType == null){", "-\tif (leftTb.isBaseType() && rightTb.isBaseType()) {", "+\tif (leftType.isBaseType() && rightType.isBaseType()) {", "-\t\tint result = ResolveTypeTables[EQUAL_EQUAL][ (leftTb.id << 4) + rightTb.id];", "+\t\tint result = ResolveTypeTables[EQUAL_EQUAL][ (leftType.id << 4) + rightType.id];", "-\t\t\tscope.problemReporter().invalidOperator(this, leftTb, rightTb);", "+\t\t\tscope.problemReporter().invalidOperator(this, leftType, rightType);", "-\t\tcomputeConstant(leftTb, rightTb);", "+\t\tcomputeConstant(leftType, rightType);", "-\tif (areTypesCastCompatible(scope, rightTb, leftTb) || areTypesCastCompatible(scope, leftTb, rightTb)) {", "+\tif (areTypesCastCompatible(scope, rightType, leftType) || areTypesCastCompatible(scope, leftType, rightType)) {", "-\t\tif ((rightTb.id == T_String) && (leftTb.id == T_String))", "-\t\t\tcomputeConstant(leftTb, rightTb);", "+\t\tif ((rightType.id == T_String) && (leftType.id == T_String))", "+\t\t\tcomputeConstant(leftType, rightType);", "-\t\tif (rightTb.id == T_String)", "+\t\tif (rightType.id == T_String)", "-\t\tif (leftTb.id == T_String)", "+\t\tif (leftType.id == T_String)", "-\tscope.problemReporter().notCompatibleTypesError(this, leftTb, rightTb);", "+\tscope.problemReporter().notCompatibleTypesError(this, leftType, rightType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edf12ba359542aa40deb61b70b5ba657", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "4e7caa3a77ad20f357ad4b6907dbbeb13267be58", "commitAfterChange": "90e913a6f89a9a5089d1398987b958c3f2bb0a05", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tTypeBinding lhsTb = lhs.resolveType(scope);\r", "-\tTypeBinding expressionTb = expression.resolveType(scope);\r", "-\tif (lhsTb == null || expressionTb == null)\r", "+\tTypeBinding lhsType = lhs.resolveType(scope);\r", "+\tTypeBinding expressionType = expression.resolveType(scope);\r", "+\tif (lhsType == null || expressionType == null)\r", "-\tint lhsId = lhsTb.id;\r", "-\tint expressionId = expressionTb.id;\r", "-\tif (restrainUsageToNumericTypes() && !lhsTb.isNumericType()) {\r", "-\t\tscope.problemReporter().operatorOnlyValidOnNumericType(this, lhsTb, expressionTb);\r", "+\tint lhsId = lhsType.id;\r", "+\tint expressionId = expressionType.id;\r", "+\tif (restrainUsageToNumericTypes() && !lhsType.isNumericType()) {\r", "+\t\tscope.problemReporter().operatorOnlyValidOnNumericType(this, lhsType, expressionType);\r", "-\t\t\tscope.problemReporter().invalidOperator(this, lhsTb, expressionTb);\r", "+\t\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "-\t\tscope.problemReporter().invalidOperator(this, lhsTb, expressionTb);\r", "+\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "-\tif (operator == PLUS && scope.isJavaLangObject(lhsTb)) {\r", "-\t\t// Object o = \"hello\"; \r", "-\t\t// o += \" world\"  // <--illegal\r", "-\t\tscope.problemReporter().invalidOperator(this, lhsTb, expressionTb);\r", "-\t\treturn null;\r", "+\tif (operator == PLUS){\r", "+\t\tif(scope.isJavaLangObject(lhsType)) {\r", "+\t\t\t// <Object> += <String> is illegal\r", "+\t\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "+\t\t\treturn null;\r", "+\t\t} else if (lhsType.isNumericType() && !expressionType.isNumericType()){\r", "+\t\t\t// <int> += <String> is illegal\r", "+\t\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "+\t\t\treturn null;\r", "+\t\t}\r", "-\treturn lhsTb;\r", "+\treturn lhsType;\r"]}], "num": 18066}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f64539e656ad7de514b77fbfbc6645e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa9e926925da55904e71b7e531833dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "e4f6d0091f68bf4b6ecb46943ad5d4d6a5ce0095", "commitAfterChange": "3a73dbc8d9839c0eb87857ef97f640371d15a626", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IPath[] enclosingProjectsAndJars()", "signatureAfterChange": " public IPath[] enclosingProjectsAndJars()", "diff": ["+ */", "-\tif (this.needsInitialize) {", "-\t\tthis.initialize(5);", "+\tif (this.enclosingPaths != null) {", "+\t\treturn this.enclosingPaths;", "-\treturn super.enclosingProjectsAndJars();", "+\tlong start = BasicSearchEngine.VERBOSE ? System.currentTimeMillis() : -1;", "+\ttry {", "+\t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\tSet paths = new HashSet(projects.length * 2);", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t\t\t", "+\t\t\t// Add project full path", "+\t\t\tIPath projectPath = javaProject.getProject().getFullPath();", "+\t\t\tpaths.add(projectPath);", "+", "+\t\t\t// Add project libraries paths", "+\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath();", "+\t\t\tfor (int j = 0, eLength = entries.length; j < eLength; j++) {", "+\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tObject target = JavaModel.getTarget(path, false/*don't check existence*/);", "+\t\t\t\t\tif (target instanceof IFolder) // case of an external folder", "+\t\t\t\t\t\tpath = ((IFolder) target).getFullPath();", "+\t\t\t\t\tpaths.add(entry.getPath());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tIPath[] result = new IPath[paths.size()];", "+\t\tpaths.toArray(result);", "+\t\treturn this.enclosingPaths = result;", "+\t} catch (JavaModelException e) {", "+\t\tUtil.log(e, \"Exception while computing workspace scope's enclosing projects and jars\"); //$NON-NLS-1$", "+\t\treturn new IPath[0];", "+\t} finally {", "+\t\tif (BasicSearchEngine.VERBOSE) {", "+\t\t\tlong time = System.currentTimeMillis() - start;", "+\t\t\tint length = this.enclosingPaths == null ? 0 : this.enclosingPaths.length;", "+\t\t\tUtil.verbose(\"JavaWorkspaceScope.enclosingProjectsAndJars: \"+length+\" paths computed in \"+time+\"ms.\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5caa74e61b9cf14cb3d436bde96f46d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "10862673cc468a686e19591a5da27fefa3c4f311", "commitAfterChange": "d95cddc2779658eead76d04d49201937dc19989e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void searchAllTypeNames( \tIWorkspace workspace, \tchar[] packageName,  \tchar[] typeName, \tint matchMode,  \tboolean isCaseSensitive, \tint searchFor,  \tIJavaSearchScope scope,  \tfinal ITypeNameRequestor nameRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " public void searchAllTypeNames( \tIWorkspace workspace, \tchar[] packageName,  \tchar[] typeName, \tint matchMode,  \tboolean isCaseSensitive, \tint searchFor,  \tIJavaSearchScope scope,  \tfinal ITypeNameRequestor nameRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["+\tfinal HashSet workingCopyPaths = new HashSet();", "+\tif (this.workingCopies != null) {", "+\t\tfor (int i = 0, length = this.workingCopies.length; i < length; i++) {", "+\t\t\tICompilationUnit workingCopy = this.workingCopies[i];", "+\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "+\t\t}", "+\t}", "+", "-\t\t\tif (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR) { // filter out local and anonymous classes", "+\t\t\tif (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "+\t\t\t\t\t&& !workingCopyPaths.contains(resourcePath)) { // filter out working copies", "-\t\t\tif (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR) { // filter out local and anonymous classes", "+\t\t\tif (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "+\t\t\t\t\t&& !workingCopyPaths.contains(resourcePath)) { // filter out working copies", "+\t\t// add type names from indexes", "+\t\t\t", "+\t\t// add type names from working copies", "+\t\tif (this.workingCopies != null) {", "+\t\t\tfor (int i = 0, length = this.workingCopies.length; i < length; i++) {", "+\t\t\t\tICompilationUnit workingCopy = this.workingCopies[i];", "+\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "+\t\t\t\tString path = workingCopy.getPath().toString();", "+\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "+\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "+\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "+\t\t\t\t\tIType type = allTypes[j];", "+\t\t\t\t\tIJavaElement parent = type.getParent();", "+\t\t\t\t\tchar[][] enclosingTypeNames;", "+\t\t\t\t\tif (parent instanceof IType) {", "+\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "+\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (type.isClass()) {", "+\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}\t"]}], "num": 6950}
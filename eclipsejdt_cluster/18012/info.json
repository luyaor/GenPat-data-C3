{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "563af9154b0f10985cae8ff9ff58121a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bcecf0dd10eb214b732ae5a2bcf7de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9201dfdd65456845c29d6dc3323aadc8322279d6", "commitAfterChange": "c8ca8bc0ed355b1996bc738eb2798ac55ee50894", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 289, "signatureBeforeChange": " protected void consumeLambdaExpression()", "signatureAfterChange": " protected void consumeLambdaExpression()", "diff": ["-protected void consumeLambdaExpression() {", "-\t", "-\t// LambdaExpression ::= LambdaParameters '->' LambdaBody", "-\tthis.astLengthPtr--; \t// pop length for LambdaBody (always 1)", "-\tStatement body = (Statement) this.astStack[this.astPtr--];", "-\tif (body instanceof Block) {", "-\t\tthis.nestedType--; \t// matching NestedType in \"LambdaBody ::= NestedType NestedMethod  '{' BlockStatementsopt '}'\"", "-\t\tthis.intPtr--; \t\t// position after '{' pushed during consumeNestedMethod()", "-\t\tif (this.options.ignoreMethodBodies) {", "-\t\t\tbody = new Block(0);", "-\t\t}", "-\t}", "-\tLambdaExpression lexp = new LambdaExpression(this.compilationUnit.compilationResult, arguments, body, false);", "-\tthis.intPtr--;  // ')' position, discard for now.", "-\tlexp.sourceEnd = body.sourceEnd;", "+}", "+protected void consumeLambdaExpression() {", "+\t", "+\t// LambdaExpression ::= LambdaHeader LambdaBody", "+", "+\tthis.astLengthPtr--; \t// pop length for LambdaBody (always 1)", "+\tStatement body = (Statement) this.astStack[this.astPtr--];", "+\tif (body instanceof Block) {", "+\t\tthis.nestedType--; \t// matching NestedType in \"LambdaBody ::= NestedType NestedMethod  '{' BlockStatementsopt '}'\"", "+\t\tthis.intPtr--; \t\t// position after '{' pushed during consumeNestedMethod()", "+\t\tif (this.options.ignoreMethodBodies) {", "+\t\t\tbody = new Block(0);", "+\t\t}", "+\t}", "+", "+\tLambdaExpression lexp = (LambdaExpression) this.astStack[this.astPtr--];", "+\tthis.astLengthPtr--;", "+\tlexp.body = body;", "+\tlexp.sourceEnd = body.sourceEnd;", "+\t", "-\tpushOnExpressionStack(lexp);", "-\tthis.listLength = 0; // reset this.listLength after having read all parameters"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3dcb36becaf41ee918c3ef9dfc0576d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private IAnnotation getAnnotation(IBinaryAnnotation binaryAnnotation)", "signatureAfterChange": " private IAnnotation getAnnotation(char[][] annotationName)", "diff": ["-private IAnnotation getAnnotation(IBinaryAnnotation binaryAnnotation) {", "-\tIBinaryElementValuePair[] binaryElementValuePairs = binaryAnnotation.getElementValuePairs();", "-\tint pairsLength = binaryElementValuePairs.length;", "-\tfinal IMemberValuePair[] members;", "-\tif (pairsLength == 0) {", "-\t\tmembers = Annotation.NO_MEMBER_VALUE_PAIRS;", "-\t} else {", "-\t\tmembers = new IMemberValuePair[pairsLength];", "-\t\tfor (int i = 0; i < pairsLength; i++) {", "-\t\t\tIBinaryElementValuePair binaryElementValuePair = binaryElementValuePairs[i];", "-\t\t\tMemberValuePair memberValuePair = new MemberValuePair(new String(binaryElementValuePair.getName()));", "-\t\t\tmemberValuePair.value = getMemberValue(memberValuePair, binaryElementValuePair.getValue());", "-\t\t\tmembers[i] = memberValuePair;", "-\t\t}", "-\t}", "-\tchar[] typeName = org.eclipse.jdt.core.Signature.toCharArray(CharOperation.replaceOnCopy(binaryAnnotation.getTypeName(), '/', '.'));", "-\treturn new Annotation(this, new String(typeName)) {", "-\t\tpublic IMemberValuePair[] getMemberValuePairs() throws JavaModelException {", "-\t\t\treturn members;", "-\t\t}", "-\t};", "+private IAnnotation getAnnotation(char[][] annotationName) {", "+\treturn new Annotation(this, new String(CharOperation.concatWith(annotationName, '.')));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce74d77f1413946d39bffb6efcc1581c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4c834daaadbd8c680a6fcccd31170f229344d7e", "commitAfterChange": "9afcaef5b1b73c3a14828e7dccbe0110d44ea231", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   \tprivate INameEnvironment getNameEnvironment(JavaProject project) throws JavaModelException", "signatureAfterChange": "   \tprivate INameEnvironment getNameEnvironment(JavaProject project) throws JavaModelException", "diff": ["-\t\tIPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();", "-\t\tint length = roots.length;", "-\t\tString[] classpathNames = new String[length];", "-\t\tint rootModes[] = new int[length];", "-\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIPackageFragmentRoot root = roots[i];", "-\t\t\tIPath path = root.getPath();", "-\t\t\trootModes[i] = (root.getKind() == IPackageFragmentRoot.K_SOURCE)  ? ClasspathDirectory.SOURCE : ClasspathDirectory.BINARY;", "-\t\t\tif (root.isArchive()) {", "-\t\t\t\t// pass in a relative path (for internal jar) as this is what is needed by FileNamewEnviroment.getZipFile(File)", "-\t\t\t\tclasspathNames[i] = path.toOSString();", "-\t\t\t} else {", "-\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "-\t\t\t\tif (target instanceof IResource) {", "-\t\t\t\t\tclasspathNames[i] = ((IResource)target).getLocation().toOSString();", "-\t\t\t\t} else {", "-\t\t\t\t\tclasspathNames[i] = path.toOSString();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc8c8f05f4adbde956f3ea406ca4c25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \t \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\tint size = tagElement.fragments().size();", "-\t\tint[] replaceIndex = new int[size];", "-\t\tint idx = 0;", "-\t\t\treplaceIndex[idx] = 0;", "-\t\t\t\tif (compilerNode instanceof JavadocMessageSend) {", "-\t\t\t\t\treplaceIndex[idx] = 1;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tfor (int i=0; i<size; i++) {", "-\t\t\tif (replaceIndex[i] == 1) {", "-\t\t\t\tMemberRef memberRef = (MemberRef) tagElement.fragments().remove(i);", "-\t\t\t\tMethodRef methodRef = this.ast.newMethodRef();", "-\t\t\t\tmethodRef.setName((SimpleName)memberRef.getName().clone(this.ast));", "-\t\t\t\tif (memberRef.getQualifier() != null) {", "-\t\t\t\t\tmethodRef.setQualifier((Name)memberRef.getQualifier().clone(this.ast));", "-\t\t\t\t}", "-\t\t\t\tmethodRef.setSourceRange(memberRef.getStartPosition(), memberRef.getLength());", "-\t\t\t\ttagElement.fragments().add(i, methodRef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f162f1d47538b9872d2ca58c1dd11434", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "signatureAfterChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "diff": ["-\t\t\tJavaSearchScope scope = new JavaSearchScope();\r", "-\t\t\tIWorkspaceRoot root = this.project.getUnderlyingResource().getWorkspace().getRoot();\r", "-\t\t\tIClasspathEntry[] entries = ((JavaProject)this.project).getExpandedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\tscope.add(root.getFile(entry.getPath()), false);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "-\t\t\t\t\t\tscope.add(root.getProject(entry.getPath().lastSegment()), false);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "-\t\t\t\t\t\tIPath path = entry.getPath();\r", "-\t\t\t\t\t\tif (path.segmentCount() == 1) {\r", "-\t\t\t\t\t\t\t// project is source\r", "-\t\t\t\t\t\t\tscope.add(root.getProject(path.lastSegment()), false);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t// regular source folder\r", "-\t\t\t\t\t\t\tscope.add(root.getFolder(path), false);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "+\t\t\tIJavaSearchScope scope = searchEngine.createJavaSearchScope(new IJavaElement[] {this.project});\r", "+\r"]}], "num": 18012}
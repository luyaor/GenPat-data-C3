{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0f821605c6a3dfc00d96ff9902252e8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2778d6d992d4e4959f8f16256a5473b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": " private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": " protected int matchLevel(NameReference nameRef, boolean resolve)", "diff": ["+ */", "+protected int matchLevel(NameReference nameRef, boolean resolve) {", "+\tif (!resolve) {", "+\t\tif (this.simpleName == null)", "+\t\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "+\t\tif (nameRef instanceof SingleNameReference)", "+\t\t\treturn matchesName(this.simpleName, ((SingleNameReference)nameRef).token)", "+\t\t\t\t? POTENTIAL_MATCH // can only be a possible match since resolution is needed to find out if it is a type ref", "+\t\t\t\t: IMPOSSIBLE_MATCH;", "+", "+\t\tchar[][] tokens = ((QualifiedNameReference) nameRef).tokens;", "+\t\tfor (int i = 0, max = tokens.length; i < max; i++)", "+\t\t\tif (this.matchesName(this.simpleName, tokens[i]))", "+\t\t\t\t// can only be a possible match since resolution is needed to find out if it is a type ref", "+\t\t\t\treturn POTENTIAL_MATCH;", "+\t\treturn IMPOSSIBLE_MATCH;", "+\t}", "+", "+\tBinding binding = nameRef.binding;", "+", "+\tif (nameRef instanceof SingleNameReference) {", "+\t\tif (binding instanceof ProblemReferenceBinding)", "+\t\t\tbinding = ((ProblemReferenceBinding) binding).original;", "+\t\tif (binding instanceof VariableBinding) return IMPOSSIBLE_MATCH;", "+\t\tif (!(binding instanceof TypeBinding)) return INACCURATE_MATCH;", "+\t\treturn matchLevelForType(this.simpleName, this.qualification, (TypeBinding) binding);", "+\t}", "+", "+\tTypeBinding typeBinding = null;", "+\tQualifiedNameReference qNameRef = (QualifiedNameReference) nameRef;", "+\tchar[][] tokens = qNameRef.tokens;", "+\tint lastIndex = tokens.length-1;", "+\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {", "+\t\tcase BindingIds.FIELD : // reading a field", "+\t\t\ttypeBinding = nameRef.actualReceiverType;", "+\t\t\t// no valid match amongst fields", "+\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t", "+\t\t\tlastIndex -= otherBindingsCount + 1;", "+\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;", "+\t\t\tbreak;", "+\t\tcase BindingIds.LOCAL : // reading a local variable", "+\t\t\treturn IMPOSSIBLE_MATCH; // no type match in it", "+\t\tcase BindingIds.TYPE : //=============only type ==============", "+\t\t\tif (binding instanceof ProblemReferenceBinding)", "+\t\t\t\tbinding = ((ProblemReferenceBinding) binding).original;", "+\t\t\tif (!(binding instanceof TypeBinding)) return INACCURATE_MATCH;", "+\t\t\ttypeBinding = (TypeBinding) binding;", "+\t\t\tbreak;", "+\t\t/*", "+\t\t * Handling of unbound qualified name references. The match may reside in the resolved fragment,", "+\t\t * which is recorded inside the problem binding, along with the portion of the name until it became a problem.", "+\t\t */", "+\t\tcase BindingIds.VARIABLE : //============unbound cases===========", "+\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :\t\t\t\t\t\t", "+\t\t\tif (binding instanceof ProblemBinding) {", "+\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;", "+\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far", "+\t\t\t\tchar[] partialQualifiedName = pbBinding.name;", "+\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token", "+\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;", "+\t\t\t} else if (binding instanceof ProblemReferenceBinding) {", "+\t\t\t\tProblemReferenceBinding pbBinding = (ProblemReferenceBinding)binding;", "+\t\t\t\tbinding = pbBinding.original;", "+\t\t\t\tif (!(binding instanceof TypeBinding)) return INACCURATE_MATCH;", "+\t\t\t\ttypeBinding = (TypeBinding) binding;", "+\t\t\t\tchar[][] partialQualifiedName = pbBinding.compoundName;", "+\t\t\t\tlastIndex = partialQualifiedName == null ? -1 : partialQualifiedName.length - 1; // index of last bound token is one before the pb token", "+\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\t// try to match all enclosing types for which the token matches as well.", "+\twhile (typeBinding != null && lastIndex >= 0) {", "+\t\tif (this.matchesName(this.simpleName, tokens[lastIndex--])) {", "+\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);", "+\t\t\tif (level != IMPOSSIBLE_MATCH) return level;", "+\t\t}", "+\t\tif (typeBinding instanceof ReferenceBinding)", "+\t\t\ttypeBinding = ((ReferenceBinding) typeBinding).enclosingType();", "+\t\telse", "+\t\t\ttypeBinding = null;", "+\t}", "+\treturn IMPOSSIBLE_MATCH;", "+}", "- */", "-private int matchLevel(NameReference nameRef, boolean resolve) {", "-\tif (!resolve) {", "-\t\tif (this.simpleName == null) {", "-\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tif (nameRef instanceof SingleNameReference) {", "-\t\t\t\tif (this.matchesName(this.simpleName, ((SingleNameReference)nameRef).token)) {", "-\t\t\t\t\t// can only be a possible match since resolution is needed ", "-\t\t\t\t\t// to find out if it is a type ref", "-\t\t\t\t\treturn POSSIBLE_MATCH;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t} else { // QualifiedNameReference", "-\t\t\t\tchar[][] tokens = ((QualifiedNameReference)nameRef).tokens;", "-\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){", "-\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])) {", "-\t\t\t\t\t\t// can only be a possible match since resolution is needed ", "-\t\t\t\t\t\t// to find out if it is a type ref", "-\t\t\t\t\t\treturn POSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t}\t\t\t\t", "-\t\t}", "-\t} else {", "-\t\tBinding binding = nameRef.binding;", "-", "-\t\tif (nameRef instanceof SingleNameReference) {", "-\t\t\tif (binding instanceof ProblemReferenceBinding) {", "-\t\t\t\tbinding = ((ProblemReferenceBinding)binding).original;", "-\t\t\t}", "-\t\t\tif (binding instanceof VariableBinding) {", "-\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t} else if (!(binding instanceof TypeBinding)){", "-\t\t\t\treturn INACCURATE_MATCH;", "-\t\t\t} else {", "-\t\t\t\treturn this.matchLevelForType(this.simpleName, this.qualification, (TypeBinding) binding);", "-\t\t\t}", "-\t\t} else { // QualifiedNameReference", "-\t\t\tTypeBinding typeBinding = null;", "-\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;", "-\t\t\tchar[][] tokens = qNameRef.tokens;", "-\t\t\tint lastIndex = tokens.length-1;", "-\t\t\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {", "-\t\t\t\tcase BindingIds.FIELD : // reading a field", "-\t\t\t\t\ttypeBinding = nameRef.actualReceiverType;", "-\t\t\t\t\t// no valid match amongst fields", "-\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t", "-\t\t\t\t\tlastIndex -= otherBindingsCount + 1;", "-\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase BindingIds.LOCAL : // reading a local variable", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no type match in it", "-\t\t\t\tcase BindingIds.TYPE : //=============only type ==============", "-\t\t\t\t\tif (binding instanceof ProblemReferenceBinding) {", "-\t\t\t\t\t\tbinding = ((ProblemReferenceBinding)binding).original;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!(binding instanceof TypeBinding)) {", "-\t\t\t\t\t\treturn INACCURATE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t\ttypeBinding = (TypeBinding)binding;", "-\t\t\t\t\tbreak;", "-\t\t\t\t/*", "-\t\t\t\t * Handling of unbound qualified name references. The match may reside in the resolved fragment,", "-\t\t\t\t * which is recorded inside the problem binding, along with the portion of the name until it became a problem.", "-\t\t\t\t */", "-\t\t\t\tcase BindingIds.VARIABLE : //============unbound cases===========", "-\t\t\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :\t\t\t\t\t\t", "-\t\t\t\t\tif (binding instanceof ProblemBinding) {", "-\t\t\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;", "-\t\t\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far", "-\t\t\t\t\t\tchar[] partialQualifiedName = pbBinding.name;", "-\t\t\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token", "-\t\t\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;", "-\t\t\t\t\t} else if (binding instanceof ProblemReferenceBinding) {", "-\t\t\t\t\t\tProblemReferenceBinding pbBinding = (ProblemReferenceBinding)binding;", "-\t\t\t\t\t\tbinding = pbBinding.original;", "-\t\t\t\t\t\tif (!(binding instanceof TypeBinding)) {", "-\t\t\t\t\t\t\treturn INACCURATE_MATCH;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttypeBinding = (TypeBinding)binding;", "-\t\t\t\t\t\tchar[][] partialQualifiedName = pbBinding.compoundName;", "-\t\t\t\t\t\tlastIndex = partialQualifiedName == null ? -1 : partialQualifiedName.length - 1; // index of last bound token is one before the pb token", "-\t\t\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\t// try to match all enclosing types for which the token matches as well.", "-\t\t\twhile (typeBinding != null && lastIndex >= 0){", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[lastIndex--])) {", "-\t\t\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);", "-\t\t\t\t\tif (level != IMPOSSIBLE_MATCH) {", "-\t\t\t\t\t\treturn level;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (typeBinding instanceof ReferenceBinding){", "-\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();", "-\t\t\t\t} else {", "-\t\t\t\t\ttypeBinding = null;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40fa8fcbc9c90d500b66c8470b39caf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "0d5d4b61217e2b3559edf7001ae24c184bef94b8", "commitAfterChange": "2ead4bdcbfe85e4d5b336d70f2ec655c30027212", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " private boolean isPositionedCorrectly(IJavaElement element)", "signatureAfterChange": " private boolean isPositionedCorrectly(IJavaElement element)", "diff": ["-\tif (oldListItem == null)", "-\t\treturn false;", "-\tIJavaElement oldPrevious = oldListItem.previous;", "+\tif (oldListItem == null) return false;", "+\t", "-\tif (newListItem == null)", "-\t\treturn false;", "-\tIJavaElement newPrevious = newListItem.previous; ", "-\tif (oldPrevious == newPrevious)", "-\t\treturn true;", "-\tIJavaElement lastNewPrevious = null;", "-\twhile(lastNewPrevious != newPrevious) {", "-\t\tif (isIdentical((JavaElement)oldPrevious, (JavaElement)newPrevious))", "-\t\t\treturn true;", "-\t\tlastNewPrevious = newPrevious;", "-\t\t// if newPrevious is null at this time we should exit the loop.", "-\t\tif (newPrevious == null) break;", "-\t\tnewPrevious = (this.getNewPosition(newPrevious)).previous;", "+\tif (newListItem == null) return false;", "+\t", "+\tIJavaElement oldPrevious = oldListItem.previous;", "+\tIJavaElement newPrevious = newListItem.previous;", "+\tif (oldPrevious == null) {", "+\t\treturn newPrevious == null;", "+\t} else {", "+\t\treturn oldPrevious.equals(newPrevious);", "-\treturn false;"]}], "num": 64815}
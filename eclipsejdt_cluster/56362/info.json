{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c97f3e1f701b37e123eb41f1e242fb0a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb35a9e87d2d504a788b54af57fa6fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionCastTypeBinding.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["-\t\tif (this.singleAbstractMethod != null)", "-\t\t\treturn this.singleAbstractMethod;", "+\t\tint index = replaceWildcards ? 0 : 1;", "+\t\tif (this.singleAbstractMethod != null) {", "+\t\t\tif (this.singleAbstractMethod[index] != null)", "+\t\t\treturn this.singleAbstractMethod[index];", "+\t\t} else {", "+\t\t\tthis.singleAbstractMethod = new MethodBinding[2];", "+\t\t}", "-\t\t\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.IntersectionHasMultipleFunctionalInterfaces);", "+\t\t\t\t\t\treturn this.singleAbstractMethod[index] = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.IntersectionHasMultipleFunctionalInterfaces);", "-\t\treturn this.singleAbstractMethod = sam; // I don't see a value in building the notional interface described in 9.8 - it appears just pedantic/normative - perhaps it plays a role in wildcard parameterized types ?", "+\t\treturn this.singleAbstractMethod[index] = sam; // I don't see a value in building the notional interface described in 9.8 - it appears just pedantic/normative - perhaps it plays a role in wildcard parameterized types ?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2bb46874da4e8e2b0327d301056829e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["+\tint index = replaceWildcards ? 0 : 1;", "-\t\treturn this.singleAbstractMethod;", "+\t\tif (this.singleAbstractMethod[index] != null)", "+\t\treturn this.singleAbstractMethod[index];", "+\t} else {", "+\t\tthis.singleAbstractMethod = new MethodBinding[2];", "-\t\treturn this.singleAbstractMethod = samProblemBinding;", "+\t\treturn this.singleAbstractMethod[index] = samProblemBinding;", "-\t\treturn this.singleAbstractMethod = methods[0];", "+\t\treturn this.singleAbstractMethod[index] = methods[0];", "-\t\tthis.singleAbstractMethod = new MethodBinding(theAbstractMethod.modifiers, ", "+\t\tthis.singleAbstractMethod[index] = new MethodBinding(theAbstractMethod.modifiers, ", "-\t    this.singleAbstractMethod.typeVariables = theAbstractMethod.typeVariables;", "-\t\treturn this.singleAbstractMethod;", "+\t    this.singleAbstractMethod[index].typeVariables = theAbstractMethod.typeVariables;", "+\t\treturn this.singleAbstractMethod[index];", "-\treturn this.singleAbstractMethod = samProblemBinding;", "+\treturn this.singleAbstractMethod[index] = samProblemBinding;"]}], "num": 56362}
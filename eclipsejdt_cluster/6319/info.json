{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e2922140a721690102a8463bfe9ba4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095405b30eccf35fedbf94e71036fe30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int parentType) {\r", "-\t\tboolean isOnClasspath = this.isOnClasspath(classpath, res);\r", "-\t\tOpenable element = null;\r", "-\t\tboolean processChildren = true;\r", "-\t\tJavaProject project = null;\r", "-\t\tif (isOnClasspath) {\r", "-\t\t\tOpenable[] elements = this.createElements(res);\r", "-\t\t\tif (elements != null) {\r", "-\t\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\t\t\telement = elements[i];\r", "-\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t// check if current resource is now on classpath and determine the element type\r", "+\t\tboolean isOnClasspath = false;\r", "+\t\tint elementType = -1;\r", "+\t\tswitch (parentType) {\r", "+\t\t\tcase IJavaElement.JAVA_MODEL:\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\tisOnClasspath = this.isOnClasspath(res.getFullPath());\r", "+\t\t\t\tif (isOnClasspath) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t} else {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\tisOnClasspath = true;\r", "+\t\t\t\tif (res instanceof IFolder) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "+\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t}\t\t\t\t\t\t\r", "+\t\t\r", "+\t\tboolean processChildren = true;\r", "+\t\tif (isOnClasspath) {\r", "+\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create((IProject)res);\r", "-\t\t\t\tif (project == null) return false; // not a Java project\r", "-\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tif (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project\r", "+\t\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tclasspath = project.getExpandedClasspath(true);\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t}\r", "-\t\t\t\t// if classpath is known, we are for sure out of classpath: stop processing children\r", "-\t\t\t\tprocessChildren = classpath != null;\r", "+\t\t\t\t// not yet inside a package fragment root\r", "+\t\t\t\tprocessChildren = true;\r", "+\t\t\tOpenable element = null;\r", "-\t\t\t\tif (!traverseDelta(child, isOnClasspath ? null : classpath)) {\r", "+\t\t\t\tif (!traverseDelta(child, elementType)) {\r", "+\t\t\t\t\t\t\tif (element == null) {\r", "+\t\t\t\t\t\t\t\telement = this.createElement(res, elementType);\r", "+\t\t\t\t\t\t\t\tif (element == null) continue;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\tif (oneChildOnClasspath || project != null) {\r", "+\t\t\tif (oneChildOnClasspath || res instanceof IProject) {\r", "-\t\t\t\tif (project == null) {\r", "-\t\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "-\t\t\t\t}\r", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tif (orphanChildren[i] != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "-\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}", "+\t\t\t\tJavaProject project = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\tif (project != null) {\r", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tif (orphanChildren[i] != null) {\r", "+\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\r", "-\t\t\treturn isOnClasspath && element != null; // element is null if non-java resource in package\r", "+\t\t\treturn \r", "+\t\t\t\tisOnClasspath \r", "+\t\t\t\t\t&& (elementType == IJavaElement.COMPILATION_UNIT \r", "+\t\t\t\t\t\t|| elementType == IJavaElement.CLASS_FILE);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7ffd3027c9cfb98693fbd8f09bb3215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "feb6545df47d2c5c5dddbb92489d5f562545b32e", "commitAfterChange": "f2175e743261684fe3de1337b02bb7bc5e74c85c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject currentProject)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, int parentType) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject currentProject) {\r", "-\t\tboolean isOnClasspath = false;\r", "+\t\tIPath fullPath = res.getFullPath();\r", "+\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(fullPath);\r", "-\t\tswitch (parentType) {\r", "-\t\t\tcase IJavaElement.JAVA_MODEL:\r", "-\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "-\t\t\t\tisOnClasspath = this.isOnClasspath(res.getFullPath());\r", "-\t\t\t\tif (isOnClasspath) {\r", "-\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\tisOnClasspath = true;\r", "-\t\t\t\tif (res instanceof IFolder) {\r", "-\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tString extension = res.getFileExtension();\r", "-\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "-\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\tif (projectOfRoot != null) {\r", "+\t\t\tcurrentProject = projectOfRoot;\r", "+\t\t\tif (parentType == IJavaElement.JAVA_MODEL && delta.getKind() != IResourceDelta.CHANGED) {\r", "+\t\t\t\t// project is added or removed\r", "+\t\t\t\telementType = IJavaElement.JAVA_PROJECT;\r", "+\t\t\t} else {\r", "+\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tswitch (parentType) {\r", "+\t\t\t\tcase IJavaElement.JAVA_MODEL:\r", "+\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\t\tif (currentProject != null) {\r", "+\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t}\t\t\t\t\t\t\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t\tif (res instanceof IFolder) {\r", "+\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "+\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "-\t\tif (isOnClasspath) {\r", "+\t\tif (currentProject != null) {\r", "+\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "+\t\t\t\t// force the currentProject to be used\r", "+\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "+\t\t\t}\r", "+\t\tboolean result;\r", "-\t\t\t\tif (!traverseDelta(child, elementType)) {\r", "+\t\t\t\tif (!traverseDelta(child, elementType, currentProject)) {\r", "-\t\t\t\t\t\tif (isOnClasspath) { \r", "+\t\t\t\t\t\tif (currentProject != null) { \r", "+\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "+\t\t\t\t\t\t\t\t\t// force the currentProject to be used\r", "+\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\tJavaProject project = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "-\t\t\t\tif (project != null) {\r", "+\t\t\t\tJavaProject adoptiveProject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\tif (adoptiveProject != null) {\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(adoptiveProject, orphanChildren[i]);\r", "-\t\t\treturn isOnClasspath || oneChildOnClasspath;\r", "+\t\t\tresult = currentProject != null || oneChildOnClasspath;\r", "-\t\t\treturn \r", "-\t\t\t\tisOnClasspath \r", "+\t\t\tresult = \r", "+\t\t\t\tcurrentProject != null \r", "+\t\t\r", "+\t\t// other roots\r", "+\t\tHashSet set;\r", "+\t\tif ((set = (HashSet)this.otherRoots.get(fullPath)) != null) {\r", "+\t\t\tIterator iterator = set.iterator();\r", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();", "+\t\t\t\tthis.cloneCurrentDelta(project, res);", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\treturn result;\r"]}], "num": 6319}
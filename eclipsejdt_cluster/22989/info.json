{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfc78b453c6869ad77ed576b57a9b3ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d5e2d4895e00b473e1eaec989016fbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\t    StringBuffer buffer = new StringBuffer();", "+\t    if (text.depth >= this.javadocHtmlTagBuffers.length) {", "+\t    \tint length = this.javadocHtmlTagBuffers.length;", "+\t    \tSystem.arraycopy(this.javadocHtmlTagBuffers, 0, this.javadocHtmlTagBuffers = new StringBuffer[text.depth+6], 0, length);", "+\t    }", "+\t    StringBuffer buffer = this.javadocHtmlTagBuffers[text.depth];", "+\t    if (buffer == null) {", "+\t    \tbuffer = new StringBuffer();", "+\t    \tthis.javadocHtmlTagBuffers[text.depth] = buffer;", "+\t    } else {", "+\t    \tbuffer.setLength(0);", "+\t    }", "-\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tbuffer.setLength(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31078dbc25e04b76ec56b335869d2400", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public ReferenceBinding[] superInterfaces()", "signatureAfterChange": "     public ReferenceBinding[] superInterfaces()", "diff": ["+\t\t\t\tif (this.otherBounds != null) {", "+\t\t\t\t\t// augment super interfaces with the wildcard otherBounds (interfaces per construction)", "+\t\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\t\tint otherLength = this.otherBounds.length;", "+\t\t\t\t\tSystem.arraycopy(this.superInterfaces, 0, this.superInterfaces = new ReferenceBinding[length+otherLength], 0, length);", "+\t\t\t\t\tfor (int i = 0; i < otherLength; i++) {", "+\t\t\t\t\t\tthis.superInterfaces[length+i] = (ReferenceBinding) this.otherBounds[i];", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852969069f70665d5d7397dde9f1285b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public TypeBinding elementsType()", "signatureAfterChange": "  public TypeBinding elementsType()", "diff": ["-\tif (this.dimensions == 1) return this.leafComponentType;", "-\treturn this.environment.createArrayType(this.leafComponentType, this.dimensions - 1);", "+\tlong[] nullTagBitsSub = null;", "+\tif (this.nullTagBitsPerDimension != null) {", "+\t\tint len = this.nullTagBitsPerDimension.length-1;", "+\t\tSystem.arraycopy(this.nullTagBitsPerDimension, 1, nullTagBitsSub = new long[len], 0, len);", "+\t}", "+\tif (this.dimensions == 1) {", "+\t\tif (nullTagBitsSub != null && nullTagBitsSub[0] != 0L && this.leafComponentType instanceof ReferenceBinding)", "+\t\t\treturn this.environment.createParameterizedType((ReferenceBinding) this.leafComponentType, null, nullTagBitsSub[0], null);", "+\t\treturn this.leafComponentType;", "+\t}", "+\treturn this.environment.createArrayType(this.leafComponentType, this.dimensions - 1, nullTagBitsSub);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a15a57a3850e13e7877d535142267ce7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 43, "signatureBeforeChange": " protected void consumeOpenBlock()", "signatureAfterChange": " protected void consumeOpenBlock()", "diff": ["-", "+", "-\t\t\tthis.blockStarts, 0,", "-\t\t\tthis.blockStarts = new int[stackLength + StackIncrement], 0,", "-\t\t\tstackLength);", "+\t\t\t\tthis.blockStarts, 0,", "+\t\t\t\tthis.blockStarts = new int[stackLength + StackIncrement], 0,", "+\t\t\t\tstackLength);", "+\tif (requireExtendedRecovery()) {", "+\t\t// This is an epsilon production: We are in the state with kernel item: Block ::= .OpenBlock LBRACE BlockStatementsopt RBRACE", "+\t\tstackLength = this.stack.length;", "+\t\tif (++this.stateStackTop >= stackLength - 1) {   // Need two slots.", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.stack, 0,", "+\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "+\t\t\t\tstackLength);", "+\t\t}", "+\t\tthis.stack[this.stateStackTop++] = this.unstackedAct; // transition to Block ::= OpenBlock  .LBRACE BlockStatementsopt RBRACE", "+\t\tthis.stack[this.stateStackTop] = tAction(this.unstackedAct, this.currentToken); // transition to Block ::= OpenBlock LBRACE  .BlockStatementsopt RBRACE ", "+\t\tcommit();", "+\t\tthis.stateStackTop -= 2;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5054a0737aaf3bb7fcec38aa772f856", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "027433d18c80815de3076b7fd489422a48401f1a", "commitAfterChange": "e060e0428f7f92647e77ad8da2c7818eb4c4e3a7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration(int depth, Set knownTypes)", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration(int depth, Set knownTypes)", "diff": ["+\t\tint totalMethods = existingCount;", "+\t\tnext:", "+\t\t\tfor (int j = 0; j < existingCount; j++) {", "+\t\t\t\tif (methodDeclarations[j] == this.methods[i].methodDeclaration)", "+\t\t\t\t\tcontinue next;", "+\t\t\t}", "-\t\t\tmethodDeclarations[existingCount + i] = updatedMethod;", "+\t\t\tmethodDeclarations[totalMethods ++] = updatedMethod;", "+\t\tif (totalMethods != methodDeclarations.length)", "+\t\t\tSystem.arraycopy(methodDeclarations, 0, methodDeclarations = new AbstractMethodDeclaration[totalMethods], 0, totalMethods);"]}], "num": 22989}
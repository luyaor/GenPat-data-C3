{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46297e8b5e8c472a6a36fcd179b031a8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58cb2c065ff42a6c2baf84e2a43874e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "62bb0df3439a3337bf19f66c0d56ac16589e94ca", "commitAfterChange": "848e612d33c010bc83985e60213e8fbc07d0fc75", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic Alignment createAlignment(String name, int mode, int tieBreakRule, int count, int sourceRestart, int continuationIndent, boolean adjust)", "signatureAfterChange": "  \tpublic Alignment createAlignment(String name, int mode, int tieBreakRule, int count, int sourceRestart, int continuationIndent, boolean adjust)", "diff": ["-\t\t\tswitch(current.chunkKind) {", "-\t\t\t\tcase Alignment.CHUNK_METHOD :", "-\t\t\t\tcase Alignment.CHUNK_TYPE :", "-\t\t\t\t\tif ((mode & Alignment.M_INDENT_BY_ONE) != 0) {", "-\t\t\t\t\t\talignment.breakIndentationLevel = this.indentationLevel + (this.useTab ? 1 : this.tabSize);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\talignment.breakIndentationLevel = this.indentationLevel + (continuationIndent * (this.useTab ? 1 : this.tabSize));", "-\t\t\t\t\t}", "-\t\t\t\t\talignment.update();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Alignment.CHUNK_FIELD :", "-\t\t\t\t\tif ((mode & Alignment.M_INDENT_BY_ONE) != 0) {", "-\t\t\t\t\t\talignment.breakIndentationLevel = current.originalIndentationLevel + (this.useTab ? 1 : this.tabSize);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\talignment.breakIndentationLevel = current.originalIndentationLevel + (continuationIndent * (this.useTab ? 1 : this.tabSize));", "-\t\t\t\t\t}", "-\t\t\t\t\talignment.update();", "-\t\t\t\t\tbreak;", "+\t\t\tif (current.mode != Alignment.M_NO_ALIGNMENT) {", "+\t\t\t\tfinal int indentSize = this.useTab ? 1 : this.tabSize;", "+\t\t\t\tswitch(current.chunkKind) {", "+\t\t\t\t\tcase Alignment.CHUNK_METHOD :", "+\t\t\t\t\tcase Alignment.CHUNK_TYPE :", "+\t\t\t\t\t\tif ((mode & Alignment.M_INDENT_BY_ONE) != 0) {", "+\t\t\t\t\t\t\talignment.breakIndentationLevel = this.indentationLevel + indentSize;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\talignment.breakIndentationLevel = this.indentationLevel + continuationIndent * indentSize;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\talignment.update();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Alignment.CHUNK_FIELD :", "+\t\t\t\t\t\tif ((mode & Alignment.M_INDENT_BY_ONE) != 0) {", "+\t\t\t\t\t\t\talignment.breakIndentationLevel = current.originalIndentationLevel + indentSize;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\talignment.breakIndentationLevel = current.originalIndentationLevel + continuationIndent * indentSize;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\talignment.update();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04984c9ff0db0cb14a66948c7301b7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/DeclarationImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r     <A extends Annotation> A _getAnnotation(Class<A> annotationClass,\r                                             List<org.eclipse.jdt.core.dom.Annotation> annoInstances)", "signatureAfterChange": "      <A extends Annotation> A _getAnnotation(Class<A> annotationClass,                                             IResolvedAnnotation[] annoInstances)", "diff": ["-\r", "-    <A extends Annotation> A _getAnnotation(Class<A> annotationClass,\r", "-                                            List<org.eclipse.jdt.core.dom.Annotation> annoInstances)\r", "-    {\r", "-        final String annoTypeName = annotationClass.getName();\r", "-        if( annoInstances == null || annoInstances.size() == 0 ) return null;\r", "-        for( org.eclipse.jdt.core.dom.Annotation annoInstance :  annoInstances){\r", "-            final ITypeBinding binding = annoInstance.resolveTypeBinding();\r", "-            if(binding.isAnnotation() ){\r", "-                final String curTypeName = binding.getQualifiedName();\r", "-                if( annoTypeName.equals(curTypeName) ){\r", "-                    final AnnotationMirrorImpl annoMirror =\r", "-                        (AnnotationMirrorImpl)Factory.createAnnotationMirror(annoInstance, this, _env);\r", "-                    final AnnotationInvocationHandler handler = new AnnotationInvocationHandler(annoMirror);\r", "-                    return (A)Proxy.newProxyInstance(annotationClass.getClassLoader(),\r", "-                                                     new Class[]{ annotationClass }, handler );\r", "-                }\r", "-            }\r", "-        }\r", "-        return null;\r", "- \r", "-    }\r", "+", "+    <A extends Annotation> A _getAnnotation(Class<A> annotationClass,", "+                                            IResolvedAnnotation[] annoInstances)", "+    {", "+        final String annoTypeName = annotationClass.getName();", "+\t\tif( annoTypeName == null ) return null;", "+\t\tfinal int len = annoInstances == null ? 0 : annoInstances.length;", "+        if( len == 0 ) return null;", "+        for( IResolvedAnnotation annoInstance :  annoInstances){", "+            final ITypeBinding binding = annoInstance.getAnnotationType();", "+            if(binding.isAnnotation() ){", "+                final String curTypeName = binding.getQualifiedName();", "+                if( annoTypeName.equals(curTypeName) ){", "+                    final AnnotationMirrorImpl annoMirror =", "+                        (AnnotationMirrorImpl)Factory.createAnnotationMirror(annoInstance, this, _env);", "+                    final AnnotationInvocationHandler handler = new AnnotationInvocationHandler(annoMirror);", "+                    return (A)Proxy.newProxyInstance(annotationClass.getClassLoader(),", "+                                                     new Class[]{ annotationClass }, handler );", "+                }", "+            }", "+        }", "+        return null; ", "+    }"]}], "num": 22451}
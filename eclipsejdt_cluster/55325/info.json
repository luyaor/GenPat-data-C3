{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df39f55b3617a060c214bbabb1d3d72f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a41c1d39a4c708b26c27f6d41d3613", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "64adb94de0734c7d5adfd2cb11839ed3d3641dfc", "commitAfterChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 88, "signatureBeforeChange": "  \tpublic static void recreatePersistedContainer(String propertyName, String containerString, boolean addToContainerValues)", "signatureAfterChange": "  \tpublic static void recreatePersistedContainer(String propertyName, String containerString, boolean addToContainerValues)", "diff": ["-\t\t\tfinal String projectName = propertyName.substring(containerPrefixLength, index).trim();", "-\t\t\tJavaProject project = (JavaProject)getJavaModelManager().getJavaModel().getJavaProject(projectName);", "-\t\t\tif (!project.getProject().isAccessible()) return; // avoid leaking deleted project's persisted container", "-\t\t\tfinal IPath containerPath = new Path(propertyName.substring(index+1).trim());", "-\t\t\t", "-\t\t\tif (containerString == null || containerString.equals(CP_ENTRY_IGNORE)) {", "-\t\t\t\tgetJavaModelManager().containerPut(project, containerPath, null);", "-\t\t\t} else {", "-\t\t\t\tfinal IClasspathEntry[] containerEntries = project.decodeClasspath(containerString, false, false);", "-\t\t\t\tif (containerEntries != null && containerEntries != JavaProject.INVALID_CLASSPATH) {", "-\t\t\t\t\tIClasspathContainer container = new IClasspathContainer() {", "-\t\t\t\t\t\tpublic IClasspathEntry[] getClasspathEntries() {", "-\t\t\t\t\t\t\treturn containerEntries;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic String getDescription() {", "-\t\t\t\t\t\t\treturn \"Persisted container [\"+containerPath+\" for project [\"+ projectName+\"]\"; //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic int getKind() {", "-\t\t\t\t\t\t\treturn 0; ", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic IPath getPath() {", "-\t\t\t\t\t\t\treturn containerPath;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic String toString() {", "-\t\t\t\t\t\t\treturn getDescription();", "-\t\t\t\t\t\t}", "+\t\t\tString projectName = propertyName.substring(containerPrefixLength, index).trim();", "+\t\t\tIJavaProject project = getJavaModelManager().getJavaModel().getJavaProject(projectName);", "+\t\t\tIPath containerPath = new Path(propertyName.substring(index+1).trim());", "+\t\t\trecreatePersistedContainer(project, containerPath, containerString, addToContainerValues);", "+\t\t}", "+\t}", "-\t\t\t\t\t};", "-\t\t\t\t\tif (addToContainerValues) {", "-\t\t\t\t\t\tgetJavaModelManager().containerPut(project, containerPath, container);", "-\t\t\t\t\t}", "-\t\t\t\t\tMap projectContainers = (Map)getJavaModelManager().previousSessionContainers.get(project);", "-\t\t\t\t\tif (projectContainers == null){", "-\t\t\t\t\t\tprojectContainers = new HashMap(1);", "-\t\t\t\t\t\tgetJavaModelManager().previousSessionContainers.put(project, projectContainers);", "-\t\t\t\t\t}", "-\t\t\t\t\tprojectContainers.put(containerPath, container);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97375b32db6e14d61291783c064b7f87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "diff": ["-\t", "-\t\tMap projectContainers = (Map)JavaModelManager.Containers.get(project);", "-\t\tif (projectContainers == null){", "-\t\t\tprojectContainers = new HashMap(1);", "-\t\t\tJavaModelManager.Containers.put(project, projectContainers);", "-\t\t}", "-\t\tIClasspathContainer container = (IClasspathContainer)projectContainers.get(containerPath);", "-\t", "+", "+\t\tIClasspathContainer container = JavaModelManager.containerGet(project, containerPath);", "+", "-\t\t\t\tprojectContainers.put(containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\tSystem.out.println(\"CPContainer INIT - triggering initialization of: [\"+project.getElementName()+\"] \" + containerPath + \" using initializer: \"+ initializer); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t\t\tnew Exception(\"FAKE exception for dumping current CPContainer ([\"+project.getElementName()+\"] \"+ containerPath+ \")INIT invocation stack trace\").printStackTrace(); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t\t}", "+\t\t\t\tJavaModelManager.containerPut(project, containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles", "-\t\t\t\t\tcontainer = (IClasspathContainer)projectContainers.get(containerPath);", "+\t\t\t\t\tcontainer = JavaModelManager.containerGet(project, containerPath);", "-\t\t\t\t\tif (!ok) JavaModelManager.Containers.put(project, null); // flush cache", "-\t\t\t\t}", "-\t\t\t\tif (container != null){", "-\t\t\t\t\tprojectContainers.put(containerPath, container);", "+\t\t\t\t\tif (!ok) JavaModelManager.containerPut(project, containerPath, null); // flush cache", "-\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: [\"+project.getElementName()+\"] \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$//$NON-NLS-3$", "+\t\t\t} else {", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\tSystem.out.println(\"CPContainer INIT - no initializer found for: \"+project.getElementName()+\"] \" + containerPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}"]}], "num": 55325}
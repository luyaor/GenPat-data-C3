{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24d25d8d21bad97ef00864056ebd1dbb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307630d80575b66b6390ca58490106ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "da1ed68bc4edf753a4c670a981fc3b101d0548b0", "commitAfterChange": "d60a521aebaf899095636d4081476cd72ef03126", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected void processAnnotationResults(CompilationParticipantResult[] results)", "signatureAfterChange": "  protected void processAnnotationResults(CompilationParticipantResult[] results)", "diff": ["-\t// called AFTER the build loop once all source files have been compiled", "-", "+\tif (this.incrementalBuilder == null)", "+\t\tthis.incrementalBuilder = new IncrementalImageBuilder(this);", "+\tthis.incrementalBuilder.processAnnotationResults(results);", "+}", "-\t// this is a copy of the incremental build loop", "-\tIncrementalImageBuilder incrementalBuilder = new IncrementalImageBuilder(this);", "-\ttry {", "-\t\tincrementalBuilder.resetCollections();", "-\t\tincrementalBuilder.processAnnotationResults(results);", "-\t\tincrementalBuilder.addAffectedSourceFiles(); // pick up any affected source files of the deleted generated files", "-", "-\t\twhile (incrementalBuilder.sourceFiles.size() > 0) {", "-\t\t\tSourceFile[] allSourceFiles = new SourceFile[incrementalBuilder.sourceFiles.size()];", "-\t\t\tincrementalBuilder.sourceFiles.toArray(allSourceFiles);", "-\t\t\tincrementalBuilder.resetCollections();", "-", "-\t\t\tincrementalBuilder.workQueue.addAll(allSourceFiles);", "-\t\t\tincrementalBuilder.compile(allSourceFiles);", "-\t\t\tincrementalBuilder.removeSecondaryTypes();", "-\t\t\tincrementalBuilder.addAffectedSourceFiles();", "-\t\t}", "-\t} catch (CoreException e) {", "-\t\tthrow internalException(e);", "-\t} finally {", "-\t\tincrementalBuilder.cleanUp();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bdbefb4873c8e9e529a31c4b7136255", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "4e2e64c4f88c99c3e5a108d48b8090039fe7bc09", "commitAfterChange": "3cc60ef5ffdcff6661df47897d960b6759c64207", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tIBinding resolveName(Name name)", "signatureAfterChange": " \tIBinding resolveName(Name name)", "diff": ["-\t\t\t\tif (binding != null && binding.isValidBinding()) {", "-\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "-\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// it is a type", "-\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "-\t\t\t\t\t}", "+\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\t\t// it is a type", "+\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "-\t\t\t\treturn null;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\treturn null;", "+\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\treturn typeBinding.getPackage();", "-\t\t\t\treturn typeBinding.getPackage();", "-\t\t\t\tif (methodBinding == null) {", "-\t\t\t\t\treturn null;", "+\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\treturn methodBinding;", "-\t\t\t\treturn methodBinding;", "-\t\t\tif (typeBinding == null) {", "-\t\t\t\treturn null;", "+\t\t\tif (typeBinding != null) {", "+\t\t\t\treturn typeBinding;", "-\t\t\treturn typeBinding;", "-\t\t\t\tif (binding == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t} else if (binding.isValidBinding()) {", "-\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "-\t\t\t\t} else {", "-\t\t\t\t\t/*", "-\t\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=24449", "-\t\t\t\t\t */", "-\t\t\t\t\tif (binding instanceof ProblemFieldBinding) {", "-\t\t\t\t\t\tProblemFieldBinding problemFieldBinding = (ProblemFieldBinding) binding;", "-\t\t\t\t\t\tswitch(problemFieldBinding.problemId()) {", "-\t\t\t\t\t\t\tcase ProblemReasons.NotVisible : ", "-\t\t\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "-\t\t\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation :", "-\t\t\t\t\t\t\t\tReferenceBinding declaringClass = problemFieldBinding.declaringClass;", "-\t\t\t\t\t\t\t\tFieldBinding exactBinding = declaringClass.getField(problemFieldBinding.name);", "-\t\t\t\t\t\t\t\tif (exactBinding != null) {", "-\t\t\t\t\t\t\t\t\tIVariableBinding variableBinding2 = (IVariableBinding) this.compilerBindingsToASTBindings.get(exactBinding);", "-\t\t\t\t\t\t\t\t\tif (variableBinding2 != null) {", "+\t\t\t\tif (binding != null) {", "+\t\t\t\t\tif (binding.isValidBinding()) {", "+\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=24449", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tif (binding instanceof ProblemFieldBinding) {", "+\t\t\t\t\t\t\tProblemFieldBinding problemFieldBinding = (ProblemFieldBinding) binding;", "+\t\t\t\t\t\t\tswitch(problemFieldBinding.problemId()) {", "+\t\t\t\t\t\t\t\tcase ProblemReasons.NotVisible : ", "+\t\t\t\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\t\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation :", "+\t\t\t\t\t\t\t\t\tReferenceBinding declaringClass = problemFieldBinding.declaringClass;", "+\t\t\t\t\t\t\t\t\tFieldBinding exactBinding = declaringClass.getField(problemFieldBinding.name);", "+\t\t\t\t\t\t\t\t\tif (exactBinding != null) {", "+\t\t\t\t\t\t\t\t\t\tIVariableBinding variableBinding2 = (IVariableBinding) this.compilerBindingsToASTBindings.get(exactBinding);", "+\t\t\t\t\t\t\t\t\t\tif (variableBinding2 != null) {", "+\t\t\t\t\t\t\t\t\t\t\treturn variableBinding2;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tvariableBinding2 = new VariableBinding(this, exactBinding);", "+\t\t\t\t\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(exactBinding, variableBinding2);", "-\t\t\t\t\t\t\t\t\tvariableBinding2 = new VariableBinding(this, exactBinding);", "-\t\t\t\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(exactBinding, variableBinding2);", "-\t\t\t\t\t\t\t\t\treturn variableBinding2;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "-\t\t\tif (binding == null) {", "-\t\t\t\treturn null;", "-\t\t\t} else if (!binding.isValidBinding()) {", "-\t\t\t\tswitch(binding.problemId()) {", "-\t\t\t\t\tcase ProblemReasons.NotVisible : ", "-\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "-\t\t\t\t\t\tif (binding instanceof ProblemReferenceBinding) {", "-\t\t\t\t\t\t\tProblemReferenceBinding problemReferenceBinding = (ProblemReferenceBinding) binding;", "-\t\t\t\t\t\t\tBinding binding2 = problemReferenceBinding.original;", "-\t\t\t\t\t\t\tif (binding2 != null && binding2 instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding2);", "-\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn null;", "+\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\treturn this.getTypeBinding(binding.leafComponentType());", "-\t\t\treturn this.getTypeBinding(binding.leafComponentType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a45ae8db7d807515f55d6621d4c2b7b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "58ba36970b62e85055d743e983529c59c428ef51", "commitAfterChange": "62b67c6dc710fafde2d85e9a6368fb1e9d9e73c8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "signatureAfterChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "diff": ["-", "-\t\tPackageBinding unitPackage = compilationUnitScope().fPackage;", "-\t\t", "+", "-\t\t", "+\t\tPackageBinding unitPackage = compilationUnitScope().fPackage;", "-\t\tHashtableOfObject knownTypeParameterNames = new HashtableOfObject(length);", "-\t\tnextParameter : for (int i = 0; i < length; i++) {", "+\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t", "-\t\t\tif (knownTypeParameterNames.containsKey(typeParameter.name)) {", "-\t\t\t\tTypeVariableBinding previousBinding = (TypeVariableBinding) knownTypeParameterNames.get(typeParameter.name);", "-\t\t\t\tif (previousBinding != null) {", "-\t\t\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\t\t\tTypeParameter previousParameter = typeParameters[j];", "-\t\t\t\t\t\tif (previousParameter.binding == previousBinding) {", "-\t\t\t\t\t\t\tproblemReporter().duplicateTypeParameterInType(previousParameter);", "-\t\t\t\t\t\t\tpreviousParameter.binding = null;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tknownTypeParameterNames.put(typeParameter.name, null); // ensure that the duplicate parameter is found & removed", "-\t\t\t\tproblemReporter().duplicateTypeParameterInType(typeParameter);", "-\t\t\t\ttypeParameter.binding = null;", "-\t\t\t} else {", "-\t\t\t\tknownTypeParameterNames.put(typeParameter.name, parameterBinding);", "-\t\t\t\t// remember that we have seen a field with this name", "-\t\t\t\tif (parameterBinding != null)", "-\t\t\t\t\ttypeVariableBindings[count++] = parameterBinding;", "+", "+\t\t\t// detect duplicates, but keep each variable to reduce secondary errors with instantiating this generic type (assume number of variables is correct)", "+\t\t\tfor (int j = 0; j < count; j++) {", "+\t\t\t\tTypeVariableBinding knownVar = typeVariableBindings[j];", "+\t\t\t\tif (CharOperation.equals(knownVar.sourceName, typeParameter.name))", "+\t\t\t\t\tproblemReporter().duplicateTypeParameterInType(typeParameter);", "+\t\t\ttypeVariableBindings[count++] = parameterBinding;", "-\t\tif (count != length) {", "+\t\tif (count != length)", "-\t\t}"]}], "num": 26957}
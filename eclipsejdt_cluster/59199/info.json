{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c17f10ae7808dfa391bb021a88e4d36", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f08952f4e08243862b0ba0b3046a9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 51, "signatureBeforeChange": " \t \t \tprivate void assertNoOverlap(CopySourceInfo copySource)", "signatureAfterChange": " \t \t \tprivate void assertNoOverlap(ListRewriteEvent listEvent, int indexFirst, int indexLast, List innerList)", "diff": ["-\t", "-\tprivate void assertNoOverlap(CopySourceInfo copySource) {", "-\t\tASTNode parent= copySource.parent;", "-\t\tStructuralPropertyDescriptor childProperty= copySource.childProperty;", "-\t\tASTNode first= copySource.getStartNode();", "-\t\tASTNode last= copySource.getEndNode();", "-\t\tif (this.rangeCopySources != null) {", "-\t\t\tfor (Iterator iter= this.rangeCopySources.iterator(); iter.hasNext();) {", "-\t\t\t\tCopySourceInfo info= (CopySourceInfo) iter.next();", "-\t\t\t\tif (info.parent == parent && info.childProperty == childProperty) {", "-\t\t\t\t\tint currStart= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "-\t\t\t\t\tint currEnd= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "-\t\t\t\t\tif (currStart < indexFirst && currEnd < indexLast && currEnd >= indexFirst", "-\t\t\t\t\t\t\t|| currStart > indexFirst && currStart <= currEnd && currEnd > indexLast) {", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"Range overlapps with an existing copy or move range\"); //$NON-NLS-1$ ", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t", "+\tprivate void assertNoOverlap(ListRewriteEvent listEvent, int indexFirst, int indexLast, List innerList) {", "+\t\tfor (Iterator iter= innerList.iterator(); iter.hasNext();) {", "+\t\t\tNodeRangeInfo curr= (NodeRangeInfo) iter.next();", "+\t\t\tint currStart= listEvent.getIndex(curr.getStartNode(), ListRewriteEvent.BOTH);", "+\t\t\tint currEnd= listEvent.getIndex(curr.getEndNode(), ListRewriteEvent.BOTH);", "+\t\t\tif (currStart < indexFirst && currEnd < indexLast && currEnd >= indexFirst", "+\t\t\t\t\t|| currStart > indexFirst && currStart <= currEnd && currEnd > indexLast) {", "+\t\t\t\tthrow new IllegalArgumentException(\"Range overlapps with an existing copy or move range\"); //$NON-NLS-1$ "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4f86674603574226b4d2baa63586117", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "15c763ac6615f7cc88e86f760de59214880600df", "commitAfterChange": "a780ec07e5f5cdc097aff3cacfbf8119ccdab1c7", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \t \tprivate void assertNoOverlap(CopySourceInfo copySource)", "signatureAfterChange": " \t \t \tprivate void assertNoOverlap(CopySourceInfo copySource)", "diff": ["-\t\t// todo", "+\t\tASTNode parent= copySource.parent;", "+\t\tStructuralPropertyDescriptor childProperty= copySource.childProperty;", "+\t\tASTNode first= copySource.getStartNode();", "+\t\tASTNode last= copySource.getEndNode();", "+\t\t", "+\t\tListRewriteEvent listEvent= getListEvent(parent, childProperty, true);", "+\t\t", "+\t\tint indexFirst= listEvent.getIndex(first, ListRewriteEvent.OLD);", "+\t\tif (indexFirst == -1) {", "+\t\t\tthrow new IllegalArgumentException(\"Start node is not a original child of the given list\"); //$NON-NLS-1$", "+\t\t}", "+\t\tint indexLast= listEvent.getIndex(last, ListRewriteEvent.OLD);", "+\t\tif (indexLast == -1) {", "+\t\t\tthrow new IllegalArgumentException(\"End node is not a original child of the given list\"); //$NON-NLS-1$", "+\t\t}", "+", "+\t\tif (indexFirst > indexLast) {", "+\t\t\tthrow new IllegalArgumentException(\"Start node must be before end node\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (this.rangeCopySources != null) {", "+\t\t\tfor (Iterator iter= this.rangeCopySources.iterator(); iter.hasNext();) {", "+\t\t\t\tCopySourceInfo info= (CopySourceInfo) iter.next();", "+\t\t\t\tif (info.parent == parent && info.childProperty == childProperty) {", "+\t\t\t\t\tint currStart= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "+\t\t\t\t\tint currEnd= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "+\t\t\t\t\tif (currStart < indexFirst && currEnd < indexLast && currEnd >= indexFirst", "+\t\t\t\t\t\t\t|| currStart > indexFirst && currStart <= currEnd && currEnd > indexLast) {", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"Range overlapps with an existing copy or move range\"); //$NON-NLS-1$ ", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 59199}
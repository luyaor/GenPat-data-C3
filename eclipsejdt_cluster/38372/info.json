{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bde6cf95f8ca79fbc3ba61bcaa0186d3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e520f7301938ccb69a0c9a6a8169960", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "4880e7050cbb76e67af4ae410160ca2f22d74d64", "commitAfterChange": "39389abe47a577c54c69522deb2432e5ac3e85f5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["-\t\tint alternateLeftTypeId;", "+\t\tint alternateLeftTypeId = leftTypeId;", "-\t\t\talternateLeftTypeId = ((CastExpression)left).expression.resolvedType.id;", "-\t\t\tif (alternateLeftTypeId == leftTypeId) { // obvious identity cast", "-\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)left); ", "-\t\t\t\tleftIsCast = false;", "-\t\t\t}\t", "-\t\t} else {", "-\t\t\talternateLeftTypeId = leftTypeId;", "+\t\t\tif ((left.bits & UnnecessaryCastMask) == 0 && left.resolvedType.isBaseType()) {", "+ \t\t\t\t// narrowing conversion on base type may change value, thus necessary", "+ \t\t\t\tleftIsCast = false;", "+\t\t\t} else  {", "+\t\t\t\talternateLeftTypeId = ((CastExpression)left).expression.resolvedType.id;", "+\t\t\t\tif (alternateLeftTypeId == leftTypeId) { // obvious identity cast", "+\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)left); ", "+\t\t\t\t\tleftIsCast = false;", "+\t\t\t\t}\t", "+\t\t\t}", "-\t\tint alternateRightTypeId;", "+\t\tint alternateRightTypeId = rightTypeId;", "-\t\t\talternateRightTypeId = ((CastExpression)right).expression.resolvedType.id;", "-\t\t\tif (alternateRightTypeId == rightTypeId) { // obvious identity cast", "-\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)right); ", "-\t\t\t\trightIsCast = false;", "+\t\t\tif ((right.bits & UnnecessaryCastMask) == 0 && right.resolvedType.isBaseType()) {", "+ \t\t\t\t// narrowing conversion on base type may change value, thus necessary", "+ \t\t\t\trightIsCast = false;", "+\t\t\t} else {", "+\t\t\t\talternateRightTypeId = ((CastExpression)right).expression.resolvedType.id;", "+\t\t\t\tif (alternateRightTypeId == rightTypeId) { // obvious identity cast", "+\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)right); ", "+\t\t\t\t\trightIsCast = false;", "+\t\t\t\t}", "-\t\t} else {", "-\t\t\talternateRightTypeId = rightTypeId;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0a3d94c1deb5a62b5309b24a88d609e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\treturn type;", "+\t\t\t// perform capture conversion if read access", "+\t\t\treturn (type != null && (this.bits & IsStrictlyAssignedMASK) == 0)", "+\t\t\t\t\t? type.capture()", "+\t\t\t\t\t: type;", "-\t\t\tfield = scope.getField(type, token, this);", "+\t\t\tfield = scope.getField(type.capture(), token, this);", "-\t\treturn (otherBindings[otherBindingsLength - 1]).type;", "+\t\ttype = (otherBindings[otherBindingsLength - 1]).type;", "+\t\t// perform capture conversion if read access", "+\t\treturn (type != null && (this.bits & IsStrictlyAssignedMASK) == 0)", "+\t\t\t\t? type.capture()", "+\t\t\t\t: type;\t\t"]}], "num": 38372}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff4aa7f1f1b282c32b6c87f9a0fa7ad4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e32f206d68e5e429afab896b6196d7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "   public TypeBinding resolveType(BlockScope scope)", "diff": ["-", "-\tpublic TypeBinding resolveType(BlockScope scope) {", "-", "-\t\tconstant = Constant.NotAConstant;", "-\t\tif (receiver instanceof CastExpression\t// no cast check for ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression() instanceof NullLiteral) {", "-\t\t\tthis.receiver.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\t}\t\t", "-\t\tTypeBinding arrayType = receiver.resolveType(scope);", "-\t\tif (arrayType != null) {", "-\t\t\treceiver.computeConversion(scope, arrayType, arrayType);", "-\t\t\tif (arrayType.isArrayType()) {", "-\t\t\t\tTypeBinding elementType = ((ArrayBinding) arrayType).elementsType();", "-\t\t\t\tthis.resolvedType = ((this.bits & IsStrictlyAssigned) == 0) ? elementType.capture(scope, this.sourceEnd) : elementType;", "-\t\t\t} else {", "-\t\t\t\tscope.problemReporter().referenceMustBeArrayTypeAt(arrayType, this);", "-\t\t\t}", "+public TypeBinding resolveType(BlockScope scope) {", "+\tthis.constant = Constant.NotAConstant;", "+\tif (this.receiver instanceof CastExpression\t// no cast check for ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression() instanceof NullLiteral) {", "+\t\tthis.receiver.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "+\t}\t\t", "+\tTypeBinding arrayType = this.receiver.resolveType(scope);", "+\tif (arrayType != null) {", "+\t\tthis.receiver.computeConversion(scope, arrayType, arrayType);", "+\t\tif (arrayType.isArrayType()) {", "+\t\t\tTypeBinding elementType = ((ArrayBinding) arrayType).elementsType();", "+\t\t\tthis.resolvedType = ((this.bits & ASTNode.IsStrictlyAssigned) == 0) ? elementType.capture(scope, this.sourceEnd) : elementType;", "+\t\t} else {", "+\t\t\tscope.problemReporter().referenceMustBeArrayTypeAt(arrayType, this);", "-\t\tTypeBinding positionType = position.resolveTypeExpecting(scope, TypeBinding.INT);", "-\t\tif (positionType != null) {", "-\t\t\tposition.computeConversion(scope, TypeBinding.INT, positionType);", "-\t\t}", "-\t\treturn this.resolvedType;", "+\tTypeBinding positionType = this.position.resolveTypeExpecting(scope, TypeBinding.INT);", "+\tif (positionType != null) {", "+\t\tthis.position.computeConversion(scope, TypeBinding.INT, positionType);", "+\treturn this.resolvedType;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b7326750019fd17c7e73d453a89d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "14f89ca9b18a3480429e3f25bc68dd79b7e9f0db", "commitAfterChange": "eb21ce31e87e64ed6c3b487b0fe31d2556ab8015", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected IType resolveType(char[] packageName, char[] typeName, int acceptFlags)", "signatureAfterChange": " protected IType resolveType(char[] packageName, char[] typeName, int acceptFlags)", "diff": ["-\tif (fCodeResolve instanceof CompilationUnit && ((CompilationUnit)fCodeResolve).isWorkingCopy()) {", "-\t\tCompilationUnit wc = (CompilationUnit) fCodeResolve;", "+\tif (this.openable instanceof CompilationUnit && ((CompilationUnit)this.openable).isWorkingCopy()) {", "+\t\tCompilationUnit wc = (CompilationUnit) this.openable;", "-\t\tIPackageFragment[] pkgs = fNameLookup.findPackageFragments(", "+\t\tIPackageFragment[] pkgs = this.nameLookup.findPackageFragments(", "-\t\t\ttype= fNameLookup.findType(new String(typeName), pkgs[i], false, acceptFlags);", "+\t\t\ttype= this.nameLookup.findType(new String(typeName), pkgs[i], false, acceptFlags);", "-\t\t\tif (fCodeResolve != null && fCodeResolve.getParent().getElementName().equals(pName)) {", "+\t\t\tif (this.openable != null && this.openable.getParent().getElementName().equals(pName)) {", "-\t\t\t\t\tArrayList list = ((JavaElement)fCodeResolve).getChildrenOfType(IJavaElement.TYPE);", "+\t\t\t\t\tArrayList list = this.openable.getChildrenOfType(IJavaElement.TYPE);"]}], "num": 63312}
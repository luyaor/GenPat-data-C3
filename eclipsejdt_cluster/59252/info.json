{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1eb6cdb4180760c5fd83ed9e2a2bd4d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8ae50fb6f517d3746d2a52ea501180", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "2314c16241660b35014c2f51be7d9e9dcaef9a58", "commitAfterChange": "ceea24195947a1526b56f97d57fd4f7128a7bbd1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testCreateBindings01() throws JavaModelException", "signatureAfterChange": " \tpublic void testCreateBindings01() throws JavaModelException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[3];", "-\t\ttry {", "-\t\t\tworkingCopies[0] = getWorkingCopy(", "-\t\t\t\t\"/P/src/X.java\", ", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  public void foo(int i, String s) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\towner, false);", "-\t\t\tworkingCopies[1] = getWorkingCopy(", "-\t\t\t\t\"/P/src/Y.java\", ", "-\t\t\t\t\"public class Y extends X {\\n\" +", "-\t\t\t\t\"  void bar() {\\n\" +", "-\t\t\t\t\"    new Y() {};\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\towner, false);", "-\t\t\tworkingCopies[2] = getWorkingCopy(", "-\t\t\t\t\"/P/src/I.java\", ", "-\t\t\t\t\"public interface I {\\n\" +", "-\t\t\t\t\"  int BAR;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\towner, false);", "-\t\t\tIType typeX = workingCopies[0].getType(\"X\");", "-\t\t\tIJavaElement[] elements = new IJavaElement[] {", "-\t\t\t\ttypeX, ", "-\t\t\t\tgetClassFile(\"P\", getExternalJCLPathString(), \"java.lang\", \"Object.class\").getType(),", "-\t\t\t\ttypeX.getMethod(\"foo\", new String[] {\"I\", \"QString;\"}),", "-\t\t\t\tworkingCopies[2].getType(\"I\").getField(\"BAR\"),", "-\t\t\t\tworkingCopies[1].getType(\"Y\").getMethod(\"bar\", new String[0]).getType(\"\", 1)", "-\t\t\t};", "-\t\t\tIBinding[] bindings = parser.createBindings(elements, null);", "-\t\t\tassertBindingsEqual(", "-\t\t\t\t\"LX;\\n\" + ", "-\t\t\t\t\"Ljava/lang/Object;\\n\" + ", "-\t\t\t\t\"LX;.foo(ILjava/lang/String;)V\\n\" + ", "-\t\t\t\t\"LI;.BAR\\n\" + ", "-\t\t\t\t\"LY$1;\",", "-\t\t\t\tbindings);", "-\t\t} finally {", "-\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {", "-\t\t\t\tif (workingCopies[i] != null)", "-\t\t\t\t\tworkingCopies[i].discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tthis.workingCopies = new ICompilationUnit[3];", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/P/src/X.java\", ", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo(int i, String s) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\",", "+\t\t\towner, false);", "+\t\tthis.workingCopies[1] = getWorkingCopy(", "+\t\t\t\"/P/src/Y.java\", ", "+\t\t\t\"public class Y extends X {\\n\" +", "+\t\t\t\"  void bar() {\\n\" +", "+\t\t\t\"    new Y() {};\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\",", "+\t\t\towner, false);", "+\t\tthis.workingCopies[2] = getWorkingCopy(", "+\t\t\t\"/P/src/I.java\", ", "+\t\t\t\"public interface I {\\n\" +", "+\t\t\t\"  int BAR;\\n\" +", "+\t\t\t\"}\",", "+\t\t\towner, false);", "+\t\tIType typeX = this.workingCopies[0].getType(\"X\");", "+\t\tIJavaElement[] elements = new IJavaElement[] {", "+\t\t\ttypeX, ", "+\t\t\tgetClassFile(\"P\", getExternalJCLPathString(), \"java.lang\", \"Object.class\").getType(),", "+\t\t\ttypeX.getMethod(\"foo\", new String[] {\"I\", \"QString;\"}),", "+\t\t\tthis.workingCopies[2].getType(\"I\").getField(\"BAR\"),", "+\t\t\tthis.workingCopies[1].getType(\"Y\").getMethod(\"bar\", new String[0]).getType(\"\", 1)", "+\t\t};", "+\t\tIBinding[] bindings = parser.createBindings(elements, null);", "+\t\tassertBindingsEqual(", "+\t\t\t\"LX;\\n\" + ", "+\t\t\t\"Ljava/lang/Object;\\n\" + ", "+\t\t\t\"LX;.foo(ILjava/lang/String;)V\\n\" + ", "+\t\t\t\"LI;.BAR\\n\" + ", "+\t\t\t\"LY$1;\",", "+\t\t\tbindings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c273476e587cac673d9c224f8a97553f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tconstant = NotAConstant;", "+\t\tthis.constant = NotAConstant;", "-\t\t\tthis.resolvedType = type.resolveType((ClassScope)scope);", "+\t\t\tthis.resolvedType = this.type.resolveType((ClassScope)scope);", "-\t\t\tthis.resolvedType = type.resolveType((BlockScope)scope);", "+\t\t\tthis.resolvedType = this.type.resolveType((BlockScope)scope);", "-\t\tif (arguments != null) {", "+\t\tif (this.arguments != null) {", "-\t\t\tint length = arguments.length;", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocationType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocationType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, this.binding, scope.getModifiers());", "-\t\tif (isMethodUseDeprecated(binding, scope)) {", "-\t\t\tscope.problemReporter().deprecatedMethod(binding, this);", "-\t\t}", "-", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "+\t\tif (isMethodUseDeprecated(this.binding, scope)) {", "+\t\t\tscope.problemReporter().javadocDeprecatedMethod(this.binding, this, scope.getModifiers());"]}], "num": 59252}
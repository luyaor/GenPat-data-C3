{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36d41e3718d2f8d3432cd682530c583c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c9d2cb950d265edc8fb86ebbc0f289", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic ConfigurableOption[] getConfigurableOptions(Locale locale)", "signatureAfterChange": "\r public ConfigurableOption[] getConfigurableOptions(Locale locale)", "diff": ["-\t */\r", "-\tpublic ConfigurableOption[] getConfigurableOptions(Locale locale) {\r", "-\t\tString componentName = Compiler.class.getName();\r", "-\t\treturn new ConfigurableOption[] {\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"debug.vars\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(produceDebugAttributes & Vars) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"debug.lines\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(produceDebugAttributes & Lines) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"debug.source\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(produceDebugAttributes & Source) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"debug.preserveAllLocals\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\tpreserveAllLocalVariables ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalError.unReachableCode\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(errorThreshold & UnreachableCode) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalError.importProblem\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(errorThreshold & ImportProblem) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalWarning.methodWithConstructorName\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(warningThreshold & MethodWithConstructorName) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalWarning.overridingPackageDefaultMethod\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(warningThreshold & OverriddenPackageDefaultMethod) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalWarning.deprecated\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(warningThreshold & UsingDeprecatedAPI) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalWarning.maskedCatchBlock\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(warningThreshold & MaskedCatchBlock) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalWarning.unusedLocalVariable\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(warningThreshold & UnusedLocalVariable) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalWarning.unusedArgument\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(warningThreshold & UnusedArgument) != 0 ? 0 : 1),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"binaryCompatibility.targetJDK\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\ttargetJDK),\r", "-\t\t\tnew ConfigurableOption(\r", "-\t\t\t\tcomponentName,\r", "-\t\t\t\t\"optionalWarning.accessEmulation\",\r", "-\t\t\t\tlocale,\r", "-\t\t\t\t(warningThreshold & AccessEmulation) != 0 ? 0 : 1)};\r", "+ */\r", "+public ConfigurableOption[] getConfigurableOptions(Locale locale) {\r", "+\tString componentName = Compiler.class.getName();\r", "+\treturn new ConfigurableOption[] {\r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"debug.vars\", \r", "+\t\t\tlocale, \r", "+\t\t\t(produceDebugAttributes & Vars) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"debug.lines\", \r", "+\t\t\tlocale, \r", "+\t\t\t(produceDebugAttributes & Lines) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"debug.source\", \r", "+\t\t\tlocale, \r", "+\t\t\t(produceDebugAttributes & Source) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"debug.preserveAllLocals\", \r", "+\t\t\tlocale, \r", "+\t\t\tpreserveAllLocalVariables ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalError.unReachableCode\", \r", "+\t\t\tlocale, \r", "+\t\t\t(errorThreshold & UnreachableCode) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalError.importProblem\", \r", "+\t\t\tlocale, \r", "+\t\t\t(errorThreshold & ImportProblem) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.methodWithConstructorName\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & MethodWithConstructorName) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.overridingPackageDefaultMethod\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & OverriddenPackageDefaultMethod) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.deprecated\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & UsingDeprecatedAPI) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.maskedCatchBlock\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & MaskedCatchBlock) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.unusedLocalVariable\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & UnusedLocalVariable) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.unusedArgument\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & UnusedArgument) != 0 ? 0 : 1), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"binaryCompatibility.targetJDK\", \r", "+\t\t\tlocale, \r", "+\t\t\ttargetJDK), \r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.accessEmulation\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & AccessEmulation) != 0 ? 0 : 1),\r", "+\t\tnew ConfigurableOption(\r", "+\t\t\tcomponentName,\r", "+\t\t\t\"optionalWarning.nonExternalizedString\", \r", "+\t\t\tlocale, \r", "+\t\t\t(warningThreshold & NonExternalizedString) != 0 ? 0 : 1)\r", "+\t\t}; \r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d31cc28d0ff6346544c51b2c460d6404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public CompilerOptions(ConfigurableOption[] settings)", "signatureAfterChange": "\r public CompilerOptions(Map settings)", "diff": ["-public CompilerOptions(ConfigurableOption[] settings){\r", "+public CompilerOptions(Map settings){\r", "-\tString componentName = Compiler.class.getName();\r", "-\tfor (int i = 0, max = settings.length; i < max; i++){\r", "-\t\tif (settings[i].getComponentName().equals(componentName)){\r", "-\t\t\tthis.setOption(settings[i]);\r", "+\tObject[] entries = settings.entrySet().toArray();\r", "+\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\tString optionID = (String) entry.getKey();\r", "+\t\tString optionValue = (String) entry.getValue();\r", "+\t\t\r", "+\t\t// Local variable attribute\r", "+\t\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Vars;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)){\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Vars;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}  \r", "+\t\t// Line number attribute\t\r", "+\t\tif(optionID.equals(OPTION_LineNumberAttribute)) {\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Lines;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Lines;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Source file attribute\t\r", "+\t\tif(optionID.equals(OPTION_SourceFileAttribute)) {\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Source;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Source;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Preserve unused local\t\r", "+\t\tif(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "+\t\t\tif (optionValue.equals(PRESERVE)) {\r", "+\t\t\t\tthis.preserveAllLocalVariables = true;\r", "+\t\t\t} else if (optionValue.equals(OPTIMIZE_OUT)) {\r", "+\t\t\t\tthis.preserveAllLocalVariables = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unreachable code\t\t\t\t\r", "+\t\tif(optionID.equals(OPTION_ReportUnreachableCode)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold |= UnreachableCode;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report invalid import\t\r", "+\t\tif(optionID.equals(OPTION_ReportInvalidImport)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= ImportProblem;\r", "+\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\tthis.warningThreshold |= ImportProblem;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Define the target JDK tag for .classfiles\r", "+\t\tif(optionID.equals(OPTION_TargetPlatform)){\r", "+\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_1;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_2;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_3;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_4;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report method with constructor name\r", "+\t\tif(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold |= MethodWithConstructorName;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report overriding package default method\r", "+\t\tif(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report deprecation\r", "+\t\tif(optionID.equals(OPTION_ReportDeprecation)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report hidden catch block\r", "+\t\tif(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold |= MaskedCatchBlock;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unused local variable\r", "+\t\tif(optionID.equals(OPTION_ReportUnusedLocal)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold |= UnusedLocalVariable;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unused parameter\r", "+\t\tif(optionID.equals(OPTION_ReportUnusedParameter)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold |= UnusedArgument;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report synthetic access emulation\r", "+\t\tif(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold |= AccessEmulation;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t// Report non-externalized string literals\r", "+\t\tif(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold |= NonExternalizedString;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t}\r", "+\t\t// Report usage of 'assert' as an identifier\r", "+\t\tif(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t// Set the source compatibility mode (assertions)\r", "+\t\tif(optionID.equals(OPTION_Source)){\r", "+\t\t\tif (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\tthis.assertMode = false;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\tthis.assertMode = true;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r"]}], "num": 63468}
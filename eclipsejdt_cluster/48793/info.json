{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "960406e5dda7366c275e62c8cd33b3ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4269654f174c6083eb617a3e6d7fbe71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "42e53b3c82f631cac5341438af4d88461f281652", "commitAfterChange": "d8ceda9e2c634a0a60e12aec6892fc13a5bff2e9", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\t\tnodeSet.addMatch(node, this.patternLocator.resolveLevel(node));", "+\t\t\t\tif (node instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\t// special case for javadoc single type reference", "+\t\t\t\t\tJavadocSingleTypeReference singleRef = (JavadocSingleTypeReference) node;", "+\t\t\t\t\tif (singleRef.packageBinding != null) {", "+\t\t\t\t\t\tchar[][] tokens = new char[][] { singleRef.token };", "+\t\t\t\t\t\tlong[] positions = new long[] { (((long) singleRef.sourceStart) << 32) + singleRef.sourceEnd };", "+\t\t\t\t\t\tint tagStart = singleRef.tagSourceStart;", "+\t\t\t\t\t\tint tagEnd = singleRef.tagSourceEnd;", "+\t\t\t\t\t\tJavadocImportReference importRef = new JavadocImportReference(tokens, positions, tagStart, tagEnd);", "+\t\t\t\t\t\tthis.patternLocator.matchLevelAndReportImportRef(importRef, singleRef.packageBinding, this);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (node instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t// special case for javadoc qualified type reference", "+\t\t\t\t\tJavadocQualifiedTypeReference qualifRef = (JavadocQualifiedTypeReference) node;", "+\t\t\t\t\tif (qualifRef.packageBinding != null) {", "+\t\t\t\t\t\tchar[][] tokens = qualifRef.tokens;", "+\t\t\t\t\t\tlong[] positions = qualifRef.sourcePositions;", "+\t\t\t\t\t\tint tagStart = qualifRef.tagSourceStart;", "+\t\t\t\t\t\tint tagEnd = qualifRef.tagSourceEnd;", "+\t\t\t\t\t\tJavadocImportReference importRef = new JavadocImportReference(tokens, positions, tagStart, tagEnd);", "+\t\t\t\t\t\tthis.patternLocator.matchLevelAndReportImportRef(importRef, qualifRef.packageBinding, this);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\tnodeSet.addMatch(node, this.patternLocator.resolveLevel(node));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff630f9eac2d944455dda51b6ffc0bde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "425360de9982cb851072283681a98ff148472fdd", "commitAfterChange": "da52556acc57ef6517941f460f831ee862406473", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\t} else {", "-\t\t\t\tif (node instanceof JavadocSingleTypeReference) {", "-\t\t\t\t\t// special case for javadoc single type reference", "-\t\t\t\t\tJavadocSingleTypeReference singleRef = (JavadocSingleTypeReference) node;", "-\t\t\t\t\tif (singleRef.packageBinding != null) {", "-\t\t\t\t\t\tchar[][] tokens = new char[][] { singleRef.token };", "-\t\t\t\t\t\tlong[] positions = new long[] { (((long) singleRef.sourceStart) << 32) + singleRef.sourceEnd };", "-\t\t\t\t\t\tint tagStart = singleRef.tagSourceStart;", "-\t\t\t\t\t\tint tagEnd = singleRef.tagSourceEnd;", "-\t\t\t\t\t\tJavadocImportReference importRef = new JavadocImportReference(tokens, positions, tagStart, tagEnd);", "-\t\t\t\t\t\tthis.patternLocator.matchLevelAndReportImportRef(importRef, singleRef.packageBinding, this);", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (node instanceof JavadocQualifiedTypeReference) {", "-\t\t\t\t\t// special case for javadoc qualified type reference", "-\t\t\t\t\tJavadocQualifiedTypeReference qualifRef = (JavadocQualifiedTypeReference) node;", "-\t\t\t\t\tif (qualifRef.packageBinding != null) {", "-\t\t\t\t\t\tchar[][] tokens = qualifRef.tokens;", "-\t\t\t\t\t\tlong[] positions = qualifRef.sourcePositions;", "-\t\t\t\t\t\tint tagStart = qualifRef.tagSourceStart;", "-\t\t\t\t\t\tint tagEnd = qualifRef.tagSourceEnd;", "-\t\t\t\t\t\tJavadocImportReference importRef = new JavadocImportReference(tokens, positions, tagStart, tagEnd);", "-\t\t\t\t\t\tthis.patternLocator.matchLevelAndReportImportRef(importRef, qualifRef.packageBinding, this);", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t}"]}], "num": 48793}
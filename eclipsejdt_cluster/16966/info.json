{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4a4a28a9dad62bc397e29ea2d3109bd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82c49558c726354ba3e8a8a980bac674", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "07500b3aefa58aecd5e846627b7c70382793f29f", "commitAfterChange": "641c18a6fa8d154329ae2bcdac1ab25ff8b18f71", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic static synchronized GeneratedFileManager getGeneratedFileManager(final IProject project)", "signatureAfterChange": "             public void run(IProgressMonitor monitor)", "diff": ["-\t */", "-\tpublic static synchronized GeneratedFileManager getGeneratedFileManager(final IProject project) ", "-\t{", "-\t\tif ( project == null )", "-\t\t\treturn null;", "-\t\t", "-\t\tif ( ! _initialized ) ", "-\t\t\tinit();", "-\t\tGeneratedFileManager gfm = MANAGERS_MAP.get(project);", "-\t\tif (gfm != null)", "-\t\t\treturn gfm;", "-", "-\t\tgfm = new GeneratedFileManager(project);", "-\t\tMANAGERS_MAP.put(project, gfm);", "-\t\treturn gfm;", "+\t\tfinal IWorkspaceRunnable runnable = new IWorkspaceRunnable(){", "+            public void run(IProgressMonitor monitor)", "+            {\t\t", "+            \tif( srcFolder != null ){", "+\t            \ttry{", "+\t            \t\tsrcFolder.delete(true, false, null);", "+\t            \t}catch(CoreException e){", "+\t            \t\tAptPlugin.log(e, \"failed to delete old generated source folder \" + srcFolder.getName() ); //$NON-NLS-1$", "+\t            \t}catch(OperationCanceledException cancel){", "+\t            \t\tAptPlugin.log(cancel, \"deletion of generated source folder got cancelled\"); //$NON-NLS-1$", "+\t            \t}", "+            \t}", "+            };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be9eeda20f5c7bfd603b8daa0275e75e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "b4f6df5ae08d61af8762ee59e5c247a670be227d", "commitAfterChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void removeFolder()", "signatureAfterChange": " \tprivate void removeFolder()", "diff": ["-\t\tIFolder srcFolder = null;", "+\t\tfinal IFolder srcFolder;", "-\t\ttry {\t", "-\t\t\tClasspathUtil.removeFromProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );\t\t", "+\t\ttry {", "+\t\t\tif (srcFolder.isDerived()) {", "+\t\t\t\tClasspathUtil.removeFromProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );", "+\t\t\t}", "-\t\tFileSystemUtil.deleteFolder(srcFolder);", "+\t\tfinal IWorkspaceRunnable runnable = new IWorkspaceRunnable(){", "+\t        public void run(IProgressMonitor monitor)", "+\t        {\t\t", "+            \ttry {", "+            \t\tFileSystemUtil.deleteDerivedResources(srcFolder);", "+            \t} catch(CoreException e) {", "+            \t\tAptPlugin.log(e, \"failed to delete old generated source folder \" + srcFolder.getName() ); //$NON-NLS-1$", "+            \t} catch(OperationCanceledException cancel) {", "+            \t\tAptPlugin.log(cancel, \"deletion of generated source folder got cancelled\"); //$NON-NLS-1$", "+            \t}", "+\t        }", "+\t    };", "+\t    IWorkspace ws = ResourcesPlugin.getWorkspace();", "+\t    try{", "+\t    \tws.run(runnable, ws.getRoot(), IWorkspace.AVOID_UPDATE, null);", "+\t    }catch(CoreException e){", "+\t\t\tAptPlugin.log(e, \"Runnable for deleting old generated source folder \" + srcFolder.getName() + \" failed.\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad902351d1027ec7ef67802cb81f88e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "68e3f5a0117daa8b48e901ad002544900745ebec", "commitAfterChange": "c8a4dfe61867281668d74378b928130cf2069288", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["+\t\t", "+\t\tClass javacClass = Javac.class;", "+\t\t", "+\t\t/*", "+\t\t * Read in the compiler arguments first since we might need to modify", "+\t\t * the classpath if any access rules were specified", "+\t\t */", "+\t\tString [] compilerArgs = processCompilerArguments(javacClass);", "-        Class javacClass = Javac.class;", "-\t\tcmd.createArgument().setPath(classpath);", "+\t\tcreateClasspathArgument(cmd, classpath);", "-        ", "-       // retrieve the method getCurrentCompilerArgs() using reflect", "-        // This is done to improve the compatibility to ant 1.5", "-        Method getCurrentCompilerArgsMethod = null;", "-        try {", "-\t        getCurrentCompilerArgsMethod = javacClass.getMethod(\"getCurrentCompilerArgs\", null); //$NON-NLS-1$", "-        } catch(NoSuchMethodException e) {", "-        \t// if not found, then we cannot use this method (ant 1.5)", "-        \t// debug level is only available with ant 1.5.x", "-        }", "- \t    String[] compilerArgs = null;", "-        if (getCurrentCompilerArgsMethod != null) {", "-\t\t\ttry {", "-\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(this.attributes, null);", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\t// should never happen", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\t// should never happen", "-\t\t\t}", "-    \t}"]}], "num": 16966}
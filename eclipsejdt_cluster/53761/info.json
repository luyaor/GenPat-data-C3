{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "296c90268b59ba5a443ea3212c6ec172", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6edc81fd1fa541bfc511ffa3f187f020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "b4f6df5ae08d61af8762ee59e5c247a670be227d", "commitAfterChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public OutputStream createClassFile(String name) throws IOException", "signatureAfterChange": "     public OutputStream createClassFile(String typeName) throws IOException", "diff": ["-    public OutputStream createClassFile(String name) throws IOException ", "+    public OutputStream createClassFile(String typeName) throws IOException ", "+    \tif (typeName == null)", "+    \t\tthrow new IllegalArgumentException(\"Type name cannot be null\"); //$NON-NLS-1$", "+    \tif (\"\".equals(typeName)) //$NON-NLS-1$", "+    \t\tthrow new IllegalArgumentException(\"Type name cannot be empty\"); //$NON-NLS-1$", "+", "-    \tpath = path.append(name.replace('.', File.separatorChar) + \".class\"); //$NON-NLS-1$", "+    \tpath = path.append(typeName.replace('.', File.separatorChar) + \".class\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea1488616f76e1320fa27535134882a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "7f5e906484d36443cfeeaa5a767b999e30565c9e", "commitAfterChange": "0d1d10149bf9c26b080c1a4904327c7f2e8ddf98", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject javaProject)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject project)", "diff": ["-\t\tIJavaProject javaProject) {\r", "+\t\tIJavaProject project) {\r", "+\t\t\t\r", "+\t\tif (source == null) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r", "+\t\tif (unitName == null && project != null) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r", "+\t\tif (project == null) {\r", "+\t\t\t// this just reuces to the other simplest case\r", "+\t\t\treturn parseCompilationUnit(source);\r", "+\t\t}\r", "-\t\tif (javaProject != null) {\r", "-\t\t\t// If resolveBindings is true, we need to record the mod count\r", "-\t\t\t// once newAST has been constructed. If the mod count goes above\r", "-\t\t\t// this level, someone is modifying the AST and all bets are off\r", "-\t\t\t// regarding resolved bindings. All existing binding info should be\r", "-\t\t\t// discarded, and the various public resolveBinding methods should\r", "-\t\t\t// thereafter return null.\r", "-\t\t\ttry {\r", "-\t\t\t\tcompilationUnitDeclaration =\r", "-\t\t\t\t\tCompilationUnitResolver.resolve(\r", "-\t\t\t\t\t\tsource,\r", "-\t\t\t\t\t\tunitName,\r", "-\t\t\t\t\t\tjavaProject,\r", "-\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "-\t\t\t\treturn convert(compilationUnitDeclaration, source);\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn parseCompilationUnit(source);\r", "+\t\t// FIXME - If resolveBindings is true, we need to record the mod count\r", "+\t\t// once newAST has been constructed. If the mod count goes above\r", "+\t\t// this level, someone is modifying the AST and all bets are off\r", "+\t\t// regarding resolved bindings. All existing binding info should be\r", "+\t\t// discarded, and the various public resolveBinding methods should\r", "+\t\t// thereafter return null.\r", "+\t\ttry {\r", "+\t\t\tcompilationUnitDeclaration =\r", "+\t\t\t\tCompilationUnitResolver.resolve(\r", "+\t\t\t\t\tsource,\r", "+\t\t\t\t\tunitName,\r", "+\t\t\t\t\tproject,\r", "+\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "+\t\t\treturn convert(compilationUnitDeclaration, source);\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\t// FIXME - if this exception can happen, it needs to be converted\r", "+\t\t\t// to an appropriate RuntimeException of some ilk\r", "+\t\t// FIXME - this method must not return null!\r"]}], "num": 53761}
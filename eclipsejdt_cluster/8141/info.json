{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d0df5553049f41fa3259ccf5110a8af", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b83908871dead86b2fefb2feca9198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tconstant = NotAConstant;", "-\t\tif (this.receiver instanceof CastExpression) this.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tthis.constant = NotAConstant;", "-\t\t\tthis.receiverType = receiver.resolveType((ClassScope)scope);", "+\t\t\tthis.receiverType = this.receiver.resolveType((ClassScope) scope);", "-\t\t\tthis.receiverType = receiver.resolveType((BlockScope)scope);", "+\t\t\tthis.receiverType = this.receiver.resolveType((BlockScope) scope);", "-\t\tif (arguments != null) {", "+\t\tif (this.arguments != null) {", "-\t\t\tint length = arguments.length;", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\tExpression argument = arguments[i];", "+\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\tif(receiverType instanceof ReferenceBinding) {", "-\t\t\t\t\t// record any selector match, for clients who may still need hint about possible method match", "-\t\t\t\t\tthis.codegenBinding = this.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "-\t\t\t\t}\t\t\t", "-\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.receiverType, argumentTypes, scope.getModifiers());", "-\t\tthis.codegenBinding = this.binding = scope.getMethod(this.receiverType, selector, argumentTypes, this); ", "-\t\tif (!binding.isValidBinding()) {", "-\t\t\tif (binding.declaringClass == null) {", "+\t\tthis.codegenBinding = this.binding = scope.getMethod(this.receiverType, this.selector, argumentTypes, this); ", "+\t\tif (!this.binding.isValidBinding()) {", "+\t\t\tif (this.binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = (ReferenceBinding) this.receiverType;", "+\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.receiverType;", "-\t\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\t\t\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.receiverType, argumentTypes, scope.getModifiers());", "-\t\t\tscope.problemReporter().invalidMethod(this, binding);", "+\t\t\tscope.problemReporter().javadocInvalidMethod(this, this.binding, scope.getModifiers());", "-\t\t\tif (binding instanceof ProblemMethodBinding){", "-\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\t\tif (this.binding instanceof ProblemMethodBinding){", "+\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)this.binding).closestMatch;", "-\t\t\treturn this.resolvedType = binding == null ? null : binding.returnType;", "+\t\t\treturn this.resolvedType = this.binding == null ? null : this.binding.returnType;", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "-\t\t}", "-\t\tif (isMethodUseDeprecated(binding, scope)) {", "-\t\t\tscope.problemReporter().deprecatedMethod(binding, this);", "+\t\tif (isMethodUseDeprecated(this.binding, scope)) {", "+\t\t\tscope.problemReporter().javadocDeprecatedMethod(this.binding, this, scope.getModifiers());", "-\t\treturn this.resolvedType = binding.returnType;", "+\t\treturn this.resolvedType = this.binding.returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ab2b49034c0574aadf1418472aa3312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean receiverCast = false, argumentsCast = false; ", "+\tboolean receiverCast = false, argsContainCast = false; ", "-\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.receiver);\t\t", "+\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.receiver);\t\t", "+\t// resolve type arguments (for generic constructor call)", "+\tif (this.typeArguments != null) {", "+\t\tint length = this.typeArguments.length;", "+\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif ((this.genericTypeArguments[i] = this.typeArguments[i].resolveType(scope)) == null) {", "+\t\t\t\targHasError = true;", "+\t\t\t}", "+\t\t}", "+\t\tif (argHasError) {", "+\t\t\treturn null;", "+\t\t}", "+\t}\t", "-\t\t\t\targumentsCast = true;", "+\t\t\t\targsContainCast = true;", "-\t\t\t\tthis.codegenBinding = this.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "+\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "-\tif (this.receiverType == null)", "+\tif (this.receiverType == null) {", "-", "+\t}", "-\tthis.codegenBinding = this.binding = ", "+\tthis.binding = ", "-\t\t// record the closest match, for clients who may still need hint about possible method match", "-\t\tif (binding instanceof ProblemMethodBinding){", "-\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "-\t\t\tif (closestMatch != null) this.codegenBinding = this.binding = closestMatch;", "+\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\tswitch (this.binding.problemId()) {", "+\t\t\tcase ProblemReasons.Ambiguous :", "+\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation :", "+\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\tcase ProblemReasons.ReceiverTypeNotVisible :", "+\t\t\tcase ProblemReasons.ParameterBoundMismatch :", "+\t\t\t\t// only steal returnType in cases listed above", "+\t\t\t\tif (closestMatch != null) this.resolvedType = closestMatch.returnType;", "+\t\t\tdefault :", "-\t\treturn this.resolvedType = this.binding == null ? null : this.binding.returnType;", "+\t\t// record the closest match, for clients who may still need hint about possible method match", "+\t\tif (closestMatch != null) this.binding = closestMatch;", "+\t\treturn this.resolvedType;", "-\tif (arguments != null) {", "-\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t}", "-\t\tif (argumentsCast) {", "-\t\t\tCastExpression.checkNeedForArgumentCasts(scope, this.receiver, receiverType, binding, this.arguments, argumentTypes, this);", "-\t\t}", "-\t}", "+\tif (this.arguments != null) ", "+\t\tcheckInvocationArguments(scope, this.receiver, receiverType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+", "-\treturn this.resolvedType = binding.returnType;", "+\treturn this.resolvedType = this.binding.returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96b000006e3402ea05e1a56c60e7ed37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "9528b13b60b5267a27dfdeac3b8ea9a804476535", "commitAfterChange": "ef0d751764a03bfb7b7e9d8838fc454e1e51fa0c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.qualifyingType = this.receiverType = receiver.resolveType(scope); ", "-\tif (receiverCast && this.receiverType != null) {", "+\tthis.actualReceiverType = receiver.resolveType(scope); ", "+\tif (receiverCast && this.actualReceiverType != null) {", "-\t\tif (((CastExpression)this.receiver).expression.resolvedType == this.receiverType) { ", "+\t\tif (((CastExpression)this.receiver).expression.resolvedType == this.actualReceiverType) { ", "-\t\t\tif(receiverType instanceof ReferenceBinding) {", "+\t\t\tif(actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "+\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)actualReceiverType, selector, new TypeBinding[]{}, this);", "-\tif (this.receiverType == null) {", "+\tif (this.actualReceiverType == null) {", "-\tif (this.receiverType.isBaseType()) {", "-\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\tif (this.actualReceiverType.isBaseType()) {", "+\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "-\t\t\t: scope.getMethod(this.receiverType, selector, argumentTypes, this); ", "+\t\t\t: scope.getMethod(this.actualReceiverType, selector, argumentTypes, this); ", "-\t\t\tif (this.receiverType instanceof ReferenceBinding) {", "-\t\t\t\tbinding.declaringClass = (ReferenceBinding) this.receiverType;", "+\t\t\tif (this.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\tbinding.declaringClass = (ReferenceBinding) this.actualReceiverType;", "-\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "-\t\tTypeBinding expectedQualifyingType = this.qualifyingType.erasure().isCompatibleWith(this.binding.declaringClass.erasure())", "-\t\t\t? this.qualifyingType", "+\t\tTypeBinding expectedReceiverType = this.actualReceiverType.erasure().isCompatibleWith(this.binding.declaringClass.erasure())", "+\t\t\t? this.actualReceiverType", "-\t\treceiver.computeConversion(scope, expectedQualifyingType, receiverType);", "-\t\tif (expectedQualifyingType != this.qualifyingType) this.qualifyingType = expectedQualifyingType;", "+\t\treceiver.computeConversion(scope, expectedReceiverType, actualReceiverType);", "+\t\tif (expectedReceiverType != this.actualReceiverType) this.actualReceiverType = expectedReceiverType;", "-\t\tif (!receiver.isImplicitThis() && binding.declaringClass != receiverType) {", "+\t\tif (!receiver.isImplicitThis() && binding.declaringClass != actualReceiverType) {", "-\t\tcheckInvocationArguments(scope, this.receiver, receiverType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\tcheckInvocationArguments(scope, this.receiver, actualReceiverType, binding, this.arguments, argumentTypes, argsContainCast, this);"]}], "num": 8141}
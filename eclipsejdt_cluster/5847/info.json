{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0a384224f8374a1ea742eb75eef65de", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76fac7eecbc93aa1596c0b5f71503775", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "34b4972480c62fc99b17d4728db2648e98460b52", "commitAfterChange": "a234173ab4d645c8990c97cafa00ec82ce0a909f", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void test_annotation_import_007()", "signatureAfterChange": " public void test_missing_default_annotation_01()", "diff": ["-// using nullness defaulting to nonnull, missing annotation types, no longer a problem", "-public void test_annotation_import_007() {", "-\tMap customOptions = getCompilerOptions();", "-\tcustomOptions.put(JavaCore.COMPILER_PB_NULL_SPECIFICATION_INSUFFICIENT_INFO, JavaCore.ERROR);", "-\tcustomOptions.put(JavaCore.COMPILER_NULLABLE_ANNOTATION_NAME, \"org.foo.MayBeNull\");", "-\tcustomOptions.put(JavaCore.COMPILER_NONNULL_ANNOTATION_NAME, \"org.foo.MustNotBeNull\");", "-\tcustomOptions.put(JavaCore.COMPILER_NONNULL_IS_DEFAULT, JavaCore.ENABLED);", "-\trunConformTestWithLibs(", "-\t\tnew String[] {", "-\t\t\t\"Lib.java\",", "-\t\t\t\"public class Lib {\\n\" +", "-\t\t\t\"    Object getObject() { return new Object(); }\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"    Object getObject(Lib l) {\\n\" +", "-\t\t\t\"        return l.getObject();\\n\" +", "-\t\t\t\"    }\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t},", "-\t\tcustomOptions,", "-\t\t\"\");", "-}", "+// test missing default nullness annotation for types in default package", "+public void test_missing_default_annotation_01() {", "+\tcustomOptions.put(JavaCore.COMPILER_PB_MISSING_NONNULL_BY_DEFAULT_ANNOTATION, JavaCore.ERROR);", "+\trunNegativeTestWithLibs(", "+\t\t\t\"Lib.java\",", "+\t\t\t\"public class Lib {\\n\" +", "+\t\t\t\"    Object getObject() { return new Object(); }\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t class XInner{}\\n\" +  // don't warn for inner types", "+\t\t\t\"    Object getObject(Lib l) {\\n\" +", "+\t\t\t\"        return l.getObject();\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\tcustomOptions,", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Lib.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class Lib {\\n\" + ", "+\t\t\"\t             ^^^\\n\" + ", "+\t\t\"A default nullness annotation has not been specified for the type Lib\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class X {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"A default nullness annotation has not been specified for the type X\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7be2bb5bc28a3f9f04636788518a0bff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c218bc0b3cb8966af8e948021d2d770d85b0b8fd", "commitAfterChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " public void test166() throws Exception", "signatureAfterChange": " public void test166() throws Exception", "diff": ["-\t\t\"The enum X already defines the method valueOf(String) implicitly\\n\" + ", "+\t\t\"The enum X already defines the method valueOf(String) implicitly\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "+\t\t\"\tint i = valueOf(\\\"\\\");\\n\" +", "+\t\t\"\t        ^^^^^^^^^^^\\n\" +", "+\t\t\"Type mismatch: cannot convert from X to int\\n\" + ", "-\t\t\"  // Method descriptor #20 (Ljava/lang/String;)I\\n\" + ", "-\t\t\"  // Stack: 3, Locals: 2\\n\" + ", "-\t\t\"  private int valueOf(java.lang.String arg0);\\n\" + ", "+\t\t\"public final enum X {\\n\" + ", "+\t\t\"  \\n\" + ", "+\t\t\"  // Method descriptor #6 (Ljava/lang/String;I)V\\n\" + ", "+\t\t\"  // Stack: 3, Locals: 3\\n\" + ", "+\t\t\"  private X(java.lang.String arg0, int arg1);\\n\" + ", "-\t\t\"     4  ldc <String \\\"Unresolved compilation problem: \\\\n\\\\tThe enum X already defines the method valueOf(String) implicitly\\\\n\\\"> [10]\\n\" + ", "+\t\t\"     4  ldc <String \\\"Unresolved compilation problems: \\\\n\\\\tThe enum X already defines the method valueOf(String) implicitly\\\\n\\\\tType mismatch: cannot convert from X to int\\\\n\\\"> [10]\\n\" + ", "-\t\t\"        [pc: 0, pc: 10] local: arg0 index: 1 type: java.lang.String\\n\";", "+\t\t\"  \\n\" + ", "+\t\t\"  // Method descriptor #20 ()V\\n\" + ", "+\t\t\"  // Stack: 3, Locals: 1\\n\" + ", "+\t\t\"  void foo();\\n\" + ", "+\t\t\"     0  new java.lang.Error [8]\\n\" + ", "+\t\t\"     3  dup\\n\" + ", "+\t\t\"     4  ldc <String \\\"Unresolved compilation problem: \\\\n\\\\tType mismatch: cannot convert from X to int\\\\n\\\"> [21]\\n\" + ", "+\t\t\"     6  invokespecial java.lang.Error(java.lang.String) [12]\\n\" + ", "+\t\t\"     9  athrow\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 5]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 10] local: this index: 0 type: X\\n\" + ", "+\t\t\"}\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96dcb3db5e077927b5d6c5d6a41bade0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 724, "signatureBeforeChange": " public void test718()", "signatureAfterChange": " public void test718()", "diff": ["-\t\t\"1. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"\tpublic class ActionImpl<T extends Base> extends Action<T> implements Comparable<ActionImpl> {\\n\" + ", "+\t\t\"\t                                                                                ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tpublic int compareTo(ActionImpl o) {\\n\" + ", "+\t\t\"\t                     ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t                                  ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 23)\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 23)\\n\" + "]}], "num": 5847}
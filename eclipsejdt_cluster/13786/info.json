{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e62a8af0eb7ffaea15850054e3562687", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf4041afd0c94fa3368741e512f61c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "60c2bc018036adec276a35610a48178fdcffa8a6", "commitAfterChange": "269987b22b1df921e21c67a56b711a3bfe74424a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "signatureAfterChange": " public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "diff": ["-\tIPath path= this.getPath();", "-\tIClasspathEntry[] entries= this.getJavaProject().getRawClasspath();", "-\tfor (int i= 0; i < entries.length; i++) {", "-\t\tIClasspathEntry entry = entries[i];", "-\t", "-\t\tswitch (entry.getEntryKind()) {", "-\t\t\tcase IClasspathEntry.CPE_PROJECT:", "-\t\t\t\t// a root's project always refers directly to the root", "-\t\t\t\t// no need to follow the project reference", "-\t\t\t\tcontinue;", "-\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "-\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(entry.getPath(), this.getJavaProject());", "-\t\t\t\tif (container != null){", "-\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "-\t\t\t\t\tfor (int j = 0; j < containerEntries.length; j++){", "-\t\t\t\t\t\tIClasspathEntry containerEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);", "-\t\t\t\t\t\tif (containerEntry != null && path.equals(containerEntry.getPath())) {", "-\t\t\t\t\t\t\treturn entry; // answer original entry", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "-\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);", "-\t\t\t\t// don't break so as to run default", "-\t\t\tdefault:", "-\t\t\t\tif (entry != null && path.equals(entry.getPath())) {", "-\t\t\t\t\treturn entries[i];", "-\t\t\t\t}", "-\t\t}", "+", "+\tIClasspathEntry rawEntry = null;", "+\tIJavaProject project = this.getJavaProject();", "+\tproject.getResolvedClasspath(true); // force the reverse rawEntry cache to be populated", "+\tJavaModelManager.PerProjectInfo perProjectInfo = ", "+\t\tJavaModelManager.getJavaModelManager().getPerProjectInfoCheckExistence(project.getProject());", "+\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "+\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(this.getPath());", "-\treturn null;", "+\treturn rawEntry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "827be27ec447c832ee956c95ae364d36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "3a3ca727e1e500c3d6b0ad819fadf89c915d5e87", "commitAfterChange": "306e7b103a906df37630519d508932b224bba2de", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void internalGenerateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": "  \tprivate void internalGenerateCode(ClassScope classScope, ClassFile classFile)", "diff": ["+", "+\t\t", "+\t\t\t", "+", "+", "-\t\t\tinitializerScope.computeLocalVariablePositions(argSize, codeStream);", "-\t\t\t// offset by the argument size (since not linked to method scope)", "+\t\t\tinitializerScope.computeLocalVariablePositions(argSize, codeStream); // offset by the argument size (since not linked to method scope)", "+\t\t\tboolean needFieldInitializations = constructorCall != null && constructorCall.accessMode != ExplicitConstructorCall.This;", "+\t\t\t// post 1.4 source level, synthetic initializations occur prior to explicit constructor call", "+\t\t\tboolean preInitSyntheticFields = scope.environment().options.targetJDK >= CompilerOptions.JDK1_4;", "+", "+\t\t\tif (needFieldInitializations && preInitSyntheticFields){", "+\t\t\t\tgenerateSyntheticFieldInitializationsIfNecessary(scope, codeStream, declaringClass);", "+\t\t\t}\t\t\t", "-\t\t\tif ((constructorCall != null)", "-\t\t\t\t&& (constructorCall.accessMode != ExplicitConstructorCall.This)) {", "-\t\t\t\t// generate synthetic fields initialization", "-\t\t\t\tif (declaringClass.isNestedType()) {", "-\t\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) declaringClass;", "-\t\t\t\t\tSyntheticArgumentBinding[] syntheticArgs =", "-\t\t\t\t\t\tnestedType.syntheticEnclosingInstances();", "-\t\t\t\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;", "-\t\t\t\t\t\ti < max;", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\t\tif (syntheticArgs[i].matchingField != null) {", "-\t\t\t\t\t\t\tcodeStream.aload_0();", "-\t\t\t\t\t\t\tcodeStream.load(syntheticArgs[i]);", "-\t\t\t\t\t\t\tcodeStream.putfield(syntheticArgs[i].matchingField);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tsyntheticArgs = nestedType.syntheticOuterLocalVariables();", "-\t\t\t\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;", "-\t\t\t\t\t\ti < max;", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\t\tif (syntheticArgs[i].matchingField != null) {", "-\t\t\t\t\t\t\tcodeStream.aload_0();", "-\t\t\t\t\t\t\tcodeStream.load(syntheticArgs[i]);", "-\t\t\t\t\t\t\tcodeStream.putfield(syntheticArgs[i].matchingField);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\tif (needFieldInitializations) {", "+\t\t\t\tif (!preInitSyntheticFields){", "+\t\t\t\t\tgenerateSyntheticFieldInitializationsIfNecessary(scope, codeStream, declaringClass);"]}], "num": 13786}
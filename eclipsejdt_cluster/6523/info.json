{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d2055f2500605bf48d1aa61da592b76", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d8997103a62d3889380f7e7afceb25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "signatureAfterChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "diff": ["+\t\tTypeBinding varArgsType = null;", "+\t\tboolean passThrough = false;", "-\t\t\tboolean passThrough = false;", "-\t\t\t\t\tTypeBinding varArgsType = methodBinding.parameters[varArgPos];", "+\t\t\t\t\tvarArgsType = methodBinding.parameters[varArgPos];", "-\t\t\t\tExpression argument = arguments[i];", "-\t\t\t\t// prefer check based on type annotations:", "-\t\t\t\tint severity = findNullTypeAnnotationMismatch(expectedType, argument.resolvedType);", "-\t\t\t\tif (severity > 0) {", "-\t\t\t\t\t// immediate reporting:", "-\t\t\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, severity==1, currentScope.environment());", "-\t\t\t\t\t// next check flow-based null status against null JDK15-style annotations:", "-\t\t\t\t} else if (hasJDK15NullAnnotations && methodBinding.parameterNonNullness[i] == Boolean.TRUE) {", "-\t\t\t\t\tint nullStatus = argument.nullStatus(flowInfo, flowContext); // slight loss of precision: should also use the null info from the receiver.", "-\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL) // if required non-null is not provided", "-\t\t\t\t\t\tflowContext.recordNullityMismatch(currentScope, argument, argument.resolvedType, expectedType, nullStatus);", "+\t\t\t\tanalyseOneArgument18(currentScope, flowContext, flowInfo, expectedType, arguments[i]);", "+\t\t\t}", "+\t\t\tif (!passThrough && varArgsType instanceof ArrayBinding) {", "+\t\t\t\tTypeBinding expectedType = ((ArrayBinding) varArgsType).elementsType();", "+\t\t\t\tfor (int i = numParamsToCheck; i < arguments.length; i++) {", "+\t\t\t\t\tanalyseOneArgument18(currentScope, flowContext, flowInfo, expectedType, arguments[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7f08b8448f011d4d7e056eb56bfce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "b93a217fe6b68aa2016c37812b125d5d097ba1a3", "commitAfterChange": "1beaef02926dace59f07acb73879fd00f7c0b3eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "signatureAfterChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "diff": ["+\tif (argument instanceof ConditionalExpression && argument.isPolyExpression()) {", "+\t\t// drill into both branches using existing nullStatus per branch:", "+\t\tConditionalExpression ce = (ConditionalExpression) argument;", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfTrue, ce.ifTrueNullStatus, expectedNonNullness, originalExpected);", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfFalse, ce.ifFalseNullStatus, expectedNonNullness, originalExpected);", "+\t\treturn;", "+\t}", "-\t", "+\tinternalAnalyseOneArgument18(currentScope, flowContext, expectedType, argument, nullStatus,", "+\t\t\t\t\t\t\t\t\texpectedNonNullness, originalExpected);", "+}"]}], "num": 6523}
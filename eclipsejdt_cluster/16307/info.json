{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf1da3016b5d803b9e75f68d2074fc95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20dfda46d38b4ea9f16c06c3a570e888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "da518c52dcbfe044bb9f162f86d0c3f3de2bc467", "commitAfterChange": "1bc1a66dee8786645fc203b9ded688e657fbf446", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "diff": ["-\t    if (originalType.isTypeVariable()) {", "-\t        TypeVariableBinding originalVariable = (TypeVariableBinding) originalType;", "-\t\t    ParameterizedTypeBinding currentType = this;", "-\t        while (true) {", "-\t\t        TypeVariableBinding[] typeVariables = currentType.type.typeVariables();", "-\t\t        int length = typeVariables.length;", "-\t\t        // check this variable can be substituted given parameterized type", "-\t\t        if (originalVariable.rank < length && typeVariables[originalVariable.rank] == originalVariable) {", "-\t\t\t\t    // lazy init, since cannot do so during binding creation if during supertype connection", "-\t\t\t\t    if (currentType.arguments == null)  currentType.initializeArguments();", "-\t\t\t\t    if (currentType.arguments != null)", "-\t\t\t           return currentType.arguments[originalVariable.rank];", "+\t\tswitch (originalType.bindingType()) {", "+\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER:", "+\t\t        TypeVariableBinding originalVariable = (TypeVariableBinding) originalType;", "+\t\t\t    ParameterizedTypeBinding currentType = this;", "+\t\t        while (true) {", "+\t\t\t        TypeVariableBinding[] typeVariables = currentType.type.typeVariables();", "+\t\t\t        int length = typeVariables.length;", "+\t\t\t        // check this variable can be substituted given parameterized type", "+\t\t\t        if (originalVariable.rank < length && typeVariables[originalVariable.rank] == originalVariable) {", "+\t\t\t\t\t    // lazy init, since cannot do so during binding creation if during supertype connection", "+\t\t\t\t\t    if (currentType.arguments == null)  currentType.initializeArguments();", "+\t\t\t\t\t    if (currentType.arguments != null)", "+\t\t\t\t           return currentType.arguments[originalVariable.rank];", "+\t\t\t        }", "+\t\t\t\t    // recurse on enclosing type, as it may hold more substitutions to perform", "+\t\t\t\t    ReferenceBinding enclosing = currentType.enclosingType();", "+\t\t\t\t    if (!(enclosing instanceof ParameterizedTypeBinding))", "+\t\t\t\t        break;", "+\t\t\t\t    currentType = (ParameterizedTypeBinding) enclosing;", "-\t\t\t    // recurse on enclosing type, as it may hold more substitutions to perform", "-\t\t\t    ReferenceBinding enclosing = currentType.enclosingType();", "-\t\t\t    if (!(enclosing instanceof ParameterizedTypeBinding))", "-\t\t\t        break;", "-\t\t\t    currentType = (ParameterizedTypeBinding) enclosing;", "-\t        }", "-\t    } else if (originalType.isParameterizedType()) {", "-\t        ParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "-\t\t\treturn this.environment.createRawType(originalParameterizedType.type, originalParameterizedType.enclosingType());", "-\t    } else  if (originalType.isGenericType()) {", "-            return this.environment.createRawType((ReferenceBinding)originalType, null);", "-\t    } else if (originalType.isArrayType()) {", "-\t\t\tTypeBinding originalLeafComponentType = originalType.leafComponentType();", "-\t\t\tTypeBinding substitute = substitute(originalLeafComponentType); // substitute could itself be array type", "-\t\t\tif (substitute != originalLeafComponentType) {", "-\t\t\t\treturn this.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());", "-\t\t\t}", "+\t\t        break;", "+\t\t        ", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t        ParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "+\t\t\t\treturn this.environment.createRawType(originalParameterizedType.type, originalParameterizedType.enclosingType());", "+\t\t\t\t", "+\t\t\tcase Binding.GENERIC_TYPE:", "+\t            return this.environment.createRawType((ReferenceBinding)originalType, null);", "+\t            ", "+\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\tTypeBinding originalLeafComponentType = originalType.leafComponentType();", "+\t\t\t\tTypeBinding substitute = substitute(originalLeafComponentType); // substitute could itself be array type", "+\t\t\t\tif (substitute != originalLeafComponentType) {", "+\t\t\t\t\treturn this.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47260ba6efbea8b4741b60210fc84847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding right)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding right)", "diff": ["-\tif (right.isArrayType()) {", "-\t\tArrayBinding rightArray = (ArrayBinding) right;", "-\t\tif (rightArray.leafComponentType.isBaseType())", "-\t\t\treturn false; // relying on the fact that all equal arrays are identical", "-\t\tif (dimensions == rightArray.dimensions)", "-\t\t\treturn leafComponentType.isCompatibleWith(rightArray.leafComponentType);", "-\t\tif (dimensions < rightArray.dimensions)", "-\t\t\treturn false; // cannot assign 'String[]' into 'Object[][]' but can assign 'byte[][]' into 'Object[]'", "-\t} else {", "-\t\tif (right.isBaseType())", "+\tswitch (right.kind()) {", "+\t\tcase Binding.ARRAY_TYPE :", "+\t\t\tArrayBinding rightArray = (ArrayBinding) right;", "+\t\t\tif (rightArray.leafComponentType.isBaseType())", "+\t\t\t\treturn false; // relying on the fact that all equal arrays are identical", "+\t\t\tif (dimensions == rightArray.dimensions)", "+\t\t\t\treturn leafComponentType.isCompatibleWith(rightArray.leafComponentType);", "+\t\t\tif (dimensions < rightArray.dimensions)", "+\t\t\t\treturn false; // cannot assign 'String[]' into 'Object[][]' but can assign 'byte[][]' into 'Object[]'", "+\t\t\tbreak;", "+\t\tcase Binding.BASE_TYPE :", "-\t\tif (right.isWildcard()) {", "+\t\tcase Binding.WILDCARD_TYPE :", "-\t\t}"]}], "num": 16307}
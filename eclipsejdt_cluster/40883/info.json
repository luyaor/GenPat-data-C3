{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b50cd1728197b19d5edfa9e95b143c48", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35491dc4d69462d94ec6c6b4ec37284e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "signatureAfterChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "diff": ["-\t\t// diet parse", "-\t\tIFile file = ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(new String(sourceUnit.getFileName())));", "-\t\tCompilationUnit compilationUnit = (CompilationUnit)JavaCore.create(file);", "-\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(sourceUnit, this, file, compilationUnit);", "-", "-\t\t// build bindings", "-\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit);", "-\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, true);", "+\t\t// Switch the current policy and compilation result for this unit to the requested one.", "+\t\tCompilationResult unitResult =", "+\t\t\tnew CompilationResult(sourceUnit, totalUnits, totalUnits, this.options.maxProblemsPerUnit);", "+\t\ttry {", "+\t\t\t// diet parsing for large collection of unit", "+\t\t\tCompilationUnitDeclaration parsedUnit;", "+\t\t\tMatchingNodeSet originalMatchSet = this.parser.matchSet;", "+\t\t\ttry {", "+\t\t\t\tthis.parser.matchSet = new MatchingNodeSet(this);", "+\t\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\t\tparsedUnit = parser.parse(sourceUnit, unitResult);", "+\t\t\t\t} else {", "+\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnit, unitResult);", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tthis.parser.matchSet = originalMatchSet;", "+\t\t\t}", "-\t\t// remember parsed unit", "-\t\tImportReference pkg = parsedUnit.currentPackage;", "-\t\tchar[][] packageName = pkg == null ? null : pkg.tokens;", "-\t\tchar[] mainTypeName = sourceUnit.getMainTypeName();", "-\t\tchar[] qualifiedName = packageName == null ? mainTypeName : CharOperation.concatWith(packageName, mainTypeName, '.');", "-\t\tthis.parsedUnits.put(qualifiedName, parsedUnit);", "+\t\t\t// initial type binding creation", "+\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "+\t\t\tthis.addCompilationUnit(sourceUnit, parsedUnit);", "+\t", "+\t\t\t// binding resolution", "+\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit);", "+\t\t} catch (AbortCompilationUnit e) {", "+\t\t\t// at this point, currentCompilationUnitResult may not be sourceUnit, but some other", "+\t\t\t// one requested further along to resolve sourceUnit.", "+\t\t\tif (unitResult.compilationUnit == sourceUnit) { // only report once", "+\t\t\t\t//requestor.acceptResult(unitResult.tagAsAccepted());", "+\t\t\t} else {", "+\t\t\t\tthrow e; // want to abort enclosing request to compile", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51482574c96588735d4f14eab6d7b4ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "signatureAfterChange": " public void accept(ICompilationUnit sourceUnit)", "diff": ["-\t */", "-\tpublic void accept(ICompilationUnit sourceUnit) {", "-\t\t// Switch the current policy and compilation result for this unit to the requested one.", "-\t\tCompilationResult unitResult =", "-\t\t\tnew CompilationResult(sourceUnit, totalUnits, totalUnits, this.options.maxProblemsPerUnit);", "-\t\ttry {", "-\t\t\t// diet parsing for large collection of unit", "-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tMatchingNodeSet originalMatchSet = this.parser.matchSet;", "-\t\t\t\tthis.parser.matchSet = new MatchingNodeSet(this);", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnit, unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnit, unitResult);", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tthis.parser.matchSet = originalMatchSet;", "-\t\t\t}", "-\t\t", "-\t\t\t// initial type binding creation", "-\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "-\t\t\tthis.addCompilationUnit(sourceUnit, parsedUnit);", "-\t", "-\t\t\t// binding resolution", "-\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit);", "-\t\t} catch (AbortCompilationUnit e) {", "-\t\t\t// at this point, currentCompilationUnitResult may not be sourceUnit, but some other", "-\t\t\t// one requested further along to resolve sourceUnit.", "-\t\t\tif (unitResult.compilationUnit == sourceUnit) { // only report once", "-\t\t\t\t//requestor.acceptResult(unitResult.tagAsAccepted());", "-\t\t\t} else {", "-\t\t\t\tthrow e; // want to abort enclosing request to compile", "-\t\t\t}", "-\t\t}", "-\t}", "+ */", "+public void accept(ICompilationUnit sourceUnit) {", "+\t// Switch the current policy and compilation result for this unit to the requested one.", "+\tCompilationResult unitResult = new CompilationResult(sourceUnit, 1, 1, this.options.maxProblemsPerUnit);", "+\ttry {", "+\t\tCompilationUnitDeclaration parsedUnit = basicParser().dietParse(sourceUnit, unitResult);", "+\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "+\t\tlookupEnvironment.completeTypeBindings(parsedUnit);", "+\t} catch (AbortCompilationUnit e) {", "+\t\t// at this point, currentCompilationUnitResult may not be sourceUnit, but some other", "+\t\t// one requested further along to resolve sourceUnit.", "+\t\tif (unitResult.compilationUnit == sourceUnit) { // only report once", "+\t\t\t//requestor.acceptResult(unitResult.tagAsAccepted());", "+\t\t\tthrow e; // want to abort enclosing request to compile", "+}"]}], "num": 40883}
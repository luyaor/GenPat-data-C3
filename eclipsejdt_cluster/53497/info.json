{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e31dcbf420d4b45453b115e17eb67744", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c2e086c823047cbb6e7cae41a6a1fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "10278a797430cb698cfd46cf8e9f8d898ccc6e22", "commitAfterChange": "68f08d6c81f3b848e0fcb2f296b83150ef5cf8c0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["-\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (methodDeclaration != null) {", "-\t\t\tArrayList parameterSignatures = new ArrayList();", "-\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\t\tType type = parameter.getType();", "-\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "+\t\tif (node != null) {", "+\t\t\tif (node instanceof MethodDeclaration) {", "+\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\t\t\tArrayList parameterSignatures = new ArrayList();", "+\t\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "+\t\t\t\t\tType type = parameter.getType();", "+\t\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\t\t\t}", "+\t\t\t\tint parameterCount = parameterSignatures.size();", "+\t\t\t\tString[] parameters = new String[parameterCount];", "+\t\t\t\tparameterSignatures.toArray(parameters);", "+\t\t\t\treturn declaringType.getMethod(getName(), parameters);", "+\t\t\t} else {", "+\t\t\t\t// annotation type member declaration", "+\t\t\t\tAnnotationTypeMemberDeclaration typeMemberDeclaration = (AnnotationTypeMemberDeclaration) node;", "+\t\t\t\treturn declaringType.getMethod(typeMemberDeclaration.getName().getIdentifier(), new String[0]); // annotation type members don't have parameters", "-\t\t\tint parameterCount = parameterSignatures.size();", "-\t\t\tString[] parameters = new String[parameterCount];", "-\t\t\tparameterSignatures.toArray(parameters);", "-\t\t\treturn declaringType.getMethod(getName(), parameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f550eb95cf15a749777e75e3100405", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "commitAfterChange": "179d5d1c5c2a0bb83cd907094171a8fb72cf869e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "signatureAfterChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "diff": ["+\t\t\t\r", "+\t\t\t// working copies take precedence over compilation units\r", "+\t\t\tObject workingCopy = this.handleToWorkingCopy.get(handle);\r", "+\t\t\tif (workingCopy != null) {\r", "+\t\t\t\thandle = (Openable)workingCopy;\r", "+\t\t\t}\r", "+\t\t\t\r", "-\t\tif (currentProject == null) currentProject = focusType.getJavaProject(); // case of no potential subtypes\r", "+\t\tif (currentProject == null) {\r", "+\t\t\t// case of no potential subtypes\r", "+\t\t\tcurrentProject = focusType.getJavaProject();\r", "+\t\t\tthis.addInfosFromType(focusType, infos);\r", "+\t\t}\r", "-\t\t\tthis.buildForProject((JavaProject)currentProject, new ArrayList(), new ArrayList());\r", "+\t\t\tinfos = new ArrayList();\r", "+\t\t\tunits = new ArrayList();\r", "+\t\t\tthis.addInfosFromType(focusType, infos);\r", "+\t\t\tthis.buildForProject((JavaProject)currentProject, infos, units);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500dd4936b5a5c445941bff3a331047c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "e7c40dbc434529a8379a830b9ae4ab2c74d0fc13", "commitAfterChange": "ae7797d27bfed7c3f6e7630a551ffec98598a05e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tITypeBinding resolveType(Type type)", "signatureAfterChange": "\r \tITypeBinding resolveType(Type type)", "diff": ["-\t\t\tnode = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\t\tif (parentType instanceof ArrayCreation) {\r", "+\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(parentType);\r", "+\t\t\t} else {\r", "+\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\t\t}\r", "+\t\t\t} else if (node instanceof ArrayAllocationExpression) {\r", "+\t\t\t\tArrayAllocationExpression arrayAllocationExpression = (ArrayAllocationExpression) node;\r", "+\t\t\t\treturn this.getTypeBinding(arrayAllocationExpression.arrayTb);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c14b4ba0a07ed17b1a254efe25ef987", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "6d5d9e32b8895e146fe7b876c8e27635ad72d617", "commitAfterChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " final int findInImports(String qualifier, String name, int kind)", "signatureAfterChange": " final int findInImports(String qualifier, String name, int kind)", "diff": ["-\t\t\t\t\treturn res;", "+\t\t\t\t\tif (prefix != STATIC_PREFIX) {", "+\t\t\t\t\t\treturn res;", "+\t\t\t\t\t}", "+\t\t\t\t\tObject currKind = this.importsKindMap.get(curr.substring(1));", "+\t\t\t\t\tif (currKind != null && currKind.equals(this.importsKindMap.get(qualifier + '.' + name))) {", "+\t\t\t\t\t\treturn res;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a3df20e5d0d1aefe84557bd896d69c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "8f40b18693d984d1b3346925dd24dfb773855585", "commitAfterChange": "98a24097737828240f1d21a0b23b90c66df1d2e5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected IType getHandle(IGenericType genericType)", "signatureAfterChange": " \tprotected IType getHandle(IGenericType genericType)", "diff": ["-\t\tif (genericType.isBinaryType()) {", "+\t\tif (genericType instanceof HierarchyType) {", "+\t\t\tIType handle = (IType)this.infoToHandle.get(genericType);", "+\t\t\tif (handle == null) {", "+\t\t\t\thandle = ((HierarchyType)genericType).typeHandle;", "+\t\t\t\tthis.infoToHandle.put(genericType, handle);", "+\t\t\t}", "+\t\t\treturn handle;", "+\t\t} else if (genericType.isBinaryType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a411bd41baf328d17e700bb4695345f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "70823bcdc247c361af65329f86a126cf9616a2fa", "commitAfterChange": "1bd4bf4c4dea2f86129d0f613a3da00767d07bfb", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic PerProjectInfo getPerProjectInfo(IProject project)", "signatureAfterChange": " \tpublic PerProjectInfo getPerProjectInfo(IProject project, boolean create)", "diff": ["-\t */", "-\tpublic PerProjectInfo getPerProjectInfo(IProject project) {", "-\t\treturn getPerProjectInfo(project, true /* create info */);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2ee0d528aadeebd8ebbc4ff7cda0f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "f1be73585a15718b8d7e7bfcd6517de46dc0a4a4", "commitAfterChange": "c5f13d0ee9ef1590b509e21fa6cb7160b90c28f0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void performClasspathResourceChange(JavaProject project, IClasspathEntry[] oldResolvedPath, IClasspathEntry[] newResolvedPath, IClasspathEntry[] newRawPath, boolean canChangeResources) throws JavaModelException", "signatureAfterChange": "  \tpublic void updateProjectReferences(JavaProject project, IClasspathEntry[] oldResolvedPath, IClasspathEntry[] newResolvedPath, IClasspathEntry[] newRawPath, boolean canChangeResources) throws JavaModelException", "diff": ["-\tpublic void performClasspathResourceChange(JavaProject project, IClasspathEntry[] oldResolvedPath, IClasspathEntry[] newResolvedPath, IClasspathEntry[] newRawPath, boolean canChangeResources) throws JavaModelException {", "-\t    ProjectUpdateInfo info = new ProjectUpdateInfo();", "-\t    info.project = project;", "-\t    info.oldResolvedPath = oldResolvedPath;", "-\t    info.newResolvedPath = newResolvedPath;", "-\t    info.newRawPath = newRawPath;", "+\tpublic void updateProjectReferences(JavaProject project, IClasspathEntry[] oldResolvedPath, IClasspathEntry[] newResolvedPath, IClasspathEntry[] newRawPath, boolean canChangeResources) throws JavaModelException {", "+\t\tProjectUpdateInfo info;", "+\t\tsynchronized (this) {", "+\t\t\tinfo = (ProjectUpdateInfo) (canChangeResources ? this.projectUpdates.remove(project) /*remove possibly awaiting one*/ : this.projectUpdates.get(project));", "+\t\t\tif (info == null) {", "+\t\t\t\tinfo = new ProjectUpdateInfo();", "+\t\t\t\tinfo.project = project;", "+\t\t\t\tinfo.oldResolvedPath = oldResolvedPath;", "+\t\t\t\tif (!canChangeResources) {", "+\t\t\t\t\tthis.projectUpdates.put(project, info);", "+\t\t\t\t}", "+\t\t    } // else refresh new classpath information", "+\t\t    info.newResolvedPath = newResolvedPath;", "+\t\t    info.newRawPath = newRawPath;", "+\t\t}", "+", "-\t    \tsynchronized (this) {", "-\t            this.projectUpdates.remove(project); // remove possibly awaiting one", "-\t\t\t}", "-\t        return;", "-\t    }", "-\t    this.recordProjectUpdate(info);", "+\t    } // else project references will be updated on next PRE_BUILD notification"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1bbe3fed61b4e54259c4ec84980af8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "b3a2f7bfaa3438c01da8001220d197a764da19bb", "commitAfterChange": "40a85c2d4c57226c917bc0f991a26ac5a5d8b085", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\t\tOperatorExpression operatorExpression = (OperatorExpression) this.newAstToOldAst.get(expression);", "-\t\t\treturn this.getTypeBinding(operatorExpression.resolvedType);", "+\t\t\tObject node = this.newAstToOldAst.get(expression);", "+\t\t\tif (node instanceof OperatorExpression) {", "+\t\t\t\tOperatorExpression operatorExpression = (OperatorExpression) node;", "+\t\t\t\treturn this.getTypeBinding(operatorExpression.resolvedType);", "+\t\t\t} else if (node instanceof StringLiteralConcatenation) {", "+\t\t\t\tStringLiteralConcatenation stringLiteralConcatenation = (StringLiteralConcatenation) node;", "+\t\t\t\treturn this.getTypeBinding(stringLiteralConcatenation.resolvedType);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf0255ea4f4c3e4c8cbc6b77f8e024b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "f6177ec3b052fd84832987d9cda218bea2f260b7", "commitAfterChange": "336c6a8c05fa00da4647413c6af6a1b47ee97a2d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " void matchReportReference(MessageSend messageSend, MatchLocator locator, MethodBinding methodBinding) throws CoreException", "signatureAfterChange": " void matchReportReference(MessageSend messageSend, MatchLocator locator, int accuracy, MethodBinding methodBinding) throws CoreException", "diff": ["-void matchReportReference(MessageSend messageSend, MatchLocator locator, MethodBinding methodBinding) throws CoreException {", "+void matchReportReference(MessageSend messageSend, MatchLocator locator, int accuracy, MethodBinding methodBinding) throws CoreException {", "-\t\t\t\tupdateMatch(parameterizedBinding, this.pattern.getTypeArguments(), this.pattern.hasTypeParameters(), 0, locator);", "+\t\t\t\tif ((accuracy & (SUB_INVOCATION_FLAVOR | OVERRIDDEN_METHOD_FLAVOR)) != 0) {", "+\t\t\t\t\t// type parameters need to be compared with the class that is really being searched", "+\t\t\t\t\t// https://bugs.eclipse.org/375971", "+\t\t\t\t\tReferenceBinding refBinding = getMatchingSuper(((ReferenceBinding)messageSend.actualReceiverType));", "+\t\t\t\t\tif (refBinding instanceof ParameterizedTypeBinding) {", "+\t\t\t\t\t\tparameterizedBinding = ((ParameterizedTypeBinding)refBinding);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif ((accuracy & SUPER_INVOCATION_FLAVOR) == 0) {", "+\t\t\t\t\t// not able to get the type parameters if the match is super", "+\t\t\t\t\tupdateMatch(parameterizedBinding, this.pattern.getTypeArguments(), this.pattern.hasTypeParameters(), 0, locator);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcdaee506e22191041d52d96eee746c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "37468b15b5c10767a0d1f5bcf745b5635724272d", "commitAfterChange": "269c8c1f587787c02ae256af1e14f83a052a8b35", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public final String getLocalizedMessage(int id, String[] problemArguments)", "signatureAfterChange": " public final String getLocalizedMessage(int id, int elaborationId, String[] problemArguments)", "diff": ["-", "-\tString message = (String) this.messageTemplates.get(keyFromID(id & IProblem.IgnoreCategoriesMask)); ", "+}", "+public final String getLocalizedMessage(int id, int elaborationId, String[] problemArguments) {", "+\tString message = (String) this.messageTemplates.get(keyFromID(id & IProblem.IgnoreCategoriesMask));", "-\t\t\t+ (id & IProblem.IgnoreCategoriesMask)", "-\t\t\t+ \". Check compiler resources.\";  //$NON-NLS-1$", "+\t\t\t+ (id & IProblem.IgnoreCategoriesMask) + \". Check compiler resources.\";  //$NON-NLS-1$", "+\t}", "+\tif (elaborationId != 0) {", "+\t\tString elaboration = (String) this.messageTemplates.get(keyFromID(elaborationId));", "+\t\tif (elaboration == null) {", "+\t\t\treturn \"Unable to retrieve the error message elaboration for elaboration id: \" //$NON-NLS-1$", "+\t\t\t\t+ elaborationId + \". Check compiler resources.\";  //$NON-NLS-1$", "+\t\t}", "+\t\tmessage = message.replaceAll(\"\\\\{0\\\\}\", elaboration); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7ea8270fa337b97f34c951f3ff55fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "78e8a5c1a2e383b6d515ba3aab0d674e5548befa", "commitAfterChange": "4cb6b481d6e3c4ba44985d7b9c454fbe1bc42a7d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tITypeBinding resolveType(Type type)", "signatureAfterChange": "\r \tITypeBinding resolveType(Type type)", "diff": ["-\t\tTypeReference typeReference = (TypeReference) this.newAstToOldAst.get(type);\r", "-\t\tif (typeReference == null) {\r", "-\t\t\treturn super.resolveType(type);\r", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\tif (node != null) {\r", "+\t\t\tif (node instanceof TypeReference) {\r", "+\t\t\t\tTypeReference typeReference = (TypeReference) node;\r", "+\t\t\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\t\t} else if (node instanceof SingleNameReference) {\r", "+\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "+\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// it should be a type reference\r", "+\t\t\t\t\treturn null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\treturn null;\r"]}], "num": 53497}
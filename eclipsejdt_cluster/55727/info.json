{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c341afcb2010747514c1b222ae1023ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a3adc5f4c3db86481ea1c73683fc957", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "e0d288b4c5d221af1fb44c4eee4c4a8f6aec1f71", "commitAfterChange": "9f1b0fdafed3069249aac13c0e22c34d0cdf6455", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t\tif (interfaceMethod != null) {", "+\t\t\t\t\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\tif (interfaceMethod != null) {", "+\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\tif (interfaceMethod != null) {", "+\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785b267d517809ea3689acb6b7a1ac4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "41f0eedac440a5a7408e664ba09866184ebddd55", "commitAfterChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\t\t\t\tif (typeRef.resolvedType != null) { // flag only valid class name", "+\t\t\t\t\tif (typeRef.resolvedType != null && typeRef.resolvedType.isValidBinding()) { // flag only valid class name", "-\t\t\t\tif (typeBinding.isValidBinding() && typeBinding.isClass()) {", "+\t\t\t\tif (typeBinding != null && typeBinding.isValidBinding() && typeBinding.isClass()) {", "-\t\t\t\t\t\tif (exception.resolvedType != null) { // flag only valid class name", "+\t\t\t\t\t\tif (exception.resolvedType != null && exception.resolvedType.isValidBinding()) { // flag only valid class name"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864a3bbc252d49142ec15f07fe6d345c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "fb8f376e81332a8e2eb0b6ab7b009417715a2326", "commitAfterChange": "504159d7229f244fe60c96f9b15d6167193a85b6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\t\tif (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t}", "-\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\tif (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t}"]}], "num": 55727}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34efd44c7b05ab06fb7d9904334aef86", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae4c674c80ca6e3f5f42ced35e1189e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tconstant = NotAConstant;", "-", "-\t\tif (this.receiver == null) {", "-\t\t\tSourceTypeBinding sourceTypeBinding = scope.enclosingSourceType();", "-\t\t\tthis.receiverType = sourceTypeBinding;", "-\t\t\tthis.receiver = new JavadocQualifiedTypeReference(sourceTypeBinding.compoundName, new long[sourceTypeBinding.compoundName.length], 0, 0);", "+\t\tthis.constant = NotAConstant;", "+\t\tif (scope.kind == Scope.CLASS_SCOPE) {", "+\t\t\tthis.receiverType = this.receiver.resolveType((ClassScope) scope);", "-\t\t\tif (scope.kind == Scope.CLASS_SCOPE) {", "-\t\t\t\tthis.receiverType = receiver.resolveType((ClassScope)scope);", "-\t\t\t} else {", "-\t\t\t\tthis.receiverType = receiver.resolveType((BlockScope)scope);", "-\t\t\t}", "+\t\t\tthis.receiverType = this.receiver.resolveType((BlockScope)scope);", "-\t\t\tconstant = NotAConstant;", "-\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "+\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getModifiers());", "-\t\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) != 0)) {", "-\t\t\tscope.problemReporter().deprecatedField(this.binding, this);", "+\t\tif (isFieldUseDeprecated(this.binding, scope, (this.bits & IsStrictlyAssignedMASK) != 0)) {", "+\t\t\tscope.problemReporter().javadocDeprecatedField(this.binding, this, scope.getModifiers());", "-\t\treturn this.resolvedType = binding.type;", "+\t\treturn this.resolvedType = this.binding.type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c938e9f67392efa6aaa737159cd58ade", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\t\t\tif (commentIndentationLevel == 0) {", "-\t\t\t\t    this.commentIndentation = null;", "-\t\t\t\t} else {", "-\t\t    \t\tStringBuffer indentationBuffer = new StringBuffer();", "-\t\t        \tfor (int i=0; i<commentIndentationLevel; i++) {", "-\t\t    \t\t\tindentationBuffer.append(' ');", "-\t\t        \t}", "-\t        \t\tthis.commentIndentation = indentationBuffer.toString();", "-\t\t    \t}", "+\t\t\t\tsetCommentIndentation(commentIndentationLevel);", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\t\t\t\tprintJavadocNewLine(buffer);", "+\t\t\t\t\t\t\tprintJavadocNewLine(this.tempBuffer);", "-\t\t\t\t\t\taddInsertEdit(nodeStart, buffer.toString());", "+\t\t\t\t\t\taddInsertEdit(nodeStart, this.tempBuffer.toString());"]}], "num": 69778}
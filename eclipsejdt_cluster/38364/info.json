{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "346480568b29915416e070642b80b7f3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47fb13b7a83197720761646e10ee0fbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64e4eae71ee86f06dc3577f50fab8cad8599bd65", "commitAfterChange": "99d41ca529f3c8f860aeae6b4e02a522baae9a88", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,", "-\t\t\t\t\t\tscope);", "-\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "-\t\t\t\t\tif(astNodeParent instanceof SwitchStatement) {", "+\t\t\t\t\tSwitchStatement switchStatement = astNodeParent instanceof SwitchStatement ? (SwitchStatement) astNodeParent : null;", "+\t\t\t\t\tif(switchStatement != null", "+\t\t\t\t\t\t\t&& switchStatement.expression.resolvedType != null", "+\t\t\t\t\t\t\t&& switchStatement.expression.resolvedType.isEnum()) {", "-\t\t\t\t\t}", "-\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor){", "-\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "-\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "-\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "-\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,", "+\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "+\t\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor){", "+\t\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "+\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ecf1f9cf79fd6f27a744e11e0715bd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "114858a4f81bad3199936d67b850f7317a24a608", "commitAfterChange": "a4971751d51a926eb862fed7974b2fa203b3d739", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected boolean resumeAfterRecovery()", "signatureAfterChange": " protected boolean resumeAfterRecovery()", "diff": ["-\t\tif (currentElement.enclosingType() == null){", "-\t\t\tthis.resetStacks();", "-\t\t\treturn false;", "+\t\tif (currentElement.enclosingType() == null) {", "+\t\t\tif(!(currentElement instanceof RecoveredType)) {", "+\t\t\t\tthis.resetStacks();", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t", "+\t\t\tRecoveredType recoveredType = (RecoveredType)currentElement;", "+\t\t\tif(recoveredType.typeDeclaration != null && recoveredType.typeDeclaration.allocation == this.assistNode){", "+\t\t\t\tthis.resetStacks();", "+\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98452b395f499bd0283522539a8f974f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c4c5d1f7cea2c5dfe27a67808f94917c3f90af5b", "commitAfterChange": "fb92cfb822669ddb00db1cf41e3bdb1057d4d00d", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t} else if (parent instanceof SwitchStatement) {", "+\t\t\tSwitchStatement switchStatement = (SwitchStatement) parent;", "+\t\t\tif (switchStatement.expression != null &&", "+\t\t\t\t\tswitchStatement.expression.resolvedType != null) {", "+\t\t\t\taddExpectedType(switchStatement.expression.resolvedType, scope);", "+\t\t\t}"]}], "num": 38364}
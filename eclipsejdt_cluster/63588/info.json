{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7be9eb258f9fa09c473edc3909607fc2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00aba1f7b38c5354a2abac7860f0ef55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/CompilationUnitSorter.java", "commitBeforeChange": "f8c62e1959300f5da932cbd33d28a46243b4258b", "commitAfterChange": "29291a00d45f7fc23b6ab4487b131f3aacb400b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tpublic int compare(Object o1, Object o2)", "signatureAfterChange": " \t\tpublic int compare(Object o1, Object o2)", "diff": ["-\t\t\tswitch(node1.getNodeType()) {", "-\t\t\t\tcase ASTNode.METHOD_DECLARATION :", "-\t\t\t\t\tMethodDeclaration method1 = (MethodDeclaration) node1;", "-\t\t\t\t\tMethodDeclaration method2 = (MethodDeclaration) node2;", "-\t\t\t\t\t", "-\t\t\t\t\tif (method1.isConstructor()) {", "-\t\t\t\t\t\treturn compareParams(method1, method2);", "-\t\t\t\t\t}", "-\t\t\t\t\tint compare = this.collator.compare(method1.getName().getIdentifier(), method2.getName().getIdentifier());", "-\t\t\t\t\tif (compare != 0) {", "-\t\t\t\t\t\treturn compare;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compareParams(method1, method2);", "-\t\t\t\tcase ASTNode.FIELD_DECLARATION :", "-\t\t\t\t\tFieldDeclaration fieldDeclaration1 = (FieldDeclaration) node1;", "-\t\t\t\t\tFieldDeclaration fieldDeclaration2 = (FieldDeclaration) node2;", "-\t\t\t\t\tVariableDeclarationFragment fragment1 = (VariableDeclarationFragment) fieldDeclaration1.fragments().get(0);", "-\t\t\t\t\tVariableDeclarationFragment fragment2 = (VariableDeclarationFragment) fieldDeclaration2.fragments().get(0);", "-\t\t\t\t\treturn this.collator.compare(fragment1.getName().getIdentifier(), fragment2.getName().getIdentifier());", "-\t\t\t\tcase ASTNode.INITIALIZER :", "-\t\t\t\t\treturn ((Integer) node1.getProperty(CompilationUnitSorter.SOURCE_START)).intValue() - ((Integer) node2.getProperty(CompilationUnitSorter.SOURCE_START)).intValue();", "-\t\t\t\tcase ASTNode.TYPE_DECLARATION :", "-\t\t\t\t\tTypeDeclaration typeDeclaration1 = (TypeDeclaration) node1;", "-\t\t\t\t\tTypeDeclaration typeDeclaration2 = (TypeDeclaration) node2;", "-\t\t\t\t\treturn this.collator.compare(typeDeclaration1.getName().getIdentifier(), typeDeclaration2.getName().getIdentifier());", "-\t\t\t}", "-\t\t\treturn 0;", "-\t\t}", "+\t\t\tString node1Signature = buildSignature(node1);", "+\t\t\tString node2Signature = buildSignature(node2);", "+\t\t\tif (node1Signature == null || node2Signature == null) {", "+\t\t\t\treturn 0;", "+\t\t\t} else if (node1Signature.length() != 0 && node2Signature.length() != 0) {", "+\t\t\t\tint compare = this.collator.compare(node1Signature, node2Signature);", "+\t\t\tint sourceStart1 = ((Integer) node1.getProperty(CompilationUnitSorter.SOURCE_START)).intValue();", "+\t\t\tint sourceStart2 = ((Integer) node2.getProperty(CompilationUnitSorter.SOURCE_START)).intValue();", "+\t\t\treturn sourceStart1 - sourceStart2;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f3e1e351f748bfd0a0c5a203036990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "2d86a2056325f93b4ade5bd0b8bf932dcb982fd5", "commitAfterChange": "aa7a65081771999e54f29a295541444307143029", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["+\t\tchar[] source = findSource(fullName);", "+\t\tif (source == null) {", "+\t\t\t// root path may just have been a hint: try recomputing it", "+\t\t\tString rootPath = this.computeRootPath();", "+\t\t\tString newFullName;", "+\t\t\tif (rootPath != null && !rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "+\t\t\t\tif (rootPath.endsWith(\"/\")) { //$NON-NLS-1$", "+\t\t\t\t\tnewFullName = rootPath + name;", "+\t\t\t\t} else {", "+\t\t\t\t\tnewFullName = rootPath + '/' + name;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tnewFullName = name;", "+\t\t\t}", "+\t\t\tif (!fullName.equals(newFullName)) {", "+\t\t\t\tsource = this.findSource(newFullName);", "+\t\t\t\tif (source != null) {", "+\t\t\t\t\t// remember right root path", "+\t\t\t\t\tthis.rootPath = rootPath;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn source;", "+\t}"]}], "num": 63588}
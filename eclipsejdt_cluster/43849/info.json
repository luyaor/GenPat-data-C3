{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ebc969dc95ee2464dda9d2ac69ca01c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "170ef23de797c564bdfdb505c2553c3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "48c062bdb9d6c67e0ab7ada621b2e78159b00da7", "commitAfterChange": "c33fa703a95df265770d385ad9292308f48aa3cc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tString computeRootPath(String javaFilePath, char[] contents)", "signatureAfterChange": " \tprivate String computeRootPath(File directory)", "diff": ["+\t}", "+\tprivate String computeRootPath(File directory) {", "+\t\tFile[] files = directory.listFiles();", "+\t\tfor (int i = 0; i < files.length; i++) {", "+\t\t\tFile file = files[i];", "+\t\t\tif (file.isDirectory()) {", "+\t\t\t\tString rootPath = computeRootPath(file);", "+\t\t\t\tif (rootPath != null) return rootPath;", "+\t\t\t} else if (Util.isJavaFileName(file.getName())) {", "+\t\t\t\ttry {", "+\t\t\t\t\tchar[] contents = Util.getFileCharContent(file, this.encoding);", "+\t\t\t\t\tIPath fullPath = new Path(file.getPath());", "+\t\t\t\t\tIPath relativePath = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);", "+\t\t\t\t\tString rootPath = computeRootPath(relativePath.toString(), contents);", "+\t\t\t\t\tif (rootPath != null) return rootPath;", "+\t\t\t\t} catch (IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f3e1e351f748bfd0a0c5a203036990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "2d86a2056325f93b4ade5bd0b8bf932dcb982fd5", "commitAfterChange": "aa7a65081771999e54f29a295541444307143029", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["+\t\tchar[] source = findSource(fullName);", "+\t\tif (source == null) {", "+\t\t\t// root path may just have been a hint: try recomputing it", "+\t\t\tString rootPath = this.computeRootPath();", "+\t\t\tString newFullName;", "+\t\t\tif (rootPath != null && !rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "+\t\t\t\tif (rootPath.endsWith(\"/\")) { //$NON-NLS-1$", "+\t\t\t\t\tnewFullName = rootPath + name;", "+\t\t\t\t} else {", "+\t\t\t\t\tnewFullName = rootPath + '/' + name;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tnewFullName = name;", "+\t\t\t}", "+\t\t\tif (!fullName.equals(newFullName)) {", "+\t\t\t\tsource = this.findSource(newFullName);", "+\t\t\t\tif (source != null) {", "+\t\t\t\t\t// remember right root path", "+\t\t\t\t\tthis.rootPath = rootPath;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn source;", "+\t}"]}], "num": 43849}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0e7d25b37496ec5c8362ae68211c4a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f13daab31e1e4994c715fba82180447", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "5c930a2be2f56a634252cd32fd5425aacd603534", "commitAfterChange": "eb4f7811e5216181c33caa5f1f098b6e53cc8ce4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t((ReferenceBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.recipient;", "+\t\t\t\t\t\tsourceType.tagBits |= tagBits;", "+\t\t\t\t\t\tif ((tagBits & TagBits.AnnotationSuppressWarnings) != 0) {", "+\t\t\t\t\t\t\tClassScope recipientScope = sourceType.scope;", "+\t\t\t\t\t\t\t// construct custom compiler options with suppressed warnings", "+\t\t\t\t\t\t\tCompilerOptions customOptions = getCustomCompilerOptions(recipientScope);", "+\t\t\t\t\t\t\tif (customOptions != null) {", "+\t\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = recipientScope.referenceContext;", "+\t\t\t\t\t\t\t\trecipientScope.options = customOptions;", "+\t\t\t\t\t\t\t\t// discard already generated warnings which got suppressed", "+\t\t\t\t\t\t\t\ttypeDeclaration.compilationResult().suppressRecordedWarnings(", "+\t\t\t\t\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, ", "+\t\t\t\t\t\t\t\t\t\ttypeDeclaration.declarationSourceEnd, ", "+\t\t\t\t\t\t\t\t\t\trecipientScope.problemReporter());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t((MethodBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tMethodBinding sourceMethod = (MethodBinding) this.recipient;", "+\t\t\t\t\t\tsourceMethod.tagBits |= tagBits;", "+\t\t\t\t\t\tif ((tagBits & TagBits.AnnotationSuppressWarnings) != 0) {", "+\t\t\t\t\t\t\tAbstractMethodDeclaration methodDeclaration = ((SourceTypeBinding)sourceMethod.declaringClass).scope.referenceContext.declarationOf(sourceMethod);", "+\t\t\t\t\t\t\tMethodScope recipientScope = methodDeclaration.scope;", "+\t\t\t\t\t\t\t// construct custom compiler options with suppressed warnings", "+\t\t\t\t\t\t\tCompilerOptions customOptions = getCustomCompilerOptions(recipientScope);", "+\t\t\t\t\t\t\tif (customOptions != null) {", "+\t\t\t\t\t\t\t\trecipientScope.options = customOptions;", "+\t\t\t\t\t\t\t\t// discard already generated warnings which got suppressed", "+\t\t\t\t\t\t\t\tmethodDeclaration.compilationResult().suppressRecordedWarnings(", "+\t\t\t\t\t\t\t\t\t\tmethodDeclaration.declarationSourceStart, ", "+\t\t\t\t\t\t\t\t\t\tmethodDeclaration.declarationSourceEnd, ", "+\t\t\t\t\t\t\t\t\t\trecipientScope.problemReporter());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85cd6dbb7ab31215eb4464a6282682c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "8c4c03ed87f5ba92a46a042a6bd51df21862c6ec", "commitAfterChange": "660d4f80c0f997ffc360c52bab006ded2ce3e10f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["+    \tMap<String,String> options;", "-    \t\treturn new HashMap<String, String>();", "+    \t\toptions = new HashMap<String, String>();", "-    \t\treturn op.parse();", "+    \t\toptions = op.parse();", "+    \t", "+    \t// Add sourcepath and classpath variables", "+    \ttry {", "+    \t\tIClasspathEntry[] classpathEntries = jproj.getResolvedClasspath(true);", "+    \t\tStringBuilder classpathSB = new StringBuilder();", "+    \t\tStringBuilder sourcepathSB = new StringBuilder();", "+    \t\tboolean firstCP = true;", "+    \t\tboolean firstSP = true;", "+    \t\tfor (IClasspathEntry entry : classpathEntries) {", "+    \t\t\tint kind = entry.getEntryKind();", "+    \t\t\tif (kind == IClasspathEntry.CPE_LIBRARY) {", "+\t    \t\t\tif (firstCP) {", "+\t    \t\t\t\tfirstCP = false;", "+\t    \t\t\t}", "+\t    \t\t\telse {", "+\t    \t\t\t\tclasspathSB.append(File.pathSeparatorChar);", "+\t    \t\t\t}", "+\t    \t\t\tclasspathSB.append(entry.getPath().toFile().getAbsolutePath());", "+    \t\t\t}", "+    \t\t\telse if (kind == IClasspathEntry.CPE_SOURCE) {", "+    \t\t\t\tif (firstSP) {", "+    \t\t\t\t\tfirstSP = false;", "+    \t\t\t\t}", "+    \t\t\t\telse {", "+    \t\t\t\t\tsourcepathSB.append(File.separatorChar);", "+    \t\t\t\t}", "+    \t\t\t\tsourcepathSB.append(entry.getPath().toFile().getAbsolutePath());", "+    \t\t\t}", "+    \t\t}", "+    \t\toptions.put(\"classpath\",classpathSB.toString());", "+    \t\toptions.put(\"sourcepath\", sourcepathSB.toString());", "+    \t}", "+    \tcatch (JavaModelException jme) {", "+    \t\tAptPlugin.log(jme, \"Could not get the classpath\");", "+    \t}", "+    \t", "+    \treturn options;"]}], "num": 26095}
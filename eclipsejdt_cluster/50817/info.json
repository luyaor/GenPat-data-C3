{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3d02f850857537c5026e10cbfcd236f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9b084d96f9d35cbee322234d50fd8fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PathCollector.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 0, "signatureBeforeChange": " public void acceptTypeReference(String resourcePath, char[] typeName)", "signatureAfterChange": " \tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant)", "diff": ["- */", "-public void acceptTypeReference(String resourcePath, char[] typeName) {", "-\tthis.paths.add(resourcePath);", "-}", "+\t */", "+\tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant) {", "+\t\tpaths.add(documentPath);", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb71e8b2671bda020174f021d2723c9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "signatureAfterChange": " \tpublic TypeConstants.BoundCheckStatus boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope, ASTNode location)", "diff": ["-\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope) {", "-\t\tint code = internalBoundCheck(substitution, argumentType, scope);", "-\t\tif (code == TypeConstants.MISMATCH) {", "+\tpublic TypeConstants.BoundCheckStatus boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope, ASTNode location) {", "+\t\tTypeConstants.BoundCheckStatus code = internalBoundCheck(substitution, argumentType, scope, location);", "+\t\tif (code == BoundCheckStatus.MISMATCH) {", "-\t\t\t\t\tint code2 = boundCheck(substitution, bound.capture(scope, -1, -1), scope); // no position needed as this capture will never escape this context", "-\t\t\t\t\treturn Math.min(code, code2);", "+\t\t\t\t\tBoundCheckStatus code2 = boundCheck(substitution, bound.capture(scope, -1, -1), scope, location); // no capture position needed as this capture will never escape this context", "+\t\t\t\t\treturn code.betterOf(code2);"]}], "num": 50817}
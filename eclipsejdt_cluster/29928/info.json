{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a33398e632fcd5dce762af9d474f473", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19676e1fb9cfc58a48bd7000d4b4e215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "58a1f01578c97e0cf25ddfdfbb541889635de059", "commitAfterChange": "794c42d32802fcaf82912c5ba05c9463361c0423", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private void indexClassFile(byte[] contents, char[] documentName) throws IOException", "signatureAfterChange": "\r private void indexClassFile(byte[] contents, char[] documentName) throws IOException", "diff": ["-\t\t// we don't want to index local and anonymous classes\r", "-\t\tif (reader.isLocal() || reader.isAnonymous()) return;\r", "-\t\t\tname = reader.getInnerSourceName();\r", "-\t\t\tchar[] fullEnclosingName = reader.getEnclosingTypeName();\r", "-\t\t\tint nameLength = fullEnclosingName.length - packageNameIndex - 1;\r", "-\t\t\tif (nameLength <= 0) {\r", "-\t\t\t\t// See PR 1GIR345: ITPJCORE:ALL - Indexer: NegativeArraySizeException\r", "-\t\t\t\treturn;\r", "+\t\t\tif (reader.isAnonymous()) {\r", "+\t\t\t\tname = NO_CHAR;\r", "+\t\t\t} else {\r", "+\t\t\t\tname = reader.getInnerSourceName();\r", "-\t\t\tenclosingTypeName = new char[nameLength]; \r", "-\t\t\tSystem.arraycopy(fullEnclosingName, packageNameIndex + 1, enclosingTypeName, 0, nameLength); \r", "+\t\t\tif (reader.isLocal() || reader.isAnonymous()) {\r", "+\t\t\t\tenclosingTypeName = ONE_ZERO;\r", "+\t\t\t} else {\r", "+\t\t\t\tchar[] fullEnclosingName = reader.getEnclosingTypeName();\r", "+\t\t\t\tint nameLength = fullEnclosingName.length - packageNameIndex - 1;\r", "+\t\t\t\tif (nameLength <= 0) {\r", "+\t\t\t\t\t// See PR 1GIR345: ITPJCORE:ALL - Indexer: NegativeArraySizeException\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t\tenclosingTypeName = new char[nameLength]; \r", "+\t\t\t\tSystem.arraycopy(fullEnclosingName, packageNameIndex + 1, enclosingTypeName, 0, nameLength);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f64c4769b5a298323bed5ed2bb74b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "b30ecd55b63bbdd62f315360c74e8322b58d428b", "commitAfterChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r void recordReference(char[][] qualifiedName)", "signatureAfterChange": "\r void recordReference(char[][] qualifiedName)", "diff": ["-\tswitch (length) {\r", "-\t\tcase 0 : return;\r", "-\t\tcase 1 :\r", "-\t\t\trecordSimpleReference(qualifiedName[0]);\r", "-\t\t\treturn;\r", "-\t\tcase 2 :\r", "-\t\t\tif (!qualifiedReferences.contains(qualifiedName))\r", "-\t\t\t\tqualifiedReferences.add(qualifiedName);\r", "-\r", "-\t\t\trecordSimpleReference(qualifiedName[0]);\r", "-\t\t\trecordSimpleReference(qualifiedName[1]);\r", "-\t\t\treturn;\r", "-\t\tdefault :\r", "-\t\t\tif (!qualifiedReferences.contains(qualifiedName))\r", "-\t\t\t\tqualifiedReferences.add(qualifiedName);\r", "-\r", "-\t\t\tchar[][] qName = new char[length - 1][];\r", "-\t\t\tSystem.arraycopy(qualifiedName, 0, qName, 0, length - 1);\r", "-\t\t\trecordReference(qName);\r", "-\t\t\trecordSimpleReference(qualifiedName[length - 1]);\r", "+\tif (length > 1) {\r", "+\t\twhile (!qualifiedReferences.contains(qualifiedName)) {\r", "+\t\t\tqualifiedReferences.add(qualifiedName);\r", "+\t\t\tif (length == 2) {\r", "+\t\t\t\trecordSimpleReference(qualifiedName[0]);\r", "+\t\t\t\trecordSimpleReference(qualifiedName[1]);\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t\tlength--;\r", "+\t\t\trecordSimpleReference(qualifiedName[length]);\r", "+\t\t\tSystem.arraycopy(qualifiedName, 0, qualifiedName = new char[length][], 0, length);\r", "+\t\t}\r", "+\t} else if (length == 1) {\r", "+\t\trecordSimpleReference(qualifiedName[0]);\r"]}], "num": 29928}
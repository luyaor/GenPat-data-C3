{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "708ab890e6ea372932e2af6d9710c807", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d13b7f3648528a3ae212f766615dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "0944527a7397db56b1dedbe42ea5aecf6e1f8ca1", "commitAfterChange": "259394e49b8b2716f2b45f583ae806167c65a507", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\t\t/* Disabled bug 70827 fix as too much time consuming", "-\t\t\t\tMethodBinding patternMethodBinding = locator.getMethodBinding((IMethod) focus);", "-\t\t\t\tif (patternMethodBinding != null && patternMethodBinding.isValidBinding()) {", "-\t\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "-\t\t\t\t\tif (method != null) {", "-\t\t\t\t\t\tmethod = method.original();", "-\t\t\t\t\t\tif (method != null && patternMethodBinding.isPrivate() && patternMethodBinding.declaringClass != method.declaringClass)", "-\t\t\t\t\t\t\treturn; // finally the match was not possible", "-\t\t\t\t\t}", "+\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "+\t\t\t\tboolean isPrivate = Flags.isPrivate(((IMethod) focus).getFlags());", "+\t\t\t\tif (isPrivate && !CharOperation.equals(method.declaringClass.sourceName, focus.getParent().getElementName().toCharArray())) {", "+\t\t\t\t\treturn; // finally the match was not possible", "-\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3672f3795fa6d2ec55784aabe289d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t\tIJavaElement focus = ((InternalSearchPattern) this.pattern).focus;", "+\t\t// verify closest match if pattern was bound", "+\t\t// (see bug 70827)", "+\t\tif (focus != null && focus.getElementType() == IJavaElement.METHOD) {", "+\t\t\tMethodBinding patternMethodBinding = locator.getMethodBinding((IMethod) focus);", "+\t\t\tif (patternMethodBinding != null && patternMethodBinding.isValidBinding()) {", "+\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "+\t\t\t\tif (method != null) {", "+\t\t\t\t\tmethod = method.original();", "+\t\t\t\t\tif (method != null && patternMethodBinding.isPrivate() && patternMethodBinding.declaringClass != method.declaringClass)", "+\t\t\t\t\t\treturn; // finally the match was not possible", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 36085}
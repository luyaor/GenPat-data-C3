{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cf9903eeab3608855bf00d174903127", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "166754efe5bc8828c04cbc793d35d7e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "91215d8b0f077e4a387766e53eb9ded14e3534d0", "commitAfterChange": "24dee0301b5b68b6090019ddc2ba8f236b84d827", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r protected void attachOrphanCompletionNode()", "signatureAfterChange": "\r protected void attachOrphanCompletionNode()", "diff": ["+\t\tAstNode orphan = this.assistNode;\r", "-\t\tStatement statement = (Statement)wrapWithExplicitConstructorCallIfNeeded(this.assistNode);\r", "+\t\t\r", "+\t\t\r", "+\t\t/* if in context of a type, then persists the identifier into a fake field return type */\r", "+\t\tif (currentElement instanceof RecoveredType){\r", "+\t\t\tRecoveredType recoveredType = (RecoveredType)currentElement;\r", "+\t\t\t/* filter out cases where scanner is still inside type header */\r", "+\t\t\tif (recoveredType.foundOpeningBrace) {\r", "+\t\t\t\t/* generate a pseudo field with a completion on type reference */\t\r", "+\t\t\t\tif (orphan instanceof TypeReference){\r", "+\t\t\t\t\tcurrentElement = currentElement.add(new SelectionOnFieldType((TypeReference)orphan), 0);\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\tStatement statement = (Statement)wrapWithExplicitConstructorCallIfNeeded(orphan);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18fb25369b17feb7d49bd3784391c8b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bb49ae1f5759ef970a2a314fd9778e459f4c097c", "commitAfterChange": "31d45554331a458304a632ad1dfc3ad3337a9ef2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic IPackageFragment[] findPackageFragments(String name, boolean partialMatch)", "signatureAfterChange": " \tpublic IPackageFragment[] findPackageFragments(String name, boolean partialMatch)", "diff": ["-\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.valueTable[i];", "-\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "-\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "-\t\t\t\t\t\tIPackageFragment pkg = root.getPackageFragment(pkgName);", "+\t\t\t\t\tObject value = this.packageFragments.valueTable[i];", "+\t\t\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\t\t\tIPackageFragment pkg = ((PackageFragmentRoot) value).getPackageFragment(pkgName);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "+\t\t\t\t\t\t\tIPackageFragment pkg = root.getPackageFragment(pkgName);", "+\t\t\t\t\t\t\tif (oneFragment == null) {", "+\t\t\t\t\t\t\t\toneFragment = new IPackageFragment[] {pkg};", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (pkgs == null) {", "+\t\t\t\t\t\t\t\t\tpkgs = new ArrayList();", "+\t\t\t\t\t\t\t\t\tpkgs.add(oneFragment[0]);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tpkgs.add(pkg);", "+\t\t\t\t\t\t\t}", "-\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(splittedName);", "-\t\t\tif (roots != null) {", "-\t\t\t\tIPackageFragment[] result = new IPackageFragment[roots.length];", "-\t\t\t\tfor (int i= 0; i < roots.length; i++) {", "-\t\t\t\t\tresult[i] = ((PackageFragmentRoot) roots[i]).getPackageFragment(splittedName);", "+\t\t\tObject value = this.packageFragments.get(splittedName);", "+\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\treturn new IPackageFragment[] {((PackageFragmentRoot) value).getPackageFragment(splittedName)};", "+\t\t\t} else {", "+\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\tif (roots != null) {", "+\t\t\t\t\tIPackageFragment[] result = new IPackageFragment[roots.length];", "+\t\t\t\t\tfor (int i= 0; i < roots.length; i++) {", "+\t\t\t\t\t\tresult[i] = ((PackageFragmentRoot) roots[i]).getPackageFragment(splittedName);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7892d16f3e0f83812f4e9360a8bdb4d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bb49ae1f5759ef970a2a314fd9778e459f4c097c", "commitAfterChange": "31d45554331a458304a632ad1dfc3ad3337a9ef2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "diff": ["-\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.valueTable[i];", "-\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "-\t\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "-\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(pkgName));\t\t\t\t\t", "+\t\t\t\t\tObject value = this.packageFragments.valueTable[i];", "+\t\t\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) value;", "+\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(pkgName));\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "+\t\t\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "+\t\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(pkgName));\t\t\t\t\t", "+\t\t\t\t\t\t}", "-\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(splittedName);", "-\t\t\tif (roots != null) {", "-\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "-\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "-\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(splittedName));", "+\t\t\tObject value = this.packageFragments.get(splittedName);", "+\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\trequestor.acceptPackageFragment(((PackageFragmentRoot) value).getPackageFragment(splittedName));", "+\t\t\t} else {", "+\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\tif (roots != null) {", "+\t\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "+\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(splittedName));", "+\t\t\t\t\t}"]}], "num": 14187}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9035a9541ae1f4ab4defbd72bcc3b48", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3f04da4199f27ef918ea47e62ec85e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": "  private boolean encloses(String scopePath, String path, int index)", "diff": ["-//\tadd(element, element.getJavaProject());", "-\tadd(element, null);", "-}", "+", "+private boolean encloses(String scopePath, String path, int index) {", "+\tif (this.pathWithSubFolders[index]) {", "+\t\tif (path.startsWith(scopePath)) {", "+\t\t\treturn true;", "+\t\t}", "+\t} else {", "+\t\t// if not looking at subfolders, this scope encloses the given path ", "+\t\t// if this path is a direct child of the scope's ressource", "+\t\t// or if this path is the scope's resource (see bug 13919 Declaration for package not found if scope is not project)", "+\t\tif (path.startsWith(scopePath) ", "+\t\t\t&& ((scopePath.length() == path.lastIndexOf('/'))", "+\t\t\t\t|| (scopePath.length() == path.length()))) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d62a654d4334754cf92d0dac1315d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tprotected void putInfo(IJavaElement element, Object info)", "signatureAfterChange": " \tprotected synchronized void putInfos(IJavaElement openedElement, Map newElements) throws JavaModelException", "diff": ["-\tprotected void putInfo(IJavaElement element, Object info) {", "-\t\tthis.cache.putInfo(element, info);", "+\t */", "+\tprotected synchronized void putInfos(IJavaElement openedElement, Map newElements) throws JavaModelException {", "+\t\twhile (openedElement != null) {", "+\t\t\tif (!newElements.containsKey(openedElement)) {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (this.cache.peekAtInfo(openedElement) != null) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\topenedElement = openedElement.getParent();", "+\t\t}", "+\t\t", "+\t\tIterator iterator = newElements.keySet().iterator();", "+\t\twhile (iterator.hasNext()) {", "+\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "+\t\t\tObject info = newElements.get(element);", "+\t\t\tthis.cache.putInfo(element, info);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fb1bacc1613130135a6e479404e01ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 213, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void appendOutputForConstantString(IConstantPoolEntry constantPoolEntry)", "signatureAfterChange": " \tprivate String getLocalVariableName(int i)", "diff": ["+\t}", "+\tprivate String getLocalVariableName(int i) {", "+\t\tString localVariableName = null;", "+\t\tif (this.hashMap != null) {", "+\t\t\tif (i < 4) {", "+\t\t\t\tlocalVariableName = (String) this.hashMap.get(INDEXES[i]);", "+\t\t\t} else {", "+\t\t\t\tlocalVariableName = (String) this.hashMap.get(new Integer(i));", "+\t\t\t}", "+\t\t}", "+\t\tif (localVariableName == null) {", "+\t\t\tlocalVariableName = Util.bind(\"disassembler.localvariablename\", Integer.toString(i)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t}", "+\t\treturn localVariableName;", "-", "-\tprivate void appendOutputForConstantString(IConstantPoolEntry constantPoolEntry) {", "-\t\tthis.buffer", "-\t\t\t.append(\"<String \\\"\") //$NON-NLS-1$", "-\t\t\t.append(constantPoolEntry.getStringValue())", "-\t\t\t.append(\"\\\">\"); //$NON-NLS-1$", "-\t}"]}], "num": 55188}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b24fad08703dee2b6b40f3c0f1188ead", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32820e01911b252702f77739f1077700", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "1f25db82a90d7dfb41e186c23361a31470988684", "commitAfterChange": "9cd1ab49783c2213611dcbe2939a387e78b83c79", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth)", "signatureAfterChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth)", "diff": ["-\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth) {", "+\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth) {", "+\t\tAssert.isTrue(indentWidth >= 0);", "+\t\t", "+\t\tint spaceEquivalents= numberOfIndents * indentWidth;", "+\t\t", "-\t\tint indents= 0;", "-\t\tfor (int i= 0; i < size && indents < numberOfIndents; i++) {", "+\t\tfor (int i= 0; i < size && blanks < spaceEquivalents; i++) {", "-\t\t\t\tindents++;", "-\t\t\t\tresult= i;", "-\t\t\t\tblanks= 0;", "+\t\t\t\tint remainder= blanks % tabWidth;", "+\t\t\t\tblanks += tabWidth - remainder;", "-\t\t\t\tif (blanks == tabWidth) {", "-\t\t\t\t\tresult= i;", "-\t\t\t\t\tindents++;", "-\t\t\t\t\tblanks= 0;", "-\t\t\t\t}", "+\t\t\tresult= i;", "-\t\tif (indents < numberOfIndents)", "+\t\tif (blanks < spaceEquivalents)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a2c89325467653765a3e339adb1f5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "115aa955b9babd8a2ed6e802830c5035a2e2a28f", "commitAfterChange": "c555269f6d77af957f827daf14cfb9a3af0c01ad", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth)", "signatureAfterChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth)", "diff": ["-\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth) {", "+\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth) {", "-\t\tAssert.isTrue(indentWidth >= 0);", "-\t\t", "-\t\tint spaceEquivalents= numberOfIndents * indentWidth;", "-\t\t", "+\t\tint indents= 0;", "-\t\tfor (int i= 0; i < size && blanks < spaceEquivalents; i++) {", "+\t\tfor (int i= 0; i < size && indents < numberOfIndents; i++) {", "-\t\t\t\tint remainder= blanks % tabWidth;", "-\t\t\t\tblanks += tabWidth - remainder;", "+\t\t\t\tindents++;", "+\t\t\t\tresult= i;", "+\t\t\t\tblanks= 0;", "+\t\t\t\tif (blanks == tabWidth) {", "+\t\t\t\t\tresult= i;", "+\t\t\t\t\tindents++;", "+\t\t\t\t\tblanks= 0;", "+\t\t\t\t}", "-\t\t\tresult= i;", "-\t\tif (blanks < spaceEquivalents)", "+\t\tif (indents < numberOfIndents)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6526112f96b670143733fe87b25b1c41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "3c5f4a72fa40d161c5df0c986d4c60e32d52f863", "commitAfterChange": "98204916425a6241634af08472ba583f090f0116", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth)", "signatureAfterChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth)", "diff": ["-\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth) {", "+\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth) {", "+\t\tAssert.isTrue(indentWidth >= 0);", "+\t\t", "+\t\tint spaceEquivalents= numberOfIndents * indentWidth;", "+\t\t", "-\t\tint indents= 0;", "-\t\tfor (int i= 0; i < size && indents < numberOfIndents; i++) {", "+\t\tfor (int i= 0; i < size && blanks < spaceEquivalents; i++) {", "-\t\t\t\tindents++;", "-\t\t\t\tresult= i;", "-\t\t\t\tblanks= 0;", "+\t\t\t\tint remainder= blanks % tabWidth;", "+\t\t\t\tblanks += tabWidth - remainder;", "-\t\t\t\tif (blanks == tabWidth) {", "-\t\t\t\t\tresult= i;", "-\t\t\t\t\tindents++;", "-\t\t\t\t\tblanks= 0;", "-\t\t\t\t}", "+\t\t\tresult= i;", "-\t\tif (indents < numberOfIndents)", "+\t\tif (blanks < spaceEquivalents)"]}], "num": 44492}
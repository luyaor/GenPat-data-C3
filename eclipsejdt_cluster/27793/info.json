{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f773beeb2ec40133f25639fbf5eaf635", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14324bb27833dbd6c10fab9a66c832da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "be6a57f9d676bfd0ccdc79963ab2c8b8c692c4c8", "commitAfterChange": "bae8ac2b0f4b4d5d0db46dde8468bb2c22e17edf", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\tMap previousContainerValues = (Map)JavaModelManager.getJavaModelManager().previousSessionContainers.get(affectedProject);", "-\t\t\t\tif (previousContainerValues != null){", "-\t\t\t\t\tIClasspathContainer previousContainer = (IClasspathContainer)previousContainerValues.get(containerPath);", "-\t\t\t\t\tif (previousContainer != null) {", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tbuffer.append(\"CPContainer INIT - reentering access to project container during its initialization, will see previous value\\n\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\tbuffer.append(\"\tproject: \" + affectedProject.getElementName() + '\\n'); //$NON-NLS-1$", "-\t\t\t\t\t\t\tbuffer.append(\"\tcontainer path: \" + containerPath + '\\n'); //$NON-NLS-1$", "-\t\t\t\t\t\t\tbuffer.append(\"\tprevious value: \"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tbuffer.append(previousContainer.getDescription());", "-\t\t\t\t\t\t\tbuffer.append(\" {\\n\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tIClasspathEntry[] entries = previousContainer.getClasspathEntries();", "-\t\t\t\t\t\t\tif (entries != null){", "-\t\t\t\t\t\t\t\tfor (int j = 0; j < entries.length; j++){", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" \t\t\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tbuffer.append(entries[j]); ", "-\t\t\t\t\t\t\t\t\tbuffer.append('\\n'); ", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(\" \t}\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tUtil.verbose(buffer.toString());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, previousContainer); ", "-\t\t\t\t\t}", "-\t\t\t\t\toldContainer = null; //33695 - cannot filter out restored container, must update affected project to reset cached CP", "-\t\t\t\t} else {", "+//\t\t\t\tMap previousContainerValues = (Map)JavaModelManager.getJavaModelManager().previousSessionContainers.get(affectedProject);", "+//\t\t\t\tif (previousContainerValues != null){", "+//\t\t\t\t\tIClasspathContainer previousContainer = (IClasspathContainer)previousContainerValues.get(containerPath);", "+//\t\t\t\t\tif (previousContainer != null) {", "+//\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+//\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+//\t\t\t\t\t\t\tbuffer.append(\"CPContainer INIT - reentering access to project container during its initialization, will see previous value\\n\"); //$NON-NLS-1$ ", "+//\t\t\t\t\t\t\tbuffer.append(\"\tproject: \" + affectedProject.getElementName() + '\\n'); //$NON-NLS-1$", "+//\t\t\t\t\t\t\tbuffer.append(\"\tcontainer path: \" + containerPath + '\\n'); //$NON-NLS-1$", "+//\t\t\t\t\t\t\tbuffer.append(\"\tprevious value: \"); //$NON-NLS-1$", "+//\t\t\t\t\t\t\tbuffer.append(previousContainer.getDescription());", "+//\t\t\t\t\t\t\tbuffer.append(\" {\\n\"); //$NON-NLS-1$", "+//\t\t\t\t\t\t\tIClasspathEntry[] entries = previousContainer.getClasspathEntries();", "+//\t\t\t\t\t\t\tif (entries != null){", "+//\t\t\t\t\t\t\t\tfor (int j = 0; j < entries.length; j++){", "+//\t\t\t\t\t\t\t\t\tbuffer.append(\" \t\t\"); //$NON-NLS-1$", "+//\t\t\t\t\t\t\t\t\tbuffer.append(entries[j]); ", "+//\t\t\t\t\t\t\t\t\tbuffer.append('\\n'); ", "+//\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\tbuffer.append(\" \t}\"); //$NON-NLS-1$", "+//\t\t\t\t\t\t\tUtil.verbose(buffer.toString());", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, previousContainer); ", "+//\t\t\t\t\t}", "+//\t\t\t\t\toldContainer = null; //33695 - cannot filter out restored container, must update affected project to reset cached CP", "+//\t\t\t\t} else {", "-\t\t\t\t}", "+//\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2f4cc8922ef6a6cec5f7edd6dbdb61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "commitAfterChange": "3649f3f6d703fd53c9c12b41cdc037f657d98134", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic static IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "diff": ["+\t */\r", "+\tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException {\r", "+\r", "+\t\tMap projectContainers = (Map)JavaModelManager.Containers.get(project);\r", "+\t\tif (projectContainers == null){\r", "+\t\t\tprojectContainers = new HashMap(1);\r", "+\t\t\tJavaModelManager.Containers.put(project, projectContainers);\r", "+\t\t}\r", "+\t\tIClasspathContainer container = (IClasspathContainer)projectContainers.get(containerPath);\r", "+\r", "+\t\tif (container == JavaModelManager.ContainerInitializationInProgress) return null; // break cycle\r", "+\t\tif (container == null){\r", "+\t\t\tClasspathContainerInitializer initializer = JavaModelManager.getClasspathContainerInitializer(containerPath.segment(0));\r", "+\t\t\tif (initializer != null){\r", "+\t\t\t\tprojectContainers.put(containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles\r", "+\t\t\t\tboolean ok = false;\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tinitializer.initialize(containerPath.segment(0), containerPath.segment(1), project);\r", "+\t\t\t\t\tif (container != null){\r", "+\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();\r", "+\t\t\t\t\t\t// validation - no nested classpath container\r", "+\t\t\t\t\t\tif (entries != null){\r", "+\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "+\t\t\t\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\t\t\t\t\tif (entry == null || entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER){\r", "+\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY,\r", "+\t\t\t\t\t\t\t\t\t\t\tcontainerPath.toString()));\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tok = true;\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t\t} finally {\r", "+\t\t\t\t\tif (!ok) JavaModelManager.Containers.put(project, null); // flush cache\r", "+\t\t\t\t}\r", "+\t\t\t\tif (container != null){\r", "+\t\t\t\t\tprojectContainers.put(containerPath, container);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){\r", "+\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$\r", "+\t\t\t\t\tif (container != null){\r", "+\t\t\t\t\t\tSystem.out.print(\"container: \"+container.getDescription()+\" {\"); //$NON-NLS-2$//$NON-NLS-1$\r", "+\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();\r", "+\t\t\t\t\t\tif (entries != null){\r", "+\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "+\t\t\t\t\t\t\t\tif (i > 0) System.out.println(\", \");//$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\tSystem.out.println(entries[i]);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tSystem.out.println(\"}\");//$NON-NLS-1$\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tSystem.out.println(\"{unbound}\");//$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn container;\t\t\t\r", "+\t}\r", "-\t */\r", "-\tpublic static IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException {\r", "-\r", "-\t\tMap projectContainers = (Map)JavaModelManager.Containers.get(project);\r", "-\t\tif (projectContainers == null){\r", "-\t\t\tprojectContainers = new HashMap(1);\r", "-\t\t\tJavaModelManager.Containers.put(project, projectContainers);\r", "-\t\t}\r", "-\t\tIClasspathEntry[] entries = (IClasspathEntry[])projectContainers.get(containerPath);\r", "-\r", "-\t\tif (entries == JavaModelManager.ContainerInitializationInProgress) return null; // break cycle\r", "-\t\tif (entries == null){\r", "-\t\t\tClasspathContainerResolver resolver = JavaModelManager.getClasspathContainerResolver(containerPath);\r", "-\t\t\tif (resolver != null){\r", "-\t\t\t\tprojectContainers.put(containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles\r", "-\t\t\t\tboolean ok = false;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tentries = resolver.resolve(containerPath, project);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\t// validation - no nested classpath container\r", "-\t\t\t\t\tif (entries != null){\r", "-\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "-\t\t\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\t\t\t\tif (entry == null || entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER){\r", "-\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "-\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "-\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY,\r", "-\t\t\t\t\t\t\t\t\t\tcontainerPath.toString()));\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tok = true;\r", "-\t\t\t\t} catch(CoreException e){\r", "-\t\t\t\t\tthrow new JavaModelException(e);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (!ok) JavaModelManager.Containers.put(project, null); // flush cache\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entries != null){\r", "-\t\t\t\t\tprojectContainers.put(containerPath, entries);\r", "-\t\t\t\t}\r", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){\r", "-\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: \" + containerPath + \" --> {\"); //$NON-NLS-2$//$NON-NLS-1$\r", "-\t\t\t\t\tif (entries != null){\r", "-\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "-\t\t\t\t\t\t\tif (i > 0) System.out.println(\", \");//$NON-NLS-1$\r", "-\t\t\t\t\t\t\tSystem.out.println(entries[i]);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tSystem.out.println(\"}\");//$NON-NLS-1$\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn entries;\t\t\t\r"]}], "num": 27793}
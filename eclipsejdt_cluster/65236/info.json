{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79fb47018d5b3212403a70e611a3b882", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a33dbd982cb3d7ae664c1b398b3e02c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "43c947b648b5a1fa1fb7d4f5ce5b7cea1d4fa7a2", "commitAfterChange": "eee151556fa5628da58c297d3e841df408f33c62", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tint storeLeadingComments(ASTNode node, int previousEnd, Scanner scanner)", "signatureAfterChange": " \tint storeLeadingComments(ASTNode node, int previousEnd)", "diff": ["-\tint storeLeadingComments(ASTNode node, int previousEnd, Scanner scanner) {", "+\tint storeLeadingComments(ASTNode node, int previousEnd) {", "-\t\tint previousEndLine = scanner.getLineNumber(previousEnd);", "-\t\tint nodeStartLine = scanner.getLineNumber(nodeStart);", "+\t\tint previousEndLine = this.scanner.getLineNumber(previousEnd);", "+\t\tint nodeStartLine = this.scanner.getLineNumber(nodeStart);", "-\t\tint idx = getCommentIndex(this.commentIndex, nodeStart, -1);", "+\t\tint idx = getCommentIndex(0, nodeStart, -1);", "-\t\t\tint commentLine = scanner.getLineNumber(commentStart);", "+\t\t\tint commentLine = this.scanner.getLineNumber(commentStart);", "-\t\t\t\tscanner.resetTo(end+1, previousStart);", "+\t\t\t\tthis.scanner.resetTo(end+1, previousStart);", "-\t\t\t\t\tint token = scanner.getNextToken();", "-\t\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE || scanner.currentPosition != previousStart) {", "+\t\t\t\t\tint token = this.scanner.getNextToken();", "+\t\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE || this.scanner.currentPosition != previousStart) {", "-\t\t\t\tchar[] gap = scanner.getCurrentIdentifierSource();", "+\t\t\t\tchar[] gap = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\tscanner.resetTo(previousEnd, commentStart);", "+\t\t\t\tthis.scanner.resetTo(previousEnd, commentStart);", "-\t\t\t\t\twhile (scanner.currentPosition != commentStart) {", "-\t\t\t\t\t\tif (scanner.getNextToken() != TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t\t\tlastTokenEnd =  scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\twhile (this.scanner.currentPosition != commentStart) {", "+\t\t\t\t\t\tif (this.scanner.getNextToken() != TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\t\t\t\tlastTokenEnd =  this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\tint lastTokenLine = scanner.getLineNumber(lastTokenEnd);", "+\t\t\t\tint lastTokenLine = this.scanner.getLineNumber(lastTokenEnd);", "-\t\t\t\twhile (startIdx<length && lastTokenLine == scanner.getLineNumber(this.comments[startIdx].getStartPosition()) && nodeStartLine != lastTokenLine) {", "+\t\t\t\twhile (startIdx<length && lastTokenLine == this.scanner.getLineNumber(this.comments[startIdx].getStartPosition()) && nodeStartLine != lastTokenLine) {", "-\t\t\t\tthis.commentIndex = endIdx;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914ce6ee00e4b71a0b15cfe40d06a209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif ((bits & IsReachableMASK) == 0) {", "+\t\tif ((this.bits & IsReachableMASK) == 0) {", "-\t\tConstant cst, condCst;", "-\t\tboolean hasThenPart =", "-\t\t\t!((((cst = condition.constant) != NotAConstant)", "-\t\t\t\t&& (cst.booleanValue() == false))", "-\t\t\t\t|| (thenStatement == null)", "-\t\t\t\t|| (thenStatement.isEmptyBlock())", "-\t\t\t\t|| (((condCst = condition.conditionalConstant()) != NotAConstant)", "-\t\t\t\t\t&& (condCst.booleanValue() == false)));", "+\t\tConstant cst;", "+\t\tboolean hasThenPart = ", "+\t\t\t!(((cst = this.condition.optimizedBooleanConstant()) != NotAConstant", "+\t\t\t\t\t&& cst.booleanValue() == false)", "+\t\t\t\t|| this.thenStatement == null", "+\t\t\t\t|| this.thenStatement.isEmptyBlock());", "-\t\t\t!(((cst != NotAConstant) && (cst.booleanValue() == true))", "-\t\t\t\t|| (elseStatement == null)", "-\t\t\t\t|| (elseStatement.isEmptyBlock())", "-\t\t\t\t|| (((condCst = condition.conditionalConstant()) != NotAConstant)", "-\t\t\t\t\t&& (condCst.booleanValue() == true)));", "+\t\t\t!((cst != NotAConstant && cst.booleanValue() == true)", "+\t\t\t\t|| this.elseStatement == null", "+\t\t\t\t|| this.elseStatement.isEmptyBlock());", "-\t\t\tcondition.generateOptimizedBoolean(", "+\t\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\tthenStatement.generateCode(currentScope, codeStream);", "+\t\t\tthis.thenStatement.generateCode(currentScope, codeStream);", "-\t\t\t\tthenStatement.branchChainTo(endifLabel);", "+\t\t\t\tthis.thenStatement.branchChainTo(endifLabel);", "-\t\t\t\tcondition.generateOptimizedBoolean(", "+\t\t\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\t\tcondition.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "-\t\t\telseStatement.generateCode(currentScope, codeStream);", "+\t\t\tthis.elseStatement.generateCode(currentScope, codeStream);"]}], "num": 65236}
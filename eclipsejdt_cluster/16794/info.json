{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c31f6f9ff89da1688e8d6774c507068", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd6306d65d99028107e45da9d3ba57a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "691d3660a9e0208e3415b1156e7bd00c06b188c3", "commitAfterChange": "3a400ea31a60e9929f0d87b15c40a2e2624aa23a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": "  \tpublic void resourceChanged(final IResourceChangeEvent event)", "diff": ["-\tpublic void resourceChanged(IResourceChangeEvent event) {", "+", "+\tpublic void resourceChanged(final IResourceChangeEvent event) {", "+\t\tboolean isPostChange = event.getType() == IResourceChangeEvent.POST_CHANGE;", "+\t\tif (isPostChange) {", "+\t\t\tfor (int i = 0; i < this.preResourceChangeListenerCount; i++) {", "+\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "+\t\t\t\tfinal IResourceChangeListener listener = this.preResourceChangeListeners[i];", "+\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of pre Java resource change notification\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\tlistener.resourceChanged(event);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t}", "-\t\t\tif (event.getType() == IResourceChangeEvent.POST_CHANGE) {", "+\t\t\tif (isPostChange) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebef0d00b9714cfce8e816c77ddb1c34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "ce41f66e0706b1b71981331d2b2667a0940a3697", "commitAfterChange": "014eef8cad2ee5584b28815ec4238bd578f1c1b0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void resourceChanged(final IResourceChangeEvent event)", "signatureAfterChange": "  \tpublic void resourceChanged(final IResourceChangeEvent event)", "diff": ["-\t\tboolean isPostChange = event.getType() == IResourceChangeEvent.POST_CHANGE;", "-\t\tif (isPostChange) {", "-\t\t\tfor (int i = 0; i < this.preResourceChangeListenerCount; i++) {", "-\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "-\t\t\t\tfinal IResourceChangeListener listener = this.preResourceChangeListeners[i];", "+\t\tfor (int i = 0; i < this.preResourceChangeListenerCount; i++) {", "+\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "+\t\t\tfinal IResourceChangeListener listener = this.preResourceChangeListeners[i];", "+\t\t\tif ((this.preResourceChangeEventMasks[i] & event.getType()) != 0)", "-\t\t\t}", "-\t\t\tif (isPostChange) {", "+\t\t\tif (event.getType() == IResourceChangeEvent.POST_CHANGE) {"]}], "num": 16794}
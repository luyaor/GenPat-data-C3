{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb7d6ce97cdb7cedf3059edfeabe5a7b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56cb82728fecc3298399dd95322abeee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "commitAfterChange": "265ec26aa6d2cbdb7df581eef4b2a30df572f94f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void formatClassBodyDeclarations(ASTNode[] nodes)", "signatureAfterChange": " \tprivate void formatClassBodyDeclarations(ASTNode[] nodes)", "diff": ["-\t\t", "+\t\tthis.scribe.lastNumberOfNewLines = 1;", "-\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "+\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart, i == 0);", "+\t\t\t\t\t\t\tint newLineBeforeChunk = isChunkStart ? this.preferences.blank_lines_before_new_chunk : 0;", "+\t\t\t\t\t\t\tif (newLineBeforeChunk > 0 && i != 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLineBeforeChunk);", "+\t\t\t\t\t\t\t} else if (i == 0) {", "+\t\t\t\t\t\t\t\tint newLinesBeforeFirstClassBodyDeclaration = this.preferences.blank_lines_before_first_class_body_declaration;", "+\t\t\t\t\t\t\t\tif (newLinesBeforeFirstClassBodyDeclaration > 0) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLinesBeforeFirstClassBodyDeclaration);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "+\t\t\t\t\t\t\tformat(field, this, null, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, null, isChunkStart);", "+\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, null, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((TypeDeclaration)member, null, isChunkStart);", "+\t\t\t\t\t\tformat((TypeDeclaration)member, null, isChunkStart, i == 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d95792a5de7c33c595d6e764fce95192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " private void readHeaderInfo(RandomAccessFile file) throws IOException", "signatureAfterChange": " private void readHeaderInfo(RandomAccessFile file) throws IOException", "diff": ["-\tfor (int i = 0; i < size; i++)", "-\t\tthis.categoryOffsets.put(INTERNED_CATEGORY_NAMES.get(Util.readUTF(file)), file.readInt()); // cache offset to category table", "+\tthis.categoryEnds = new HashtableOfIntValues(size);", "+\tchar[] previousCategory = null;", "+\tint offset = -1;", "+\tfor (int i = 0; i < size; i++) {", "+\t\tchar[] categoryName = INTERNED_CATEGORY_NAMES.get(file.readUTF().toCharArray());", "+\t\toffset = file.readInt();", "+\t\tthis.categoryOffsets.put(categoryName, offset); // cache offset to category table", "+\t\tif (previousCategory != null) {", "+\t\t\tthis.categoryEnds.put(previousCategory, offset); // cache end of the category table", "+\t\t}", "+\t\tpreviousCategory = categoryName;", "+\t}", "+\tif (previousCategory != null) {", "+\t\tthis.categoryEnds.put(previousCategory, this.headerInfoOffset); // cache end of the category table", "+\t}"]}], "num": 26085}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f4d1cfa8034e27a7440bd25d05c56b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1564019aa8b36b19bffae5bb4903a527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "3e32cedb68e257de58ed115543445fc7d20d99a3", "commitAfterChange": "2350908b5752e3ff24a70139d6a734ea17063c3d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "signatureAfterChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "diff": ["-\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "-\t\t\t\t\t\t\t\tacceptDefaultName = false;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "-\t\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "-\t\t\t\t\t\t\t\t\tsuffixes[l]", "-\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\tsuffixName =", "-\t\t\t\t\t\t\t\t\texcludeNames(", "-\t\t\t\t\t\t\t\t\t\tsuffixName,", "-\t\t\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\t\t\tsuffixes[l],", "-\t\t\t\t\t\t\t\t\t\texcludedNames);", "-\t\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "-\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\ttry{", "+\t\t\t\t\t\t\t\tnameScanner.setSource(suffixName);", "+\t\t\t\t\t\t\t\tswitch (nameScanner.getNextToken()) {", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\t\tint token = nameScanner.getNextToken();", "+\t\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameEOF && nameScanner.startPosition == suffixName.length) {", "+\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "+\t\t\t\t\t\t\t\t\t\t\tsuffixes[l]", "+\t\t\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\t\t\t\tsuffixes[l],", "+\t\t\t\t\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\t\t\t\t\tnameScanner.setSource(suffixName);", "+\t\t\t\t\t\t\t\t\t\tswitch (nameScanner.getNextToken()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\t\t\t\ttoken = nameScanner.getNextToken();", "+\t\t\t\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameEOF && nameScanner.startPosition == suffixName.length) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch(InvalidInputException e){", "+\t\t\t\t\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67bd2608f57b5acd82a188023130a19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "9d8b73554095c311a209be1a1d5aa92bb30583eb", "commitAfterChange": "990424c900c7463d4257bff26a1ccc6812106204", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "signatureAfterChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "diff": ["+\t\tchar[] internalPrefix,", "+\t\t", "+\t\tif(internalPrefix == null) {", "+\t\t\tinternalPrefix = CharOperation.NO_CHAR;", "+\t\t} else {", "+\t\t\tinternalPrefix = removePrefix(internalPrefix, prefixes);", "+\t\t}", "-\t\tfor (int i = 0; i < tempNames.length; i++) {", "+\t\tnext : for (int i = 0; i < tempNames.length; i++) {", "-\t\t\tfor (int j = 0; j < prefixes.length; j++) {", "-\t\t\t\tif(prefixes[j].length > 0", "-\t\t\t\t\t&& Character.isLetterOrDigit(prefixes[j][prefixes[j].length - 1])) {", "-\t\t\t\t\ttempName[0] = Character.toUpperCase(tempName[0]);", "-\t\t\t\t} else {", "-\t\t\t\t\ttempName[0] = Character.toLowerCase(tempName[0]);", "-\t\t\t\t}", "-\t\t\t\tchar[] prefixName = CharOperation.concat(prefixes[j], tempName);", "-\t\t\t\tfor (int k = 0; k < suffixes.length; k++) {", "-\t\t\t\t\tchar[] suffixName = CharOperation.concat(prefixName, suffixes[k]);", "-\t\t\t\t\tsuffixName =", "-\t\t\t\t\t\texcludeNames(", "-\t\t\t\t\t\t\tsuffixName,", "-\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\tsuffixes[k],", "-\t\t\t\t\t\t\texcludedNames);", "-\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\tacceptName(suffixName, prefixes[j], suffixes[k],  j == 0, k == 0, requestor);", "-\t\t\t\t\t\tacceptDefaultName = false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tsuffixName = CharOperation.concat(", "-\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "-\t\t\t\t\t\t\tsuffixes[k]", "-\t\t\t\t\t\t);", "-\t\t\t\t\t\tsuffixName =", "-\t\t\t\t\t\t\texcludeNames(", "-\t\t\t\t\t\t\t\tsuffixName,", "-\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\tsuffixes[k],", "-\t\t\t\t\t\t\t\texcludedNames);", "-\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\t\tacceptName(suffixName, prefixes[j], suffixes[k], j == 0, k == 0, requestor);", "-\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\tchar[] unprefixedName = tempName;", "+\t\t\tfor (int j = 0; j <= internalPrefix.length; j++) {", "+\t\t\t\tif(j == internalPrefix.length || CharOperation.prefixEquals(CharOperation.subarray(internalPrefix, j, -1), unprefixedName, false)) {", "+\t\t\t\t\ttempName = CharOperation.concat(CharOperation.subarray(internalPrefix, 0, j), unprefixedName);", "+\t\t\t\t\tif(j != 0) tempName[j] = Character.toUpperCase(tempName[j]);", "+\t\t\t\t\tfor (int k = 0; k < prefixes.length; k++) {", "+\t\t\t\t\t\tif(prefixes[k].length > 0", "+\t\t\t\t\t\t\t&& Character.isLetterOrDigit(prefixes[k][prefixes[k].length - 1])) {", "+\t\t\t\t\t\t\ttempName[0] = Character.toUpperCase(tempName[0]);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttempName[0] = Character.toLowerCase(tempName[0]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tchar[] prefixName = CharOperation.concat(prefixes[k], tempName);", "+\t\t\t\t\t\tfor (int l = 0; l < suffixes.length; l++) {", "+\t\t\t\t\t\t\tchar[] suffixName = CharOperation.concat(prefixName, suffixes[l]);", "+\t\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\tsuffixes[l],", "+\t\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "+\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "+\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "+\t\t\t\t\t\t\t\t\tsuffixes[l]", "+\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\t\tsuffixes[l],", "+\t\t\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "+\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\tcontinue next;", "-\t\t\t", "-\t\t\trequestor.acceptNameWithoutPrefixAndSuffix(name);", "+\t\t\trequestor.acceptNameWithoutPrefixAndSuffix(name, 0);"]}], "num": 53637}
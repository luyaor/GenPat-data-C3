{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6e95b6a8ed1eadb0bf597db85d65e01", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85b0ea158790a735ad031536aadcb30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 19, "signatureBeforeChange": " public int literalIndexForJavaLangLong()", "signatureAfterChange": " public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface)", "diff": ["+}", "+public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface) {", "+\tint index = getFromCache(declaringClass, selector, signature);", "+\tif (index == -1) {", "+\t\tint classIndex;", "+\t\tif ((classIndex = classCache.get(declaringClass)) < 0) {", "+\t\t\tint nameIndex = literalIndex(declaringClass);", "+\t\t\tclassIndex = classCache.put(declaringClass, this.currentIndex++);", "+\t\tint nameAndTypeIndex = literalIndexForMethod(selector, signature);", "+\t\tindex = putInCache(declaringClass, selector, signature, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+\t\t}", "+\t\t// Write the interface method ref constant into the constant pool", "+\t\t// First add the tag", "+\t\twriteU1(isInterface ? InterfaceMethodRefTag : MethodRefTag);", "+\t\t// Then write the class index", "+\t\twriteU2(classIndex);", "+\t\t// The write the nameAndType index", "+\t\twriteU2(nameAndTypeIndex);\t\t", "+\t}", "+\treturn index;", "+}", "- */", "-public int literalIndexForJavaLangLong() {", "-\tint index;", "-\tif ((index = wellKnownTypes[JAVA_LANG_LONG_TYPE]) == 0) {", "-\t\tint nameIndex;", "-\t\t// The entry doesn't exit yet", "-\t\tnameIndex = literalIndex(QualifiedNamesConstants.JavaLangLongConstantPoolName);", "-\t\tindex = wellKnownTypes[JAVA_LANG_LONG_TYPE] = currentIndex++;", "-\t\tif (index > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\twriteU1(ClassTag);", "-\t\t// Then add the 8 bytes representing the long", "-\t\twriteU2(nameIndex);", "-\t}", "-\treturn index;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaaa19081cd5fbc3420f3ce47f2a1f1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 22, "signatureBeforeChange": " public int literalIndex(TypeBinding aTypeBinding)", "signatureAfterChange": " public int literalIndexForField(char[] declaringClass, char[] name, char[] signature)", "diff": ["-public int literalIndex(TypeBinding aTypeBinding) {", "-\tint nameIndex;", "-\tint indexWellKnownType;", "-\tif ((indexWellKnownType = indexOfWellKnownTypes(aTypeBinding)) == -1) {", "-\t\tif ((index = classCache.get(aTypeBinding)) < 0) {", "-\t\t\tnameIndex = literalIndex(aTypeBinding.constantPoolName());", "-\t\t\tindex = classCache.put(aTypeBinding, currentIndex++);", "-\t} else {", "-\t\tif ((index = wellKnownTypes[indexWellKnownType]) == 0) {", "-\t\t\t// Need to insert that binding", "-\t\t\tnameIndex = literalIndex(aTypeBinding.constantPoolName());", "-\t\t\tindex = wellKnownTypes[indexWellKnownType] = currentIndex++;", "+}", "+public int literalIndexForField(char[] declaringClass, char[] name, char[] signature) {", "+\tint index = getFromCache(declaringClass, name, signature);", "+\tif (index == -1) {", "+\t\tint classIndex;", "+\t\tif ((classIndex = classCache.get(declaringClass)) < 0) {", "+\t\t\t// The entry doesn't exit yet", "+\t\t\tint nameIndex = literalIndex(declaringClass);", "+\t\t\tclassIndex = classCache.put(declaringClass, this.currentIndex++);", "+\t\tint nameAndTypeIndex = literalIndexForField(name, signature);", "+\t\tindex = putInCache(declaringClass, name, signature, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+\t\t}", "+\t\t// Write the interface method ref constant into the constant pool", "+\t\t// First add the tag", "+\t\twriteU1(FieldRefTag);", "+\t\t// Then write the class index", "+\t\twriteU2(classIndex);", "+\t\t// The write the nameAndType index", "+\t\twriteU2(nameAndTypeIndex);\t\t"]}], "num": 21897}
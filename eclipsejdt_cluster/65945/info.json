{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "067eea79e52f97f9be03e1910233d12b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3933d4fa71fd549035dd925af7c5cf04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate void buildMethods()", "signatureAfterChange": " \t \tprivate void buildMethods()", "diff": ["-\t\tif (referenceContext.methods == null) {", "-\t\t\treferenceContext.binding.methods = NoMethods;", "-\t\t\treturn;", "+\t\t", "+\t\t// iterate the method declarations to create the bindings", "+\t\tint bindingCount;", "+\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "+\t\tint size = methods == null ? 0 : methods.length;", "+\t\tboolean isEnum = referenceContext.getKind() == IGenericType.ENUM;", "+\t\tif (isEnum) {", "+\t\t\t// reserve 2 slots for special enum methods: #values() and #valueOf(String)", "+\t\t\tbindingCount = 2;", "+\t\t} else {", "+\t\t\tif (size == 0) {", "+\t\t\t\treferenceContext.binding.methods = NoMethods;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tbindingCount = 0;", "-\t\t// iterate the method declarations to create the bindings", "-\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "-\t\tint size = methods.length;", "+\t\t// look for <clinit> method", "-\t\t\tif (methods[i] instanceof Clinit) {", "+\t\t\tif (methods[i].isClinit()) {", "-\t\tMethodBinding[] methodBindings = new MethodBinding[clinitIndex == -1 ? size : size - 1];", "-", "-\t\tint count = 0;", "+\t\tMethodBinding[] methodBindings = new MethodBinding[(clinitIndex == -1 ? size : size - 1) + bindingCount/*reserve room for special enum methods*/];", "+\t\t// create special methods for enums", "+\t\tif (isEnum) {", "+\t\t    SourceTypeBinding sourceType = referenceContext.binding;", "+\t\t\tmethodBindings[0] = sourceType.addSyntheticEnumMethod(TypeConstants.VALUES); // add <EnumType>[] values() ", "+\t\t\tmethodBindings[1] = sourceType.addSyntheticEnumMethod(TypeConstants.VALUEOF); // add <EnumType> valueOf() ", "+\t\t}", "+\t\t// create bindings for source methods", "-\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\t\t\t\tmethodBindings[bindingCount++] = methodBinding;", "-\t\tif (count != methodBindings.length)", "-\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[count], 0, count);", "+\t\tif (bindingCount != methodBindings.length)", "+\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[bindingCount], 0, bindingCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1df141c1cc7c7a7507eb453b0e3b7ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate void buildMethods()", "signatureAfterChange": " \t \tprivate void buildMethods()", "diff": ["-\t\t", "-\t\t// iterate the method declarations to create the bindings", "-\t\tint bindingCount;", "-\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "-\t\tint size = methods == null ? 0 : methods.length;", "-\t\tif (isEnum) {", "-\t\t\t// reserve 2 slots for special enum methods: #values() and #valueOf(String)", "-\t\t\tbindingCount = 2;", "-\t\t} else {", "-\t\t\tif (size == 0) {", "-\t\t\t\treferenceContext.binding.methods = NoMethods;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tbindingCount = 0;", "+\t\tif (referenceContext.methods == null && !isEnum) {", "+\t\t\treferenceContext.binding.methods = NoMethods;", "+\t\t\treturn;", "+\t\t// iterate the method declarations to create the bindings", "+\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "+\t\tint size = methods == null ? 0 : methods.length;", "-\t\tMethodBinding[] methodBindings = new MethodBinding[(clinitIndex == -1 ? size : size - 1) + bindingCount/*reserve room for special enum methods*/];", "+", "+\t\tint count = isEnum ? 2 : 0; // reserve 2 slots for special enum methods: #values() and #valueOf(String)", "+\t\tMethodBinding[] methodBindings = new MethodBinding[(clinitIndex == -1 ? size : size - 1) + count];", "-\t\t\t\t\tmethodBindings[bindingCount++] = methodBinding;", "+\t\t\t\t\tmethodBindings[count++] = methodBinding;", "-\t\tif (bindingCount != methodBindings.length)", "-\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[bindingCount], 0, bindingCount);", "+\t\tif (count != methodBindings.length)", "+\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[count], 0, count);"]}], "num": 65945}
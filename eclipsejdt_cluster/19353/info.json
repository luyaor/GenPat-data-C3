{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67fc8dec9b6a4a3eb5408faac8a4aa27", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1b428979e0a4efc7078549d3d0827d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IPath[] getIndexKeys()", "diff": ["-public IIndex[] getIndexes() {", "+public IPath[] getIndexKeys() {", "-\t// acquire the in-memory indexes on the fly", "-\tint length = this.indexKeys.length;", "-\tIIndex[] indexes = new IIndex[length];", "-\tint count = 0;", "-\tfor (int i = 0; i < length; i++){", "-\t\t// may trigger some index recreation work", "-\t\tIIndex index = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "-\t\tif (index != null) indexes[count++] = index; // only consider indexes which are ready yet", "-\t}", "-\tif (count != length) {", "-\t\tSystem.arraycopy(indexes, 0, indexes=new IIndex[count], 0, count);", "-\t}", "-\treturn indexes;", "+\treturn this.indexKeys;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d0f78fd46c88009da1337bbbde9ac1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "89d67345e9cc0e1f7b41a5c3ebe790ece5a2e718", "commitAfterChange": "4188bcd12cf75d1e13b09a6ac22e1c9dad829ea6", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "signatureAfterChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "diff": ["-\t\tif (argumentsString == null) return null;", "+\t\tif (argumentsString == null) {", "+\t\t\treturn null;", "+\t\t}", "-\t\tint numberOfArg;", "+\t\tint numberOfArg = 0;", "-\t\tString[] args = new String[length];", "-\t\tint count = 0;", "+\t\treturn decodeArgumentString(numberOfArg, argumentsString);", "+\t}", "-\t\tStringTokenizer tokenizer = new StringTokenizer(argumentsString, ARGUMENTS_DELIMITER);", "-\t\twhile(tokenizer.hasMoreTokens()) {", "-\t\t\tString argument = tokenizer.nextToken();", "-\t\t\tif(argument.equals(EMPTY_ARGUMENT))", "-\t\t\t\targument = \"\";  //$NON-NLS-1$", "-\t\t\targs[count++] = argument;", "-", "-\t\tif(count != numberOfArg)", "-", "-\t\tSystem.arraycopy(args, 0, args = new String[count], 0, count);", "-\t\treturn args;"]}], "num": 19353}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f0be03a040bd96255cf16f9b7ca9e54", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450678ac911f8b507f8085b51965e91a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "  ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized)", "signatureAfterChange": "  ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized)", "diff": ["-\t\tproblemReporter.isClassPathCorrect(compoundName, null);", "-\t\treturn null; // will not get here since the above error aborts the compilation", "+\t\t// create a proxy for the missing BinaryType", "+\t\tbinding = cacheMissingBinaryType(compoundName, this.unitBeingCompleted);", "-        binding = (ReferenceBinding)convertUnresolvedBinaryToRawType(binding);", "+        binding = (ReferenceBinding) convertUnresolvedBinaryToRawType(binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e55bdee5b64259377c50e16257f725d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-\t\tif (targetType != null && targetType != this) { // could not resolve any better, error was already reported against it", "-\t\t\tsetResolvedType(targetType, environment);", "-\t\t} else {", "-\t\t\tenvironment.problemReporter.isClassPathCorrect(this.compoundName, null);", "-\t\t\treturn null; // will not get here since the above error aborts the compilation", "+\t\tif (targetType == null || targetType == this) { // could not resolve any better, error was already reported against it", "+\t\t\t// create a proxy for the missing BinaryType", "+\t\t\ttargetType = environment.cacheMissingBinaryType(this.compoundName, null);", "+\t\tsetResolvedType(targetType, environment);"]}], "num": 36787}
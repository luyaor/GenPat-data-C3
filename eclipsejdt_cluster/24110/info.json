{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7b5fc1db2e363d0e696068be9c8c2fe", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d849e8fb4acac9fe92ac1a60ef72a22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory)", "diff": ["-\t\tINameEnvironment environment,", "-\t\tIErrorHandlingPolicy policy,", "-\t\tMap settings,", "-\t\tfinal ICompilerRequestor requestor,", "-\t\tIProblemFactory problemFactory) {", "-", "-\t\t// create a problem handler given a handling policy", "-\t\tthis.options = new CompilerOptions(settings);", "-\t\t", "-\t\t// wrap requestor in DebugRequestor if one is specified", "-\t\tif(DebugRequestor == null) {", "-\t\t\tthis.requestor = requestor;", "-\t\t} else {", "-\t\t\tthis.requestor = new ICompilerRequestor(){", "-\t\t\t\tpublic void acceptResult(CompilationResult result){", "-\t\t\t\t\tif (DebugRequestor.isActive()){", "-\t\t\t\t\t\tDebugRequestor.acceptDebugResult(result);", "-\t\t\t\t\t}", "-\t\t\t\t\trequestor.acceptResult(result);", "-\t\t\t\t}", "-\t\t\t};", "-\t\t}", "-\t\tthis.problemReporter =", "-\t\t\tnew ProblemReporter(policy, this.options, problemFactory);", "-\t\tthis.lookupEnvironment =", "-\t\t\tnew LookupEnvironment(this, this.options, this.problemReporter, environment);", "-\t\tinitializeParser();", "+\t\t\tINameEnvironment environment,", "+\t\t\tIErrorHandlingPolicy policy,", "+\t\t\tMap settings,", "+\t\t\tfinal ICompilerRequestor requestor,", "+\t\t\tIProblemFactory problemFactory) {", "+\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "+\t\t\t\tnull, false, false, false, false); // all defaults"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2716242da07dbff98a123d434611c8cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "da9e30a8d441a1da42a289d2606f77eaa8d811d1", "commitAfterChange": "ba5344094af5a10113083e490b48587602f0a697", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t public HierarchyResolver( \tINameEnvironment nameEnvironment, \tIErrorHandlingPolicy policy, \tMap settings, \tIHierarchyRequestor requestor, \tIProblemFactory problemFactory)", "signatureAfterChange": " \t public HierarchyResolver(INameEnvironment nameEnvironment, Map settings, IHierarchyRequestor requestor, IProblemFactory problemFactory)", "diff": ["-public HierarchyResolver(", "-\tINameEnvironment nameEnvironment,", "-\tIErrorHandlingPolicy policy,", "-\tMap settings,", "-\tIHierarchyRequestor requestor,", "-\tIProblemFactory problemFactory) {", "-", "-\t// create a problem handler given a handling policy", "-\toptions = settings == null ? new CompilerOptions() : new CompilerOptions(settings);", "-\tProblemReporter problemReporter = new ProblemReporter(policy, options, problemFactory);", "-\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, nameEnvironment);", "-\tthis.requestor = requestor;", "-", "-\tthis.typeIndex = -1;", "-\tthis.typeModels = new IGenericType[5];", "-\tthis.typeBindings = new ReferenceBinding[5];", "-}", "+\t// create a problem handler with the 'exit after all problems' handling policy", "+\toptions = settings == null ? new CompilerOptions() : new CompilerOptions(settings);", "+\tIErrorHandlingPolicy policy = DefaultErrorHandlingPolicies.exitAfterAllProblems();", "+\tProblemReporter problemReporter = new ProblemReporter(policy, options, problemFactory);", "+", "+\tthis.initialize(", "+\t\tnew LookupEnvironment(this, options, problemReporter, nameEnvironment),", "+\t\trequestor);", "+}"]}], "num": 24110}
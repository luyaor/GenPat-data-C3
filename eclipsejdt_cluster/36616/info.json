{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c9b08acc3fdf195f2b7d63699e67848", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1532c480f7a7c46490acb8e847d8d3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "644c4d9043a8634631a6c37637807f9484dbb1d4", "commitAfterChange": "fff3d1bb7cd12822df70202db7e6a801aeeb63a2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic ArrayBinding getArrayType(TypeBinding leafType, int dimensions, AnnotationBinding [] annotations)", "signatureAfterChange": " \tpublic ArrayBinding getArrayType(TypeBinding leafType, int dimensions, AnnotationBinding [] annotations)", "diff": ["-\t\t", "+\t\tif (leafType instanceof ArrayBinding) { // substitution attempts can cause this, don't create array of arrays.", "+\t\t\tdimensions += leafType.dimensions();", "+\t\t\tAnnotationBinding[] leafAnnotations = leafType.getTypeAnnotations();", "+\t\t\tleafType = leafType.leafComponentType();", "+\t\t\tAnnotationBinding [] allAnnotations = new AnnotationBinding[leafAnnotations.length + annotations.length + 1];", "+\t\t\tSystem.arraycopy(annotations, 0, allAnnotations, 0, annotations.length);", "+\t\t\tSystem.arraycopy(leafAnnotations, 0, allAnnotations, annotations.length + 1 /* leave a null */, leafAnnotations.length);", "+\t\t\tannotations = allAnnotations;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97d2b1c6e82ff278eaa385dd21ccc9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "2d86a2056325f93b4ade5bd0b8bf932dcb982fd5", "commitAfterChange": "aa7a65081771999e54f29a295541444307143029", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void testPotentialMatchInBinary() throws JavaModelException, CoreException", "signatureAfterChange": " public void testPotentialMatchInBinary() throws JavaModelException, CoreException", "diff": ["-\t// potential match for a field declaration", "-\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tnew SearchEngine().search(", "-\t\tgetWorkspace(),", "-\t\t\"MissingFieldType.*\",", "-\t\tFIELD, ", "-\t\tDECLARATIONS, ", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertEquals(", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.field [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.missing [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.otherField [No source] POTENTIAL_MATCH\", ", "-\t\tresultCollector.toString());", "-", "-\t// potential match for a method declaration", "-\tresultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tnew SearchEngine().search(", "-\t\tgetWorkspace(),", "-\t\t\"MissingArgumentType.foo*\",", "-\t\tMETHOD, ", "-\t\tDECLARATIONS, ", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertEquals(", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo() -> void [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo(java.util.EventListener) -> void [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo2() -> void [No source] POTENTIAL_MATCH\", ", "-\t\tresultCollector.toString());", "-", "-\t// potential match for a type declaration", "-\tresultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tnew SearchEngine().search(", "-\t\tgetWorkspace(),", "-\t\t\"Missing*\",", "-\t\tTYPE, ", "-\t\tDECLARATIONS, ", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertEquals(", "-\t\t\"AbortCompilation.jar AbortCompilation.EnclosingType$MissingEnclosingType [No source] EXACT_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType [No source] EXACT_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType [No source] EXACT_MATCH\", ", "-\t\tresultCollector.toString());", "+\tIJavaProject project = this.getJavaProject(\"JavaSearch\");", "+\tIClasspathEntry[] classpath = project.getRawClasspath();", "+\ttry {", "+\t\t// add AbortCompilation.jar to classpath", "+\t\tint length = classpath.length;", "+\t\tIClasspathEntry[] newClasspath = new IClasspathEntry[length+1];", "+\t\tSystem.arraycopy(classpath, 0, newClasspath, 0, length);", "+\t\tnewClasspath[length] = JavaCore.newLibraryEntry(new Path(\"/JavaSearch/AbortCompilation.jar\"), null, null);", "+\t\tproject.setRawClasspath(newClasspath, null);", "+\t\t", "+\t\t// potential match for a field declaration", "+\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+\t\tresultCollector.showAccuracy = true;", "+\t\tnew SearchEngine().search(", "+\t\t\tgetWorkspace(),", "+\t\t\t\"MissingFieldType.*\",", "+\t\t\tFIELD, ", "+\t\t\tDECLARATIONS, ", "+\t\t\tgetJavaSearchScope(), ", "+\t\t\tresultCollector);", "+\t\tassertEquals(", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.field [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.missing [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.otherField [No source] POTENTIAL_MATCH\", ", "+\t\t\tresultCollector.toString());", "+\t", "+\t\t// potential match for a method declaration", "+\t\tresultCollector = new JavaSearchResultCollector();", "+\t\tresultCollector.showAccuracy = true;", "+\t\tnew SearchEngine().search(", "+\t\t\tgetWorkspace(),", "+\t\t\t\"MissingArgumentType.foo*\",", "+\t\t\tMETHOD, ", "+\t\t\tDECLARATIONS, ", "+\t\t\tgetJavaSearchScope(), ", "+\t\t\tresultCollector);", "+\t\tassertEquals(", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo() -> void [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo(java.util.EventListener) -> void [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo2() -> void [No source] POTENTIAL_MATCH\", ", "+\t\t\tresultCollector.toString());", "+\t", "+\t\t// potential match for a type declaration", "+\t\tresultCollector = new JavaSearchResultCollector();", "+\t\tresultCollector.showAccuracy = true;", "+\t\tnew SearchEngine().search(", "+\t\t\tgetWorkspace(),", "+\t\t\t\"Missing*\",", "+\t\t\tTYPE, ", "+\t\t\tDECLARATIONS, ", "+\t\t\tgetJavaSearchScope(), ", "+\t\t\tresultCollector);", "+\t\tassertEquals(", "+\t\t\t\"AbortCompilation.jar AbortCompilation.EnclosingType$MissingEnclosingType [No source] EXACT_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType [No source] EXACT_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType [No source] EXACT_MATCH\", ", "+\t\t\tresultCollector.toString());", "+\t} finally {", "+\t\t// reset classpath", "+\t\tproject.setRawClasspath(classpath, null);", "+\t}"]}], "num": 36616}
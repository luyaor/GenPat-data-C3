{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88f44ecd15c2bbd001a825ee3c110d4f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ef8cb94f5c1d05c6dd5a4b398082e93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "25103278422daeccda98025a5289b5f19be0df34", "commitAfterChange": "e22e3614eb69018940fae05b9e58858f8a672e01", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tthrow new InvalidInputException(\"no source file specified\");\r", "+\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\"/*nonNLS*/));\r", "-\t\tif (currentArg.endsWith(\".java\")) {\r", "+\t\tif (currentArg.endsWith(\".java\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-log\")) {\r", "+\t\tif (currentArg.equals(\"-log\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"duplicate log specification: \" + currentArg);\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateLog\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-repeat\")) {\r", "+\t\tif (currentArg.equals(\"-repeat\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"duplicate repeat specification: \" + currentArg);\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateRepeat\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-d\")) {\r", "+\t\tif (currentArg.equals(\"-d\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"duplicate output path specification: \" + currentArg);\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateOutputPath\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-classpath\")) {\r", "+\t\tif (currentArg.equals(\"-classpath\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"duplicate classpath specification: \" + currentArg);\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateClasspath\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-progress\")) {\r", "+\t\tif (currentArg.equals(\"-progress\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-proceedOnError\")) {\r", "+\t\tif (currentArg.equals(\"-proceedOnError\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-time\")) {\r", "+\t\tif (currentArg.equals(\"-time\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-version\") || currentArg.equals(\"-v\")) {\r", "+\t\tif (currentArg.equals(\"-version\"/*nonNLS*/) || currentArg.equals(\"-v\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-help\")) {\r", "+\t\tif (currentArg.equals(\"-help\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-noImportError\")) {\r", "+\t\tif (currentArg.equals(\"-noImportError\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-noExit\")) {\r", "+\t\tif (currentArg.equals(\"-noExit\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-verbose\")) {\r", "+\t\tif (currentArg.equals(\"-verbose\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-referenceInfo\")) {\r", "+\t\tif (currentArg.equals(\"-referenceInfo\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.startsWith(\"-g\")) {\r", "+\t\tif (currentArg.startsWith(\"-g\"/*nonNLS*/)) {\r", "-\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\"))\r", "+\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\"/*nonNLS*/))\r", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\");\r", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"/*nonNLS*/);\r", "-\t\t\t\t\tif (token.equals(\"vars\")) {\r", "+\t\t\t\t\tif (token.equals(\"vars\"/*nonNLS*/)) {\r", "-\t\t\t\t\t} else if (token.equals(\"lines\")) {\r", "+\t\t\t\t\t} else if (token.equals(\"lines\"/*nonNLS*/)) {\r", "-\t\t\t\t\t} else if (token.equals(\"source\")) {\r", "+\t\t\t\t\t} else if (token.equals(\"source\"/*nonNLS*/)) {\r", "-\t\t\t\t\t\tthrow new InvalidInputException(\"invalid debug option: \" + debugOption);\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\"/*nonNLS*/,debugOption));\r", "-\t\t\tthrow new InvalidInputException(\"invalid debug option: \" + debugOption);\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\"/*nonNLS*/,debugOption));\r", "-\t\tif (currentArg.startsWith(\"-nowarn\")) {\r", "+\t\tif (currentArg.startsWith(\"-nowarn\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"duplicate usage of warning configuration\");\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\"/*nonNLS*/));\r", "-\t\tif (currentArg.startsWith(\"-warn\")) {\r", "+\t\tif (currentArg.startsWith(\"-warn\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"duplicate usage of warning configuration\");\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\"/*nonNLS*/));\r", "-\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) {\r", "+\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"invalid warning configuration: \" + warningOption);\r", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\");\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningConfiguration\"/*nonNLS*/,warningOption));\r", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\"/*nonNLS*/);\r", "-\t\t\t\tif (token.equals(\"constructorName\")) {\r", "+\t\t\t\tif (token.equals(\"constructorName\"/*nonNLS*/)) {\r", "-\t\t\t\t} else if (token.equals(\"packageDefaultMethod\")) {\r", "+\t\t\t\t} else if (token.equals(\"packageDefaultMethod\"/*nonNLS*/)) {\r", "-\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) {\r", "+\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\"/*nonNLS*/)) {\r", "-\t\t\t\t} else if (token.equals(\"deprecation\")) {\r", "+\t\t\t\t} else if (token.equals(\"deprecation\"/*nonNLS*/)) {\r", "-\t\t\t\t} else if (token.equals(\"unusedLocals\")) {\r", "+\t\t\t\t} else if (token.equals(\"unusedLocals\"/*nonNLS*/)) {\r", "-\t\t\t\t} else if (token.equals(\"unusedArguments\")) {\r", "+\t\t\t\t} else if (token.equals(\"unusedArguments\"/*nonNLS*/)) {\r", "-\t\t\t\t} else if (token.equals(\"syntheticAccess\")){\r", "+\t\t\t\t} else if (token.equals(\"syntheticAccess\"/*nonNLS*/)){\r", "-\t\t\t\t} else if (token.equals(\"nls\")){\r", "+\t\t\t\t} else if (token.equals(\"nls\"/*nonNLS*/)){\r", "-\t\t\t\t\tthrow new InvalidInputException(\"invalid warning: \" + token);\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\"/*nonNLS*/,token));\r", "-\t\t\t\tthrow new InvalidInputException(\"invalid warning option: \" + currentArg);\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningOption\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-target\")) {\r", "+\t\tif (currentArg.equals(\"-target\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-preserveAllLocals\")) {\r", "+\t\tif (currentArg.equals(\"-preserveAllLocals\"/*nonNLS*/)) {\r", "-\t\t\tif (currentArg.equals(\"1.1\")) {\r", "+\t\t\tif (currentArg.equals(\"1.1\"/*nonNLS*/)) {\r", "-\t\t\t} else if (currentArg.equals(\"1.2\")) {\r", "+\t\t\t} else if (currentArg.equals(\"1.2\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(\"target JDK is either '1.1' or '1.2': \" + currentArg);\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\"/*nonNLS*/,currentArg));\r", "-\t\t\t\t\tthrow new InvalidInputException(\"repetition must be a positive integer: \" + currentArg);\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\"/*nonNLS*/,currentArg));\r", "-\t\t\t\tthrow new InvalidInputException(\"repetition must be a positive integer: \" + currentArg);\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\"/*nonNLS*/,currentArg));\r", "-\t\t\tthrow new InvalidInputException(\"directory does not exist: \" + currentArg);\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.directoryNotExist\"/*nonNLS*/,currentArg));\r", "-\t\t\tfinder.find(dir, \".JAVA\", verbose);\r", "+\t\t\tfinder.find(dir, \".JAVA\"/*nonNLS*/, verbose);\r", "-\t\t\tthrow new InvalidInputException(\"i/o error : unable to retrieve .JAVA files in directory: \" + currentArg);\t\t\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\"/*nonNLS*/,currentArg));\t\t\r", "-\t\tString classProp = System.getProperty(\"LFclasspath\");\r", "+\t\tString classProp = System.getProperty(\"LFclasspath\"/*nonNLS*/);\r", "-\t\t\tclassProp = \".\";\r", "+\t\t\tclassProp = \".\"/*nonNLS*/;\r", "-\t\tdestinationPath = System.getProperty(\"user.dir\");\r", "-\t} else if (\"none\".equals(destinationPath)) {\r", "+\t\tdestinationPath = System.getProperty(\"user.dir\"/*nonNLS*/);\r", "+\t} else if (\"none\"/*nonNLS*/.equals(destinationPath)) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc64283973c1a18e82a3edb231f10408", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "25103278422daeccda98025a5289b5f19be0df34", "commitAfterChange": "e22e3614eb69018940fae05b9e58858f8a672e01", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected void compile(String[] argv)", "signatureAfterChange": "\r protected void compile(String[] argv)", "diff": ["-\t\tif (showProgress) System.out.print(\"Compiling\");\r", "+\t\tif (showProgress) System.out.print(Main.bind(\"progress.compiling\"/*nonNLS*/));\r", "-\t\t\t\tout.println(\"Repetition \"+(i+1)+\"/\"+repetitions);\r", "+\t\t\t\tout.println(Main.bind(\"compile.repetition\"/*nonNLS*/,String.valueOf(i+1),String.valueOf(repetitions)));\r", "-\t\t\t\t\tout.println(\"Compiled \" + lineCount + \" lines in \"+ time + \" ms (\"+ (((int)((lineCount*10000.0)/time))/10.0) + \" lines/s)\");\r", "+\t\t\t\t\tout.println(Main.bind(\"compile.instantTime\"/*nonNLS*/,new String[]{String.valueOf(lineCount),String.valueOf(time),String.valueOf((((int)((lineCount*10000.0)/time))/10.0))}));\r", "-\t\t\t\t\tout.println(\"Total compilation time: \" + time);\r", "+\t\t\t\t\tout.println(Main.bind(\"compile.totalTime\"/*nonNLS*/,String.valueOf(time)));\r", "+\t\t\t\t\t\r", "-\t\t\t\t\tout.print(\"1 problem (\");\r", "+\t\t\t\t\tout.print(Main.bind(\"compile.oneProblem\"/*nonNLS*/));\r", "-\t\t\t\t\tout.print(globalProblemsCount + \" problems (\");\r", "+\t\t\t\t\tout.print(Main.bind(\"compile.severalProblems\"/*nonNLS*/,String.valueOf(globalProblemsCount)));\r", "+\t\t\t\tout.println(\" (\"/*nonNLS*/);\r", "-\t\t\t\t\t\tout.print(\"1 error\");\r", "+\t\t\t\t\t\tout.print(Main.bind(\"compile.oneError\"/*nonNLS*/));\r", "-\t\t\t\t\t\tout.print(globalErrorsCount + \" errors\");\r", "+\t\t\t\t\t\tout.print(Main.bind(\"compile.severalErrors\"/*nonNLS*/,String.valueOf(globalErrorsCount)));\r", "-\t\t\t\t\t\tout.print(\", \");\r", "+\t\t\t\t\t\tout.print(\", \"/*nonNLS*/);\r", "-\t\t\t\t\t\tout.print(\"1 warning\");\r", "+\t\t\t\t\t\tout.print(Main.bind(\"compile.oneWarning\"/*nonNLS*/));\r", "-\t\t\t\t\t\tout.print(globalWarningsCount + \" warnings\");\r", "+\t\t\t\t\t\tout.print(Main.bind(\"compile.severalWarnings\"/*nonNLS*/,String.valueOf(globalWarningsCount)));\r", "-\t\t\t\tout.println(\")\");\r", "+\t\t\t\tout.println(\")\"/*nonNLS*/);\r", "-\t\t\t\t\tout.println(\"1 .class file generated\");\r", "+\t\t\t\t\tout.print(Main.bind(\"compile.oneClassFileGenerated\"/*nonNLS*/));\r", "-\t\t\t\t\tout.println(exportedClassFilesCounter + \" .class files generated\");\r", "+\t\t\t\t\tout.print(Main.bind(\"compile.severalClassFilesGenerated\"/*nonNLS*/,String.valueOf(exportedClassFilesCounter)));\r", "-\t\tout.println(\"------------------------\");\r", "+\t\tout.println(\"------------------------\"/*nonNLS*/);\r"]}], "num": 40409}
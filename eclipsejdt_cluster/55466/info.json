{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3f6c226012f5e2c92774e264b7f5b12", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "391c032bf25469c643553876e5968222", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-", "-    FieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\tSyntheticMethodBinding accessor =", "-\t\t\tthis.syntheticReadAccessors == null", "-\t\t\t\t? null", "-\t\t\t\t: this.syntheticReadAccessors[this.syntheticReadAccessors.length - 1];", "-\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\tif (accessor == null) {", "-\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tcodeStream.dup();", "-\t\t\tif (accessor == null) {", "-\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "-\t\t\t}", "-\t\t}", "-", "-\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-", "-\t\t// duplicate the old field value", "-\t\tint operandType = this.implicitConversion & TypeIds.COMPILE_TYPE_MASK;", "-\t\tif (valueRequired) {", "-\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\tif (operandType == T_long || operandType == T_double) {", "-\t\t\t\t\tcodeStream.dup2();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup();", "-\t\t\t\t}", "-\t\t\t} else { // Stack:  [owner][old field value]  ---> [old field value][owner][old field value]", "-\t\t\t\tif (operandType == T_long || operandType == T_double) {", "-\t\t\t\t\tcodeStream.dup2_x1();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup_x1();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\tcodeStream.sendOperator(postIncrement.operator, operandType);", "-\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "-\t\tfieldStore(codeStream, lastFieldBinding, this.syntheticWriteAccessor, false);", "-\t} else {", "-\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\tif (valueRequired) {", "-\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG) || (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\tcodeStream.dup2();", "-\t\t\t} else {", "-\t\t\t\tcodeStream.dup();", "-\t\t\t}", "-\t\t}", "-\t\tcodeStream.generateEmulationForField(lastFieldBinding);", "-\t\tif ((lastFieldBinding.type == TypeBinding.LONG) || (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\tcodeStream.dup_x2();", "-\t\t\tcodeStream.pop();", "-\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\tcodeStream.aconst_null();", "-\t\t\t} else {", "-\t\t\t\tgenerateReadSequence(currentScope, codeStream);", "-\t\t\t}", "-\t\t\tcodeStream.dup_x2();", "-\t\t\tcodeStream.pop();", "-\t\t} else {", "-\t\t\tcodeStream.dup_x1();", "-\t\t\tcodeStream.pop();", "-\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\tcodeStream.aconst_null();", "-\t\t\t} else {", "-\t\t\t\tgenerateReadSequence(currentScope, codeStream);", "-\t\t\t}", "-\t\t\tcodeStream.dup_x1();", "-\t\t\tcodeStream.pop();", "-\t\t}", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "-\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "-\t\tcodeStream.generateEmulatedWriteAccessForField(lastFieldBinding);", "+    FieldBinding lastFieldBinding = this.otherBindings == null ? (FieldBinding) this.binding : this.otherBindings[this.otherBindings.length-1];", "+\tif (lastFieldBinding.canBeSeenBy(getFinalReceiverType(), this, currentScope)) {", "+\t\tsuper.generatePostIncrement(currentScope, codeStream, postIncrement, valueRequired);", "+\t\treturn;", "+\tlastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\tif (valueRequired) {", "+\t\tswitch (lastFieldBinding.type.id) {", "+\t\t\tcase TypeIds.T_long :", "+\t\t\tcase TypeIds.T_double :", "+\t\t\t\tcodeStream.dup2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tcodeStream.dup();", "+\t\t\tbreak;\t", "+\t\t}\t\t", "+\t}", "+\tcodeStream.generateEmulationForField(lastFieldBinding);", "+\tif ((lastFieldBinding.type == TypeBinding.LONG) || (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\tcodeStream.dup_x2();", "+\t\tcodeStream.pop();", "+\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\tcodeStream.aconst_null();", "+\t\t} else {", "+\t\t\tgenerateReadSequence(currentScope, codeStream);", "+\t\t}", "+\t\tcodeStream.dup_x2();", "+\t\tcodeStream.pop();", "+\t} else {", "+\t\tcodeStream.dup_x1();", "+\t\tcodeStream.pop();", "+\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\tcodeStream.aconst_null();", "+\t\t} else {", "+\t\t\tgenerateReadSequence(currentScope, codeStream);", "+\t\t}", "+\t\tcodeStream.dup_x1();", "+\t\tcodeStream.pop();", "+\t}", "+\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "+\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "+\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "+\tcodeStream.generateEmulatedWriteAccessForField(lastFieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80e3b0ceff9e56dcf93961426b6cce2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "92852bca9a4e0ceab73bc2cba44652396852b1a5", "commitAfterChange": "20fabe8e19e8477c8c4c948361535071499aefa9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\tthis.collection.computeConversion(scope, collectionType, collectionType);", "+\t\t\t\tthis.collection.computeConversion(scope,collectionType, collectionType);", "-\t\t\t    if (iterableType != null) {", "-\t\t\t\t    if (iterableType.isParameterizedType()) { // for(E e : Iterable<E>)", "-\t\t\t\t\t    ParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding)iterableType;", "-\t\t\t\t\t\tif (parameterizedType.arguments.length == 1) { // per construction can only be one", "-\t\t\t\t\t\t\tthis.kind = GENERIC_ITERABLE;", "-\t\t\t\t\t\t\tthis.collectionElementType = parameterizedType.arguments[0]; ", "+\t\t\t    checkIterable: {", "+\t\t\t    \tif (iterableType == null) break checkIterable;", "+\t\t\t    \t", "+\t\t\t\t\tthis.iteratorReceiverType = collectionType.erasure();", "+\t\t\t\t\tif (((ReferenceBinding)iteratorReceiverType).findSuperTypeErasingTo(T_JavaLangIterable, false) == null) {", "+\t\t\t\t\t\tthis.iteratorReceiverType = iterableType; // handle indirect inheritance thru variable secondary bound", "+\t   \t\t\t\t\tthis.collection.computeConversion(scope, iterableType, collectionType);", "+\t\t\t\t\t} else {", "+\t   \t\t\t\t\tthis.collection.computeConversion(scope, collectionType, collectionType);", "+\t\t\t\t\t}", "+", "+\t\t\t    \tTypeBinding[] arguments = null;", "+\t\t\t    \tswitch (iterableType.kind()) {", "+\t\t\t    \t\tcase Binding.RAW_TYPE : // for(Object o : Iterable)", "+\t\t\t\t\t\t\tthis.kind = RAW_ITERABLE;", "+\t\t\t\t\t\t\tthis.collectionElementType = scope.getJavaLangObject();", "-\t\t\t\t\t\t\tint compileTimeTypeID = collectionElementType.id;", "+\t\t\t    \t\t\tbreak checkIterable;", "+\t\t\t    \t\t\t", "+\t\t\t    \t\tcase Binding.GENERIC_TYPE : // for (T t : Iterable<T>) - in case used inside Iterable itself", "+\t\t\t    \t\t\targuments = iterableType.typeVariables();", "+\t\t\t    \t\t\tbreak;", "+\t\t\t    \t\t\t", "+\t\t\t    \t\tcase Binding.PARAMETERIZED_TYPE : // for(E e : Iterable<E>)", "+\t\t\t    \t\t\targuments = ((ParameterizedTypeBinding)iterableType).arguments;", "+\t\t\t    \t\t\tbreak;", "+\t\t\t    \t\t\t", "+\t\t\t    \t\tdefault:", "+\t\t\t    \t\t\tbreak checkIterable;", "+\t\t\t    \t}", "+\t\t\t    \t// generic or parameterized case", "+\t\t\t\t\tif (arguments.length != 1) break checkIterable; // per construction can only be one", "+\t\t\t\t\tthis.kind = GENERIC_ITERABLE;", "+\t\t\t\t\t", "+\t\t\t\t\tthis.collectionElementType = arguments[0]; ", "+\t\t\t\t\tif (!collectionElementType.isCompatibleWith(elementType)", "+\t\t\t\t\t\t\t&& !scope.isBoxingCompatibleWith(collectionElementType, elementType)) {", "+\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesErrorInForeach(collection, collectionElementType, elementType);", "+\t\t\t\t\t}", "+\t\t\t\t\tint compileTimeTypeID = collectionElementType.id;", "+\t\t\t\t\t// no conversion needed as only for reference types", "+\t\t\t\t\tif (elementType.isBaseType()) {", "+\t\t\t\t\t\tif (!collectionElementType.isBaseType()) {", "+\t\t\t\t\t\t\tcompileTimeTypeID = scope.environment().computeBoxingType(collectionElementType).id;", "+\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = UNBOXING;", "-\t\t\t\t\t\t\t\tif (!collectionElementType.isBaseType()) {", "-\t\t\t\t\t\t\t\t\tcompileTimeTypeID = scope.environment().computeBoxingType(collectionElementType).id;", "-\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = UNBOXING;", "-\t\t\t\t\t\t\t\t\tif (elementType.isBaseType()) {", "-\t\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening |= (elementType.id << 4) + compileTimeTypeID;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = (elementType.id << 4) + compileTimeTypeID;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (collectionElementType.isBaseType()) {", "-\t\t\t\t\t\t\t\t\tint boxedID = scope.environment().computeBoxingType(collectionElementType).id;", "-\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = BOXING | (compileTimeTypeID << 4) | compileTimeTypeID; // use primitive type in implicit conversion", "-\t\t\t\t\t\t\t\t\tcompileTimeTypeID = boxedID;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening |= (elementType.id << 4) + compileTimeTypeID;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = (elementType.id << 4) + compileTimeTypeID;", "-\t\t\t\t    } else if (iterableType.isGenericType()) { // for (T t : Iterable<T>) - in case used inside Iterable itself", "-\t\t\t\t\t\tif (iterableType.typeVariables().length == 1) {", "-\t\t\t\t\t\t\tthis.kind = GENERIC_ITERABLE;", "-\t\t\t\t\t\t\tthis.collectionElementType = iterableType.typeVariables()[0]; ", "-\t\t\t\t\t\t\tif (!collectionElementType.isCompatibleWith(elementType)", "-\t\t\t\t\t\t\t\t\t&& !scope.isBoxingCompatibleWith(collectionElementType, elementType)) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesErrorInForeach(collection, collectionElementType, elementType);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tint compileTimeTypeID = collectionElementType.id;", "-\t\t\t\t\t\t\t// no conversion needed as only for reference types", "-\t\t\t\t\t\t\tif (elementType.isBaseType()) {", "-\t\t\t\t\t\t\t\tif (!collectionElementType.isBaseType()) {", "-\t\t\t\t\t\t\t\t\tcompileTimeTypeID = scope.environment().computeBoxingType(collectionElementType).id;", "-\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = UNBOXING;", "-\t\t\t\t\t\t\t\t\tif (elementType.isBaseType()) {", "-\t\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening |= (elementType.id << 4) + compileTimeTypeID;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = (elementType.id << 4) + compileTimeTypeID;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (collectionElementType.isBaseType()) {", "-\t\t\t\t\t\t\t\t\tint boxedID = scope.environment().computeBoxingType(collectionElementType).id;", "-\t\t\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = BOXING | (compileTimeTypeID << 4) | compileTimeTypeID; // use primitive type in implicit conversion", "-\t\t\t\t\t\t\t\t\tcompileTimeTypeID = boxedID;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (collectionElementType.isBaseType()) {", "+\t\t\t\t\t\t\tint boxedID = scope.environment().computeBoxingType(collectionElementType).id;", "+\t\t\t\t\t\t\tthis.elementVariableImplicitWidening = BOXING | (compileTimeTypeID << 4) | compileTimeTypeID; // use primitive type in implicit conversion", "+\t\t\t\t\t\t\tcompileTimeTypeID = boxedID;", "-\t\t\t\t\t} else if (iterableType.isRawType()) { // for(Object o : Iterable)", "-\t\t\t\t\t\tthis.kind = RAW_ITERABLE;", "-\t\t\t\t\t\tthis.collectionElementType = scope.getJavaLangObject();", "-\t\t\t\t\t\tif (!collectionElementType.isCompatibleWith(elementType)", "-\t\t\t\t\t\t\t\t&& !scope.isBoxingCompatibleWith(collectionElementType, elementType)) {", "-\t\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesErrorInForeach(collection, collectionElementType, elementType);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// no conversion needed as only for reference types", "-\t\t\t\t\t}\t\t\t    ", "+\t\t\t\t\t}"]}], "num": 55466}
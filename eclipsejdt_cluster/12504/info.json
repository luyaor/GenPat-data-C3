{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "addcfc265412700f69e4b0dff7e0a760", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a357747b0439b70187344fc26358cbbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,\tInvocationSite invocationSite)", "diff": ["-\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope)) {", "-\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope, null)) {", "+\t\t\t\tcase MISMATCH :", "-\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\tcase UNCHECKED :", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db33bcbc92232355738f8dd4e364c8f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments)", "signatureAfterChange": " \t \tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments, InvocationSite site)", "diff": ["-\tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments) {", "+\tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments, InvocationSite site) {", "-\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope)) {", "-\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\tASTNode location = site instanceof ASTNode ? (ASTNode) site : null;", "+\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope, location)) {", "+\t\t\t\tcase MISMATCH :", "-\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\tcase UNCHECKED :", "+\t\t\t\tdefault:", "+\t\t\t\t\tbreak;"]}], "num": 12504}
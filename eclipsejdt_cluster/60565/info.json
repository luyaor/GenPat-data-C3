{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9aff637ece3e907f5a5acd6f883c5111", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5045b041ad06991b11f78acdaa0978", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "de65819236a978eabe6f11a104e36a24db789ea9", "commitAfterChange": "1b976600c434b11b3265b882431a4b1ae03c69f7", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void test047()", "signatureAfterChange": " \tpublic void test047()", "diff": ["+\t\t", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString actualOutput = null;", "+\t\ttry {", "+\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "+\t\t\tactualOutput =", "+\t\t\t\tdisassembler.disassemble(", "+\t\t\t\t\tclassFileBytes,", "+\t\t\t\t\t\"\\n\",", "+\t\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "+\t\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\t\tassertTrue(\"ClassFormatException\", false);", "+\t\t} catch (IOException e) {", "+\t\t\tassertTrue(\"IOException\", false);", "+\t\t}", "+\t\t", "+\t\tString expectedOutput = ", "+\t\t\t\"  // Method descriptor  #6 ()V\\n\" + ", "+\t\t\t\"  // Stack: 0, Locals: 1\\n\" + ", "+\t\t\t\"  @I(val={false})\\n\" + ", "+\t\t\t\"  void foo();\\n\" + ", "+\t\t\t\"    0  return\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 7]\\n\" + ", "+\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"}\"; ", "+\t\t\t", "+\t\tif (actualOutput.indexOf(expectedOutput) == -1) {", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));", "+\t\t}", "+\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5d207f5fa5a1d8989dc4dd8de530b67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "46707c76fd68c0bae496959cbe90bc206d6a8322", "commitAfterChange": "4b6ca10fae490fdd3d43c251801c6ab4492e083d", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tpublic void test051()", "signatureAfterChange": " \t \tpublic void test051()", "diff": ["-\t\t\t\t\"    String value() default ;\\n\" + ", "+\t\t\t\t\"    String value() default \\\"Hello\\\";\\n\" + ", "-\t\t\t\t\"    @I(\\\"Hello\\\") void foo() {\\n\" + ", "+\t\t\t\t\"    @I(\\\"Hi\\\") void foo() {\\n\" + ", "-\t\t\t\"  @I(value={\\\"Hello\\\"})\\n\" + ", "+\t\t\t\"  @I(value=\\\"Hi\\\")\\n\" + ", "+\t\t\t\"  void foo();\\n\" + ", "+\t\t\t\"    0  return\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 7]\\n\" + ", "+\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"}\"; ", "+\t\t\t", "+\t\tif (actualOutput.indexOf(expectedOutput) == -1) {", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));", "+\t\t}", "+\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5dd284a67a4738c805e8cf721c0a86d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "759f047954db3c3b1f5b2ea50475094a4ca88735", "commitAfterChange": "116e2f749da165a5623c3cc3e6d763b07027f0ae", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test098()", "signatureAfterChange": " \tpublic void test099()", "diff": ["-\tpublic void test098() {", "+\tpublic void test099() {", "+\t\t\t\t\"    public interface I {\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString actualOutput = null;", "+\t\ttry {", "+\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "+\t\t\tactualOutput =", "+\t\t\t\tdisassembler.disassemble(", "+\t\t\t\t\tclassFileBytes,", "+\t\t\t\t\t\"\\n\",", "+\t\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "+\t\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\t\tassertTrue(\"ClassFormatException\", false);", "+\t\t} catch (IOException e) {", "+\t\t\tassertTrue(\"IOException\", false);", "+\t\t}", "+\t\t", "+\t\tString expectedOutput = ", "+\t\t\t\"  Inner classes:\\n\" + ", "+\t\t\t\"    [inner class info: #30 X$MyAnon, outer class info: #2 X\\n\" + ", "+\t\t\t\"     inner name: #68 MyAnon, accessflags: 9737 public static abstract ],\\n\" + ", "+\t\t\t\"    [inner class info: #70 X$I, outer class info: #2 X\\n\" + ", "+\t\t\t\"     inner name: #71 I, accessflags: 1545 public static abstract ]\"; ", "+\t\t\t", "+\t\tif (actualOutput.indexOf(expectedOutput) == -1) {", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));", "+\t\t}", "+\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);"]}], "num": 60565}
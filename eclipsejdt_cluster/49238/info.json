{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3237d3e8ad881b00a65db625e1f4e4ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c701d45e52bf1a7163b6fe877bd3d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void checkCanceled()", "signatureAfterChange": "  \tprotected void checkCanceled()", "diff": ["-\tprivate void checkCanceled() {", "+\tprotected void checkCanceled() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815fdf7891c95fd4be573cb86798a29d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements)", "signatureAfterChange": "  \tprotected void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements)", "diff": ["-\t", "-\tprivate void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements) {", "+", "+\tprotected void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98e2014d8b65af991aac3a4cdffc223e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 148, "signatureBeforeChange": "  \tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "signatureAfterChange": "  \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "diff": ["-", "-\tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "-\t\tint length = typeName.length;", "-\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "-\t\tfirstToken.index = length - 1;", "-\t\tint start0 = (int)(positions[0]>>>32);", "-\t\tint start = start0;", "-\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "-\t\tfirstToken.setSourceRange(start, end - start + 1);", "-\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "-\t\tsecondToken.index = length - 2;", "-\t\tstart = (int)(positions[1]>>>32);", "-\t\tend = (int)(positions[1] & 0xFFFFFFFF);", "-\t\tsecondToken.setSourceRange(start, end - start + 1);", "-\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(qualifiedName, node);", "-\t\t\trecordPendingNameScopeResolution(qualifiedName);", "-\t\t\trecordNodes(firstToken, node);", "-\t\t\trecordNodes(secondToken, node);", "-\t\t\trecordPendingNameScopeResolution(firstToken);", "-\t\t\trecordPendingNameScopeResolution(secondToken);", "-\t\t}", "-\t\tqualifiedName.index = length - 2;", "-\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "-\t\tSimpleName newPart = null;", "-\t\tfor (int i = 2; i < length; i++) {", "-\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));", "-\t\t\tnewPart.index = length - i - 1;", "-\t\t\tstart = (int)(positions[i]>>>32);", "-\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);", "-\t\t\tnewPart.setSourceRange(start,  end - start + 1);", "-\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);", "-\t\t\tqualifiedName.index = newPart.index;", "-\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\trecordNodes(qualifiedName, node);", "-\t\t\t\trecordNodes(newPart, node);\t\t\t\t", "-\t\t\t\trecordPendingNameScopeResolution(qualifiedName);", "-\t\t\t\trecordPendingNameScopeResolution(newPart);", "-\t\t\t}", "-\t\t}", "-\t\tQualifiedName name = qualifiedName;", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, node);", "-\t\t\trecordPendingNameScopeResolution(name);", "-\t\t}", "-\t\treturn name;", "-\t}", "+", "+\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "+\t\tint length = typeName.length;", "+\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "+\t\tfirstToken.index = length - 1;", "+\t\tint start0 = (int)(positions[0]>>>32);", "+\t\tint start = start0;", "+\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "+\t\tfirstToken.setSourceRange(start, end - start + 1);", "+\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "+\t\tsecondToken.index = length - 2;", "+\t\tstart = (int)(positions[1]>>>32);", "+\t\tend = (int)(positions[1] & 0xFFFFFFFF);", "+\t\tsecondToken.setSourceRange(start, end - start + 1);", "+\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(qualifiedName, node);", "+\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\trecordNodes(firstToken, node);", "+\t\t\trecordNodes(secondToken, node);", "+\t\t\trecordPendingNameScopeResolution(firstToken);", "+\t\t\trecordPendingNameScopeResolution(secondToken);", "+\t\t}", "+\t\tqualifiedName.index = length - 2;", "+\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "+\t\tSimpleName newPart = null;", "+\t\tfor (int i = 2; i < length; i++) {", "+\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));", "+\t\t\tnewPart.index = length - i - 1;", "+\t\t\tstart = (int)(positions[i]>>>32);", "+\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);", "+\t\t\tnewPart.setSourceRange(start,  end - start + 1);", "+\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);", "+\t\t\tqualifiedName.index = newPart.index;", "+\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(qualifiedName, node);", "+\t\t\t\trecordNodes(newPart, node);\t\t\t\t", "+\t\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\t\trecordPendingNameScopeResolution(newPart);", "+\t\t\t}", "+\t\t}", "+\t\tQualifiedName name = qualifiedName;", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(name, node);", "+\t\t\trecordPendingNameScopeResolution(name);", "+\t\t}", "+\t\treturn name;", "+\t}"]}], "num": 49238}
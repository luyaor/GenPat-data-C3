{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "146080e238c417d756661e49197aa39b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f61804b12249bc4a31f1834791d428c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": " public int matchLevel(AstNode node, boolean resolve)", "diff": ["+ */", "+public int matchLevel(AstNode node, boolean resolve) {", "+\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;", "+", "+\tTypeReference typeRef = (TypeReference) node;", "+\tif (resolve) {", "+\t\tTypeBinding binding = typeRef.resolvedType;", "+\t\tif (binding == null) return INACCURATE_MATCH;", "+\t\treturn matchLevelForType(this.superSimpleName, this.superQualification, binding);", "+\t}", "+", "+\tif (this.superSimpleName == null)", "+\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "+", "+\tchar[] typeRefSimpleName = null;", "+\tif (typeRef instanceof SingleTypeReference) {", "+\t\ttypeRefSimpleName = ((SingleTypeReference) typeRef).token;", "+\t} else { // QualifiedTypeReference", "+\t\tchar[][] tokens = ((QualifiedTypeReference) typeRef).tokens;", "+\t\ttypeRefSimpleName = tokens[tokens.length-1];", "+\t}\t\t\t\t", "+", "+\tif (matchesName(this.superSimpleName, typeRefSimpleName))", "+\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "+\treturn IMPOSSIBLE_MATCH;", "+}", "- */", "-public int matchLevel(AstNode node, boolean resolve) {", "-\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;", "-", "-\tTypeReference typeRef = (TypeReference)node;", "-\tif (resolve) {", "-\t\tTypeBinding binding = typeRef.resolvedType;", "-\t\tif (binding == null) {", "-\t\t\treturn INACCURATE_MATCH;", "-\t\t} else {", "-\t\t\treturn this.matchLevelForType(this.superSimpleName, this.superQualification, binding);", "-\t\t}", "-\t} else {", "-\t\tif (this.superSimpleName == null) {", "-\t\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tchar[] typeRefSimpleName = null;", "-\t\t\tif (typeRef instanceof SingleTypeReference) {", "-\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;", "-\t\t\t} else { // QualifiedTypeReference", "-\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;", "-\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];", "-\t\t\t}\t\t\t\t", "-\t\t\tif (this.matchesName(this.superSimpleName, typeRefSimpleName))", "-\t\t\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "-\t\t\telse", "-\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ca614471b7775690a54018b73352d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferenceLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-//public void match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "-public void match(TypeReference node, MatchingNodeSet nodeSet) {", "-\tif (this.pattern.superSimpleName == null) {", "-\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t} else {", "-\t\tchar[] typeRefSimpleName = null;", "-\t\tif (node instanceof SingleTypeReference) {", "-\t\t\ttypeRefSimpleName = ((SingleTypeReference) node).token;", "-\t\t} else { // QualifiedTypeReference", "-\t\t\tchar[][] tokens = ((QualifiedTypeReference) node).tokens;", "-\t\t\ttypeRefSimpleName = tokens[tokens.length-1];", "-\t\t}\t\t\t\t", "-\t", "-\t\tif (matchesName(this.pattern.superSimpleName, typeRefSimpleName))", "-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t}", "+//public int match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "+public int match(TypeReference node, MatchingNodeSet nodeSet) {", "+\tif (this.pattern.superSimpleName == null)", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+", "+\tchar[] typeRefSimpleName = null;", "+\tif (node instanceof SingleTypeReference) {", "+\t\ttypeRefSimpleName = ((SingleTypeReference) node).token;", "+\t} else { // QualifiedTypeReference", "+\t\tchar[][] tokens = ((QualifiedTypeReference) node).tokens;", "+\t\ttypeRefSimpleName = tokens[tokens.length-1];", "+\t}\t\t\t\t", "+\tif (matchesName(this.pattern.superSimpleName, typeRefSimpleName))", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+", "+\treturn IMPOSSIBLE_MATCH;"]}], "num": 18815}
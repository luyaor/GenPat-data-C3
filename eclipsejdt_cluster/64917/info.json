{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84b1bab78839c7a79e5eb5eb68e40ee1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a65d8eceaf2436f6dec024532c1ced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic boolean match(SynchronizedStatement node, Object other)", "signatureAfterChange": " \tpublic boolean match(SuperMethodReference node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(SuperMethodReference node, Object other) {", "+\t\tif (!(other instanceof SuperMethodReference)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tSuperMethodReference o = (SuperMethodReference) other;", "+\t\treturn (safeSubtreeMatch(node.getQualifier(), o.getQualifier())", "+\t\t\t\t&& safeSubtreeListMatch(node.typeArguments(), o.typeArguments())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a550ae83d41105d07358453b0225e75c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic boolean match(VariableDeclarationFragment node, Object other)", "signatureAfterChange": " \tpublic boolean match(TypeMethodReference node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(TypeMethodReference node, Object other) {", "+\t\tif (!(other instanceof TypeMethodReference)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tTypeMethodReference o = (TypeMethodReference) other;", "+\t\treturn (", "+\t\t\tsafeSubtreeMatch(node.getType(), o.getType())", "+\t\t\t\t&& safeSubtreeListMatch(node.typeArguments(), o.typeArguments())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3773de5f2f687c61e289150d2c5e0fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic boolean match(ExtraDimension node, Object other)", "signatureAfterChange": " \tpublic boolean match(ExpressionMethodReference node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(ExpressionMethodReference node, Object other) {", "+\t\tif (!(other instanceof ExpressionMethodReference)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tExpressionMethodReference o = (ExpressionMethodReference) other;", "+\t\treturn (", "+\t\t\tsafeSubtreeMatch(node.getExpression(), o.getExpression())", "+\t\t\t\t&& safeSubtreeListMatch(node.typeArguments(), o.typeArguments())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName()));"]}], "num": 64917}
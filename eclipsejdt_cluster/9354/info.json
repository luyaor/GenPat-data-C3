{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b41f8d8432bc8c6ab06801327637b5c5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa327f7f6899516316c70fc144bc3e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "26e0b0c271d5031424823a1070ef180ba24218bf", "commitAfterChange": "c84496f37e5dff715764911530c1fceaa60b14ee", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tleft.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\tif ((bits & OnlyValueRequired) == 0) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifne(trueLabel);", "-\t\t\t\t\t}", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tcodeStream.ifne(trueLabel);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfa27854261cfac34ece41c4ababe8ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "26e0b0c271d5031424823a1070ef180ba24218bf", "commitAfterChange": "c84496f37e5dff715764911530c1fceaa60b14ee", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tleft.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\tif ((bits & OnlyValueRequired) == 0) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifne(trueLabel);", "-\t\t\t\t\t}", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tcodeStream.ifne(trueLabel);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur"]}], "num": 9354}
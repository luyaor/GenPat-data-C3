{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66135eb450edfb4c49169ea3bea67da1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b0ddca1a7912cc24aedc76cd7d0044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void enterTypeParameter(int declarationStart, char[] name, int nameSourceStart, int nameSourceEnd, char[][] typeParameterBounds)", "signatureAfterChange": " protected void enterTypeParameter(TypeParameterInfo typeParameterInfo)", "diff": ["-public void enterTypeParameter(int declarationStart, char[] name, int nameSourceStart, int nameSourceEnd, char[][] typeParameterBounds) {", "+protected void enterTypeParameter(TypeParameterInfo typeParameterInfo) {", "-\tString nameString = new String(name);", "+\tString nameString = new String(typeParameterInfo.name);", "-\tinfo.setSourceRangeStart(declarationStart);", "-\tinfo.nameStart = nameSourceStart;", "-\tinfo.nameEnd = nameSourceEnd;", "-\tinfo.bounds = typeParameterBounds;", "+\tinfo.setSourceRangeStart(typeParameterInfo.declarationStart);", "+\tinfo.nameStart = typeParameterInfo.nameSourceStart;", "+\tinfo.nameEnd = typeParameterInfo.nameSourceEnd;", "+\tinfo.bounds = typeParameterInfo.typeParameterBounds;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0db81e53356075b6f97e9b922df0ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "commitAfterChange": "78fb30efd0199bf293193efc0adbb492172aafcc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": "  \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\t\tlong suppressWarningIrritants = 0;", "+\t\tIrritantSet suppressWarningIrritants = null;", "-\t\t\t\t\t\t\t\tlong irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\t\t\tif (irritants != 0) {", "-\t\t\t\t\t\t\t\t\tif ((suppressWarningIrritants & irritants) == irritants) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().unusedWarningToken(inits[j]);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritants;", "+\t\t\t\t\t\t\t\tIrritantSet irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\tif (irritants != null) {", "+\t\t\t\t\t\t\t\t\tif (suppressWarningIrritants == null) {", "+\t\t\t\t\t\t\t\t\t\tsuppressWarningIrritants = new IrritantSet(irritants);", "+\t\t\t\t\t\t\t\t\t} else if (suppressWarningIrritants.set(irritants) == null) {", "+\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().unusedWarningToken(inits[j]);", "-\t\t\t\t\t\tlong irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\tif (irritants != 0) {", "-\t\t\t\t\t\t\tsuppressWarningIrritants |= irritants;", "+\t\t\t\t\t\tIrritantSet irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\tif (irritants != null) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants = new IrritantSet(irritants);", "+\t\t\t\t\t\t\t// TODO: should check for unused warning token against enclosing annotation as well ?", "-\t\tif (isSuppressingWarnings && suppressWarningIrritants != 0) {", "+\t\tif (isSuppressingWarnings && suppressWarningIrritants != null) {"]}], "num": 63375}
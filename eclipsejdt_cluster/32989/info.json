{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "014dfd5fe35a1b218b2ec52a3612ffe1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f987de325751486920547f70d3c013", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": " public synchronized void removeIndexPath(IPath path)", "signatureAfterChange": " public synchronized void removeIndexPath(IPath path)", "diff": ["-\tSet entrySet = this.indexes.entrySet();", "-\tIterator entries = entrySet.iterator();", "-\tString[] locations = null;", "-\tint max = entrySet.size();", "-\tint ptr = 0;", "-\twhile (entries.hasNext()) {", "-\t\tMap.Entry entry = (Map.Entry) entries.next();", "-\t\tString indexLocation = (String) entry.getKey();", "-\t\tIPath indexPath = new Path(indexLocation);", "-\t\tif (path.isPrefixOf(indexPath)) {", "-\t\t\tIndex index = (Index) entry.getValue();", "-\t\t\tif (index != null) index.monitor = null;", "-\t\t\tif (locations == null) locations = new String[max];", "-\t\t\tlocations[ptr++] = indexLocation;", "-\t\t\tFile indexFile = new File(indexLocation);", "-\t\t\tif (indexFile.exists()) {", "+\tObject[] keyTable = this.indexes.keyTable;", "+\tObject[] valueTable = this.indexes.valueTable;", "+\tIPath[] locations = null;", "+\tint max = this.indexes.elementSize;", "+\tint count = 0;", "+\tfor (int i = 0, l = keyTable.length; i < l; i++) {", "+\t\tIPath indexLocation = (IPath) keyTable[i];", "+\t\tif (indexLocation == null)", "+\t\t\tcontinue;", "+\t\tif (path.isPrefixOf(indexLocation)) {", "+\t\t\tIndex index = (Index) valueTable[i];", "+\t\t\tindex.monitor = null;", "+\t\t\tif (locations == null)", "+\t\t\t\tlocations = new IPath[max];", "+\t\t\tlocations[count++] = indexLocation;", "+\t\t\tFile indexFile = index.getIndexFile();", "+\t\t\tif (indexFile.exists())", "-\t\t\t}", "-\t\t} else if (locations == null) {", "+\t\t} else {", "-\t\tfor (int i=0; i<ptr; i++) {", "-\t\t\tthis.indexes.remove(locations[i]);", "-\t\t}", "+\t\tfor (int i = 0; i < count; i++)", "+\t\t\tthis.indexes.removeKey(locations[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b67cc4dca73e53069fce66e7924ca266", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "c6ea2a72647dce31af35c91712fb9d7b45a7c96d", "commitAfterChange": "83b68463dfa78dfe663b2c3a425108deb5494772", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\t\t\t\tfinal StringTokenizer tokenizer = new StringTokenizer(String.valueOf(paramsSource), \", \\n\\r\"); //$NON-NLS-1$", "-\t\t\t\t\tint index = 0;", "-\t\t\t\t\tfinal ArrayList paramNames = new ArrayList(paramCount);", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\tfinal String token = tokenizer.nextToken();", "-\t\t\t\t\t\tif ((index & 1) != 0) {", "-\t\t\t\t\t\t\t// if odd then this is a parameter name", "-\t\t\t\t\t\t\tparamNames.add(token);", "+\t\t\t\t\tfinal char[][] params = CharOperation.splitOn(',', paramsSource);", "+\t\t\t\t\tfinal int paramsLength = params.length;", "+\t\t\t\t\tthis.parameterNames = new String[paramsLength];", "+\t\t\t\t\tfor (int i = 0; i < paramsLength; i++) {", "+\t\t\t\t\t\tfinal char[] param = params[i];", "+\t\t\t\t\t\tint indexOfSpace = CharOperation.lastIndexOf(' ', param);", "+\t\t\t\t\t\tif (indexOfSpace != -1) {", "+\t\t\t\t\t\t\tthis.parameterNames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.parameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\tif (!paramNames.isEmpty()) {", "-\t\t\t\t\t\tthis.parameterNames = new String[paramNames.size()];", "-\t\t\t\t\t\tparamNames.toArray(this.parameterNames);", "-\t\t\t\t\t\treturn this.parameterNames;", "-\t\t\t\t\t}", "+\t\t\t\t\treturn this.parameterNames;"]}], "num": 32989}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1259e5404342dce785f91be6239da71", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "102de09ba235f62f3fe759f672f9c796", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void setPreferences(Preferences preferences)", "signatureAfterChange": "\t \tpublic IEclipsePreferences getEclipsePreferences()", "diff": ["+\tpublic IEclipsePreferences getEclipsePreferences(){", "+\t\tif (!JavaProject.hasJavaNature(this.project)) return null;", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(this.project, true);", "+\t\tIEclipsePreferences eclipsePreferences =  perProjectInfo.preferences;", "+\t\tif (eclipsePreferences != null) return eclipsePreferences;", "+\t\tIScopeContext context = new ProjectScope(getProject());", "+\t\teclipsePreferences = context.getNode(JavaCore.PLUGIN_ID);", "+\t\tupdatePreferences(eclipsePreferences);", "+\t\tperProjectInfo.preferences = eclipsePreferences;", "+\t\treturn eclipsePreferences;", "+\t}", "-\t */", "-\tpublic void setPreferences(Preferences preferences) {", "-\t\tif (!JavaProject.hasJavaNature(this.project)) return; // ignore", "-\t\tJavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(this.project, true);", "-\t\tperProjectInfo.preferences = preferences;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20399f85c4ce210dc8664f4e0123f635", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f03a3c2060092275ebe3df7a9969a3494a584807", "commitAfterChange": "10d218e167bd75add0dd3c7079813702993dcf64", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["+\t\t// Get cached preferences if exist", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "+\t\tif (inheritJavaCoreOptions) {", "+\t\t\ttry {", "+\t\t\t\tperProjectInfo = getPerProjectInfo();", "+\t\t\t\tif (perProjectInfo.options != null) {", "+\t\t\t\t\treturn new Hashtable(perProjectInfo.options);", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException jme) {", "+\t\t\t\t// skip", "+\t\t\t}", "+\t\t}", "+", "-\t\tIEclipsePreferences preferences = getEclipsePreferences();", "-\t\tif (preferences == null) return options; // cannot do better (non-Java project)", "+\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "+\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "-\t\t\tString[] propertyNames = preferences.keys();", "+\t\t\tString[] propertyNames = projectPreferences.keys();", "-\t\t\t\tString value = preferences.get(propertyName, null);", "+\t\t\t\tString value = projectPreferences.get(propertyName, null);", "+\t\t// Cache computed map", "+\t\tif (perProjectInfo != null) {", "+\t\t\tperProjectInfo.options = options;", "+\t\t}"]}], "num": 24907}
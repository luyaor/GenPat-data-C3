{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d30385ee095cebc1da285cb25fe6f89", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61c7d2b96d10be0a69a957e3c28fec5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java", "commitBeforeChange": "0874cfb2ef67a79a49d909a248c81f1f23dd713a", "commitAfterChange": "c45642653b63db018daa5628a39e66d2c31eb53d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \r \tpublic char charValue()", "signatureAfterChange": " \r \tpublic char charValue()", "diff": ["-\t\t\t// legal: b, t, n, f, r, \", ', \\, 0, 1, 2, 3, 4, 5, 6, or 7\r", "-\t\t\t// FIXME\r", "-\t\t\tthrow new RuntimeException(\"not implemented yet\");//$NON-NLS-1$\r", "+\t\t\tif (len == 3) {\r", "+\t\t\t\tchar nextChar = s.charAt(2);\r", "+\t\t\t\tswitch(nextChar) {\r", "+\t\t\t\t\tcase 'b' :\r", "+\t\t\t\t\t\treturn '\\b';\r", "+\t\t\t\t\tcase 't' :\r", "+\t\t\t\t\t\treturn '\\t';\r", "+\t\t\t\t\tcase 'n' :\r", "+\t\t\t\t\t\treturn '\\n';\r", "+\t\t\t\t\tcase 'f' :\r", "+\t\t\t\t\t\treturn '\\f';\r", "+\t\t\t\t\tcase 'r' :\r", "+\t\t\t\t\t\treturn '\\r';\r", "+\t\t\t\t\tcase '\\\"':\r", "+\t\t\t\t\t\treturn '\\\"';\r", "+\t\t\t\t\tcase '\\'':\r", "+\t\t\t\t\t\treturn '\\'';\r", "+\t\t\t\t\tcase '\\\\':\r", "+\t\t\t\t\t\treturn '\\\\';\r", "+\t\t\t\t\tcase '0' :\r", "+\t\t\t\t\t\treturn '\\0';\r", "+\t\t\t\t\tcase '1' :\r", "+\t\t\t\t\t\treturn '\\1';\r", "+\t\t\t\t\tcase '2' :\r", "+\t\t\t\t\t\treturn '\\2';\r", "+\t\t\t\t\tcase '3' :\r", "+\t\t\t\t\t\treturn '\\3';\r", "+\t\t\t\t\tcase '4' :\r", "+\t\t\t\t\t\treturn '\\4';\r", "+\t\t\t\t\tcase '5' :\r", "+\t\t\t\t\t\treturn '\\5';\r", "+\t\t\t\t\tcase '6' :\r", "+\t\t\t\t\t\treturn '\\6';\r", "+\t\t\t\t\tcase '7' :\r", "+\t\t\t\t\t\treturn '\\7';\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t}\r", "+\t\t\t} else if (len == 8) {\r", "+\t\t\t\t//handle the case of unicode.\r", "+\t\t\t\tint currentPosition = 2;\r", "+\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\tif (s.charAt(currentPosition++) == 'u') {\r", "+\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c4 < 0){\r", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce611a7dc7819c63a855c4ebf653f8e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "b3a3e56706625d1059f4804a9598e799971e01c0", "commitAfterChange": "43d9a8218ade784ba7108302e1f9223a0cd8fa04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r \tprivate boolean checkSelection(\r \t\tchar[] source,\r \t\tint selectionStart,\r \t\tint selectionEnd)", "signatureAfterChange": "\r \r \tprivate boolean checkSelection(\r \t\tchar[] source,\r \t\tint selectionStart,\r \t\tint selectionEnd)", "diff": ["-\t\tscanner.resetTo(selectionStart, selectionEnd);\r", "-\r", "+\t\t\r", "-\t\tint token, identCount = 0;\r", "-\t\tboolean expectingIdentifier = true;\r", "-\t\tStringBuffer entireSelection =\r", "-\t\t\tnew StringBuffer(selectionEnd - selectionStart + 1);\r", "-\t\tdo {\r", "+\t\tint token, identCount = 0;\r", "+\t\tStringBuffer entireSelection = new StringBuffer(selectionEnd - selectionStart + 1);\r", "+\t\t\r", "+\t\tif(selectionStart > selectionEnd){\r", "+\t\t\t\r", "+\t\t\t// compute start position of current line\r", "+\t\t\tint currentPosition = selectionStart - 1;\r", "+\t\t\tint nextCharacterPosition = selectionStart;\r", "+\t\t\tchar currentCharacter = ' ';\r", "-\t\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\twhile(currentPosition > 0 || currentCharacter == '\\r' || currentCharacter == '\\n'){\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif(source[currentPosition] == '\\\\' && source[currentPosition+1] == 'u') {\r", "+\t\t\t\t\t\tint pos = currentPosition + 2;\r", "+\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\t\t\twhile (source[pos] == 'u') {\r", "+\t\t\t\t\t\t\tpos++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif ((c1 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c4 < 0) {\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "+\t\t\t\t\t\t\tnextCharacterPosition = pos;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tcurrentCharacter = source[currentPosition];\r", "+\t\t\t\t\t\tnextCharacterPosition = currentPosition+1;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif(currentCharacter == '\\r' || currentCharacter == '\\n') {\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tcurrentPosition--;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tcatch (ArrayIndexOutOfBoundsException e) {\r", "-\t\t\tswitch (token) {\r", "-\t\t\t\tcase TerminalSymbols.TokenNamethis :\r", "-\t\t\t\tcase TerminalSymbols.TokenNamesuper :\r", "-\t\t\t\tcase TerminalSymbols.TokenNameIdentifier :\r", "-\t\t\t\t\tif (!expectingIdentifier)\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();\r", "-\t\t\t\t\tlastIdentifierStart = scanner.startPosition;\r", "-\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;\r", "-\t\t\t\t\tif(lastIdentifierEnd > selectionEnd) {\r", "-\t\t\t\t\t\tlastIdentifierEnd = selectionEnd;\r", "-\t\t\t\t\t\tlastIdentifier = CharOperation.subarray(lastIdentifier, 0,lastIdentifierEnd - lastIdentifierStart + 1);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tentireSelection.append(lastIdentifier);\r", "-\t\t\t\t\t\t\r", "-\t\t\t\t\tidentCount++;\r", "-\t\t\t\t\texpectingIdentifier = false;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TerminalSymbols.TokenNameDOT :\r", "-\t\t\t\t\tif (expectingIdentifier)\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\tentireSelection.append('.');\r", "-\t\t\t\t\texpectingIdentifier = true;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TerminalSymbols.TokenNameEOF :\r", "-\t\t\t\t\tif (expectingIdentifier)\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tdefault :\r", "+\t\t\t\r", "+\t\t\t// compute start and end of the last token\r", "+\t\t\tscanner.resetTo(nextCharacterPosition, selectionEnd);\r", "+\t\t\tdo {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "-\t\t\t}\r", "-\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t\t\t}\r", "+\t\t\t\tif((token == TerminalSymbols.TokenNamethis ||\r", "+\t\t\t\t\ttoken == TerminalSymbols.TokenNamesuper ||\r", "+\t\t\t\t\ttoken == TerminalSymbols.TokenNameIdentifier) &&\r", "+\t\t\t\t\tscanner.startPosition < selectionStart &&\r", "+\t\t\t\t\tselectionStart < scanner.currentPosition) {\r", "+\t\t\t\t\tlastIdentifierStart = scanner.startPosition;\r", "+\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition;\r", "+\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();\r", "+\t\t\t\t}\r", "+\t\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t} else {\r", "+\t\t\tscanner.resetTo(selectionStart, selectionEnd);\r", "+\t\r", "+\t\t\tboolean expectingIdentifier = true;\r", "+\t\t\t\r", "+\t\t\tdo {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamethis :\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamesuper :\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier :\r", "+\t\t\t\t\t\tif (!expectingIdentifier)\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();\r", "+\t\t\t\t\t\tlastIdentifierStart = scanner.startPosition;\r", "+\t\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;\r", "+\t\t\t\t\t\tif(lastIdentifierEnd > selectionEnd) {\r", "+\t\t\t\t\t\t\tlastIdentifierEnd = selectionEnd;\r", "+\t\t\t\t\t\t\tlastIdentifier = CharOperation.subarray(lastIdentifier, 0,lastIdentifierEnd - lastIdentifierStart + 1);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tentireSelection.append(lastIdentifier);\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tidentCount++;\r", "+\t\t\t\t\t\texpectingIdentifier = false;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT :\r", "+\t\t\t\t\t\tif (expectingIdentifier)\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\tentireSelection.append('.');\r", "+\t\t\t\t\t\texpectingIdentifier = true;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameEOF :\r", "+\t\t\t\t\t\tif (expectingIdentifier)\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault :\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t}\r"]}], "num": 232}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eae21d1683caf1a0156c785e791ab16b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0019f1ed936ec4d28d0f8e5ff4aa03c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "b0ef9fb2ef2f8b6f0b35895401c98f1788e21821", "commitAfterChange": "723dd30d7e194152eb04fb9ae54682c59941aaad", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 201, "signatureBeforeChange": " \tpublic void testEnumConstantDeclaration()", "signatureAfterChange": " \tpublic void testEnumConstantDeclaration()", "diff": ["-\t\tassertTrue(x.bodyDeclarations().size()== 0);", "-\t\t// TODO (jeem) - after 3.1 M4 remove mention of bodyDeclarations", "-\t\tgenericPropertyListTest(x, x.bodyDeclarations(),", "-\t\t  new Property(\"BodyDeclarations\", true, BodyDeclaration.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tTypeDeclaration result = targetAst.newTypeDeclaration();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tCompilationUnit cu = targetAst.newCompilationUnit();", "-\t\t\t\t\tcu.types().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode wrap() {", "-\t\t\t\tEnumConstantDeclaration s1 = x.getAST().newEnumConstantDeclaration();", "-\t\t\t\ts1.bodyDeclarations().add(x);", "-\t\t\t\treturn s1;", "-\t\t\t}", "-\t\t\tpublic void unwrap() {", "-\t\t\t\tEnumConstantDeclaration s1 = (EnumConstantDeclaration) x.getParent();", "-\t\t\t\ts1.bodyDeclarations().remove(x);", "-\t\t\t}", "-\t\t});", "-\t\t", "-\t\t// check that TypeDeclarations in body are classified correctly", "-\t\tx.bodyDeclarations().clear();", "-\t\tTypeDeclaration t1 = ast.newTypeDeclaration();", "-\t\tx.bodyDeclarations().add(t1);", "-", "-\t\tassertTrue(t1.isLocalTypeDeclaration() == false);", "-\t\tassertTrue(t1.isMemberTypeDeclaration() == true);", "-\t\tassertTrue(t1.isPackageMemberTypeDeclaration() == false);", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f35871865d400636ad5cc6062aa82ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "600e48f032b359e080127669aade9cc1c66a15b1", "commitAfterChange": "0e6d4fe5469565f21baa2fd0ec88d178818c619b", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "\t \t \tpublic void testEnumConstantDeclaration()", "signatureAfterChange": " \tpublic void testEnumConstantDeclaration()", "diff": ["+\t// TODO (jeem) - remove deprecation after 3.1 M4", "+\t\tassertTrue(x.getAnonymousClassDeclaration() == null);", "+\t\t// TODO (jeem) - after 3.1 M4 remove mention of bodyDeclarations", "+\t\tgenericPropertyTest(x, new Property(\"AnonymousClassDeclaration\", false, AnonymousClassDeclaration.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tAnonymousClassDeclaration result = targetAst.newAnonymousClassDeclaration();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newClassInstanceCreation().setAnonymousClassDeclaration(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t// return AnonymousClassDeclaration that embeds x", "+\t\t\t\tAnonymousClassDeclaration s0 = x.getAST().newAnonymousClassDeclaration();", "+\t\t\t\tEnumDeclaration s1 = x.getAST().newEnumDeclaration();", "+\t\t\t\ts0.bodyDeclarations().add(s1);", "+\t\t\t\ts1.bodyDeclarations().add(x);", "+\t\t\t\treturn s0;", "+\t\t\t}", "+\t\t\tpublic void unwrap() {", "+\t\t\t\tEnumDeclaration s1 = (EnumDeclaration) x.getParent();", "+\t\t\t\ts1.bodyDeclarations().remove(x);", "+\t\t\t}", "+\t\t\tpublic ASTNode get() {", "+\t\t\t\treturn x.getAnonymousClassDeclaration();", "+\t\t\t}", "+\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\tx.setAnonymousClassDeclaration((AnonymousClassDeclaration) value);", "+\t\t\t}", "+\t\t});", "+", "+\t\t// check that TypeDeclarations in body are classified correctly", "+\t\tx.setAnonymousClassDeclaration(null);", "+\t\tAnonymousClassDeclaration w0 = ast.newAnonymousClassDeclaration();", "+\t\tx.setAnonymousClassDeclaration(w0);", "+\t\tTypeDeclaration w1 = ast.newTypeDeclaration();", "+\t\tw0.bodyDeclarations().add(w1);", "+", "+\t\tassertTrue(w1.isLocalTypeDeclaration() == false);", "+\t\tassertTrue(w1.isMemberTypeDeclaration() == true);", "+\t\tassertTrue(w1.isPackageMemberTypeDeclaration() == false);", "+\t"]}], "num": 31177}
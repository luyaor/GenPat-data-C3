{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "023bff3e750d7ab628fb671530e194ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f070f0856416731e633c9b9c0db015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 242, "signatureBeforeChange": " \tpublic void testMethodDeclaration()", "signatureAfterChange": " \tpublic void testMethodDeclaration()", "diff": ["-\t\tassertTrue(x.thrownExceptions().size() == 0);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tassertTrue(x.thrownExceptions().size() == 0);\t\t\t", "+\t\t} else {", "+\t\t\tassertTrue(x.thrownExceptionTypes().size() == 0);\t\t\t", "+\t\t}", "-\t\tgenericPropertyListTest(x, x.thrownExceptions(),", "-\t\t  new Property(\"ThrownExceptions\", true, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tgenericPropertyListTest(x, x.thrownExceptions(),", "+\t\t\t\t\t  new Property(\"ThrownExceptions\", true, Name.class) { //$NON-NLS-1$", "+\t\t\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});\t\t\t", "+\t\t} else {", "+\t\t\tgenericPropertyListTest(x, x.thrownExceptionTypes(),", "+\t\t\t\t\t  new Property(\"ThrownExceptionTypes\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\t\t\tType result = targetAst.newSimpleType(targetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cacf733c246e251a69c31995d18d39df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 580, "methodNumberAfterChange": 683, "signatureBeforeChange": "  \tpublic void testClassInstanceCreation()", "signatureAfterChange": "  \tpublic void testClassInstanceCreation()", "diff": ["-\t\tassertTrue(x.getName().getParent() == x);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getName().getParent() == x);", "+\t\t} else {", "+\t\t\tassertTrue(x.getType().getParent() == x);", "+\t\t}", "-\t\tgenericPropertyTest(x, new Property(\"Name\", true, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"a\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"Name\", true, Name.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleName result = targetAst.newSimpleName(\"a\"); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getName();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setName((Name) value);", "-\t\t\t}", "-\t\t});", "-", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getName();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setName((Name) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"Type\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(targetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getType();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setType((Type) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t"]}], "num": 71447}
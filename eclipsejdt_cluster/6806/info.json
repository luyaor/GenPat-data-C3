{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3b5091f255b8f4b89132cd4244d4635", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aef0b6122a036baa274ce7e3fbb5bcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "a9e75512b7cef598f19167cb096a6b27a841ab1d", "commitAfterChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " \t \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "signatureAfterChange": " \t \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "diff": ["+\t", "+\t\tString variableKey = CP_VARIABLE_PREFERENCES_PREFIX+variableName;", "+\t\tString variableString = variablePath == null ? CP_ENTRY_IGNORE : variablePath.toString();", "+\t\tgetInstancePreferences().put(variableKey, variableString);", "+\t\ttry {", "+\t\t\tgetInstancePreferences().flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\t// ignore exception", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b3eb08986c6a064655de09f9bba5839", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "0afc1a9b53aa0325da7fb144a7014b79087d1149", "commitAfterChange": "e88e1c1db2e99aa767474bc900a2ad3853961061", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void initializeKnownFileNames(String[] initialFileNames)", "signatureAfterChange": " private void initializeKnownFileNames(String[] initialFileNames)", "diff": ["-\t\tchar[] fileName = initialFileNames[i].toCharArray();", "+\t\tFile compilationUnitFile = new File(initialFileNames[i]);", "+\t\tchar[] fileName = null;", "+\t\ttry {", "+\t\t\tfileName = compilationUnitFile.getCanonicalPath().toCharArray();", "+\t\t} catch (IOException e) {", "+\t\t\t// this should not happen as the file exists", "+\t\t\tcontinue;", "+\t\t}", "-\t\tfor (int j = 0; j < this.classpaths.length; j++){", "+\t\tfor (int j = 0, max = this.classpaths.length; j < max; j++) {", "-\t\t\t\t\t\t\tmatchCandidate.length < matchingPathName.length))", "+\t\t\t\t\t\t\tmatchCandidate.length < matchingPathName.length)) {", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18595ff9cb2e1a72ba9bf649a0897bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "e6db618a9b62756ea5188d8fdad9bb0c157f5516", "commitAfterChange": "265fce71e12d88a397c49e9793a330fd01dcb78a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public IBuffer getBuffer() throws JavaModelException", "signatureAfterChange": " public IBuffer getBuffer() throws JavaModelException", "diff": ["-\t\treturn openBuffer(null, null);", "+\t\tObject info = null;", "+\t\ttry {", "+\t\t\tinfo = ((ClassFile) getClassFile()).getBinaryTypeInfo((IFile) getResource());", "+\t\t} catch (JavaModelException e) {\t\t", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn openBuffer(null, info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2094f3ff233f70d76af5b9112d550539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "commitAfterChange": "0bbfe267fb7eaaa77628088e8cdbd841ddb40de5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public NameEnvironmentAnswer findClass(String sourceFileName, String qualifiedPackageName, String qualifiedSourceFileName)", "signatureAfterChange": "   public NameEnvironmentAnswer findClass(String sourceFileName, String qualifiedPackageName, String qualifiedSourceFileName)", "diff": ["-\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding));", "+\tIPath path = new Path(qualifiedSourceFileName);", "+\tIFile file = this.sourceFolder.getFile(path);", "+\tString fileEncoding = this.encoding;", "+\ttry {", "+\t\tfileEncoding = file.getCharset();", "+\t}", "+\tcatch (CoreException ce) {", "+\t\t// let use default encoding", "+\t}", "+//\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding));", "+\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, fileEncoding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2241b87d748184dd6ae32c4bb923853a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "305f8457996f4929ada1f7e8e969ac751e79132d", "commitAfterChange": "5fb01dfe557c968821725c623938248969e3ad61", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "signatureAfterChange": "  \tpublic boolean isPertinentToApplicability(final TypeBinding targetType, final MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {", "+\tpublic boolean isPertinentToApplicability(final TypeBinding targetType, final MethodBinding method) {", "+", "+\t\tclass NotPertientToApplicability extends RuntimeException {", "+\t\t\tprivate static final long serialVersionUID = 1L;", "+\t\t}", "+\t\tclass ResultsAnalyser extends ASTVisitor {", "+\t\t\tpublic boolean visit(TypeDeclaration type, BlockScope skope) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(TypeDeclaration type, ClassScope skope) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(LambdaExpression type, BlockScope skope) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t    public boolean visit(ReturnStatement returnStatement, BlockScope skope) {", "+\t\t    \tif (returnStatement.expression != null) {", "+\t\t\t\t\tif (!returnStatement.expression.isPertinentToApplicability(targetType, method))", "+\t\t\t\t\t\tthrow new NotPertientToApplicability();", "+\t\t    \t}", "+\t\t    \treturn false;", "+\t\t    }", "+\t\t}", "+", "-\t\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "-\t\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType, method))", "+\t\t\tif (returnExpressions != NO_EXPRESSIONS) {", "+\t\t\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "+\t\t\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType, method))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// return expressions not yet discovered by resolveType(), so traverse no looking just for one that's not pertinent", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.body.traverse(new ResultsAnalyser(), this.scope);", "+\t\t\t\t} catch (NotPertientToApplicability npta) {", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355850c85dcb62791d1ac723b9aa65be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "65014b9edcd64bc51154fcb1b47074eec77a5977", "commitAfterChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 242, "signatureBeforeChange": " \tpublic void testMethodDeclaration()", "signatureAfterChange": " \tpublic void testMethodDeclaration()", "diff": ["+\t\t\ttry {", "+\t\t\t\tx.typeParameters();", "+\t\t\t\tassertTrue(\"Should have failed\", false);", "+\t\t\t} catch(UnsupportedOperationException e) {", "+\t\t\t\t// pass", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tx.isVarargs();", "+\t\t\t\tassertTrue(\"Should have failed\", false);", "+\t\t\t} catch(UnsupportedOperationException e) {", "+\t\t\t\t// pass", "+\t\t\t}", "+\t\ttry {", "+\t\t\tx.setExtraDimensions(-1);", "+\t\t\tassertTrue(\"Should fail\", false);", "+\t\t} catch(IllegalArgumentException e) {", "+\t\t\t// pass", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5382c6601e1ee60ac21ff9bdee231e9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchTests.java", "commitBeforeChange": "5d2539586eb52d651dc634d7ec387aa789cda914", "commitAfterChange": "0ac13cb75eb92a33e1c42045c6cf1b2e0f401eaa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t\tpublic boolean execute(IProgressMonitor progress)", "signatureAfterChange": " \t\tpublic boolean execute(IProgressMonitor progress)", "diff": ["-\t\t\tstartJob();", "-\t\t\tsuspend();", "+\t\t\tthis.startingSem.release();", "+\t\t\ttry {", "+\t\t\t\tthis.runningSem.acquire(MAX_WAIT);", "+\t\t\t} catch (TimeOutException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5633eddf45ccd401eac469c6784416b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "22a14f1a594f2965f31b80e65fb54172ab0fd512", "commitAfterChange": "5d4f893fa59b3511c935dd72cb6bf3884d345168", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "diff": ["-\t\t\tif (i < 0 || i >= length) throw new IllegalArgumentException();", "+\t\t\tif (i < 0 || i >= length) ", "+\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\t\tcontinue nextBound; // empty bound", "+\t\t\t\t\t\t// no class bound", "+\t\t\t\t\t\tbreak; ", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\ti = Util.scanTypeSignature(methodOrTypeSignature, i);", "-\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\tcase C_RESOLVED:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanClassTypeSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not a class type signature -> it is a new type parameter", "+\t\t\t\t\t\t}", "+\t\t\t\t\tcase C_ARRAY:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanArrayTypeSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not an array type signature -> it is a new type parameter", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase C_TYPE_VARIABLE:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanTypeVariableSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not a type variable signature -> it is a new type parameter", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// default: another type parameter is starting"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8c07434ba7db6eefc0a5db54e30553", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "4ce83257bb1b778dfa58775e5fe4dc9d499340f4", "commitAfterChange": "bd297a6cb55c56ac121bf45ea00a0a13e2fd1cf7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r protected char[] writeClassFile(ClassFile classFile, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "\r \r protected char[] writeClassFile(ClassFile classFile, boolean isSecondaryType) throws CoreException", "diff": ["-\t\tfile.create(new ByteArrayInputStream(bytes), true, null);\r", "+\t\tInputStream inputStream = null;\r", "+\t\ttry {\r", "+\t\t\tinputStream = new BufferedInputStream(new ByteArrayInputStream(bytes));\r", "+\t\t\tfile.create(inputStream, true, null);\r", "+\t\t} finally {\r", "+\t\t\tif (inputStream != null){\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tinputStream.close();\r", "+\t\t\t\t} catch(IOException e){\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "646e41d1f082565deb1e6b9016fa7620", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7882956f959d3c6393e0d8829373f1d0522732ab", "commitAfterChange": "5147f5a5f17d6e4dce9e06801af75e51b27b5773", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "signatureAfterChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "diff": ["+\tint superRefKind;", "+\ttry {", "+\t\tsuperRefKind = type.isClass() ? SuperTypeReferencePattern.ONLY_SUPER_CLASSES : SuperTypeReferencePattern.ALL_SUPER_TYPES;", "+\t} catch (JavaModelException e) {", "+\t\tsuperRefKind = SuperTypeReferencePattern.ALL_SUPER_TYPES;", "+\t}", "-\t\tnew SuperTypeReferencePattern(null, null, false, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "+\t\tnew SuperTypeReferencePattern(null, null, superRefKind, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e98bddaf9f6a3ff0d5d638746e75b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2cce1de86bdd946b3748cc1459894e65040b0130", "commitAfterChange": "6cf6798c0f7967affcd164ac0305e3369538935d", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void setSharedProperty(String key, String value) throws CoreException", "signatureAfterChange": " \tpublic void setSharedProperty(String key, String value) throws CoreException", "diff": ["-\t\tInputStream inputStream = new ByteArrayInputStream(value.getBytes());", "+\t\tbyte[] bytes = null;", "+\t\ttry {", "+\t\t\tbytes = value.getBytes(\"UTF-8\"); //$NON-NLS-1$ // .classpath always encoded with UTF-8", "+\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\tUtil.log(e, \"Could not write .classpath with UTF-8 encoding \"); //$NON-NLS-1$", "+\t\t\t// fallback to default", "+\t\t\tbytes = value.getBytes();", "+\t\t}", "+\t\tInputStream inputStream = new ByteArrayInputStream(bytes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79df2b4eef432c0f0fe18e71509a8ca7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "72895982cdfd43c6e856c9e0af3d1d64cc3e0181", "commitAfterChange": "ad349ef0d651cc5782e20e3c181fbfffccf75c28", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor)", "signatureAfterChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor)", "diff": ["-\t\t\tif(declaringDeclaringType != null && isConstructor) {", "+\t\t\t", "+\t\t\tboolean isStatic = false;", "+\t\t\ttry {", "+\t\t\t\tisStatic = Flags.isStatic(type.getFlags());", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// isStatic == false", "+\t\t\t}", "+\t\t\t", "+\t\t\tif(declaringDeclaringType != null && isConstructor\t&& !isStatic) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad7975c8e062cb3b40b28f904e8847f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2cce1de86bdd946b3748cc1459894e65040b0130", "commitAfterChange": "6cf6798c0f7967affcd164ac0305e3369538935d", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic String getSharedProperty(String key) throws CoreException", "signatureAfterChange": " \tpublic String getSharedProperty(String key) throws CoreException", "diff": ["-\t\t\tproperty = new String(Util.getResourceContentsAsByteArray(rscFile));", "+\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(rscFile);", "+\t\t\ttry {", "+\t\t\t\tproperty = new String(bytes, \"UTF-8\"); //$NON-NLS-1$ // .classpath always encoded with UTF-8", "+\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\tUtil.log(e, \"Could not read .classpath with UTF-8 encoding\"); //$NON-NLS-1$", "+\t\t\t\t// fallback to default", "+\t\t\t\tproperty = new String(bytes);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86e3f2da7e3784da272cf33da6bc4f19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "commitAfterChange": "c06cfa4791f8eb98381a7dd55dd6950dbcddf37c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t@Override \tpublic void printElements(Writer w, Element... elements)", "signatureAfterChange": " \t@Override \tpublic void printElements(Writer w, Element... elements)", "diff": ["-\t\t// TODO Auto-generated method stub", "-", "+\t\tString lineSeparator = System.getProperty(\"line.separator\"); //$NON-NLS-1$", "+\t\tfor (Element element : elements) {", "+\t\t\ttry {", "+\t\t\t\tw.write(element.toString());", "+\t\t\t\tw.write(lineSeparator);", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t}", "+\t\ttry {", "+\t\t\tw.flush();", "+\t\t} catch (IOException e) {", "+\t\t\t// ignore", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a27e3fbf823efefc8002d859d28619", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "02009b41ec945f5cfcf629234ac75cbc76ce6809", "commitAfterChange": "3e46d275b92d309fd1fe675f261b23afc851c7bf", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": " public CompilationUnit[] getCompilationUnits()", "signatureAfterChange": " public CompilationUnit[] getCompilationUnits()", "diff": ["-\t\tunits[i] = new CompilationUnit(null, this.filenames[i], encoding,", "-\t\t\t\tthis.destinationPaths[i]);", "+\t\tString fileName;", "+\t\ttry {", "+\t\t\tfileName = file.getCanonicalPath();", "+\t\t} catch (IOException e) {", "+\t\t\t// if we got exception during canonicalization, fall back to the name that was specified", "+\t\t\tfileName = this.filenames[i];", "+\t\t}", "+\t\tunits[i] = new CompilationUnit(null, fileName, encoding, this.destinationPaths[i],", "+\t\t\t\tshouldIgnoreOptionalProblems(this.ignoreOptionalProblemsFromFolders, fileName.toCharArray()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a41761ee04848aa7d07d488383a022e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "80cc85114a1a71eb1ccf627f315767a1b7408d18", "commitAfterChange": "35cc37a81c11a85b80711dc9254583886e12d562", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void saving(ISaveContext context) throws CoreException", "signatureAfterChange": " \tpublic void saving(ISaveContext context) throws CoreException", "diff": ["-\t\tfor (Iterator iter =  this.perProjectInfos.values().iterator(); iter.hasNext();) {", "-\t\t\ttry {", "-\t\t\t\tPerProjectInfo info = (PerProjectInfo) iter.next();", "-\t\t\t\tsaveState(info, context);", "-\t\t\t\tinfo.rememberExternalLibTimestamps();", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tif (vStats == null)", "-\t\t\t\t\tvStats= new ArrayList();", "-\t\t\t\tvStats.add(e.getStatus());", "+\t\tArrayList values = null;", "+\t\tsynchronized(this.perProjectInfos) {", "+\t\t\tvalues = new ArrayList(this.perProjectInfos.values());", "+\t\t}", "+\t\tif (values != null) {", "+\t\t\tIterator iterator = values.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\ttry {", "+\t\t\t\t\tPerProjectInfo info = (PerProjectInfo) iterator.next();", "+\t\t\t\t\tsaveState(info, context);", "+\t\t\t\t\tinfo.rememberExternalLibTimestamps();", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tif (vStats == null)", "+\t\t\t\t\t\tvStats= new ArrayList();", "+\t\t\t\t\tvStats.add(e.getStatus());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3ef4961802332c9bd0d64b5f41cc232", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "commitAfterChange": "97903a14c53cc534c10e28f894e41633eed2dcf2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void acceptResult(CompilationResult result)", "signatureAfterChange": "  public void acceptResult(CompilationResult result)", "diff": ["-\t\t\t\t\tcreateProblemFor(compilationUnit.resource, Util.bind(\"build.duplicateClassFile\", new String(typeName)), JavaCore.ERROR); //$NON-NLS-1$", "+\t\t\t\t\tIType type = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\ttype = javaBuilder.javaProject.findType(qualifiedTypeName.replace('/', '.'));", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tcreateProblemFor(compilationUnit.resource, type, Util.bind(\"build.duplicateClassFile\", new String(typeName)), JavaCore.ERROR); //$NON-NLS-1$", "-\t\t\t\t\tcreateProblemFor(compilationUnit.resource, Util.bind(\"build.classFileCollision\", e.getMessage()), JavaCore.ERROR); //$NON-NLS-1$", "+\t\t\t\t\tcreateProblemFor(compilationUnit.resource, null, Util.bind(\"build.classFileCollision\", e.getMessage()), JavaCore.ERROR); //$NON-NLS-1$", "-\t\t\t\t\tcreateProblemFor(compilationUnit.resource, Util.bind(\"build.inconsistentClassFile\"), JavaCore.ERROR); //$NON-NLS-1$", "+\t\t\t\t\tcreateProblemFor(compilationUnit.resource, null, Util.bind(\"build.inconsistentClassFile\"), JavaCore.ERROR); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a79735843371e0506fd427c9b28034e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "820e796a655cc430ae4ae3cd649830ad2aa11511", "commitAfterChange": "15e62f7752b5ba1cd51b3fafb5a3b0c9d1ba5891", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testGetThrownExceptionTypes()", "signatureAfterChange": " public void testGetThrownExceptionTypes()", "diff": ["-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)IQexception;Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)I^Qexception;^Qerror;\";", "-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;Qexception<TT;>;Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;^Qexception<TT;>;^Qerror;\";", "+\t", "+\tmethodSig = \"<T:Ljava/lang/Exception;>()V^TT;\";", "+\tassertStringsEqual(\"Signature#getThrownExceptionTypes is not correct3\", \"TT;\\n\",", "+\t\t\tSignature.getThrownExceptionTypes(methodSig));", "+\tmethodSig = \"<T:Ljava/lang/Exception;>()V^TT;^Ljava/lang/Exception;\";", "+\tassertStringsEqual(\"Signature#getThrownExceptionTypes is not correct3\", \"TT;\\nLjava/lang/Exception;\\n\",", "+\t\t\tSignature.getThrownExceptionTypes(methodSig));", "+\t", "+\ttry {", "+\t\tSignature.getThrownExceptionTypes(\"<T:Ljava/lang/Exception;>()VTT;\");", "+\t\tassertTrue(\"Signature#getThrownExceptionTypes is not correct: exception\", false);", "+\t} catch (IllegalArgumentException iae) {", "+\t\t// do nothing", "+\t}", "+\t", "+\ttry {", "+\t\tSignature.getThrownExceptionTypes(\"<T:Ljava/lang/Exception;>()V^TT;Ljava/lang/Exception;\");", "+\t\tassertTrue(\"Signature#getThrownExceptionTypes is not correct: exception\", false);", "+\t} catch (IllegalArgumentException iae) {}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c808f54b8b139186b3aabfa9cf2f7e41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "46f0bf33fc17707f84a4651387bf3026d6bae545", "commitAfterChange": "4d6296b6ebb5111ab8825f79519da9de471cce30", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["+\t\t\t\tboolean varargs = false;", "+\t\t\t\t\tvarargs = Flags.isVarargs(method.getFlags());", "-\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\t\t\tvarargs,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf34e06a20569b9222a69131faf30849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tprivate IType createTypeHandle(char[][] simpleTypeNames)", "signatureAfterChange": "\r \tprivate IType createTypeHandle(char[][] simpleTypeNames)", "diff": ["-\t\t// creates compilation unit\r", "-\t\tCompilationUnit unit = (CompilationUnit) this.getCurrentOpenable();\r", "-\r", "-\t\t// create type\r", "-\t\tint length = simpleTypeNames.length;\r", "-\t\tIType type = unit.getType(new String(simpleTypeNames[0]));\r", "-\t\tfor (int i = 1; i < length; i++) {\r", "-\t\t\ttype = type.getType(new String(simpleTypeNames[i]));\r", "+\t\tOpenable currentOpenable = this.getCurrentOpenable();\r", "+\t\tif (currentOpenable instanceof CompilationUnit) {\r", "+\t\t\t// creates compilation unit\r", "+\t\t\tCompilationUnit unit = (CompilationUnit)currentOpenable;\r", "+\t\r", "+\t\t\t// create type\r", "+\t\t\tint length = simpleTypeNames.length;\r", "+\t\t\tIType type = unit.getType(new String(simpleTypeNames[0]));\r", "+\t\t\tfor (int i = 1; i < length; i++) {\r", "+\t\t\t\ttype = type.getType(new String(simpleTypeNames[i]));\r", "+\t\t\t}\r", "+\t\t\treturn type;\r", "+\t\t} else {\r", "+\t\t\ttry {\r", "+\t\t\t\treturn ((org.eclipse.jdt.internal.core.ClassFile)currentOpenable).getType();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "-\t\treturn type;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d09bc47213c58ae1a9a16d3a7ef93e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "2d381a55af3fafe6c5e327ae9cb5f2342038b0e5", "commitAfterChange": "4c8b42f1d4dc6470a7592334e09a6833ce11af8a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private String[] getPathsOfDeclaringType()", "signatureAfterChange": "\r private String[] getPathsOfDeclaringType()", "diff": ["-\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, false);\r", "+\t\tIJavaElement[] roots;\r", "+\t\ttry {\r", "+\t\t\troots = project.getAllPackageFragmentRoots();\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r", "+\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(roots);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b11f97be21107e2264413c6592e8f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "7792c069da7693e79a187c977ea9f7a78a8fff7b", "commitAfterChange": "415b98b155644be36e3e8596750b7ffdbf4a3542", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void remember(IType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private void remember(IType type, ReferenceBinding typeBinding)", "diff": ["-", "+\t\tboolean isAnonymous = false;", "+\t\ttry {", "+\t\t\tisAnonymous = type.isAnonymous();", "+\t\t} catch(JavaModelException jme) {", "+\t\t\t// Ignore", "+\t\t}", "-\t\t\t\t\tsuperInterfaceNames);", "+\t\t\t\t\tsuperInterfaceNames,", "+\t\t\t\t\tisAnonymous);", "-\t\t\t\t\tnew char [][] { typeBinding.superInterfaces()[0].sourceName() });", "+\t\t\t\t\tnew char [][] { typeBinding.superInterfaces()[0].sourceName() },", "+\t\t\t\t\tisAnonymous);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66fe6e7903436cbe28f85d0aac7718d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "57a5b48f21667b49d69da15f48898dd1388574d1", "commitAfterChange": "d0c710b350470279ed477deeb2dc35e8e7c8e9c9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic char[] findSource(String fullName)", "signatureAfterChange": "  \tpublic char[] findSource(String fullName)", "diff": ["+\t\tString charSet = null;", "+\t\t\ttry {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=303511", "+\t\t\t\t// For a resource inside the workspace, use the encoding set on the resource", "+\t\t\t\tif (target instanceof IFile)", "+\t\t\t\t\tcharSet = ((IFile)target).getCharset();", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\t// Ignore", "+\t\t\t}", "+\t\t\t", "-\t\t\t\t\tsource = readSource(entry, zip);", "+\t\t\t\t\tsource = readSource(entry, zip, charSet);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f411c178192b931a272f00ef6ed8b093", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "fdf03d60902e3229917ca4b7516b7fe343477290", "commitAfterChange": "8ec497729d4b15de5b849a168af98dc3eaa1048e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r protected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["-\toriginal.getBuffer().setContents(copy.getBuffer().getCharacters());\r", "-\toriginal.save(fMonitor, fForce);\r", "-\tthis.hasModifiedResource = true;\r", "-\r", "+\tchar[] originalContents = original.getBuffer().getCharacters();\r", "+\ttry {\r", "+\t\toriginal.getBuffer().setContents(copy.getBuffer().getCharacters());\r", "+\t\toriginal.save(fMonitor, fForce);\r", "+\t\tthis.hasModifiedResource = true;\r", "+\t} catch(JavaModelException e){\r", "+\t\t// restore original buffer contents since something went wrong\r", "+\t\toriginal.getBuffer().setContents(originalContents);\r", "+\t\tthrow e;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6daf26bf24970744126f5d9558161d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "358d5f2f1d5c0a4dbde7d6e9af26746a4ddfb56c", "commitAfterChange": "ef1fa4748405f7f68a3b0c31fcd95f825ba17c29", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\t\tIClassFile classFile, \t\t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\t\tIClassFile classFile, \t\t\tboolean resolveBindings)", "diff": ["-\t\t// TODO: (olivier) missing implementation", "-\t\tthrow new IllegalArgumentException();", "+\t\t\t\ttry {", "+\t\t\t\t\tString source = classFile.getSource();", "+\t\t\t\t\tif (resolveBindings) {", "+\t\t\t\t\t\treturn AST.parseCompilationUnit(source.toCharArray());", "+\t\t\t\t\t}", "+\t\t\t\t\treturn AST.parseCompilationUnit(", "+\t\t\t\t\t\tsource.toCharArray(),", "+\t\t\t\t\t\tclassFile.getElementName(),", "+\t\t\t\t\t\tclassFile.getJavaProject());", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}"]}], "num": 6806}
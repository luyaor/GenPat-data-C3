{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "879d46156233d32b4d735ebb6b94405c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e8941bd4be9171c880023753eef1383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope)", "signatureAfterChange": " \t \tprotected FunctionalExpression original()", "diff": ["+\t", "+\tprotected FunctionalExpression original() {", "+\t\treturn this.original;", "-\t\t\t\t\t\tint returnExpressionsCount = 0;", "-\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "-\t\t\t\t\t\t\tthis.returnExpressions[this.returnExpressionsCount++] = expression;", "-\t\t\t\t\t\t\treturn false; // should not analyze any nested lambda returns", "-\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891d1f3dd0c799d7058c354eea57a710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope)", "signatureAfterChange": " \t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope)", "diff": ["-\t\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "+\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "+\t\t\t\t\t\tExpression expression = returnStatement.expression;", "+\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "+\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}"]}], "num": 8006}
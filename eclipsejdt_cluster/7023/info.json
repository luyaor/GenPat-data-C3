{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b17aa81ea1e228587be8cedc309ecc66", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33cda18edfeccb33349dc14f083488ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "9d4f7131389390a16a995494da191d8ab6c07c5a", "commitAfterChange": "aa852841b1dd73414418bf5fc5420a74b80d0cd9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void endVisit(MarkerAnnotation annotation, BlockScope scope)", "signatureAfterChange": "  \tpublic void endVisit(MarkerAnnotation annotation, BlockScope scope)", "diff": ["-}", "-public void endVisit(MarkerAnnotation annotation, BlockScope scope) {", "-\tASTNode.resolveAnnotations(scope, new Annotation[] { annotation}, this.currentBinding);", "-\tcollector.add(annotation.getCompilerAnnotation());", "-}", "+", "+\tpublic void endVisit(MarkerAnnotation annotation, BlockScope scope) {", "+\t\tASTNode.resolveAnnotations(scope, new Annotation[] { annotation }, this.currentBinding);", "+\t\tAnnotationBinding binding = annotation.getCompilerAnnotation();", "+\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "+\t\tElement element = ElementFactory.newElement(this.currentBinding);", "+\t\t_annoToElement.put(anno, element);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c4f75dec83d8e00f1fb2cf0c19ca03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "diff": ["-\t\t\t\t", "-\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\tIPath rootPath = entry.getPath();", "-\t\t\t\tif (rootPath.equals(resourcePath)) {", "-\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "-\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "-\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "-\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "-\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "-\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "-\t\t\t\t\t\tif (root == null) return null;", "-\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "+\t\t\t", "+\t\t\tint length\t= entries.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\tIPath rootPath = entry.getPath();", "+\t\t\t\t\tif (rootPath.equals(resourcePath)) {", "+\t\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "+\t\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "+\t\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "+\t\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "+\t\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "+\t\t\t\t\t\t\tif (root == null) return null;", "+\t\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "-\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "-\t\t\t\t\t\t\t// is the file name in the package", "-\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "+\t\t\t\t\t\t\t\t// is the file name in the package", "+\t\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "+\t\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath, sourceLevel, complianceLevel), sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn root.getPackageFragment(pkgName);", "-\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "-\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath)).getSeverity() == IStatus.ERROR) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn root.getPackageFragment(pkgName);"]}], "num": 7023}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49f02a6a84759d6f034153a2316fc780", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e8e30904abcb901bc782645b01a12fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "7ed8fb3f335f5407b01a590a0c668733ebc19aa6", "commitAfterChange": "3b0a2063dbdc61567393530ebaab7037ae911123", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, DataOutputStream stream) throws IOException", "diff": ["-\t// append the file with the document number arrays & remember the offsets", "+\t// the format of a category table is as follows:", "+\t// any document number arrays with >= 256 elements are written before the table (the offset to each array is remembered)", "+\t// then the number of word->int[] pairs in the table is written", "+\t// for each word -> int[] pair, the word is written followed by:", "+\t//\t\tan int <= 0 if the array size == 1", "+\t//\t\tan int > 1 & < 256 for the size of the array if its > 1 & < 256, the document array follows immediately", "+\t//\t\t256 if the array size >= 256 followed by another int which is the offset to the array (written prior to the table)", "+", "+\tint largeArraySize = 256;", "-\t\t\tint[] documentNumbers = o instanceof int[] ? (int[]) o : ((IntList) o).asArray();", "-\t\t\tint length = documentNumbers.length;", "-\t\t\tif (length == 1) {", "-\t\t\t\tvalues[i] = new Integer(-documentNumbers[0]); // store an array of 1 element by negating the documentNumber (can be zero)", "-\t\t\t} else {", "+\t\t\tif (o instanceof IntList)", "+\t\t\t\to = values[i] = ((IntList) values[i]).asArray();", "+\t\t\tint[] documentNumbers = (int[]) o;", "+\t\t\tif (documentNumbers.length >= largeArraySize) {", "-\t// append the file with the arrays followed by the words & offsets", "-\t\tif (words[i] != null) {", "+\t\tObject o = values[i];", "+\t\tif (o != null) {", "-\t\t\tstream.writeInt(((Integer) values[i]).intValue()); // offset in the file of the array of document numbers", "+\t\t\tif (o instanceof int[]) {", "+\t\t\t\tint[] documentNumbers = (int[]) o;", "+\t\t\t\tif (documentNumbers.length == 1)", "+\t\t\t\t\tstream.writeInt(-documentNumbers[0]); // store an array of 1 element by negating the documentNumber (can be zero)", "+\t\t\t\telse", "+\t\t\t\t\twriteDocumentNumbers(documentNumbers, stream);", "+\t\t\t} else {", "+\t\t\t\tstream.writeInt(largeArraySize); // mark to identify that an offset follows", "+\t\t\t\tstream.writeInt(((Integer) o).intValue()); // offset in the file of the array of document numbers", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "818da39ec94f15864d051e0083900e4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-\t\t\tSystem.out.println(\"EXACT\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"EXACT\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"EQUIVALENT\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"EQUIVALENT\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"ERASURE\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"ERASURE\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"INVALID RULE\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"INVALID RULE\"); //$NON-NLS-1$", "-\t\tSystem.out.println(\"\\tRaw: \"+match.isRaw()); //$NON-NLS-1$", "+\t\tif (match instanceof MethodReferenceMatch) {", "+\t\t\tMethodReferenceMatch methodReferenceMatch = (MethodReferenceMatch) match;", "+\t\t\tif (methodReferenceMatch.isPolymorphic()) {", "+\t\t\t\tSystem.out.print(\"+POLYMORPHIC\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (methodReferenceMatch.isImplicit()) {", "+\t\t\t\tSystem.out.print(\"+IMPLICIT\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (methodReferenceMatch.isSynthetic()) {", "+\t\t\t\tSystem.out.print(\"+SYNTHETIC\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tSystem.out.println(\"\\n\\tRaw: \"+match.isRaw()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac89f7ce54bd456a4af61fe9b5ebf6a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f1e9abf0f06a7b0eae105e5fd6b001a54a4c16b0", "commitAfterChange": "c776cc200b201a2e0f488b5ea4478d54f3a2d31a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "diff": ["-\t\t\tReferenceBinding superType = this.kind == METHOD_SCOPE", "-\t\t\t\t? (ReferenceBinding) typeRef.resolveType((BlockScope)this, false/*no bound check*/)", "-\t\t\t\t: (ReferenceBinding) typeRef.resolveType((ClassScope)this);", "+\t\t\tTypeBinding superType = this.kind == METHOD_SCOPE", "+\t\t\t\t? typeRef.resolveType((BlockScope)this, false/*no bound check*/)", "+\t\t\t\t: typeRef.resolveType((ClassScope)this);", "+\t\t\t\tcontinue nextVariable;", "+\t\t\t}", "+\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "+\t\t\tif (superType.isArrayType()) {", "+\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "-\t\t\tif (superType.isFinal())", "+\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "+\t\t\tif (superRefType.isFinal())", "-\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "-\t\t\t\ttypeVariable.superclass = superType;", "+\t\t\t\ttypeVariable.superclass = superRefType;", "-\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superType};", "+\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superRefType};", "-\t\t\ttypeVariable.firstBound = superType; // first bound used to compute erasure", "+\t\t\ttypeVariable.firstBound = superRefType; // first bound used to compute erasure", "-\t\t\t\t\t\t? (ReferenceBinding) typeRef.resolveType((BlockScope)this, false)", "-\t\t\t\t\t\t: (ReferenceBinding) typeRef.resolveType((ClassScope)this);", "+\t\t\t\t\t\t? typeRef.resolveType((BlockScope)this, false)", "+\t\t\t\t\t\t: typeRef.resolveType((ClassScope)this);", "+\t\t\t\t\tif (superType.isArrayType()) {", "+\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "+\t\t\t\t\t\tcontinue nextVariable;", "+\t\t\t\t\t}", "+\t\t\t\t\tsuperRefType = (ReferenceBinding) superType;", "-\t\t\t\t\t\tproblemReporter().boundsMustBeAnInterface(typeRef, superType);", "+\t\t\t\t\t\tproblemReporter().boundMustBeAnInterface(typeRef, superType);", "-\t\t\t\t\ttypeVariable.superInterfaces[size] = superType;", "+\t\t\t\t\ttypeVariable.superInterfaces[size] = superRefType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9f46da7b8419c060cd4d13484a89b57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "39787fb323b3f06bf37a085118b28347f6a17b39", "commitAfterChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\tif (this.postTryInitStateIndex != -1) {", "-\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "-\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "+\t\t\t\t\tif (this.naturalExitMergeInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "-\t\t\t\t\tif (this.postTryInitStateIndex != -1) {", "-\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "-\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "+\t\t\t\t\tif (this.naturalExitMergeInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "-\t\t\t\t\t\t\tif (this.postTryInitStateIndex != -1) {", "-\t\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "-\t\t\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "+\t\t\t\t\t\t\tif (this.naturalExitMergeInitStateIndex != -1) {", "+\t\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\t\tif (this.postTryInitStateIndex != -1) {", "-\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "-\t\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.postTryInitStateIndex);", "+\t\t\t\t\t\tboolean isStackMapFrameCodeStream = codeStream instanceof StackMapFrameCodeStream;", "+\t\t\t\t\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t\t\t\t\t((StackMapFrameCodeStream) codeStream).pushStateIndex(this.naturalExitMergeInitStateIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.naturalExitMergeInitStateIndex != -1) {", "+\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t\t\t\t\t((StackMapFrameCodeStream) codeStream).popStateIndex();"]}], "num": 47667}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0da26221d580cff52766944a6d67e4f9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f0fa566e598333ed84c530ab00df707", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "a6914dc16e1f0ce25a9de76d8e25b9be5b842c74", "commitAfterChange": "fa8802ca34ede6a02e1972c1e68e4f30dba72e81", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void initialize(boolean reuseExistingFile) throws IOException", "signatureAfterChange": " void initialize(boolean reuseExistingFile) throws IOException", "diff": ["-\t\t\tRandomAccessFile file = new RandomAccessFile(this.indexFile, \"r\"); //$NON-NLS-1$", "+\t\t\tFileInputStream stream = new FileInputStream(this.indexFile);", "+\t\t\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tthis.bufferEnd = stream.read(this.streamBuffer, 0, 128);", "-\t\t\t\tString signature = file.readUTF();", "-\t\t\t\tif (!signature.equals(SIGNATURE))", "-\t\t\t\t\tthrow new IOException(Messages.exception_wrongFormat); ", "-", "-\t\t\t\tthis.headerInfoOffset = file.readInt();", "-\t\t\t\tif (this.headerInfoOffset > 0) // file is empty if its not set", "-\t\t\t\t\treadHeaderInfo(file);", "+\t\t\t\tchar[] signature = readStreamChars(stream);", "+\t\t\t\tif (!CharOperation.equals(signature, SIGNATURE_CHARS)) {", "+\t\t\t\t\tthrow new IOException(Messages.exception_wrongFormat);", "+\t\t\t\t}", "+\t\t\t\tthis.headerInfoOffset = readStreamInt(stream);", "+\t\t\t\tif (this.headerInfoOffset > 0) { // file is empty if its not set", "+\t\t\t\t\tstream.skip(this.headerInfoOffset - this.bufferEnd); // assume that the header info offset is over current buffer end", "+\t\t\t\t\tthis.bufferIndex = 0;", "+\t\t\t\t\tthis.bufferEnd = stream.read(this.streamBuffer, 0, this.streamBuffer.length);", "+\t\t\t\t\treadHeaderInfo(stream);", "+\t\t\t\t}", "-\t\t\t\tfile.close();", "+\t\t\t\tstream.close();", "-\t\tRandomAccessFile file = new RandomAccessFile(this.indexFile, \"rw\"); //$NON-NLS-1$", "+\t\tFileOutputStream stream = new FileOutputStream(this.indexFile, false);", "-\t\t\tfile.writeUTF(SIGNATURE);", "-\t\t\tfile.writeInt(-1); // file is empty", "+\t\t\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\twriteStreamChars(stream, SIGNATURE_CHARS);", "+\t\t\twriteStreamInt(stream, -1); // file is empty", "+\t\t\t// write the buffer to the stream", "+\t\t\tif (this.bufferIndex > 0) {", "+\t\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\t\tthis.bufferIndex = 0;", "+\t\t\t}", "-\t\t\tfile.close();", "+\t\t\tstream.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f53121ff5b1e7874d0cc2b049b0a677c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "signatureAfterChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-\tif (offset == HashtableOfIntValues.NO_VALUE)", "+\tif (offset == HashtableOfIntValues.NO_VALUE) {", "+\t}", "+\tthis.streamEnd = this.categoryEnds.get(categoryName);", "-\tDataInputStream stream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.indexFile), 2048));", "+\tFileInputStream stream = new FileInputStream(this.indexFile);", "+\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "-\t\tint size = stream.readInt();", "+\t\tint readSize = this.streamEnd - offset;", "+\t\tthis.bufferIndex = 0;", "+\t\tthis.streamPos = stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE) + offset;", "+\t\tint size = readStreamInt(stream);", "-\t\t\tchar[] word = Util.readUTF(stream);", "-\t\t\tint arrayOffset = stream.readInt();", "+\t\t\tchar[] word = readStreamChars(stream);", "+\t\t\tint arrayOffset = readStreamInt(stream);", "-\t\t\t\tcategoryTable.put(word, readDocumentArray(stream, arrayOffset)); // read in-lined array providing size", "+\t\t\t\tcategoryTable.put(word, readStreamDocumentArray(stream, arrayOffset)); // read in-lined array providing size", "-\t\t\t\tarrayOffset = stream.readInt(); // read actual offset", "+\t\t\t\tarrayOffset = readStreamInt(stream); // read actual offset", "-\t} finally {", "+\t}", "+\tcatch (IOException ioe) {", "+\t\tthis.streamBuffer = null;", "+\t\tthrow ioe;", "+\t}", "+\tfinally {", "-\t\tstream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.indexFile), 2048));", "+\t\tstream = new FileInputStream(this.indexFile);", "-\t\t\tfor (int i = 0; i < count; i++) // each array follows the previous one", "-\t\t\t\tcategoryTable.put(matchingWords[i], readDocumentArray(stream, stream.readInt()));", "-\t\t} finally {", "+\t\t\tint readSize = this.streamEnd - firstOffset;", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tthis.streamPos = stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE) + firstOffset;", "+\t\t\tfor (int i = 0; i < count; i++) { // each array follows the previous one", "+\t\t\t\tcategoryTable.put(matchingWords[i], readStreamDocumentArray(stream, readStreamInt(stream)));", "+\t\t\t}", "+\t\t}", "+\t\tcatch (IOException ioe) {", "+\t\t\tthis.streamBuffer = null;", "+\t\t\tthrow ioe;", "+\t\t}", "+\t\tfinally {", "+\tthis.streamBuffer = null;"]}], "num": 57487}
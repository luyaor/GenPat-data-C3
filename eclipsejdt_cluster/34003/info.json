{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7cf1a3628582428466be3e5e9aa163a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c86ce80e06e409b5ddb917f44ebd4db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "425360de9982cb851072283681a98ff148472fdd", "commitAfterChange": "da52556acc57ef6517941f460f831ee862406473", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\tASTNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, field.declarationSourceEnd);", "+\t\t// limit scan to end part position for multiple fields declaration (see bug 73112)", "+\t\tint end = field.endPart2Position==0 ? field.declarationSourceEnd : field.endPart2Position;", "+\t\tASTNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8eeb2a514ef61cc66a9004e1b24eb97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "afd9d4680c771ea3305bd1c2231ace193ccd313f", "commitAfterChange": "b403420c651fc8995a4c44cff2ecebab69cc0fa2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t\t\tint rangeStart = typeRef.completeInText() ? typeRef.sourceStart : (int) (completionPosition >>> 32);", "+\t\t\t\t\t\tsetSourceRange(rangeStart, (int) completionPosition);"]}], "num": 34003}
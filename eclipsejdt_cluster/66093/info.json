{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5de53f8261505d66e529696e2ce6cd4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ae0f8e7d27eea3379170064bd86cbc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " private void rebuildIndex(String indexName, IPath path)", "diff": ["+private void rebuildIndex(String indexName, IPath path) {", "+\tupdateIndexState(indexName, REBUILDING_STATE);", "+\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), path, true);", "+\tIndexRequest request = null;", "+\tif (target instanceof IProject) {", "+\t\trequest = new IndexAllProject((IProject) target, this);", "+\t} else if (target instanceof IFolder) {", "+\t\tIFolder folder = (IFolder) target;", "+\t\trequest = new IndexBinaryFolder(folder, this, folder.getProject());", "+\t} else if (target instanceof IFile) {", "+\t\trequest = new AddJarFileToIndex((IFile) target, this, \"\"); //$NON-NLS-1$", "+\t} else if (target instanceof java.io.File) {", "+\t\t// remember the timestamp of this library", "+\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File) target);", "+\t\tJavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps.put(path, new Long(timestamp));", "+\t\trequest = new AddJarFileToIndex(path, this, \"\"); //$NON-NLS-1$", "+\t}", "+\tif (request != null)", "+\t\trequest(request);", "+}", "-\t\t\t\tnew IWorkspaceRunnable() {", "-\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\tIndexManager.this.projectsToCheck = workspace.getRoot().getProjects();", "-\t\t\t\t\t\tfor (int i = 0, max = IndexManager.this.projectsToCheck == null ? 0 : IndexManager.this.projectsToCheck.length; i < max; i++){", "-\t\t\t\t\t\t\tIJavaProject project = JavaCore.create(IndexManager.this.projectsToCheck[i]);", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)", "-\t\t\t\t\t\t\t\tproject.getResolvedClasspath(true);", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} ", "-\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "882099419904ea9cc75eee040989fdf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "1af26d01cfd72849d8c290dd25ccb7fc62852780", "commitAfterChange": "72895982cdfd43c6e856c9e0af3d1d64cc3e0181", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-\t\t// try to get the entry", "-\t\tZipEntry entry = null;", "-\t\tZipFile zip = null;", "+", "+\t\tString fullName;", "+\t\t//add the root path if specified", "+\t\tif (!this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "+\t\t\tfullName = this.rootPath + '/' + name;", "+\t\t} else {", "+\t\t\tfullName = name;", "+\t\t}", "+", "-\t\ttry {", "-\t\t\tString fullName;", "-\t\t\t//add the root path if specified", "-\t\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "-\t\t\t\tfullName = fRootPath + '/' + name;", "-\t\t\t} else {", "-\t\t\t\tfullName = name;", "-\t\t\t}", "-\t\t\tzip = getZip();", "-\t\t\tentry = zip.getEntry(fullName);", "-\t\t\tif (entry != null) {", "-\t\t\t\t// now read the source code", "-\t\t\t\tbyte[] bytes = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tbytes = Util.getZipEntryByteContent(entry, zip);", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t}", "-\t\t\t\tif (bytes != null) {", "+\t\tif (Util.isArchiveFileName(this.sourcePath.lastSegment())) {", "+\t\t\t// try to get the entry", "+\t\t\tZipEntry entry = null;", "+\t\t\tZipFile zip = null;", "+\t\t\ttry {", "+\t\t\t\tzip = getZip();", "+\t\t\t\tentry = zip.getEntry(fullName);", "+\t\t\t\tif (entry != null) {", "+\t\t\t\t\t// now read the source code", "+\t\t\t\t\tbyte[] bytes = null;", "-\t\t\t\t\t\tsource = Util.bytesToChar(bytes, this.encoding);", "+\t\t\t\t\t\tbytes = Util.getZipEntryByteContent(entry, zip);", "-\t\t\t\t\t\tsource = null;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (bytes != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tsource = Util.bytesToChar(bytes, this.encoding);", "+\t\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t\tsource = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\treturn null;", "+\t\t\t} finally {", "+\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zip);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), this.sourcePath, true);", "+\t\t\tif (target instanceof IFolder) {", "+\t\t\t\tIFolder folder = (IFolder)target;", "+\t\t\t\tIResource res = folder.findMember(fullName);", "+\t\t\t\tif (res instanceof IFile) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tsource = org.eclipse.jdt.internal.core.Util.getResourceContentsAsCharArray((IFile)res, this.encoding);", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (target instanceof File) {", "+\t\t\t\tFile file = (File)target;", "+\t\t\t\tif (file.isDirectory()) {", "+\t\t\t\t\tFile sourceFile = new File(file, fullName);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tsource = Util.getFileCharContent(sourceFile, this.encoding);", "+\t\t\t\t\t} catch (IOException e) {", "-\t\t} catch (CoreException e) {", "-\t\t\treturn null;", "-\t\t} finally {", "-\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zip);"]}], "num": 66093}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30be6cdfc9d927adc7ac6ad62f509a1c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52eac76cdbdbd22062888bf6c71d28cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank)", "signatureAfterChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack)", "diff": ["-\tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank) {", "+\tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack) {", "-\t\t\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound,wildV.bound});", "+\t\t\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound,wildV.bound}, lubStack);", "-\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, null, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "+\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "-\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,wildV.bound});", "+\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,wildV.bound}, lubStack);", "-\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "+\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "-\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound, v});", "+\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound, v}, lubStack);", "-\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER); // TODO (philippe) need to capture entire bounds\t\t", "+\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER); // TODO (philippe) need to capture entire bounds\t\t", "-\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,v});", "+\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,v}, lubStack);", "-\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);", "+\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86aec0d096c58e3df33b3d74fe490dc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "795236662f4c72deb433448a946f4a36cebbebd0", "commitAfterChange": "b74a7b82d9221b86893a88ea5453e92534ffe51b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "signatureAfterChange": " \tprivate void checkProjectsAndClasspathChanges(IResourceDelta delta)", "diff": ["-\tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta) {", "+\tprivate void checkProjectsAndClasspathChanges(IResourceDelta delta) {", "+\t\t\tcase IResource.FOLDER:", "+\t\t\t\tif (delta.getKind() == IResourceDelta.CHANGED) { // look for .jar file change to update classpath", "+\t\t\t\t\tchildren = delta.getAffectedChildren();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\t\t/* classpath file change */", "+\t\t\t\tint kind = delta.getKind();", "+\t\t\t\tRootInfo rootInfo;", "+\t\t\t\t\t/* classpath file change */", "-\t\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tswitch (kind) {", "+\t\t\t\t} else if ((rootInfo = rootInfo(file.getFullPath(), kind)) != null && rootInfo.entryKind == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\tjavaProject = (JavaProject)JavaCore.create(file.getProject());", "+\t\t\t\t\tjavaProject.resetResolvedClasspath();", "+\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\tcheckProjectsBeingAddedOrRemoved(children[i]);", "+\t\t\t\tcheckProjectsAndClasspathChanges(children[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7cef16fd0a5c51fc3a7c028f8c2bd93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "10f63341df199e970df278da3a8020c6446bceae", "commitAfterChange": "a828d1823cd677ba9f8607ef7a3ea568312cc671", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": "\t\t \t \tpublic void testMethodRefParameter()", "signatureAfterChange": "\t\t \t \tpublic void testMethodRefParameter()", "diff": ["+\t\tif (ast.apiLevel() >= AST.JLS3) {", "+\t\t\tassertTrue(x.isVarargs() == false);", "+\t\t}", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setVarargs(true);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.isVarargs() == true);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setVarargs(false);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.isVarargs() == false);", "+\t\t}", "+"]}], "num": 65440}
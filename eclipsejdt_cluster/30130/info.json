{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e672a0aaaccc524bf839f78830e51d05", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1820ae2503eeb21814d9ab4771cc7ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public ParameterizedTypeBinding createAnnotatedType(ReferenceBinding genericType, long annotationBits)", "signatureAfterChange": " public TypeBinding createAnnotatedType(TypeBinding genericType, long annotationBits)", "diff": ["-public ParameterizedTypeBinding createAnnotatedType(ReferenceBinding genericType, long annotationBits) {", "-\tTypeBinding[] typeArguments = genericType.isParameterizedType() ? ((ParameterizedTypeBinding) genericType).arguments : null;", "-\treturn createParameterizedType(genericType, typeArguments, annotationBits, genericType.enclosingType());", "-}\t", "+public TypeBinding createAnnotatedType(TypeBinding genericType, long annotationBits) {", "+\tif (genericType instanceof UnresolvedReferenceBinding) {", "+\t\t// clone so we don't interfere with future lookups:", "+\t\treturn new UnresolvedReferenceBinding((UnresolvedReferenceBinding)genericType, annotationBits);", "+\t}", "+\tif (genericType instanceof ReferenceBinding) {", "+\t\tTypeBinding[] typeArguments = genericType.isParameterizedType() ? ((ParameterizedTypeBinding) genericType).arguments : null;", "+\t\tParameterizedTypeBinding parameterizedType = createParameterizedType((ReferenceBinding) genericType, typeArguments, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tannotationBits, genericType.enclosingType());", "+\t\tparameterizedType.id = genericType.id; // for well-known types shared the id (only here since those types are not generic, are they?)", "+\t\treturn parameterizedType;", "+\t} else if (genericType instanceof ArrayBinding) {", "+\t\tlong[] tagBitsPerDims = ((ArrayBinding) genericType).nullTagBitsPerDimension;", "+\t\tif (tagBitsPerDims == null)", "+\t\t\ttagBitsPerDims = new long[genericType.dimensions()+1];", "+\t\tif (tagBitsPerDims[0] != annotationBits) {", "+\t\t\ttagBitsPerDims[0] = annotationBits;", "+\t\t\treturn createArrayType(genericType.leafComponentType(), genericType.dimensions(), tagBitsPerDims);", "+\t\t}", "+\t}", "+\t// TODO(stephan): PolyTypeBinding", "+\treturn genericType;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76c66babb191180b019ea7b78ae6476b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "06d5ad0c6e4971f283c2f47bfc7f9df941ae34e8", "commitAfterChange": "4758255b8284af577e4f7f81a9ecd60704ccc85c", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "signatureAfterChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "diff": ["-\t\t\tthis.invocationArguments[i].checkAgainstFinalTargetType(targetType);", "+\t\t\tExpression expression = this.invocationArguments[i];", "+\t\t\texpression.checkAgainstFinalTargetType(targetType);", "+\t\t\tif (expression instanceof Invocation) {", "+\t\t\t\tInvocation invocation = (Invocation) expression;", "+\t\t\t\tif (!this.innerPolies.contains(invocation)) {", "+\t\t\t\t\tMethodBinding method = invocation.binding(targetType);", "+\t\t\t\t\tif (method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\t\t\tParameterizedGenericMethodBinding previousBinding = (ParameterizedGenericMethodBinding) method;", "+\t\t\t\t\t\tInferenceContext18 innerCtx = invocation.getInferenceContext(previousBinding);", "+\t\t\t\t\t\tif (innerCtx != null) {", "+\t\t\t\t\t\t\t// we have a non-poly generic invocation, which needs inference but is not connected via innerPolis.", "+\t\t\t\t\t\t\t// Finish that inner inference now (incl. binding updates):", "+\t\t\t\t\t\t\tMethodBinding innerBinding = innerCtx.inferInvocationType(invocation, previousBinding);", "+\t\t\t\t\t\t\tif (invocation.updateBindings(innerBinding, targetType)) { // only if we are actually improving anything", "+\t\t\t\t\t\t\t\tASTNode.resolvePolyExpressionArguments(invocation, innerBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 30130}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60e1e0469aebccf489fb3a0a578d1a04", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a4eaa1ae36d9b016c2ac39aa8e5e529", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "6e5d8fb1fa59c43c60c58828e1e292aaafa3465f", "commitAfterChange": "108910be72e713e6e104fafacd635988e5383096", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": "  protected void resolveAnnotations(BlockScope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["-protected void resolveAnnotations(BlockScope scope) {", "-\tif (this.annotations != null) {", "-\t\tresolveAnnotations(scope, this.annotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "+protected void resolveAnnotations(Scope scope) {", "+\tAnnotation[][] annotationsOnDimensions = getAnnotationsOnDimensions();", "+\tif (this.annotations != null || annotationsOnDimensions != null) {", "+\t\tBlockScope resolutionScope = Scope.typeAnnotationsResolutionScope(scope);", "+\t\tif (resolutionScope != null) {", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLevels = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLevels; i++) {", "+\t\t\t\t\tif (this.annotations[i] != null) {", "+\t\t\t\t\t\tresolveAnnotations(resolutionScope, this.annotations[i], new Annotation.TypeUseBinding(isWildcard() ? Binding.TYPE_PARAMETER : Binding.TYPE_USE));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\tif (annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, length = annotationsOnDimensions.length; i < length; i++) {", "+\t\t\t\t\tAnnotation [] dimensionAnnotations = annotationsOnDimensions[i];", "+\t\t\t\t\tif (dimensionAnnotations  != null) {", "+\t\t\t\t\t\tresolveAnnotations(resolutionScope, dimensionAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad5e2c0deef7ae3f8b36df4452f7c97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "8f81b2e3747fcb9f17cf00acc1b99bfe92cefa96", "commitAfterChange": "b94c15d0468e2c86a83d3434786ffbaf7e2c6cc7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t", "+", "+\t\t\t// Look for references in class annotations", "+\t\t\tIBinaryAnnotation[] annotations = reader.getAnnotations();", "+\t\t\tif (annotations != null) {", "+\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t\t\t// look for references in method annotations", "+\t\t\t\t\tannotations = method.getAnnotations();", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// look for references in field annotations", "+\t\t\t\t\tannotations = field.getAnnotations();", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 66842}
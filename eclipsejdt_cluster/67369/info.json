{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1c1c7470c34f3f84748d84a19f06887", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cf06c318d948471542a97a9185a01ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "cc0ef1d5e003ee3b62672de56257b8d688621bfb", "commitAfterChange": "f550bd975516f38afc7e75acccf964ac012b15c3", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "diff": ["+\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenEnd - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc > 0) ? this.startPosition : this.endPosition;", "-\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0) start = this.javadocTagPosition;", "+\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "+\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "458ecbd3ab66e29418aa7c734f7fe2f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected char[][][] collect() throws JavaModelException", "signatureAfterChange": " public char[][][] collect() throws JavaModelException", "diff": ["-", "-protected char[][][] collect() throws JavaModelException {", "-\t", "-\tif (this.type != null) {", "-\t\t// Collect the paths of the cus that are in the hierarchy of the given type", "-\t\tthis.result = new char[1][][];", "-\t\tthis.resultIndex = 0;", "-\t\tJavaProject javaProject = (JavaProject)this.type.getJavaProject();", "-\t\tthis.locator.initialize(javaProject);", "-\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\ttry {", "-\t\t\tif (this.type.isBinary()) {", "-\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(this.type);", "-\t\t\t\tif (binding != null) {", "-\t\t\t\t\tthis.collectSuperTypeNames(binding);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tICompilationUnit unit = this.type.getCompilationUnit();", "-\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);", "-\t\t\t\tif (parsedUnit != null) {", "-\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (AbortCompilation e) {", "-\t\t\t// problem with classpath: report inacurrate matches", "-\t\t\treturn null;", "-\t\t} finally {", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\t\t}", "-\t\treturn this.result;", "-\t} else {\t", "-\t\t// Collect the paths of the cus that declare a type which matches declaringQualification + declaringSimpleName", "-\t\tString[] paths = this.getPathsOfDeclaringType();", "-\t\t", "-\t\t// Create bindings from source types and binary types", "-\t\t// and collect super type names of the type declaration ", "-\t\t// that match the given declaring type", "-\t\tif (paths != null) {", "-\t\t\tUtil.sort(paths); // sort by projects", "-\t\t\tJavaProject previousProject = null;", "-\t\t\tthis.result = new char[1][][];", "-\t\t\tthis.resultIndex = 0;", "-\t\t\ttry {", "-\t\t\t\tfor (int i = 0, length = paths.length; i < length; i++) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "-\t\t\t\t\t\tif (openable == null)", "-\t\t\t\t\t\t\tcontinue; // outside classpath", "-\t\t\t\t\t\tIJavaProject project = openable.getJavaProject();", "-\t\t\t\t\t\tif (!project.equals(previousProject)) {", "-\t\t\t\t\t\t\tif (previousProject != null) {", "-\t\t\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpreviousProject = (JavaProject)project;", "-\t\t\t\t\t\t\tthis.locator.initialize(previousProject);", "-\t\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (openable instanceof ICompilationUnit) {", "-\t\t\t\t\t\t\tICompilationUnit unit = (ICompilationUnit)openable;", "-\t\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);", "-\t\t\t\t\t\t\tif (parsedUnit != null) {", "-\t\t\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (openable instanceof IClassFile) {", "-\t\t\t\t\t\t\tIClassFile classFile = (IClassFile)openable;", "-\t\t\t\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "-\t\t\t\t\t\t\tif (this.matches(binding)) {", "-\t\t\t\t\t\t\t\tthis.collectSuperTypeNames(binding);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t\t\t// ignore: continue with next element", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// ignore: continue with next element", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tif (previousProject != null) {", "-\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tSystem.arraycopy(this.result, 0, this.result = new char[this.resultIndex][][], 0, this.resultIndex);", "-\t\t\treturn this.result;", "-\t\t} else {", "-\t\t\treturn null;", "-\t\t}", "-\t}", "-}", "+public char[][][] collect() throws JavaModelException {", "+\tif (this.type != null) {", "+\t\t// Collect the paths of the cus that are in the hierarchy of the given type", "+\t\tthis.result = new char[1][][];", "+\t\tthis.resultIndex = 0;", "+\t\tJavaProject javaProject = (JavaProject) this.type.getJavaProject();", "+\t\tthis.locator.initialize(javaProject, 0);", "+\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies); // NB: this uses a PerThreadObject, so it is thread safe", "+\t\ttry {", "+\t\t\tif (this.type.isBinary()) {", "+\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(this.type);", "+\t\t\t\tif (binding != null)", "+\t\t\t\t\tthis.collectSuperTypeNames(binding);", "+\t\t\t} else {", "+\t\t\t\tICompilationUnit unit = this.type.getCompilationUnit();", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);", "+\t\t\t\tif (parsedUnit != null)", "+\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// problem with classpath: report inacurrate matches", "+\t\t\treturn null;", "+\t\t} finally {", "+\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "+\t\t}", "+\t\tif (this.result.length > this.resultIndex)", "+\t\t\tSystem.arraycopy(this.result, 0, this.result = new char[this.resultIndex][][], 0, this.resultIndex);", "+\t\treturn this.result;", "+\t}", "+\t// Collect the paths of the cus that declare a type which matches declaringQualification + declaringSimpleName", "+\tString[] paths = this.getPathsOfDeclaringType();", "+\tif (paths == null) return null;", "+", "+\t// Create bindings from source types and binary types and collect super type names of the type declaration ", "+\t// that match the given declaring type", "+\tUtil.sort(paths); // sort by projects", "+\tJavaProject previousProject = null;", "+\tthis.result = new char[1][][];", "+\tthis.resultIndex = 0;", "+\ttry {", "+\t\tfor (int i = 0, length = paths.length; i < length; i++) {", "+\t\t\ttry {", "+\t\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "+\t\t\t\tif (openable == null) continue; // outside classpath", "+", "+\t\t\t\tIJavaProject project = openable.getJavaProject();", "+\t\t\t\tif (!project.equals(previousProject)) {", "+\t\t\t\t\tif (previousProject != null)", "+\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "+\t\t\t\t\tpreviousProject = (JavaProject) project;", "+\t\t\t\t\tthis.locator.initialize(previousProject, 0);", "+\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);", "+\t\t\t\t}", "+\t\t\t\tif (openable instanceof ICompilationUnit) {", "+\t\t\t\t\tICompilationUnit unit = (ICompilationUnit) openable;", "+\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);", "+\t\t\t\t\tif (parsedUnit != null)", "+\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "+\t\t\t\t} else if (openable instanceof IClassFile) {", "+\t\t\t\t\tIClassFile classFile = (IClassFile) openable;", "+\t\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "+\t\t\t\t\tif (this.matches(binding))", "+\t\t\t\t\t\tthis.collectSuperTypeNames(binding);", "+\t\t\t\t}", "+\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t// ignore: continue with next element", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// ignore: continue with next element", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\tif (previousProject != null)", "+\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "+\t}", "+\tif (this.result.length > this.resultIndex)", "+\t\tSystem.arraycopy(this.result, 0, this.result = new char[this.resultIndex][][], 0, this.resultIndex);", "+\treturn this.result;"]}], "num": 67369}
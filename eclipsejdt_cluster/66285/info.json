{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba7944a5a318c0972d062d661603a66b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b53c69092aa44bb09c35f8fb188f325b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "ded90d967b480e6d7d22b3283d60f4ed44ccc489", "commitAfterChange": "18c83b91d182e52feafdad6b2c46eb79ffb0e002", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\tprotected void logPerfResult(PrintStream[] logStreams, int count)", "signatureAfterChange": " \tprotected void logPerfResult(PrintStream[] logStreams, int count)", "diff": ["-\t\t */", "-\t\tprotected void logPerfResult(PrintStream[] logStreams, int count) {", "+\t */", "+\tprotected void logPerfResult(PrintStream[] logStreams, int count) {", "-\t\t\t// Perfs comment buffers", "-\t\t\tString[] comments = new String[2];", "+\t\t// Perfs comment buffers", "+\t\tString[] comments = new String[2];", "-\t\t\t// Log perf result", "-\t\t\tboolean haveTimes  = JdtCorePerformanceMeter.CPU_TIMES != null && JdtCorePerformanceMeter.ELAPSED_TIMES != null;", "-\t\t\tif (haveTimes) {", "-\t\t\t\tNumberFormat pFormat = NumberFormat.getPercentInstance();", "-\t\t\t\tpFormat.setMaximumFractionDigits(1);", "-\t\t\t\tNumberFormat dFormat = NumberFormat.getNumberInstance();", "-\t\t\t\tdFormat.setMaximumFractionDigits(2);", "-\t\t\t\ttry {", "-\t\t\t\t\t// Store CPU Time", "-\t\t\t\t\tJdtCorePerformanceMeter.Statistics cpuStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.CPU_TIMES.get(this.scenarioReadableName);", "-\t\t\t\t\tif (cpuStats != null) {", "-\t\t\t\t\t\tdouble percent = cpuStats.stddev/cpuStats.average;", "-\t\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "-\t\t\t\t\t\t\tif (logStreams[0] != null) logStreams[0].print(\"'\");", "-\t\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over 2%: \"+dFormat.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "-\t\t\t\t\t\t\tcomments[0] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (logStreams[0] != null) {", "-\t\t\t\t\t\t\tlogStreams[0].print(\"\"+cpuStats.average+\"\\t\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored CPU time!\");", "-\t\t\t\t\t\tThread.sleep(1000);", "+\t\t// Log perf result", "+\t\tboolean haveTimes  = JdtCorePerformanceMeter.CPU_TIMES != null && JdtCorePerformanceMeter.ELAPSED_TIMES != null;", "+\t\tif (haveTimes) {", "+\t\t\tNumberFormat pFormat = NumberFormat.getPercentInstance();", "+\t\t\tpFormat.setMaximumFractionDigits(1);", "+\t\t\tNumberFormat dFormat = NumberFormat.getNumberInstance();", "+\t\t\tdFormat.setMaximumFractionDigits(2);", "+\t\t\ttry {", "+\t\t\t\t// Store CPU Time", "+\t\t\t\tJdtCorePerformanceMeter.Statistics cpuStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.CPU_TIMES.get(this.scenarioReadableName);", "+\t\t\t\tif (cpuStats != null) {", "+\t\t\t\t\tdouble percent = cpuStats.stddev/cpuStats.average;", "+\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "+\t\t\t\t\t\tif (logStreams[0] != null) logStreams[0].print(\"'\");", "+\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over 2%: \"+dFormat.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "+\t\t\t\t\t\tcomments[0] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t// Store Elapsed time", "-\t\t\t\t\tJdtCorePerformanceMeter.Statistics elapsedStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.ELAPSED_TIMES.get(this.scenarioReadableName);", "-\t\t\t\t\tif (elapsedStats != null) {", "-\t\t\t\t\t\tdouble percent = elapsedStats.stddev/elapsedStats.average;", "-\t\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "-\t\t\t\t\t\t\tif (logStreams[1] != null) logStreams[1].print(\"'\");", "-\t\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over 2%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));", "-\t\t\t\t\t\t\tcomments[1] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (logStreams[1] != null) {", "-\t\t\t\t\t\t\tlogStreams[1].print(\"\"+elapsedStats.average+\"\\t\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored Elapsed time\");", "-\t\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\tif (logStreams[0] != null) {", "+\t\t\t\t\t\tlogStreams[0].print(\"\"+cpuStats.sum+\"\\t\");", "-\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\t// do nothing", "+\t\t\t\t} else {", "+\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored CPU time!\");", "+\t\t\t\t\tThread.sleep(1000);", "-\t\t\t}", "-", "-\t\t\t// Update comment buffers", "-\t\t\tStringBuffer[] scenarioComments = (StringBuffer[]) SCENARII_COMMENT.get(getClass());", "-\t\t\tif (scenarioComments == null) {", "-\t\t\t\tscenarioComments = new StringBuffer[LOG_TYPES.length];", "-\t\t\t\tSCENARII_COMMENT.put(getClass(), scenarioComments);", "-\t\t\t}", "-\t\t\tfor (int i=0, ln=LOG_TYPES.length; i<ln; i++) {", "-\t\t\t\tif (comments[i] != null) {", "-\t\t\t\t\tif (scenarioComments[i] == null) {", "-\t\t\t\t\t\tscenarioComments[i] = new StringBuffer();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscenarioComments[i].append(' ');", "+\t\t\t\t// Store Elapsed time", "+\t\t\t\tJdtCorePerformanceMeter.Statistics elapsedStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.ELAPSED_TIMES.get(this.scenarioReadableName);", "+\t\t\t\tif (elapsedStats != null) {", "+\t\t\t\t\tdouble percent = elapsedStats.stddev/elapsedStats.average;", "+\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "+\t\t\t\t\t\tif (logStreams[1] != null) logStreams[1].print(\"'\");", "+\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over 2%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));", "+\t\t\t\t\t\tcomments[1] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\tif (this.scenarioComment == null) {", "-\t\t\t\t\t\tscenarioComments[i].append(\"[\"+TEST_POSITION+\"]\");", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscenarioComments[i].append(this.scenarioComment);", "+\t\t\t\t\tif (logStreams[1] != null) {", "+\t\t\t\t\t\tlogStreams[1].print(\"\"+elapsedStats.sum+\"\\t\");", "-\t\t\t\t\tscenarioComments[i].append(' ');", "-\t\t\t\t\tscenarioComments[i].append(comments[i]);", "-\t\t\t\t}\t", "-\t\t\t}", "-", "-\t\t\t// Close log", "-\t\t\tif (count == 0) {", "-\t\t\t\tfor (int i=0, ln=logStreams.length; i<ln; i++) {", "-\t\t\t\t\tif (logStreams[i] != null) {", "-\t\t\t\t\t\tif (haveTimes) {", "-\t\t\t\t\t\t\tif (comments[i] != null) {", "-\t\t\t\t\t\t\t\tlogStreams[i].print(scenarioComments[i].toString());", "-\t\t\t\t\t\t\t}\t", "-\t\t\t\t\t\t\tlogStreams[i].println();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tlogStreams[i].close();", "-\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored Elapsed time\");", "+\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\tTEST_POSITION = 0;", "+\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t// do nothing", "+", "+\t\t// Update comment buffers", "+\t\tStringBuffer[] scenarioComments = (StringBuffer[]) SCENARII_COMMENT.get(getClass());", "+\t\tif (scenarioComments == null) {", "+\t\t\tscenarioComments = new StringBuffer[LOG_TYPES.length];", "+\t\t\tSCENARII_COMMENT.put(getClass(), scenarioComments);", "+\t\t}", "+\t\tfor (int i=0, ln=LOG_TYPES.length; i<ln; i++) {", "+\t\t\tif (this.scenarioComment != null || comments[i] != null) {", "+\t\t\t\tif (scenarioComments[i] == null) {", "+\t\t\t\t\tscenarioComments[i] = new StringBuffer();", "+\t\t\t\t} else {", "+\t\t\t\t\tscenarioComments[i].append(' ');", "+\t\t\t\t}", "+\t\t\t\tif (this.scenarioComment == null) {", "+\t\t\t\t\tscenarioComments[i].append(\"[\"+TEST_POSITION+\"]\");", "+\t\t\t\t} else {", "+\t\t\t\t\tscenarioComments[i].append(this.scenarioComment);", "+\t\t\t\t}", "+\t\t\t\tif (comments[i] != null) {", "+\t\t\t\t\tif (this.scenarioComment != null) scenarioComments[i].append(',');", "+\t\t\t\t\tscenarioComments[i].append(comments[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Close log", "+\t\tif (count == 0) {", "+\t\t\tfor (int i=0, ln=logStreams.length; i<ln; i++) {", "+\t\t\t\tif (logStreams[i] != null) {", "+\t\t\t\t\tif (haveTimes) {", "+\t\t\t\t\t\tif (scenarioComments[i] != null) {", "+\t\t\t\t\t\t\tlogStreams[i].print(scenarioComments[i].toString());", "+\t\t\t\t\t\t}\t", "+\t\t\t\t\t\tlogStreams[i].println();", "+\t\t\t\t\t}", "+\t\t\t\t\tlogStreams[i].close();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tTEST_POSITION = 0;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcdf7d2be71ce713864a7280d63c52d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void logPerfResult(PrintStream[] logStreams, int count)", "signatureAfterChange": " \t\tprotected void logPerfResult(PrintStream[] logStreams, int count)", "diff": ["-\tprotected void logPerfResult(PrintStream[] logStreams, int count) {", "-", "-\t\t// Log perf result", "-\t\tboolean haveTimes  = JdtCorePerformanceMeter.CPU_TIMES != null;", "-\t\tif (haveTimes) {", "-\t\t\tJdtCorePerformanceMeter.Statistics stats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.CPU_TIMES.get(this.scenario);", "-\t\t\tif (stats != null) {", "-\t\t\t\tif (logStreams[0] != null) {", "-\t\t\t\t\tlogStreams[0].print(\"\"+stats.count+\"\\t\");", "-\t\t\t\t\tif (DEBUG) System.out.println(\"\t- count stored in log file.\\n\");", "-\t\t\t\t}", "-\t\t\t\tif (logStreams[1] != null) {", "-\t\t\t\t\tlogStreams[1].print(\"\"+stats.sum+\"\\t\");", "-\t\t\t\t\tif (DEBUG) System.out.println(\"\t- sum stored in log file.\\n\");", "-\t\t\t\t}", "-\t\t\t\tif (logStreams[2] != null) {", "-\t\t\t\t\tlogStreams[2].print(\"\"+stats.average+\"\\t\");", "-\t\t\t\t\tif (DEBUG) System.out.println(\"\t- average stored in log file.\\n\");", "-\t\t\t\t}", "-\t\t\t\tif (logStreams[3] != null) {", "-\t\t\t\t\tlogStreams[3].print(\"\"+stats.stddev+\"\\t\");", "-\t\t\t\t\tif (DEBUG) System.out.println(\"\t- stddev stored in log file.\\n\");", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tSystem.err.println(\"We should have stored Cpu Time for \"+this.scenario);", "-\t\t}", "-", "-\t\t// Close log", "-\t\tif (count == 0) {", "-\t\t\tfor (int i=0, ln=logStreams.length; i<ln; i++) {", "-\t\t\t\tif (logStreams[i] != null) {", "-\t\t\t\t\tif (haveTimes) logStreams[i].println();", "-\t\t\t\t\tlogStreams[i].close();", "-\t\t\t\t}", "+\t\t */", "+\t\tprotected void logPerfResult(PrintStream[] logStreams, int count) {", "+", "+\t\t\t// Perfs comment buffers", "+\t\t\tString[] comments = new String[2];", "+", "+\t\t\t// Log perf result", "+\t\t\tboolean haveTimes  = JdtCorePerformanceMeter.CPU_TIMES != null && JdtCorePerformanceMeter.ELAPSED_TIMES != null;", "+\t\t\tif (haveTimes) {", "+\t\t\t\tNumberFormat pFormat = NumberFormat.getPercentInstance();", "+\t\t\t\tpFormat.setMaximumFractionDigits(1);", "+\t\t\t\tNumberFormat dFormat = NumberFormat.getNumberInstance();", "+\t\t\t\tdFormat.setMaximumFractionDigits(2);", "+\t\t\t\ttry {", "+\t\t\t\t\t// Store CPU Time", "+\t\t\t\t\tJdtCorePerformanceMeter.Statistics cpuStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.CPU_TIMES.get(this.scenarioReadableName);", "+\t\t\t\t\tif (cpuStats != null) {", "+\t\t\t\t\t\tdouble percent = cpuStats.stddev/cpuStats.average;", "+\t\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "+\t\t\t\t\t\t\tif (logStreams[0] != null) logStreams[0].print(\"'\");", "+\t\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over 2%: \"+dFormat.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "+\t\t\t\t\t\t\tcomments[0] = \"stddev=\" + pFormat.format(percent);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (logStreams[0] != null) {", "+\t\t\t\t\t\t\tlogStreams[0].print(\"\"+cpuStats.average+\"\\t\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored CPU time!\");", "+\t\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\t}", "+\t\t\t\t\t// Store Elapsed time", "+\t\t\t\t\tJdtCorePerformanceMeter.Statistics elapsedStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.ELAPSED_TIMES.get(this.scenarioReadableName);", "+\t\t\t\t\tif (elapsedStats != null) {", "+\t\t\t\t\t\tdouble percent = elapsedStats.stddev/elapsedStats.average;", "+\t\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "+\t\t\t\t\t\t\tif (logStreams[1] != null) logStreams[1].print(\"'\");", "+\t\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over 2%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));", "+\t\t\t\t\t\t\tcomments[1] = \"stddev=\" + pFormat.format(percent);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (logStreams[1] != null) {", "+\t\t\t\t\t\t\tlogStreams[1].print(\"\"+elapsedStats.average+\"\\t\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored Elapsed time\");", "+\t\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\t}", "+\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t// Update comment buffers", "+\t\t\tStringBuffer[] scenarioComments = (StringBuffer[]) SCENARII_COMMENT.get(getClass());", "+\t\t\tif (scenarioComments == null) {", "+\t\t\t\tscenarioComments = new StringBuffer[LOG_TYPES.length];", "+\t\t\t\tSCENARII_COMMENT.put(getClass(), scenarioComments);", "+\t\t\t}", "+\t\t\tfor (int i=0, ln=LOG_TYPES.length; i<ln; i++) {", "+\t\t\t\tif (comments[i] != null) {", "+\t\t\t\t\tif (scenarioComments[i] == null) {", "+\t\t\t\t\t\tscenarioComments[i] = new StringBuffer();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tscenarioComments[i].append(' ');", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.scenarioComment == null) {", "+\t\t\t\t\t\tscenarioComments[i].append(\"[\"+TEST_POSITION+\"]\");", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tscenarioComments[i].append(this.scenarioComment);", "+\t\t\t\t\t}", "+\t\t\t\t\tscenarioComments[i].append(' ');", "+\t\t\t\t\tscenarioComments[i].append(comments[i]);", "+\t\t\t\t}\t", "+\t\t\t}", "+", "+\t\t\t// Close log", "+\t\t\tif (count == 0) {", "+\t\t\t\tfor (int i=0, ln=logStreams.length; i<ln; i++) {", "+\t\t\t\t\tif (logStreams[i] != null) {", "+\t\t\t\t\t\tif (haveTimes) {", "+\t\t\t\t\t\t\tif (comments[i] != null) {", "+\t\t\t\t\t\t\t\tlogStreams[i].print(scenarioComments[i].toString());", "+\t\t\t\t\t\t\t}\t", "+\t\t\t\t\t\t\tlogStreams[i].println();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlogStreams[i].close();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tTEST_POSITION = 0;", "+\t\t\t}", "+\t\t}"]}], "num": 66285}
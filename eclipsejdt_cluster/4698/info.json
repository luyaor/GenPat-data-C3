{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb31be70e93fce62c6e1c9a41517cc75", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae795540d16e1fd1e4a6f36e98a9bf99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "9f8931bf92b7966fbd8c101a448f79f7965fbbf9", "commitAfterChange": "3bf5bab95449ec256a601c2551910573083178b4", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate void selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier)", "signatureAfterChange": " \tprivate boolean selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier, char[] packageName)", "diff": ["-\tprivate void selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier){", "+\tprivate boolean selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier, char[] packageName){", "-\t\t\tthrow new SelectionNodeFound(typeDeclaration.binding, true);", "+\t\t\tchar[] qualifiedSourceName = null;", "+\t\t\t", "+\t\t\tTypeDeclaration enclosingType = typeDeclaration;", "+\t\t\twhile(enclosingType != null) {", "+\t\t\t\tqualifiedSourceName = CharOperation.concat(enclosingType.name, qualifiedSourceName, '.');", "+\t\t\t\tenclosingType = enclosingType.enclosingType;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif(!typeDeclaration.isInterface()) {", "+\t\t\t\tthis.requestor.acceptClass(", "+\t\t\t\t\tpackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\ttrue,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t} else {", "+\t\t\t\tthis.requestor.acceptInterface(", "+\t\t\t\t\tpackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\ttrue,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t}", "+\t\t\tthis.noProposal = false;", "+\t\t\treturn true;", "-\t\t\tselectDeclaration(memberTypes[i], assistIdentifier);", "+\t\t\tif(selectDeclaration(memberTypes[i], assistIdentifier, packageName))", "+\t\t\t\treturn true;", "-\t\t\t\tthrow new SelectionNodeFound(fields[i].binding, true);", "+\t\t\t\tchar[] qualifiedSourceName = null;", "+\t\t\t\t", "+\t\t\t\tTypeDeclaration enclosingType = typeDeclaration;", "+\t\t\t\twhile(enclosingType != null) {", "+\t\t\t\t\tqualifiedSourceName = CharOperation.concat(enclosingType.name, qualifiedSourceName, '.');", "+\t\t\t\t\tenclosingType = enclosingType.enclosingType;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.requestor.acceptField(", "+\t\t\t\t\tpackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tfields[i].name,", "+\t\t\t\t\ttrue,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\treturn true;", "-\t\t\t\tif(method.binding != null) {", "-\t\t\t\t\tthrow new SelectionNodeFound(method.binding, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tif(method.scope != null) {", "-\t\t\t\t\t\tthrow new SelectionNodeFound(new MethodBinding(method.modifiers, method.selector, null, null, null, method.scope.referenceType().binding), true);", "-\t\t\t\t\t}", "+\t\t\t\tchar[] qualifiedSourceName = null;", "+\t\t\t\t", "+\t\t\t\tTypeDeclaration enclosingType = typeDeclaration;", "+\t\t\t\twhile(enclosingType != null) {", "+\t\t\t\t\tqualifiedSourceName = CharOperation.concat(enclosingType.name, qualifiedSourceName, '.');", "+\t\t\t\t\tenclosingType = enclosingType.enclosingType;", "+\t\t\t\t", "+\t\t\t\tthis.requestor.acceptMethod(", "+\t\t\t\t\tpackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tmethod.selector,", "+\t\t\t\t\tnull, // SelectionRequestor does not need of parameters type for method declaration", "+\t\t\t\t\tnull, // SelectionRequestor does not need of parameters type for method declaration", "+\t\t\t\t\tmethod.isConstructor(),", "+\t\t\t\t\ttrue,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\treturn true;", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d48f4a2c89c7123ccfb53b61cec90320", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate boolean selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier, char[] packageName)", "signatureAfterChange": " \tprivate boolean selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier, char[] packageName)", "diff": ["+\t\t\t", "+\t\t\t", "+\t\t\tTypeParameter[] methodTypeParameters = method.typeParameters();", "+\t\t\tfor (int j = 0, length2 = methodTypeParameters == null ? 0 : methodTypeParameters.length; j < length2; j++){", "+\t\t\t\tTypeParameter methodTypeParameter = methodTypeParameters[j];", "+\t\t\t\t", "+\t\t\t\tif(methodTypeParameter.name == assistIdentifier) {", "+\t\t\t\t\tchar[] qualifiedSourceName = null;", "+\t\t\t\t\t", "+\t\t\t\t\tTypeDeclaration enclosingType = typeDeclaration;", "+\t\t\t\t\twhile(enclosingType != null) {", "+\t\t\t\t\t\tqualifiedSourceName = CharOperation.concat(enclosingType.name, qualifiedSourceName, '.');", "+\t\t\t\t\t\tenclosingType = enclosingType.enclosingType;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tthis.requestor.acceptMethodTypeParameter(", "+\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\t\tmethod.selector,", "+\t\t\t\t\t\tnull, // SelectionRequestor does not need of parameters type for declaration", "+\t\t\t\t\t\tnull, // SelectionRequestor does not need of parameters type for declaration", "+\t\t\t\t\t\tmethod.isConstructor(),", "+\t\t\t\t\t\tmethodTypeParameter.name,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t\t", "+\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t", "+\t\tTypeParameter[] typeParameters = typeDeclaration.typeParameters;", "+\t\tfor (int i = 0, length = typeParameters == null ? 0 : typeParameters.length; i < length; i++){", "+\t\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\t\tif(typeParameter.name == assistIdentifier) {", "+\t\t\t\tchar[] qualifiedSourceName = null;", "+\t\t\t\t", "+\t\t\t\tTypeDeclaration enclosingType = typeDeclaration;", "+\t\t\t\twhile(enclosingType != null) {", "+\t\t\t\t\tqualifiedSourceName = CharOperation.concat(enclosingType.name, qualifiedSourceName, '.');", "+\t\t\t\t\tenclosingType = enclosingType.enclosingType;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.requestor.acceptTypeParameter(", "+\t\t\t\t\tpackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\ttypeParameter.name,", "+\t\t\t\t\ttrue,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 4698}
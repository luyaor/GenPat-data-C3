{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d39055c24119b8dfae98f22441cc1e61", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b3da494dd61c73278949359cb1f80f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f01f87743cf608d26c7b7eb30e6a4638fa162dfc", "commitAfterChange": "ab90d16bd1c89fdc80a15ee5244e295e2979188b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["+\t\t\t\tint kind;", "+\t\t\t\tif (variable instanceof CompletionOnLocalName){", "+\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\tkind = LOCAL;", "+\t\t\t\t} else {", "+\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "+\t\t\t\t\tthis.completionToken = arg.realName;", "+\t\t\t\t\tkind = arg.isCatchArgument ? LOCAL : ARGUMENT;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tchar[][] alreadyDefinedName = computeAlreadyDefinedName((BlockScope)scope, variable);", "+\t\t\t\t", "+\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, alreadyDefinedName);", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t\tif (variable instanceof CompletionOnLocalName){", "-\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, LOCAL, variable.modifiers);", "-\t\t\t\t} else {", "-\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "-\t\t\t\t\tthis.completionToken = arg.realName;", "-\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "-\t\t\t\t}", "+\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, kind, variable.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d766a5099d66762a2e0e0b0ba58f08aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tthis.searchableEnvironment = (SearchableEnvironment)project.getSearchableNameEnvironment();", "-\t\tthis.nameLookup = project.getNameLookup();", "+\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside = null;", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside;", "-\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\ttry {", "-\t\t\tthis.hierarchyResolver = ", "-\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "-\t\t\tif (focusType != null) {", "-\t\t\t\tMember declaringMember = ((Member)focusType).getOuterMostLocalContext();", "-\t\t\t\tif (declaringMember == null) {", "-\t\t\t\t\t// top level or member type", "-\t\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "-\t\t\t\t\tif (!inProjectOfFocusType && project.getSearchableNameEnvironment().findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "-\t\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// local or anonymous type", "-\t\t\t\t\tOpenable openable;", "-\t\t\t\t\tif (declaringMember.isBinary()) {", "-\t\t\t\t\t\topenable = (Openable)declaringMember.getClassFile();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\topenable = (Openable)declaringMember.getCompilationUnit();", "-\t\t\t\t\t}", "-\t\t\t\t\tlocalTypes = new HashSet();", "-\t\t\t\t\tlocalTypes.add(openable.getPath().toString());", "-\t\t\t\t\tthis.hierarchyResolver.resolve(new Openable[] {openable}, localTypes, monitor);", "+\t\tSearchableEnvironment searchableEnvironment = (SearchableEnvironment)project.newSearchableNameEnvironment(unitsToLookInside);", "+\t\tthis.nameLookup = searchableEnvironment.nameLookup;", "+\t\tthis.hierarchyResolver = ", "+\t\t\tnew HierarchyResolver(searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "+\t\tif (focusType != null) {", "+\t\t\tMember declaringMember = ((Member)focusType).getOuterMostLocalContext();", "+\t\t\tif (declaringMember == null) {", "+\t\t\t\t// top level or member type", "+\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "+\t\t\t\tif (!inProjectOfFocusType && searchableEnvironment.findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "+\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t}", "-\t\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);", "-\t\t} finally {", "-\t\t\tif (inProjectOfFocusType) {", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);", "+\t\t\t} else {", "+\t\t\t\t// local or anonymous type", "+\t\t\t\tOpenable openable;", "+\t\t\t\tif (declaringMember.isBinary()) {", "+\t\t\t\t\topenable = (Openable)declaringMember.getClassFile();", "+\t\t\t\t} else {", "+\t\t\t\t\topenable = (Openable)declaringMember.getCompilationUnit();", "+\t\t\t\t}", "+\t\t\t\tlocalTypes = new HashSet();", "+\t\t\t\tlocalTypes.add(openable.getPath().toString());", "+\t\t\t\tthis.hierarchyResolver.resolve(new Openable[] {openable}, localTypes, monitor);", "+\t\t\t\treturn;", "+\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);"]}], "num": 62634}
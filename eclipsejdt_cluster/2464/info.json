{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3461517b2894448efc66475eb57383a0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a4ca43656fd7389077724caf1eb0f80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "commitAfterChange": "2005580e3a87de753a5cb3dcf29b780f4e6277a6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean checkTypeArgument(Scanner scanner) throws InvalidInputException", "signatureAfterChange": " \tprivate boolean checkTypeArgument(Scanner scanner)", "diff": ["-\tprivate boolean checkTypeArgument(Scanner scanner) throws InvalidInputException {", "+\tprivate boolean checkTypeArgument(Scanner scanner) {", "-\t\t\ttoken = scanner.getNextToken();", "-\t", "+\t\t\ttry {", "+\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fba031e0f88cf9dde1f2ecbeab64eba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "c10286277f9239e3088b8d188b41d6fe94e627af", "commitAfterChange": "0537003e571cfeb53f220f7f5e8c40a8ad99bcc6", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public final void pushLineSeparator() throws InvalidInputException", "signatureAfterChange": "\r public final void pushLineSeparator() throws InvalidInputException", "diff": ["-\t\tif (source[currentPosition] == '\\n') {\r", "-\t\t\t//System.out.println(\"look-ahead LF-\" + currentPosition);\t\t\t\r", "-\t\t\tlineEnds[linePtr] = currentPosition;\r", "-\t\t\tcurrentPosition++;\r", "-\t\t\twasAcr = false;\r", "-\t\t} else {\r", "+\t\ttry {\r", "+\t\t\tif (source[currentPosition] == '\\n') {\r", "+\t\t\t\t//System.out.println(\"look-ahead LF-\" + currentPosition);\t\t\t\r", "+\t\t\t\tlineEnds[linePtr] = currentPosition;\r", "+\t\t\t\tcurrentPosition++;\r", "+\t\t\t\twasAcr = false;\r", "+\t\t\t} else {\r", "+\t\t\t\twasAcr = true;\r", "+\t\t\t}\r", "+\t\t} catch(IndexOutOfBoundsException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "666fbcac7cdce9a62a7c09af532cbf5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "57f58e2a83bf12a567b63842cf84a5fc12572160", "commitAfterChange": "9674e3cb2b45f11c40bb76a8bdb3c8663d35e93e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \t\r \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "signatureAfterChange": "\r \t\r \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "diff": ["-\t\t\r", "-\t\tTypeDeclaration typeDeclaration = converter.buildTypeDeclaration(type, compilationUnit, compilationResult, problemReporter);\r", "-\t\t\r", "-\t\tif(compilationUnit != null) {\t\r", "-\t\t\t// build AST from snippet\r", "-\t\t\tInitializer fakeInitializer = parseSnippeInitializer(snippet, position, localVariableTypeNames, localVariableNames, localVariableModifiers, isStatic);\r", "-\t\t\t\r", "-\t\t\t// merge AST\r", "-\t\t\tFieldDeclaration[] oldFields = typeDeclaration.fields;\r", "-\t\t\tFieldDeclaration[] newFields = new FieldDeclaration[oldFields.length + 1];\r", "-\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);\r", "-\t\t\tnewFields[oldFields.length] = fakeInitializer;\r", "-\t\t\ttypeDeclaration.fields = newFields;\r", "-\t\t\tif(DEBUG) {\r", "-\t\t\t\tSystem.out.println(\"SNIPPET COMPLETION AST :\");\r", "-\t\t\t\tSystem.out.println(compilationUnit.toString());\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tif (compilationUnit.types != null) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tlookupEnvironment.buildTypeBindings(compilationUnit);\r", "-\t\t\t\r", "-\t\t\t\t\tif ((unitScope = compilationUnit.scope) != null) {\r", "-\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(compilationUnit, true);\r", "-\t\t\t\t\t\tcompilationUnit.scope.faultInTypes();\r", "-\t\t\t\t\t\tcompilationUnit.resolve();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} catch (CompletionNodeFound e) {\r", "-\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "-\t\t\t\t\tif (e.astNode != null) {\r", "-\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "-\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\ttry {\r", "+\t\t\tTypeDeclaration typeDeclaration = converter.buildTypeDeclaration(type, compilationUnit, compilationResult, problemReporter);\r", "+\t\t\r", "+\t\t\tif(typeDeclaration != null) {\t\r", "+\t\t\t\t// build AST from snippet\r", "+\t\t\t\tInitializer fakeInitializer = parseSnippeInitializer(snippet, position, localVariableTypeNames, localVariableNames, localVariableModifiers, isStatic);\r", "+\t\t\t\t\r", "+\t\t\t\t// merge AST\r", "+\t\t\t\tFieldDeclaration[] oldFields = typeDeclaration.fields;\r", "+\t\t\t\tFieldDeclaration[] newFields = new FieldDeclaration[oldFields.length + 1];\r", "+\t\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);\r", "+\t\t\t\tnewFields[oldFields.length] = fakeInitializer;\r", "+\t\t\t\ttypeDeclaration.fields = newFields;\r", "+\t\t\r", "+\t\t\t\tif(DEBUG) {\r", "+\t\t\t\t\tSystem.out.println(\"SNIPPET COMPLETION AST :\");\r", "+\t\t\t\t\tSystem.out.println(compilationUnit.toString());\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\tif (compilationUnit.types != null) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(compilationUnit);\r", "+\t\t\t\t\r", "+\t\t\t\t\t\tif ((unitScope = compilationUnit.scope) != null) {\r", "+\t\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(compilationUnit, true);\r", "+\t\t\t\t\t\t\tcompilationUnit.scope.faultInTypes();\r", "+\t\t\t\t\t\t\tcompilationUnit.resolve();\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (CompletionNodeFound e) {\r", "+\t\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "+\t\t\t\t\t\tif (e.astNode != null) {\r", "+\t\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "+\t\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\t\t\t\t\t}\r", "+\t\t} catch(JavaModelException e) {\r", "+\t\t\t// Do nothing\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5aa6ed6ce858af88f300de83a28c83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "d8bc0369a4febbf26184c3abdfb00924e5abcf8a", "commitAfterChange": "840a1f2f1e9b39c00b9c2e1286430c4050c7bac6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Object convertToJavaType(Object value, TypeBinding type, int kind[])", "signatureAfterChange": " \tprivate Object convertToJavaType(Object value, TypeBinding type, int kind[])", "diff": ["-\t\t\t\treturn ((Constant)value).intValue();", "+\t\t\t\ttry {", "+\t\t\t\t\treturn ((Constant)value).intValue();", "+\t\t\t\t} catch (ShouldNotImplement e) {", "+\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b352e8830c9e668bcd9d8bfa049163", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "6b044a21b8195fa1c92c30a7427837916da799a8", "commitAfterChange": "8855054f1b1724ed183606f994c99a2387743661", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "+\t\t\ttry {", "+\t\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "+\t\t\t} catch (NullPointerException e) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=304316", "+\t\t\t\treturn null;", "+\t\t\t}", "- \t\t} catch (MalformedURLException e) {", "- \t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));", "+\t\t} catch (MalformedURLException e) {", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cb0b9f3d10d1a54e7a52d104688dcb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ef26de670ead73cc3e16060217656a0a8919f1d5", "commitAfterChange": "9579b84ceaab0473eb674994db1f38b5ee7b5115", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "diff": ["-\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);\r", "+\t\t\ttry {\r", "+\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t// non java resource\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);\r", "+\t\t\t\t\t// invalid project\r", "-\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd0ae6a7e00bf98d7c4e7b5e7cf4bec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "726a798d36524f8c9a905565a81f0a3797b5162f", "commitAfterChange": "e925e4f453288f04c2f64d6eaf5afcd7f24f7bf6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["-\tif (signature.equals(Signature.SIG_INT)) {", "-\t\tconstant = new Integer(constantSource);", "-\t} else if (signature.equals(Signature.SIG_SHORT)) {", "-\t\tconstant = new Short(constantSource);", "-\t} else if (signature.equals(Signature.SIG_BYTE)) {", "-\t\tconstant = new Byte(constantSource);", "-\t} else if (signature.equals(Signature.SIG_BOOLEAN)) {", "-\t\tconstant = Boolean.valueOf(constantSource);", "-\t} else if (signature.equals(Signature.SIG_CHAR)) {", "-\t\tif (constantSourceChars.length != 3) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tconstant = new Character(constantSourceChars[1]);", "-\t} else if (signature.equals(Signature.SIG_DOUBLE)) {", "-\t\tconstant = new Double(constantSource);", "-\t} else if (signature.equals(Signature.SIG_FLOAT)) {", "-\t\tconstant = new Float(constantSource);", "-\t} else if (signature.equals(Signature.SIG_LONG)) {", "-\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "-\t\t\tif (index != -1) {", "-\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "-\t\t\t} else {", "-\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\ttry {", "+\t\tif (signature.equals(Signature.SIG_INT)) {", "+\t\t\tconstant = new Integer(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_SHORT)) {", "+\t\t\tconstant = new Short(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_BYTE)) {", "+\t\t\tconstant = new Byte(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_BOOLEAN)) {", "+\t\t\tconstant = Boolean.valueOf(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_CHAR)) {", "+\t\t\tif (constantSourceChars.length != 3) {", "+\t\t\t\treturn null;", "-\t\t} else {", "-\t\t\tconstant = new Long(constantSource);", "+\t\t\tconstant = new Character(constantSourceChars[1]);", "+\t\t} else if (signature.equals(Signature.SIG_DOUBLE)) {", "+\t\t\tconstant = new Double(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_FLOAT)) {", "+\t\t\tconstant = new Float(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_LONG)) {", "+\t\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "+\t\t\t\t} else {", "+\t\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tconstant = new Long(constantSource);", "+\t\t\t}", "+\t\t} else if (signature.equals(\"QString;\")) {//$NON-NLS-1$", "+\t\t\tconstant = constantSource;", "-\t} else if (signature.equals(\"QString;\")) {//$NON-NLS-1$", "-\t\tconstant = constantSource;", "+\t} catch (NumberFormatException e) {", "+\t\t// not a parsable constant", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaaed9ec67a8691fa1dc75c284ef1ce4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/swingui/TestSelector.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TestSelector(Frame parent, TestCollector testCollector)", "signatureAfterChange": "  \tpublic TestSelector(Frame parent, TestCollector testCollector)", "diff": ["-\t\tsetLocationRelativeTo(parent);", "+\t\t// setLocationRelativeTo only exists in 1.4", "+\t\ttry {", "+\t\t\tsetLocationRelativeTo(parent);", "+\t\t} catch (NoSuchMethodError e) {", "+\t\t\tcenterWindow(this);", "+\t\t}"]}], "num": 2464}
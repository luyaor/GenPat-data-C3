{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9709facab332ceb01b9ecf8d32e728ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261ec1e59b7e5f4970ce14e3d4a33ca2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void reset()", "signatureAfterChange": " public void reset()", "diff": ["-\tfor (int i = this.uniqueArrayBindings.length; --i >= 0;)", "-\t\tthis.uniqueArrayBindings[i] = null;", "-\tthis.uniqueArrayBindings[0] = new ArrayBinding[50]; // start off the most common 1 dimension array @ 50", "+\tfor (int i = this.uniqueArrayBindings.length; --i >= 0;) {", "+\t\tArrayBinding[] arrayBindings = this.uniqueArrayBindings[i];", "+\t\tif (arrayBindings != null)", "+\t\t\tfor (int j = arrayBindings.length; --j >= 0;)", "+\t\t\t\tarrayBindings[j] = null;", "+\t}", "+\tthis.uniqueParameterizedTypeBindings = new SimpleLookupTable(3);", "+\tthis.uniqueRawTypeBindings = new SimpleLookupTable(3);", "+\tthis.uniqueWildcardBindings = new SimpleLookupTable(3);", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc8a7d113a0b19837e34aa6ef1e165d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fea4095ba208aac8a9915b5d68b0792beec39b62", "commitAfterChange": "c128054dedc80ef992da5c72e846a5d5eb550aee", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\tboolean checkArgsForRawTypes = false;", "+\t\t// in 1.5 mode or higher, we're expecting that an exact match with more than 2 args is not that common", "+\t\t// so save some time by not calling findExactMatch & use that time to handle the more common cases with 1 or 2 args.", "+\t\tswitch (argumentTypes.length) {", "+\t\t\tcase 0 : break;", "+\t\t\tcase 1 :", "+\t\t\tcase 2 :", "+\t\t\t\tcheckArgsForRawTypes = compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "+\t\t\tdefault :", "+\t\t\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5)", "+\t\t\t\t\treturn null; // skip find exact match since its less likely to find a match & raw type check is not worth it", "+\t\t}", "-\t\t\t", "+\t\t\tif (checkArgsForRawTypes)", "+\t\t\t\tfor (int i = argumentTypes.length; --i >= 0;)", "+\t\t\t\t\tif (argumentTypes[i].isRawType())", "+\t\t\t\t\t\treturn null;"]}], "num": 33111}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c5385061f8d6b67400bb45472d382e2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2142025c889e31a0c2650f73b910b617", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "bf0bb24ad2aa11936f786fa3a21e4724052c7919", "commitAfterChange": "3f4c816813820db669d197557cb718b17b2bf721", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseHref() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'h', 'r', 'e', 'f'}, false) &&", "+\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), HREF_TAG, false) &&", "-\t\t\t\t\t\t\t// Skip all characters after string literal until closing '>' (see bug 68726)", "-\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "-\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "-\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\t\t\t\t\t\t// Signal syntax error", "-\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "-\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.currentTokenType == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\tconsumeToken(); // update line end as new lines are allowed in URL description", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\twhile (this.index < this.javadocEnd) { // main loop to search for the </a> pattern", "+\t\t\t\t\t\t\t\t// Skip all characters after string literal until closing '>' (see bug 68726)", "+\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // consume token without updating line end", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tconsumeToken(); // update line end as new lines are allowed in URL description", "+\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "-\t\t\t\t\t\t\t\tif (readChar() == '/') {", "+\t\t\t\t\t\t\t\tcurrentChar = readChar();", "+\t\t\t\t\t\t\t\t// search for the </a> pattern and store last char read", "+\t\t\t\t\t\t\t\tif (currentChar == '/') {", "-\t\t\t\t\t\t\t\t\tif (currentChar == 'a' || currentChar == 'A') {", "-\t\t\t\t\t\t\t\t\t\tif (readChar() == '>') {", "-\t\t\t\t\t\t\t\t\t\t\t// Valid href", "-\t\t\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\tif (currentChar == 'a' || currentChar =='A') {", "+\t\t\t\t\t\t\t\t\t\tcurrentChar = readChar();", "+\t\t\t\t\t\t\t\t\t\tif (currentChar == '>') {", "+\t\t\t\t\t\t\t\t\t\t\treturn true; // valid href", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// search for invalid char in tags", "+\t\t\t\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n' || currentChar == '\\t' || currentChar == ' ') {", "+\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f74c32d8ad9959b9db8a3dc9c6603a0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "41c514d67e1bf2f005d0df7a8e731d17945a9b63", "commitAfterChange": "646c3199ccdcd10932c0b6c854e2ffd3d0892f37", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseHref() throws InvalidInputException", "diff": ["-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\tchar currentChar = readChar();", "-\t\tif (currentChar == 'a' || currentChar == 'A') {", "-\t\t\tthis.scanner.currentPosition = this.index;", "-\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\tconsumeToken();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), HREF_TAG, false) &&", "-\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "+\t\tboolean skipComments = this.scanner.skipComments;", "+\t\tthis.scanner.skipComments = true;", "+\t\ttry {", "+\t\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\t\tchar currentChar = readChar();", "+\t\t\tif (currentChar == 'a' || currentChar == 'A') {", "+\t\t\t\tthis.scanner.currentPosition = this.index;", "+\t\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), HREF_TAG, false) &&", "+\t\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "-\t\t\t\t\t\t\twhile (this.index < this.javadocEnd) { // main loop to search for the </a> pattern", "-\t\t\t\t\t\t\t\t// Skip all characters after string literal until closing '>' (see bug 68726)", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "-\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "-\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "-\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "-\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "+\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\twhile (this.index < this.javadocEnd) { // main loop to search for the </a> pattern", "+\t\t\t\t\t\t\t\t\t// Skip all characters after string literal until closing '>' (see bug 68726)", "+\t\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // consume token without updating line end", "-\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // consume token without updating line end", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tconsumeToken(); // update line end as new lines are allowed in URL description", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "-\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "-\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "-\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "-\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\tconsumeToken(); // update line end as new lines are allowed in URL description", "+\t\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\tcurrentChar = readChar();", "-\t\t\t\t\t\t\t\t// search for the </a> pattern and store last char read", "-\t\t\t\t\t\t\t\tif (currentChar == '/') {", "+\t\t\t\t\t\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\t\tif (currentChar == 'a' || currentChar =='A') {", "+\t\t\t\t\t\t\t\t\t// search for the </a> pattern and store last char read", "+\t\t\t\t\t\t\t\t\tif (currentChar == '/') {", "-\t\t\t\t\t\t\t\t\t\tif (currentChar == '>') {", "-\t\t\t\t\t\t\t\t\t\t\treturn true; // valid href", "+\t\t\t\t\t\t\t\t\t\tif (currentChar == 'a' || currentChar =='A') {", "+\t\t\t\t\t\t\t\t\t\t\tcurrentChar = readChar();", "+\t\t\t\t\t\t\t\t\t\t\tif (currentChar == '>') {", "+\t\t\t\t\t\t\t\t\t\t\t\treturn true; // valid href", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// search for invalid char in tags", "-\t\t\t\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n' || currentChar == '\\t' || currentChar == ' ') {", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t// search for invalid char in tags", "+\t\t\t\t\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n' || currentChar == '\\t' || currentChar == ' ') {", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (InvalidInputException ex) {", "+\t\t\t\t\t\t// Do nothing as we want to keep positions for error message", "-\t\t\t\t} catch (InvalidInputException ex) {", "-\t\t\t\t\t// Do nothing as we want to keep positions for error message", "+\t\t\t// Reset position: we want to rescan last token", "+\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\tthis.currentTokenType = -1;", "+\t\t\t// Signal syntax error", "+\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t}", "-\t\t// Reset position: we want to rescan last token", "-\t\tthis.index = this.tokenPreviousPosition;", "-\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\tthis.currentTokenType = -1;", "-\t\t// Signal syntax error", "-\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "-\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\tfinally {", "+\t\t\tthis.scanner.skipComments = skipComments;"]}], "num": 7658}
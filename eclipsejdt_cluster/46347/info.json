{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a054fd034e593e982c6705fb3c3811c8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f1c6f9b86817768dc6f24b84d142444", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic String getEmptyLines(int linesNumber)", "signatureAfterChange": "  \tpublic String getEmptyLines(int linesNumber)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tString emptyLines;", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tif (this.indentEmptyLines) printIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\tif (this.indentEmptyLines) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\tfor (int i = 0; i < linesNumber; i++) {", "+\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "+\t\t\t\t}", "+\t\t\t\temptyLines = this.tempBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\temptyLines = getNewLineString(linesNumber);", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tif (this.indentEmptyLines) printIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\tif (this.indentEmptyLines) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\tfor (int i = 0; i < linesNumber; i++) {", "+\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "+\t\t\t\t}", "+\t\t\t\temptyLines = this.tempBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\temptyLines = getNewLineString(linesNumber);", "-\t\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "-\t\t\t\tif (this.indentEmptyLines) printIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\tif (this.indentEmptyLines) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "+\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "+\t\t\t\t}", "+\t\t\t\temptyLines = this.tempBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\temptyLines = getNewLineString(realNewLineNumber);", "-\t\treturn String.valueOf(buffer);", "+\t\treturn emptyLines;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f7fee0583470618d29be39e4ee80617", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tprivate void printNewLinesBeforeDisablingComment()", "signatureAfterChange": " \tprivate void printNewLinesBeforeDisablingComment()", "diff": ["-\t\t\tStringBuffer indentationBuffer = new StringBuffer();", "+\t\t\tString indentationString;", "-\t\t\t\tprintIndentationIfNecessary(indentationBuffer);", "+\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\tindentationString = this.tempBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\tindentationString = Util.EMPTY_STRING;", "-\t\t\t\tthis.edits[this.editsIndex-1] = new OptimizedReplaceEdit(beginningOfLine, offset+length-beginningOfLine, indentationBuffer.toString());", "+\t\t\t\tthis.edits[this.editsIndex-1] = new OptimizedReplaceEdit(beginningOfLine, offset+length-beginningOfLine, indentationString);", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer(replacement.substring(0, start));", "-\t\t\t\t\tbuffer.append(indentationBuffer);", "-\t\t\t\t\tthis.edits[this.editsIndex-1] = new OptimizedReplaceEdit(offset, length, buffer.toString());", "+\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\tthis.tempBuffer.append(replacement.substring(0, start));", "+\t\t\t\t\tif (indentationString != Util.EMPTY_STRING) {", "+\t\t\t\t\t\tthis.tempBuffer.append(indentationString);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.edits[this.editsIndex-1] = new OptimizedReplaceEdit(offset, length, this.tempBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d079cfa9b678638226a87e69c492e5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "signatureAfterChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.javadocBlockRefBuffer.setLength(0);", "-\t\t\t\t\t\t\t\tspacePosition = buffer.length();", "+\t\t\t\t\t\t\t\tspacePosition = this.javadocBlockRefBuffer.length();", "-\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tthis.javadocBlockRefBuffer.append(' ');", "-\t\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "-\t\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t    \t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t    \tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t    \tthis.tempBuffer.append(this.commentIndentation);", "-\t\t\t\t\t\t    \tnewLineString = newLineBuffer.substring(0, newLineBuffer.length()-1); // remove last space as buffer will be inserted before a space", "+\t\t\t\t\t\t    \tnewLineString = this.tempBuffer.substring(0, this.tempBuffer.length()-1); // remove last space as buffer will be inserted before a space", "-\t\t\t\t\t\t\tthis.column = firstColumn + buffer.length() - spacePosition - 1;", "-\t\t\t\t\t\t\tbuffer.insert(spacePosition, newLineString);", "+\t\t\t\t\t\t\tthis.column = firstColumn + this.javadocBlockRefBuffer.length() - spacePosition - 1;", "+\t\t\t\t\t\t\tthis.javadocBlockRefBuffer.insert(spacePosition, newLineString);", "-\t\t\t\t\t\tbuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "+\t\t\t\t\t\tthis.javadocBlockRefBuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "-\t\t    addReplaceEdit(block.tagEnd+1, reference.sourceEnd, buffer.toString());", "+\t\t    addReplaceEdit(block.tagEnd+1, reference.sourceEnd, this.javadocBlockRefBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fab86979d53d78a5605df6afb67a63b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprivate void printJavadocGapLinesForImmutableBlock(FormatJavadocBlock block)", "signatureAfterChange": " \tprivate void printJavadocGapLinesForImmutableBlock(FormatJavadocBlock block)", "diff": ["-\t\tStringBuffer buffer = null;", "+\t\tString newLineString = null;", "-\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\tif (newLineString == null) {", "-\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, newLineString);", "-\t\t\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, buffer.toString());", "+\t\t\t\t\t\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, newLineString);", "-\t\t\tif (buffer == null) {", "-\t\t\t\tbuffer = new StringBuffer();", "+\t\t\tif (newLineString == null) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, buffer.toString());", "+\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, newLineString);", "-\t\t\tif (buffer == null) {", "-\t\t\t\tbuffer = new StringBuffer();", "+\t\t\tif (newLineString == null) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, buffer.toString());", "+\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, newLineString);"]}], "num": 46347}
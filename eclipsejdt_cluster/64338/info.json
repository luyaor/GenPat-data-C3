{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4ef6e778d1297f36caae57fce95fcc2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f225f6a7ca919eae4aec05e166765c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic IPackageFragment findPackageFragment(IPath path)", "signatureAfterChange": "\r public IPackageFragment findPackageFragment(IPath path)", "diff": ["-\t */\r", "-\tpublic IPackageFragment findPackageFragment(IPath path) {\r", "-\t\tif (!path.isAbsolute()) {\r", "-\t\t\tthrow new IllegalArgumentException(\"Path must be absolute\");\r", "-\t\t}\r", "-\t\tIResource possibleFragment = workspace.getRoot().findMember(path);\r", "-\t\tif (possibleFragment == null) {\r", "-\t\t\t//external jar\r", "-\t\t\tfor (int i = 0; i < fPackageFragmentRoots.length; i++) {\r", "-\t\t\t\tIPackageFragmentRoot root = fPackageFragmentRoots[i];\r", "-\t\t\t\tif (!root.isExternal()) {\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t}\r", "-\t\t\t\tIPath rootPath = root.getPath();\r", "-\t\t\t\tint matchingCount = rootPath.matchingFirstSegments(path);\r", "-\t\t\t\tif (matchingCount != 0) {\r", "-\t\t\t\t\tString name = path.toOSString();\r", "-\t\t\t\t\t// + 1 is for the File.separatorChar\r", "-\t\t\t\t\tname = name.substring(rootPath.toOSString().length() + 1, name.length());\r", "-\t\t\t\t\tname = name.replace(File.separatorChar, '.');\r", "-\t\t\t\t\tIJavaElement[] list = null;\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tlist = root.getChildren();\r", "-\t\t\t\t\t} catch (JavaModelException npe) {\r", "-\t\t\t\t\t\tcontinue; // the package fragment root is not present;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tint elementCount = list.length;\r", "-\t\t\t\t\tfor (int j = 0; j < elementCount; j++) {\r", "-\t\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment) list[j];\r", "-\t\t\t\t\t\tif (nameMatches(name, packageFragment, false)) {\r", "-\t\t\t\t\t\t\tif (packageFragment.exists())\r", "-\t\t\t\t\t\t\t\treturn packageFragment;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tIJavaElement fromFactory = JavaCore.create(possibleFragment);\r", "-\t\t\tif (fromFactory == null) {\r", "-\t\t\t\treturn null;\r", "-\t\t\t}\r", "-\t\t\tif (fromFactory instanceof IPackageFragment) {\r", "-\t\t\t\treturn (IPackageFragment) fromFactory;\r", "-\t\t\t} else\r", "-\t\t\t\tif (fromFactory instanceof IJavaProject) {\r", "-\t\t\t\t\t// default package in a default root\r", "-\t\t\t\t\tJavaProject project = (JavaProject) fromFactory;\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tIClasspathEntry entry = project.getClasspathEntryFor(path);\r", "-\t\t\t\t\t\tif (entry != null) {\r", "-\t\t\t\t\t\t\tIPackageFragmentRoot root =\r", "-\t\t\t\t\t\t\t\tproject.getPackageFragmentRoot(project.getUnderlyingResource());\r", "-\t\t\t\t\t\t\tIPackageFragment[] pkgs =\r", "-\t\t\t\t\t\t\t\t(IPackageFragment[]) fPackageFragments.get(\r", "-\t\t\t\t\t\t\t\t\tIPackageFragment.DEFAULT_PACKAGE_NAME);\r", "-\t\t\t\t\t\t\tif (pkgs == null) {\r", "-\t\t\t\t\t\t\t\treturn null;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tfor (int i = 0; i < pkgs.length; i++) {\r", "-\t\t\t\t\t\t\t\tif (pkgs[i].getParent().equals(root)) {\r", "-\t\t\t\t\t\t\t\t\treturn pkgs[i];\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\treturn null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t}\r", "-\t\treturn null;\r", "+ */\r", "+public IPackageFragment findPackageFragment(IPath path) {\r", "+\tif (!path.isAbsolute()) {\r", "+\t\tthrow new IllegalArgumentException(Util.bind(\"path.mustBeAbsolute\"/*nonNLS*/));\r", "+\tIResource possibleFragment = workspace.getRoot().findMember(path);\r", "+\tif (possibleFragment == null) {\r", "+\t\t//external jar\r", "+\t\t\tIPackageFragmentRoot root = fPackageFragmentRoots[i];\r", "+\t\t\tif (!root.isExternal()) {\r", "+\t\t\t\tcontinue;\r", "+\t\t\tIPath rootPath = root.getPath();\r", "+\t\t\tint matchingCount = rootPath.matchingFirstSegments(path);\r", "+\t\t\tif (matchingCount != 0) {\r", "+\t\t\t\tString name = path.toOSString();\r", "+\t\t\t\t// + 1 is for the File.separatorChar\r", "+\t\t\t\tname = name.substring(rootPath.toOSString().length() + 1, name.length());\r", "+\t\t\t\tname = name.replace(File.separatorChar, '.');\r", "+\t\t\t\t\tif (nameMatches(name, packageFragment, false)) {\r", "+\t\t\t\t\t\tif (packageFragment.exists())\r", "+\t\t\t\t\t\t\treturn packageFragment;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tIJavaElement fromFactory = JavaCore.create(possibleFragment);\r", "+\t\tif (fromFactory == null) {\r", "+\t\t\treturn null;\r", "+\t\t}\r", "+\t\tif (fromFactory instanceof IPackageFragment) {\r", "+\t\t\treturn (IPackageFragment) fromFactory;\r", "+\t\t} else\r", "+\t\t\tif (fromFactory instanceof IJavaProject) {\r", "+\t\t\t\t// default package in a default root\r", "+\t\t\t\tJavaProject project = (JavaProject) fromFactory;\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tIClasspathEntry entry = project.getClasspathEntryFor(path);\r", "+\t\t\t\t\tif (entry != null) {\r", "+\t\t\t\t\t\tIPackageFragmentRoot root =\r", "+\t\t\t\t\t\t\tproject.getPackageFragmentRoot(project.getUnderlyingResource());\r", "+\t\t\t\t\t\tIPackageFragment[] pkgs = (IPackageFragment[]) fPackageFragments.get(IPackageFragment.DEFAULT_PACKAGE_NAME);\r", "+\t\t\t\t\t\tif (pkgs == null) {\r", "+\t\t\t\t\t\t\treturn null;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tfor (int i = 0; i < pkgs.length; i++) {\r", "+\t\t\t\t\t\t\tif (pkgs[i].getParent().equals(root)) {\r", "+\t\t\t\t\t\t\t\treturn pkgs[i];\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\treturn null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t}\r", "+\treturn null;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e25b1b25275014996c22ce794d137ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprotected Openable[] createElements(IResource resource)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType)", "diff": ["-\tprotected Openable[] createElements(IResource resource) {\r", "-\r", "-\t\tif (resource == null)\r", "-\t\t\treturn null;\r", "-\t\tString extension = resource.getFileExtension();\r", "-\t\textension = extension == null ? null : extension.toLowerCase();\r", "-\t\tif (\"jar\".equals(extension) //$NON-NLS-1$\r", "-\t\t\t|| \"zip\".equals(extension)) { //$NON-NLS-1$ \r", "-\t\t\tIJavaProject[] projects = null;\r", "-\t\t\ttry {\r", "-\t\t\t\tprojects =\r", "-\t\t\t\t\tJavaModelManager.getJavaModel(resource.getWorkspace()).getJavaProjects();\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\treturn null;\r", "-\t\t\t}\r", "-\t\t\tArrayList jars = new ArrayList();\r", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "-\t\t\t\tIJavaProject project = projects[i];\r", "-\t\t\t\t// Create a jar package fragment root only if on the classpath\r", "-\t\t\t\tIPath resourcePath = resource.getFullPath();\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tIClasspathEntry[] entries = project.getResolvedClasspath(true);\r", "-\t\t\t\t\tfor (int j = 0, length2 = entries.length; j < length2; j++) {\r", "-\t\t\t\t\t\tIClasspathEntry entry = entries[j];\r", "-\t\t\t\t\t\tIPath rootPath = entry.getPath();\r", "-\t\t\t\t\t\tif (rootPath.equals(resourcePath)) {\r", "-\t\t\t\t\t\t\tjars.add(project.getPackageFragmentRoot((IFile) resource));\r", "-\t\t\t\t\t\t}\r", "+\tprotected Openable createElement(IResource resource, int elementType) {\r", "+\t\tif (resource == null) return null;\r", "+\t\t\r", "+\t\t// find the element that encloses the resource\r", "+\t\tIPath path = resource.getFullPath();\r", "+\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\r", "+\t\tIJavaElement element = null;\r", "+\t\tif (this.currentElement != null) {\r", "+\t\t\tswitch (elementType) {\r", "+\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\t\telement = JavaCore.create((IProject)resource);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\t\telement = this.currentElement.getJavaProject().getPackageFragmentRoot(resource);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t\tIPackageFragmentRoot root = this.currentElement.getPackageFragmentRoot();\r", "+\t\t\t\t\tif (root != null && !Util.conflictsWithOutputLocation(path, (JavaProject)root.getJavaProject())) {\r", "+\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(root.getPath().segmentCount());\r", "+\t\t\t\t\t\tString pkg = Util.packageName(pkgPath);\r", "+\t\t\t\t\t\tif (pkg == null) return null;\r", "+\t\t\t\t\t\telement = root.getPackageFragment(pkg);\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tint size = jars.size();\r", "-\t\t\tif (size == 0)\r", "-\t\t\t\treturn null;\r", "-\t\t\tOpenable[] result = new Openable[size];\r", "-\t\t\tjars.toArray(result);\r", "-\t\t\treturn result;\r", "-\t\t} else {\r", "-\t\t\tOpenable element = (Openable) JavaCore.create(resource);\r", "-\t\t\tif (element == null) {\r", "-\t\t\t\treturn null;\r", "-\t\t\t} else {\r", "-\t\t\t\treturn new Openable[] { element };\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "+\t\t\t\t\tIPackageFragment pkgFragment = null;\r", "+\t\t\t\t\tswitch (this.currentElement.getElementType()) {\r", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "+\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (pkgFragment != null) {\r", "+\t\t\t\t\t\tString fileName = path.lastSegment();\r", "+\t\t\t\t\t\tif (!Util.isValidCompilationUnitName(fileName)) return null;\r", "+\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t\tpkgFragment = null;\r", "+\t\t\t\t\tswitch (this.currentElement.getElementType()) {\r", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "+\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (pkgFragment != null) {\r", "+\t\t\t\t\t\tString fileName = path.lastSegment();\r", "+\t\t\t\t\t\tif (!Util.isValidClassFileName(fileName)) return null;\r", "+\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\tif (element == null) {\r", "+\t\t\telement = JavaCore.create(resource);\r", "+\t\t}\r", "+\t\tthis.currentElement = (Openable)element;\r", "+\t\treturn this.currentElement;\r"]}], "num": 64338}
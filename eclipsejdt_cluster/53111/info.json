{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86c65057511853ba8a5788f581174881", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27df6e59175b8eba7de6a496943c6b1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "c87413f1c3fa777cce7cb1df06542ffdf2ba70ba", "commitAfterChange": "dbb59802bd05ea277b4706afb85d6b75d5bdff2a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<char[]> sourceForFilesWithMissingType)", "signatureAfterChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal int round)", "diff": ["-\t\t\tfinal List<AnnotationProcessorFactory> factories,", "+\t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories,", "-\t\t\tfinal List<char[]> sourceForFilesWithMissingType)", "+\t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType,", "+\t\t\tfinal int round)", "-\t\t\tprocessorEnv.getAllAnnotationTypes(file2AnnotationDecls);\t", "-\t\taddAllFilesWithMissingTypeError(filesWithMissingType, sourceForFilesWithMissingType, processorEnv);", "+\t\t\tprocessorEnv.getAllAnnotationTypes(file2AnnotationDecls);", "+\t\taddAllFilesWithMissingTypeError(filesWithMissingType, unitsForFilesWithMissingType, processorEnv);", "+\t\t", "-\t\tfor( int i=0, size=factories.size(); i<size; i++ ){", "-\t\t\tfinal AnnotationProcessorFactory factory = factories.get(i);", "+\t\tfor( Map.Entry<AnnotationProcessorFactory, FactoryPath.Attributes> entry : factories.entrySet() ){", "+\t\t\tAnnotationProcessorFactory factory = entry.getKey();", "-\t\t\t\tboolean batch = isBatchFactory(factory);", "+\t\t\t\tboolean batch = entry.getValue().runInBatchMode();", "-\t\t// Batch processors only get executed on a full/clean build.", "-\t\tif( !batchFactory2Annos.isEmpty() ){", "+\t\t// Batch processors only get executed on a full/clean build and only get called once", "+\t\t// within one round APT dispatch.", "+\t\tif( !batchFactory2Annos.isEmpty() && round == 0){", "-\t\t\tfor( int i=0, size=factories.size(); i<size; i++ ){", "-\t\t\t\tfinal AnnotationProcessorFactory factory = factories.get(i);", "+\t\t\tfor(AnnotationProcessorFactory factory : factories.keySet() ){\t\t\t", "-\t\t\t\tfor( int i=0, size=factories.size(); i<size; i++ ){", "-\t\t\t\t\tfinal AnnotationProcessorFactory factory = factories.get(i);", "+\t\t\t\tfor(AnnotationProcessorFactory factory : factories.keySet() ){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f87af00b27f70a8fdfeab6f4e59c52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "758f55a5a64497d7398f91effe575e974d834411", "commitAfterChange": "a920298c522cfd65cad97a6c929cd34516c3baed", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r public void replace(int position, int length, char[] text)", "signatureAfterChange": "\r public void replace(int position, int length, char[] text)", "diff": ["-\t\tif (text == null) {\r", "-\t\t\ttext = new char[0];\r", "-\t\t}\r", "+\t\tint textLength = text == null ? 0 : text.length;\r", "-\t\t\tadjustGap(position + length, text.length - length);\r", "+\t\t\tmoveAndResizeGap(position + length, textLength - length);\r", "-\t\t\tint min = Math.min(text.length, length);\r", "-\t\t\tfor (int i = position, j = 0; i < position + min; i++, j++)\r", "-\t\t\t\tthis.contents[i] = text[j];\r", "-\t\t\tif (length > text.length) {\r", "+\t\t\tint min = Math.min(textLength, length);\r", "+\t\t\tif (min > 0) {\r", "+\t\t\t\tSystem.arraycopy(text, 0, this.contents, position, min);\r", "+\t\t\t}\r", "+\t\t\tif (length > textLength) {\r", "-\t\t\t\tthis.gapStart -= (length - text.length);\r", "-\t\t\t} else\r", "-\t\t\t\tif (text.length > length) {\r", "-\t\t\t\t\t// shrink gap\r", "-\t\t\t\t\tthis.gapStart += (text.length - length);\r", "-\t\t\t\t\tfor (int i = length; i < text.length; i++)\r", "-\t\t\t\t\t\tthis.contents[position + i] = text[i];\r", "-\t\t\t\t}\r", "+\t\t\t\tthis.gapStart -= length - textLength;\r", "+\t\t\t} else if (textLength > length) {\r", "+\t\t\t\t// shrink gap\r", "+\t\t\t\tthis.gapStart += textLength - length;\r", "+\t\t\t\tSystem.arraycopy(text, 0, this.contents, position, textLength);\r", "+\t\t\t}\r", "-\t\tif (text.length > 0) {\r", "+\t\tif (textLength > 0) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c6bca9e6565395e75ea670e829026dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariableLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\tint offset = -1;", "+\tint length = -1;", "-\t\tint offset = reference.sourceStart;", "-\t\tSearchMatch match = locator.newLocalVariableReferenceMatch(element, accuracy, offset, reference.sourceEnd-offset+1, reference);", "-\t\tlocator.report(match);", "+\t\toffset = reference.sourceStart;", "+\t\tlength = reference.sourceEnd-offset+1;", "-\t\tint start = (int) (sourcePosition >>> 32);", "-\t\tint end = (int) sourcePosition;", "-\t\tSearchMatch match = locator.newLocalVariableReferenceMatch(element, accuracy, start, end-start+1, reference);", "-\t\tlocator.report(match);", "+\t\toffset = (int) (sourcePosition >>> 32);", "+\t\tlength = ((int) sourcePosition) - offset +1;", "-\t\tint offset = localVariable.nameStart;", "-\t\tSearchMatch match = locator.newLocalVariableReferenceMatch(localVariable, accuracy, offset, localVariable.nameEnd-offset+1, reference);", "+\t\toffset = localVariable.nameStart;", "+\t\tlength = localVariable.nameEnd-offset+1;", "+\t\telement = localVariable;", "+\t}", "+\tif (offset >= 0) {", "+\t\tmatch = locator.newLocalVariableReferenceMatch(element, accuracy, offset, length, reference);"]}], "num": 53111}
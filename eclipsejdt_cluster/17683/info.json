{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d16139ec9919b8ea9cfafd8a99de8e91", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e448d5d2aacbde40ec95da10dd496fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 547, "methodNumberAfterChange": 546, "signatureBeforeChange": " \tpublic void testEnhancedForStatement()", "signatureAfterChange": " \tpublic void testEnhancedForStatement()", "diff": ["-\t\tassertTrue(x.getType() != null);", "-\t\tassertTrue(x.getType().getParent() == x);", "-\t\tassertTrue(x.getName() != null);", "-\t\tassertTrue(x.getName().getParent() == x);", "-\t\tassertTrue(x.getName().isDeclaration() == true);", "+\t\tassertTrue(x.getParameter() != null);", "+\t\tassertTrue(x.getParameter().getParent() == x);", "-\t\tgenericPropertyTest(x, new Property(\"Type\", true, Type.class) { //$NON-NLS-1$", "+\t\tgenericPropertyTest(x, new Property(\"Parameter\", true, SingleVariableDeclaration.class) { //$NON-NLS-1$", "-\t\t\t\tSimpleType result = targetAst.newSimpleType(", "-\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\tSingleVariableDeclaration result = targetAst.newSingleVariableDeclaration();", "-\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\tCatchClause parent = targetAst.newCatchClause();", "+\t\t\t\t\tparent.setException(result);", "-\t\t\t\treturn x.getType();", "+\t\t\t\treturn x.getParameter();", "-\t\t\t\tx.setType((Type) value);", "-\t\t\t}", "-\t\t});", "-\t\t", "-\t\tgenericPropertyTest(x, new Property(\"Name\", true, SimpleName.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getName();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setName((SimpleName) value);", "+\t\t\t\tx.setParameter((SingleVariableDeclaration) value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1861f6d5cda1a2e2395247b0636c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 305, "methodNumberAfterChange": 305, "signatureBeforeChange": "\t \t \tpublic void testMethodInvocation()", "signatureAfterChange": "\t \t \tpublic void testMethodInvocation()", "diff": ["+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tassertTrue(x.typeArguments().isEmpty());", "+\t\t}", "+\t\t\t}", "+\t\t});", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.typeArguments(),", "+\t\t\t  new Property(\"TypeArguments\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tType result = targetAst.newSimpleType(targetAst.newSimpleName(\"X\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tgenericPropertyTest(x, new Property(\"Name\", true, SimpleName.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode get() {", "+\t\t\t\treturn x.getName();", "+\t\t\t}", "+\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\tx.setName((SimpleName) value);"]}], "num": 17683}
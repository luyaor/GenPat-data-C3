{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb32d962dd981d21a28864c9e2b99460", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d19f358a19185e53d6cd2e1efff1fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "f6b98e81e084c7fc5756b6873d78549cc1ce9d4c", "commitAfterChange": "334acc099e45b6ce9ec3bc9c1d31c4c1fb234636", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public String getTypeQualifiedName(char enclosingTypeSeparator)", "signatureAfterChange": " public String getTypeQualifiedName(char enclosingTypeSeparator)", "diff": ["-\tIType declaringType = this.getDeclaringType();", "-\tif (declaringType == null) {", "-\t\tString classFileName = this.getClassFile().getElementName();", "-\t\tif (classFileName.indexOf('$') == -1) {", "-\t\t\t// top level class file: name of type is same as name of class file", "-\t\t\treturn this.name;", "-\t\t} else {", "-\t\t\t// anonymous or local class file", "-\t\t\treturn classFileName.substring(0, classFileName.lastIndexOf('.')); // remove .class", "-\t\t}", "-\t} else {", "-\t\treturn ", "-\t\t\tdeclaringType.getTypeQualifiedName(enclosingTypeSeparator)", "-\t\t\t+ enclosingTypeSeparator", "-\t\t\t+ this.name;", "+\ttry {", "+\t\treturn getTypeQualifiedName(enclosingTypeSeparator, false/*don't show parameters*/);", "+\t} catch (JavaModelException e) {", "+\t\t// exception thrown only when showing parameters", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ca9bce69dd6d1ab3361b6059f82eb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "f874c6b5077c159b72bb8e4b8aad8ed303fb1894", "commitAfterChange": "71c4acdd0905e065690b5a7def2363cd736fd9d9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public boolean verifyClassFiles(String sourceFilePath, String className, String expectedSuccessOutputString, String[] classpaths, String[] programArguments, String[] vmArguments)", "signatureAfterChange": " public boolean verifyClassFiles(String sourceFilePath, String className, String expectedSuccessOutputString, String[] classpaths, String[] programArguments, String[] vmArguments)", "diff": ["+\treturn verifyClassFiles(sourceFilePath, className, expectedSuccessOutputString, \"\", classpaths, programArguments, vmArguments);", "+}", "-\treturn this.checkBuffers(this.errorBuffer.toString(), this.outputBuffer.toString(), sourceFilePath, expectedSuccessOutputString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51482574c96588735d4f14eab6d7b4ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "signatureAfterChange": " public void accept(ICompilationUnit sourceUnit)", "diff": ["-\t */", "-\tpublic void accept(ICompilationUnit sourceUnit) {", "-\t\t// Switch the current policy and compilation result for this unit to the requested one.", "-\t\tCompilationResult unitResult =", "-\t\t\tnew CompilationResult(sourceUnit, totalUnits, totalUnits, this.options.maxProblemsPerUnit);", "-\t\ttry {", "-\t\t\t// diet parsing for large collection of unit", "-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tMatchingNodeSet originalMatchSet = this.parser.matchSet;", "-\t\t\t\tthis.parser.matchSet = new MatchingNodeSet(this);", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnit, unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnit, unitResult);", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tthis.parser.matchSet = originalMatchSet;", "-\t\t\t}", "-\t\t", "-\t\t\t// initial type binding creation", "-\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "-\t\t\tthis.addCompilationUnit(sourceUnit, parsedUnit);", "-\t", "-\t\t\t// binding resolution", "-\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit);", "-\t\t} catch (AbortCompilationUnit e) {", "-\t\t\t// at this point, currentCompilationUnitResult may not be sourceUnit, but some other", "-\t\t\t// one requested further along to resolve sourceUnit.", "-\t\t\tif (unitResult.compilationUnit == sourceUnit) { // only report once", "-\t\t\t\t//requestor.acceptResult(unitResult.tagAsAccepted());", "-\t\t\t} else {", "-\t\t\t\tthrow e; // want to abort enclosing request to compile", "-\t\t\t}", "-\t\t}", "-\t}", "+ */", "+public void accept(ICompilationUnit sourceUnit) {", "+\t// Switch the current policy and compilation result for this unit to the requested one.", "+\tCompilationResult unitResult = new CompilationResult(sourceUnit, 1, 1, this.options.maxProblemsPerUnit);", "+\ttry {", "+\t\tCompilationUnitDeclaration parsedUnit = basicParser().dietParse(sourceUnit, unitResult);", "+\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "+\t\tlookupEnvironment.completeTypeBindings(parsedUnit);", "+\t} catch (AbortCompilationUnit e) {", "+\t\t// at this point, currentCompilationUnitResult may not be sourceUnit, but some other", "+\t\t// one requested further along to resolve sourceUnit.", "+\t\tif (unitResult.compilationUnit == sourceUnit) { // only report once", "+\t\t\t//requestor.acceptResult(unitResult.tagAsAccepted());", "+\t\t\tthrow e; // want to abort enclosing request to compile", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0fe8cd110e2c6f225a6e4738900ea9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void initializeImportCaches()", "signatureAfterChange": "  \tpublic void initializeImportCaches()", "diff": ["+\t\tif (this.currentPackageName == null) {", "+\t\t\tinitializePackageCache();", "+\t\t}", "+\t\t", "-", "-\t\tif (this.unitScope.fPackage != null) {", "-\t\t\tthis.currentPackageName = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "-\t\t} else if (this.unitScope.referenceContext != null &&", "-\t\t\t\tthis.unitScope.referenceContext.currentPackage != null) {", "-\t\t\tthis.currentPackageName = CharOperation.concatWith(this.unitScope.referenceContext.currentPackage.tokens, '.');", "-\t\t} else {", "-\t\t\tthis.currentPackageName = CharOperation.NO_CHAR;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e647dc443b1610121156bed1b42edc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void testPerfIndexing() throws CoreException", "signatureAfterChange": " \tpublic void testPerfIndexing() throws CoreException", "diff": ["+\t */", "-\t\ttagAsSummary(\"Indexing\", Dimension.CPU_TIME);", "-\t\tINDEX_MANAGER.discardJobs(null); // discard all previous index jobs", "-\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "+\t\ttagAsSummary(\"Search>Indexing\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "+//\t\tINDEX_MANAGER.discardJobs(null); // discard all previous index jobs", "+\t\t// Wait for indexing end (we use initial indexing as warm-up)", "+\t\twaitUntilIndexesReady();", "+//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "+//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "+\t\t", "+\t\t// Remove all previous indexing", "+\t\tINDEX_MANAGER.removeIndexFamily(new Path(\"\"));", "+\t\tINDEX_MANAGER.reset();", "+\t\t", "+\t\t// Restart brand new indexing", "-\t\tINDEX_MANAGER.enable();", "-\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "+//\t\tINDEX_MANAGER.enable();", "+\t\t", "+\t\t// Wait for indexing end", "+\t\twaitUntilIndexesReady();", "+//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "+//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "+\t\t", "+\t\t// Commit measures", "-\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "+\t\twaitUntilIndexesReady();", "+//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "+//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e84662a5e750d37d61f22bc0e1509223", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeParameter.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void resolve(ClassScope scope)", "signatureAfterChange": " \t \tpublic void resolve(ClassScope scope)", "diff": ["-\tpublic void resolve(ClassScope scope) {", "-\t\t\tScope outerScope = scope.parent;", "-\t\t\tBinding existingType = outerScope.getBinding(this.name, Binding.TYPE, this, false);", "-\t\t\tif (existingType != null && this.binding != existingType && existingType.isValidBinding()) {", "+\t", "+\tpublic void resolve(ClassScope scope) {", "+\t\tinternalResolve(scope, scope.enclosingSourceType().isStatic());", "+\t}"]}], "num": 46052}
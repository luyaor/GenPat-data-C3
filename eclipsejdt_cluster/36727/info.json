{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ad9c3bc45f2c4f490544eaf582b70b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2296da74dfc3c5984d0027c46c78b2c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathInitializerTests.java", "commitBeforeChange": "fe46c42d584fc9df798276778c11a2ce2f79d8c4", "commitAfterChange": "8904ea4393baa4ec97ffdacde82d6f35bb8add7c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic DefaultContainerInitializer(String[] values)", "signatureAfterChange": " \tpublic DefaultContainerInitializer(String[] values)", "diff": ["-\t\t\t\tnew IClasspathContainer() {", "-\t\t\t\t\tpublic IClasspathEntry[] getClasspathEntries() {", "-\t\t\t\t\t\tint length = libPaths.length;", "-\t\t\t\t\t\tIClasspathEntry[] entries = new IClasspathEntry[length];", "-\t\t\t\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\t\t\t    IPath path = new Path(new String(libPaths[j]));", "-\t\t\t\t\t\t    if (path.segmentCount() == 1) {", "-\t\t\t\t\t\t        entries[j] = JavaCore.newProjectEntry(path);", "-\t\t\t\t\t\t    } else {", "-\t\t\t\t\t\t\t\tentries[j] = JavaCore.newLibraryEntry(path, null, null);", "-\t\t\t\t\t\t    }", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn entries;", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic String getDescription() {", "-\t\t\t\t\t\treturn \"Test container\";", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic int getKind() {", "-\t\t\t\t\t\treturn IClasspathContainer.K_APPLICATION;", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic IPath getPath() {", "-\t\t\t\t\t\treturn new Path(\"org.eclipse.jdt.core.tests.model.TEST_CONTAINER\");", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tnewContainer(libPaths)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5879b63734e9b1bd990c0eb05615c110", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java", "commitBeforeChange": "78489a1112068ad791184216a4e6b3439ea59739", "commitAfterChange": "44562039ccc53dd5301ff720c35ac750589a8412", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramPackageNames, char[][] paramTypeNames)", "signatureAfterChange": " \tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramTypeNames)", "diff": ["+\t}", "+\tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramTypeNames){", "+\t\tif(paramTypeNames == null || declaringTypeName == null) return null;", "+\t\tchar[] tName = CharOperation.concat(declaringTypePackageName,declaringTypeName,'.');", "+\t\t// default parameters name", "+\t\t\tparameterNames = createDefaultParameterNames(length);", "-\t", "-\tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramPackageNames, char[][] paramTypeNames){", "-\t\tif(paramTypeNames == null) return null;", "-\t\t", "-\t\tchar[][] parameterNames = null;", "-\t\tint length = paramTypeNames.length;", "-\t\t", "-\t\tchar[] tName = CharOperation.concat(declaringTypePackageName,declaringTypeName,'.');", "-\t\tObject cachedType = this.completionEngine.typeCache.get(tName);", "-\t\t", "-\t\tIType type = null;", "-\t\tif(cachedType != null) {", "-\t\t\tif(cachedType != NO_ATTACHED_SOURCE && cachedType instanceof BinaryType) {", "-\t\t\t\ttype = (BinaryType)cachedType;", "-\t\t\t}", "-\t\t} else { ", "-\t\t\t// TODO (david) shouldn't it be NameLookup.ACCEPT_ALL ?", "-\t\t\ttype = this.nameLookup.findType(new String(tName), false, NameLookup.ACCEPT_CLASSES & NameLookup.ACCEPT_INTERFACES);", "-\t\t\tif(type instanceof BinaryType){", "-\t\t\t\tif(((BinaryType)type).getSourceMapper() != null) {", "-\t\t\t\t\tthis.completionEngine.typeCache.put(tName, type);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.completionEngine.typeCache.put(tName, NO_ATTACHED_SOURCE);", "-\t\t\t\t\ttype = null;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\ttype = null;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif(type != null) {", "-\t\t\tString[] args = new String[length];", "-\t\t\tfor(int i = 0;\ti< length ; i++){", "-\t\t\t\tchar[] parameterType = CharOperation.concat(paramPackageNames[i],paramTypeNames[i],'.');", "-\t\t\t\targs[i] = Signature.createTypeSignature(parameterType,true);", "-\t\t\t}", "-\t\t\tIMethod method = type.getMethod(new String(selector),args);", "-\t\t\ttry{", "-\t\t\t\tparameterNames = new char[length][];", "-\t\t\t\tString[] params = method.getParameterNames();", "-\t\t\t\tfor(int i = 0;\ti< length ; i++){", "-\t\t\t\t\tparameterNames[i] = params[i].toCharArray();", "-\t\t\t\t}", "-\t\t\t} catch(JavaModelException e){", "-\t\t\t\tparameterNames = null;", "-\t\t\t}", "-\t\t}", "-\t\t// default parameters name", "-\t\tif(parameterNames == null) {", "-\t\t\tswitch (length) {", "-\t\t\t\tcase 0 :", "-\t\t\t\t\tparameterNames = new char[length][];", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tparameterNames = ARGS1;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 2 :", "-\t\t\t\t\tparameterNames = ARGS2;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 3 :", "-\t\t\t\t\tparameterNames = ARGS3;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 4 :", "-\t\t\t\t\tparameterNames = ARGS4;", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tparameterNames = new char[length][];", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\t", "-\t\t}", "-\t\treturn parameterNames;"]}], "num": 36727}
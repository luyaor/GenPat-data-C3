{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "550ef5fc17e4423db0bce3c36e0f8a31", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0235018bef89cf371f64e2f72965290a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 131, "signatureBeforeChange": "  \tprivate void addToResult(IClasspathEntry rawEntry, IClasspathEntry resolvedEntry, ResolvedClasspath result, LinkedHashSet resolvedEntries, ExternalFoldersManager externalFoldersManager)", "signatureAfterChange": "  \tprivate void addToResult(IClasspathEntry rawEntry, IClasspathEntry resolvedEntry, ResolvedClasspath result, \t\t\tLinkedHashSet resolvedEntries, ExternalFoldersManager externalFoldersManager, \t\t\tMap oldChainedEntriesMap, boolean addAsChainedEntry)", "diff": ["-\tprivate void addToResult(IClasspathEntry rawEntry, IClasspathEntry resolvedEntry, ResolvedClasspath result, LinkedHashSet resolvedEntries, ExternalFoldersManager externalFoldersManager) {", "+\tprivate void addToResult(IClasspathEntry rawEntry, IClasspathEntry resolvedEntry, ResolvedClasspath result,", "+\t\t\tLinkedHashSet resolvedEntries, ExternalFoldersManager externalFoldersManager,", "+\t\t\tMap oldChainedEntriesMap, boolean addAsChainedEntry) {", "+", "+\t\t// If it's already been resolved, do not add to resolvedEntries", "+\t\t\tif (addAsChainedEntry) {", "+\t\t\t\tIClasspathEntry chainedEntry = null;", "+\t\t\t\tif (rawEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+", "+\t\t\t\t\tchainedEntry = (ClasspathEntry) oldChainedEntriesMap.get(resolvedPath);", "+\t\t\t\t\tif (chainedEntry != null) {", "+\t\t\t\t\t\t// This is required to keep the attributes if any added by the user in", "+\t\t\t\t\t\t// the previous session such as source attachment path etc.", "+\t\t\t\t\t\tcopyFromOldChainedEntry((ClasspathEntry) resolvedEntry, (ClasspathEntry) chainedEntry);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206cf456a109b4277bc29f17f2530428", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "01183640e0035cac2c0d8aba45f61a8be154617f", "commitAfterChange": "75a1e994888330022017b20e200adbe75bfe0c3e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected Control createContents(Composite parent)", "signatureAfterChange": " \t \t@Override \tprotected Control createContents(Composite parent)", "diff": ["+\t@Override", "+\t\tLabel description= new Label(composite, SWT.WRAP);", "+\t\tdescription.setText(Messages.AptConfigurationBlock_classpathAddedAutomaticallyNote); ", "+\t\tGridData gd= new GridData(GridData.HORIZONTAL_ALIGN_FILL);", "+\t\tgd.horizontalSpan= 2;", "+\t\tgd.widthHint= fPixelConverter.convertWidthInCharsToPixels(60);", "+\t\tdescription.setLayoutData(gd);", "+", "+\t\t", "+\t\tvalidateSettings(null, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "780a390d824486df6aad1301f491f922", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/FactoryLoaderTests.java", "commitBeforeChange": "7177897be6073a1c35ee9a465aa5f0559da1bff1", "commitAfterChange": "3ef396e7cc3e0323aa7fad284fecd31681852465", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void setUp() throws Exception", "signatureAfterChange": "  \tpublic void setUp() throws Exception", "diff": ["+\t\t// This file will be locked until GC takes care of unloading the", "+\t\t// annotation processor classes, so we can't delete it ourselves.", "+\t\t_extJar.deleteOnExit();", "+\t\t", "+\t\t// Create a classpath variable for the same jar file, so we can", "+\t\t// refer to it that way.", "+\t\tFile canonicalJar = _extJar.getCanonicalFile();", "+\t\tIPath jarDir = new Path( canonicalJar.getParent() );", "+\t\tString extJarName = canonicalJar.getName();", "+\t\tIPath varPath = new Path( TEMPJARDIR_CPVAR );", "+\t\t_extVarJar = varPath.append( extJarName );", "+\t\tJavaCore.setClasspathVariable( TEMPJARDIR_CPVAR, jarDir, null );", "-}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f795db178bff5fcf5586b3cfabadeb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "74d118e989117eba0163f0f707314197db0891af", "commitAfterChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " boolean hasNonNullDefault()", "signatureAfterChange": " boolean hasNonNullDefaultFor(int location, boolean useTypeAnnotations)", "diff": ["-boolean hasNonNullDefault() {", "+// pre: null annotation analysis is enabled", "+boolean hasNonNullDefaultFor(int location, boolean useTypeAnnotations) {", "-\t\tif ((currentType.tagBits & TagBits.AnnotationNonNullByDefault) != 0)", "-\t\t\treturn true;", "-\t\tif ((currentType.tagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0)", "-\t\t\treturn false;", "+\t\tif (useTypeAnnotations) {", "+\t\t\tint nullDefault = ((ReferenceBinding)currentType.original()).getNullDefault();", "+\t\t\tif (nullDefault != 0)", "+\t\t\t\treturn (nullDefault & location) != 0;", "+\t\t} else {", "+\t\t\tif ((currentType.tagBits & TagBits.AnnotationNonNullByDefault) != 0)", "+\t\t\t\treturn true;", "+\t\t\tif ((currentType.tagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0)", "+\t\t\t\treturn false;", "+\t\t}", "-\treturn this.getPackage().defaultNullness == NONNULL_BY_DEFAULT;", "+\tif (useTypeAnnotations)", "+\t\treturn (this.getPackage().defaultNullness & location) != 0;", "+\telse", "+\t\treturn this.getPackage().defaultNullness == NONNULL_BY_DEFAULT;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d5937ef74c8a05bb50133184dd8a53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "0c9f31ea2ca6f747fc91ab022c7efc052d0b1c5a", "commitAfterChange": "8c64bffbde25c824dd307f6fe5deea636346d85b", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": "  \tprotected void setUpProjectCompliance(IJavaProject javaProject, String compliance) throws JavaModelException, IOException", "signatureAfterChange": "  \tprotected void setUpProjectCompliance(IJavaProject javaProject, String compliance) throws JavaModelException, IOException", "diff": ["+\t\t// At 1.8 compliance, replace JCL15_LIB with JCL18_LIB, JCL15_SRC with JCL18_SRC", "+\t\tIPath jcl5Lib = new Path(\"JCL15_LIB\");", "+\t\tIPath jcl8Lib = new Path(\"JCL18_LIB\");", "+\t\tboolean compliance18Plus = compliance.charAt(2) > '7';", "-\t\t\tif (entry.getPath().equals(jclLib)) {", "+\t\t\tfinal IPath path = entry.getPath();", "+\t\t\tif (path.equals(jclLib) || (compliance18Plus && path.equals(jcl5Lib)) || (!compliance18Plus && path.equals(jcl8Lib))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c91a45ae6be4f6f969f6d99dc3c23dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchParticipant.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic final void scheduleDocumentIndexing(SearchDocument document, IPath indexLocation)", "signatureAfterChange": " \tpublic final void scheduleDocumentIndexing(SearchDocument document, IPath indexLocation)", "diff": ["-\t\tJavaModelManager.getJavaModelManager().getIndexManager().scheduleDocumentIndexing(document, indexLocation, this);", "+\t\tIPath documentPath = new Path(document.getPath());", "+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "+\t\tIResource resource = root.findMember(documentPath);", "+\t\tIPath containerPath = resource == null ? documentPath : resource.getProject().getFullPath();", "+\t\tJavaModelManager.getJavaModelManager().getIndexManager().scheduleDocumentIndexing(document, containerPath, indexLocation.toOSString(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17d58af724f257e99a1738ec5a2cf84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "613782ce0a459b2b9d97830b644944724bd8bd6d", "commitAfterChange": "38391f1424c2a310d61708561599c0ef2e593103", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void setupConverterJCL() throws IOException", "signatureAfterChange": " \tpublic void setupConverterJCL() throws IOException", "diff": ["+\t\t\t} else {", "+\t\t\t\t//copy the two files to the JCL directory", "+\t\t\t\tjava.io.File resourceJCLMin =", "+\t\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMin.jar\"); //$NON-NLS-1$", "+\t\t\t\tcopy(resourceJCLMin, jclMin);", "+\t\t\t\tjava.io.File resourceJCLMinsrc =", "+\t\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMinsrc.zip\"); //$NON-NLS-1$", "+\t\t\t\tcopy(resourceJCLMinsrc, jclMinsrc);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t//check that the two files, jclMin.jar and jclMinsrc.zip are present", "+\t\t\t//copy either file that is missing or less recent than the one in workspace", "+\t\t\tjava.io.File resourceJCLMin =", "+\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMin.jar\"); //$NON-NLS-1$", "+\t\t\tif (jclMin.lastModified() < resourceJCLMin.lastModified()) {", "+\t\t\t\tcopy(resourceJCLMin, jclMin);", "+\t\t\t}", "+\t\t\tjava.io.File resourceJCLMinsrc =", "+\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMinsrc.zip\"); //$NON-NLS-1$", "+\t\t\tif (jclMinsrc.lastModified() < resourceJCLMinsrc.lastModified()) {", "+\t\t\t\tcopy(resourceJCLMinsrc, jclMinsrc);", "-\t\t//copy the two files to the JCL directory", "-\t\tjava.io.File resourceJCLMin =", "-\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMin.jar\"); //$NON-NLS-1$", "-\t\tcopy(resourceJCLMin, jclMin);", "-\t\tjava.io.File resourceJCLMinsrc =", "-\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMinsrc.zip\"); //$NON-NLS-1$", "-\t\tcopy(resourceJCLMinsrc, jclMinsrc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66ec3db13d6ad6e948493c19210e903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "d59541eb58af959f3a88200970206c2ba05248de", "commitAfterChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "diff": ["-//\t\tstopOnFailure = false;", "+\t\tstopOnFailure = false;", "-\t\tassertTrue(!stop || failures.size()==0);", "+\t\tif (stop && failures.size() > 0) {", "+\t\t\tString expected = new String(source, docComment.getStartPosition(), docComment.getLength());", "+\t\t\tASTConverterJavadocFlattener flattener = new ASTConverterJavadocFlattener(expected);", "+\t\t\tdocComment.accept(flattener);", "+\t\t\tassertEquals(\"Unexpected errors while verifying javadoc comment positions!\", expected, flattener.getResult());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f266d8d229353045e205b258a1110d53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tprivate boolean isOnClasspath(IPath path)", "signatureAfterChange": " \tpublic boolean isOnClasspath(IResource resource)", "diff": ["-\tprivate boolean isOnClasspath(IPath path) {", "+\t */", "+\tpublic boolean isOnClasspath(IResource resource) {", "+\t\tIPath exactPath = resource.getFullPath();", "+\t\tIPath path = exactPath;", "+\t\t", "+\t\t// ensure that folders are only excluded if all of their children are excluded", "+\t\tboolean isFolderPath = resource.getType() == IResource.FOLDER;", "+\t\t", "-\t\t\tif (entry.getPath().isPrefixOf(path) ", "-\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\tIPath entryPath = entry.getPath();", "+\t\t\tif (entryPath.equals(exactPath)) { // package fragment roots must match exactly entry pathes (no exclusion there)", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif (entryPath.isPrefixOf(path) ", "+\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), isFolderPath)) {", "-\t}"]}], "num": 16077}
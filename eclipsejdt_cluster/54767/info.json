{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c563154e0be74c373d91441342d13ce8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f917eab49f97ebca659905826ec306", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "7a2852034423623a0b78746d6961458a4511c8df", "commitAfterChange": "fe228284fc27f2126f4ffab1f41e7aadc13051c1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["+    \tif (jproj == null) {", "+    \t\t// there are no programmatically set options at the workspace level", "+    \t\treturn options;", "+    \t}", "-    \t\toptions.put(\"classpath\",classpathSB.toString()); //$NON-NLS-1$", "-    \t\toptions.put(\"sourcepath\", sourcepathSB.toString()); //$NON-NLS-1$", "+    \t\toptions.put(\"-classpath\",classpathSB.toString()); //$NON-NLS-1$", "+    \t\toptions.put(\"-sourcepath\", sourcepathSB.toString()); //$NON-NLS-1$", "+    \t\toptions.put(\"-s\", getString(jproj, AptPreferenceConstants.APT_GENSRCDIR)); //$NON-NLS-1$", "+    \t\tString binDir = jproj.getOutputLocation().toString();", "+    \t\toptions.put(\"-d\", binDir); //$NON-NLS-1$", "+    \t\tString target = jproj.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true);", "+    \t\toptions.put(\"-target\", target); //$NON-NLS-1$", "+    \t\tString source = jproj.getOption(JavaCore.COMPILER_SOURCE, true);", "+    \t\toptions.put(\"-source\", source); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960511711b92936ea925e41588bcf0fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "01d995488d5e309c6b243da146c63894a6df881d", "commitAfterChange": "13bbdd97c6c86aba0f70693f850c3de86bece79b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \t\tStringBuilder classpathSB = new StringBuilder();", "-    \t\tStringBuilder sourcepathSB = new StringBuilder();", "-    \t\tboolean firstCP = true;", "-    \t\tboolean firstSP = true;", "+    \t\tSet<String> classpath = new LinkedHashSet<String>();", "+    \t\tSet<String> sourcepath = new LinkedHashSet<String>();", "+    \t\t", "+    \t\t// For projects on the classpath, loops can exist; need to make sure we ", "+    \t\t// don't loop forever", "+    \t\tSet<IJavaProject> projectsProcessed = new HashSet<IJavaProject>();", "+    \t\tprojectsProcessed.add(jproj);", "-\t    \t\t\tif (firstCP) {", "-\t    \t\t\t\tfirstCP = false;", "-\t    \t\t\t}", "-\t    \t\t\telse {", "-\t    \t\t\t\tclasspathSB.append(File.pathSeparatorChar);", "-\t    \t\t\t}", "-\t    \t\t\t\tclasspathSB.append(cpPath.toOSString());", "+\t    \t\t\t\tclasspath.add(cpPath.toOSString());", "-\t    \t\t\t\tclasspathSB.append(res.getLocation().toOSString());", "+\t    \t\t\t\tclasspath.add(res.getLocation().toOSString());", "-    \t\t\t\tif (firstSP) {", "-    \t\t\t\t\tfirstSP = false;", "-    \t\t\t\t}", "-    \t\t\t\telse {", "-    \t\t\t\t\tsourcepathSB.append(File.pathSeparatorChar);", "-    \t\t\t\t}", "+    \t\t\t\tsourcepath.add(srcPath.toOSString());", "+    \t\t\t}", "+    \t\t\telse if (kind == IClasspathEntry.CPE_PROJECT) {", "+    \t\t\t\t// Add the dependent project's build path and classpath to ours", "+    \t\t\t\tIPath otherProjectPath = entry.getPath();", "+    \t\t\t\tIProject otherProject = root.getProject(otherProjectPath.segment(0));", "-    \t\t\t\tsourcepathSB.append(srcPath.toOSString());", "+    \t\t\t\t// Note: JavaCore.create() is safe, even if the project is null -- ", "+    \t\t\t\t// in that case, we get null back", "+    \t\t\t\tIJavaProject otherJavaProject = JavaCore.create(otherProject);", "+    \t\t\t\t", "+    \t\t\t\t// If it doesn't exist, ignore it", "+    \t\t\t\tif (otherJavaProject != null) {", "+    \t\t\t\t\taddProjectClasspath(root, otherJavaProject, projectsProcessed, classpath);", "+    \t\t\t\t}", "-    \t\toptions.put(\"-classpath\",classpathSB.toString()); //$NON-NLS-1$    \t\t", "-    \t\toptions.put(\"-sourcepath\", sourcepathSB.toString()); //$NON-NLS-1$", "+    \t\toptions.put(\"-classpath\",convertPathCollectionToString(classpath)); //$NON-NLS-1$    \t\t", "+    \t\toptions.put(\"-sourcepath\", convertPathCollectionToString(sourcepath)); //$NON-NLS-1$"]}], "num": 54767}
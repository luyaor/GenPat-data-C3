{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db688c3791636e6217021ed4d687c623", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04163752b251ddb22d90cd3dbd64f8b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java", "commitBeforeChange": "2344c6f119f16ef1a15c1ba0cc48698ff4c5a21a", "commitAfterChange": "25d70eac1f59d17fd35f15454804710ecb835662", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-public static Test suite() {", "-\ttestClasses.add(ComplianceDiagnoseTest.class);", "+public static Test suite() {", "+\treturn getTestSuite(true);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "066fe6066cb7aefe4de3f9ac3538ab38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "f8e9cc8d760d40e7aca97ebb627c5ab02392d804", "commitAfterChange": "78ca28be54dd37f4936afd7f9f84bc9cf69d2754", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\t\t// cmd.createArgument().setValue(\"-verbose\");", "+\t\t\t// cmd.createArgument().setValue(\"-verbose\"); //$NON-NLS-1$", "-\t\tboolean didSpecifyTarget = false;", "-\t\t\tdidSpecifyTarget = true;", "-\t\t\tif (this.target.equals(CompilerOptions.VERSION_1_1)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "-\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_2)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "-\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_5)", "-\t\t\t\t\t|| this.target.equals(\"5.0\") //$NON-NLS-1$", "-\t\t\t\t\t|| this.target.equals(\"5\")) { //$NON-NLS-1$", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\t\tthis.target = CompilerOptions.VERSION_1_5;", "-\t\t\t} else {", "-\t            this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.unknownTarget\", this.target), Project.MSG_WARN); //$NON-NLS-1$", "-\t\t\t}", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, this.target);", "-\t\tboolean didSpecifySource = false;", "-        \tdidSpecifySource = true;", "-        \tif (source.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\t} else if (source.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "-\t\t\t} else if (source.equals(CompilerOptions.VERSION_1_5)", "-\t\t\t\t\t|| source.equals(\"5.0\") //$NON-NLS-1$", "-\t\t\t\t\t|| source.equals(\"5\")) { //$NON-NLS-1$", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\t\tsource = CompilerOptions.VERSION_1_5;", "-\t\t\t} else {", "-\t            this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.unknownSource\", source), Project.MSG_WARN); //$NON-NLS-1$", "-\t\t\t}", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Source, source);", "-        ", "-        if (!didSpecifySource && !didSpecifyTarget) {", "-\t\t\tif (javaVersion.equals(JavaEnvUtils.JAVA_1_0)", "-\t\t\t\t\t|| javaVersion.equals(JavaEnvUtils.JAVA_1_1)", "-\t\t\t\t\t|| javaVersion.equals(JavaEnvUtils.JAVA_1_2)", "-\t\t\t\t\t|| javaVersion.equals(JavaEnvUtils.JAVA_1_3)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-\t\t\t} else if (javaVersion.equals(JavaEnvUtils.JAVA_1_4)) {", "-\t\t\t\tif (this.target != null) {", "-\t\t\t\t\tif (this.target.equals(CompilerOptions.VERSION_1_1)) {", "-\t\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-\t\t\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_5)) {", "-\t\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t}", "-\t\t\t} else if (javaVersion.equals(JavaEnvUtils.JAVA_1_5)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t} else {", "-\t            this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.unknownVmVersion\", javaVersion), Project.MSG_WARN); //$NON-NLS-1$", "-\t\t\t}", "-        } else {", "-        \t// set the compliance according to the target and source", "-        \tif (CompilerOptions.VERSION_1_3.equals(source)) {", "-        \t\tif (CompilerOptions.versionToJdkLevel(javaVersion) <= ClassFileConstants.JDK1_3) {", "-    \t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-        \t\t} else {", "-        \t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-        \t\t}", "-        \t} else if (CompilerOptions.VERSION_1_4.equals(source)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(source)) {", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t}", "-        }", "-\t\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1667c838428030b55b0f513ff6ca591a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "4f0e2d1dce5fad13089e3fb4fcd43ccba005c83c", "commitAfterChange": "698c26d613731d0111dbddcb370ca40364ac7e62", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tfinal TypeBinding typeBinding, \t\tchar[][] discouragedNames, \t\tfinal char[][] forbiddenNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "signatureAfterChange": " \tprivate void findVariableName( \t\t\tchar[] token, \t\t\tchar[] qualifiedPackageName, \t\t\tchar[] qualifiedSourceName, \t\t\tchar[] sourceName, \t\t\tfinal TypeBinding typeBinding, \t\t\tchar[][] discouragedNames, \t\t\tfinal char[][] forbiddenNames, \t\t\tint dim, \t\t\tint kind, \t\t\tint modifiers)", "diff": ["-\t\tchar[] token,", "-\t\tchar[] qualifiedPackageName,", "-\t\tchar[] qualifiedSourceName,", "-\t\tchar[] sourceName,", "-\t\tfinal TypeBinding typeBinding,", "-\t\tchar[][] discouragedNames,", "-\t\tfinal char[][] forbiddenNames,", "-\t\tint dim,", "-\t\tint kind,", "-\t\tint modifiers){", "+\t\t\tchar[] token,", "+\t\t\tchar[] qualifiedPackageName,", "+\t\t\tchar[] qualifiedSourceName,", "+\t\t\tchar[] sourceName,", "+\t\t\tfinal TypeBinding typeBinding,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tfinal char[][] forbiddenNames,", "+\t\t\tint dim,", "+\t\t\tint kind,", "+\t\t\tint modifiers){", "+\t\tfindVariableName(", "+\t\t\t\ttoken,", "+\t\t\t\tqualifiedPackageName,", "+\t\t\t\tqualifiedSourceName,", "+\t\t\t\tsourceName,", "+\t\t\t\ttypeBinding,", "+\t\t\t\tdiscouragedNames,", "+\t\t\t\tforbiddenNames,", "+\t\t\t\tfalse,", "+\t\t\t\tdim,", "+\t\t\t\tkind,", "+\t\t\t\tmodifiers);", "+\t}", "-\t\tif (dim > 0){", "-\t\t\tint l = qualifiedSourceName.length;", "-\t\t\tdisplayName = new char[l+(2*dim)];", "-\t\t\tSystem.arraycopy(qualifiedSourceName, 0, displayName, 0, l);", "-\t\t\tfor(int i = 0; i < dim; i++){", "-\t\t\t\tdisplayName[l+(i*2)] = '[';", "-\t\t\t\tdisplayName[l+(i*2)+1] = ']';", "-\t\t\tdisplayName = qualifiedSourceName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494dd7b5367b4f2492b6106c17d388ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "commitAfterChange": "ba74dc7a93e5bf80ccc6be3234ebe25167de5c99", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\tthis.customDefaultOptions = new HashMap();", "-\t\t", "+\t\tthis.customDefaultOptions = new CompilerOptions().getMap();", "+", "-        // disable all warnings by default", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportLocalVariableHiding, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFieldHiding, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportEmptyStatement, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnnecessaryElse, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadoc, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTags, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTagsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTagsOverriding, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocComments, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnsafeTypeOperation, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFinalParameterBound, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingSerialVersion, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED); ", "-", "+\t        // disable all warnings", "+\t\t\tObject[] entries = this.customDefaultOptions.entrySet().toArray();", "+\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\tthis.customDefaultOptions.put(entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TaskTags, \"\"); //$NON-NLS-1$", "-\t\t\t// no warnings", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.WARNING);", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE); ", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED); ", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "759e021d0a2d998c1fd68768665b1e31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "diff": ["-\t\tboolean foundDeprecated = false;", "-\t\t\tint endComment = javadocEnd - 2;", "+\t\t\tthis.endComment = javadocEnd - 2;", "-\t\t\t\tthis.astLengthPtr = -1;", "-\t\t\t\tthis.astPtr = -1;", "-\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\tthis.scanner.startPosition = this.index;", "-\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\tthis.lineStarted = false;", "-\t\t\t\tint lineNumber = this.sourceParser.scanner.getLineNumber(javadocStart);", "-\t\t\t\tint lastLineNumber = this.sourceParser.scanner.getLineNumber(javadocEnd);", "-\t\t\t\tthis.lineEnd = lineNumber == lastLineNumber ? javadocEnd - 2 : javadocStart + 3;", "-\t\t\t\tchar nextCharacter= 0, previousChar;", "-\t\t\t\tint charPosition = -1, inlineStartPosition = 0;", "-\t\t\t\t", "-\t\t\t\t// Loop on each comment character", "-\t\t\t\twhile (this.index < endComment) {", "-\t\t\t\t\tint previousPosition = this.index;", "-\t\t\t\t\tpreviousChar = nextCharacter;", "-\t\t\t\t\t", "-\t\t\t\t\t// Calculate line end (cannot use this.scanner.linePtr as scanner does not parse line ends again)", "-\t\t\t\t\tif (this.index > this.lineEnd) {", "-\t\t\t\t\t\tif (lineNumber < lastLineNumber) {", "-\t\t\t\t\t\t\tthis.lineEnd = this.sourceParser.scanner.getLineEnd(++lineNumber) - 1;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.lineEnd = javadocEnd - 2;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.lineStarted = false;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// Read next char only if token was consumed", "-\t\t\t\t\tif (this.currentTokenType < 0) {", "-\t\t\t\t\t\tnextCharacter = readChar(); // consider unicodes", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tswitch (this.currentTokenType) {", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\t\t\t\t\t\tnextCharacter = '}';", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "-\t\t\t\t\t\t\t\tnextCharacter = '*';", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tnextCharacter = this.scanner.currentCharacter;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tswitch (nextCharacter) {", "-\t\t\t\t\t\tcase '@' :", "-\t\t\t\t\t\t\tboolean valid = false;", "-\t\t\t\t\t\t\t// Start tag parsing only if we are on line beginning or at inline tag beginning", "-\t\t\t\t\t\t\tif (!this.lineStarted || previousChar == '{') {", "-\t\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\tint start = this.astStack[this.astPtr].sourceStart;", "-\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(start, charPosition);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (previousChar == '{') {", "-\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = true;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, endComment);", "-\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.javadoc.inherited = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseReturn();", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (!valid && this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\r':", "-\t\t\t\t\t\tcase '\\n':", "-\t\t\t\t\t\t\tthis.lineStarted = false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '}' :", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) this.inlineTagStarted = false;", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '{' :", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(inlineStartPosition, this.index);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tinlineStartPosition = previousPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '*' :", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tif (!this.lineStarted && !CharOperation.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tsuper.checkDeprecation(javadocStart, javadocEnd);", "-\t\t\tif (this.checkJavadoc) {", "-\t\t\t\tupdateJavadoc();", "-\t\t\t}", "-\t\treturn foundDeprecated;", "+\t\treturn this.deprecated;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fa51b90f183d30ca3c5b90f511a7aa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveTests.java", "commitBeforeChange": "fda975d98b069f678ae89a663957463bb7bd4088", "commitAfterChange": "2e99c72cc03690dcb30e61cdafeb829a4f1ada2f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["+public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException {", "+\tmovePositive(elements, destinations, siblings, names, force, true, null);", "+}", "-public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException {", "-\t\tstartDeltas();", "-\t\t\tIJavaElementDelta destDelta = null;", "-\t\t\tif (isMainType(element, destinations[i]) && names != null && names[i] != null) { //moved/renamed main type to same cu", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "-\t\t\t\tassertTrue(\"Renamed compilation unit as result of main type not added\", destDelta != null && destDelta.getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tassertTrue(\"flag should be F_MOVED_FROM\", (destDelta.getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);", "-\t\t\t\tassertTrue(\"moved from handle should be original\", destDelta.getMovedFromElement().equals(element.getParent()));", "-\t\t\t} else {", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "-\t\t\t\tassertTrue(\"Destination container not changed\", destDelta != null && destDelta.getKind() == IJavaElementDelta.CHANGED);", "-\t\t\t\tIJavaElementDelta[] deltas = destDelta.getAddedChildren();", "-\t\t\t\tassertTrue(\"Added children not correct for element copy\", deltas[i].getElement().equals(moved));", "-\t\t\t\tassertTrue(\"should be K_ADDED\", deltas[i].getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tIJavaElementDelta sourceDelta= this.deltaListener.getDeltaFor(element, false);", "-\t\t\t\tassertTrue(\"should be K_REMOVED\", sourceDelta.getKind() == IJavaElementDelta.REMOVED);", "-\t\tstopDeltas();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0486cf5b1e45fcd3ca8a1600da55bcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8abf03ebc64c5dfaa72b42e56c19fb01c4c7861e", "commitAfterChange": "5b58321cc6529786ed20cb721ece7536a2d99088", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tswitch (expressionOperatorID) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.NOT_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LEFT_SHIFT);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_SIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.PLUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.MINUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.REMAINDER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.XOR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.TIMES);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.DIVIDE);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS);", "-\t\t}", "+\t\tinfixExpression.setOperator(getOperatorFor(expressionOperatorID));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd7871e0035238d473484ab51023c000", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "a8073c80a69f6c184e71b3ada3faf15faa3ff3ae", "commitAfterChange": "33e49b6e14282ee69dc2c2cf0c73bec5e674cdf2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// check (meta)target compatibility", "-\t\t\tcheckTargetCompatibility: {", "-\t\t\t\tif (!annotationType.isValidBinding()) {", "-\t\t\t\t\t// no need to check annotation usage if missing", "-\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t}", "-", "-\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) {", "-\t\t\t\t\t// does not specify any target restriction - all locations supported in Java 7 and before are possible", "-\t\t\t\t\tif (kind == Binding.TYPE_PARAMETER || kind == Binding.TYPE_USE) {", "-\t\t\t\t\t\tscope.problemReporter().explitAnnotationTargetRequired(this);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t}", "-", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391201", "-\t\t\t\tif ((metaTagBits & TagBits.SE7AnnotationTargetMASK) == 0", "-\t\t\t\t\t\t&& (metaTagBits & (TagBits.AnnotationForTypeUse | TagBits.AnnotationForTypeParameter)) != 0) {", "-\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t\tswitch (kind) {", "-\t\t\t\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\t\t\tcase Binding.TYPE :", "-\t\t\t\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\t\t\t\tscope.problemReporter().invalidUsageOfTypeAnnotations(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE_USE :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\t// jsr 308", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE :", "-\t\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\t\tif (((ReferenceBinding)this.recipient).isAnnotationType()) {", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType)) != 0)", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "-\t\t\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding)this.recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) this.recipient;", "-\t\t\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "-\t\t\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tFieldBinding sourceField = (FieldBinding) this.recipient;", "-\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "-\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding)this.recipient;", "-\t\t\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "-\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "-\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "-\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\tscope.problemReporter().disallowedTargetForAnnotation(this);", "-\t\t\t}", "+\t\t\tcheckAnnotationTarget(this, scope, annotationType, kind);"]}], "num": 51303}
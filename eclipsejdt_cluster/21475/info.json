{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "108c99841704136c8e84a57937c34c96", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43e72a8322509d7caa1764c2b6ea38e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a82f005c3f6667f7d776fc1acd5a8f1ad4427b1c", "commitAfterChange": "b46f2262356d5a409fc4ad506ea6e420190ab04d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public char[] genericTypeSignature()", "signatureAfterChange": " public char[] genericTypeSignature()", "diff": ["-        if (this.typeVariables == NoTypeVariables) {", "-\t        this.genericReferenceTypeSignature = this.signature();", "-        } else {", "-\t\t    char[] typeSig = this.signature();", "-\t\t    StringBuffer sig = new StringBuffer(10);", "-\t\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "-\t\t    \tsig.append(typeSig[i]);", "-\t\t    }", "-\t\t    sig.append('<');", "-\t\t    for (int i = 0, length = this.typeVariables.length; i < length; i++) {", "-\t\t        sig.append(this.typeVariables[i].genericTypeSignature());", "-\t\t    }", "-\t\t    sig.append(\">;\"); //$NON-NLS-1$", "-\t\t\tint sigLength = sig.length();", "-\t\t\tthis.genericReferenceTypeSignature = new char[sigLength];", "-\t\t\tsig.getChars(0, sigLength, this.genericReferenceTypeSignature, 0);\t\t    ", "-\t    }", "+    \tthis.genericReferenceTypeSignature = computeGenericTypeSignature(this.typeVariables);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd8288186b095478ada88503b62403b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void elementEncode(XMLWriter writer, IPath projectPath, boolean indent, boolean newLine)", "signatureAfterChange": " \tpublic void elementEncode(XMLWriter writer, IPath projectPath, boolean indent, boolean newLine)", "diff": ["-\t\tif (this.inclusionPatterns != null && this.inclusionPatterns.length > 0) {", "-\t\t\tStringBuffer rule = new StringBuffer(10);", "-\t\t\tfor (int i = 0, max = this.inclusionPatterns.length; i < max; i++){", "-\t\t\t\tif (i > 0) rule.append('|');", "-\t\t\t\trule.append(this.inclusionPatterns[i]);", "-\t\t\t}", "-\t\t\tparameters.put(TAG_INCLUDING, String.valueOf(rule));", "-\t\t}", "-\t\tif (this.exclusionPatterns != null && this.exclusionPatterns.length > 0) {", "-\t\t\tStringBuffer rule = new StringBuffer(10);", "-\t\t\tfor (int i = 0, max = this.exclusionPatterns.length; i < max; i++){", "-\t\t\t\tif (i > 0) rule.append('|');", "-\t\t\t\trule.append(this.exclusionPatterns[i]);", "-\t\t\t}", "-\t\t\tparameters.put(TAG_EXCLUDING, String.valueOf(rule));", "-\t\t}", "+\t\tencodePatterns(this.inclusionPatterns, TAG_INCLUDING, parameters);", "+\t\tencodePatterns(this.exclusionPatterns, TAG_EXCLUDING, parameters);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5958c83f9400e09c19a61e20972822d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "d43bd70d5c6c4fa98b6c25564f2818572a108eac", "commitAfterChange": "3655fb3ae21ac46b5060eb9e240a41cd2462bac2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tpublic StringBuffer printExpression(int tab, StringBuffer output)", "signatureAfterChange": " \t \tpublic StringBuffer printExpression(int tab, StringBuffer output)", "diff": ["+\t\treturn printExpression(tab, output, false);", "+\t}", "-\t\tif (this.body != null)", "-\t\t\tthis.body.print(this.body instanceof Block ? tab : 0, output);", "-\t\telse ", "-\t\t\toutput.append(\"<@incubator>\"); //$NON-NLS-1$"]}], "num": 21475}
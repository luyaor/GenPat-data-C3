{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c8726e39ca713a11f2d2b1f2bab1104", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "685ab45acef7d98460c7b690a79c614c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["+\t */", "+\tprivate void setUpFullSourceWorkspace() throws IOException, CoreException {", "+", "+\t\t// Get projects in workspace (save projects creation on local boxes...)", "+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "+\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\tint projectsLength = projects.length;", "+", "+\t\t// If no projects then unzip file", "+\t\tif (projectsLength == 0) {", "+\t\t\tprojects = createFullSourceWorkspace();", "+\t\t\tprojectsLength = projects.length;", "+\t\t}", "+", "+\t\t// Init environment with existing porjects", "+\t\tfor (int i = 0; i < projectsLength; i++) {", "+\t\t\tENV.addProject(projects[i]);", "+\t\t}", "+", "+\t\t// Init JRE_LIB variable", "+\t\tString jdkLib = Util.getJavaClassLibs()[0];", "+\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "+\t\t", "+\t\t// Set classpaths (workaround bug 73253 Project references not set on project open)", "+\t\tSystem.out.print(\"Set projects classpaths...\");", "+\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "+\t\tint length = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "+\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "+\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "+\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "+\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "+//\t\t\t} else if (JUNIT_PROJECT_NAME.equals(projectName)) {", "+//\t\t\t\tJUNIT_PROJECT = ALL_PROJECTS[i];", "+\t\t\t}", "+\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t\t// Make Big project dependent from jdt.core one", "+//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "+//\t\t\tint bpeLength = bigProjectEntries.length;", "+//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "+//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "+\t\t}", "+\t\tSystem.out.println(\"done\");", "+", "+\t\t// Initialize Parser wokring copy", "+\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "+\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "+\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();", "+\t}", "-\t */", "-\tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "-\t\tif (workspaceRoot.getProjects().length == 0) {", "-\t\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "-\t\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-", "-\t\t\t// Print for log in case of project creation troubles...", "-\t\t\tlong start = System.currentTimeMillis();", "-\t\t\tSystem.out.println(\"Unzipping \"+fullSourceZipPath);", "-\t\t\tSystem.out.print(\"\tin \"+targetWorkspacePath+\"...\");", "-\t\t\t", "-\t\t\t// Unzip file", "-\t\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-", "-\t\t\t// Create and open projects", "-\t\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\t\tproject.open(monitor);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}, null);", "-\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t\t}", "-\t\tString jdkLib = Util.getJavaClassLibs()[0];", "-\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "-\t\t", "-\t\t// Set classpaths (workaround bug 73253 Project references not set on project open)", "-\t\tSystem.out.print(\"Set projects classpaths...\");", "-\t\tlong start = System.currentTimeMillis();", "-\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "-\t\tint length = ALL_PROJECTS.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "-\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "-\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "-\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "-\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "-\t\t\t}", "-\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "-\t\t\t// Make Big project dependent from jdt.core one", "-//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "-//\t\t\tint bpeLength = bigProjectEntries.length;", "-//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "-//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "-\t\t}", "-\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "-\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "-\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();", "-\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95624db8e0bf83f2066def83e866bc72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void parseFiles(final long limit) throws InvalidInputException, IOException", "signatureAfterChange": " \tvoid parseParserFile(int kind) throws InvalidInputException, IOException", "diff": ["+\tvoid parseParserFile(int kind) throws InvalidInputException, IOException {", "+\t\t// Get workspace path", "+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "+\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "+\t\t\t.getLocation()", "+\t\t\t.toFile()", "+\t\t\t.getCanonicalPath();", "+\t\t", "+\t\t// Run test", "+\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\t\tparseFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", kind, ITERATIONS_COUNT*6);", "+", "+\t\t// dump measure", "+\t\tcommitMeasurements();", "+\t\tassertPerformance();", "-\t */", "-\tprivate void parseFiles(final long limit) throws InvalidInputException, IOException {", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tString wkspPath = workspace.getRoot()", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "-", "-\t\t// Get files", "-\t\tFile wkspFile = new File(wkspPath);", "-\t\tFile[] wkspFiles = getAllFiles(wkspFile, new FileFilter() {", "-\t\t\tpublic boolean accept(File pathname) {", "-\t\t\t\tString name = pathname.getName();", "-\t\t\t\tString path = pathname.getAbsolutePath().toLowerCase();", "-\t\t\t\tlong length = pathname.length();", "-\t\t\t\treturn !name.startsWith(\".\") && !name.equalsIgnoreCase(\"cvs\") && ((pathname.isDirectory() || length >= limit && path.endsWith(\".java\")));", "-\t\t\t}", "-\t\t});", "-\t\tif (DEBUG) {", "-\t\t\tSystem.out.println(\"Number of files over \"+limit+\" chars in \"+wkspPath+\": \" + wkspFiles.length);", "-\t\t}", "-", "-\t\t// loop for time measuring", "-\t\tlong parsedCharacters = 0;", "-\t\tlong parsedLines = 0;", "-\t\tfor (int i = 0, max = wkspFiles.length; i < max; i++) {", "-\t\t\tlong[] stats = parseFile(wkspFiles[i].getCanonicalPath(), ITERATIONS_COUNT*10);", "-\t\t\tparsedCharacters += stats[0];", "-\t\t\tparsedLines += stats[1];", "-\t\t}", "-", "-\t\t// Debug", "-\t\tif (DEBUG) {", "-            System.out.print(\"Finally, \"+ parsedLines + \" lines/\"+ parsedCharacters + \" characters were parsed\");", "-\t\t}"]}], "num": 60625}
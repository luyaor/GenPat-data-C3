{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c62e7b039f23447870a9f977dc295db", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0b5918a2fd5273f1b3304933dea739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "4cb2c570d3aefe494107c2340c1d84687aeb83ac", "commitAfterChange": "dbd0d1d22c0c3005a7b77030231806c749e2cebd", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void formatStatements(final List statements, boolean insertNewLineAfterLastStatement)", "signatureAfterChange": " \t \tprivate void formatStatements(final List statements, boolean insertNewLineAfterLastStatement)", "diff": ["+\t\t\tfinal int previousStatementNodeType = previousStatement.getNodeType();", "-\t\t\t\tif (i > 0", "-\t\t\t\t\t\t&& (previousStatement.getNodeType() == ASTNode.EMPTY_STATEMENT)", "-\t\t\t\t\t\t&& (statement.getNodeType() != ASTNode.EMPTY_STATEMENT)) {", "+\t\t\t\tfinal int statementNodeType = statement.getNodeType();", "+\t\t\t\tif ((previousStatementNodeType == ASTNode.EMPTY_STATEMENT", "+\t\t\t\t\t\t&& statementNodeType != ASTNode.EMPTY_STATEMENT)", "+\t\t\t\t\t|| (previousStatementNodeType != ASTNode.EMPTY_STATEMENT", "+\t\t\t\t\t\t&& statementNodeType != ASTNode.EMPTY_STATEMENT)) {", "-\t\t\tif (previousStatement.getNodeType() == ASTNode.EMPTY_STATEMENT", "-\t\t\t\t\t&& statement.getNodeType() != ASTNode.EMPTY_STATEMENT) {", "+\t\t\tfinal int statementNodeType = statement.getNodeType();", "+\t\t\tif ((previousStatementNodeType == ASTNode.EMPTY_STATEMENT", "+\t\t\t\t\t&& statementNodeType != ASTNode.EMPTY_STATEMENT)", "+\t\t\t\t|| (previousStatementNodeType != ASTNode.EMPTY_STATEMENT", "+\t\t\t\t\t&& statementNodeType != ASTNode.EMPTY_STATEMENT)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca46effc453db1fc555140ca84f549f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "be3b8398abdd134469cb25f74becb573498bac14", "commitAfterChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "signatureAfterChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "diff": ["-\tif (pattern.length == 0) return matchRule != SearchPattern.R_EXACT_MATCH;", "-\tif (word.length == 0) return (matchRule & SearchPattern.R_PATTERN_MATCH) != 0 && pattern.length == 1 && pattern[0] == '*';", "+\tint patternLength = pattern.length;", "+\tint wordLength = word.length;", "+\tif (patternLength == 0) return matchRule != SearchPattern.R_EXACT_MATCH;", "+\tif (wordLength == 0) return (matchRule & SearchPattern.R_PATTERN_MATCH) != 0 && patternLength == 1 && pattern[0] == '*';", "-\tif (isCamelCase && pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "+\tif (isCamelCase &&  pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "-\t\t\tif (isCamelCase) return false;", "-\t\t\treturn CharOperation.equals(pattern, word, false);", "+\t\t\tif (!isCamelCase) {", "+\t\t\t\treturn patternLength == wordLength && CharOperation.equals(pattern, word, false);", "+\t\t\t}", "+\t\t\t// fall through prefix match if camel case failed", "-\t\t\treturn CharOperation.prefixEquals(pattern, word, false);", "+\t\t\treturn patternLength <= wordLength && CharOperation.prefixEquals(pattern, word, false);", "-\t\t\tif (isCamelCase) return false;", "-\t\t\treturn pattern[0] == word[0] && CharOperation.equals(pattern, word);", "+\t\t\tif (!isCamelCase) {", "+\t\t\t\treturn pattern[0] == word[0] && patternLength == wordLength && CharOperation.equals(pattern, word);", "+\t\t\t}", "+\t\t\t// fall through prefix match if camel case failed", "-\t\t\treturn pattern[0] == word[0] && CharOperation.prefixEquals(pattern, word);", "+\t\t\treturn pattern[0] == word[0] && patternLength <= wordLength && CharOperation.prefixEquals(pattern, word);"]}], "num": 43052}
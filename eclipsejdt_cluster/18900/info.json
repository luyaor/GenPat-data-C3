{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3bcea34d775e5416c34f6e1b5d024b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390113a1bcddfce68834f00564e35455", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "442cfec5b0ec5f78f613dac66413d02e26889f22", "commitAfterChange": "d42d74dc89c043581d93318957eb6b633b137649", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic void tagAsUnnecessaryCast(Scope scope, TypeBinding castType)", "diff": ["-\t */", "-\tpublic final boolean checkCastTypesCompatibility(", "-\t\tBlockScope scope,", "-\t\tTypeBinding castType,", "-\t\tTypeBinding expressionType) {", "-\t", "-\t\t//A more complete version of this method is provided on", "-\t\t//CastExpression (it deals with constant and need runtime checkcast)", "-\t\tif (castType == expressionType) return false;", "-\t\t", "-\t\t//by grammatical construction, the base type check is not necessary", "-", "-\t\tif (castType == null || expressionType == null) return true;", "-\t", "-\t\t//-----------cast to something which is NOT a base type--------------------------\t", "-\t\tif (expressionType == NullBinding) {", "-\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "-\t\t\t//\t\tneedRuntimeCheckcast = true;", "-\t\t\t//\t}", "-\t\t\treturn false; //null is compatible with every thing", "-\t\t}", "-\t\tif (expressionType.isBaseType()) {", "-\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isArrayType()) {", "-\t\t\tif (castType == expressionType) return false; // identity conversion", "-\t", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t//------- (castType.isArray) expressionType.isArray -----------", "-\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\tif (exprElementType.isBaseType()) {", "-\t\t\t\t\t// <---stop the recursion------- ", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType() != exprElementType)", "-\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\t// recursively on the elements...", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType);", "-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) {", "-\t\t\t\t//------(castType.isClass) expressionType.isArray ---------------\t", "-\t\t\t\tif (castType.id == T_Object) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t} else { //------- (castType.isInterface) expressionType.isArray -----------", "-\t\t\t\tif (castType.id == T_JavaLangCloneable || castType.id == T_JavaIoSerializable) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isClass()) {", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t// ---- (castType.isArray) expressionType.isClass -------", "-\t\t\t\tif (expressionType.id == T_Object) { // potential runtime error", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime  error", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else { // ----- (castType.isInterface) expressionType.isClass -------  ", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "-\t\t\t\t\treturn false;", "-\t\t\t\tif (!((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t    // a subclass may implement the interface ==> no check at compile time", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\t}", "-\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\t//\tif (expressionType.isInterface()) { cannot be anything else", "-\t\tif (castType.isArrayType()) {", "-\t\t\t// ----- (castType.isArray) expressionType.isInterface ------", "-\t\t\tif (!(expressionType.id == T_JavaLangCloneable", "-\t\t\t\t\t|| expressionType.id == T_JavaIoSerializable)) {// potential runtime error", "-\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "-\t\t\tif (castType.id == T_Object) { // no runtime error", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t// no subclass for castType, thus compile-time check is valid", "-\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime error", "-\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else { // ----- (castType.isInterface) expressionType.isInterface -------", "-\t\t\tif (expressionType.isCompatibleWith(castType)) { ", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\t\tMethodBinding[] castTypeMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\tMethodBinding[] expressionTypeMethods =", "-\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "-\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "-\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\t\t&& CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector)", "-\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "-\t\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn true;", "-\t}", "+\t */", "+\tpublic void tagAsUnnecessaryCast(Scope scope, TypeBinding castType) {", "+\t\tscope.problemReporter().unnecessaryInstanceof(this, castType);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4651412d72892d057af8e28b5f66dd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "commitAfterChange": "dedf5307e666f4e1475605b0b89aaf9292d38bf4", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "signatureAfterChange": "\r public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "diff": ["-\t\tif (this.getModifiers() != newClassFile.getModifiers()) {\r", "+\t\tif (this.getModifiers() != newClassFile.getModifiers())\r", "-\t\t}\r", "-\t\tif (!CharOperation.equals(this.getSuperclassName(), newClassFile.getSuperclassName())) {\r", "+\t\tif (!CharOperation.equals(this.getSuperclassName(), newClassFile.getSuperclassName()))\r", "-\t\t}\r", "-\t\tint newInterfacesLength = newInterfacesNames == null ? 0 : newInterfacesNames.length;\r", "-\t\tif (newInterfacesLength != this.interfacesCount) {\r", "-\t\t\treturn true;\r", "-\t\t}\r", "-\t\tif (this.interfacesCount != 0) {\r", "-\t\t\tfor (int i = 0, max = this.interfacesCount; i < max; i++) {\r", "-\t\t\t\tif (!CharOperation.equals(this.interfaceNames[i], newInterfacesNames[i])) {\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t// this.fields\r", "-\t\tFieldInfo[] otherFieldInfos = (FieldInfo[]) newClassFile.getFields();\r", "-\t\tint otherFieldInfosLength = otherFieldInfos == null ? 0 : otherFieldInfos.length;\r", "-\t\tboolean jumpOverFieldCheck = false;\r", "-\t\tif (this.fieldsCount != otherFieldInfosLength) {\r", "-\t\t\tif (excludesSynthetic) {\r", "-\t\t\t\tif (orderRequired) {\r", "-\t\t\t\t\tif (this.fieldsCount != 0) {\r", "-\t\t\t\t\t\tArrays.sort(this.fields);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherFieldInfosLength != 0) {\r", "-\t\t\t\t\t\tArrays.sort(otherFieldInfos);\t\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t// remove synthetic fields\r", "-\t\t\t\tFieldInfo[] otherFieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(otherFieldInfos);\r", "-\t\t\t\tFieldInfo[] fieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(this.fields);\r", "-\t\t\t\tint fieldsInfoWithoutSyntheticsLength = fieldsInfoWithoutSynthetics == null ? 0 : fieldsInfoWithoutSynthetics.length;\r", "-\t\t\t\tint otherFieldsInfoWithoutSyntheticsLength = otherFieldsInfoWithoutSynthetics == null ? 0 : otherFieldsInfoWithoutSynthetics.length;\r", "-\t\t\t\tif (fieldsInfoWithoutSyntheticsLength != this.fieldsCount || otherFieldsInfoWithoutSyntheticsLength != otherFieldInfosLength) {\r", "-\t\t\t\t\tif (fieldsInfoWithoutSyntheticsLength != otherFieldsInfoWithoutSyntheticsLength) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tboolean changedInFields = false;\r", "-\t\t\t\t\tif (otherFieldsInfoWithoutSyntheticsLength != 0) {\r", "-\t\t\t\t\t\tfor (int i = 0; i < otherFieldsInfoWithoutSyntheticsLength && !changedInFields; i++) {\r", "-\t\t\t\t\t\t\tchangedInFields = hasStructuralFieldChanges(fieldsInfoWithoutSynthetics[i], otherFieldsInfoWithoutSynthetics[i]);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (changedInFields) {\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tjumpOverFieldCheck = true;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tjumpOverFieldCheck = true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "+\t\tif (this.interfaceNames != newInterfacesNames) { // TypeConstants.NoSuperInterfaces\r", "+\t\t\tint newInterfacesLength = newInterfacesNames == null ? 0 : newInterfacesNames.length;\r", "+\t\t\tif (newInterfacesLength != this.interfacesCount)\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (otherFieldInfosLength != 0 && !jumpOverFieldCheck) {\r", "-\t\t\tboolean changedInFields = false;\r", "-\t\t\tfor (int i = 0; i < otherFieldInfosLength && !changedInFields; i++) {\r", "-\t\t\t\tchangedInFields = hasStructuralFieldChanges(this.fields[i], otherFieldInfos[i]);\r", "-\t\t\t}\r", "-\t\t\tif (changedInFields) {\r", "-\t\t\t\tif (orderRequired) {\r", "-\t\t\t\t\tif (this.fieldsCount != 0) {\r", "-\t\t\t\t\t\tArrays.sort(this.fields);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherFieldInfosLength != 0) {\r", "-\t\t\t\t\t\tArrays.sort(otherFieldInfos);\t\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tchangedInFields = false;\t\t\t\r", "-\t\t\t\t\tfor (int i = 0; i < otherFieldInfosLength && !changedInFields; i++) {\r", "-\t\t\t\t\t\tchangedInFields = hasStructuralFieldChanges(this.fields[i], otherFieldInfos[i]);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (changedInFields) {\r", "-\t\t\t\t\t\tif (excludesSynthetic) {\r", "-\t\t\t\t\t\t\t// remove synthetic fields\r", "-\t\t\t\t\t\t\tFieldInfo[] otherFieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(otherFieldInfos);\r", "-\t\t\t\t\t\t\tFieldInfo[] fieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(this.fields);\r", "-\t\t\t\t\t\t\tint fieldsInfoWithoutSyntheticsLength = fieldsInfoWithoutSynthetics == null ? 0 : fieldsInfoWithoutSynthetics.length;\r", "-\t\t\t\t\t\t\tint otherFieldsInfoWithoutSyntheticsLength = otherFieldsInfoWithoutSynthetics == null ? 0 : otherFieldsInfoWithoutSynthetics.length;\r", "-\t\t\t\t\t\t\tif (fieldsInfoWithoutSyntheticsLength != this.fieldsCount || otherFieldsInfoWithoutSyntheticsLength != otherFieldInfosLength) {\r", "-\t\t\t\t\t\t\t\tif (fieldsInfoWithoutSyntheticsLength != otherFieldsInfoWithoutSyntheticsLength) {\r", "-\t\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tchangedInFields = false;\r", "-\t\t\t\t\t\t\t\tif (otherFieldsInfoWithoutSyntheticsLength != 0) {\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < otherFieldsInfoWithoutSyntheticsLength && !changedInFields; i++) {\r", "-\t\t\t\t\t\t\t\t\t\tchangedInFields = hasStructuralFieldChanges(fieldsInfoWithoutSynthetics[i], otherFieldsInfoWithoutSynthetics[i]);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (changedInFields) {\r", "-\t\t\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else if (excludesSynthetic) {\r", "-\t\t\t\t\t// remove synthetic fields\r", "-\t\t\t\t\tFieldInfo[] otherFieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(otherFieldInfos);\r", "-\t\t\t\t\tFieldInfo[] fieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(this.fields);\r", "-\t\t\t\t\tint fieldsInfoWithoutSyntheticsLength = fieldsInfoWithoutSynthetics == null ? 0 : fieldsInfoWithoutSynthetics.length;\r", "-\t\t\t\t\tint otherFieldsInfoWithoutSyntheticsLength = otherFieldsInfoWithoutSynthetics == null ? 0 : otherFieldsInfoWithoutSynthetics.length;\r", "-\t\t\t\t\tif (fieldsInfoWithoutSyntheticsLength != this.fieldsCount || otherFieldsInfoWithoutSyntheticsLength != otherFieldInfosLength) {\r", "-\t\t\t\t\t\tif (fieldsInfoWithoutSyntheticsLength != otherFieldsInfoWithoutSyntheticsLength) {\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tchangedInFields = false;\r", "-\t\t\t\t\t\tif (otherFieldsInfoWithoutSyntheticsLength != 0) {\r", "-\t\t\t\t\t\t\tfor (int i = 0; i < otherFieldsInfoWithoutSyntheticsLength && !changedInFields; i++) {\r", "-\t\t\t\t\t\t\t\tchangedInFields = hasStructuralFieldChanges(fieldsInfoWithoutSynthetics[i], otherFieldsInfoWithoutSynthetics[i]);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (changedInFields) {\r", "-\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "+\t\t\tfor (int i = 0, max = this.interfacesCount; i < max; i++)\r", "+\t\t\t\tif (!CharOperation.equals(this.interfaceNames[i], newInterfacesNames[i]))\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\t// this.methods\r", "-\t\tboolean jumpOverMethodCheck = false;\r", "-\t\tMethodInfo[] otherMethodInfos = (MethodInfo[]) newClassFile.getMethods();\r", "-\t\tint otherMethodInfosLength = otherMethodInfos == null ? 0 : otherMethodInfos.length;\r", "-\t\tboolean changedInMethods = false;\r", "-\t\tif (this.methodsCount != otherMethodInfosLength) {\r", "-\t\t\tif (excludesSynthetic) {\r", "-\t\t\t\tif (orderRequired) {\r", "-\t\t\t\t\tif (this.methodsCount != 0) {\r", "-\t\t\t\t\t\tArrays.sort(this.methods);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherMethodInfosLength != 0) {\r", "-\t\t\t\t\t\tArrays.sort(otherMethodInfos);\t\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t// remove synthetic fields\r", "-\t\t\t\tMethodInfo[] otherMethodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(otherMethodInfos);\r", "-\t\t\t\tMethodInfo[] methodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(this.methods);\r", "-\t\t\t\tint methodInfosWithoutSyntheticsLength = methodInfosWithoutSynthetics == null ? 0 : methodInfosWithoutSynthetics.length;\r", "-\t\t\t\tint otherMethodInfosWithoutSyntheticsLength = otherMethodInfosWithoutSynthetics == null ? 0 : otherMethodInfosWithoutSynthetics.length;\r", "-\t\t\t\tif (methodInfosWithoutSyntheticsLength != this.fieldsCount || otherMethodInfosWithoutSyntheticsLength != otherFieldInfosLength) {\r", "-\t\t\t\t\tif (methodInfosWithoutSyntheticsLength != otherMethodInfosWithoutSyntheticsLength) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherMethodInfosWithoutSyntheticsLength != 0) {\r", "-\t\t\t\t\t\tfor (int i = 0; i < otherMethodInfosWithoutSyntheticsLength && !changedInMethods; i++) {\r", "-\t\t\t\t\t\t\tchangedInMethods = hasStructuralMethodChanges(methodInfosWithoutSynthetics[i], otherMethodInfosWithoutSynthetics[i]);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (changedInMethods) {\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tjumpOverMethodCheck = true;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tjumpOverMethodCheck = true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\treturn true;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\tif (otherMethodInfosLength != 0 && !jumpOverMethodCheck) {\r", "-\t\t\tfor (int i = 0; i < otherMethodInfosLength && !changedInMethods; i++) {\r", "-\t\t\t\tMethodInfo otherMethodInfo = otherMethodInfos[i];\r", "-\t\t\t\tMethodInfo currentMethodInfo = this.methods[i];\r", "-\t\t\t\tchangedInMethods = hasStructuralMethodChanges(currentMethodInfo, otherMethodInfo);\r", "-\t\t\t}\r", "-\t\t\tif (changedInMethods) {\r", "-\t\t\t\t// try sorting the collection\r", "-\t\t\t\tif (orderRequired) {\r", "-\t\t\t\t\tif (this.methodsCount != 0) {\r", "-\t\t\t\t\t\tArrays.sort(this.methods);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherMethodInfosLength != 0) {\r", "-\t\t\t\t\t\tArrays.sort(otherMethodInfos);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tchangedInMethods = false;\t\t\t\r", "-\t\t\t\t\tfor (int i = 0; i < otherMethodInfosLength && !changedInMethods; i++) {\r", "-\t\t\t\t\t\tchangedInMethods = hasStructuralMethodChanges(this.methods[i], otherMethodInfos[i]);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (changedInMethods) {\r", "-\t\t\t\t\t\tif (excludesSynthetic) {\r", "-\t\t\t\t\t\t\t// remove synthetic fields\r", "-\t\t\t\t\t\t\tMethodInfo[] otherMethodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(otherMethodInfos);\r", "-\t\t\t\t\t\t\tMethodInfo[] methodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(this.methods);\r", "-\t\t\t\t\t\t\tint methodInfosWithoutSyntheticsLength = methodInfosWithoutSynthetics == null ? 0 : methodInfosWithoutSynthetics.length;\r", "-\t\t\t\t\t\t\tint otherMethodInfosWithoutSyntheticsLength = otherMethodInfosWithoutSynthetics == null ? 0 : otherMethodInfosWithoutSynthetics.length;\r", "-\t\t\t\t\t\t\tif (methodInfosWithoutSyntheticsLength != this.fieldsCount || otherMethodInfosWithoutSyntheticsLength != otherFieldInfosLength) {\r", "-\t\t\t\t\t\t\t\tif (methodInfosWithoutSyntheticsLength != otherMethodInfosWithoutSyntheticsLength) {\r", "-\t\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (otherMethodInfosWithoutSyntheticsLength != 0) {\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < otherMethodInfosWithoutSyntheticsLength && !changedInMethods; i++) {\r", "-\t\t\t\t\t\t\t\t\t\tchangedInMethods = hasStructuralMethodChanges(methodInfosWithoutSynthetics[i], otherMethodInfosWithoutSynthetics[i]);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (changedInMethods) {\r", "-\t\t\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t}\t\t\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else if (excludesSynthetic) {\r", "-\t\t\t\t\t// remove synthetic fields\r", "-\t\t\t\t\tMethodInfo[] otherMethodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(otherMethodInfos);\r", "-\t\t\t\t\tMethodInfo[] methodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(this.methods);\r", "-\t\t\t\t\tint methodInfosWithoutSyntheticsLength = methodInfosWithoutSynthetics == null ? 0 : methodInfosWithoutSynthetics.length;\r", "-\t\t\t\t\tint otherMethodInfosWithoutSyntheticsLength = otherMethodInfosWithoutSynthetics == null ? 0 : otherMethodInfosWithoutSynthetics.length;\r", "-\t\t\t\t\tif (methodInfosWithoutSyntheticsLength != this.fieldsCount || otherMethodInfosWithoutSyntheticsLength != otherFieldInfosLength) {\r", "-\t\t\t\t\t\tif (methodInfosWithoutSyntheticsLength != otherMethodInfosWithoutSyntheticsLength) {\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (otherMethodInfosWithoutSyntheticsLength != 0) {\r", "-\t\t\t\t\t\t\tfor (int i = 0; i < otherMethodInfosWithoutSyntheticsLength && !changedInMethods; i++) {\r", "-\t\t\t\t\t\t\t\tchangedInMethods = hasStructuralMethodChanges(methodInfosWithoutSynthetics[i], otherMethodInfosWithoutSynthetics[i]);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (changedInMethods) {\r", "-\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t// Member types\r", "+\t\t// member types\r", "-\t\tint currentMemberTypeLength = currentMemberTypes == null ? 0 : currentMemberTypes.length;\r", "-\t\tint otherMemberTypeLength = otherMemberTypes == null ? 0 : otherMemberTypes.length;\r", "-\t\tif (currentMemberTypeLength != otherMemberTypeLength) {\r", "-\t\t\treturn true;\r", "-\t\t}\r", "-\t\tif (currentMemberTypeLength != 0) {\r", "-\t\t\tfor (int i = 0; i < currentMemberTypeLength; i++) {\r", "+\t\tif (currentMemberTypes != otherMemberTypes) { // TypeConstants.NoMemberTypes\r", "+\t\t\tint currentMemberTypeLength = currentMemberTypes == null ? 0 : currentMemberTypes.length;\r", "+\t\t\tint otherMemberTypeLength = otherMemberTypes == null ? 0 : otherMemberTypes.length;\r", "+\t\t\tif (currentMemberTypeLength != otherMemberTypeLength)\r", "+\t\t\t\treturn true;\r", "+\t\t\tfor (int i = 0; i < currentMemberTypeLength; i++)\r", "-\t\t\t\t\t|| currentMemberTypes[i].getModifiers() != otherMemberTypes[i].getModifiers()) {\r", "+\t\t\t\t\t|| currentMemberTypes[i].getModifiers() != otherMemberTypes[i].getModifiers())\r", "-\t\t\t\t}\r", "-\t\t\t}\t\t\t\r", "+\r", "+\t\t// fields\r", "+\t\tFieldInfo[] otherFieldInfos = (FieldInfo[]) newClassFile.getFields();\r", "+\t\tint otherFieldInfosLength = otherFieldInfos == null ? 0 : otherFieldInfos.length;\r", "+\t\tif (orderRequired) {\r", "+\t\t\tif (this.fieldsCount != 0)\r", "+\t\t\t\tArrays.sort(this.fields);\r", "+\t\t\tif (otherFieldInfosLength != 0)\r", "+\t\t\t\tArrays.sort(otherFieldInfos);\r", "+\t\t}\r", "+\t\tif (excludesSynthetic) {\r", "+\t\t\tif (hasNonSyntheticFieldChanges(this.fields, otherFieldInfos))\r", "+\t\t\t\treturn true;\r", "+\t\t} else {\r", "+\t\t\tif (this.fieldsCount != otherFieldInfosLength)\r", "+\t\t\t\treturn true;\r", "+\t\t\tfor (int i = 0; i < this.fieldsCount; i++)\r", "+\t\t\t\tif (hasStructuralFieldChanges(this.fields[i], otherFieldInfos[i]))\r", "+\t\t\t\t\treturn true;\r", "+\t\t}\r", "+\t\t\r", "+\t\t// methods\r", "+\t\tMethodInfo[] otherMethodInfos = (MethodInfo[]) newClassFile.getMethods();\r", "+\t\tint otherMethodInfosLength = otherMethodInfos == null ? 0 : otherMethodInfos.length;\r", "+\t\tif (orderRequired) {\r", "+\t\t\tif (this.methodsCount != 0)\r", "+\t\t\t\tArrays.sort(this.methods);\r", "+\t\t\tif (otherMethodInfosLength != 0)\r", "+\t\t\t\tArrays.sort(otherMethodInfos);\t\r", "+\t\t}\r", "+\t\tif (excludesSynthetic) {\r", "+\t\t\tif (hasNonSyntheticMethodChanges(this.methods, otherMethodInfos))\r", "+\t\t\t\treturn true;\r", "+\t\t} else {\r", "+\t\t\tif (this.methodsCount != otherMethodInfosLength)\r", "+\t\t\t\treturn true;\r", "+\t\t\tfor (int i = 0; i < this.methodsCount; i++)\r", "+\t\t\t\tif (hasStructuralMethodChanges(this.methods[i], otherMethodInfos[i]))\r", "+\t\t\t\t\treturn true;\r", "+\t\t}\r", "+\r"]}], "num": 18900}
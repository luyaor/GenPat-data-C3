{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23f5d6e1d2cafc9600b8e2c93fd07a4d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc19164efaa3b7eaf0d95e07e63d49d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a069ec3e155df34e1c3faf73c5e321c7b4b692f7", "commitAfterChange": "6dea5cf1ef2d860c99ae96c566fbaac1cc8d1d31", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprotected void processAnnotations()", "signatureAfterChange": "  \tprotected void processAnnotations()", "diff": ["-\t\tint bottom = 0;", "+\t\tint bottom = this.annotationProcessorStartIndex;", "-\t\t\t\t// we reset the compiler in order to restart with the new units", "-\t\t\t\tinternalBeginToCompile(newUnits, newUnitSize);", "+\t\t\t\tICompilationUnit[] newProcessedUnits = (ICompilationUnit[]) newUnits.clone(); // remember new units in case a source type collision occurs", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = true;", "+\t\t\t\t\tinternalBeginToCompile(newUnits, newUnitSize);", "+\t\t\t\t} catch (SourceTypeCollisionException e) {", "+\t\t\t\t\te.newAnnotationProcessorUnits = newProcessedUnits;", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} finally {", "+\t\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = false;", "+\t\t\t\t\tthis.annotationProcessorManager.reset();", "+\t\t\t\t}", "-\t\t\tthis.annotationProcessorManager.reset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "647cb9bd55bb06a6a85a2ef564d20747", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "cccf97ddc8d31aa1dd642dfd102a8527af08ce6d", "commitAfterChange": "a7d573a8838570508a56f06b38a60f2c878b1524", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprotected void processAnnotations()", "signatureAfterChange": "  \tprotected void processAnnotations()", "diff": ["-\t\t// one more loop to create possible resources", "-\t\t// this loop cannot create any java source files", "+\t\t", "-\t\t// TODO we might want to check if this loop created new units", "+\t\t// process potential units added in the final round see 329156 ", "+\t\tICompilationUnit[] newUnits = this.annotationProcessorManager.getNewUnits();", "+\t\tnewUnitSize = newUnits.length;", "+\t\tif (newUnitSize != 0) {", "+\t\t\tICompilationUnit[] newProcessedUnits = (ICompilationUnit[]) newUnits.clone(); // remember new units in case a source type collision occurs", "+\t\t\ttry {", "+\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = true;", "+\t\t\t\tinternalBeginToCompile(newUnits, newUnitSize);", "+\t\t\t} catch (SourceTypeCollisionException e) {", "+\t\t\t\te.newAnnotationProcessorUnits = newProcessedUnits;", "+\t\t\t\tthrow e;", "+\t\t\t} finally {", "+\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = false;", "+\t\t\t\tthis.annotationProcessorManager.reset();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.annotationProcessorManager.reset();", "+\t\t}"]}], "num": 69917}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "062210e03a08d66ca9ce4a8223789393", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd683eb54e381c4912ebe112abd7247c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "a733986a1578e7c758b973d16a31f4933a7d337a", "commitAfterChange": "b67935aac29cdd7a483ded645c27f7d2da7bec90", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t\t\t\t\t\t\t\tif (proxy.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "-\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "-\t\t\t\t\t\t\t\t\t\t\t\tif (resource.getLocation() != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name, resource);", "+\t\t\t\t\t\t\t\t\t\tswitch(proxy.getType()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (resource.getLocation() != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name, resource);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (patterns != null && Util.isExcluded(proxy.requestResource(), patterns))", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\tif (proxy.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "-\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "-\t\t\t\t\t\t\t\t\t\t\t\tIPath path = resource.getLocation();", "-\t\t\t\t\t\t\t\t\t\t\t\tif (path != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.get(name) == null || indexLastModified < path.toFile().lastModified()", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (Object) resource", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);", "+\t\t\t\t\t\t\t\t\t\tswitch(proxy.getType()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tIPath path = resource.getLocation();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (path != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.get(name) == null || indexLastModified < path.toFile().lastModified()", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (Object) resource", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (patterns != null && Util.isExcluded(proxy.requestResource(), patterns))", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e7d2d81079b9cc8b714b76bb8a6651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "0d4007eb15023a950a5e732906ce998c79797847", "commitAfterChange": "15f72ffb7ce100c1fef6b76e22aa8f994af88b5e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tprivate void parseFullyQualifiedName()", "signatureAfterChange": " \t \tprivate void parseFullyQualifiedName()", "diff": ["+\t\t\tcase Scanner.BASE_TYPE:", "+\t\t\t\tthis.keyStart = this.scanner.start-1;", "+\t\t\t\tconsumeBaseType(this.scanner.getTokenSource());", "+\t\t\t\tthis.hasTypeName = false;", "+\t\t\t\tbreak;", "-\t\t\t\tif (this.scanner.nextToken() == Scanner.TYPE)", "-\t \t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "-\t\t\t\telse {", "-\t\t\t\t\tmalformedKey();", "-\t\t\t\t\treturn;", "+\t \t\t\tswitch (this.scanner.nextToken()) {", "+\t \t\t\t\tcase Scanner.TYPE:", "+\t\t \t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "+\t\t \t\t\t\tbreak;", "+\t \t\t\t\tcase Scanner.BASE_TYPE:", "+\t \t\t\t\t\tconsumeBaseType(this.scanner.getTokenSource());", "+\t \t\t\t\t\tthis.hasTypeName = false;", "+\t \t\t\t\t\tbreak;", "+\t \t\t\t\tdefault:", "+\t\t\t\t\t\tmalformedKey();", "+\t\t\t\t\t\treturn;"]}], "num": 69888}
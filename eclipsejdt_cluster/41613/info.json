{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fbba79444599be4de8488e4564529b5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f28f6d5647ba83245a66ae808c09ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "a899cd29a75883646450816539797817299ec777", "commitAfterChange": "bdf79fcc26d1f82ae3c59775bd7a3df51c38f892", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "diff": ["-\t\t\t\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionTb, expectedElementsTb)) {", "-\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t} else if (BaseTypeBinding.isWidening(expectedElementsTb.id, expressionTb.id)) {", "-\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t} else if (scope.isBoxingCompatibleWith(expressionTb, expectedElementsTb)) {", "-\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "+\t\t\t\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionTb, expectedElementsTb)", "+\t\t\t\t\t\t|| BaseTypeBinding.isWidening(expectedElementsTb.id, expressionTb.id)", "+\t\t\t\t\t\t|| scope.isBoxingCompatibleWith(expressionTb, expectedElementsTb)) {", "+\t\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16faad2a7555baa1447b4a759c6710c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "diff": ["-\t\t\tTypeBinding expectedElementsTb = binding.elementsType(scope);", "+\t\t\tTypeBinding expectedElementsTb = binding.elementsType();", "-\t\t\t\t\t\texpression.implicitWidening(expectedElementsTb, expressionTb);", "+\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t\texpression.implicitWidening(expectedElementsTb, expressionTb);", "+\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(expression, expressionTb, expectedElementsTb);", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(expressionTb, expectedElementsTb, expression);", "-\t\t\tTypeBinding probableTb = scope.createArray(leafElementType, dim);", "-\t\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(this, probableTb, expectedTb);", "+\t\t\tTypeBinding probableTb = scope.createArrayType(leafElementType, dim);", "+\t\t\tscope.problemReporter().typeMismatchError(probableTb, expectedTb, this);"]}], "num": 41613}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cdbcdcc3152cdffe7cdb8f972510680", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73d5da5231bcc4bc24fc251e98ff3670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": " private void decodeStandardAnnotations(int offset)", "signatureAfterChange": " private void decodeAnnotations(int offset, boolean runtimeVisible)", "diff": ["- */", "-private void decodeStandardAnnotations(int offset) {", "+private void decodeAnnotations(int offset, boolean runtimeVisible) {", "-\tint readOffset = offset + 8;", "-\tfor (int i = 0; i < numberOfAnnotations; i++) {", "-\t\treadOffset = decodeAnnotation(readOffset);", "+\tif (numberOfAnnotations > 0) {", "+\t\tint readOffset = offset + 8;", "+\t\tAnnotationInfo[] newInfos = null;", "+\t\tint newInfoCount = 0;", "+\t\tfor (int i = 0; i < numberOfAnnotations; i++) {", "+\t\t\t// With the last parameter being 'false', the data structure will not be flushed out", "+\t\t\tAnnotationInfo newInfo = new AnnotationInfo(this.reference, this.constantPoolOffsets, readOffset, runtimeVisible, false);", "+\t\t\treadOffset += newInfo.readOffset;", "+\t\t\tlong standardTagBits = newInfo.standardAnnotationTagBits;", "+\t\t\tif (standardTagBits != 0) {", "+\t\t\t\tthis.tagBits |= standardTagBits;", "+\t\t\t} else {", "+\t\t\t\tif (newInfos == null)", "+\t\t\t\t\tnewInfos = new AnnotationInfo[numberOfAnnotations - i];", "+\t\t\t\tnewInfos[newInfoCount++] = newInfo;", "+\t\t\t}", "+\t\t}", "+\t\tif (newInfos == null)", "+\t\t\treturn; // nothing to record in this.annotations", "+", "+\t\tif (this.annotations == null) {", "+\t\t\tif (newInfoCount != newInfos.length)", "+\t\t\t\tSystem.arraycopy(newInfos, 0, newInfos = new AnnotationInfo[newInfoCount], 0, newInfoCount);", "+\t\t\tthis.annotations = newInfos;", "+\t\t} else {", "+\t\t\tint length = this.annotations.length;", "+\t\t\tAnnotationInfo[] temp = new AnnotationInfo[length + newInfoCount];", "+\t\t\tSystem.arraycopy(this.annotations, 0, temp, 0, length);", "+\t\t\tSystem.arraycopy(newInfos, 0, temp, length, newInfoCount);", "+\t\t\tthis.annotations = temp;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a23aa1a0b7fd733d4a58c11097a745d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void decodeStandardAnnotations(int offset)", "signatureAfterChange": " private AnnotationInfo[] decodeAnnotations(int offset, boolean runtimeVisible)", "diff": ["+}", "+private AnnotationInfo[] decodeAnnotations(int offset, boolean runtimeVisible) {", "+\tint numberOfAnnotations = u2At(offset + 6);", "+\tif (numberOfAnnotations > 0) {", "+\t\tint readOffset = offset + 8;", "+\t\tAnnotationInfo[] newInfos = null;", "+\t\tint newInfoCount = 0;", "+\t\tfor (int i = 0; i < numberOfAnnotations; i++) {", "+\t\t\t// With the last parameter being 'false', the data structure will not be flushed out", "+\t\t\tAnnotationInfo newInfo = new AnnotationInfo(this.reference, this.constantPoolOffsets,", "+\t\t\t\treadOffset + this.structOffset, runtimeVisible, false);", "+\t\t\treadOffset += newInfo.readOffset;", "+\t\t\tlong standardTagBits = newInfo.standardAnnotationTagBits;", "+\t\t\tif (standardTagBits != 0) {", "+\t\t\t\tthis.tagBits |= standardTagBits;", "+\t\t\t} else {", "+\t\t\t\tif (newInfos == null)", "+\t\t\t\t\tnewInfos = new AnnotationInfo[numberOfAnnotations - i];", "+\t\t\t\tnewInfos[newInfoCount++] = newInfo;", "+\t\tif (newInfos != null) {", "+\t\t\tif (newInfoCount != newInfos.length)", "+\t\t\t\tSystem.arraycopy(newInfos, 0, newInfos = new AnnotationInfo[newInfoCount], 0, newInfoCount);", "+\t\t\treturn newInfos;", "+\t\t}", "+\treturn null; // nothing to record", "- */", "-private void decodeStandardAnnotations(int offset) {", "-\tint numberOfAnnotations = u2At(offset + 6);", "-\tint readOffset = offset + 8;", "-\tfor (int i = 0; i < numberOfAnnotations; i++) {", "-\t\treadOffset = decodeAnnotation(readOffset);", "-\t}"]}], "num": 49189}
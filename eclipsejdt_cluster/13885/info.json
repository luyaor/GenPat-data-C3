{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af89ea9d73c85a27522c50624377290a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a988b2cbb2cffacbe1c4d382ada77ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "6dbb2ec74b77026a9a8c00b4381c92a21f100370", "commitAfterChange": "2d88125c63a44736bd6507d03cfcacc7c43a6f63", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\tif ((implicitConversion & TypeIds.UNBOXING) != 0) {", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t}", "-\t\t\tif (this.resolvedType == TypeBinding.LONG", "-\t\t\t\t|| this.resolvedType == TypeBinding.DOUBLE) {", "-\t\t\t\tcodeStream.pop2();", "-\t\t\t} else {", "-\t\t\t\tcodeStream.pop();", "+\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t// conversion only generated if unboxing", "+\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "+\t\t\t\tcase T_long :", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tcodeStream.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d68263341e2b3ac6ecbabdb508edc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "ae43a440915bd6d7962491f9c0ab4d02295e6d83", "commitAfterChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateReturnBytecode(CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateReturnBytecode(CodeStream codeStream)", "diff": ["-\t\tif (expression == null) {", "-\t\t\tcodeStream.return_();", "-\t\t} else {", "-\t\t\tfinal int implicitConversion = expression.implicitConversion;", "-\t\t\tif ((implicitConversion & BOXING) != 0) {", "-\t\t\t\tcodeStream.areturn();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tint runtimeType = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4;", "-\t\t\tswitch (runtimeType) {", "-\t\t\t\tcase T_boolean :", "-\t\t\t\tcase T_int :", "-\t\t\t\t\tcodeStream.ireturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_float :", "-\t\t\t\t\tcodeStream.freturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_long :", "-\t\t\t\t\tcodeStream.lreturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tcodeStream.dreturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tcodeStream.areturn();", "-\t\t\t}", "-\t\t}", "+\t\tcodeStream.generateReturnBytecode(this.expression);"]}], "num": 13885}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f556bd430b26e6b67f9ce1b3caf645e2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a26cae27e7c281b7a011e8d5b6358a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "1c3577f5abe07ca9a1f5e8ed95ec7cecb20f5290", "commitAfterChange": "007f2027ff425d194812a64dbd50790ef7383015", "methodNumberBeforeChange": 777, "methodNumberAfterChange": 777, "signatureBeforeChange": "  \tpublic void testModifiers()", "signatureAfterChange": "  \tpublic void testModifiers()", "diff": ["-\t\tint[] mods =", "+\t\tfinal int[] mods =", "+\t\t\ttry {", "+\t\t\t\tast.newModifiers(Modifier.NONE);", "+\t\t\t\tassertTrue(false);", "+\t\t\t} catch (UnsupportedOperationException e) {", "+\t\t\t\t// pass", "+\t\t\t}", "+\t\t\t// skip rest of tests", "+\t\t", "+\t\t// JLS3 only", "-\t\tModifier.ModifierKeyword[] known = {", "+\t\tfinal Modifier.ModifierKeyword[] known = {", "+\t\t// check AST.newModifiers(flags)", "+\t\tfor (int i = 0; i < mods.length; i++) {", "+\t\t\tint m = mods[i];", "+\t\t\tList result = ast.newModifiers(m);", "+\t\t\tassertEquals(1, result.size());", "+\t\t\tModifier modNode = (Modifier) result.get(0);", "+\t\t\tassertEquals(m, modNode.getKeyword().toFlagValue());", "+\t\t}", "+\t\t", "+\t\t// check AST.newModifiers ordering", "+\t\tfinal Modifier.ModifierKeyword[] expectedOrder = {", "+\t\t\t\tModifier.ModifierKeyword.PUBLIC_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.PROTECTED_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.PRIVATE_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.ABSTRACT_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.STATIC_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.FINAL_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.SYNCHRONIZED_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.NATIVE_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.STRICTFP_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.TRANSIENT_KEYWORD,", "+\t\t\t\tModifier.ModifierKeyword.VOLATILE_KEYWORD,", "+\t\t\t};", "+\t\tint all = 0;", "+\t\tfor (int i = 0; i < mods.length; i++) {", "+\t\t\tall |= mods[i];", "+\t\t}", "+\t\tList result = ast.newModifiers(all);", "+\t\tassertEquals(expectedOrder.length, result.size());", "+\t\tfor (int i = 0; i< expectedOrder.length; i++) {", "+\t\t\tassertEquals(expectedOrder[i], ((Modifier) result.get(i)).getKeyword());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7aada78d1e54c74695d042490ea0f56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "048c99cb4c40c6639a98df3f0c05bf0ba13af8f8", "commitAfterChange": "73d46cf67b022e45f4a1a5989eb3965ffa6f4612", "methodNumberBeforeChange": 784, "methodNumberAfterChange": 784, "signatureBeforeChange": " \tpublic void testModifiers()", "signatureAfterChange": " \tpublic void testModifiers()", "diff": ["-\t\t\tassertEquals(expectedOrder[i], ((Modifier) result.get(i)).getKeyword());", "+\t\t\tfinal Modifier modifier = ((Modifier) result.get(i));", "+\t\t\tassertEquals(expectedOrder[i], modifier.getKeyword());", "+\t\t\tif (modifier.isAbstract()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.ABSTRACT_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isFinal()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.FINAL_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isNative()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.NATIVE_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isPrivate()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.PRIVATE_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isProtected()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.PROTECTED_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isPublic()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.PUBLIC_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isStatic()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.STATIC_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isStrictfp()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.STRICTFP_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isSynchronized()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isTransient()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.TRANSIENT_KEYWORD, modifier.getKeyword());", "+\t\t\t} else {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.VOLATILE_KEYWORD, modifier.getKeyword());", "+\t\t\t} "]}], "num": 35391}
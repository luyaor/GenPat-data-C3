{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b9fb95593ebf0df40a1dba4cd3ce7ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55a13a8f6dd2779c99624eb129193ef0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": "  private char[] readIndexState()", "signatureAfterChange": "  private char[][] readIndexState(String dirOSString)", "diff": ["-private char[] readIndexState() {", "+private char[][] readIndexState(String dirOSString) {", "-\t\treturn org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(savedIndexNamesFile, null);", "+\t\tchar[] savedIndexNames = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(savedIndexNamesFile, null);", "+\t\tif (savedIndexNames.length > 0) {", "+\t\t\tchar[][] names = CharOperation.splitOn('\\n', savedIndexNames);", "+\t\t\tif (names.length > 1) {", "+\t\t\t\t// First line is DiskIndex signature + saved plugin working location (see writeSavedIndexNamesFile())", "+\t\t\t\tString savedSignature = DiskIndex.SIGNATURE + \"+\" + dirOSString; //$NON-NLS-1$", "+\t\t\t\tif (savedSignature.equals(new String(names[0])))", "+\t\t\t\t\treturn names;", "+\t\t\t}", "+\t\t}", "-\t\treturn CharOperation.NO_CHAR;", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93189e7532c7925c6d1c30ea021ea9bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "28475f7151ef48b7b99d16fedb7cc564edf8391b", "commitAfterChange": "4374063ffc07d9e5a6e12269e991cbcb89c32543", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tIVariableBinding resolveMember(AnnotationTypeMemberDeclaration member)", "signatureAfterChange": " \tIMethodBinding resolveMember(AnnotationTypeMemberDeclaration declaration)", "diff": ["-\tIVariableBinding resolveMember(AnnotationTypeMemberDeclaration member) {", "-\t\t// TODO (olivier) - missing implementation", "-\t\treturn super.resolveMember(member);", "+\tIMethodBinding resolveMember(AnnotationTypeMemberDeclaration declaration) {", "+\t\tObject oldNode = this.newAstToOldAst.get(declaration);", "+\t\tif (oldNode instanceof AbstractMethodDeclaration) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) oldNode;", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(methodDeclaration.binding);", "+\t\t\t\tif (methodBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, declaration);", "+\t\t\t\tString key = methodBinding.getKey();", "+\t\t\t\tif (key != null) {", "+\t\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, methodBinding);\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\treturn methodBinding;", "+\t\t\t}", "+\t\t}", "+\t\treturn null;"]}], "num": 40234}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42f2fd29cd2cb15c4155d28da0e4ae1f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1ae10ccb7b9317fb4ddb683b2100868", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos) ", "+\t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos) ", "+\t\tparameterLoop:", "+\t\t\t\t\t\tif (allInheritedMethods != null) {", "+\t\t\t\t\t\t\t// avoid this optional warning if the conflict already existed in one supertype (merging of two methods into one?)", "+\t\t\t\t\t\t\tfor (MethodBinding one : allInheritedMethods)", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(inheritedMethod.declaringClass, one.declaringClass) && getParameterNonNullness(one, i, useTypeAnnotations) != Boolean.TRUE)", "+\t\t\t\t\t\t\t\t\tcontinue parameterLoop;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ae893fff18ba1b5d7153cb93e88cd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a8950107d551a634f6049d19ba689deca063bfb6", "commitAfterChange": "e34fea35f775affe686777806e78d4b4b98ae8ab", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, InvocationSite invocationSite)", "signatureAfterChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, List<TypeBinding> visitedTypes, InvocationSite invocationSite)", "diff": ["-\tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, InvocationSite invocationSite) {", "+\tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, List<TypeBinding> visitedTypes, InvocationSite invocationSite) {", "-\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\tinterfaces: for (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tif (visitedTypes != null) {", "+\t\t\t\t\tTypeBinding uncaptured = currentType.uncapture(this);", "+\t\t\t\t\tfor (TypeBinding visited : visitedTypes) {", "+\t\t\t\t\t\tif (uncaptured.isEquivalentTo(visited))", "+\t\t\t\t\t\t\tcontinue interfaces;", "+\t\t\t\t\t}", "+\t\t\t\t\tvisitedTypes.add(uncaptured);", "+\t\t\t\t}"]}], "num": 27152}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11922f5dd658b18c185e0bb83f97f3c2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "609ab83f4de599d4cf5e650fd29d4abe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "77f2db9286e86f41c2ddfe17ae19b73d1c8f7cfb", "commitAfterChange": "5f5ce9eca750e13ce186173d215fed8b6c98da3b", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "signatureAfterChange": "  \tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "diff": ["-\t\t\t\t\tcase AbstractVariableDeclaration.ENUM_CONSTANT:", "-\t\t\t\t\t\tFieldDeclaration enumConstant = fieldDeclaration;", "-\t\t\t\t\t\tfinal Expression expression = enumConstant.initialization;", "-\t\t\t\t\t\tif (expression instanceof QualifiedAllocationExpression) {", "-\t\t\t\t\t\t\t((QualifiedAllocationExpression) expression).anonymousType.parseMethod(parser, unit);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6edcce9e2a490e9589b719ffceed55b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate ASTNode[] computeMergedMemberDeclarations(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \t \tprivate ASTNode[] computeMergedMemberDeclarations(TypeDeclaration typeDeclaration)", "diff": ["+\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t// filter out enum constants", "+\t\t\t\t\t\tpreviousFieldStart = fieldStart;", "+\t\t\t\t\t\tif (++fieldIndex < fieldCount) { // find next field if any", "+\t\t\t\t\t\t\tfieldStart = (field = typeDeclaration.fields[fieldIndex]).declarationSourceStart;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfieldStart = Integer.MAX_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "717ab57022eaf44405d64ea371cf1f7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "21c2c8ab182b7aa411b8e7bf4277aee52240c980", "commitAfterChange": "f512a9071a69431983c5a97730f23f8ae82e0f5d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\tif (reference instanceof FieldDeclaration) { // enum declaration", "+\t\tFieldDeclaration enumConstant  = (FieldDeclaration) reference;", "+\t\tif (enumConstant.initialization instanceof QualifiedAllocationExpression) {", "+\t\t\tlocator.reportAccurateEnumConstructorReference(match, enumConstant, (QualifiedAllocationExpression) enumConstant.initialization);", "+\t\t\treturn;", "+\t\t}", "+\t}"]}], "num": 8548}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4688aa9a856f3a9987cfeab93873c47a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29339e944d68e5c51d68263e342f03db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f238d59edecc5d87c39084d60c9040567d09deaf", "commitAfterChange": "ce0032759c3236d2ea392944fcdfb033987155c8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes)", "signatureAfterChange": "\r \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes)", "diff": ["-\t\t\t\tJavaModel model =\r", "-\t\t\t\t\tJavaModelManager.getJavaModel(delta.getResource().getWorkspace());\r", "+\t\t\t\tIResource res = delta.getResource();\r", "+\t\t\t\tJavaModel model = JavaModelManager.getJavaModel(res.getWorkspace());\r", "-\t\t\t\t\ttraverseDelta(delta, IJavaElement.JAVA_MODEL, null); // traverse delta\r", "+\t\t\t\t\t\r", "+\t\t\t\t\t// find out whether the delta is a package fragment root\r", "+\t\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(res.getFullPath());\r", "+\t\t\t\t\tboolean isPkgFragmentRoot = projectOfRoot != null;\r", "+\t\t\t\t\tint elementType = this.elementType(delta, IJavaElement.JAVA_MODEL, isPkgFragmentRoot);\r", "+\t\t\t\t\t\r", "+\t\t\t\t\ttraverseDelta(delta, elementType, projectOfRoot); // traverse delta\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7705300885c83c89b108fa40aaf344e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java", "commitBeforeChange": "adda76dd8bf9eeacb64e3f4f77b7d994b5e9cb4d", "commitAfterChange": "bad954afb2676759183aeb6e67aac62fcd10e156", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t public InputStream getContents() throws CoreException", "signatureAfterChange": " \t \tpublic InputStream getContents() throws CoreException", "diff": ["-\t", "-public InputStream getContents() throws CoreException {", "-", "-\ttry {", "-\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JarEntryFile.getContents()] Creating ZipFile on \" + this.zipName); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t}", "-\t\tZipFile zipFile = new ZipFile(this.zipName); ", "-\t\tZipEntry zipEntry = zipFile.getEntry(this.entryName);", "-\t\tif (zipEntry == null){", "-\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, this.entryName));", "-\t\t}", "-\t\treturn zipFile.getInputStream(zipEntry);", "-\t} catch (IOException e){", "-\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-}", "+\t", "+\tpublic InputStream getContents() throws CoreException {", "+\t\tZipFile zipFile = null;", "+\t\ttry {", "+\t\t\tzipFile = getZipFile();", "+\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JarEntryFile.getContents()] Creating ZipFile on \" +zipFile.getName()); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t}", "+\t\t\tString entryName = getEntryName();", "+\t\t\tZipEntry zipEntry = zipFile.getEntry(entryName);", "+\t\t\tif (zipEntry == null){", "+\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryName));", "+\t\t\t}", "+\t\t\tbyte[] contents = Util.getZipEntryByteContent(zipEntry, zipFile);", "+\t\t\treturn new ByteArrayInputStream(contents);", "+\t\t} catch (IOException e){", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t} finally {", "+\t\t\t// avoid leaking ZipFiles", "+\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "+\t\t}", "+\t}"]}], "num": 3669}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6718b504673f0190246209900d7dea30", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f2c1147dab014d9cbdabfccc67b0c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t\t\t\texpression.implicitWidening(castType, expressionType);", "+\t\t\t\t\texpression.computeConversion(scope, castType, expressionType);", "-\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == exprElementType) {", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType() == exprElementType) {", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "+\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\t\tif (!match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)) {", "+\t\t\t\t}", "+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\t\tif (!match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878f7f00497d35d1fb5bfdb0534e3b24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "f63095af3c7deaeee47a62f089307467f872f35e", "commitAfterChange": "6e8431ed2d3ced2183b0880b86a760ea14397f82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "+\t\t\tif (castType.isCompatibleWith(expressionType)) {", "+\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\tif (!match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t} else {"]}], "num": 33656}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d694bd5e83f11bad2fd20ca6f6ca6383", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6593c9f93ddaac2a43cc7c15c4ec8369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " protected void consumeEnumConstantHeader()", "signatureAfterChange": " protected void consumeEnumConstantHeader()", "diff": ["+}", "-\tEnumConstant enumConstant = new EnumConstant(this.compilationUnit.compilationResult);", "-\tlong pos = this.identifierPositionStack[this.identifierPtr];", "-\tint enumConstantEnd = (int) pos;", "-\tenumConstant.sourceEnd = enumConstantEnd;", "-\tfinal int start = (int) (pos >>> 32);", "-\tenumConstant.sourceStart = start;", "-\tenumConstant.declarationSourceStart = start;", "-\tenumConstant.name = this.identifierStack[this.identifierPtr--];", "-\tthis.identifierLengthPtr--;", "-", "-\t// fill arguments if needed", "-\tint length;", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tthis.expressionPtr -= length;", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\tthis.expressionPtr + 1, ", "-\t\t\tenumConstant.arguments = new Expression[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t\tenumConstant.declarationSourceEnd = flushCommentsDefinedPriorTo(rParenPos);", "-\t\tenumConstant.bodyStart = rParenPos;", "-\t\tenumConstant.bodyEnd = rParenPos;\t", "-\t} else {", "-\t\tif (enumConstantEnd <= rParenPos) {", "-\t\t\tenumConstant.bodyEnd = rParenPos;", "-\t\t} else {", "-\t\t\tenumConstant.bodyEnd = enumConstantEnd;", "-\t\t}", "-\t}", "-", "-\tif (this.currentToken == TokenNameLBRACE) {", "-\t\tenumConstant.bodyStart = this.scanner.currentPosition;", "-\t}", "-\t", "-\tpushOnAstStack(enumConstant);", "+   FieldDeclaration enumConstant = (FieldDeclaration) this.astStack[this.astPtr];", "+   if (rParenPos > enumConstant.declarationSourceEnd) {", "+      enumConstant.declarationSourceEnd = flushCommentsDefinedPriorTo(rParenPos);", "+      enumConstant.declarationEnd = rParenPos;", "+   }", "+   if (this.currentToken == TokenNameLBRACE){", "+      // qualified allocation expression", "+      TypeDeclaration anonymousType = new TypeDeclaration(this.compilationUnit.compilationResult);", "+      anonymousType.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "+      anonymousType.bits |= ASTNode.AnonymousAndLocalMask;", "+      final int start = this.scanner.startPosition;", "+      anonymousType.declarationSourceStart = start;", "+      anonymousType.sourceStart = start;", "+      anonymousType.sourceEnd = start; // closing parenthesis", "+      anonymousType.modifiers = 0;", "+      pushOnAstStack(anonymousType);", "+      this.lastCheckPoint = anonymousType.bodyStart = this.scanner.currentPosition;", "+      if (this.currentElement != null) {", "+         this.currentElement = this.currentElement.add(anonymousType, 0);", "+         this.lastIgnoredToken = -1;", "+         this.currentToken = 0; // opening brace already taken into account", "+      }", "+      QualifiedAllocationExpression allocationExpression = new QualifiedAllocationExpression(anonymousType);", "+      allocationExpression.enumConstant = enumConstant;", "+      markEnclosingMemberWithLocalType();", "+      ", "+      // fill arguments if needed", "+      int length;", "+      if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+         this.expressionPtr -= length;", "+         System.arraycopy(", "+               this.expressionStack, ", "+               this.expressionPtr + 1, ", "+               allocationExpression.arguments = new Expression[length], ", "+               0, ", "+               length); ", "+      }", "+      enumConstant.initialization = allocationExpression;", "+   } else {", "+      AllocationExpression allocationExpression = new AllocationExpression();", "+      allocationExpression.enumConstant = enumConstant;", "+      // fill arguments if needed", "+      int length;", "+      if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+         this.expressionPtr -= length;", "+         System.arraycopy(", "+               this.expressionStack, ", "+               this.expressionPtr + 1, ", "+               allocationExpression.arguments = new Expression[length], ", "+               0, ", "+               length); ", "+      }", "+      enumConstant.initialization = allocationExpression;", "+   }", "+   ", "+   // recovery", "+   if (this.currentElement != null) {", "+      if (!(this.currentElement instanceof RecoveredType)", "+            && (this.currentToken == TokenNameDOT)){", "+         this.lastCheckPoint = enumConstant.sourceStart;", "+         this.restartRecovery = true;", "+         return;", "+      }", "+      this.lastCheckPoint = enumConstant.sourceEnd + 1;", "+      this.currentElement = this.currentElement.add(enumConstant, 0);", "+      this.lastIgnoredToken = -1;", "+   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadb5152c6cb99b114cc555315e3f4e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "3f4d5d2136631e9cf63e2a32bd9868cec640bf4a", "commitAfterChange": "e72ce28100309ddf8def791ea7002ecc7cb95b9e", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic boolean visit( \t\tConditionalExpression conditionalExpression, \t\tBlockScope scope)", "signatureAfterChange": "     public boolean visit(     \tConditionalExpression conditionalExpression,     \tBlockScope scope)", "diff": ["-\t */", "-\tpublic boolean visit(", "-\t\tConditionalExpression conditionalExpression,", "-\t\tBlockScope scope) {", "-", "-\t\tfinal int numberOfParens = (conditionalExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(conditionalExpression, numberOfParens);", "-\t\t}", "-\t\tconditionalExpression.condition.traverse(this, scope);", "-", "-\t\tboolean placeSpaceImmediately = this.preferences.insert_space_before_question_in_conditional", "-\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_INDENT_ON_COLUMN) != 0)", "-\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_NEXT_PER_LINE_SPLIT) != 0);", "-\t\tif (placeSpaceImmediately) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\t", "-\t\tAlignment conditionalExpressionAlignment =this.scribe.createAlignment(", "-\t\t\t\t\"conditionalExpression\", //$NON-NLS-1$", "-\t\t\t\tthis.preferences.conditional_expression_alignment,", "-\t\t\t\t2,", "-\t\t\t\tthis.scribe.scanner.currentPosition);", "-", "-\t\tthis.scribe.enterAlignment(conditionalExpressionAlignment);", "-\t\tboolean ok = false;", "-\t\tdo {", "-\t\t\ttry {", "-\t\t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 0);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, !placeSpaceImmediately && this.preferences.insert_space_before_question_in_conditional);", "-", "-\t\t\t\tif (this.preferences.insert_space_after_question_in_conditional) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tconditionalExpression.valueIfTrue.traverse(this, scope);", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 1);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_conditional);", "-", "-\t\t\t\tif (this.preferences.insert_space_after_colon_in_conditional) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tconditionalExpression.valueIfFalse.traverse(this, scope);", "-", "-\t\t\t\tok = true;", "-\t\t\t} catch (AlignmentException e) {", "-\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t}", "-\t\t} while (!ok);", "-\t\tthis.scribe.exitAlignment(conditionalExpressionAlignment, true);", "-\t\t\t", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(conditionalExpression, numberOfParens);", "-\t\t}", "-\t\treturn false;\t", "-\t}", "+     */", "+    public boolean visit(", "+    \tConditionalExpression conditionalExpression,", "+    \tBlockScope scope) {", "+    ", "+    \tfinal int numberOfParens = (conditionalExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+    \tif (numberOfParens > 0) {", "+    \t\tmanageOpeningParenthesizedExpression(conditionalExpression, numberOfParens);", "+    \t}", "+    \tconditionalExpression.condition.traverse(this, scope);", "+    ", "+    \tAlignment conditionalExpressionAlignment =this.scribe.createAlignment(", "+    \t\t\t\"conditionalExpression\", //$NON-NLS-1$", "+    \t\t\tthis.preferences.conditional_expression_alignment,", "+    \t\t\t2,", "+    \t\t\tthis.scribe.scanner.currentPosition);", "+    ", "+    \tthis.scribe.enterAlignment(conditionalExpressionAlignment);", "+    \tboolean ok = false;", "+    \tdo {", "+    \t\ttry {", "+    \t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 0);", "+    \t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, this.preferences.insert_space_before_question_in_conditional);", "+    ", "+    \t\t\tif (this.preferences.insert_space_after_question_in_conditional) {", "+    \t\t\t\tthis.scribe.space();", "+    \t\t\t}", "+    \t\t\tconditionalExpression.valueIfTrue.traverse(this, scope);", "+    \t\t\tthis.scribe.printTrailingComment();", "+    \t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 1);", "+    \t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_conditional);", "+    ", "+    \t\t\tif (this.preferences.insert_space_after_colon_in_conditional) {", "+    \t\t\t\tthis.scribe.space();", "+    \t\t\t}", "+    \t\t\tconditionalExpression.valueIfFalse.traverse(this, scope);", "+    ", "+    \t\t\tok = true;", "+    \t\t} catch (AlignmentException e) {", "+    \t\t\tthis.scribe.redoAlignment(e);", "+    \t\t}", "+    \t} while (!ok);", "+    \tthis.scribe.exitAlignment(conditionalExpressionAlignment, true);", "+    \t\t", "+    \tif (numberOfParens > 0) {", "+    \t\tmanageClosingParenthesizedExpression(conditionalExpression, numberOfParens);", "+    \t}", "+    \treturn false;\t", "+    }"]}], "num": 27615}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97338ecabdf46935a19c1f005d1a168d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b9bdba2db6e5029676f00d5ac21f67f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 586, "methodNumberAfterChange": 586, "signatureBeforeChange": " public void testBug216875g() throws CoreException", "signatureAfterChange": " public void testBug216875g() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t!|t1|! = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t!|t1|!.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = !|t1|!.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = !|t1|!.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc8c5889cccc2d7e7fe1b586027eded", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 995, "methodNumberAfterChange": 995, "signatureBeforeChange": " public void testBug351444() throws JavaModelException", "signatureAfterChange": " public void testBug351444() throws JavaModelException", "diff": ["-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 27}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 27}\\n\" +", "-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (TT;)V, TXYU, (t), 27}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 27}\",", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 30}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 30}\\n\" +", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (TT;)V, TXYU, (t), 30}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 30}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "905c27a6fc35719834feb98855dd06ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c5fd88e138a396a47a7e0dfbff95b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void test047()", "signatureAfterChange": " \tpublic void test047()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c93a90d26a834de168ceefd2dd5d9ce5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestMixed.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic void test013()", "signatureAfterChange": " \t \tpublic void test013()", "diff": ["-\t\t\t\t\t+ \"\tpublic void foo() {\\n\"", "+\t\t\t\t\t+ \"\tpublic void foo(int a) {\\n\"", "-\t\t\t\t+ \"\tpublic void foo() {\\n\"", "-\t\t\t\t+ \"\t            ^^^\\n\"", "-\t\t\t\t+ \"Annotation: Missing javadoc for public member in API class or interface\\n\"", "+\t\t\t\t+ \"\tpublic void foo(int a) {\\n\"", "+\t\t\t\t+ \"\t            ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Annotation: Missing javadoc comment for public declaration\\n\""]}], "num": 13783}
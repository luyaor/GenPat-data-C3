{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53a7eb276d46aa2476463b9271daf593", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ab5754b27fed51d84be934e7cd7b15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "16a26bc49f78acb9a7d0c10a9d6bedce29952111", "commitAfterChange": "e70f557904c0f4a9dab2a8974c294cadedac3b10", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "diff": ["-\tif (binding.isPrivate() && (currentScope.enclosingSourceType() != binding.declaringClass)) {\r", "-\t\tsyntheticWriteAccessor = binding.getSyntheticWriteAccess();\r", "+\tif (binding.isPrivate()) {\r", "+\t\tif (currentScope.enclosingSourceType() != binding.declaringClass) {\r", "+\t\t\tsyntheticWriteAccessor = ((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, false);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);\r", "+\t\t}\r", "+\t\t\r", "+\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super\r", "+\r", "+\t\t// qualified super need emulation always\r", "+\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);\r", "+\t\tsyntheticWriteAccessor = destinationType.addSyntheticMethod(binding, false);\r", "+\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);\r", "+\r", "+\t} else if (binding.isProtected()) {\r", "+\r", "+\t\tSourceTypeBinding enclosingSourceType;\r", "+\t\tif (((bits & DepthMASK) != 0) \r", "+\t\t\t\t&& binding.declaringClass.getPackage() \r", "+\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()){\r", "+\r", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);\r", "+\t\t\tsyntheticWriteAccessor = currentCompatibleType.addSyntheticMethod(binding, false);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53345e38fff3810bfe466f35293d844f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "diff": ["-\t\tif (this.currentElement != null) {\r", "-\t\t\tswitch (elementType) {\r", "-\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "-\t\t\t\t\telement = project;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "-\t\t\t\t\telement = project.getPackageFragmentRoot(resource);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "+\t\tswitch (elementType) {\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\tif (this.currentElement != null) return this.currentElement;\r", "+\t\t\t\tIProject proj = (IProject)resource;\r", "+\t\t\t\tboolean isOpened = proj.isOpen();\r", "+\t\t\t\tif (isOpened && this.hasJavaNature(proj)) {\r", "+\t\t\t\t\telement = project == null ? JavaCore.create(proj) : project;\r", "+\t\t\t\t} else if (!isOpened) {\r", "+\t\t\t\t\tif (project == null) {\r", "+\t\t\t\t\t\tproject = JavaCore.create(proj);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (project.isOpen()) {\r", "+\t\t\t\t\t\telement = project; // java project is being closed or removed\r", "+\t\t\t\t\t} \r", "+\t\t\t\t} // else not a java-project\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\telement = project.getPackageFragmentRoot(resource);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t// find the element that encloses the resource\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\t\r", "+\t\t\t\tif (this.currentElement == null) {\r", "+\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t} else {\r", "-\t\t\t\t\tif (root != null && !JavaModelManager.conflictsWithOutputLocation(path, (JavaProject)project)) {\r", "+\t\t\t\t\tif (root == null) {\r", "+\t\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t\t} else if (!JavaModelManager.conflictsWithOutputLocation(path, (JavaProject)project)) {\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "-\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "+\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t// find the element that encloses the resource\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\t\r", "+\t\t\t\tif (this.currentElement == null) {\r", "+\t\t\t\t\telement = element = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t} else {\r", "-\t\t\t\t\t\t\troot = (IPackageFragmentRoot)this.currentElement;\r", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)this.currentElement;\r", "-\t\t\t\t\tif (pkgFragment != null) {\r", "+\t\t\t\t\tif (pkgFragment == null) {\r", "+\t\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t\t} else {\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "-\t\t\telement = JavaModelManager.create(resource, project);\r", "+\t\t\treturn null;\r", "+\t\t} else {\r", "+\t\t\tthis.currentElement = (Openable)element;\r", "+\t\t\treturn this.currentElement;\r", "-\t\tthis.currentElement = (Openable)element;\r", "-\t\treturn this.currentElement;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585df37aff5cab8dcfcc5d987bc2af15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "16a26bc49f78acb9a7d0c10a9d6bedce29952111", "commitAfterChange": "e70f557904c0f4a9dab2a8974c294cadedac3b10", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "diff": ["-\tif (binding.isPrivate() \r", "-\t\t&& (currentScope.enclosingSourceType() != binding.declaringClass)\r", "-\t\t&& (binding.constant == NotAConstant)) {\r", "-\t\tsyntheticReadAccessor = binding.getSyntheticReadAccess();\r", "+\tif (binding.isPrivate()) {\r", "+\t\tif ((currentScope.enclosingSourceType() != binding.declaringClass) && (binding.constant == NotAConstant)) {\r", "+\t\t\tsyntheticReadAccessor =  ((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, true);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);\r", "+\t\t}\r", "+\r", "+\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super\r", "+\r", "+\t\t// qualified super need emulation always\r", "+\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);\r", "+\t\tsyntheticReadAccessor = destinationType.addSyntheticMethod(binding, true);\r", "+\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);\r", "+\r", "+\t} else if (binding.isProtected()) {\r", "+\r", "+\t\tSourceTypeBinding enclosingSourceType;\r", "+\t\tif (((bits & DepthMASK) != 0) \r", "+\t\t\t\t&& binding.declaringClass.getPackage() \r", "+\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()){\r", "+\r", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);\r", "+\t\t\tsyntheticReadAccessor = currentCompatibleType.addSyntheticMethod(binding, true);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "592e5cd91cb5016f2cded2103bcb6a34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (use15specifics) {", "-\t\t\tif (valueIfTrueType != valueIfFalseType) {", "-\t\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "-\t\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "-\t\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "-\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "-\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "-\t\t\t\t} else if (valueIfTrueType.isBaseType()) {", "-\t\t\t\t\tif ((valueIfTrueType == NullBinding) == valueIfFalseType.isBaseType()) {  // bool ? null : 12 --> Integer", "-\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\tif (use15specifics && valueIfTrueType != valueIfFalseType) {", "+\t\t\tif (valueIfTrueType.isBaseType()) {", "+\t\t\t\tif (valueIfFalseType.isBaseType()) {", "+\t\t\t\t\t// bool ? baseType : baseType", "+\t\t\t\t\tif (valueIfTrueType == NullBinding) {  // bool ? null : 12 --> Integer", "+\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType); // boxing", "+\t\t\t\t\t} else if (valueIfFalseType == NullBinding) {  // bool ? 12 : null --> Integer", "+\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType); // boxing", "-\t\t\t\t} else if (valueIfFalseType.isBaseType()) {", "-\t\t\t\t\tif ((valueIfFalseType == NullBinding) == valueIfTrueType.isBaseType()) {  // bool ? 12 : null --> Integer", "-\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t} else {", "+\t\t\t\t\t// bool ? baseType : nonBaseType", "+\t\t\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "+\t\t\t\t\tif (valueIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType; // unboxing", "+\t\t\t\t\t} else if (valueIfTrueType != NullBinding) {  // bool ? 12 : new Integer(12) --> int", "+\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType); // unboxing", "-\t\t\t}", "+\t\t\t} else if (valueIfFalseType.isBaseType()) {", "+\t\t\t\t\t// bool ? nonBaseType : baseType", "+\t\t\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t\tif (unboxedIfTrueType.isNumericType() && valueIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType; // unboxing", "+\t\t\t\t\t} else if (valueIfFalseType != NullBinding) {  // bool ? new Integer(12) : 12 --> int", "+\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType); // unboxing", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\t\t// bool ? nonBaseType : nonBaseType", "+\t\t\t\t\tTypeBinding unboxedIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t\tTypeBinding unboxedIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\t\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "+\t\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "+\t\t\t\t\t}", "+\t\t\t} ", "-\t\tif ((valueIfTrueType.isBaseType() && valueIfTrueType != NullBinding)", "-\t\t\t\t|| (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding)) {", "-\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(", "-\t\t\t\tthis,", "-\t\t\t\tvalueIfTrueType,", "-\t\t\t\tvalueIfFalseType);", "-\t\t\treturn null;", "+\t\tif (valueIfTrueType.isBaseType() && valueIfTrueType != NullBinding) {", "+\t\t\tif (use15specifics) {", "+\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(this, valueIfTrueType, valueIfFalseType);", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t} else if (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding) {", "+\t\t\tif (use15specifics) {", "+\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(this, valueIfTrueType, valueIfFalseType);", "+\t\t\t\treturn null;", "+\t\t\t}", "-\t\t\t\tvalueIfTrue.computeConversion(scope, commonType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, commonType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, commonType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, commonType, originalValueIfFalseType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5ea98b7a03cf00ca29f9d0c534ed867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClassFileMatchLocator.java", "commitBeforeChange": "630793cce0a64642fbc1993a23f5569e404d0323", "commitAfterChange": "28076bd39732aa043b533cdb44f2f309abe05417", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "signatureAfterChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "diff": ["+\t\treturn;", "-\t// Get methods from binary type info", "+\t// Define arrays to store methods/fields from binary type if necessary", "-\tIBinaryMethod[] inaccurateMethods = new IBinaryMethod[bMethodsLength];", "+\tIBinaryMethod[] unresolvedMethods = null;", "-\tif (bMethodsLength > 0) {", "-\t\tSystem.arraycopy(binaryMethods, 0, inaccurateMethods, 0, bMethodsLength);", "-\t}", "+\tboolean hasUnresolvedMethods = false;", "-\tIBinaryField[] inaccurateFields = new IBinaryField[bFieldsLength];", "-\tif (bFieldsLength > 0) {", "-\t\tSystem.arraycopy(binaryFields, 0, inaccurateFields, 0, bFieldsLength);", "-\t}", "+\tIBinaryField[] unresolvedFields = null;", "+\tboolean hasUnresolvedFields = false;", "-\tif (((InternalSearchPattern)pattern).mustResolve) {", "+\tint accuracy = SearchMatch.A_ACCURATE;", "+\tboolean mustResolve = ((InternalSearchPattern)pattern).mustResolve;", "+\tif (mustResolve) {", "-\t\t\t// Report accurate methods", "+\t\t\t// Search matches on resolved methods", "+\t\t\thasUnresolvedMethods = bMethodsLength != aMethodsLength;", "-\t\t\t\tint level = locator.patternLocator.resolveLevel(method);", "-\t\t\t\tswitch (level) {", "-\t\t\t\t\tcase PatternLocator.ACCURATE_MATCH:", "-\t\t\t\t\t\tIMethod methodHandle = binaryType.getMethod(", "-\t\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),", "-\t\t\t\t\t\t\tCharOperation.toStrings(Signature.getParameterTypes(convertClassFileFormat(methodSignature))));", "-\t\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, method, info, SearchMatch.A_ACCURATE);", "-\t\t\t\t\t\t// fall through impossible match case to remove the reported method", "-\t\t\t\t\tcase PatternLocator.IMPOSSIBLE_MATCH:", "-\t\t\t\t\t\t// Store binary method signatures to avoid multiple computation", "-\t\t\t\t\t\tif (binaryMethodSignatures == null) {", "-\t\t\t\t\t\t\tbinaryMethodSignatures = new char[bMethodsLength][];", "-\t\t\t\t\t\t\tfor (int j=0; j<bMethodsLength; j++) {", "-\t\t\t\t\t\t\t\tIBinaryMethod binaryMethod = binaryMethods[j];", "-\t\t\t\t\t\t\t\tchar[] signature = binaryMethod.getGenericSignature();", "-\t\t\t\t\t\t\t\tif (signature == null) signature = binaryMethod.getMethodDescriptor();", "-\t\t\t\t\t\t\t\tbinaryMethodSignatures[j] = signature;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// The method is either accurate or impossible so remove from inaccurate methods list", "+", "+\t\t\t\t// Report the match if possible", "+\t\t\t\tint level = locator.patternLocator.resolveLevel(method);", "+\t\t\t\tif (level != PatternLocator.IMPOSSIBLE_MATCH) {", "+\t\t\t\t\tIMethod methodHandle = binaryType.getMethod(", "+\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),", "+\t\t\t\t\t\tCharOperation.toStrings(Signature.getParameterTypes(convertClassFileFormat(methodSignature))));", "+\t\t\t\t\taccuracy = level == PatternLocator.ACCURATE_MATCH ? SearchMatch.A_ACCURATE : SearchMatch.A_INACCURATE;", "+\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, method, info, accuracy);", "+\t\t\t\t}", "+", "+\t\t\t\t// Remove method from unresolved list", "+\t\t\t\tif (hasUnresolvedMethods) {", "+\t\t\t\t\tif (binaryMethodSignatures == null) { // Store binary method signatures to avoid multiple computation", "+\t\t\t\t\t\tbinaryMethodSignatures = new char[bMethodsLength][];", "-\t\t\t\t\t\t\tif (CharOperation.equals(binaryMethods[j].getSelector(), method.selector) && CharOperation.equals(binaryMethodSignatures[j], methodSignature)) {", "-\t\t\t\t\t\t\t\tinaccurateMethods[j] = null;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tIBinaryMethod binaryMethod = binaryMethods[j];", "+\t\t\t\t\t\t\tchar[] signature = binaryMethod.getGenericSignature();", "+\t\t\t\t\t\t\tif (signature == null) signature = binaryMethod.getMethodDescriptor();", "+\t\t\t\t\t\t\tbinaryMethodSignatures[j] = signature;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int j=0; j<bMethodsLength; j++) {", "+\t\t\t\t\t\tif (CharOperation.equals(binaryMethods[j].getSelector(), method.selector) && CharOperation.equals(binaryMethodSignatures[j], methodSignature)) {", "+\t\t\t\t\t\t\tif (unresolvedMethods == null) {", "+\t\t\t\t\t\t\t\tSystem.arraycopy(binaryMethods, 0, unresolvedMethods = new IBinaryMethod[bMethodsLength], 0, bMethodsLength);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tunresolvedMethods[j] = null;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t// Report accurate fields", "+\t\t\t// Search matches on resolved fields", "+\t\t\thasUnresolvedFields = bFieldsLength != aFieldsLength;", "+", "+\t\t\t\t// Report the match if possible", "-\t\t\t\tswitch (level) {", "-\t\t\t\t\tcase PatternLocator.ACCURATE_MATCH:", "-\t\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));", "-\t\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, field, info, SearchMatch.A_ACCURATE);", "-\t\t\t\t\t\t// fall through impossible match case to remove reported field", "-\t\t\t\t\tcase PatternLocator.IMPOSSIBLE_MATCH:", "-\t\t\t\t\t\t// The field is either an accurate or impossible match, so remove it from inaccurate fields list", "-\t\t\t\t\t\tfor (int j=0; j<bFieldsLength; j++) {", "-\t\t\t\t\t\t\tif ( CharOperation.equals(binaryFields[j].getName(), field.name)) {", "-\t\t\t\t\t\t\t\tinaccurateFields[j] = null;", "-\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\tif (level != PatternLocator.IMPOSSIBLE_MATCH) {", "+\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));", "+\t\t\t\t\taccuracy = level == PatternLocator.ACCURATE_MATCH ? SearchMatch.A_ACCURATE : SearchMatch.A_INACCURATE;", "+\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, field, info, accuracy);", "+\t\t\t\t}", "+", "+\t\t\t\t// Remove the field from unresolved list", "+\t\t\t\tif (hasUnresolvedFields) {", "+\t\t\t\t\tfor (int j=0; j<bFieldsLength; j++) {", "+\t\t\t\t\t\tif ( CharOperation.equals(binaryFields[j].getName(), field.name)) {", "+\t\t\t\t\t\t\tif (unresolvedFields == null) {", "+\t\t\t\t\t\t\t\tSystem.arraycopy(binaryFields, 0, unresolvedFields = new IBinaryField[bFieldsLength], 0, bFieldsLength);", "+\t\t\t\t\t\t\tunresolvedFields[j] = null;", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "-\t\t\tif (bMethodsLength == aMethodsLength && bFieldsLength == aFieldsLength) {", "+\t\t\tif (!hasUnresolvedMethods && !hasUnresolvedFields) {", "+\t\taccuracy = SearchMatch.A_INACCURATE;", "+\tif (mustResolve) binaryMethods = unresolvedMethods;", "+\tbMethodsLength = binaryMethods == null ? 0 : binaryMethods.length;", "-\t\tIBinaryMethod method = inaccurateMethods[i];", "+\t\tIBinaryMethod method = binaryMethods[i];", "-\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, null, info, SearchMatch.A_INACCURATE);", "+\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, null, info, accuracy);", "+\tif (mustResolve) binaryFields =  unresolvedFields;", "+\tbFieldsLength = binaryFields == null ? 0 : binaryFields.length;", "-\t\tIBinaryField field = inaccurateFields[i];", "+\t\tIBinaryField field = binaryFields[i];", "-\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, null, info, SearchMatch.A_INACCURATE);", "+\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, null, info, accuracy);"]}], "num": 56204}
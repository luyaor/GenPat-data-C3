{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "778c0e9f019b1235ac7448850e97efa3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de16584441b017fb5d085f496a688f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void resolve(BlockScope upperScope)", "signatureAfterChange": "  public void resolve(BlockScope upperScope)", "diff": ["-\tBlockScope tryScope = new BlockScope(this.scope);", "+    BlockScope resourceManagementScope = null; // Single scope to hold all resources and additional secret variables.", "+\tint resourceCount = this.resources.length;", "+\tif (resourceCount > 0) {", "+\t\tresourceManagementScope = new BlockScope(this.scope);", "+\t\tthis.primaryExceptionVariable =", "+\t\t\tnew LocalVariableBinding(TryStatement.SECRET_PRIMARY_EXCEPTION_VARIABLE_NAME, this.scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "+\t\tresourceManagementScope.addLocalVariable(this.primaryExceptionVariable);", "+\t\tthis.primaryExceptionVariable.setConstant(Constant.NotAConstant); // not inlinable", "+\t\tthis.caughtThrowableVariable =", "+\t\t\tnew LocalVariableBinding(TryStatement.SECRET_CAUGHT_THROWABLE_VARIABLE_NAME, this.scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "+\t\tresourceManagementScope.addLocalVariable(this.caughtThrowableVariable);", "+\t\tthis.caughtThrowableVariable.setConstant(Constant.NotAConstant); // not inlinable", "+\t}", "+\tfor (int i = 0; i < resourceCount; i++) {", "+\t\tthis.resources[i].resolve(resourceManagementScope);", "+\t\tLocalVariableBinding localVariableBinding = this.resources[i].binding;", "+\t\tif (localVariableBinding != null && localVariableBinding.isValidBinding()) {", "+\t\t\tlocalVariableBinding.modifiers |= ClassFileConstants.AccFinal;", "+\t\t\tlocalVariableBinding.tagBits |= TagBits.IsResource;", "+\t\t\tTypeBinding resourceType = localVariableBinding.type;", "+\t\t\tif (resourceType instanceof ReferenceBinding) {", "+\t\t\t\tif (resourceType.findSuperTypeOriginatingFrom(TypeIds.T_JavaLangAutoCloseable, false /*AutoCloseable is not a class*/) == null && resourceType.isValidBinding()) {", "+\t\t\t\t\tupperScope.problemReporter().resourceHasToImplementAutoCloseable(resourceType, this.resources[i].type);", "+\t\t\t\t\tlocalVariableBinding.type = new ProblemReferenceBinding(CharOperation.splitOn('.', resourceType.shortReadableName()), null, ProblemReasons.InvalidTypeForAutoManagedResource);", "+\t\t\t\t}", "+\t\t\t} else if (resourceType != null) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=349862, avoid secondary error in problematic null case", "+\t\t\t\tupperScope.problemReporter().resourceHasToImplementAutoCloseable(resourceType, this.resources[i].type);", "+\t\t\t\tlocalVariableBinding.type = new ProblemReferenceBinding(CharOperation.splitOn('.', resourceType.shortReadableName()), null, ProblemReasons.InvalidTypeForAutoManagedResource);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tBlockScope tryScope = new BlockScope(resourceManagementScope != null ? resourceManagementScope : this.scope);", "-\t\t\tfinallyScope.shiftScopes = new BlockScope[this.catchArguments == null ? 1 : this.catchArguments.length+1];", "+\t\t\tint shiftScopesLength = this.catchArguments == null ? 1 : this.catchArguments.length + 1;", "+\t\t\tfinallyScope.shiftScopes = new BlockScope[shiftScopesLength];", "+\t\tboolean containsUnionTypes = false;", "-\t\t\tif ((argumentTypes[i] = this.catchArguments[i].resolveForCatch(catchScope)) == null) {", "+\t\t\tArgument catchArgument = this.catchArguments[i];", "+\t\t\tcontainsUnionTypes |= (catchArgument.type.bits & ASTNode.IsUnionType) != 0;", "+\t\t\tif ((argumentTypes[i] = catchArgument.resolveForCatch(catchScope)) == null) {", "-\t\tthis.caughtExceptionTypes = new ReferenceBinding[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.caughtExceptionTypes[i] = (ReferenceBinding) argumentTypes[i];", "-\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\tif (this.caughtExceptionTypes[i].isCompatibleWith(argumentTypes[j])) {", "-\t\t\t\t\tthis.scope.problemReporter().wrongSequenceOfExceptionTypesError(this, this.caughtExceptionTypes[i], i, argumentTypes[j]);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tverifyDuplicationAndOrder(length, argumentTypes, containsUnionTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca2ddba4ad23cb88d0d66f3be59b46a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testSimpleConfigApi() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testSimpleConfigApi() throws Exception", "diff": ["+\t\tAptConfig.setEnabled(null, true);", "-\t\tAptConfig.setEnabled(jproj, true);", "-\t\tassertTrue(AptConfig.isEnabled(jproj));", "+\t\tassertTrue(AptConfig.isEnabled(null));", "+\t\tAptConfig.setEnabled(null, true);", "+\t\tAptConfig.setEnabled(jproj, false);", "+\t\tassertFalse(AptConfig.isEnabled(jproj));", "+\t\tassertTrue(AptConfig.isEnabled(null));", "+\t\tMap<String, String> wkspOpts = new HashMap<String, String>(3);", "+\t\twkspOpts.put(\"b\", \"bVal\");", "+\t\twkspOpts.put(\"another option\", \"and\\\\more \\\"punctuation!\\\"\");", "+\t\tAptConfig.setProcessorOptions(wkspOpts, null);", "+\t\tMap<String, String> retrievedWkspOpts = AptConfig.getRawProcessorOptions(null);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\twkspOpts.equals(retrievedWkspOpts));", "+", "+\t\tMap<String, String> projOpts = new HashMap<String, String>(3);", "+\t\tprojOpts.put(\"a\", \"aVal\");", "+\t\tprojOpts.put(\"with spaces\", \"value also has spaces\");", "+\t\tprojOpts.put(\"foo\", \"bar\");", "+\t\tAptConfig.setProcessorOptions(projOpts, jproj);", "+\t\tMap<String, String> retrievedProjOpts = AptConfig.getRawProcessorOptions(jproj);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\tprojOpts.equals(retrievedProjOpts));", "+", "+\t\twkspOpts.clear();", "+\t\twkspOpts.put(\"noodle\", \"nubble\");", "+\t\twkspOpts.put(\"spoo/mack\", \"wumpus\");", "+\t\tAptConfig.setProcessorOptions(wkspOpts, null);", "+\t\tretrievedWkspOpts = AptConfig.getRawProcessorOptions(null);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\twkspOpts.equals(retrievedWkspOpts));", "+", "+\t\tprojOpts.clear();", "+\t\tprojOpts.put(\"smurf\", \"more smurfs\\\\=bad\");", "+\t\tprojOpts.put(\"baz/quack\", \"quux\");", "+\t\tAptConfig.setProcessorOptions(projOpts, jproj);", "+\t\tretrievedProjOpts = AptConfig.getRawProcessorOptions(jproj);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\tprojOpts.equals(retrievedProjOpts));", "+", "-\t\tAptConfig.addProcessorOption(jproj, \"\", null); // should gracefully do nothing", "-\t\tAptConfig.addProcessorOption(jproj, null, \"spud\"); // should gracefully do nothing", "-\t\tAptConfig.removeProcessorOption(jproj, null);", "-\t\tAptConfig.removeProcessorOption(jproj, \"\");", "+\t\t", "+\t\tAptConfig.addProcessorOption(null, \"workspace option\", \"corresponding value\");", "+\t\tAptConfig.addProcessorOption(null, \"foo\", \"whatever\");", "+\t\tAptConfig.removeProcessorOption(null, \"foo\");", "+\t\toptions = AptConfig.getProcessorOptions(null);", "+\t\tassertFalse(options.containsKey(\"foo\"));", "+\t\tassertTrue(options.containsKey(\"workspace option\"));", "+\t\tAptConfig.removeProcessorOption(null, \"workspace option\");"]}], "num": 31550}
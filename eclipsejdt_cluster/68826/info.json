{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88695fb5f243967572e333621d1948a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1c2d3d17346e6ac70d0b8da4ee7624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "signatureAfterChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "diff": ["-        throw new UnsupportedOperationException( \"Not Yet Implemented\");", "+\t\t// TODO: figure out what to do with the loc ", "+\t\t// Filer.Location.CLASS_TREE vs Filer.Location.SOURCE_TREE       ", "+\t\tFile f = new File(\".\");", "+", "+        if( pkg != null )", "+            f = new File( f, pkg.replace('.', File.separatorChar) );", "+", "+        f = new File( f, relPath.getPath() );", "+", "+        // REVIEW: for no apparent reason it is sometimes necessary to create the", "+        // parent dir, else an IOException occurs creating f..", "+        File p = f.getParentFile();", "+        FileSystemUtil.mkdirs( p );", "+        return charsetName == null ? new PrintWriter( f ) : new PrintWriter( f, charsetName );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba9b24e6d03f583b287cd2fdcfe93d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "fa2cb5bc47f7fe5d18ae109d09f3bf4ba668083f", "commitAfterChange": "3ba9d90cc0b0b979098ff6ad3236612052718a0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "signatureAfterChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "diff": ["-\t\t// TODO: figure out what to do with the loc ", "-\t\t// Filer.Location.CLASS_TREE vs Filer.Location.SOURCE_TREE       ", "-\t\tFile f = new File(\".\");", "+    \t// TODO - clean this up", "+    \tFile f = null;", "+    \tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _env.getProject() );", "+    \tif ( loc == Filer.Location.CLASS_TREE )", "+    \t{", "+    \t\ttry ", "+    \t\t{", "+    \t\t\tf = gfm.getGeneratedOutputFile( _env.getJavaProject() );", "+    \t\t}", "+    \t\tcatch ( Exception e )", "+    \t\t{", "+    \t\t\t// TODO - stop throwing this exception", "+    \t\t\te.printStackTrace();", "+    \t\t\tthrow new IOException();", "+    \t\t}", "+    \t}", "+    \telse if ( loc == Filer.Location.SOURCE_TREE )", "+    \t\tf = gfm.getGeneratedSourceFolder().getRawLocation().toFile();", "+    \t\t\t", "+"]}], "num": 68826}
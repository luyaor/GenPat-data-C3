{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8192c4094453cdf54ea3c226ae146927", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3afb4673b0b718691746f3d244c3426e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeDeclarationImpl.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected List<? extends MethodDeclaration> _getMethods()", "signatureAfterChange": "      protected List<? extends MethodDeclaration> _getMethods()", "diff": ["-        final IMethodBinding[] methods = getDeclarationBinding().getDeclaredMethods();", "-        final List<MethodDeclaration> results = new ArrayList<MethodDeclaration>(methods.length);", "+    \tfinal List<MethodDeclaration> results = new ArrayList<MethodDeclaration>();", "+    \tif( isFromSource() ){", "+    \t\t// need to consult the ast since methods with broken signature ", "+    \t\t// do not appear in bindings.", "+    \t\tfinal ITypeBinding typeBinding = getDeclarationBinding();", "+    \t\tfinal ASTNode node = ", "+    \t\t\t_env.getASTNodeForBinding(typeBinding);", "+    \t\tif( node != null ){", "+    \t\t\tswitch( node.getNodeType() )", "+    \t\t\t{", "+    \t\t\tcase ASTNode.TYPE_DECLARATION:", "+    \t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION:", "+    \t\t\tcase ASTNode.ENUM_DECLARATION:", "+    \t\t\t\tAbstractTypeDeclaration typeDecl = ", "+    \t\t\t\t\t(AbstractTypeDeclaration)node;", "+    \t\t\t\t// built the ast based methods first.", "+    \t\t\t\tgetASTMethods(typeDecl, results);", "+    \t\t\t\tbreak;", "+    \t\t\tdefault:", "+    \t\t\t\t// the ast node for a type binding should be a AbstractTypeDeclaration.", "+    \t\t\t\tthrow new IllegalStateException(\"expecting a AbstractTypeDeclaration but got \"  //$NON-NLS-1$", "+    \t\t\t\t\t\t+ node.getClass().getName() );", "+    \t\t\t}", "+    \t\t}", "+    \t}", "+        // build methods for binding type or ", "+    \t// build the binding based method for source type.", "+    \tfinal IMethodBinding[] methods = getDeclarationBinding().getDeclaredMethods();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "831884878bba5ab019d91feb0253019e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ClassDeclarationImpl.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public Collection<ConstructorDeclaration> getConstructors()", "signatureAfterChange": "      public Collection<ConstructorDeclaration> getConstructors()", "diff": ["+    \tfinal List<ConstructorDeclaration> results = new ArrayList<ConstructorDeclaration>();", "+    \tif( isFromSource() ){", "+    \t\t// need to consult the ast since methods with broken signature ", "+    \t\t// do not appear in bindings.", "+    \t\tfinal ITypeBinding typeBinding = getDeclarationBinding();", "+    \t\tfinal ASTNode node = ", "+    \t\t\t_env.getASTNodeForBinding(typeBinding);", "+    \t\tif( node != null ){", "+    \t\t\tswitch( node.getNodeType() )", "+    \t\t\t{", "+    \t\t\tcase ASTNode.TYPE_DECLARATION:", "+    \t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION:", "+    \t\t\tcase ASTNode.ENUM_DECLARATION:", "+    \t\t\t\tAbstractTypeDeclaration typeDecl = ", "+    \t\t\t\t\t(AbstractTypeDeclaration)node;", "+    \t\t\t\t// built the ast based methods first.", "+    \t\t\t\tgetASTConstructor(typeDecl, results);", "+    \t\t\t\tbreak;", "+    \t\t\tdefault:", "+    \t\t\t\t// the ast node for a type binding should be a AbstractTypeDeclaration.", "+    \t\t\t\tthrow new IllegalStateException(\"expecting a AbstractTypeDeclaration but got \"  //$NON-NLS-1$", "+    \t\t\t\t\t\t+ node.getClass().getName() );", "+    \t\t\t}", "+    \t\t}", "+    \t}", "+        // build methods for binding type or ", "+    \t// build the binding based method for source type.", "+    \t", "-        final List<ConstructorDeclaration> results = new ArrayList<ConstructorDeclaration>(methods.length);"]}], "num": 39183}
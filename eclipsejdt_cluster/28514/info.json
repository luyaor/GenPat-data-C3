{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "621212a149fe4af0cf39d8b578c5f117", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4f3923afe6e5e54fb3e84f97c88a39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " private synchronized static Object getTargetAsExternalFile(IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getExternalTarget(IPath path, boolean checkResourceExistence)", "diff": ["-private synchronized static Object getTargetAsExternalFile(IPath path, boolean checkResourceExistence) {", "+}", "+public static Object getExternalTarget(IPath path, boolean checkResourceExistence) {", "+\tif (path == null)", "+\t\treturn null;", "+\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "+\tObject linkedFolder = externalFoldersManager.getFolder(path);", "+\tif (linkedFolder != null) {", "+\t\tif (checkResourceExistence) {", "+\t\t\t// check if external folder is present", "+\t\t\tFile externalFile = new File(path.toOSString());", "+\t\t\tif (!externalFile.isDirectory()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\treturn linkedFolder;", "+\t}", "-\t} else if (existingExternalFiles.contains(externalFile)) {", "+\t} else if (existingExternalFilesContains(externalFile)) {", "-\t\tif (externalFile.exists()) {", "+\t\tif (externalFile.isFile()) { // isFile() checks for existence (it returns false if a directory)", "-\t\t\texistingExternalFiles.add(externalFile);", "+\t\t\texistingExternalFilesAdd(externalFile);", "+\t\t} else if (externalFile.isDirectory()) {", "+\t\t\treturn externalFoldersManager.addFolder(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2132f210bb2e69523162608e1e803b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\tthis.compilationUnits = compilationUnits;", "-\t\tthis.diagnosticListener = diagnosticListener;", "-\t\tif (fileManager != null) {", "-\t\t\tthis.fileManager = fileManager;", "+\t\tfinal Thread currentThread = Thread.currentThread();", "+\t\tEclipseCompilerImpl eclipseCompiler = this.threadCache.get(currentThread);", "+\t\tif (eclipseCompiler == null) {", "+\t\t\teclipseCompiler = new EclipseCompilerImpl(writerOut, writerErr, false);", "+\t\t\tthis.threadCache.put(currentThread, eclipseCompiler);", "-\t\t\tthis.fileManager = this.getStandardFileManager(diagnosticListener, null, null);", "+\t\t\teclipseCompiler.initialize(writerOut, writerErr, false, null);", "+\t\t}", "+\t\tfinal EclipseCompilerImpl eclipseCompiler2 = new EclipseCompilerImpl(writerOut, writerErr, false);", "+\t\teclipseCompiler2.compilationUnits = compilationUnits;", "+\t\teclipseCompiler2.diagnosticListener = diagnosticListener;", "+\t\tif (fileManager != null) {", "+\t\t\teclipseCompiler2.fileManager = fileManager;", "+\t\t} else {", "+\t\t\teclipseCompiler2.fileManager = this.getStandardFileManager(diagnosticListener, null, null);", "-\t\tinitialize(writerOut, writerErr, false);", "-\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "-\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "-\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\teclipseCompiler2.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\teclipseCompiler2.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\teclipseCompiler2.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "-\t\t\t\tthis.fileManager.handleOption(iterator.next(), iterator);", "+\t\t\t\teclipseCompiler2.fileManager.handleOption(iterator.next(), iterator);", "-\t\t\tthis.configure(optionsToProcess);", "+\t\t\teclipseCompiler2.configure(optionsToProcess);", "-\t\tif (this.fileManager instanceof StandardJavaFileManager) {", "-\t\t\tStandardJavaFileManager javaFileManager = (StandardJavaFileManager) this.fileManager;", "+\t\tif (eclipseCompiler2.fileManager instanceof StandardJavaFileManager) {", "+\t\t\tStandardJavaFileManager javaFileManager = (StandardJavaFileManager) eclipseCompiler2.fileManager;", "-\t\t\t\tthis.setDestinationPath(location.iterator().next().getAbsolutePath());", "+\t\t\t\teclipseCompiler2.setDestinationPath(location.iterator().next().getAbsolutePath());", "-\t\t\t\tBoolean value = EclipseCompiler.this.call() ? Boolean.TRUE : Boolean.FALSE;", "+\t\t\t\tBoolean value = eclipseCompiler2.call() ? Boolean.TRUE : Boolean.FALSE;", "-\t\t\t\tEclipseCompiler.this.setLocale(locale);", "+\t\t\t\teclipseCompiler2.setLocale(locale);", "-\t\t\t\tEclipseCompiler.this.processors = processors2;", "+\t\t\t\teclipseCompiler2.processors = processors2;"]}], "num": 28514}
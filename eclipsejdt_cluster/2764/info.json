{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc2d00a442641d6235aeb9f3975bc9a9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f319bb0683265c5fb593df0f92f13c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 138, "signatureBeforeChange": " \tprotected MethodBinding inferInvocationType(InvocationSite invocationSite, MethodBinding applicable, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tprotected MethodBinding inferInvocationType(InvocationSite invocationSite, MethodBinding applicable, TypeBinding[] argumentTypes)", "diff": ["+\t\t} else if (invocationSite instanceof ReferenceExpression) {", "+\t\t\tif (applicable instanceof ParameterizedGenericMethodBinding)", "+\t\t\t\tapplicable = applicable.shallowOriginal();", "+\t\t\tif (applicable.typeVariables() != Binding.NO_TYPE_VARIABLES)", "+\t\t\t\treturn ParameterizedGenericMethodBinding.computeCompatibleMethod(applicable, argumentTypes, this, invocationSite, FULL_INFERENCE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8898af0f952873396dbc0e82d3cad99f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "diff": ["-\t\t\t\t\t} else {", "+\t\t\t\t\t} else if (member instanceof TypeDeclaration) {", "+\t\t\t\t\t} else if (member instanceof EnumDeclaration) {", "+\t\t\t\t\t\tisChunkStart = memberAlignment.checkChunkStart(Alignment.CHUNK_ENUM, i, this.scribe.scanner.currentPosition);", "+\t\t\t\t\t\tformat((EnumDeclaration) member, typeDeclaration.scope, isChunkStart, i == 0);\t\t\t\t\t\t"]}], "num": 2764}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95ee200c4610817ce271318c85e737b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08c04fc2352e2775743b5a950228a691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "0bd04abb8575a021cf8905c773ca1d2199f31c53", "commitAfterChange": "1bf6db68524b43c8e140351de0b8d9940aee5925", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "signatureAfterChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "diff": ["-\tif (!compatible.isPartOfRawType()) return false;", "-\tdo {", "-\t\tif (compatible.isRawType() && (targetType.isBoundParameterizedType() || targetType.isGenericType())) {", "+", "+\twhile (compatible.isRawType()) {", "+\t\tif (targetType.isBoundParameterizedType() || targetType.isGenericType()) {", "-\t} while ((compatible = compatible.enclosingType()) != null && (targetType = targetType.enclosingType()) != null);", "+\t\tif (compatible.isStatic()) break;", "+\t\tif ((compatible = compatible.enclosingType()) == null) break;", "+\t\tif ((targetType = targetType.enclosingType()) == null) break;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32dfe4bd4ed68dbf4ee62bce8c5d9781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "eb727711bfbefbe06ad25a796b42d61ffab45eca", "commitAfterChange": "c4ce580cb0d1d41b788a7611bd30d4cf0eba4f86", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\tboolean warnRawArgs = false, unsafeWildcardInvocation = false;", "+\t\tboolean unsafeWildcardInvocation = false;", "-\t\t\t    warnRawArgs = true;", "+\t\t\t    scope.problemReporter().unsafeRawConversion(arguments[i], argumentType, parameterType);", "-\t\t    scope.problemReporter().unsafeWildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);", "+\t\t    scope.problemReporter().wildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);", "-\t\t} else if (warnRawArgs) {", "-\t\t    scope.problemReporter().unsafeInvocationWithRawArguments((ASTNode)invocationSite, receiverType, method, argumentTypes);"]}], "num": 7484}
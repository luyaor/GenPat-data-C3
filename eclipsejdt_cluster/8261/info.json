{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b8854958e0c72741c4852acf2ea5213", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61651d16fff9c8f0e997e5941a933f5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test044()", "signatureAfterChange": " \tpublic void test044()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\tfinal void foo() {}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class XS extends X {\\n\" + ", "-\t\t\t\t\"\t@Override\\n\" + ", "-\t\t\t\t\"\tvoid foo() {}\\n\" + ", "-\t\t\t\t\"}\\n\"", "+\t\t\t\t\"public class X { final void foo() {} }\\n\" + ", "+\t\t\t\t\"class XS extends X { @Override void foo() {} }\\n\"", "-\t\t\t\"1. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\tvoid foo() {}\\r\\n\" + ", "-\t\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass XS extends X { @Override void foo() {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X { public void foo() {} }\\n\" + ", "+\t\t\t\t\"class XS extends X { @Override void foo() {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass XS extends X { @Override void foo() {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^\\n\" + ", "+\t\t\t\"Cannot reduce the visibility of the inherited method from X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X { void foo() {} }\\n\" + ", "+\t\t\t\t\"class XS extends X { @Override void foo() throws ClassNotFoundException {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass XS extends X { @Override void foo() throws ClassNotFoundException {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exception ClassNotFoundException is not compatible with throws clause in X.foo()\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X { void foo() {} }\\n\" + ", "+\t\t\t\t\"class XS extends X { @Override int foo() {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass XS extends X { @Override int foo() {} }\\n\" + ", "+\t\t\t\"\t                                   ^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with X.foo()\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass XS extends X { @Override int foo() {} }\\n\" + ", "+\t\t\t\"\t                                   ^^^^^\\n\" + ", "+\t\t\t\"The method foo() of type XS must override a superclass method\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e15da9a56d8243856d6361078e910b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "dfb3637702f1e682e6ee6d2d1c5b6ed54a2efc28", "commitAfterChange": "40fae5391d4f13359de5727f38342f6b018e40a2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void _test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["-\tpublic void _test027() {", "+\tpublic void test027() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X { <T> void test() {} }\\n\" + ", "+\t\t\t\t\"class Y extends X { void test() {} }\\n\"", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X { void test() {} }\\n\" + ", "+\t\t\t\t\"class Y extends X { <T> void test() {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass Y extends X { <T> void test() {} }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test() of type Y has the same erasure as test() of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: <T>foo() in Y and foo() in X have the same erasure, yet neither overrides the other", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> { void test(T o) {} }\\n\" + ", "+\t\t\t\t\"class Y<T> extends X<T> { void test(Object o) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<T> { void test(Object o) {} }\\r\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test(Object) of type Y<T> has the same erasure as test(T) of type X<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// no error unless you try to do a super send which then fails", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> { void test(T o, T t) {} }\\n\" + ", "+\t\t\t\t\"class Y<T> extends X<T> { void test(Object o, T t) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<T> { void test(Object o, T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test(Object, T) of type Y<T> has the same erasure as test(T, T) of type X<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: test(java.lang.Object,T) in Y<T> and test(T,T) in X<T> have the same erasure, yet neither overrides the other", "+\t\t);", "-\t\t\t\"name clash: \"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tpublic void setA(A a) {}\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method setA(A) of type InvertedPair<A,B> has the same erasure as setA(A) of type Pair<B,A> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\""]}], "num": 8261}
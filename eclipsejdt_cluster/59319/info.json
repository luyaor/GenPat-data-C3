{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2dc7bd6a5d8900d0fb28b2fc4d267157", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4db2eb6abf6b11f7d16b40bdfb51c56e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "commitAfterChange": "3eb060c9534fa433113cc21253ee7307d78379c2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r\r public String toString()", "signatureAfterChange": "\r \r \tpublic String toString()", "diff": ["-\r\r", "-public String toString() {\r", "-\r\r", "-\tStringBuffer buf = new StringBuffer(\"CompilerOptions:\"); //$NON-NLS-1$\r", "-\tif ((produceDebugAttributes & Vars) != 0){\r", "-\t\tbuf.append(\"\\n-local variables debug attributes: ON\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tbuf.append(\"\\n-local variables debug attributes: OFF\"); //$NON-NLS-1$\r", "-\tif ((produceDebugAttributes & Lines) != 0){\r", "-\t\tbuf.append(\"\\n-line number debug attributes: ON\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tbuf.append(\"\\n-line number debug attributes: OFF\"); //$NON-NLS-1$\r", "-\t}\r", "-\tif ((produceDebugAttributes & Source) != 0){\r", "-\t\tbuf.append(\"\\n-source debug attributes: ON\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tbuf.append(\"\\n-source debug attributes: OFF\"); //$NON-NLS-1$\r", "-\t}\r", "-\tif (preserveAllLocalVariables){\r", "-\t\tbuf.append(\"\\n-preserve all local variables: ON\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tbuf.append(\"\\n-preserve all local variables: OFF\"); //$NON-NLS-1$\r", "-\t}\r", "-\tif ((errorThreshold & UnreachableCode) != 0){\r", "-\t\tbuf.append(\"\\n-unreachable code: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & UnreachableCode) != 0){\r", "-\t\t\tbuf.append(\"\\n-unreachable code: WARNING\"); //$NON-NLS-1$\r", "-\t\t} else {\r", "-\t\t\tbuf.append(\"\\n-unreachable code: IGNORE\"); //$NON-NLS-1$\r", "-\tif ((errorThreshold & ImportProblem) != 0){\r", "-\t\tbuf.append(\"\\n-import problem: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & ImportProblem) != 0){\r", "-\t\t\tbuf.append(\"\\n-import problem: WARNING\"); //$NON-NLS-1$\r", "+\r", "+\tpublic String toString() {\r", "+\t\r", "+\r", "+\t\tStringBuffer buf = new StringBuffer(\"CompilerOptions:\"); //$NON-NLS-1$\r", "+\t\tif ((produceDebugAttributes & Vars) != 0){\r", "+\t\t\tbuf.append(\"\\n-local variables debug attributes: ON\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-import problem: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tbuf.append(\"\\n-local variables debug attributes: OFF\"); //$NON-NLS-1$\r", "-\t}\r", "-\tif ((errorThreshold & MethodWithConstructorName) != 0){\r", "-\t\tbuf.append(\"\\n-method with constructor name: ERROR\");\t\t //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & MethodWithConstructorName) != 0){\r", "-\t\t\tbuf.append(\"\\n-method with constructor name: WARNING\"); //$NON-NLS-1$\r", "+\t\tif ((produceDebugAttributes & Lines) != 0){\r", "+\t\t\tbuf.append(\"\\n-line number debug attributes: ON\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-method with constructor name: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tbuf.append(\"\\n-line number debug attributes: OFF\"); //$NON-NLS-1$\r", "-\t}\r", "-\tif ((errorThreshold & OverriddenPackageDefaultMethod) != 0){\r", "-\t\tbuf.append(\"\\n-overridden package default method: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & OverriddenPackageDefaultMethod) != 0){\r", "-\t\t\tbuf.append(\"\\n-overridden package default method: WARNING\"); //$NON-NLS-1$\r", "+\t\tif ((produceDebugAttributes & Source) != 0){\r", "+\t\t\tbuf.append(\"\\n-source debug attributes: ON\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-overridden package default method: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tbuf.append(\"\\n-source debug attributes: OFF\"); //$NON-NLS-1$\r", "-\t}\r", "-\tif ((errorThreshold & UsingDeprecatedAPI) != 0){\r", "-\t\tbuf.append(\"\\n-deprecation: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & UsingDeprecatedAPI) != 0){\r", "-\t\t\tbuf.append(\"\\n-deprecation: WARNING\"); //$NON-NLS-1$\r", "+\t\tif (preserveAllLocalVariables){\r", "+\t\t\tbuf.append(\"\\n-preserve all local variables: ON\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-deprecation: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tbuf.append(\"\\n-preserve all local variables: OFF\"); //$NON-NLS-1$\r", "-\t}\r", "-\tif ((errorThreshold & MaskedCatchBlock) != 0){\r", "-\t\tbuf.append(\"\\n-masked catch block: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & MaskedCatchBlock) != 0){\r", "-\t\t\tbuf.append(\"\\n-masked catch block: WARNING\"); //$NON-NLS-1$\r", "+\t\tif ((errorThreshold & UnreachableCode) != 0){\r", "+\t\t\tbuf.append(\"\\n-unreachable code: ERROR\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-masked catch block: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tif ((warningThreshold & UnreachableCode) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-unreachable code: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-unreachable code: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "-\t}\r", "-\tif ((errorThreshold & UnusedLocalVariable) != 0){\r", "-\t\tbuf.append(\"\\n-unused local variable: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & UnusedLocalVariable) != 0){\r", "-\t\t\tbuf.append(\"\\n-unused local variable: WARNING\"); //$NON-NLS-1$\r", "+\t\tif ((errorThreshold & ImportProblem) != 0){\r", "+\t\t\tbuf.append(\"\\n-import problem: ERROR\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-unused local variable: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tif ((warningThreshold & ImportProblem) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-import problem: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-import problem: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "-\t}\r", "-\tif ((errorThreshold & UnusedArgument) != 0){\r", "-\t\tbuf.append(\"\\n-unused parameter: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & UnusedArgument) != 0){\r", "-\t\t\tbuf.append(\"\\n-unused parameter: WARNING\"); //$NON-NLS-1$\r", "+\t\tif ((errorThreshold & MethodWithConstructorName) != 0){\r", "+\t\t\tbuf.append(\"\\n-method with constructor name: ERROR\");\t\t //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-unused parameter: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tif ((warningThreshold & MethodWithConstructorName) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-method with constructor name: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-method with constructor name: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "-\t}\r", "-\tif ((errorThreshold & AccessEmulation) != 0){\r", "-\t\tbuf.append(\"\\n-synthetic access emulation: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & AccessEmulation) != 0){\r", "-\t\t\tbuf.append(\"\\n-synthetic access emulation: WARNING\"); //$NON-NLS-1$\r", "+\t\tif ((errorThreshold & OverriddenPackageDefaultMethod) != 0){\r", "+\t\t\tbuf.append(\"\\n-overridden package default method: ERROR\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-synthetic access emulation: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tif ((warningThreshold & OverriddenPackageDefaultMethod) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-overridden package default method: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-overridden package default method: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "-\t}\r", "-\tif ((errorThreshold & NonExternalizedString) != 0){\r", "-\t\tbuf.append(\"\\n-non externalized string: ERROR\"); //$NON-NLS-1$\r", "-\t} else {\r", "-\t\tif ((warningThreshold & NonExternalizedString) != 0){\r", "-\t\t\tbuf.append(\"\\n-non externalized string: WARNING\"); //$NON-NLS-1$\r", "+\t\tif ((errorThreshold & UsingDeprecatedAPI) != 0){\r", "+\t\t\tbuf.append(\"\\n-deprecation: ERROR\"); //$NON-NLS-1$\r", "-\t\t\tbuf.append(\"\\n-non externalized string: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\tif ((warningThreshold & UsingDeprecatedAPI) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-deprecation: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-deprecation: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\tif ((errorThreshold & MaskedCatchBlock) != 0){\r", "+\t\t\tbuf.append(\"\\n-masked catch block: ERROR\"); //$NON-NLS-1$\r", "+\t\t} else {\r", "+\t\t\tif ((warningThreshold & MaskedCatchBlock) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-masked catch block: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-masked catch block: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif ((errorThreshold & UnusedLocalVariable) != 0){\r", "+\t\t\tbuf.append(\"\\n-unused local variable: ERROR\"); //$NON-NLS-1$\r", "+\t\t} else {\r", "+\t\t\tif ((warningThreshold & UnusedLocalVariable) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-unused local variable: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-unused local variable: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif ((errorThreshold & UnusedArgument) != 0){\r", "+\t\t\tbuf.append(\"\\n-unused parameter: ERROR\"); //$NON-NLS-1$\r", "+\t\t} else {\r", "+\t\t\tif ((warningThreshold & UnusedArgument) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-unused parameter: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-unused parameter: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif ((errorThreshold & AccessEmulation) != 0){\r", "+\t\t\tbuf.append(\"\\n-synthetic access emulation: ERROR\"); //$NON-NLS-1$\r", "+\t\t} else {\r", "+\t\t\tif ((warningThreshold & AccessEmulation) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-synthetic access emulation: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-synthetic access emulation: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif ((errorThreshold & NonExternalizedString) != 0){\r", "+\t\t\tbuf.append(\"\\n-non externalized string: ERROR\"); //$NON-NLS-1$\r", "+\t\t} else {\r", "+\t\t\tif ((warningThreshold & NonExternalizedString) != 0){\r", "+\t\t\t\tbuf.append(\"\\n-non externalized string: WARNING\"); //$NON-NLS-1$\r", "+\t\t\t} else {\r", "+\t\t\t\tbuf.append(\"\\n-non externalized string: IGNORE\"); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tswitch(targetJDK){\r", "+\t\t\tcase JDK1_1 :\r", "+\t\t\t\tbuf.append(\"\\n-target JDK: 1.1\"); //$NON-NLS-1$\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase JDK1_2 :\r", "+\t\t\t\tbuf.append(\"\\n-target JDK: 1.2\"); //$NON-NLS-1$\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase JDK1_3 :\r", "+\t\t\t\tbuf.append(\"\\n-target JDK: 1.3\"); //$NON-NLS-1$\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase JDK1_4 :\r", "+\t\t\t\tbuf.append(\"\\n-target JDK: 1.4\"); //$NON-NLS-1$\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t\tif (isPrivateConstructorAccessChangingVisibility){\r", "+\t\t\tbuf.append(\"\\n-private constructor access emulation: extra argument\"); //$NON-NLS-1$\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-private constructor access emulation: make default access\"); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\tbuf.append(\"\\n-verbose : \" + (verbose ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "+\t\tbuf.append(\"\\n-produce reference info : \" + (produceReferenceInfo ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "+\t\tbuf.append(\"\\n-parse literal expressions as constants : \" + (parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "+\t\tbuf.append(\"\\n-runtime exception name for compile error : \" + runtimeExceptionNameForCompileError); //$NON-NLS-1$\r", "+\t\treturn buf.toString();\r", "-\tswitch(targetJDK){\r", "-\t\tcase JDK1_1 :\r", "-\t\t\tbuf.append(\"\\n-target JDK: 1.1\"); //$NON-NLS-1$\r", "-\t\t\tbreak;\r", "-\t\tcase JDK1_2 :\r", "-\t\t\tbuf.append(\"\\n-target JDK: 1.2\"); //$NON-NLS-1$\r", "-\t}\r", "-\tbuf.append(\"\\n-verbose : \" + (verbose ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "-\tbuf.append(\"\\n-produce reference info : \" + (produceReferenceInfo ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "-\tbuf.append(\"\\n-parse literal expressions as constants : \" + (parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "-\tbuf.append(\"\\n-runtime exception name for compile error : \" + runtimeExceptionNameForCompileError); //$NON-NLS-1$\r", "-\treturn buf.toString();\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d272d917df5c17239d0e644167cb2f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java", "commitBeforeChange": "189d8495dd269a3e1a6eabd4118e6586a867755d", "commitAfterChange": "895a706ac192edcb7ec7f64367020a5215af0491", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": " public StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": " public StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+}", "-\treturn output.append(\"<CompleteOnType:\").append(token).append('>'); //$NON-NLS-1$", "+\tswitch (this.kind) {", "+\t\tcase K_CLASS :", "+\t\t\toutput.append(\"<CompleteOnClass:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t\tcase K_INTERFACE :", "+\t\t\toutput.append(\"<CompleteOnInterface:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t\tcase K_EXCEPTION :", "+\t\t\toutput.append(\"<CompleteOnException:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\toutput.append(\"<CompleteOnType:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t}", "+\treturn output.append(token).append('>');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e586c2a4270adfd3dfd8d5010602aec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnQualifiedTypeReference.java", "commitBeforeChange": "189d8495dd269a3e1a6eabd4118e6586a867755d", "commitAfterChange": "895a706ac192edcb7ec7f64367020a5215af0491", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": " public StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": " public StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["-public StringBuffer printExpression(int indent, StringBuffer output) {", "-\toutput.append(\"<CompleteOnType:\"); //$NON-NLS-1$", "+}", "+public StringBuffer printExpression(int indent, StringBuffer output) {", "+\tswitch (this.kind) {", "+\t\tcase K_CLASS :", "+\t\t\toutput.append(\"<CompleteOnClass:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t\tcase K_INTERFACE :", "+\t\t\toutput.append(\"<CompleteOnInterface:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t\tcase K_EXCEPTION :", "+\t\t\toutput.append(\"<CompleteOnException:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\toutput.append(\"<CompleteOnType:\");//$NON-NLS-1$", "+\t\t\tbreak;", "+\t}"]}], "num": 59319}
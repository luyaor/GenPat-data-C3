{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c1062904acc4b77f5a9327457185e26", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ded23f8d9dde4bae9a7887b936e4c1ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "c8ffb22b4250bd8dd401a9a71d774c9c2685cafa", "commitAfterChange": "4d43f936f5f9dea415af025f583e6b7e2b8346c9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\tReferenceBinding superType;", "-\tif (this.type.isClass()) {", "-\t\tsuperType = this.type.superclass();", "-\t} else { // check interface methods against Object", "-\t\tsuperType = this.type.scope.getJavaLangObject();", "-\t}", "+\tReferenceBinding superType = this.type.isClass()", "+\t\t? this.type.superclass()", "+\t\t: this.type.scope.getJavaLangObject(); // check interface methods against Object", "-\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType && method.areParametersEqual(existingMethods[i])) {", "-\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) ", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "+\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) ", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "-\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType && method.areParametersEqual(current[i])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c1a5c908aa6a0d2cf5a75f781dc910", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "4290d9d156b3fffdf4fa47faed755763dff62df4", "commitAfterChange": "ec3d2b8d7bc5e4b4b2d91a6a1cfd252341798462", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType) {", "-\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i])) {", "-\t\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "-\t\t\t\t\t\t\t\t\t\tcheckDefaultAbstractMethod(method);", "-\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "+\t\t\t\t\t\t\t\t\tcheckPackagePrivateAbstractMethod(method);", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))", "-\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "+\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) ", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {", "-\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "-\t\t\t\t\t\t\t\t\t\tbreak foundMatch;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "+\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "+\t\t\t\t\t\t\t\t\tbreak foundMatch;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b272b2ab8df0033b2f2629d3ef0c55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "74958747d6dfa7074d7be26e7090f615c8b5cb63", "commitAfterChange": "2d759a713e644c7b941823a3d4e9e44e73ef6b04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\tMethodBinding[] methods = superType.methods();", "+\t\t\tMethodBinding[] methods = superType.unResolvedMethods();", "-\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType && method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\tif (areTypesEqual(method.returnType, existingMethods[i].returnType) && areParametersEqual(method, existingMethods[i])) {", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "+\t\t\t\t\t\t\tif (areTypesEqual(method.returnType, nonVisibleDefaultMethods[i].returnType)", "-\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) ", "+\t\t\t\t\t\t\t\t&& areParametersEqual(method, nonVisibleDefaultMethods[i])) ", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType && method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\tif (areTypesEqual(method.returnType, current[i].returnType) && areParametersEqual(method, current[i])) {", "-\t\t\t\t\tMethodBinding[] methods = superType.methods();", "+\t\t\t\t\tMethodBinding[] methods = superType.unResolvedMethods();"]}], "num": 68808}
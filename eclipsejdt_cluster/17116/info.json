{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ca82ad85e7f532bbc0d0bd5d812b171", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69bbacff07112ab86a309c96d6996fcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "diff": ["-\t\tTypeDeclaration typeDeclaration = null;", "-\t\tAbstractMethodDeclaration methodDeclaration = null;", "+\t\tTypeParameter[] parameters = null;", "-\t\t\t\tmethodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tAbstractMethodDeclaration methodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tparameters = methodDeclaration.typeParameters();", "-\t\t\t\ttypeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tTypeDeclaration typeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tparameters = typeDeclaration.typeParameters;", "-\t\tTypeParameter[] parameters = typeDeclaration==null ? methodDeclaration.typeParameters() : typeDeclaration.typeParameters;", "-\t\tint typeParametersLength = parameters == null ? 0 : parameters.length;", "-\t\tif (paramTypeParamLength == 0) {", "-\t\t\tif (reportMissing) {", "-\t\t\t\tfor (int i = 0, l=parameters.length; i<l; i++) {", "-\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameters[i].name, parameters[i].sourceStart, parameters[i].sourceEnd, modifiers);", "+\t\tif (parameters != null) {", "+\t\t\tint typeParametersLength = parameters.length;", "+\t\t\tif (paramTypeParamLength == 0) {", "+\t\t\t\tif (reportMissing) {", "+\t\t\t\t\tfor (int i = 0, l=typeParametersLength; i<l; i++) {", "+\t\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameters[i].name, parameters[i].sourceStart, parameters[i].sourceEnd, modifiers);", "+\t\t\t\t\t}", "-\t\t\t}", "-\t\t// Otherwise verify that all param tags match type parameters", "-\t\t} else if (typeVariables.length == typeParametersLength) {", "-\t\t\tTypeVariableBinding[] bindings = new TypeVariableBinding[paramTypeParamLength];", "-\t\t\t// Scan all @param tags", "-\t\t\tfor (int i = 0; i < paramTypeParamLength; i++) {", "-\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\t\tTypeBinding paramBindind = param.internalResolveType(scope);", "-\t\t\t\tif (paramBindind != null && paramBindind.isValidBinding()) {", "-\t\t\t\t\tif (paramBindind.isTypeVariable()) {", "-\t\t\t\t\t\t// Verify duplicated tags", "-\t\t\t\t\t\tboolean duplicate = false;", "-\t\t\t\t\t\tfor (int j = 0; j < i && !duplicate; j++) {", "-\t\t\t\t\t\t\tif (bindings[j] == param.resolvedType) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().javadocDuplicatedParamTag(param.token, param.sourceStart, param.sourceEnd, modifiers);", "-\t\t\t\t\t\t\t\tduplicate = true;", "+\t\t\t// Otherwise verify that all param tags match type parameters", "+\t\t\t} else if (typeVariables.length == typeParametersLength) {", "+\t\t\t\tTypeVariableBinding[] bindings = new TypeVariableBinding[paramTypeParamLength];", "+", "+\t\t\t\t// Scan all @param tags", "+\t\t\t\tfor (int i = 0; i < paramTypeParamLength; i++) {", "+\t\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "+\t\t\t\t\tTypeBinding paramBindind = param.internalResolveType(scope);", "+\t\t\t\t\tif (paramBindind != null && paramBindind.isValidBinding()) {", "+\t\t\t\t\t\tif (paramBindind.isTypeVariable()) {", "+\t\t\t\t\t\t\t// Verify duplicated tags", "+\t\t\t\t\t\t\tboolean duplicate = false;", "+\t\t\t\t\t\t\tfor (int j = 0; j < i && !duplicate; j++) {", "+\t\t\t\t\t\t\t\tif (bindings[j] == param.resolvedType) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().javadocDuplicatedParamTag(param.token, param.sourceStart, param.sourceEnd, modifiers);", "+\t\t\t\t\t\t\t\t\tduplicate = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!duplicate) {", "+\t\t\t\t\t\t\t\tbindings[i] = (TypeVariableBinding) param.resolvedType;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().javadocUndeclaredParamTagName(param.token, param.sourceStart, param.sourceEnd, modifiers);", "-\t\t\t\t\t\tif (!duplicate) {", "-\t\t\t\t\t\t\tbindings[i] = (TypeVariableBinding) param.resolvedType;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\t// Look for undocumented type parameters", "+\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\t\tTypeParameter parameter = parameters[i];", "+\t\t\t\t\tboolean found = false;", "+\t\t\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "+\t\t\t\t\t\tif (parameter.binding == bindings[j]) {", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\tbindings[j] = null;", "-\t\t\t\t\t} else {", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!found && reportMissing) {", "+\t\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameter.name, parameter.sourceStart, parameter.sourceEnd, modifiers);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t\t// Report invalid param", "+\t\t\t\tfor (int i=0; i<paramTypeParamLength; i++) {", "+\t\t\t\t\tif (bindings[i] != null) {", "+\t\t\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// Look for undocumented type parameters", "-\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\tTypeParameter parameter = parameters[i];", "-\t\t\t\tboolean found = false;", "-\t\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "-\t\t\t\t\tif (parameter.binding == bindings[j]) {", "-\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\tbindings[j] = null;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (!found && reportMissing) {", "-\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameter.name, parameter.sourceStart, parameter.sourceEnd, modifiers);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// Report invalid param", "-\t\t\tfor (int i=0; i<paramTypeParamLength; i++) {", "-\t\t\t\tif (bindings[i] != null) {", "-\t\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\t\t\tscope.problemReporter().javadocUndeclaredParamTagName(param.token, param.sourceStart, param.sourceEnd, modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74429f3ab0e7db4e459a7454c3770985", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate char[][] missingTypeParameterTags(Binding paramNameRefBinding, Scope scope)", "signatureAfterChange": " \tprivate char[][] missingTypeParameterTags(Binding paramNameRefBinding, Scope scope)", "diff": ["-\t\tTypeDeclaration typeDeclaration = null;", "-\t\tAbstractMethodDeclaration methodDeclaration = null;", "+\t\tTypeParameter[] parameters =  null;", "-\t\t\t\tmethodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tAbstractMethodDeclaration methodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tparameters = methodDeclaration.typeParameters();", "-\t\t\t\ttypeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tTypeDeclaration typeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tparameters = typeDeclaration.typeParameters;", "-\t\tTypeParameter[] parameters = typeDeclaration==null ? methodDeclaration.typeParameters() : typeDeclaration.typeParameters;", "-\t\tint typeParametersLength = parameters == null ? 0 : parameters.length;", "-\t\tif (paramTypeParamLength == 0) {", "-\t\t\tchar[][] missingParams = new char[typeParametersLength][];", "-\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\tmissingParams[i] = parameters[i].name;", "+\t\tif (parameters != null) {", "+\t\t\tint typeParametersLength = parameters.length;", "+\t\t\tif (paramTypeParamLength == 0) {", "+\t\t\t\tchar[][] missingParams = new char[typeParametersLength][];", "+\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\t\tmissingParams[i] = parameters[i].name;", "+\t\t\t\t}", "+\t\t\t\treturn missingParams;", "-\t\t\treturn missingParams;", "-\t\t}", "-\t\t// Look for missing type parameter", "-\t\tchar[][] missingParams = new char[typeParametersLength][];", "-\t\tint size = 0;", "-\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\tTypeParameter parameter = parameters[i];", "-\t\t\tboolean found = false;", "-\t\t\tint paramNameRefCount = 0;", "-\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "-\t\t\t\tif (parameter.binding == this.paramTypeParameters[j].resolvedType) {", "-\t\t\t\t\tif (parameter.binding == paramNameRefBinding) { // do not count first occurence of param nmae reference", "-\t\t\t\t\t\tparamNameRefCount++;", "-\t\t\t\t\t\tfound = paramNameRefCount > 1;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfound = true;", "+\t\t\t// Look for missing type parameter", "+\t\t\tchar[][] missingParams = new char[typeParametersLength][];", "+\t\t\tint size = 0;", "+\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\tTypeParameter parameter = parameters[i];", "+\t\t\t\tboolean found = false;", "+\t\t\t\tint paramNameRefCount = 0;", "+\t\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "+\t\t\t\t\tif (parameter.binding == this.paramTypeParameters[j].resolvedType) {", "+\t\t\t\t\t\tif (parameter.binding == paramNameRefBinding) { // do not count first occurence of param nmae reference", "+\t\t\t\t\t\t\tparamNameRefCount++;", "+\t\t\t\t\t\t\tfound = paramNameRefCount > 1;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t}", "+\t\t\t\tif (!found) {", "+\t\t\t\t\tmissingParams[size++] = parameter.name;", "+\t\t\t\t}", "-\t\t\tif (!found) {", "-\t\t\t\tmissingParams[size++] = parameter.name;", "+\t\t\tif (size > 0) {", "+\t\t\t\tif (size != typeParametersLength) {", "+\t\t\t\t\tSystem.arraycopy(missingParams, 0, missingParams = new char[size][], 0, size);", "+\t\t\t\t}", "+\t\t\t\treturn missingParams;", "-\t\t}", "-\t\tif (size > 0) {", "-\t\t\tif (size != typeParametersLength) {", "-\t\t\t\tSystem.arraycopy(missingParams, 0, missingParams = new char[size][], 0, size);", "-\t\t\t}", "-\t\t\treturn missingParams;"]}], "num": 17116}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc6f3b78dcfd104e37856b513ca5f2af", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7b4204843280eef3d95b4a68115100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 48, "signatureBeforeChange": " \t \tpublic final CopySourceInfo markAsRangeCopySource(ASTNode parent, StructuralPropertyDescriptor property, ASTNode first, ASTNode last, boolean isMove)", "signatureAfterChange": " \t \tpublic final CopySourceInfo createRangeCopy(ASTNode parent, StructuralPropertyDescriptor childProperty, ASTNode first, ASTNode last, boolean isMove, ASTNode internalPlaceholder, ASTNode replacingNode, TextEditGroup editGroup)", "diff": ["-\tpublic final CopySourceInfo markAsRangeCopySource(ASTNode parent, StructuralPropertyDescriptor property, ASTNode first, ASTNode last, boolean isMove) {", "-\t\tCopySourceInfo copySource= new CopySourceInfo(parent, property, first, last, isMove);", "-\t\tassertNoOverlap(copySource);", "+\t", "+\tpublic final CopySourceInfo createRangeCopy(ASTNode parent, StructuralPropertyDescriptor childProperty, ASTNode first, ASTNode last, boolean isMove, ASTNode internalPlaceholder, ASTNode replacingNode, TextEditGroup editGroup) {", "+\t\tCopySourceInfo copyInfo= createCopySourceInfo(null, internalPlaceholder, isMove);", "+\t\tinternalPlaceholder.setProperty(INTERNAL_PLACEHOLDER_PROPERTY, internalPlaceholder);", "-\t\tif (this.rangeCopySources == null) {", "-\t\t\tthis.rangeCopySources= new ArrayList();", "-\t\t}", "-\t\tthis.rangeCopySources.add(copySource);", "-\t\treturn copySource;", "-\t}", "+\t\tNodeRangeInfo copyRangeInfo= new NodeRangeInfo(parent, childProperty, first, last, copyInfo, replacingNode, editGroup);", "+\t\t", "+\t\tif (this.nodeRangeInfos == null) {", "+\t\t\tthis.nodeRangeInfos= new HashMap();", "+\t\t}", "+\t\tPropertyLocation loc= new PropertyLocation(parent, childProperty);", "+\t\tList innerList= (List) this.nodeRangeInfos.get(loc);", "+\t\tif (innerList == null) {", "+\t\t\tinnerList= new ArrayList(2);", "+\t\t\tthis.nodeRangeInfos.put(loc, innerList);", "+\t\t} else {", "+\t\t\tassertNoOverlap(listEvent, indexFirst, indexLast, innerList);", "+\t\t}", "+\t\tinnerList.add(copyRangeInfo);", "+\t\t", "+\t\t", "+\t\treturn copyInfo;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "739c67c5ad32819e02fd0f71e42c3c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a6d9bda80e868cca3f3164e68cf46fd5fb2642ae", "commitAfterChange": "b91ada4688442ba390f3bab334c211412d8a03f2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "signatureAfterChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "diff": ["-\t\t", "-\t\t", "-\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "-\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "-\t\tTextEditGroup editGroup= getEditGroup(event);", "-\t\t", "-\t\t\tint tok= getScanner().readNext(offset, true);", "-\t\t\tint startPos= getScanner().getCurrentStartOffset();", "-\t\t\tint endPos= startPos;", "+\t\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "+\t\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "+\t\t\tTextEditGroup editGroup= getEditGroup(event);", "+\t\t", "+\t\t\tTokenScanner scanner= getScanner();", "+", "+\t\t\tint tok= scanner.readNext(offset, false);", "+\t\t\tint startPos= scanner.getCurrentStartOffset();", "+\t\t\tint nextStart= startPos;", "+\t\t\t\tif (TokenScanner.isComment(tok)) {", "+\t\t\t\t\ttok= scanner.readNext(true); // next non-comment token", "+\t\t\t\t}", "-\t\t\t\ttok= getScanner().readNext(true);", "-\t\t\t\tint currPos= endPos;", "-\t\t\t\tendPos= getScanner().getCurrentStartOffset();", "+\t\t\t\ttok= getScanner().readNext(false); // include comments", "+\t\t\t\tint currPos= nextStart;", "+\t\t\t\tnextStart= getScanner().getCurrentStartOffset();", "-\t\t\t\t\tdoTextRemove(currPos, endPos - currPos, editGroup);", "+\t\t\t\t\tdoTextRemove(currPos, nextStart - currPos, editGroup);", "-\t\t\t\tif (startPos != endPos) {", "+\t\t\t\tif (startPos != nextStart) {", "-\t\t\t\tdoTextInsert(endPos, buf.toString(), editGroup);", "+\t\t\t\tdoTextInsert(nextStart, buf.toString(), editGroup);", "-\t\t\t// ignore", "-\t\t}\t\t", "+\t\t\thandleException(e);", "+\t\t}"]}], "num": 21053}
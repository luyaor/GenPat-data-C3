{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8167e5e4c06655d8f94aeaf3b151562", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c33c870498576d5c213df30b8fe832", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType)", "signatureAfterChange": " \tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType, boolean compact)", "diff": ["-\tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType) {", "-\t\tboolean isConstructor = CharOperation.equals(methodName, INIT);", "+\tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType, boolean compact) {", "+\t\tfinal boolean isConstructor = CharOperation.equals(methodName, INIT);", "-\t\tif (!isConstructor) {", "-\t\t\t// return type", "-\t\t\tif (includeReturnType) {", "-\t\t\t\tchar[] rts = Signature.getReturnType(methodSignature);", "-\t\t\t\tappendTypeSignature(rts, 0 , buffer);", "-\t\t\t\tbuffer.append(' ');", "+\t\t// decode declaring class name", "+\t\t// it can be either an array signature or a type signature", "+\t\tif (declaringClass.length > 0) {", "+\t\t\tchar[] declaringClassSignature = null;", "+\t\t\tif (declaringClass[0] == Signature.C_ARRAY) {", "+\t\t\t\tCharOperation.replace(declaringClass, '/', '.');", "+\t\t\t\tdeclaringClassSignature = Signature.toCharArray(declaringClass);", "+\t\t\t} else {", "+\t\t\t\tCharOperation.replace(declaringClass, '/', '.');", "+\t\t\t\tdeclaringClassSignature = declaringClass;", "+\t\t\t}", "+\t\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('.', declaringClassSignature);", "+\t\t\tif (compact && lastIndexOfSlash != -1) {", "+\t\t\t\tbuffer.append(declaringClassSignature, lastIndexOfSlash + 1, declaringClassSignature.length - lastIndexOfSlash - 1);", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(declaringClassSignature);", "-\t\t", "+", "-\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('/', declaringClass);", "-\t\tif (lastIndexOfSlash != -1) {", "-\t\t\tbuffer.append(declaringClass, lastIndexOfSlash + 1, declaringClass.length - lastIndexOfSlash - 1);", "-\t\t} else {", "-\t\t\tbuffer.append(declaringClass);", "-\t\t}", "-\t", "-\t\t\tif (i == max - 1) {", "-\t\t\t\tappendTypeSignature(pts[i], 0 , buffer);", "-\t\t\t} else {", "-\t\t\t\tappendTypeSignature(pts[i], 0 , buffer);", "-\t\t\t}", "+\t\t\tappendTypeSignature(pts[i], 0 , buffer, compact);", "+\t\t", "+\t\tif (!isConstructor) {", "+\t\t\tbuffer.append(\" : \"); //$NON-NLS-1$", "+\t\t\t// return type", "+\t\t\tif (includeReturnType) {", "+\t\t\t\tchar[] rts = Signature.getReturnType(methodSignature);", "+\t\t\t\tappendTypeSignature(rts, 0 , buffer, compact);", "+\t\t\t\tbuffer.append(' ');", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfec87df7ece60aea0a6a6382407d370", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "299c63114977fb41c44f086c7b4cf110448a0c23", "commitAfterChange": "e7fead4adac4e5d682bbdf8cb7aaa3f524aab927", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope)", "signatureAfterChange": " public TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope)", "diff": ["+\t// confer MessageSend.checkAgainstFinalTargetType(,,):", "+\tif (this.binding instanceof ParameterizedGenericMethodBinding) {", "+\t\tInferenceContext18 ctx = getInferenceContext((ParameterizedMethodBinding) this.binding);", "+\t\tif (ctx != null && ctx.stepCompleted < InferenceContext18.TYPE_INFERRED) {", "+\t\t\tthis.typeExpected = targetType;", "+\t\t\tMethodBinding updatedBinding = ctx.inferInvocationType(this, (ParameterizedGenericMethodBinding) this.binding);", "+\t\t\tif (updateBindings(updatedBinding, targetType)) {", "+\t\t\t\tASTNode.resolvePolyExpressionArguments(this, updatedBinding, scope);", "+\t\t\t}", "+\t\t}", "+\t}", "-\t\t// also: should this trigger any propagation to inners, too?", "-\treturn super.checkAgainstFinalTargetType(targetType, scope);", "+\treturn this.resolvedType;"]}], "num": 59660}
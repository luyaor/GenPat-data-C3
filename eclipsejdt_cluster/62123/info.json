{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee4d8f8432a6a6d5914fb87cef41ef39", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5074d67bf77f94d55b9147d053a9431c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "3ec169b44d3736817b7c4ce9bf1791fcda57b692", "commitAfterChange": "4a83e27deea774790864c829cd5109d435b50edd", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " public boolean isProvablyDistinctFrom(TypeBinding otherType)", "signatureAfterChange": " public boolean isProvablyDistinctFrom(TypeBinding otherType)", "diff": ["-\tif (this.isTypeVariable()) return false;", "-\tif (this.isWildcard()) return false;", "-\tif (otherType.isTypeVariable()) return false;", "-\tif (otherType.isWildcard()) return false;", "-\tif (this.isParameterizedType()) {", "-\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) this;", "-\t\tif (parameterizedType.type.isProvablyDistinctFrom(otherType.erasure())) return true;", "-\t\tif (otherType.isGenericType()) return false;", "-\t\tif (otherType.isRawType()) return false;", "-\t\tif (otherType.isParameterizedType()) {", "-\t\t\tTypeBinding[] arguments = parameterizedType.arguments;", "-\t\t\tif (arguments == null) return false;", "-\t\t\tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherType;", "-\t\t\tTypeBinding[] otherArguments = otherParameterizedType. arguments;", "-\t\t\tif (otherArguments == null) return false;", "-\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "-\t\t\t\tif (arguments[i].isProvablyDistinctFrom(otherArguments[i])) return true;", "-\t\t\t}", "+\tswitch (otherType.bindingType()) {", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\tcase Binding.WILDCARD_TYPE :", "-\t\t}", "-\t} else if (this.isRawType()) {", "-\t\treturn this.erasure().isProvablyDistinctFrom(otherType.erasure());", "-\t} else if (this.isGenericType()) {", "-\t\treturn this != otherType.erasure();", "+\t}", "+\tswitch(bindingType()) {", "+\t\t", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn false;", "+\t\t\t", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) this;", "+\t\t\tif (parameterizedType.type.isProvablyDistinctFrom(otherType.erasure())) return true;", "+\t\t\tswitch (otherType.bindingType()) {", "+\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\treturn false;", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tTypeBinding[] arguments = parameterizedType.arguments;", "+\t\t\t\t\tif (arguments == null) return false;", "+\t\t\t\t\tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherType;", "+\t\t\t\t\tTypeBinding[] otherArguments = otherParameterizedType. arguments;", "+\t\t\t\t\tif (otherArguments == null) return false;", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "+\t\t\t\t\t\tif (arguments[i].isProvablyDistinctFrom(otherArguments[i])) return true;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t", "+\t\t\t}", "+\t\t\tbreak;", "+", "+\t\tcase Binding.RAW_TYPE :", "+\t\t\treturn this.erasure().isProvablyDistinctFrom(otherType.erasure());", "+\t\t\t", "+\t\tcase Binding.GENERIC_TYPE :", "+\t\t\treturn this != otherType.erasure();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d7c736a3a6b623d3a0a6c538ab0ec9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "dedd0de2d483ac96da80680e3e3d745b2d68aa6c", "commitAfterChange": "2ddb5bdb136d602bfa0ac6f00f3f620fd9563fb5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\tif (exceptionType == null) return null;", "-\t\tboolean hasError = false;", "-\t\tif (exceptionType.isBoundParameterizedType()) {", "-\t\t\tscope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);", "+\t\tboolean hasError;", "+\t\tif (exceptionType == null) {", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\tif (exceptionType.isTypeVariable()) {", "-\t\t\tscope.problemReporter().invalidTypeVariableAsException(exceptionType, this);", "-\t\t\thasError = true;", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\tif (exceptionType.isArrayType() && ((ArrayBinding) exceptionType).leafComponentType == TypeBinding.VOID) {", "-\t\t\tscope.problemReporter().variableTypeCannotBeVoidArray(this);", "-\t\t\thasError = true;", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\tif (exceptionType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) == null) {", "-\t\t\tscope.problemReporter().cannotThrowType(this.type, exceptionType);", "-\t\t\thasError = true;", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\t", "+\t\t} else {", "+\t\t\thasError = false;", "+\t\t\tswitch(exceptionType.kind()) {", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tif (exceptionType.isBoundParameterizedType()) {", "+\t\t\t\t\t\thasError = true;", "+\t\t\t\t\t\tscope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);", "+\t\t\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.TYPE_PARAMETER :\t\t\t\t\t", "+\t\t\t\t\tscope.problemReporter().invalidTypeVariableAsException(exceptionType, this);", "+\t\t\t\t\thasError = true;", "+\t\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\t\tif (((ArrayBinding) exceptionType).leafComponentType == TypeBinding.VOID) {", "+\t\t\t\t\t\tscope.problemReporter().variableTypeCannotBeVoidArray(this);", "+\t\t\t\t\t\thasError = true;", "+\t\t\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (exceptionType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) == null) {", "+\t\t\t\tscope.problemReporter().cannotThrowType(this.type, exceptionType);", "+\t\t\t\thasError = true;", "+\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t}", "+\t\t}\t\t"]}], "num": 62123}
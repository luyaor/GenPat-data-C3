{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86b26ad88ddbb0726f2415fd88e6b92e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54847f19c8f14165de89f4b721aa34e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "66645ff7b2e7900a6e51de489fc3a747bdbf1458", "commitAfterChange": "a24bdada3de440570b8b103bca0325b799f298f1", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 76, "signatureBeforeChange": " \t \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["-\t", "+// WORK log test files in all failure cases (ez cut and paste)\t", "-\t\t\t\t\tassertTrue(\"Unexpected success\", requestor.hasErrors);", "+\t\t\t\t\tif (!requestor.hasErrors) {", "+\t\t\t\t\t\tlogTestFiles(true, testFiles);", "+\t\t\t\t\t\tfail(\"Unexpected success\");", "+\t\t\t\t\t}", "-\t\t\t\t\tassertEquals(\"Unexpected failure\", \"\", requestor.problemLog);", "+\t\t\t\t\tif (!\"\".equals(requestor.problemLog)) {", "+\t\t\t\t\t\tlogTestFiles(true, testFiles);", "+\t\t\t\t\t\tassertEquals(\"Unexpected failure\", \"\", requestor.problemLog);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a314b86fedca25260fbf461a5645b073", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["+\t\tresult.setName((SimpleName) getName().clone(target));", "-\t\t\tresult.setReceiverType((AnnotatableType) ASTNode.copySubtree(target, this.receiverType));", "-\t\t\tresult.setReceiverQualifier((SimpleName) ASTNode.copySubtree(target, this.receiverQualifier));", "-\t\t\tresult.extraDimensionInfos.addAll(", "-\t\t\t\t\tASTNode.copySubtrees(target, this.extraDimensionInfos));", "+\t\t\tresult.setReceiverType((AnnotatableType) ASTNode.copySubtree(target, getReceiverType()));", "+\t\t\tresult.setReceiverQualifier((SimpleName) ASTNode.copySubtree(target, getReceiverQualifier()));", "+\t\t}", "+\t\tresult.parameters().addAll(", "+\t\t\tASTNode.copySubtrees(target, parameters()));", "+\t\tif (this.ast.apiLevel >= AST.JLS8) {", "+\t\t\tresult.extraDimensions().addAll(ASTNode.copySubtrees(target, extraDimensions()));", "-\t\tresult.setName((SimpleName) getName().clone(target));", "-\t\tresult.parameters().addAll(", "-\t\t\tASTNode.copySubtrees(target, parameters()));", "-\t\tif  (this.ast.apiLevel() < AST.JLS8) {", "-\t\t\tresult.thrownExceptions().addAll(", "-\t\t\tASTNode.copySubtrees(target, thrownExceptions()));\t\t\t", "+\t\tif (this.ast.apiLevel() >= AST.JLS8) {", "+\t\t\tresult.thrownExceptionTypes().addAll(ASTNode.copySubtrees(target, thrownExceptionTypes()));", "-\t\t\tresult.thrownExceptionTypes().addAll(", "-\t\t\tASTNode.copySubtrees(target, thrownExceptionTypes()));", "-\t\t\t", "+\t\t\tresult.thrownExceptions().addAll(ASTNode.copySubtrees(target, thrownExceptions()));\t\t\t"]}], "num": 17681}
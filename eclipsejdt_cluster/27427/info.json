{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73416766879e9d7f7a26a57e2ed59b72", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "debe38bf8f76ebb91d829ab0ef5cb584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "30d928a4ed94bdfc40106ae995b6d295a0fd9974", "commitAfterChange": "a48910fdf9f121b84d90ee710289f4f2c5ac9f37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "diff": ["-\t\t\tExpression expression = this.nullReferences[i];", "-\t\t\tLocalVariableBinding local = this.nullLocals[i];", "-\t\t\tswitch (this.nullCheckTypes[i]) {", "-\t\t\t\tcase CAN_ONLY_NULL_NON_NULL :", "-\t\t\t\tcase CAN_ONLY_NULL:", "-\t\t\t\t\tif (flowInfo.isProtectedNonNull(local)) {", "-\t\t\t\t\t\tif (nullCheckTypes[i] == CAN_ONLY_NULL_NON_NULL) {", "-\t\t\t\t\t\t\tscope.problemReporter().localVariableCannotBeNull(local, expression);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn; // WORK wrong, test second variable!", "-\t\t\t\t\t}", "-\t\t\t\t\tif (flowInfo.isProtectedNull(local)) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, expression);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase MAY_NULL :", "-\t\t\t\t\tif (flowInfo.isProtectedNonNull(local)) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (flowInfo.isProtectedNull(local)) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, expression);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\t// never happens", "-\t\t\t}", "-\t\t\tthis.parent.recordUsingNullReference(scope, local, expression, ", "-\t\t\t\t\tthis.nullCheckTypes[i], flowInfo);", "+\t\t\tthis.parent.recordUsingNullReference(scope, this.nullLocals[i], ", "+\t\t\t\t\tthis.nullReferences[i],\tthis.nullCheckTypes[i], flowInfo);", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff7ca3611e8911c591e9730380a20937", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "diff": ["-\t\t\t\tthis.parent.recordNullityMismatch(scope, this.nullReferences[i],", "+\t\t\t\tthis.parent.recordNullityMismatch(scope, (Expression)this.nullReferences[i],", "-\t\t\tExpression expression = this.nullReferences[i];", "+\t\t\tASTNode location = this.nullReferences[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, location);", "+\t\t\t\t\tExpression expression = (Expression) location;", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, expression);", "+\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, location);", "-\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, expression);", "+\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, location);", "-\t\t\t\t\t\tscope.problemReporter().nullityMismatch(expression, this.expectedTypes[i], nullStatus, annotationName);", "+\t\t\t\t\t\tscope.problemReporter().nullityMismatch((Expression) location, this.expectedTypes[i], nullStatus, annotationName);"]}], "num": 27427}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d88fd2a5496884942a8d9a297186e3b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e3ea3f10f2f4afb00a00078ee94d17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "f9968462ad3e78057baba9747e91f7b6e3ea59e1", "commitAfterChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "signatureAfterChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "diff": ["-\tMethodBinding substitute = computeSubstituteMethod(inheritedMethod, method);", "-\treturn substitute != null && doesSubstituteMethodOverride(method, substitute);", "-}", "+\tif (!couldMethodOverride(method, inheritedMethod))", "+", "+\t// need to switch back to the original if the method is from a ParameterizedType", "+\tif (method.declaringClass.isParameterizedType())", "+\t\tmethod = method.original();", "+", "+\tinheritedMethod = inheritedMethod.original();", "+\tTypeBinding match = method.declaringClass.findSuperTypeOriginatingFrom(inheritedMethod.declaringClass);", "+\tif (!(match instanceof ReferenceBinding))", "+\t\treturn false; // method's declaringClass does not inherit from inheritedMethod's ", "+", "+\tif (match != inheritedMethod.declaringClass) {", "+\t\tMethodBinding[] superMethods = ((ReferenceBinding) match).getMethods(inheritedMethod.selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++)", "+\t\t\tif (superMethods[i].original() == inheritedMethod)", "+\t\t\t\treturn isParameterSubsignature(method, superMethods[i]);", "+\treturn isParameterSubsignature(method, inheritedMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f436b542e85919a753dc1756181739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "45a4564880a2dc68bab13a8cd21e316c500cb042", "commitAfterChange": "66abc385db66fdca41f9fe3a5bc9d59e168597c8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " boolean areMethodsCompatible(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areMethodsCompatible(MethodBinding one, MethodBinding two)", "diff": ["-\tMethodBinding sub = computeSubstituteMethod(two, one);", "-\treturn sub != null && isSubstituteParameterSubsignature(one, sub) && areReturnTypesCompatible(one, sub);", "+\t// use the original methods to test compatibility, but do not check visibility, etc", "+\tone = one.original();", "+\ttwo = two.original();", "+", "+\tTypeBinding match = one.declaringClass.findSuperTypeOriginatingFrom(two.declaringClass);", "+\tif (!(match instanceof ReferenceBinding))", "+\t\treturn false; // method's declaringClass does not inherit from inheritedMethod's ", "+", "+\tif (match != two.declaringClass) {", "+\t\tMethodBinding[] superMethods = ((ReferenceBinding) match).getMethods(two.selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++)", "+\t\t\tif (superMethods[i].original() == two)", "+\t\t\t\treturn isParameterSubsignature(one, superMethods[i]);", "+\t}", "+", "+\treturn isParameterSubsignature(one, two);"]}], "num": 27113}
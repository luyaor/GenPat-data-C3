{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c00a87683c26c61fd4610b1aef720e6f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27847a4256933d97d00859af89ac66ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "commitAfterChange": "9303965ee1621d26f107b936fe552a533d379df0", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tprivate String[] getMessageTemplates()", "signatureAfterChange": " \t \tprivate String[] getMessageTemplates()", "diff": ["+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tresult[0] = Messages.bind(", "+\t\t\tresult[0] = manager.intern(Messages.bind(", "-\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)});  //$NON-NLS-1$", "-\t\t\tresult[1] = Messages.bind(", "+\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)}));  //$NON-NLS-1$", "+\t\t\tresult[1] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)});  //$NON-NLS-1$", "-\t\t\tresult[2] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)}));  //$NON-NLS-1$", "+\t\t\tresult[2] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)});  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tresult[3] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)}));  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tresult[3] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)});  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)}));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tresult[0] = Messages.bind(", "+\t\t\tresult[0] = manager.intern(Messages.bind(", "-\t\t\t\tnew String[] {\"{0}\", pathString}); //$NON-NLS-1$ ", "-\t\t\tresult[1] = Messages.bind(", "+\t\t\t\tnew String[] {\"{0}\", pathString})); //$NON-NLS-1$ ", "+\t\t\tresult[1] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", pathString}); //$NON-NLS-1$ ", "-\t\t\tresult[2] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", pathString})); //$NON-NLS-1$ ", "+\t\t\tresult[2] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString}); //$NON-NLS-1$ //$NON-NLS-2$ ", "-\t\t\tresult[3] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString})); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\tresult[3] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString})); //$NON-NLS-1$ //$NON-NLS-2$ "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a97b289d8ed0fa21f9f065c7877bb126", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "signatureAfterChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "diff": ["-\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "-\t\t\t\t\tFlowContext.CAN_ONLY_NULL_NON_NULL, flowInfo);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL_NON_NULL | FlowContext.IN_COMPARISON_NULL, flowInfo);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL_NON_NULL | FlowContext.IN_COMPARISON_NON_NULL, flowInfo);", "-\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "-\t\t\t\t\tFlowContext.CAN_ONLY_NULL, flowInfo);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL | FlowContext.IN_COMPARISON_NON_NULL, flowInfo);", "+\t\t\t\t} else {", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL | FlowContext.IN_COMPARISON_NULL, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbeaa51027569cc9f7fea8b4488591dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "37d67ed9fa27dc85b6112e216c3af6d687e12530", "commitAfterChange": "8924c9453af0fcfcdde960b7165abadc76ad272e", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": " \t \tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, int accessFlags)", "signatureAfterChange": " \t \tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, int accessFlags)", "diff": ["-\t\t\t\tint startingIndex = (accessFlags & IModifierConstants.ACC_STATIC) != 0 ? 0 : 1;", "+\t\t\t\tfinal int startingIndex = (accessFlags & IModifierConstants.ACC_STATIC) != 0 ? 0 : 1;", "-\t\t\t\t\tILocalVariableTableEntry searchedEntry = getEntryFor(startingIndex + i, entries);", "+\t\t\t\t\tILocalVariableTableEntry searchedEntry = getEntryFor(getLocalIndex(startingIndex, i, methodDescriptor), entries);", "-\t\t\t\t\t\tparameterNames[i] = Messages.disassembler_parametername.toCharArray(); ", "+\t\t\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray()); ", "-\t\t\t\t\tparameterNames[i] = Messages.disassembler_parametername.toCharArray(); ", "+\t\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray()); ", "-\t\t\t\tparameterNames[i] = Messages.disassembler_parametername.toCharArray(); ", "+\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray()); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf28f5f1113db88054c0d71d2c9f3e8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d81f79f00816b88315f5cebda6e215147f9e97f8", "commitAfterChange": "a97d6cfe4321b5c45bce6a9e682825ee765b8f5b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing);", "+\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing);", "+\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing);", "+\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());", "+\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions(), originalType.getTypeAnnotations());", "-\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind);", "+\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind, wildcard.getTypeAnnotations());", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing)", "-\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing);", "+\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations())", "+\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);", "+\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());"]}], "num": 52904}
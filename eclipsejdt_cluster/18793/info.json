{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edc021014325db8a346ae9f63172a9fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0528b95bf9ad7537e1c98ccc0f005b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "e569ccbcfbcb74e518eafb76280b234f1f261194", "commitAfterChange": "2f320253f72e97c287894f0303a7d3fb710470ca", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "signatureAfterChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "diff": ["-\tIndex[] indexes = new Index[length];", "-\tint count = 0;", "-\tIndexManager indexManager = JavaModelManager.getIndexManager();", "-\tfor (int i = 0; i < length; i++) {", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\t// may trigger some index recreation work", "-\t\tIPath indexLocation = indexLocations[i];", "-\t\tIndex index = indexManager.getIndex(indexLocation);", "-\t\tif (index == null) {", "-\t\t\t// only need containerPath if the index must be built", "-\t\t\tIPath containerPath = (IPath) indexManager.indexLocations.keyForValue(indexLocation);", "-\t\t\tif (containerPath != null) // sanity check", "-\t\t\t\tindex = indexManager.getIndex(containerPath, indexLocation, true /*reuse index file*/, false /*do not create if none*/);", "-\t\t}", "-\t\tif (index != null)", "-\t\t\tindexes[count++] = index; // only consider indexes which are ready", "-\t}", "-\tif (count == length) ", "-\t\tthis.areIndexesReady = true;", "-\telse", "-\t\tSystem.arraycopy(indexes, 0, indexes=new Index[count], 0, count);", "+\tIndex[] indexes = JavaModelManager.getIndexManager().getIndexes(indexLocations, progressMonitor);", "+\tthis.areIndexesReady = indexes.length == length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6a7625dd61de1803af7a47b0728d039", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 373, "signatureBeforeChange": " protected Annotation[][] getMergedAnnotationsOnDimensions(int dims, Annotation[][] annotationsOnDimensions, \t\tint extendedDims, Annotation[][] annotationsOnExtendedDimensions)", "signatureAfterChange": "  protected TypeReference augmentTypeWithAdditionalDimensions(TypeReference typeReference, int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs)", "diff": ["-}", "-protected Annotation[][] getMergedAnnotationsOnDimensions(int dims, Annotation[][] annotationsOnDimensions,", "-\t\tint extendedDims, Annotation[][] annotationsOnExtendedDimensions) {", "-", "-\tif (annotationsOnDimensions == null && annotationsOnExtendedDimensions == null)", "-\t\treturn null;", "-", "-\tAnnotation [][] mergedAnnotations = new Annotation[dims + extendedDims][];", "-\t", "-\tif (annotationsOnDimensions != null) {", "-\t\tfor (int i = 0; i < dims; i++) {", "-\t\t\tmergedAnnotations[i] = annotationsOnDimensions[i];", "-\t\t} ", "-\t}", "-\tif (annotationsOnExtendedDimensions != null) {", "-\t\tfor (int i = dims, j = 0; i < dims + extendedDims; i++, j++) {", "-\t\t\tmergedAnnotations[i] = annotationsOnExtendedDimensions[j];", "-\t\t}", "-\t}", "-", "-\treturn mergedAnnotations;", "+protected TypeReference augmentTypeWithAdditionalDimensions(TypeReference typeReference, int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs) {", "+\treturn typeReference.augmentTypeWithAdditionalDimensions(additionalDimensions, additionalAnnotations, isVarargs);"]}], "num": 18793}
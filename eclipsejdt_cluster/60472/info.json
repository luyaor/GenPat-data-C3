{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d23fcf490ba52d7742ed98cf4c8f6dde", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e59e49fa0a207806056a8330ddf894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public char[][][] collect() throws JavaModelException", "signatureAfterChange": " public char[][][] collect() throws JavaModelException", "diff": ["-\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\t} finally {", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\ttry {", "-\t\tfor (int i = 0, length = paths.length; i < length; i++) {", "-\t\t\ttry {", "-\t\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "-\t\t\t\tif (openable == null) continue; // outside classpath", "+\tfor (int i = 0, length = paths.length; i < length; i++) {", "+\t\ttry {", "+\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "+\t\t\tif (openable == null) continue; // outside classpath", "-\t\t\t\tIJavaProject project = openable.getJavaProject();", "-\t\t\t\tif (!project.equals(previousProject)) {", "-\t\t\t\t\tif (previousProject != null)", "-\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\t\t\t\t\tpreviousProject = (JavaProject) project;", "-\t\t\t\t\tthis.locator.initialize(previousProject, 0);", "-\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);", "-\t\t\t\t}", "-\t\t\t\tif (openable instanceof ICompilationUnit) {", "-\t\t\t\t\tICompilationUnit unit = (ICompilationUnit) openable;", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, true /*only toplevel and member types are visible to the focus type*/);", "-\t\t\t\t\tif (parsedUnit != null)", "-\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "-\t\t\t\t} else if (openable instanceof IClassFile) {", "-\t\t\t\t\tIClassFile classFile = (IClassFile) openable;", "-\t\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "-\t\t\t\t\tif (matches(binding))", "-\t\t\t\t\t\tcollectSuperTypeNames(binding);", "-\t\t\t\t}", "-\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t// ignore: continue with next element", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// ignore: continue with next element", "+\t\t\tIJavaProject project = openable.getJavaProject();", "+\t\t\tif (!project.equals(previousProject)) {", "+\t\t\t\tpreviousProject = (JavaProject) project;", "+\t\t\t\tthis.locator.initialize(previousProject, 0);", "+\t\t\tif (openable instanceof ICompilationUnit) {", "+\t\t\t\tICompilationUnit unit = (ICompilationUnit) openable;", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, true /*only toplevel and member types are visible to the focus type*/);", "+\t\t\t\tif (parsedUnit != null)", "+\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "+\t\t\t} else if (openable instanceof IClassFile) {", "+\t\t\t\tIClassFile classFile = (IClassFile) openable;", "+\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "+\t\t\t\tif (matches(binding))", "+\t\t\t\t\tcollectSuperTypeNames(binding);", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// ignore: continue with next element", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignore: continue with next element", "-\t} finally {", "-\t\tif (previousProject != null)", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131bf35c8c2811e3a020f5c16f012991", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "c8d00cbf2814182ef1ce07d7254dc4a8d85157bc", "commitAfterChange": "76285abc2e18a9626166def15ee7d0b4124f0aa5", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " public void ldc(String constant)", "signatureAfterChange": " public void ldc(String constant)", "diff": ["-\tint currentConstantPoolIndex = constantPool.currentIndex;", "-\tint currentConstantPoolOffset = constantPool.currentOffset;", "-\tint index = constantPool.literalIndexForLdc(constant.toCharArray());", "+\tchar[] constantChars = constant.toCharArray();", "+\tint index = constantPool.literalIndexForLdc(constantChars);", "-\t\tif (stackDepth > stackMax)", "+\t\tif (stackDepth > stackMax) {", "+\t\t}", "-\t\tchar[] constantChars = constant.toCharArray();", "-\t\tconstantPool.currentIndex = currentConstantPoolIndex;", "-\t\tconstantPool.currentOffset = currentConstantPoolOffset;", "-\t\tconstantPool.stringCache.remove(constantChars);", "-\t\tconstantPool.UTF8Cache.remove(constantChars);", "-\t\tif (stackDepth > stackMax)", "+\t\tif (stackDepth > stackMax) {", "+\t\t}", "-\t\t\t\tif (constantLength + 2 > (utf8encodingLength = utf8encoding.length)) {", "+\t\t\t\tif (length + 3 > (utf8encodingLength = utf8encoding.length)) {", "-\t\t\tsubChars = new char[i - startIndex];", "-\t\t\tSystem.arraycopy(constantChars, startIndex, subChars, 0, i - startIndex);", "+\t\t\tint newCharLength = i - startIndex;", "+\t\t\tsubChars = new char[newCharLength];", "+\t\t\tSystem.arraycopy(constantChars, startIndex, subChars, 0, newCharLength);"]}], "num": 60472}
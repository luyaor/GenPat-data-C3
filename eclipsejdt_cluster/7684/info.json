{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80ad504ce6dccd2fbf32acd5266fbbb3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "882325b554bdff7589d3578731788927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 59, "signatureBeforeChange": " @Override protected boolean invokeCompiler( \t\tPrintWriter out,  \t\tPrintWriter err, \t\tObject extraArguments, \t\tTestCompilationProgress compilationProgress)", "signatureAfterChange": " public void test021_output_streams() throws IOException", "diff": ["-}", "-@Override", "-protected boolean invokeCompiler(", "-\t\tPrintWriter out, ", "-\t\tPrintWriter err,", "-\t\tObject extraArguments,", "-\t\tTestCompilationProgress compilationProgress) {", "-\tCompilerInvocationTestsArguments arguments = (CompilerInvocationTestsArguments) extraArguments;", "-\tStandardJavaFileManager manager = arguments.standardJavaFileManager;", "-\tif (manager == null) {", "-\t\tmanager = JAVAC_COMPILER.getStandardFileManager(null, null, null); // will pick defaults up", "-\t}", "-\tList<File> files = new ArrayList<File>();", "-\tString[] fileNames = arguments.fileNames;", "-\tfor (int i = 0, l = fileNames.length; i < l; i++) {", "-\t\tfiles.add(new File(OUTPUT_DIR + File.separator + fileNames[i]));", "-\t}", "-\tCompilationTask task = COMPILER.getTask(out, arguments.standardJavaFileManager /* carry the null over */, null, arguments.options, null, manager.getJavaFileObjectsFromFiles(files));", "-\treturn task.call();", "+// most basic output test", "+public void test021_output_streams() throws IOException {", "+\tByteArrayOutputStream ", "+\t\t\toutBuffer = new ByteArrayOutputStream(),", "+\t\t\terrBuffer = new ByteArrayOutputStream();", "+\tCompilationTask task = COMPILER.getTask(", "+\t\tnew PrintWriter(outBuffer), ", "+\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "+\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "+\t\tArrays.asList(\"-v\"), null, null);", "+\tassertTrue(task.call());", "+\tassertTrue(outBuffer.toString().startsWith(\"Eclipse Java Compiler\"));", "+\tassertTrue(errBuffer.toString().isEmpty());", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de80d9899de3dc96a202683e75cedd68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tCompilerInvocationTestsArguments( \t\t\tStandardJavaFileManager standardJavaFileManager,  \t\t\tList<String> options, \t\t\tString[] fileNames)", "signatureAfterChange": " public void _test022_output_streams() throws IOException", "diff": ["-\tString[] fileNames;", "-\tCompilerInvocationTestsArguments(", "-\t\t\tStandardJavaFileManager standardJavaFileManager, ", "-\t\t\tList<String> options,", "-\t\t\tString[] fileNames) {", "-\t\tthis.standardJavaFileManager = standardJavaFileManager;", "-\t\tthis.options = options;", "-\t\tthis.fileNames = fileNames;", "-\t}", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=236814", "+public void _test022_output_streams() throws IOException {", "+\tByteArrayOutputStream ", "+\t\t\toutBuffer = new ByteArrayOutputStream(),", "+\t\t\terrBuffer = new ByteArrayOutputStream();", "+\tPrintStream ", "+\t\tsystemOut = System.out,", "+\t\tsystemErr = System.err;", "+\tSystem.setOut(new PrintStream(outBuffer));", "+\tSystem.setErr(new PrintStream(errBuffer));", "+\tCompilationTask task = COMPILER.getTask(", "+\t\tnull, ", "+\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "+\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "+\t\tArrays.asList(\"-v\"), null, null);", "+\ttry {", "+\tassertTrue(task.call());", "+\tassertTrue(outBuffer.toString().isEmpty());", "+\tassertTrue(errBuffer.toString().startsWith(\"Eclipse Java Compiler\"));", "+\t} finally {", "+\t\tSystem.setOut(systemOut);", "+\t\tSystem.setErr(systemErr);", "+\t}", "+}"]}], "num": 7684}
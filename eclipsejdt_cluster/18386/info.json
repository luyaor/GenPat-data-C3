{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0bf1e658168a553a37f4fafc45ef46ed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35491dc4d69462d94ec6c6b4ec37284e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "signatureAfterChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "diff": ["-\t\t// diet parse", "-\t\tIFile file = ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(new String(sourceUnit.getFileName())));", "-\t\tCompilationUnit compilationUnit = (CompilationUnit)JavaCore.create(file);", "-\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(sourceUnit, this, file, compilationUnit);", "-", "-\t\t// build bindings", "-\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit);", "-\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, true);", "+\t\t// Switch the current policy and compilation result for this unit to the requested one.", "+\t\tCompilationResult unitResult =", "+\t\t\tnew CompilationResult(sourceUnit, totalUnits, totalUnits, this.options.maxProblemsPerUnit);", "+\t\ttry {", "+\t\t\t// diet parsing for large collection of unit", "+\t\t\tCompilationUnitDeclaration parsedUnit;", "+\t\t\tMatchingNodeSet originalMatchSet = this.parser.matchSet;", "+\t\t\ttry {", "+\t\t\t\tthis.parser.matchSet = new MatchingNodeSet(this);", "+\t\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\t\tparsedUnit = parser.parse(sourceUnit, unitResult);", "+\t\t\t\t} else {", "+\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnit, unitResult);", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tthis.parser.matchSet = originalMatchSet;", "+\t\t\t}", "-\t\t// remember parsed unit", "-\t\tImportReference pkg = parsedUnit.currentPackage;", "-\t\tchar[][] packageName = pkg == null ? null : pkg.tokens;", "-\t\tchar[] mainTypeName = sourceUnit.getMainTypeName();", "-\t\tchar[] qualifiedName = packageName == null ? mainTypeName : CharOperation.concatWith(packageName, mainTypeName, '.');", "-\t\tthis.parsedUnits.put(qualifiedName, parsedUnit);", "+\t\t\t// initial type binding creation", "+\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "+\t\t\tthis.addCompilationUnit(sourceUnit, parsedUnit);", "+\t", "+\t\t\t// binding resolution", "+\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit);", "+\t\t} catch (AbortCompilationUnit e) {", "+\t\t\t// at this point, currentCompilationUnitResult may not be sourceUnit, but some other", "+\t\t\t// one requested further along to resolve sourceUnit.", "+\t\t\tif (unitResult.compilationUnit == sourceUnit) { // only report once", "+\t\t\t\t//requestor.acceptResult(unitResult.tagAsAccepted());", "+\t\t\t} else {", "+\t\t\t\tthrow e; // want to abort enclosing request to compile", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0bc6d6069c8794ca1e20457d05ff5be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding getMethodBinding(IMethod method)", "signatureAfterChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "diff": ["-public MethodBinding getMethodBinding(IMethod method) {", "+public MethodBinding getMethodBinding(MethodPattern methodPattern) {", "-\tBinding binding = (Binding) this.bindings.get(method);", "+\tBinding binding = (Binding) this.bindings.get(methodPattern);", "-\tString typeName = method.getDeclaringType().getElementName();", "-\tTypeBinding declaringTypeBinding = getType(typeName, typeName.toCharArray());", "+\tchar[] typeName = PatternLocator.qualifiedPattern(methodPattern.declaringSimpleName, methodPattern.declaringQualification);", "+\tif (typeName == null) {", "+\t\tif (methodPattern.declaringType == null) return null;", "+\t\ttypeName = methodPattern.declaringType.getFullyQualifiedName().toCharArray();", "+\t}", "+\tTypeBinding declaringTypeBinding = getType(typeName, typeName);", "-\t\t\tString[] parameterTypes = method.getParameterTypes();", "+\t\t\tchar[][] parameterTypes = methodPattern.parameterSimpleNames;", "+\t\t\tif (parameterTypes == null) return null;", "-\t\t\tchar[][] paramTypesChars = new char[paramTypeslength][];", "-\t\t\tfor (int i=0;  i<paramTypeslength; i++) {", "-\t\t\t\tparamTypesChars[i] = Signature.toCharArray(parameterTypes[i].toCharArray());", "-\t\t\t}", "-\t\t\tMethodBinding[] methods = referenceBinding.getMethods(method.getElementName().toCharArray());", "+\t\t\tMethodBinding[] methods = referenceBinding.getMethods(methodPattern.selector);", "-\t\t\t\tboolean found = paramLength == paramTypeslength;", "-\t\t\t\tif (found) {", "-\t\t\t\t\tfor (int p=0; found && p<paramLength; p++) {", "-\t\t\t\t\t\tif (CharOperation.equals(methodParameters[p].erasure().shortReadableName(), paramTypesChars[p])) {", "+\t\t\t\tboolean found = false;", "+\t\t\t\tif (paramLength == paramTypeslength) {", "+\t\t\t\t\tfor (int p=0; p<paramLength; p++) {", "+\t\t\t\t\t\tif (CharOperation.equals(methodParameters[p].erasure().shortReadableName(), parameterTypes[p])) {", "+\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\tboolean foundVar = true;", "-\t\t\t\t\t\t\tfor (int v=0; foundVar && v<typeVarLength; v++) {", "-\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, paramTypesChars[p])) {", "-\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\tfor (int v=0; v<typeVarLength; v++) {", "+\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, parameterTypes[p])) {", "+\t\t\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\tif (!foundVar) {", "-\t\t\t\t\t\t\t\tfoundVar = true;", "-\t\t\t\t\t\t\t\tfor (int v=0; foundVar && v<methTypeVarLength; v++) {", "-\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(methodTypeVariables[v].sourceName, paramTypesChars[p])) {", "-\t\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\t\tfor (int v=0; v<methTypeVarLength; v++) {", "+\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(methodTypeVariables[v].sourceName, parameterTypes[p])) {", "+\t\t\t\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\tif (!foundVar) found = false;", "+\t\t\t\t\t\t\tif (!found) break;", "-\t\t\t\t\tthis.bindings.put(method, methods[i]);", "+\t\t\t\t\tthis.bindings.put(methodPattern, methods[i]);", "-//\t\t\tmethodBinding = referenceBinding.getExactMethod(method.getElementName().toCharArray(), parameters);", "-//\t\t\tthis.bindings.put(method, methodBinding);", "-//\t\t\treturn methodBinding;", "-\tthis.bindings.put(method, new ProblemMethodBinding(method.getElementName().toCharArray(), null, ProblemReasons.NotFound));", "+\tthis.bindings.put(methodPattern, new ProblemMethodBinding(methodPattern.selector, null, ProblemReasons.NotFound));"]}], "num": 18386}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfa8ff839ba506bdd350b2ce8297247d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1773567f0bd34420027b1f8f08baec1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "b8f31731e75965ced53a2b2bb7747f2f3f0bdc77", "commitAfterChange": "90b243491d35267d13bcf8f4b3b622ed87af2ae7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testArrayType_10()", "signatureAfterChange": " \tpublic void testArrayType_10()", "diff": ["-\t\t\t\t  \"        unknownArrays = maybeArrays;\t\t\t// problsm on outer dimension\\n\" +", "+\t\t\t\t  \"        unknownArrays = maybeArrays;\t\t\t// no problem: outer @NonNull is compatible to expected @Nullable, inner @Nullable is compatible to inner unspecified\\n\" +", "-\t\t\t\"4. ERROR in A.java (at line 7)\\n\" + ", "-\t\t\t\"\tunknownArrays = maybeArrays;\t\t\t// problsm on outer dimension\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[] []\\' but this expression has type \\'String @NonNull[] @Nullable[]\\'\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in A.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in A.java (at line 8)\\n\" + ", "-\t\t\t\"6. WARNING in A.java (at line 9)\\n\" + ", "+\t\t\t\"5. WARNING in A.java (at line 9)\\n\" + ", "-\t\t\t\"7. ERROR in A.java (at line 10)\\n\" + ", "+\t\t\t\"6. ERROR in A.java (at line 10)\\n\" + ", "-\t\t\t\"8. WARNING in A.java (at line 10)\\n\" + ", "+\t\t\t\"7. WARNING in A.java (at line 10)\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}", "-\t\t\t\"9. ERROR in A.java (at line 10)\\n\" + ", "-\t\t\t\"\tconsume(maybeArrays, mixedArrays, maybeArrays);\\n\" + ", "-\t\t\t\"\t                                  ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[] []\\' but this expression has type \\'String @NonNull[] @Nullable[]\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cecd160e156f22c1abc10dc79c76239b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "94cf6b4f7af3fd80bbff88619e21ee7974889ee5", "commitAfterChange": "fe32c2fb1206f9aa293286057591b6614ed5e3a2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "-\t\t\t\t\"  // Stack: 0, Locals: 2\\n\" + ", "-\t\t\t\t\"  void foo1(X x);\\n\" + ", "-\t\t\t\t\"    0  return\\n\" + ", "-\t\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 9]\\n\" + ", "-\t\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: X\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 1] local: x index: 1 type: X\\n\" + ", "-\t\t\t\t\"  \\n\" + ", "-\t\t\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "-\t\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "-\t\t\t\t\"  void foo2(X x);\\n\" + ", "-\t\t\t\t\"     0  aload_1 [x]\\n\" + ", "-\t\t\t\t\"     1  ifnonnull 11\\n\" + ", "-\t\t\t\t\"     4  iconst_0\\n\" + ", "-\t\t\t\t\"     5  ifeq 15\\n\" + ", "-\t\t\t\t\"     8  goto 15\\n\" + ", "-\t\t\t\t\"    11  iconst_0\\n\" + ", "-\t\t\t\t\"    12  ifeq 15\\n\" + ", "-\t\t\t\t\"    15  return\\n\" + ", "-\t\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 12]\\n\" + ", "-\t\t\t\t\"        [pc: 15, line: 15]\\n\" + ", "-\t\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 16] local: this index: 0 type: X\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 16] local: x index: 1 type: X\\n\" + ", "-\t\t\t\t\"  \\n\" + ", "-\t\t\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "-\t\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "-\t\t\t\t\"  void foo3(X x);\\n\" + ", "-\t\t\t\t\"     0  aload_1 [x]\\n\" + ", "-\t\t\t\t\"     1  ifnonnull 11\\n\" + ", "-\t\t\t\t\"     4  iconst_0\\n\" + ", "-\t\t\t\t\"     5  ifne 0\\n\" + ", "-\t\t\t\t\"     8  goto 15\\n\" + ", "-\t\t\t\t\"    11  iconst_0\\n\" + ", "-\t\t\t\t\"    12  ifne 0\\n\" + ", "-\t\t\t\t\"    15  return\\n\" + ", "-\t\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 18]\\n\" + ", "-\t\t\t\t\"        [pc: 15, line: 21]\\n\" + ", "-\t\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 16] local: this index: 0 type: X\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 16] local: x index: 1 type: X\\n\" + ", "-\t\t\t\t\"  \\n\" + ", "-\t\t\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "-\t\t\t\t\"  // Stack: 1, Locals: 3\\n\" + ", "-\t\t\t\t\"  void foo4(X x);\\n\" + ", "-\t\t\t\t\"    0  aload_1 [x]\\n\" + ", "-\t\t\t\t\"    1  ifnonnull 4\\n\" + ", "-\t\t\t\t\"    4  iconst_0\\n\" + ", "-\t\t\t\t\"    5  istore_2 [bb]\\n\" + ", "-\t\t\t\t\"    6  return\\n\" + ", "-\t\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 23]\\n\" + ", "-\t\t\t\t\"        [pc: 6, line: 24]\\n\" + ", "-\t\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 7] local: this index: 0 type: X\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 7] local: x index: 1 type: X\\n\" + ", "-\t\t\t\t\"        [pc: 6, pc: 7] local: bb index: 2 type: boolean\\n\" + ", "-\t\t\t\t\"}\";", "+\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "+\t\t\"  // Stack: 0, Locals: 2\\n\" + ", "+\t\t\"  void foo1(X x);\\n\" + ", "+\t\t\"    0  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 9]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 1] local: x index: 1 type: X\\n\" + ", "+\t\t\"  \\n\" + ", "+\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "+\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "+\t\t\"  void foo2(X x);\\n\" + ", "+\t\t\"    0  aload_1 [x]\\n\" + ", "+\t\t\"    1  ifnonnull 4\\n\" + ", "+\t\t\"    4  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 12]\\n\" + ", "+\t\t\"        [pc: 4, line: 15]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 5] local: x index: 1 type: X\\n\" + ", "+\t\t\"  \\n\" + ", "+\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "+\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "+\t\t\"  void foo3(X x);\\n\" + ", "+\t\t\"    0  aload_1 [x]\\n\" + ", "+\t\t\"    1  ifnonnull 4\\n\" + ", "+\t\t\"    4  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 18]\\n\" + ", "+\t\t\"        [pc: 4, line: 21]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 5] local: x index: 1 type: X\\n\" + ", "+\t\t\"  \\n\" + ", "+\t\t\"  // Method descriptor #20 (LX;)V\\n\" + ", "+\t\t\"  // Stack: 1, Locals: 3\\n\" + ", "+\t\t\"  void foo4(X x);\\n\" + ", "+\t\t\"    0  aload_1 [x]\\n\" + ", "+\t\t\"    1  ifnonnull 4\\n\" + ", "+\t\t\"    4  iconst_0\\n\" + ", "+\t\t\"    5  istore_2 [bb]\\n\" + ", "+\t\t\"    6  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 23]\\n\" + ", "+\t\t\"        [pc: 6, line: 24]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 7] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 7] local: x index: 1 type: X\\n\" + ", "+\t\t\"        [pc: 6, pc: 7] local: bb index: 2 type: boolean\\n\";"]}], "num": 2966}
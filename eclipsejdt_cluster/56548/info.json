{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d60fca98c8adfb6abdb3ccf553af687", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c2e1ce5f73ebbd1b968455d27d5305", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "d81e6de27221b2caec858658787abf55d91a925e", "commitAfterChange": "cfb9e308b9934bc0d4a17e2d4604db46f20af164", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\t\treturn new ConstraintTypeFormula(sPrime, tPrime, SUBTYPE, this.isSoft);", "+\t\t\t\t\treturn ConstraintTypeFormula.create(sPrime, tPrime, SUBTYPE, this.isSoft);", "-\t\t\t\t\treturn new ConstraintTypeFormula(subCandidate, variable.bound, SUBTYPE, this.isSoft);", "+\t\t\t\t\treturn ConstraintTypeFormula.create(subCandidate, variable.bound, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\treturn new ConstraintTypeFormula(subCandidate, capture.lowerBound, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\treturn ConstraintTypeFormula.create(subCandidate, capture.lowerBound, SUBTYPE, this.isSoft);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "826bc8a396652b4a8b8ba042afa51996", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "d81e6de27221b2caec858658787abf55d91a925e", "commitAfterChange": "cfb9e308b9934bc0d4a17e2d4604db46f20af164", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "diff": ["-\t\t\treturn reduceAndIncorporate(new ConstraintTypeFormula(r1, r2, ReductionResult.SUBTYPE));", "+\t\t\treturn reduceAndIncorporate(ConstraintTypeFormula.create(r1, r2, ReductionResult.SUBTYPE));", "-\t\t\t\tif (!reduceAndIncorporate(new ConstraintTypeFormula(u[i], v[i], ReductionResult.SAME)))", "+\t\t\t\tif (!reduceAndIncorporate(ConstraintTypeFormula.create(u[i], v[i], ReductionResult.SAME)))", "-\t\t\treturn reduceAndIncorporate(new ConstraintTypeFormula(r1, r2, ReductionResult.SUBTYPE));", "+\t\t\treturn reduceAndIncorporate(ConstraintTypeFormula.create(r1, r2, ReductionResult.SUBTYPE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd45c7774366a480b5afd393ca5ea75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "d81e6de27221b2caec858658787abf55d91a925e", "commitAfterChange": "cfb9e308b9934bc0d4a17e2d4604db46f20af164", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tvoid addTypeBoundsFromWildcardBound(InferenceContext18 context, int boundKind, TypeBinding t, \t\t\tTypeBinding r, TypeBinding bi) throws InferenceFailureException", "signatureAfterChange": "  \tvoid addTypeBoundsFromWildcardBound(InferenceContext18 context, int boundKind, TypeBinding t, \t\t\tTypeBinding r, TypeBinding bi) throws InferenceFailureException", "diff": ["-\t\t\t\tformula = new ConstraintTypeFormula(t, r, ReductionResult.SUBTYPE);", "+\t\t\t\tformula = ConstraintTypeFormula.create(t, r, ReductionResult.SUBTYPE);", "-\t\t\t\tformula = new ConstraintTypeFormula(context.substitute(bi), r, ReductionResult.SUBTYPE);", "+\t\t\t\tformula = ConstraintTypeFormula.create(context.substitute(bi), r, ReductionResult.SUBTYPE);", "-\t\t\tformula = new ConstraintTypeFormula(context.substitute(bi), r, ReductionResult.SUBTYPE);", "+\t\t\tformula = ConstraintTypeFormula.create(context.substitute(bi), r, ReductionResult.SUBTYPE);"]}], "num": 56548}
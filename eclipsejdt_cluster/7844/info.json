{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58f79fa61cf2771d5c0772a68c9fd3f7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d3df937af5bd36ac83d9c4819b3cfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().inexactParameterToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().inexactParameterToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().inexactParameterToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eab94ae30505cf5fbca471df48c3990a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f21d6e6f95b351b7d79d57f52607499b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "commitAfterChange": "09b5bcfabb25c2c9040a9d902d7f8e5151952519", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().varargsArgumentNeedCast(method, lastArgType, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().varargsArgumentNeedCast(method, lastArgType, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().varargsArgumentNeedCast(method, lastArgType, invocationSite);"]}], "num": 7844}
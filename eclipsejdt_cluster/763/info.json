{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4da2f461fe07cbe8da877531e19a987b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "126c6abc26be75c2f18a17112e7db923", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "4f90f7005696a0951a49d2ebe0ca59ea39a6f81e", "commitAfterChange": "c6233ae2c577c6f0263643cd88cdf0be03329c72", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " protected void validateOptions(boolean didSpecifyCompliance) throws InvalidInputException", "signatureAfterChange": " protected void validateOptions(boolean didSpecifyCompliance) throws InvalidInputException", "diff": ["+\t\t} else if (CompilerOptions.VERSION_1_7.equals(version)) {", "+\t\t\tif (!this.didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);", "+\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "+\t\t} else if (CompilerOptions.VERSION_1_7.equals(version)) {", "+\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);", "+\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "-\tif (sourceVersion.equals(CompilerOptions.VERSION_1_6)", "+\tif (sourceVersion.equals(CompilerOptions.VERSION_1_7)", "+\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_7) {", "+\t\t// compliance must be 1.7 if source is 1.7", "+\t\tthrow new InvalidInputException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_6)", "+\t\t\t// target must be 1.7 if source is 1.7", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_7", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_7){ ", "+\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e7c3c78bfc6f3d713423dab4dcb8e8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.PRIVATE : CompilerOptions.PUBLIC);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.PRIVATE : CompilerOptions.PUBLIC);", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadoc,", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.PRIVATE : CompilerOptions.PUBLIC);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.PRIVATE : CompilerOptions.PUBLIC);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocComments,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a78b0c09da0ef76bc4679d92931fb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c22ae4e2acd996824ff94a2b0edaa0df69d9b3b1", "commitAfterChange": "1eeba055c4a858ddea83f6c85864678280808173", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t", "-\t\tif (this.primary != null) {", "-\t\t\tthis.primary.resolveType(blockScope);", "-\t\t} else if (this.name != null) {", "-\t\t\tthis.name.resolveType(blockScope);", "-\t\t} else if (this.type != null) {", "-\t\t\tthis.type.resolveType(blockScope);", "+", "+\t\tthis.receiverType = this.lhs.resolveType(blockScope);", "+\t\tthis.haveReceiver = true;", "+\t\tif (this.lhs instanceof NameReference) {", "+\t\t\tif ((this.lhs.bits & ASTNode.RestrictiveFlagMASK) == Binding.TYPE) {", "+\t\t\t\tthis.haveReceiver = false;", "+\t\t\t\tif (this.receiverType.isRawType())", "+\t\t\t\t\tblockScope.problemReporter().rawTypeReference(this.lhs, this.receiverType);", "+\t\t\t}", "+\t\t} else if (this.lhs instanceof TypeReference) {", "+\t\t\tthis.haveReceiver = false;", "+", "-\t\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\t\tthis.resolvedTypeArguments = new TypeBinding[length];", "-\t\t\t\tif ((this.genericTypeArguments[i] = typeReference.resolveType(blockScope, true /* check bounds*/)) == null) {", "+\t\t\t\tif ((this.resolvedTypeArguments[i] = typeReference.resolveType(blockScope, true /* check bounds*/)) == null) {", "+\t\t", "+\t\tif (this.receiverType == null || !this.receiverType.isValidBinding()) ", "+\t\t\treturn this.resolvedType;", "+\t\t", "+\t\tif (this.receiverType.isBaseType()) {", "+\t\t\tblockScope.problemReporter().errorNoMethodFor(this.lhs, this.receiverType, this.method.token, this.descriptor != null ? this.descriptor.parameters : Binding.NO_TYPES);", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "+\t\tif (isConstructorReference() && !this.receiverType.canBeInstantiated()) {", "+\t\t\tblockScope.problemReporter().cannotInstantiate(this.lhs, this.receiverType);", "+\t\t\treturn this.resolvedType;", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4d32070f6fb4a582af8633af24a50a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "10d9ee7d6cd7cd29aebe50986af8fcc7cd9d4e32", "commitAfterChange": "ce651c0ac69efcf9b95474a4774590a4a9111231", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "signatureAfterChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "diff": ["+\t\t\t\t\tboolean isPrimarySet = !this.primaryNullAnnotationsSeen;", "-\t\t\t\t\tif (nullableAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tif (isPrimarySet && nullableAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "-\t\t\t\t\tif (nonNullAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tif (isPrimarySet && nonNullAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "-\t\t\t\t\tif (nonNullByDefaultAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, nullableAnnotName);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, nonNullAnnotName);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationName, nonNullByDefaultAnnotName);", "+\t\t\t\t\tif (isPrimarySet && nonNullByDefaultAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tif (isPrimarySet) {", "+\t\t\t\t\t\tthis.primaryNullAnnotationsSeen = true;", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, nullableAnnotName);", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, nonNullAnnotName);", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationName, nonNullByDefaultAnnotName);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (nullableAnnotName.length() > 0) {", "+\t\t\t\t\t\t\tString nullableList = this.options.get(CompilerOptions.OPTION_NullableAnnotationSecondaryNames);", "+\t\t\t\t\t\t\tnullableList = nullableList.isEmpty() ? nullableAnnotName : nullableList + ',' + nullableAnnotName;", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationSecondaryNames, nullableList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nonNullAnnotName.length() > 0) {", "+\t\t\t\t\t\t\tString nonnullList = this.options.get(CompilerOptions.OPTION_NonNullAnnotationSecondaryNames);", "+\t\t\t\t\t\t\tnonnullList = nonnullList.isEmpty() ? nonNullAnnotName : nonnullList + ',' + nonNullAnnotName;", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationSecondaryNames, nonnullList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nonNullByDefaultAnnotName.length() > 0) {", "+\t\t\t\t\t\t\tString nnbdList = this.options.get(CompilerOptions.OPTION_NonNullByDefaultAnnotationSecondaryNames);", "+\t\t\t\t\t\t\tnnbdList = nnbdList.isEmpty() ? nonNullByDefaultAnnotName : nnbdList + ',' + nonNullByDefaultAnnotName;", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationSecondaryNames, nnbdList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad13d70583a83f711390a84eb38f32c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "signatureAfterChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "diff": ["+\t // once a classpath error is found, ignore all other problems for this project so the user can see the main error", "+\t// but still try to compile as many source files as possible to help the case when the base libraries are in source", "+\tif (!this.keepStoringProblemMarkers) return; // only want the one error recorded on this source file", "-\tString missingClassFile = null;", "+", "+\t\t// handle missing classfile situation", "-\t\t\tJavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject); // make this the only problem for this project", "-\t\t\tString[] args = problem.getArguments();", "-\t\t\tmissingClassFile = args[0];", "+\t\t\tString missingClassfileName = problem.getArguments()[0];", "+\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\tSystem.out.println(Messages.bind(Messages.build_incompleteClassPath, missingClassfileName));", "+\t\t\tboolean isInvalidClasspathError = JavaCore.ERROR.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH, true));", "+\t\t\t// insert extra classpath problem, and make it the only problem for this project (optional)", "+\t\t\tif (isInvalidClasspathError && JavaCore.ABORT.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, true))) {", "+\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject); // make this the only problem for this project", "+\t\t\t\tthis.keepStoringProblemMarkers = false;", "+\t\t\t}", "+\t\t\tIMarker marker = this.javaBuilder.currentProject.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\tmarker.setAttribute(IMarker.MESSAGE, Messages.bind(Messages.build_incompleteClassPath, missingClassfileName)); ", "+\t\t\tmarker.setAttribute(IMarker.SEVERITY, isInvalidClasspathError ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING);", "+\t\t\tmarker.setAttribute(IJavaModelMarker.CATEGORY_ID, CategorizedProblem.CAT_BUILDPATH);", "+\t\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\t\t// even if we're not keeping more markers, still fall through rest of the problem reporting, so that offending", "+\t\t\t// IsClassPathCorrect problem gets recorded since it may help locate the offending reference", "-\t\t", "+", "-\t\t\t\t|| (managedProblem = managedMarkerTypes.contains(markerType))) {\t\t\t", "+\t\t\t\t|| (managedProblem = managedMarkerTypes.contains(markerType))) {", "-\t\t\t", "+", "+", "+\t\t\tif (!this.keepStoringProblemMarkers) return; // only want the one error recorded on this source file", "-\t\tif (missingClassFile != null)", "-\t\t\tthrow new MissingClassFileException(missingClassFile);"]}], "num": 763}
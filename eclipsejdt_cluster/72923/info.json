{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37bf6bd6ce9c78324f99587bd401d1f7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08ea7b0c169376065482bc672c36095f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testDiscardWorkingCopy4() throws CoreException", "signatureAfterChange": " \tpublic void testDiscardWorkingCopy4() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "+\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+", "+\t\tboolean gotException = false;", "-\t\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\t\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-", "-\t\t\tboolean gotException = false;", "-\t\t\ttry {", "-\t\t\t\tworkingCopy.getAllTypes();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\tgotException = true;", "-\t\t\t}", "-\t\t\tassertTrue(\"should not get a JavaModelException before discarding working copy\", !gotException);", "-", "-\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t", "-\t\t\tgotException = false;", "-\t\t\ttry {", "-\t\t\t\tworkingCopy.getAllTypes();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\tgotException = true;", "-\t\t\t}", "-\t\t\tassertTrue(\"should get a JavaModelException after discarding working copy\", gotException);", "-\t\t\t", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "+\t\t\tthis.workingCopy.getAllTypes();", "+\t\t} catch (JavaModelException e) {", "+\t\t\tgotException = true;", "+\t\tassertTrue(\"should not get a JavaModelException before discarding working copy\", !gotException);", "+", "+\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t", "+\t\tgotException = false;", "+\t\ttry {", "+\t\t\tthis.workingCopy.getAllTypes();", "+\t\t} catch (JavaModelException e) {", "+\t\t\tgotException = true;", "+\t\t}", "+\t\tassertTrue(\"should get a JavaModelException after discarding working copy\", gotException);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d4c2ef8ca43c2a6b0eb6af83862f28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testGetPrimary2() throws CoreException", "signatureAfterChange": " \tpublic void testGetPrimary2() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getCompilationUnit(\"P/X.java\");", "-\t\t\tworkingCopy.becomeWorkingCopy(null, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\");", "+\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "-\t\t\tassertEquals(\"Unexpected compilation unit\", workingCopy, workingCopy.getPrimary());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tassertEquals(\"Unexpected compilation unit\", this.workingCopy, this.workingCopy.getPrimary());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c97c43e06ac92ec026c545a8bbf3efa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testGetPrimaryElement2() throws CoreException", "signatureAfterChange": " \tpublic void testGetPrimaryElement2() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getCompilationUnit(\"P/X.java\");", "-\t\t\tworkingCopy.becomeWorkingCopy(null, null);", "-\t\t\tIJavaElement element = workingCopy.getType(\"X\");", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\");", "+\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "+\t\tIJavaElement element = this.workingCopy.getType(\"X\");", "-\t\t\tassertEquals(\"Unexpected element\", element, element.getPrimaryElement());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tassertEquals(\"Unexpected element\", element, element.getPrimaryElement());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b580baf0fc947fa61c4f6b8431637f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testBecomeWorkingCopy4() throws CoreException", "signatureAfterChange": " \tpublic void testBecomeWorkingCopy4() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getCompilationUnit(\"P/X.java\");", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\");", "-\t\t\t// count the number of time isCanceled() is called when converting this source unit", "-\t\t\tCancelCounter counter = new CancelCounter();", "-\t\t\tworkingCopy.becomeWorkingCopy(null, counter);", "-\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t// count the number of time isCanceled() is called when converting this source unit", "+\t\tCancelCounter counter = new CancelCounter();", "+\t\tthis.workingCopy.becomeWorkingCopy(null, counter);", "+\t\tthis.workingCopy.discardWorkingCopy();", "-\t\t\t// throw an OperatonCanceledException at each point isCanceled() is called", "-\t\t\tfor (int i = 0; i < counter.count; i++) {", "-\t\t\t\tboolean gotException = false;", "-\t\t\t\ttry {", "-\t\t\t\t\tworkingCopy.becomeWorkingCopy(null, new Canceler(i));", "-\t\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\t\tgotException = true;", "-\t\t\t\t}", "-\t\t\t\tassertTrue(\"Should get an OperationCanceledException (\" + i + \")\", gotException);", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t// throw an OperatonCanceledException at each point isCanceled() is called", "+\t\tfor (int i = 0; i < counter.count; i++) {", "+\t\t\tboolean gotException = false;", "+\t\t\ttry {", "+\t\t\t\tthis.workingCopy.becomeWorkingCopy(null, new Canceler(i));", "+\t\t\t} catch (OperationCanceledException e) {", "+\t\t\t\tgotException = true;", "-\t\t\t", "-\t\t\t// last should not throw an OperationCanceledException", "-\t\t\tworkingCopy.becomeWorkingCopy(null, new Canceler(counter.count));", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "+\t\t\tassertTrue(\"Should get an OperationCanceledException (\" + i + \")\", gotException);", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t", "+\t\t// last should not throw an OperationCanceledException", "+\t\tthis.workingCopy.becomeWorkingCopy(null, new Canceler(counter.count));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d921010434a1bf6835a0804d8bed27df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testBecomeWorkingCopy2() throws CoreException", "signatureAfterChange": " \tpublic void testBecomeWorkingCopy2() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getCompilationUnit(\"P/X.java\").getWorkingCopy(new TestWorkingCopyOwner(), null, null);", "-\t\t\tassertTrue(\"should be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t\t", "-\t\t\tworkingCopy.becomeWorkingCopy(null, null);", "-\t\t\tassertTrue(\"should still be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\").getWorkingCopy(new TestWorkingCopyOwner(), null, null);", "+\t\tassertTrue(\"should be in working copy mode\", this.workingCopy.isWorkingCopy());", "+\t\t", "+\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "+\t\tassertTrue(\"should still be in working copy mode\", this.workingCopy.isWorkingCopy());"]}], "num": 72923}
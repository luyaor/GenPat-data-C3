{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2f9bd5f7f597293042ac4538c37ce24", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829dda28007b0121be08be483015d975", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "signatureAfterChange": "  public void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "diff": ["+", "+public void parseMethod(Parser parser, CompilationUnitDeclaration unit) {", "+\t//connect method bodies", "+\tif (unit.ignoreMethodBodies)", "+\t\treturn;", "+", "+\t//members", "+\tif (this.memberTypes != null) {", "+\t\tint length = this.memberTypes.length;", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tthis.memberTypes[i].parseMethod(parser, unit);", "+\t}", "+", "+\t//methods", "+\tif (this.methods != null) {", "+\t\tint length = this.methods.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tthis.methods[i].parseStatements(parser, unit);", "+\t\t}", "+\t}", "+", "+\t//initializers", "+\tif (this.fields != null) {", "+\t\tint length = this.fields.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tfinal FieldDeclaration fieldDeclaration = this.fields[i];", "+\t\t\tswitch(fieldDeclaration.getKind()) {", "+\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\t\t\t((Initializer) fieldDeclaration).parseStatements(parser, this, unit);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "-", "-\tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit) {", "-", "-\t\t//connect method bodies", "-\t\tif (unit.ignoreMethodBodies)", "-\t\t\treturn;", "-", "-\t\t//members", "-\t\tif (memberTypes != null) {", "-\t\t\tint length = memberTypes.length;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tmemberTypes[i].parseMethod(parser, unit);", "-\t\t}", "-", "-\t\t//methods", "-\t\tif (methods != null) {", "-\t\t\tint length = methods.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tmethods[i].parseStatements(parser, unit);", "-\t\t\t}", "-\t\t}", "-", "-\t\t//initializers", "-\t\tif (fields != null) {", "-\t\t\tint length = fields.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tfinal FieldDeclaration fieldDeclaration = fields[i];", "-\t\t\t\tswitch(fieldDeclaration.getKind()) {", "-\t\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "-\t\t\t\t\t\t((Initializer) fieldDeclaration).parseStatements(parser, this, unit);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97c09da05c8498a1b1417e5d4e274244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "70e6cb7abc9d1f82b12c9182e5b9d5f442b62682", "commitAfterChange": "96e2d72045a6fecadbb495cf120a991e9af97b69", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["+\t\tint remainingFieldCount = 0;", "-\t\t\tint enumCount = 0;", "-\t\t\tint remainingFieldCount = 0;", "-\t\t\tif (fieldDeclarations != null) {", "+\t\t\tint enumCount = declaringType.enumConstantsCounter;", "+\t\t\tif (enumCount > ENUM_CONSTANTS_THRESHOLD) {", "+\t\t\t\t// generate synthetic methods to initialize all the enum constants", "+\t\t\t\tint begin = -1;", "+\t\t\t\tint count = 0;", "+\t\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\t\tint max = fieldDeclarations.length;", "+\t\t\t\t\tfor (int i = 0; i < max; i++) {", "+\t\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\t\tif (begin == -1) {", "+\t\t\t\t\t\t\t\t\tbegin = i;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\tif (count > ENUM_CONSTANTS_THRESHOLD) {", "+\t\t\t\t\t\t\t\t\tSyntheticMethodBinding syntheticMethod = declaringType.binding.addSyntheticMethodForEnumInitialization(begin, i);", "+\t\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, syntheticMethod, null /* default declaringClass */);", "+\t\t\t\t\t\t\t\t\tbegin = -1;", "+\t\t\t\t\t\t\t\t\tcount = 0;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t// add last synthetic method", "+\t\t\t\t\t\tSyntheticMethodBinding syntheticMethod = declaringType.binding.addSyntheticMethodForEnumInitialization(begin, max);", "+\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, syntheticMethod, null /* default declaringClass */);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (fieldDeclarations != null) {", "-\t\t\t\t\t\t\tenumCount++;", "-\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max && remainingFieldCount >= 0; i++) {", "-\t\t\t\t\t\t\tif (!fieldDecl.isStatic())", "+\t\t\t\t\t\t\tif (!fieldDecl.isStatic()) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tremainingFieldCount--;", "-\t\t\t\t\t\t\tif (!fieldDecl.binding.isStatic())", "+\t\t\t\t\t\t\tif (!fieldDecl.binding.isStatic()) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tremainingFieldCount--;"]}], "num": 43268}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b0e00999c41e587a4520d13e53d807a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9caa5819c20fdf5ad5b6f48f849ce0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "ae0a76573965cce34aad958398b603107880e8e6", "commitAfterChange": "22f68238a49995ff90d0a5b80069c5ce0a399d4d", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \t@Override \tpublic boolean mentionsAny(TypeBinding[] parameters, int idx)", "signatureAfterChange": " \t@Override \tpublic boolean mentionsAny(TypeBinding[] parameters, int idx)", "diff": ["-\t\tif (super.mentionsAny(parameters, idx))", "-\t\t\treturn true;", "-\t\tif (this.bound != null && \tthis.bound.mentionsAny(parameters, -1))", "-\t\t\treturn true;", "-\t\tif (this.otherBounds != null) {", "-\t\t\tfor (int i = 0, length = this.otherBounds.length; i < length; i++)", "-\t\t\t\tif (this.otherBounds[i].mentionsAny(parameters, -1))", "-\t\t\t\t\treturn true;", "+\t\tif (this.inRecursiveFunction)", "+\t\t\treturn false;", "+\t\tthis.inRecursiveFunction = true;", "+\t\ttry {", "+\t\t\tif (super.mentionsAny(parameters, idx))", "+\t\t\t\treturn true;", "+\t\t\tif (this.bound != null && \tthis.bound.mentionsAny(parameters, -1))", "+\t\t\t\treturn true;", "+\t\t\tif (this.otherBounds != null) {", "+\t\t\t\tfor (int i = 0, length = this.otherBounds.length; i < length; i++)", "+\t\t\t\t\tif (this.otherBounds[i].mentionsAny(parameters, -1))", "+\t\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.inRecursiveFunction = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1a30343343e9b9cd89b26a4507a310", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "eeb0d779ca54bfa774f6270ba7624121d1e2d305", "commitAfterChange": "7b2f4aa5695fcdfd1d231766a2116c4508084163", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\t\t\tint numArrayBounds = 0;", "-\t\t\t\t\t\tif (intersection.bound.isArrayType()) numArrayBounds++;", "-\t\t\t\t\t\tfor (int i = 0; i < intersection.otherBounds.length; i++) {", "-\t\t\t\t\t\t\tif (intersection.otherBounds[i].isArrayType()) numArrayBounds++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (numArrayBounds == 0)", "-\t\t\t\t\t\t\treturn FALSE;", "-\t\t\t\t\t\tInferenceContext18.missingImplementation(\"Cannot filter most specific array type\"); //$NON-NLS-1$", "-\t\t\t\t\t\t// FIXME assign sPrime", "+\t\t\t\t\t\tsPrimeArray = findMostSpecificSuperArray(intersection.bound, intersection.otherBounds, intersection);", "+\t\t\t\tcase Binding.TYPE_PARAMETER:", "+\t\t\t\t\t{", "+\t\t\t\t\t\tTypeVariableBinding subTVB = (TypeVariableBinding)subCandidate;", "+\t\t\t\t\t\tsPrimeArray = findMostSpecificSuperArray(subTVB.firstBound, subTVB.otherUpperBounds(), subTVB);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\tif (sPrimeArray == null)", "+\t\t\t\t\treturn FALSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df27214153f24a5116e4d461922447b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "commitAfterChange": "719705b20dc5e72fab3b2b50b669f9dfc58049aa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["-\t\treturn !squarePegInRoundHole(sam);", "+\t\tif (sam.returnType.id == TypeIds.T_void) {", "+\t\t\tif (!this.voidCompatible)", "+\t\t\t\treturn false;", "+\t\t} else {", "+\t\t\tif (!this.valueCompatible)", "+\t\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tif (!isPertinentToApplicability())", "+\t\t\treturn true;", "+\t", "+\t\tExpression [] returnExpressions = this.resultExpressions;", "+\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "+\t\t\tif (!returnExpressions[i].resolvedType.isCompatibleWith(sam.returnType))", "+\t\t\t\tif (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)", "+\t\t\t\t\treturn false;", "+\t\t}", "+\t", "+\t\tTypeBinding [] samPararameterTypes = sam.parameters;", "+\t\tfor (int i = 0, length = samPararameterTypes.length; i < length; i++) { // lengths known to be equal.", "+\t\t\tif (TypeBinding.notEquals(samPararameterTypes[i], this.argumentTypes[i]))", "+\t\t\t\treturn false;", "+\t\t}", "+", "+\t\treturn true;"]}], "num": 28603}
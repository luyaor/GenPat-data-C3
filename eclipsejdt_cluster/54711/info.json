{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe965b46fccae1744a401c7458e31732", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1256b615867cf6d09363446cfbcf89cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\t\t\t\tif (actualType == NullBinding) return;", "+\t\t\t\tif (actualType == TypeBinding.NULL) return;", "-\t\t\tcase CONSTRAINT_EQUAL :", "-\t\t\t\tvariableConstraint = CONSTRAINT_EQUAL;", "+\t\t\tcase TypeConstants.CONSTRAINT_EQUAL :", "+\t\t\t\tvariableConstraint = TypeConstants.CONSTRAINT_EQUAL;", "-\t\t\tcase CONSTRAINT_EXTENDS :", "-\t\t\t\tvariableConstraint = CONSTRAINT_SUPER;", "+\t\t\tcase TypeConstants.CONSTRAINT_EXTENDS :", "+\t\t\t\tvariableConstraint = TypeConstants.CONSTRAINT_SUPER;", "-\t\t\t\tvariableConstraint = CONSTRAINT_EXTENDS;", "+\t\t\t\tvariableConstraint =TypeConstants.CONSTRAINT_EXTENDS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14fecdaead6aa7daf28417cf7c68dc84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 182, "signatureBeforeChange": " final public void invoke(int opcode, int argsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature)", "signatureAfterChange": " protected void invoke(int opcode, int argsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature)", "diff": ["+}", "+protected void invoke(int opcode, int argsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature) {", "+\tcountLabels = 0;", "+\tint argCount = argsSize;", "+\tswitch(opcode) {", "+\t\tcase Opcodes.OPC_invokeinterface :", "+\t\t\tif (classFileOffset + 4 >= bCodeStream.length) {", "+\t\t\t\tresizeByteArray();", "+\t\t\t}", "+\t\t\tposition +=3;", "+\t\t\tbCodeStream[classFileOffset++] = Opcodes.OPC_invokeinterface;", "+\t\t\twriteUnsignedShort(constantPool.literalIndexForMethod(declaringClass, selector, signature, true));", "+\t\t\targCount++;", "+\t\t\tbCodeStream[classFileOffset++] = (byte) argCount;", "+\t\t\tbCodeStream[classFileOffset++] = 0;", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_invokevirtual :", "+\t\tcase Opcodes.OPC_invokespecial :", "+\t\t\tif (classFileOffset + 2 >= bCodeStream.length) {", "+\t\t\t\tresizeByteArray();", "+\t\t\t}", "+\t\t\tposition++;", "+\t\t\tbCodeStream[classFileOffset++] = (byte) opcode;", "+\t\t\twriteUnsignedShort(constantPool.literalIndexForMethod(declaringClass, selector, signature, false));", "+\t\t\targCount++;", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_invokestatic :", "+\t\t\tif (classFileOffset + 2 >= bCodeStream.length) {", "+\t\t\t\tresizeByteArray();", "+\t\t\t}", "+\t\t\tposition++;", "+\t\t\tbCodeStream[classFileOffset++] = Opcodes.OPC_invokestatic;", "+\t\t\twriteUnsignedShort(constantPool.literalIndexForMethod(declaringClass, selector, signature, false));", "+\t}", "+\tstackDepth += returnTypeSize - argCount;", "+\tif (stackDepth > stackMax) {", "+\t\tstackMax = stackDepth;", "+\t}", "+}", "-final public void invoke(int opcode, int argsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature) {", "-\tcountLabels = 0;", "-\tint argCount = argsSize;", "-\tswitch(opcode) {", "-\t\tcase OPC_invokeinterface :", "-\t\t\tif (classFileOffset + 4 >= bCodeStream.length) {", "-\t\t\t\tresizeByteArray();", "-\t\t\t}", "-\t\t\tposition +=3;", "-\t\t\tbCodeStream[classFileOffset++] = OPC_invokeinterface;", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForMethod(declaringClass, selector, signature, true));", "-\t\t\targCount++;", "-\t\t\tbCodeStream[classFileOffset++] = (byte) argCount;", "-\t\t\tbCodeStream[classFileOffset++] = 0;", "-\t\t\tbreak;", "-\t\tcase OPC_invokevirtual :", "-\t\tcase OPC_invokespecial :", "-\t\t\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\t\t\tresizeByteArray();", "-\t\t\t}", "-\t\t\tposition++;", "-\t\t\tbCodeStream[classFileOffset++] = (byte) opcode;", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForMethod(declaringClass, selector, signature, false));", "-\t\t\targCount++;", "-\t\t\tbreak;", "-\t\tcase OPC_invokestatic :", "-\t\t\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\t\t\tresizeByteArray();", "-\t\t\t}", "-\t\t\tposition++;", "-\t\t\tbCodeStream[classFileOffset++] = OPC_invokestatic;", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForMethod(declaringClass, selector, signature, false));", "-\t}", "-\tstackDepth += returnTypeSize - argCount;", "-\tif (stackDepth > stackMax) {", "-\t\tstackMax = stackDepth;", "-\t}", "-}"]}], "num": 54711}
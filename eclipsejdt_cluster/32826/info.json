{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4a131f91a86f4717eb8ad822a11cb88", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23fd94d9133ab3316127369ed3595862", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR308SpecSnippetTests.java", "commitBeforeChange": "2f99f11ed182db13b52f83c7f61547c34d00226d", "commitAfterChange": "7089fcfd703b096f125599a900905c00e15535fa", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void test034() throws Exception", "signatureAfterChange": " \tpublic void test034() throws Exception", "diff": ["+\t\t// javac b100", "+\t\t//\t\t  RuntimeInvisibleTypeAnnotations:", "+\t\t//\t\t\t    0: #13(): CLASS_TYPE_PARAMETER_BOUND, param_index=0, bound_index=1\t\t", "+\t\t// bound_index is 1 because the bound is an interface, not a class", "+\t\t\t\t\"// Compiled from X.java (version 1.8 : 52.0, super bit)\\n\" + ", "+\t\t\t\t\"// Signature: <T::Ljava/lang/Comparable;>Ljava/lang/Object;\\n\" + ", "+\t\t\t\t\"class X {\\n\" + ", "+\t\t\t\t\"  Constant pool:\\n\" + ", "+\t\t\t\t\"    constant #1 class: #2 X\\n\" + ", "+\t\t\t\t\"    constant #2 utf8: \\\"X\\\"\\n\" + ", "+\t\t\t\t\"    constant #3 class: #4 java/lang/Object\\n\" + ", "+\t\t\t\t\"    constant #4 utf8: \\\"java/lang/Object\\\"\\n\" + ", "+\t\t\t\t\"    constant #5 utf8: \\\"<init>\\\"\\n\" + ", "+\t\t\t\t\"    constant #6 utf8: \\\"()V\\\"\\n\" + ", "+\t\t\t\t\"    constant #7 utf8: \\\"Code\\\"\\n\" + ", "+\t\t\t\t\"    constant #8 method_ref: #3.#9 java/lang/Object.<init> ()V\\n\" + ", "+\t\t\t\t\"    constant #9 name_and_type: #5.#6 <init> ()V\\n\" + ", "+\t\t\t\t\"    constant #10 utf8: \\\"LineNumberTable\\\"\\n\" + ", "+\t\t\t\t\"    constant #11 utf8: \\\"LocalVariableTable\\\"\\n\" + ", "+\t\t\t\t\"    constant #12 utf8: \\\"this\\\"\\n\" + ", "+\t\t\t\t\"    constant #13 utf8: \\\"LX;\\\"\\n\" + ", "+\t\t\t\t\"    constant #14 utf8: \\\"LocalVariableTypeTable\\\"\\n\" + ", "+\t\t\t\t\"    constant #15 utf8: \\\"LX<TT;>;\\\"\\n\" + ", "+\t\t\t\t\"    constant #16 utf8: \\\"SourceFile\\\"\\n\" + ", "+\t\t\t\t\"    constant #17 utf8: \\\"X.java\\\"\\n\" + ", "+\t\t\t\t\"    constant #18 utf8: \\\"Signature\\\"\\n\" + ", "+\t\t\t\t\"    constant #19 utf8: \\\"<T::Ljava/lang/Comparable;>Ljava/lang/Object;\\\"\\n\" + ", "+\t\t\t\t\"    constant #20 utf8: \\\"RuntimeInvisibleTypeAnnotations\\\"\\n\" + ", "+\t\t\t\t\"    constant #21 utf8: \\\"LNonNull;\\\"\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "+\t\t\t\t\"  // Stack: 1, Locals: 1\\n\" + ", "+\t\t\t\t\"  X();\\n\" + ", "+\t\t\t\t\"    0  aload_0 [this]\\n\" + ", "+\t\t\t\t\"    1  invokespecial java.lang.Object() [8]\\n\" + ", "+\t\t\t\t\"    4  return\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 4]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"      Local variable type table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X<T>\\n\" + ", "+\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"      type parameter index = 0 type parameter bound index = 0\\n\" + ", "+\t\t\t\t\"      type parameter index = 0 type parameter bound index = 1\\n\" + ", "+\t\t\t\t\"    )\\n\" + ", "+\t\t\t\t\"}\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "684e088e3e35fe09e457679f852230bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1024, "methodNumberAfterChange": 1024, "signatureBeforeChange": " public void test1000()", "signatureAfterChange": " public void test1000()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"Type safety : A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" + ", "+\t\t\"Type safety: A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" + ", "-\t\t\"Type safety : A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" + ", "+\t\t\"Type safety: A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static final <T> Iterator<T> chain(Iterator<? extends T>... it) {\\n\" + ", "+\t\t\t\"\t                                                                   ^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation chain(Iterator[]) of the generic method chain(Iterator<? extends T>...) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator needs unchecked conversion to conform to Iterator<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator[] needs unchecked conversion to conform to Iterator<? extends Number>[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Iterator<Number&Comparable<?>> to Iterator<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Iterator<Integer> to Iterator<Number>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "877803a3d66810cc2f2b69f7676464e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "75ef57a93e4cb21ceda10f87f94dbbdb5e4d9d80", "commitAfterChange": "09c77a64b988d1b8740f2abeef7353a697d466b3", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_6 ?", "-\t\t\"----------\\n\"", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X3.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic abstract void test();\\n\" +", "+\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"The enum X3 can only define the abstract method test() if it also defines enum constants with corresponding implementations\\n\" +", "+\t\t\t\"----------\\n\"\t+", "+\t\t\t\"2. WARNING in X3.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic abstract void test();\\n\" +", "+\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"The method test() of type X3 should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+\t\t\t\"----------\\n\"", "-\t);", "+\t\t);", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_6 ?", "-\t\t\"----------\\n\"", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X3a.java (at line 2)\\n\" +", "+\t\t\t\"\tA;\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"The enum constant A must implement the abstract method test()\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. WARNING in X3a.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic abstract void test();\\n\" +", "+\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"The method test() of type X3a should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+\t\t\t\"----------\\n\"", "+", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_6 ?", "-\t\t\"----------\\n\"", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X3c.java (at line 2)\\n\" +", "+\t\t\t\"\tA() { void random() {} };\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"The enum constant A must implement the abstract method test()\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. WARNING in X3c.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic abstract void test();\\n\" +", "+\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"The method test() of type X3c should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+\t\t\t\"----------\\n\"", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5954b9bdea977da83dcbb7e725aae82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1177, "methodNumberAfterChange": 1177, "signatureBeforeChange": " public void test1148()", "signatureAfterChange": " public void test1148()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static <T> Comparator<T> compound(Comparator<? super T> a, Comparator<? super T> b, Comparator<? super T>... rest) {\\n\" + ", "+\t\t\t\"\t                                                                                                                    ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tint i = asList(a, b, rest);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<?>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint j = compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tcompound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tif (true) return compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tcompound(c);\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\treturn compound(c);\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tpublic static <E> List<E> asList(E a, E b, E... rest) {\\n\" + ", "+\t\t\t\"\t                                                ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e74eda31f27a9f36413a8a6044fe9803", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "c643d728d2e9e02e64e38383ffd6f16606630706", "commitAfterChange": "63388558ea06565be17a1534cd08a874e27b0880", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test004() throws CoreException", "signatureAfterChange": " public void test004() throws CoreException", "diff": ["-\t\tsortUnit(this.getCompilationUnit(\"/P/src/p/X.java\"));", "+\t\tString expectedResult = \"/**\\n\" +\r\t\t\t\" *\\n\" +\r\t\t\t\" */\\n\" +\r\t\t\t\"package p;\\n\" +\r\t\t\t\"public class X extends java.lang.Object implements java.util.Cloneable {\\n\" +\r\t\t\t\"\t\\n\" +\r\t\t\t\"\tclass D {\\n\" +\r\t\t\t\"\t\tString toString() {\\n\" +\r\t\t\t\"\t\t\treturn \\\"HELLO\\\";\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\tvoid bar() {\\n\" +\r\t\t\t\"\t\t\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\t\tclass E {\\n\" +\r\t\t\t\"\t\t\tvoid bar2() {}\\n\" +\r\t\t\t\"\t\t\tObject bar7() {\\n\" +\r\t\t\t\"\t\t\t\treturn new Object() {\\n\" +\r\t\t\t\"\t\t\t\t\tvoid bar2() {}\\n\" +\r\t\t\t\"\t\t\t\t\tvoid bar9() {}\\n\" +\r\t\t\t\"\t\t\t\t};\\n\" +\r\t\t\t\"\t\t\t}\\n\" +\r\t\t\t\"\t\t\tvoid bar9() {}\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tObject o = new E();\\n\" +\r\t\t\t\"\t\tSystem.out.println(o);\\n\" +\r\t\t\t\"\t\tclass C {\\n\" +\r\t\t\t\"\t\t\tvoid bar4() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar5() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar6() {}\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\t// start of method declaration\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\tvoid bar(final int i[]) {\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\t// end of class X\\n\" +\r\t\t\t\"}\\n\" +\r\t\t\t\"// end of compilation unit\\n\";", "+\t\tsortUnit(this.getCompilationUnit(\"/P/src/p/X.java\"), expectedResult);"]}], "num": 32826}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3b462ad6f0bb7aec043d4a35cae6f25", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab8fe9a985646abdd57f1014afc51a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local,  \t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local,  \t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\t\tcase CAN_ONLY_NULL_NON_NULL :", "+\t\tcase CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL:", "+\t\tcase CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL:", "-\t\t\t\tscope.problemReporter().localVariableCannotBeNull(local, reference);\t\t\t\t", "+\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t} else {", "+\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t}", "-\t\tcase CAN_ONLY_NULL:", "+\t\tcase CAN_ONLY_NULL | IN_COMPARISON_NULL:", "+\t\tcase CAN_ONLY_NULL | IN_COMPARISON_NON_NULL:", "+\t\tcase CAN_ONLY_NULL | IN_ASSIGNMENT:", "+\t\tcase CAN_ONLY_NULL | IN_INSTANCEOF:", "-\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\telse if (flowInfo.cannotBeDefinitelyNullOrNonNull(local)) {", "+\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\t\tcase FlowContext.IN_COMPARISON_NULL:", "+\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tcase FlowContext.IN_COMPARISON_NON_NULL:", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tcase FlowContext.IN_ASSIGNMENT:", "+\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tcase FlowContext.IN_INSTANCEOF:", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, reference);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t} else if (flowInfo.cannotBeDefinitelyNullOrNonNull(local)) {", "-\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\tscope.problemReporter().localVariableMayBeNull(local, reference);", "+\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2f4b92e7eb0d18f9ac5a0ba8404a270", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "diff": ["-\t\t\t\tcase CAN_ONLY_NULL_NON_NULL :", "+\t\t\t\tcase CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL:", "+\t\t\t\tcase CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL:", "-\t\t\t\t\t\tscope.problemReporter().localVariableCannotBeNull(local, expression);\t\t\t\t", "+\t\t\t\t\t\tif (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t}", "-\t\t\t\tcase CAN_ONLY_NULL:", "+\t\t\t\tcase CAN_ONLY_NULL | IN_COMPARISON_NULL:", "+\t\t\t\tcase CAN_ONLY_NULL | IN_COMPARISON_NON_NULL:", "+\t\t\t\tcase CAN_ONLY_NULL | IN_ASSIGNMENT:", "+\t\t\t\tcase CAN_ONLY_NULL | IN_INSTANCEOF:", "-\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\tswitch(this.nullCheckTypes[i] & CONTEXT_MASK) {", "+\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NULL:", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NON_NULL:", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\tcase FlowContext.IN_ASSIGNMENT:", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, expression);", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\tcase FlowContext.IN_INSTANCEOF:", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, expression);", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "-\t\t\t\tcase MAY_NULL :", "+\t\t\t\tcase MAY_NULL:", "-\t\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().localVariableMayBeNull(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);"]}], "num": 32304}
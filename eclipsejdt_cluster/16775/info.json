{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1702cbb864346514eee53b55bd1014ac", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9f573ce87a02cd402acae9a5fd334e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "ca0a8d2a8dcbdca4c1d22b2aafd247d22556e537", "commitAfterChange": "1155b311a647fc5f126edd0c5e6b818f225baee0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void endVisit(Block node)", "signatureAfterChange": "  \tpublic void endVisit(Block node)", "diff": ["-\t\tint level = node.getAST().apiLevel;", "-\t\t", "-\t\tList statements = node.statements();", "-\t\tnext : for (int i = 0, max = statements.size(); i < max; i++) {", "-\t\t\tASTNode statement = (ASTNode) statements.get(i);", "-\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "-\t\t\t\tVariableDeclarationStatement variableDeclarationStatement =  (VariableDeclarationStatement) statement;", "-\t\t\t\t", "-\t\t\t\tif (level == AST.JLS2_INTERNAL) {", "-\t\t\t\t\tif (variableDeclarationStatement.getModifiers() != Modifier.NONE) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (level >= AST.JLS3_INTERNAL) {", "-\t\t\t\t\tif (variableDeclarationStatement.modifiers().size() != 0) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tType type = variableDeclarationStatement.getType();", "-\t\t\t\tif (type.getNodeType() != ASTNode.SIMPLE_TYPE) {", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tList fragments = variableDeclarationStatement.fragments();", "-\t\t\t\tif (fragments.size() == 1) {", "-\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\t\t\t", "-\t\t\t\t\tSimpleName simpleName = fragment.getName();", "-\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "-\t\t\t\t\t\tSimpleType simpleType = (SimpleType) type;", "-\t\t\t\t\t\tName name = simpleType.getName();", "-\t\t\t\t\t\tname.setParent(null, null);", "-\t\t\t\t\t\tname.setFlags(name.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tfinal ExpressionStatement stmt = new ExpressionStatement(name.getAST());", "-\t\t\t\t\t\tstmt.setExpression(name);", "-\t\t\t\t\t\tstmt.setSourceRange(variableDeclarationStatement.getStartPosition(), variableDeclarationStatement.getLength());", "-\t\t\t\t\t\tstmt.setFlags(stmt.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tstatements.add(i, stmt);", "-\t\t\t\t\t\tstatements.remove(variableDeclarationStatement);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f91d71235024ca28ddd6e7b42cfeb5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void endVisit(Block node)", "signatureAfterChange": "  \tpublic void endVisit(Block node)", "diff": ["+\t\tint level = node.getAST().apiLevel;", "+\t\t", "+\t\tList statements = node.statements();", "+\t\tnext : for (int i = 0, max = statements.size(); i < max; i++) {", "+\t\t\tASTNode statement = (ASTNode) statements.get(i);", "+\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "+\t\t\t\tVariableDeclarationStatement variableDeclarationStatement =  (VariableDeclarationStatement) statement;", "+\t\t\t\t", "+\t\t\t\tif (level == AST.JLS2_INTERNAL) {", "+\t\t\t\t\tif (variableDeclarationStatement.getModifiers() != Modifier.NONE) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (level >= AST.JLS3_INTERNAL) {", "+\t\t\t\t\tif (variableDeclarationStatement.modifiers().size() != 0) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tType type = variableDeclarationStatement.getType();", "+\t\t\t\tif (type.getNodeType() != ASTNode.SIMPLE_TYPE) {", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tList fragments = variableDeclarationStatement.fragments();", "+\t\t\t\tif (fragments.size() == 1) {", "+\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\t\t\t", "+\t\t\t\t\tSimpleName simpleName = fragment.getName();", "+\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "+\t\t\t\t\t\tSimpleType simpleType = (SimpleType) type;", "+\t\t\t\t\t\tName name = simpleType.getName();", "+\t\t\t\t\t\tname.setParent(null, null);", "+\t\t\t\t\t\tname.setFlags(name.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tfinal ExpressionStatement stmt = new ExpressionStatement(name.getAST());", "+\t\t\t\t\t\tstmt.setExpression(name);", "+\t\t\t\t\t\tstmt.setSourceRange(variableDeclarationStatement.getStartPosition(), variableDeclarationStatement.getLength());", "+\t\t\t\t\t\tstmt.setFlags(stmt.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tstatements.add(i, stmt);", "+\t\t\t\t\t\tstatements.remove(variableDeclarationStatement);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 16775}
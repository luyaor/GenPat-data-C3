{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20e52a3f4b68f206ef3d14b28aa02d01", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "156bb88f3607c679c1f6a88d013759c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "74d118e989117eba0163f0f707314197db0891af", "commitAfterChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "signatureAfterChange": "  private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "diff": ["-\tif (annotations == null || annotations.length == 0)", "+\tif (annotations == null || annotations.length == 0 || !this.environment.usesAnnotatedTypeSystem()) {", "+\t\tif (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\tint nullness = getNullDefault();", "+\t\t\tif (nullness > Binding.NULL_UNSPECIFIED_BY_DEFAULT)", "+\t\t\t\treturn new NonNullDefaultAwareTypeAnnotationWalker(nullness, this.environment);", "+\t\t}", "-\t", "-\treturn this.environment.usesAnnotatedTypeSystem() ? new TypeAnnotationWalker(annotations) : TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "+\t}", "+\tif (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\tint nullness = getNullDefault();", "+\t\tif (nullness > Binding.NULL_UNSPECIFIED_BY_DEFAULT)", "+\t\t\treturn new NonNullDefaultAwareTypeAnnotationWalker(annotations, nullness, this.environment);", "+\t}", "+\treturn new TypeAnnotationWalker(annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0c906c21a90a3f5156a523a62ddacfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveryScanner.java", "commitBeforeChange": "6b1f52d06754e9410aa789dbd826f9d303675356", "commitAfterChange": "b62ba1f827cf4ea86ca5f1a1ddb9504a62920662", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic int getNextToken() throws InvalidInputException", "signatureAfterChange": " \t \tpublic int getNextToken() throws InvalidInputException", "diff": ["-\t\t\treturn this.pendingTokens[this.pendingTokensPtr--];", "+\t\t\tint nextToken = this.pendingTokens[this.pendingTokensPtr--];", "+\t\t\tif(nextToken == TerminalTokens.TokenNameIdentifier){", "+\t\t\t\tthis.fakeTokenSource = FAKE_IDENTIFIER;", "+\t\t\t} else {", "+\t\t\t\tthis.fakeTokenSource = CharOperation.NO_CHAR;", "+\t\t\t}", "+\t\t\treturn nextToken;", "-\t\t\t\t\tthis.fakeTokenSource = CharOperation.NO_CHAR;", "-\t\t\t\t\treturn this.pendingTokens[this.pendingTokensPtr--];", "+\t\t\t\t\tint nextToken = this.pendingTokens[this.pendingTokensPtr--];", "+\t\t\t\t\tif(nextToken == TerminalTokens.TokenNameIdentifier){", "+\t\t\t\t\t\tthis.fakeTokenSource = FAKE_IDENTIFIER;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.fakeTokenSource = CharOperation.NO_CHAR;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn nextToken;", "-\t\t\t\t\tthis.fakeTokenSource = CharOperation.NO_CHAR;", "+\t\t\t\t\tthis.fakeTokenSource = FAKE_IDENTIFIER;", "-\t\t\t\t\treturn this.pendingTokens[this.pendingTokensPtr--];", "+\t\t\t\t\tint nextToken = this.pendingTokens[this.pendingTokensPtr--];", "+\t\t\t\t\tif(nextToken == TerminalTokens.TokenNameIdentifier){", "+\t\t\t\t\t\tthis.fakeTokenSource = FAKE_IDENTIFIER;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.fakeTokenSource = CharOperation.NO_CHAR;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn nextToken;"]}], "num": 65916}
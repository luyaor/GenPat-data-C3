{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "499353fada155a58e6e5ac9d7274de85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a4cd501354c551e926c0b3ccc789720", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " \tpublic static String typeSignature(TypeReference type)", "signatureAfterChange": " \tpublic static String typeSignature(TypeReference type)", "diff": ["-\t\tchar[][] compoundName = type.getParameterizedTypeName();", "-\t\tchar[] typeName =CharOperation.concatWith(compoundName, '.');", "-\t\tString signature = Signature.createTypeSignature(typeName, false/*don't resolve*/);", "+\t\tString signature = null;", "+\t\tif ((type.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsUnionType) != 0) {", "+\t\t\t// special treatment for union type reference", "+\t\t\tUnionTypeReference unionTypeReference = (UnionTypeReference) type;", "+\t\t\tTypeReference[] typeReferences = unionTypeReference.typeReferences;", "+\t\t\tint length = typeReferences.length;", "+\t\t\tString[] typeSignatures = new String[length];", "+\t\t\tfor(int i = 0; i < length; i++) {", "+\t\t\t\tchar[][] compoundName = typeReferences[i].getParameterizedTypeName();", "+\t\t\t\tchar[] typeName = CharOperation.concatWith(compoundName, '.');", "+\t\t\t\ttypeSignatures[i] = Signature.createTypeSignature(typeName, false/*don't resolve*/);", "+\t\t\t}", "+\t\t\tsignature = Signature.createIntersectionTypeSignature(typeSignatures);", "+\t\t} else {", "+\t\t\tchar[][] compoundName = type.getParameterizedTypeName();", "+\t\t\tchar[] typeName =CharOperation.concatWith(compoundName, '.');", "+\t\t\tsignature = Signature.createTypeSignature(typeName, false/*don't resolve*/);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1c1360a58e0925d24f9685d448e34c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void consumeMethod(char[] selector, char[] signature)", "signatureAfterChange": "  \tpublic void consumeMethod(char[] selector, char[] signature)", "diff": ["+\t\t\t\t} else if ((method.tagBits & TagBits.AnnotationPolymorphicSignature) != 0) {", "+\t\t\t\t\tthis.typeBinding = null;", "+\t\t\t\t\tchar[][] typeParameters = Signature.getParameterTypes(signature);", "+\t\t\t\t\tint length = typeParameters.length;", "+\t\t\t\t\tTypeBinding[] parameterTypes = new TypeBinding[length];", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\tparameterTypes[j] = getType(typeParameters[j]);", "+\t\t\t\t\t}", "+\t\t\t\t\tPolymorphicMethodBinding polymorphicMethod = this.environment.createPolymorphicMethod(method, parameterTypes);", "+\t\t\t\t\tthis.methodBinding = polymorphicMethod;", "+\t\t\t\t\tthis.methodBinding = this.environment.updatePolymorphicMethodReturnType(", "+\t\t\t\t\t\t\tpolymorphicMethod,", "+\t\t\t\t\t\t\tgetType(Signature.getReturnType(signature)));", "+\t\t\t\t\tthis.compilerBinding = this.methodBinding;", "+\t\t\t\t\treturn;"]}], "num": 51935}
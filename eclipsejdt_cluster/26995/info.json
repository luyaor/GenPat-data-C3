{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5eace693dccb54226c6c04362a5dde20", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129a68f57ca91a11a024cd1bee60d7ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void test0052b()", "signatureAfterChange": " public void test0052b()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\"\tX<String> x2 = new X<String>(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\"\t                   ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <String>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tX<String> x22 = new X<String>(1,\\\"SUCCESS\\\");\\n\" + ", "-\t\t\"\t                    ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <String>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\tX<Integer> x3 = new X<Integer>(1);\\n\" + ", "-\t\t\"\t                    ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tString s = foo(new X<String>(\\\"aaa\\\"));\\n\" + ", "-\t\t\"\t                   ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <String>\\n\" + ", "-\t\t\"----------\\n\",", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tX<String> x22 = new X<String>(1,\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tX<Integer> x3 = new X<Integer>(1);\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tString s = foo(new X<String>(\\\"aaa\\\"));\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t: // additional error at line 7 due to better inference", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX<Number> x = new X<Number>(1);\\n\" + ", "+\t\t\t\"\t                  ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tX<String> x22 = new X<String>(1,\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tX<Integer> x3 = new X<Integer>(1);\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tString s = foo(new X<String>(\\\"aaa\\\"));\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52285b5baaa3b79afd9c1acdd99ad8c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1175, "methodNumberAfterChange": 1175, "signatureBeforeChange": " public void test1146()", "signatureAfterChange": " public void test1146()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tComparator<? super T>... rest) {\\n\" + ", "+\t\t\t\"\t                         ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tint i = asList(a, b, rest);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<?>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tint j = asList2(a, b);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<? extends Object>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tpublic static <E> List<E> asList(E a, E b, E... rest) {\\n\" + ", "+\t\t\t\"\t                                                ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ec9e1d707a4c9e2a19b3cf72dc63978", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 976, "methodNumberAfterChange": 976, "signatureBeforeChange": " public void test0952()", "signatureAfterChange": " public void test0952()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"Type safety : A generic array of Iterable<Object> is created for a varargs parameter\\n\" +", "+\t\t\"Type safety: A generic array of Iterable<Object> is created for a varargs parameter\\n\" +", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" : ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic <T> Iterable<T> m(T... ts) {\\n\" + ", "+\t\t\t\"\t                              ^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter ts\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic <T> void m3(Iterable<T>... ts) {\\n\" + ", "+\t\t\t\"\t                                  ^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter ts\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tm3(m(null));\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: A generic array of Iterable<Object> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tm3(m(null));\\n\" + ", "+\t\t\t\"\t   ^^^^^^^\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method m(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6cd8f77478398073a15e14f0ed21f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void test074()", "signatureAfterChange": " public void test074()", "diff": ["-\t\t\t\"}\"", "+\t\t\t\"}\\n\" +", "+\t\t\t\"public class Y {}\\n\"", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t: // no ambiguities in 1.8", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Y.java (at line 3)\\n\" + ", "+\t\t\t\"\tvoid a(I x) {}\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Y.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass C extends B implements I {\\n\" + ", "+\t\t\t\"\t                             ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Y.java (at line 28)\\n\" + ", "+\t\t\t\"\tvoid a(I x) {}\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Y.java (at line 33)\\n\" + ", "+\t\t\t\"\tclass B2 extends A2 {}\\n\" + ", "+\t\t\t\"\t                 ^^\\n\" + ", "+\t\t\t\"A2 is a raw type. References to generic type A2<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Y.java (at line 34)\\n\" + ", "+\t\t\t\"\tclass C2 extends B2 implements I {\\n\" + ", "+\t\t\t\"\t                               ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\")"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d63a566d1e4bdd52bd4cfd13d87ece4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "266fb0d2bc58e2f4f179d2c1279dee095ed53e45", "commitAfterChange": "74a3b98be7e8e7ea98628bddc70a14abe6965022", "methodNumberBeforeChange": 1176, "methodNumberAfterChange": 1176, "signatureBeforeChange": " public void test1146()", "signatureAfterChange": " public void test1146()", "diff": ["+\t\t(this.complianceLevel == ClassFileConstants.JDK1_7 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tComparator<? super T>... rest) {\\n\" + ", "+\t\t\t\"\t                         ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tint i = asList(a, b, rest);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<?>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tint j = asList2(a, b);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<? extends Object>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tpublic static <E> List<E> asList(E a, E b, E... rest) {\\n\" + ", "+\t\t\t\"\t                                                ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t: // 1.8 : one fewer error due to better type inference:", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db0da4424753ba20d299ca43c2c892af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_5.java", "commitBeforeChange": "dc4b7f29cbc081bf926da3e5bbe190211f71fab8", "commitAfterChange": "f7e6d1d2cfb98a7b4978211f1a2a14a589cab571", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test011() throws ClassFormatException, IOException", "signatureAfterChange": " \tpublic void test011() throws ClassFormatException, IOException", "diff": ["+\t\tif (this.complianceLevel.equals(COMPLIANCE_1_6)) {", "+\t\t\texpectedOutput =", "+\t\t\t\t\"// Compiled from X.java (version 1.6 : 50.0, no super bit)\\n\" + ", "+\t\t\t\t\"public abstract @interface X extends java.lang.annotation.Annotation {\\n\" + ", "+\t\t\t\t\"  Constant pool:\\n\" + ", "+\t\t\t\t\"    constant #1 class: #2 X\\n\" + ", "+\t\t\t\t\"    constant #2 utf8: \\\"X\\\"\\n\" + ", "+\t\t\t\t\"    constant #3 class: #4 java/lang/Object\\n\" + ", "+\t\t\t\t\"    constant #4 utf8: \\\"java/lang/Object\\\"\\n\" + ", "+\t\t\t\t\"    constant #5 class: #6 java/lang/annotation/Annotation\\n\" + ", "+\t\t\t\t\"    constant #6 utf8: \\\"java/lang/annotation/Annotation\\\"\\n\" + ", "+\t\t\t\t\"    constant #7 utf8: \\\"SourceFile\\\"\\n\" + ", "+\t\t\t\t\"    constant #8 utf8: \\\"X.java\\\"\\n\" + ", "+\t\t\t\t\"    constant #9 utf8: \\\"RuntimeVisibleAnnotations\\\"\\n\" + ", "+\t\t\t\t\"    constant #10 utf8: \\\"Ljava/lang/annotation/Target;\\\"\\n\" + ", "+\t\t\t\t\"    constant #11 utf8: \\\"value\\\"\\n\" + ", "+\t\t\t\t\"    constant #12 utf8: \\\"Ljava/lang/annotation/Retention;\\\"\\n\" + ", "+\t\t\t\t\"    constant #13 utf8: \\\"Ljava/lang/annotation/RetentionPolicy;\\\"\\n\" + ", "+\t\t\t\t\"    constant #14 utf8: \\\"RUNTIME\\\"\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"  RuntimeVisibleAnnotations: \\n\" + ", "+\t\t\t\t\"    #10 @java.lang.annotation.Target(\\n\" + ", "+\t\t\t\t\"      #11 value=[\\n\" + ", "+\t\t\t\t\"        ]\\n\" + ", "+\t\t\t\t\"    )\\n\" + ", "+\t\t\t\t\"    #12 @java.lang.annotation.Retention(\\n\" + ", "+\t\t\t\t\"      #11 value=java.lang.annotation.RetentionPolicy.RUNTIME(enum type #13.#14)\\n\" + ", "+\t\t\t\t\"    )\\n\" + ", "+\t\t\t\t\"}\";", "+\t\t}"]}], "num": 26995}
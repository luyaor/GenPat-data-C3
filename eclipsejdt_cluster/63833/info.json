{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f94b5fd9aaa55f287543f4bd1ec4240b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "572b74b81996656dd27fc80894e47709", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "1e302d0e8b80cb29d9d8ffac754bc44f21cd1c12", "commitAfterChange": "7e61b3f01f8b2328acee556fdc4ddf75c1702dd3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate Object reduceTypeEquality()", "signatureAfterChange": "  \tprivate Object reduceTypeEquality(TypeBinding object)", "diff": ["-\tprivate Object reduceTypeEquality() {", "+\tprivate Object reduceTypeEquality(TypeBinding object) {", "+\t\t\t\t// left and right are wildcards (\"type arguments\")", "-\t\t\t\tif (leftWC.bound == null && rightWC.bound == null)", "+\t\t\t\tif (leftWC.boundKind == Wildcard.UNBOUND && rightWC.boundKind == Wildcard.UNBOUND)", "+\t\t\t\tif (leftWC.boundKind == Wildcard.UNBOUND && rightWC.boundKind == Wildcard.EXTENDS)", "+\t\t\t\t\treturn new ConstraintTypeFormula(object, rightWC.bound, SAME, this.isSoft);", "+\t\t\t\tif (leftWC.boundKind == Wildcard.EXTENDS && rightWC.boundKind == Wildcard.UNBOUND)", "+\t\t\t\t\treturn new ConstraintTypeFormula(leftWC.bound, object, SAME, this.isSoft);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27978ab4af4e5311a36b04f92b2c006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "1e302d0e8b80cb29d9d8ffac754bc44f21cd1c12", "commitAfterChange": "7e61b3f01f8b2328acee556fdc4ddf75c1702dd3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\treturn reduceTypeEquality();", "+\t\t\treturn reduceTypeEquality(inferenceContext.object);", "-\t\t\t\tif (t.boundKind == Wildcard.UNBOUND || t.bound.id == TypeIds.T_JavaLangObject)", "+\t\t\t\tif (t.boundKind == Wildcard.UNBOUND)", "-\t\t\t\t\t\tif (s.boundKind == Wildcard.EXTENDS) {", "-\t\t\t\t\t\t\treturn new ConstraintTypeFormula(s.bound, t.bound, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t\t\tswitch (s.boundKind) {", "+\t\t\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\t\t\treturn new ConstraintTypeFormula(inferenceContext.object, t.bound, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\t\tcase Wildcard.EXTENDS: ", "+\t\t\t\t\t\t\t\treturn new ConstraintTypeFormula(s.bound, t.bound, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\t\tcase Wildcard.SUPER: ", "+\t\t\t\t\t\t\t\treturn new ConstraintTypeFormula(inferenceContext.object, t.bound, SAME, this.isSoft);", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Unexpected boundKind \"+s.boundKind);  //$NON-NLS-1$"]}], "num": 63833}
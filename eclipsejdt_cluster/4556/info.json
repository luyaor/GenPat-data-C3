{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5f75e4d7e0bc8c39619c3b3c22827d4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095b2db7c5c9b8055f379a99a0f361f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding substitute(TypeVariableBinding originalVariable)", "signatureAfterChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "diff": ["+\t\t// With T mapping to I<T>, answer of I<?>, when given T, having eliminated the circularity/self reference.", "+\t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable) {", "+\t\t\tif (typeVariable.rank >= this.variables.length || this.variables[typeVariable.rank] != typeVariable) {   // not kosher, don't touch.", "+\t\t\t\treturn typeVariable;", "+\t\t\t}", "+\t\t\tif (this.substitutes != null) {", "+\t\t\t\treturn Scope.substitute(new LingeringTypeVariableEliminator(this.variables, null, this.scope), this.substitutes[typeVariable.rank]); ", "+\t\t\t}", "+\t\t\tReferenceBinding genericType = (ReferenceBinding) (typeVariable.declaringElement instanceof ReferenceBinding ? typeVariable.declaringElement : null);", "+\t\t\treturn this.scope.environment().createWildcard(genericType, typeVariable.rank, null, null, Wildcard.UNBOUND);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b73fe6439a0bc976a794454ba48119c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "d494061822bf66b556c508f9ca4f7e71b13fbf24", "commitAfterChange": "4a14cff07af897fa6fd1e39d79ba89e29e62a842", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, HashSet visitedTypes)", "signatureAfterChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, HashSet visitedTypes)", "diff": ["-\t\t\t\tif (visitedTypes.contains(typeBinding)) return true;", "-\t\t\t\tvisitedTypes.add(typeBinding);", "-\t\t\t\t", "-\t\t\t\t\treturn captureBinding.position == captureBinding2.position", "-\t\t\t\t\t\t&& isEqual(captureBinding.wildcard, captureBinding2.wildcard, visitedTypes)", "-\t\t\t\t\t\t&& isEqual(captureBinding.sourceType, captureBinding2.sourceType, visitedTypes);", "+\t\t\t\t\tif (captureBinding.position == captureBinding2.position) {", "+\t\t\t\t\t\tif (visitedTypes.contains(typeBinding)) return true;", "+\t\t\t\t\t\tvisitedTypes.add(typeBinding);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\treturn isEqual(captureBinding.wildcard, captureBinding2.wildcard, visitedTypes)", "+\t\t\t\t\t\t\t&& isEqual(captureBinding.sourceType, captureBinding2.sourceType, visitedTypes);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "-\t\t\t\treturn CharOperation.equals(typeVariableBinding.sourceName, typeVariableBinding2.sourceName)", "-\t\t\t\t\t&& isEqual(typeVariableBinding.declaringElement, typeVariableBinding2.declaringElement, visitedTypes)", "+\t\t\t\tif (CharOperation.equals(typeVariableBinding.sourceName, typeVariableBinding2.sourceName)) {", "+\t\t\t\t\tif (visitedTypes.contains(typeBinding)) return true;", "+\t\t\t\t\tvisitedTypes.add(typeBinding);", "+", "+\t\t\t\t\treturn isEqual(typeVariableBinding.declaringElement, typeVariableBinding2.declaringElement, visitedTypes)", "-\t\t\t", "+\t\t\t\t}", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c1befcd0e32d5eceacbf80e00888c04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fe8f03030c996e7f3abaa101bf62fc6c88122090", "commitAfterChange": "6d1faf59eca3993e15acf1ea89971443445f40e5", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tpublic MethodBinding getStaticFactory (ParameterizedTypeBinding allocationType, ReferenceBinding originalEnclosingType, TypeBinding[] argumentTypes, final InvocationSite allocationSite)", "signatureAfterChange": " \tpublic MethodBinding getStaticFactory (ParameterizedTypeBinding allocationType, ReferenceBinding originalEnclosingType, TypeBinding[] argumentTypes, final InvocationSite allocationSite)", "diff": ["-\t\t\t\tmap.put(original, staticFactory.typeVariables[j] = new TypeVariableBinding(CharOperation.concat(original.sourceName, prime.toCharArray()),", "+\t\t\t\tmap.put(original.unannotated(), staticFactory.typeVariables[j] = new TypeVariableBinding(CharOperation.concat(original.sourceName, prime.toCharArray()),", "-\t\t\t\tmap.put(methodTypeVariables[k], ", "+\t\t\t\tmap.put(methodTypeVariables[k].unannotated(), ", "-\t\t\t\t\t\tTypeBinding retVal = (TypeBinding) map.get(typeVariable);", "+\t\t\t\t\t\tTypeBinding retVal = (TypeBinding) map.get(typeVariable.unannotated());", "-\t\t\t\tTypeVariableBinding substitutedVariable = (TypeVariableBinding) map.get(originalVariable);", "+\t\t\t\tTypeVariableBinding substitutedVariable = (TypeVariableBinding) map.get(originalVariable.unannotated());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d148e1054651da68111370f6f3fbe1bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "17b1cbd42bc737b47c9ebf5ceda98737740d0825", "commitAfterChange": "c184ff0d8868e4e4a23c45be667e27d2482aa33f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tstatic boolean isEqual(TypeVariableBinding[] bindings, TypeVariableBinding[] otherBindings)", "signatureAfterChange": " \tstatic boolean isEqual(TypeVariableBinding[] bindings, TypeVariableBinding[] otherBindings)", "diff": ["-\t\t\t\tif (!isEqual(typeVariableBinding.declaringElement, typeVariableBinding2.declaringElement)", "-\t\t\t\t\t\t|| !isEqual(typeVariableBinding.firstBound, typeVariableBinding2.firstBound)", "-\t\t\t\t\t\t|| !isEqual(typeVariableBinding.superclass, typeVariableBinding2.superclass)", "-\t\t\t\t\t\t|| !isEqual(typeVariableBinding.superInterfaces, typeVariableBinding2.superInterfaces)) {", "-\t\t\t\t\treturn false;", "+\t\t\t\tif (CharOperation.equals(typeVariableBinding.sourceName, typeVariableBinding2.sourceName)", "+\t\t\t\t\t\t&& isEqual(typeVariableBinding.declaringElement, typeVariableBinding2.declaringElement, false)", "+\t\t\t\t\t\t&& isEqual(typeVariableBinding.superclass, typeVariableBinding2.superclass, false)", "+\t\t\t\t\t\t&& isEqual(typeVariableBinding.superInterfaces, typeVariableBinding2.superInterfaces, false)) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\treturn false;"]}], "num": 4556}
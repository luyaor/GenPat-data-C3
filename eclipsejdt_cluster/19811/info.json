{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cb678ce840f098d3f648da5629727fa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06aad20504e6943ee389f341b96872c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "f38b96656aef85b5b86d64697671deefe0bca269", "commitAfterChange": "c52df8b6239c52991a6ade22b591b2cd9d4e9815", "methodNumberBeforeChange": 378, "methodNumberAfterChange": 378, "signatureBeforeChange": " public void test1056_options_mix_with_SuppressWarnings()", "signatureAfterChange": " public void test1056_options_mix_with_SuppressWarnings()", "diff": ["-\tMap customOptions = getCompilerOptions();", "-\tcustomOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.ERROR);", "-\tcustomOptions.put(CompilerOptions.OPTION_ReportPotentialNullReference, CompilerOptions.WARNING);", "-\tcustomOptions.put(CompilerOptions.OPTION_ReportRedundantNullCheck, CompilerOptions.WARNING);", "-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t  \"public class X {\\n\" + ", "-\t\t\t  \"@SuppressWarnings(\\\"null\\\")\\n\" + ", "-\t\t\t  \"  void foo(Object p) {\\n\" + ", "-\t\t\t  \"    Object o = null;\\n\" +", "-\t\t\t  \"    if (o != null) {\\n\" +", "-\t\t\t  \"       o = null;\\n\" +", "-\t\t\t  \"    }\\n\" +", "-\t\t\t  \"    if (p == null) {}\\n\" + // taint p ", "-\t\t\t  \"    o.toString();\\n\" +", "-\t\t\t  \"    p.toString();\\n\" + ", "-\t\t\t  \"  }\\n\" + ", "-\t\t\t  \"}\\n\"},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 9)\\r\\n\" + ", "-\t\t\"\to.toString();\\r\\n\" + ", "-\t\t\"\t^\\n\" + ", "-\t\t\"Null pointer access: The variable o can only be null at this location\\n\" + ", "-\t\t\"----------\\n\",", "-\t\tnull /* no extra class libraries */, ", "-\t\ttrue /* flush output directory */, ", "-\t\tcustomOptions,", "-\t\tfalse /* do not generate output */,", "-\t\tfalse /* do not show category */, ", "-\t\tfalse /* do not show warning token */, ", "-\t\tfalse  /* do not skip javac for this peculiar test */,", "-\t\tfalse  /* do not perform statements recovery */);", "+\t\tMap customOptions = getCompilerOptions();", "+\t\tcustomOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.ERROR);", "+\t\tcustomOptions.put(CompilerOptions.OPTION_ReportPotentialNullReference, CompilerOptions.WARNING);", "+\t\tcustomOptions.put(CompilerOptions.OPTION_ReportRedundantNullCheck, CompilerOptions.WARNING);", "+\t\trunNegativeTest(", "+\t\t\t// test directory preparation", "+\t\t\ttrue /* flush output directory */, ", "+\t\t\tnew String[] { /* test files */", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"@SuppressWarnings(\\\"null\\\")\\n\" + ", "+\t\t\t\t\"  void foo(Object p) {\\n\" + ", "+\t\t\t\t\"    Object o = null;\\n\" +", "+\t\t\t\t\"    if (o != null) {\\n\" +", "+\t\t\t\t\"       o = null;\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"    if (p == null) {}\\n\" + // taint p ", "+\t\t\t\t\"    o.toString();\\n\" +", "+\t\t\t\t\"    p.toString();\\n\" + ", "+\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t// compiler options", "+\t\t\tnull /* no class libraries */,", "+\t\t\tcustomOptions /* custom options */,", "+\t\t\t// compiler results", "+\t\t\t\"----------\\n\" +  /* expected compiler log */", "+\t\t\t\"1. ERROR in X.java (at line 9)\\r\\n\" + ", "+\t\t\t\"\to.toString();\\r\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Null pointer access: The variable o can only be null at this location\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\t// javac options", "+\t\t\tJavacTestOptions.Excuse.EclipseWarningConfiguredAsError /* javac test options */);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "664d2272f427fd816ae02ec0c31d64c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6309a9b2aeb767c0183db42672308082688897e5", "commitAfterChange": "9d3443d9ed27d5bf1a9ba003a556b60eecb97c38", "methodNumberBeforeChange": 1123, "methodNumberAfterChange": 1123, "signatureBeforeChange": " public void test1095()", "signatureAfterChange": " public void test1095()", "diff": ["-\tthis.runNegativeTest(new String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"import java.lang.reflect.Constructor;\\n\" + ", "-\t\t\t\"\\n\" + ", "-\t\t\t\"@interface Annot {\\n\" + ", "-\t\t\t\"\tString message() default \\\"\\\"; //$NON-NLS-1$\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"\\n\" + ", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"\tX() {\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic String getAnnotationValue(Constructor constructor){\\n\" + ", "-\t\t\t\"\t\tAnnot annotation = constructor.getAnnotation(Annot.class);\\n\" + ", "-\t\t\t\"\t\treturn (annotation != null) ? annotation.message() : null;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\"", "-\t\t}, ", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tAnnot annotation = constructor.getAnnotation(Annot.class);\\n\" + ", "-\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Annotation to Annot\\n\" + ", "-\t\t\"----------\\n\",", "-\t\tnull /* no extra class libraries */, ", "-\t\ttrue /* flush output directory */, ", "-\t\tcustomOptions,", "-\t\tfalse /* do not generate output */,", "-\t\tfalse /* do not show category */, ", "-\t\tfalse /* do not show warning token */, ", "-\t\tfalse  /* do not skip javac for this peculiar test */,", "-\t\tfalse  /* do not perform statements recovery */);", "+\trunNegativeTest(", "+\t// test directory preparation", "+\ttrue /* flush output directory */, ", "+\tnew String[] { /* test files */", "+\t\t\"X.java\",", "+\t\t\"import java.lang.reflect.Constructor;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"@interface Annot {\\n\" + ", "+\t\t\"\tString message() default \\\"\\\"; //$NON-NLS-1$\\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X {\\n\" + ", "+\t\t\"\tX() {\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tpublic String getAnnotationValue(Constructor constructor){\\n\" + ", "+\t\t\"\t\tAnnot annotation = constructor.getAnnotation(Annot.class);\\n\" + ", "+\t\t\"\t\treturn (annotation != null) ? annotation.message() : null;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\"", "+\t},", "+\t// compiler options", "+\tnull /* no class libraries */,", "+\tcustomOptions /* custom options */,", "+\t// compiler results", "+\t\"----------\\n\" + /* expected compiler log */ ", "+\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\"\tAnnot annotation = constructor.getAnnotation(Annot.class);\\n\" + ", "+\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\"Type mismatch: cannot convert from Annotation to Annot\\n\" + ", "+\t\"----------\\n\",", "+\t// javac options", "+\tJavacTestOptions.JavacHasABug.JavacBug6400189 /* javac test options */);"]}], "num": 19811}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aee9f47b2e4e74a4fa3f914483c8653e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2621d3b1322e4452ee1815e2763aaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-}", "-\tif (this.constant != Constant.NotAConstant) {", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\t}", "-\t} else {", "-\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\tif (valueRequired) {", "-\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\tcodeStream.arraylength();", "-\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t} else {", "-\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\tif (!lastFieldBinding.isStatic()){", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t}", "-\t\t\t\t\t// inline the last field constant", "-\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t}", "+\tif ((this.bits & Binding.VARIABLE) == 0) { // nothing to do if type ref", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t}", "+\tFieldBinding lastFieldBinding = this.otherBindings == null ? (FieldBinding) this.binding : this.otherBindings[this.otherBindings.length-1];", "+\tif (lastFieldBinding.canBeSeenBy(getFinalReceiverType(), this, currentScope)) {", "+\t\tsuper.generateCode(currentScope, codeStream, valueRequired);", "+\t\treturn;", "+\t}", "+\tlastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tif (lastFieldBinding != null) {", "+\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\tif (!isStatic){", "+\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\tif (lastFieldBinding != null && !lastFieldBinding.isStatic()){", "-\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\tcodeStream.pop();", "+\t\t\tboolean isFirst = lastFieldBinding == this.binding", "+\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "+\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "+\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherBindings == null ? 0 : this.otherBindings.length);", "+\t\t\tif (valueRequired", "+\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "+\t\t\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t\t\t|| requiredGenericCast != null) {", "+\t\t\t\tint lastFieldPc = codeStream.position;", "+\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\t\t\t// conversion only generated if unboxing", "+\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "+\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "+\t\t\t} else {", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732dd225bbe877b2ba74157c51047aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic boolean visit( \t\tImportReference importRef, \t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit(EnumConstant enumConstant, ClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(EnumConstant enumConstant, ClassScope scope) {", "+        /*", "+         * Print comments to get proper line number", "+         */", "+        this.scribe.printComment();", "+        final int line = this.scribe.line; ", "+        ", "+        this.scribe.printModifiers(enumConstant.annotations, this);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "+", "+\t\tExpression[] arguments = enumConstant.arguments;", "+\t\tif (arguments != null) {", "+\t\t\tformatEnumConstantArguments(", "+\t\t\t\tenumConstant,", "+\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_before_comma_in_enum_constant_arguments,", "+\t\t\t\tthis.preferences.insert_space_after_comma_in_enum_constant_arguments,", "+\t\t\t\tthis.preferences.alignment_for_arguments_in_enum_constant);\t\t\t", "+\t\t}", "+\t\t", "+\t\tint fieldsCount = enumConstant.fields == null ? 0 : enumConstant.fields.length;", "+\t\tint methodsCount = enumConstant.methods == null ? 0 : enumConstant.methods.length;", "+\t\tint enumsCount = enumConstant.enums == null ? 0 : enumConstant.enums.length;", "+\t\tint membersCount = enumConstant.memberTypes == null ? 0 : enumConstant.memberTypes.length;", "+\t\t", "+\t\tif (fieldsCount != 0 || methodsCount != 0 || membersCount != 0 || enumsCount != 0) {", "+\t\t\t/*", "+\t\t\t * Type body", "+\t\t\t */", "+\t\t\tString enum_constant_brace = this.preferences.brace_position_for_enum_constant;", "+\t", "+\t        formatLeftCurlyBrace(line, enum_constant_brace);", "+\t\t\tformatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, enumConstant);", "+\t\t\t", "+\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\tthis.scribe.indent();", "+\t\t\t}", "+\t", "+\t\t\tformatTypeMembers(enumConstant);", "+\t", "+\t\t\tthis.scribe.printComment();", "+\t\t\t", "+\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (this.preferences.insert_new_line_in_empty_enum_constant) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "+\t\t\tthis.scribe.printTrailingComment();", "+\t\t\tif (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\tif (hasComments()) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 67414}
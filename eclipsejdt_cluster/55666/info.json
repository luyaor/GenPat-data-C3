{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "148a37411c67215efe5424ba534dbd58", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a34eb50750d958187bb7fb52339b6dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "8e257a3aaf425ec95693dbfcce4a3e04f63a99fd", "commitAfterChange": "b4bc0528b8236ab3f6100faade4f9f0cb79aaa89", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " public void test0139()", "signatureAfterChange": " public void test0139()", "diff": ["+public void test0139(){", "+\tString str =", "+\t\t\"public class X  extends Z. #  {\\n\" +", "+\t\t\"}\";", "+", "+", "+\tString completeBehind = \"Z.\";", "+\tint cursorLocation = str.indexOf(\"Z.\") + completeBehind.length() - 1;", "+\tString expectedCompletionNodeToString = \"<CompleteOnClass:Z.>\";", "+\tString expectedParentNodeToString = \"<NONE>\";", "+\tString completionIdentifier = \"\";", "+\tString expectedReplacedSource = \"Z.\";", "+\tString expectedUnitDisplayString =", "+\t\t\"public class X extends <CompleteOnClass:Z.> {\\n\" + ", "+\t\t\"  {\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"  public X() {\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"}\\n\"", "+\t\t;", "+", "+\tcheckDietParse(", "+\t\t\tstr.toCharArray(),", "+\t\t\tcursorLocation,", "+\t\t\texpectedCompletionNodeToString,", "+\t\t\texpectedParentNodeToString,", "+\t\t\texpectedUnitDisplayString,", "+\t\t\tcompletionIdentifier,", "+\t\t\texpectedReplacedSource,", "+\t\"diet ast\");", "+}", "-public void test0139(){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7df4ab36c1e5ba4de2045dd8ff93325", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic void test040() throws Exception", "signatureAfterChange": " \t \tpublic void test106b_wtr() throws Exception", "diff": ["-\t// make sure annotation without target appears twice when set on a method declaration", "-\tpublic void test040() throws Exception {", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\r\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\r\\n\" + ", "-\t\t\t\t\"\\r\\n\" + ", "-\t\t\t\t\"@Target(METHOD)\\r\\n\" + ", "-\t\t\t\t\"@interface Annot {\\r\\n\" + ", "-\t\t\t\t\"\tint value() default 0;\\r\\n\" + ", "-\t\t\t\t\"}\\r\\n\" + ", "-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"\t@Annot(4)\\r\\n\" + ", "-\t\t\t\t\"\tpublic int foo() {\\r\\n\" + ", "-\t\t\t\t\"\t\treturn 0;\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"  public int foo();\\n\" + ", "-\t\t\t\"    0  iconst_0\\n\" + ", "-\t\t\t\"    1  ireturn\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 11]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"    RuntimeInvisibleAnnotations: \\n\" + ", "-\t\t\t\"      #17 @Annot(\\n\" + ", "-\t\t\t\"        #18 value=(int) 4 (constant type)\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"}\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t", "+\tpublic void test106b_wtr() throws Exception { // WTR (WildcardTypeReference)", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\t\"class X<T1> {\\n\" +", "+\t\t\t\t\t\"\t List<? extends @B(1) Number[]> field;\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\t", "+\t\t\t\t\t\"List.java\",", "+\t\t\t\t\t\"class List {}\\n\",", "+\t\t\t\t\t", "+\t\t\t\t\t\"B.java\",", "+\t\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\t\"@interface B { int value() default -1; }\\n\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\t\tString expectedOutput =", "+\t\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #10 @B(\\n\" + ", "+\t\t\t\t\"        #11 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0), WILDCARD, ARRAY]\\n\" + ", "+\t\t\t\t\"      )\\n\";", "+\t\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbc14255b437893f27043aa2be0bc668", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6d9cd9b246f8b8740f4a501085a32633b2b6c2af", "commitAfterChange": "470afdfff602b441f9a45a7d903230534423c9ca", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 297, "signatureBeforeChange": " \tpublic void test295()", "signatureAfterChange": " \tpublic void test295()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method start() belongs to the raw type B. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\t\"3. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\t\"\t                    ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method start() belongs to the raw type B. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in C.java (at line 4)\\n\" + ", "+\t\t\t\"2. ERROR in C.java (at line 4)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\t\"\t                                         ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method start() belongs to the raw type B. References to generic type B<X> should be parameterized\\n\" + "]}], "num": 55666}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3049b39274920923db7dd319c467d45c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e63e680b5f623b6d8af796bdd74a6cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7daed772befc71241cd5718015cdd1d8faa642ca", "commitAfterChange": "bf0f3c0ee6c28cc3716705a3315c5622fc576ce2", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tprivate void locateMatches(JavaProject javaProject, IProgressMonitor progressMonitor) throws JavaModelException", "signatureAfterChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "diff": ["-\tprivate void locateMatches(JavaProject javaProject, IProgressMonitor progressMonitor) throws JavaModelException {", "+\tprivate void locateMatches(JavaProject javaProject) throws JavaModelException {", "-\t\tboolean compilationAborted = false;", "+\t\tthis.compilationAborted = false;", "-\t\t\t// binding creation", "-\t\t\tfor (int i = 0, length = openables.length; i < length; i++) { ", "-\t\t\t\topenables[i].buildTypeBindings();", "-\t\t\t\tif (progressMonitor != null) {", "-\t\t\t\t\tif (progressMonitor.isCanceled()) {", "-\t\t\t\t\t\tthrow new OperationCanceledException();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tprogressMonitor.worked(6);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t", "-\t\t\t// binding resolution", "-\t\t\ttry {", "-\t\t\t\tthis.lookupEnvironment.completeTypeBindings();", "-\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t// problem with class path: it could not find base classes", "-\t\t\t\t// continue reporting innacurate matches (since bindings will be null)", "-\t\t\t\tcompilationAborted = true;", "-\t\t\t}", "+\t\t\tthis.createAndResolveBindings(openables);", "-\t\t\t\t\tthis.currentMatchingOpenable.shouldResolve = !compilationAborted;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "733ee61a964e5bee19db4cff08e448ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "76fc29f1af4e9ec86970c2a456c7b7805a597ea2", "commitAfterChange": "d6d10602861f99a2e87d2ce2ba051c7b3da388a8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\t\t// fault in fields & methods", "-\t\t\t\tunit.scope.faultInTypes();", "-\t\t\t\tif (unit.scope != null && verifyMethods) {", "-\t\t\t\t\t// http://dev.eclipse.org/bugs/show_bug.cgi?id=23117", "- \t\t\t\t\t// verify inherited methods", "-\t\t\t\t\tunit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "+\t\t\t\tCompilationUnitDeclaration previousUnit = this.lookupEnvironment.unitBeingCompleted;", "+\t\t\t\tthis.lookupEnvironment.unitBeingCompleted = unit;", "+\t\t\t\ttry {", "+\t\t\t\t\t// fault in fields & methods", "+\t\t\t\t\tunit.scope.faultInTypes();", "+\t\t\t\t\tif (unit.scope != null && verifyMethods) {", "+\t\t\t\t\t\t// http://dev.eclipse.org/bugs/show_bug.cgi?id=23117", "+\t \t\t\t\t\t// verify inherited methods", "+\t\t\t\t\t\tunit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "+\t\t\t\t\t}", "+\t\t\t\t\t// type checking", "+\t\t\t\t\tunit.resolve();", "+\t", "+\t\t\t\t\t// flow analysis", "+\t\t\t\t\tif (analyzeCode) unit.analyseCode();", "+\t", "+\t\t\t\t\t// code generation", "+\t\t\t\t\tif (generateCode) unit.generateCode();", "+\t", "+\t\t\t\t\t// finalize problems (suppressWarnings)", "+\t\t\t\t\tunit.finalizeProblems();", "+\t\t\t\t} finally {", "+\t\t\t\t\tthis.lookupEnvironment.unitBeingCompleted = previousUnit; // paranoia, always null in org.eclipse.jdt.core.tests.dom.RunAllTests", "-\t\t\t\t// type checking", "-\t\t\t\tunit.resolve();", "-", "-\t\t\t\t// flow analysis", "-\t\t\t\tif (analyzeCode) unit.analyseCode();", "-", "-\t\t\t\t// code generation", "-\t\t\t\tif (generateCode) unit.generateCode();", "-", "-\t\t\t\t// finalize problems (suppressWarnings)", "-\t\t\t\tunit.finalizeProblems();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "937381516b7999d5b1f198fcf37187d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "182357267e3a6e8da6ab4039239adfa51c4ddc26", "commitAfterChange": "174f89aae07a92e58011875516697182fd7f3ebd", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r \tprivate void locateMatches(JavaProject javaProject, IProgressMonitor progressMonitor) throws JavaModelException", "signatureAfterChange": "\r \tprivate void locateMatches(JavaProject javaProject, IProgressMonitor progressMonitor) throws JavaModelException", "diff": ["-\t\t// binding creation\r", "-\t\tfor (int i = 0, length = openables.length; i < length; i++) { \r", "-\t\t\topenables[i].buildTypeBindings();\r", "-\t\t\tif (progressMonitor != null) {\r", "-\t\t\t\tif (progressMonitor.isCanceled()) {\r", "-\t\t\t\t\tthrow new OperationCanceledException();\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tprogressMonitor.worked(1);\r", "+\t\tboolean shouldResolve = this.pattern.needsResolve;\r", "+\r", "+\t\tif (shouldResolve) {\r", "+\t\t\t// binding creation\r", "+\t\t\tfor (int i = 0, length = openables.length; i < length; i++) { \r", "+\t\t\t\topenables[i].buildTypeBindings();\r", "+\t\t\t\tif (progressMonitor != null) {\r", "+\t\t\t\t\tif (progressMonitor.isCanceled()) {\r", "+\t\t\t\t\t\tthrow new OperationCanceledException();\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tprogressMonitor.worked(6);\r", "+\t\t\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\t// binding resolution\r", "-\t\tboolean shouldResolve = true;\r", "-\t\ttry {\r", "-\t\t\tthis.lookupEnvironment.completeTypeBindings();\r", "-\t\t} catch (AbortCompilation e) {\r", "-\t\t\t// problem with class path: it could not find base classes\r", "-\t\t\t// continue reporting innacurate matches (since bindings will be null)\r", "-\t\t\tshouldResolve = false;\r", "+\t\r", "+\t\t\t// binding resolution\r", "+\t\t\ttry {\r", "+\t\t\t\tthis.lookupEnvironment.completeTypeBindings();\r", "+\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t// problem with class path: it could not find base classes\r", "+\t\t\t\t// continue reporting innacurate matches (since bindings will be null)\r", "+\t\t\t\tshouldResolve = false;\r", "+\t\t\t}\r", "-\t\t\t\tprogressMonitor.worked(1);\r", "+\t\t\t\tprogressMonitor.worked(3);\r"]}], "num": 35037}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ee7448773f3671fd50e3b217d89dc2d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "657cd190081f093003c0dc1839fea1db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void test002()", "signatureAfterChange": "  \tpublic void test002()", "diff": ["-\t\t\t\t\"A.java\",", "-\t\t\t\t\"class A {}\\n\",", "-\t\t\t\t\"B.java\",", "-\t\t\t\t\"class B {}\\n\",", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\",", "-\t\t\t\t\"I.java\",", "-\t\t\t\t\"interface I<U> { public void foo(U u); }\\n\",", "-", "-\t\t\t\t\"J.java\",", "-\t\t\t\t\"class J<T> implements I<B> { public void foo(T t) {} }\\n\",", "-\t\t\t\t\"K.java\",", "-\t\t\t\t\"class K<T> implements I<T> { public void foo(T t) {} }\\n\",", "-\t\t\t\t\"L.java\",", "-\t\t\t\t\"class L<T> implements I { public void foo(T t) {} }\\n\",", "-", "-\t\t\t\t\"class Y<T> extends X<A> { public void foo(T t) { super.foo(t); } }\\n\",", "-\t\t\t\t\"Z.java\",", "-\t\t\t\t\"class Z<T> extends X<T> { public void foo(T t) { super.foo(t); } }\\n\",", "-\t\t\t\t\"W.java\",", "-\t\t\t\t\"class W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\",", "+\t\t\t\t\"public class Y<T> extends X<A> { public void foo(T t) {} }\\n\" +", "+\t\t\t\t\"class A {}\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\"", "-\t\t\t\"1. ERROR in J.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass J<T> implements I<B> { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type J<T> must implement the inherited abstract method I<B>.foo(B)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in L.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass L<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type L<T> must implement the inherited abstract method I.foo(Object)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in L.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass L<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t                                      ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type L<T> has the same erasure as foo(U) of type I but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y<T> extends X<A> { public void foo(T t) { super.foo(t); } }\\n\" + ", "-\t\t\t\"\t                                                       ^^^\\n\" + ", "-\t\t\t\"The method foo(A) in the type X<A> is not applicable for the arguments (T)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in W.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\" + ", "-\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in W.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\" + ", "-\t\t\t\"\t                                              ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"1. ERROR in Y.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                             ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type Y<T> has the same erasure as foo(U) of type X<U> but does not override it\\n\" + ", "-\t\t\t/*", "-\t\t\tJ.java:1: J is not abstract and does not override abstract method foo(B) in I", "-\t\t\tL.java:1: L is not abstract and does not override abstract method foo(java.lang.Object) in I", "-\t\t\tW.java:1: warning: [unchecked] unchecked call to foo(U) as a member of the raw type X", "-\t\t\tY.java:1: foo(A) in X<A> cannot be applied to (T)", "-\t\t\t */", "+\t\t\t// name clash: foo(T) in Y<T> and foo(U) in X<A> have the same erasure, yet neither overrides the other", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"J.java\",", "+\t\t\t\t\"public class J<T> implements I<A> { public void foo(T t) {} }\\n\" +", "+\t\t\t\t\"class A {}\\n\",", "+\t\t\t\t\"I.java\",", "+\t\t\t\t\"interface I<U> { public void foo(U u); }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in J.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"The type J<T> must implement the inherited abstract method I<A>.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in J.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                                ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type J<T> has the same erasure as foo(U) of type I<U> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// J is not abstract and does not override abstract method foo(A) in I", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"YY.java\",", "+\t\t\t\t\"public class YY<T> extends X { public void foo(T t) {} }\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in YY.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                           ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type YY<T> has the same erasure as foo(U) of type X<U> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: foo(T) in YY<T> and foo(U) in X have the same erasure, yet neither overrides the other", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"JJ.java\",", "+\t\t\t\t\"public class JJ<T> implements I { public void foo(T t) {} }\\n\",", "+\t\t\t\t\"I.java\",", "+\t\t\t\t\"interface I<U> { public void foo(U u); }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in JJ.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"The type JJ<T> must implement the inherited abstract method I.foo(Object)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in JJ.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type JJ<T> has the same erasure as foo(U) of type I<U> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// JJ is not abstract and does not override abstract method foo(java.lang.Object) in I", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"YYY.java\",", "+\t\t\t\t\"public class YYY<T> extends X<T> { public void foo(T t) {} }\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"JJJ.java\",", "+\t\t\t\t\"public class JJJ<T> implements I<T> { public void foo(T t) {} }\\n\",", "+\t\t\t\t\"I.java\",", "+\t\t\t\t\"interface I<U> { public void foo(U u); }\\n\"", "+\t\t\t},", "+\t\t\t\"\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d1a19f34324497b38f429f63aad719", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void test003()", "signatureAfterChange": "  \tpublic void test003()", "diff": ["-\t\t\t\t\"J.java\",", "-\t\t\t\t\"class J<T> implements I<B> { public void foo(T t) {} }\\n\",", "-\t\t\t\t\"K.java\",", "-\t\t\t\t\"class K<T> implements I<T> { public void foo(T t) {} }\\n\",", "-\t\t\t\t\"L.java\",", "-\t\t\t\t\"class L<T> implements I { public void foo(T t) {} }\\n\",", "-", "-\t\t\t\t\"class Y<T> extends X<A> { public void foo(T t) { super.foo(t); } }\\n\",", "-\t\t\t\t\"Z.java\",", "-\t\t\t\t\"class Z<T> extends X<T> { public void foo(T t) { super.foo(t); } }\\n\",", "-\t\t\t\t\"W.java\",", "-\t\t\t\t\"class W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\",", "+\t\t\t\t\"public class Y<T> extends X<A> { public void foo(T t) {} }\\n\"", "-\t\t\t\"1. ERROR in J.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass J<T> implements I<B> { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type J<T> must implement the inherited abstract method I<B>.foo(B)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in L.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass L<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type L<T> must implement the inherited abstract method I.foo(Object)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in L.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass L<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t                                      ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type L<T> has the same erasure as foo(U) of type I but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y<T> extends X<A> { public void foo(T t) { super.foo(t); } }\\n\" + ", "-\t\t\t\"\t                                                       ^^^\\n\" + ", "-\t\t\t\"The method foo(A) in the type X<A> is not applicable for the arguments (T)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in W.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\" + ", "-\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in W.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\" + ", "-\t\t\t\"\t                                              ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"1. ERROR in Y.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                             ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type Y<T> has the same erasure as foo(U) of type X<U> but does not override it\\n\" + ", "-\t\t\t/*", "-\t\t\tJ.java:1: J is not abstract and does not override abstract method foo(B) in I", "-\t\t\tL.java:1: L is not abstract and does not override abstract method foo(java.lang.Object) in I", "-\t\t\tW.java:1: warning: [unchecked] unchecked call to foo(U) as a member of the raw type X", "-\t\t\tY.java:1: foo(A) in X<A> cannot be applied to (T)", "-\t\t\t */", "+\t\t\t// name clash: foo(T) in Y<T> and foo(U) in X<A> have the same erasure, yet neither overrides the other", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tnull", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"J.java\",", "+\t\t\t\t\"public class J<T> implements I<A> { public void foo(T t) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in J.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"The type J<T> must implement the inherited abstract method I<A>.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in J.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                                ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type J<T> has the same erasure as foo(U) of type I<U> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\t// J is not abstract and does not override abstract method foo(A) in I", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tnull", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"YY.java\",", "+\t\t\t\t\"public class YY<T> extends X { public void foo(T t) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in YY.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                           ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type YY<T> has the same erasure as foo(U) of type X<U> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\t// name clash: foo(T) in YY<T> and foo(U) in X have the same erasure, yet neither overrides the other", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tnull", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"JJ.java\",", "+\t\t\t\t\"public class JJ<T> implements I { public void foo(T t) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in JJ.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"The type JJ<T> must implement the inherited abstract method I.foo(Object)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in JJ.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type JJ<T> has the same erasure as foo(U) of type I<U> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\t// JJ is not abstract and does not override abstract method foo(java.lang.Object) in I", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tnull", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"YYY.java\",", "+\t\t\t\t\"public class YYY<T> extends X<T> { public void foo(T t) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"\",", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tnull", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"JJJ.java\",", "+\t\t\t\t\"public class JJJ<T> implements I<T> { public void foo(T t) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"\","]}], "num": 32326}
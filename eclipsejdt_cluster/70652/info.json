{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05f6bbc566d73fd7c8c242d3fc305a67", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69689928c5a4b99c70536bd78537aa31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["-\tlastCheckPoint = 0;", "+\tthis.lastCheckPoint = 0;", "-\tif (referenceContext instanceof CompilationUnitDeclaration){", "-\t\telement = new RecoveredUnit(compilationUnit, 0, this);", "+\tif (this.referenceContext instanceof CompilationUnitDeclaration){", "+\t\telement = new RecoveredUnit(this.compilationUnit, 0, this);", "-\t\t\tcompilationUnit.currentPackage = null;", "-\t\t\tcompilationUnit.imports = null;", "-\t\t\tcompilationUnit.types = null;", "-\t\t\tcurrentToken = 0;", "-\t\t\tlistLength = 0;", "-\t\t\tendPosition = 0;", "-\t\t\tendStatementPosition = 0;", "+\t\t\tthis.compilationUnit.currentPackage = null;", "+\t\t\tthis.compilationUnit.imports = null;", "+\t\t\tthis.compilationUnit.types = null;", "+\t\t\tthis.currentToken = 0;", "+\t\t\tthis.listLength = 0;", "+\t\t\tthis.endPosition = 0;", "+\t\t\tthis.endStatementPosition = 0;", "-\t\tif (compilationUnit.currentPackage != null){", "-\t\t\tlastCheckPoint = compilationUnit.currentPackage.declarationSourceEnd+1;", "+\t\tif (this.compilationUnit.currentPackage != null){", "+\t\t\tthis.lastCheckPoint = this.compilationUnit.currentPackage.declarationSourceEnd+1;", "-\t\tif (compilationUnit.imports != null){", "-\t\t\tlastCheckPoint = compilationUnit.imports[compilationUnit.imports.length -1].declarationSourceEnd+1;\t\t", "+\t\tif (this.compilationUnit.imports != null){", "+\t\t\tthis.lastCheckPoint = this.compilationUnit.imports[this.compilationUnit.imports.length -1].declarationSourceEnd+1;\t\t", "-\t\tif (referenceContext instanceof AbstractMethodDeclaration){", "-\t\t\telement = new RecoveredMethod((AbstractMethodDeclaration) referenceContext, null, 0, this);", "-\t\t\tlastCheckPoint = ((AbstractMethodDeclaration) referenceContext).bodyStart;", "+\t\tif (this.referenceContext instanceof AbstractMethodDeclaration){", "+\t\t\telement = new RecoveredMethod((AbstractMethodDeclaration) this.referenceContext, null, 0, this);", "+\t\t\tthis.lastCheckPoint = ((AbstractMethodDeclaration) this.referenceContext).bodyStart;", "-\t\t\tif (referenceContext instanceof TypeDeclaration){", "-\t\t\t\tTypeDeclaration type = (TypeDeclaration) referenceContext;", "+\t\t\tif (this.referenceContext instanceof TypeDeclaration){", "+\t\t\t\tTypeDeclaration type = (TypeDeclaration) this.referenceContext;", "-\t\t\t\t\t\t&& field.declarationSourceStart <= scanner.initialPosition", "-\t\t\t\t\t\t&& scanner.initialPosition <= field.declarationSourceEnd", "-\t\t\t\t\t\t&& scanner.eofPosition <= field.declarationSourceEnd+1){", "+\t\t\t\t\t\t&& field.declarationSourceStart <= this.scanner.initialPosition", "+\t\t\t\t\t\t&& this.scanner.initialPosition <= field.declarationSourceEnd", "+\t\t\t\t\t\t&& this.scanner.eofPosition <= field.declarationSourceEnd+1){", "-\t\t\t\t\t\tlastCheckPoint = field.declarationSourceStart;\t\t\t\t\t", "+\t\t\t\t\t\tthis.lastCheckPoint = field.declarationSourceStart;\t\t\t\t\t", "-\tfor(int i = 0; i <= astPtr; i++){", "-\t\tASTNode node = astStack[i];", "+\tfor(int i = 0; i <= this.astPtr; i++){", "+\t\tASTNode node = this.astStack[i];", "-\t\t\t\tlastCheckPoint = method.bodyStart;", "+\t\t\t\tthis.lastCheckPoint = method.bodyStart;", "-\t\t\t\tlastCheckPoint = method.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = method.declarationSourceEnd + 1;", "-\t\t\t\tlastCheckPoint = initializer.sourceStart;\t\t\t\t", "+\t\t\t\tthis.lastCheckPoint = initializer.sourceStart;\t\t\t\t", "-\t\t\t\tlastCheckPoint = initializer.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = initializer.declarationSourceEnd + 1;", "-\t\t\t\t\tlastCheckPoint = field.sourceEnd + 1;", "+\t\t\t\t\tthis.lastCheckPoint = field.sourceEnd + 1;", "-\t\t\t\t\tlastCheckPoint = field.initialization.sourceEnd + 1;", "+\t\t\t\t\tthis.lastCheckPoint = field.initialization.sourceEnd + 1;", "-\t\t\t\tlastCheckPoint = field.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = field.declarationSourceEnd + 1;", "-\t\t\t\tlastCheckPoint = type.bodyStart;", "+\t\t\t\tthis.lastCheckPoint = type.bodyStart;", "-\t\t\t\tlastCheckPoint = type.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = type.declarationSourceEnd + 1;", "-\t\t\tlastCheckPoint = importRef.declarationSourceEnd + 1;", "+\t\t\tthis.lastCheckPoint = importRef.declarationSourceEnd + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b59085150355a13df2c783df0ac01183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "eaf368b1bbed77e5ac91194cb5cc62e7c3b2c07b", "commitAfterChange": "850c65069b948dc807fdf250e07cb482b9cf25c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void computeVisibleElementBindings()", "signatureAfterChange": "  \tprivate void computeVisibleElementBindings()", "diff": ["-\t\tthis.hasComputedVisibleElementBindings = true;", "-", "-\t\tScope scope = this.assistScope;", "-\t\tASTNode astNode = this.assistNode;", "-\t\tboolean notInJavadoc = this.completionContext.javadoc == 0;", "-", "-\t\tthis.visibleLocalVariables = new ObjectVector();", "-\t\tthis.visibleFields = new ObjectVector();", "-\t\tthis.visibleMethods = new ObjectVector();", "-\t\tthis.bindingsToNodes = new HashMap();", "-", "-\t\tReferenceContext referenceContext = scope.referenceContext();", "-\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\t// completion is inside a method body", "-\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "-\t\t} else if (referenceContext instanceof TypeDeclaration) {", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) referenceContext;", "-\t\t\tFieldDeclaration[] fields = typeDeclaration.fields;", "-\t\t\tif (fields != null) {", "-\t\t\t\tdone : for (int i = 0; i < fields.length; i++) {", "-\t\t\t\t\tif (fields[i] instanceof Initializer) {", "-\t\t\t\t\t\tInitializer initializer = (Initializer) fields[i];", "-\t\t\t\t\t\tif (initializer.block.sourceStart <= astNode.sourceStart &&", "-\t\t\t\t\t\t\t\tastNode.sourceStart < initializer.bodyEnd) {", "-\t\t\t\t\t\t\t// completion is inside an initializer", "-\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "-\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fields[i];", "-\t\t\t\t\t\tif (fieldDeclaration.initialization != null &&", "-\t\t\t\t\t\t\t\tfieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "-\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "-\t\t\t\t\t\t\t// completion is inside a field initializer", "-\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "-\t\t\t\t\t\t\tbreak done;", "+\t\tCompilationUnitDeclaration previousUnitBeingCompleted = this.lookupEnvironment.unitBeingCompleted;", "+\t\tthis.lookupEnvironment.unitBeingCompleted = this.compilationUnitDeclaration;", "+\t\ttry {", "+\t\t\tthis.hasComputedVisibleElementBindings = true;", "+\t", "+\t\t\tScope scope = this.assistScope;", "+\t\t\tASTNode astNode = this.assistNode;", "+\t\t\tboolean notInJavadoc = this.completionContext.javadoc == 0;", "+\t", "+\t\t\tthis.visibleLocalVariables = new ObjectVector();", "+\t\t\tthis.visibleFields = new ObjectVector();", "+\t\t\tthis.visibleMethods = new ObjectVector();", "+\t\t\tthis.bindingsToNodes = new HashMap();", "+\t", "+\t\t\tReferenceContext referenceContext = scope.referenceContext();", "+\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t// completion is inside a method body", "+\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) referenceContext;", "+\t\t\t\tFieldDeclaration[] fields = typeDeclaration.fields;", "+\t\t\t\tif (fields != null) {", "+\t\t\t\t\tdone : for (int i = 0; i < fields.length; i++) {", "+\t\t\t\t\t\tif (fields[i] instanceof Initializer) {", "+\t\t\t\t\t\t\tInitializer initializer = (Initializer) fields[i];", "+\t\t\t\t\t\t\tif (initializer.block.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\t\t\t\tastNode.sourceStart < initializer.bodyEnd) {", "+\t\t\t\t\t\t\t\t// completion is inside an initializer", "+\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fields[i];", "+\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null &&", "+\t\t\t\t\t\t\t\t\tfieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t\t\t// completion is inside a field initializer", "+\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.lookupEnvironment.unitBeingCompleted = previousUnitBeingCompleted;"]}], "num": 70652}
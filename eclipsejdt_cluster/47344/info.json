{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a5bef1724ec1e0111db420a01972fda", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "208e0b4e3642465e723dd0fb06ca91df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic InferenceContext18 freshInferenceContext(Scope scope)", "signatureAfterChange": "  \tpublic InferenceContext18 freshInferenceContext(Scope scope)", "diff": ["-\t\treturn null; // subject to inference only as an argument to an outer invocation", "+\t\tif (this.expressionContext != ExpressionContext.VANILLA_CONTEXT) {", "+\t\t\tExpression[] arguments = createPseudoExpressions(this.freeParameters);", "+\t\t\treturn new InferenceContext18(scope, arguments, this);", "+\t\t}", "+\t\treturn null; // shouldn't happen, actually"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aecaaa52c3a7c755cac897ecd3a0bcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic InferenceContext18 freshInferenceContext(Scope scope)", "signatureAfterChange": "  \tpublic InferenceContext18 freshInferenceContext(Scope scope)", "diff": ["-\t\t// no need to store the context for later use, since ReferenceExpression ", "-\t\t// is not subject to Invocation Type Inference (is not an invocation).", "-\t\treturn new InferenceContext18(scope, null/*no arguments*/, this);", "+\t\treturn null; // subject to inference only as an argument to an outer invocation"]}], "num": 47344}
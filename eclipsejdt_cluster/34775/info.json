{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d79ab7a72b06182064e326c4c991e4d0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cae96ef700e455d1f526e628b6b3098", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 51, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t\t", "-\t\t// all problems detected inside annotations are associated with a generic severity\t\t\t", "-//\t\tif (referenceContext.isProcessingAnnotation()) {", "-//\t\t\treturn this.options.getSeverity(CompilerOptions.AnnotationProblem);", "-//\t\t}", "-\t\t\t", "-\t\t// by default, all other problems are errors.", "+", "+\t\t// by default, if not annotation, then problems are errors.", "+\t\t\tif ((problemId & IProblem.Annotation) == IProblem.Annotation) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd1154b36a010d7fee343648df7d2353", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "7186c730d487753734b0547672e890b50fededb4", "commitAfterChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tvoid addTypeBoundsFromWildcardBound(InferenceContext18 context, int boundKind, TypeBinding t, \t\t\tTypeBinding r, TypeBinding bi) throws InferenceFailureException", "signatureAfterChange": "  \tvoid addTypeBoundsFromWildcardBound(InferenceContext18 context, int boundKind, TypeBinding t, \t\t\tTypeBinding r, TypeBinding bi) throws InferenceFailureException", "diff": ["+\t\t\tif (t.id == TypeIds.T_JavaLangObject)", "+\t\t\t\tformula = new ConstraintTypeFormula(context.substitute(bi), r, ReductionResult.SUBTYPE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dba9c77cf31e5a6e8349af291e92b779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "9dbcebbcaf11825267cb12e7ee6eb7bd73431114", "commitAfterChange": "f7b0e495847f4cba5d393348688e14a6dd333c0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["+\t// check for methods from Object", "+\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "+"]}], "num": 34775}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "499c2c932309702df7d0125923e17096", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c47ced3ebce67de1bd7312c1c30420b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\tlong inheritedBits = inheritedMethod.tagBits;", "-\t\tlong inheritedNullnessBits = inheritedBits & (TagBits.AnnotationNonNull|TagBits.AnnotationNullable);", "-\t\tlong currentBits = currentMethod.tagBits;", "-\t\tlong currentNullnessBits = currentBits & (TagBits.AnnotationNonNull|TagBits.AnnotationNullable);", "-\t\t", "+\t\tboolean useTypeAnnotations = environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "+\t\tlong inheritedNullnessBits = getReturnTypeNullnessTagBits(inheritedMethod, useTypeAnnotations);", "+\t\tlong currentNullnessBits = getReturnTypeNullnessTagBits(currentMethod, useTypeAnnotations);", "+\t\t", "-\t\t\t\t\t\t\tcurrentMethod.tagBits |= inheritedNullnessBits;", "+\t\t\t\t\t\t\tapplyReturnNullBits(currentMethod, inheritedNullnessBits, environment);", "-\t\t\t\t\tcurrentMethod.tagBits |= (currentNullnessBits = TagBits.AnnotationNonNull); ", "+\t\t\t\t\tcurrentNullnessBits = TagBits.AnnotationNonNull;", "+\t\t\t\t\tapplyReturnNullBits(currentMethod, currentNullnessBits, environment);", "+\t\tif (useTypeAnnotations) // need to look for type annotations on all parameters:", "+\t\t\tlength = currentMethod.parameters.length;", "-\t\t\tBoolean inheritedNonNullNess = (inheritedMethod.parameterNonNullness == null)", "-\t\t\t\t\t\t\t\t\t\t? null : inheritedMethod.parameterNonNullness[i];", "-\t\t\tBoolean currentNonNullNess = (currentMethod.parameterNonNullness == null)", "-\t\t\t\t\t\t\t\t\t\t? null : currentMethod.parameterNonNullness[i];", "+\t\t\tBoolean inheritedNonNullNess = getParameterNonNullness(inheritedMethod, i, useTypeAnnotations);", "+\t\t\tBoolean currentNonNullNess = getParameterNonNullness(currentMethod, i, useTypeAnnotations);", "-\t\t\t\t\t\t\trecordArgNonNullness(currentMethod, length, i, currentArgument, inheritedNonNullNess);", "+\t\t\t\t\t\t\tif (!useTypeAnnotations)", "+\t\t\t\t\t\t\t\trecordArgNonNullness(currentMethod, length, i, currentArgument, inheritedNonNullNess);", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\trecordArgNonNullness18(currentMethod, i, currentArgument, inheritedNonNullNess, environment);", "-\t\t\t\t\trecordArgNonNullness(currentMethod, length, i, currentArgument, Boolean.TRUE);", "+\t\t\t\t\tif (!useTypeAnnotations)", "+\t\t\t\t\t\trecordArgNonNullness(currentMethod, length, i, currentArgument, Boolean.TRUE);", "+\t\t\t\t\telse", "+\t\t\t\t\t\trecordArgNonNullness18(currentMethod, i, currentArgument, Boolean.TRUE, environment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce48be66554d9993434a2b291e75eec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "2e4e63b9ed8aad7925bed1f9109d7e2d1a341f45", "commitAfterChange": "6f2d59d80da8490e52a278944b98c97220ac4149", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\tLookupEnvironment environment = scope.environment();", "-\t\tboolean useTypeAnnotations = environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "+\t\tboolean useTypeAnnotations = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "-\t\t\t\t\t\t\tapplyReturnNullBits(currentMethod, inheritedNullnessBits, environment);", "+\t\t\t\t\t\t\tapplyReturnNullBits(currentMethod, inheritedNullnessBits, this.environment);", "-\t\t\t\t\tapplyReturnNullBits(currentMethod, currentNullnessBits, environment);", "+\t\t\t\t\tapplyReturnNullBits(currentMethod, currentNullnessBits, this.environment);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenvironment.getNonNullAnnotationName());", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.environment.getNonNullAnnotationName());", "-\t\t\t\t\t\t\t\trecordArgNonNullness18(currentMethod, i, currentArgument, inheritedNonNullNess, environment);", "+\t\t\t\t\t\t\t\trecordArgNonNullness18(currentMethod, i, currentArgument, inheritedNonNullNess, this.environment);", "-\t\t\t\t\t\trecordArgNonNullness18(currentMethod, i, currentArgument, Boolean.TRUE, environment);", "+\t\t\t\t\t\trecordArgNonNullness18(currentMethod, i, currentArgument, Boolean.TRUE, this.environment);", "-\t\t\t\t\tannotationName = environment.getNonNullAnnotationName();", "+\t\t\t\t\tannotationName = this.environment.getNonNullAnnotationName();", "-\t\t\t\t\tannotationName = environment.getNullableAnnotationName();", "+\t\t\t\t\tannotationName = this.environment.getNullableAnnotationName();", "-\t\t\t\t\t\t\t\t(inheritedNonNullNess == null) ? null : environment.getNullableAnnotationName());", "+\t\t\t\t\t\t\t\t(inheritedNonNullNess == null) ? null : this.environment.getNullableAnnotationName());"]}], "num": 40965}
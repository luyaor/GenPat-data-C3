{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bd86a52f947d983abbcffdc2b02a979", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f977275571c718bd6359684b91d4192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "a170a70f9fd89b9996c94f318397ff4dca1db782", "commitAfterChange": "25c55f5a3b95044fb71ce56ee0bb0a797b58daa1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testBinary05()", "signatureAfterChange": " \tpublic void testBinary05()", "diff": ["-\t// TODO(Stephan) : 3rd error message looks weird. We need to clone and set the bits for allocation expression or otherwise handle.", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. WARNING in Y1.java (at line 6)\\n\" + ", "-\t\t\t\t\"\tx.<@NonNull Object>foo(new Object());\\n\" + ", "-\t\t\t\t\"\t                       ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Null type safety (type annotations): The expression of type \\'Object\\' needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "-\t\t\t\t\"----------\\n\"", "-\t\t\t\t);", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4faa6bcc1fa06e02ae89d10031230d03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "ff2fe8665a4cc197831509bf8ec85eecac35f7cf", "commitAfterChange": "b035f7a4c467249c63cc869fd5f75e4bad8cf303", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testNullTypeInference3()", "signatureAfterChange": " \tpublic void testNullTypeInference3()", "diff": ["-\t// conflicting annotations from type variable application and type variable substitution -> exclude null annotations from inference", "+\t// -> ignore @Nullable which overrides the type variable's nullness for this one location", "-\t\t\t\t\"\t\t@NonNull String s = m(in);\\n\" + ", "+\t\t\t\t\"\t\t@NonNull String s = m(in);\\n\" +  // inferred OK as 'm(@Nullable String) -> @NonNull String'", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Generics.java (at line 6)\\n\" + ", "-\t\t\t\"\t@NonNull String s = m(in);\\n\" + ", "-\t\t\t\"\t                    ^^^^^\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String\\' needs unchecked conversion to conform to \\'@NonNull String\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a20dc6d125a2bfc1e8838625b4800a5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest8.java", "commitBeforeChange": "aa6078ae8b56e2dd94bf0e99bd049422ccaa24f4", "commitAfterChange": "e3e2c6db2bd518e6c887dd95ff25a83382caa874", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testLambda_04()", "signatureAfterChange": " public void testLambda_04()", "diff": ["-// Lambda with declared args has illegal @NonNull an primitive argument, we now emit an additional not-invalid message.", "+// Lambda with declared args has illegal @NonNull an primitive argument", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tISAM printer1 = (@NonNull int i) \\n\" + ", "-\t\t\"\t                 ^^^^^^^^^^^^\\n\" + ", "-\t\t\"Illegal redefinition of parameter i, inherited method from ISAM does not constrain this parameter\\n\" + "]}], "num": 72140}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ced097c711a2f733faf8de05fec0f909", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f8c50dcd2ea2490da17fb4fc05ce3ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "bc564ebf6087096287b687b551504795d682b469", "commitAfterChange": "d5c10d2d7223b30bd18f63015dde9c406b66baa7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": " public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["-\t\t\t\t\t\t// we could improve error msg here telling \"cannot use compound assignment on final blank field\"", "-\t\t\t\tif (fieldBinding.isBlankFinal() && currentScope.allowBlankFinalFieldAssignment(fieldBinding)) {", "+\t\t\t\tif (!isCompound && fieldBinding.isBlankFinal() && currentScope.allowBlankFinalFieldAssignment(fieldBinding)) {", "-\t\t\t\t\tcurrentScope.problemReporter().cannotAssignToFinalField(fieldBinding, this, false);", "+\t\t\t\t\tcurrentScope.problemReporter().cannotAssignToFinalField(fieldBinding, this);", "-\t\t\t\t\tif (!localBinding.isBlankFinal() || flowInfo.isPotentiallyAssigned(localBinding)) {", "+\t\t\t\t\tif (isCompound || !localBinding.isBlankFinal()){", "+\t\t\t\t\t\tcurrentScope.problemReporter().cannotAssignToFinalLocal(localBinding, this);", "+\t\t\t\t\t} else if (flowInfo.isPotentiallyAssigned(localBinding)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b783885132a6ccb5ebf8e8030a8089d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NameReference.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  protected void checkEffectivelyFinalAccess(BlockScope currentScope)", "signatureAfterChange": " protected void checkEffectiveFinality(LocalVariableBinding localBinding, Scope scope)", "diff": ["-protected void checkEffectivelyFinalAccess(BlockScope currentScope) {", "-\tif (this.binding instanceof LocalVariableBinding) {", "-\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "-\t\tif (!localBinding.isFinal() && ((this.bits & ASTNode.DepthMASK) != 0 || (this.bits & ASTNode.IsFromOutsideLambda) != 0)) {", "-\t\t\tif (currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_8) {", "-\t\t\t\tif (!localBinding.isEffectivelyFinal()) {", "-\t\t\t\t\tcurrentScope.problemReporter().cannotReferToNonEffectivelyFinalOuterLocal(localBinding, this);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tcurrentScope.problemReporter().cannotReferToNonFinalOuterLocal(localBinding, this);", "-\t\t\t}", "+*/", "+protected void checkEffectiveFinality(LocalVariableBinding localBinding, Scope scope) {", "+\tif ((this.bits & ASTNode.IsCapturedOuterLocal) != 0) {", "+\t\tif (!localBinding.isFinal() && !localBinding.isEffectivelyFinal()) {", "+\t\t\tscope.problemReporter().cannotReferToNonEffectivelyFinalOuterLocal(localBinding, this);", "+\t\t\tthrow new AbortMethod(scope.referenceCompilationUnit().compilationResult, null);"]}], "num": 41275}
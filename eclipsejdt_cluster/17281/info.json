{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7014cfd55da6ef68458db06160a5dad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210d757cf12355889ecf96195ad0d099", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedResourceChangeListener.java", "commitBeforeChange": "07500b3aefa58aecd5e846627b7c70382793f29f", "commitAfterChange": "641c18a6fa8d154329ae2bcdac1ab25ff8b18f71", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "signatureAfterChange": " \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "diff": ["-\t\tprivate final Set<IProject> _removedProjects = new HashSet<IProject>();", "-\t\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( project );", "+\t\t\t\tIJavaProject jp = JavaCore.create(project);", "+\t\t\t\tGeneratedFileManager gfm = AptPlugin.getAptProject(jp).getGeneratedFileManager();", "-\t\t\t\t\t\t// all deletion occurs before any add (adding the generated source directory)", "-\t\t\t\t\t\tif( !_removedProjects.contains(project) ){\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tgfm.generatedSourceFolderDeleted();", "-\t\t\t\t\t\t\t_addGenFolderTo.add(project);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// if the project is already closed or in the process of being", "-\t\t\t\t\t\t// deleted, will ignore this deletion since we cannot correct ", "-\t\t\t\t\t\t// the classpath anyways.", "+\t\t\t\t\t\tgfm.generatedSourceFolderDeleted();", "-\t\t\t\telse if( r instanceof IProject ){\t", "-\t\t\t\t\t_removedProjects.add((IProject)r);", "-\t\t\t\t}", "-\t\t\telse if( r instanceof IProject ){", "-\t\t\t\tfinal IProject proj = (IProject)delta.getResource();\t\t", "-\t\t\t\tif( canUpdate(proj) ){", "-\t\t\t\t\t_addGenFolderTo.add(proj);", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\telse", "-\t\t\t\t\t_removedProjects.add(proj);", "-\t\t\t}", "-", "-\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e2b91d3c92c020cce2dd3a22027f1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterAST8Test.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 337, "methodNumberAfterChange": 337, "signatureBeforeChange": " \tpublic void test0334() throws JavaModelException", "signatureAfterChange": " \tpublic void test0334() throws JavaModelException", "diff": ["-\t\ttype = arrayType.getComponentType();", "-\t\tassertTrue(\"Not an array type\", type instanceof ArrayType); //$NON-NLS-1$", "-\t\tArrayType arrayType2 = (ArrayType) type;", "-\t\tcheckSourceRange(arrayType2, \"Object[10][]\", source); //$NON-NLS-1$", "-\t\tITypeBinding typeBinding4 = arrayType2.resolveBinding();", "+\t\ttype = arrayType.getElementType();", "+\t\tITypeBinding typeBinding4 = type.resolveBinding();", "-\t\tassertEquals(\"wrong name\", \"Object[][]\", typeBinding4.getName()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\ttype = arrayType2.getComponentType();", "-\t\tassertTrue(\"Not an array type\", type instanceof ArrayType); //$NON-NLS-1$", "-\t\tArrayType arrayType3 = (ArrayType) type;", "-\t\tITypeBinding typeBinding5 = arrayType3.resolveBinding();", "-\t\tassertNotNull(\"no type binding5\", typeBinding5); //$NON-NLS-1$", "-\t\tassertEquals(\"wrong name\", \"Object[]\", typeBinding5.getName()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tcheckSourceRange(arrayType3, \"Object[10]\", source); //$NON-NLS-1$", "+\t\tassertEquals(\"wrong name\", \"Object\", typeBinding4.getName()); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad8fde99071fb4e4bf24400a32473192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic boolean visit(ForStatement node)", "signatureAfterChange": " \tpublic boolean visit(EnhancedForStatement node)", "diff": ["+\t */", "+\tpublic boolean visit(EnhancedForStatement node) {", "+\t\tthis.buffer.append(\"for (\");//$NON-NLS-1$", "+\t\tnode.getType().accept(this);", "+\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\tnode.getName().accept(this);", "+\t\tthis.buffer.append(\" : \");//$NON-NLS-1$", "+\t\tnode.getExpression().accept(this);", "+\t\tthis.buffer.append(\") \");//$NON-NLS-1$", "+\t\tnode.getBody().accept(this);", "+\t\treturn false;", "+\t}"]}], "num": 17281}
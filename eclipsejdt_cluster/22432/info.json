{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c860e613ceb53d79e68da5dfa367f2c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7397f469e7ca582fb8841e674d235b98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/FilerTests.java", "commitBeforeChange": "ff2b96761b3897e8f6c8feeb8c31198c182dd190", "commitAfterChange": "356c2ad24af0440f1263086b9145e07c8eeb9fab", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void internalTestCreateResource(JavaCompiler compiler) throws IOException", "signatureAfterChange": " \tprivate void internalTestCreateResource(JavaCompiler compiler, boolean isSystemCommpiler) throws IOException", "diff": ["-\tprivate void internalTestCreateResource(JavaCompiler compiler) throws IOException {", "+\tprivate void internalTestCreateResource(JavaCompiler compiler, boolean isSystemCommpiler) throws IOException {", "+ \t\t", "+ \t\tif (!isSystemCommpiler) {", "+ \t\t\tassertEquals(\"succeeded\", System.getProperty(TYPEUTILSPROC));", "+ \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "826c856348712f13ce1b16050fc8c98c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "4f0e2d1dce5fad13089e3fb4fcd43ccba005c83c", "commitAfterChange": "698c26d613731d0111dbddcb370ca40364ac7e62", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 130, "signatureBeforeChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tfinal TypeBinding typeBinding, \t\tchar[][] discouragedNames, \t\tfinal char[][] forbiddenNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "signatureAfterChange": " \tprivate void findVariableName( \t\t\tchar[] token, \t\t\tchar[] qualifiedPackageName, \t\t\tchar[] qualifiedSourceName, \t\t\tchar[] sourceName, \t\t\tfinal TypeBinding typeBinding, \t\t\tchar[][] discouragedNames, \t\t\tfinal char[][] forbiddenNames, \t\t\tboolean forCollection, \t\t\tint dim, \t\t\tint kind, \t\t\tint modifiers)", "diff": ["-\t\tchar[] token,", "-\t\tchar[] qualifiedPackageName,", "-\t\tchar[] qualifiedSourceName,", "-\t\tchar[] sourceName,", "-\t\tfinal TypeBinding typeBinding,", "-\t\tchar[][] discouragedNames,", "-\t\tfinal char[][] forbiddenNames,", "-\t\tint dim,", "-\t\tint kind,", "-\t\tint modifiers){", "+\t}", "+\tprivate void findVariableName(", "+\t\t\tchar[] token,", "+\t\t\tchar[] qualifiedPackageName,", "+\t\t\tchar[] qualifiedSourceName,", "+\t\t\tchar[] sourceName,", "+\t\t\tfinal TypeBinding typeBinding,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tfinal char[][] forbiddenNames,", "+\t\t\tboolean forCollection,", "+\t\t\tint dim,", "+\t\t\tint kind,", "+\t\t\tint modifiers){", "-\t\tif (dim > 0){", "-\t\t\tint l = qualifiedSourceName.length;", "-\t\t\tdisplayName = new char[l+(2*dim)];", "-\t\t\tSystem.arraycopy(qualifiedSourceName, 0, displayName, 0, l);", "-\t\t\tfor(int i = 0; i < dim; i++){", "-\t\t\t\tdisplayName[l+(i*2)] = '[';", "-\t\t\t\tdisplayName[l+(i*2)+1] = ']';", "+\t\tif (!forCollection) {", "+\t\t\tif (dim > 0){", "+\t\t\t\tint l = qualifiedSourceName.length;", "+\t\t\t\tdisplayName = new char[l+(2*dim)];", "+\t\t\t\tSystem.arraycopy(qualifiedSourceName, 0, displayName, 0, l);", "+\t\t\t\tfor(int i = 0; i < dim; i++){", "+\t\t\t\t\tdisplayName[l+(i*2)] = '[';", "+\t\t\t\t\tdisplayName[l+(i*2)+1] = ']';", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tdisplayName = qualifiedSourceName;", "-\t\t\tdisplayName = qualifiedSourceName;", "+\t\t\tdisplayName = typeBinding.qualifiedSourceName();"]}], "num": 22432}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5fbe864e9175e84fd77ce7a840419c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc8c48ddc82732653d03712610ced1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b15d555969226382f7ca55d85fc45725a266fc8b", "commitAfterChange": "ea2c66d41813ffe0a73e9227d41cf335eedf7fb6", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void tagAsAccessingInstanceStateOf(ReferenceBinding enclosingType)", "signatureAfterChange": " \tpublic void tagAsAccessingEnclosingInstanceStateOf(ReferenceBinding enclosingType, boolean typeVariableAccess)", "diff": ["-\t */", "-\tpublic void tagAsAccessingInstanceStateOf(ReferenceBinding enclosingType) {", "+\t// Some entity in the receiver scope is referencing instance data of enclosing type. Tag all intervening methods as instance methods. ", "+\tpublic void tagAsAccessingEnclosingInstanceStateOf(ReferenceBinding enclosingType, boolean typeVariableAccess) {", "-\t\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t\t\tif (!typeVariableAccess)", "+\t\t\t\t\tlambda.shouldCaptureInstance = true;  // lambda can still be static, only when `this' is touched (implicitly or otherwise) it cannot be."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f730a6b82c012334ce65bdfe818ddd50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/NestedTypeBinding.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope)", "signatureAfterChange": "\r \r public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope, boolean onlyExactMatch)", "diff": ["-\r", "-public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope) {\r", "-\tif (enclosingInstances == null) return null;\t\t// is null if no enclosing instances are known\r", "-\r", "-\t// exact match\r", "-\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "-\t\tif (enclosingInstances[i].type == targetEnclosingType)\r", "-\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "-\t\t\t\treturn enclosingInstances[i];\r", "-\r", "-\t// type compatibility : to handle cases such as\r", "-\t// class T { class M{}}\r", "-\t// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r", "-\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "-\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "-\t\t\tif (targetEnclosingType.isSuperclassOf((ReferenceBinding) enclosingInstances[i].type))\r", "-\t\t\t\treturn enclosingInstances[i];\r", "-\treturn null;\r", "-}\r", "+\r", "+public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope, boolean onlyExactMatch) {\r", "+\tif (enclosingInstances == null) return null;\t\t// is null if no enclosing instances are known\r", "+\r", "+\t// exact match\r", "+\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "+\t\tif (enclosingInstances[i].type == targetEnclosingType)\r", "+\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "+\t\t\t\treturn enclosingInstances[i];\r", "+\r", "+\t// type compatibility : to handle cases such as\r", "+\t// class T { class M{}}\r", "+\t// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r", "+\tif (!onlyExactMatch){\r", "+\t\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "+\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "+\t\t\t\tif (targetEnclosingType.isSuperclassOf((ReferenceBinding) enclosingInstances[i].type))\r", "+\t\t\t\t\treturn enclosingInstances[i];\r", "+\t}\r", "+\treturn null;\r", "+}\r"]}], "num": 34514}
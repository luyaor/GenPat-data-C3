{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3eb1aedf5efffea9098365061bf79f27", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db5ba20fbecdbc2b684cca454a1831b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "424cdde474240f77c6a95afe51d763a0380a2d1a", "commitAfterChange": "dea180787931d8ee1f626772e59d44fa10c93411", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\tint bestParamMatches = -1;", "-\t\t\t\tint paramMatches = 0;", "-\t\t\t\tnext: for (int p = 0; p < paramLength; p++) {", "-\t\t\t\t\tTypeBinding param = params[p];", "-\t\t\t\t\tfor (int a = p == 0 ? 0 : p - 1; a < argLength && a < p + 1; a++) { // look one slot before & after to see if the type matches", "-\t\t\t\t\t\tif (param == argumentTypes[a]) {", "-\t\t\t\t\t\t\tparamMatches++;", "-\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (argMatches + paramMatches < bestArgMatches + bestParamMatches)", "+\t\t\t\tif (argMatches < bestArgMatches)", "-\t\t\t\tif (argMatches + paramMatches == bestArgMatches + bestParamMatches) {", "+\t\t\t\tif (argMatches == bestArgMatches) {", "-\t\t\t\tbestParamMatches = paramMatches;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b843b80ea763045b0b514ad007de9222", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2c50936b4d5f907d1b27aede21d309fb96b2477a", "commitAfterChange": "b1fa07ff3d6475305b2ae07b0c0b04d4f34b1d85", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "diff": ["-\t\tint paramLength = typeParameters.length;", "-\t\tnextVariable : for (int i = 0; i < paramLength; i++) {", "+\t\tnextVariable : for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\tif (this.kind == CLASS_SCOPE) {", "-\t\t\tfor (int i = 0; i < paramLength; i++) {", "-\t\t\t\tTypeParameter typeParameter = typeParameters[i];", "-\t\t\t\tTypeReference typeRef = typeParameter.type;", "-\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\ttypeRef.checkBounds(this);", "-", "-\t\t\t\t\tTypeReference[] boundRefs = typeParameter.bounds;", "-\t\t\t\t\tif (boundRefs != null)", "-\t\t\t\t\t\tfor (int j = 0, k = boundRefs.length; j < k; j++)", "-\t\t\t\t\t\t\tboundRefs[j].checkBounds(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb2dbfdaca6b73391f69ad068aa907ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void  checkParameterizedTypeBounds()", "signatureAfterChange": " \tprivate void  checkParameterizedTypeBounds()", "diff": ["-\t\t\t\tTypeParameter typeParameter = typeParameters[i];", "-\t\t\t\tTypeReference typeRef = typeParameter.type;", "-\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\ttypeRef.checkBounds(this);", "-", "-\t\t\t\t\tTypeReference[] boundRefs = typeParameter.bounds;", "-\t\t\t\t\tif (boundRefs != null)", "-\t\t\t\t\t\tfor (int j = 0, k = boundRefs.length; j < k; j++)", "-\t\t\t\t\t\t\tboundRefs[j].checkBounds(this);", "-\t\t\t\t}", "+\t\t\t\ttypeParameters[i].checkBounds(this);"]}], "num": 2887}
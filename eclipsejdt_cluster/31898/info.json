{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fbb09df7de66183653852f64e4921c7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6afe2fe3af01e1124893f8b74acf6e71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "7eeea60289161cbc82181c2049d38d6375b340c4", "commitAfterChange": "bac0b688c9760eba84723fa01c9ef8fce3bf0175", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \t \tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope, InferenceContext18 inferenceContext)", "diff": ["-\tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope) {", "+\tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope, InferenceContext18 inferenceContext) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a28a4c18badea3c2f0f07c1c3c511dff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void tagAsEllipsisArgument()", "signatureAfterChange": "  public Expression resolveExpressionExpecting(TypeBinding targetType, Scope scope)", "diff": ["+public Expression resolveExpressionExpecting(TypeBinding targetType, Scope scope) {", "+\treturn this; // subclasses should implement for a better resolved expression if required.", "+}", "-", "-public void tagAsEllipsisArgument() {", "-\t// don't care. Subclasses that are poly expressions in specific contexts should listen in and make note."]}], "num": 31898}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33f5633734a8940fe1838ba892c86d6b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4482f596273cc0762cd649888e6d7895", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "509b5d0893b6487ed9d9f869674ce451a529a2e9", "commitAfterChange": "fe90b8dc2ad912f6469c4bf76947d5468c18045b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d33e3a36bafabcb0ab76cb50024bf0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "717a44c6b6c761be0c48243cde9dff6857a6db32", "commitAfterChange": "df9941361641a347d1ba4ee80fe7f9c7468ba17a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\tboolean didSpecifyTarget = false;\r", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg));\r", "-\t\t\t\t\t//$NON-NLS-1$\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$\r", "-\t\t\t\tif (!didSpecifySourceLevel) {\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "-\t\t\t\t}\r", "-\t\t\t\tif (!didSpecifySourceLevel) {\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "-\t\t\t\t}\r", "+\t\t\t\tdidSpecifyTarget = true;\r", "+\t\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);\r", "+\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "+\t\t// check and set compliance/source/target compatibilities\r", "+\t\tif (!didSpecifyCompliance){\r", "+\t\t\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "+\t\t\t\t}\r", "+\t\t}\r", "+\t\tString compliance = (String)options.get(CompilerOptions.OPTION_Compliance);\r", "+\t\tif (CompilerOptions.VERSION_1_4.equals(compliance)){\r", "+\t\t\t\r", "+\t\t\t// default 1.4 settings\r", "+\t\t\tif (!didSpecifySourceLevel){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "+\t\t\t}\r", "+\t\t\tif (!didSpecifyTarget){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "+\t\t\t}\r", "+\t\t} else if (CompilerOptions.VERSION_1_3.equals(compliance)){\r", "+\r", "+\t\t\t// default 1.4 settings\r", "+\t\t\tif (!didSpecifySourceLevel){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "+\t\t\t}\r", "+\t\t\tif (!didSpecifyTarget){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// compliance must be 1.4 if source is 1.4\r", "+\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)\r", "+\t\t\t\t&& !options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ \r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\t\r", "+\t\t// target must be 1.4 if source is 1.4\r", "+\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)\r", "+\t\t\t\t&& !options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_4)){ \r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource14\", (String)options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$\r", "+\t\t}\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c186a34f630b33fbb3a53feee9547ea2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "55ceaf42352b6d8c91684e3f90acf12043666c57", "commitAfterChange": "438f7f2cfe3db2f7d1d7078b55aabe801b724672", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t} else if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_JSR14);", "-\t\t// target must be 1.6 if source is 1.6", "-\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_6", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_6){ ", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "-\t\t}", "-\t\t// target must be 1.5 if source is 1.5", "-\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_5", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_5){ ", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t\t}", "-   \t\t // target must be 1.4 if source is 1.4", "-   \t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_4", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_4){ ", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "-   \t\t}", "-\t\t// target cannot be greater than compliance level", "-\t\tif (CompilerOptions.versionToJdkLevel(compliance) < CompilerOptions.versionToJdkLevel(targetVersion)){ ", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "+\t\t// tolerate jsr14 target", "+\t\tif (CompilerOptions.VERSION_JSR14.equals(targetVersion)) {", "+\t\t\t// expecting source >= 1.5", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) < ClassFileConstants.JDK1_5) {", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForGenericSource\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// target must be 1.6 if source is 1.6", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_6){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t// target must be 1.5 if source is 1.5", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_5", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_5){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t}", "+\t   \t\t // target must be 1.4 if source is 1.4", "+\t   \t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_4", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_4){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t   \t\t}", "+\t\t\t// target cannot be greater than compliance level", "+\t\t\tif (CompilerOptions.versionToJdkLevel(compliance) < CompilerOptions.versionToJdkLevel(targetVersion)){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String) targetVersion)); //$NON-NLS-1$", "+\t\t\t}"]}], "num": 42503}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acecc166aed994b12294ef7badc87950", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fddafce143ae4e7df02d77c341ce60c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-", "-\t// if field from parameterized type got found, use the original field at codegen time", "-\tif (this.binding instanceof ParameterizedFieldBinding) {", "-\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "-\t    this.codegenBinding = parameterizedField.originalField;", "-\t    // extra cast needed if field type was type variable", "-\t    if (this.codegenBinding.type.isTypeVariable()) {", "-\t        TypeVariableBinding variableReturnType = (TypeVariableBinding) this.codegenBinding.type;", "-\t        if (variableReturnType.firstBound != parameterizedField.type) { // no need for extra cast if same as first bound anyway", "-\t\t\t    this.genericCast = parameterizedField.type.erasure();", "-\t        }", "-\t    }", "-\t} else {", "-\t    this.codegenBinding = this.binding;", "-\t}", "-", "-\t// if the binding declaring class is not visible, need special action", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\tTypeBinding someReceiverType = this.delegateThis != null ? this.delegateThis.type : this.receiverType;", "-\tif (this.binding.declaringClass != someReceiverType", "-\t\t\t&& !someReceiverType.isArrayType()", "-\t\t\t&& this.binding.declaringClass != null // array.length", "-\t\t\t&& this.binding.constant() == Constant.NotAConstant) {", "-", "-\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !this.receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "-\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t\tthis.codegenBinding =", "-\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\tthis.codegenBinding,", "-\t\t\t\t\t(ReferenceBinding) someReceiverType.erasure());", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2824f03cb86e1aa05ba638bd910726d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t    this.codegenBinding = parameterizedField.originalField;", "-\t    FieldBinding fieldCodegenBinding = (FieldBinding)this.codegenBinding;", "+\t    FieldBinding codegenField = parameterizedField.originalField;", "-\t    if ((fieldCodegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "-\t        this.genericCast = fieldCodegenBinding.type.genericCast(currentScope.boxing(parameterizedField.type)); // runtimeType could be base type in boxing case", "+\t    if ((codegenField.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t        this.genericCast = codegenField.type.genericCast(currentScope.boxing(parameterizedField.type)); // runtimeType could be base type in boxing case", "-\t}", "-\tif ((this.bits & Binding.FIELD) != 0) {", "-\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "-", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t// and not from Object or implicit static field access.", "-\t\tif (fieldBinding.declaringClass != this.delegateThis.type", "-\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !fieldBinding.isStatic())", "-\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t\t\tthis.codegenBinding =", "-\t\t\t\t    currentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\t       (FieldBinding)this.codegenBinding,", "-\t\t\t\t\t        (ReferenceBinding)this.delegateThis.type.erasure());", "-\t\t\t}", "-\t\t}"]}], "num": 66221}
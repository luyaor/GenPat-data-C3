{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "163e0d9a2a25dcd91d5095a3e771c85f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2023ab824f01dce9bead47ce47539761", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 902, "methodNumberAfterChange": 902, "signatureBeforeChange": " public void test0881()", "signatureAfterChange": " public void test0881()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "-\t\t\"\tString s = (String) Foo.foo();\\n\" +", "-\t\t\"\t                        ^^^\\n\" +", "-\t\t\"Bound mismatch: The generic method foo() of type Foo is not applicable for the arguments (). The inferred type List<List<U>> is not a valid substitute for the bounded parameter <U extends List<U>>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c249f69008a4a909b53de40c1a28570e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": " public void test443467() throws Exception", "signatureAfterChange": " public void test443467() throws Exception", "diff": ["+\t\t// Note: we used to emit a duplicate message of 2. Fixed.", "-\t\t\"\tfilter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + ", "-\t\t\"\t                                                 ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The target type of this expression must be a functional interface\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in BuildIdeMain.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf0c80485c64d906b068489eba8200aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "f8e06af2d64912de617f742baa744d8cff14ca39", "commitAfterChange": "799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void testReferenceExpressionInference3b()", "signatureAfterChange": " public void testReferenceExpressionInference3b()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tI<X,String> x2s = compose(this::bar, this::i2s);\\n\" + ", "-\t\t\"\t                                     ^^^^^^^^^\\n\" + ", "-\t\t\"The type X does not define i2s(Object) that is applicable here\\n\" + "]}], "num": 37344}
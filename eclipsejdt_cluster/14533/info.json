{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9ab2953c2c27cf3c128f70a08a76ffe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ad9bd81dcb95248f0cf9976434f4b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "fdf8a7c625823b4365f60e2b73aad682cd437b32", "commitAfterChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\tStringTokenizer tokenizer = new StringTokenizer(patternString, \" .(,)\", true); //$NON-NLS-1$\r", "+\tScanner scanner = new Scanner(false, true); // tokenize white spaces\r", "+\tscanner.setSourceBuffer(patternString.toCharArray());\r", "-\tString lastToken = null;\r", "+\tint lastToken = -1;\r", "-\tString declaringType = null, fieldName = null, parameterType = null;\r", "+\tString declaringType = null, fieldName = null;\r", "-\twhile (tokenizer.hasMoreTokens()){\r", "-\t\tString token = tokenizer.nextToken();\r", "+\tint token;\r", "+\ttry {\r", "+\t\ttoken = scanner.getNextToken();\r", "+\t} catch (InvalidInputException e) {\r", "+\t\treturn null;\r", "+\t}\r", "+\twhile (token != TerminalSymbols.TokenNameEOF){\r", "-\t\t\t\tif (token.equals(\".\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (declaringType == null){\r", "-\t\t\t\t\t\tif (fieldName == null) return null;\r", "-\t\t\t\t\t\tdeclaringType = fieldName;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdeclaringType += token + fieldName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tfieldName = null;\r", "-\t\t\t\t} else if (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (!(\" \".equals(lastToken) || \".\".equals(lastToken))){ //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t\t\tmode = InsideType;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else { // name\r", "-\t\t\t\t\tif (fieldName != null) return null;\r", "-\t\t\t\t\tfieldName = token;\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\t\tif (declaringType == null){\r", "+\t\t\t\t\t\t\tif (fieldName == null) return null;\r", "+\t\t\t\t\t\t\tdeclaringType = fieldName;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t\tdeclaringType += tokenSource + fieldName;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tfieldName = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tif (!(Scanner.TokenNameWHITESPACE == lastToken \r", "+\t\t\t\t\t\t\t|| TerminalSymbols.TokenNameDOT == lastToken)){\r", "+\t\t\t\t\t\t\tmode = InsideType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\t\tif (fieldName == null) {\r", "+\t\t\t\t\t\t\tfieldName = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tfieldName += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (!token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (type == null){\r", "-\t\t\t\t\t\ttype = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token)))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\ttype += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (type == null){\r", "+\t\t\t\t\t\t\ttype = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\ttype += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "+\t\t\t\tbreak;\r", "+\t\ttry {\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0af17edc18e927e62b3f8e4e4917cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static SearchPattern createMethodOrConstructorPattern(String patternString, int limitTo, int matchRule, boolean isConstructor)", "signatureAfterChange": " \tprivate static SearchPattern createMethodOrConstructorPattern(String patternString, int limitTo, int matchRule, boolean isConstructor)", "diff": ["-\t\tfinal int InsideParameter = 2;", "-\t\tfinal int InsideReturnType = 3;", "-\t\tfinal int InsideTypeArguments = 4;", "+\t\tfinal int InsideTypeArguments = 2;", "+\t\tfinal int InsideParameter = 3;", "+\t\tfinal int InsideReturnType = 4;", "+\t\tString typeArgumentsString = null;", "-\t\t\t\t\t\t\t\tif (selector == null) return null; // invalid syntax", "+\t\t\t\t\t\t\t\tif (selector == null || lastToken == TerminalTokens.TokenNameDOT) {", "+\t\t\t\t\t\t\t\t\tif (typeArgumentsString != null) return null; // invalid syntax", "+\t\t\t\t\t\t\t\t\ttypeArgumentsString = scanner.getCurrentTokenString();", "+\t\t\t\t\t\t\t\t\tmode = InsideTypeArguments;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (typeArgumentsString != null) return null; // invalid syntax", "-\t\t\t\t\t\t\t\t\tif (selector == null) return null;", "+\t\t\t\t\t\t\t\t\tif (selector == null) return null; // invalid syntax", "-\t\t\t\t\t\t\t\t\tString tokenSource = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\t\tdeclaringType += tokenSource + selector;", "+\t\t\t\t\t\t\t\t\tdeclaringType += scanner.getCurrentTokenString() + selector;", "-\t\t\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken || TerminalTokens.TokenNameDOT == lastToken))", "-\t\t\t\t\t\t\t\t\tmode = isConstructor ? InsideTypeArguments : InsideReturnType;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\t\tif (selector == null) return null;// invalid syntax", "-\t\t\t\t\t\t\t\tmode = InsideTypeArguments;", "+\t\t\t\t\t\t\t\tswitch (lastToken) {", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameDOT:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tmode = InsideReturnType;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (declaringType == null) return null; // invalid syntax", "-\t\t\t\t\t\tif (declaringType == null) return null; // invalid syntax", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t// read type arguments", "+\t\t\t\tcase InsideTypeArguments:", "+\t\t\t\t\tif (typeArgumentsString == null) return null; // invalid syntax", "+\t\t\t\t\ttypeArgumentsString += scanner.getCurrentTokenString();", "+\t\t\t\t\tswitch (token) {", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\t\t\t\targCount--;", "+\t\t\t\t\t\t\tif (argCount == 0) {", "+\t\t\t\t\t\t\t\tString pseudoType = \"Type\"+typeArgumentsString; //$NON-NLS-1$", "+\t\t\t\t\t\t\t\ttypeArguments = Signature.getTypeArguments(Signature.createTypeSignature(pseudoType, false).toCharArray());", "+\t\t\t\t\t\t\t\tmode = InsideSelector;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "+\t\t\t\t\t\t\targCount++;", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\t\t// invalid syntax", "-\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\tif (parameterType == null) return null; // invalid syntax", "-\t\t\t\t\t\tif (parameterType == null) return null; // invalid syntax", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\t\tmode = InsideTypeArguments;", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "+\t\t\t\t\t\t\t\tparameterTypes = new String[5];", "+\t\t\t\t\t\t\t\tparameterCount = 0;", "+\t\t\t\t\t\t\t\tmode = InsideParameter;", "+\t\t\t\t\t\tif (returnType == null) return null; // invalid syntax", "-\t\t\t\t\t\tif (returnType == null) return null; // invalid syntax", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase InsideTypeArguments:", "-\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\tString pseudoType = selector+patternString.substring(scanner.getCurrentTokenStartPosition()); // '%' is a valid character for type", "-\t\t\t\t\t\t\ttypeArguments = Util.extractMethodArguments(Signature.createTypeSignature(pseudoType, false));", "-\t\t\t\t\t\t\tscanner.currentPosition = scanner.eofPosition; // end scan", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "-\t\t\t\t\t\t\tif (lastToken == TerminalTokens.TokenNameREMAINDER || lastToken == TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t\t\t\tpseudoType = selector+'%'+patternString.substring(scanner.getCurrentTokenStartPosition()); // '%' is a valid character for type", "-\t\t\t\t\t\t\t\ttypeArguments = Util.extractMethodArguments(Signature.createTypeSignature(pseudoType, false));", "-\t\t\t\t\t\t\t\tscanner.currentPosition = scanner.eofPosition; // end scan", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\treturn null; // invalid syntax", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\treturn null; // invalid syntax"]}], "num": 14533}
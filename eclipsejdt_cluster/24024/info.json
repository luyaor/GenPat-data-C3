{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffaad3e2ccee90052775ce42652aeadc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d282bf56c6485610b2285cfd44bba25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (anonymousType == null && enclosingInstance == null) {", "+\t\tif (this.anonymousType == null && this.enclosingInstance == null) {", "-\t\t// ==> by construction, when there is an enclosing instance the typename may NOT be qualified", "-\t\t// ==> therefore by construction the type is always a SingleTypeReferenceType instead of being either ", "-\t\t// sometime a SingleTypeReference and sometime a QualifedTypeReference", "-", "+\t\t", "+\t\t\t} else if (type instanceof QualifiedTypeReference) {", "+\t\t\t\tscope.problemReporter().illegalUsageOfQualifiedTypeReference((QualifiedTypeReference)type);", "+\t\t\t\thasError = true;", "-\t\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "+\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "-", "+\t\t// resolve type arguments (for generic constructor call)", "+\t\tif (this.typeArguments != null) {", "+\t\t\tint length = this.typeArguments.length;", "+\t\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeBinding argType = this.typeArguments[i].resolveType(scope);", "+\t\t\t\tif (argType == null) return null; // error already reported", "+\t\t\t\tthis.genericTypeArguments[i] = argType;", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\t", "+\t\tif ((receiverType.tagBits & TagBits.HasWildcard) != 0) {", "+\t\t    scope.problemReporter().cannotInstantiateWithWildcards(type, (ParameterizedTypeBinding)receiverType);", "+\t\t    return this.resolvedType = receiverType;", "+\t\t}\t\t\t\t", "-\t\t\t\tif (arguments != null) {", "-\t\t\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\t\t\targuments[i].implicitWidening(this.binding.parameters[i], argumentTypes[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (argsContainCast) {", "-\t\t\t\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocationType, binding, this.arguments, argumentTypes, this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (this.arguments != null)", "+\t\t\t\t\tcheckInvocationArguments(scope, null, allocationType, binding, this.arguments, argumentTypes, argsContainCast, this);", "-\t\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(", "-\t\t\t\tthis.enclosingInstance,", "-\t\t\t\tenclosingInstanceType,", "-\t\t\t\texpectedType);", "+\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, expectedType, this.enclosingInstance);", "+\t\t// TODO (philippe) no deprecation check?", "-\t\t\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(", "-\t\t\t\t\tenclosingInstance,", "-\t\t\t\t\tenclosingInstanceType,", "-\t\t\t\t\tinheritedBinding.declaringClass.enclosingType());", "+\t\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, inheritedBinding.declaringClass.enclosingType(), enclosingInstance);", "-", "-\t\t// this promotion has to be done somewhere: here or inside the constructor of the", "-\t\t// anonymous class. We do it here while the constructor of the inner is then easier.", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(inheritedBinding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "-\t\t\tif (argsContainCast) {", "-\t\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, this.superTypeBinding, inheritedBinding, this.arguments, argumentTypes, this);", "-\t\t\t}", "-\t\t}", "+\t\tif (this.arguments != null)", "+\t\t\tcheckInvocationArguments(scope, null, this.superTypeBinding, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbe306ca9feaaef12443f8497e0aba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "signatureAfterChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "diff": ["-// NOTE: the type of a field of a source type is resolved when needed", "+//NOTE: the type of a field of a source type is resolved when needed", "+\t", "+\tif ((this.tagBits & TagBits.AreFieldsComplete) != 0) {", "+\t\treturn ReferenceBinding.binarySearch(fieldName, this.fields);", "+\t}", "+\t// lazily sort fields", "+\tif ((this.tagBits & TagBits.AreFieldsSorted) == 0) {", "+\t\tint length = this.fields.length;", "+\t\tif (length > 1) \tReferenceBinding.sortFields(this.fields, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreFieldsSorted;", "+\t}\t\t", "-\tint fieldLength = fieldName.length;", "-\tfor (int i = 0, length = fields.length; i < length; i++) {", "-\t\tFieldBinding field = fields[i];", "-\t\tif (field.name.length == fieldLength && CharOperation.equals(field.name, fieldName)) {", "-\t\t\tFieldBinding result = null;", "-\t\t\ttry {", "-\t\t\t\tresult = resolveTypeFor(field);", "-\t\t\t\treturn result;", "-\t\t\t} finally {", "-\t\t\t\tif (result == null) {", "-\t\t\t\t\t// ensure fields are consistent reqardless of the error", "-\t\t\t\t\tint newSize = fields.length - 1;", "-\t\t\t\t\tif (newSize == 0) {", "-\t\t\t\t\t\tfields = Binding.NO_FIELDS;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tFieldBinding[] newFields = new FieldBinding[newSize];", "-\t\t\t\t\t\tSystem.arraycopy(fields, 0, newFields, 0, i);", "-\t\t\t\t\t\tSystem.arraycopy(fields, i + 1, newFields, i, newSize - i);", "-\t\t\t\t\t\tfields = newFields;", "+\tFieldBinding field = ReferenceBinding.binarySearch(fieldName, this.fields);", "+\tif (field != null) {", "+\t\tFieldBinding result = null;", "+\t\ttry {", "+\t\t\tresult = resolveTypeFor(field);", "+\t\t\treturn result;", "+\t\t} finally {", "+\t\t\tif (result == null) {", "+\t\t\t\t// ensure fields are consistent reqardless of the error", "+\t\t\t\tint newSize = this.fields.length - 1;", "+\t\t\t\tif (newSize == 0) {", "+\t\t\t\t\tthis.fields = Binding.NO_FIELDS;", "+\t\t\t\t} else {", "+\t\t\t\t\tFieldBinding[] newFields = new FieldBinding[newSize];", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tfor (int i = 0, length = this.fields.length; i < length; i++) {", "+\t\t\t\t\t\tFieldBinding f = this.fields[i];", "+\t\t\t\t\t\tif (f == field) continue;", "+\t\t\t\t\t\tnewFields[index++] = f;", "+\t\t\t\t\tthis.fields = newFields;"]}], "num": 24024}
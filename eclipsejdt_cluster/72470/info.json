{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b32fb151f0705b64bd0a5f3c998d14b2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f1f3eee6c2ee271858cd85eecf69f2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "030294305389e5486e7f63658830617d44acd9c2", "commitAfterChange": "3f4495ecc3a42cb049fa3e01aeaf49a7722af380", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 57, "signatureBeforeChange": "  \t\tprivate int countEmptyLines(ASTNode last)", "signatureAfterChange": "  \t\tprivate int countEmptyLines(ASTNode last)", "diff": ["-\t\t\tIDocument doc= getDocument();", "-\t\t\ttry {", "-\t\t\t\tint lastLine= doc.getLineOfOffset(last.getStartPosition() + last.getLength());", "-\t\t\t\tint scanLine= lastLine + 1;", "-\t\t\t\tint numLines= doc.getNumberOfLines();", "-\t\t\t\twhile(scanLine < numLines && containsOnlyWhitespaces(doc, scanLine)) {", "-\t\t\t\t\tscanLine++;", "+\t\t\tLineInformation lineInformation= getLineInformation();", "+\t\t\tint lastLine= lineInformation.getLineOfOffset(getExtendedEnd(last));", "+\t\t\tif (lastLine >= 0) {", "+\t\t\t\tint startLine= lastLine + 1;", "+\t\t\t\tint start= lineInformation.getLineOffset(startLine);", "+\t\t\t\tif (start < 0) {", "+\t\t\t\t\treturn 0;", "-\t\t\t\treturn scanLine - lastLine - 1;", "-\t\t\t} catch (BadLocationException e) {", "-\t\t\t\thandleException(e);", "-\t\t\t\treturn 0;", "-\t\t\t}\t", "-\t\t}", "+\t\t\t\tchar[] cont= getContent();", "+\t\t\t\tint i= start;", "+\t\t\t\twhile (i < cont.length && Character.isWhitespace(cont[i])) {", "+\t\t\t\t\ti++;", "+\t\t\t\t}", "+\t\t\t\tif (i > start) {", "+\t\t\t\t\tlastLine= lineInformation.getLineOfOffset(i);", "+\t\t\t\t\tif (lastLine > startLine) {", "+\t\t\t\t\t\treturn lastLine - startLine;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\treturn 0;", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22555ae1caac46c7d0d15a0dcb32ac0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "63048f05f8ad7ef929a641d2f1b8bb0eaa24f28d", "commitAfterChange": "0aa7dea4bc76da1cfdaf2ad3978817e9aac1014f", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 143, "signatureBeforeChange": " \t\t \t\tprotected void updateIndent(int prevMark, int originalOffset, int nodeIndex, TextEditGroup editGroup)", "signatureAfterChange": " \t\t \t\tprotected void updateIndent(int prevMark, int originalOffset, int nodeIndex, TextEditGroup editGroup)", "diff": ["+\t\t\t// Do not change indent if the previous non removed node is on the same line", "+\t\t\tint previousNonRemovedNodeIndex = nodeIndex - 1;", "+\t\t\twhile (previousNonRemovedNodeIndex >= 0 && this.list[previousNonRemovedNodeIndex].getChangeKind() == RewriteEvent.REMOVED) {", "+\t\t\t\tpreviousNonRemovedNodeIndex--;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (previousNonRemovedNodeIndex > -1) {", "+\t\t\t\tLineInformation lineInformation = getLineInformation();", "+\t\t\t\t", "+\t\t\t\tRewriteEvent prevEvent = this.list[previousNonRemovedNodeIndex];", "+\t\t\t\tint prevKind = prevEvent.getChangeKind();", "+\t\t\t\tif (prevKind == RewriteEvent.UNCHANGED || prevKind == RewriteEvent.REPLACED) {", "+\t\t\t\t\tASTNode prevNode = (ASTNode) this.list[previousNonRemovedNodeIndex].getOriginalValue();", "+\t\t\t\t\tint prevEndPosition = prevNode.getStartPosition() + prevNode.getLength();", "+\t\t\t\t\tint prevLine = lineInformation.getLineOfOffset(prevEndPosition);", "+\t\t\t\t\tint line = lineInformation.getLineOfOffset(originalOffset);", "+\t\t\t\t\t", "+\t\t\t\t\tif (prevLine == line) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}], "num": 72470}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92f6ce8064032f5ab828aa313851bf98", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bde5001c8d6915daab6c59916804cf26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "79aecf89bad91987eb417be70bec6de3aa728fa2", "commitAfterChange": "eb4ff23c38228c4d00e0da694ac7e98ede6240d8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding, AccessRestriction accessRestriction)", "signatureAfterChange": " \t \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding, AccessRestriction accessRestriction)", "diff": ["+\t\t\tReferenceBinding existingType = packageBinding.getType0(className[className.length - 1]);", "+\t\t\tif (existingType != null)", "+\t\t\t\t// report the error against the parent - its still safe to answer the member type", "+\t\t\t\tthis.parent.problemReporter().duplicateNestedType(referenceContext);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff7ab992d17856c741e401d284244242", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "ac8cdb61fadedfb71734ad72814ff335aab8d66f", "commitAfterChange": "61954ebefbf55c2cefcf0f4309dfffefabd27ff7", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public final boolean needBlankFinalFieldInitializationCheck(FieldBinding binding)", "signatureAfterChange": " public final boolean needBlankFinalFieldInitializationCheck(FieldBinding binding)", "diff": ["-\t\tif (fieldDeclaringClass == methodScope.enclosingReceiverType()) {", "+\t\tReferenceBinding enclosingType = methodScope.enclosingReceiverType();", "+\t\tif (enclosingType == fieldDeclaringClass) {", "+\t\tif (!enclosingType.erasure().isAnonymousType()) {", "+\t\t\treturn false; // only check inside anonymous type", "+\t\t}"]}], "num": 15280}
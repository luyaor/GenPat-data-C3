{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63c94225616ae1a8d4ac90d5244a48b4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146fb155f7b79d6d7590d214f3a7b81d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "dba39c1d5c61bbe26665fc6f71117b5055d2912c", "commitAfterChange": "69c496e755cc6913b44756320f466e0fd51afc57", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-\t\t\tthis.valueIfTrue.checkAgainstFinalTargetType(targetType);", "-\t\t\tthis.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tTypeBinding valueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "+\t\t\tTypeBinding valueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tif (valueIfTrueType != null && !valueIfTrueType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "+\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfTrueType, targetType, this.valueIfTrue, null);", "+\t\t\t}", "+\t\t\tif (valueIfFalseType != null && !valueIfFalseType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "+\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfFalseType, targetType, this.valueIfFalse, null);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c12b5070f78fcb0a8519bff49eb8e95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-\t\t\tTypeBinding valueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "-\t\t\tTypeBinding valueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "-\t\t\tif (valueIfTrueType != null) {", "-\t\t\t\tif (!valueIfTrueType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "-\t\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfTrueType, targetType, this.valueIfTrue, null);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.valueIfTrue.computeConversion(this.polyExpressionScope, targetType, this.originalValueIfTrueType);\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (valueIfFalseType != null) {", "-\t\t\t\tif (!valueIfFalseType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "-\t\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfFalseType, targetType, this.valueIfFalse, null);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.valueIfFalse.computeConversion(this.polyExpressionScope, targetType, this.originalValueIfFalseType);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "+\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tcomputeConversions(this.polyExpressionScope, targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57a88095353d2a8781ec557e570b6b75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "c90773ded969a955dbf869e7d3cd599898423a64", "commitAfterChange": "85d19e94c6786b901347844edd06d2143d6f8b15", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t    if (!trueType.isPrimitiveOrBoxedPrimitiveType() || !falseType.isPrimitiveOrBoxedPrimitiveType()) { // reference conditional ==> poly expression.", "-\t\t\t    \tif (!originalValueIfTrueType.isCompatibleWith(this.expectedType, scope))", "-\t\t\t    \t\tscope.problemReporter().typeMismatchError(originalValueIfTrueType, this.expectedType, this.valueIfTrue, null);", "-\t\t\t    \tif (!originalValueIfFalseType.isCompatibleWith(this.expectedType, scope))", "-\t\t\t    \t\tscope.problemReporter().typeMismatchError(originalValueIfFalseType, this.expectedType, this.valueIfFalse, null);", "-\t\t\t    \t// 15.25.3: The type of a poly reference conditional expression is the same as its target type.", "-\t\t\t    \treturn this.resolvedType = this.expectedType;", "-\t\t\t    }", "-\t\t\t", "+\t\t\t    if (!trueType.isPrimitiveOrBoxedPrimitiveType() || !falseType.isPrimitiveOrBoxedPrimitiveType()) // reference conditional ==> poly expression.", "+\t\t\t    \tthis.isPolyExpression = true;"]}], "num": 8905}
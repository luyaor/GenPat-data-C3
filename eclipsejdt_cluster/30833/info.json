{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c118a343364eb1e9c52c66c311b2b22f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cd33e8810cbe54533eb62c1a1d79c31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "01023454337af8ada2f5699e5de8fcd7a8d40840", "commitAfterChange": "b7bb9d2950572af77f85c2c708c3816367817930", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference, typeReference.annotations);", "+\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "-\t\t\t\tfinal Name qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference, typeReference.annotations);", "+\t\t\t\tfinal Name qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2160139606d30833488e06d11e34cac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "dc897dd3e4818ca2b15bd3d143de606b0ce0335f", "commitAfterChange": "8536e94c328f058d5f377b8328af7061c65f8af1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": " \t \tpublic Type convertType(TypeReference typeReference)", "diff": ["+\t", "+\t\t\t\t\tif (resolveBindings) {", "+\t\t\t\t\t\t// store keys for inner types", "+\t\t\t\t\t\tcompleteRecord((ArrayType) type, typeReference);", "+\t\t\t\t\t}", "+\t\t\t\t\t\tcompleteRecord((ArrayType) type, typeReference);", "+\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "-\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "+\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\tcompleteRecord((ArrayType) type, typeReference);", "+\t\t\t\t}\t\t\t\t", "-\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e49b4a8aa5dda162b048dfa9e4e717ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3d4c80327c4bd6f61a1ef852d9f8cb11ff6d9d62", "commitAfterChange": "a00d0694a5797c69eb50145f1a65c73c676a067b", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": " \t \tprotected void setTypeNameForAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation compilerAnnotation, Annotation annotation)", "signatureAfterChange": " \t \tprotected void setTypeNameForAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation compilerAnnotation, Annotation annotation)", "diff": ["-\t\tName name;", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, typeReference);", "+\t\t\tannotation.setTypeName(setQualifiedNameNameAndSourceRanges(tokens, positions, typeReference));", "-\t\t\tname = this.ast.newSimpleName(new String(singleTypeReference.token));", "+\t\t\tfinal SimpleName name = new SimpleName(this.ast);", "+\t\t\tname.internalSetIdentifier(new String(singleTypeReference.token));", "+\t\t\tannotation.setTypeName(name);", "-\t\tannotation.setTypeName(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed7fde2799b297baa0706d2666ae8835", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3d4c80327c4bd6f61a1ef852d9f8cb11ff6d9d62", "commitAfterChange": "a00d0694a5797c69eb50145f1a65c73c676a067b", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \t \tpublic Name convert(org.eclipse.jdt.internal.compiler.ast.TypeReference typeReference)", "signatureAfterChange": " \t \tpublic Name convert(org.eclipse.jdt.internal.compiler.ast.TypeReference typeReference)", "diff": ["-\t\tName name = null;", "-\t\t\tlong[] positions = qualifiedTypeReference.sourcePositions;\t\t\t", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(typeName, positions, typeReference);", "+\t\t\tfinal long[] positions = qualifiedTypeReference.sourcePositions;\t\t\t", "+\t\t\treturn setQualifiedNameNameAndSourceRanges(typeName, positions, typeReference);", "-\t\t\tname = this.ast.newSimpleName(new String(typeName[0]));", "+\t\t\tfinal SimpleName name = new SimpleName(this.ast);", "+\t\t\tname.internalSetIdentifier(new String(typeName[0]));", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(name, typeReference);", "+\t\t\t}", "+\t\t\treturn name;", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, typeReference);", "-\t\t}", "-\t\treturn name;"]}], "num": 30833}
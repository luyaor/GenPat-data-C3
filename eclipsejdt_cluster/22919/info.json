{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f99e7daaea0aa24a1da3e41e297df7f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8989b3cbdd769cb8f256bf8b73211a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (this.primaryExceptionVariable != null) {", "+\t\tthis.primaryExceptionVariable.useFlag = LocalVariableBinding.USED;", "+\t}", "+\tif (this.caughtThrowableVariable != null) {", "+\t\tthis.caughtThrowableVariable.useFlag = LocalVariableBinding.USED;", "+\t}", "+\t\t\t\tthis.caughtExceptionsCatchBlocks,", "+\t\t\t\tthis.catchArguments,", "+\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\t\tflowInfo = this.resources[i].analyseCode(currentScope, handlingContext, flowInfo.copy());", "+\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tif (type != null && type.isValidBinding()) {", "+\t\t\t\tReferenceBinding binding = (ReferenceBinding) type;", "+\t\t\t\tMethodBinding closeMethod = binding.getExactMethod(ConstantPool.Close, new TypeBinding [0], this.scope.compilationUnitScope()); // scope needs to be tighter", "+\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\t\tReferenceBinding[] thrownExceptions = closeMethod.thrownExceptions;", "+\t\t\t\t\tfor (int j = 0, length = thrownExceptions.length; j < length; j++) {", "+\t\t\t\t\t\thandlingContext.checkExceptionHandlers(thrownExceptions[j], this.resources[i], flowInfo, currentScope, true);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "+\t\t\t\tif (isUncheckedCatchBlock(i)) {", "-\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(i)).", "-\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(this.caughtExceptionTypes[i]);", "+\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(i);", "-\t\t\t\tif (this.tryBlock.statements == null) {", "+\t\t\t\tif (this.tryBlock.statements == null && this.resources == NO_RESOURCES) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350579", "+\t\t\t\tthis.caughtExceptionsCatchBlocks,", "+\t\t\t\tthis.catchArguments,", "+\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\t\tflowInfo = this.resources[i].analyseCode(currentScope, handlingContext, flowInfo.copy());", "+\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tif (type != null && type.isValidBinding()) {", "+\t\t\t\tReferenceBinding binding = (ReferenceBinding) type;", "+\t\t\t\tMethodBinding closeMethod = binding.getExactMethod(ConstantPool.Close, new TypeBinding [0], this.scope.compilationUnitScope()); // scope needs to be tighter", "+\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\t\tReferenceBinding[] thrownExceptions = closeMethod.thrownExceptions;", "+\t\t\t\t\tfor (int j = 0, length = thrownExceptions.length; j < length; j++) {", "+\t\t\t\t\t\thandlingContext.checkExceptionHandlers(thrownExceptions[j], this.resources[j], flowInfo, currentScope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "+\t\t\t\tif (isUncheckedCatchBlock(i)) {", "-\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(i)).", "-\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(this.caughtExceptionTypes[i]);", "+\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(i);", "-\t\t\t\tif (this.tryBlock.statements == null) {", "+\t\t\t\tif (this.tryBlock.statements == null && this.resources == NO_RESOURCES) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350579", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c38da6a828e7392f4148255a68f8fa33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "7ca9f198dab5ae249453376b5f6d99317f797266", "commitAfterChange": "90457871ba3051d340feae7220f15bab37c7d551", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\ttryInfo = this.resources[i].analyseCode(currentScope, handlingContext, tryInfo);", "+\t\t\tfinal LocalDeclaration resource = this.resources[i];", "+\t\t\ttryInfo = resource.analyseCode(currentScope, handlingContext, tryInfo);", "-\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tLocalVariableBinding resourceBinding = resource.binding;", "-\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\tif(closeMethod == null) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t\t\t// extending from multiple interfaces.\t\t\t\t\t", "+\t\t\t\t\tInvocationSite site = new InvocationSite() {", "+\t\t\t\t\t\tpublic TypeBinding[] genericTypeArguments() { return null;}", "+\t\t\t\t\t\tpublic boolean isSuperAccess() {return false;}", "+\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "+\t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType) {/* empty */}", "+\t\t\t\t\t\tpublic void setDepth(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic void setFieldIndex(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic int sourceEnd() {return resource.sourceEnd(); }", "+\t\t\t\t\t\tpublic int sourceStart() {return resource.sourceStart(); }", "+\t\t\t\t\t\tpublic TypeBinding expectedType() { return null; }", "+\t\t\t\t\t};", "+\t\t\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t\t\t}", "+\t\t\t\tif (closeMethod != null && closeMethod.isValidBinding() && closeMethod.returnType.id == TypeIds.T_void) {", "-\t\t\ttryInfo = this.resources[i].analyseCode(currentScope, handlingContext, tryInfo);", "+\t\t\tfinal LocalDeclaration resource = this.resources[i];", "+\t\t\ttryInfo = resource.analyseCode(currentScope, handlingContext, tryInfo);", "-\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tLocalVariableBinding resourceBinding = resource.binding;", "-\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\tif(closeMethod == null) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t\t\t// extending from multiple interfaces.", "+\t\t\t\t\tInvocationSite site = new InvocationSite() {", "+\t\t\t\t\t\tpublic TypeBinding[] genericTypeArguments() { return null;}", "+\t\t\t\t\t\tpublic boolean isSuperAccess() {return false;}", "+\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "+\t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType) {/* empty */}", "+\t\t\t\t\t\tpublic void setDepth(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic void setFieldIndex(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic int sourceEnd() {return resource.sourceEnd(); }", "+\t\t\t\t\t\tpublic int sourceStart() {return resource.sourceStart(); }", "+\t\t\t\t\t\tpublic TypeBinding expectedType() { return null; }", "+\t\t\t\t\t};", "+\t\t\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t\t\t}", "+\t\t\t\tif (closeMethod != null && closeMethod.isValidBinding() && closeMethod.returnType.id == TypeIds.T_void) {"]}], "num": 22919}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc7eefb9287087e36aa281c6a91aa619", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bdb21d26e48de6e43d1b72c9dcd7b58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (nonStatic) receiver.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);", "+\tif (nonStatic) {", "+\t\treceiver.checkNPE(currentScope, flowContext, flowInfo, true);", "+\t}", "-\t\tflowContext.checkExceptionHandlers(thrownExceptions, this, flowInfo, currentScope);", "+\t\tflowContext.checkExceptionHandlers(thrownExceptions, this, flowInfo.copy(), currentScope);", "+\t\t// TODO (maxime) the copy above is needed because of a side effect into ", "+\t\t//               checkExceptionHandlers; consider protecting there instead of here;", "+\t\t//               NullReferenceTest#test0510"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60388d53d38e6c41eb580561c7f74a63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "commitAfterChange": "f61787e560ec300f4e60b2d9cc64378b38b8a03a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\tthis.exception.analyseCode(currentScope, flowContext, flowInfo);", "+\t// need to check that exception thrown is actually caught somewhere", "+\tflowContext.checkExceptionHandlers(this.exceptionType, this, flowInfo, currentScope);", "+\treturn FlowInfo.DEAD_END;", "+}", "-\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "-", "-\t\texception.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t// need to check that exception thrown is actually caught somewhere", "-\t\tflowContext.checkExceptionHandlers(exceptionType, this, flowInfo, currentScope);", "-\t\treturn FlowInfo.DEAD_END;", "-\t}"]}], "num": 39823}
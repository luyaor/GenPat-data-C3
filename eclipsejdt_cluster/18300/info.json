{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a1503807590ba1d8f050e4cb79dd3fc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b6d8c07da78e29bd8e07c443cc98523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "fa3b55e5fd48e8f37836dc9c1756d2e12ba5bbf1", "commitAfterChange": "4527fac5e6afcb3023659e8b3cd2d34c91a5739f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["+\t\tint startingTypeIndex = 0;", "-\t\t\t\tif (!CharOperation.endsWith(getFileName(), PACKAGE_INFO_FILE_NAME)) {", "+\t\t\t\tif (CharOperation.equals(this.getMainTypeName(), TypeConstants.PACKAGE_INFO_NAME)) {", "+\t\t\t\t\t// resolve annotations", "+\t\t\t\t\tfinal TypeDeclaration syntheticTypeDeclaration = types[0];", "+\t\t\t\t\tsyntheticTypeDeclaration.resolve(this.scope);", "+\t\t\t\t\tresolveAnnotations(syntheticTypeDeclaration.staticInitializerScope, this.currentPackage.annotations, this.scope.fPackage);", "+\t\t\t\t\t// set the synthetic bit", "+\t\t\t\t\tsyntheticTypeDeclaration.binding.modifiers |= AccSynthetic;", "+\t\t\t\t\tstartingTypeIndex = 1;", "+\t\t\t\t} else {", "-\t\t\t\t// (TODO) resolve annotations", "-\t\t\t\tfor (int i = 0, count = types.length; i < count; i++) {", "+\t\t\t\tfor (int i = startingTypeIndex, count = types.length; i < count; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7973b85aca83187b4a478aa028d8acb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "35868a2bd44946bcaa16cc791e1a3f869f5cd6bb", "commitAfterChange": "c8da4a40a8568b9c631912d3263d6c1940c37ca8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprotected void processAnnotations()", "signatureAfterChange": "  \tprotected void processAnnotations()", "diff": ["-\t\t\t\tif ((currentUnit.bits & ASTNode.IsImplicitUnit) == 0) {", "-\t\t\t\t\tcurrentUnits[index++] = currentUnit;", "-\t\t\t\t}", "+\t\t\t\tcurrentUnits[index++] = currentUnit;", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=407841", "+\t\t\t// It is possible that during the #processAnnotations() call, some units in the next batch would have been", "+\t\t\t// brought forward and compiled already. If there are any such, process them for annotations then and there.", "+\t\t\t// This would avoid the complications of marking some units as compiled but not-annotation-processed-yet.", "+\t\t\tif (top < this.totalUnits) {", "+\t\t\t\tlength = this.totalUnits - top; // NOTE: Reuse the same variable, but make sure it's not used after this point", "+\t\t\t\tCompilationUnitDeclaration[] addedUnits = new CompilationUnitDeclaration[length];", "+\t\t\t\tSystem.arraycopy(this.unitsToProcess, top, addedUnits, 0, length);", "+\t\t\t\tthis.annotationProcessorManager.processAnnotations(addedUnits, binaryTypeBindingsTemp, false);", "+\t\t\t\tthis.annotationProcessorStartIndex = top;", "+\t\t\t}"]}], "num": 18300}
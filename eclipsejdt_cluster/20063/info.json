{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5525d01e0fc4eccc686835de7ca765ae", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3eccd5227fc5ea09061d1ec24f55e5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "6612336f81825afdf894aa053e2e886c83842e87", "commitAfterChange": "9cd17ece7cc1ac607f4f1302fc1a6d286dff9da1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate boolean doesNotCompleteNormally()", "signatureAfterChange": "  \tprivate boolean doesNotCompleteNormally()", "diff": ["-\t\t\t\t\t\t\t\t\t FlowInfo.initial(this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END; ", "+\t\t\t\t\t\t\t\t\t UnconditionalFlowInfo.fakeInitializedFlowInfo(this.scope.outerMostMethodScope().analysisIndex, this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c89b85cc3adb6eb2d088981b0cbdc4e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "0f16652d495864a2012fd0fc0ed568e6ea4bc1e1", "commitAfterChange": "6041a9141290a5f24fe2eae74d79755d86c6b388", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate boolean doesNotCompleteNormally()", "signatureAfterChange": "  \tprivate boolean doesNotCompleteNormally()", "diff": ["-\t\treturn this.body.analyseCode(this.scope, ", "+\t\ttry {", "+\t\t\treturn this.body.analyseCode(this.scope, ", "-\t\t\t\t\t\t\t\t\t UnconditionalFlowInfo.fakeInitializedFlowInfo(this.scope.outerMostMethodScope().analysisIndex, this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END; ", "+\t\t\t\t\t\t\t\t\t UnconditionalFlowInfo.fakeInitializedFlowInfo(this.scope.outerMostMethodScope().analysisIndex, this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END;", "+\t\t} catch (RuntimeException e) {", "+\t\t\tthis.scope.problemReporter().lambdaShapeComputationError(this);", "+\t\t\treturn this.valueCompatible;", "+\t\t}"]}], "num": 20063}
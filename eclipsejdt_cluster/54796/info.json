{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04a352eb72ab83b55c4f569ca7953d37", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "594ac83e26fcff86ae6f516a0136d965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "93ae272625cf7aea539e03a762b5190105386996", "commitAfterChange": "c6f78f890c1ca00b0157b632da091fae2c781833", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\t\t// TODO (olivier) add probing for comment formatting", "+\t\tif (ProbingScanner == null) {", "+\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT ", "+\t\t\tProbingScanner = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_3, ClassFileConstants.JDK1_3, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\t}", "+\t\tProbingScanner.setSource(source.toCharArray());", "+\t\tProbingScanner.resetTo(offset, offset + length);", "+\t\ttry {", "+\t\t\tswitch(ProbingScanner.getNextToken()) {", "+\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "+\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tProbingScanner.setSource((char[]) null);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e9643972d7b987ddb99d356e7ca86c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "06b4da04864008da88066d5a5e945f628c432313", "commitAfterChange": "6cb1a46319677820636b0fbe76d096b92fe1835a", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 142, "signatureBeforeChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "diff": ["+\t\t\t\tTextEditGroup editGroup = getEditGroup(node, SingleVariableDeclaration.VARARGS_PROPERTY);", "-\t\t\t\t\tdoTextInsert(pos, \"...\", getEditGroup(node, SingleVariableDeclaration.VARARGS_PROPERTY)); //$NON-NLS-1$", "+\t\t\t\t\tif (apiLevel >= AST.JLS8) {", "+\t\t\t\t\t\tpos= rewriteVarargsAnnotations(node, SingleVariableDeclaration.VARARGS_ANNOTATIONS_PROPERTY, pos);", "+\t\t\t\t\t}", "+\t\t\t\t\tint indent= getIndent(node.getStartPosition());", "+\t\t\t\t\tString prefix= this.formatter.VARARGS.getPrefix(indent);", "+\t\t\t\t\tdoTextInsert(pos, prefix, editGroup);", "+\t\t\t\t\tdoTextInsert(pos, \"...\", editGroup); //$NON-NLS-1$", "-\t\t\t\t\t\tint ellipsisEnd= getScanner().getNextEndOffset(pos, true);", "-\t\t\t\t\t\tdoTextRemove(pos, ellipsisEnd - pos, getEditGroup(node, SingleVariableDeclaration.VARARGS_PROPERTY));", "+\t\t\t\t\t\tint ellipsisEnd;", "+\t\t\t\t\t\tint noOfAnnotations = apiLevel >= AST.JLS8 ? node.varargsAnnotations().size() : 0;", "+\t\t\t\t\t\tif (noOfAnnotations > 0) {", "+\t\t\t\t\t\t\tAnnotation annotation= (Annotation) node.varargsAnnotations().get(noOfAnnotations - 1);", "+\t\t\t\t\t\t\tint annotationEndPosition= annotation.getStartPosition() + annotation.getLength();", "+\t\t\t\t\t\t\tellipsisEnd= getScanner().getNextEndOffset(annotationEndPosition, true);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tellipsisEnd= getScanner().getNextEndOffset(pos, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdoTextRemove(pos, ellipsisEnd - pos, editGroup);", "+\t\t\t} else {", "+\t\t\t\tif (apiLevel >= AST.JLS8 && node.isVarargs()) {", "+\t\t\t\t\tpos = rewriteVarargsAnnotations(node, SingleVariableDeclaration.VARARGS_ANNOTATIONS_PROPERTY, pos);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8628e04705fc4b8ab0926192765a8d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "37d67ed9fa27dc85b6112e216c3af6d687e12530", "commitAfterChange": "8924c9453af0fcfcdde960b7165abadc76ad272e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t\tfinal boolean isVarArgs = (accessFlags & IModifierConstants.ACC_VARARGS) != 0;", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "+\t\t\tif (checkMode(mode, WORKING_COPY) && signatureAttribute != null) {", "+\t\t\t\tfinal char[] signature = signatureAttribute.getSignature();", "+\t\t\t\tCharOperation.replace(signature, '/', '.');", "+\t\t\t\tdisassembleGenericSignature(mode, buffer, signature);", "+\t\t\t\tbuffer.append(' ');", "+\t\t\t\tbuffer.append(Signature.toCharArray(signature, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, isVarArgs));", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, isVarArgs));", "+\t\t\t}", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "+\t\t\tif (checkMode(mode, WORKING_COPY) && signatureAttribute != null) {", "+\t\t\t\tfinal char[] signature = signatureAttribute.getSignature();", "+\t\t\t\tCharOperation.replace(signature, '/', '.');", "+\t\t\t\tdisassembleGenericSignature(mode, buffer, signature);", "+\t\t\t\tbuffer.append(' ');", "+\t\t\t\tbuffer.append(Signature.toCharArray(signature, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, isVarArgs));", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, isVarArgs));", "+\t\t\t}"]}], "num": 54796}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ae2fc05cdca93ab0b46b5ec7a19c6bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eba18707d9b74b8db176fda628e688d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "ef84f5fab4e549d913d92933638d556ae1ceefd2", "commitAfterChange": "3f513a524299babe8e8187ba844f5588920937db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "signatureAfterChange": " protected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "diff": ["-\tSearchPattern indexRecord = null;", "-\t\t\tindexRecord = getIndexRecord();", "-\t\t\tindexRecord.decodeIndexKey(indexKey);", "-\t\t\tif (isMatchingIndexRecord()) {", "+\t\t\tSearchPattern decodedPattern = getBlankPattern();", "+\t\t\tdecodedPattern.decodeIndexKey(indexKey);", "+\t\t\tif (matchesDecodedPattern(decodedPattern)) {", "-\t\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, indexRecord, participant)) ", "+\t\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, null, participant)) // AndPatterns cannot provide the decoded pattern "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0748ff79520b2166263cf2bb1528aae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/pattern/InternalSearchPattern.java", "commitBeforeChange": "ef84f5fab4e549d913d92933638d556ae1ceefd2", "commitAfterChange": "3f513a524299babe8e8187ba844f5588920937db", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprotected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "signatureAfterChange": " \t \tprotected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "diff": ["-\t\t\tSearchPattern indexRecord = getIndexRecord();", "-\t\t\tindexRecord.decodeIndexKey(indexKey);", "-\t\t\tif (isMatchingIndexRecord()) {", "+\t\t\tSearchPattern decodedPattern = getBlankPattern();", "+\t\t\tdecodedPattern.decodeIndexKey(indexKey);", "+\t\t\tif (matchesDecodedPattern(decodedPattern)) {", "-\t\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, indexRecord, participant)) ", "+\t\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, decodedPattern, participant)) "]}], "num": 30271}
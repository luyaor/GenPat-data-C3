{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77095614203e8075cdf2f0490a9bedee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e8f6f3616a4fb14422be1eec1a63f81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "717a44c6b6c761be0c48243cde9dff6857a6db32", "commitAfterChange": "df9941361641a347d1ba4ee80fe7f9c7468ba17a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "\r \r \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\tif (!hasBeenResolved && binding != null && binding.isValidBinding()) {\r", "-\t\t\thasBeenResolved = true;\r", "-\t\t\tif (isTypeUseDeprecated(binding.type, initializationScope))\r", "-\t\t\t\tinitializationScope.problemReporter().deprecatedType(binding.type, type);\r", "+\t\tif (!this.hasBeenResolved && binding != null && this.binding.isValidBinding()) {\r", "+\r", "+\t\t\tthis.hasBeenResolved = true;\r", "+\r", "+\t\t\tif (isTypeUseDeprecated(this.binding.type, initializationScope))\r", "+\t\t\t\tinitializationScope.problemReporter().deprecatedType(this.binding.type, this.type);\r", "-\t\t\tif (initialization == null) {\r", "-\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "+\t\t\tif (this.initialization == null) {\r", "+\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r", "-\t\t\t\t// break dead-lock cycles by forcing constant to NotAConstant\r", "-\t\t\t\t\tinitializationScope.fieldDeclarationIndex = binding.id;\r", "-\t\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "-\t\t\t\t\tTypeBinding tb = binding.type;\r", "-\t\t\t\t\tTypeBinding initTb;\r", "+\t\t\t\t\tinitializationScope.fieldDeclarationIndex = this.binding.id;\r", "+\r", "+\t\t\t\t\t// break dead-lock cycles by forcing constant to NotAConstant\r", "+\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tTypeBinding typeBinding = this.binding.type;\r", "+\t\t\t\t\tTypeBinding initializationTypeBinding;\r", "+\t\t\t\t\t\r", "-\t\t\t\t\t\tif ((initTb = initialization.resolveTypeExpecting(initializationScope, tb))\r", "-\t\t\t\t\t\t\t!= null) {\r", "-\t\t\t\t\t\t\t((ArrayInitializer) initialization).binding = (ArrayBinding) initTb;\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "+\r", "+\t\t\t\t\t\tif ((initializationTypeBinding = this.initialization.resolveTypeExpecting(initializationScope, typeBinding)) \t!= null) {\r", "+\t\t\t\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationTypeBinding;\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "-\t\t\t\t\t} else if (\r", "-\t\t\t\t\t\t(initTb = initialization.resolveType(initializationScope)) != null) {\r", "-\t\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initTb, tb)\r", "-\t\t\t\t\t\t\t|| (tb.isBaseType() && BaseTypeBinding.isWidening(tb.id, initTb.id)))\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "-\t\t\t\t\t\telse if (initializationScope.areTypesCompatible(initTb, tb))\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "-\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initTb, tb, this);\r", "-\t\t\t\t\t\tif (binding.isFinal()) // cast from constant actual type to variable type\r", "-\t\t\t\t\t\t\tbinding.constant =\r", "-\t\t\t\t\t\t\t\tinitialization.constant.castTo(\r", "-\t\t\t\t\t\t\t\t\t(binding.type.id << 4) + initialization.constant.typeID());\r", "+\t\t\t\t\t} else if ((initializationTypeBinding = initialization.resolveType(initializationScope)) != null) {\r", "+\r", "+\t\t\t\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationTypeBinding, typeBinding)\r", "+\t\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationTypeBinding.id))) {\r", "+\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "+\r", "+\t\t\t\t\t\t}\telse if (initializationScope.areTypesCompatible(initializationTypeBinding, typeBinding)) {\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "+\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationTypeBinding, typeBinding, this);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (this.binding.isFinal()){ // cast from constant actual type to variable type\r", "+\t\t\t\t\t\t\tthis.binding.constant =\r", "+\t\t\t\t\t\t\t\tthis.initialization.constant.castTo(\r", "+\t\t\t\t\t\t\t\t\t(this.binding.type.id << 4) + this.initialization.constant.typeID());\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbinding.constant = NotAConstant;\r", "+\t\t\t\t\t\tthis.binding.constant = NotAConstant;\r", "-\t\t\t\t\tif (binding.constant == null)\r", "-\t\t\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "+\t\t\t\t\tif (this.binding.constant == null)\r", "+\t\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac978ec5b21c132a564be1a560a57c26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\tif (binding == null) {", "-\t\t\tignoreFurtherInvestigation = true;", "+\t\tif (this.binding == null) {", "+\t\t\tthis.ignoreFurtherInvestigation = true;", "-\t\t\tif (binding.superclass != null) // watch out for Object ! (and other roots)\t", "-\t\t\t\tif (isTypeUseDeprecated(binding.superclass, scope))", "-\t\t\t\t\tscope.problemReporter().deprecatedType(binding.superclass, superclass);", "-\t\t\tif (superInterfaces != null)", "-\t\t\t\tfor (int i = superInterfaces.length; --i >= 0;)", "-\t\t\t\t\tif (superInterfaces[i].resolvedType != null)", "-\t\t\t\t\t\tif (isTypeUseDeprecated(superInterfaces[i].resolvedType, scope))", "-\t\t\t\t\t\t\tscope.problemReporter().deprecatedType(", "-\t\t\t\t\t\t\t\tsuperInterfaces[i].resolvedType,", "-\t\t\t\t\t\t\t\tsuperInterfaces[i]);", "-\t\t\tmaxFieldCount = 0;", "+\t\t\tif (this.binding.superclass != null) // watch out for Object ! (and other roots)\t", "+\t\t\t\tif (isTypeUseDeprecated(this.binding.superclass, this.scope))", "+\t\t\t\t\tthis.scope.problemReporter().deprecatedType(this.binding.superclass, this.superclass);", "+\t\t\tif (this.superInterfaces != null)", "+\t\t\t\tfor (int i = this.superInterfaces.length; --i >= 0;)", "+\t\t\t\t\tif (this.superInterfaces[i].resolvedType != null)", "+\t\t\t\t\t\tif (isTypeUseDeprecated(this.superInterfaces[i].resolvedType, this.scope))", "+\t\t\t\t\t\t\tthis.scope.problemReporter().deprecatedType(", "+\t\t\t\t\t\t\t\tthis.superInterfaces[i].resolvedType,", "+\t\t\t\t\t\t\t\tthis.superInterfaces[i]);", "+\t\t\tthis.maxFieldCount = 0;", "-\t\t\tif (fields != null) {", "-\t\t\t\tfor (int i = 0, count = fields.length; i < count; i++) {", "-\t\t\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tif (this.fields != null) {", "+\t\t\t\tfor (int i = 0, count = this.fields.length; i < count; i++) {", "+\t\t\t\t\tFieldDeclaration field = this.fields[i];", "-\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? staticInitializerScope : initializerScope);", "-\t\t\t\t\t\t\tignoreFurtherInvestigation = true;", "+\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "+\t\t\t\t\t\t\tthis.ignoreFurtherInvestigation = true;", "-\t\t\t\t\t\tmaxFieldCount++;", "+\t\t\t\t\t\tthis.maxFieldCount++;", "-\t\t\t\t\tfield.resolve(field.isStatic() ? staticInitializerScope : initializerScope);", "+\t\t\t\t\tfield.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "-\t\t\tif (memberTypes != null) {", "-\t\t\t\tfor (int i = 0, count = memberTypes.length; i < count; i++) {", "-\t\t\t\t\tmemberTypes[i].resolve(scope);", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tfor (int i = 0, count = this.memberTypes.length; i < count; i++) {", "+\t\t\t\t\tthis.memberTypes[i].resolve(this.scope);", "-\t\t\tint methodsLength = this.methods == null ? 0 : methods.length;", "+\t\t\tint methodsLength = this.methods == null ? 0 : this.methods.length;", "-\t\t\t\tscope.problemReporter().tooManyMethods(this);", "+\t\t\t\tthis.scope.problemReporter().tooManyMethods(this);", "-\t\t\tif (methods != null) {", "-\t\t\t\tfor (int i = 0, count = methods.length; i < count; i++) {", "-\t\t\t\t\tmethods[i].resolve(scope);", "+\t\t\tif (this.methods != null) {", "+\t\t\t\tfor (int i = 0, count = this.methods.length; i < count; i++) {", "+\t\t\t\t\tthis.methods[i].resolve(this.scope);", "-\t\t\t} else if ((this.binding != null) && this.binding.isPublic()) {", "-\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd);", "+\t\t\t} else if (this.binding != null && !this.binding.isLocalType()) {", "+\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd, this.binding.modifiers);"]}], "num": 68415}
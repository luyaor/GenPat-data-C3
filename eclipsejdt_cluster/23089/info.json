{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "775738f8e547aef7175201a258e33ed9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf0dc70889701048b1b7ba3b96fa5aa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "c56d8289161a1b2e501ace042a7085f33bafd661", "commitAfterChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " synchronized String readDocumentName(int docNumber) throws IOException", "signatureAfterChange": " synchronized String readDocumentName(int docNumber) throws IOException", "diff": ["-\t\tDataInputStream stream = new DataInputStream(new BufferedInputStream(new FileInputStream(getIndexFile()), 2048));", "+\t\tboolean isLastChunk = chunkNumber == this.numberOfChunks - 1;", "+\t\tint start = this.chunkOffsets[chunkNumber];", "+\t\tint numberOfBytes = (isLastChunk ? this.startOfCategoryTables : this.chunkOffsets[chunkNumber + 1]) - start;", "+\t\tif (numberOfBytes < 0)", "+\t\t\tthrow new IllegalArgumentException();", "+\t\tbyte[] bytes = new byte[numberOfBytes];", "+\t\tFileInputStream file = new FileInputStream(getIndexFile());", "-\t\t\tstream.skip(this.chunkOffsets[chunkNumber]);", "-\t\t\tint size = chunkNumber == this.numberOfChunks - 1 ? this.sizeOfLastChunk : CHUNK_SIZE;", "-\t\t\tchunk = new String[size];", "-\t\t\treadChunk(chunk, stream, 0, size);", "+\t\t\tfile.skip(start);", "+\t\t\tif (file.read(bytes, 0, numberOfBytes) != numberOfBytes)", "+\t\t\t\tthrow new IOException();", "-\t\t\tstream.close();", "+\t\t\tfile.close();", "-\t\tthis.cachedChunks[chunkNumber] = chunk;", "+\t\tDataInputStream stream = new DataInputStream(new ByteArrayInputStream(bytes));", "+\t\tint numberOfNames = isLastChunk ? this.sizeOfLastChunk : CHUNK_SIZE;", "+\t\tchunk = this.cachedChunks[chunkNumber] = new String[numberOfNames];", "+\t\treadChunk(chunk, stream, 0, numberOfNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db1791087ebc82c76f442c75c68c01c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "203954a19427f44b197aa09593f6f49177e09606", "commitAfterChange": "3ed9acfe644f3aa92ee72abfaf147fb3ef3a87d3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected void consumeSingleStaticImportDeclarationName()", "signatureAfterChange": " protected void consumeSingleStaticImportDeclarationName()", "diff": ["-\t\trequestor.acceptTypeReference(impt.tokens, impt.sourceStart, impt.sourceEnd);", "+\t\t// Name for static import is TypeName '.' Identifier", "+\t\t// => accept unknown ref on identifier", "+\t\tint length = impt.tokens.length-1;", "+\t\tint start = (int) (impt.sourcePositions[length] >>> 32);", "+\t\trequestor.acceptUnknownReference(impt.tokens[length], start);", "+\t\t// accept type name", "+\t\tif (length > 0) {", "+\t\t\tchar[][] compoundName = new char[length][];", "+\t\t\tSystem.arraycopy(impt.tokens, 0, compoundName, 0, length);", "+\t\t\tint end = (int) impt.sourcePositions[length-1];", "+\t\t\trequestor.acceptTypeReference(compoundName, impt.sourceStart, end);", "+\t\t}"]}], "num": 23089}
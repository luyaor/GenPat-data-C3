{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "505649702362d017bc2fcde5eeb62bca", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2718695629873e76012c6090cda94f65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 176, "methodNumberAfterChange": 184, "signatureBeforeChange": "\t \t \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t", "+\t */", "-\t\tJavadoc x = ast.newJavadoc();", "+\t\tfinal Javadoc x = ast.newJavadoc();", "+\t\tassertTrue(!x.isBlockComment());", "+\t\tassertTrue(!x.isLineComment());", "+\t\tassertTrue(x.isDocComment());", "+\t\tassertTrue(x.fragments().isEmpty());", "+\t\tassertTrue(x.getAlternateRoot() == null);", "+\t\t", "+\t\ttAlternateRoot(x);", "+", "+\t\t// check that fragments() can handle TagElement", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, TagElement.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tTagElement result = targetAst.newTagElement();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode[] counterExamples(AST targetAst) {", "+\t\t\t\treturn new ASTNode[] {", "+\t\t\t\t\ttargetAst.newEmptyStatement(),", "+\t\t\t\t\ttargetAst.newCompilationUnit(),", "+\t\t\t\t\ttargetAst.newTypeDeclaration(),", "+\t\t\t\t\ttargetAst.newJavadoc(),", "+\t\t\t\t};", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle Name", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, Name.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle TextElement", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, TextElement.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tTextElement result = targetAst.newTextElement();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle MethodRef", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, MethodRef.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tMethodRef result = targetAst.newMethodRef();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle MemberRef", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, MemberRef.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tMemberRef result = targetAst.newMemberRef();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c4beb2fa1e3af53b28f6d91f55e92d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "dfc91d56806c456b9b3ccf18b7180e0ffe937730", "commitAfterChange": "b2cc128bda23f9f1345b0f7e7b16cc0855af3cea", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t\tassertTrue(x.fragments().isEmpty());", "+\t\tassertTrue(x.tags().isEmpty());", "-\t\t// check that fragments() can handle TagElement", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, TagElement.class) { //$NON-NLS-1$", "+\t\tgenericPropertyListTest(x, x.tags(),", "+\t\t  new Property(\"Tags\", true, TagElement.class) { //$NON-NLS-1$", "-\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t\tparent.tags().add(result);", "+\t\t\t\t\ttargetAst.newTextElement(),", "+\t\t\t\t\ttargetAst.newMethodRef()", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle Name", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle TextElement", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, TextElement.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tTextElement result = targetAst.newTextElement();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "-\t\t\t\t\tparent.fragments().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle MethodRef", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, MethodRef.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tMethodRef result = targetAst.newMethodRef();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "-\t\t\t\t\tparent.fragments().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle MemberRef", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, MemberRef.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tMemberRef result = targetAst.newMemberRef();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "-\t\t\t\t\tparent.fragments().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;"]}], "num": 28419}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fcdb32cc1f3b4f37c5fce5f949f7fa4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b5c5a2d026ce3a3df478b09b98bb902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "0fcefa7fbabab6abdc9873690eec58ebe54b0ec5", "commitAfterChange": "98fac88fd0da38b66efb43921b50db56cf129025", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected void pushText(int start, int end)", "signatureAfterChange": " \tprotected void pushText(int start, int end)", "diff": ["-\t\t// compiler does not matter of text", "+\t\tif (this.currentAstPtr != -2 && this.returnStatement != null) {", "+\t\t\tint position = this.index;", "+\t\t\tthis.index = start;", "+\t\t\tboolean empty = true;", "+\t\t\tboolean star = false;", "+\t\t\tchar ch = readChar();", "+\t\t\tif (Character.isWhitespace(ch) || start>(this.tagSourceEnd+1)) {", "+\t\t\t\twhile (this.index <= end && empty) {", "+\t\t\t\t\tif (!star) {", "+\t\t\t\t\t\tempty = Character.isWhitespace(ch) || ch == '*';", "+\t\t\t\t\t\tstar = ch == '*';", "+\t\t\t\t\t} else if (ch != '*') {", "+\t\t\t\t\t\tempty = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tch = readChar();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t((JavadocReturnStatement)this.returnStatement).empty = empty;", "+\t\t\tthis.index = position;", "+\t\t\tif (this.currentAstPtr != this.astPtr) {", "+\t\t\t\tthis.currentAstPtr = -2;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a86bd1aea540cf2917b6afcfee34bce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f88c1fe220ded26227925e3745e5515c08409c5d", "commitAfterChange": "8f896a654035e16596d9bc3a2404427ff7b3145b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "signatureAfterChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\tthis.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\t\tthis.findEnumConstantsFromSwithStatement(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\tif (this.expectedTypesPtr > -1) {", "+\t\t\t\t\tthis.assistNodeIsEnum = true;", "+\t\t\t\t\tdone : for (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\t\t\tif (!this.expectedTypes[i].isEnum()) {", "+\t\t\t\t\t\t\tthis.assistNodeIsEnum = false;", "+\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\t\t\tif (this.expectedTypesPtr > -1) {", "+\t\t\t\t\t\t\tthis.assistNodeIsEnum = true;", "+\t\t\t\t\t\t\tdone : for (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\t\t\t\t\tif (!this.expectedTypes[i].isEnum()) {", "+\t\t\t\t\t\t\t\t\tthis.assistNodeIsEnum = false;", "+\t\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a6861399b6804e6c88a55874dbebfe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "4633cdd34bc32c9ec930b454d5e4ef42024a77f4", "commitAfterChange": "aa223e9a2138470a8d88d3629dbe1cb95c932c69", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\t// Init", "-\t\t\tthis.index = javadocStart +3;", "-\t\t\tthis.endComment = javadocEnd - 2;", "+\t\t\t// Init scanner position", "+\t\t\tthis.scanner.resetTo(javadocStart, javadocEnd);", "+\t\t\tthis.endComment = javadocEnd;", "+\t\t\tthis.index = javadocStart;", "+\t\t\treadChar(); // starting '/'", "+\t\t\tint charPosition = this.index;", "+\t\t\treadChar(); // first '*'", "+\t\t\tchar nextCharacter= readChar(); // second '*'", "+\t\t\t", "+\t\t\t// Init local variables", "-\t\t\tthis.scanner.resetTo(this.index, this.endComment);", "-\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : javadocStart + 3;", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : javadocStart;", "-\t\t\tchar nextCharacter= 0, previousChar;", "-\t\t\tint charPosition = -1;", "+\t\t\tchar previousChar = 0;", "+\t\t\t", "+\t\t\t\tif (this.index >= this.endComment) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34c69f94624d49726a8ccbc038923a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object parseMember(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseMember(Object receiver) throws InvalidInputException", "diff": ["+\t\t\t// Look for next token to know whether it's a field or method reference", "+", "-\t\t\tif (this.currentTokenType != -1) {", "-\t\t\t\tthis.index = previousPosition;", "-\t\t\t\tthis.scanner.currentPosition = previousPosition;", "-\t\t\t\tthis.currentTokenType = -1;", "+\t\t\tthis.index = previousPosition;", "+\t\t\tthis.scanner.currentPosition = previousPosition;", "+\t\t\tthis.currentTokenType = -1;", "+", "+\t\t\t// Verify character(s) after identifier (expecting space or end comment)", "+\t\t\tif (!verifySpaceOrEndComment()) {", "+\t\t\t\tint end = this.starPosition == -1 ? this.lineEnd : this.starPosition;", "+\t\t\t\tif (this.source[end]=='\\n') end--;", "+\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, end);", "+\t\t\t\treturn null;", "-\t\tend = start > end ? getEndPosition() : end;", "+\t\tend = start > end ? start : end;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b4dfba235c13e54c8f3e859e5c3065", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "b6af6dcd9d59b97edc4052f4f7dbcdc0b2982ddb", "commitAfterChange": "9d7258bf3ad30f4e44cac31c46a6f0a185b84bcd", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": " public void inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation)", "signatureAfterChange": " public void inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation)", "diff": ["-\t\t\tif ((currentLabel.position == gotoLocation) && currentLabel.isStandardLabel()){", "-\t\t\t\tlabel.appendForwardReferencesFrom(currentLabel);", "-\t\t\t\t// we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame", "-\t\t\t\tif (removeFrame) {", "-\t\t\t\t\tcurrentLabel.tagBits &= ~BranchLabel.USED;", "-\t\t\t\t\tthis.removeStackFrameFor(gotoLocation);", "+\t\t\tif (currentLabel.position == gotoLocation) {", "+\t\t\t\tif (currentLabel.isStandardLabel()){", "+\t\t\t\t\tlabel.appendForwardReferencesFrom(currentLabel);", "+\t\t\t\t\t// we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame", "+\t\t\t\t\tif (removeFrame) {", "+\t\t\t\t\t\tcurrentLabel.tagBits &= ~BranchLabel.USED;", "+\t\t\t\t\t\tthis.removeStackFrameFor(gotoLocation);", "+\t\t\t\t\t}"]}], "num": 22607}
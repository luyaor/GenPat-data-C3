{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a93b037d57dc083b0485336b3bebb92", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27efacb552759b470e829812e9c267c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "69f6a2235aacdc96ab79c4302f999bc92e6b279c", "commitAfterChange": "18b917114e9a5d0d71e865ba767fb9329e2b629f", "methodNumberBeforeChange": 578, "methodNumberAfterChange": 578, "signatureBeforeChange": " \tpublic void _test574()", "signatureAfterChange": " \tpublic void test574()", "diff": ["-\tpublic void _test574() {", "+\tpublic void test574() {", "-\t\t\t\"complain about ambiguity\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\"\t           ^^^^^^^\\n\" + ", "+\t\t\t\"The type parameter T should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\"\t           ^^^^^^\\n\" + ", "+\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tnew X().new C2().foo((List<String>) null);\\n\" + ", "+\t\t\t\"\t                 ^^^\\n\" + ", "+\t\t\t\"The method foo(Object) is ambiguous for the type X.C2\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ab0c26badcb1033b26348b2e898a1b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "94e87775403a1be90933921189758fda2ba4fb6c", "commitAfterChange": "bd01e05f0477a2d168d72337205595e4fa08ba90", "methodNumberBeforeChange": 463, "methodNumberAfterChange": 463, "signatureBeforeChange": " \tpublic void _test459()", "signatureAfterChange": " \tpublic void test459()", "diff": ["-\tpublic void _test459() {", "+\tpublic void test459() {", "-\t\t\t\"should be 2 unchecked warnings?\"", "-\t\t);", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\treturn m_manager.getById(getClass(), new Integer(1));\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation getById(Class<capture-of ? extends Test>, Integer) of the generic method getById(Class<T>, Integer) of type Test.Manager<C>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\treturn m_manager.getById(getClass(), new Integer(1));\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type capture-of ? extends Test needs unchecked conversion to conform to ITest<C>\\n\" + ", "+\t\t\t\"----------\\n\"\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53354d33e40baa7d2eb4abd8716f9ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 1112, "methodNumberAfterChange": 1112, "signatureBeforeChange": " public void _test1084()", "signatureAfterChange": " public void test1084()", "diff": ["-public void _test1084() {", "+public void test1084() {", "-\t\t\"ERR\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tZ<Y> l2 = (Z<Y>) l1;\\n\" + ", "+\t\t\"\t  ^\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tZ<Y> l2 = (Z<Y>) l1;\\n\" + ", "+\t\t\"\t          ^^^^^^^^^\\n\" + ", "+\t\t\"Cannot cast from Z<Y<?>> to Z<Y>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tZ<Y> l2 = (Z<Y>) l1;\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57d6b82bc7b92f42f6ee528ca570b13a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 575, "methodNumberAfterChange": 575, "signatureBeforeChange": " \tpublic void _test573()", "signatureAfterChange": " \tpublic void test573()", "diff": ["-\tpublic void _test573() {", "+\tpublic void test573() {", "-\t\t\t\"\");\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tdoWithEnumClass((Class<Enum>) cl);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation doWithEnumClass(Class<Enum>) of the generic method doWithEnumClass(Class<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tdoWithEnumClass((Class<Enum>) cl);\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class<capture-of ?> to Class<Enum> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f403010a2aaee392acbb6fe00028d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "cbb80b4c969d064367ed598ba99f074660c726c6", "commitAfterChange": "48bf00145f70fca24101eaac33adc5d495f9e595", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void _test428177()", "signatureAfterChange": " public void test428177()", "diff": ["-public void _test428177() {", "+public void test428177() {", "-\t\t\"valid error messages go here - some are expected since javac also complains\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\twithoutWildcard(stream); // ERROR\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#10-of ? extends String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 36)\\n\" + ", "+\t\t\"\tif(\\\"1\\\" == \\\"\\\") { return stream.collect(Collectors.toList()).stream(); // ERROR\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Stream<capture#14-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 38)\\n\" + ", "+\t\t\"\treturn stream.collect(Collectors.toList()); // NO ERROR\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#16-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd9f6635270077e65556275b569bcd09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c5f04dedcf71d7916ac9796a0679367263a828a6", "commitAfterChange": "4d0380dc7539f1f7ccfcfa17696618c7e27e0f4d", "methodNumberBeforeChange": 319, "methodNumberAfterChange": 319, "signatureBeforeChange": " \tpublic void _test317()", "signatureAfterChange": "\t \tpublic void test317()", "diff": ["-\t// TODO (philippe) reenable once fixed", "-\tpublic void _test317() {", "+\tpublic void test317() {", "-\t\t\t\"E is raw indirectly, since #add method belong to raw inherited type\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\txe.element().add(this);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method add(Object) belongs to the raw type List. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\txe.element().add(this);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method add(Object) belongs to the raw type List. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\"\t);"]}], "num": 58504}
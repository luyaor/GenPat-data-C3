{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01c748dc51b078734c695dbda1f31b75", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47ab23717549f516c21ec379b671aedf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "b5db65bfc72bbc853a6a1cc971b563564ea182d8", "commitAfterChange": "fb62d92df142d800644832b635deda5c46e40e3e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-\tint length = this.superSimpleName == null ? 0 : this.superSimpleName.length;", "+\tchar[] name = this.superSimpleName;", "+\tint length = name == null ? 0 : name.length;", "-\t\tif (simpleName != null) {", "+\t\tif (name != null) {", "-\t\t\t\tif (word[j + slash] != this.superSimpleName[j]) continue nextEntry;", "+\t\t\t\tif (word[j + slash] != name[j]) continue nextEntry;", "-\t\tif (isMatchingIndexRecord()) {", "-\t\t\tint[] references = entry.getFileReferences();", "-\t\t\tfor (int iReference = 0, refererencesLength = references.length; iReference < refererencesLength; iReference++) {", "-\t\t\t\tString documentPath = IndexedFile.convertPath( input.getIndexedFile(references[iReference]).getPath());", "-\t\t\t\tif (scope.encloses(documentPath)) {", "-\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, record, participant)) ", "-\t\t\t\t\t\tthrow new OperationCanceledException();", "-\t\t\t\t}", "+", "+\t\tint[] references = entry.getFileReferences();", "+\t\tfor (int iReference = 0, refererencesLength = references.length; iReference < refererencesLength; iReference++) {", "+\t\t\tString documentPath = IndexedFile.convertPath( input.getIndexedFile(references[iReference]).getPath());", "+\t\t\tif (scope.encloses(documentPath)) {", "+\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, record, participant)) ", "+\t\t\t\t\tthrow new OperationCanceledException();", "-\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a43cb1ca550b3bfdda38058ea4651095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " protected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "diff": ["-public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "+protected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException {", "+\tSearchPattern indexRecord = null;", "-\t\tIEntryResult[] entries = input.queryEntriesPrefixedBy(indexEntryPrefix());", "+\t\tqueryKey = encodeIndexKey();", "+\t\tchar[] pattern = CharOperation.concat(category, queryKey);", "+\t\tIEntryResult[] entries = input.queryEntries(pattern, SearchPattern.R_PREFIX_MATCH);", "-\t\t\tdecodeIndexEntry(entry);", "-\t\t\tif (matchIndexEntry()) {", "+\t\t\tchar[] word = entry.getWord();", "+\t\t\tchar[] indexKey = CharOperation.subarray(word, category.length, word.length);", "+\t\t\tindexRecord = getIndexRecord();", "+\t\t\tindexRecord.decodeIndexKey(indexKey);", "+\t\t\tif (isMatchingIndexRecord()) {", "-\t\tthis.feedIndexRequestor(requestor, refs, input, scope);", "+\t\tfor (int i = 0; i < refsLength; i++) { // TODO (jerome) merge with previous loop", "+\t\t\tint reference = refs[i];", "+\t\t\tif (reference != -1) { // if the reference has not been eliminated", "+\t\t\t\tIndexedFile file = input.getIndexedFile(reference);", "+\t\t\t\tif (file != null) {", "+\t\t\t\t\tString documentPath = IndexedFile.convertPath(file.getPath());", "+\t\t\t\t\tif (scope.encloses(documentPath)) {", "+\t\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, indexRecord, participant)) ", "+\t\t\t\t\t\t\tthrow new OperationCanceledException();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a55be56a9c0569428ebd9e8d8731dda5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "+public void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\t\tsuper.findIndexMatches(input, requestor, progressMonitor, scope);\t", "+\t\tsuper.findIndexMatches(input, requestor, participant, scope, progressMonitor);\t", "-\tchar[] simpleName = this.superSimpleName;", "-\tint length = simpleName == null ? 0 : simpleName.length;", "+\tint length = this.superSimpleName == null ? 0 : this.superSimpleName.length;", "-\t\t\t\tif (word[j + slash] != simpleName[j]) continue nextEntry;", "+\t\t\t\tif (word[j + slash] != this.superSimpleName[j]) continue nextEntry;", "-\t\tdecodeIndexEntry(entry);", "-\t\tfeedIndexRequestor(requestor, entry.getFileReferences(), input, scope);", "+\t\tchar[] word = entry.getWord();", "+\t\tchar[] indexKey = CharOperation.subarray(word, SUPER_REF.length, word.length);", "+\t\tSearchPattern record = getIndexRecord();", "+\t\trecord.decodeIndexKey(indexKey);", "+\t\tif (isMatchingIndexRecord()) {", "+\t\t\tint[] references = entry.getFileReferences();", "+\t\t\tfor (int iReference = 0, refererencesLength = references.length; iReference < refererencesLength; iReference++) {", "+\t\t\t\tString documentPath = IndexedFile.convertPath( input.getIndexedFile(references[iReference]).getPath());", "+\t\t\t\tif (scope.encloses(documentPath)) {", "+\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, record, participant)) ", "+\t\t\t\t\t\tthrow new OperationCanceledException();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t}"]}], "num": 48075}
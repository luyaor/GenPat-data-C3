{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60c6f744357a83e672308664576da6fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a1508f69b1e4e8ccb0751b78a924cf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "bd80f54d2bce372d0cb569282d8bd3ac7581ecf9", "commitAfterChange": "b8aa3311452be518b7f96e1cdb47c5f16b1e4cf4", "methodNumberBeforeChange": 304, "methodNumberAfterChange": 305, "signatureBeforeChange": " protected void consumeReferenceExpressionTypeForm(boolean qualified)", "signatureAfterChange": " protected void consumeReferenceExpressionTypeForm(boolean qualified)", "diff": ["-\t// ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '.' ClassOrInterfaceType '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '.' ClassOrInterfaceType Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "-", "+\tint dims = this.intStack[this.intPtr--];", "-\t\tParameterizedQualifiedTypeReference qualifiedParameterizedTypeReference = computeQualifiedGenericsFromRightSide(rightSide, 0);", "+\t\tParameterizedQualifiedTypeReference qualifiedParameterizedTypeReference = computeQualifiedGenericsFromRightSide(rightSide, dims);", "-\t\ttype = getTypeReference(0);", "+\t\ttype = getTypeReference(dims);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93fbf4f59a852e4d06490c2d7970dcfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "bd80f54d2bce372d0cb569282d8bd3ac7581ecf9", "commitAfterChange": "b8aa3311452be518b7f96e1cdb47c5f16b1e4cf4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " private final boolean atReferenceExpression()", "signatureAfterChange": " private final boolean atReferenceExpression()", "diff": ["-\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '.' ClassOrInterfaceType '::' NonWildTypeArgumentsopt IdentifierOrNew ", "+\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '.' ClassOrInterfaceType Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t   ", "+\t    Note: At this point, we don't handle annotations on dimensions, I think it is illegal, but needs to be verified.", "+\t\t\t\t\tcase '[' :", "+\t\t\t\t\tcase ']' :", "+\t\t\t\t\t\tbreak NextToken; // good enough for now."]}], "num": 623}
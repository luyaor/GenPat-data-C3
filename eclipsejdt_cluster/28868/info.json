{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2049efdcaf891a0eb107f46233478f0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20d70b80576cfe7e828b3264d4126e14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "0d7bf900fea9cd1a54f008e97901ffa79f4d92cb", "commitAfterChange": "2e810cf626465e41259becd7125dd36c56f25bba", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-        String memoryParameterPrefix = JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_1) ? \"-J-\" : \"-J-X\";//$NON-NLS-1$//$NON-NLS-2$", "+        final String javaVersion = JavaEnvUtils.getJavaVersion();", "+\t\tString memoryParameterPrefix = javaVersion.equals(JavaEnvUtils.JAVA_1_1) ? \"-J-\" : \"-J-X\";//$NON-NLS-1$//$NON-NLS-2$", "-\t\t * target option.", "-\t\t */\t\t", "-\t\tif (this.target != null) {", "-\t\t\tif (this.target.equals(\"1.1\")) { //$NON-NLS-1$", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "-\t\t\t} else if (this.target.equals(\"1.2\")) { //$NON-NLS-1$", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t\t} else if (this.target.equals(\"1.3\")) { //$NON-NLS-1$", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "-\t\t\t} else if (this.target.equals(\"1.4\")) { //$NON-NLS-1$", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t} else if (this.target.equals(\"1.5\")) { //$NON-NLS-1$", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\t} else {", "-\t            this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.unknownTarget\", this.target), Project.MSG_WARN); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-", "-\t\t/*", "+\t\t * target option.", "+\t\t */", "+\t\tboolean didSpecifyTarget = false;", "+\t\tif (this.target != null) {", "+\t\t\tdidSpecifyTarget = true;", "+\t\t\tif (this.target.equals(CompilerOptions.VERSION_1_1)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_2)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "+\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t} else {", "+\t            this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.unknownTarget\", this.target), Project.MSG_WARN); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+", "+\t\t/*", "+\t\tboolean didSpecifySource = false;", "-        \tif (source.equals(\"1.3\")) { //$NON-NLS-1$", "+        \tdidSpecifySource = true;", "+        \tif (source.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t} else if (source.equals(\"1.4\")) { //$NON-NLS-1$", "+\t\t\t} else if (source.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t} else if (source.equals(\"1.5\")) { //$NON-NLS-1$", "+\t\t\t} else if (source.equals(CompilerOptions.VERSION_1_5)) {", "-\t\tif (JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_0)", "-\t\t\t\t|| JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_1)", "-\t\t\t\t|| JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_2)", "-\t\t\t\t|| JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_3)) {", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-\t\t} else if (JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_4)) {", "-\t\t\tif (this.target != null && this.target.equals(\"1.1\")) {\t\t\t   //$NON-NLS-1$\t", "+        if (!didSpecifySource && !didSpecifyTarget) {", "+\t\t\tif (javaVersion.equals(JavaEnvUtils.JAVA_1_0)", "+\t\t\t\t\t|| javaVersion.equals(JavaEnvUtils.JAVA_1_1)", "+\t\t\t\t\t|| javaVersion.equals(JavaEnvUtils.JAVA_1_2)", "+\t\t\t\t\t|| javaVersion.equals(JavaEnvUtils.JAVA_1_3)) {", "+\t\t\t} else if (javaVersion.equals(JavaEnvUtils.JAVA_1_4)) {", "+\t\t\t\tif (this.target != null) {", "+\t\t\t\t\tif (this.target.equals(CompilerOptions.VERSION_1_1)) {", "+\t\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\t} else if (this.target.equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\t}", "+\t\t\t} else if (javaVersion.equals(JavaEnvUtils.JAVA_1_5)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t            this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.unknownVmVersion\", javaVersion), Project.MSG_WARN); //$NON-NLS-1$", "-\t\t} else if (JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_5)) {", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t} else {", "-            this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.unknownVmVersion\", JavaEnvUtils.getJavaVersion()), Project.MSG_WARN); //$NON-NLS-1$", "-\t\t}", "+        } else {", "+        \t// set the compliance according to the target and source", "+        \tif (CompilerOptions.VERSION_1_3.equals(source)) {", "+        \t\tif (CompilerOptions.versionToJdkLevel(javaVersion) <= ClassFileConstants.JDK1_3) {", "+    \t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "+        \t\t} else {", "+        \t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+        \t\t}", "+        \t} else if (CompilerOptions.VERSION_1_4.equals(source)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(source)) {", "+\t\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t}", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3687ea53638720c24f0bfee81e8767f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d3cff56673f668a24b7a089481a06ee187a0d439", "commitAfterChange": "d66f0d9453fe54b1298b6b9b5dd08d701a80294d", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 198, "signatureBeforeChange": " public void unusedPrivateMethod(AbstractMethodDeclaration methodDecl)", "signatureAfterChange": " public void unusedPrivateMethod(AbstractMethodDeclaration methodDecl)", "diff": ["+", "+\tif (computeSeverity(IProblem.UnusedPrivateMethod) == Ignore) return;", "+\t", "+\t// no report for serialization support 'void readObject(ObjectInputStream)'", "+\tif (!method.isStatic()", "+\t\t\t&& TypeBinding.VoidBinding == method.returnType", "+\t\t\t&& method.parameters.length == 1", "+\t\t\t&& method.parameters[0].dimensions() == 0", "+\t\t\t&& CharOperation.equals(method.selector, TypeConstants.READOBJECT)", "+\t\t\t&& CharOperation.equals(TypeConstants.CharArray_JAVA_IO_OBJECTINPUTSTREAM, method.parameters[0].readableName())) {", "+\t\treturn;", "+\t}", "+\t// no report for serialization support 'void writeObject(ObjectOutputStream)'", "+\tif (!method.isStatic()", "+\t\t\t&& TypeBinding.VoidBinding == method.returnType", "+\t\t\t&& method.parameters.length == 1", "+\t\t\t&& method.parameters[0].dimensions() == 0", "+\t\t\t&& CharOperation.equals(method.selector, TypeConstants.WRITEOBJECT)", "+\t\t\t&& CharOperation.equals(TypeConstants.CharArray_JAVA_IO_OBJECTOUTPUTSTREAM, method.parameters[0].readableName())) {", "+\t\treturn;", "+\t}", "+\t// no report for serialization support 'Object readResolve()'", "+\tif (!method.isStatic()", "+\t\t\t&& TypeBinding.T_Object == method.returnType.id", "+\t\t\t&& method.parameters.length == 0", "+\t\t\t&& CharOperation.equals(method.selector, TypeConstants.READRESOLVE)) {", "+\t\treturn;", "+\t}", "+\t// no report for serialization support 'Object writeReplace()'", "+\tif (!method.isStatic()", "+\t\t\t&& TypeBinding.T_Object == method.returnType.id", "+\t\t\t&& method.parameters.length == 0", "+\t\t\t&& CharOperation.equals(method.selector, TypeConstants.WRITEREPLACE)) {", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b82ea031bbd31a3a12b7308470a5956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "c1cf01c530411de2efbd387e25a51a976ee057a9", "commitAfterChange": "d4fb0fb51b1c723a05d230645f038ab08aa3a386", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\t\tInferenceContext18.missingImplementation(\"NYI: inexact method reference\"); //$NON-NLS-1$", "-\t\t\t// FIXME: Otherwise, a search for a compile-time declaration is performed, as defined in 15.28.1 .....", "+\t\t\t// Otherwise, a search for a compile-time declaration is performed, as defined in 15.28.1....", "+\t\t\treference.resolveTypeExpecting(reference.enclosingScope, t);", "+\t\t\tMethodBinding compileTimeDecl = reference.binding;", "+\t\t\tif (compileTimeDecl == null || !compileTimeDecl.isValidBinding())", "+\t\t\t\treturn FALSE;", "+\t\t\tTypeBinding r = functionType.isConstructor() ? functionType.declaringClass : functionType.returnType;", "+\t\t\tif (r.id == TypeIds.T_void)", "+\t\t\t\treturn TRUE;", "+\t\t\t// ignore parameterization of resolve result and do a fresh start:", "+\t\t\tMethodBinding original = compileTimeDecl.original();", "+\t\t\tif (reference.typeArguments == null", "+\t\t\t\t\t&& ((original.typeVariables() != Binding.NO_TYPE_VARIABLES && r.mentionsAny(original.typeVariables(), -1))", "+\t\t\t\t\t\t|| (original.isConstructor() && original.declaringClass.typeVariables() != Binding.NO_TYPE_VARIABLES && r.mentionsAny(original.declaringClass.typeVariables(), -1)))) ", "+\t\t\t{", "+\t\t\t\tInvocationRecord prevInvocation = inferenceContext.enterPolyInvocation(reference, null/*no invocation arguments available*/);", "+", "+\t\t\t\t// Invocation Applicability Inference: 18.5.1 & Invocation Type Inference: 18.5.2", "+\t\t\t\ttry {", "+\t\t\t\t\tinferInvocationApplicability(inferenceContext, original, functionType.parameters, original.isConstructor()/*mimic a diamond?*/, inferenceContext.inferenceKind);", "+\t\t\t\t\tif (!inferPolyInvocationType(inferenceContext, reference, r, original))", "+\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t\treturn null; // already incorporated", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\treturn FALSE;", "+\t\t\t\t} finally {", "+\t\t\t\t\tinferenceContext.leavePolyInvocation(prevInvocation);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tTypeBinding rPrime = compileTimeDecl.isConstructor() ? compileTimeDecl.declaringClass : compileTimeDecl.returnType;", "+\t\t\tif (rPrime.id == TypeIds.T_void)", "+\t\t\t\treturn FALSE;", "+\t\t\treturn new ConstraintTypeFormula(rPrime, r, COMPATIBLE, this.isSoft);", "-\t\treturn FALSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92cedd50a9a7547498894090f85b61ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "00dc28bfbd5543ecda292c71af53f42c5ae58dee", "commitAfterChange": "d3244b9b1f07dec23fc8a11bdb05cd710c7b96c6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "-\t\t\t\t// reset all warnings", "-\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "+\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedLocal, ", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put( ", "+\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedImport,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNoEffectAssignment,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "+\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "+\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportSpecialParameterHidingField,", "+\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "+\t\t\t\t\t\"\"); //$NON-NLS-1$", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f91bade4aba837c580471b6126f6a9ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \t\r protected Main(PrintWriter writer, boolean systemExitWhenFinished)", "signatureAfterChange": "\r \t\r protected Main(PrintWriter writer, boolean systemExitWhenFinished)", "diff": ["-\toptions = Compiler.getDefaultOptions(Locale.getDefault());\r", "+\toptions = new Hashtable();\r", "+\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\toptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);\r", "+\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "+\toptions.put(CompilerOptions.OPTION_ReportUnreachableCode, CompilerOptions.ERROR);\r", "+\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.ERROR);\r", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);\r", "+\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);\r", "+\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "+\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);\r", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);\r", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);\r", "+\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);\r", "+\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE);\r", "+\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE);\r", "+\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r"]}], "num": 28868}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ab37cf4169f389d84d7745e46072abb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d34fb1cf188904e616845613246992f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " public void collectSubstitutes(Scope currentScope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-public void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "-\tif (otherType instanceof ReferenceBinding) {", "-\t\tTypeVariableBinding[] variables = this.typeVariables;", "-\t\tif (variables == NoTypeVariables) return;", "-\t\t// generic type is acting as parameterized type with its own parameters as arguments", "-\t\t", "-\t\t// allow List<T> to match with LinkedList<String>", "-\t\tReferenceBinding equivalent = this;", "-        ReferenceBinding otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeErasingTo(this);", "-        if (otherEquivalent == null) {", "-        \t// allow LinkedList<String> to match List<T> (downcast scenario)", "-\t    \tequivalent = this.findSuperTypeErasingTo((ReferenceBinding)otherType.erasure());", "-        \tif (equivalent == null) return;", "-        \totherEquivalent = (ReferenceBinding)otherType;", "-        }", "-        TypeBinding[] elements;", "-        switch (equivalent.kind()) {", "-        \tcase Binding.GENERIC_TYPE :", "-        \t\telements = equivalent.typeVariables();", "-        \t\tbreak;", "-        \tcase Binding.PARAMETERIZED_TYPE :", "-        \t\telements = ((ParameterizedTypeBinding)equivalent).arguments;", "-        \t\tbreak;", "-        \tdefault :", "-        \t\treturn;", "-        }", "-        TypeBinding[] otherElements;", "-        switch (otherEquivalent.kind()) {", "-        \tcase Binding.GENERIC_TYPE :", "-        \t\totherElements = otherEquivalent.typeVariables();", "-        \t\tbreak;", "-        \tcase Binding.PARAMETERIZED_TYPE :", "-        \t\totherElements = ((ParameterizedTypeBinding)otherEquivalent).arguments;", "-        \t\tbreak;", "-        \tcase Binding.RAW_TYPE :", "-        \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "-        \t\treturn;", "-        \tdefault :", "-        \t\treturn;", "-        }", "-        for (int i = 0, length = elements.length; i < length; i++) {", "-            elements[i].collectSubstitutes(otherElements[i], substitutes);", "-        }", "+public void collectSubstitutes(Scope currentScope, TypeBinding otherType, Map substitutes, int constraint) {", "+\t", "+\tif (otherType == NullBinding) return;", "+\tif (!(otherType instanceof ReferenceBinding)) return;", "+\tTypeVariableBinding[] variables = this.typeVariables;", "+\tif (variables == NoTypeVariables) return;", "+\t// generic type is acting as parameterized type with its own parameters as arguments", "+\t", "+\tReferenceBinding equivalent, otherEquivalent;", "+\tswitch (constraint) {", "+\t\tcase CONSTRAINT_EQUAL :", "+\t\tcase CONSTRAINT_EXTENDS :", "+\t\t\tequivalent = this;", "+\t        otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeErasingTo(this);", "+\t        if (otherEquivalent == null) return;", "+\t        break;", "+\t\tcase CONSTRAINT_SUPER :", "+        default:", "+\t        equivalent = this.findSuperTypeErasingTo((ReferenceBinding)(otherType.erasure()));", "+\t        if (equivalent == null) return;", "+\t        otherEquivalent = (ReferenceBinding) otherType;", "+\t        break;", "+\t}", "+    TypeBinding[] elements;", "+    switch (equivalent.kind()) {", "+    \tcase Binding.GENERIC_TYPE :", "+    \t\telements = equivalent.typeVariables();", "+    \t\tbreak;", "+    \tcase Binding.PARAMETERIZED_TYPE :", "+    \t\telements = ((ParameterizedTypeBinding)equivalent).arguments;", "+    \t\tbreak;", "+    \tcase Binding.RAW_TYPE :", "+    \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "+    \tdefault :", "+    \t\treturn;", "+    }", "+    TypeBinding[] otherElements;", "+    switch (otherEquivalent.kind()) {", "+    \tcase Binding.GENERIC_TYPE :", "+    \t\totherElements = otherEquivalent.typeVariables();", "+    \t\tbreak;", "+    \tcase Binding.PARAMETERIZED_TYPE :", "+    \t\totherElements = ((ParameterizedTypeBinding)otherEquivalent).arguments;", "+    \t\tbreak;", "+    \tcase Binding.RAW_TYPE :", "+    \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "+    \t\treturn;", "+    \tdefault :", "+    \t\treturn;", "+    }", "+    for (int i = 0, length = elements.length; i < length; i++) {", "+    \tTypeBinding otherElement = otherElements[i];", "+        elements[i].collectSubstitutes(scope, otherElements[i], substitutes, otherElement.isWildcard() ? constraint : CONSTRAINT_EQUAL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fffe07215be17be23bdc8ab0d4f533b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\t\t", "+\t\tif ((this.tagBits & TagBits.HasTypeVariable) == 0) return;", "+\t\tif (otherType == NullBinding) return;", "+\t", "-\t\tif (otherType instanceof ReferenceBinding) {", "-\t\t\t// allow List<T> to match with LinkedList<String>", "-\t\t\tReferenceBinding equivalent = this;", "-\t        ReferenceBinding otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeErasingTo((ReferenceBinding)this.type.erasure());", "-\t        if (otherEquivalent == null) {", "-\t        \t// allow LinkedList<String> to match List<T> (downcast scenario)", "-\t\t    \tequivalent = this.findSuperTypeErasingTo((ReferenceBinding)otherType.erasure());", "-\t        \tif (equivalent == null) return;", "-\t        \totherEquivalent = (ReferenceBinding)otherType;", "-\t        }", "-\t        TypeBinding[] elements;", "-\t        switch (equivalent.kind()) {", "-\t        \tcase Binding.GENERIC_TYPE :", "-\t        \t\telements = equivalent.typeVariables();", "-\t        \t\tbreak;", "-\t        \tcase Binding.PARAMETERIZED_TYPE :", "-\t        \t\telements = ((ParameterizedTypeBinding)equivalent).arguments;", "-\t        \t\tbreak;", "-\t        \tdefault :", "-\t        \t\treturn;", "-\t        }", "-\t        TypeBinding[] otherElements;", "-\t        switch (otherEquivalent.kind()) {", "-\t        \tcase Binding.GENERIC_TYPE :", "-\t        \t\totherElements = otherEquivalent.typeVariables();", "-\t        \t\tbreak;", "-\t        \tcase Binding.PARAMETERIZED_TYPE :", "-\t        \t\totherElements = ((ParameterizedTypeBinding)otherEquivalent).arguments;", "-\t        \t\tbreak;", "-\t        \tcase Binding.RAW_TYPE :", "-\t        \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "-\t        \t\treturn;", "-\t        \tdefault :", "-\t        \t\treturn;", "-\t        }", "-            for (int i = 0, length = elements.length; i < length; i++) {", "-                elements[i].collectSubstitutes(otherElements[i], substitutes);", "-\t        }", "-\t    }", "+\t\tif (!(otherType instanceof ReferenceBinding)) return;", "+\t\tReferenceBinding equivalent, otherEquivalent;", "+\t\tswitch (constraint) {", "+\t\t\tcase CONSTRAINT_EQUAL :", "+\t\t\tcase CONSTRAINT_EXTENDS :", "+\t\t\t\tequivalent = this;", "+\t\t        otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeErasingTo((ReferenceBinding)this.type.erasure());", "+\t\t        if (otherEquivalent == null) return;", "+\t\t        break;", "+\t\t\tcase CONSTRAINT_SUPER :", "+\t        default:", "+\t\t        equivalent = this.findSuperTypeErasingTo((ReferenceBinding)(otherType.erasure()));", "+\t\t        if (equivalent == null) return;", "+\t\t        otherEquivalent = (ReferenceBinding) otherType;", "+\t\t        break;", "+\t\t}", "+        TypeBinding[] elements;", "+        switch (equivalent.kind()) {", "+        \tcase Binding.GENERIC_TYPE :", "+        \t\telements = equivalent.typeVariables();", "+        \t\tbreak;", "+        \tcase Binding.PARAMETERIZED_TYPE :", "+        \t\telements = ((ParameterizedTypeBinding)equivalent).arguments;", "+        \t\tbreak;", "+        \tcase Binding.RAW_TYPE :", "+        \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "+        \t\treturn;", "+        \tdefault :", "+        \t\treturn;", "+        }", "+        TypeBinding[] otherElements;", "+        switch (otherEquivalent.kind()) {", "+        \tcase Binding.GENERIC_TYPE :", "+        \t\totherElements = otherEquivalent.typeVariables();", "+        \t\tbreak;", "+        \tcase Binding.PARAMETERIZED_TYPE :", "+        \t\totherElements = ((ParameterizedTypeBinding)otherEquivalent).arguments;", "+        \t\tbreak;", "+        \tcase Binding.RAW_TYPE :", "+        \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "+        \t\treturn;", "+        \tdefault :", "+        \t\treturn;", "+        }", "+        for (int i = 0, length = elements.length; i < length; i++) {", "+        \tTypeBinding element = elements[i];", "+            element.collectSubstitutes(scope, otherElements[i], substitutes, element.isWildcard() ? constraint : CONSTRAINT_EQUAL);", "+        }"]}], "num": 45138}
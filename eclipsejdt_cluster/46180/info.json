{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fce6b8e4d89799021f4a4b1965c515f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b199f60d916634cf3faff1bec738062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d9946aa08d332f21913babd60933e773f1cec911", "commitAfterChange": "0ea299ebf767a99b8c60a0e465d456db5539b922", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": "\r protected void consumeStatementIfWithElse()", "signatureAfterChange": "\r protected void consumeStatementIfWithElse()", "diff": ["-\t\tastStack[--astPtr] = \r", "-\t\t\tnew IfStatement(\r", "-\t\t\t\texpressionStack[expressionPtr--], \r", "-\t\t\t\t(Statement) astStack[astPtr], \r", "-\t\t\t\t(Statement) astStack[astPtr + 1], \r", "-\t\t\t\tintStack[intPtr--], \r", "-\t\t\t\tendStatementPosition); \r", "+\t\tStatement elseStatement = (Statement) astStack[astPtr];\r", "+\t\tif (elseStatement instanceof Block) {\r", "+\t\t\tastStack[--astPtr] = \r", "+\t\t\t\tnew IfStatement(\r", "+\t\t\t\t\texpressionStack[expressionPtr--], \r", "+\t\t\t\t\t(Statement) astStack[astPtr], \r", "+\t\t\t\t\telseStatement, \r", "+\t\t\t\t\tintStack[intPtr--], \r", "+\t\t\t\t\tendStatementPosition); \r", "+\t\t} else {\r", "+\t\t\tastStack[--astPtr] = \r", "+\t\t\t\tnew IfStatement(\r", "+\t\t\t\t\texpressionStack[expressionPtr--], \r", "+\t\t\t\t\t(Statement) astStack[astPtr], \r", "+\t\t\t\t\telseStatement, \r", "+\t\t\t\t\tintStack[intPtr--], \r", "+\t\t\t\t\tendPosition); \r", "+\t\t}\r", "-\t\tpushOnAstStack(new IfStatement(expressionStack[expressionPtr--],\r", "-\t\t(lengthT == 0) ? Block.None : (Statement) astStack[astPtr--], \r", "-\t\t\t(lengthE == 0) ? Block.None : (Statement) astStack[astPtr--], \r", "-\t\t\tintStack[intPtr--], \r", "-\t\t\tendStatementPosition)); \r", "+\t\tStatement thenStatement = (lengthT == 0) ? Block.None : (Statement) astStack[astPtr--];\r", "+\t\tStatement elseStatement = (lengthE == 0) ? Block.None : (Statement) astStack[astPtr--];\r", "+\t\tif (elseStatement instanceof Block) {\r", "+\t\t\tpushOnAstStack(\r", "+\t\t\t\tnew IfStatement(\r", "+\t\t\t\t\texpressionStack[expressionPtr--],\r", "+\t\t\t\t\tthenStatement,\r", "+\t\t\t\t\telseStatement,\r", "+\t\t\t\t\tintStack[intPtr--],\r", "+\t\t\t\t\tendStatementPosition));\t\r", "+\t\t} else {\r", "+\t\t\tpushOnAstStack(\r", "+\t\t\t\tnew IfStatement(\r", "+\t\t\t\t\texpressionStack[expressionPtr--],\r", "+\t\t\t\t\tthenStatement,\r", "+\t\t\t\t\telseStatement,\r", "+\t\t\t\t\tintStack[intPtr--],\r", "+\t\t\t\t\tendPosition));\t\r", "+\t\t}\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c639b2d636ad26e33c88214b96f0c14c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3993129c9cc3c526d942f2fbc0cfa76b24291a94", "commitAfterChange": "130a55997b08af356a22f13721ef702eb35b7557", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": "\r protected void consumeStatementIfWithElse()", "signatureAfterChange": "\r protected void consumeStatementIfWithElse()", "diff": ["+\tlengthT = astLengthStack[astLengthPtr];\r", "-\tif (((lengthT = astLengthStack[astLengthPtr]) != 0) && (lengthE != 0)) {\r", "-\t\texpressionLengthPtr--;\r", "-\t\t//optimize the push/pop\r", "-\t\tStatement elseStatement = (Statement) astStack[astPtr];\r", "-\t\tif (elseStatement instanceof Block) {\r", "-\t\t\tastStack[--astPtr] = \r", "-\t\t\t\tnew IfStatement(\r", "-\t\t\t\t\texpressionStack[expressionPtr--], \r", "-\t\t\t\t\t(Statement) astStack[astPtr], \r", "-\t\t\t\t\telseStatement, \r", "-\t\t\t\t\tintStack[intPtr--], \r", "-\t\t\t\t\tendStatementPosition); \r", "-\t\t} else {\r", "-\t\t\tastStack[--astPtr] = \r", "-\t\t\t\tnew IfStatement(\r", "-\t\t\t\t\texpressionStack[expressionPtr--], \r", "-\t\t\t\t\t(Statement) astStack[astPtr], \r", "-\t\t\t\t\telseStatement, \r", "-\t\t\t\t\tintStack[intPtr--], \r", "-\t\t\t\t\tendPosition); \r", "-\t\t}\r", "+\texpressionLengthPtr--;\r", "+\t//optimize the push/pop\r", "+\tStatement elseStatement = (Statement) astStack[astPtr--];\r", "+\tStatement thenStatement = (Statement) astStack[astPtr];\r", "+\tif (elseStatement instanceof EmptyStatement) {\r", "+\t\telseStatement = Block.None;\r", "+\t}\r", "+\tif (thenStatement instanceof EmptyStatement) {\r", "+\t\tthenStatement = Block.None;\r", "+\t}\r", "+\tif (elseStatement instanceof Block) {\r", "+\t\tastStack[astPtr] = \r", "+\t\t\tnew IfStatement(\r", "+\t\t\t\texpressionStack[expressionPtr--], \r", "+\t\t\t\tthenStatement, \r", "+\t\t\t\telseStatement, \r", "+\t\t\t\tintStack[intPtr--], \r", "+\t\t\t\tendStatementPosition); \r", "-\t\tastLengthPtr--; //second decrement\r", "-\t\texpressionLengthPtr--;\r", "-\t\t//here only one of lengthE/T can be different 0\r", "-\t\tStatement thenStatement = (lengthT == 0) ? Block.None : (Statement) astStack[astPtr--];\r", "-\t\tStatement elseStatement = (lengthE == 0) ? Block.None : (Statement) astStack[astPtr--];\r", "-\t\tif (elseStatement instanceof Block) {\r", "-\t\t\tpushOnAstStack(\r", "-\t\t\t\tnew IfStatement(\r", "-\t\t\t\t\texpressionStack[expressionPtr--],\r", "-\t\t\t\t\tthenStatement,\r", "-\t\t\t\t\telseStatement,\r", "-\t\t\t\t\tintStack[intPtr--],\r", "-\t\t\t\t\tendStatementPosition));\t\r", "-\t\t} else {\r", "-\t\t\tpushOnAstStack(\r", "-\t\t\t\tnew IfStatement(\r", "-\t\t\t\t\texpressionStack[expressionPtr--],\r", "-\t\t\t\t\tthenStatement,\r", "-\t\t\t\t\telseStatement,\r", "-\t\t\t\t\tintStack[intPtr--],\r", "-\t\t\t\t\tendPosition));\t\r", "-\t\t}\t\t\t\r", "+\t\tastStack[astPtr] = \r", "+\t\t\tnew IfStatement(\r", "+\t\t\t\texpressionStack[expressionPtr--], \r", "+\t\t\t\tthenStatement, \r", "+\t\t\t\telseStatement, \r", "+\t\t\t\tintStack[intPtr--], \r", "+\t\t\t\tendPosition); \r"]}], "num": 46180}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0b4e092f46e84305f78326d16da8675", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72adf0a06dfad891b460e62adff550aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8fdb14b64608b58e620c67bc0f2758fb559de717", "commitAfterChange": "447dafd45d9eea3d096b0cc1d1d11fe893f03ec0", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-protected void reportMatching(TypeDeclaration type, AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+", "+\t// report method declaration itself", "-\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);", "+\t\t\t\t\t// standard reporting", "+\t\t\t\t\tif (this.patternFineGrain == 0) {", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn;", "-\t\t\t\t\treturn;", "+\t\t\t\t\t// finegrain reporting", "+\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, method.binding, nodeSet, nodes, this.patternLocator, this);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tClassScope classScope = method.scope == null ? null : method.scope.classScope();", "+\t\t\t\t\t\tmethod.traverse(visitor, classScope);", "+\t\t\t\t\t} catch (WrappedCoreException e) {", "+\t\t\t\t\t\tthrow e.coreException;", "+\t\t\t\t\t}", "-\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t// Remove all remaining nodes", "+\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e46b276bf82174aa8bdc7e42d3713db5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t// standard reporting", "-\t\t\t\t\tif (this.patternFineGrain == 0) {", "-\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);", "-\t\t\t\t\t// finegrain reporting", "-\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, method.binding, nodeSet, nodes, this.patternLocator, this);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tClassScope classScope = method.scope == null ? null : method.scope.classScope();", "-\t\t\t\t\t\tmethod.traverse(visitor, classScope);", "-\t\t\t\t\t} catch (WrappedCoreException e) {", "-\t\t\t\t\t\tthrow e.coreException;", "-\t\t\t\t\t}", "+\t\t\t\t\treturn;"]}], "num": 50397}
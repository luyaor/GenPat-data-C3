{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b9b0703559ac75b64f11a5177420816", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f10c1a67f371630ebe757c4956733bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/IndentManipulation.java", "commitBeforeChange": "ee30320ed05f71a30424f51c6bb037a21f240577", "commitAfterChange": "1fb9a788acb6df81a5066976488be3d71b508599", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static String extractIndentString(String line, int tabWidth, int indentWidth)", "signatureAfterChange": " \tpublic static String extractIndentString(String line, int tabWidth, int indentWidth)", "diff": ["-\t\tif (tabWidth < 0 || indentWidth <= 0 || line == null) {", "+\t\tif (tabWidth < 0 || indentWidth < 0 || line == null) {", "-\t\tint size= line.length();", "-\t\tint end= 0;", "+\t\tint size = line.length();", "+\t\tint end = 0;", "-\t\tint spaceEquivs= 0;", "-\t\tint characters= 0;", "-\t\tfor (int i= 0; i < size; i++) {", "-\t\t\tchar c= line.charAt(i);", "+\t\tint spaceEquivs = 0;", "+\t\tint characters = 0;", "+\t\tfor (int i = 0; i < size; i++) {", "+\t\t\tchar c = line.charAt(i);", "-\t\t\t\tint remainder= spaceEquivs % tabWidth;", "-\t\t\t\tspaceEquivs += tabWidth - remainder;", "+\t\t\t\tspaceEquivs = calculateSpaceEquivalents(tabWidth, spaceEquivs);", "-\t\t\t\tcharacters= 0;", "-\t\t\t\tspaceEquivs= spaceEquivs % indentWidth;", "+\t\t\t\tcharacters = 0;", "+\t\t\t\tif(indentWidth == 0) {", "+\t\t\t\t\tspaceEquivs = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tspaceEquivs = spaceEquivs % indentWidth;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c314daa0a59479dbad3adfe195897dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/OverflowingLRUCache.java", "commitBeforeChange": "0ff40cf9419ba675580163e104091de3b2c53d9a", "commitAfterChange": "afc22404ca214f45a7f8e88b727a46f3daf1f07d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected boolean makeSpace(int space)", "signatureAfterChange": " \tprotected boolean makeSpace(int space)", "diff": ["-\t\tint limit = fSpaceLimit;", "-\t\tif (fOverflow == 0 && fCurrentSpace + space <= limit) {", "+\t\tint limit = spaceLimit;", "+\t\tif (overflow == 0 && currentSpace + space <= limit) {", "-\t\tint spaceNeeded = (int)((1 - fLoadFactor) * limit);", "+\t\tint spaceNeeded = (int)((1 - loadFactor) * limit);", "-\t\tLRUCacheEntry entry = fEntryQueueTail;", "+\t\tLRUCacheEntry entry = entryQueueTail;", "-\t\t\tfTimestampsOn = false;", "+\t\t\ttimestampsOn = false;", "-\t\t\twhile (fCurrentSpace + spaceNeeded > limit && entry != null) {", "+\t\t\twhile (currentSpace + spaceNeeded > limit && entry != null) {", "-\t\t\tfTimestampsOn = true;", "+\t\t\ttimestampsOn = true;", "-\t\tif (fCurrentSpace + space <= limit) {", "-\t\t\tfOverflow = 0;", "+\t\tif (currentSpace + space <= limit) {", "+\t\t\toverflow = 0;", "-\t\tfOverflow = fCurrentSpace + space - limit;", "+\t\toverflow = currentSpace + space - limit;"]}], "num": 8779}
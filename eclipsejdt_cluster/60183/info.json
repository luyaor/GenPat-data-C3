{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad3e3e47844749ffa3508ba1f73f52ff", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2020c89e1686100d08abe45a03f69234", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "6a618f5105b380b0a9a5dc6bfffb855693be7fab", "commitAfterChange": "93613529f4763965d02155d2aaa1cabf71be7897", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["+\t\tboolean addParameterRank = this.isParameter() && this.declaringScope != null;", "-\t\tif (occurenceCount > 0) {", "+\t\tif (occurenceCount > 0 || addParameterRank) {", "+\t\t\tif (addParameterRank) {", "+\t\t\t\tint pos = -1;", "+\t\t\t\tLocalVariableBinding[] params = this.declaringScope.locals;", "+\t\t\t\tfor (int i = 0; i < params.length; i++) {", "+\t\t\t\t\tif (params[i] == this) {", "+\t\t\t\t\t\tpos = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (pos > -1) {", "+\t\t\t\t\tbuffer.append('#');", "+\t\t\t\t\tbuffer.append(pos);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c369932e458c585018ca3c52545313", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "19a809bd1e2b2fc92385fe5f8ca9f89249ad244c", "commitAfterChange": "bcb46990486d868577608d099b51c359510600ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["+\t\tlong start = -1;", "+\t\t\tstart = System.currentTimeMillis();", "-\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t\tif (!existing.equals(root))", "+\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "-\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "-\t\t\t\t\t\troots[rootLength] = root;", "-\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t\tboolean containsRoot = false;", "+\t\t\t\t\t\tfor (int j = 0; j < rootLength; j++) {", "+\t\t\t\t\t\t\tif (roots[j].equals(root)) {", "+\t\t\t\t\t\t\t\tcontainsRoot = true;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (containsRoot) {", "+\t\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "+\t\t\t\t\t\t\troots[rootLength] = root;", "+\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t\t}", "+        if (VERBOSE) {", "+            System.out.println(Thread.currentThread() + \" -> spent: \" + (start - System.currentTimeMillis()) + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+        }"]}], "num": 60183}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f47602f087f9d2790bfe5ad8d613d60", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650d926d477a7b1d4c64603a8ec6da9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "d822f3498ffb9e5cdd62d79ada53897bda8bb948", "commitAfterChange": "30d928a4ed94bdfc40106ae995b6d295a0fd9974", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t", "-\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(false)) {", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "-\t\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo)", "-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(handlingContext.initsOnReturn);", "+\t\t\t\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(tryInfo).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn));", "-\t\t\t\tFlowInfo catchInfo =", "+\t\t\t\tFlowInfo catchInfo;", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(tryInfo).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn));", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\tcatchInfo =", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6659525cb320c1a93cd5993b14fd6e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "a43f548b3a1c3d62722de2ff38ea24d34c2786a0", "commitAfterChange": "256997f0d353a7983d1c934f35d500006d3d2e1a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected int matchMethod(MethodBinding method)", "signatureAfterChange": " protected int matchMethod(MethodBinding method)", "diff": ["-\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "+\t\t\tTypeBinding argType = method.parameters[i];", "+\t\t\tint newLevel = IMPOSSIBLE_MATCH;", "+\t\t\tif (argType.isMemberType()) {", "+\t\t\t\t// only compare source name for member type (bug 41018)", "+\t\t\t\tnewLevel = CharOperation.match(this.pattern.parameterSimpleNames[i], argType.sourceName(), this.isCaseSensitive)", "+\t\t\t\t\t? ACCURATE_MATCH", "+\t\t\t\t\t: IMPOSSIBLE_MATCH;", "+\t\t\t} else {", "+\t\t\t\tnewLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3ce51c80b4be060e013c3b26f271880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "d9cbfd6f811edb92fc809248f3faf5313070d684", "commitAfterChange": "cdaab2bab93686ddb22cddbf86b514844fa4d1bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\tFlowInfo catchInfo =", "-\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t// remove null info to protect point of ", "-\t\t\t\t\t\t\t// exception null info ", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "-\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t", "+\t\t\t\tFlowInfo catchInfo;", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(false)) {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo)", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(handlingContext.initsOnReturn);", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t\t\t\t\t// remove null info to protect point of ", "+\t\t\t\t\t\t\t\t// exception null info ", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "+\t\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t}"]}], "num": 66849}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fe3d502d8fb94c3d9c6f416ddcb681f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "045e084ad74f186c051606af9fd375c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "d8bba06dba65d28b4ac0590368e9ea6b313bfaa8", "commitAfterChange": "e734477cf19ee0bbdf44ea8e0b55e663163c306b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+", "+\t\t// Signal tag missing description if necessary", "+\t\tswitch (this.tagWaitingForDescription) {", "+\t\t\tcase TAG_PARAM_VALUE:", "+\t\t\tcase TAG_THROWS_VALUE:", "+\t\t\t\tint start = (int) (this.identifierPositionStack[0] >>> 32);", "+\t\t\t\tint end = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescriptionAfterReference(start, end, this.sourceParser.modifiers);", "+\t\t\t\tbreak;", "+\t\t\tcase NO_TAG_VALUE:", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(TAG_NAMES[this.tagWaitingForDescription], this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tthis.tagWaitingForDescription = NO_TAG_VALUE;", "-\t\tboolean alreadyParsedTag = false;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "-\t\t\t\t\t\t\t// no argument expected for @inheritedDoc tag", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t/* verify characters after return tag (we're expecting text description)", "-\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "-\t\t\t\t\tif (this.sourceParser != null) {", "-\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "-\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t*/", "-\t\t\t\talreadyParsedTag = true;", "-\t\tif (this.tagValue != TAG_OTHERS_VALUE && ! alreadyParsedTag && this.reportProblems && verifyEndLine(this.scanner.currentPosition)) {", "-\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(tagName, this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "-\t\t\treturn false;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ce01c0b4154df84b6f2c7bae5da968", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6ee69a27bb90b4501869adce2a7020b0fadb9402", "commitAfterChange": "886d0f0c1c856616883aceae38186164d207f2a8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseHref() throws InvalidInputException", "diff": ["-\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\twhile (this.index <= this.lineEnd && readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@') {", "+\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\t\t\tconsumeToken();", "-\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null)", "-\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t}"]}], "num": 55255}
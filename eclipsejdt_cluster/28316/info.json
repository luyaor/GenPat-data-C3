{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4274b30708a46519b5a23ee27dfc7ea0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba9b24e6d03f583b287cd2fdcfe93d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "fa2cb5bc47f7fe5d18ae109d09f3bf4ba668083f", "commitAfterChange": "3ba9d90cc0b0b979098ff6ad3236612052718a0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "signatureAfterChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "diff": ["-\t\t// TODO: figure out what to do with the loc ", "-\t\t// Filer.Location.CLASS_TREE vs Filer.Location.SOURCE_TREE       ", "-\t\tFile f = new File(\".\");", "+    \t// TODO - clean this up", "+    \tFile f = null;", "+    \tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _env.getProject() );", "+    \tif ( loc == Filer.Location.CLASS_TREE )", "+    \t{", "+    \t\ttry ", "+    \t\t{", "+    \t\t\tf = gfm.getGeneratedOutputFile( _env.getJavaProject() );", "+    \t\t}", "+    \t\tcatch ( Exception e )", "+    \t\t{", "+    \t\t\t// TODO - stop throwing this exception", "+    \t\t\te.printStackTrace();", "+    \t\t\tthrow new IOException();", "+    \t\t}", "+    \t}", "+    \telse if ( loc == Filer.Location.SOURCE_TREE )", "+    \t\tf = gfm.getGeneratedSourceFolder().getRawLocation().toFile();", "+    \t\t\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca1d1ad83a92dd0789fa1e8d7e6006f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "be1ab5866130739e4d5dea6be597450bab4d9fe1", "commitAfterChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public OutputStream createClassFile(String name) throws IOException", "signatureAfterChange": "     public OutputStream createClassFile(String name) throws IOException", "diff": ["-    \tFile f = null;", "-    \t", "+    \tIPath path;", "-    \t\tf = gfm.getGeneratedSourceFolderOutputLocation();", "+    \t\t path = gfm.getGeneratedSourceFolderOutputLocation();", "-    \tf = new File( f, name.replace( '.', File.separatorChar ) + \".class\" ); //$NON-NLS-1$", "-  ", "-        // REVIEW: for no apparent reason it is sometimes necessary to create the", "-        // parent dir, else an IOException occurs creating f..", "-        File p = f.getParentFile();", "-        FileSystemUtil.mkdirs( p );", "+    \tpath = path.append(name.replace('.', File.separatorChar) + \".class\"); //$NON-NLS-1$", "-        return new FileOutputStream( f );", "+        // It is sometimes necessary to create the", "+        // parent dir, else an IOException occurs creating f..", "+        File parentFile = path.toFile().getParentFile();", "+        FileSystemUtil.mkdirs( parentFile );", "+    \t", "+        return new RefreshingFileOutputStream( path, _env.getProject() );"]}], "num": 28316}
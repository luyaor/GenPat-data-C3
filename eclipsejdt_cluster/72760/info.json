{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d6c4d7c3967571e71396a83e4c387ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3101c1f9de202bb2e5df3992b5c743a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "11d37ba24baa8a8d5177d1ba6ab1649342a0de47", "commitAfterChange": "3b53dc72aa60c63aafa5e63cea69df72f36f7346", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\tboolean isCastingToBoundParameterized;", "-\t\tif (match != null && (", "-\t\t\t\t(isCastingToBoundParameterized = castType.isBoundParameterizedType())", "-\t\t\t\t|| \texpressionType.isBoundParameterizedType())) {", "-\t\t\t", "-\t\t\tif (match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType, 0)) {", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tif (isCastingToBoundParameterized ", "-\t\t\t\t\t&& (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType))) {", "+\t\tif (match != null && match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType, 0)) {", "+\t\t\treturn false; ", "+\t\t}", "+\t\tswitch (castType.kind()) {", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tif (castType.isBoundParameterizedType()) {", "+\t\t\t\t\tif (match == null) { // unrelated types", "+\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tswitch (match.kind()) {", "+\t\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\t\t\tif (isNarrowing) {", "+\t\t\t\t\t\t\t\t// [JLS 5.5] T <: S", "+\t\t\t\t\t\t\t\tif (expressionType.isRawType() || !expressionType.isEquivalentTo(match)) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// [JLS 5.5] S has no subtype X != T, such that |X| == |T|", "+\t\t\t\t\t\t\t\tTypeBinding genericCastType = castType.erasure(); // jump to generic type", "+\t\t\t\t\t\t\t\tTypeBinding genericMatch = genericCastType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tif (genericMatch == match) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// [JLS 5.5] T >: S", "+\t\t\t\t\t\t\t\tif (!match.isEquivalentTo(castType)) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\t\t\tthis.bits |= UnsafeCast; // upcast since castType is known to be bound paramType", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tif (isNarrowing){", "+\t\t\t\t\t\t\t\t// match is not parameterized or raw, then any other subtype of match will erase  to |T|", "+\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tTypeBinding leafType = castType.leafComponentType();", "+\t\t\t\tif (isNarrowing && (leafType.isBoundParameterizedType() || leafType.isTypeVariable())) {", "+\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\treturn true;", "-\t\t\t} else if ((castType.tagBits & TagBits.HasDirectWildcard) == 0", "-\t\t\t\t\t&& (!match.isParameterizedType() || expressionType.isRawType())) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t} else if (isNarrowing) {", "-\t\t\tTypeBinding leafType = castType.leafComponentType();", "-\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && leafType.isBoundParameterizedType()) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (match == null && castType.isBoundParameterizedType()) { // cast between unrelated types", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (leafType.isTypeVariable()) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\t\t\treturn true;\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b342e3d205a9bfcdff7fed9181de15d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\tpublic final void areTypesCastCompatible(", "+\t */", "+\tpublic final boolean checkCastTypesCompatibility(", "-", "+\t", "-", "+\t", "-", "-\t\tneedRuntimeCheckcast = false;", "-\t\tif (castType == null || expressionType == null) return;", "-", "+\t", "+\t\tif (castType == null || expressionType == null) return true;", "+\t", "-\t\t\t\t\treturn;", "+\t\t\t\t\treturn false;", "+\t\t\t\tboolean necessary = false;", "-\t\t\t\t\t|| BaseTypeBinding.isNarrowing(castType.id, expressionType.id)) {", "+\t\t\t\t\t\t|| (necessary = BaseTypeBinding.isNarrowing(castType.id, expressionType.id))) {", "-\t\t\t\t\tif (expression.constant != Constant.NotAConstant)", "+\t\t\t\t\tif (expression.constant != Constant.NotAConstant) {", "-\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn necessary;", "+\t\t\t\t\t", "-\t\t\treturn;", "+\t\t\treturn true;", "-", "+\t", "-\t\t\treturn; //null is compatible with every thing", "+\t\t\treturn false; //null is compatible with every thing", "-\t\t\treturn;", "+\t\t\treturn true;", "-", "+\t", "-\t\t\tif (castType == expressionType) return; // identity conversion", "-", "+\t\t\tif (castType == expressionType) return false; // identity conversion", "+\t", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == exprElementType)", "-\t\t\t\t\t\tneedRuntimeCheckcast = true;", "-\t\t\t\t\telse", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == exprElementType) {", "+\t\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "+\t\t\t\t\t} else {", "-\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn true;", "-\t\t\t\tareTypesCastCompatible(", "+\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\treturn;", "-\t\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\t\t\treturn;", "+\t\t\t\tif (scope.isJavaLangObject(castType)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "-\t\t\t\t\tneedRuntimeCheckcast = true;", "-\t\t\t\t\treturn;", "+\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "+\t\t\t\t\treturn true;", "-\t\t\treturn;", "+\t\t\treturn true;", "-", "+\t", "-\t\t\t\t\tneedRuntimeCheckcast = true;", "-\t\t\t\t\treturn;", "+\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "+\t\t\t\t\treturn true;", "-\t\t\t\t\treturn;", "+\t\t\t\t\treturn false;", "-\t\t\t\t\tneedRuntimeCheckcast = true;", "-\t\t\t\t\treturn;", "+\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "+\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\treturn false;", "-\t\t\t\t\tneedRuntimeCheckcast = true;", "-\t\t\t\t\treturn;", "+\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "+\t\t\t\t\treturn true;", "-\t\t\treturn;", "+\t\t\treturn true;", "-", "+\t", "-\t\t\t\t|| scope.isJavaIoSerializable(expressionType)) // potential runtime error", "-\t\t\t\tneedRuntimeCheckcast = true;", "-\t\t\telse", "+\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType)) {// potential runtime error", "+\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "+\t\t\t} else {", "-\t\t\treturn;", "+\t\t\t}", "+\t\t\treturn true;", "-\t\t\tif (scope.isJavaLangObject(castType)) // no runtime error", "-\t\t\t\treturn;", "+\t\t\tif (scope.isJavaLangObject(castType)) { // no runtime error", "+\t\t\t\treturn false;", "+\t\t\t}", "-\t\t\t\t\treturn;", "+\t\t\t\t\treturn true;", "-\t\t\tif (castType == expressionType) return; // identity conversion", "+\t\t\tif (castType == expressionType) { ", "+\t\t\t\treturn false; // identity conversion", "+\t\t\t}", "-\t\tneedRuntimeCheckcast = true;", "-\t\treturn;", "+\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "+\t\treturn true;", "+\t}"]}], "num": 72760}
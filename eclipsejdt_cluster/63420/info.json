{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de4214686b8b9b9685e20f7567581df2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9bff33fa238bb9982107f95229d12ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "4bfbcab36fb89b16cf210b2b9fb5423da164ca27", "commitAfterChange": "f8d11ef45ee47eccac4f4a1fef52a70287187d6c", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tprivate static String[] getFormatterCompatibleConstants(String name)", "signatureAfterChange": " \tpublic String getOption(String optionName, boolean inheritJavaCoreOptions, IEclipsePreferences projectPreferences)", "diff": ["+\t */", "+\tpublic String getOption(String optionName, boolean inheritJavaCoreOptions, IEclipsePreferences projectPreferences) {", "+\t\t// Return the option value depending on its level", "+\t\tswitch (getOptionLevel(optionName)) {", "+\t\t\tcase VALID_OPTION:", "+\t\t\t\t// Valid option, return the preference value", "+\t\t\t\tString javaCoreDefault = inheritJavaCoreOptions ? JavaCore.getOption(optionName) : null;", "+\t\t\t\tif (projectPreferences == null) return javaCoreDefault;", "+\t\t\t\tString value = projectPreferences.get(optionName, javaCoreDefault);", "+\t\t\t\treturn value == null ? null : value.trim();", "+\t\t\tcase DEPRECATED_OPTION:", "+\t\t\t\t// Return the deprecated option value if it was already set", "+\t\t\t\tString oldValue = projectPreferences.get(optionName, null);", "+\t\t\t\tif (oldValue != null) {", "+\t\t\t\t\treturn oldValue.trim();", "+\t\t\t\t}", "+\t\t\t\t// Get the new compatible value", "+\t\t\t\tString[] compatibleOptions = (String[]) this.deprecatedOptions.get(optionName);", "+\t\t\t\tString newDefault = inheritJavaCoreOptions ? JavaCore.getOption(compatibleOptions[0]) : null;", "+\t\t\t\tString newValue = projectPreferences.get(compatibleOptions[0], newDefault);", "+\t\t\t\treturn newValue == null ? null : newValue.trim();", "+\t\t}", "+\t\treturn null;", "+\t}", "-\t */", "-\tprivate static String[] getFormatterCompatibleConstants(String name) {", "-\t\tif (DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER.equals(name)) {", "-\t\t\treturn new String[] {", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE", "-\t\t\t};", "-\t\t}", "-\t\tif (DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION.equals(name)) {", "-\t\t\treturn new String[] {", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER", "-\t\t\t};", "-\t\t}", "-\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de8574fb8c67846d846f99af899bf176", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "commitAfterChange": "6a32dca50f918bfeb1714bff0c2eb2686d8d482e", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tprivate static String[] getFormatterCompatibleConstants(String name)", "signatureAfterChange": " \tpublic String getOption(String optionName, boolean inheritJavaCoreOptions, IEclipsePreferences projectPreferences)", "diff": ["+\t */", "+\tpublic String getOption(String optionName, boolean inheritJavaCoreOptions, IEclipsePreferences projectPreferences) {", "+\t\t// Return the option value depending on its level", "+\t\tswitch (getOptionLevel(optionName)) {", "+\t\t\tcase VALID_OPTION:", "+\t\t\t\t// Valid option, return the preference value", "+\t\t\t\tString javaCoreDefault = inheritJavaCoreOptions ? JavaCore.getOption(optionName) : null;", "+\t\t\t\tif (projectPreferences == null) return javaCoreDefault;", "+\t\t\t\tString value = projectPreferences.get(optionName, javaCoreDefault);", "+\t\t\t\treturn value == null ? null : value.trim();", "+\t\t\tcase DEPRECATED_OPTION:", "+\t\t\t\t// Return the deprecated option value if it was already set", "+\t\t\t\tString oldValue = projectPreferences.get(optionName, null);", "+\t\t\t\tif (oldValue != null) {", "+\t\t\t\t\treturn oldValue.trim();", "+\t\t\t\t}", "+\t\t\t\t// Get the new compatible value", "+\t\t\t\tString[] compatibleOptions = (String[]) this.deprecatedOptions.get(optionName);", "+\t\t\t\tString newDefault = inheritJavaCoreOptions ? JavaCore.getOption(compatibleOptions[0]) : null;", "+\t\t\t\tString newValue = projectPreferences.get(compatibleOptions[0], newDefault);", "+\t\t\t\treturn newValue == null ? null : newValue.trim();", "+\t\t}", "+\t\treturn null;", "+\t}", "-\t */", "-\tprivate static String[] getFormatterCompatibleConstants(String name) {", "-\t\tif (DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER.equals(name)) {", "-\t\t\treturn new String[] {", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE", "-\t\t\t};", "-\t\t}", "-\t\tif (DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION.equals(name)) {", "-\t\t\treturn new String[] {", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE,", "-\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER", "-\t\t\t};", "-\t\t}", "-\t\treturn null;"]}], "num": 63420}
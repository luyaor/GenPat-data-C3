{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "322c1cebd6028c8fb39848b59c92079b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04cf0289e3746c3fd09ee89c99eccb43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "81760d211469bf12100fd76e7231799f80190c5f", "commitAfterChange": "d3721d56cc1a3428241d332af8c31ddc07515e58", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "signatureAfterChange": " public void acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor monitor)", "diff": ["+ */", "+public void acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor monitor) {", "-\t\tif (scope.encloses(documentPath))", "+\t\tboolean encloses = (scope instanceof HierarchyScope) ? ((HierarchyScope)scope).encloses(documentPath, monitor)", "+\t\t\t\t\t\t\t: scope.encloses(documentPath);", "+\t\tif (encloses) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2796eef9da8f64c905b5560dd1c5d8bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5326f4925981afee39790c88bc133bd18e542033", "commitAfterChange": "19abccd2dad61a489aefa2e5ed58f88ee81afb0e", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException {", "+\t} else if (enclosingElement instanceof IMember) {", "+\t\tenclosingElement = ((IMember) parent).getType(new String(type.name), occurrenceCount);", "-\t\t\treportMatching(memberType, enclosingElement, value, nodeSet);", "+\t\t\treportMatching(memberType, enclosingElement, value, nodeSet, 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "363808114d2acd9092afce9fa2623c21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "commitAfterChange": "c9eaba06bc7b86cfbdd54b68a2792d02e0e113ce", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic AnnotationValueImpl(Object value)", "signatureAfterChange": " \tpublic AnnotationValueImpl(Object value, TypeBinding type)", "diff": ["-\tpublic AnnotationValueImpl(Object value) {", "+\tpublic AnnotationValueImpl(Object value, TypeBinding type) {", "-\t\t\t\tconvertedValues.add(new AnnotationValueImpl(oneValue));", "+\t\t\t\tTypeBinding valueType = null;", "+\t\t\t\tif (type instanceof ArrayBinding) {", "+\t\t\t\t\tvalueType = ((ArrayBinding)type).elementsType();", "+\t\t\t\t}", "+\t\t\t\tconvertedValues.add(new AnnotationValueImpl(oneValue, valueType));", "-\t\t\t_value = convertToJavaType(value, kind);", "+\t\t\t_value = convertToJavaType(value, type, kind);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db33bcbc92232355738f8dd4e364c8f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments)", "signatureAfterChange": " \t \tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments, InvocationSite site)", "diff": ["-\tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments) {", "+\tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments, InvocationSite site) {", "-\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope)) {", "-\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\tASTNode location = site instanceof ASTNode ? (ASTNode) site : null;", "+\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope, location)) {", "+\t\t\t\tcase MISMATCH :", "-\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\tcase UNCHECKED :", "+\t\t\t\tdefault:", "+\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd2344264ca96ab228f5ece63021267", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "813cb7f1fc14c8072642ec711f5098f552e1b8db", "commitAfterChange": "12c7a1390003be03c294e54b44d9a738e6c7419f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements)", "signatureAfterChange": "\r public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, boolean includeReferencedProjects)", "diff": ["-public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements) {\r", "+public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, boolean includeReferencedProjects) {\r", "+\tHashtable visitedProjects = new Hashtable(2);\r", "-\t\t\t\tscope.add(element);\r", "+\t\t\t\tif (element instanceof IJavaProject) {\r", "+\t\t\t\t\tscope.add((IJavaProject)element, includeReferencedProjects, visitedProjects);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tscope.add(element);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec6d839ba0f9beb79501cf916a5bb33f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java", "commitBeforeChange": "93e477d77002561632d941e4267b504c8ce9ab5b", "commitAfterChange": "9fe19741818ec1eef72565921ab6dbec02a6d99a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean inheritsAnno(ReferenceBinding element, ReferenceBinding anno)", "signatureAfterChange": " \tprivate boolean inheritsAnno(ReferenceBinding element, ReferenceBinding anno)", "diff": ["+\t\tReferenceBinding searchedElement = element;", "-\t\t\tAnnotationBinding[] annos = element.getAnnotations();", "+\t\t\tif (searchedElement instanceof ParameterizedTypeBinding) {", "+\t\t\t\tsearchedElement = ((ParameterizedTypeBinding) searchedElement).genericType();", "+\t\t\t}", "+\t\t\tAnnotationBinding[] annos = searchedElement.getAnnotations();", "-\t\t} while (null != (element = element.superclass()));", "+\t\t} while (null != (searchedElement = searchedElement.superclass()));"]}], "num": 10463}
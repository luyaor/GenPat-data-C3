{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c6df7c30b7df0203c6422608a63500a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f04d1b7cd608bfdc8d9d992692933b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test004() throws JavaModelException", "signatureAfterChange": " \tpublic void test004() throws JavaModelException", "diff": ["-\t\tHashtable oldOptions = JavaCore.getOptions();", "-\t\ttry {", "-\t\t\tHashtable options = new Hashtable(oldOptions);", "-\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "-\t\t\toptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-\t\t\tJavaCore.setOptions(options);", "-\t\t\tIType type = getCompilationUnit(\"/CreateMembers/src/A.java\").getType(\"A\");", "-\t\t\tIMethod method = type.createMethod(", "-\t\t\t\t\"void bar(String... args) {}\",", "-\t\t\t\tnull, // no siblings", "-\t\t\t\tfalse, // don't force", "-\t\t\t\tnull // no progress monitor", "-\t\t\t);", "-\t\t\tassertTrue(\"Method should exist\", method.exists());", "-\t\t} finally {", "-\t\t\tJavaCore.setOptions(oldOptions);", "-\t\t}", "+\t\tIType type = getCompilationUnit(\"/CreateMembers/src/A.java\").getType(\"A\");", "+\t\tIMethod method = type.createMethod(", "+\t\t\t\"void bar(String... args) {}\",", "+\t\t\tnull, // no siblings", "+\t\t\tfalse, // don't force", "+\t\t\tnull // no progress monitor", "+\t\t);", "+\t\tassertTrue(\"Method should exist\", method.exists());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372c34bed445e68ff53c65ed816403ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test005() throws JavaModelException", "signatureAfterChange": " \tpublic void test005() throws JavaModelException", "diff": ["-\t\tHashtable oldOptions = JavaCore.getOptions();", "-\t\ttry {", "-\t\t\tHashtable options = new Hashtable(oldOptions);", "-\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "-\t\t\toptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-\t\t\tJavaCore.setOptions(options);", "-\t\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E2.java\");", "-\t\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "-\t\t\tIType[] types = compilationUnit.getTypes();", "-\t\t\tassertNotNull(\"No types\", types);", "-\t\t\tassertEquals(\"Wrong size\", 1, types.length);", "-\t\t\tIType type = types[0];", "-\t\t\ttype.createField(\"int i;\", null, true, null);", "-\t\t\tString expectedSource = ", "-\t\t\t\t\"public enum E2 {\\n\" + ", "-\t\t\t\t\"\tA, B, C;\\n\\n\" +", "-\t\t\t\t\"\tint i;\\n\" + ", "-\t\t\t\t\"}\";", "-\t\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());", "-\t\t} finally {", "-\t\t\tJavaCore.setOptions(oldOptions);", "-\t\t}", "+\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E2.java\");", "+\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "+\t\tIType[] types = compilationUnit.getTypes();", "+\t\tassertNotNull(\"No types\", types);", "+\t\tassertEquals(\"Wrong size\", 1, types.length);", "+\t\tIType type = types[0];", "+\t\ttype.createField(\"int i;\", null, true, null);", "+\t\tString expectedSource = ", "+\t\t\t\"public enum E2 {\\n\" + ", "+\t\t\t\"\tA, B, C;\\n\\n\" +", "+\t\t\t\"\tint i;\\n\" + ", "+\t\t\t\"}\";", "+\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e70eef0bdfc801fdaa76d4bfd8a1e08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1a542c460a449efbae14d1057ba233825602248d", "commitAfterChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, InvocationSite site)", "signatureAfterChange": " \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, InvocationSite site)", "diff": ["-\t\t\t\tMethodBinding shallowOriginal = method.shallowOriginal();", "-\t\t\t\t\t// Next 6 lines have dubious sanction. Needs a rigorous solution.", "-\t\t\t\t\tTypeBinding shallowParameter = InferenceContext18.getParameter(shallowOriginal.parameters, i, context.isVarArgs());", "-\t\t\t\t\tif (!shallowParameter.isPertinentToApplicability(argument, shallowOriginal))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (((Invocation) site).arguments()[i] instanceof ReferenceExpression)", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\treturn NOT_COMPATIBLE;", "-\t\t\t\t\t/* We ask the inverted question here, because we do want to check compatibility against lambdas and reference expressions that are not pertinent to", "-\t\t\t\t\t  applicability on account of being type elided and not being an exact method reference respectively i.e if we call ", "-\t\t\t\t\t  argument.isPertinentToApplicability(shallowParameter, shallowOriginal), it will answer true if type elided and we will miss catching incompatibilities.", "-\t\t\t\t\t*/ ", "+\t\t\t\t\tcontinue; // Engine has already asserted potential compatibility and that is all we can do."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d8fb98d2aee1c70c45314ccf136845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test006() throws JavaModelException", "signatureAfterChange": " \tpublic void test006() throws JavaModelException", "diff": ["-\t\tHashtable oldOptions = JavaCore.getOptions();", "-\t\ttry {", "-\t\t\tHashtable options = new Hashtable(oldOptions);", "-\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "-\t\t\toptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-\t\t\tJavaCore.setOptions(options);", "-\t\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E3.java\");", "-\t\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "-\t\t\tIType[] types = compilationUnit.getTypes();", "-\t\t\tassertNotNull(\"No types\", types);", "-\t\t\tassertEquals(\"Wrong size\", 1, types.length);", "-\t\t\tIType type = types[0];", "-\t\t\ttype.createType(\"class DD {}\", null, true, null);", "-\t\t\tString expectedSource = ", "-\t\t\t\t\"public enum E3 {\\n\" + ", "-\t\t\t\t\"\tA, B, C;\\n\\n\" +", "-\t\t\t\t\"\tclass DD {}\\n\" + ", "-\t\t\t\t\"}\";", "-\t\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());", "-\t\t} finally {", "-\t\t\tJavaCore.setOptions(oldOptions);", "-\t\t}", "+\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E3.java\");", "+\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "+\t\tIType[] types = compilationUnit.getTypes();", "+\t\tassertNotNull(\"No types\", types);", "+\t\tassertEquals(\"Wrong size\", 1, types.length);", "+\t\tIType type = types[0];", "+\t\ttype.createType(\"class DD {}\", null, true, null);", "+\t\tString expectedSource = ", "+\t\t\t\"public enum E3 {\\n\" + ", "+\t\t\t\"\tA, B, C;\\n\\n\" +", "+\t\t\t\"\tclass DD {}\\n\" + ", "+\t\t\t\"}\";", "+\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a3a73923066d14a1b795dc524795a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "1f4efb41a52f8c33e561047da4304f9fe9e90dc9", "commitAfterChange": "44b2c87051c4d9bbf37b4cf649be500c54102bf7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tstatic IAccessRule[] decodeAccessRules(Element element)", "signatureAfterChange": " \t \tstatic IAccessRule[] decodeAccessRules(NodeList list)", "diff": ["-\tstatic IAccessRule[] decodeAccessRules(Element element) {", "-\t\tNode accessRules = element.getElementsByTagName(TAG_ACCESS_RULES).item(0);", "-\t\tif (accessRules == null || accessRules.getNodeType() != Node.ELEMENT_NODE) return null;", "-\t\tNodeList list = ((Element) accessRules).getElementsByTagName(TAG_ACCESS_RULE);", "+\tstatic IAccessRule[] decodeAccessRules(NodeList list) {", "+\t\tif (list == null) return null;", "-\t\t\tif (accessRule == null || accessRule.getNodeType() != Node.ELEMENT_NODE) return null;", "-\t\t\tElement elementAccessRule = (Element) accessRule;", "-\t\t\tString pattern = elementAccessRule.getAttribute(TAG_PATTERN);", "-\t\t\tif (pattern == null) continue;", "-\t\t\tString tagKind =  elementAccessRule.getAttribute(TAG_KIND);", "-\t\t\tint kind;", "-\t\t\tif (TAG_ACCESSIBLE.equals(tagKind))", "-\t\t\t\tkind = IAccessRule.K_ACCESSIBLE;", "-\t\t\telse if (TAG_NON_ACCESSIBLE.equals(tagKind))", "-\t\t\t\tkind = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\telse if (TAG_DISCOURAGED.equals(tagKind))", "-\t\t\t\tkind = IAccessRule.K_DISCOURAGED;", "-\t\t\telse", "-\t\t\t\tcontinue;", "-\t\t\tresult[index++] = new ClasspathAccessRule(new Path(pattern), kind);", "+\t\t\tif (accessRule.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\t\tElement elementAccessRule = (Element) accessRule;", "+\t\t\t\tString pattern = elementAccessRule.getAttribute(TAG_PATTERN);", "+\t\t\t\tif (pattern == null) continue;", "+\t\t\t\tString tagKind =  elementAccessRule.getAttribute(TAG_KIND);", "+\t\t\t\tint kind;", "+\t\t\t\tif (TAG_ACCESSIBLE.equals(tagKind))", "+\t\t\t\t\tkind = IAccessRule.K_ACCESSIBLE;", "+\t\t\t\telse if (TAG_NON_ACCESSIBLE.equals(tagKind))", "+\t\t\t\t\tkind = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\telse if (TAG_DISCOURAGED.equals(tagKind))", "+\t\t\t\t\tkind = IAccessRule.K_DISCOURAGED;", "+\t\t\t\telse", "+\t\t\t\t\tcontinue;", "+\t\t\t\tresult[index++] = new ClasspathAccessRule(new Path(pattern), kind);", "+\t\t\t}"]}], "num": 71425}
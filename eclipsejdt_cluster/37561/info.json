{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf297bc3f8b21bd392f185c13c6f51bb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ae6d10d1a679f430cdc8db7f61f1b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e87380489c19c89a272ebf5e59d9953a6bf9556a", "commitAfterChange": "2280fea0c7ffa905aa9d4633b1f02fa1aa3159f9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "signatureAfterChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "diff": ["-\t\tif (enumConstant.initialization instanceof QualifiedAllocationExpression) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) enumConstant.initialization).anonymousType;", "-\t\t\tif (anonymousType != null) {", "-\t\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "-\t\t\t\tint start = retrieveStartBlockPosition(anonymousType.sourceEnd, anonymousType.bodyEnd);", "-\t\t\t\tint end = retrieveRightBrace(anonymousType.bodyEnd, declarationSourceEnd);", "-\t\t\t\tanonymousClassDeclaration.setSourceRange(start, end - start + 1);", "-\t\t\t\tenumConstantDeclaration.setAnonymousClassDeclaration(anonymousClassDeclaration);", "-\t\t\t\tbuildBodyDeclarations(anonymousType, anonymousClassDeclaration);", "-\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\trecordNodes(anonymousClassDeclaration, anonymousType);", "-\t\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression initialization = enumConstant.initialization;", "+\t\tif (initialization != null) {", "+\t\t\tif (initialization instanceof QualifiedAllocationExpression) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) initialization).anonymousType;", "+\t\t\t\tif (anonymousType != null) {", "+\t\t\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "+\t\t\t\t\tint start = retrieveStartBlockPosition(anonymousType.sourceEnd, anonymousType.bodyEnd);", "+\t\t\t\t\tint end = retrieveRightBrace(anonymousType.bodyEnd, declarationSourceEnd);", "+\t\t\t\t\tanonymousClassDeclaration.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tenumConstantDeclaration.setAnonymousClassDeclaration(anonymousClassDeclaration);", "+\t\t\t\t\tbuildBodyDeclarations(anonymousType, anonymousClassDeclaration);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(anonymousClassDeclaration, anonymousType);", "+\t\t\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\t\t\t\t}", "+\t\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, end - declarationSourceStart + 1);", "-\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, end - declarationSourceStart + 1);", "+\t\t\t} else {", "+\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, declarationSourceEnd - declarationSourceStart + 1);", "+\t\t\t}", "+\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) initialization).arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\tenumConstantDeclaration.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "-\t\t}", "-\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) enumConstant.initialization).arguments;", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\tenumConstantDeclaration.arguments().add(convert(arguments[i]));", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "376f5912d3c40db19a1c6dcef6c229ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "commitAfterChange": "63af609b0c4ca15a76568f63423f1cb23d7be92e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void createArgumentBindings()", "signatureAfterChange": " \tpublic void createArgumentBindings()", "diff": ["-\t\t\t\tif ((argument.binding.tagBits & (TagBits.AnnotationNonNull|TagBits.AnnotationNullable)) != 0) {", "+\t\t\t\t// prefer type annotation:", "+\t\t\t\tlong argTypeTagBits = (argument.type.resolvedType.tagBits & TagBits.AnnotationNullMASK);", "+\t\t\t\t// if none found try SE7 annotation:", "+\t\t\t\tif (argTypeTagBits == 0) {", "+\t\t\t\t\targTypeTagBits = (argument.binding.tagBits & TagBits.AnnotationNullMASK);", "+\t\t\t\t}", "+\t\t\t\tif (argTypeTagBits != 0) {", "-\t\t\t\t\tthis.binding.parameterNonNullness[i] = Boolean.valueOf((argument.binding.tagBits & TagBits.AnnotationNonNull) != 0);", "+\t\t\t\t\tthis.binding.parameterNonNullness[i] = Boolean.valueOf(argTypeTagBits == TagBits.AnnotationNonNull);"]}], "num": 37561}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43573bea791cc5f9adf652e8adbe74a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355850c85dcb62791d1ac723b9aa65be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "65014b9edcd64bc51154fcb1b47074eec77a5977", "commitAfterChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 242, "signatureBeforeChange": " \tpublic void testMethodDeclaration()", "signatureAfterChange": " \tpublic void testMethodDeclaration()", "diff": ["+\t\t\ttry {", "+\t\t\t\tx.typeParameters();", "+\t\t\t\tassertTrue(\"Should have failed\", false);", "+\t\t\t} catch(UnsupportedOperationException e) {", "+\t\t\t\t// pass", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tx.isVarargs();", "+\t\t\t\tassertTrue(\"Should have failed\", false);", "+\t\t\t} catch(UnsupportedOperationException e) {", "+\t\t\t\t// pass", "+\t\t\t}", "+\t\ttry {", "+\t\t\tx.setExtraDimensions(-1);", "+\t\t\tassertTrue(\"Should fail\", false);", "+\t\t} catch(IllegalArgumentException e) {", "+\t\t\t// pass", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5633eddf45ccd401eac469c6784416b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "22a14f1a594f2965f31b80e65fb54172ab0fd512", "commitAfterChange": "5d4f893fa59b3511c935dd72cb6bf3884d345168", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "diff": ["-\t\t\tif (i < 0 || i >= length) throw new IllegalArgumentException();", "+\t\t\tif (i < 0 || i >= length) ", "+\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\t\tcontinue nextBound; // empty bound", "+\t\t\t\t\t\t// no class bound", "+\t\t\t\t\t\tbreak; ", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\ti = Util.scanTypeSignature(methodOrTypeSignature, i);", "-\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\tcase C_RESOLVED:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanClassTypeSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not a class type signature -> it is a new type parameter", "+\t\t\t\t\t\t}", "+\t\t\t\t\tcase C_ARRAY:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanArrayTypeSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not an array type signature -> it is a new type parameter", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase C_TYPE_VARIABLE:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanTypeVariableSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not a type variable signature -> it is a new type parameter", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// default: another type parameter is starting"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a79735843371e0506fd427c9b28034e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "820e796a655cc430ae4ae3cd649830ad2aa11511", "commitAfterChange": "15e62f7752b5ba1cd51b3fafb5a3b0c9d1ba5891", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testGetThrownExceptionTypes()", "signatureAfterChange": " public void testGetThrownExceptionTypes()", "diff": ["-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)IQexception;Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)I^Qexception;^Qerror;\";", "-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;Qexception<TT;>;Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;^Qexception<TT;>;^Qerror;\";", "+\t", "+\tmethodSig = \"<T:Ljava/lang/Exception;>()V^TT;\";", "+\tassertStringsEqual(\"Signature#getThrownExceptionTypes is not correct3\", \"TT;\\n\",", "+\t\t\tSignature.getThrownExceptionTypes(methodSig));", "+\tmethodSig = \"<T:Ljava/lang/Exception;>()V^TT;^Ljava/lang/Exception;\";", "+\tassertStringsEqual(\"Signature#getThrownExceptionTypes is not correct3\", \"TT;\\nLjava/lang/Exception;\\n\",", "+\t\t\tSignature.getThrownExceptionTypes(methodSig));", "+\t", "+\ttry {", "+\t\tSignature.getThrownExceptionTypes(\"<T:Ljava/lang/Exception;>()VTT;\");", "+\t\tassertTrue(\"Signature#getThrownExceptionTypes is not correct: exception\", false);", "+\t} catch (IllegalArgumentException iae) {", "+\t\t// do nothing", "+\t}", "+\t", "+\ttry {", "+\t\tSignature.getThrownExceptionTypes(\"<T:Ljava/lang/Exception;>()V^TT;Ljava/lang/Exception;\");", "+\t\tassertTrue(\"Signature#getThrownExceptionTypes is not correct: exception\", false);", "+\t} catch (IllegalArgumentException iae) {}", "+"]}], "num": 24000}
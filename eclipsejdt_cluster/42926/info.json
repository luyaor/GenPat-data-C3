{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5fda7315645b0ae5419128d9597f30f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df7f2870ad861964fc26e7d34ac634f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 151, "signatureBeforeChange": " \t \tprivate void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension)", "signatureAfterChange": " \t \tprotected void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension)", "diff": ["-\t", "-\tprivate void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tfieldDeclaration.setType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\t}", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tfieldDeclaration.setType(subarrayType);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t\tfieldDeclaration.setType(type);", "-\t\t} else {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\t// update positions of the component types of the array type", "-\t\t\t\tint dimensions = ((ArrayType) type).getDimensions();", "-\t\t\t\tupdateInnerPositions(type, dimensions);", "-\t\t\t}", "-\t\t\tfieldDeclaration.setType(type);", "+\t", "+\tprotected void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tfieldDeclaration.setType(elementType);", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tfieldDeclaration.setType(subarrayType);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfieldDeclaration.setType(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\t// update positions of the component types of the array type", "+\t\t\t\tint dimensions = ((ArrayType) type).getDimensions();", "+\t\t\t\tupdateInnerPositions(type, dimensions);", "+\t\t\t}", "+\t\t\tfieldDeclaration.setType(type);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6aacb94a8b9baf9919fd54bacaa39a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 154, "signatureBeforeChange": "  \tprivate void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension)", "signatureAfterChange": "  \tprotected void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension)", "diff": ["-", "-\tprivate void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tsingleVariableDeclaration.setType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tsingleVariableDeclaration.setType(subarrayType);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tsingleVariableDeclaration.setType(type);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tsingleVariableDeclaration.setType(type);", "-\t\t}", "-\t}", "+", "+\tprotected void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tsingleVariableDeclaration.setType(elementType);", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tsingleVariableDeclaration.setType(subarrayType);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tsingleVariableDeclaration.setType(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tsingleVariableDeclaration.setType(type);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8762dfc3c0959d0c681059728f351952", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tprivate VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration)", "signatureAfterChange": "  \tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration)", "diff": ["+", "+\tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration) {", "+\t\tVariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();", "+\t\tSimpleName name = this.ast.newSimpleName(new String(localDeclaration.name));", "+\t\tname.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "+\t\tvariableDeclarationFragment.setName(name);", "+\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(localDeclaration.sourceEnd, this.compilationUnitSource.length);", "+\t\tif (end == -1) {", "+\t\t\tif (localDeclaration.initialization != null) {", "+\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.initialization.sourceEnd - localDeclaration.sourceStart + 1);", "+\t\t\t} else {", "+\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, end - localDeclaration.sourceStart + 1);", "+\t\t}", "+\t\tif (localDeclaration.initialization != null) {", "+\t\t\tvariableDeclarationFragment.setInitializer(convert(localDeclaration.initialization));", "+\t\t}", "+\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSource.length));", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(variableDeclarationFragment, localDeclaration);", "+\t\t\trecordNodes(name, localDeclaration);", "+\t\t\tvariableDeclarationFragment.resolveBinding();", "+\t\t}", "+\t\treturn variableDeclarationFragment;", "+\t}", "-", "-\tprivate VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration) {", "-\t\tVariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();", "-\t\tSimpleName name = this.ast.newSimpleName(new String(localDeclaration.name));", "-\t\tname.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "-\t\tvariableDeclarationFragment.setName(name);", "-\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(localDeclaration.sourceEnd, this.compilationUnitSource.length);", "-\t\tif (end == -1) {", "-\t\t\tif (localDeclaration.initialization != null) {", "-\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.initialization.sourceEnd - localDeclaration.sourceStart + 1);", "-\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "-\t\t} else {", "-\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, end - localDeclaration.sourceStart + 1);", "-\t\t}", "-\t\tif (localDeclaration.initialization != null) {", "-\t\t\tvariableDeclarationFragment.setInitializer(convert(localDeclaration.initialization));", "-\t\t}", "-\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSource.length));", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(variableDeclarationFragment, localDeclaration);", "-\t\t\trecordNodes(name, localDeclaration);", "-\t\t\tvariableDeclarationFragment.resolveBinding();", "-\t\t}", "-\t\treturn variableDeclarationFragment;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf1212e21940219d751d0e84a09df9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 157, "signatureBeforeChange": "  \tprivate void updateInnerPositions(Type type, int dimensions)", "signatureAfterChange": "  \tprotected void updateInnerPositions(Type type, int dimensions)", "diff": ["-\tprivate void updateInnerPositions(Type type, int dimensions) {", "-\t\tif (dimensions > 1) {", "-\t\t\t// need to set positions for intermediate array type see 42839", "-\t\t\tint start = type.getStartPosition();", "-\t\t\tint length = type.getLength();", "-\t\t\tType currentComponentType = ((ArrayType) type).getComponentType();", "-\t\t\tint searchedDimension = dimensions - 1;", "-\t\t\tint rightBracketEndPosition = start;", "-\t\t\twhile (currentComponentType.isArrayType()) {", "-\t\t\t\trightBracketEndPosition = retrieveProperRightBracketPosition(searchedDimension, start, start + length);", "-\t\t\t\tcurrentComponentType.setSourceRange(start, rightBracketEndPosition - start + 1);", "-\t\t\t\tcurrentComponentType = ((ArrayType) currentComponentType).getComponentType();", "-\t\t\t\tsearchedDimension--;", "-\t\t\t}\t\t", "-\t\t}", "-\t}", "+", "+\tprotected void updateInnerPositions(Type type, int dimensions) {", "+\t\tif (dimensions > 1) {", "+\t\t\t// need to set positions for intermediate array type see 42839", "+\t\t\tint start = type.getStartPosition();", "+\t\t\tint length = type.getLength();", "+\t\t\tType currentComponentType = ((ArrayType) type).getComponentType();", "+\t\t\tint searchedDimension = dimensions - 1;", "+\t\t\tint rightBracketEndPosition = start;", "+\t\t\twhile (currentComponentType.isArrayType()) {", "+\t\t\t\trightBracketEndPosition = retrieveProperRightBracketPosition(searchedDimension, start, start + length);", "+\t\t\t\tcurrentComponentType.setSourceRange(start, rightBracketEndPosition - start + 1);", "+\t\t\t\tcurrentComponentType = ((ArrayType) currentComponentType).getComponentType();", "+\t\t\t\tsearchedDimension--;", "+\t\t\t}\t\t", "+\t\t}"]}], "num": 42926}
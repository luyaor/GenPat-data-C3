{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b9c6f242f9870944bbd455d881cecb0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4675bcf3dd4aa5a9672c201cbb9c5f0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["-//\t\t\t\t\t\t\tSourceTypeBinding initialType = this.enclosingSourceType();", "-//\t\t\t\t\t\t\tif ((fieldBinding == null || !fieldBinding.isValidBinding()) && enclosingType.hasMemberTypes()) { // check member enums", "-//\t\t\t\t\t\t\t\tReferenceBinding[] memberTypes = enclosingType.memberTypes();", "-//\t\t\t\t\t\t\t\tfor (int i = 0, length = memberTypes.length; i < length; i++) {", "-//\t\t\t\t\t\t\t\t\tReferenceBinding memberType = memberTypes[i];", "-//\t\t\t\t\t\t\t\t\tif (memberType != initialType && memberType.isEnum()) { // do not find one's field through its enclosing members", "-//\t\t\t\t\t\t\t\t\t\tFieldBinding enumField = ((SourceTypeBinding)memberType).scope.findField(memberType, name, invocationSite, needResolve);", "-//\t\t\t\t\t\t\t\t\t\tif (enumField != null && (enumField.modifiers & AccEnum) != 0) {", "-//\t\t\t\t\t\t\t\t\t\t\t// grant access to enum constants of enclosing members", "-//\t\t\t\t\t\t\t\t\t\t\t// TODO (kent) need to revisit to see whether should walk sibling enums and issue an ambiguous match", "-//\t\t\t\t\t\t\t\t\t\t\treturn enumField;", "-//\t\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(declaringClass);\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\tif (foundField != null) return foundField;", "+\t\t\t\t\t\tif (foundField != null) {", "+\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(foundField.declaringClass);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\treturn foundField;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c221d0c18726311426ee6d38ff31eedd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "836fef68856b7e7f6b208deb388901eeda69de4b", "commitAfterChange": "79e5d72bba2066424baa4a0d68a49d71cc4f75a5", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["+\t\t\tSourceTypeBinding initialType = this.enclosingSourceType();", "+\t\t\t\t\t\t\t", "+//\t\t\t\t\t\t\tif ((fieldBinding == null || !fieldBinding.isValidBinding()) && enclosingType.hasMemberTypes()) { // check member enums", "+//\t\t\t\t\t\t\t\tReferenceBinding[] memberTypes = enclosingType.memberTypes();", "+//\t\t\t\t\t\t\t\tfor (int i = 0, length = memberTypes.length; i < length; i++) {", "+//\t\t\t\t\t\t\t\t\tReferenceBinding memberType = memberTypes[i];", "+//\t\t\t\t\t\t\t\t\tif (memberType != initialType && memberType.isEnum()) { // do not find one's field through its enclosing members", "+//\t\t\t\t\t\t\t\t\t\tFieldBinding enumField = ((SourceTypeBinding)memberType).scope.findField(memberType, name, invocationSite, needResolve);", "+//\t\t\t\t\t\t\t\t\t\tif (enumField != null && (enumField.modifiers & AccEnum) != 0) {", "+//\t\t\t\t\t\t\t\t\t\t\t// grant access to enum constants of enclosing members", "+//\t\t\t\t\t\t\t\t\t\t\t// TODO (kent) need to revisit to see whether should walk sibling enums and issue an ambiguous match", "+//\t\t\t\t\t\t\t\t\t\t\treturn enumField;", "+//\t\t\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t}"]}], "num": 12513}
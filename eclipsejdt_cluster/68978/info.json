{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b28293fc77507a7ea12f3d9726d185d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc2c0a53f2865397a14f7c15d2b3f47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "0bb0d4573d6c66c1ac9d1cb2e9c3c75a71063c64", "commitAfterChange": "6b83f210f48576459977c0ca86d46729031558f3", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 347, "signatureBeforeChange": " \tpublic void test0344() throws JavaModelException", "signatureAfterChange": " \tpublic void test0344() throws JavaModelException", "diff": ["-\t\tPreferences preferences = null;", "+\t\tIEclipsePreferences preferences = null;", "-\t\t\tpreferences = JavaCore.getPlugin().getPluginPreferences();", "-\t\t\tpb_assert = preferences.getString(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER);", "-\t\t\tcompiler_source = preferences.getString(JavaCore.COMPILER_SOURCE);", "-\t\t\tcompiler_compliance = preferences.getString(JavaCore.COMPILER_COMPLIANCE);", "+\t\t\tpreferences = new InstanceScope().getNode(JavaCore.PLUGIN_ID);", "+\t\t\tpb_assert = preferences.get(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, \"\");", "+\t\t\tcompiler_source = preferences.get(JavaCore.COMPILER_SOURCE, \"\");", "+\t\t\tcompiler_compliance = preferences.get(JavaCore.COMPILER_COMPLIANCE, \"\");", "-\t\t\tpreferences.setValue(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, JavaCore.ERROR);", "-\t\t\tpreferences.setValue(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_4);", "-\t\t\tpreferences.setValue(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "+\t\t\tpreferences.put(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, JavaCore.ERROR);", "+\t\t\tpreferences.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_4);", "+\t\t\tpreferences.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "-\t\t\t\tpreferences.setValue(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, pb_assert);", "-\t\t\t\tpreferences.setValue(JavaCore.COMPILER_SOURCE, compiler_source);", "-\t\t\t\tpreferences.setValue(JavaCore.COMPILER_COMPLIANCE, compiler_compliance);", "+\t\t\t\tpreferences.put(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, pb_assert);", "+\t\t\t\tpreferences.put(JavaCore.COMPILER_SOURCE, compiler_source);", "+\t\t\t\tpreferences.put(JavaCore.COMPILER_COMPLIANCE, compiler_compliance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6db51bf44086e6d42b6f07e7452f6ac7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "ee3261d361c535bc2efdddf17bd2004ef36dd41a", "commitAfterChange": "9fbf431466d1c79d4789162c9375c8afcee26c4e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private Object getReflectionValue(final Object value, final Class targetType)         throws Throwable", "signatureAfterChange": "      private Object getReflectionValue(final Object value, final Class targetType)         throws Throwable", "diff": ["-                final String className = new String( declaringClass.getBinaryName() );", "-", "-                ClassLoader classLoader = _env.getLatestProcessor().getClass().getClassLoader();", "-                Class clazz = classLoader.loadClass(className);", "-                final Field returnedField = clazz.getField( varBinding.getName() );", "+                final Field returnedField = targetType.getField( varBinding.getName() );", "+                if (returnedField == null)", "+                \treturn null;", "-\t\t\treturn Factory.createAnnotationMirror((IResolvedAnnotation)value, _annotated, _env);", "+\t\t\tfinal AnnotationMirrorImpl annoMirror =", "+                (AnnotationMirrorImpl)Factory.createAnnotationMirror((IResolvedAnnotation)value, _annotated, _env);", "+            final AnnotationInvocationHandler handler = new AnnotationInvocationHandler(annoMirror, targetType);", "+            return Proxy.newProxyInstance(targetType.getClassLoader(),", "+                                             new Class[]{ targetType }, handler );"]}], "num": 68978}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc021afe717f67c12a020af2db2b14b2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1733be0196568ff6614bd60fe03bc29b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "fcc72e46b744ea79a152e24a7ffac0f0901b7400", "commitAfterChange": "06a3d951c7ec6b39762293a6177f305ce0f3f22c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic String getName()", "signatureAfterChange": "  \tpublic String getName()", "diff": ["-\t\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "-\t\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\t\tITypeBinding[] tArguments = getTypeArguments();", "+\t\t\t\tfinal int typeArgumentsLength = tArguments.length;", "-\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\tfor (int i = 0; i < typeArgumentsLength; i++) {", "-\t\t\t\t\t\tbuffer.append(typeArguments[i].getName());", "+\t\t\t\t\t\tbuffer.append(tArguments[i].getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2ffda77578951b7e712983a580cb0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\tIPath[] patterns = getExclusionPatterns();", "+\t\tIPath[] patterns = getInclusionPatterns();", "-\t\tif ((length = patterns.length) > 0) {", "+\t\tif ((length = patterns == null ? 0 : patterns.length) > 0) {", "+\t\t\tbuffer.append(\"[including:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tbuffer.append(patterns[i]);", "+\t\t\t\tif (i != length-1) {", "+\t\t\t\t\tbuffer.append('|');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(']');", "+\t\t}", "+\t\tpatterns = getExclusionPatterns();", "+\t\tif ((length = patterns == null ? 0 : patterns.length) > 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7f125e0ad379bf724cc0cb354281e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "f46836fc0182d6558b7db806545181e1bf6b7622", "commitAfterChange": "f48f3dd594832bdee5afb2423353d275b5827bd1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void appendQualifiedTypeParameters(StringBuffer buffer, ITypeBinding[] typeParameters)", "signatureAfterChange": " \t \tpublic void appendQualifiedTypeParameters(StringBuffer buffer, ITypeBinding[] typeParameters)", "diff": ["-\t\t\t\tTypeBinding typeParameter = (TypeBinding) typeParameters[i];", "-\t\t\t\tbuffer.append(typeParameter.getQualifiedName());", "-\t\t\t\tITypeBinding[] bounds = typeParameter.getTypeBounds();", "-\t\t\t\tint length = bounds.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(bounds[0].getQualifiedName());", "-\t\t\t\t\tfor (int j = 1; j < length; j++) {", "-\t\t\t\t\t\tbuffer.append('&');", "-\t\t\t\t\t\tbuffer.append(bounds[j].getQualifiedName());", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tbuffer.append(typeParameters[i].getQualifiedName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91326034364f4e17e801061cbccc57bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "1711cd3c2a5b80208f9ca8c0106649ad2ac334e9", "commitAfterChange": "a1b95807b51dd3bce9c0bff1093436d199739dfa", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\tthis.key = buffer.toString();", "+\t\t\t\t\tITypeBinding[] typeArgs = this.getTypeArguments();", "+\t\t\t\t\tfinal int typeArgsLength = typeArgs.length;", "+\t\t\t\t\tif (typeArgsLength != 0) {", "+\t\t\t\t\t\tbuffer.append('<');", "+\t\t\t\t\t\tfor (int i = 0; i < typeArgsLength; i++) {", "+\t\t\t\t\t\t\tbuffer.append(typeArgs[i].getKey());", "+\t\t\t\t\t\t\tif (i != typeArgsLength - 1) {", "+\t\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append('>');", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.key = String.valueOf(buffer);"]}], "num": 20728}
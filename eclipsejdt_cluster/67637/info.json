{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3922eb8741e52c4b1bdb1e748a91b28", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f7e77b860b200fec80c921e78403e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TestPessimisticProvider.java", "commitBeforeChange": "6e0c03610cbc826f510f4808a438e90bdc9be9b7", "commitAfterChange": "011e8e3a52083052e5657e005c0f9c924e859fa5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic IFileModificationValidator getFileModificationValidator()", "signatureAfterChange": " \t \tpublic FileModificationValidator getFileModificationValidator2()", "diff": ["-\t */", "-\tpublic IFileModificationValidator getFileModificationValidator() {", "-\t\treturn soleInstance;", "+\tpublic FileModificationValidator getFileModificationValidator2() {", "+\t\treturn new FileModificationValidator() {", "+\t\t\tpublic IStatus validateEdit(final IFile[] files, FileModificationValidationContext context) {", "+\t\t\t\tif (TestPessimisticProvider.markWritableOnEdit) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run(", "+\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor)\t{", "+\t\t\t\t\t\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\t\t\tsetReadOnly(files[i], false);", "+\t\t\t\t\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\treturn e.getStatus();", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t}", "+\t\t", "+\t\t\tpublic IStatus validateSave(IFile file) {", "+\t\t\t\tif (TestPessimisticProvider.markWritableOnSave) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tsetReadOnly(file, false);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\treturn e.getStatus();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t}", "+\t\t", "+\t\t\tvoid setReadOnly(IResource resource, boolean readOnly) throws CoreException {", "+\t\t\t\tif (Util.isReadOnlySupported()) {", "+\t\t\t\t\tResourceAttributes resourceAttributes = resource.getResourceAttributes();", "+\t\t\t\t\tif (resourceAttributes != null) {", "+\t\t\t\t\t\tresourceAttributes.setReadOnly(readOnly);", "+\t\t\t\t\t\tresource.setResourceAttributes(resourceAttributes);", "+\t\t\t\t\t}\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff3e79baa633ad11d8d0684b7f6fa7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TestPessimisticProvider.java", "commitBeforeChange": "6e0c03610cbc826f510f4808a438e90bdc9be9b7", "commitAfterChange": "011e8e3a52083052e5657e005c0f9c924e859fa5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic IStatus validateEdit(final IFile[] files, Object context)", "signatureAfterChange": " \t\t\tpublic IStatus validateEdit(final IFile[] files, FileModificationValidationContext context)", "diff": ["+\t\treturn new FileModificationValidator() {", "+\t\t\tpublic IStatus validateEdit(final IFile[] files, FileModificationValidationContext context) {", "+\t\t\t\tif (TestPessimisticProvider.markWritableOnEdit) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run(", "+\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor)\t{", "+\t\t\t\t\t\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\t\t\tsetReadOnly(files[i], false);", "+\t\t\t\t\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\treturn e.getStatus();", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t}", "-\tpublic IStatus validateEdit(final IFile[] files, Object context) {", "-\t\tif (markWritableOnEdit) {", "-\t\t\ttry {", "-\t\t\t\tResourcesPlugin.getWorkspace().run(", "-\t\t\t\t\tnew IWorkspaceRunnable() {", "-\t\t\t\t\t\tpublic void run(IProgressMonitor monitor)\t{", "-\t\t\t\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tsetReadOnly(files[i], false);", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t},", "-\t\t\t\t\tnull);", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t\treturn e.getStatus();", "-\t\t\t}", "-\t\t} ", "-\t\treturn Status.OK_STATUS;", "-\t}"]}], "num": 67637}
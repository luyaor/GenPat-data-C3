{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "753cfe65ed487c6e7e620609e67da729", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b8a10f79db61295b40343be6fbb9dd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 295, "signatureBeforeChange": " protected void consumeReferenceExpressionGenericTypeForm()", "signatureAfterChange": " protected void consumeReferenceExpressionGenericTypeForm()", "diff": ["-\t// ReferenceExpression ::= Name PushModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers Name PushRealModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t\tmethodReference = (SingleNameReference) getUnspecifiedReferenceOptimized();", "+\t\tmethodReference = new SingleNameReference(this.identifierStack[this.identifierPtr], this.identifierPositionStack[this.identifierPtr--]);", "+\t\tthis.identifierLengthPtr--;", "-", "-\t\tTypeReference rightSide = getUnannotatedTypeReference(0); // until we add support for X. @Inner Y, by design the type after '.' is unannotated.", "-\t\ttype = computeQualifiedGenericsFromRightSide(rightSide, dims);", "+\t\tAnnotation [][] annotationsOnDimensions = dims == 0 ? null : getAnnotationsOnDimensions(dims);", "+\t\tTypeReference rightSide = getTypeReference(0);", "+\t\ttype = computeQualifiedGenericsFromRightSide(rightSide, dims, annotationsOnDimensions);", "-\t\ttype = getUnannotatedTypeReference(dims); // annotations attached below.", "+\t\ttype = getTypeReference(dims);", "-\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "-\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "-\t\ttype.sourceStart = illegalModifiersSourceStart;", "-\t}", "-\t// Prefix annotations if any are on the expression stack, attach them now.", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\ttype.annotations = new Annotation[type.getAnnotatableLevels()][];", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.expressionStack,", "-\t\t\t\t(this.expressionPtr -= length) + 1,", "-\t\t\t\ttype.annotations[0] = new Annotation[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\tint annotStart = type.annotations[0][0].sourceStart;", "-\t\tif (annotStart < type.sourceStart) {", "-\t\t\ttype.sourceStart = annotStart;", "-\t\t}", "-\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "-\t}", "-", "-\tint illegalModifiers = this.intStack[this.intPtr--];", "-\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "-\t\tproblemReporter().invalidLocationForModifiers(type);", "-\t}", "-\tresetModifiers();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfecbd12df29fde0a4385a9c02c48bb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4e141be8003d1ef09b5a958dd38e851de76be5f5", "commitAfterChange": "d14fcf9bcec95873f54edd756055ca864aab7a2b", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 306, "signatureBeforeChange": " protected void consumeReferenceExpressionGenericTypeForm()", "signatureAfterChange": " protected void consumeReferenceExpressionGenericTypeForm()", "diff": ["-\t", "-\t// ReferenceExpression ::= Name BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+", "+\t// ReferenceExpression ::= Name PushModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers Name PushRealModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t", "+\tint typeSourceEnd = this.intStack[this.intPtr--];", "-\t// Code lifted from CastExpression consumption actions and pounded into shape ...", "+", "-\t\tTypeReference rightSide = getTypeReference(0);", "-\t\tParameterizedQualifiedTypeReference qualifiedParameterizedTypeReference = computeQualifiedGenericsFromRightSide(rightSide, dims);", "-\t\tthis.intPtr--;", "-\t\tif (newForm) {", "-\t\t\trexp = new ReferenceExpression(qualifiedParameterizedTypeReference, typeArguments, newEnd);", "-\t\t} else {", "-\t\t\trexp = new ReferenceExpression(qualifiedParameterizedTypeReference, typeArguments, methodReference);", "-\t\t}", "+\t\tTypeReference rightSide = getUnannotatedTypeReference(0); // until we add support for X. @Inner Y, by design the type after '.' is unannotated.", "+\t\ttype = computeQualifiedGenericsFromRightSide(rightSide, dims);", "-\t\ttype = getTypeReference(dims);", "-\t\tif (newForm) {", "-\t\t\trexp = new ReferenceExpression(type, typeArguments, newEnd);", "-\t\t} else {", "-\t\t\trexp = new ReferenceExpression(type, typeArguments, methodReference);", "-\t\t}", "-\t\tthis.intPtr --; // pop '<' position", "+\t\ttype = getUnannotatedTypeReference(dims); // annotations attached below.", "+\tthis.intPtr--; // pop '<' position", "+\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "+\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "+\t\ttype.sourceStart = illegalModifiersSourceStart;", "+\t}", "+\ttype.sourceEnd = typeSourceEnd;", "+\t", "+\trexp = newForm ? new ReferenceExpression(type, typeArguments, newEnd) : new ReferenceExpression(type, typeArguments, methodReference);", "+", "+\t// Prefix annotations if any are on the expression stack, attach them now.", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.expressionStack,", "+\t\t\t\t(this.expressionPtr -= length) + 1,", "+\t\t\t\ttype.annotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\tint annotStart = type.annotations[0].sourceStart;", "+\t\tif (annotStart < type.sourceStart) {", "+\t\t\ttype.sourceStart = annotStart;", "+\t\t}", "+\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "+\t}", "+", "+\tint illegalModifiers = this.intStack[this.intPtr--];", "+\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "+\t\tproblemReporter().invalidLocationForModifiers(type);", "+\t}", "+\tresetModifiers();"]}], "num": 34525}
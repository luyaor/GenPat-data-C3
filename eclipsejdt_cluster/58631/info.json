{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1970fd905f84e0957b170fad919169f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c985b8a7a254c95ab68259e9f74ad1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SignatureWrapper.java", "commitBeforeChange": "80e31481d0d6262559c156b1e1d04936f3ab697a", "commitAfterChange": "a071cbdaf211a260b8aa9c61822ac5501cee9c5c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic SignatureWrapper(char [] signature)", "signatureAfterChange": " \tpublic SignatureWrapper(char[] signature, boolean use15specifics, boolean useExternalAnnotations)", "diff": ["+\t}", "+\tpublic SignatureWrapper(char[] signature, boolean use15specifics, boolean useExternalAnnotations) {", "+\t\tthis.signature = signature;", "+\t\tthis.start = 0;", "+\t\tthis.end = this.bracket = -1;", "+\t\tthis.use15specifics = use15specifics;", "+\t\tthis.useExternalAnnotations = useExternalAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9343dbb6ddca60a46d7edae5090ae686", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": " public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tint [] exceptionToCatchBlockMap, \t\tArgument [] catchArguments, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "diff": ["+}", "+\t\tint [] exceptionToCatchBlockMap,", "+\t\tArgument [] catchArguments,", "+\tthis.catchArguments = catchArguments;", "+\tthis.exceptionToCatchBlockMap = exceptionToCatchBlockMap;", "+\t\tint catchBlock = this.exceptionToCatchBlockMap != null? this.exceptionToCatchBlockMap[i] : i;", "-\t\t\tthis.initsOnExceptions[i] = flowInfo.unconditionalCopy();", "+\t\t\tthis.initsOnExceptions[catchBlock] = flowInfo.unconditionalCopy();", "-\t\t\tthis.initsOnExceptions[i] = FlowInfo.DEAD_END;", "+\t\t\tthis.initsOnExceptions[catchBlock] = FlowInfo.DEAD_END;", "-\tthis.\tinitializationParent = initializationParent;", "+\tthis.initializationParent = initializationParent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d484e257eee5c9e9b9eccac87b6c556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " private void notifySourceElementRequestor(TypeParameter[] typeParameters)", "signatureAfterChange": " private ISourceElementRequestor.TypeParameterInfo[] getTypeParameterInfos(TypeParameter[] typeParameters)", "diff": ["-private void notifySourceElementRequestor(TypeParameter[] typeParameters) {", "-\tif (typeParameters != null) {", "-\t\tint typeParametersLength = typeParameters.length;", "-\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\tTypeParameter typeParameter = typeParameters[i];", "-\t\t\tTypeReference firstBound = typeParameter.type;", "-\t\t\tTypeReference[] otherBounds = typeParameter.bounds;", "-\t\t\tchar[][] typeParameterBounds = null;", "-\t\t\tif (firstBound != null) {", "-\t\t\t\tif (otherBounds != null) {", "-\t\t\t\t\tint otherBoundsLength = otherBounds.length;", "-\t\t\t\t\tchar[][] boundNames = new char[otherBoundsLength+1][];", "-\t\t\t\t\tboundNames[0] = CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.');", "-\t\t\t\t\tfor (int j = 0; j < otherBoundsLength; j++) {", "-\t\t\t\t\t\tboundNames[j+1] = ", "-\t\t\t\t\t\t\tCharOperation.concatWith(otherBounds[j].getParameterizedTypeName(), '.'); ", "-\t\t\t\t\t}", "-\t\t\t\t\ttypeParameterBounds = boundNames;", "-\t\t\t\t} else {", "-\t\t\t\t\ttypeParameterBounds = new char[][] { CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.')};", "+private ISourceElementRequestor.TypeParameterInfo[] getTypeParameterInfos(TypeParameter[] typeParameters) {", "+\tif (typeParameters == null) return null;", "+\tint typeParametersLength = typeParameters.length;", "+\tISourceElementRequestor.TypeParameterInfo[] result = new ISourceElementRequestor.TypeParameterInfo[typeParametersLength];", "+\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\tTypeReference firstBound = typeParameter.type;", "+\t\tTypeReference[] otherBounds = typeParameter.bounds;", "+\t\tchar[][] typeParameterBounds = null;", "+\t\tif (firstBound != null) {", "+\t\t\tif (otherBounds != null) {", "+\t\t\t\tint otherBoundsLength = otherBounds.length;", "+\t\t\t\tchar[][] boundNames = new char[otherBoundsLength+1][];", "+\t\t\t\tboundNames[0] = CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.');", "+\t\t\t\tfor (int j = 0; j < otherBoundsLength; j++) {", "+\t\t\t\t\tboundNames[j+1] = ", "+\t\t\t\t\t\tCharOperation.concatWith(otherBounds[j].getParameterizedTypeName(), '.'); ", "+\t\t\t\ttypeParameterBounds = boundNames;", "+\t\t\t} else {", "+\t\t\t\ttypeParameterBounds = new char[][] { CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.')};", "-\t\t\trequestor.enterTypeParameter(", "-\t\t\t\ttypeParameter.declarationSourceStart, ", "-\t\t\t\ttypeParameter.name, ", "-\t\t\t\ttypeParameter.sourceStart, ", "-\t\t\t\ttypeParameter.sourceEnd,", "-\t\t\t\ttypeParameterBounds);", "-\t\t\trequestor.exitTypeParameter(typeParameter.declarationSourceEnd);", "+\t\tISourceElementRequestor.TypeParameterInfo typeParameterInfo = new ISourceElementRequestor.TypeParameterInfo();", "+\t\ttypeParameterInfo.declarationStart = typeParameter.declarationSourceStart;", "+\t\ttypeParameterInfo.declarationEnd = typeParameter.declarationSourceEnd;", "+\t\ttypeParameterInfo.name = typeParameter.name;", "+\t\ttypeParameterInfo.nameSourceStart = typeParameter.sourceStart;", "+\t\ttypeParameterInfo.nameSourceEnd = typeParameter.sourceEnd;", "+\t\ttypeParameterInfo.typeParameterBounds = typeParameterBounds;", "+\t\tresult[i] = typeParameterInfo;", "+\treturn result;"]}], "num": 58631}
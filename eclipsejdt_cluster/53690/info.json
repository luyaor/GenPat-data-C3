{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bba3260d026576f4c59e8bd520e5dea8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f35871865d400636ad5cc6062aa82ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "600e48f032b359e080127669aade9cc1c66a15b1", "commitAfterChange": "0e6d4fe5469565f21baa2fd0ec88d178818c619b", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "\t \t \tpublic void testEnumConstantDeclaration()", "signatureAfterChange": " \tpublic void testEnumConstantDeclaration()", "diff": ["+\t// TODO (jeem) - remove deprecation after 3.1 M4", "+\t\tassertTrue(x.getAnonymousClassDeclaration() == null);", "+\t\t// TODO (jeem) - after 3.1 M4 remove mention of bodyDeclarations", "+\t\tgenericPropertyTest(x, new Property(\"AnonymousClassDeclaration\", false, AnonymousClassDeclaration.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tAnonymousClassDeclaration result = targetAst.newAnonymousClassDeclaration();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newClassInstanceCreation().setAnonymousClassDeclaration(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t// return AnonymousClassDeclaration that embeds x", "+\t\t\t\tAnonymousClassDeclaration s0 = x.getAST().newAnonymousClassDeclaration();", "+\t\t\t\tEnumDeclaration s1 = x.getAST().newEnumDeclaration();", "+\t\t\t\ts0.bodyDeclarations().add(s1);", "+\t\t\t\ts1.bodyDeclarations().add(x);", "+\t\t\t\treturn s0;", "+\t\t\t}", "+\t\t\tpublic void unwrap() {", "+\t\t\t\tEnumDeclaration s1 = (EnumDeclaration) x.getParent();", "+\t\t\t\ts1.bodyDeclarations().remove(x);", "+\t\t\t}", "+\t\t\tpublic ASTNode get() {", "+\t\t\t\treturn x.getAnonymousClassDeclaration();", "+\t\t\t}", "+\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\tx.setAnonymousClassDeclaration((AnonymousClassDeclaration) value);", "+\t\t\t}", "+\t\t});", "+", "+\t\t// check that TypeDeclarations in body are classified correctly", "+\t\tx.setAnonymousClassDeclaration(null);", "+\t\tAnonymousClassDeclaration w0 = ast.newAnonymousClassDeclaration();", "+\t\tx.setAnonymousClassDeclaration(w0);", "+\t\tTypeDeclaration w1 = ast.newTypeDeclaration();", "+\t\tw0.bodyDeclarations().add(w1);", "+", "+\t\tassertTrue(w1.isLocalTypeDeclaration() == false);", "+\t\tassertTrue(w1.isMemberTypeDeclaration() == true);", "+\t\tassertTrue(w1.isPackageMemberTypeDeclaration() == false);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "867a3967f7ad6acbe2da5dd0019b4d5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 322, "signatureBeforeChange": "\t \t \tpublic void testTypeDeclarationStatement()", "signatureAfterChange": "\t \t \tpublic void testTypeDeclarationStatement()", "diff": ["-\t\tTypeDeclaration x1 = ast.newTypeDeclaration();", "+\t\tAbstractTypeDeclaration x1 = ast.newTypeDeclaration();", "-\t\tassertTrue(x.getTypeDeclaration() == x1);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getTypeDeclaration() == x1);", "+\t\t} else {", "+\t\t\tassertTrue(x.getDeclaration() == x1);", "+\t\t}", "-\t\tgenericPropertyTest(x, new Property(\"TypeDeclaration\", true, TypeDeclaration.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tTypeDeclaration result = targetAst.newTypeDeclaration();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newTypeDeclarationStatement(result);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"TypeDeclaration\", true, TypeDeclaration.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tTypeDeclaration result = targetAst.newTypeDeclaration();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newTypeDeclarationStatement(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode wrap() {", "-\t\t\t\t// return TypeDeclaration that embeds x", "-\t\t\t\tTypeDeclaration s1 = ast.newTypeDeclaration();", "-\t\t\t\tMethodDeclaration s2 = ast.newMethodDeclaration();", "-\t\t\t\ts1.bodyDeclarations().add(s2);", "-\t\t\t\tBlock s3 = ast.newBlock();", "-\t\t\t\ts2.setBody(s3);", "-\t\t\t\ts3.statements().add(x);", "-\t\t\t\treturn s1;", "-\t\t\t}", "-\t\t\tpublic void unwrap() {", "-\t\t\t\tBlock s3 = (Block) x.getParent();", "-\t\t\t\ts3.statements().remove(x);", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getTypeDeclaration();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setTypeDeclaration((TypeDeclaration) value);", "-\t\t\t}", "-\t\t});", "-", "-\t}\t", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\t// return TypeDeclaration that embeds x", "+\t\t\t\t\tTypeDeclaration s1 = ast.newTypeDeclaration();", "+\t\t\t\t\tMethodDeclaration s2 = ast.newMethodDeclaration();", "+\t\t\t\t\ts1.bodyDeclarations().add(s2);", "+\t\t\t\t\tBlock s3 = ast.newBlock();", "+\t\t\t\t\ts2.setBody(s3);", "+\t\t\t\t\ts3.statements().add(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tBlock s3 = (Block) x.getParent();", "+\t\t\t\t\ts3.statements().remove(x);", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getTypeDeclaration();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setTypeDeclaration((TypeDeclaration) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"Declaration\", true, AbstractTypeDeclaration.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tAbstractTypeDeclaration result = targetAst.newTypeDeclaration();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newTypeDeclarationStatement(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\t// return TypeDeclaration that embeds x", "+\t\t\t\t\tTypeDeclaration s1 = ast.newTypeDeclaration();", "+\t\t\t\t\tMethodDeclaration s2 = ast.newMethodDeclaration();", "+\t\t\t\t\ts1.bodyDeclarations().add(s2);", "+\t\t\t\t\tBlock s3 = ast.newBlock();", "+\t\t\t\t\ts2.setBody(s3);", "+\t\t\t\t\ts3.statements().add(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tBlock s3 = (Block) x.getParent();", "+\t\t\t\t\ts3.statements().remove(x);", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getDeclaration();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setDeclaration((AbstractTypeDeclaration) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaac28dc0dae7d29f243ecc47c4fc16a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "c6d868d8783a57da635a4ee823bfa99a77283712", "commitAfterChange": "eb94d4f8322ccc35580c2be98b06636564603ba3", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "\t\t  \tpublic void testParameterizedType()", "signatureAfterChange": "\t\t  \tpublic void testParameterizedType()", "diff": ["-\t\t\t\tast.newParameterizedType(ast.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\t\t\tast.newParameterizedType(ast.newSimpleType(ast.newSimpleName(\"String\"))); //$NON-NLS-1$", "-\t\tfinal ParameterizedType x = ast.newParameterizedType(ast.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\tType t = ast.newSimpleType(ast.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\tfinal ParameterizedType x = ast.newParameterizedType(t); ", "+\t\tassertTrue(x.getType() == t);", "+\t\tassertTrue(x.getType().getParent() == x);", "+\t\tgenericPropertyTest(x, new Property(\"Type\", true, Type.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tSimpleType result = ", "+\t\t\t\ttargetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode wrap() {", "+\t\t\t\tParameterizedType s1 = ast.newParameterizedType(x); //$NON-NLS-1$", "+\t\t\t\treturn s1;", "+\t\t\t}", "+\t\t\tpublic void unwrap() {", "+\t\t\t\tParameterizedType s1 = (ParameterizedType) x.getParent();", "+\t\t\t\ts1.setType(ast.newSimpleType(ast.newSimpleName(\"z\"))); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tpublic ASTNode get() {", "+\t\t\t\treturn x.getType();", "+\t\t\t}", "+\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\tx.setType((Type) value);", "+\t\t\t}", "+\t\t});", "-\t\t\t\tParameterizedType s1 = ast.newParameterizedType(ast.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\tParameterizedType s1 = ast.newParameterizedType(ast.newSimpleType(ast.newSimpleName(\"foo\"))); //$NON-NLS-1$"]}], "num": 53690}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b2ef6db1a8d5beb89502c496cca9b25", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6940de2d88e1ddcd581a4ea2b1310604", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null);", "-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null);", "-\t\t\tif (qualifiedBinding instanceof VariableBinding) {", "-", "+\t\t\tif (qualifiedBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t// complete field members with missing fields type", "+\t\t\t\t// class X {", "+\t\t\t\t//   Missing f;", "+\t\t\t\t//   void foo() {", "+\t\t\t\t//     f.|", "+\t\t\t\t//   }", "+\t\t\t\t// }", "+\t\t\t\tif (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tif(ref.tokens.length == 1) {", "+\t\t\t\t\t\tfindFieldsAndMethodsFromMissingFieldType(ref.tokens[0], scope, ref, insideTypeAnnotation);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (qualifiedBinding instanceof VariableBinding) {", "-\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false);", "+\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false, null, null, null);", "+\t\t\t\t} else if (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tboolean proposeField = !this.requestor.isIgnored(CompletionProposal.FIELD_REF);", "+\t\t\t\t\tboolean proposeMethod = !this.requestor.isIgnored(CompletionProposal.METHOD_REF);", "+\t\t\t\t\tif (proposeField || proposeMethod) {", "+\t\t\t\t\t\tif (qualifiedBinding instanceof LocalVariableBinding) {", "+\t\t\t\t\t\t\t// complete local variable members with missing variables type", "+\t\t\t\t\t\t\t// class X {", "+\t\t\t\t\t\t\t//   void foo() {", "+\t\t\t\t\t\t\t//     Missing f;", "+\t\t\t\t\t\t\t//     f.|", "+\t\t\t\t\t\t\t//   }", "+\t\t\t\t\t\t\t// }", "+\t\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) qualifiedBinding;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tfindFieldsAndMethodsFromMissingType(", "+\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaration.type,", "+\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaringScope,", "+\t\t\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "-\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false, false);", "+\t\t\tif (qualifiedBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\t// complete method members with missing return type", "+\t\t\t\t// class X {", "+\t\t\t\t//   Missing f() {return null;}", "+\t\t\t\t//   void foo() {", "+\t\t\t\t//     f().|", "+\t\t\t\t//   }", "+\t\t\t\t// }", "+\t\t\t\tif (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tProblemMethodBinding problemMethodBinding = (ProblemMethodBinding) qualifiedBinding;\t\t\t\t", "+\t\t\t\t\tfindFieldsAndMethodsFromMissingReturnType(", "+\t\t\t\t\t\t\tproblemMethodBinding.selector,", "+\t\t\t\t\t\t\tproblemMethodBinding.parameters,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\taccess,", "+\t\t\t\t\t\t\tinsideTypeAnnotation);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false, false);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tfindFieldsAndMethods(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "+\t\t\t\t\tscope,", "+\t\t\t\t\taccess,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\taccess.receiver instanceof SuperReference,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull);", "-\t\t\t", "-\t\t\tfindFieldsAndMethods(", "-\t\t\t\tthis.completionToken,", "-\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "-\t\t\t\tscope,", "-\t\t\t\taccess,", "-\t\t\t\tscope,", "-\t\t\t\tfalse,", "-\t\t\t\taccess.receiver instanceof SuperReference);", "-\t\t\t\t\tfalse);", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull);", "-\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "-\t\t\t\t\tfindMethods(this.completionToken,", "+\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f734c3aedbdb8891bc15fd50255936b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "c223ae053787e6c843ac82068147df20215c916b", "commitAfterChange": "0211ebf94321d48ca7e59da13d2b4b3ea6399b61", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.value);", "+\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, expressions[i]);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, expressions[i], false);", "-\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\tif (valueType.isArrayType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, false);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (!(expressions[i] instanceof ClassLiteralAccess)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeClassLiteral(this.binding.declaringClass, this.name, expressions[i]);", "+\t\t\t\t\t\t\t\tExpression currentExpression = expressions[i];", "+\t\t\t\t\t\t\t\tif (!(currentExpression instanceof ClassLiteralAccess)) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeClassLiteral(this.binding.declaringClass, this.name, currentExpression);", "-\t\t\t\t\t// TODO (olivier) change message for annotation value must be an *enum* constant", "-\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, true);", "+\t\t\t\t} else if (this.value instanceof ArrayInitializer) {", "+\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) this.value;", "+\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\tfor (int i =0, max = expressions.length; i < max; i++) {", "+\t\t\t\t\t\t\tExpression currentExpression = expressions[i];", "+\t\t\t\t\t\t\tif (currentExpression instanceof NullLiteral) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, currentExpression, true);", "+\t\t\t\t\t\t\t} else if (currentExpression instanceof NameReference) {", "+\t\t\t\t\t\t\t\tNameReference nameReference = (NameReference) currentExpression;", "+\t\t\t\t\t\t\t\tfinal Binding nameReferenceBinding = nameReference.binding;", "+\t\t\t\t\t\t\t\tif (nameReferenceBinding.kind() == Binding.FIELD) {", "+\t\t\t\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) nameReferenceBinding;", "+\t\t\t\t\t\t\t\t\tif (!fieldBinding.declaringClass.isEnum()) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, currentExpression, true);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (this.value instanceof NameReference) {", "+\t\t\t\t\tNameReference nameReference = (NameReference) this.value;", "+\t\t\t\t\tfinal Binding nameReferenceBinding = nameReference.binding;", "+\t\t\t\t\tif (nameReferenceBinding.kind() == Binding.FIELD) {", "+\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) nameReferenceBinding;", "+\t\t\t\t\t\tif (!fieldBinding.declaringClass.isEnum()) {", "+\t\t\t\t\t\t\tif (!fieldBinding.type.isArrayType()) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, true);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 20842}
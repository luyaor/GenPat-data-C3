{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39c69a033e6d3aef3b2c49be3bd39806", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d83198798051e596a7b0e472de030f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "95bbd6610c1dc465de3a59ac7917e18ba6f30dcf", "commitAfterChange": "a1786a43c2c86a8c78f8e49de58ef6c055a9299d", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " public NameReference createSingleAssistNameReference(char[] assistName, long position)", "signatureAfterChange": " public NameReference createSingleAssistNameReference(char[] assistName, long position)", "diff": ["-", "-\t\t\tif(kind == K_BLOCK_DELIMITER) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=269493: Keywords are not proposed in a for", "+\t\t\t// loop without block. Completion while at K_CONTROL_STATEMENT_DELIMITER case needs to handled", "+\t\t\t// similar to the K_BLOCK_DELIMITER with minor differences.", "+\t\t\tif(kind == K_BLOCK_DELIMITER || kind == K_CONTROL_STATEMENT_DELIMITER) {", "+\t\t\t\t} else if(this.previousKind == K_CONTROL_STATEMENT_DELIMITER && this.previousInfo == IF) {", "+\t\t\t\t\tkeywords[count++]= Keywords.ELSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3c392a2fd63aaa8e6b2592979e66c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public int resolveLevel(Binding binding)", "signatureAfterChange": " public int resolveLevel(Binding binding)", "diff": ["-\t\tif (methodLevel == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;", "-\t\tmethod = method.original();", "+\t\tif (methodLevel == IMPOSSIBLE_MATCH) {", "+\t\t\tif (this.pattern.findDeclarations && this.pattern.mustResolveGeneric) {", "+\t\t\t\tmethodLevel = matchOverriddenMethod(method.declaringClass);", "+\t\t\t}", "+\t\t\tif (methodLevel == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;", "+\t\t} else {", "+\t\t\tmethod = method.original();", "+\t\t}"]}], "num": 2021}
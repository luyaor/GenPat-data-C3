{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0f777bc5d39bea24275bebbadabb2f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fd82efee4a205329158553dda79b746", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5280e1e8db473b5a94d57033a6d3cab2e44e385d", "commitAfterChange": "2f280867bbcfaf415b943516836db7a4100ee4c3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 90, "signatureBeforeChange": "  protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "signatureAfterChange": "  protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "diff": ["-\tif (extdirsClasspaths == null) {", "-\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\tString extdirsStr = System.getProperty(\"java.ext.dirs\"); //$NON-NLS-1$", "-\t\tif (extdirsStr == null) {", "-\t\t\tif (javaHome != null) {", "-\t\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(extdirsStr, File.pathSeparator);", "-\t\t\twhile (tokenizer.hasMoreTokens()) ", "-\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t * Feed extdirsClasspath with the entries found into the directories listed by", "-\t * extdirsNames.", "-\t */", "-\tif (extdirsClasspaths.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[extdirsClasspaths.size()];", "-\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "-\t\t\tdirectoriesToCheck[i] = new File((String) extdirsClasspaths.get(i));", "-\t\textdirsClasspaths.clear();", "-\t\tFile[][] extdirsJars = getLibrariesFiles(directoriesToCheck);", "-\t\tif (extdirsJars != null) {", "-\t\t\tfor (int i = 0, max = extdirsJars.length; i < max; i++) {", "-\t\t\t\tFile[] current = extdirsJars[i];", "-\t\t\t\tif (current != null) {", "-\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\tFileSystem.getClasspath(", "-\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, null); ", "-\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\textdirsClasspaths.add(classpath);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "-\t\t\t\t\tthis.logger.logIncorrectExtDirsEntry(directoriesToCheck[i].getAbsolutePath());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\textdirsClasspaths = handleExtdirs(extdirsClasspaths);", "-\t/*", "-\t * Feed endorsedDirClasspath according to:", "-\t * - -endorseddirs first if present;", "-\t * - else java.endorsed.dirs if defined;", "-\t * - else default extensions directory for the platform. (/lib/endorsed)", "-\t */", "-\tif (endorsedDirClasspaths == null) {", "-\t\tendorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\tString endorsedDirsStr = System.getProperty(\"java.endorsed.dirs\"); //$NON-NLS-1$", "-\t\tif (endorsedDirsStr == null) {", "-\t\t\tif (javaHome != null) {", "-\t\t\t\tendorsedDirClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(endorsedDirsStr, File.pathSeparator);", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tendorsedDirClasspaths.add(tokenizer.nextToken());", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t * Feed extdirsClasspath with the entries found into the directories listed by", "-\t * extdirsNames.", "-\t */", "-\tif (endorsedDirClasspaths.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[endorsedDirClasspaths.size()];", "-\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "-\t\t\tdirectoriesToCheck[i] = new File((String) endorsedDirClasspaths.get(i));", "-\t\tendorsedDirClasspaths.clear();", "-\t\tFile[][] endorsedDirsJars = getLibrariesFiles(directoriesToCheck);", "-\t\tif (endorsedDirsJars != null) {", "-\t\t\tfor (int i = 0, max = endorsedDirsJars.length; i < max; i++) {", "-\t\t\t\tFile[] current = endorsedDirsJars[i];", "-\t\t\t\tif (current != null) {", "-\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\tFileSystem.getClasspath(", "-\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, null); ", "-\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\tendorsedDirClasspaths.add(classpath);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "-\t\t\t\t\tthis.logger.logIncorrectEndorsedDirsEntry(directoriesToCheck[i].getAbsolutePath());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\tendorsedDirClasspaths = handleEndorseddirs(endorsedDirClasspaths);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c744a0c28996a33dbac4054549799f3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "commitAfterChange": "99aa173e65435610dfe4b542988d65ff8c2f55f2", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int INSIDE_ENDORSED_DIRS = 12;", "-\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\textdirsNames = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\tsourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\tclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList extdirsClasspaths = null;", "+\tArrayList endorsedDirClasspath = null;", "-\t\t\t\t\tif (extdirsNames.size() > 0) {", "+\t\t\t\t\tif (extdirsClasspaths != null) {", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtdirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-endorseddirs\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (endorsedDirClasspath != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_ENDORSED_DIRS;", "-\t\t\t\t", "-\t\t\t\tif (currentArg.equals(\"-sourcepath\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (sourcepathClasspaths.size() > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateSourcepath\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_SOURCE_PATH;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-extdirs\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (extdirsNames.size() > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtdirs\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_EXT_DIRS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "+\t\t\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\t\t\textdirsNames.add(tokenizer.nextToken());", "-\t\t\t\tif (extdirsNames.size() == 0) // empty entry", "-\t\t\t\t\textdirsNames.add(\"\"); //$NON-NLS-1$", "+\t\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_ENDORSED_DIRS :", "+\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\tendorsedDirClasspath = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t\t\twhile (tokenizer.hasMoreTokens())", "+\t\t\t\t\tendorsedDirClasspath.add(tokenizer.nextToken());", "-\t * Feed extdirsNames according to:", "+\t * Feed endorsedDirClasspath according to:", "-\tif (extdirsNames.size() == 0) {", "+\tif (extdirsClasspaths == null) {", "+\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\textdirsNames.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "+\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "-\t\t\t\textdirsNames.add(tokenizer.nextToken());", "+\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "-\tif (extdirsNames.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[extdirsNames.size()];", "+\tif (extdirsClasspaths.size() != 0) {", "+\t\tFile[] directoriesToCheck = new File[extdirsClasspaths.size()];", "-\t\t\tdirectoriesToCheck[i] = new File((String) extdirsNames.get(i));", "+\t\t\tdirectoriesToCheck[i] = new File((String) extdirsClasspaths.get(i));", "+\t\textdirsClasspaths.clear();", "+\t/*", "+\t * Feed endorsedDirClasspath according to:", "+\t * - -endorseddirs first if present;", "+\t * - else java.endorsed.dirs if defined;", "+\t * - else default extensions directory for the platform. (/lib/endorsed)", "+\t */", "+\tif (endorsedDirClasspath == null) {", "+\t\tendorsedDirClasspath = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\tString endorsedDirsStr = System.getProperty(\"java.endorsed.dirs\"); //$NON-NLS-1$", "+\t\tif (endorsedDirsStr == null) {", "+\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(endorsedDirsStr, File.pathSeparator);", "+\t\t\twhile (tokenizer.hasMoreTokens()) ", "+\t\t\t\tendorsedDirClasspath.add(tokenizer.nextToken());", "+\t\t}", "+\t}", "+\t", "+\t/*", "+\t * Feed extdirsClasspath with the entries found into the directories listed by", "+\t * extdirsNames.", "+\t */", "+\tif (endorsedDirClasspath.size() != 0) {", "+\t\tFile[] directoriesToCheck = new File[endorsedDirClasspath.size()];", "+\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "+\t\t\tdirectoriesToCheck[i] = new File((String) endorsedDirClasspath.get(i));", "+\t\tendorsedDirClasspath.clear();", "+\t\tFile[][] endorsedDirsJars = getLibrariesFiles(directoriesToCheck);", "+\t\tif (endorsedDirsJars != null) {", "+\t\t\tfor (int i = 0, max = endorsedDirsJars.length; i < max; i++) {", "+\t\t\t\tFile[] current = endorsedDirsJars[i];", "+\t\t\t\tif (current != null) {", "+\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "+\t\t\t\t\t\tFileSystem.Classpath classpath = ", "+\t\t\t\t\t\t\tFileSystem.getClasspath(", "+\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "+\t\t\t\t\t\t\t\t\tnull, null); ", "+\t\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\t\tendorsedDirClasspath.add(classpath);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "+\t\t\t\t\tthis.logger.logIncorrectEndorsedDirsEntry(directoriesToCheck[i].getAbsolutePath());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tbootclasspaths.addAll(endorsedDirClasspath);", "+"]}], "num": 33318}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3188e76d52d4f9d0fc80539f3b4afc34", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45ca6910641771c08f9c3c7f34ee9100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " protected boolean moveRecoveryCheckpoint()", "signatureAfterChange": " protected boolean moveRecoveryCheckpoint()", "diff": ["-\tint pos = lastCheckPoint;", "+\tint pos = this.lastCheckPoint;", "-\tscanner.startPosition = pos;", "-\tscanner.currentPosition = pos;", "-\tscanner.diet = false; // quit jumping over method bodies", "+\tthis.scanner.startPosition = pos;", "+\tthis.scanner.currentPosition = pos;", "+\tthis.scanner.diet = false; // quit jumping over method bodies", "-\tif (restartRecovery){", "-\t\tlastIgnoredToken = -1;", "-\t\tscanner.currentLine = null;", "+\tif (this.restartRecovery){", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tthis.scanner.currentLine = null;", "-\tlastIgnoredToken = nextIgnoredToken;", "-\tnextIgnoredToken = -1;", "+\tthis.lastIgnoredToken = this.nextIgnoredToken;", "+\tthis.nextIgnoredToken = -1;", "-\t\t\tnextIgnoredToken = scanner.getNextToken();", "-\t\t\tif(scanner.currentPosition == scanner.startPosition){", "-\t\t\t\tscanner.currentPosition++; // on fake completion identifier", "-\t\t\t\tnextIgnoredToken = -1;", "+\t\t\tthis.nextIgnoredToken = this.scanner.getNextToken();", "+\t\t\tif(this.scanner.currentPosition == this.scanner.startPosition){", "+\t\t\t\tthis.scanner.currentPosition++; // on fake completion identifier", "+\t\t\t\tthis.nextIgnoredToken = -1;", "-\t\t\tpos = scanner.currentPosition;", "+\t\t\tpos = this.scanner.currentPosition;", "-\t} while (nextIgnoredToken < 0);", "+\t} while (this.nextIgnoredToken < 0);", "-\tif (nextIgnoredToken == TokenNameEOF) { // no more recovery after this point", "-\t\tif (currentToken == TokenNameEOF) { // already tried one iteration on EOF", "-\t\t\tscanner.currentLine = null;", "+\tif (this.nextIgnoredToken == TokenNameEOF) { // no more recovery after this point", "+\t\tif (this.currentToken == TokenNameEOF) { // already tried one iteration on EOF", "+\t\t\tthis.scanner.currentLine = null;", "-\tlastCheckPoint = scanner.currentPosition;", "+\tthis.lastCheckPoint = this.scanner.currentPosition;", "-\tscanner.startPosition = pos;", "-\tscanner.currentPosition = pos;", "-\tscanner.commentPtr = -1;", "-\tscanner.foundTaskCount = 0;", "-\tscanner.currentLine = null;", "+\tthis.scanner.startPosition = pos;", "+\tthis.scanner.currentPosition = pos;", "+\tthis.scanner.commentPtr = -1;", "+\tthis.scanner.foundTaskCount = 0;", "+\tthis.scanner.currentLine = null;", "-\tint pos = lastCheckPoint;", "+\tint pos = this.lastCheckPoint;", "-\tscanner.startPosition = pos;", "-\tscanner.currentPosition = pos;", "-\tscanner.diet = false; // quit jumping over method bodies", "+\tthis.scanner.startPosition = pos;", "+\tthis.scanner.currentPosition = pos;", "+\tthis.scanner.diet = false; // quit jumping over method bodies", "-\tif (restartRecovery){", "-\t\tlastIgnoredToken = -1;", "+\tif (this.restartRecovery){", "+\t\tthis.lastIgnoredToken = -1;", "-\tlastIgnoredToken = nextIgnoredToken;", "-\tnextIgnoredToken = -1;", "+\tthis.lastIgnoredToken = this.nextIgnoredToken;", "+\tthis.nextIgnoredToken = -1;", "-\tboolean wasTokenizingWhiteSpace = scanner.tokenizeWhiteSpace;", "-\tscanner.tokenizeWhiteSpace = true;", "+\tboolean wasTokenizingWhiteSpace = this.scanner.tokenizeWhiteSpace;", "+\tthis.scanner.tokenizeWhiteSpace = true;", "-\t\t\t\tnextIgnoredToken = scanner.getNextToken();", "-\t\t\t\tswitch(nextIgnoredToken){", "+\t\t\t\tthis.nextIgnoredToken = this.scanner.getNextToken();", "+\t\t\t\tswitch(this.nextIgnoredToken){", "-\t\t\t\t\t\tif(scanner.getLineNumber(scanner.startPosition)", "-\t\t\t\t\t\t\t== scanner.getLineNumber(scanner.currentPosition)){", "-\t\t\t\t\t\t\tnextIgnoredToken = -1;", "+\t\t\t\t\t\tif(this.scanner.getLineNumber(this.scanner.startPosition)", "+\t\t\t\t\t\t\t== this.scanner.getLineNumber(this.scanner.currentPosition)){", "+\t\t\t\t\t\t\tthis.nextIgnoredToken = -1;", "-\t\t\t\t\t\tif(scanner.currentPosition == scanner.startPosition){", "-\t\t\t\t\t\t\tscanner.currentPosition++; // on fake completion identifier", "+\t\t\t\t\t\tif(this.scanner.currentPosition == this.scanner.startPosition){", "+\t\t\t\t\t\t\tthis.scanner.currentPosition++; // on fake completion identifier", "-\t\t\t\t\t\tnextIgnoredToken = -1;", "+\t\t\t\t\t\tthis.nextIgnoredToken = -1;", "-\t\t\t\tpos = scanner.currentPosition;", "+\t\t\t\tpos = this.scanner.currentPosition;", "-\t\t} while (nextIgnoredToken < 0);", "-\tscanner.tokenizeWhiteSpace = wasTokenizingWhiteSpace;", "+\t\t} while (this.nextIgnoredToken < 0);", "+\tthis.scanner.tokenizeWhiteSpace = wasTokenizingWhiteSpace;", "-\tif (nextIgnoredToken == TokenNameEOF) { // no more recovery after this point", "-\t\tif (currentToken == TokenNameEOF) { // already tried one iteration on EOF", "+\tif (this.nextIgnoredToken == TokenNameEOF) { // no more recovery after this point", "+\t\tif (this.currentToken == TokenNameEOF) { // already tried one iteration on EOF", "-\tlastCheckPoint = scanner.currentPosition;", "+\tthis.lastCheckPoint = this.scanner.currentPosition;", "-\tscanner.startPosition = pos;", "-\tscanner.currentPosition = pos;", "-\tscanner.commentPtr = -1;", "+\tthis.scanner.startPosition = pos;", "+\tthis.scanner.currentPosition = pos;", "+\tthis.scanner.commentPtr = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c50592ea90e91d355a33ef9b6ee8b81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["-\t\t\t\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "-\t\t\t\t\t\t\tString description = null;", "-\t\t\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "-\t\t\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundContainerPath\", description)); //$NON-NLS-1$", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND, javaProject, path);", "-\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(", "-\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY,", "-\t\t\t\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidContainer\", description)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY, javaProject, path);", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, javaProject, path);", "+\t\t\t\tif (entry.getExclusionPatterns() != null ", "+\t\t\t\t\t\t&& entry.getExclusionPatterns().length > 0", "+\t\t\t\t\t\t&& JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, path);", "+\t\t\t\t}", "+\t\t\t\tif (entry.getOutputLocation() != null && JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, path);", "+\t\t\t\t}"]}], "num": 60714}
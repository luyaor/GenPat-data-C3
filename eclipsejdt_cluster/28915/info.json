{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "848f8e9f34efd674b45c91ee1e3f325a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00eae33c44ab471c3c2af879a815bf15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "b308074bc5b31f3a5857e47f87565296fbba4a15", "commitAfterChange": "d36a5b020e7b8fc57d912810db0ffb9dd045eb9a", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "  \tpublic void test163()", "signatureAfterChange": "  \tpublic void test163()", "diff": ["-\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"1. WARNING in test\\\\X.java (at line 2)\\n\"+", "+\t\t\t\"\timport test.copy.VisibilityPublic;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"+", "+\t\t\t\"The import test.copy.VisibilityPublic is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" +", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\n\" +", "-\t\t\t\"3. ERROR in test\\\\X.java (at line 9)\\n\" +", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 9)\\n\" +", "-\t\t\t\"4. ERROR in test\\\\X.java (at line 10)\\n\" +", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 10)\\n\" +", "-\t\t\t\"5. ERROR in test\\\\X.java (at line 11)\\n\" +", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 11)\\n\" +", "-\t\t\t\"6. ERROR in test\\\\X.java (at line 12)\\n\" +", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 12)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03169d1d57bd689950aad08b842712b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java", "commitBeforeChange": "027433d18c80815de3076b7fd489422a48401f1a", "commitAfterChange": "e060e0428f7f92647e77ad8da2c7818eb4c4e3a7", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test438952()", "signatureAfterChange": " public void test438952()", "diff": ["-// FIXME: Recovered parse tree isn't quite correct, but is harmless.", "-\t\t\t\t\t\"    new SO() {\\n\" + ", "-\t\t\t\t\t\"      {\\n\" + ", "-\t\t\t\t\t\"      }\\n\" + ", "-\t\t\t\t\t\"      void test() {\\n\" + ", "-\t\t\t\t\t\"        <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"      }\\n\" + ", "-\t\t\t\t\t\"      void test() {\\n\" + ", "-\t\t\t\t\t\"        <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"      }\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"  {\\n\" + ", "-\t\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\t\"  void test() {\\n\" + ", "-\t\t\t\t\t\"    <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"  }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a21bc243499ba40bda9efab05290fe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " \tpublic void test183()", "signatureAfterChange": " \tpublic void test183()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tObject a2 = (Hashtable) o;\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Hashtable is a raw type. References to generic type Hashtable<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 18)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 27)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tabstract class Z3 extends Hashtable {\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Hashtable is a raw type. References to generic type Hashtable<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 27)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b8e13191db247dcc1ac7309229a84ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "commitAfterChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "methodNumberBeforeChange": 1441, "methodNumberAfterChange": 1441, "signatureBeforeChange": " public void test1407()", "signatureAfterChange": " public void test1407()", "diff": ["-\t\t\t\"2. ERROR in Foo.java (at line 4)\\n\" + ", "-\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Object to Foo\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"2. WARNING in Foo.java (at line 4)\\n\" + ", "-\t\t\t\"4. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"3. WARNING in Foo.java (at line 4)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db70a9f685b5ad287d0dfe8511a5840", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 1210, "methodNumberAfterChange": 1210, "signatureBeforeChange": " public void test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" +", "+\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" +", "+\t\t\"\t                                                              ^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"5. WARNING in X.java (at line 7)\\n\" +", "+\t\t\"6. WARNING in X.java (at line 7)\\n\" +", "-\t\t\"6. WARNING in X.java (at line 11)\\n\" +", "+\t\t\"7. WARNING in X.java (at line 11)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f13931f04c0b3e8b1d19f32bc2682d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "33eef2073f376aa3fd5d07ca099391b28b7ce6dc", "commitAfterChange": "74418c8468270552cc550f0a4d106149287e4ed4", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference\\\" value=\\\"enabled\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14f5beadfc00339039a72cf6ab29ed3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "7cfd16cce02bf6c15cc69b5ed56b855234dd7ed5", "commitAfterChange": "95a3577e20e21c393d791bf9201b4e713942cf20", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  public void test62()", "signatureAfterChange": "  public void test62()", "diff": ["-\t\t\"    {\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"    {\\n\" +", "-\t\t\"      ;\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"    {\\n\" +", "-\t\t\"    }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a34eb50750d958187bb7fb52339b6dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "8e257a3aaf425ec95693dbfcce4a3e04f63a99fd", "commitAfterChange": "b4bc0528b8236ab3f6100faade4f9f0cb79aaa89", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " public void test0139()", "signatureAfterChange": " public void test0139()", "diff": ["+public void test0139(){", "+\tString str =", "+\t\t\"public class X  extends Z. #  {\\n\" +", "+\t\t\"}\";", "+", "+", "+\tString completeBehind = \"Z.\";", "+\tint cursorLocation = str.indexOf(\"Z.\") + completeBehind.length() - 1;", "+\tString expectedCompletionNodeToString = \"<CompleteOnClass:Z.>\";", "+\tString expectedParentNodeToString = \"<NONE>\";", "+\tString completionIdentifier = \"\";", "+\tString expectedReplacedSource = \"Z.\";", "+\tString expectedUnitDisplayString =", "+\t\t\"public class X extends <CompleteOnClass:Z.> {\\n\" + ", "+\t\t\"  {\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"  public X() {\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"}\\n\"", "+\t\t;", "+", "+\tcheckDietParse(", "+\t\t\tstr.toCharArray(),", "+\t\t\tcursorLocation,", "+\t\t\texpectedCompletionNodeToString,", "+\t\t\texpectedParentNodeToString,", "+\t\t\texpectedUnitDisplayString,", "+\t\t\tcompletionIdentifier,", "+\t\t\texpectedReplacedSource,", "+\t\"diet ast\");", "+}", "-public void test0139(){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a6978af632f958e0116a2fb61a466cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c53fb291a849342748306e59b6959038f8ec1321", "commitAfterChange": "d5a32e245b27c645dcf70347396d7253765682d3", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test061()", "signatureAfterChange": " public void test061()", "diff": ["-\t\t\"The enum constant A needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"The switch on the enum type X should have a default case\\n\" +", "-\t\t\"The enum constant B needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"The enum constant A needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"The enum constant B needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"4. WARNING in X.java (at line 8)\\n\" +", "+\t\t\"\tswitch (x) {\\n\" +", "+\t\t\"\t        ^\\n\" +", "-\t\t\"4. ERROR in X.java (at line 9)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 9)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab2860c3e539a58d2c6dab9fd329f53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\"1. ERROR in I.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tinterface J extends I { @Override void clone(); }\\r\\n\" + ", "-\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "-\t\t\t\"The method clone() of type J must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in I.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tinterface J extends I { @Override void clone(); }\\r\\n\" + ", "+\t\t\t\"1. WARNING in I.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type J must override a superclass method\\n\" + ", "-\t\t\t\"1. ERROR in I.java (at line 1)\\n\" + ", "-\t\t\t\"\tinterface I { @Override void clone(); }\\n\" + ", "-\t\t\t\"\t                             ^^^^^^^\\n\" + ", "-\t\t\t\"The method clone() of type I must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in I.java (at line 1)\\n\" + ", "+\t\t\t\"1. WARNING in I.java (at line 1)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 1)\\n\" + ", "+\t\t\t\"\tinterface I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type I must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c515b7bbf3cdbf31455a0aa68d8cb81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam07() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternNestedParam07() throws CoreException", "diff": ["-\t// Selection is really nasty in this case as match selection sometimes is \"Generic<?>\" !!!", "-\t\tsearch(\"GM.Generic<?, ?, ?>\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"GM<Object, Exception, RuntimeException>.Generic<?, ?, ?>\", TYPE, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [Generic<?>] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f5e61748853fafaea186c2a17cb69f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "f914881dbc94abaf445f0359517391331cec0c1f", "commitAfterChange": "642dc124ef5eccd7fd363b9a3443fef6794a2e79", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "diff": ["+\t\t\t\"Test\\n\" + ", "+\t\t\t\"Test$Inner\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24923c658e5d31e4eda1f8b863c0ad6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "4e8e5a98cf0190fbfa5945ebb361f51b261ba210", "commitAfterChange": "d245300e4e786a6fa7e5da9bef5c249b7208c09a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void test002()", "signatureAfterChange": "  \tpublic void test002()", "diff": ["+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "-\t\t\t\"0 0 1 10 10\");", "+\t\t\t\"<0 0 1 10 10 >\");", "+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "-\t\t\t\"0 0 1 10 10\",", "+\t\t\t\"<0 0 1 10 10 >\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28a48f897c06d2c82c1557ceaead5af6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "cc547ec5c074d17ff882a095dbec68dcad72a87a", "commitAfterChange": "99250bacae54994417cccb9e6d497671bd34c73a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test018()", "signatureAfterChange": " public void test018()", "diff": ["-\t\t\"  // Stack: 4, Locals: 6\\n\" + ", "+\t\t\"  // Stack: 4, Locals: 4\\n\" + ", "-\t\t\"     9  astore 5\\n\" + ", "-\t\t\"    11  iconst_0\\n\" + ", "-\t\t\"    12  istore_3\\n\" + ", "-\t\t\"    13  aload 5\\n\" + ", "-\t\t\"    15  arraylength\\n\" + ", "-\t\t\"    16  istore 4\\n\" + ", "-\t\t\"    18  goto 36\\n\" + ", "-\t\t\"    21  aload 5\\n\" + ", "-\t\t\"    23  iload_3\\n\" + ", "-\t\t\"    24  iaload\\n\" + ", "-\t\t\"    25  istore_2 [e]\\n\" + ", "-\t\t\"    26  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\"    29  iload_2 [e]\\n\" + ", "-\t\t\"    30  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + ", "-\t\t\"    33  goto 42\\n\" + ", "-\t\t\"    36  iload_3\\n\" + ", "-\t\t\"    37  iload 4\\n\" + ", "-\t\t\"    39  if_icmplt 21\\n\" + ", "-\t\t\"    42  return\\n\" + ", "+\t\t\"     9  dup\\n\" + ", "+\t\t\"    10  astore_3\\n\" + ", "+\t\t\"    11  arraylength\\n\" + ", "+\t\t\"    12  ifeq 26\\n\" + ", "+\t\t\"    15  aload_3\\n\" + ", "+\t\t\"    16  iconst_0\\n\" + ", "+\t\t\"    17  iaload\\n\" + ", "+\t\t\"    18  istore_2 [e]\\n\" + ", "+\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    22  iload_2 [e]\\n\" + ", "+\t\t\"    23  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + ", "+\t\t\"    26  return\\n\" + ", "-\t\t\"        [pc: 26, line: 6]\\n\" + ", "-\t\t\"        [pc: 33, line: 7]\\n\" + ", "-\t\t\"        [pc: 36, line: 5]\\n\" + ", "-\t\t\"        [pc: 42, line: 9]\\n\" + ", "+\t\t\"        [pc: 19, line: 6]\\n\" + ", "+\t\t\"        [pc: 26, line: 9]\\n\" + ", "-\t\t\"        [pc: 0, pc: 43] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\"        [pc: 8, pc: 43] local: tab index: 1 type: int[]\\n\" + ", "-\t\t\"        [pc: 26, pc: 36] local: e index: 2 type: int\\n\";", "+\t\t\"        [pc: 0, pc: 27] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 27] local: tab index: 1 type: int[]\\n\" + ", "+\t\t\"        [pc: 19, pc: 26] local: e index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a9f3a4f6e86d4ab7f4b9c5ecc488f31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "f966b547afe1ce6e5e600680e6f3625db1aa756f", "commitAfterChange": "9d0a82ef5a22888c642513ca181ce9549bbdb17a", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " public void test166()", "signatureAfterChange": " public void test166()", "diff": ["-\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"The expression of type short is boxed into Integer\\n\" + ", "+\t\t\"Type mismatch: cannot convert from short to Integer\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\"The expression of type byte is boxed into Integer\\n\" + ", "+\t\t\"Type mismatch: cannot convert from byte to Integer\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"The expression of type char is boxed into Integer\\n\" + ", "+\t\t\"Type mismatch: cannot convert from char to Integer\\n\" + ", "-\t\t\"7. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\"The expression of type short is boxed into Integer\\n\" + ", "+\t\t\"Type mismatch: cannot convert from short to Integer\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"8. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\"The expression of type byte is boxed into Integer\\n\" + ", "+\t\t\"Type mismatch: cannot convert from byte to Integer\\n\" + ", "-\t\t\"9. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\"9. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\"The expression of type char is boxed into Integer\\n\" + ", "+\t\t\"Type mismatch: cannot convert from char to Integer\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1468a99150a38bce0df0d5b41dbf84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "f914881dbc94abaf445f0359517391331cec0c1f", "commitAfterChange": "642dc124ef5eccd7fd363b9a3443fef6794a2e79", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 132, "signatureBeforeChange": " \tpublic void testBug92944_CLASS() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS() throws CoreException", "diff": ["+\t\t\t\"Test\\n\" + ", "+\t\t\t\"Test$Inner\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d32f5e34e87cfef3875f7153b0bd976", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 763, "methodNumberAfterChange": 764, "signatureBeforeChange": " public void test758()", "signatureAfterChange": " public void test758()", "diff": ["-\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" + ", "-\t\t\"\tstatic class EntryMap<K, V> {\\r\\n\" + ", "-\t\t\"\t                      ^\\n\" + ", "-\t\t\"The type parameter K is hiding the type K\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 2)\\r\\n\" + ", "-\t\t\"\tstatic class EntryMap<K, V> {\\r\\n\" + ", "-\t\t\"\t                         ^\\n\" + ", "-\t\t\"The type parameter V is hiding the type V\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 12)\\r\\n\" + ", "-\t\t\"\tEntryMap<K,V>.Entry entry = (EntryMap.Entry) internalGet(key);\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"\tEntryMap<K,V>.Entry entry = (EntryMap.Entry) internalGet(key);\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 12)\\r\\n\" + ", "-\t\t\"\tEntryMap<K,V>.Entry entry = (EntryMap.Entry) internalGet(key);\\r\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"\tEntryMap<K,V>.Entry entry = (EntryMap.Entry) internalGet(key);\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 14)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e97eb5f2f5d77952843f4233a223073", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "c31c921d319cbf1346e5bfb26cf42ff15297484d", "commitAfterChange": "2becf6dcab514ae8708935b2b42eed94f2bad821", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": " \tpublic void test049()", "signatureAfterChange": " \tpublic void test049()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tclass Y<T extends A> extends X<T> {\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"Duplicate methods named id with the parameters (A) and (T) are defined by the type X<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"Method id(T) has the same erasure id(A) as another method in type Y<T>\\n\" +", "+\t\t\t\"Name clash: The method id(T) of type Y<T> has the same erasure as id(A) of type X<T> but does not override it\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3863d9c7083d6c963b68444348a88dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 1214, "methodNumberAfterChange": 1214, "signatureBeforeChange": " public void test1185()", "signatureAfterChange": " public void test1185()", "diff": ["-\t\t\"1. WARNING in X.java (at line 2)\\n\" +", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\"\t<T> void foo(Class<X> c) {};\\n\" +", "+\t\t\"\t         ^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Method foo(Class<X>) has the same erasure foo(Class<T>) as another method in type X<U,V>\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 2)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\"3. ERROR in X.java (at line 3)\\n\" +", "-\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\"4. ERROR in X.java (at line 4)\\n\" +", "+\t\t\"\tvoid foo2(Class<X<U, V>> c) {};\\n\" +", "+\t\t\"\t     ^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Duplicate method foo2(Class<X<U,V>>) in type X<U,V>\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"5. ERROR in X.java (at line 5)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42338a3eedbdf3ef07b2970704f63f5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\t* @see G#G(Object)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t* @see G#G(Exception)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Exception) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic class X extends G<Exception> {\\n\" +", "-\t\t\t\"\t                         ^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tX(Exception exc) { super(exc);}\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^\\n\" +", "-\t\t\t\"The constructor G(E) refers to the missing type E\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tclass G<E extends Exception> {\\n\" +", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\tG(E e) {}\\n\" +", "-\t\t\t\"\t  ^\\n\" +", "-\t\t\t\"E cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t* @see G#G(Object)\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic class X extends G<Exception> {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tclass G<E extends Exception> {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a459d9286ddba016a592e7d35352de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "e4b120541cf6c404fcc534d957fc35fe80d78035", "commitAfterChange": "50d1489a949b2e888c9f126b8f39d1c4ff67eaa2", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": " \tpublic void test0300_switch()", "signatureAfterChange": " \tpublic void test0300_switch()", "diff": ["-\t// WORK minimize", "-\t\t\t\t\"\tint kind;\\n\" + ", "-\t\t\t\t\"\tX parent;\\n\" + ", "-\t\t\t\t\"\tObject[] foo() { return null; }\\n\" + ", "-\t\t\t\t\"\tprivate void findTypeParameters(X scope) {\\n\" + ", "-\t\t\t\t\"\t\tObject[] typeParameters = null;\\n\" + ", "-\t\t\t\t\"\t\twhile (scope != null) {\\n\" + ", "-\t\t\t\t\"\t\t\ttypeParameters = null;\\n\" + ", "-\t\t\t\t\"\t\t\tswitch (scope.kind) {\\n\" + ", "-\t\t\t\t\"\t\t\t\tcase 0 :\\n\" + ", "-\t\t\t\t\"\t\t\t\t\ttypeParameters = foo();\\n\" + ", "-\t\t\t\t\"\t\t\t\t\tbreak;\\n\" + ", "-\t\t\t\t\"\t\t\t\tcase 1 :\\n\" + ", "-\t\t\t\t\"\t\t\t\t\ttypeParameters = foo();\\n\" + ", "-\t\t\t\t\"\t\t\t\t\tbreak;\\n\" + ", "-\t\t\t\t\"\t\t\t\tcase 2 :\\n\" + ", "-\t\t\t\t\"\t\t\t\t\treturn;\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "-\t\t\t\t\"\t\t\tif(typeParameters != null) {\\n\" + ", "-\t\t\t\t\"\t\t\t\tfoo();\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "-\t\t\t\t\"\t\t\tscope = scope.parent;\\n\" + ", "+\t\t\t\t\"\tint k;\\n\" + ", "+\t\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\t\"\t\tObject o = null;\\n\" + ", "+\t\t\t\t\"\t\tswitch (k) {\\n\" + ", "+\t\t\t\t\"\t\t\tcase 0 :\\n\" + ", "+\t\t\t\t\"\t\t\t\to = new Object();\\n\" + ", "+\t\t\t\t\"\t\t\t\tbreak;\\n\" + ", "+\t\t\t\t\"\t\t\tcase 2 :\\n\" + ", "+\t\t\t\t\"\t\t\t\treturn;\\n\" + ", "+\t\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\t\"\t\tif(o == null) { /* */\t}\\n\" + // quiet: don't know whether came from 0 or default", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"},", "+\t\t\t\"\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "444ac58fdd3d174f0ef936d708197d7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tpublic void testBug112346()", "signatureAfterChange": " \tpublic void testBug112346()", "diff": ["-\t\t\t\"1. ERROR in Test.java (at line 3)\\n\" + ", "-\t\t\t\"\t* @see Test#field\\n\" + ", "-\t\t\t\"\t            ^^^^^\\n\" + ", "-\t\t\t\"Javadoc: field cannot be resolved or is not a field\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Test.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @see Test#foo()\\n\" + ", "-\t\t\t\"\t            ^^^\\n\" + ", "-\t\t\t\"Javadoc: The method foo() is undefined for the type Test\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in Test.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in Test.java (at line 6)\\n\" + ", "-\t\t\t\"4. ERROR in Test.java (at line 7)\\n\" + ", "+\t\t\t\"2. ERROR in Test.java (at line 7)\\n\" + ", "-\t\t\t\"5. ERROR in Test.java (at line 8)\\n\" + ", "+\t\t\t\"3. ERROR in Test.java (at line 8)\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cee95753420da4e8820480d4e02a03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void test401939b()", "signatureAfterChange": " public void test401939b()", "diff": ["-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { while (FALSE) throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t                           ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Unreachable code\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { while (TRUE) throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { while (POI) throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { while (NIJAM) throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Unreachable code\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"5. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"7. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"8. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { if (true) throw new Exception(); else throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Dead code\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"9. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\t\t\"8. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\t\t\"\t                        ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"10. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { if (false) throw new Exception(); else throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"11. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\t\"9. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4605e5541730ca3240458071edd96527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test102()", "signatureAfterChange": " \tpublic void test102()", "diff": ["-\t        \"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tSet<SomeEnum> set1 = EnumSet.of(SomeEnum.A);\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tSet<SomeEnum> set2 = EnumSet.of(SomeEnum.foo());\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 19)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "477f99d7c3b9d263a2af871c5f9e95c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "d7dbf4b6a7a791cc09b1ea69860109ffe37e787d", "commitAfterChange": "2f564f845c82f2938387445bc2844eaffc66b84f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["+        \"      redundantSuperinterface                + find redundant superinterfaces\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bb56f38cdb6548e8809dd14d209857a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a7fe6395dce54d2384dd4aa345db8c43a8d1a565", "commitAfterChange": "8b8c1ed665af3bdbf0dad55abbadedba77110867", "methodNumberBeforeChange": 648, "methodNumberAfterChange": 648, "signatureBeforeChange": "\t\t\t \tpublic void test0630()", "signatureAfterChange": "\t\t\t \tpublic void test0630()", "diff": ["+\t\t\t\t\"@SuppressWarnings(\\\"null\\\")\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 18)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bee0a070b0f2e0ad65c814a80ec3f06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "8c76b4014ea5428c07ebba6a1cc324074d6e35bd", "commitAfterChange": "ff2a27470c07ef3625cccb4ee1e5803e3112da43", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testStringPatternAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternAnyStrings04() throws CoreException", "diff": ["-\t\tsearch(\"*Member*\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"Member*\", TYPE, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c87318501fdd207964770ac426fbb45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "b308074bc5b31f3a5857e47f87565296fbba4a15", "commitAfterChange": "d36a5b020e7b8fc57d912810db0ffb9dd045eb9a", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "  \tpublic void test158()", "signatureAfterChange": "  \tpublic void test158()", "diff": ["-\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"1. WARNING in test\\\\X.java (at line 2)\\n\"+", "+\t\t\t\"\timport test.copy.VisibilityPublic;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"+", "+\t\t\t\"The import test.copy.VisibilityPublic is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" +", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\n\" +", "-\t\t\t\"3. ERROR in test\\\\X.java (at line 9)\\n\" +", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 9)\\n\" +", "-\t\t\t\"4. ERROR in test\\\\X.java (at line 10)\\n\" +", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 10)\\n\" +", "-\t\t\t\"5. ERROR in test\\\\X.java (at line 11)\\n\" +", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 11)\\n\" +", "-\t\t\t\"6. ERROR in test\\\\X.java (at line 12)\\n\" +", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 12)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cf5245f406a7431a4af0c3e85ea7027", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": "\t\t \tpublic void test243()", "signatureAfterChange": "\t\t \tpublic void test243()", "diff": ["-\t\t\t\t\"    public A foo() { return this; }\\n\" +", "+\t\t\t\t\"    @Override public A foo() { return this; }\\n\" +", "-\t\t\t\t\"    public X foo() { return new X(); }\\n\" +", "-\t\t\t\t\"    public B foo() { return this; }\\n\" +", "+\t\t\t\t\"    @Override public X foo() { return new X(); }\\n\" +", "+\t\t\t\t\"    @Override public B foo() { return this; }\\n\" +", "-\t\t\t\t\"    public X foo() { return new X(); }\\n\" +", "+\t\t\t\t\"    @Override public X foo() { return new X(); }\\n\" +", "-\t\t\t\"1. WARNING in SubTypes.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic A foo() { return this; }\\n\" + ", "-\t\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\t\"The method foo() of type A should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in SubTypes.java (at line 5)\\n\" + ", "-\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "-\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"1. ERROR in SubTypes.java (at line 5)\\n\" + ", "+\t\t\t\"\t@Override public X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + ", "-\t\t\t\"3. ERROR in SubTypes.java (at line 6)\\n\" + ", "-\t\t\t\"\tpublic B foo() { return this; }\\n\" + ", "-\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"2. ERROR in SubTypes.java (at line 6)\\n\" + ", "+\t\t\t\"\t@Override public B foo() { return this; }\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + ", "-\t\t\t\"4. ERROR in SubTypes.java (at line 9)\\n\" + ", "-\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "-\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"3. ERROR in SubTypes.java (at line 9)\\n\" + ", "+\t\t\t\"\t@Override public X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d402e376b8e6a331ec72e28afa8b6e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b9c215c1a0014055731b42921e6d8437fe5d1c30", "commitAfterChange": "cf30dcc5cf110d772b62d35f57e0c35d494f0e46", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["+\t\t\t\"Type safety: The method iterator() belongs to the raw type List. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tvoid m2() { for (Iterator<X> i = list().iterator(); i.hasNext();); }  // unsafe conversion\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"8. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"9. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 11)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4db312ed64d55fc4195b7736295674ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "5d2e6e466ee272d62f273fff98dd2423f77bd2f3", "commitAfterChange": "e702e6a53e23b4f475e9578e987e56b628fcf8d7", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"      null                 missing or redundant null check\\n\" +", "+        \"      null                 potential missing or redundant null check\\n\" + ", "+        \"      nullDereference      missing null check\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e04fd32c63ea03a8ed927aab97cef0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5147f5a5f17d6e4dce9e06801af75e51b27b5773", "commitAfterChange": "a86b349626dbe62e03a6d150d88d335126baba70", "methodNumberBeforeChange": 818, "methodNumberAfterChange": 818, "signatureBeforeChange": " public void test812()", "signatureAfterChange": " public void test812()", "diff": ["-\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" + ", "-\t\t\"\tprivate T t;\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"\tprivate T t;\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 3)\\r\\n\" + ", "-\t\t\"\tprivate X<?>.Inner inner;\\r\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tprivate X<?>.Inner inner;\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tprivate X<?>.Inner[] inners;\\r\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tprivate X<?>.Inner[] inners;\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 7)\\r\\n\" + ", "-\t\t\"\tthis.inner = new X.Inner();\\r\\n\" + ", "-\t\t\"\t             ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The expression of type X.Inner needs unchecked conversion to conform to X<?>.Inner\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tthis.inners = new X.Inner[10];\\r\\n\" + ", "-\t\t\"\t              ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The expression of type X.Inner[] needs unchecked conversion to conform to X<?>.Inner[]\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 9)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ec4558f962d9e88fa4dbd29ccf6d588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 474, "methodNumberAfterChange": 474, "signatureBeforeChange": " \tpublic void test470()", "signatureAfterChange": " \tpublic void test470()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tComparable s1 = choose(true, \\\"string\\\", new Integer(1));\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tComparable s3 = choose(true, new Integer(1), new Float(2));\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f436b6925621c785114f8b130a23108", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c21920e168213fd0aca47b013f14cfc667141d9a", "commitAfterChange": "6ab08c93576091a47827aa45cdb7ba0e6cb43f77", "methodNumberBeforeChange": 800, "methodNumberAfterChange": 800, "signatureBeforeChange": " public void test0779() throws Exception", "signatureAfterChange": " public void test0779() throws Exception", "diff": ["-\t\t\tCOLLECTION_AND_LIST_IMPL_JRE8.replaceAll(\"\\\\*\", \"String\") +", "-\t\t\tITERABLE_IMPL_JRE8.replaceAll(\"\\\\*\", \"String\") +", "-\tString constantPoolIdx = IS_JRE_8 ? \"73\" : \"36\"; // depends on whether or not stubs for JRE8 default methods are included", "-\t\t\"    2  invokevirtual X$Entry$1.get(int) : java.lang.String [\"+constantPoolIdx+\"]\\n\" +", "+\t\t\"    2  invokevirtual X$Entry$1.get(int) : java.lang.String [36]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "507b690b0336bea730b6b6c90c08e033", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumDietRecoveryTest.java", "commitBeforeChange": "1811cdd59f3470eed6e320a23d5f402c5983a6b8", "commitAfterChange": "39ff9f74e7d15911f4d6035f122df4ccc5c0c639", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test0015()", "signatureAfterChange": " public void test0015()", "diff": ["+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + ", "+        \"    void foo() {\\n\" + ", "+        \"    }\\n\" + ", "+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + ", "+        \"    void foo() {\\n\" + ", "+        \"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "507fbec5a269f494f1f3eb078243ab0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2b797eb7226566ad166415dcfde6c744ad4c587", "commitAfterChange": "895b1bbc42bc6ec924c8066f964f04fd4701ee79", "methodNumberBeforeChange": 257, "methodNumberAfterChange": 257, "signatureBeforeChange": " \tpublic void test253()", "signatureAfterChange": " \tpublic void test253()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tList<Number> ls2 = (List<? extends Number>)ls;\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Unnecessary cast from List<capture-of ? extends Number> to List<? extends Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"Unnecessary cast from List<Integer> to List<? extends Number>\\n\" + ", "+\t\t\t\"Unnecessary cast from List<Integer> to List<capture-of ? extends Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50cdb8ce5c9e47fab33cdeb80ce93731", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "9195cb5da21bc5c48732c2bcc3d71f4dcc60f9f9", "commitAfterChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void test401610c()", "signatureAfterChange": " public void test401610c()", "diff": ["-\t\t\t\t\"\t        ^^^\\n\" + ", "-\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> 10)\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\t\t\"\tnew X().foo(()-> 10);\\n\" + ", "-\t\t\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 18)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511ce11202cfcf08facaba937448e6ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "commitAfterChange": "e31375fa76eb0906ad07c2badbf3f4288d615abe", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": " public void _test331446()", "signatureAfterChange": " public void _test331446()", "diff": ["-\t\t\t\"\\n\" + ", "-\t\t\t\"\\n\" + ", "-\tcompilerOptions14.put(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_2);", "-\tcompilerOptions14.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "-\tcompilerOptions14.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_3);", "+\tcompilerOptions14.put(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_5);", "+\tcompilerOptions14.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "+\tcompilerOptions14.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "+//\tcompilerOptions14.put(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_2);", "+//\tcompilerOptions14.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "+//\tcompilerOptions14.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_3);", "-\t\t\t\"\t\t\t\t// TODO Auto-generated method stub\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5286bfbce24eea8cdb29fa249d9a6eb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "639f95fb93a85f023afe828b77bfc8cd4dbf811c", "commitAfterChange": "8a3cbdf1db434ade029724481c4ce0338046043a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["+        \"    -classNames <className1[,className2,...]>\\n\" + ", "+        \"                         Qualified names of the classes that need\\n\" + ", "+        \"                         to be processed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5359d2186a33e620cf912811d942091d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "commitAfterChange": "e4a2d2b531fec7e8dfebadf46195d19caa4fd924", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void test003()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t", "-\tpublic void test003() {", "+", "+\tpublic void test004() {", "+\t\t\t\t\"\t\tY.count(0);\\n\" +", "+\t\t\t\t\"\t\tY.count(-1, (int[]) null);\\n\" +", "+\t\t\t\t\"\t\tY.count(-2, (int[][]) null);\\n\" +", "-\t\t\t\t\"\t\tfor (int i = 0, l = values.length; i < l; i++)\\n\" +", "+\t\t\t\t\"\t\tfor (int i = 0, l = values == null ? 0 : values.length; i < l; i++)\\n\" +", "-\t\t\t\t\"\t\tfor (int i = 0, l = values.length; i < l; i++)\\n\" +", "+\t\t\t\t\"\t\tfor (int i = 0, l = values == null ? 0 : values.length; i < l; i++)\\n\" +", "+\t\t\t\t\"\t\tY.count(0);\\n\" +", "+\t\t\t\t\"\t\tY.count(-1, (int[]) null);\\n\" +", "+\t\t\t\t\"\t\tY.count(-2, (int[][]) null);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588bb64da1fac8900bfeb01a80e79891", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test063()", "signatureAfterChange": " \tpublic void test063()", "diff": ["+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X(args);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X(args);\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a7deff62c5de737913a83586d0c938a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "7360a9edcf0e84953636e1221ff2110a0cf6970e", "commitAfterChange": "de346399a69866957803711d94b9bc9b4af7e95b", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"      incomplete-switch    same as enumSwitch\\n\" + ", "+        \"      unavoidableGenericProblems + ignore unavoidable type safety problems\\n\" +", "+        \"                                   due to raw APIs\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dbfcc6f4293bd7a2b7a557edb05f2c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "414cc8525a87bc9f40f1eed7291fabbec694c674", "commitAfterChange": "e4380347a32522b42fc20d0a13b9f152b3de5ec5", "methodNumberBeforeChange": 830, "methodNumberAfterChange": 830, "signatureBeforeChange": " public void _test0809()", "signatureAfterChange": " public void test0809()", "diff": ["-public void _test0809() {", "+public void test0809() {", "+\t\t\tITERATOR_IMPL_JRE8.replaceAll(\"\\\\*\", \"N\") +", "-\t\t\"1. WARNING in X.java (at line 21)\\n\" +", "+\t\t\"1. WARNING in X.java (at line 22)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 22)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 23)\\n\" +", "-\t\t\"3. ERROR in X.java (at line 25)\\n\" +", "+\t\t\"3. ERROR in X.java (at line 26)\\n\" +", "-\t\t\"4. WARNING in X.java (at line 35)\\n\" +", "+\t\t\"4. WARNING in X.java (at line 36)\\n\" +", "-\t\t\"5. ERROR in X.java (at line 38)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 39)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634938247622e7c50a36805238d48031", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "8d8cc91b7aba4777ee9418a3cef6e1e163bfbf27", "commitAfterChange": "d0534e0376f1634b8fe35d19dde78d7433440f37", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void test076()", "signatureAfterChange": " public void test076()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tB() {\t\\n\" +", "-\t\t\t\"\t^^^\\n\" +", "-\t\t\t\"The constructor B() is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 9)\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" +", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tB() {\t\\n\" +", "-\t\t\t\"\t^^^\\n\" +", "-\t\t\t\"The constructor B() is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 9)\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 9)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64205ccdb611949d140a45933fb78a2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "3f131825dfbebcd2d9846517fd8419ae56311784", "commitAfterChange": "ede87229fe271e061ecd80820c468f7956351f61", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test014()", "signatureAfterChange": " public void test014()", "diff": ["-\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tY why = new Y();\\n\" + ", "-\t\t\"\t  ^^^\\n\" + ", "-\t\t\"Resource leak: 'why' is never closed\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 22)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "660622869d2e86ff9ea0288191a72a5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "commitAfterChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "methodNumberBeforeChange": 1440, "methodNumberAfterChange": 1440, "signatureBeforeChange": " public void test1406()", "signatureAfterChange": " public void test1406()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in GenericTest.java (at line 5)\\n\" + ", "-\t\t\t\"\tSet testList = GenericTest.method1(new Class[] { ArrayList.class });\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Object to Set\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in GenericTest.java (at line 5)\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. WARNING in GenericTest.java (at line 5)\\n\" + ", "-\t\t\t\"5. WARNING in GenericTest.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in GenericTest.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "661a2a6529dde5758b1146905bb8d8e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "commitAfterChange": "a8944173670c6319cce2438add6b3e87f478a46c", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "\r \tpublic void test0390882()", "signatureAfterChange": "\r \tpublic void test0390882()", "diff": ["-\t\t\t\t\t\"\tObject o3 = (java.lang. @Marker Integer) null;  // 3. Wrong.\\n\" +\r", "+\t\t\t\t\t\"\tObject o3 = (java.lang. @Marker Integer) null;  // 3. Legal.\\n\" +\r", "-\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + \r", "-\t\t\t\t\"\tObject o2 = (java. @Marker lang.Integer) null;  // 2. Wrong.\\n\" + \r", "-\t\t\t\t\"\t                   ^^^^^^^\\n\" + \r", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\t\t\"\tObject o1 = (@Marker java.lang.Integer) null;   // 1. Right.\\n\" + \r", "+\t\t\t\t\"\t             ^^^^^^^\\n\" + \r", "-\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + \r", "-\t\t\t\t\"\tObject o3 = (java.lang. @Marker Integer) null;  // 3. Wrong.\\n\" + \r", "-\t\t\t\t\"\t                        ^^^^^^^\\n\" + \r", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + \r", "+\t\t\t\t\"\tObject o2 = (java. @Marker lang.Integer) null;  // 2. Wrong.\\n\" + \r", "+\t\t\t\t\"\t                   ^^^^^^^\\n\" + \r", "-\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "-\t\t\t\t\"----------\\n\" + \r", "-\t\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + \r", "-\t\t\t\t\"\tpublic void bar(java.lang. @Marker Integer arg) {}\\n\" + \r", "-\t\t\t\t\"\t                           ^^^^^^^\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67168f30805bd10c1997da26f42c642b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "5f552ac1e6c5c48b8ee0b38a59337cb3f643f8ca", "commitAfterChange": "cb924aa1e344454d0d95de687a37524ed808452e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["+        \"      resource           + (pot.) unsafe usage of resource of type Closeable\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b4944dc9febf7a00184b03e21e49277", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemConstructorTest.java", "commitBeforeChange": "a12e2a9c36a34086d79057a03aa281994c8caaa9", "commitAfterChange": "c6caebafff20b679c7084cf7f7d3adf560f367be", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test004()", "signatureAfterChange": " public void test004()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tpublic M (int state) { this.state = state;} \\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X.M(int) is never used locally\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d266ee28db41cd9d89fcd9ecac72200", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "98c49c7e442095e4ddf2a6384735e696e7050501", "commitAfterChange": "182b54f27909efda960637e81e9fbc3f1f6ab16a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["-\t\t\t\t\"        [pc: 21, line: 11]\\n\" + ", "+\t\t\t\t\"        [pc: 21, line: 9]\\n\" + ", "+\t\t\t\t\"        [pc: 22, line: 11]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7186d4726583e1c0809cb4ad75cbfcdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tObject clone();\\n\" + ", "-\t\t\t\"\t       ^^^^^^^\\n\" + ", "-\t\t\t\"The method clone() of type I should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7704b87d53a43a7efb81f1b186893640", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 245, "signatureBeforeChange": "\t\t \tpublic void test243()", "signatureAfterChange": "\t\t \tpublic void test243()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in SubTypes.java (at line 5)\\n\" + ", "-\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"Duplicate method foo() in type B\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in SubTypes.java (at line 6)\\n\" + ", "-\t\t\"\tpublic B foo() { return this; }\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"Duplicate method foo() in type B\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in SubTypes.java (at line 9)\\n\" + ", "-\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A.foo()\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in SubTypes.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic A foo() { return this; }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"The method foo() of type A should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in SubTypes.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type B\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in SubTypes.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic B foo() { return this; }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type B\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in SubTypes.java (at line 9)\\n\" + ", "+\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"The method foo() of type C should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in SubTypes.java (at line 9)\\n\" + ", "+\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with A.foo()\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77946b7fb88cfecccde6183b7e4eebd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 888, "methodNumberAfterChange": 888, "signatureBeforeChange": " public void test0867()", "signatureAfterChange": " public void test0867()", "diff": ["+// SHOULD FAIL AT 1.8 (RET): Type mismatch: cannot convert from List<Runnable> to List", "-\t\t\"\tList<List> o = Foo.foo1();\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "-\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\" + ", "+\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\"", "+\t\t:", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "+\t\t\"\t               ^^^^^^^^^^\\n\" +", "+\t\t\"Type mismatch: cannot convert from List<List<Runnable>> to List<List>\\n\" // TODO(stephan) more specific error message", "+\t\t)+ "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77ab0f84198dac9a6800358a4d89431a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 541, "methodNumberAfterChange": 541, "signatureBeforeChange": " \tpublic void test537()", "signatureAfterChange": " \tpublic void test537()", "diff": ["-\t\t\t\"\t                  ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tEnumSet<?> eSet = EnumSet.allOf(c);\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b1e4d375b839122a18d6ed2c26d0bf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "commitAfterChange": "e4a2d2b531fec7e8dfebadf46195d19caa4fd924", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void test002()", "signatureAfterChange": "  \tpublic void test003()", "diff": ["-\t", "+", "+\tpublic void test003() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.count((int[]) null);\\n\" +", "+\t\t\t\t\"\t\tY.count((int[][]) null);\\n\" +", "-\t\t\t\t\"\t\tfor (int i = 0, l = values.length; i < l; i++)\\n\" +", "+\t\t\t\t\"\t\tfor (int i = 0, l = values == null ? 0 : values.length; i < l; i++)\\n\" +", "-\t\t\t\t\"\t\tfor (int i = 0, l = values.length; i < l; i++)\\n\" +", "+\t\t\t\t\"\t\tfor (int i = 0, l = values == null ? 0 : values.length; i < l; i++)\\n\" +", "-\t\t\t\"=0 1 3 7=10 6 4=10\");", "+\t\t\t\"=0 0=0 1 3 7=10 6 4=10\");", "+\t\t\t\t\"\t\tY.count((int[]) null);\\n\" +", "+\t\t\t\t\"\t\tY.count((int[][]) null);\\n\" +", "-\t\t\t\"=0 1 3 7=10 6 4=10\",", "+\t\t\t\"=0 0=0 1 3 7=10 6 4=10\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7baf064f5419dca3c274b8e4694849f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "commitAfterChange": "e6d8789df9b4566a0124edc04d16cdf543582e67", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"      unlikelyArgumentType invoking Map.get() et al with an unlikely argument\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0cff4fe5732e5cbe4378a450865dd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "8c76b4014ea5428c07ebba6a1cc324074d6e35bd", "commitAfterChange": "ff2a27470c07ef3625cccb4ee1e5803e3112da43", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testStringPatternAnyStrings02() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternAnyStrings02() throws CoreException", "diff": ["-\t\tsearch(\"*Generic\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"G?ner?c\", TYPE, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g1/t/m/ref/R2.java [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f39f4b05311b8fd11f8f7b84ea88e16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam04() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternNestedParam04() throws CoreException", "diff": ["-\t// TODO [search] try to have a better match selection", "-\t\tsearch(\"NGS.Generic<?>\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"NGS.Generic<? extends Throwable>\", TYPE, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [Generic<NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [Generic<NGM.Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [Generic<NGM.Generic<Object, Exception, RuntimeException>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<NGS.Generic<NGS.Generic<?>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [Generic<Object>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [Generic<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [Generic<g3.t.def.NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<g3.t.def.NGM.Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [Generic<g3.t.def.NGM.Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<g3.t.def.NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<g3.t.def.NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [Generic<java.lang.Object>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [Generic<? extends java.lang.Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [Generic<? super java.lang.RuntimeException>] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGS.Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGS.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [NGS.Generic<? extends java.lang.Throwable>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c360a5dd9564a80807559c15bcf2e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "3ee5245339c28c9f118b2d56a8158cb4aa75c312", "commitAfterChange": "7d40781ce4910fcc72ea18dc76569aa9d1391ab9", "methodNumberBeforeChange": 188, "methodNumberAfterChange": 188, "signatureBeforeChange": " public void test447119d()", "signatureAfterChange": " public void test447119d()", "diff": ["+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"import java.util.Collections;\\n\" +", "+\t\t\t\t\"import java.util.Comparator;\\n\" +", "+\t\t\t\t\"\t\tList<String> list = new ArrayList<String>();\\n\" +", "-\t\t\t\t\"\t\t\tSystem.out.println(\\\"- \\\" + m.getGenericReturnType() + \\\" \\\" + m.getName() + \\\"(\\\" + m.getGenericParameterTypes()[0] + \\\")\\\");\\n\" +", "+\t\t\t\t\"\t\t\tlist.add(\\\"- \\\" + m.getGenericReturnType() + \\\" \\\" + m.getName() + \\\"(\\\" + m.getGenericParameterTypes()[0] + \\\")\\\");\\n\" +", "+\t\t\t\t\"\t\tCollections.sort(list, new Comparator<String>() {\\n\" +", "+\t\t\t\t\"\t\t\tpublic int compare(String s1, String s2) {\\n\" +", "+\t\t\t\t\"\t\t\t\treturn s1.compareTo(s2);\\n\" +", "+\t\t\t    \"\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t});\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(list.toString());\\n\" +", "-\t\t\t\"- java.util.List<java.lang.String> noop(java.util.List<java.lang.String>)\\n\" + ", "-\t\t\t\"- java.util.List<java.lang.String> lambda$0(java.util.List<java.lang.String>)\",", "+\t\t\t\"[- java.util.List<java.lang.String> lambda$0(java.util.List<java.lang.String>), - java.util.List<java.lang.String> noop(java.util.List<java.lang.String>)]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812328697986c719fe77ac38f1c74e98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 667, "methodNumberAfterChange": 667, "signatureBeforeChange": " public void test663()", "signatureAfterChange": " public void test663()", "diff": ["+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tList l = (List<U>) lv;\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\tList l = (List<List<U>>) lv;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 11)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813b1b61bb6f02cba7f8a91dcaff9f29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "f8f573fb4945f47fa2e1f634d0b55fa9e0151f17", "commitAfterChange": "b1e2ed2bb1403d1f729ccda27eb7b9ebe7009bed", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 92, "signatureBeforeChange": "     public void testBug378024f_1() throws Exception", "signatureAfterChange": "     public void testBug378024f_1() throws Exception", "diff": ["-                \"//lead 4\\n\" +", "-                \"import java.util.HashMap;// test4\\n\" +", "-                \"// commen 3\\n\" + ", "+                \"\\n\" +", "-                \"// lead 3\\n\" +", "-                \"import java.io.*;// test3\\n\" +", "-                \"/*\\n\" +", "-                \" * keep me with PrintWriter\\n\" +", "-                \" */\\n\" +", "+                \"// lead 3\\n\" +", "+                \"// test3\\n\" +", "+                \"/*\\n\" +", "+                \" * keep me with PrintWriter\\n\" +", "+                \" */\\n\" +", "+                \"import java.io.*;\\n\" +", "+                \"\\n\" +", "+                \"\\n\" +", "+                \"//lead 4\\n\" +", "+                \"import java.util.HashMap;// test4\\n\" +", "+                \"// commen 3\\n\" + ", "+                \"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "816ae655275272fa6e82278b4817b457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "commitAfterChange": "e3386b379d4254a493bee556abfcc9372c12a0c9", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -X<option>         specify non-standard option (ignored)\\n\" + ", "+        \"    -X<option>         specify non-standard option (ignored\\n\" + ", "+        \"                       expect for -Xemacs)\\n\" + ", "-        \"    -Xemacs            used to enable emacs-style output\\n\" + ", "+        \"    -Xemacs            used to enable emacs-style output in the console.\\n\" + ", "+        \"                       It doesnt affect the xml log output\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b73d721ed1b2a21eef31880259979d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "7086675b9016b36eb3327ff794af3728a774a189", "commitAfterChange": "08be90368f9af9d6750464056e901efd458851a8", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void testRegion4() throws CoreException", "signatureAfterChange": " public void testRegion4() throws CoreException", "diff": ["+\t\t\t\"Super types of root classes:\\n\" + ", "+\t\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"  Class [in Class.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"    Y [in Y.java [in <default> [in <project root> [in P2]]]]\\n\" + ", "-\t\t\t\"    Z [in Z.java [in <default> [in <project root> [in P3]]]]\\n\" + ", "-\t\t\t\"  String [in String.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"    Error [in Error.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"      CloneNotSupportedException [in CloneNotSupportedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"        IllegalMonitorStateException [in IllegalMonitorStateException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"      InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"      RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"    Exception [in Exception.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"  Throwable [in Throwable.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"  X [in X.java [in <default> [in <project root> [in P1]]]]\\n\",", "+\t\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    Class [in Class.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    String [in String.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    Throwable [in Throwable.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      Error [in Error.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      Exception [in Exception.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"        CloneNotSupportedException [in CloneNotSupportedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"        InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"        RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"          IllegalMonitorStateException [in IllegalMonitorStateException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    X [in X.java [in <default> [in <project root> [in P1]]]]\\n\" + ", "+\t\t\t\"      Y [in Y.java [in <default> [in <project root> [in P2]]]]\\n\" + ", "+\t\t\t\"      Z [in Z.java [in <default> [in <project root> [in P3]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "839159a1ffc70706210325c29581a7c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumDietRecoveryTest.java", "commitBeforeChange": "1811cdd59f3470eed6e320a23d5f402c5983a6b8", "commitAfterChange": "39ff9f74e7d15911f4d6035f122df4ccc5c0c639", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test0006()", "signatureAfterChange": " public void test0006()", "diff": ["-\t\t\"  B() {\\n\" + ", "+\t\t\"  B() {\\n\" +", "+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + ", "+        \"    void foo() {\\n\" + ", "+        \"    }\\n\" + ", "+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + ", "+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + ", "+        \"    void foo() {\\n\" + ", "+        \"    }\\n\" + ", "+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "857b5d2d2359c566fc37174325efb654", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionContextTests.java", "commitBeforeChange": "0d164c5fd27f905997905e2364acd7d413efe08e", "commitAfterChange": "cb53eff5db7d4f76eb24c91a2abecee1441f0bbc", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": " public void test0145() throws JavaModelException", "signatureAfterChange": " public void test0145() throws JavaModelException", "diff": ["-\t\t\"\tfield1 {key=Ltest/X;.field1)I} [in X [in [Working copy] X.java [in test [in src3 [in Completion]]]]],\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86b5a6d306fd89ec1ab689ee049af7c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "3f131825dfbebcd2d9846517fd8419ae56311784", "commitAfterChange": "ede87229fe271e061ecd80820c468f7956351f61", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tY why = new Y();\\n\" + ", "-\t\t\"\t  ^^^\\n\" + ", "-\t\t\"Resource leak: 'why' is never closed\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 20)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "886483dd75116c8004ce50c5386c2314", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\t* @see G#G(Object)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t* @see G#G(Exception)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Exception) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic class X extends G<Exception> {\\n\" +", "-\t\t\t\"\t                         ^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tX(Exception exc) { super(exc);}\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^\\n\" +", "-\t\t\t\"The constructor G(E) refers to the missing type E\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tclass G<E extends Exception> {\\n\" +", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\tG(E e) {}\\n\" +", "-\t\t\t\"\t  ^\\n\" +", "-\t\t\t\"E cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t* @see G#G(Object)\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic class X extends G<Exception> {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tclass G<E extends Exception> {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93642a149b88d3c42ab524ad4d663e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java", "commitBeforeChange": "58c81126de1d8bae9b8769fdfb9147d98882c1a5", "commitAfterChange": "22bf8b2f615c4dacc00d77046015851ecf0d7afd", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test061l2() throws IOException", "signatureAfterChange": " public void test061l2() throws IOException", "diff": ["-\t\t\t\"import java.util.Objects;\\n\" +", "-\t\t\t\"}\"", "+\t\t\t\"}\\n\" +", "+\t\t\t\"class Objects {\\n\" + // mock java.util.Objects (@since 1.7).", "+\t\t\t\"    static int hashCode(Object o) { return 13; }\\n\" +", "+\t\t\t\"}\\n\"", "-\t\t\"1. ERROR in xy\\\\Leaks.java (at line 19)\\n\" +", "+\t\t\"1. ERROR in xy\\\\Leaks.java (at line 18)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "981c8e0769170533663f3d2cc7a52db3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug70892negative2()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\tpublic void testBug70892negative2() {", "-\t\treportMissingJavadocComments = CompilerOptions.IGNORE;", "+\t}", "+\tpublic void test039() {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\" /**\\n\" + ", "+\t\t\t\t\t\"  * Invalid type parameter reference\\n\" + ", "+\t\t\t\t\t\"  * @param <E Type\\n\" + ", "+\t\t\t\t\t\"  * @param E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <<E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <<<E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <E>> Type\\n\" + ", "+\t\t\t\t\t\"  */\\n\" + ", "+\t\t\t\t\t\" public class X<E> {}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t* @param <E Type\\n\" + ", "+\t\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t* @param E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t* @param <<E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t* @param <<<E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t* @param <E>> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tpublic class X<E> {}\\n\" + ", "+\t\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter E\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b8eaba1adac934a1ba9a47521345c3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "commitAfterChange": "2d9dc5098273e0e95832d81d735d2d77249738ef", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": " public void testBug92944_CLASS() throws CoreException", "signatureAfterChange": " public void testBug92944_CLASS() throws CoreException", "diff": ["+\t\t\"b108088.A108088\\n\" + ", "+\t\t\"b108088.B108088\\n\" + ", "+\t\t\"b108088.Test108088\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5363597e3c8bb0a01c086d8278ac73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c21920e168213fd0aca47b013f14cfc667141d9a", "commitAfterChange": "6ab08c93576091a47827aa45cdb7ba0e6cb43f77", "methodNumberBeforeChange": 830, "methodNumberAfterChange": 830, "signatureBeforeChange": " public void test0809()", "signatureAfterChange": " public void test0809()", "diff": ["-\t\t\tITERATOR_IMPL_JRE8.replaceAll(\"\\\\*\", \"N\") +", "-\t\t\"1. WARNING in X.java (at line 23)\\n\" +", "+\t\t\"1. WARNING in X.java (at line 21)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 24)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 22)\\n\" +", "-\t\t\"3. ERROR in X.java (at line 27)\\n\" +", "+\t\t\"3. ERROR in X.java (at line 25)\\n\" +", "-\t\t\"4. WARNING in X.java (at line 37)\\n\" +", "+\t\t\"4. WARNING in X.java (at line 35)\\n\" +", "-\t\t\"5. ERROR in X.java (at line 40)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 38)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e02308151dc5b28f1bd80a814eab369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3b832f4dfb110e33b2a7abd5be2caa6077d0fd80", "commitAfterChange": "35d51e65c27d4624c2911420e977815904d386de", "methodNumberBeforeChange": 813, "methodNumberAfterChange": 813, "signatureBeforeChange": " public void test807()", "signatureAfterChange": " public void test807()", "diff": ["-// crash javac", "+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=107756", "+\t\t\t\"interface Prop<BeanT> {\\n\" + ", "+\t\t\t\"\tUnmarshaller.Handler createHandler();\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"abstract class Unmarshaller {\\n\" + ", "+\t\t\t\"\tpublic static abstract class Handler {}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo(Prop p) {\\n\" + ", "+\t\t\t\"\t\tUnmarshaller.Handler h = p.createHandler(); \\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e089f129ab763aad44f5bb100a29971", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "32f757dfe8da946b3f43d9a2940c80a3241b7487", "commitAfterChange": "362a367dfb78f3dcbcec97d2d2301a9c64da2876", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 174, "signatureBeforeChange": " \tpublic void _test052()", "signatureAfterChange": " \tpublic void test052a()", "diff": ["-\tpublic void _test052() {", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=91728", "+\tpublic void test052a() {", "-\t\t\tnew String[] {", "-\t\t\t\t\"A.java\",", "-\t\t\t\t\"public class A<T> {\\n\" + ", "-\t\t\t\t\"\tpublic <U> A<U> test() { return null; }\\n\" + ", "-\t\t\t\t\"\tpublic <U> A<U> test2() { return null; }\\n\" + ", "-\t\t\t\t\"\tpublic <U> A<U> test3() { return null; }\\n\" + ", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class B extends A<X> {\\n\" + ", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"A.java\",", "+\t\t\t\t\t\"public class A<T> {\\n\" + ", "+\t\t\t\t\t\"\tpublic <U> A<U> test() { return null; }\\n\" + ", "+\t\t\t\t\t\"\tpublic <U> A<U> test2() { return null; }\\n\" + ", "+\t\t\t\t\t\"\tpublic <U> A<U> test3() { return null; }\\n\" + ", "+\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\"class B extends A<X> {\\n\" + ", "+\t\t\t\t\t\"\t@Override public B test() { return null; }\\n\" + ", "+\t\t\t\t\t\"\t@Override public A test2() { return null; }\\n\" + ", "+\t\t\t\t\t\"\t@Override public A<X> test3() { return null; }\\n\" + ", "+\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\"class X{}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in A.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"Type safety: The return type B for test() from the type B needs unchecked conversion to conform to A<Object> from the type A<X>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in A.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in A.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t@Override public A test2() { return null; }\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"Type safety: The return type A for test2() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in A.java (at line 9)\\n\" + ", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class X{}\\n\"", "-\t\t\t},", "-\t\t\t\"1. WARNING in A.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\t@Override public B test() { return null; }\\r\\n\" + ", "-\t\t\t\"\t                 ^\\n\" + ", "-\t\t\t\"Type safety: The return type B for test() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in A.java (at line 8)\\n\" + ", "-\t\t\t\"\t@Override public A test2() { return null; }\\n\" + ", "-\t\t\t\"\t                 ^\\n\" + ", "-\t\t\t\"Type safety: The return type A for test2() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in A.java (at line 9)\\r\\n\" + ", "-\t\t\t\"\t@Override public A<X> test3() { return null; }\\r\\n\" + ", "-\t\t\t\"\t                 ^\\n\" + ", "-\t\t\t\"Type safety: The return type A<X> for test3() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t// warning: test() in B overrides <U>test() in A; return type requires unchecked conversion", "-\t\t\t// warning: test2() in B overrides <U>test2() in A; return type requires unchecked conversion", "-\t\t\t// warning: test3() in B overrides <U>test3() in A; return type requires unchecked conversion", "-\t\t);", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"Type safety: The return type A<X> for test3() from the type B needs unchecked conversion to conform to A<Object> from the type A<X>\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t\t\t// warning: test() in B overrides <U>test() in A; return type requires unchecked conversion", "+\t\t\t\t// warning: test2() in B overrides <U>test2() in A; return type requires unchecked conversion", "+\t\t\t\t// warning: test3() in B overrides <U>test3() in A; return type requires unchecked conversion", "+\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e604b4afa03c0c70c7a453f257d13fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "90ab26b26139b04c1b21341903f9bda9323cd1a1", "commitAfterChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["+//\t\t\t\t\"\t\tY y = new Y();\\n\" +", "+//\t\t\t\t\"\t\ty = new Y(1);\\n\" +", "+//\t\t\t\t\"\t\ty = new Y(1, 2, (byte) 3, 4);\\n\" +", "+//\t\t\t\t\"\t\ty = new Y(new int[] {1, 2, 3, 4 });\\n\" +", "+\t\t\t\t\"\t\t\\n\" +", "+\t\t\t\t\"\tpublic Y(int ... values) {\\n\" +", "+\t\t\t\t\"\t\tint result = 0;\\n\" +", "+\t\t\t\t\"\t\tfor (int i = 0, l = values.length; i < l; i++)\\n\" +", "+\t\t\t\t\"\t\t\tresult += values[i];\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print(result);\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print(' ');\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+//\t\t\t\"0 1 10 10 0 1 10 10\");", "+//\t\t\t\t\"\t\tY y = new Y();\\n\" +", "+//\t\t\t\t\"\t\ty = new Y(1);\\n\" +", "+//\t\t\t\t\"\t\ty = new Y(1, 2, (byte) 3, 4);\\n\" +", "+//\t\t\t\t\"\t\ty = new Y(new int[] {1, 2, 3, 4 });\\n\" +", "+\t\t\t\t\"\t\t\\n\" +", "-\t\t\t\t\"\t\tY.count(new int[] {1, 2, 3, 4});\\n\" +", "+\t\t\t\t\"\t\tY.count(new int[] {1, 2, 3, 4 });\\n\" +", "+//\t\t\t\"0 1 10 10 0 1 10 10\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fe1c8ea8c9c5c1072e45dc2b5b85c3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "4e8e5a98cf0190fbfa5945ebb361f51b261ba210", "commitAfterChange": "d245300e4e786a6fa7e5da9bef5c249b7208c09a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t  \tpublic void test005()", "signatureAfterChange": "\t  \tpublic void test005()", "diff": ["+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "-\t\t\t\", 1, 1 3 7, 11\");", "+\t\t\t\"<, 1, 1 3 7, 11,>\");", "+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "-\t\t\t\", 1, 1 3 7, 11\",", "+\t\t\t\"<, 1, 1 3 7, 11,>\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3da34ce3512d0c0b00fb20ddf8eadbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tpublic void testBug112346()", "signatureAfterChange": " \tpublic void testBug112346()", "diff": ["-\t\t\t\"1. ERROR in Test.java (at line 3)\\n\" + ", "-\t\t\t\"\t* @see Test#field\\n\" + ", "-\t\t\t\"\t            ^^^^^\\n\" + ", "-\t\t\t\"Javadoc: field cannot be resolved or is not a field\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Test.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @see Test#foo()\\n\" + ", "-\t\t\t\"\t            ^^^\\n\" + ", "-\t\t\t\"Javadoc: The method foo() is undefined for the type Test\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in Test.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in Test.java (at line 6)\\n\" + ", "-\t\t\t\"4. ERROR in Test.java (at line 7)\\n\" + ", "+\t\t\t\"2. ERROR in Test.java (at line 7)\\n\" + ", "-\t\t\t\"5. ERROR in Test.java (at line 8)\\n\" + ", "+\t\t\t\"3. ERROR in Test.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a414bb554267a77dab7b269606acca19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " public void test401845a()", "signatureAfterChange": " public void test401845a()", "diff": ["+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments (X::goo)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfoo(X::goo);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo((x)-> {return 10;});\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "+\t\t\t\"  return 10;\\n\" + ", "+\t\t\t\"})\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5ecacd28d2d0a5691161c6f4f238ca9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "f8f573fb4945f47fa2e1f634d0b55fa9e0151f17", "commitAfterChange": "b1e2ed2bb1403d1f729ccda27eb7b9ebe7009bed", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 97, "signatureBeforeChange": "     public void testBug378024j() throws Exception", "signatureAfterChange": "     public void testBug378024j() throws Exception", "diff": ["-                \"import java.awt.*;// test1\\n\" +", "+                \"// test1\\n\" +", "+                \"import java.awt.*;\\n\" +", "-                \"//lead 3\\n\" +", "-                \"import java.util.*;// test3\\n\" +", "-                \"/*\\n\" +", "-                \" * don't move me 3\\n\" +", "-                \" */\\n\" +", "-                \"/*keep me with Map.Entry*/\\n\" +", "-                \"import java.util.Map.Entry;// member type import\\n\" +", "-                \"/*keep me with Map.Entry 2*/\\n\" +", "-                \"/*\\n\" +", "-                \" * don't move me 2\\n\" +", "-                \" */\" +", "+                \"\\n\" +", "-                \"import java.io.*;// test2\\n\" +", "+                \"// test2\\n\" +", "+                \"import java.io.*;\\n\" +", "+                \"\\n\" +", "+                \"/*\\n\" +", "+                \" * don't move me 2\\n\" +", "+                \" */\\n\" +", "+                \"\\n\" +", "+                \"//lead 3\\n\" +", "+                \"// test3\\n\" +", "+                \"/*\\n\" +", "+                \" * don't move me 3\\n\" +", "+                \" */\\n\" +", "+                \"import java.util.*;\\n\" +", "+                \"/*keep me with Map.Entry*/\\n\" +", "+                \"// member type import\\n\" +", "+                \"/*keep me with Map.Entry 2*/\\n\" +", "+                \"import java.util.Map.*;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7df4ab36c1e5ba4de2045dd8ff93325", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic void test040() throws Exception", "signatureAfterChange": " \t \tpublic void test106b_wtr() throws Exception", "diff": ["-\t// make sure annotation without target appears twice when set on a method declaration", "-\tpublic void test040() throws Exception {", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\r\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\r\\n\" + ", "-\t\t\t\t\"\\r\\n\" + ", "-\t\t\t\t\"@Target(METHOD)\\r\\n\" + ", "-\t\t\t\t\"@interface Annot {\\r\\n\" + ", "-\t\t\t\t\"\tint value() default 0;\\r\\n\" + ", "-\t\t\t\t\"}\\r\\n\" + ", "-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"\t@Annot(4)\\r\\n\" + ", "-\t\t\t\t\"\tpublic int foo() {\\r\\n\" + ", "-\t\t\t\t\"\t\treturn 0;\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"  public int foo();\\n\" + ", "-\t\t\t\"    0  iconst_0\\n\" + ", "-\t\t\t\"    1  ireturn\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 11]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"    RuntimeInvisibleAnnotations: \\n\" + ", "-\t\t\t\"      #17 @Annot(\\n\" + ", "-\t\t\t\"        #18 value=(int) 4 (constant type)\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"}\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t", "+\tpublic void test106b_wtr() throws Exception { // WTR (WildcardTypeReference)", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\t\"class X<T1> {\\n\" +", "+\t\t\t\t\t\"\t List<? extends @B(1) Number[]> field;\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\t", "+\t\t\t\t\t\"List.java\",", "+\t\t\t\t\t\"class List {}\\n\",", "+\t\t\t\t\t", "+\t\t\t\t\t\"B.java\",", "+\t\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\t\"@interface B { int value() default -1; }\\n\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\t\tString expectedOutput =", "+\t\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #10 @B(\\n\" + ", "+\t\t\t\t\"        #11 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0), WILDCARD, ARRAY]\\n\" + ", "+\t\t\t\t\"      )\\n\";", "+\t\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa6deaacd7f4c1578d2f2283ac87a0f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4eaa1f1fc9e841c11eaca436ac06f8635b8543bd", "commitAfterChange": "f73fdb0a354f2f38e3faeb7d9eceabb3d85530d5", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"                               unusedPrivate, unusedThrown, and unusedTypeArgs\\n\" + ", "+        \"                               unusedPrivate, unusedThrown, and unusedTypeArgs,\\n\" + ", "+        \"\t\t\t\t\t\t\t\tunusedExceptionParam\\n\"+", "-        \"      unusedArgument       unread method parameter\\n\" + ", "+        \"      unusedArgument       unread method parameter\\n\" +", "+        \"      unusedExceptionParam unread exception parameter\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aafb21cfa4e3bbf717b489e584748a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "commitAfterChange": "6e3484e93dc48a09ac8c425df0144a313c14ab99", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-//\t\t\t\t\"\t\tY y = new Y();\\n\" +", "-//\t\t\t\t\"\t\ty = new Y(1);\\n\" +", "-//\t\t\t\t\"\t\ty = new Y(1, 2, (byte) 3, 4);\\n\" +", "-//\t\t\t\t\"\t\ty = new Y(new int[] {1, 2, 3, 4 });\\n\" +", "+\t\t\t\t\"\t\tY y = new Y();\\n\" +", "+\t\t\t\t\"\t\ty = new Y(1);\\n\" +", "+\t\t\t\t\"\t\ty = new Y(1, 2, (byte) 3, 4);\\n\" +", "+\t\t\t\t\"\t\ty = new Y(new int[] {1, 2, 3, 4 });\\n\" +", "-\t\t\t\"0 1 10 10\");", "-//\t\t\t\"0 1 10 10 0 1 10 10\");", "+\t\t\t\"0 1 10 10 0 1 10 10\");", "-//\t\t\t\t\"\t\tY y = new Y();\\n\" +", "-//\t\t\t\t\"\t\ty = new Y(1);\\n\" +", "-//\t\t\t\t\"\t\ty = new Y(1, 2, (byte) 3, 4);\\n\" +", "-//\t\t\t\t\"\t\ty = new Y(new int[] {1, 2, 3, 4 });\\n\" +", "+\t\t\t\t\"\t\tY y = new Y();\\n\" +", "+\t\t\t\t\"\t\ty = new Y(1);\\n\" +", "+\t\t\t\t\"\t\ty = new Y(1, 2, (byte) 3, 4);\\n\" +", "+\t\t\t\t\"\t\ty = new Y(new int[] {1, 2, 3, 4 });\\n\" +", "-\t\t\t\"0 1 10 10\",", "-//\t\t\t\"0 1 10 10 0 1 10 10\",", "+\t\t\t\"0 1 10 10 0 1 10 10\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab75f85c2c442512542a752deaf483b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c697f3d15ad101e007a8dfd5322c0448c66823ed", "commitAfterChange": "530f2338b1d761399a8feddae59a466f6f4908a5", "methodNumberBeforeChange": 1114, "methodNumberAfterChange": 1114, "signatureBeforeChange": " public void test1089()", "signatureAfterChange": " public void test1089()", "diff": ["-\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tT t = t;\\n\" + ", "-\t\t\"\t  ^^^^^\\n\" + ", "-\t\t\"The assignment to variable t has no effect\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 7)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aba990cafb08c35e59e5ee0d8a115631", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "fa5b9584504523e008d75d3102bbd9fdb41a99d1", "commitAfterChange": "be28c707007790646fb850eb239db7444413aebf", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " public void testMA_2()", "signatureAfterChange": " public void testMA_2()", "diff": ["-\t\t\"        MemberOfCUMA m;\\n\" +\r\t\t\"        new <CompleteOnType:MemberOfCU>();\\n\" + ", "+\t\t\"        MemberOfCUMA m = new <CompleteOnType:MemberOfCU>();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aca860db374ed294e434a0eda631471b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void test020() throws Exception", "signatureAfterChange": " \t \tpublic void test030_methodTypeParameterBound() throws Exception", "diff": ["-\t// method type parameter bound", "-\tpublic void test020() throws Exception {", "+\t", "+\tpublic void test030_methodTypeParameterBound() throws Exception {", "+\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RetentionPolicy.CLASS)\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface C {\\n\" + ", "+\t\t\t\t\"\tchar value() default '-';\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"Z.java\",", "+\t\t\t\t\"public class Z {}\",", "+\t\t\t\t\"Y.java\",", "+\t\t\t\t\"public class Y<T> {}\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\t<T extends Y<Z [][]@B[]> & Cloneable> void foo(T t) {}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t},", "+\t\t\"\");", "+\t\tString expectedOutput =", "+\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" +  ", "+\t\t\t\"      #23 @B(\\n\" + ", "+\t\t\t\"        target type = 0x12 METHOD_TYPE_PARAMETER_BOUND\\n\" + ", "+\t\t\t\"        type parameter index = 0 type parameter bound index = 0\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(0), ARRAY, ARRAY]\\n\" + ", "+\t\t\t\"      )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad2b9bbbf58e1a3e71229fab33e0c85a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "c4baf766be166b04f595eec5cebbd2a64f399daa", "commitAfterChange": "6574ecf5c4b5647220e5c6028073411e3f107ad7", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test037() throws Exception", "signatureAfterChange": " \tpublic void test037() throws Exception", "diff": ["-\tpublic void test037() throws Exception { // WILL FAIL WHEN REFERENCE EXPRESSIONS ARE ANALYZED.", "+\tpublic void test037() throws Exception {", "-\t\t\t\t\"\t       ^^^^^^\\n\" + ", "-\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The type Y.Z[][][] does not define foo(int) that is applicable here\\n\" + ", "-\t\t\t\t\"\t                  ^^^^^^\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^\\n\" + ", "-\t\t\t\t\"\t                            ^^^^^^\\n\" + ", "+\t\t\t\t\"\t                  ^^^^^^\\n\" + ", "+\t\t\t\t\"\t                            ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tI i = @Marker Y. @Marker Z @Marker [] [] @Marker [] ::foo;\\n\" + ", "-\t\t\t\t\"6. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af847015c8708324c6ed4bc1ff7081be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "commitAfterChange": "4fd98abe69a6425880abe243fa431e365710bef2", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void test_nesting_1()", "signatureAfterChange": " public void test_nesting_1()", "diff": ["-// a nonnull variable is dereferenced method of a nested type", "+// a nonnull variable is dereferenced in a method of a nested type", "-\t\t\t\"@NonNullByDefault\\n\" +", "-\t\t\"1. ERROR in X.java (at line 16)\\n\" +", "+\t\t\"1. ERROR in X.java (at line 15)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 25)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 24)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "affd51c2fb8558b791e0f30b8ef3a20e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "332f2b4bbc61519d48f9e1634468f589fe6ec357", "commitAfterChange": "1dac44e6f5251febeac5322fb143c153ef780c6a", "methodNumberBeforeChange": 636, "methodNumberAfterChange": 636, "signatureBeforeChange": " \tpublic void test632()", "signatureAfterChange": " \tpublic void test632()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tlhs.add(rhs.get(0));\\n\" + ", "-\t\t\t\"\t    ^^^\\n\" + ", "-\t\t\t\"The method add(capture-of ? super Object[]) in the type Vector<capture-of ? super Object[]> is not applicable for the arguments (capture-of ? extends Object[])\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 22)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1625efdd1fcc9330b233d3510bb3edb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8845e4c8987116cc9c0aea93f48c3f458c73e5bf", "commitAfterChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "methodNumberBeforeChange": 350, "methodNumberAfterChange": 350, "signatureBeforeChange": " \tpublic void test348()", "signatureAfterChange": " \tpublic void _test348()", "diff": ["-\tpublic void test348() {", "+\tpublic void _test348() {", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\t\t\\n\" + ", "-\t\t\t\t\"\t\t\tpublic void run() {\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\"\t\t\tpublic void run() {}\\n\" + ", "-\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { \\n\" + ", "-\t\t\t\t\"\t\t\t\treturn t; \\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\t\"\tpublic <T extends Exception> T bar(T t) { \\n\" + ", "-\t\t\t\"\t                             ^\\n\" + ", "-\t\t\t\"Type safety: The return type T of the method bar(T) of type new X<R>(){} needs unchecked conversion to conform to the return type T of inherited method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69e7e7d73a052a290ec3f706aeb2461", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 81, "signatureBeforeChange": " public void _testBug400905_0012() throws CoreException", "signatureAfterChange": " public void testBug400905_0013() throws CoreException", "diff": ["-public void _testBug400905_0012() throws CoreException {", "-\t\tcreateJavaProject(\"P\", new String[] { \"\", \"src\"}, new String[] {\"JCL_LIB\"}, null, null, \"bin\", null, null, new String[][] {new String[] {\"src/\"}, new String[0]}, \"1.8\");", "-\t\t\t\"/P/src/J.java\",", "-\t\t\t\"public class J implements I {\\n\" +", "-\t\t\t\"    public static void main(String [] args) {\\n\" +", "-\t\t\t\"\t\tI i = Y::goo;\\n\" +", "-\t\t\t\"\t }\\n\" +", "-\t\t\t\"    void foo() {\\n\" +", "-\t\t\t\"       I i = Y::goo;\\n\" +", "-\t\t\t\"       Y.goo(()->{});\\n\" +", "-\t\t\t\"       I i2 = new I() {\\n\" +", "-\t\t\t\"\t\t    public void foo() {\\n\" +", "-\t\t\t\"\t\t    }\\n\" +", "-\t\t\t\"\t    };\\n\" +", "-\t\t\t\"   }\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t);", "-\t\tcreateFile(", "-\t\t\t\"/P/src/Y.java\",", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"    public static void goo(I i) {};\\n\" +", "-\t\t\t\"    public static void goo() {};\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t\t\"    public void foo();\\n\" +", "-\t\tIMethod method = type.getMethod(\"foo\", new String[0]);", "-\t\tassertSearchResults(\"\");", "+public void testBug400905_0013() throws CoreException {", "+\ttry {", "+\t\tcreateJavaProject(\"P\", new String[] { \"\", \"src\"}, new String[] {\"JCL18_LIB\"}, null, null, \"bin\", null, null, new String[][] {new String[] {\"src/\"}, new String[0]}, \"1.8\");", "+\t\tcreateFile(", "+\t\t\t\"/P/src/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"   void zoo() {\\n\" +", "+\t\t\t\"\t    I i = () -> 0;\\n\" +", "+\t\t\t\"\t    I i2 = new I() {\\n\" +", "+\t\t\t\"\t\t    public int doit() {\\n\" +", "+\t\t\t\"\t\t\t    return 0;\\n\" +", "+\t\t\t\"\t\t    }\\n\" +", "+\t\t\t\"\t    };\\n\" +", "+\t\t\t\"   }\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\" class Y {}\\n\"", "+\t\t);", "+\t\tcreateFile(", "+\t\t\t\"/P/src/I.java\",", "+\t\t\t\"public interface I {\\n\" +", "+\t\t\t\"    public int doit();\\n\" +", "+\t\t\t\"}\\n\"", "+\t\t);", "+\t\t", "+\t\tIType type = getCompilationUnit(\"/P/src/I.java\").getType(\"I\");", "+\t\tIMethod method = type.getMethod(\"doit\", new String[0]);", "+\t\tsearch(method, DECLARATIONS|IGNORE_DECLARING_TYPE|IGNORE_RETURN_TYPE, SearchPattern.R_CASE_SENSITIVE | SearchPattern.R_ERASURE_MATCH, SearchEngine.createHierarchyScope(type), this.resultCollector);", "+\t\tassertSearchResults(\"src/I.java int I.doit() [doit] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<anonymous>#1.doit() [doit] EXACT_MATCH\");", "+\t}", "+\tfinally {", "+\t\tdeleteProject(\"P\");", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72119ffd287794d3d06cd0ac7ee198b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c53fb291a849342748306e59b6959038f8ec1321", "commitAfterChange": "d5a32e245b27c645dcf70347396d7253765682d3", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void test098()", "signatureAfterChange": " public void test098()", "diff": ["-\t\t\"The enum constant BLACK needs a corresponding case label in this enum switch on Colors\\n\" +", "+\t\t\"The switch on the enum type Colors should have a default case\\n\" +", "-\t\t\"The enum constant RED needs a corresponding case label in this enum switch on Colors\\n\" +", "+\t\t\"The enum constant BLACK needs a corresponding case label in this enum switch on Colors\\n\" +", "+\t\t\"The enum constant RED needs a corresponding case label in this enum switch on Colors\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"4. WARNING in E.java (at line 5)\\n\" +", "+\t\t\"\tswitch (color) {\\n\" +", "+\t\t\"\t        ^^^^^\\n\" +", "-\t\t\"4. ERROR in E.java (at line 16)\\n\" +", "+\t\t\"5. ERROR in E.java (at line 16)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b83934d3c440c5eee5dc937c837a2afa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "69cf42e8bc4eba88935c2a54eaa23de2e6259a9b", "commitAfterChange": "46618cf13188500eaee539b8e46fcf26be42ca02", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation\\\" value=\\\"warning\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f9346be4f5db70194fcfb46fd7113b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "cc547ec5c074d17ff882a095dbec68dcad72a87a", "commitAfterChange": "99250bacae54994417cccb9e6d497671bd34c73a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"  // Stack: 2, Locals: 5\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "-\t\t\"    13  astore 4\\n\" + ", "-\t\t\"    15  iconst_0\\n\" + ", "-\t\t\"    16  istore_2\\n\" + ", "-\t\t\"    17  aload 4\\n\" + ", "-\t\t\"    19  arraylength\\n\" + ", "-\t\t\"    20  istore_3\\n\" + ", "-\t\t\"    21  goto 35\\n\" + ", "-\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\"    27  ldc <String \\\"1x\\\"> [30]\\n\" + ", "-\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    32  goto 40\\n\" + ", "-\t\t\"    35  iload_2\\n\" + ", "-\t\t\"    36  iload_3\\n\" + ", "-\t\t\"    37  if_icmplt 24\\n\" + ", "-\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\"    43  ldc <String \\\"CESS\\\"> [32]\\n\" + ", "-\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void [34]\\n\" + ", "-\t\t\"    48  return\\n\" + ", "+\t\t\"    13  dup\\n\" + ", "+\t\t\"    14  astore_2\\n\" + ", "+\t\t\"    15  arraylength\\n\" + ", "+\t\t\"    16  ifeq 27\\n\" + ", "+\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    22  ldc <String \\\"1x\\\"> [30]\\n\" + ", "+\t\t\"    24  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "+\t\t\"    27  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    30  ldc <String \\\"CESS\\\"> [32]\\n\" + ", "+\t\t\"    32  invokevirtual java.io.PrintStream.println(java.lang.String) : void [34]\\n\" + ", "+\t\t\"    35  return\\n\" + ", "-\t\t\"        [pc: 24, line: 7]\\n\" + ", "-\t\t\"        [pc: 32, line: 8]\\n\" + ", "-\t\t\"        [pc: 35, line: 6]\\n\" + ", "-\t\t\"        [pc: 40, line: 10]\\n\" + ", "-\t\t\"        [pc: 48, line: 11]\\n\" + ", "+\t\t\"        [pc: 19, line: 7]\\n\" + ", "+\t\t\"        [pc: 27, line: 10]\\n\" + ", "+\t\t\"        [pc: 35, line: 11]\\n\" + ", "-\t\t\"        [pc: 0, pc: 49] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\"        [pc: 4, pc: 49] local: tab index: 1 type: int[]\\n\";", "+\t\t\"        [pc: 0, pc: 36] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 4, pc: 36] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9e8475c3cc0fe784ebd000ec2af29f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\t* @see G#G(Object)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t* @see G#G(Exception)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Exception) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic class X extends G<Exception> {\\n\" +", "-\t\t\t\"\t                         ^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tX(Exception exc) { super(exc);}\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^\\n\" +", "-\t\t\t\"The constructor G(E) refers to the missing type E\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tclass G<E extends Exception> {\\n\" +", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\tG(E e) {}\\n\" +", "-\t\t\t\"\t  ^\\n\" +", "-\t\t\t\"E cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t* @see G#G(Object)\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic class X extends G<Exception> {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tclass G<E extends Exception> {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8b1adfa79fb81ebe99afb4b85e4c1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "7aa41fe639eb46a740b35e612973cada9ba8267f", "commitAfterChange": "7ec8f457fa5afa1822c5c5a2c51b29731a82c4ce", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 102, "signatureBeforeChange": " \t \tpublic void testBug209936b()", "signatureAfterChange": " \tpublic void testBug209936a()", "diff": ["-\t", "-\tpublic void testBug209936b() {", "-\t\treportMissingJavadocTags = CompilerOptions.IGNORE;", "-\t\treportMissingJavadocComments = CompilerOptions.IGNORE;", "-\t\treportMissingJavadocCommentsVisibility = CompilerOptions.IGNORE;", "-\t\trunNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"p/X.java\",", "-\t\t\t\t\"package p;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class X extends Y {\\n\" + ", "-\t\t\t\t\"\tprotected class A extends Member {\\n\" + ", "-\t\t\t\t\"\t\t/**\\n\" + ", "-\t\t\t\t\"\t\t * @see Member#foo(Object, Object)\\n\" + ", "-\t\t\t\t\"\t\t */\\n\" + ", "-\t\t\t\t\"\t\tpublic void foo(Object source, Object data) {}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"p/Y.java\",", "-\t\t\t\t\"package p;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"import p1.Z;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class Y extends Z<Object> {\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"p1/Z.java\",", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class Z<T> {\\n\" + ", "-\t\t\t\t\"\tprotected class Member {\\n\" + ", "-\t\t\t\t\"\t\tprotected void foo(Object source, Object data) {\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in p\\\\X.java (at line 6)\\n\" + ", "-\t\t\t\"\t* @see Member#foo(Object, Object)\\n\" + ", "-\t\t\t\"\t              ^^^\\n\" + ", "-\t\t\t\"Javadoc: The method foo(Object, Object) from the type Z<T>.Member is not visible\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+\t */", "+\tpublic void testBug209936a() {", "+\t\treportMissingJavadocCommentsVisibility = CompilerOptions.WARNING;", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"p/X.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"public abstract class X extends Y {\\n\" + ", "+\t\t\t\t\"\tprotected class A extends Member {\\n\" + ", "+\t\t\t\t\"\t\t/**\\n\" + ", "+\t\t\t\t\"\t\t * @see Member#foo(Object, Object)\\n\" + ", "+\t\t\t\t\"\t\t */\\n\" + ", "+\t\t\t\t\"\t\tpublic void foo(Object source, Object data) {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"p/Y.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"import p1.Z;\\n\" + ", "+\t\t\t\t\"public abstract class Y extends Z<Object> {\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"p1/Z.java\",", "+\t\t\t\t\"package p1;\\n\" + ", "+\t\t\t\t\"public abstract class Z<T> {\\n\" + ", "+\t\t\t\t\"\tprotected class Member {\\n\" + ", "+\t\t\t\t\"\t\tprotected void foo(Object source, Object data) {\\n\" + ", "+\t\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in p\\\\X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see Member#foo(Object, Object)\\n\" + ", "+\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc771ee749f77983637fa906fdf6b89b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6dbb2ec74b77026a9a8c00b4381c92a21f100370", "commitAfterChange": "2d88125c63a44736bd6507d03cfcacc7c43a6f63", "methodNumberBeforeChange": 521, "methodNumberAfterChange": 521, "signatureBeforeChange": " \tpublic void test0504()", "signatureAfterChange": " \tpublic void test0504()", "diff": ["-\t\t\t\"    13  pop\\n\" + ", "-\t\t\t\"    14  getstatic XAB.CONST : XB [31]\\n\" + ", "-\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "-\t\t\t\"    20  new X [1]\\n\" + ", "-\t\t\t\"    23  dup\\n\" + ", "-\t\t\t\"    24  invokespecial X() [28]\\n\" + ", "-\t\t\t\"    27  invokevirtual X.foo() : void [43]\\n\" + ", "-\t\t\t\"    30  return\\n\" + ", "+\t\t\t\"    13  checkcast XAB [31]\\n\" + ", "+\t\t\t\"    16  pop\\n\" + ", "+\t\t\t\"    17  getstatic XAB.CONST : XB [33]\\n\" + ", "+\t\t\t\"    20  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "+\t\t\t\"    23  new X [1]\\n\" + ", "+\t\t\t\"    26  dup\\n\" + ", "+\t\t\t\"    27  invokespecial X() [28]\\n\" + ", "+\t\t\t\"    30  invokevirtual X.foo() : void [43]\\n\" + ", "+\t\t\t\"    33  return\\n\" + ", "-\t\t\t\"        [pc: 20, line: 11]\\n\" + ", "-\t\t\t\"        [pc: 30, line: 12]\\n\" + ", "+\t\t\t\"        [pc: 23, line: 11]\\n\" + ", "+\t\t\t\"        [pc: 33, line: 12]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 31] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 34] local: args index: 0 type: java.lang.String[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8600e13c51f3ca8a3377382064df82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1380, "methodNumberAfterChange": 1380, "signatureBeforeChange": " public void test1349()", "signatureAfterChange": " public void test1349()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in Scratch.java (at line 2)\\n\" +", "-\t\t\t\"\tprivate Y rawObject = new Y();\\n\" +", "-\t\t\t\"\t        ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in Scratch.java (at line 2)\\n\" +", "-\t\t\t\"\tprivate Y rawObject = new Y();\\n\" +", "-\t\t\t\"\t                          ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in Scratch.java (at line 4)\\n\" +", "-\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" +", "-\t\t\t\"\t                      ^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in Scratch.java (at line 5)\\n\" +", "-\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" +", "-\t\t\t\"\t                                 ^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in Scratch.java (at line 11)\\n\" +", "-\t\t\t\"\tclass Z { Zork z; }\\n\" +", "-\t\t\t\"\t          ^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Scratch.java (at line 2)\\n\" + ", "+\t\t\t\"\tprivate Y rawObject = new Y();\\n\" + ", "+\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Scratch.java (at line 2)\\n\" + ", "+\t\t\t\"\tprivate Y rawObject = new Y();\\n\" + ", "+\t\t\t\"\t                          ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Scratch.java (at line 4)\\n\" + ", "+\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation method(X<Y<Z>>, Y) of the generic method method(X<T>, T) of type Scratch\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Scratch.java (at line 4)\\n\" + ", "+\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Scratch.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation method(X<Y<Z>>, Y) of the generic method method(X<T>, T) of type Scratch\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in Scratch.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in Scratch.java (at line 11)\\n\" + ", "+\t\t\t\"\tclass Z { Zork z; }\\n\" + ", "+\t\t\t\"\t          ^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf080832a1b9f95ff0623a3bbe62cc54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 158, "signatureBeforeChange": " \tpublic void test0154_try_finally()", "signatureAfterChange": " public void test0504_try_finally()", "diff": ["-\t// null analysis -- try/finally", "-\tpublic void test0154_try_finally() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo(X x) {\\n\" + ", "-\t\t\t\t\"\t\t x = null;\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t\t x = null;\\n\" +           ", "-\t\t\t\t\"\t\t } finally {\\n\" + ", "-\t\t\t\t\"\t\t\t if (x != null) { /* */ }\\n\" + // complain, null in both paths ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tx = null;\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\"\tif (x != null) { /* */ }\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t}", "+// null analysis -- try/finally", "+public void test0504_try_finally() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(X x) {\\n\" + ", "+\t\t\t\"    x = null;\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"    } finally {\\n\" + ", "+\t\t\t\"      if (x != null) { /* */ }\\n\" + // complain null ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (x != null) { /* */ }\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10b488e65e2f32140ed7781770a2e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "1d91bb6095cf925ea7ef511c76b46befc586fea4", "commitAfterChange": "11e4e14c87ae9f5d3c387265b339332ab33728bd", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void testProjectGetPackageFragments() throws JavaModelException", "signatureAfterChange": " public void testProjectGetPackageFragments() throws JavaModelException", "diff": ["-\t\t\"META-INF [in \"+ getExternalJCLPathString() + \"]\\n\" + ", "-\t\t\"META-INF [in lib.jar [in JavaProjectTests]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c292384e96780058b36c8a05e4823910", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "f914881dbc94abaf445f0359517391331cec0c1f", "commitAfterChange": "642dc124ef5eccd7fd363b9a3443fef6794a2e79", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 134, "signatureBeforeChange": " \tpublic void testBug92944_CLASS_AND_ENUM() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS_AND_ENUM() throws CoreException", "diff": ["+\t\t\t\"Test\\n\" + ", "+\t\t\t\"Test$Inner\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c470f3d6ed2406416b1536aad080cf9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "fb5a4a9153591472847460cda5686593e378d5bf", "commitAfterChange": "c5e448ecc90e8d75bf431155e497df695586ca94", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void test_nesting_1()", "signatureAfterChange": " public void test_nesting_1()", "diff": ["-\tcustomOptions.put(JavaCore.COMPILER_NONNULL_IS_DEFAULT, JavaCore.ENABLED);", "+// This option currently does nothing:", "+//\tcustomOptions.put(JavaCore.COMPILER_NONNULL_IS_DEFAULT, JavaCore.ENABLED);", "+\t\t\t\"@NonNullByDefault\\n\" +", "-\t\t\"1. ERROR in X.java (at line 15)\\n\" +", "+\t\t\"1. ERROR in X.java (at line 16)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 24)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 25)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c53db3731c5d7ed50855d043781bce06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 542, "methodNumberAfterChange": 542, "signatureBeforeChange": " \tpublic void test538()", "signatureAfterChange": " \tpublic void test538()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tClass c = Foo.class;\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c55e2ba583dbd46d566ccc97d2016c12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 386, "methodNumberAfterChange": 386, "signatureBeforeChange": " \tpublic void test384()", "signatureAfterChange": " \tpublic void test384()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "-\t\t\t\"\t                        ^^^^^\\n\" + ", "-\t\t\t\"The method foo() of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + ", "-\t\t\t\"\t                          ^^^^^^\\n\" + ", "-\t\t\t\"The method foo2() of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5e56278858ada2062863f6cd42596fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SnippetCompletionTests.java", "commitBeforeChange": "e9319b33025ecf8b2148a8134d3733884dd65fff", "commitAfterChange": "8d91d5c811f3f400237d12dea4d98edfb8f8a099", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testCodeSnippetAssistForClassFileWithDollar() throws JavaModelException", "signatureAfterChange": " public void testCodeSnippetAssistForClassFileWithDollar() throws JavaModelException", "diff": ["-\t\t\"void[KEYWORD]{void, null, null, void, [\"+tokenStart+\", \"+tokenEnd+\"], \"+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caa978c729e99137f4f37c30a903c1f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "3c48c9fa4ac4d99dec40bf37b65e9e7f38ac2398", "commitAfterChange": "b5bf53e6da2ad7bf71cf2aa2a6885479711b42ec", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " public void testBug92944_CLASS_AND_ENUM() throws CoreException", "signatureAfterChange": " public void testBug92944_CLASS_AND_ENUM() throws CoreException", "diff": ["+\t\t\"TestPrefix\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd94a30cec28a108895b17033cfe6b6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\t* @see G#G(Object)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t* @see G#G(Exception)\\n\" +", "-\t\t\t\"\t         ^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The constructor G(Exception) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic class X extends G<Exception> {\\n\" +", "-\t\t\t\"\t                         ^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tX(Exception exc) { super(exc);}\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^\\n\" +", "-\t\t\t\"The constructor G(E) refers to the missing type E\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tclass G<E extends Exception> {\\n\" +", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\tG(E e) {}\\n\" +", "-\t\t\t\"\t  ^\\n\" +", "-\t\t\t\"E cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t* @see G#G(Object)\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The constructor G(Object) is undefined\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic class X extends G<Exception> {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tclass G<E extends Exception> {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0c75012d7c3527d4ec54e853a028677", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "b9b175d1f3b3a2cd4a485af26edf7481b654f8d0", "commitAfterChange": "2ee5cab3338235f002d8a433d3e99e7f32c5838e", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tpublic void testBug92944_TYPE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_TYPE() throws CoreException", "diff": ["+\t\t\t\"b87627.Collection\\n\" + ", "+\t\t\t\"b87627.List\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d538f19bf0dca29274f9aae6db3e7e02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 274, "signatureBeforeChange": " public void testBug286601j1()", "signatureAfterChange": " public void testBug330313_wksp1_05_njl()", "diff": ["-}", "-public void testBug286601j1() {", "-\tthis.formatterPrefs.join_wrapped_lines = false;", "-\tthis.formatterPrefs.alignment_for_expressions_in_array_initializer = DefaultCodeFormatterConstants.WRAP_ONE_PER_LINE;", "-\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "-\tString source =", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X06b {\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"    \\n\" +", "-\t\t\"    // Table to merge access modes for condition statements (e.g branch[x] || branch[y]). \\n\" +", "-\t\t\"    private static final String[][] ACCESS_MODE_CONDITIONAL_TABLE= {\\n\" +", "-\t\t\"    { \\\"1234567890123456789012345678901234567890\\\", \\\"1234567890123456789012345678901234567890\\\" },\\n\" +", "-\t\t\"    { \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\", \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\" },\\n\" +", "-\t\t\"    };\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"}\\n\";", "-\tformatSource(source,", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X06b\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\t// Table to merge access modes for condition statements (e.g branch[x] ||\\n\" +", "-\t\t\"\t// branch[y]).\\n\" +", "-\t\t\"\tprivate static final String[][] ACCESS_MODE_CONDITIONAL_TABLE =\\n\" +", "-\t\t\"\t{\\n\" +", "-\t\t\"\t\t{ \\\"1234567890123456789012345678901234567890\\\", \\\"1234567890123456789012345678901234567890\\\" },\\n\" +", "-\t\t\"\t\t{ \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\", \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\" },\\n\" +", "-\t\t\"\t};\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"}\\n\"", "-\t);", "-}", "+}", "+public void testBug330313_wksp1_05_njl() {", "+\tthis.formatterPrefs.join_wrapped_lines = false;", "+\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "+\tString source =", "+\t\t\"package wksp1;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X05 {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\tprivate void foo() {\\n\" + ", "+\t\t\"\t\tsetBuildFileLocation.invoke(runner, new Object[] { buildFileLocation });\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\";", "+\tformatSource(source,", "+\t\t\"package wksp1;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X05\\n\" + ", "+\t\t\"{\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\tprivate void foo()\\n\" + ", "+\t\t\"\t{\\n\" + ", "+\t\t\"\t\tsetBuildFileLocation.invoke(runner, new Object[]\\n\" + ", "+\t\t\"\t\t{ buildFileLocation });\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\"", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da5544d5a35eea44299984abc6170d64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 628, "methodNumberAfterChange": 628, "signatureBeforeChange": " \tpublic void _test0610()", "signatureAfterChange": " \tpublic void test0610()", "diff": ["-\tpublic void _test0610() {", "+\tpublic void test0610() {", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnumbers= (List<Number>) objects; // correct - cast error\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Cannot cast from List<Object> to List<Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"\text= (List<? extends Number>) objects; // wrong, should fail\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Cannot cast from List<Object> to List<? extends Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\text= raw; // correct - raw conversion warning issued\\n\" + ", "-\t\t\t\"\t     ^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<? extends Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tnumbers= raw; // correct - raw conversion warning issued\\n\" + ", "-\t\t\t\"\t         ^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Number>\\n\" + ", "-\t\t\t\"----------\\n\");", "+    \t\t\"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+    \t\t\"\tvoid foo(List<Object> objects, List raw) {\\n\" + ", "+    \t\t\"\t                               ^^^^\\n\" + ", "+    \t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+    \t\t\"\tnumbers= (List<Number>) objects; // correct - cast error\\n\" + ", "+    \t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Cannot cast from List<Object> to List<Number>\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+    \t\t\"\text= (List<? extends Number>) objects; // wrong, should fail\\n\" + ", "+    \t\t\"\t     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Cannot cast from List<Object> to List<? extends Number>\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+    \t\t\"\text= raw; // correct - raw conversion warning issued\\n\" + ", "+    \t\t\"\t     ^^^\\n\" + ", "+    \t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<? extends Number>\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 13)\\n\" + ", "+    \t\t\"\tnumbers= raw; // correct - raw conversion warning issued\\n\" + ", "+    \t\t\"\t         ^^^\\n\" + ", "+    \t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Number>\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf6641c27d6d13febf20d334ff21742", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "876d1e29545f3823ab6b6c14229362303cd9cc00", "commitAfterChange": "0de5167791884524f72d9d44c10f0e243af65d00", "methodNumberBeforeChange": 491, "methodNumberAfterChange": 491, "signatureBeforeChange": " \tpublic void test0472()", "signatureAfterChange": " \tpublic void test0472()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in test\\\\Foo.java (at line 4)\\n\" +", "-\t\t\t\"\tprivate R dosomething(){ return s; } \\n\" +", "-\t\t\t\"\t          ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The method dosomething() from the type Foo<R> is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in test\\\\Foo.java (at line 5)\\n\" +", "-\t\t\t\"\tprivate class Bar {} \\n\" +", "-\t\t\t\"\t              ^^^\\n\" +", "-\t\t\t\"The type Foo<R>.Bar is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in test02\\\\FooBar.java (at line 6)\\n\" +", "-\t\t\t\"\tf.s = \\\"foo\\\"; \\n\" +", "-\t\t\t\"\t  ^\\n\" +", "-\t\t\t\"The field Foo<String>.s is not visible\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in test02\\\\FooBar.java (at line 7)\\n\" +", "-\t\t\t\"\tthis.s = \\\"foo\\\";\\n\" +", "-\t\t\t\"\t     ^\\n\" +", "-\t\t\t\"The field Foo<R>.s is not visible\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in test02\\\\FooBar.java (at line 8)\\n\" +", "-\t\t\t\"\tf.dosomething(); \\n\" +", "-\t\t\t\"\t  ^^^^^^^^^^^\\n\" +", "-\t\t\t\"The method dosomething() from the type Foo<String> is not visible\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in test02\\\\FooBar.java (at line 9)\\n\" +", "-\t\t\t\"\tthis.dosomething();  \\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" +", "-\t\t\t\"The method dosomething() from the type Foo<R> is not visible\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in test02\\\\FooBar.java (at line 10)\\n\" +", "-\t\t\t\"\tBar b1; \\n\" +", "-\t\t\t\"\t^^^\\n\" +", "-\t\t\t\"The type Bar is not visible\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in test02\\\\FooBar.java (at line 11)\\n\" +", "-\t\t\t\"\tFooBar<String>.Bar b2; \\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The type FooBar.Bar is not visible\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. ERROR in test02\\\\FooBar.java (at line 12)\\n\" +", "-\t\t\t\"\tFoo<String>.Bar b3; \\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The type Foo.Bar is not visible\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in test\\\\Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tprivate R dosomething(){ return s; } \\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method dosomething() from the type Foo<R> is never used locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in test\\\\Foo.java (at line 5)\\n\" + ", "+\t\t\t\"\tprivate class Bar {} \\n\" + ", "+\t\t\t\"\t              ^^^\\n\" + ", "+\t\t\t\"The type Foo<R>.Bar is never used locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in test02\\\\FooBar.java (at line 6)\\n\" + ", "+\t\t\t\"\tf.s = \\\"foo\\\"; \\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The field Foo<String>.s is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in test02\\\\FooBar.java (at line 7)\\n\" + ", "+\t\t\t\"\tthis.s = \\\"foo\\\";\\n\" + ", "+\t\t\t\"\t     ^\\n\" + ", "+\t\t\t\"The field Foo<R>.s is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in test02\\\\FooBar.java (at line 7)\\n\" + ", "+\t\t\t\"\tthis.s = \\\"foo\\\";\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from String to R\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in test02\\\\FooBar.java (at line 8)\\n\" + ", "+\t\t\t\"\tf.dosomething(); \\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method dosomething() from the type Foo<String> is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in test02\\\\FooBar.java (at line 9)\\n\" + ", "+\t\t\t\"\tthis.dosomething();  \\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method dosomething() from the type Foo<R> is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in test02\\\\FooBar.java (at line 10)\\n\" + ", "+\t\t\t\"\tBar b1; \\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The type Bar is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in test02\\\\FooBar.java (at line 11)\\n\" + ", "+\t\t\t\"\tFooBar<String>.Bar b2; \\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The type FooBar.Bar is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in test02\\\\FooBar.java (at line 12)\\n\" + ", "+\t\t\t\"\tFoo<String>.Bar b3; \\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The type Foo.Bar is not visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5a731c284e2fff8b5fe3a1a0181fa02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c53fb291a849342748306e59b6959038f8ec1321", "commitAfterChange": "d5a32e245b27c645dcf70347396d7253765682d3", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void test062()", "signatureAfterChange": " public void test062()", "diff": ["-\t\t\"The enum constant A needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"The switch on the enum type X should have a default case\\n\" +", "-\t\t\"The enum constant B needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"The enum constant A needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"The enum constant B needs a corresponding case label in this enum switch on X\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"4. WARNING in X.java (at line 8)\\n\" +", "+\t\t\"\tswitch (x) {\\n\" +", "+\t\t\"\t        ^\\n\" +", "-\t\t\"4. ERROR in X.java (at line 9)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 9)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5c88b49be1dce00cf6a635353487ca4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 832, "methodNumberAfterChange": 832, "signatureBeforeChange": " public void test826()", "signatureAfterChange": " public void test826()", "diff": ["-\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\"\t           ^\\n\" + ", "+\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 14)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6a19279602580c3f470c6e250fb80f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AccessRestrictionsTests.java", "commitBeforeChange": "86397dfc80023f615cc88c0705b2ada916e6efb2", "commitAfterChange": "24624a25f60573230ed7652730faedca15fd4d8b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test003() throws CoreException", "signatureAfterChange": " public void test003() throws CoreException", "diff": ["-\t\t\t\"----------\\n----------\\n----------\\n----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\"", "-\t\t\t\"----------\\n----------\\n----------\\n----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\"", "-\t\t\t\"----------\\n----------\\n----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8a30eb8f6dd87bbaf9a873314fba3a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "616a41b14ead174db92c630ec6ed7f1d666a9b67", "commitAfterChange": "645b7eff21d5db2b90380f1d4478beb9fa33f107", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -proceedOnError    do not stop at first error, dumping class files with\\n\" +", "-        \"                       problem methods\\n\" +", "+        \"    -proceedOnError[:Fatal]\\n\" + ", "+        \"                       do not stop at first error, dumping class files with\\n\" + ", "+        \"                       problem methods\\n\" + ", "+        \"                       With \\\":Fatal\\\", all optional errors are treated as fatal\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece3be81060c4a0043aaab652a193ed0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "f8f573fb4945f47fa2e1f634d0b55fa9e0151f17", "commitAfterChange": "b1e2ed2bb1403d1f729ccda27eb7b9ebe7009bed", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 85, "signatureBeforeChange": "     public void testBug378024c() throws Exception", "signatureAfterChange": "     public void testBug378024c() throws Exception", "diff": ["-                \"//lead 3\\n\" +", "-                \"import java.util.HashMap;// test3\\n\" +", "-                \"// commen 3\\n\" + ", "+                \"\\n\" +", "+                \"\\n\" +", "+                \"\\n\" +", "+                \"//lead 3\\n\" +", "+                \"import java.util.HashMap;// test3\\n\" +", "+                \"// commen 3\\n\" + ", "+                \"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed20cefdba4fc0bb3812977adefaf3f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "75fd26922e4c1a3951587500ef0d4c4aec9b93ba", "commitAfterChange": "ec933200149b0beb2aa7f1482e62f6a573c5bd61", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast\\\" value=\\\"warning\\\"/>\\n\" + ", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unusedWarningToken\\\" value=\\\"warning\\\"/>\\n\" +\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast\\\" value=\\\"warning\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f174c4307043cf07179c5a802350ec9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void test0026()", "signatureAfterChange": " public void test0026()", "diff": ["-// NOTE: THIS TEST MOST LIKELY CAPTURES THE WRONG OUTPUT FOR JAVA 8. AS WE FIX TYPE INFERENCE ISSUES, THIS MAY FAIL.", "+// FIXME(stephan): javac8 does not report the ambiguity, re-check after integrating inference with overload resolution", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tX<Number> x = new X<>(1);\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tX<Object> x5 = new X<>(1);\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Object>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ddc8e2d3210ae5bda11f2dd936eeaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "b9b175d1f3b3a2cd4a485af26edf7481b654f8d0", "commitAfterChange": "2ee5cab3338235f002d8a433d3e99e7f32c5838e", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 123, "signatureBeforeChange": " \tpublic void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "diff": ["+\t\t\t\"b87627.Collection\\n\" + ", "+\t\t\t\"b87627.List\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2076fa0474ee6c9ba9ef10e362a0a53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c31c921d319cbf1346e5bfb26cf42ff15297484d", "commitAfterChange": "2becf6dcab514ae8708935b2b42eed94f2bad821", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " \tpublic void test0243()", "signatureAfterChange": " \tpublic void test0243()", "diff": ["-\t\t\t\"1. ERROR in SubTypes.java (at line 5)\\n\" +", "-\t\t\t\"\t@Override public X foo() { return new X(); }\\n\" +", "-\t\t\t\"\t                   ^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo() in type B\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in SubTypes.java (at line 6)\\n\" +", "+\t\t\t\"1. ERROR in SubTypes.java (at line 6)\\n\" +", "-\t\t\t\"3. ERROR in SubTypes.java (at line 9)\\n\" +", "+\t\t\t\"2. ERROR in SubTypes.java (at line 9)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b78225139bf769a7ef40a5d685d440", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "commitAfterChange": "2d9dc5098273e0e95832d81d735d2d77249738ef", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " public void testBug92944_CLASS_AND_ENUM() throws CoreException", "signatureAfterChange": " public void testBug92944_CLASS_AND_ENUM() throws CoreException", "diff": ["+\t\t\"b108088.A108088\\n\" + ", "+\t\t\"b108088.B108088\\n\" + ", "+\t\t\"b108088.Test108088\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f60a860fa2457ceacf1c2451b0635773", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic void test036()", "signatureAfterChange": "  \tpublic void test036()", "diff": ["-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. ERROR in X.java (at line 8)\\n\"", "-\t\t\t\t+ \"\tpublic void p_foo(inr a, inx b, inq c) {\\n\"", "-\t\t\t\t+ \"\t                  ^^^\\n\"", "-\t\t\t\t+ \"inr cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in X.java (at line 8)\\n\"", "-\t\t\t\t+ \"\tpublic void p_foo(inr a, inx b, inq c) {\\n\"", "-\t\t\t\t+ \"\t                         ^^^\\n\"", "-\t\t\t\t+ \"inx cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in X.java (at line 8)\\n\"", "-\t\t\t\t+ \"\tpublic void p_foo(inr a, inx b, inq c) {\\n\"", "-\t\t\t\t+ \"\t                                ^^^\\n\"", "-\t\t\t\t+ \"inq cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"----------\\n\");", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t* @param b Valid param\\n\" + ", "+\t\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\t\"Javadoc: Duplicate tag for parameter\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void p_foo(inr a, inx b, inq c) {\\n\" + ", "+\t\t\t\t\"\t                  ^^^\\n\" + ", "+\t\t\t\t\"inr cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void p_foo(inr a, inx b, inq c) {\\n\" + ", "+\t\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter a\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void p_foo(inr a, inx b, inq c) {\\n\" + ", "+\t\t\t\t\"\t                         ^^^\\n\" + ", "+\t\t\t\t\"inx cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void p_foo(inr a, inx b, inq c) {\\n\" + ", "+\t\t\t\t\"\t                                ^^^\\n\" + ", "+\t\t\t\t\"inq cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbc14255b437893f27043aa2be0bc668", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6d9cd9b246f8b8740f4a501085a32633b2b6c2af", "commitAfterChange": "470afdfff602b441f9a45a7d903230534423c9ca", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 297, "signatureBeforeChange": " \tpublic void test295()", "signatureAfterChange": " \tpublic void test295()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method start() belongs to the raw type B. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\t\"3. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\t\"\t                    ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method start() belongs to the raw type B. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in C.java (at line 4)\\n\" + ", "+\t\t\t\"2. ERROR in C.java (at line 4)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\t\"\t                                         ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method start() belongs to the raw type B. References to generic type B<X> should be parameterized\\n\" + "]}], "num": 28915}
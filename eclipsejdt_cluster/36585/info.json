{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b136f5e40aa5b8c9b222e77266385d83", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d0292d31efcb171468376b55bf7434c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "8d87ecb9a70373c09b0bb1a42f7860870a18b529", "commitAfterChange": "4a2c3a0abcdc4a5051ed4a37b5b0aee7f08d4f75", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tpublic void test0521() throws JavaModelException", "signatureAfterChange": " \tpublic void test0521() throws JavaModelException", "diff": ["-\t\tAST.parseCompilationUnit(sourceUnit, true, owner, counter);", "+\t\tASTParser parser = ASTParser.newParser(AST.LEVEL_2_0);", "+\t\tparser.setSource(sourceUnit);", "+\t\tparser.setResolveBindings(true);", "+\t\tparser.setWorkingCopyOwner(owner);", "+\t\tparser.createAST(counter);", "-\t\t\t\tAST.parseCompilationUnit(sourceUnit, true, owner, new Canceler(i));", "+\t\t\t\tparser = ASTParser.newParser(AST.LEVEL_2_0);", "+\t\t\t\tparser.setSource(sourceUnit);", "+\t\t\t\tparser.setResolveBindings(true);", "+\t\t\t\tparser.setWorkingCopyOwner(owner);", "+\t\t\t\tparser.createAST(new Canceler(i));", "-\t\tAST.parseCompilationUnit(sourceUnit, true, owner, new Canceler(counter.count));", "+\t\tparser = ASTParser.newParser(AST.LEVEL_2_0);", "+\t\tparser.setSource(sourceUnit);", "+\t\tparser.setResolveBindings(true);", "+\t\tparser.setWorkingCopyOwner(owner);", "+\t\tparser.createAST(new Canceler(counter.count));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d95d3ac8454adcf0c505e964f13c9497", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b9151e9319708f3d004c77f114c4f35584a87c41", "commitAfterChange": "ee4aaa82998d38e6753ee8cc828566dd18d4910f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tICompilationUnit unit, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit(char[] source)", "diff": ["-\t */", "-\tpublic static CompilationUnit parseCompilationUnit(", "-\t\tICompilationUnit unit,", "-\t\tboolean resolveBindings,", "-\t\tWorkingCopyOwner owner,", "-\t\tIProgressMonitor monitor) {", "-\t\t", "-\t\tif (unit == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\ttry {", "-\t\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "-\t\t\tc.setSource(unit);", "-\t\t\tc.setResolveBindings(resolveBindings);", "-\t\t\tc.setWorkingCopyOwner(owner);", "-\t\t\tASTNode result = c.createAST(monitor);", "-\t\t\treturn (CompilationUnit) result;", "-\t\t} catch (IllegalStateException e) {", "-\t\t\t// convert ASTParser's complaints into old form", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t}"]}], "num": 36585}
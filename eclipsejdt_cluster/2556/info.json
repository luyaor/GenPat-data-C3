{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04905330ad5493da03ffb3060c8df77f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75ea0c813cdbb80ab5ec86089abf1e3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "f3797939fa5164cd62a3ae51074dba1ccea759ff", "commitAfterChange": "0df341e86846b5d019d9adfde0716c02f828f524", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["+\t\tint size = tagElement.fragments().size();", "+\t\tint[] replaceIndex = new int[size];", "+\t\tint idx = 0;", "+\t\t\treplaceIndex[idx] = 0;", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.JavadocFieldReference fieldRef = (org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference) javadoc.getNodeStartingAt(start);", "-\t\t\t\tif (fieldRef != null) {", "-\t\t\t\t\trecordNodes(name, fieldRef);", "-\t\t\t\t\trecordNodes(node, fieldRef);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "+\t\t\t\tif (compilerNode instanceof JavadocMessageSend) {", "+\t\t\t\t\treplaceIndex[idx] = 1;", "+\t\t\t\t}", "+\t\t\t\tif (compilerNode!= null) {", "+\t\t\t\t\trecordNodes(name, compilerNode);", "+\t\t\t\t\trecordNodes(node, compilerNode);", "-\t\t\t\t\trecordName(memberRef.getQualifier(), fieldRef.receiver);", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = null;", "+\t\t\t\t\tif (compilerNode instanceof JavadocFieldReference) {", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = ((JavadocFieldReference)compilerNode).receiver;", "+\t\t\t\t\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\t\t\t\t\ttypeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) expression;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} ", "+\t\t\t\t\telse if (compilerNode instanceof JavadocMessageSend) {", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = ((JavadocMessageSend)compilerNode).receiver;", "+\t\t\t\t\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\t\t\t\t\ttypeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) expression;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (typeRef != null) {", "+\t\t\t\t\t\trecordName(memberRef.getQualifier(), typeRef);", "+\t\t\t\t\t}", "+\t\tfor (int i=0; i<size; i++) {", "+\t\t\tif (replaceIndex[i] == 1) {", "+\t\t\t\tMemberRef memberRef = (MemberRef) tagElement.fragments().remove(i);", "+\t\t\t\tMethodRef methodRef = this.ast.newMethodRef();", "+\t\t\t\tmethodRef.setName((SimpleName)memberRef.getName().clone(this.ast));", "+\t\t\t\tif (memberRef.getQualifier() != null) {", "+\t\t\t\t\tmethodRef.setQualifier((Name)memberRef.getQualifier().clone(this.ast));", "+\t\t\t\t}", "+\t\t\t\tmethodRef.setSourceRange(memberRef.getStartPosition(), memberRef.getLength());", "+\t\t\t\ttagElement.fragments().add(i, methodRef);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66b6bd64ae024ea73bf7c2f8a61b7d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "commitAfterChange": "85d82ef92c86e257cfcb71c0ec95b6b64432a5cb", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic MarkerAnnotation convert(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation annotation)", "signatureAfterChange": "  \tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "diff": ["+\tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda) {", "+\t\tfinal LambdaExpression\tlambdaExpression = new LambdaExpression(this.ast);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(lambdaExpression, lambda);", "+\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments;", "+\t\tif (arguments != null) {", "+\t\t\tint argumentsLength = arguments.length;", "+\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Argument argument = arguments[i];", "+\t\t\t\tif (argument.type == null) {", "+\t\t\t\t\tVariableDeclarationFragment variableDeclarationFragment = new VariableDeclarationFragment(this.ast);", "+\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\tsimpleName.internalSetIdentifier(new String(argument.name));", "+\t\t\t\t\tint start = argument.sourceStart;", "+\t\t\t\t\tint end = argument.sourceEnd;", "+\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(simpleName, argument);", "+\t\t\t\t\t\trecordNodes(variableDeclarationFragment, argument);", "+\t\t\t\t\t}", "+\t\t\t\t\tvariableDeclarationFragment.setName(simpleName);", "+\t\t\t\t\tlambdaExpression.parameters().add(variableDeclarationFragment);\t\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tSingleVariableDeclaration singleVariableDeclaration = convert(argument);", "+\t\t\t\t\tlambdaExpression.parameters().add(singleVariableDeclaration);\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (lambda.body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) lambda.body));", "+\t\t} else {", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) lambda.body));", "+\t\t}", "+\t\tint sourceStart = lambda.sourceStart;", "+\t\tlambdaExpression.setSourceRange(sourceStart, lambda.sourceEnd - sourceStart + 1);", "+\t\tlambdaExpression.setParentheses(lambda.hasParentheses);", "+\t\treturn lambdaExpression;", "+\t}"]}], "num": 2556}
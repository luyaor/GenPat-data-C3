{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f303843e422c22c0fb6d95717391c9b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb0040dca273ecf132981bbf71bfac3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "d81785c71a67fba20ae0493dda59a631a5f97e6d", "commitAfterChange": "a925b790a826918fcd3df46b6a40cc1132dae964", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tboolean disableExclusionPatterns = JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true));", "+\t\tboolean disableCustomOutputLocations = JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true));", "+\t\t", "-\t\t\t\t\tif (resolvedEntry.getExclusionPatterns() != null && resolvedEntry.getExclusionPatterns().length > 0", "-\t\t\t\t\t\t\t&& JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "+\t\t\t\t\tif (disableExclusionPatterns && resolvedEntry.getExclusionPatterns() != null && resolvedEntry.getExclusionPatterns().length > 0) {", "-\t\t\t\t\t\tif (JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "+\t\t\t\t\t\tif (disableCustomOutputLocations) {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// check exact match", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// check nesting", "-\t\t\t\t\t\toutputLocations[outputCount++] = resolvedEntry.getOutputLocation();", "+\t\t\t\t\t\toutputLocations[outputCount++] = customOutput;", "-\t\t\t// prevent nesting output location inside entry", "-\t\t\tint index;", "-\t\t\tif ((index = Util.indexOfNestedPath(entryPath, outputLocations, outputCount)) != -1) {", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInEntry\", outputLocations[index].makeRelative().toString(), entryPath.makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t}", "+\t\t\t// prevent nesting output location inside entry unless enclosing is a source entry which explicitly exclude the output location", "+\t\t    char[][] exclusionPatterns = ((ClasspathEntry)entry).fullExclusionPatternChars();", "+\t\t    for (int j = 0; j < outputCount; j++){", "+\t\t        IPath currentOutput = outputLocations[j];", "+    \t\t\tif (entryPath.equals(currentOutput)) continue;", "+\t\t\t\tif (entryPath.isPrefixOf(currentOutput)) {", "+\t\t\t\t    if (kind != IClasspathEntry.CPE_SOURCE || !Util.isExcluded(currentOutput, exclusionPatterns)) {", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInEntry\", currentOutput.makeRelative().toString(), entryPath.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t    }", "+\t\t\t\t}", "+\t\t    }", "-\t\t\t// prevent nesting entry inside output location - when distinct from project or a source folder", "+\t\t    // prevent nesting entry inside output location - when distinct from project or a source folder", "+\t\t\tint index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcf4ec78dc8162753abcfdf194f42268", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "9969e29f774930c96f440be8a722cc700768757e", "commitAfterChange": "b5db65bfc72bbc853a6a1cc971b563564ea182d8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["-\t\tIPath potentialNestedOutput = null;", "+\t\tIPath potentialNestedOutput = null; // for error reporting purpose", "-\t\tif (potentialNestedOutput != null && sourceEntryCount > outputCount-1) {", "+\t\tif (sourceEntryCount <= outputCount-1) {", "+\t\t    allowNestingInOutputLocations[0] = true;", "+\t\t} else if (potentialNestedOutput != null) {", "-\t\t", "+", "-\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "-\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "+\t\t\tboolean isProjectRelative = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = isProjectRelative ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "-\t\t\tint index;", "-\t\t\tif ((index = Util.indexOfEnclosingPath(entryPath, outputLocations, outputCount)) != -1) {", "-\t\t\t\tif (!allowNestingInOutputLocations[index]) {", "-\t\t\t\t\t// allow nesting in project's output if all source entries have a custom output", "-\t\t\t\t\tif (index != 0 || sourceEntryCount > outputCount - 1) {", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.makeRelative().toString(), outputLocations[index].makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "+\t\t    for (int j = 0; j < outputCount; j++){", "+\t\t        if (allowNestingInOutputLocations[j]) continue;", "+\t\t        IPath currentOutput = outputLocations[j];", "+\t\t\t\tif (currentOutput.isPrefixOf(entryPath)) {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.makeRelative().toString(), currentOutput.makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t}", "+\t\t    }\t\t\t", "-\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "-\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "+\t\t\tboolean isProjectRelative = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = isProjectRelative ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();"]}], "num": 71015}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72f00c239830bcd10779b9c1ce5f00a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05c8009510314ffb32436a79ec4f68b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationElementDeclarationImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r     public AnnotationValue getDefaultValue()", "signatureAfterChange": "     public AnnotationValue getDefaultValue()", "diff": ["-\t */\r", "-    public AnnotationValue getDefaultValue()\r", "-    {   \r", "-        if( isFromSource() ){\r", "-            final AnnotationTypeMemberDeclaration astNode = (AnnotationTypeMemberDeclaration)getAstNode();\r", "-\t\t\tif( astNode == null ) return null;\r", "-            final Expression defaultExpr = astNode.getDefault();\r", "-            if(defaultExpr == null ) return null;\r", "-            return Factory.createAnnotationValue(defaultExpr, this, _env);\r", "-        }\r", "-        else{\r", "-            // TODO: handle the binary case.            \r", "-            return null;\r", "-        }\r", "-    }\r", "+\t */", "+    public AnnotationValue getDefaultValue()", "+    {   ", "+\t\tfinal IMethodBinding binding = getDeclarationBinding();", "+\t\tfinal Object defaultValue = binding.getDefaultValue();", "+\t\treturn Factory.createDefaultValue(defaultValue, this, _env);      ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadc7720d1002ac2bda81e74578de781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getTarget(IPath path, boolean checkResourceExistence)", "diff": ["-public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence) {", "-", "-\tif (path == null) return null;", "-\t", "-\t// lookup - inside the container", "-\tif (path.getDevice() == null) { // container relative paths should not contain a device ", "-\t\t\t\t\t\t\t\t\t\t\t\t// (see http://dev.eclipse.org/bugs/show_bug.cgi?id=18684)", "-\t\t\t\t\t\t\t\t\t\t\t\t// (case of a workspace rooted at d:\\ )", "-\t\tIResource resource = container.findMember(path);", "-\t\tif (resource != null){", "-\t\t\tif (!checkResourceExistence ||resource.exists()) return resource;", "-\t\t\treturn null;", "-\t\t}", "-\t}", "-\t", "-\t// if path is relative, it cannot be an external path", "-\t// (see http://dev.eclipse.org/bugs/show_bug.cgi?id=22517)", "-\tif (!path.isAbsolute()) return null; ", "-", "-\t// lookup - outside the container", "-\treturn getTargetAsExternalFile(path, checkResourceExistence);\t", "+public static Object getTarget(IPath path, boolean checkResourceExistence) {", "+\tObject target = getWorkspaceTarget(path); // Implicitly checks resource existence", "+\tif (target != null)", "+\t\treturn target;", "+\treturn getExternalTarget(path, checkResourceExistence);"]}], "num": 16000}
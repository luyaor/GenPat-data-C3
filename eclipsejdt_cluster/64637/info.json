{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3e02f09dffd2b64fdda64cb40542ea7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6624738b756959d9cd86715f844c135d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "1a523523632cd1a64bce4e193fddecc091f0a09b", "commitAfterChange": "2da53a14245271c999bfef856e9b2ece46065198", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  private void checkMethods()", "signatureAfterChange": " private void checkMethods()", "diff": ["-", "-\t\t\t\t} else {", "-\t\t\t\t\tif (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract())", "-\t\t\t\t\t\tif (mustImplementAbstractMethod(matchingInherited[0])) {", "-\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "-\t\t\t\t\t\t\tif (typeDeclaration != null) {", "-\t\t\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(matchingInherited[0]);", "-\t\t\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t} else if (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract()) {", "+\t\t\t\t\tif (mustImplementAbstractMethod(matchingInherited[0])) {", "+\t\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "+\t\t\t\t\t\tif (typeDeclaration != null) {", "+\t\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(matchingInherited[0]);", "+\t\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fe5e24de571048afacae3d6b343c79d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "52aaa8d847622fea44892b3486d74a8d0287dfb5", "commitAfterChange": "a30c9a4ba03c988d192181c19b2fad5828f63916", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\t\t\tfor (int i = length; --i >= 0;)", "-\t\t\t\tif (!mustImplementAbstractMethod(methods[i])) return;  // have already reported problem against the concrete superclass", "-", "-\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "-\t\t\tif (typeDeclaration != null) {", "-\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(methods[0]);", "-\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "-\t\t\t} else {", "-\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\tfor (int i = length; --i >= 0;) {", "+\t\t\t\tif (mustImplementAbstractMethod(methods[i])) {", "+\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "+\t\t\t\t\tif (typeDeclaration != null) {", "+\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(methods[0]);", "+\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn;", "+\t\t\t\t}"]}], "num": 64637}
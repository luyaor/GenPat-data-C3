{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd9fe547030893dcdbfad694c95cd11c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30cf8154352070fd019bfb60a4725162", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java", "commitBeforeChange": "88e5aa006a98c27f378a9ba9656ac196342e257f", "commitAfterChange": "80c078ddcf769ceb84a30bdd1354fc49a196e760", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r String[] directoryList(String pathPrefix, char[][] compoundName, char[] packageName)", "signatureAfterChange": "\r \r String[] directoryList(String qualifiedPackageName)", "diff": ["-String[] directoryList(String pathPrefix, char[][] compoundName, char[] packageName) {\r", "-\tString partialPath = NameEnvironment.assembleName(packageName, compoundName, '/');\r", "-\tif (missingPackages.containsKey(partialPath)) return null;\r", "-\r", "-\tString fullPath = pathPrefix + partialPath;\r", "-\tString[] dirList = (String[]) directoryCache.get(fullPath);\r", "+String[] directoryList(String qualifiedPackageName) {\r", "+\tString[] dirList = (String[]) directoryCache.get(qualifiedPackageName);\r", "+\tif (dirList == missingPackageHolder) return null; // package exists in another classpath directory or jar\r", "-\tFile dir = new File(fullPath);\r", "-\tif (dir != null && dir.isDirectory()) {\r", "-\t\tboolean matchesName = packageName == null;\r", "-\t\tif (!matchesName) {\r", "-\t\t\tint index = packageName.length;\r", "-\t\t\twhile (--index >= 0 && !Character.isUpperCase(packageName[index])) {}\r", "-\t\t\tmatchesName = index < 0 || exists(pathPrefix, new String(packageName), compoundName);\r", "+\tFile dir = new File(binaryPath + qualifiedPackageName);\r", "+\tnotFound : if (dir != null && dir.isDirectory()) {\r", "+\t\t// must protect against a case insensitive File call\r", "+\t\t// walk the qualifiedPackageName backwards looking for an uppercase character before the '/'\r", "+\t\tint index = qualifiedPackageName.length();\r", "+\t\tint last = qualifiedPackageName.lastIndexOf('/');\r", "+\t\twhile (--index > last && !Character.isUpperCase(qualifiedPackageName.charAt(index))) {}\r", "+\t\tif (index > last) {\r", "+\t\t\tif (last == -1) {\r", "+\t\t\t\tif (!doesFileExist(qualifiedPackageName, \"\"))\r", "+\t\t\t\t\tbreak notFound;\r", "+\t\t\t} else {\r", "+\t\t\t\tString packageName = qualifiedPackageName.substring(last + 1);\r", "+\t\t\t\tString parentPackage = qualifiedPackageName.substring(0, last);\r", "+\t\t\t\tif (!doesFileExist(packageName, parentPackage))\r", "+\t\t\t\t\tbreak notFound;\r", "+\t\t\t}\r", "-\t\tif (matchesName) {\r", "-\t\t\tif ((dirList = dir.list()) == null)\r", "-\t\t\t\tdirList = new String[0];\r", "-\t\t\tdirectoryCache.put(fullPath, dirList);\r", "-\t\t\treturn dirList;\r", "-\t\t}\r", "+\t\tif ((dirList = dir.list()) == null)\r", "+\t\t\tdirList = new String[0];\r", "+\t\tdirectoryCache.put(qualifiedPackageName, dirList);\r", "+\t\treturn dirList;\r", "-\tmissingPackages.put(partialPath, partialPath); // value is not used\r", "+\tdirectoryCache.put(qualifiedPackageName, missingPackageHolder);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e3642c5e477f3dc301d64aab0fdd8f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java", "commitBeforeChange": "26246adf380e69c31de951eed4c0173edaa96dd1", "commitAfterChange": "2c076bc353a2d83c198fbf8764d9fb723677890e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private String[] directoryList(char[][] compoundName, char[] packageName)", "signatureAfterChange": "\r String[] directoryList(String qualifiedPackageName)", "diff": ["-private String[] directoryList(char[][] compoundName, char[] packageName) {\r", "-\tString partialPath = FileSystem.assembleName(packageName, compoundName, File.separatorChar);\r", "-\tString[] dirList = (String[])directoryCache.get(partialPath);\r", "-\tif (dirList != null)\r", "-\t\treturn dirList;\r", "-\tif (missingPackages.containsKey(partialPath))\r", "-\t\treturn null;\r", "+String[] directoryList(String qualifiedPackageName) {\r", "+\tString[] dirList = (String[]) directoryCache.get(qualifiedPackageName);\r", "+\tif (dirList == missingPackageHolder) return null; // package exists in another classpath directory or jar\r", "+\tif (dirList != null) return dirList;\r", "-\tFile dir = new File(path + partialPath);\r", "-\tif (dir != null && dir.isDirectory()) {\r", "-\t\tboolean matchesName = packageName == null;\r", "-\t\tif (!matchesName) {\r", "-\t\t\tint index = packageName.length;\r", "-\t\t\twhile (--index >= 0 && !Character.isUpperCase(packageName[index])) {}\r", "-\t\t\tmatchesName = index < 0 || exists(new String(packageName), compoundName); // verify that the case sensitive packageName really does exist\r", "+\tFile dir = new File(path + qualifiedPackageName);\r", "+\tnotFound : if (dir != null && dir.isDirectory()) {\r", "+\t\t// must protect against a case insensitive File call\r", "+\t\t// walk the qualifiedPackageName backwards looking for an uppercase character before the '/'\r", "+\t\tint index = qualifiedPackageName.length();\r", "+\t\tint last = qualifiedPackageName.lastIndexOf('/');\r", "+\t\twhile (--index > last && !Character.isUpperCase(qualifiedPackageName.charAt(index))) {}\r", "+\t\tif (index > last) {\r", "+\t\t\tif (last == -1) {\r", "+\t\t\t\tif (!doesFileExist(qualifiedPackageName, \"\"))\r", "+\t\t\t\t\tbreak notFound;\r", "+\t\t\t} else {\r", "+\t\t\t\tString packageName = qualifiedPackageName.substring(last + 1);\r", "+\t\t\t\tString parentPackage = qualifiedPackageName.substring(0, last);\r", "+\t\t\t\tif (!doesFileExist(packageName, parentPackage))\r", "+\t\t\t\t\tbreak notFound;\r", "+\t\t\t}\r", "-\t\tif (matchesName) {\r", "-\t\t\tif ((dirList = dir.list()) == null)\r", "-\t\t\t\tdirList = new String[0];\r", "-\t\t\tdirectoryCache.put(partialPath, dirList);\r", "-\t\t\treturn dirList;\r", "-\t\t}\r", "+\t\tif ((dirList = dir.list()) == null)\r", "+\t\t\tdirList = new String[0];\r", "+\t\tdirectoryCache.put(qualifiedPackageName, dirList);\r", "+\t\treturn dirList;\r", "-\tmissingPackages.put(partialPath, partialPath); // value is not used\r", "+\tdirectoryCache.put(qualifiedPackageName, missingPackageHolder);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c69071c59f4a11b48c751a838153a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java", "commitBeforeChange": "71ca7b096c04e123348cb13b19efbd2de402f9f2", "commitAfterChange": "6872e25fe154a5852fcd3ac0c49b686e5e81ec7b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private String[] directoryList(char[][] compoundName, char[] packageName)", "signatureAfterChange": "\r String[] directoryList(String qualifiedPackageName)", "diff": ["-private String[] directoryList(char[][] compoundName, char[] packageName) {\r", "-\tString partialPath = FileSystem.assembleName(packageName, compoundName, File.separatorChar);\r", "-\tString[] dirList = (String[])directoryCache.get(partialPath);\r", "-\tif (dirList != null)\r", "-\t\treturn dirList;\r", "-\tif (missingPackages.containsKey(partialPath))\r", "-\t\treturn null;\r", "+String[] directoryList(String qualifiedPackageName) {\r", "+\tString[] dirList = (String[]) directoryCache.get(qualifiedPackageName);\r", "+\tif (dirList == missingPackageHolder) return null; // package exists in another classpath directory or jar\r", "+\tif (dirList != null) return dirList;\r", "-\tFile dir = new File(path + partialPath);\r", "-\tif (dir != null && dir.isDirectory()) {\r", "-\t\tboolean matchesName = packageName == null;\r", "-\t\tif (!matchesName) {\r", "-\t\t\tint index = packageName.length;\r", "-\t\t\twhile (--index >= 0 && !Character.isUpperCase(packageName[index])) {}\r", "-\t\t\tmatchesName = index < 0 || exists(new String(packageName), compoundName); // verify that the case sensitive packageName really does exist\r", "+\tFile dir = new File(path + qualifiedPackageName);\r", "+\tnotFound : if (dir != null && dir.isDirectory()) {\r", "+\t\t// must protect against a case insensitive File call\r", "+\t\t// walk the qualifiedPackageName backwards looking for an uppercase character before the '/'\r", "+\t\tint index = qualifiedPackageName.length();\r", "+\t\tint last = qualifiedPackageName.lastIndexOf('/');\r", "+\t\twhile (--index > last && !Character.isUpperCase(qualifiedPackageName.charAt(index))) {}\r", "+\t\tif (index > last) {\r", "+\t\t\tif (last == -1) {\r", "+\t\t\t\tif (!doesFileExist(qualifiedPackageName, \"\"))\r", "+\t\t\t\t\tbreak notFound;\r", "+\t\t\t} else {\r", "+\t\t\t\tString packageName = qualifiedPackageName.substring(last + 1);\r", "+\t\t\t\tString parentPackage = qualifiedPackageName.substring(0, last);\r", "+\t\t\t\tif (!doesFileExist(packageName, parentPackage))\r", "+\t\t\t\t\tbreak notFound;\r", "+\t\t\t}\r", "-\t\tif (matchesName) {\r", "-\t\t\tif ((dirList = dir.list()) == null)\r", "-\t\t\t\tdirList = new String[0];\r", "-\t\t\tdirectoryCache.put(partialPath, dirList);\r", "-\t\t\treturn dirList;\r", "-\t\t}\r", "+\t\tif ((dirList = dir.list()) == null)\r", "+\t\t\tdirList = new String[0];\r", "+\t\tdirectoryCache.put(qualifiedPackageName, dirList);\r", "+\t\treturn dirList;\r", "-\tmissingPackages.put(partialPath, partialPath); // value is not used\r", "+\tdirectoryCache.put(qualifiedPackageName, missingPackageHolder);\r"]}], "num": 18578}
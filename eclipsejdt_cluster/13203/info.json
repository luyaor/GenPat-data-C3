{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "537153b2b0c9685ce2511ae8e35122c1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72a91dcaa536dfeda5ebd2db3edd2200", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "8a765fa23ce703d1d5f2388d447ea40d7aad9f99", "commitAfterChange": "988b834a35e1571af05adddd8db1ce5aaa1f0ff0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic boolean isPolyExpression()", "signatureAfterChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "diff": ["-\tpublic boolean isPolyExpression() {", "-\t\treturn (this.expressionContext == ASSIGNMENT_CONTEXT || this.expressionContext == INVOCATION_CONTEXT) &&", "-\t\t\t\tthis.valueIfTrue.isPolyExpression() && this.valueIfFalse.isPolyExpression();", "+\tpublic boolean isPolyExpression() throws UnsupportedOperationException {", "+\t\tif (this.expressionContext != ASSIGNMENT_CONTEXT && this.expressionContext != INVOCATION_CONTEXT)", "+\t\t\treturn false;", "+\t\t", "+\t\treturn this.valueIfTrue.isPolyExpression() || this.valueIfFalse.isPolyExpression();", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ae3dab12ca51a859f79266388e91dc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "71d81627399572ca242308eb9b1f8436f445d7df", "commitAfterChange": "acc8bb9a2c395d7f5684b514d1321ba6377e97fd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "signatureAfterChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "diff": ["-\treturn inheritedMethod != null", "-\t\t&& (TypeBinding.equalsEquals(inheritedMethod.returnType, existingMethod.returnType)\t// need to keep around to produce bridge methods? ...", "-\t\t\t|| (TypeBinding.notEquals(this.type, existingMethod.declaringClass) \t\t\t// ... not if inheriting the bridge situation from a superclass", "-\t\t\t\t\t&& !existingMethod.declaringClass.isInterface()))", "-\t\t&& doesMethodOverride(existingMethod, inheritedMethod);", "+\tif (inheritedMethod == null", "+\t\t\t|| TypeBinding.notEquals(inheritedMethod.returnType, existingMethod.returnType)) // need to keep around to produce bridge methods? ...", "+\t\treturn false;", "+", "+\tif (!doesMethodOverride(existingMethod, inheritedMethod))", "+\t\treturn false;", "+", "+\treturn TypeBinding.notEquals(this.type, existingMethod.declaringClass) // ... not if inheriting the bridge situation from a superclass", "+\t\t\t&& !existingMethod.declaringClass.isInterface();"]}], "num": 13203}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d9a1530db6cae59b9d517a53380104b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2270dd530487bf21356da3b75e3dcbd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "1e824a6f76b10e480f47e7bb3a7a70a5562012eb", "commitAfterChange": "fe48a8c1d697b99a27b139ea7b4c9bd7c7eaf9aa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public void storeDependencyInfo()", "signatureAfterChange": "\r public void storeDependencyInfo()", "diff": ["-\r", "-// Old code to be removed\r", "-\tfor (int i = 0; i < typeDependencies.size; i++) { // grows as more types are added\r", "-\t\t// add all the supertypes & associated packages\r", "-\t\tReferenceBinding type = (ReferenceBinding) typeDependencies.elementAt(i);\r", "-\r", "-\t\taddNamespaceReference(type.fPackage); // is this necessary? If so what about a & a.b from a.b.c?\r", "-\t\tif (type.enclosingType() != null)\r", "-\t\t\taddTypeReference(type.enclosingType());\r", "-\t\tif (type.superclass() != null)\r", "-\t\t\taddTypeReference(type.superclass());\r", "-\t\tReferenceBinding[] interfaces = type.superInterfaces();\r", "-\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\taddTypeReference(interfaces[j]);\r", "-\t}\r", "-\r", "-\tint length = namespaceDependencies.size;\r", "-\tchar[][] namespaceNames = new char[length][];\r", "-\tfor (int i = 0; i < length; i++)\r", "-\t\tnamespaceNames[i] = ((PackageBinding) namespaceDependencies.elementAt(i)).readableName();\r", "-\treferenceContext.compilationResult.namespaceDependencies = namespaceNames;\r", "-\r", "-\tlength = typeDependencies.size;\r", "-\tint toplevelTypeCount = 0;\r", "-\tfor (int i = 0; i < length; i++)\r", "-\t\tif (!((ReferenceBinding) typeDependencies.elementAt(i)).isNestedType())\r", "-\t\t\ttoplevelTypeCount++;\r", "-\tchar[][] fileNames = new char[toplevelTypeCount][];\r", "-\tfor (int i = 0; i < length; i++)\r", "-\t\tif (!((ReferenceBinding) typeDependencies.elementAt(i)).isNestedType())\r", "-\t\t\tfileNames[--toplevelTypeCount] = ((ReferenceBinding) typeDependencies.elementAt(i)).getFileName();\r", "-\r", "-\t// eliminate duplicates\r", "-\tint unique = 0;\r", "-\tchar[] ownFileName = referenceContext.getFileName();\r", "-\tnext : for (int i = 0, l = fileNames.length; i < l; i++) {\r", "-\t\tchar[] fileName = fileNames[i];\r", "-\t\tif (CharOperation.equals(fileName, ownFileName)) {\r", "-\t\t\tfileNames[i] = null;\r", "-\t\t\tcontinue next;\r", "-\t\t}\r", "-\t\tfor (int j = i + 1; j < l; j++) {\r", "-\t\t\tif (CharOperation.equals(fileName, fileNames[j])) {\r", "-\t\t\t\tfileNames[i] = null;\r", "-\t\t\t\tcontinue next;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tunique++;\r", "-\t}\r", "-\tif (unique < fileNames.length) {\r", "-\t\tchar[][] uniqueFileNames = new char[unique][];\r", "-\t\tfor (int i = fileNames.length; --i >= 0;)\r", "-\t\t\tif (fileNames[i] != null)\r", "-\t\t\t\tuniqueFileNames[--unique] = fileNames[i];\r", "-\t\tfileNames = uniqueFileNames;\r", "-\t}\r", "-\treferenceContext.compilationResult.fileDependencies = fileNames;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60ab27f04d74db1d5c7bf9a7d00a68c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "ed03b97e41cec71a1f276a24a6c89d537dde57f2", "commitAfterChange": "3617e411ab09a4b93e5840b8e6d451f0c6a8a8c9", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void storeDependencyInfo()", "signatureAfterChange": " public void storeDependencyInfo()", "diff": ["-\t// add the type hierarchy of each referenced type", "+\t// add the type hierarchy of each referenced supertype", "-\tfor (int i = 0; i < referencedTypes.size; i++) { // grows as more types are added", "-\t\tReferenceBinding type = (ReferenceBinding) referencedTypes.elementAt(i);", "+\tfor (int i = 0; i < referencedSuperTypes.size; i++) { // grows as more types are added", "+\t\tReferenceBinding type = (ReferenceBinding) referencedSuperTypes.elementAt(i);", "+\t\tif (!referencedTypes.containsIdentical(type))", "+\t\t\treferencedTypes.add(type);", "+", "+\t\t\tReferenceBinding enclosing = type.enclosingType();", "+\t\t\tif (enclosing != null)", "+\t\t\t\trecordSuperTypeReference(enclosing);", "+\t\t}", "+\t\tReferenceBinding superclass = type.superclass();", "+\t\tif (superclass != null)", "+\t\t\trecordSuperTypeReference(superclass);", "+\t\tReferenceBinding[] interfaces = type.superInterfaces();", "+\t\tif (interfaces != null)", "+\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "+\t\t\t\trecordSuperTypeReference(interfaces[j]);", "+\t}", "+", "+\tfor (int i = 0, l = referencedTypes.size; i < l; i++) {", "+\t\tReferenceBinding type = (ReferenceBinding) referencedTypes.elementAt(i);", "+\t\tif (!type.isLocalType())", "-\t\t\tReferenceBinding enclosing = type.enclosingType();", "-\t\t\tif (enclosing != null && !referencedTypes.containsIdentical(enclosing))", "-\t\t\t\treferencedTypes.add(enclosing); // to record its supertypes", "-\t\t}", "-\t\tReferenceBinding superclass = type.superclass();", "-\t\tif (superclass != null && !referencedTypes.containsIdentical(superclass))", "-\t\t\t\treferencedTypes.add(superclass); // to record its supertypes", "-\t\tReferenceBinding[] interfaces = type.superInterfaces();", "-\t\tif (interfaces != null && interfaces.length > 0)", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\t\t\tif (!referencedTypes.containsIdentical(interfaces[j]))", "-\t\t\t\t\treferencedTypes.add(interfaces[j]); // to record its supertypes"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812a77c407a092aaff7d3477238a1575", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void rememberWithSuperTypes(ReferenceBinding referenceBinding, HandleFactory factory, CompilationUnitScope compilationUnitScope, Openable openable)", "signatureAfterChange": " private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes)", "diff": ["-private void rememberWithSuperTypes(ReferenceBinding referenceBinding, HandleFactory factory, CompilationUnitScope compilationUnitScope, Openable openable) {", "-\tif (!(referenceBinding instanceof SourceTypeBinding)) return;", "-\tSourceTypeBinding type = (SourceTypeBinding)referenceBinding;", "-\tif (type.scope.compilationUnitScope() != compilationUnitScope) return;", "-\tIJavaElement element = factory.createElement(type.scope.referenceContext, compilationUnitScope.referenceContext, openable);", "-\tif (element == null) return;", "-\tISourceType sourceType = null;", "-\ttry {", "-\t\tsourceType = (ISourceType)((JavaElement)element).getElementInfo();", "-\t} catch (JavaModelException e) {", "-\t\treturn;", "+private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes) {", "+\tTypeDeclaration[] types = parsedUnit.types;", "+\tif (types != null) {", "+\t\tfor (int i = 0, length = types.length; i < length; i++) {", "+\t\t\tTypeDeclaration type = types[i];", "+\t\t\trememberWithMemberTypes(type, cu.getType(new String(type.name)));", "+\t\t}", "-\tremember(sourceType, type);", "+\tif (includeLocalTypes && parsedUnit.localTypes != null) {", "+\t\tHandleFactory factory = new HandleFactory();", "+\t\tHashSet existingElements = new HashSet(parsedUnit.localTypeCount);", "+\t\tHashMap knownScopes = new HashMap(parsedUnit.localTypeCount);", "+\t\tfor (int i = 0; i < parsedUnit.localTypeCount; i++) {", "+\t\t\tLocalTypeBinding localType = parsedUnit.localTypes[i];", "+\t\t\tClassScope classScope = localType.scope;", "+\t\t\tTypeDeclaration typeDecl = classScope.referenceType();", "+\t\t\tIType typeHandle = (IType)factory.createElement(classScope, cu, existingElements, knownScopes);", "+\t\t\trememberWithMemberTypes(typeDecl, typeHandle);", "+\t\t}", "+\t}", "+}", "-\tif (type.superclass != null) {", "-\t\trememberWithSuperTypes(type.superclass, factory, compilationUnitScope, openable);", "-\tReferenceBinding[] superInterfaces = type.superInterfaces;", "-\tif (superInterfaces != null) {", "-\t\tfor (int i = 0, length = superInterfaces.length; i < length; i++) {", "-\t\t\tReferenceBinding superInterface = superInterfaces[i];", "-\t\t\trememberWithSuperTypes(superInterface, factory, compilationUnitScope, openable);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a75950833031a2cfe30ecd13fc32fc7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType)", "diff": ["-\tif (otherType == this) {", "-\t\tif (isWildcard()) return false;", "+\tif (otherType == this) ", "-\t}", "-\tif (otherType.id == T_JavaLangObject)", "+\tif (otherType.id == T_JavaLangObject) ", "-\tif (!(otherType instanceof ReferenceBinding))", "-\t\treturn false;", "-\tReferenceBinding otherReferenceType = (ReferenceBinding) otherType;", "-\tif (this.isEquivalentTo(otherReferenceType)) return true;", "-\tif (otherReferenceType.isWildcard()) {", "-\t\treturn false; // should have passed equivalence check above if wildcard", "+\t// equivalence may allow compatibility with array type through wildcard bound", "+\tif (this.isEquivalentTo(otherType)) ", "+\t\treturn true;", "+\tswitch (otherType.kind()) {", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn false; // should have passed equivalence check above if wildcard", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t// check compatibility with capture of ? super X", "+\t\t\tif (otherType.isCapture()) {", "+\t\t\t\tCaptureBinding otherCapture = (CaptureBinding) otherType;", "+\t\t\t\tif (otherCapture.lowerBound != null) {", "+\t\t\t\t\treturn this.isCompatibleWith(otherCapture.lowerBound);", "+\t\t\t\t}", "+\t\t\t}", "+\t\tcase Binding.GENERIC_TYPE :", "+\t\tcase Binding.TYPE :", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\tcase Binding.RAW_TYPE :", "+\t\t\tReferenceBinding otherReferenceType = (ReferenceBinding) otherType;", "+\t\t\tif (otherReferenceType.isInterface()) // could be annotation type", "+\t\t\t\treturn implementsInterface(otherReferenceType, true);", "+\t\t\tif (this.isInterface())  // Explicit conversion from an interface to a class is not allowed", "+\t\t\t\treturn false;", "+\t\t\treturn otherReferenceType.isSuperclassOf(this);", "+\t\tdefault :", "+\t\t\treturn false;", "-\tif (otherReferenceType.isInterface())", "-\t\treturn implementsInterface(otherReferenceType, true);", "-\tif (this.isInterface())  // Explicit conversion from an interface to a class is not allowed", "-\t\treturn false;", "-\treturn otherReferenceType.isSuperclassOf(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6f5bc11b67d840312980d7c23be1f79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tprotected ConstraintFormula[] deriveTypeArgumentConstraintsRecursive(TypeBinding s, TypeBinding t, boolean isSoft)", "signatureAfterChange": " \t \tprotected TypeBinding[] superTypesWithCommonGenericType(TypeBinding s, TypeBinding t)", "diff": ["-", "-\tprotected ConstraintFormula[] deriveTypeArgumentConstraintsRecursive(TypeBinding s, TypeBinding t, boolean isSoft) {", "-\t\tif (s == null || s.id == TypeIds.T_JavaLangObject || t == null || t.id == TypeIds.T_JavaLangObject)", "-\t\t\treturn null;", "-\t\tif (TypeBinding.equalsEquals(s.original(), t.original())) {", "-\t\t\treturn typeArgumentEqualityConstraints(s, t, isSoft);", "-\t\t}", "-\t\tTypeBinding tSuper = t.findSuperTypeOriginatingFrom(s);", "-\t\tif (tSuper != null) {", "-\t\t\treturn typeArgumentEqualityConstraints(s, tSuper, isSoft);", "-\t\t}", "-\t\tConstraintFormula[] result = deriveTypeArgumentConstraintsRecursive(s.superclass(), t, isSoft);", "-\t\tif (result != null)", "-\t\t\treturn result;", "-\t\tReferenceBinding[] superInterfaces = s.superInterfaces();", "-\t\tif (superInterfaces != null) {", "-\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "-\t\t\t\tresult = deriveTypeArgumentConstraintsRecursive(superInterfaces[i], t, isSoft);", "-\t\t\t\tif (result != null)", "-\t\t\t\t\treturn result;", "-\t\t\t}", "-\t\t}", "+\t", "+\tprotected TypeBinding[] superTypesWithCommonGenericType(TypeBinding s, TypeBinding t) {", "+\t\tif (s == null || s.id == TypeIds.T_JavaLangObject || t == null || t.id == TypeIds.T_JavaLangObject)", "+\t\t\treturn null;", "+\t\tif (TypeBinding.equalsEquals(s.original(), t.original())) {", "+\t\t\treturn new TypeBinding[] { s, t };", "+\t\t}", "+\t\tTypeBinding tSuper = t.findSuperTypeOriginatingFrom(s);", "+\t\tif (tSuper != null) {", "+\t\t\treturn new TypeBinding[] {s, tSuper};", "+\t\t}", "+\t\tTypeBinding[] result = superTypesWithCommonGenericType(s.superclass(), t);", "+\t\tif (result != null)", "+\t\t\treturn result;", "+\t\tReferenceBinding[] superInterfaces = s.superInterfaces();", "+\t\tif (superInterfaces != null) {", "+\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\tresult = superTypesWithCommonGenericType(superInterfaces[i], t);", "+\t\t\t\tif (result != null)", "+\t\t\t\t\treturn result;", "+\t\t\t}", "+\t\t}", "+\t\treturn null;", "+\t}"]}], "num": 34409}
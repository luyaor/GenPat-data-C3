{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70c931a7c2f2ce5a31b615477ed8e8e1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a3975bd7280e98f3c55901b0963e24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "1b6125b922b604588bed2b5782d039674eb294dc", "commitAfterChange": "66d9e86b4ff0c6095949f938b3e13495d2816b6d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "signatureAfterChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "diff": ["-\t\tremoveFolder(srcFolder);", "+\t\t// delete the generated source folder as well as", "+\t\t// all of its derived ancestors that are containers only to the ", "+\t\t// generated source folder", "+\t\tif( srcFolder != null ){", "+\t\t\tIFolder folderToDelete = srcFolder;\t\t", "+\t\t\tfor( IContainer c = srcFolder.getParent(); ", "+\t\t\t \t c != null && (c instanceof IFolder); ", "+\t\t\t \t c = c.getParent() ){", "+\t\t\t\t", "+\t\t\t\ttry{", "+\t\t\t\t\t// members can't be empty, there has to be at least 1.", "+\t\t\t\t\t// will only delete the parent if it contains only the ", "+\t\t\t\t\t// folder that we want to delete.", "+\t\t\t\t\tif( c.isDerived() && c.members().length == 1 ){", "+\t\t\t\t\t\tfolderToDelete = (IFolder)c;", "+\t\t\t\t\t}", "+\t\t\t\t\telse", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}catch(CoreException e){", "+\t\t\t\t\tAptPlugin.log(e, \"failure while accessing member of \" + c.getName() ); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tremoveFolder(folderToDelete);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3a2bcb78dbb21258d9b49274b66b5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "signatureAfterChange": " \tpublic static boolean validate(final IJavaProject jproj, final String folderName)", "diff": ["-\t */", "-\tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate){", "-\t\t// clean up the classpath first so that when we actually delete the ", "-\t\t// generated source folder and won't cause a classpath error.", "-\t\tif( srcFolder != null ){", "-\t\t\ttry{\t", "-\t\t\t\tClasspathUtil.removeFromProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );\t\t", "-\t\t\t}catch(JavaModelException e){", "-\t\t\t\tAptPlugin.log( e, \"Error occurred deleting old generated src folder \" + srcFolder.getName() ); //$NON-NLS-1$", "-\t\t", "-\t\tif( recreate )", "-\t\t\tensureGeneratedSourceFolder();", "-\t\t", "-\t\t// delete the generated source folder as well as", "-\t\t// all of its derived ancestors that are containers only to the ", "-\t\t// generated source folder", "-\t\tif( srcFolder != null ){", "-\t\t\tIFolder folderToDelete = srcFolder;\t\t", "-\t\t\tfor( IContainer c = srcFolder.getParent(); ", "-\t\t\t \t c != null && (c instanceof IFolder); ", "-\t\t\t \t c = c.getParent() ){", "-\t\t\t\t", "-\t\t\t\ttry{", "-\t\t\t\t\t// members can't be empty, there has to be at least 1.", "-\t\t\t\t\t// will only delete the parent if it contains only the ", "-\t\t\t\t\t// folder that we want to delete.", "-\t\t\t\t\tif( c.isDerived() && c.members().length == 1 ){", "-\t\t\t\t\t\tfolderToDelete = (IFolder)c;", "-\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}catch(CoreException e){", "-\t\t\t\t\tAptPlugin.log(e, \"failure while accessing member of \" + c.getName() ); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tremoveFolder(folderToDelete);", "-\t\t}", "+\t */", "+\tpublic static boolean validate(final IJavaProject jproj, final String folderName) {", "+\t\tIFolder folder = null;", "+\t\ttry {", "+\t\t\tfolder = jproj.getProject().getFolder( folderName );", "+\t\t}", "+\t\tcatch (IllegalArgumentException e) {", "+\t\t\treturn false;", "+\t\t}", "+\t\treturn folder != null;", "+\t}"]}], "num": 54130}
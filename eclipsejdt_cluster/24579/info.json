{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca41a72599ca03a181361ea631bcfbda", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c1b4d3b52041562cb4ee39b40663dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tcheckInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this);", "+\tcheckInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this, (this.bits & ASTNode.Unchecked) != 0);", "-\t\tif (returnType != null) returnType = returnType.capture(scope, this.sourceEnd);", "+\t\t", "+\t\tif (returnType != null) {", "+\t\t\tif ((this.bits & ASTNode.Unchecked) != 0) {", "+\t\t\t\treturnType = scope.environment().convertToRawType(returnType.erasure(), true);", "+\t\t\t}", "+\t\t\treturnType = returnType.capture(scope, this.sourceEnd);\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b1e250569caf54ca15a906a9583cc17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.binding =", "-\t\tthis.receiver.isImplicitThis()", "+\tthis.binding = this.receiver.isImplicitThis()", "-\tcheckInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this);", "+\tcheckInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this, (this.bits & ASTNode.Unchecked) != 0);", "-\t\tTypeBinding returnType = this.binding.returnType;", "-\t\tif (returnType != null) returnType = returnType.capture(scope, this.sourceEnd);", "+\t\tTypeBinding returnType;", "+\t\tif ((this.bits & ASTNode.Unchecked) != 0) {", "+\t\t\treturnType = this.binding.original().returnType;", "+\t\t\tif (returnType != null) {", "+\t\t\t\treturnType = scope.environment().convertToRawType(returnType.erasure(), true);", "+\t\t\t}", "+\t\t} else {", "+\t\t\treturnType = this.binding.returnType;", "+\t\t\tif (returnType != null) {", "+\t\t\t\treturnType = returnType.capture(scope, this.sourceEnd);", "+\t\t\t}", "+\t\t}"]}], "num": 24579}
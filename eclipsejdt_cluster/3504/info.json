{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3000de30dbbef6e19dc5c8ae1854997e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02dcf817e6c08c71da820ae9e18834de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "0ebf7eb2d8f3c62d99ed8bef750b4c618547fe08", "commitAfterChange": "4479368fdfa1c29f97c094bfbee396d5c4fd21ba", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {", "+\t\tParameterizedGenericMethodBinding parameterizedBinding = (ParameterizedGenericMethodBinding) this.binding;", "+\t\tfor (int i = 0; i < this.typeArguments.length; i++)", "+\t\t\tparameterizedBinding.checkNullConstraints(currentScope, this.typeArguments[i], i);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06b2b9107d4af7bdc66e0da0c4c4b8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "a80783c7a8d5186513edcff918a39b51bd15faed", "commitAfterChange": "c55cddff12b32377afae40bbcf9627a7ca7ad410", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern)", "signatureAfterChange": " public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern)", "diff": ["+\tif (this.jobEnd >= this.jobStart) {", "+\t\t// check if a job to index the project is not already in the queue", "+\t\tIndexRequest request = new IndexAllProject(project, this);", "+\t\tfor (int i = this.jobEnd; i >= this.jobStart; i--)", "+\t\t\tif (request.equals(this.awaitingJobs[i])) return;", "+\t}", "+"]}], "num": 3504}
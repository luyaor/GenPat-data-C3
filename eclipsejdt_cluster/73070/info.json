{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46db16d441f5e367c64c88538db06f04", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298a4fd311c738a3dff65b23c5deb932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected void traverseDelta(IResourceDelta delta, Openable parentElement)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "diff": ["-\tprotected void traverseDelta(IResourceDelta delta, Openable parentElement) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {\r", "-\t\tOpenable[] elements = this.createElements(delta.getResource());\r", "+\t\tIResource res = delta.getResource();\r", "+\t\tboolean isOnClasspath = this.isOnClasspath(classpath, res);\r", "+\t\t\r", "-\t\tint flags = delta.getFlags();\r", "-\t\tif (elements != null) {\r", "-\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\t\telement = elements[i];\r", "-\t\t\t\tIResource res = delta.getResource();\r", "-\r", "-\t\t\t\tupdateIndex(element, delta);\r", "-\t\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\t\tcase IResourceDelta.ADDED :\r", "-\t\t\t\t\t\tPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "-\t\t\t\t\t\t\t&& parentElement != null\r", "-\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "-\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "-\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\telementAdded(element, delta);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.REMOVED :\r", "-\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "-\t\t\t\t\t\t\t&& parentElement != null\r", "-\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "-\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "-\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\telementRemoved(element, delta);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.CHANGED :\r", "-\t\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {\r", "-\t\t\t\t\t\t\tcontentChanged(element, delta);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t\t\t\tres = delta.getResource();\r", "-\t\t\t\t\t\t\tif (isOpen(res)) {\r", "-\t\t\t\t\t\t\t\telementOpened(element, delta);\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\telementClosed(element, delta);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\tJavaProject project = null;\r", "+\t\tif (isOnClasspath) {\r", "+\t\t\tOpenable[] elements = this.createElements(res);\r", "+\t\t\tif (elements != null) {\r", "+\t\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "+\t\t\t\t\telement = elements[i];\r", "+\t\t\t\t\tthis.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn false;\r", "-\t\t\ttry {\r", "-\t\t\t\tif (parentElement != null && delta.getResource() != null) {\r", "-\t\t\t\t\tswitch (delta.getResource().getType()) {\r", "-\t\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t}\r", "+\t\t\tif (res instanceof IProject) {\r", "+\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create((IProject)res);\r", "+\t\t\t\tif (project == null) return false; // not a Java project\r", "+\t\t\t\tthis.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\tif (delta.getKind() != IResourceDelta.CHANGED \r", "+\t\t\t\t\t\t|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\t\treturn false; // don't go deeper for added, removed, opened or closed projects\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// do nothing\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tclasspath = project.getExpandedClasspath(true);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t// if classpath is known, we are for sure out of classpath: stop processing children\r", "+\t\t\t\tfProcessChildren = classpath != null;\r", "-\t\t\tfor (int i = 0; i < children.length; i++) {\r", "-\t\t\t\ttraverseDelta(children[i], element);\r", "+\t\t\tboolean oneChildOnClasspath = false;\r", "+\t\t\tint length = children.length;\r", "+\t\t\tIResourceDelta[] orphanChildren = new IResourceDelta[length];\r", "+\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\tIResourceDelta child = children[i];\r", "+\t\t\t\tif (!traverseDelta(child, isOnClasspath ? null : classpath)) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tif (isOnClasspath) { \r", "+\t\t\t\t\t\t\t// add child as non java resource if current element on classpath\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(element, child);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\torphanChildren[i] = child;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\toneChildOnClasspath = true;\r", "+\t\t\t\t}\r", "+\t\t\tif (oneChildOnClasspath || project != null) {\r", "+\t\t\t\t// add orphan children (case of non java resources under project)\r", "+\t\t\t\tif (project == null) {\r", "+\t\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\t}\r", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (orphanChildren[i] != null) {\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}", "+\t\t\t\t}\r", "+\t\t\t} // else resource delta will be added by parent\r", "+\t\t\treturn isOnClasspath || oneChildOnClasspath;\r", "+\t\t} else {\r", "+\t\t\treturn isOnClasspath && element != null; // element is null if non-java resource in package\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ccb0b951bbfc86d1a178473cdbed65c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 100, "signatureBeforeChange": " public final void store(TypeBinding type, int localPosition)", "signatureAfterChange": " public void generateEmulationForConstructor(Scope scope, MethodBinding methodBinding)", "diff": ["+}", "+public void generateEmulationForConstructor(Scope scope, MethodBinding methodBinding) {", "+\t// leave a java.lang.reflect.Field object on the stack", "+\tthis.ldc(String.valueOf(methodBinding.declaringClass.constantPoolName()).replace('/', '.'));", "+\tthis.invokeClassForName();", "+\tint paramLength = methodBinding.parameters.length;", "+\tthis.generateInlinedValue(paramLength);", "+\tthis.newArray(scope.createArrayType(scope.getType(TypeConstants.JAVA_LANG_CLASS, 3), 1));", "+\tif (paramLength > 0) {", "+\t\tthis.dup();", "+\t\tfor (int i = 0; i < paramLength; i++) {", "+\t\t\tthis.generateInlinedValue(i);\t", "+\t\t\tTypeBinding parameter = methodBinding.parameters[i];", "+\t\t\tif (parameter.isBaseType()) {", "+\t\t\t\tthis.getTYPE(parameter.id);", "+\t\t\t} else if (parameter.isArrayType()) {", "+\t\t\t\tArrayBinding array = (ArrayBinding)parameter;", "+\t\t\t\tif (array.leafComponentType.isBaseType()) {", "+\t\t\t\t\tthis.getTYPE(array.leafComponentType.id);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.ldc(String.valueOf(array.leafComponentType.constantPoolName()).replace('/', '.'));", "+\t\t\t\t\tthis.invokeClassForName();", "+\t\t\t\t}", "+\t\t\t\tint dimensions = array.dimensions;", "+\t\t\t\tthis.generateInlinedValue(dimensions);", "+\t\t\t\tthis.newarray(TypeIds.T_int);\t", "+\t\t\t\tthis.invokeArrayNewInstance();", "+\t\t\t\tthis.invokeObjectGetClass();", "+\t\t\t} else {", "+\t\t\t\t// parameter is a reference binding", "+\t\t\t\tthis.ldc(String.valueOf(methodBinding.declaringClass.constantPoolName()).replace('/', '.'));", "+\t\t\t\tthis.invokeClassForName();", "+\t\t\t}", "+\t\t\tthis.aastore();", "+\t\t\tif (i < paramLength - 1) {", "+\t\t\t\tthis.dup();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tthis.invokeClassGetDeclaredConstructor();", "+\tthis.dup();", "+\tthis.iconst_1();", "+\tthis.invokeAccessibleObjectSetAccessible();", "+}", "-public final void store(TypeBinding type, int localPosition) {", "-\t// Using dedicated int bytecode", "-\tif ((type == TypeBinding.INT) || (type == TypeBinding.CHAR) || (type == TypeBinding.BYTE) || (type == TypeBinding.SHORT) || (type == TypeBinding.BOOLEAN)) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.istore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.istore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.istore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.istore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.istore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated float bytecode", "-\tif (type == TypeBinding.FLOAT) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.fstore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.fstore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.fstore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.fstore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.fstore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated long bytecode", "-\tif (type == TypeBinding.LONG) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.lstore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.lstore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.lstore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.lstore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.lstore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated double bytecode", "-\tif (type == TypeBinding.DOUBLE) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.dstore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.dstore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.dstore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.dstore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.dstore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Reference object", "-\tswitch (localPosition) {", "-\t\tcase 0 :", "-\t\t\tthis.astore_0();", "-\t\t\tbreak;", "-\t\tcase 1 :", "-\t\t\tthis.astore_1();", "-\t\t\tbreak;", "-\t\tcase 2 :", "-\t\t\tthis.astore_2();", "-\t\t\tbreak;", "-\t\tcase 3 :", "-\t\t\tthis.astore_3();", "-\t\t\tbreak;", "-\t\tdefault :", "-\t\t\tthis.astore(localPosition);", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7174f482ae27155ace9518f48714d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f6e646cfd67462923a3ee7e8121ae224b9177415", "commitAfterChange": "c2914e56411382198ea8ccc84da3c9283a570f77", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tint DEFAULT_SIZE_CLASSPATH = 4;", "+\t\tfinal int DEFAULT_SIZE_CLASSPATH = 4;", "-\t\tString currentClasspathName = null;", "-\t\tArrayList currentRuleSpecs = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t", "+\t\t\t\t\tclasspaths.add(currentArg);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t\tbootclasspaths.add(currentArg);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "-\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,", "-\t\t\t\t\t\t\tFile.pathSeparator + \"[]\", true); //$NON-NLS-1$", "-\t\t\t\t\t// state machine", "-\t\t\t\t\tfinal int start = 0; ", "-\t\t\t\t\tfinal int readyToClose = 1;", "-\t\t\t\t\t// 'path' 'path1[rule];path2'", "-\t\t\t\t\tfinal int readyToCloseEndingWithRules = 2;", "-\t\t\t\t\t// 'path[rule]' 'path1;path2[rule]'", "-\t\t\t\t\tfinal int readyToCloseOrOtherEntry = 3;", "-\t\t\t\t\t// 'path[rule];' 'path;' 'path1;path2;'", "-\t\t\t\t\tfinal int rulesNeedAnotherRule = 4;", "-\t\t\t\t\t// 'path[rule1;'", "-\t\t\t\t\tfinal int rulesStart = 5;", "-\t\t\t\t\t// 'path[' 'path1;path2['", "-\t\t\t\t\tfinal int rulesReadyToClose = 6;", "-\t\t\t\t\t// 'path[rule' 'path[rule1;rule2'", "-\t\t\t\t\tfinal int error = 99;", "-\t\t\t\t\tint state = start;", "-\t\t\t\t\tString token = null;", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\t\t\tif (token.equals(File.pathSeparator)) {", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase start:", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase readyToClose:", "-\t\t\t\t\t\t\tcase readyToCloseEndingWithRules:", "-\t\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "-\t\t\t\t\t\t\t\tstate = readyToCloseOrOtherEntry;", "-\t\t\t\t\t\t\t\taddNewEntry(INSIDE_CLASSPATH, INSIDE_SOURCE_PATH, bootclasspaths, classpaths, sourcepathClasspaths, currentClasspathName, currentRuleSpecs, mode, customEncoding);", "-\t\t\t\t\t\t\t\tcurrentRuleSpecs.clear();", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase rulesReadyToClose:", "-\t\t\t\t\t\t\t\tstate = rulesNeedAnotherRule;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (token.equals(\"[\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase readyToClose:", "-\t\t\t\t\t\t\t\tstate = rulesStart;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (token.equals(\"]\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase rulesReadyToClose:", "-\t\t\t\t\t\t\t\tstate = readyToCloseEndingWithRules;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// regular word", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase start:", "-\t\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "-\t\t\t\t\t\t\t\tstate = readyToClose;", "-\t\t\t\t\t\t\t\tcurrentClasspathName = token;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase rulesNeedAnotherRule:", "-\t\t\t\t\t\t\tcase rulesStart:", "-\t\t\t\t\t\t\t\tstate = rulesReadyToClose;", "-\t\t\t\t\t\t\t\tcurrentRuleSpecs.add(token);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tswitch(state) {", "-\t\t\t\t\t\tcase readyToClose :", "-\t\t\t\t\t\tcase readyToCloseEndingWithRules :", "-\t\t\t\t\t\tcase readyToCloseOrOtherEntry :", "-\t\t\t\t\t\t\taddNewEntry(INSIDE_CLASSPATH, INSIDE_SOURCE_PATH, bootclasspaths, classpaths, sourcepathClasspaths, currentClasspathName, currentRuleSpecs, mode, customEncoding);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t// we go on anyway", "-\t\t\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "-\t\t\t\t\t}", "+\t\t\t\t\tsourcepathClasspaths.add(currentArg);", "-\t\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "-\t\t", "-\t\tif (filesCount != 0)", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.filenames,", "-\t\t\t\t0,", "-\t\t\t\t(this.filenames = new String[filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\tif (classpaths.size() == 0) {", "-\t\t\t// no user classpath specified.", "-\t\t\tString classProp = System.getProperty(\"java.class.path\"); //$NON-NLS-1$", "-\t\t\tif ((classProp == null) || (classProp.length() == 0)) {", "-\t\t\t\tthis.logger.logNoClasspath();", "-\t\t\t\tclasspaths.add(FileSystem.getClasspath(System.getProperty(\"user.dir\"), customEncoding, 0, null));//$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "-\t\t\t\tString token;", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "-\t\t\t\t\t\t\t.getClasspath(token, customEncoding, 0, null);", "-\t\t\t\t\tif (currentClasspath != null) {", "-\t\t\t\t\t\tclasspaths.add(currentClasspath);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "-\t\t\t\t\t\t// should not happen - we go on anyway", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "+\t\t// process bootclasspath, classpath and sourcepaths", "-\t\tif (bootclasspaths.size() == 0) {", "+\t \tfinal int bootclasspathsSize = bootclasspaths.size();", "+\t\tif (bootclasspathsSize != 0) {", "+\t\t\tString[] paths = new String[bootclasspathsSize];", "+\t\t\tbootclasspaths.toArray(paths);", "+\t\t\tbootclasspaths.clear();", "+\t\t\tfor (int i = 0; i < bootclasspathsSize; i++) {", "+\t\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths, paths[i], customEncoding, false);", "+\t\t\t}", "+\t\t} else {", "-\t \t }", "+\t\t}", "+\t\tfinal int classpathsSize = classpaths.size();", "+\t\tif (classpaths.size() != 0) {", "+\t\t\tString[] paths = new String[classpathsSize];", "+\t\t\tclasspaths.toArray(paths);", "+\t\t\tclasspaths.clear();", "+\t\t\tfor (int i = 0; i < classpathsSize; i++) {", "+\t\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i], customEncoding, false);", "+\t\t\t}\t\t\t", "+\t\t} else {", "+\t\t\t// no user classpath specified.", "+\t\t\tString classProp = System.getProperty(\"java.class.path\"); //$NON-NLS-1$", "+\t\t\tif ((classProp == null) || (classProp.length() == 0)) {", "+\t\t\t\tthis.logger.logNoClasspath();", "+\t\t\t\tclasspaths.add(FileSystem.getClasspath(System.getProperty(\"user.dir\"), customEncoding, 0, null));//$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "+\t\t\t\tString token;", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t\t\t.getClasspath(token, customEncoding, 0, null);", "+\t\t\t\t\tif (currentClasspath != null) {", "+\t\t\t\t\t\tclasspaths.add(currentClasspath);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "+\t\t\t\t\t\t// should not happen - we go on anyway", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinal int sourcepathClasspathsSize = sourcepathClasspaths.size();", "+\t\tif (sourcepathClasspathsSize != 0) {", "+\t\t\tString[] paths = new String[sourcepathClasspathsSize];", "+\t\t\tsourcepathClasspaths.toArray(paths);", "+\t\t\tsourcepathClasspaths.clear();", "+\t\t\tfor (int i = 0; i < sourcepathClasspathsSize; i++) {", "+\t\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepathClasspaths, paths[i], customEncoding, true);", "+\t\t\t}\t\t\t", "+\t\t}", "+\t\tif (filesCount != 0)", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.filenames,", "+\t\t\t\t0,", "+\t\t\t\t(this.filenames = new String[filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf31105ce2546557bb8c3703cb1f0c9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java", "commitBeforeChange": "cb73a34d3fbf60bb435ba470954bcb213328d377", "commitAfterChange": "521aa9edc795bda5aa1a4708f3c2bdc417b307c1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic char charValue()", "signatureAfterChange": "  \tpublic char charValue()", "diff": ["-\t\tString s = getEscapedValue();", "-\t\tint len = s.length();", "-\t\tif (len < 2 || s.charAt(0) != '\\'' || s.charAt(len-1) != '\\'' ) {", "-\t\t\tthrow new IllegalArgumentException();", "+\t\tScanner scanner = this.ast.scanner;", "+\t\tchar[] source = escapedValue.toCharArray();", "+\t\tscanner.setSource(source);", "+\t\tscanner.resetTo(0, source.length);", "+\t\tint firstChar = scanner.getNextChar();", "+\t\tint secondChar = scanner.getNextChar();", "+", "+\t\tif (firstChar == -1 || firstChar != '\\'') {", "+\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\tchar c = s.charAt(1);", "-\t\tif (c == '\\'') {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (c == '\\\\') {", "-\t\t\tif (len == 4) {", "-\t\t\t\tchar nextChar = s.charAt(2);", "-\t\t\t\tswitch(nextChar) {", "-\t\t\t\t\tcase 'b' :", "-\t\t\t\t\t\treturn '\\b';", "-\t\t\t\t\tcase 't' :", "-\t\t\t\t\t\treturn '\\t';", "-\t\t\t\t\tcase 'n' :", "-\t\t\t\t\t\treturn '\\n';", "-\t\t\t\t\tcase 'f' :", "-\t\t\t\t\t\treturn '\\f';", "-\t\t\t\t\tcase 'r' :", "-\t\t\t\t\t\treturn '\\r';", "-\t\t\t\t\tcase '\\\"':", "-\t\t\t\t\t\treturn '\\\"';", "-\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\treturn '\\'';", "-\t\t\t\t\tcase '\\\\':", "-\t\t\t\t\t\treturn '\\\\';", "-\t\t\t\t\tcase '0' :", "-\t\t\t\t\t\treturn '\\0';", "-\t\t\t\t\tcase '1' :", "-\t\t\t\t\t\treturn '\\1';", "-\t\t\t\t\tcase '2' :", "-\t\t\t\t\t\treturn '\\2';", "-\t\t\t\t\tcase '3' :", "-\t\t\t\t\t\treturn '\\3';", "-\t\t\t\t\tcase '4' :", "-\t\t\t\t\t\treturn '\\4';", "-\t\t\t\t\tcase '5' :", "-\t\t\t\t\t\treturn '\\5';", "-\t\t\t\t\tcase '6' :", "-\t\t\t\t\t\treturn '\\6';", "-\t\t\t\t\tcase '7' :", "-\t\t\t\t\t\treturn '\\7';", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else if (len == 8) {", "-\t\t\t\t//handle the case of unicode.", "-\t\t\t\tint currentPosition = 2;", "-\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "-\t\t\t\tif (s.charAt(currentPosition++) == 'u') {", "-\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c1 < 0", "-\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c2 < 0", "-\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c3 < 0", "-\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c4 < 0){", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\tchar value = (char) secondChar;", "+\t\tchar nextChar = (char) scanner.getNextChar();", "+\t\tif (secondChar == '\\\\') {", "+\t\t\tif (nextChar == -1) {", "+\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t}", "+\t\t\tswitch(nextChar) {", "+\t\t\t\tcase 'b' :", "+\t\t\t\t\tvalue = '\\b';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 't' :", "+\t\t\t\t\tvalue = '\\t';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'n' :", "+\t\t\t\t\tvalue = '\\n';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'f' :", "+\t\t\t\t\tvalue = '\\f';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'r' :", "+\t\t\t\t\tvalue = '\\r';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\\"':", "+\t\t\t\t\tvalue = '\\\"';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\'':", "+\t\t\t\t\tvalue = '\\'';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\\\':", "+\t\t\t\t\tvalue = '\\\\';", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault : //octal (well-formed: ended by a ' )", "+\t\t\t\t\tif (Character.isDigit(nextChar)) {", "+\t\t\t\t\t\tint number = Character.getNumericValue(nextChar);", "+\t\t\t\t\t\tnextChar = (char) scanner.getNextChar();", "+\t\t\t\t\t\tif (nextChar == -1) {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nextChar != '\\'') {", "+\t\t\t\t\t\t\tif (!Character.isDigit(nextChar)) {", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnumber = (number * 8) + Character.getNumericValue(nextChar);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnextChar = (char) scanner.getNextChar();", "+\t\t\t\t\t\tif (nextChar == -1) {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nextChar != '\\'') {", "+\t\t\t\t\t\t\tif (!Character.isDigit(nextChar)) {", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnumber = (number * 8) + Character.getNumericValue(nextChar);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tvalue = (char) number;", "-\t\t\t\t\t\treturn (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else {", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tnextChar = (char) scanner.getNextChar();", "+\t\t\tif (nextChar == -1) {", "-\t\treturn c;", "+\t\tif (nextChar == -1 || nextChar != '\\'') {", "+\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t}", "+\t\treturn value;"]}], "num": 73070}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b2d20f10abd4aaee1dc7b0b559be7fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05b207d63f32c54670f79b45ad41a8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "7560640d61f8673c0bdcc6e3d95d6a5f677e0190", "commitAfterChange": "7fbc4da79ec0a9ef14be7ae27876f0928711c53f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException", "signatureAfterChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException", "diff": ["-\t\treturn internalRewriteAST(content, lineInfo, lineDelim, options, rootNode);", "+\t\tASTNode astRoot= rootNode.getRoot();", "+\t\tList commentNodes= astRoot instanceof CompilationUnit ? ((CompilationUnit) astRoot).getCommentList() : null;", "+\t\treturn internalRewriteAST(content, lineInfo, lineDelim, commentNodes, options, rootNode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcdccca8b9d7af1d2766820e302ac941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "7629cb0ea15afb3f8edb59ed2e3e4b5f7f9fa619", "commitAfterChange": "28b2b7ab5af16a63c18bbdefdc1dcdce67c17817", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\t\tmatch = locator.newMethodReferenceMatch(element, accuracy, offset, reference.sourceEnd-offset+1, reference);", "+\t\t\tboolean isConstructor = reference instanceof ExplicitConstructorCall;", "+\t\t\tboolean isSynthetic = isConstructor ? ((ExplicitConstructorCall) reference).isImplicitSuper() : false;", "+\t\t\tmatch = locator.newMethodReferenceMatch(element, accuracy, offset, reference.sourceEnd-offset+1, isConstructor, isSynthetic, reference);"]}], "num": 16878}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e865c2a073202a746e737805ce63d8cd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ae0f8e7d27eea3379170064bd86cbc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " private void rebuildIndex(String indexName, IPath path)", "diff": ["+private void rebuildIndex(String indexName, IPath path) {", "+\tupdateIndexState(indexName, REBUILDING_STATE);", "+\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), path, true);", "+\tIndexRequest request = null;", "+\tif (target instanceof IProject) {", "+\t\trequest = new IndexAllProject((IProject) target, this);", "+\t} else if (target instanceof IFolder) {", "+\t\tIFolder folder = (IFolder) target;", "+\t\trequest = new IndexBinaryFolder(folder, this, folder.getProject());", "+\t} else if (target instanceof IFile) {", "+\t\trequest = new AddJarFileToIndex((IFile) target, this, \"\"); //$NON-NLS-1$", "+\t} else if (target instanceof java.io.File) {", "+\t\t// remember the timestamp of this library", "+\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File) target);", "+\t\tJavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps.put(path, new Long(timestamp));", "+\t\trequest = new AddJarFileToIndex(path, this, \"\"); //$NON-NLS-1$", "+\t}", "+\tif (request != null)", "+\t\trequest(request);", "+}", "-\t\t\t\tnew IWorkspaceRunnable() {", "-\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\tIndexManager.this.projectsToCheck = workspace.getRoot().getProjects();", "-\t\t\t\t\t\tfor (int i = 0, max = IndexManager.this.projectsToCheck == null ? 0 : IndexManager.this.projectsToCheck.length; i < max; i++){", "-\t\t\t\t\t\t\tIJavaProject project = JavaCore.create(IndexManager.this.projectsToCheck[i]);", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)", "-\t\t\t\t\t\t\t\tproject.getResolvedClasspath(true);", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} ", "-\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccb5816ea68d5b540df7495e9ef5f2bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void indexLibrary(IPath path, IProject referingProject)", "signatureAfterChange": " public void indexLibrary(IPath path, IProject referingProject)", "diff": ["+ */", "+public void indexLibrary(IPath path, IProject referingProject) {", "+\tif (JavaCore.getPlugin() == null) return;", "+\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), path, true);", "+\tIndexRequest request = null;", "+\tif (target instanceof IFile) {", "+\t\trequest = new AddJarFileToIndex((IFile)target, this, referingProject.getName());", "+\t} else if (target instanceof java.io.File) {", "+\t\t// remember the timestamp of this library", "+\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "+\t\tJavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps.put(path, new Long(timestamp));", "+\t\trequest = new AddJarFileToIndex(path, this, referingProject.getName());", "+\t} else if (target instanceof IFolder) {", "+\t\trequest = new IndexBinaryFolder((IFolder)target, this, referingProject);", "+\t} else {", "+\t\treturn;", "+\t}", "+\t// check if the same request is not already in the queue", "+\tfor (int i = this.jobEnd; i >= this.jobStart; i--) {", "+\t\tIJob job = this.awaitingJobs[i];", "+\t\tif (job != null && request.equals(job)) return;", "+\t}", "+\tthis.request(request);", "+}", "- */", "-public void indexLibrary(IPath path, IProject referingProject) {", "-\tif (JavaCore.getPlugin() == null) return;", "-", "-\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), path, true);", "-\t", "-\tIndexRequest request = null;", "-\tif (target instanceof IFile) {", "-\t\trequest = new AddJarFileToIndex((IFile)target, this, referingProject.getName());", "-\t} else if (target instanceof java.io.File) {", "-\t\t// remember the timestamp of this library", "-\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "-\t\tJavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps.put(path, new Long(timestamp));", "-\t\trequest = new AddJarFileToIndex(path, this, referingProject.getName());", "-\t} else if (target instanceof IFolder) {", "-\t\trequest = new IndexBinaryFolder((IFolder)target, this, referingProject);", "-\t} else {", "-\t\treturn;", "-\t", "-\t// check if the same request is not already in the queue", "-\tfor (int i = this.jobEnd; i >= this.jobStart; i--) {", "-\t\tIJob awaiting = this.awaitingJobs[i];", "-\t\tif (awaiting != null && request.equals(awaiting)) {", "-\t\t\treturn;", "-", "-\tthis.request(request);"]}], "num": 43231}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28521179ed7979e633da5a32a726ec89", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e4ceb6f49f0f395ea71374782deca3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTestJLS3.java", "commitBeforeChange": "d7450671fa9f7bd9aca049efca7d18259dae8d0c", "commitAfterChange": "d86f6722152173461a9e1580d1d40deb787e4119", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testbug388137() throws Exception", "signatureAfterChange": " public void testbug388137() throws Exception", "diff": ["-\tString contents = \"package p;\\n\" +", "-\t\t\t\t\t\t\"import java.util.List;\\n\" +", "-\t\t\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\t\"\tpublic X(List list) {}\\n\" +", "-\t\t\t\t\t\t\"\tpublic static class ListHandler implements Handler {\\n\" +", "-\t\t\t\t\t\t\"\t\tList list = null;\\n\" +", "-\t\t\t\t\t\t\"\t\tpublic ListHandler(List list) {\\n\" +", "-\t\t\t\t\t\t\" \t \t\tthis.list = list;\\n\" +", "-\t\t\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\t\"}\\n\" +", "-\t\t\t\t\t\t\"interface Handler {}\\n\";", "-\taddLibrary(project, \"lib.jar\", \"src.zip\", new String[] {\"/P1/p/X.java\", contents}, \"1.5\");", "+\ttry {", "+\t\tString contents = \"package p;\\n\" +", "+\t\t\t\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\t\t\t\"\tpublic X(List list) {}\\n\" +", "+\t\t\t\t\t\t\t\"\tpublic static class ListHandler implements Handler {\\n\" +", "+\t\t\t\t\t\t\t\"\t\tList list = null;\\n\" +", "+\t\t\t\t\t\t\t\"\t\tpublic ListHandler(List list) {\\n\" +", "+\t\t\t\t\t\t\t\" \t \t\tthis.list = list;\\n\" +", "+\t\t\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\t\t\"interface Handler {}\\n\";", "+\t\taddLibrary(project, \"lib.jar\", \"src.zip\", new String[] {\"/P1/p/X.java\", contents}, \"1.5\");", "-\tthis.workingCopies[0] = getWorkingCopy(\"/P1/q/Y.java\", true);", "-\tcontents =", "-\t\t\t\"package q;\\n\" +", "-\t\t\t\"import p.X.ListHandler;\\n\" +", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"\tpublic Object foo() {\\n\" +", "-\t\t\t\"\t\tListHandler sortHandler = new ListHandler(null);\\n\" +", "-\t\t\t\"\t\treturn sortHandler;\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\";", "-\tASTNode node = buildAST(contents, this.workingCopies[0], true);", "+\t\tthis.workingCopies[0] = getWorkingCopy(\"/P1/q/Y.java\", true);", "+\t\tcontents =", "+\t\t\t\t\"package q;\\n\" +", "+\t\t\t\t\"import p.X.ListHandler;\\n\" +", "+\t\t\t\t\"public class Y {\\n\" +", "+\t\t\t\t\"\tpublic Object foo() {\\n\" +", "+\t\t\t\t\"\t\tListHandler sortHandler = new ListHandler(null);\\n\" +", "+\t\t\t\t\"\t\treturn sortHandler;\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\";", "+\t\tASTNode node = buildAST(contents, this.workingCopies[0], true);", "-\tassertTrue(\"Should be a compilation unit\", node instanceof CompilationUnit);", "-\tCompilationUnit unit = (CompilationUnit) node;", "-\tnode = getASTNode(unit, 0, 0, 0);", "-\tassertEquals(\"Not an expression statement\", ASTNode.VARIABLE_DECLARATION_STATEMENT, node.getNodeType());", "-\tVariableDeclarationStatement statement = (VariableDeclarationStatement) node;", "-\tList fragments = statement.fragments();", "-\tassertEquals(\"Wrong size\", 1, fragments.size());", "-\tVariableDeclarationFragment fragment= (VariableDeclarationFragment) fragments.get(0);", "-\tExpression expression = fragment.getInitializer();", "-\tassertEquals(\"Not a constructor invocation\", ASTNode.CLASS_INSTANCE_CREATION, expression.getNodeType());", "-\tClassInstanceCreation classInstanceCreation = (ClassInstanceCreation) expression;", "-\tIMethodBinding binding = classInstanceCreation.resolveConstructorBinding();", "-\tJavaElement element = (JavaElement)binding.getJavaElement();", "-\tassertNotNull(\"Null Element info\", element.getElementInfo());", "+\t\tassertTrue(\"Should be a compilation unit\", node instanceof CompilationUnit);", "+\t\tCompilationUnit unit = (CompilationUnit) node;", "+\t\tnode = getASTNode(unit, 0, 0, 0);", "+\t\tassertEquals(\"Not an expression statement\", ASTNode.VARIABLE_DECLARATION_STATEMENT, node.getNodeType());", "+\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) node;", "+\t\tList fragments = statement.fragments();", "+\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\tVariableDeclarationFragment fragment= (VariableDeclarationFragment) fragments.get(0);", "+\t\tExpression expression = fragment.getInitializer();", "+\t\tassertEquals(\"Not a constructor invocation\", ASTNode.CLASS_INSTANCE_CREATION, expression.getNodeType());", "+\t\tClassInstanceCreation classInstanceCreation = (ClassInstanceCreation) expression;", "+\t\tIMethodBinding binding = classInstanceCreation.resolveConstructorBinding();", "+\t\tJavaElement element = (JavaElement)binding.getJavaElement();", "+\t\tassertNotNull(\"Null Element info\", element.getElementInfo());", "+\t} finally {", "+\t\tdeleteProject(project);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b603c02726836ed3c0b75f9cb85573b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTestJLS3.java", "commitBeforeChange": "e1812b866d1aaf7628da21a301ca4fda773a9ad2", "commitAfterChange": "ce3b124b619fc5d547dab1f64c28160ffb2016f6", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testbug388137() throws Exception", "signatureAfterChange": " public void testbug388137() throws Exception", "diff": ["-\tString contents = \"package p;\\n\" +", "-\t\t\t\t\t\t\"import java.util.List;\\n\" +", "-\t\t\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\t\"\tpublic X(List list) {}\\n\" +", "-\t\t\t\t\t\t\"\tpublic static class ListHandler implements Handler {\\n\" +", "-\t\t\t\t\t\t\"\t\tList list = null;\\n\" +", "-\t\t\t\t\t\t\"\t\tpublic ListHandler(List list) {\\n\" +", "-\t\t\t\t\t\t\" \t \t\tthis.list = list;\\n\" +", "-\t\t\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\t\"}\\n\" +", "-\t\t\t\t\t\t\"interface Handler {}\\n\";", "-\taddLibrary(project, \"lib.jar\", \"src.zip\", new String[] {\"/P1/p/X.java\", contents}, \"1.5\");", "+\ttry {", "+\t\tString contents = \"package p;\\n\" +", "+\t\t\t\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\t\t\t\"\tpublic X(List list) {}\\n\" +", "+\t\t\t\t\t\t\t\"\tpublic static class ListHandler implements Handler {\\n\" +", "+\t\t\t\t\t\t\t\"\t\tList list = null;\\n\" +", "+\t\t\t\t\t\t\t\"\t\tpublic ListHandler(List list) {\\n\" +", "+\t\t\t\t\t\t\t\" \t \t\tthis.list = list;\\n\" +", "+\t\t\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\t\t\"interface Handler {}\\n\";", "+\t\taddLibrary(project, \"lib.jar\", \"src.zip\", new String[] {\"/P1/p/X.java\", contents}, \"1.5\");", "-\tthis.workingCopies[0] = getWorkingCopy(\"/P1/q/Y.java\", true);", "-\tcontents =", "-\t\t\t\"package q;\\n\" +", "-\t\t\t\"import p.X.ListHandler;\\n\" +", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"\tpublic Object foo() {\\n\" +", "-\t\t\t\"\t\tListHandler sortHandler = new ListHandler(null);\\n\" +", "-\t\t\t\"\t\treturn sortHandler;\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\";", "-\tASTNode node = buildAST(contents, this.workingCopies[0], true);", "+\t\tthis.workingCopies[0] = getWorkingCopy(\"/P1/q/Y.java\", true);", "+\t\tcontents =", "+\t\t\t\t\"package q;\\n\" +", "+\t\t\t\t\"import p.X.ListHandler;\\n\" +", "+\t\t\t\t\"public class Y {\\n\" +", "+\t\t\t\t\"\tpublic Object foo() {\\n\" +", "+\t\t\t\t\"\t\tListHandler sortHandler = new ListHandler(null);\\n\" +", "+\t\t\t\t\"\t\treturn sortHandler;\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\";", "+\t\tASTNode node = buildAST(contents, this.workingCopies[0], true);", "-\tassertTrue(\"Should be a compilation unit\", node instanceof CompilationUnit);", "-\tCompilationUnit unit = (CompilationUnit) node;", "-\tnode = getASTNode(unit, 0, 0, 0);", "-\tassertEquals(\"Not an expression statement\", ASTNode.VARIABLE_DECLARATION_STATEMENT, node.getNodeType());", "-\tVariableDeclarationStatement statement = (VariableDeclarationStatement) node;", "-\tList fragments = statement.fragments();", "-\tassertEquals(\"Wrong size\", 1, fragments.size());", "-\tVariableDeclarationFragment fragment= (VariableDeclarationFragment) fragments.get(0);", "-\tExpression expression = fragment.getInitializer();", "-\tassertEquals(\"Not a constructor invocation\", ASTNode.CLASS_INSTANCE_CREATION, expression.getNodeType());", "-\tClassInstanceCreation classInstanceCreation = (ClassInstanceCreation) expression;", "-\tIMethodBinding binding = classInstanceCreation.resolveConstructorBinding();", "-\tJavaElement element = (JavaElement)binding.getJavaElement();", "-\tassertNotNull(\"Null Element info\", element.getElementInfo());", "+\t\tassertTrue(\"Should be a compilation unit\", node instanceof CompilationUnit);", "+\t\tCompilationUnit unit = (CompilationUnit) node;", "+\t\tnode = getASTNode(unit, 0, 0, 0);", "+\t\tassertEquals(\"Not an expression statement\", ASTNode.VARIABLE_DECLARATION_STATEMENT, node.getNodeType());", "+\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) node;", "+\t\tList fragments = statement.fragments();", "+\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\tVariableDeclarationFragment fragment= (VariableDeclarationFragment) fragments.get(0);", "+\t\tExpression expression = fragment.getInitializer();", "+\t\tassertEquals(\"Not a constructor invocation\", ASTNode.CLASS_INSTANCE_CREATION, expression.getNodeType());", "+\t\tClassInstanceCreation classInstanceCreation = (ClassInstanceCreation) expression;", "+\t\tIMethodBinding binding = classInstanceCreation.resolveConstructorBinding();", "+\t\tJavaElement element = (JavaElement)binding.getJavaElement();", "+\t\tassertNotNull(\"Null Element info\", element.getElementInfo());", "+\t} finally {", "+\t\tdeleteProject(project);", "+\t}"]}], "num": 63729}
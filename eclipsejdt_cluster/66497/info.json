{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "242a5e3cb8472e64345565d5b8d95690", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1368a251735d571174c6993ad4643739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "e60903fe9d1be9609e2d7018794b66ab39d77839", "commitAfterChange": "1cff9f79be5fd6fcc760af55214bca85f6dbdfe8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\tIPath outputLocation = entry.getOutputLocation() != null ", "+\t\t\t\tIPath outputPath = entry.getOutputLocation() != null ", "-\t\t\t\tIContainer outputFolder;", "-\t\t\t\tif (javaProject.getProject().getFullPath().equals(outputLocation)){", "-\t\t\t\t\toutputFolder = javaProject.getProject();", "-\t\t\t\t} else {", "-\t\t\t\t\toutputFolder = root.getFolder(outputLocation);", "-\t\t\t\t}", "+\t\t\t\tIContainer outputFolder = outputPath.segmentCount() == 1", "+\t\t\t\t\t? (IContainer) javaProject.getProject()", "+\t\t\t\t\t: (IContainer) root.getFolder(outputPath);", "-\t\t\t\t\t\tIPath prereqOutputLocation = e.getOutputLocation() != null ", "+\t\t\t\t\t\tIPath prereqOutputPath = e.getOutputLocation() != null ", "-\t\t\t\t\t\tIContainer binaryFolder;", "-\t\t\t\t\t\tif (prereqJavaProject.getProject().getFullPath().equals(prereqOutputLocation)){", "-\t\t\t\t\t\t\tbinaryFolder = prereqJavaProject.getProject();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tbinaryFolder = root.getFolder(prereqOutputLocation);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tIContainer binaryFolder = prereqOutputPath.segmentCount() == 1", "+\t\t\t\t\t\t\t? (IContainer) prereqProject", "+\t\t\t\t\t\t\t: (IContainer) root.getFolder(prereqOutputPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d57bfd3a8ed8ec586ecadafc855a3e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies) \t\tthrows JavaModelException", "diff": ["-\t\t\t\t System.out.println(\" and working copies [\"); //$NON-NLS-1$", "+\t\t\t\t System.out.println(\"and working copies [\"); //$NON-NLS-1$", "-\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 10); // 1 for file path, 3 for parsing, 6 for binding resolution //$NON-NLS-1$", "+\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 10); // 1 for file path, 4 for parsing and binding creation, 5 for binding resolution //$NON-NLS-1$", "-\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 4); // 1 for file path, 3 for parsing //$NON-NLS-1$", "+\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 5); // 1 for file path, 4 for parsing and binding creation //$NON-NLS-1$", "-\t\t\tthis.matchingOpenables = new MatchingOpenableSet();", "+\t\t\tthis.potentialMatches = new PotentialMatchSet();", "-\t\t\tJavaProject previousJavaProject = null;", "+\t\t\tIType focusType = getFocusType();", "+\t\t\tJavaProject previousJavaProject = focusType == null ? null : (JavaProject)focusType.getJavaProject();", "-\t\t\t\t\tif (!javaProject.equals(previousJavaProject)) {", "+\t\t\t\t\tif (focusType == null // when searching in hierarchy, all potential matches are resolved in the focus project context", "+\t\t\t\t\t\t\t&& !javaProject.equals(previousJavaProject)) {", "-\t\t\t\t\t\t\tthis.matchingOpenables = new MatchingOpenableSet();", "+\t\t\t\t\t\t\tthis.potentialMatches = new PotentialMatchSet();", "-\t\t\t\t\t\t// initialization for this project", "-\t\t\t\t\t\tif (length == 1) {", "-\t\t\t\t\t\t\t// if only one potential match, a file name environment costs too much,", "-\t\t\t\t\t\t\t// so use the existing searchable  environment wich will populate the java model", "-\t\t\t\t\t\t\t// only for this potential match and its required types.", "-\t\t\t\t\t\t\tif (this.nameEnvironment != null) { // cleanup", "-\t\t\t\t\t\t\t\tthis.nameEnvironment.cleanup();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.nameEnvironment = javaProject.getSearchableNameEnvironment();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.initializeNameEnvironment(javaProject);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.initialize(javaProject);", "-\t\t\t\t// add matching openable", "-\t\t\t\tthis.addMatchingOpenable(resource, openable, null/*no CompilationUnitDeclaration yet*/, null/*no Matchset yet*/);", "+\t\t\t\t// add potential match", "+\t\t\t\tthis.addPotentialMatch(resource, openable);", "-\t\t\t\tthis.matchingOpenables = new MatchingOpenableSet();", "+\t\t\t\tthis.potentialMatches = new PotentialMatchSet();", "-\t\t\tthis.parsedUnits = null;"]}], "num": 66497}
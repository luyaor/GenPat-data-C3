{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb7b3ac23ca816dcc98d26dcde4c0b26", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "204523c6df9fc1b4836181c79a67792b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "dd2a270d4bfbb4f228adb22be7333923f86c77e9", "commitAfterChange": "ba1917d8323b975c43d151520213a593a77dc7c0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["-\tpublic JavaElementInfo getElementInfo() throws JavaModelException {", "+\tpublic Object getElementInfo() throws JavaModelException {", "+", "+\t\t// workaround to ensure parent project resolved classpath is available to avoid triggering initializers", "+\t\t// while the JavaModelManager lock is acquired (can cause deadlocks in clients)", "+\t\tIJavaProject project = getJavaProject();", "+\t\tif (project != null && !project.isOpen()) {", "+\t\t\t// TODO: need to revisit, since deadlock could still occur if perProjectInfo is removed concurrent before entering the lock", "+\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "+\t\t}", "+", "-\t\t\treturn (JavaElementInfo)info;", "+\t\t\treturn info;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad19ff3f8dce005a62d5befed3e4ca8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "a1fcf7304168cfe820abddf9b4c29fb602e9a7cd", "commitAfterChange": "c0a0c19db3e1c410023eabce30626d520ce59204", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r protected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r protected void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\tIFolder binaryFolder;\r", "+\t\t\tIJavaProject project = element.getJavaProject();\r", "+\t\t\tIResource binaryFolder;\r", "-\t\t\t\tbinaryFolder = (IFolder)element.getPackageFragmentRoot().getUnderlyingResource();\r", "+\t\t\t\tbinaryFolder = element.getPackageFragmentRoot().getUnderlyingResource();\r", "+\t\t\t\t// if the class file is part of the binary output, it has been created by\r", "+\t\t\t\t// the java builder -> ignore\r", "+\t\t\t\tif (binaryFolder.getFullPath().equals(project.getOutputLocation())) {\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r"]}], "num": 4107}
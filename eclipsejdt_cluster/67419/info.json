{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c662b734f71c5e4c8645c4eda584d90", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7a22c02ea44f314e96c98eaf4fdecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "e3ab7adcf5341254d66eeef47fc0727dbe42868f", "commitAfterChange": "8915ec2bb74e44419be85002d7c3a4c9f8582635", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": " public final void jumpOverMethodBody()", "signatureAfterChange": " public final void jumpOverMethodBody()", "diff": ["+\t\t\tthis.withoutUnicodePtr = 0;", "-\t\t\t\t\t\t&& ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')))", "+\t\t\t\t\t\t\t&& ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n'))) {", "+\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\tparseTags(false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.currentLine != null) { // check for presence of NLS tags where ? is an int.", "+\t\t\t\t\t\tthis.currentLine.add(", "+\t\t\t\t\t\t\tnew StringLiteral(", "+\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), ", "+\t\t\t\t\t\t\t\tthis.startPosition, ", "+\t\t\t\t\t\t\t\tthis.currentPosition - 1));", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (isUnicode) {", "-\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\t\tparseTags(true);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (this.recordLineSeparator) {", "+\t\t\t\t\t\t\t\t\t\t\tif (isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\tparseTags(true);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\tparseTags(false);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();", "+\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\t\tparseTags(false);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e6715e07640c680b3fb151568b53556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/ManifestAnalyzer.java", "commitBeforeChange": "cacbd7d9edc7e71649beb6acc6f822d5f25ebd5c", "commitAfterChange": "d00cfb93873eb3ce8d400ade4fc2ec8c8a27a894", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean analyzeManifestContents(Reader reader) throws IOException", "signatureAfterChange": " \tpublic boolean analyzeManifestContents(Reader reader) throws IOException", "diff": ["-\t\tthis.ClasspathSectionsCount = 0;", "+\t\tthis.classpathSectionsCount = 0;", "-\t\t\t\t\t\tthis.ClasspathSectionsCount++;", "+\t\t\t\t\t\tthis.classpathSectionsCount++;", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\tif (this.classpathSectionsCount != 0) {", "+\t\t\t\t\t\t\tif (this.calledFilesNames == null) {", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\t// >>>>>>>>>>> Add a break to not add the jar yet as it can continue on the next line", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tif (this.calledFilesNames == null) {", "-\t\t\t\t\t\tthis.calledFilesNames = new ArrayList();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.calledFilesNames.add(currentJarToken.toString());", "-\t\t\t\t\tcurrentJarToken.setLength(0);", "+\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9992f62d9446dd589c164eae398686f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "c45bf502fba0f629b4a4d8d054f7be8a5c8b1dee", "commitAfterChange": "39b76d2a7f3a6f2c26b172e494e7acf3aff1dea6", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": " public final void jumpOverMethodBody()", "signatureAfterChange": " public final void jumpOverMethodBody()", "diff": ["+\t\t\tthis.withoutUnicodePtr = 0;", "-\t\t\t\t\t\t&& ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')))", "+\t\t\t\t\t\t\t&& ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n'))) {", "+\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\tparseTags(false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.currentLine != null) { // check for presence of NLS tags where ? is an int.", "+\t\t\t\t\t\tthis.currentLine.add(", "+\t\t\t\t\t\t\tnew StringLiteral(", "+\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), ", "+\t\t\t\t\t\t\t\tthis.startPosition, ", "+\t\t\t\t\t\t\t\tthis.currentPosition - 1));", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (isUnicode) {", "-\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\t\tparseTags(true);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (this.recordLineSeparator) {", "+\t\t\t\t\t\t\t\t\t\t\tif (isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\tparseTags(true);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\tparseTags(false);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();", "+\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\t\tparseTags(false);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();"]}], "num": 67419}
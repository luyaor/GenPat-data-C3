{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af9e59befa4dc1b8a83942e05f47a591", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87aaec9084d5e733aebd61dab5327759", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void disassembleTargetTypeContents(boolean insideWildcard, int targetType, IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassembleTargetTypeContents(boolean insideWildcard, int targetType, IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t}", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {", "-\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t}));", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_CAST :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_INSTANCEOF :", "-\t\t\tcase IExtendedAnnotationConstants.OBJECT_CREATION :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_LITERAL :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\t\t\t}));", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_CAST_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_INSTANCEOF_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.OBJECT_CREATION_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_LITERAL_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_GENERIC_OR_ARRAY :", "+\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_type_parameter, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "+\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {", "+\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "+\t\t\t\t\t}));", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND :", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND :", "+\t\t\t\tbreak;\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.FIELD :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RECEIVER :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_FORMAL_PARAMETER :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_type_parameter_with_bound, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterBoundIndex()),", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getParameterIndex()),", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "+\t\t\tcase IExtendedAnnotationConstants.THROWS :", "+\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_throws, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "+\t\t\t\t\t\t}));", "+\t\t\t\tbreak;", "+", "+\t\t\tcase IExtendedAnnotationConstants.RESOURCE_VARIABLE :", "-\t\t\tcase IExtendedAnnotationConstants.LOCAL_VARIABLE_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(Messages.disassembler_localvariabletargetheader);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "-\t\t\t\tlocalVariableTableSize = extendedAnnotation.getLocalVariableRefenceInfoLength();", "-\t\t\t\tlocalVariableTable = extendedAnnotation.getLocalVariableTable();", "-\t\t\t\tfor (int i = 0; i < localVariableTableSize; i++) {", "-\t\t\t\t\tif (i != 0) {", "-\t\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "-\t\t\t\t\t}", "-\t\t\t\t\tILocalVariableReferenceInfo info = localVariableTable[i];", "-\t\t\t\t\tint index= info.getIndex();", "-\t\t\t\t\tint startPC = info.getStartPC();", "-\t\t\t\t\tint length  = info.getLength();", "-\t\t\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_localvariablereferenceinfoentry,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tInteger.toString(startPC),", "-\t\t\t\t\t\t\tInteger.toString(startPC + length),", "-\t\t\t\t\t\t\tInteger.toString(index),", "-\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_PARAMETER :", "+\t\t\tcase IExtendedAnnotationConstants.EXCEPTION_PARAMETER :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_exception_table_index, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getExceptionTableIndex()),", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_PARAMETER_GENERIC_OR_ARRAY :", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.INSTANCEOF :", "+\t\t\tcase IExtendedAnnotationConstants.NEW :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_REFERENCE :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_REFERENCE :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_RECEIVER_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN_TYPE_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.FIELD_GENERIC_OR_ARRAY :", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL :", "+\t\t\tcase IExtendedAnnotationConstants.CAST :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_INVOCATION_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_REFERENCE_TYPE_ARGUMENT :", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_type_argument, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.THROWS :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_throws, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.THROWS_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_throws, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932b18899b70c52e1ea07772acaf2370", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "commitAfterChange": "5bb01926d23a6cf003d0d521691c391ac08b77a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IEnclosingMethodAttribute enclosingMethodAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tbuffer", "-\t\t\t.append(Util.bind(\"disassembler.commentstart\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxStack\")) //$NON-NLS-1$", "-\t\t\t.append(codeAttribute.getMaxStack())", "-\t\t\t.append(Util.bind(\"disassembler.comma\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxLocals\")) //$NON-NLS-1$", "-\t\t\t.append(codeAttribute.getMaxLocals())", "-\t\t\t.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\tbuffer.append(Util.bind(\"disassembler.codeattributeheader\")); //$NON-NLS-1$", "-\t\tDefaultBytecodeVisitor visitor = new DefaultBytecodeVisitor(codeAttribute.getCodeLength(), buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\tfor (int i = 0; i < exceptionTableLength; i++) {", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t\t.append(localVariableTableEntry.getIndex())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(exceptionType);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t.append(localVariableTableEntry.getIndex())", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "-\t\t\t\t.append(exceptionType);", "+", "+\tprivate void disassemble(IEnclosingMethodAttribute enclosingMethodAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tbuffer.append(Util.bind(\"disassembler.enclosingmethodheader\")); //$NON-NLS-1$", "+\t\tbuffer", "+\t\t\t.append(Util.bind(\"disassembler.constantpoolindex\")) //$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getEnclosingClassIndex())", "+\t\t\t.append(\" \")//$NON-NLS-1$", "+\t\t\t.append(Util.bind(\"disassembler.constantpoolindex\")) //$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getMethodNameAndTypeIndex())", "+\t\t\t.append(\" \")//$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getEnclosingClass()) //$NON-NLS-1$", "+\t\t\t.append(\".\")//$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getMethodName()) //$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getMethodDescriptor()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f029a09430ff4460ea1e94be1cf288", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "cf143a6a7ccd7553042fd4fda437966abe78a9e6", "commitAfterChange": "31d3be0ab92dab378331be6840b8f198d91f8e2d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IRuntimeInvisibleParameterAnnotationsAttribute runtimeInvisibleParameterAnnotationsAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\tprivate void disassemble(IRuntimeInvisibleParameterAnnotationsAttribute runtimeInvisibleParameterAnnotationsAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tbuffer.append(Util.bind(\"disassembler.runtimevisibleparameterannotationsattributeheader\")); //$NON-NLS-1$", "+\t\tIParameterAnnotation[] parameterAnnotations = runtimeInvisibleParameterAnnotationsAttribute.getParameterAnnotations();", "+\t\tfor (int i = 0, max = parameterAnnotations.length; i < max; i++) {", "+\t\t\tdisassemble(i, parameterAnnotations[i], buffer, lineSeparator, tabNumber + 1);", "+\t\t}"]}], "num": 51548}
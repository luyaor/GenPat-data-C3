{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "022f9895b25db9f1958b5805dd3a8bdc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eb0e5e9e413b34972419c319a257397", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "8f838ccefdcacadaac662cb88a80fdb1a3657843", "commitAfterChange": "658041315da1052ce94c7e1b37be530cbc4e1f1d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "diff": ["+\t\tif (mode == CheckMode.BOUND_CHECK && requiredType instanceof TypeVariableBinding) {", "+\t\t\t// during bound check against a type variable check the provided type against all upper bounds:", "+\t\t\tTypeBinding superClass = requiredType.superclass();", "+\t\t\tif (superClass != null && superClass.hasNullTypeAnnotations()) {", "+\t\t\t\tNullAnnotationMatching status = analyse(superClass, providedType, null, nullStatus, mode);", "+\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\tif (severity == 2)", "+\t\t\t\t\treturn new NullAnnotationMatching(severity, nullStatus, superTypeHint);", "+\t\t\t}", "+\t\t\tTypeBinding[] superInterfaces = requiredType.superInterfaces();", "+\t\t\tif (superInterfaces != null) {", "+\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\t\tif (superInterfaces[i].hasNullTypeAnnotations()) {", "+\t\t\t\t\t\tNullAnnotationMatching status = analyse(superInterfaces[i], providedType, null, nullStatus, mode);", "+\t\t\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\t\t\tif (severity == 2)", "+\t\t\t\t\t\t\treturn new NullAnnotationMatching(severity, nullStatus, superTypeHint);\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\tlong requiredBits = requiredNullTagBits(requiredType);", "+\t\t\tlong requiredBits = requiredNullTagBits(requiredType, mode);", "-\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE && nullStatus == -1);", "+\t\t\t\tint s = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE && nullStatus == -1);", "+\t\t\t\tseverity = Math.max(severity, s);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9262b5b87f25a8d01241e7ac7de86d4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType)", "signatureAfterChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType) {", "+// return: severity: 0 = no problem; 1 = flow related problem; 2 = unchecked wrt type detail; 3 = conflicting annotations", "+protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {", "-\t\t\t\t\t\tif (requiredBits != 0 && requiredBits != providedBits) {", "-\t\t\t\t\t\t\tif (providedBits == 0)", "-\t\t\t\t\t\t\t\tseverity = 1; // need unchecked conversion regarding type detail", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\treturn 2; // mismatching annotations", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (i > 0)", "+\t\t\t\t\t\t\tnullStatus = 0; // don't use beyond the outermost dimension", "+\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus));", "+\t\t\t\t\t\tif (severity == 3)", "+\t\t\t\t\t\t\treturn severity;", "+\t\t\t} else if (providedType.id == TypeIds.T_null) {", "+\t\t\t\tif (dims > 0 && requiredDimsTagBits[0] == TagBits.AnnotationNonNull)", "+\t\t\t\t\treturn 1;", "+\t\t\t}", "+\t\t}", "+\t} else if (requiredType instanceof ParameterizedTypeBinding) {", "+\t\tlong requiredBits = requiredType.tagBits & TagBits.AnnotationNullMASK;", "+\t\tif (requiredBits == TagBits.AnnotationNullable)", "+\t\t\treturn 0; // accepting anything", "+\t\tlong providedBits = providedType.tagBits & TagBits.AnnotationNullMASK;", "+\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);", "+\t\t// TODO(stephan): descend into type parameters", "+\t}", "+\treturn severity;", "+}", "-\treturn severity;"]}], "num": 67751}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26d35922042193693143e0a77aed2637", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9143f767167eafcb2c29b56a2b228c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void test0079() throws JavaModelException", "signatureAfterChange": " \tpublic void test0079() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\t/*start*/<T extends A> T foo(T t) {\\n\" + ", "-\t\t\t\t\"\t\treturn t;\\n\" + ", "-\t\t\t\t\"\t}/*end*/\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tnew X().bar();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tvoid bar() {\\n\" + ", "-\t\t\t\t\"\t\tB b = foo(new B());\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"class A {}\\n\" + ", "-\t\t\t\t\"class B extends A {}\\n\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIMethodBinding methodBinding = ((MethodDeclaration) node).resolveBinding();", "-\t\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "-\t\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "-\t\t\tassertTrue(\"Not a generic method\", methodBinding.isGenericMethod());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\t\\n\" + ", "+\t\t\t\"\t/*start*/<T extends A> T foo(T t) {\\n\" + ", "+\t\t\t\"\t\treturn t;\\n\" + ", "+\t\t\t\"\t}/*end*/\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\tnew X().bar();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\"\t\tB b = foo(new B());\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class A {}\\n\" + ", "+\t\t\t\"class B extends A {}\\n\",", "+\t\t\tthis.workingCopy);", "+\t\tIMethodBinding methodBinding = ((MethodDeclaration) node).resolveBinding();", "+\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "+\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "+\t\tassertTrue(\"Not a generic method\", methodBinding.isGenericMethod());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991cbefbc53cb9cc539e959e5e5e5b1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test0060() throws JavaModelException", "signatureAfterChange": " \tpublic void test0060() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"/*start*/public class X {\\n\" +", "-\t\t\t\t\"  <T> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  <T extends X> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  <T extends Class> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  <T extends Exception & Runnable> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t\tworkingCopy);", "-\t\t\tMethodDeclaration[] methods = ((TypeDeclaration) node).getMethods();", "-\t\t\tint length = methods.length;", "-\t\t\tString[] keys = new String[length];", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tkeys[i] = methods[i].resolveBinding().getKey();", "-\t\t\tassertBindingKeysEqual(", "-\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V\\n\" + ", "-\t\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V\\n\" + ", "-\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V\\n\" + ", "-\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V\",", "-\t\t\t\tkeys);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"/*start*/public class X {\\n\" +", "+\t\t\t\"  <T> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  <T extends X> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  <T extends Class> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  <T extends Exception & Runnable> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}/*end*/\",", "+\t\t\tthis.workingCopy);", "+\t\tMethodDeclaration[] methods = ((TypeDeclaration) node).getMethods();", "+\t\tint length = methods.length;", "+\t\tString[] keys = new String[length];", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tkeys[i] = methods[i].resolveBinding().getKey();", "+\t\tassertBindingKeysEqual(", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V\",", "+\t\t\tkeys);"]}], "num": 44485}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84110cb6ab2621359f07cb7d9dd3090d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942885f3ebe230d3b250df76f09ad183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "34ee213dde08a7453eec3b2a2a0e314e1d2814a6", "commitAfterChange": "7350d2407528c733101203f94e4081cd258cb05c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "signatureAfterChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "diff": ["-\t\t} else {", "-\t\t\tif (compileTimeType != TypeBinding.NULL && compileTimeType.isBaseType()) {", "-\t\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(runtimeType);", "-\t\t\t\tif (boxedType == runtimeType) // Object o = 12;", "-\t\t\t\t\tboxedType = compileTimeType; ", "-\t\t\t\tthis.implicitConversion = BOXING | (boxedType.id << 4) + compileTimeType.id;", "-\t\t\t\tscope.problemReporter().autoboxing(this, compileTimeType, scope.environment().computeBoxingType(boxedType));", "-\t\t\t\treturn;", "-\t\t\t}", "+\t\t} else if (compileTimeType != TypeBinding.NULL && compileTimeType.isBaseType()) {", "+\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(runtimeType);", "+\t\t\tif (boxedType == runtimeType) // Object o = 12;", "+\t\t\t\tboxedType = compileTimeType; ", "+\t\t\tthis.implicitConversion = BOXING | (boxedType.id << 4) + compileTimeType.id;", "+\t\t\tscope.problemReporter().autoboxing(this, compileTimeType, scope.environment().computeBoxingType(boxedType));", "+\t\t\treturn;", "+\t\t} else if (this.constant != Constant.NotAConstant && this.constant.typeID() != T_JavaLangString) {", "+\t\t\tthis.implicitConversion = BOXING;", "+\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7441d1766fdf1343d4da16d18afe7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "commitAfterChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\t", "+", "+", "+\t\t// it is possible for a Byte to be unboxed to a byte & then converted to an int", "+\t\t// but it is not possible either for a byte to become Byte & then assigned to an Integer,", "+\t\t// or to become an int before boxed into an Integer", "+\t\tif (runtimeTimeType.isBaseType()) {", "+\t\t\tif (!compileTimeType.isBaseType()) {", "+\t\t\t\tcompileTimeType = scope.computeBoxingType(compileTimeType);", "+\t\t\t\tthis.implicitConversion = UNBOXING;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (compileTimeType.isBaseType()) {", "+\t\t\t\tcompileTimeType = scope.computeBoxingType(compileTimeType);", "+\t\t\t\tthis.implicitConversion = BOXING | compileTimeType.id;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+", "-\t\t\t\tthis.implicitConversion = (T_int << 4) + compileTimeType.id;", "+\t\t\t\tthis.implicitConversion |= (T_int << 4) + compileTimeType.id;", "-\t\t\t\tthis.implicitConversion = (runtimeTimeType.id << 4) + compileTimeType.id;", "+\t\t\t\tthis.implicitConversion |= (runtimeTimeType.id << 4) + compileTimeType.id;"]}], "num": 50157}
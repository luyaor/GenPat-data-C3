{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea1e264d6ffe0c05e58829befd0f78fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2558d43311b0b7ba76d9139b373ffbd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "cf8658c9364eba69da99d0cd3f2810816b79f850", "commitAfterChange": "2d8c25e0e9e9ed7348d0636c5c7a1bbc627b899a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\tpublic IBuffer createBuffer(ICompilationUnit workingCopy)", "signatureAfterChange": " \tpublic void testSearch1() throws CoreException", "diff": ["-\t\tpublic IBuffer createBuffer(ICompilationUnit workingCopy) {", "-\t\t\treturn new TestBuffer(workingCopy);", "-\t\t}", "+\t */", "+\tpublic void testSearch1() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tICompilationUnit cu = getCompilationUnit(\"P/Y.java\");", "+\t\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "+\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tworkingCopy.getBuffer().setContents(", "+\t\t\t\t\"public class Y {\\n\" +", "+\t\t\t\t\"  X field;\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t);", "+\t\t\tworkingCopy.makeConsistent(null);", "+", "+\t\t\tJavaSearchTests.JavaSearchResultCollector resultCollector = new JavaSearchTests.JavaSearchResultCollector();", "+\t\t\tnew SearchEngine(owner).search(", "+\t\t\t\tgetWorkspace(), ", "+\t\t\t\t\"X\", ", "+\t\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\t\tIJavaSearchConstants.REFERENCES, ", "+\t\t\t\tSearchEngine.createWorkspaceScope(), ", "+\t\t\t\tresultCollector);", "+\t\t\tassertEquals(", "+\t\t\t\t\"Y.java Y.field [X]\",", "+\t\t\t\tresultCollector.toString());", "+\t\t} finally {", "+\t\t\tif (workingCopy != null) {", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72fffcde42cd75c9cb6895d07b24a11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfoWithParameterAnnotations.java", "commitBeforeChange": "94200ed39d00137579089415688a6cedf88ddec1", "commitAfterChange": "382f13be1a95be764b13ca01158d15888308733b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public IBinaryAnnotation[] getParameterAnnotations(int index)", "signatureAfterChange": " public IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName)", "diff": ["-public IBinaryAnnotation[] getParameterAnnotations(int index) {", "-\treturn this.parameterAnnotations == null ? null : this.parameterAnnotations[index];", "+public IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName) {", "+\ttry {", "+\t\treturn this.parameterAnnotations == null ? null : this.parameterAnnotations[index];", "+\t} catch (ArrayIndexOutOfBoundsException aioobe) {", "+\t\t// detailed reporting to track down https://bugs.eclipse.org/474081", "+\t\tStringBuffer message = new StringBuffer(\"Mismatching number of parameter annotations, \"); //$NON-NLS-1$", "+\t\tmessage.append(index);", "+\t\tmessage.append('>');", "+\t\tmessage.append(this.parameterAnnotations.length-1);", "+\t\tmessage.append(\" in \"); //$NON-NLS-1$", "+\t\tmessage.append(getSelector());", "+\t\tchar[] desc = getGenericSignature();", "+\t\tif (desc != null)", "+\t\t\tmessage.append(desc);", "+\t\telse", "+\t\t\tmessage.append(getMethodDescriptor());", "+\t\tif (classFileName != null)", "+\t\t\tmessage.append(\" in \").append(classFileName); //$NON-NLS-1$", "+\t\tthrow new IllegalStateException(message.toString(), aioobe);", "+\t}"]}], "num": 60990}
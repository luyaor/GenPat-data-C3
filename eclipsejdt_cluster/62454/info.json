{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "008b5acab30753c03bc0f1130df586e2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "200a370f577f5710df1833c2f72e453d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "fcebf68426f9aa792d1f3380803ca144f79b6c3c", "commitAfterChange": "4da5a9a150c1a47a773a4fd9e96abe9171b5562d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "signatureAfterChange": " \tprotected ASTNode[] buildASTs(String newContents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "diff": ["-\tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException {", "-\t\tMarkerInfo markerInfo = new MarkerInfo(contents);", "-\t\tcontents = markerInfo.source;", "-", "-\t\tcu.getBuffer().setContents(contents);", "+\tprotected ASTNode[] buildASTs(String newContents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException {", "+\t\tMarkerInfo markerInfo;", "+\t\tif (newContents == null) {", "+\t\t\tmarkerInfo = new MarkerInfo(cu.getSource());", "+\t\t\tnewContents = markerInfo.source;", "+\t\t\tcu.getBuffer().setContents(newContents);", "+\t\t\tcu.makeConsistent(null);", "+\t\t} else {", "+\t\t\tmarkerInfo = new MarkerInfo(newContents);", "+\t\t\tnewContents = markerInfo.source;", "+\t\t\tcu.getBuffer().setContents(newContents);", "+\t\t}", "-\t\t\tunit = cu.reconcile(AST.JLS3, false, null, null);", "+\t\t\tunit = cu.reconcile(AST.JLS3, reportErrors, null, null);", "-\t\t\t\tUtil.appendProblem(buffer, problems[i], contents.toCharArray(), i+1);", "+\t\t\t\tUtil.appendProblem(buffer, problems[i], newContents.toCharArray(), i+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272d0e482c591638606e8b57ee1699b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "3bee3efb3c3139a52dff7aa299065deb5290ece4", "commitAfterChange": "645825dd1e7c490f7b149a754d38a08b99765996", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["-\t\t\t\tint token = readToken();", "+\t\t\t\tint token = readTokenSafely();", "-\t\t\t\t\tcase TerminalTokens.TokenNameStringLiteral : // @see \"string\"", "+\t\t\t\tcase TerminalTokens.TokenNameStringLiteral : // @see \"string\"", "+\t\t\t\t\t\tif (typeRef != null) break nextToken;", "+\t\t\t\t\t\tif (typeRef != null) break nextToken;", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tchar[] currentError = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\tif (currentError.length>0 && currentError[0] == '\"') {", "+\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidReference(this.scanner.getCurrentTokenStartPosition(), getTokenEndPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325dcfe13689cb16aabb79a388ef9e26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tvoid parseReturn()", "signatureAfterChange": " \t \tprivate void parseReturn()", "diff": ["-\tvoid parseReturn() {", "-\t\t// to be continued", "+\tprivate void parseReturn() {", "+\t\tif (this.annotation.returnStatement == null) {", "+\t\t\tthis.annotation.returnStatement =", "+\t\t\t\tnew AnnotationReturnStatement(", "+\t\t\t\t\tscanner.getCurrentTokenStartPosition(),", "+\t\t\t\t\tscanner.getCurrentTokenEndPosition(),", "+\t\t\t\t\tscanner.getRawTokenSourceEnd());", "+\t\t}", "+\t\telse {", "+\t\t\tthis.sourceParser.problemReporter().annotationInvalidReturnTag(", "+\t\t\t\tscanner.getCurrentTokenStartPosition(),", "+\t\t\t\tscanner.getCurrentTokenEndPosition(),", "+\t\t\t\tfalse);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326bd29652b60f4bc7f1a01a5314d8cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true, true);", "+\t\t\t\tRecoveryScannerData data = constructorDeclaration.compilationResult.recoveryScannerData;", "+\t\t\t\tif(data != null) {", "+\t\t\t\t\tScanner scanner = converter.scanner;", "+\t\t\t\t\tconverter.scanner = new RecoveryScanner(scanner, data.removeUnused());", "+\t\t\t\t\tconverter.docParser.scanner = converter.scanner;", "+\t\t\t\t\tconverter.scanner.setSource(scanner.source);", "+\t\t\t\t\t", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36a6ce5212a2295c1832edd29e109776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "5a12a220bc147ceb34370c89306997df47624c96", "commitAfterChange": "2a31afdf467fbea6343929950855b2cce0d4c7fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void resolve(BlockScope upperScope)", "signatureAfterChange": "\r public void resolve(BlockScope upperScope)", "diff": ["+\t\tMethodScope methodScope = scope.methodScope();\r", "+\t\t\r", "-\t\tscope.methodScope().addLocalVariable(returnAddressVariable);\r", "+\t\tmethodScope.addLocalVariable(returnAddressVariable);\r", "-\t\tanyExceptionVariable = new LocalVariableBinding(SecretAnyHandlerName, scope.getJavaLangThrowable(), 0);\r", "-\t\tfinallyScope.addLocalVariable(anyExceptionVariable);\r", "-\t\tanyExceptionVariable.constant = NotAConstant; // not inlinable\r", "+\t\tthis.anyExceptionVariable = new LocalVariableBinding(SecretAnyHandlerName, scope.getJavaLangThrowable(), 0);\r", "+\t\tfinallyScope.addLocalVariable(this.anyExceptionVariable);\r", "+\t\tthis.anyExceptionVariable.constant = NotAConstant; // not inlinable\r", "+\r", "+\t\tthis.secretReturnValue = new LocalVariableBinding(\r", "+\t\t\tSecretLocalDeclarationName, \r", "+\t\t\t((AbstractMethodDeclaration)methodScope.referenceContext).binding.returnType, \r", "+\t\t\tAccDefault);\r", "+\t\tfinallyScope.addLocalVariable(this.secretReturnValue);\r", "+\t\tthis.secretReturnValue.constant = NotAConstant; // not inlinable\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4174a7f65a1dbd6c164bd9c7bfd68101", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "0f82c3c2351d2b4aa115f915a692d896ffbf12db", "commitAfterChange": "42ba068696287a55bc72837ef925c3e42a2ffc11", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tprivate void parseRawType()", "signatureAfterChange": " \t \tprivate void parseRawType()", "diff": ["+\t\tthis.scanner.skipTypeEnd();", "+\t\tparseFlags();", "+\t \tif (this.scanner.isAtMemberTypeStart() && this.scanner.nextToken() == Scanner.TYPE) {", "+\t \t\tchar[] typeName = this.scanner.getTokenSource();", "+\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\tthis.scanner.skipParametersStart();", "+\t\t \t\tparseParameterizedType(typeName, this.scanner.isAtRawTypeEnd());", "+\t\t\t} else", "+\t\t\t\tconsumeParameterizedType(typeName, true/*raw*/);", "+\t \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "452127b00a3f75184eeddb1986b0b954", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "fb2096a8900d812472337f28518928b970bad197", "commitAfterChange": "cb9297d0b2c1bdcf8963e89b9c822b2bdceb54dc", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 74, "signatureBeforeChange": " public boolean compile(String[] argv)", "signatureAfterChange": " public boolean compile(String[] argv)", "diff": ["+\t\tif (this.progress != null)", "+\t\t\tthis.progress.begin(this.filenames == null ? 0 : this.filenames.length * this.maxRepetition);", "-\t\t\t\tperformCompilation();", "+\t\t\t\tperformCompilation(this.maxRepetition-this.currentRepetition/*remaining iterations including this one*/);", "+\t\tif (this.progress != null)", "+\t\t\tthis.progress.done();", "-\tif (this.globalErrorsCount == 0)", "+\tif (this.globalErrorsCount == 0 && (this.progress == null || !this.progress.isCanceled()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4533161dd82127bfc4f6ee37e5058d0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9792a4df6af0c7beb5b7f51e048b602e56e8a1a1", "commitAfterChange": "465963e0b95d12cdaff2c89f01036d599c3d258a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void printComment()", "signatureAfterChange": " \tpublic void printComment()", "diff": ["+\t\t\t\t\t\t} else if (hasLineComment) {", "+\t\t\t\t\t\t\tthis.preserveEmptyLines(2, this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tpreserveEmptyLines(count - 1, this.scanner.getCurrentTokenEndPosition() + 1);", "+\t\t\t\t\t\t} else if (count != 0 && this.formatter.preferences.number_of_empty_lines_to_preserve != 0) {", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\tpreserveEmptyLines(count - 1, this.scanner.getCurrentTokenEndPosition() + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5657d44871805139408a0e73cab53eaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tTypeDeclaration(AST ast)", "signatureAfterChange": " \tTypeDeclaration(AST ast)", "diff": ["+\t\tif (ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tthis.superInterfaceNames = new ASTNode.NodeList(false, Name.class);", "+\t\t}", "+\t\tif (ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\t\tthis.typeParameters = new ASTNode.NodeList(false, TypeParameter.class);", "+\t\t\tthis.superInterfaceTypes = new ASTNode.NodeList(false, Type.class);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5afdd3cfe354b0d4e038579899ba39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d7e050c27656f3c655cbceb92a53dfdd3a265d24", "commitAfterChange": "36dbe4a61ccd2e283322ec353cff1f83cf809e44", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public boolean checkAndReportBracketAnomalies(ProblemReporter problemReporter)", "signatureAfterChange": " public boolean checkAndReportBracketAnomalies(ProblemReporter problemReporter)", "diff": ["+\t\t\t\t\t\t\t\t\t\tif (this.scanner.taskTags != null) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.scanner.checkTaskTag(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.scanner.taskTags != null) {", "+\t\t\t\t\t\t\t\t\tthis.scanner.checkTaskTag(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86df87be95d3395a532daca053b72cd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "signatureAfterChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "diff": ["-\t", "+\tif (this.typeExpected != null && this.binding != null) {", "+\t\tMethodBinding cached = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(this.typeExpected) : null;", "+\t\tif (cached != null)", "+\t\t\treturn cached;", "+\t}", "-\t\t\t// force an inference context to be established, but avoid tunneling through overload resolution. We know this is the MSMB.", "-\t\t\treturn ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\t\t// force an inference context to be established for nested poly allocations (to be able to transfer b2), but avoid tunneling through overload resolution. We know this is the MSMB.", "+\t\t\tif (this.expressionContext == INVOCATION_CONTEXT && this.typeExpected == null)", "+\t\t\t\tconstructor = ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\tif (this.typeExpected != null)", "+\t\t\tregisterResult(this.typeExpected, constructor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8944aeac74e0729eb4049d75cf7704ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["+\t\tif(unit.compilationResult.recoveryScannerData != null) {", "+\t\t\tthis.scanner = new RecoveryScanner(this.scanner, unit.compilationResult.recoveryScannerData.removeUnused());", "+\t\t\tthis.docParser.scanner = this.scanner;", "+\t\t}", "+\t\t\tASTRecoveryPropagator recoveryPropagator = new ASTRecoveryPropagator(resizedProblems);", "+\t\t\tcompilationUnit.accept(recoveryPropagator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e88ccbbdb02cc55cde1a2fa8153c39e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8cdf54f95656ee372ecbeae181ede3d9dd6c34a8", "commitAfterChange": "ef10fc23511bb08998ebf4a7dfdc62536faa0a9b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void deleting(IProject project)", "signatureAfterChange": " \tpublic void deleting(IProject project)", "diff": ["+\t\t\t", "+\t\t\t// remember roots of this project", "+\t\t\tif (this.removedRoots == null) {", "+\t\t\t\tthis.removedRoots = new HashMap();", "+\t\t\t}", "+\t\t\tif (javaProject.isOpen()) {", "+\t\t\t\tthis.removedRoots.put(javaProject, javaProject.getPackageFragmentRoots());", "+\t\t\t} else {", "+\t\t\t\t// compute roots without opening project", "+\t\t\t\tthis.removedRoots.put(", "+\t\t\t\t\tjavaProject, ", "+\t\t\t\t\tjavaProject.computePackageFragmentRoots(", "+\t\t\t\t\t\tjavaProject.getResolvedClasspath(true), ", "+\t\t\t\t\t\tfalse));", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18bf88094c160ddb540a2c8070f7526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f73fdb0a354f2f38e3faeb7d9eceabb3d85530d5", "commitAfterChange": "5c2dc76a8d3cf16dded8b483e956ad365692fb92", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tif (isMethodReference() && this.haveReceiver) {", "+\t\t\t\tthis.receiverVariable = new LocalVariableBinding(", "+\t\t\t\t\t\t(SecretReceiverVariableName + this.nameSourceStart).toCharArray(), this.lhs.resolvedType,", "+\t\t\t\t\t\tClassFileConstants.AccDefault, false);", "+\t\t\t\tscope.addLocalVariable(this.receiverVariable);", "+\t\t\t\tthis.receiverVariable.setConstant(Constant.NotAConstant); // not inlinable", "+\t\t\t\tthis.receiverVariable.useFlag = LocalVariableBinding.USED;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1fb2d5891e3930b23f0388f176d2ee7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "b19786bd30a71d1dc58c189f93871794d62e10e4", "commitAfterChange": "f74920f9558494dedd70cfde05417633be38db79", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void printTrailingComment()", "signatureAfterChange": "  \tpublic void printTrailingComment()", "diff": ["+\t\t\tboolean hasLineComment = false;", "-\t\t\t\t\t\tif (count >= 1) {", "+\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\tif (count >= 1) {", "+\t\t\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\tthis.preserveEmptyLines(count, currentTokenStartPosition);", "+\t\t\t\t\t\t\t\taddDeleteEdit(currentTokenStartPosition, this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.currentPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (count >= 1) {", "-\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\thasLineComment = true;", "+\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d7cfb75f39b9b5916c12e84f53078d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f0d98c4f580c534cd9bb9d201adb77ab90eafc65", "commitAfterChange": "44beb229da7acf29f8209404ea1120f9422c2f4a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);", "-\t\t\tif (this.isConstructorReference() && this.receiverType.isNestedType()) {", "-\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "-\t\t\t\tReferenceBinding[] syntheticArgumentTypes;", "-\t\t\t\tif ((syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "-\t\t\t\t\tint length = syntheticArgumentTypes.length;", "-\t\t\t\t\targumentsSize = length;", "-\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "-\t\t\t\t\t\tReferenceBinding syntheticArgumentType = syntheticArgumentTypes[i];", "-\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "-\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "-\t\t\t\t\t\t\t\tsyntheticArgumentType,", "-\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "-\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\tif (this.isConstructorReference()) {", "+\t\t\t\tReferenceBinding[] enclosingInstances = Binding.UNINITIALIZED_REFERENCE_TYPES;", "+\t\t\t\tif (this.receiverType.isNestedType()) {", "+\t\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "+\t\t\t\t\tif ((enclosingInstances = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "+\t\t\t\t\t\tint length = enclosingInstances.length;", "+\t\t\t\t\t\targumentsSize = length;", "+\t\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "+\t\t\t\t\t\t\tReferenceBinding syntheticArgumentType = enclosingInstances[i];", "+\t\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "+\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "+\t\t\t\t\t\t\t\t\tsyntheticArgumentType,", "+\t\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "+\t\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t// Reject types that capture outer local arguments, these cannot be manufactured by the metafactory.", "+\t\t\t\t\tif (nestedType.syntheticOuterLocalVariables() != null) {", "+\t\t\t\t\t\tcurrentScope.problemReporter().noSuchEnclosingInstance(nestedType.enclosingType, this, false);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.syntheticAccessor != null) {", "+\t\t\t\t\tthis.binding = sourceType.addSyntheticFactoryMethod(this.binding, this.syntheticAccessor, enclosingInstances);", "+\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56f3c2f7fb0d1496458a0f4dd15f74d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 284, "methodNumberAfterChange": 284, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-\t\t\tStringLiteral stringLiteral = new StringLiteral(", "+\t\t\tStringLiteral stringLiteral;", "+\t\t\tif (this.recordStringLiterals && this.checkExternalizeStrings) {", "+\t\t\t\tstringLiteral = new StringLiteral(", "-\t\t\t\t\tthis.scanner.currentPosition - 1); ", "+\t\t\t\t\tthis.scanner.currentPosition - 1,", "+\t\t\t\t\tthis.scanner.getLineNumber(this.scanner.startPosition));", "+\t\t\t\tthis.compilationUnit.recordStringLiteral(stringLiteral);", "+\t\t\t} else {", "+\t\t\t\tstringLiteral = new StringLiteral(", "+\t\t\t\t\tthis.scanner.getCurrentTokenSourceString(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1,", "+\t\t\t\t\t0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc377e76d10dd40cd80e3f9e2b739cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "7915a529d4dab8b70a0cdb9189fc342b9112ed8e", "commitAfterChange": "f28c28de6ed3d2e9e475bca36caf25c219a92533", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-    \tif (lhsType == null || !lhsType.isValidBinding()) ", "-\t\t\treturn this.resolvedType = null;", "+    \tif (lhsType == null) ", "+\t\t\treturn this.resolvedType = null; \t// no hope", "+\t\tif (lhsType.problemId() == ProblemReasons.AttemptToBypassDirectSuper)", "+\t\t\tlhsType = lhsType.closestMatch();\t// improve resolving experience", "+    \tif (!lhsType.isValidBinding()) ", "+\t\t\treturn this.resolvedType = null;\t// nope, no useful type found", "-        ", "+    \tif (this.lhs.isSuper() && this.lhs.resolvedType.isInterface()) {", "+    \t\tscope.checkAppropriateMethodAgainstSupers(this.selector, someMethod, this.descriptor.parameters, this);", "+    \t}", "+"]}], "num": 62454}
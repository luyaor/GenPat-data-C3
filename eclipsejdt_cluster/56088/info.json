{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7f57be7a990f6cef58badc44223eafb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b7e2cc83c1d6d30c9abd06f2cc578a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeResolveTests.java", "commitBeforeChange": "ce0f19288bc3747a9c0cb27b6996f5589afb99d1", "commitAfterChange": "8aae944f1fec216ec7aa5c56aa9511065ae60c18", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test405026b() throws CoreException, IOException", "signatureAfterChange": " public void test405026b() throws CoreException, IOException", "diff": ["-\t\titype = nameLookup.findType(\"test1\", packageFragments[0], true, NameLookup.ACCEPT_ALL, false, false);", "-\t\tassertEquals(\"test13\", itype.getElementName());", "-", "-\t\titype = nameLookup.findType(\"test1\", packageFragments[0], true, NameLookup.ACCEPT_ALL, false, true);", "-\t\tassertEquals(\"test13\", itype.getElementName());", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91bd8d07a7bda059148d32f4bf993c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "54c5b1474818cda0f867a0315ddd797ab8dee3b6", "commitAfterChange": "b34ccb2dc96540b2cffbd4b546572f89b3d40916", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant constant = assertExpression.constant;", "-\t\tif (constant != NotAConstant && constant.booleanValue() == true) {", "-\t\t\treturn flowInfo;", "-\t\t}", "-", "-\t\tFlowInfo assertInfo = flowInfo.copy();", "+\t\tFlowInfo assertInfo = assertExpression.analyseCode(currentScope, flowContext, flowInfo.copy()).unconditionalInits();", "-\t\t\tassertInfo = exceptionArgument.analyseCode(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tflowContext,", "-\t\t\t\t\t\tassertExpression.analyseCode(currentScope, flowContext, assertInfo).unconditionalInits())", "-\t\t\t\t\t.unconditionalInits();", "-\t\t} else {", "-\t\t\tassertInfo = assertExpression.analyseCode(currentScope, flowContext, assertInfo).unconditionalInits();", "+\t\t\tassertInfo = exceptionArgument.analyseCode(currentScope, flowContext, assertInfo);", "-\t\t// assertion might throw AssertionError (unchecked), which can have consequences in term of", "-\t\t// definitely assigned variables (depending on caught exception in the context)", "-\t\t// DISABLED - AssertionError is unchecked, try statements are already protected against these.", "-\t\t//flowContext.checkExceptionHandlers(currentScope.getJavaLangAssertionError(), this, assertInfo, currentScope);", "-", "-\t\t// only retain potential initializations", "-\t\tflowInfo.addPotentialInitializationsFrom(assertInfo.unconditionalInits());", "-", "-\t\t\t\t\t", "-\t\treturn flowInfo;", "+", "+\t\tFlowInfo mergedInfo = flowInfo.mergedWith(assertInfo.unconditionalInits());", "+\t\treturn mergedInfo;"]}], "num": 56088}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c216927ecffc079d1f2589f8abd458b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d0070ccacc416701f80451a6e97fc3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e2648f8b5ccbba51146261db3c629f21ae240071", "commitAfterChange": "080819febe201917c6d39d485bf6b0507c29f0c4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\t\ttoken = type.token;", "+\t\t\tcompletionToken = type.token;", "-\t\t\tfindTypesAndPackages(token, scope);", "-\t\t\tfindKeywordsForMember(token, field.modifiers);", "+\t\t\tfindTypesAndPackages(completionToken, scope);", "+\t\t\tfindKeywordsForMember(completionToken, field.modifiers);", "-\t\t\t\tfindMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);", "+\t\t\t\tfindMethods(completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);", "-\t\t\t\ttoken = type.token;", "+\t\t\t\tcompletionToken = type.token;", "-\t\t\t\tfindTypesAndPackages(token, scope);", "-\t\t\t\tfindKeywordsForMember(token, method.modifiers);", "+\t\t\t\tfindTypesAndPackages(completionToken, scope);", "+\t\t\t\tfindKeywordsForMember(completionToken, method.modifiers);", "-\t\t\t\t\tfindMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);", "+\t\t\t\t\tfindMethods(completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);", "-\t\t\t\t\ttoken = singleNameReference.token;", "+\t\t\t\t\tcompletionToken = singleNameReference.token;", "-\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\tcompletionToken,", "-\t\t\t\t\tfindTypesAndPackages(token, scope);", "-\t\t\t\t\tfindKeywords(token, singleNameReference.possibleKeywords);", "+\t\t\t\t\tfindTypesAndPackages(completionToken, scope);", "+\t\t\t\t\tfindKeywords(completionToken, singleNameReference.possibleKeywords);", "-\t\t\t\t\t\tif(CharOperation.prefixEquals(token, Keywords.THIS, false)) {", "+\t\t\t\t\t\tif(CharOperation.prefixEquals(completionToken, Keywords.THIS, false)) {", "-\t\t\t\t\t\t} else if(CharOperation.prefixEquals(token, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t} else if(CharOperation.prefixEquals(completionToken, Keywords.SUPER, false)) {", "-\t\t\t\t\t\ttoken = ((CompletionOnSingleTypeReference) astNode).token;", "+\t\t\t\t\t\tcompletionToken = ((CompletionOnSingleTypeReference) astNode).token;", "-\t\t\t\t\t\t\tfindTypesAndPackages(token, scope);", "+\t\t\t\t\t\t\tfindTypesAndPackages(completionToken, scope);", "-\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\tcompletionToken,", "-\t\t\t\t\t\t\ttoken = ref.completionIdentifier;", "+\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(token, receiverType, scope, ref, scope,false);", "+\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(completionToken, receiverType, scope, ref, scope,false);", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(token, receiverType, scope, scope.enclosingSourceType());", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(completionToken, receiverType, scope, scope.enclosingSourceType());", "-\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\tfindClassField(completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t\tfindKeywords(token, new char[][]{Keywords.THIS});", "+\t\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.THIS});", "-\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\tcompletionToken,", "-\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\tcompletionToken,", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\ttoken = ref.completionIdentifier;", "+\t\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\tcompletionToken,", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\t\ttoken = access.token;", "+\t\t\t\t\t\t\t\t\tcompletionToken = access.token;", "-\t\t\t\t\t\t\t\t\tfindKeywords(token, new char[][]{Keywords.NEW});", "+\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.NEW});", "-\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\tcompletionToken,", "-\t\t\t\t\t\t\t\t\t\ttoken = messageSend.selector;", "+\t\t\t\t\t\t\t\t\t\tcompletionToken = messageSend.selector;", "-\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(token, argTypes, scope, messageSend, scope);", "+\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(completionToken, argTypes, scope, messageSend, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = access.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = access.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = method.selector;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = method.selector;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, method.returnType, excludeNames, FIELD, method.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = field.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = field.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, variable.type, excludeNames, LOCAL, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = arg.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = arg.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff5faff8cc18a31932d968339e14226", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\t\tcompletionToken = type.token;", "+\t\t\tthis.completionToken = type.token;", "-\t\t\tfindTypesAndPackages(completionToken, scope);", "-\t\t\tfindKeywordsForMember(completionToken, field.modifiers);", "+\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\tfindKeywordsForMember(this.completionToken, field.modifiers);", "-\t\t\t\tfindMethods(completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false, false);", "-\t\t\t\tproposeNewMethod(completionToken, scope.enclosingSourceType());", "+\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false, false);", "+\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "-\t\t\t\tcompletionToken = type.token;", "+\t\t\t\tthis.completionToken = type.token;", "-\t\t\t\tfindTypesAndPackages(completionToken, scope.parent);", "-\t\t\t\tfindKeywordsForMember(completionToken, method.modifiers);", "+\t\t\t\tfindTypesAndPackages(this.completionToken, scope.parent);", "+\t\t\t\tfindKeywordsForMember(this.completionToken, method.modifiers);", "-\t\t\t\t\tfindMethods(completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false);", "-\t\t\t\t\tproposeNewMethod(completionToken, scope.enclosingSourceType());", "+\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false);", "+\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "-\t\t\t\t\tcompletionToken = singleNameReference.token;", "+\t\t\t\t\tthis.completionToken = singleNameReference.token;", "-\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\tfindTypesAndPackages(completionToken, scope);", "-\t\t\t\t\tfindKeywords(completionToken, singleNameReference.possibleKeywords);", "+\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "-\t\t\t\t\t\tif(CharOperation.prefixEquals(completionToken, Keywords.THIS, false)) {", "+\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "-\t\t\t\t\t\t} else if(CharOperation.prefixEquals(completionToken, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "-\t\t\t\t\t\tcompletionToken = ((CompletionOnSingleTypeReference) astNode).token;", "+\t\t\t\t\t\tthis.completionToken = ((CompletionOnSingleTypeReference) astNode).token;", "-\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnClassReference;", "-\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnExceptionReference;", "-\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;", "+\t\t\t\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnClassReference;", "+\t\t\t\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnExceptionReference;", "+\t\t\t\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;", "-\t\t\t\t\t\t\tfindTypesAndPackages(completionToken, scope);", "+\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "+\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(completionToken, receiverType, scope, ref, scope,false,false);", "+\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType, scope, ref, scope,false,false);", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(completionToken, receiverType, scope, scope.enclosingSourceType());", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(this.completionToken, receiverType, scope, scope.enclosingSourceType());", "-\t\t\t\t\t\t\t\t\tfindClassField(completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t\tif(completionToken.length > 0) {", "-\t\t\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.THIS});", "+\t\t\t\t\t\t\t\t\t\tif(this.completionToken.length > 0) {", "+\t\t\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.THIS});", "-\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(completionToken, Keywords.THIS);", "-\t\t\t\t\t\t\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\t\t\t\t\t\t\trequestor.acceptKeyword(Keywords.THIS, startPosition - offset, endPosition - offset,relevance);", "+\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, Keywords.THIS);", "+\t\t\t\t\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\t\t\t\t\tthis.requestor.acceptKeyword(Keywords.THIS, this.startPosition - this.offset, this.endPosition - this.offset,relevance);", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;", "-\t\t\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;", "-\t\t\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;", "+\t\t\t\t\t\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;", "+\t\t\t\t\t\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;", "+\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;", "-\t\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "+\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t\tcompletionToken = access.token;", "+\t\t\t\t\t\t\t\t\tthis.completionToken = access.token;", "-\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.NEW});", "+\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW});", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tcompletionToken = messageSend.selector;", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken = messageSend.selector;", "-\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(completionToken, argTypes, scope, messageSend, scope);", "+\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(this.completionToken, argTypes, scope, messageSend, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = access.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = access.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = method.selector;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = method.selector;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = field.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = field.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = arg.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = arg.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tassistNodeIsClass = ref.isClass();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tassistNodeIsException = ref.isException();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tassistNodeIsInterface = ref.isInterface();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsClass = ref.isClass();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsException = ref.isException();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = ref.isInterface();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,"]}], "num": 35848}
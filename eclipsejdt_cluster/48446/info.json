{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "accc37b31a368b5986a642eab8f20fc2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba46075593f3d62492a0d4c30a604cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "73100562c653e9756405c4478f78d4c46826e31a", "commitAfterChange": "b17c7970aa52528427b488a1895b516cefe9f2a2", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "signatureAfterChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "diff": ["-\t// -- the following are used for early termination.", "-\tMethodBinding aContract = null;", "-\tint contractParameterLength = 0;", "-\tchar [] contractSelector = null;", "-\t// ---", "-\t", "-\t\t", "-\t\tif (aContract == null) {", "-\t\t\taContract = superInterfaceContracts[0];", "-\t\t\tcontractParameterLength = aContract.parameters.length;", "-\t\t\tcontractSelector = aContract.selector;", "-\t\t\tcontracts = superInterfaceContracts;", "-\t\t\tcontractsCount = contractsLength = superInterfaceContractsLength;", "-\t\t} else {", "-\t\t\tif (superInterfaceContracts[0].parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, superInterfaceContracts[0].selector)) {", "-\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tif (contractsLength < contractsCount + superInterfaceContractsLength) {", "-\t\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength = contractsCount + superInterfaceContractsLength], 0, contractsCount);", "-\t\t\t}", "-\t\t\tSystem.arraycopy(superInterfaceContracts, 0, contracts, contractsCount,\tsuperInterfaceContractsLength);", "-\t\t\tcontractsCount += superInterfaceContractsLength;", "+\t\tif (contractsLength < contractsCount + superInterfaceContractsLength) {", "+\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength = contractsCount + superInterfaceContractsLength], 0, contractsCount);", "+\t\tSystem.arraycopy(superInterfaceContracts, 0, contracts, contractsCount,\tsuperInterfaceContractsLength);", "+\t\tcontractsCount += superInterfaceContractsLength;", "+", "-\t\tif (method.isStatic() || method.redeclaresPublicObjectMethod(scope)) continue;", "+\t\tif (method == null || method.isStatic() || method.redeclaresPublicObjectMethod(scope)) ", "+\t\t\tcontinue;", "+\t\tif (!method.isValidBinding()) ", "+\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t\t\tif (aContract == contracts[j]) {", "-\t\t\t\t\t\taContract = null;", "-\t\t\t\t\t\tcontractParameterLength = 0;", "-\t\t\t\t\t\tcontractSelector = null;", "-\t\t\t\t\t}", "-\t\t}", "-\t\tfinal boolean validBinding = method.isValidBinding();", "-\t\tif (aContract == null && validBinding) {", "-\t\t\taContract = method;", "-\t\t\tcontractParameterLength = aContract.parameters.length;", "-\t\t\tcontractSelector = aContract.selector;", "-\t\t} else {", "-\t\t\tif (!validBinding || method.parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, method.selector)) {", "-\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7195b07e9ba75f19cfba4407ab24f357", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "309a387f480d97625be10c0bbfacfac3334e06f2", "commitAfterChange": "22307f44ec4cf0d4e9030797416029df1244cdb0", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "signatureAfterChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "diff": ["-\t\tanchor = Util.toAnchor(genericSignature, methodName, Flags.isVarargs(getFlags()));", "+\t\tanchor = Util.toAnchor(0, genericSignature, methodName, Flags.isVarargs(getFlags()));", "-\tif (declaringTypeIsMember) {", "-\t\tint depth = 0;", "-\t\tfinal String packageFragmentName = declaringType.getPackageFragment().getElementName();", "-\t\t// might need to remove a part of the signature corresponding to the synthetic argument", "-\t\tfinal IJavaProject javaProject = declaringType.getJavaProject();", "-\t\tchar[][] typeNames = CharOperation.splitOn('.', typeQualifiedName.toCharArray());", "-\t\tif (!Flags.isStatic(declaringType.getFlags())) depth++;", "-\t\tStringBuffer typeName = new StringBuffer();", "-\t\tfor (int i = 0, max = typeNames.length; i < max; i++) {", "-\t\t\tif (typeName.length() == 0) {", "-\t\t\t\ttypeName.append(typeNames[i]);", "-\t\t\t} else {", "-\t\t\t\ttypeName.append('.').append(typeNames[i]);", "-\t\t\t}", "-\t\t\tIType resolvedType = javaProject.findType(packageFragmentName, String.valueOf(typeName));", "-\t\t\tif (resolvedType != null && resolvedType.isMember() && !Flags.isStatic(resolvedType.getFlags())) depth++;", "+\tif (declaringTypeIsMember && !Flags.isStatic(declaringType.getFlags())) {", "+\t\tint indexOfOpeningParen = anchor.indexOf('(');", "+\t\tif (indexOfOpeningParen == -1) return null;", "+\t\tint index = indexOfOpeningParen;", "+\t\tindexOfOpeningParen++;", "+\t\tint indexOfComma = anchor.indexOf(',', index);", "+\t\tif (indexOfComma != -1) {", "+\t\t\tindex = indexOfComma + 2;", "-\t\tif (depth != 0) {", "-\t\t\tint indexOfOpeningParen = anchor.indexOf('(');", "-\t\t\tif (indexOfOpeningParen == -1) return null;", "-\t\t\tint index = indexOfOpeningParen;", "-\t\t\tindexOfOpeningParen++;", "-\t\t\tfor (int i = 0; i < depth; i++) {", "-\t\t\t\tint indexOfComma = anchor.indexOf(',', index);", "-\t\t\t\tif (indexOfComma != -1) {", "-\t\t\t\t\tindex = indexOfComma + 2;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tanchor = anchor.substring(0, indexOfOpeningParen) + anchor.substring(index);", "-\t\t}", "+\t\tanchor = anchor.substring(0, indexOfOpeningParen) + anchor.substring(index);"]}], "num": 48446}
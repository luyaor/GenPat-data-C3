{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0bb2bd27f9d5af701b0f814a466030ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39e71d31d413386b4b7e12cf6261ae4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String textComment) throws JavaModelException", "signatureAfterChange": " \tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException", "diff": ["-\tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String textComment) throws JavaModelException {", "-\t\tASTNode node = findNode(unit, textComment);", "-\t\t// TODO (frederic) verify with olivier whether we should always have a PARAMETERIZED TYPE or", "-\t\t// QUALIFIED_TYPE with PARAMETERIZED_TYPE parent are valid...", "-//\t\tassertEquals(\"Invalid node type\", ASTNode.PARAMETERIZED_TYPE, node.getNodeType());", "-//\t\tParameterizedType parameterizedType = (ParameterizedType) node;", "-\t\tIJavaElement[] selection = unit.codeSelect(node.getStartPosition(), node.getLength());", "-\t\tassertEquals(\"Invalid selection\", 1, selection.length);", "-\t\tIJavaElement element = selection[0];", "-\t\tassertTrue(\"Not a parameterized source type: \"+element.getElementName(), element instanceof SourceType);", "-\t\treturn (ParameterizedSourceType) element;", "+\t */", "+\tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {", "+\t\tSourceType sourceType = selectSourceType(unit, selection, occurences);", "+\t\tassertTrue(\"Not a parameterized source type: \"+sourceType.getElementName(), sourceType instanceof ParameterizedSourceType);", "+\t\treturn (ParameterizedSourceType) sourceType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9384eaf378b774d62d7589044758b6a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected IJavaElement selectNode(ICompilationUnit unit, String textComment, int expected, int index) throws JavaModelException", "signatureAfterChange": " \tprotected SourceType selectSourceType(ICompilationUnit unit, String selection) throws JavaModelException", "diff": ["+\t */", "+\tprotected SourceType selectSourceType(ICompilationUnit unit, String selection) throws JavaModelException {", "+\t\treturn selectSourceType(unit, selection, 1);", "-", "-\tprotected IJavaElement selectNode(ICompilationUnit unit, String textComment, int expected, int index) throws JavaModelException {", "-//\t\tASTNode node = findNode(unit, paramTypeName);", "-\t\t// TODO (frederic) verify with olivier whether we should always have a PARAMETERIZED TYPE or", "-\t\t// QUALIFIED_TYPE with PARAMETERIZED_TYPE parent are valid...", "-//\t\tassertEquals(\"Invalid node type\", ASTNode.PARAMETERIZED_TYPE, node.getNodeType());", "-//\t\tParameterizedType parameterizedType = (ParameterizedType) node;", "-//\t\tIJavaElement[] selection = unit.codeSelect(node.getStartPosition(), node.getLength());", "-\t\tint selectionPos = selectionEnd(unit, textComment);", "-\t\tIJavaElement[] selection = unit.codeSelect(selectionPos, 0);", "-\t\tassertEquals(\"Invalid selection\", expected, selection.length);", "-\t\treturn selection[index];", "-\t}"]}], "num": 2073}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40ee652a16d958a308778fcf7368be3a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7dcc89f6ff381445d5b2941a48859b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void requestIndexing()", "signatureAfterChange": " \tpublic void requestIndexing()", "diff": ["-\t\t\tif (index == -1) {", "+\t\t\tif (index == -1 || newResolvedClasspath[i].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\tURL newurl = ((ClasspathEntry)newResolvedClasspath[i]).getLibraryIndexLocation();", "-\t\t\t\t\t\t\t\tpathHasChanged = false;", "+\t\t\t\t\t\t\t\tURL oldurl = ((ClasspathEntry)oldEntry).getLibraryIndexLocation();", "+\t\t\t\t\t\t\t\tif (oldurl == null && newurl == null) {", "+\t\t\t\t\t\t\t\t\tpathHasChanged = false;", "+\t\t\t\t\t\t\t\t} else if (oldurl != null && newurl != null) {", "+\t\t\t\t\t\t\t\t\tpathHasChanged = !(newurl.equals(oldurl));", "+\t\t\t\t\t\t\t\t} else if (oldurl != null) {", "+\t\t\t\t\t\t\t\t\tindexManager.removeIndex(newPath);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, this.project.getProject());", "+\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, this.project.getProject(), newurl);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95f810c8c7ef1b1fc3783f6b5b622d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \t \tprivate void findFieldsAndMethodsFromMissingReturnType( \t\tchar[] token, \t\tTypeBinding[] arguments, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate void findFieldsAndMethodsFromMissingReturnType( \t\tchar[] token, \t\tTypeBinding[] arguments, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\t\t\tif (methodDeclaration.binding == null) {", "+\t\t\t\t\t\t\t\tMethodBinding methodBinding = method.binding;", "+\t\t\t\t\t\t\t\tif (methodBinding == null || methodBinding.returnType == null  || (methodBinding.returnType.tagBits & TagBits.HasMissingType) != 0) {", "-\t\t\t\t\t\t\t\t\t\tTypeBinding[] parametersBindings = new TypeBinding[parametersLength];", "-\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < parametersLength; j++) {", "-\t\t\t\t\t\t\t\t\t\t\tparametersBindings[j] = parameters[j].type.resolvedType;", "+\t\t\t\t\t\t\t\t\t\tTypeBinding[] parametersBindings;", "+\t\t\t\t\t\t\t\t\t\tif (methodBinding == null) { // since no binding, extra types from type references", "+\t\t\t\t\t\t\t\t\t\t\tparametersBindings = new TypeBinding[parametersLength];", "+\t\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < parametersLength; j++) {", "+\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding parameterType = parameters[j].type.resolvedType;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (!parameterType.isValidBinding() && parameterType.closestMatch() != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tparameterType = parameterType.closestMatch();", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\tparametersBindings[j] = parameterType;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tparametersBindings = methodBinding.parameters;"]}], "num": 18630}
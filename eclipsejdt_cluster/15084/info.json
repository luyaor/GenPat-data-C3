{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "256481fc884dc997b0f800257f7ee8a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e7803f9094db0bda32022d9f4ad4fde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "77ac300d6d124e9b071b4e62fab3a583e6eecdc4", "commitAfterChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\tExpression argument = this.arguments[i];", "+\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\targument.setExpectedType(this.binding.parameters[i]);", "+\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccc2d2bcd4cf10ab04b0718558c98340", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "77ac300d6d124e9b071b4e62fab3a583e6eecdc4", "commitAfterChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["+\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\t\t\t\tExpression argument = this.arguments[i];", "+\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\t\t\t\targument.setExpectedType(this.binding.parameters[i]);", "+\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 15084}
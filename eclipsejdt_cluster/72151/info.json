{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6faddc93e00ea5d88b46edf35d59b653", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "043748c9930eb07e21067880e8bc154c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1782158319ffa7e4628be4d4b028ab04f9c15514", "commitAfterChange": "753dffcd46fd249a11ed1dc0c4ed46c98f98c988", "methodNumberBeforeChange": 1127, "methodNumberAfterChange": 1127, "signatureBeforeChange": " public void _test1102()", "signatureAfterChange": " public void _test1102()", "diff": ["-\t\t\t\"C.java\",", "-\t\t\t\"class T {\\r\\n\" + ", "-\t\t\t\"}\\r\\n\" + ", "-\t\t\t\"class N<Z> {\\r\\n\" + ", "-\t\t\t\"}\\r\\n\" + ", "-\t\t\t\"public class C<X> extends N<N<? super C<C<X>>>> {\\r\\n\" + ", "-\t\t\t\"\tN<? super C<T>> cast(C<T> c) {\\r\\n\" + ", "-\t\t\t\"\t\treturn c;\\r\\n\" + ", "-\t\t\t\"\t}\\r\\n\" + ", "+\t\t\t\"X.java\",", "+\t\t\t\"class A {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class B<U> {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X<E> extends B<B<? super X<X<E>>>> {\\n\" + ", "+\t\t\t\"\tB<? super X<A>> cast(X<A> x) {\\n\" + ", "+\t\t\t\"\t\treturn x;\\n\" + ", "+\t\t\t\"\t}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "068b5056261939a6940ff01c481c9e11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic void test094()", "signatureAfterChange": " \tpublic void test094()", "diff": ["-\t\t\t\"    3  invokespecial java.lang.Enum(java.lang.String, int) [11]\\n\" + ", "+\t\t\t\"    3  invokespecial java.lang.Enum(java.lang.String, int) [10]\\n\" + ", "-\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [19]\\n\" + ", "+\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [18]\\n\" + ", "-\t\t\t\"    10  anewarray X [2]\\n\" + ", "+\t\t\t\"    10  anewarray X [1]\\n\" + ", "-\t\t\t\"    17  invokestatic java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) : void  [25]\\n\" + ", "+\t\t\t\"    17  invokestatic java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) : void [20]\\n\" + ", "-\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [19]\\n\" + ", "+\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [18]\\n\" + ", "-\t\t\t\"    16  invokevirtual X.name() : java.lang.String  [31]\\n\" + ", "-\t\t\t\"    19  invokevirtual java.lang.String.equals(java.lang.Object) : boolean  [37]\\n\" + ", "+\t\t\t\"    16  invokevirtual X.name() : java.lang.String [28]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.lang.String.equals(java.lang.Object) : boolean [32]\\n\" + ", "-\t\t\t\"    34  new java.lang.IllegalArgumentException [39]\\n\" + ", "+\t\t\t\"    34  new java.lang.IllegalArgumentException [38]\\n\" + ", "-\t\t\t\"    39  invokespecial java.lang.IllegalArgumentException(java.lang.String) [42]\\n\" + ", "+\t\t\t\"    39  invokespecial java.lang.IllegalArgumentException(java.lang.String) [40]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af04bf00cb689c53170a81f4eb8dc90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5ea8ef742a9a02e422905c93023fbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tpublic void test054() throws Exception", "signatureAfterChange": "  \tpublic void test054() throws Exception", "diff": ["-\t\t\t\"     5  if_icmpne 14\\n\" +", "+\t\t\t\"     5  if_icmpne 12\\n\" +", "-\t\t\t\"    11  ifeq 14\\n\" +", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    17  iload_0 [i]\\n\" +", "-\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    21  return\\n\" +", "+\t\t\t\"    11  pop\\n\" +", "+\t\t\t\"    12  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    15  iload_0 [i]\\n\" +", "+\t\t\t\"    16  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    19  return\\n\" +", "-\t\t\t\"        [pc: 14, line: 12]\\n\" +", "-\t\t\t\"        [pc: 21, line: 14]\\n\" +", "+\t\t\t\"        [pc: 12, line: 12]\\n\" +", "+\t\t\t\"        [pc: 19, line: 14]\\n\" +", "-\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 2, pc: 20] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa110115a5405f0d22a9effaa9db8e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "ebfabad4a1917d75b16b05ab15520fe9fae0850b", "commitAfterChange": "93d86f0655c98ed807648682de6277090af4d041", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void testBug83804()", "signatureAfterChange": " \tpublic void testBug83804()", "diff": ["-\t\t\t\t\" * @see Test\\n\" +", "+\t\t\t\t\" * @see pack.Test\\n\" +", "-\t\t\t\t\" * @see Test#foo()\\n\" +", "-\t\t\t\t\" * @see Test#unknown()\\n\" +", "-\t\t\t\t\" * @see Test#field\\n\" +", "-\t\t\t\t\" * @see Test#unknown\\n\" +", "+\t\t\t\t\" * @see pack.Test#foo()\\n\" +", "+\t\t\t\t\" * @see pack.Test#unknown()\\n\" +", "+\t\t\t\t\" * @see pack.Test#field\\n\" +", "+\t\t\t\t\" * @see pack.Test#unknown\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in pack\\\\package-info.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see Unknown\\n\" +", "-\t\t\t\"\t       ^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in pack\\\\package-info.java (at line 6)\\n\" +", "-\t\t\t\"\t* @see Test#unknown()\\n\" +", "-\t\t\t\"\t            ^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The method unknown() is undefined for the type Test\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in pack\\\\package-info.java (at line 8)\\n\" +", "-\t\t\t\"\t* @see Test#unknown\\n\" +", "-\t\t\t\"\t            ^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: unknown cannot be resolved or is not a field\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in pack\\\\package-info.java (at line 9)\\n\" +", "-\t\t\t\"\t* @param unexpected\\n\" +", "-\t\t\t\"\t   ^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unexpected tag\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in pack\\\\package-info.java (at line 10)\\n\" +", "-\t\t\t\"\t* @throws unexpected\\n\" +", "-\t\t\t\"\t   ^^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unexpected tag\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in pack\\\\package-info.java (at line 11)\\n\" +", "-\t\t\t\"\t* @return unexpected \\n\" +", "-\t\t\t\"\t   ^^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unexpected tag\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in pack\\\\package-info.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see Unknown\\n\" + ", "+\t\t\t\"\t       ^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in pack\\\\package-info.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @see pack.Test#unknown()\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The method unknown() is undefined for the type Test\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in pack\\\\package-info.java (at line 8)\\n\" + ", "+\t\t\t\"\t* @see pack.Test#unknown\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: unknown cannot be resolved or is not a field\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in pack\\\\package-info.java (at line 9)\\n\" + ", "+\t\t\t\"\t* @param unexpected\\n\" + ", "+\t\t\t\"\t   ^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected tag\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in pack\\\\package-info.java (at line 10)\\n\" + ", "+\t\t\t\"\t* @throws unexpected\\n\" + ", "+\t\t\t\"\t   ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected tag\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in pack\\\\package-info.java (at line 11)\\n\" + ", "+\t\t\t\"\t* @return unexpected \\n\" + ", "+\t\t\t\"\t   ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected tag\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e6521c988c4d3bf4b55b9a92fb65c8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30fde1399dedbc9e7b0dcf75b22c3512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test020()", "signatureAfterChange": " public void test020()", "diff": ["-\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     7  ldc <String \\\"SUC\\\"> [23]\\n\" + ", "-\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     7  ldc <String \\\"SUC\\\"> [22]\\n\" + ", "+\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    27  ldc <String \\\"1x\\\"> [31]\\n\" + ", "-\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    27  ldc <String \\\"1x\\\"> [30]\\n\" + ", "+\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    43  ldc <String \\\"CESS\\\"> [33]\\n\" + ", "-\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [36]\\n\" + ", "+\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    43  ldc <String \\\"CESS\\\"> [32]\\n\" + ", "+\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "378baca025456d40dab30ebfc9445699", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void test14() throws JavaModelException", "signatureAfterChange": "  \tpublic void test14() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a98b8c6526d622cfa2be2756ee01a1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testRegion4() throws CoreException", "signatureAfterChange": " public void testRegion4() throws CoreException", "diff": ["-\t\t\t\"  Class [in Class.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "+\t\t\t\"  Class [in Class.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"  String [in String.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"    Error [in Error.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"      CloneNotSupportedException [in CloneNotSupportedException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"        IllegalMonitorStateException [in IllegalMonitorStateException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"      InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"      RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"    Exception [in Exception.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"  Throwable [in Throwable.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "+\t\t\t\"  String [in String.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    Error [in Error.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      CloneNotSupportedException [in CloneNotSupportedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"        IllegalMonitorStateException [in IllegalMonitorStateException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    Exception [in Exception.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"  Throwable [in Throwable.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b04a4cb7d44beb2bb1ea1341e2add1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  \tpublic void test106()", "signatureAfterChange": "  \tpublic void test106()", "diff": ["-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ee1aeb5a1fceb88a47b643447b9db7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic void test103()", "signatureAfterChange": " \tpublic void test103()", "diff": ["-\t\t\t\"     8  invokespecial BX.<init>()V [28]\\n\" + ", "-\t\t\t\"    11  invokespecial X.<init>(LAX;)V [30]\\n\" + ", "+\t\t\t\"     8  invokespecial BX() [28]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "-\t\t\t\"    16  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    16  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    24  invokevirtual BX.foo(Ljava/lang/Object;)V [36]\\n\" + ", "+\t\t\t\"    24  invokevirtual BX.foo(java.lang.Object) : void  [36]\\n\" + ", "-\t\t\t\"    28  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    28  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    36  invokevirtual BX.bar(Ljava/lang/Object;)V [41]\\n\" + ", "+\t\t\t\"    36  invokevirtual BX.bar(java.lang.Object) : void  [41]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 40] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 40] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: X\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: LX<+LBX;>;\\n\";", "+\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: X<? extends BX>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f55ad2b84644fe215ba23ce5b37d519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 370, "signatureBeforeChange": " \tpublic void test366()", "signatureAfterChange": " \tpublic void test366()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4013aa9939dd2c3859cbd6b4b66d55f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410438d5d91037d7689b3a1e74c27281", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     7  ldc <String \\\"SUC\\\"> [23]\\n\" + ", "-\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     7  ldc <String \\\"SUC\\\"> [22]\\n\" + ", "+\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    27  ldc <String \\\"1x\\\"> [31]\\n\" + ", "-\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    27  ldc <String \\\"1x\\\"> [30]\\n\" + ", "+\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    43  ldc <String \\\"CESS\\\"> [33]\\n\" + ", "-\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [36]\\n\" + ", "+\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    43  ldc <String \\\"CESS\\\"> [32]\\n\" + ", "+\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45fe77ebbb045df9293caa2bcf498769", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5947bdd449eb3ff1b8c6e5f1528ea75f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void testTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671f0456acace8ed01d8f6debed9e03b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["-\t\t\"     1  anewarray java.lang.String [17]\\n\" + ", "+\t\t\"     1  anewarray java.lang.String [16]\\n\" + ", "-\t\t\"     6  ldc <String \\\"SUCCESS\\\"> [19]\\n\" + ", "+\t\t\"     6  ldc <String \\\"SUCCESS\\\"> [18]\\n\" + ", "-\t\t\"    10  new java.util.ArrayList [21]\\n\" + ", "+\t\t\"    10  new java.util.ArrayList [20]\\n\" + ", "-\t\t\"    40  invokeinterface java.util.List.add(java.lang.Object) : boolean  [28] [nargs: 2]\\n\" + ", "+\t\t\"    40  invokeinterface java.util.List.add(java.lang.Object) : boolean [23] [nargs: 2]\\n\" + ", "-\t\t\"    57  invokeinterface java.util.List.iterator() : java.util.Iterator  [32] [nargs: 1]\\n\" + ", "+\t\t\"    57  invokeinterface java.util.List.iterator() : java.util.Iterator [29] [nargs: 1]\\n\" + ", "-\t\t\"    69  invokeinterface java.util.Iterator.next() : java.lang.Object  [38] [nargs: 1]\\n\" + ", "+\t\t\"    69  invokeinterface java.util.Iterator.next() : java.lang.Object [33] [nargs: 1]\\n\" + ", "-\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [44]\\n\" + ", "+\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [39]\\n\" + ", "-\t\t\"    79  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [50]\\n\" + ", "+\t\t\"    79  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [45]\\n\" + ", "-\t\t\"    84  invokeinterface java.util.Iterator.hasNext() : boolean  [54] [nargs: 1]\\n\" + ", "+\t\t\"    84  invokeinterface java.util.Iterator.hasNext() : boolean [51] [nargs: 1]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2b99106fcb2b37c8f63f928de3cb01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic void test032()", "signatureAfterChange": " \t \tpublic void test032()", "diff": ["-\t\t\t\"     0  new java.lang.Integer [17]\\n\" + ", "+\t\t\t\"     0  new java.lang.Integer [16]\\n\" + ", "-\t\t\t\"     5  invokespecial java.lang.Integer(int) [20]\\n\" + ", "-\t\t\t\"     8  new java.lang.Integer [17]\\n\" + ", "+\t\t\t\"     5  invokespecial java.lang.Integer(int) [18]\\n\" + ", "+\t\t\t\"     8  new java.lang.Integer [16]\\n\" + ", "-\t\t\t\"    13  invokespecial java.lang.Integer(int) [20]\\n\" + ", "+\t\t\t\"    13  invokespecial java.lang.Integer(int) [18]\\n\" + ", "-\t\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"    22  invokevirtual java.io.PrintStream.println() : void  [31]\\n\" + ", "-\t\t\t\"    25  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"    28  ldc <String \\\"SUCCESS\\\"> [33]\\n\" + ", "-\t\t\t\"    30  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [37]\\n\" + ", "+\t\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.println() : void [27]\\n\" + ", "+\t\t\t\"    25  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    28  ldc <String \\\"SUCCESS\\\"> [32]\\n\" + ", "+\t\t\t\"    30  invokevirtual java.io.PrintStream.print(java.lang.String) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad4ac3457d146caa6b0c6d9dfb3465b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "97e6eff65e04dce7acb3a4b10558d6e9ea7e0a37", "commitAfterChange": "c14519ea32a4ea1ee3309a157338e6ed1eb4f28f", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic void test087()", "signatureAfterChange": "  \tpublic void test087()", "diff": ["-\t\t\t\t\t+ \"\t/**\\n\"", "-\t\t\t\t\t+ \"\t * Invalid URL references \\n\"", "-\t\t\t\t\t+ \"\t *\\n\"", "-\t\t\t\t\t+ \"\t * @see <a xref=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t\t+ \"\t * @see <b href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t\t+ \"\t * @see <a href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\"", "-\t\t\t\t\t+ \"\t */\\n\"", "-\t\t\t\t\t+ \"\tpublic void s_foo() {\\n\"", "-\t\t\t\t\t+ \"\t}\\n\"", "-\t\t\t\t\t+ \"}\\n\" },", "-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. ERROR in X.java (at line 5)\\n\"", "-\t\t\t\t+ \"\t* @see <a xref=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in X.java (at line 6)\\n\"", "-\t\t\t\t+ \"\t* @see <b href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in X.java (at line 7)\\n\"", "-\t\t\t\t+ \"\t* @see <a href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\"", "-\t\t\t\t+ \"\t                                                                                                             ^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"----------\\n\",", "+\t\t\t\t+ \"\t/**\\n\"", "+\t\t\t\t+ \"\t * Invalid URL references \\n\"", "+\t\t\t\t+ \"\t *\\n\"", "+\t\t\t\t+ \"\t * @see <a xref=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "+\t\t\t\t+ \"\t * @see <b href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "+\t\t\t\t+ \"\t * @see <a href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\"", "+\t\t\t\t+ \"\t */\\n\"", "+\t\t\t\t+ \"\tpublic void s_foo() {\\n\"", "+\t\t\t\t+ \"\t}\\n\"", "+\t\t\t\t+ \"}\\n\" },", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t* @see <a xref=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t* @see <b href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t* @see <a href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\" + ", "+\t\t\t\t\"\t                                                                                                                         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "+\t\t\t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c6850b9b70c52854a015d3ff424ba8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test443932() throws JavaModelException", "signatureAfterChange": " public void test443932() throws JavaModelException", "diff": ["-\tassertResults(\"toBinaryString[METHOD_IMPORT]{toBinaryString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toBinaryString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toHexString[METHOD_IMPORT]{toHexString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toHexString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toOctalString[METHOD_IMPORT]{toOctalString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toOctalString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toString[METHOD_IMPORT]{toString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toString[METHOD_IMPORT]{toString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toUnsignedLong[METHOD_IMPORT]{toUnsignedLong, Ljava.lang.Integer;, (I)J, null, null, toUnsignedLong, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toUnsignedString[METHOD_IMPORT]{toUnsignedString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toUnsignedString[METHOD_IMPORT]{toUnsignedString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toString[METHOD_IMPORT]{toString, Ljava.lang.Integer;, ()Ljava.lang.String;, null, null, toString, null, [90, 98], 35}\", requestor.getResults());", "+\tassertResults(\"toBinaryString[METHOD_NAME_REFERENCE]{toBinaryString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toBinaryString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toHexString[METHOD_NAME_REFERENCE]{toHexString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toHexString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toOctalString[METHOD_NAME_REFERENCE]{toOctalString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toOctalString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toString[METHOD_NAME_REFERENCE]{toString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toString[METHOD_NAME_REFERENCE]{toString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toUnsignedLong[METHOD_NAME_REFERENCE]{toUnsignedLong, Ljava.lang.Integer;, (I)J, null, null, toUnsignedLong, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toUnsignedString[METHOD_NAME_REFERENCE]{toUnsignedString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toUnsignedString[METHOD_NAME_REFERENCE]{toUnsignedString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toString[METHOD_NAME_REFERENCE]{toString, Ljava.lang.Integer;, ()Ljava.lang.String;, null, null, toString, null, [90, 98], 35}\", requestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f9b3026eb66b589fa48b0c2106e1d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " \tpublic void test247()", "signatureAfterChange": " \tpublic void test247()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a55105a2f250d940295fe16f53f4285e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testStringAnyStrings06() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings06() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7349956a9c22acec0b6e558da8b5642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "\r public void test0074() throws IOException", "signatureAfterChange": "\r public void test0074() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@J\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@A\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0,0,1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0}\", locations.get(\"@D\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1}\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@J\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@A\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), ARRAY]\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]\", locations.get(\"@B\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afd85da04ca08a6772597ef8946842db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void testBug286668b_40w() throws JavaModelException", "signatureAfterChange": " public void testBug286668b_40w() throws JavaModelException", "diff": ["-\t\t\"\t\tbuilder.append(\\\"abc\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\\\"def\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"ghi\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"jkl\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"mno\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"stu\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"vwx\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"yz\\\");\\n\" +", "+\t\t\"\t\tbuilder.append(\\\"abc\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"def\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"ghi\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"jkl\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"mno\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"stu\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"vwx\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b012a1b6e98424d8d92fe7273836cc05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  \tpublic void test066() throws Exception", "signatureAfterChange": "  \tpublic void test066() throws Exception", "diff": ["-\t\t\t\"     5  if_icmpne 14\\n\" +", "+\t\t\t\"     5  if_icmpne 12\\n\" +", "-\t\t\t\"    11  ifeq 14\\n\" +", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    17  iload_0 [i]\\n\" +", "-\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    21  return\\n\" +", "+\t\t\t\"    11  pop\\n\" +", "+\t\t\t\"    12  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    15  iload_0 [i]\\n\" +", "+\t\t\t\"    16  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    19  return\\n\" +", "-\t\t\t\"        [pc: 14, line: 12]\\n\" +", "-\t\t\t\"        [pc: 21, line: 14]\\n\" +", "+\t\t\t\"        [pc: 12, line: 12]\\n\" +", "+\t\t\t\"        [pc: 19, line: 14]\\n\" +", "-\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 2, pc: 20] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b04d9aaef4445d6a0c80c7ff76c08956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "cae2235178dd91d5be4ed811b5134ba4b502f56a", "commitAfterChange": "20291e123853b40f3437b01ca0907aa48371db12", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": " public void test145()", "signatureAfterChange": " public void test145()", "diff": ["-\t\t\t\"public enum EnumA {\\r\\n\" +", "-\t\t\t\"  B1,\\r\\n\" +", "-\t\t\t\"  B2;\\r\\n\" +", "-\t\t\t\"  public void foo(){}\\r\\n\" +", "+\t\t\t\"public enum EnumA {\\n\" +", "+\t\t\t\"  B1,\\n\" +", "+\t\t\t\"  B2;\\n\" +", "+\t\t\t\"  public void foo(){}\\n\" +", "-\t\t\t\"public class ClassC {\\r\\n\" +", "-\t\t\t\"  void bar() {\\r\\n\" +", "-\t\t\t\"    EnumA.B1.B1.foo();\\r\\n\" +", "-\t\t\t\"    EnumA.B1.B2.foo();\\r\\n\" +", "-\t\t\t\"  }\\r\\n\" +", "+\t\t\t\"public class ClassC {\\n\" +", "+\t\t\t\"  void bar() {\\n\" +", "+\t\t\t\"    EnumA.B1.B1.foo();\\n\" +", "+\t\t\t\"    EnumA.B1.B2.foo();\\n\" +", "+\t\t\t\"  }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0f66f2ff3dd85ec10f641d64e9bb9db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void test125() throws Exception", "signatureAfterChange": " public void test125() throws Exception", "diff": ["-\t\t\t\"     5  aload_1\\n\" +", "+\t\t\t\"     5  aload_1 [arg0]\\n\" +", "-\t\t\t\"    10  aload_2\\n\" +", "+\t\t\t\"    10  aload_2 [arg1]\\n\" +", "-\t\t\t\"    0  aload_0\\n\" +", "-\t\t\t\"    1  aload_1\\n\" +", "-\t\t\t\"    2  aload_2\\n\" +", "+\t\t\t\"    0  aload_0 [this]\\n\" +", "+\t\t\t\"    1  aload_1 [arg0]\\n\" +", "+\t\t\t\"    2  aload_2 [arg1]\\n\" +", "-\t\t\t\"     1  aload_1\\n\" +", "+\t\t\t\"     1  aload_1 [arg0]\\n\" +", "-\t\t\t\"     6  aload_2\\n\" +", "+\t\t\t\"     6  aload_2 [arg1]\\n\" +", "-\t\t\t\t\"     1  aload_1\\n\" +", "+\t\t\t\t\"     1  aload_1 [arg0]\\n\" +", "-\t\t\t\t\"     6  aload_2\\n\" +", "+\t\t\t\t\"     6  aload_2 [arg1]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4cb38a6a25090b988d85b780b82e4ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate boolean examineGetAllMembers()", "signatureAfterChange": " \tprivate boolean examineGetAllMembers()", "diff": ["-\t\t\treportError(\"getAllMembers(_elementG) returned null\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) returned null\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include method hashCode()\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include method hashCode()\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include class FChild\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include class FChild\");", "-\t\t\t\treportError(\"getAllMembers(_elementG) included the private inherited field _fieldT1_private\");", "+\t\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) included the private inherited field _fieldT1_private\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not return the protected inherited field _fieldT1_protected\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not return the protected inherited field _fieldT1_protected\");", "-\t\t\t\treportError(\"getAllMembers(_elementG) returned a constructor for an element other than G\");", "+\t\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) returned a constructor for an element other than G\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include G's constructor\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include G's constructor\");", "-\t\t\t\t\treportError(\"getAllMembers(_elementG) included an overridden version of method_T1()\");", "+\t\t\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) included an overridden version of method_T1()\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include G's method_T1(String)\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include G's method_T1(String)\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6d3bb09bbefab4dcc02ef7459637628", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic void test056() throws Exception", "signatureAfterChange": "  \tpublic void test056() throws Exception", "diff": ["-\t\t\t\"     6  if_icmpeq 15\\n\" +", "+\t\t\t\"     6  if_icmpeq 13\\n\" +", "-\t\t\t\"    12  ifne 15\\n\" +", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    18  iload_0 [i]\\n\" +", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    22  return\\n\" +", "+\t\t\t\"    12  pop\\n\" +", "+\t\t\t\"    13  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    16  iload_0 [i]\\n\" +", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    20  return\\n\" +", "-\t\t\t\"        [pc: 15, line: 11]\\n\" +", "-\t\t\t\"        [pc: 22, line: 13]\\n\" +", "+\t\t\t\"        [pc: 13, line: 11]\\n\" +", "+\t\t\t\"        [pc: 20, line: 13]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 3, pc: 21] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e95ad9218c7760c52a8fa2c6823adee6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 217, "methodNumberAfterChange": 217, "signatureBeforeChange": " \tpublic void test215()", "signatureAfterChange": " \tpublic void test215()", "diff": ["-\t\t\t\"    10  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    14  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [27]\\n\" + ", "-\t\t\t\"    17  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    14  invokevirtual java.io.PrintStream.println(java.lang.Object) : void  [27]\\n\" + ", "+\t\t\t\"    17  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    22  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [32]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [32]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: Ljava/util/ArrayList;\\n\" + ", "-\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: Ljava/util/ArrayList;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 26] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: java.util.ArrayList\\n\" + ", "+\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: java.util.ArrayList\\n\" + ", "-\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: Ljava/util/ArrayList<Ljava/lang/Object;>;\\n\" + ", "-\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: Ljava/util/ArrayList<Ljava/lang/Object;>;\\n\";", "+\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: java.util.ArrayList<java.lang.Object>\\n\" + ", "+\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: java.util.ArrayList<java.lang.Object>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fde7882ecca9f292f866be22ec23c3c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tpublic void test068() throws Exception", "signatureAfterChange": "  \tpublic void test068() throws Exception", "diff": ["-\t\t\t\"     6  if_icmpeq 15\\n\" +", "+\t\t\t\"     6  if_icmpeq 13\\n\" +", "-\t\t\t\"    12  ifne 15\\n\" +", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    18  iload_0 [i]\\n\" +", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    22  return\\n\" +", "+\t\t\t\"    12  pop\\n\" +", "+\t\t\t\"    13  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    16  iload_0 [i]\\n\" +", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    20  return\\n\" +", "-\t\t\t\"        [pc: 15, line: 11]\\n\" +", "-\t\t\t\"        [pc: 22, line: 13]\\n\" +", "+\t\t\t\"        [pc: 13, line: 11]\\n\" +", "+\t\t\t\"        [pc: 20, line: 13]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 3, pc: 21] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe039ebb441aa6259b79d5d607afe7c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "988db3ec863dadeb2db80ab85efafc59fca27d63", "commitAfterChange": "bba7694c48471620eaabd1cb9ca1daab01462bcd", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 335, "signatureBeforeChange": " public void test184()", "signatureAfterChange": " public void test184()", "diff": ["-\t\t\t\"X.java\",", "+\t\t\t\"A.java\",", "-\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"1. WARNING in A.java (at line 6)\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"2. WARNING in A.java (at line 9)\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"3. WARNING in A.java (at line 9)\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"4. WARNING in A.java (at line 11)\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"5. WARNING in A.java (at line 12)\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"6. WARNING in A.java (at line 13)\\n\" + ", "-\t\t\"7. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"7. WARNING in A.java (at line 15)\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\"8. WARNING in A.java (at line 16)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe1a6e8513eea7639dbea2c2bef43cdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R1.java [GM] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java [GM] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +"]}], "num": 72151}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ad141b3c2cc8499613171de7a75e61e", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d6a30fbb1b3ef22ff322f51d5a5af4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\tdimensions[i].implicitWidening(IntBinding, dimensionType);", "+\t\t\t\t\tdimensions[i].computeConversion(scope, IntBinding, dimensionType);", "-\t\t\tthis.resolvedType = scope.createArray(referenceType, dimensions.length);", "+\t\t\tif (referenceType.isParameterizedType()) {", "+\t\t\t    scope.problemReporter().illegalArrayOfParameterizedType(referenceType, this);", "+\t\t\t}", "+\t\t\tthis.resolvedType = scope.createArrayType(referenceType, dimensions.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e77444e26b57263b4f638c1d6eb454d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "\t \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\t", "-\tpublic TypeBinding getTypeBinding(Scope scope) {", "+\t}\t", "+\tprotected TypeBinding getTypeBinding(Scope scope) {", "-\t\treturn scope.createArray(scope.getType(token), dimensions);", "+\t\tTypeBinding leafComponentType = scope.getType(token);", "+\t\tif (leafComponentType.isParameterizedType()) {", "+\t\t    scope.problemReporter().illegalArrayOfParameterizedType(leafComponentType, this);", "+\t\t}", "+\t\treturn scope.createArrayType(leafComponentType, dimensions);"]}], "num": 47290}
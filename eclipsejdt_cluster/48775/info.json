{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0888cdea193cc39b8ad35abd0f06a136", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7636540658eebad6625c67828c0b87eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "ac6a9f56760bba7aec9ca8548c00a789a95fdc11", "commitAfterChange": "f238d59edecc5d87c39084d60c9040567d09deaf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic static IPackageFragmentRoot createJarPackageFragmentRootFrom(IFile file)", "signatureAfterChange": "\r \tpublic static IPackageFragmentRoot createJarPackageFragmentRootFrom(IFile file)", "diff": ["-\t\tIJavaProject project = (IJavaProject) create(file.getProject());\r", "+\t\treturn JavaModelManager.createJarPackageFragmentRootFrom(file, null);\r", "+\t}\r", "-\t\t// Create a jar package fragment root only if on the classpath\r", "-\t\tIPath resourcePath = file.getFullPath();\r", "-\t\ttry {\r", "-\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tIPath rootPath = entry.getPath();\r", "-\t\t\t\tif (rootPath.equals(resourcePath)) {\r", "-\t\t\t\t\treturn project.getPackageFragmentRoot(file);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t}\r", "-\t\treturn null;\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c35fc7457b968faef3a650343dddf73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "8726985690d5211d83787440cfdc69960f688cd3", "commitAfterChange": "b2bac1f114347c5119b74b76ba91158e0de76647", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "\r \tpublic boolean hasClasspathCycle(IClasspathEntry[] entries)", "signatureAfterChange": "\r \tpublic boolean hasClasspathCycle(IClasspathEntry[] entries)", "diff": ["-\r", "-\t\tStringHashtableOfInt depthTable = new StringHashtableOfInt();\r", "+\t\t\r", "+\t\tHashSet cycleParticipants = new HashSet();\r", "+\t\tupdateCycleParticipants(entries, new HashSet(), cycleParticipants, getWorkspace().getRoot());\r", "+\t\treturn !cycleParticipants.isEmpty();\r", "+\t}\r", "-\t\t\tString projectName = this.getElementName();\r", "-\t\t\tdepthTable.put(projectName, -2); // mark this project as being visited\r", "-\t\t\tString[] prerequisites = this.projectPrerequisites(entries);\r", "-\t\t\tfor (int i = 0, length = prerequisites.length; i < length; i++) {\r", "-\t\t\t\t((JavaModel) this.getJavaModel()).computeDepth(\r", "-\t\t\t\t\tprerequisites[i],\r", "-\t\t\t\t\tdepthTable);\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\treturn e.getStatus().getCode() == IJavaModelStatusConstants.NAME_COLLISION;\r"]}], "num": 48775}
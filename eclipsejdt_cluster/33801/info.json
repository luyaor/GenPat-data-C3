{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2899c3a94b19751cc78bf2d601043117", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85a129ea4f72530a3abbc31dfdf30f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e0c65d48fbfbc2b240962f72967bed335ff04a38", "commitAfterChange": "388d6309502d2277c29518666e0a29b9ef8f3348", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 168, "signatureBeforeChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "signatureAfterChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "diff": ["-\t\t// do not propose type if completion token is empty", "-\t\tboolean skip = false;", "-\t\tif (token.length == 0 && NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {", "-\t\t\tif(!this.assistNodeIsConstructor && (this.assistNodeInJavadoc & CompletionOnJavadoc.EXCEPTION) == 0) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tskip = true;", "-\t\t}", "-", "-\t\tif (!skip && proposeType && scope.enclosingSourceType() != null) {", "+\t\tif (proposeType && scope.enclosingSourceType() != null) {", "-\t\tif (!skip && proposeType && this.unitScope != null) {", "+\t\tif (proposeType && this.unitScope != null) {", "-\t\tif(!skip && proposeType) {", "+\t\tif(proposeType) {", "-\t\t\t\t\t\tif(skip || !inSameUnit || (inSameUnit && refBinding.isMemberType())) {", "+\t\t\t\t\t\tif(!inSameUnit || (inSameUnit && refBinding.isMemberType())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadb5152c6cb99b114cc555315e3f4e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "3f4d5d2136631e9cf63e2a32bd9868cec640bf4a", "commitAfterChange": "e72ce28100309ddf8def791ea7002ecc7cb95b9e", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic boolean visit( \t\tConditionalExpression conditionalExpression, \t\tBlockScope scope)", "signatureAfterChange": "     public boolean visit(     \tConditionalExpression conditionalExpression,     \tBlockScope scope)", "diff": ["-\t */", "-\tpublic boolean visit(", "-\t\tConditionalExpression conditionalExpression,", "-\t\tBlockScope scope) {", "-", "-\t\tfinal int numberOfParens = (conditionalExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(conditionalExpression, numberOfParens);", "-\t\t}", "-\t\tconditionalExpression.condition.traverse(this, scope);", "-", "-\t\tboolean placeSpaceImmediately = this.preferences.insert_space_before_question_in_conditional", "-\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_INDENT_ON_COLUMN) != 0)", "-\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_NEXT_PER_LINE_SPLIT) != 0);", "-\t\tif (placeSpaceImmediately) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\t", "-\t\tAlignment conditionalExpressionAlignment =this.scribe.createAlignment(", "-\t\t\t\t\"conditionalExpression\", //$NON-NLS-1$", "-\t\t\t\tthis.preferences.conditional_expression_alignment,", "-\t\t\t\t2,", "-\t\t\t\tthis.scribe.scanner.currentPosition);", "-", "-\t\tthis.scribe.enterAlignment(conditionalExpressionAlignment);", "-\t\tboolean ok = false;", "-\t\tdo {", "-\t\t\ttry {", "-\t\t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 0);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, !placeSpaceImmediately && this.preferences.insert_space_before_question_in_conditional);", "-", "-\t\t\t\tif (this.preferences.insert_space_after_question_in_conditional) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tconditionalExpression.valueIfTrue.traverse(this, scope);", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 1);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_conditional);", "-", "-\t\t\t\tif (this.preferences.insert_space_after_colon_in_conditional) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tconditionalExpression.valueIfFalse.traverse(this, scope);", "-", "-\t\t\t\tok = true;", "-\t\t\t} catch (AlignmentException e) {", "-\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t}", "-\t\t} while (!ok);", "-\t\tthis.scribe.exitAlignment(conditionalExpressionAlignment, true);", "-\t\t\t", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(conditionalExpression, numberOfParens);", "-\t\t}", "-\t\treturn false;\t", "-\t}", "+     */", "+    public boolean visit(", "+    \tConditionalExpression conditionalExpression,", "+    \tBlockScope scope) {", "+    ", "+    \tfinal int numberOfParens = (conditionalExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+    \tif (numberOfParens > 0) {", "+    \t\tmanageOpeningParenthesizedExpression(conditionalExpression, numberOfParens);", "+    \t}", "+    \tconditionalExpression.condition.traverse(this, scope);", "+    ", "+    \tAlignment conditionalExpressionAlignment =this.scribe.createAlignment(", "+    \t\t\t\"conditionalExpression\", //$NON-NLS-1$", "+    \t\t\tthis.preferences.conditional_expression_alignment,", "+    \t\t\t2,", "+    \t\t\tthis.scribe.scanner.currentPosition);", "+    ", "+    \tthis.scribe.enterAlignment(conditionalExpressionAlignment);", "+    \tboolean ok = false;", "+    \tdo {", "+    \t\ttry {", "+    \t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 0);", "+    \t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, this.preferences.insert_space_before_question_in_conditional);", "+    ", "+    \t\t\tif (this.preferences.insert_space_after_question_in_conditional) {", "+    \t\t\t\tthis.scribe.space();", "+    \t\t\t}", "+    \t\t\tconditionalExpression.valueIfTrue.traverse(this, scope);", "+    \t\t\tthis.scribe.printTrailingComment();", "+    \t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 1);", "+    \t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_conditional);", "+    ", "+    \t\t\tif (this.preferences.insert_space_after_colon_in_conditional) {", "+    \t\t\t\tthis.scribe.space();", "+    \t\t\t}", "+    \t\t\tconditionalExpression.valueIfFalse.traverse(this, scope);", "+    ", "+    \t\t\tok = true;", "+    \t\t} catch (AlignmentException e) {", "+    \t\t\tthis.scribe.redoAlignment(e);", "+    \t\t}", "+    \t} while (!ok);", "+    \tthis.scribe.exitAlignment(conditionalExpressionAlignment, true);", "+    \t\t", "+    \tif (numberOfParens > 0) {", "+    \t\tmanageClosingParenthesizedExpression(conditionalExpression, numberOfParens);", "+    \t}", "+    \treturn false;\t", "+    }"]}], "num": 33801}
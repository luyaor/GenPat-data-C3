{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0648ee5760ae95625d8dfa5ae8afede", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03ddb4b175aab82d6487b170b17900b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean equals(Object object)", "signatureAfterChange": " \tpublic boolean equals(Object object)", "diff": ["-\t\t\tIPath[] otherIncludes = otherEntry.getInclusionPatterns();", "-\t\t\tif (this.inclusionPatterns != otherIncludes){", "-\t\t\t    if (this.inclusionPatterns == null) return false;", "-\t\t\t\tint includeLength = this.inclusionPatterns.length;", "-\t\t\t\tif (otherIncludes == null || otherIncludes.length != includeLength) ", "-\t\t\t\t\treturn false;", "-\t\t\t\tfor (int i = 0; i < includeLength; i++) {", "-\t\t\t\t\t// compare toStrings instead of IPaths ", "-\t\t\t\t\t// since IPath.equals is specified to ignore trailing separators", "-\t\t\t\t\tif (!this.inclusionPatterns[i].toString().equals(otherIncludes[i].toString()))", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tIPath[] otherExcludes = otherEntry.getExclusionPatterns();", "-\t\t\tif (this.exclusionPatterns != otherExcludes){", "-\t\t\t    if (this.exclusionPatterns == null) return false;", "-\t\t\t\tint excludeLength = this.exclusionPatterns.length;", "-\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength) ", "-\t\t\t\t\treturn false;", "-\t\t\t\tfor (int i = 0; i < excludeLength; i++) {", "-\t\t\t\t\t// compare toStrings instead of IPaths ", "-\t\t\t\t\t// since IPath.equals is specified to ignore trailing separators", "-\t\t\t\t\tif (!this.exclusionPatterns[i].toString().equals(otherExcludes[i].toString()))", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tif (!equalPatterns(this.inclusionPatterns, otherEntry.getInclusionPatterns()))", "+\t\t\t\treturn false;", "+\t\t\tif (!equalPatterns(this.exclusionPatterns, otherEntry.getExclusionPatterns()))", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c477fa73e0d6eae42d1548d215c68c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "029a8f257514071d898cccd4122bad881aa576bc", "commitAfterChange": "89f5de86dbcff10e0a2f2dafa846f8c01996e885", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension)", "signatureAfterChange": "   public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension)", "diff": ["-\t", "-\tString sourceFolderPath = this.sourceFolder.getFullPath().toString() + IPath.SEPARATOR;", "-\tchar[][] javaLikeExtensions = Util.getJavaLikeExtensions();", "-\tfor (int i = 0, length = javaLikeExtensions.length; i < length; i++) {", "-\t\tString extension = '.' + new String(javaLikeExtensions[i]);", "-\t\tString sourceFileName = sourceFileWithoutExtension + extension;", "-\t\tif (!doesFileExist(sourceFileName, qualifiedPackageName)) continue; // most common case", "-\t", "-\t\tString qualifiedSourceFileName = qualifiedSourceFileWithoutExtension + extension;", "-\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isExcluded((sourceFolderPath + qualifiedSourceFileName).toCharArray(), this.fulInclusionPatternChars, this.fullExclusionPatternChars, false/*not a folder path*/))", "-\t\t\tcontinue;", "-\t\tIPath path = new Path(qualifiedSourceFileName);", "-\t\tIFile file = this.sourceFolder.getFile(path);", "-\t\treturn new NameEnvironmentAnswer(new ResourceCompilationUnit(file), null /* no access restriction */);", "+\tSimpleLookupTable dirTable = directoryTable(qualifiedPackageName);", "+\tif (dirTable != null && dirTable.elementSize > 0) {", "+\t\tIFile file = (IFile) dirTable.get(sourceFileWithoutExtension);", "+\t\tif (file != null) {", "+\t\t\treturn new NameEnvironmentAnswer(new ResourceCompilationUnit(file), null /* no access restriction */);", "+\t\t}"]}], "num": 26407}
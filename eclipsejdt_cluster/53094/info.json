{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82ec39313f23cbae91923827abec2ef0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d1f3362ab08a6af8c3640c3b799cb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression)", "signatureAfterChange": "  \tpublic ArrayCreation convert(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression expression)", "diff": ["-\tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression) {", "-\t\tClassInstanceCreation classInstanceCreation = this.ast.newClassInstanceCreation();", "-\t\tclassInstanceCreation.setName(convert(expression.allocation.type));", "-\t\tif (expression.allocation.enclosingInstance != null) {", "-\t\t\tclassInstanceCreation.setExpression(convert(expression.allocation.enclosingInstance));", "-\t\t}", "-\t\tint declarationSourceStart = expression.allocation.sourceStart;", "-\t\tclassInstanceCreation.setSourceRange(declarationSourceStart, expression.bodyEnd - declarationSourceStart + 1);", "-\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = expression.allocation.arguments;", "-\t\tif (arguments != null) {", "-\t\t\tint length = arguments.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tclassInstanceCreation.arguments().add(convert(arguments[i]));", "-\t\t\t}", "-\t\t}", "-\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "-\t\tint start = retrieveStartBlockPosition(declarationSourceStart, expression.bodyEnd);", "-\t\tanonymousClassDeclaration.setSourceRange(start, expression.bodyEnd - start + 1);", "-\t\tclassInstanceCreation.setAnonymousClassDeclaration(anonymousClassDeclaration);", "-\t\tbuildBodyDeclarations(expression, anonymousClassDeclaration);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(classInstanceCreation, expression);", "-\t\t\trecordNodes(anonymousClassDeclaration, expression);", "-\t\t\tanonymousClassDeclaration.resolveBinding();", "-\t\t}", "-\t\treturn classInstanceCreation;", "-\t}", "+\tpublic ArrayCreation convert(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression expression) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ae6d10d1a679f430cdc8db7f61f1b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e87380489c19c89a272ebf5e59d9953a6bf9556a", "commitAfterChange": "2280fea0c7ffa905aa9d4633b1f02fa1aa3159f9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "signatureAfterChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "diff": ["-\t\tif (enumConstant.initialization instanceof QualifiedAllocationExpression) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) enumConstant.initialization).anonymousType;", "-\t\t\tif (anonymousType != null) {", "-\t\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "-\t\t\t\tint start = retrieveStartBlockPosition(anonymousType.sourceEnd, anonymousType.bodyEnd);", "-\t\t\t\tint end = retrieveRightBrace(anonymousType.bodyEnd, declarationSourceEnd);", "-\t\t\t\tanonymousClassDeclaration.setSourceRange(start, end - start + 1);", "-\t\t\t\tenumConstantDeclaration.setAnonymousClassDeclaration(anonymousClassDeclaration);", "-\t\t\t\tbuildBodyDeclarations(anonymousType, anonymousClassDeclaration);", "-\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\trecordNodes(anonymousClassDeclaration, anonymousType);", "-\t\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression initialization = enumConstant.initialization;", "+\t\tif (initialization != null) {", "+\t\t\tif (initialization instanceof QualifiedAllocationExpression) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) initialization).anonymousType;", "+\t\t\t\tif (anonymousType != null) {", "+\t\t\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "+\t\t\t\t\tint start = retrieveStartBlockPosition(anonymousType.sourceEnd, anonymousType.bodyEnd);", "+\t\t\t\t\tint end = retrieveRightBrace(anonymousType.bodyEnd, declarationSourceEnd);", "+\t\t\t\t\tanonymousClassDeclaration.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tenumConstantDeclaration.setAnonymousClassDeclaration(anonymousClassDeclaration);", "+\t\t\t\t\tbuildBodyDeclarations(anonymousType, anonymousClassDeclaration);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(anonymousClassDeclaration, anonymousType);", "+\t\t\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\t\t\t\t}", "+\t\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, end - declarationSourceStart + 1);", "-\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, end - declarationSourceStart + 1);", "+\t\t\t} else {", "+\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, declarationSourceEnd - declarationSourceStart + 1);", "+\t\t\t}", "+\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) initialization).arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\tenumConstantDeclaration.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "-\t\t}", "-\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) enumConstant.initialization).arguments;", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\tenumConstantDeclaration.arguments().add(convert(arguments[i]));", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d9592a516812a06f1f4d01f1ad56e5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic Expression convert(QualifiedAllocationExpression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation)", "diff": ["-\tpublic Expression convert(QualifiedAllocationExpression expression) {", "-\t\tif (expression.anonymousType != null) {", "-\t\t\treturn convert(expression.anonymousType);", "+\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation) {", "+\t\tif (allocation.anonymousType != null) {", "+\t\t\tClassInstanceCreation classInstanceCreation = this.ast.newClassInstanceCreation();", "+\t\t\tclassInstanceCreation.setName(convert(allocation.type));", "+\t\t\tif (allocation.enclosingInstance != null) {", "+\t\t\t\tclassInstanceCreation.setExpression(convert(allocation.enclosingInstance));", "+\t\t\t}", "+\t\t\tint declarationSourceStart = allocation.sourceStart;", "+\t\t\tclassInstanceCreation.setSourceRange(declarationSourceStart, allocation.anonymousType.bodyEnd - declarationSourceStart + 1);", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = allocation.arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tint length = arguments.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tclassInstanceCreation.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "+\t\t\tint start = retrieveStartBlockPosition(declarationSourceStart, allocation.anonymousType.bodyEnd);", "+\t\t\tanonymousClassDeclaration.setSourceRange(start, allocation.anonymousType.bodyEnd - start + 1);", "+\t\t\tclassInstanceCreation.setAnonymousClassDeclaration(anonymousClassDeclaration);", "+\t\t\tbuildBodyDeclarations(allocation.anonymousType, anonymousClassDeclaration);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(classInstanceCreation, allocation.anonymousType);", "+\t\t\t\trecordNodes(anonymousClassDeclaration, allocation.anonymousType);", "+\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\t\t}", "+\t\t\treturn classInstanceCreation;\t\t\t", "-\t\t\tclassInstanceCreation.setExpression(convert(expression.enclosingInstance));", "-\t\t\tclassInstanceCreation.setName(convert(expression.type));", "-\t\t\tclassInstanceCreation.setSourceRange(expression.sourceStart, expression.sourceEnd - expression.sourceStart + 1);", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = expression.arguments;", "+\t\t\tclassInstanceCreation.setExpression(convert(allocation.enclosingInstance));", "+\t\t\tclassInstanceCreation.setName(convert(allocation.type));", "+\t\t\tclassInstanceCreation.setSourceRange(allocation.sourceStart, allocation.sourceEnd - allocation.sourceStart + 1);", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = allocation.arguments;", "-\t\t\t\trecordNodes(classInstanceCreation, expression);", "+\t\t\t\trecordNodes(classInstanceCreation, allocation);"]}], "num": 53094}
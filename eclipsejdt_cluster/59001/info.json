{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd4a670ca7c59b674568f465cac1afcf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b56c79e98b7b20f16b7518cbc10a5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "11fe35f9c407ba8445270c225d007172a716d5dc", "commitAfterChange": "1dd7ed98be54465df7d1314f9e833c4bc5e5728c", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 279, "signatureBeforeChange": " public void testBug124469a() throws CoreException", "signatureAfterChange": " public void testBug124469a() throws CoreException", "diff": ["+\t\t\"lib/b124469.jar pack.E[] pack.A1.list() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar pack.E[] pack.A2.list() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar pack.E[] pack.A3.list() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36ed41e16abcd3960ee753d7e9a3e591", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "96b6a1a036d724eb72c9dda7f875bf468e57542f", "commitAfterChange": "1088bd5003c7ca9240c67a19e715067bfb429dc6", "methodNumberBeforeChange": 974, "methodNumberAfterChange": 974, "signatureBeforeChange": " public void test0968()", "signatureAfterChange": " public void test0968()", "diff": ["-\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method addAll(Collection<? extends E>) of type ArrayList<T0> has the same erasure as addAll(Collection<? extends E>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method retainAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as retainAll(Collection<?>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method toArray(T[]) of type ArrayList<T0> has the same erasure as toArray(T[]) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method add(E) of type ArrayList<T0> has the same erasure as add(E) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method containsAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as containsAll(Collection<?>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method removeAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as removeAll(Collection<?>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"9. WARNING in X.java (at line 4)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd2fcebd74a0a4dcbd7e68350a02e61f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void test077()", "signatureAfterChange": " \tpublic void test077()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX x = new X();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX x = new X();\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tX x1 = new X(args);\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tX x1 = new X(args);\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tX x2 = new X(x);\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tX x2 = new X(x);\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in X.java (at line 15)\\n\" + "]}], "num": 59001}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c3a863ada82a32a36fe6f9affcd407f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45bdd1b14d93ee135aa5c5cde51e8b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchDispatchTests.java", "commitBeforeChange": "1d4b08a8f9928b8cb41c807f138e108b1a0b90da", "commitAfterChange": "9b273f1da9b2de9c2343ae145581432c1143c1d0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \t@Override \tprotected void setUp() throws Exception", "signatureAfterChange": " \t \t@Override \tprotected void setUp() throws Exception", "diff": ["-\t\t", "-\t\t_tmpBinFolderName = _tmpFolder + File.separator + \"bin\";", "-\t\t_tmpBinDir = new File(_tmpBinFolderName);", "-\t\tdeleteTree(_tmpBinDir); // remove existing contents", "-\t\t_tmpBinDir.mkdirs();", "-\t\tassert _tmpBinDir.exists() : \"couldn't mkdirs \" + _tmpBinFolderName;", "-\t\t", "-\t\t_tmpGenFolderName = _tmpFolder + File.separator + \"gen-src\";", "-\t\t_tmpGenDir = new File(_tmpGenFolderName);", "-\t\tdeleteTree(_tmpGenDir); // remove existing contents", "-\t\t_tmpGenDir.mkdirs();", "-\t\tassert _tmpGenDir.exists() : \"couldn't mkdirs \" + _tmpGenFolderName;", "-\t\t", "-\t\t_tmpSrcFolderName = _tmpFolder + File.separator + \"src\";", "-\t\t_tmpSrcDir = new File(_tmpSrcFolderName);", "-\t\tdeleteTree(_tmpSrcDir); // remove existing contents", "-\t\t_tmpSrcDir.mkdirs();", "-\t\tassert _tmpSrcDir.exists() : \"couldn't mkdirs \" + _tmpSrcFolderName;", "-\t\t", "-\t\tFile processorJar = new File(_processorJarName);", "-\t\tassertTrue(\"Couldn't find processor jar at \" + processorJar.getAbsolutePath(), processorJar.exists());", "-\t\t", "-\t\tServiceLoader<JavaCompiler> javaCompilerLoader = ServiceLoader.load(JavaCompiler.class);//, EclipseCompiler.class.getClassLoader());", "-\t\tint compilerCounter = 0;", "-\t\tfor (JavaCompiler javaCompiler : javaCompilerLoader) {", "-\t\t\tcompilerCounter++;", "-\t\t\tif (javaCompiler instanceof EclipseCompiler) {", "-\t\t\t\t_eclipseCompiler = javaCompiler;", "-\t\t\t}", "-\t     }", "-\t\tassertEquals(\"Only one compiler available\", 1, compilerCounter);", "-\t}", "+\t\tBatchTestUtils.init();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7c5f739837eba48c9ebc88aa73b1fd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8abf03ebc64c5dfaa72b42e56c19fb01c4c7861e", "commitAfterChange": "5b58321cc6529786ed20cb721ece7536a2d99088", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t\t\tswitch(result.getNodeType()) {", "-\t\t\t\tcase ASTNode.ENUM_DECLARATION:", "-\t\t\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\t\t\tfinal TypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setDeclaration((EnumDeclaration) result);", "-\t\t\t\t\t\t\tAbstractTypeDeclaration typeDecl = typeDeclarationStatement.getDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t\t\t}", "+\t\t\t// annotation and enum type declarations are not returned by the parser inside method bodies", "+\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) result;", "+\t\t\tTypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "+\t\t\ttypeDeclarationStatement.setDeclaration(typeDeclaration);", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.internalGetTypeDeclaration();", "+\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION :", "-\t\t\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setDeclaration((AnnotationTypeDeclaration) result);", "-\t\t\t\t\t\t\tAbstractTypeDeclaration typeDecl = typeDeclarationStatement.getDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t\t\t}", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tAbstractTypeDeclaration typeDeclAST3 = typeDeclarationStatement.getDeclaration();", "+\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDeclAST3.getStartPosition(), typeDeclAST3.getLength());", "-\t\t\t\tdefault:", "-\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) result;", "-\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "-\t\t\t\t\ttypeDeclarationStatement.setDeclaration(typeDeclaration);", "-\t\t\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.internalGetTypeDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\t\t\tAbstractTypeDeclaration typeDeclAST3 = typeDeclarationStatement.getDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDeclAST3.getStartPosition(), typeDeclAST3.getLength());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn typeDeclarationStatement;", "+\t\t\treturn typeDeclarationStatement;"]}], "num": 12224}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59b7bb5c0e739ea5c28570560f4c7ff4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973f4e07a3c5ee90ad5fb0e94c42237e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "commitAfterChange": "b7c75d5af8ed9aa46f28be9d8bc08449dc25dc4e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<char[]> sourceForFilesWithMissingType)", "diff": ["-\t\t\tfinal ProcessorEnvImpl processorEnv)", "+\t\t\tfinal ProcessorEnvImpl processorEnv,", "+\t\t\tfinal List<IFile> filesWithMissingType,", "+\t\t\tfinal List<char[]> sourceForFilesWithMissingType)", "+\t\tfinal IFile[] files = processorEnv.getFiles();", "-\t\t\tnew HashMap<IFile, Set<AnnotationTypeDeclaration>>(_filesToProcess.length * 4/3 + 1);", "+\t\t\tnew HashMap<IFile, Set<AnnotationTypeDeclaration>>(files.length * 4/3 + 1);", "+\t\taddAllFilesWithMissingTypeError(filesWithMissingType, sourceForFilesWithMissingType, processorEnv);", "-\t\t\tfor( int fileIndex=0, numFiles=_filesToProcess.length; fileIndex<numFiles; fileIndex ++ ){", "-\t\t\t\tfinal Set<AnnotationTypeDeclaration> annotationTypesInFile = file2AnnotationDecls.get(_filesToProcess[fileIndex]);", "+\t\t\tfor( int fileIndex=0, numFiles=files.length; fileIndex<numFiles; fileIndex ++ ){", "+\t\t\t\tfinal Set<AnnotationTypeDeclaration> annotationTypesInFile = file2AnnotationDecls.get(files[fileIndex]);", "-\t\t\t\t\t\tprocessorEnv.setFileProcessing(_filesToProcess[fileIndex]);", "+\t\t\t\t\t\tprocessorEnv.setFileProcessing(files[fileIndex]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af0aabd9a769559c203798eae83b1c0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<IFile, Set<IFile>> lastGeneratedFiles, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<IFile, Set<IFile>> lastGeneratedFiles, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\t\tfinal ICompilationParticipantResult[] cpResults = processorEnv.getFilesWithAnnotation();", "-\t\tfinal Map<ICompilationParticipantResult, Set<AnnotationTypeDeclaration>> file2AnnotationDecls = ", "-\t\t\tnew HashMap<ICompilationParticipantResult, Set<AnnotationTypeDeclaration>>(cpResults.length * 4/3 + 1);", "+\t\tfinal BuildContext[] cpResults = processorEnv.getFilesWithAnnotation();", "+\t\tfinal Map<BuildContext, Set<AnnotationTypeDeclaration>> file2AnnotationDecls = ", "+\t\t\tnew HashMap<BuildContext, Set<AnnotationTypeDeclaration>>(cpResults.length * 4/3 + 1);", "-\t\t\t// ICompilationParticipantResult API. ", "+\t\t\t// BuildContext API. ", "-\t\t\t//    so it doesn't matter which ICompilationParticipantResult we attach the ", "+\t\t\t//    so it doesn't matter which BuildContext we attach the ", "-\t\t\tICompilationParticipantResult firstResult = null; ", "+\t\t\tBuildContext firstResult = null; ", "-\t\t\t\tfinal ICompilationParticipantResult[] others = processorEnv.getFilesWithoutAnnotation();", "+\t\t\t\tfinal BuildContext[] others = processorEnv.getFilesWithoutAnnotation();", "-\t\t\tfor(ICompilationParticipantResult curResult : cpResults ){", "+\t\t\tfor(BuildContext curResult : cpResults ){"]}], "num": 65816}
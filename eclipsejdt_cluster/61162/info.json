{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c898cc9f6130927ea356a299df761ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d1ef4c0c80cb3d14f3442b03a513267", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications,  \t\tfinal char[][] typeNames, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications,  \t\tfinal char[][] typeNames, \t\tint matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\tfinal int matchRule, ", "+\t\tint matchRule, ", "+\t\t// Validate match rule first", "+\t\tint namesLength = typeNames == null ? 0 : typeNames.length;", "+\t\tfor (int i=0; i<namesLength; i++) {", "+\t\t\tmatchRule &= SearchPattern.validateMatchRule(new String(typeNames[i]), matchRule);", "+\t\t}", "+\t\tfinal int validatedMatchRule = matchRule;", "+\t\t", "+\t\t// Debug", "+\t\t\tif (validatedMatchRule != matchRule) {", "+\t\t\t\tUtil.verbose(\"\t- validated match rule: \"+getMatchRuleString(validatedMatchRule)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t// Create pattern", "-\t\tfinal MultiTypeDeclarationPattern pattern = new MultiTypeDeclarationPattern(qualifications, typeNames, typeSuffix, matchRule);", "+\t\tfinal MultiTypeDeclarationPattern pattern = new MultiTypeDeclarationPattern(qualifications, typeNames, typeSuffix, validatedMatchRule);", "-\t\t\t\t\t\t\treturn true; // fliter out *the* working copy", "+\t\t\t\t\t\t\treturn true; // filter out *the* working copy", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), matchRule);", "+\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), validatedMatchRule);", "-\t\t\t\t\t\t\t\t\t// compute encloising type names", "+\t\t\t\t\t\t\t\t\t// compute enclosing type names", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), matchRule);", "+\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), validatedMatchRule);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d04a7afad0c15484d2c7eeca628765d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "a118736b4df6d2c2d76c2e8540c6ee6242953cb2", "commitAfterChange": "d90e3df9ed4198288c27321fc19ea2323118c013", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications, \t\tfinal char[][] typeNames, \t\tint matchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications, \t\tfinal char[][] typeNames, \t\tfinal int matchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\tint matchRule,", "+\t\tfinal int matchRule,", "-", "-\t\t// Validate match rule first", "-\t\tint namesLength = typeNames == null ? 0 : typeNames.length;", "-\t\tfor (int i=0; i<namesLength; i++) {", "-\t\t\tmatchRule &= SearchPattern.validateMatchRule(new String(typeNames[i]), matchRule);", "-\t\t}", "-\t\tfinal int validatedMatchRule = matchRule;", "-\t\tfinal MultiTypeDeclarationPattern pattern = new MultiTypeDeclarationPattern(qualifications, typeNames, typeSuffix, validatedMatchRule);", "+\t\tfinal MultiTypeDeclarationPattern pattern = new MultiTypeDeclarationPattern(qualifications, typeNames, typeSuffix, matchRule);", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), validatedMatchRule);", "+\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), matchRule);", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), validatedMatchRule);", "+\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), matchRule);"]}], "num": 61162}
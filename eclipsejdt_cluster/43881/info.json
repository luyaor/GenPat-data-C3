{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ab992f64f2a88bbb365fdab28bb0b9d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ffc2a2d973eecea2cc1a613f8af89ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "83ab9db63b8ff68374b9953ac0c435dcd063d8bf", "commitAfterChange": "710352220ce729b3b70862da914c01e2ca1e73c5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r \r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tfor (int i = 0; i < length; i++)\r", "-\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null)\r", "+\t\tfor (int i = 0; i < length; i++){\r", "+\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null){\r", "-\t\tif (argHasError)\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (argHasError){\r", "+\t\t\tMethodBinding closestMethod = null;\r", "+\t\t\tif(receiverType instanceof ReferenceBinding) {\r", "+\t\t\t\t// record any selector match, for clients who may still need hint about possible method match\r", "+\t\t\t\tthis.codegenBinding = this.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);\r", "+\t\t\t}\t\t\t\r", "+\t\t}\r", "+\t\t// record the closest match, for clients who may still need hint about possible method match\r", "+\t\tif (binding.problemId() == ProblemReasons.NotFound){\r", "+\t\t\tthis.codegenBinding = this.binding = ((ProblemMethodBinding)binding).closestMatch;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce6ae80e2476f29fccd680d3f70acc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocArgumentExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t\t\t\t// check raw type", "+\t\t\t\t\tif (this.resolvedType.isArrayType()) {", "+\t\t\t\t\t    TypeBinding leafComponentType = this.resolvedType.leafComponentType();", "+\t\t\t\t\t    if (leafComponentType.isGenericType()) { // raw type", "+\t\t\t\t\t        this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), this.resolvedType.dimensions());", "+\t\t\t\t\t    }", "+\t\t\t\t\t} else if (this.resolvedType.isGenericType()) {", "+\t\t\t\t        this.resolvedType = scope.environment().createRawType((ReferenceBinding)this.resolvedType, null); // raw type", "+\t\t\t\t\t}\t\t"]}], "num": 43881}
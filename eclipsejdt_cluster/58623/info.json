{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e48fe45291a19c1603cb820e4a577ea3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "424b3a9e83ef40557179635053f9f4e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration enumDeclaration, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tExplicitConstructorCall explicitConstructor, \t\tBlockScope scope)", "diff": ["-\t}", "-\tpublic boolean visit(EnumDeclaration enumDeclaration, BlockScope scope) {", "-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        final int line = this.scribe.line; ", "-        ", "-        this.scribe.printModifiers(enumDeclaration.annotations, this);", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameenum, true); ", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "-", "-\t\t/* ", "-\t\t * Super Interfaces ", "-\t\t */", "-\t\tfinal TypeReference[] superInterfaces = enumDeclaration.superInterfaces;", "-\t\tif (superInterfaces != null) {", "-\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\tAlignment interfaceAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\"superInterfaces\",//$NON-NLS-1$", "-\t\t\t\t\tthis.preferences.alignment_for_superinterfaces_in_enum_declaration,", "-\t\t\t\t\tsuperInterfaceLength+1,  // implements token is first fragment", "-\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\tthis.scribe.enterAlignment(interfaceAlignment);", "-\t\t\tboolean ok = false;", "-\t\t\tdo {", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, 0);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);", "-\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_superinterfaces) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t} while (!ok);", "-\t\t\tthis.scribe.exitAlignment(interfaceAlignment, true);", "-\t\t}", "-", "-\t\t/*", "-\t\t * Type body", "-\t\t */", "-\t\tString enum_declaration_brace = this.preferences.brace_position_for_enum_declaration;", "-", "-        formatLeftCurlyBrace(line, enum_declaration_brace);", "-\t\tformatTypeOpeningBrace(enum_declaration_brace, this.preferences.insert_space_before_opening_brace_in_enum_declaration, enumDeclaration);", "-\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "-\t\t\tthis.scribe.indent();", "-\t\t}", "-", "-\t\tEnumConstant[] enumConstants = enumDeclaration.enumConstants;", "-\t\tif (enumConstants != null) {", "-\t\t\tint length = enumConstants.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tif (i < length - 1) {", "-\t\t\t\t\tenumConstants[i].traverse(this, enumDeclaration.scope);\t\t\t\t\t", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t} else if (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t} else {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t}", "-\t\t", "-\t\tformatTypeMembers(enumDeclaration);", "-", "-\t\tthis.scribe.printComment();", "-\t\t", "-\t\tif (this.preferences.indent_body_declarations_compare_to_enum_declaration_header) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\t", "-\t\tif (this.preferences.insert_new_line_in_empty_enum_declaration) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\tthis.scribe.printTrailingComment();", "-\t\tif (enum_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\tif (hasComments()) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t\treturn false;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "526e3528695e523ac33173b152db12f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "31be6e8d42cb659b279825ea1e93bdb14b71a1ce", "commitAfterChange": "48a83ca359ad11f8f0301fb98cbae7dc06d04e4c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "signatureAfterChange": "\r \t\r \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "diff": ["+\t\r", "+\tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic){\t\r", "+\t\tTypeConverter converter = new TypeConverter();\r", "+\t\t\r", "+\t\tIType topLevelType = type;\r", "+\t\twhile(topLevelType.getDeclaringType() != null) {\r", "+\t\t\ttopLevelType = topLevelType.getDeclaringType();\r", "+\t\t}\r", "+\t\t\r", "+\t\tCompilationResult compilationResult = new CompilationResult((topLevelType.getElementName() + \".java\").toCharArray(), 1, 1);\r", "+\t\r", "+\t\tCompilationUnitDeclaration compilationUnit = new CompilationUnitDeclaration(problemReporter, compilationResult, 0);\r", "+\t\t\r", "+\t\tTypeDeclaration typeDeclaration = converter.buildCompilationUnit(type, compilationUnit, compilationResult, problemReporter);\r", "+\t\t\r", "+\t\tif(compilationUnit != null) {\t\r", "+\t\t\t// build AST from snippet\r", "+\t\t\tAbstractMethodDeclaration fakeMethod = parseSnippetMethod(snippet, position, localVariableTypeNames, localVariableNames, localVariableModifiers, isStatic);\r", "+\t\t\t\r", "+\t\t\t// merge AST\r", "+\t\t\tAbstractMethodDeclaration[] oldMethods = typeDeclaration.methods;\r", "+\t\t\tAbstractMethodDeclaration[] newMethods = new AbstractMethodDeclaration[oldMethods.length + 1];\r", "+\t\t\tSystem.arraycopy(oldMethods, 0, newMethods, 0, oldMethods.length);\r", "+\t\t\tnewMethods[oldMethods.length] = fakeMethod;\r", "+\t\t\ttypeDeclaration.methods = newMethods;\r", "+\t\r", "+\t\t\tif(DEBUG) {\r", "+\t\t\t\tSystem.out.println(\"SNIPPET COMPLETION AST :\");\r", "+\t\t\t\tSystem.out.println(compilationUnit.toString());\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tif (compilationUnit.types != null) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tlookupEnvironment.buildTypeBindings(compilationUnit);\r", "+\t\t\t\r", "+\t\t\t\t\tif ((unitScope = compilationUnit.scope) != null) {\r", "+\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(compilationUnit, true);\r", "+\t\t\t\t\t\tcompilationUnit.scope.faultInTypes();\r", "+\t\t\t\t\t\tcompilationUnit.resolve();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} catch (CompletionNodeFound e) {\r", "+\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "+\t\t\t\t\tif (e.astNode != null) {\r", "+\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "+\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "-\tpublic void complete(ICompilationUnit sourceUnit, int completionPosition) {\r"]}], "num": 58623}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8edab52aaa4272edffa5f28b9f1ab7a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ee37b38a26c17bdc90754a2e7824bf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments04() throws CoreException", "diff": ["-\t\tsearch(\"Single % <? extends Exception>\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(new Object())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Exception>Single<Object>(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new Single<Exception>(new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new Single<Exception>(gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new Single<RuntimeException>(new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new Single<RuntimeException>(gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), gs)] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcc7a75c440617fa7bda9ca0bc06d101", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test027() throws Exception", "signatureAfterChange": "  \tpublic void test041_field() throws Exception", "diff": ["-\t// check locations", "-\tpublic void test027() throws Exception {", "+", "+\tpublic void test041_field() throws Exception {", "-\t\t\t\t\"\t@H java.lang.String @E[] @F[] @G[] field;\\n\" + ", "+\t\t\t\t\"\tjava.lang.@H String @E[] @F[] @G[] field;\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {2}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY, ARRAY, ARRAY]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "-\t\t\t\"        target type = 0xe FIELD\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY, ARRAY]\\n\" + "]}], "num": 30593}
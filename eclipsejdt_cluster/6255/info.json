{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a20277d260a0ae23d488d030dca448c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57218cfd16d1e19ee3ee1970fd9bc0d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "8c3c66471763201137503760710e54e98c86a2ff", "commitAfterChange": "187b51c698ed19fcae521771e99092d2e75d91e0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 13, "signatureBeforeChange": " private boolean areReturnTypeErasuresEqual(MethodBinding one, MethodBinding two)", "signatureAfterChange": " private boolean isReturnTypeSubstituable(MethodBinding one, MethodBinding two)", "diff": ["-private boolean areReturnTypeErasuresEqual(MethodBinding one, MethodBinding two) {", "-\treturn areTypesEqual(one.returnType.erasure(), two.returnType.erasure());", "-}", "+private boolean isReturnTypeSubstituable(MethodBinding one, MethodBinding two) {", "+\tif (one.returnType == two.returnType) return true;", "+", "+\treturn isTypeSubstituable(one.returnType.erasure(), two.returnType.erasure());", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1e82fcd228942745c09e692e3a5bf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintFormula.java", "commitBeforeChange": "2b8dbfbce97ba1d81e1f6be5dc2afa2d7c8baa96", "commitAfterChange": "1643e643ece66b71720f5806c3958b961c2d479e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean isCompatibleWithInLooseInvocationContext(TypeBinding one, TypeBinding two, InferenceContext18 context)", "signatureAfterChange": " \tprotected boolean isCompatibleWithInLooseInvocationContext(TypeBinding one, TypeBinding two, InferenceContext18 context)", "diff": ["+\t\tif (one.isBaseType() == two.isBaseType()) // this also protects against comparing null & primitive", "+\t\t\treturn false;"]}], "num": 6255}
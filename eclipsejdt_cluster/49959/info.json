{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8249d8387e216b34cc757846f1f6ffa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "189092117d153c4e7ee7271d1327b402", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["+\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "+\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "-\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\tpreviousPosition = start;", "-\t\t\t\t\t\t\ttypeRef = null;", "-\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "+\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "-\t\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\tpreviousPosition = start;", "-\t\t\t\t\t\t\t\ttypeRef = null;", "-\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c651e2408170494da15393a7935a27ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "75b3fa9ae9731be86aae392ced007926403d2252", "commitAfterChange": "17a05f7aa39f4aa8cb4cc28f0cd4a9c9982fc28d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic boolean performConcurrentJob( \t\tIJob searchJob, \t\tint waitingPolicy, \t\tIProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob( \t\tIJob searchJob, \t\tint waitingPolicy, \t\tIProgressMonitor progress)", "diff": ["-\t\t\t\t\tint originalPriority = this.processingThread.getPriority();", "+\t\t\t\t\t// use local variable to avoid potential NPE (see bug 20435 NPE when searching java method", "+\t\t\t\t\t// and bug 42760 NullPointerException in JobManager when searching)", "+\t\t\t\t\tThread t = this.processingThread;", "+\t\t\t\t\tint originalPriority = t == null ? -1 : t.getPriority();", "+\t\t\t\t\t\tif (t != null) {", "+\t\t\t\t\t\t\tt.setPriority(Thread.currentThread().getPriority());", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t// use local variable to avoid potential NPE (see Bug 20435 NPE when searching java method)", "-\t\t\t\t\t\t\tThread t = this.processingThread;", "-\t\t\t\t\t\t\tif (t != null) {", "-\t\t\t\t\t\t\t\tt.setPriority(Thread.currentThread().getPriority());", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t// use local variable to avoid potential NPE (see Bug 20435 NPE when searching java method)", "-\t\t\t\t\t\t\tThread t = this.processingThread;", "-\t\t\t\t\t\t\tif (t != null) {", "-\t\t\t\t\t\t\t\tt.setPriority(originalPriority);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (t != null) {", "+\t\t\t\t\t\t\tt.setPriority(originalPriority);"]}], "num": 49959}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c6ab4abf9d59a5bf31c9f18850fe068", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d1d820d3d82b6cbe585b89a6a4c6485", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "signatureAfterChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "diff": ["+\t\t/* See if the recipient is meta-annotated with @Repeatable and if so validate constraints. We can't do this during resolution of @Repeatable itself as @Target and ", "+\t\t   @Retention etc could come later", "+\t\t*/   ", "-\t\t\t// See if this is meta-annotated as repeatable and if so validate constraints.", "-\t\t\t\tMemberValuePair[] valuePairs = annotation.memberValuePairs();", "-\t\t\t\tif (annotationType != null && annotationType.id == TypeIds.T_JavaLangAnnotationRepeatable && valuePairs != null && valuePairs.length > 0) {", "-\t\t\t\t\tannotation.checkRepeatableAnnotation(valuePairs[0], scope, valuePairs[0].compilerElementPair.value);", "-\t\t\t\t}", "+\t\t\t\tif (annotationType != null && annotationType.id == TypeIds.T_JavaLangAnnotationRepeatable)", "+\t\t\t\t\tannotation.checkRepeatableMetaAnnotation(scope);", "+\t\t\t\tContainerAnnotation container = null;", "-\t\t\t\t\t\tif (annotationType.isRepeatableAnnotation()) {", "-\t\t\t\t\t\t\tReferenceBinding resolvedContainer = annotationType.resolveContainerAnnotation();", "-\t\t\t\t\t\t\tif (resolvedContainer != null) {", "-\t\t\t\t\t\t\t\t// Since this is a repeated annotation, we need to check if the container is also used - so store it", "-\t\t\t\t\t\t\t\t// in a map of (container's ReferenceBinding -> the repeated source Annotation)", "+\t\t\t\t\t\tif (distinctAnnotations == annotations) {", "+\t\t\t\t\t\t\tSystem.arraycopy(distinctAnnotations, 0, distinctAnnotations = new AnnotationBinding[length], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdistinctAnnotations[j] = null; // report/process it only once", "+\t\t\t\t\t\tif (annotationType.isRepeatableAnnotationType()) {", "+\t\t\t\t\t\t\tAnnotation persistibleAnnotation = sourceAnnotations[i].getPersistibleAnnotation();", "+\t\t\t\t\t\t\tif (persistibleAnnotation instanceof ContainerAnnotation)", "+\t\t\t\t\t\t\t\tcontainer = (ContainerAnnotation) persistibleAnnotation;", "+\t\t\t\t\t\t\tif (container == null) {  // first encounter with a duplicate.", "+\t\t\t\t\t\t\t\tReferenceBinding containerAnnotationType = annotationType.containerAnnotationType();", "+\t\t\t\t\t\t\t\tcontainer = new ContainerAnnotation(sourceAnnotations[i], containerAnnotationType, scope);", "-\t\t\t\t\t\t\t\timplicitContainerAnnotations.put(resolvedContainer, sourceAnnotations[i]);", "-\t\t\t\t\t\t\t\t// Validate the repeated *use* of a repeatable annotation.", "-\t\t\t\t\t\t\t\tAnnotation.checkContainingAnnotation(sourceAnnotations[i], scope, resolvedContainer, annotationType);", "+\t\t\t\t\t\t\t\timplicitContainerAnnotations.put(containerAnnotationType, sourceAnnotations[i]);", "+\t\t\t\t\t\t\tcontainer.addContainee(sourceAnnotations[j]);", "-\t\t\t\t\t\t\tif (distinctAnnotations == annotations) {", "-\t\t\t\t\t\t\t\tSystem.arraycopy(distinctAnnotations, 0, distinctAnnotations = new AnnotationBinding[length], 0, length);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdistinctAnnotations[j] = null; // report it only once", "+\t\t\t\tif (container != null) {", "+\t\t\t\t\tcontainer.resolveType(scope);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86515b6e923249cab774fc9155ff7a3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "commitAfterChange": "f9b5a54e0afa9af686e707bcc0c484de0728c860", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression reference)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression reference)", "diff": ["-\t\tif (name.getStartPosition() < start) {// check for new ", "+\t\tif (name.getStartPosition() == -1 && name.getIdentifier().equals(\"<init>\")) { // check for \"new\"  //$NON-NLS-1$", "-\t\t\tif (!name.getIdentifier().equals(\"<init>\")) { //$NON-NLS-1$", "-\t\t\t\tNullLiteral nullLiteral = new NullLiteral(this.ast);", "-\t\t\t\tnullLiteral.setFlags(nullLiteral.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\tresult = nullLiteral;", "-\t\t\t} else {", "-\t\t\t\tCreationReference creationReference = new CreationReference(this.ast);", "-\t\t\t\tcreationReference.setExpression(convert(lhs));", "-\t\t\t\ttypeArguments = creationReference.typeArguments();", "-\t\t\t\tresult = creationReference;", "+\t\t\tType type = null;", "+\t\t\tif (lhs instanceof TypeReference) {", "+\t\t\t\ttype = convertType((TypeReference) lhs);", "+\t\t\t} else if (lhs instanceof NameReference) {", "+\t\t\t\tName typeName = convert((NameReference) lhs);", "+\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\tsimpleType.setName(typeName);", "+\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\trecordNodes(simpleType, lhs);", "+\t\t\t\t}", "+\t\t\t\tsimpleType.setSourceRange(lhs.sourceStart, lhs.sourceEnd - lhs.sourceStart + 1);", "+\t\t\t\ttype = simpleType;", "+\t\t\tCreationReference creationReference = new CreationReference(this.ast);", "+\t\t\tcreationReference.setType(type);", "+\t\t\ttypeArguments = creationReference.typeArguments();", "+\t\t\tresult = creationReference;"]}], "num": 44650}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58ccd248ddc30e4fe7aee60d2dd54ba6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e94b3568ee5e51ca4bad576993a2b61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKeyScanner.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tint nextToken()", "signatureAfterChange": " \t \tint nextToken()", "diff": ["-\tint nextToken() {", "-\t\tthis.start = ++this.index;", "-\t\tint length = this.source.length;", "-\t\twhile (this.index <= length) {", "-\t\t\tchar currentChar = this.index == length ? Character.MIN_VALUE : this.source[this.index];", "-\t\t\tswitch (currentChar) {", "-\t\t\t\tcase '/':", "-\t\t\t\tcase ',':", "-\t\t\t\tcase Character.MIN_VALUE:", "-\t\t\t\t\tswitch (this.token) {", "-\t\t\t\t\t\tcase START:", "-\t\t\t\t\t\tcase METHOD: // parameter", "-\t\t\t\t\t\tcase ARRAY:", "-\t\t\t\t\t\t\tthis.token = PACKAGE;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase PACKAGE:", "-\t\t\t\t\t\t\tif (this.source[this.start-1] == ',')", "-\t\t\t\t\t\t\t\tthis.token = PACKAGE;", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\tthis.token = TYPE;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TYPE:", "-\t\t\t\t\t\t\tswitch (this.source[this.start-1]) {", "-\t\t\t\t\t\t\t\tcase '$':", "-\t\t\t\t\t\t\t\t\tthis.token = TYPE;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase ',':", "-\t\t\t\t\t\t\t\tcase '<':", "-\t\t\t\t\t\t\t\tcase '&':", "-\t\t\t\t\t\t\t\t\tthis.token = PACKAGE;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\tthis.token = FIELD;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TYPE_PARAMETER:", "-\t\t\t\t\t\t\tthis.token = PACKAGE;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn this.token;", "-\t\t\t\tcase '$':", "-\t\t\t\tcase '[':", "-\t\t\t\tcase '<':", "-\t\t\t\tcase '&':", "-\t\t\t\t\tswitch (this.token) {", "-\t\t\t\t\t\tcase START: // case of base type with array dimension", "-\t\t\t\t\t\t\tthis.token = PACKAGE;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase PACKAGE:", "-\t\t\t\t\t\t\tthis.token = TYPE;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TYPE:", "-\t\t\t\t\t\t\tthis.token = TYPE;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn this.token;", "-\t\t\t\tcase '(':", "-\t\t\t\t\tthis.token = METHOD;", "-\t\t\t\t\treturn this.token;", "-\t\t\t\tcase ')':", "-\t\t\t\tcase '>':", "-\t\t\t\t\tthis.start = ++this.index;", "-\t\t\t\t\tif (this.index == length || this.source[this.index] != '$') {", "-\t\t\t\t\t\tthis.token = END;", "-\t\t\t\t\t\treturn this.token;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.start = ++this.index;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase ']':", "-\t\t\t\t\tthis.start--;", "-\t\t\t\t\tthis.index++;", "-\t\t\t\t\twhile (this.index < length && this.source[this.index] == '[') {", "-\t\t\t\t\t\tthis.index +=2;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.token = ARRAY;", "-\t\t\t\t\treturn this.token;", "-\t\t\t\tcase ':':", "-\t\t\t\t\tthis.token = TYPE_PARAMETER;", "-\t\t\t\t\treturn this.token;", "-\t\t\t}", "-\t\t\tthis.index++;", "-\t\t}", "-\t\tthis.token = END;", "-\t\treturn this.token;", "-\t}", "+\t", "+\tint nextToken() {", "+\t\tthis.start = this.token == ARRAY ? this.index : ++this.index;", "+\t\tint previousTokenEnd = this.index-1;", "+\t\tint length = this.source.length;", "+\t\twhile (this.index <= length) {", "+\t\t\tchar currentChar = this.index == length ? Character.MIN_VALUE : this.source[this.index];", "+\t\t\tswitch (currentChar) {", "+\t\t\t\tcase 'B':", "+\t\t\t\tcase 'C':", "+\t\t\t\tcase 'D':", "+\t\t\t\tcase 'F':", "+\t\t\t\tcase 'I':", "+\t\t\t\tcase 'J':", "+\t\t\t\tcase 'S':", "+\t\t\t\tcase 'V':", "+\t\t\t\tcase 'Z':", "+\t\t\t\t\t// base type", "+\t\t\t\t\tif (this.start == previousTokenEnd+1) {", "+\t\t\t\t\t\tthis.index++;", "+\t\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\t\treturn this.token;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'L':", "+\t\t\t\tcase 'T':", "+\t\t\t\t\tif (this.start == previousTokenEnd+1) {", "+\t\t\t\t\t\tthis.start = ++this.index;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ';':", "+\t\t\t\tcase '$':", "+\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\tcase '.':", "+\t\t\t\t\tthis.start = this.index+1;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '[':", "+\t\t\t\t\twhile (this.index < length && this.source[this.index] == '[')", "+\t\t\t\t\t\tthis.index++;", "+\t\t\t\t\tthis.token = ARRAY;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\tcase '<':", "+\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\tcase '(':", "+\t\t\t\t\tthis.token = METHOD;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\tcase ')':", "+\t\t\t\t\tthis.start = ++this.index;", "+\t\t\t\t\tthis.token = END;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\tcase ':':", "+\t\t\t\t\tthis.token = TYPE_PARAMETER;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\tcase Character.MIN_VALUE:", "+\t\t\t\t\tswitch (this.token) {", "+\t\t\t\t\t\tcase START:", "+\t\t\t\t\t\t\tthis.token = PACKAGE;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TYPE:", "+\t\t\t\t\t\t\tif (this.index > this.start && this.source[this.start-1] == '.')", "+\t\t\t\t\t\t\t\tthis.token = FIELD;", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\tthis.token = END;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tthis.token = END;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn this.token;", "+\t\t\t}", "+\t\t\tthis.index++;", "+\t\t}", "+\t\tthis.token = END;", "+\t\treturn this.token;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b25b277c3686570bb87a8a500715dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "510bca02ec1705cb49e8296894c2f20084ae432d", "commitAfterChange": "4b7339d0380d230f31bd3019b0bc7395f10d2215", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t\tString normalized(String originalValue)", "signatureAfterChange": "  \t\tString normalized(String originalValue)", "diff": ["+\t\t\tString result;", "-\t\t\t\treturn super.normalized(originalValue);", "-\t\t\tfinal int START = 0, KEEPING = 1, KEEPING_R = 2, SKIPING = 3, SKIPING_R = 4, END = 5, ERROR = 6;", "-\t\t\tint state = START, currentLineIndex = 0, currentCharIndex = 0, sourceLength;", "-\t\t\tchar currentChar = '\\0';", "-\t\t\tif (first <= 0)", "-\t\t\t\tstate = SKIPING;", "-\t\t\telse", "-\t\t\t\tstate = KEEPING;", "-\t\t\tStringBuffer normalizedValueBuffer = new StringBuffer(), source = new StringBuffer(", "-\t\t\t\t\toriginalValue);", "-\t\t\tsourceLength = source.length();", "-\t\t\twhile (state != END && state != ERROR) {", "-\t\t\t\tif (currentCharIndex < sourceLength) {", "-\t\t\t\t\tcurrentChar = source.charAt(currentCharIndex++);", "-\t\t\t\t\tswitch (currentChar) {", "-\t\t\t\t\tcase '\\r':", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tstate = KEEPING_R;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING:", "-\t\t\t\t\t\t\tstate = SKIPING_R;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '\\n':", "-\t\t\t\t\t\tcurrentLineIndex++;", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING_R:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tif (currentLineIndex == first) {", "-\t\t\t\t\t\t\t\tstate = SKIPING;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING_R:", "-\t\t\t\t\t\t\t// in effect, we tolerate too big first and number", "-\t\t\t\t\t\t\t// values", "-\t\t\t\t\t\t\tif (currentLineIndex >= first + number) {", "-\t\t\t\t\t\t\t\tif (currentCharIndex < sourceLength)", "-\t\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(source", "-\t\t\t\t\t\t\t\t\t\t\t.substring(currentCharIndex));", "-\t\t\t\t\t\t\t\tstate = END;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING:", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t}", "-\t\t\t\t} ", "-\t\t\t\telse if (currentChar == '\\n')", "-\t\t\t\t\tstate = END;", "+\t\t\t\tresult = super.normalized(originalValue);", "+\t\t\telse {", "+\t\t\t\tfinal int START = 0, KEEPING = 1, KEEPING_R = 2, SKIPING = 3, SKIPING_R = 4, END = 5, ERROR = 6;", "+\t\t\t\tint state = START, currentLineIndex = 0, currentCharIndex = 0, sourceLength;", "+\t\t\t\tchar currentChar = '\\0';", "+\t\t\t\tif (first <= 0)", "+\t\t\t\t\tstate = SKIPING;", "-\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\tstate = KEEPING;", "+\t\t\t\tStringBuffer normalizedValueBuffer = new StringBuffer(), source = new StringBuffer(", "+\t\t\t\t\t\toriginalValue);", "+\t\t\t\tsourceLength = source.length();", "+\t\t\t\twhile (state != END && state != ERROR) {", "+\t\t\t\t\tif (currentCharIndex < sourceLength) {", "+\t\t\t\t\t\tcurrentChar = source.charAt(currentCharIndex++);", "+\t\t\t\t\t\tswitch (currentChar) {", "+\t\t\t\t\t\tcase '\\r':", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tstate = KEEPING_R;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING:", "+\t\t\t\t\t\t\t\tstate = SKIPING_R;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\\n':", "+\t\t\t\t\t\t\tcurrentLineIndex++;", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING: // tolerate Linux line delimiters", "+\t\t\t\t\t\t\tcase KEEPING_R:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tif (currentLineIndex == first) {", "+\t\t\t\t\t\t\t\t\tstate = SKIPING;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING: // tolerate Linux line delimiters", "+\t\t\t\t\t\t\tcase SKIPING_R:", "+\t\t\t\t\t\t\t\t// in effect, we tolerate too big first and number", "+\t\t\t\t\t\t\t\t// values", "+\t\t\t\t\t\t\t\tif (currentLineIndex >= first + number) {", "+\t\t\t\t\t\t\t\t\tif (currentCharIndex < sourceLength)", "+\t\t\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(source", "+\t\t\t\t\t\t\t\t\t\t\t\t.substring(currentCharIndex));", "+\t\t\t\t\t\t\t\t\tstate = END;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING:", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} ", "+\t\t\t\t\telse if (currentChar == '\\n')", "+\t\t\t\t\t\tstate = END;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t}", "+\t\t\t\tif (state == ERROR)", "+\t\t\t\t\tnormalizedValueBuffer", "+\t\t\t\t\t\t\t.append(\"UNEXPECTED ERROR in LinesRangeNormalizer\");", "+\t\t\t\tresult = super.normalized(normalizedValueBuffer.toString());", "-\t\t\tif (state == ERROR)", "-\t\t\t\tnormalizedValueBuffer", "-\t\t\t\t\t\t.append(\"UNEXPECTED ERROR in LinesRangeNormalizer\");", "-\t\t\treturn super.normalized(normalizedValueBuffer.toString());", "+\t\t\treturn result;"]}], "num": 37952}
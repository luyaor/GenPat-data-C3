{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b9b2a41dec7bfb69873355433ee26d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41fed8cea7c3fe3f154ca9ed589e5327", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tif ((expression.bits & AstNode.ParenthesizedMASK) != 0) {", "+\t\tif ((expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) != 0) {", "-\t\tif (expression instanceof ArrayAllocationExpression) {", "-\t\t\treturn convert((ArrayAllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) expression);", "-\t\tif (expression instanceof QualifiedAllocationExpression) {", "-\t\t\treturn convert((QualifiedAllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) expression);", "-\t\tif (expression instanceof AllocationExpression) {", "-\t\t\treturn convert((AllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) expression);", "-\t\tif (expression instanceof CompoundAssignment) {", "-\t\t\treturn convert((CompoundAssignment) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) expression);", "-\t\tif (expression instanceof ClassLiteralAccess) {", "-\t\t\treturn convert((ClassLiteralAccess) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) expression);", "-\t\tif (expression instanceof FalseLiteral) {", "-\t\t\treturn convert((FalseLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FalseLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FalseLiteral) expression);", "-\t\tif (expression instanceof TrueLiteral) {", "-\t\t\treturn convert((TrueLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TrueLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TrueLiteral) expression);", "-\t\tif (expression instanceof CharLiteral) {", "-\t\t\treturn convert((CharLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CharLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CharLiteral) expression);", "-\t\tif (expression instanceof DoubleLiteral) {", "-\t\t\treturn convert((DoubleLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) expression);", "-\t\tif (expression instanceof FloatLiteral) {", "-\t\t\treturn convert((FloatLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FloatLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FloatLiteral) expression);", "-\t\tif (expression instanceof IntLiteralMinValue) {", "-\t\t\treturn convert((IntLiteralMinValue) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) expression);", "-\t\tif (expression instanceof IntLiteral) {", "-\t\t\treturn convert((IntLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteral) expression);", "-\t\tif (expression instanceof LongLiteralMinValue) {", "-\t\t\treturn convert((LongLiteralMinValue) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) expression);", "-\t\tif (expression instanceof LongLiteral) {", "-\t\t\treturn convert((LongLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteral) expression);", "-\t\t\treturn convert((ExtendedStringLiteral) expression);", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) expression);", "-\t\tif (expression instanceof AND_AND_Expression) {", "-\t\t\treturn convert((AND_AND_Expression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) expression);", "-\t\tif (expression instanceof OR_OR_Expression) {", "-\t\t\treturn convert((OR_OR_Expression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) expression);", "-\t\tif (expression instanceof EqualExpression) {", "-\t\t\treturn convert((EqualExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.EqualExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.EqualExpression) expression);", "-\t\tif (expression instanceof BinaryExpression) {", "-\t\t\treturn convert((BinaryExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) expression);", "-\t\tif (expression instanceof UnaryExpression) {", "-\t\t\treturn convert((UnaryExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.UnaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.UnaryExpression) expression);", "-\t\tif (expression instanceof MessageSend) {", "-\t\t\treturn convert((MessageSend) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.MessageSend) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.MessageSend) expression);", "-\t\tif (expression instanceof Reference) {", "-\t\t\treturn convert((Reference) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Reference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Reference) expression);", "-\t\tif (expression instanceof TypeReference) {", "-\t\t\treturn convert((TypeReference) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddfd62a5b9394ea9f712674cfe8f49b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 51, "signatureBeforeChange": " \t\t\t \tpublic PrefixExpression convert(UnaryExpression expression)", "signatureAfterChange": " \t\t\t \tpublic PrefixExpression convert(org.eclipse.jdt.internal.compiler.ast.UnaryExpression expression)", "diff": ["-\tpublic PrefixExpression convert(UnaryExpression expression) {", "+\tpublic PrefixExpression convert(org.eclipse.jdt.internal.compiler.ast.UnaryExpression expression) {", "-\t\tswitch ((expression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {", "-\t\t\tcase OperatorIds.PLUS :", "+\t\tswitch ((expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) {", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\tcase OperatorIds.MINUS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\tcase OperatorIds.NOT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT :", "-\t\t\tcase OperatorIds.TWIDDLE :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.TWIDDLE :"]}], "num": 23612}
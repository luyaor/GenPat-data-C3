{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5965fbd0b70919d074efa94ca5fe36c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ba1e9bc62119e10653367aa16d06c59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "diff": ["-\t\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {", "+\t\t\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tsetSourceRange(importReference.sourceStart, importReference.sourceEnd);", "-\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)importReference;", "-\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\t\tsetSourceRange(importReference.sourceStart, importReference.sourceEnd);", "+\t\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)importReference;", "+\t\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8e7ad514144295f63ac628383a4466c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c8343c5add6dda54a91bc7ca5cb7fef7041d4b69", "commitAfterChange": "acfecc45c26bfc8a63894e8f579dfa918573dba0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "-\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "-\t\t\t\t}", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "-\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\tSourceTypeBinding enclosingType = scope.enclosingSourceType();", "+\t\t\t\tif(!enclosingType.isAnnotationType()) {", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t}", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "+\t\t\t\t\t\tproposeNewMethod(this.completionToken, enclosingType);", "+\t\t\t\t\t}", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "-\t\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "-\t\t\t\t\t}", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "-\t\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\t\tSourceTypeBinding enclosingType = scope.enclosingSourceType();", "+\t\t\t\t\tif(!enclosingType.isAnnotationType()) {", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "+\t\t\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\t\t\t}"]}], "num": 730}
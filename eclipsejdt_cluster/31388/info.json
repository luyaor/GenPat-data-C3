{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "473d29efa7ca8f56e97a0845c50896d5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0200876327d749ee1b19efea9e616df6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "2eeba3a1a72b7ffb1126aea370d38335aef50755", "commitAfterChange": "fe86976332660361e34b2b3204aeb422d21cbf13", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean hasBoundedParameters(ParameterizedTypeBinding parameterizedType)", "signatureAfterChange": " boolean hasBoundedParameters(ParameterizedTypeBinding parameterizedType)", "diff": ["+\tif (arguments == null) return false;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0266ad1faeb411ebd87cd5b0ea938d85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-\t\tfor (int i = 0; i < argsLength; i++) {", "-\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "+\t\t// Disable filter on argument syntax to allow generic type search.", "+\t\t// (see  bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990)", "+\t\tif (!this.pattern.mustResolveGeneric) {", "+\t\t\tfor (int i = 0; i < argsLength; i++) {", "+\t\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c705407d20d59d1837ea1efaec3d97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "1c0300aef45290b1b07b75dacdaa032c5c3ca6a9", "commitAfterChange": "d3b3267f756426a7663f25bb90920f729305405e", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "\r \tprotected void putInfo(IJavaElement element, Object info)", "signatureAfterChange": "\r \t\r \tprotected void putInfo(IJavaElement element, Object info)", "diff": ["-}\r", "+\t\r", "-\r\r", "+\t\tif (fModelInfo == null) {\r", "+\t\t\treturn;\r", "+\t\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c7fe1c6eec729bccbbf0e0f4ac8830", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "53e59f4bd82e02ab18d570f640623d6567762067", "commitAfterChange": "83c109b7c53737ef4619646925b9d4265eb983d8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope)", "diff": ["+\t\t\tif (methodBinding == null) {", "+\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04f55d8016d22a51b7a049aca0875026", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "0afb6a8af8c4303e5dd78ba653e96f2baec6aaff", "commitAfterChange": "1decf6de90c742ae800c62bb40e904ecf7cf0dbd", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": " protected void consumeFormalParameter(boolean isVarArgs)", "signatureAfterChange": " protected void consumeFormalParameter(boolean isVarArgs)", "diff": ["-\t\ttype.sourceEnd = endOfEllipsis;", "+\t\tif (extendedDimensions == 0) {", "+\t\t\ttype.sourceEnd = endOfEllipsis;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0561597ca404973f98bbfdf1e8ac4d6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexedFile.java", "commitBeforeChange": "e05bfbc0d7f324c373674b01e507d9cea5308737", "commitAfterChange": "6f8d2b2761ad5749ea0c9d799ad1153644b1a925", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic String getProperty(String propertyName)", "signatureAfterChange": "\r \tpublic String getProperty(String propertyName)", "diff": ["+\t\tif (properties == null) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ab95f006ac9e36f160fc58748a081ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "70823bcdc247c361af65329f86a126cf9616a2fa", "commitAfterChange": "1bd4bf4c4dea2f86129d0f613a3da00767d07bfb", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["+\t\tif (preferences == null) return options; // cannot do better (non-Java project)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0081b63dbdf7d4c4504b8aefbcbafc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "ca2d3ce8265fe41695ca043d40ccc35d5ce77b25", "commitAfterChange": "8fd47ede750ba6005aab3e86ceccb03a6e16dba8", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "signatureAfterChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "diff": ["-\t\tHashSet containerPaths = (HashSet) allContainerPaths.get(javaProjectToInit);", "-\t\tif (containerPaths == null) {", "-\t\t\tcontainerPaths = new HashSet();", "-\t\t\tallContainerPaths.put(javaProjectToInit, containerPaths);", "+\t\tif (javaProjectToInit != null) {", "+\t\t\tHashSet containerPaths = (HashSet) allContainerPaths.get(javaProjectToInit);", "+\t\t\tif (containerPaths == null) {", "+\t\t\t\tcontainerPaths = new HashSet();", "+\t\t\t\tallContainerPaths.put(javaProjectToInit, containerPaths);", "+\t\t\t}", "+\t\t\tcontainerPaths.add(containerToInit);", "+\t\t\t// mark container as being initialized", "+\t\t\tcontainerAddInitializationInProgress(javaProjectToInit, containerToInit);", "-\t\tcontainerPaths.add(containerToInit);", "-\t\t// mark container as being initialized", "-\t\tcontainerAddInitializationInProgress(javaProjectToInit, containerToInit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c247b889fea6a966805ad15cfdd2d4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \tpublic IPath getSourceAttachmentPath() throws JavaModelException", "signatureAfterChange": "\r \tpublic IPath getSourceAttachmentPath() throws JavaModelException", "diff": ["+\t\tif (index < 0) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c2618a96f12c705c76788c2efb85357", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "52f1bce82cf84f4bd7e470d8f3862f946b240a0c", "commitAfterChange": "71ff0d175aa9017dc9dde1d84ba3d3d26f189ee5", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic String findSourceFileName(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic String findSourceFileName(IType type, IBinaryType info)", "diff": ["+\t\t\t\t\tif (enclosingType == null) return null; // play it safe"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c685aceb31ffd74d737d285fc03384a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "ff3d786f8b733e34cd64f8ef3efff230a2dbff42", "commitAfterChange": "d8e17e252326ade78baaea3eb05d18d16eaf07ae", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " public IPath getSourceAttachmentRootPath() throws JavaModelException", "signatureAfterChange": " public IPath getSourceAttachmentRootPath() throws JavaModelException", "diff": ["-\tint index= serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);", "+\tint index = serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);", "+\tif (index == -1) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e68f12c3cde44dbd1af1c76091c92e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "cabff81fb79628d230da7b6a1d02a40df2149786", "commitAfterChange": "08d315c8709c9a7cf15386d0099bb5f6bd93113a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveTypeExpecting( \t\t\tBlockScope scope, \t\t\tTypeBinding expectedType)", "signatureAfterChange": " \tpublic TypeBinding resolveTypeExpecting( \t\t\tBlockScope scope, \t\t\tTypeBinding expectedType)", "diff": ["+\t\tif (type == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ec5dca82cd3e3e45c59f6593fcf1d42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "831cc3189f0cb9dff0063b04b6b09b594f5f2ac5", "commitAfterChange": "65342aeebf6cd3cc7f67b767df982173c6664f98", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\t\t\tfor (int i = 0; i < methods.length; i++) {\r", "-\t\t\t\tif(!methods[i].isDefaultAbstract()) {\r", "-\t\t\t\t\tmethodsFound.add(methods[i]);\r", "+\t\t\tif (methods != null){\r", "+\t\t\t\tfor (int i = 0; i < methods.length; i++) {\r", "+\t\t\t\t\tif(!methods[i].isDefaultAbstract()) {\r", "+\t\t\t\t\t\tmethodsFound.add(methods[i]);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fb17603e261343791d812c811dd49c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "128a99659b73df0d65c1b7965233f291b8bbcedc", "commitAfterChange": "2d75a247df9701b0f81bd7f30330af100821c0c6", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tLambdaExpression copy()", "signatureAfterChange": "  \tLambdaExpression copy()", "diff": ["-\t\tLambdaExpression copy =  (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\tLambdaExpression copy =  (LambdaExpression) parser.parseLambdaExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "-\t\tcopy.valueCompatible = this.valueCompatible;", "-\t\tcopy.voidCompatible = this.voidCompatible;", "-\t\tcopy.shapeAnalysisComplete = this.shapeAnalysisComplete;", "+", "+\t\tif (copy != null) { // ==> syntax errors", "+\t\t\tcopy.valueCompatible = this.valueCompatible;", "+\t\t\tcopy.voidCompatible = this.voidCompatible;", "+\t\t\tcopy.shapeAnalysisComplete = this.shapeAnalysisComplete;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10ba9d7d6ee2e4718d5c8efbb8e575c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "f2f45b09c61cdc4a3bb7702f92f8e4fdcb969052", "commitAfterChange": "f33fe27819e8270eb24d0e5a64c8fba3d823b0e8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static boolean isEnabled(IJavaProject jproject)", "signatureAfterChange": " \tpublic static boolean isEnabled(IJavaProject jproject)", "diff": ["+\t\t// TODO: Walter have a fix for this problem.", "+\t\tif( jproject == null )", "+\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15d40611e5371aad3916e5c846041beb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "5f30987ed4c6718fa22f7e5f22394952935ee8ac", "commitAfterChange": "4855dee32b913a0e5805b6cdbec146242fbf4388", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["+\t// short is compatible with int, but as far as covariance is concerned, its not", "+\tif (one.returnType.isBaseType()) return false;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "166c1b6af67a9cfde0d709534260ac97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "087fc490b3f2eceb06ee753232cc58bb9c007c8d", "commitAfterChange": "088d50df9bb1034736e260d1e59943962e552af0", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tfinal static public String[] toStrings(char[][] array)", "signatureAfterChange": " \tfinal static public String[] toStrings(char[][] array)", "diff": ["+\t\tif (length == 0) return NO_STRINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "172d43ef902ab25d31af4de5c582275b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9d2a938921495f9335aff59136f341338ddac647", "commitAfterChange": "e7a1ce9bae1ac90cb423b78b8d75c05444193046", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tint getCurrentIndentation(char[] whitespaces, int offset)", "signatureAfterChange": "  \tint getCurrentIndentation(char[] whitespaces, int offset)", "diff": ["+\t\tif (whitespaces == null) return offset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b200e4be1eefb8eb1c4dc36223dbf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "c06e07ca77c0b109ce7d4e6c3f60180a3777bc7d", "commitAfterChange": "a1d61f4860d08002c8a193d70dccc7a85c870208", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t} else if (this.receiver instanceof QualifiedSuperReference){ // qualified super", "-", "+\t} else if (this.receiver instanceof QualifiedSuperReference) { \t// qualified super", "+\t\tif (this.actualReceiverType.isInterface()) ", "+\t\t\treturn; // invoking an overridden default method, which is accessible/public by definition"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19256ac6de4bb6bdfbf7e5366cba2ea3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "9837a318cff1d3ca193241d0933e473191f5604d", "commitAfterChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\t\t\tboolean isPrivate = Flags.isPrivate(((IMethod) focus).getFlags());", "-\t\t\t\tif (isPrivate && !CharOperation.equals(method.declaringClass.sourceName, focus.getParent().getElementName().toCharArray())) {", "-\t\t\t\t\treturn; // finally the match was not possible", "+\t\t\t\tif (method != null) {", "+\t\t\t\t\tboolean isPrivate = Flags.isPrivate(((IMethod) focus).getFlags());", "+\t\t\t\t\tif (isPrivate && !CharOperation.equals(method.declaringClass.sourceName, focus.getParent().getElementName().toCharArray())) {", "+\t\t\t\t\t\treturn; // finally the match was not possible", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ce2a65c9f279e22e5a1feecf650f8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "d2182a0a13e034531dc832fab57ec580345f839c", "commitAfterChange": "909339e2b2e49887ed38a6b8037978cd008f3b63", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public static String displayString(String inputString, int indent)", "signatureAfterChange": " public static String displayString(String inputString, int indent)", "diff": ["+\tif (inputString == null)", "+\t\treturn \"null\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19cebc29266d0570f8bd049c0fc16c65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java", "commitBeforeChange": "df84bc0b0e74080458b4e3f35c6e77ec6fed2587", "commitAfterChange": "2bb013de372e754bf58118fac6dab82d5a5c9625", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RecoveredElement add(LocalDeclaration localDeclaration, int bracketBalanceValue, boolean delegatedByParent)", "signatureAfterChange": " public RecoveredElement add(LocalDeclaration localDeclaration, int bracketBalanceValue, boolean delegatedByParent)", "diff": ["+\tif (localDeclaration.isRecoveredFromLoneIdentifier()) {", "+\t\treturn this; // skip, the local will be mutated into an assignment and added later, see Parser.consumeLocalVariableDeclarationStatement", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a66de81764a2955145a520fc0c48996", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "ab98a9939a975b86dfdde2e7a0a6d2de49a261f2", "commitAfterChange": "2bcb3d0c9fa104ef6edd7e53ba16f8b7aff57348", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate String formatExpression(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate String formatExpression(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "diff": ["-\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\tif (lineSeparator != null) {", "+\t\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b5dca70ac876c67b4bd420f86c8fb7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6e5ceb8786f5ada5e37df504e04cd8d390bc4075", "commitAfterChange": "27e2724327c75ddbe7646447a4af212947b149ed", "methodNumberBeforeChange": 593, "methodNumberAfterChange": 593, "signatureBeforeChange": "  public void discouragedInvocationIncompatibleArgument(MethodBinding method, Expression argument, \t\t\t\t\t\t\tTypeBinding expectedType, TypeBinding declaringType, boolean castable)", "signatureAfterChange": "  public void discouragedInvocationIncompatibleArgument(MethodBinding method, Expression argument, \t\t\t\t\t\t\tTypeBinding expectedType, TypeBinding declaringType, boolean castable)", "diff": ["+\tif (castable && this.options.acceptCastableArgInDiscouragedInvocation)", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b73c442fd7fff21daf4916fe8251d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b5a77485d9f402d8e9320bc140c7dcd6fc18b9c8", "commitAfterChange": "168f2cd311cda9055baec08babe652e5b9c3fb27", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\tif (level != null) { // ensure that the reference has not been already reported while visiting", "+\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);", "-\t\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf323bc5996416580d1446cd9a5f08e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4dd4298e54cdb8e3a760f2a27e21018a12393e22", "commitAfterChange": "7dddcf3cd8a65acd62db0614dd8c16c0f82c07f1", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;  // tag length", "-\t\t\t    \tif (nodeStart > (previousEnd+1)) {", "-\t\t\t    \t\tlength++; // include space between nodes", "-\t\t\t    \t}", "-\t\t\t\t\tthis.scanner.resetTo(text.sourceStart , node.sourceEnd);", "+\t\t\t\t\tif (text != null) {", "+\t\t\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;  // tag length", "+\t\t\t\t    \tif (nodeStart > (previousEnd+1)) {", "+\t\t\t\t    \t\tlength++; // include space between nodes", "+\t\t\t\t    \t}", "+\t\t\t\t\t\tthis.scanner.resetTo(text.sourceStart , node.sourceEnd);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c89313263078b5b5934caa020515028", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/AstNodeFinder.java", "commitBeforeChange": "5a3a5f398a8971568181868be2d5d76728016763", "commitAfterChange": "44cc03459f9020b4da0ebdb14fa0624b7d8dfc4d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic AbstractMethodDeclaration findMethod(IMethod methodHandle)", "signatureAfterChange": " \tpublic AbstractMethodDeclaration findMethod(IMethod methodHandle)", "diff": ["+\t\tif (typeDecl == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cacd0bca8b0a0d6438f43f3a5fa9c66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java", "commitBeforeChange": "525a282931680472e1c4e0ea3a9d163e6052ec36", "commitAfterChange": "2a06a2f12269eff15a3cd93ba4beef31628cbc6c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\treturn delegateThis.type;\r", "+\tif (delegateThis.isValidBinding()) return delegateThis.type;\r", "+\treturn snippetType;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ece28b340091b3979f721b95a6dcabf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "872a2a5f8765c31a16e2683b80f68bce0ff5abb5", "commitAfterChange": "0e93081703902f8585232d08b2ba93659eaa2df7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public Binding getTypeOrPackage(char[] name)", "signatureAfterChange": "  public Binding getTypeOrPackage(char[] name)", "diff": ["-\tif (packageBinding == null) {", "-\t\t// find the package", "-\t\tpackageBinding = findPackage(name);", "-\t}", "+\tif (packageBinding == null) {", "+\t\t// find the package", "+\t\tpackageBinding = findPackage(name);", "+\t\tif (packageBinding != null) return packageBinding; ", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fc1af231090591c1d043b923d794423", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "commitAfterChange": "b7bd88d9bc859369d4d17c37d109bd3331837ba7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int match(MessageSend msgSend, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MessageSend msgSend, MatchingNodeSet nodeSet)", "diff": ["+\tif (!this.pattern.findReferences) return IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207e95c42eed633de301e27ee04c97c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2c6ec7b60d7fde4e52ee4a2fc2921535515e4991", "commitAfterChange": "0a204bec13c166245ab38aefac187fb60ca5634f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t", "+\t\tif (originalType == null) return null;", "-\t\t\t\treturn substitution.substitute( (TypeVariableBinding) originalType);", "+\t\t\t\treturn substitution.substitute((TypeVariableBinding) originalType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210bf526f6b0e878db97d5727b15227c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "b5c1652db351290a42a75d3cdd3241441a4413e2", "commitAfterChange": "43bc355f1a88457ab70fc9f06fe5c67fac23d207", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "signatureAfterChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "diff": ["-\t\t\tExpression expression = parseMemberValue(annotationSource);", "-\t\t\t/*", "-\t\t\t * expression can be null or not an annotation if the source has changed between", "-\t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "-\t\t\t * this parsing occured.", "-\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "-\t\t\t */", "-\t\t\tif (expression instanceof Annotation) {", "-\t\t\t\tannotations[recordedAnnotations++] = (Annotation) expression;", "+\t\t\tif (annotationSource != null) {", "+    \t\t\tExpression expression = parseMemberValue(annotationSource);", "+    \t\t\t/*", "+    \t\t\t * expression can be null or not an annotation if the source has changed between", "+    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "+    \t\t\t * this parsing occured.", "+    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "+    \t\t\t */", "+    \t\t\tif (expression instanceof Annotation) {", "+    \t\t\t\tannotations[recordedAnnotations++] = (Annotation) expression;", "+    \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "212acac0a592ab5d41fcd5128b5932c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "763e42ee77f843bf78751f85365c5a74eb47696c", "commitAfterChange": "525a282931680472e1c4e0ea3a9d163e6052ec36", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \tprivate static IJavaElement determineIfOnClasspath(\r \t\tIResource resource,\r \t\tIJavaProject project)", "signatureAfterChange": "\r \tprivate static IJavaElement determineIfOnClasspath(\r \t\tIResource resource,\r \t\tIJavaProject project)", "diff": ["+\t\t\t\t\tif (root == null) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "228496cfa415d89039c99eee012c6507", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "94dcb6652f514256018e8c1f7dcc1acc7030201c", "commitAfterChange": "c1caadb3e97f0c5d02c6ad3748ed5e3373af3f00", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static String bind(String id, String[] bindings)", "signatureAfterChange": " \tpublic static String bind(String id, String[] bindings)", "diff": ["+\t\tif (bindings == null) return message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b192cb90c0cc78e0622185ba8202b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "0afb6a8af8c4303e5dd78ba653e96f2baec6aaff", "commitAfterChange": "1decf6de90c742ae800c62bb40e904ecf7cf0dbd", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void consumeFormalParameter(boolean isVarArgs)", "signatureAfterChange": " protected void consumeFormalParameter(boolean isVarArgs)", "diff": ["-\t\ttype.sourceEnd = endOfEllipsis;", "+\t\tif (extendedDimensions == 0) {", "+\t\t\ttype.sourceEnd = endOfEllipsis;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22e4e7f8ba4d18d9652907deacfa1bb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "ef0604aef9ae504bcfc77425341e6baf6891cd21", "commitAfterChange": "b16439228426b14cb0612ff6650bc46c3d9f2a61", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static Object convertDOMValueToMirrorValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t   String name,\t \t\t\t\t\t\t\t\t\t\t\t\t\t   EclipseMirrorImpl parent, \t\t\t\t\t\t\t\t\t\t\t\t\t   DeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env, \t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)", "signatureAfterChange": "     private static Object convertDOMValueToMirrorValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t   String name,\t \t\t\t\t\t\t\t\t\t\t\t\t\t   EclipseMirrorImpl parent, \t\t\t\t\t\t\t\t\t\t\t\t\t   DeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t   BaseProcessorEnv env, \t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t   BaseProcessorEnv env,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)\t\t\t\t\t\t\t\t\t\t\t\t\t   ", "-\t\t\t\tObject o = convertDOMValueToMirrorValue( elements[i], name, parent, decl, env, leaf );", "-\t\t\t\tassert( !( o instanceof IResolvedAnnotation ) ) : \"Unexpected return value from convertDomValueToMirrorValue! o.getClass().getName() = \" + o.getClass().getName(); //$NON-NLS-1$", "+\t\t\t\tObject o = convertDOMValueToMirrorValue( elements[i], name, parent, decl, env, leaf );\t\t\t\t", "+\t\t\t\tif( o == null ) ", "+\t\t\t\t\treturn null; ", "+\t\t\t\tassert( !( o instanceof IResolvedAnnotation ) ) : ", "+\t\t\t\t\t\"Unexpected return value from convertDomValueToMirrorValue! o.getClass().getName() = \" //$NON-NLS-1$", "+\t\t\t\t\t+ o.getClass().getName(); ", "-\t\t\tthrow new IllegalStateException(\"cannot build annotation value object from \" + domValue); //$NON-NLS-1$", "-        ", "+\t\t\tthrow new IllegalStateException(\"cannot build annotation value object from \" + domValue); //$NON-NLS-1$       ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2316107b0bf4354fdbc3d7953c386e6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java", "commitBeforeChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "commitAfterChange": "ed6404d1b00fb0c4d7b0edc065f94f5cf30ee47f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic RoundEnvImpl(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound, BaseProcessingEnvImpl env)", "signatureAfterChange": "  \tpublic RoundEnvImpl(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound, BaseProcessingEnvImpl env)", "diff": ["-\t\tfor (CompilationUnitDeclaration unit : _units) {", "-\t\t\tunit.traverse(visitor, unit.scope);", "+\t\tif (_units != null) {", "+\t\t\tfor (CompilationUnitDeclaration unit : _units) {", "+\t\t\t\tunit.traverse(visitor, unit.scope);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23497122cd5cf0822dea4dc671f7020a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "c3ad34ec44b228feb09e91ff5ac00fc774236d05", "commitAfterChange": "1d56e6175009cdfe398560b7ba099bb7669a1ef0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " private void writeAllDocumentNames(String[] sortedDocNames, DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeAllDocumentNames(String[] sortedDocNames, DataOutputStream stream) throws IOException", "diff": ["+\t\t\t\tif (len1 == 0) break; // current is 'xabc', next is 'xyabc'"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23a3018d08aeade1c77629395ad24794", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "commitAfterChange": "c7c0f45382aa459a248601386682edbbcff78c8b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int match(MessageSend msgSend, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MessageSend msgSend, MatchingNodeSet nodeSet)", "diff": ["+\tif (!this.pattern.findReferences) return IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25edc0862101148b5369c31881b54c28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e0b6341dcd5fbc870f6efe7aa973407433813ad4", "commitAfterChange": "3925c1ac23de3f29b5056a6b42f80b41a7e25aa9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate ClassFileReader classFileReader(IType type)", "signatureAfterChange": "  \tprivate ClassFileReader classFileReader(IType type)", "diff": ["+\t\t\t\t\tif (zipPath == null) return null; // location is null"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265aa80c9f517c5d72ad8326c9de9a1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "cc6cd8059ee44aa98cdf190effa0e5b0901154a4", "commitAfterChange": "a10414ff4882f78075e3cd686b35229cd3fd960e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void setActualReceiverType(ReferenceBinding receiverType)", "signatureAfterChange": "  public void setActualReceiverType(ReferenceBinding receiverType)", "diff": ["+\tif (receiverType == null) return; // error scenario only"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "271c38d9b98693a99e36abda5421bbd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6f30ee61d108ad8ee5cbe0a29f061b5a6c9b1260", "commitAfterChange": "92cd5e39e3270ff8b4f1676c37707f6045ab5f22", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "diff": ["+\t\tif (invocations == null) return mec; // no alternate invocation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "271fd5c8004efd0216e1ac7f8b1439a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/BuildListener.java", "commitBeforeChange": "9378f12e46617b3c47a50827083b7b76b76aaf96", "commitAfterChange": "ecc05f0ca2665c6c46b18bc8153f342d2808fcb6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic CompilationParticipantResult notify( CompilationParticipantEvent cpe )", "signatureAfterChange": "  \tpublic CompilationParticipantResult notify( CompilationParticipantEvent cpe )", "diff": ["+\t\tif (!AptConfig.isEnabled())", "+\t\t\treturn GENERIC_COMPILATION_RESULT;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2757d62560331b37036542ef22f5ca17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "667082d03e8bfe408693d885daad756a164263a3", "commitAfterChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tprivate void annotateType(Type type, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotations)", "signatureAfterChange": " \tprivate void annotateType(Type type, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotations)", "diff": ["-\t\t\tannotateType(arrayType, typeAnnotations);", "+\t\t\tif (typeAnnotations != null) {", "+\t\t\t\tannotateType(arrayType, typeAnnotations);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2791ed423f0f5c987a59aa91312c1964", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "0afb6a8af8c4303e5dd78ba653e96f2baec6aaff", "commitAfterChange": "1decf6de90c742ae800c62bb40e904ecf7cf0dbd", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " protected void consumeFormalParameter(boolean isVarArgs)", "signatureAfterChange": " protected void consumeFormalParameter(boolean isVarArgs)", "diff": ["-\t\t\ttype.sourceEnd = endOfEllipsis;", "+\t\t\tif (extendedDimensions == 0) {", "+\t\t\t\ttype.sourceEnd = endOfEllipsis;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28cc31f4f359bfff5d6e4595ceb5acea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "1d52e4f2d0d02dbcac5bb8a1181b09e4bd5bb649", "commitAfterChange": "f981d500a6b7adb07e35fc127d0e4c91e663b60b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["+\t\tif (method == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d6baf22366cc04f00f4d6a131f87855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "70823bcdc247c361af65329f86a126cf9616a2fa", "commitAfterChange": "1bd4bf4c4dea2f86129d0f613a3da00767d07bfb", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void saving(ISaveContext context) throws CoreException", "signatureAfterChange": " \tpublic void saving(ISaveContext context) throws CoreException", "diff": ["-\t\t\tPerProjectInfo info = getPerProjectInfo(savedProject);", "+\t\t\tif (!JavaProject.hasJavaNature(savedProject)) return; // ignore", "+\t\t\tPerProjectInfo info = getPerProjectInfo(savedProject, true /* create info */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e525927cbcbf935cadc21318ef58bc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceRefElement.java", "commitBeforeChange": "4b32d121b565ecfeaf118da32c5cfa472e80a4a9", "commitAfterChange": "54f479c4cedb5c06849fe533ad9496b9446738f8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public IJavaElement getHandleUpdatingCountFromMemento(MementoTokenizer memento, WorkingCopyOwner owner)", "signatureAfterChange": " public IJavaElement getHandleUpdatingCountFromMemento(MementoTokenizer memento, WorkingCopyOwner owner)", "diff": ["+\tif (!memento.hasMoreTokens()) return this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eb9f6e2f7d5910c9d02ff4673bb5100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/AstNodeFinder.java", "commitBeforeChange": "5a3a5f398a8971568181868be2d5d76728016763", "commitAfterChange": "44cc03459f9020b4da0ebdb14fa0624b7d8dfc4d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic Initializer findInitializer(IInitializer initializerHandle)", "signatureAfterChange": " \tpublic Initializer findInitializer(IInitializer initializerHandle)", "diff": ["+\t\tif (typeDecl == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa21593671711cf60f097edb4595aec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " private long findLastTypeArgumentInfo(TypeReference typeRef)", "signatureAfterChange": " private long findLastTypeArgumentInfo(TypeReference typeRef)", "diff": ["-\t\t\tfor (int i=lastTypeArguments.length-1; i>=0 && last==null; i++) {", "-\t\t\t\tlast = lastTypeArguments[i];", "+\t\t\tif (lastTypeArguments != null) {", "+\t\t\t\tfor (int i=lastTypeArguments.length-1; i>=0 && last==null; i++) {", "+\t\t\t\t\tlast = lastTypeArguments[i];", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fb1f11783e4065cb209f48adcb16009", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "63de5c6dae9fae82c2339876dbb775693035802e", "commitAfterChange": "ce0ab2ac819daf3fa3fd145b458e19703183357d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["+\t\t\t\t\t\tif (topLevelLength == 0) continue; // empty cu: no need to parse (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65677)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3263fb849f244aa6877d653a66c7ad6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "1088bd5003c7ca9240c67a19e715067bfb429dc6", "commitAfterChange": "8e665ebd543f7c7954520405f3d7d86b62f0fb1f", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \t \tprotected Statement createFakeEmptyStatement(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": " \t \tprotected Statement createFakeEmptyStatement(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["+\t\tif (statement == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32d3b9d819412afd908bfaf3c86f3753", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a2a25daab3f792071cba7e3d51c3d2abf00c6c2a", "commitAfterChange": "8bffc680730baeb75a0764c02d5d9479eee4502e", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q)", "signatureAfterChange": "  \tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q)", "diff": ["+", "+\tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q) {", "+\t\tif (p != null) {", "+\t\t\tfor (int i = 0; i < p.length; i++) {", "+\t\t\t\ttry {", "+\t\t\t\t\tif (!this.reduceAndIncorporate(new ConstraintTypeFormula(p[i], q[i], ReductionResult.SAME)))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-", "-\tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q) {", "-\t\tfor (int i = 0; i < p.length; i++) {", "-\t\t\ttry {", "-\t\t\t\tif (!this.reduceAndIncorporate(new ConstraintTypeFormula(p[i], q[i], ReductionResult.SAME)))", "-\t\t\t\t\treturn false;", "-\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33aad36481081fec58d04d8eb245f110", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e6d5c8658dcb2261d05af5cdc17c2490045274a2", "commitAfterChange": "860ea62c67f5396f6f9d3dd7b840bac85b92d32f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "-\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "-\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t} else {", "-\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "-\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "-\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\tif (nullTagBits != 0) {", "+\t\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "+\t\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "+\t\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "+\t\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "+\t\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "347886285fbd478a07871ae52ae7f0da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "53e59f4bd82e02ab18d570f640623d6567762067", "commitAfterChange": "83c109b7c53737ef4619646925b9d4265eb983d8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(FieldDeclaration fieldDeclaration, MethodScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(FieldDeclaration fieldDeclaration, MethodScope scope)", "diff": ["-\t\t\t((SourceTypeBinding) fieldBinding.declaringClass).resolveTypeFor(fieldBinding);\t\t\t", "+\t\t\tif (fieldBinding == null) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t((SourceTypeBinding) fieldBinding.declaringClass).resolveTypeFor(fieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348f6142e636ac2d18e1d93be20185ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "6ce06528938fe7e21377a064a574540600275dd3", "commitAfterChange": "4f7bc7ed550fb18b593380689460147b32682704", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " protected int resolveLevelForType(char[] qualifiedPattern, TypeBinding type)", "signatureAfterChange": " protected int resolveLevelForType(char[] qualifiedPattern, TypeBinding type)", "diff": ["+\t// Type variable cannot be specified through pattern => this kind of binding cannot match it (see bug 79803)", "+\tif (type.isTypeVariable()) return IMPOSSIBLE_MATCH;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "364f1aec4eaee59b5a0e483116261e70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "e8dcb35615461f6a094496cfd7d96ef4f177fce5", "commitAfterChange": "93de56b29d808bccb957df4ffa2902903a4c6151", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testSeekPackageFragments() throws CoreException", "signatureAfterChange": " public void testSeekPackageFragments() throws CoreException", "diff": ["+\t\tif (i == 0) {", "+\t\t\tint size = requestor.pkgs.size();", "+\t\t\tIJavaElement[] result = new IJavaElement[size];", "+\t\t\trequestor.pkgs.toArray(result);", "+\t\t\tassertElementsEqual(", "+\t\t\t\t\"Unexpected packages\",", "+\t\t\t\t\"org.eclipse.jdt.core.tests78.performance5 [in src78 [in \"+BIG_PROJECT_NAME+\"]]\",", "+\t\t\t\tresult", "+\t\t\t);", "+\t\t}", "-\tint size = requestor.pkgs.size();", "-\tIJavaElement[] result = new IJavaElement[size];", "-\trequestor.pkgs.toArray(result);", "-\tassertElementsEqual(", "-\t\t\"Unexpected packages\",", "-\t\t\"org.eclipse.jdt.core.tests78.performance5 [in src78 [in \"+BIG_PROJECT_NAME+\"]]\",", "-\t\tresult", "-\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39093cc69bc09fbc9860541ae90dbe85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "786c31d9ecce9ffa121f77e75a31a23616243d78", "commitAfterChange": "ca4e1b5f934aed1dee0d7aabe08265d0c6c1b8f7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tITypeBinding resolveType(TypeDeclaration type)", "signatureAfterChange": " \tITypeBinding resolveType(TypeDeclaration type)", "diff": ["+\t\t\tif (typeBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b059075915984fae62a8484c2d11f8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 158, "methodNumberAfterChange": 158, "signatureBeforeChange": " \tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache)", "signatureAfterChange": " \tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache)", "diff": ["-\t\t\t\t\tfor (int i=0; i<filesCount; i++) {", "-\t\t\t\t\t\tindexingCache.remove(removed[i]);", "+\t\t\t\t\tif (removed != null) {", "+\t\t\t\t\t\tfor (int i=0; i<filesCount; i++) {", "+\t\t\t\t\t\t\tindexingCache.remove(removed[i]);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7afcc67bc3c082316ff873deb5f6c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "4b32d121b565ecfeaf118da32c5cfa472e80a4a9", "commitAfterChange": "54f479c4cedb5c06849fe533ad9496b9446738f8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner owner)", "signatureAfterChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner owner)", "diff": ["+\t\t\tif (!memento.hasMoreTokens()) return this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d297ec89e2eaa3bc2941b9bd423e055", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "c24ba80bf99295ef7f770d733b09f3ea055c58b7", "commitAfterChange": "43e1a872f6aa500346aa424b28bb0fdd0f4213de", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public synchronized void aboutToUpdateIndex(IPath path, Integer newIndexState)", "signatureAfterChange": "  public synchronized void aboutToUpdateIndex(IPath path, Integer newIndexState)", "diff": ["+\tif (currentIndexState.equals(REBUILDING_STATE)) return; // already rebuilding the index"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d87808efa118483ad1b000a6d3e13f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " private ReferenceBinding typeToRecord(TypeBinding type)", "signatureAfterChange": " private ReferenceBinding typeToRecord(TypeBinding type)", "diff": ["+\tif (type == null)", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dd5ace7e7929d60971d4ed56531ae23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public synchronized void removeIndexPath(IPath path)", "signatureAfterChange": " public synchronized void removeIndexPath(IPath path)", "diff": ["-\tfor (int i=0; i<ptr; i++) {", "-\t\tthis.indexes.remove(locations[i]);", "+\tif (locations != null) {", "+\t\tfor (int i=0; i<ptr; i++) {", "+\t\t\tthis.indexes.remove(locations[i]);", "+\t\t}", "+\t\tremoveIndexesState(locations);", "-\tremoveIndexesState(locations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f91725c7fad3b6e5d8bbb35d2c7735f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r     public IMethodBinding getMethodBinding(final String memberName)", "signatureAfterChange": "     public IMethodBinding getMethodBinding(final String memberName)", "diff": ["-     */\r", "-    public IMethodBinding getMethodBinding(final String memberName)\r", "-    {\r", "-        if( memberName == null ) return null;\r", "-        final ITypeBinding typeBinding = _annoAstNode.resolveTypeBinding();\r", "-        final IMethodBinding[] methods  = typeBinding.getDeclaredMethods();\r", "-        for( IMethodBinding method : methods ){\r", "-            if( memberName.equals(method.getName()) )\r", "-                return method;\r", "-        }\r", "-        return null;\r", "-    }\r", "+     */", "+    public IMethodBinding getMethodBinding(final String memberName)", "+    {", "+        if( memberName == null ) return null;", "+        final ITypeBinding typeBinding = _domAnnotation.getAnnotationType();", "+\t\tif( typeBinding == null ) return null;", "+        final IMethodBinding[] methods  = typeBinding.getDeclaredMethods();", "+        for( IMethodBinding method : methods ){", "+            if( memberName.equals(method.getName()) )", "+                return method;", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40071fc3c0a50541f2669dcddaea4e03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e2af824aeec88cb7db3fc9a60fe3065181c8cab2", "commitAfterChange": "48d4662ccc94304b71283abf02dc80106ec8ea24", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  private void readIndexMap()", "signatureAfterChange": "  private void readIndexMap()", "diff": ["+\t\t\t\t\tif (indexPath == null) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40dff4ee6c2a060b56e55e9eb38248ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "6ce98b5ce9339887af5b930f74df93d6b74d481c", "commitAfterChange": "640820d78ee0410cf9fcb57eb9fe8c2d56063905", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private int adaptEdit(OptimizedReplaceEdit[] sortedEdits, int start, int regionStart, int regionEnd)", "signatureAfterChange": "     private int adaptEdit(OptimizedReplaceEdit[] sortedEdits, int start, int regionStart, int regionEnd)", "diff": ["-    \t\t\t\tint ch = edit.replacement.charAt(nrLength);", "-    \t\t\t\tloop: while (nrLength < rLength) {", "-\t    \t\t\t\tswitch (ch) {", "-\t    \t\t\t\t\tcase ' ':", "-\t    \t\t\t\t\tcase '\\t':", "-\t    \t\t\t\t\t\tnrLength++;", "-\t    \t\t\t\t\t\tbreak;", "-\t    \t\t\t\t\tdefault:", "-\t    \t\t\t\t\t\tbreak loop;", "+    \t\t\t\tif (nrLength < rLength) {", "+\t    \t\t\t\tint ch = edit.replacement.charAt(nrLength);", "+\t    \t\t\t\tloop: while (nrLength < rLength) {", "+\t\t    \t\t\t\tswitch (ch) {", "+\t\t    \t\t\t\t\tcase ' ':", "+\t\t    \t\t\t\t\tcase '\\t':", "+\t\t    \t\t\t\t\t\tnrLength++;", "+\t\t    \t\t\t\t\t\tbreak;", "+\t\t    \t\t\t\t\tdefault:", "+\t\t    \t\t\t\t\t\tbreak loop;", "+\t\t    \t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40f1ef1b4ab2bd39eaac48c3ae0e56e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "4b32d121b565ecfeaf118da32c5cfa472e80a4a9", "commitAfterChange": "54f479c4cedb5c06849fe533ad9496b9446738f8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner owner)", "signatureAfterChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner owner)", "diff": ["+\t\t\tif (!memento.hasMoreTokens()) return this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4104396ca698e99514bc30bc28489944", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "86f51b4e3a6977c0fea2b16e4d60fcc4616648ae", "commitAfterChange": "73c0b0b740cb64c7be657afbb9bc34e48a20047c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveType(Type type)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveType(Type type)", "diff": ["+\t\t\t\t// This unlikely case is possible when for some reason binding resolution has been stopped, like duplicate type declaration (bug 376440)", "+\t\t\t\tif (typeBinding == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41983e98d1f08c559599451d1a65c388", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "63bc38ba8b0f2ea08457c431c5b6f27f5afb719e", "commitAfterChange": "c90b85d8a58dda5b3bd812b7ba0881529c4281e5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \t@Override \tprotected void saveSettings()", "signatureAfterChange": "  \t@Override \tprotected void saveSettings()", "diff": ["-\t\tif (!fOriginalGenSrcDir.equals(fGenSrcDirField.getText()))", "-\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_GENSRCDIR);", "-\t\tif (fOriginalAptEnabled != fAptEnabledField.isSelected())", "-\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);", "+\t\tif (null != fAptProject) {", "+\t\t\tif (!fOriginalGenSrcDir.equals(fGenSrcDirField.getText()))", "+\t\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_GENSRCDIR);", "+\t\t\tif (fOriginalAptEnabled != fAptEnabledField.isSelected())", "+\t\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "421c56631ea760881a7bece08ba36b95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "02c268a4d3cda9d82648fb2a27d6f6a49334a9c9", "commitAfterChange": "445188c88d04c21eb75ec390fedf8ca63140d7dd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate ASTNode parseBlockStatements( \t\tTypeDeclaration type, \t\tCompilationUnitDeclaration unit, \t\tint position)", "signatureAfterChange": "  \tprivate ASTNode parseBlockStatements( \t\tTypeDeclaration type, \t\tCompilationUnitDeclaration unit, \t\tint position)", "diff": ["+\t\t\t\t", "+\t\t\t\tif(method.isDefaultConstructor())", "+\t\t\t\t\tcontinue;", "+\t\t\t\t", "+\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "428e3fde01e9c27bb3f474393122e803", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APTTestBase.java", "commitBeforeChange": "011e8e3a52083052e5657e005c0f9c924e859fa5", "commitAfterChange": "f5a341f68abead122de6ca8916b6029f11c37676", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected void expectingSpecificProblemsFor(IPath root, ExpectedProblem[] problems)", "signatureAfterChange": " \tprotected void expectingSpecificProblemsFor(IPath root, ExpectedProblem[] problems)", "diff": ["+\t\t\t\tif (pb == null) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "429766acb0e603fa1ed4aff6d085e768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "commitAfterChange": "c4fa4d272fd0c5fb7e1db44c8cef0ea47f3df504", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-        return false;", "+\t    /* With the hybrid 1.4/1.5+ projects modes, while establishing type equivalence, we need to", "+\t       be prepared for a type such as Map appearing in one of three forms: As (a) a ParameterizedTypeBinding ", "+\t       e.g Map<String, String>, (b) as RawTypeBinding Map#RAW and finally (c) as a BinaryTypeBinding ", "+\t       When the usage of a type lacks type parameters, whether we land up with the raw form or not depends", "+\t       on whether the underlying type was \"seen to be\" a generic type in the particular build environment or", "+\t       not. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=328827 ", "+\t     */", "+\t    if (erasure() == otherType) {", "+\t    \treturn true;", "+\t    }", "+\t    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432bceded7d76c706d99b9c5712f467e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "3973964fa15a8c49d459282ce0d949753f7e2224", "commitAfterChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate static void trace( String s, ProcessorEnvImpl processorEnv )", "signatureAfterChange": " \t \tprivate static void trace( String s, ProcessorEnvImpl processorEnv )", "diff": ["-\t\t\ts = \"[ phase = \" + processorEnv.getPhase() + \", file = \" + getFileNamesForPrinting(processorEnv) +\" ]  \" + s; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\tif (processorEnv != null) {", "+\t\t\t\ts = \"[ phase = \" + processorEnv.getPhase() + \", file = \" + getFileNamesForPrinting(processorEnv) +\" ]  \" + s; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4405c8cd2f3fd9ecbb2f1e687f840ba1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "90ba59d6dcd4eb9dd129b1984419e22534ab971b", "commitAfterChange": "4ccb1aecc41fbe7a3a6c99e67b5a284a32eff23b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, ReferenceBinding targetType, boolean argumentTypesElided)", "signatureAfterChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, ReferenceBinding targetType, boolean argumentTypesElided)", "diff": ["+\t\tif (!targetType.isValidBinding())", "+\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448aacf6b89fa844dcc0c68086872a06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "fa78e4ce6e57928678189feff94d4c736b9ff2c4", "commitAfterChange": "0f248db43070dcf1bc4390d09f1d6625c113fc80", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tprotected String toString(String[] strings, boolean addExtraNewLine)", "signatureAfterChange": " \tprotected String toString(String[] strings, boolean addExtraNewLine)", "diff": ["+\t\tif (strings == null) return \"null\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451321cf7a01e123bc51e7f4385e8f80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "commitAfterChange": "d33b892acebec2bc1c5d62c55db84a184bb6f3b3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t// remaining binding keys are package binding keys or base type binding keys", "+\t\t\t// remaining binding keys", "-\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "-\t\t\t\t", "-\t\t\t\t// pass it to requestor", "-\t\t\t\tif (binding != null)", "-\t\t\t\t\tastRequestor.acceptBinding(((BindingKey) this.requestedKeys.valueTable[j]).getKey(), binding);", "+\t\t\t\tif (compilerBinding != null) {", "+\t\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "+\t\t\t\t\tif (binding != null)", "+\t\t\t\t\t\t// pass it to requestor", "+\t\t\t\t\t\tastRequestor.acceptBinding(((BindingKey) this.requestedKeys.valueTable[j]).getKey(), binding);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4550bd421db2503c391205bc37161d54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "commitAfterChange": "a502b956779c4dac7f761502999cc6d149ba7556", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic static String bind(String id, String[] arguments)", "signatureAfterChange": " \tpublic static String bind(String id, String[] arguments)", "diff": ["+\t\tif (arguments == null) {", "+\t\t\treturn message;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49891dc411c5c2a677f8e904695ee2b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "bc7116f109e564326b3e78f91d4a1f3d88927f34", "commitAfterChange": "64c77eef18b6427d5368be0eafa7e87c9e216dc9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \r \r private boolean hasBinaryDelta()", "signatureAfterChange": " \r \r private boolean hasBinaryDelta()", "diff": ["-\t\tfor (int i = 0, l = classFoldersAndJars.length; i < l; i++) {\r", "-\t\t\tIResource binaryResource = classFoldersAndJars[i]; // either a .class file folder or a zip/jar file\r", "-\t\t\tif (binaryResource != null) {\r", "-\t\t\t\tIResourceDelta binaryDelta = delta.findMember(binaryResource.getProjectRelativePath());\r", "-\t\t\t\tif (binaryDelta != null) return true;\r", "+\t\tif (classFoldersAndJars != null){\r", "+\t\t\tfor (int i = 0, l = classFoldersAndJars.length; i < l; i++) {\r", "+\t\t\t\tIResource binaryResource = classFoldersAndJars[i]; // either a .class file folder or a zip/jar file\r", "+\t\t\t\tif (binaryResource != null) {\r", "+\t\t\t\t\tIResourceDelta binaryDelta = delta.findMember(binaryResource.getProjectRelativePath());\r", "+\t\t\t\t\tif (binaryDelta != null) return true;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a225662b793ccb25fef2e5b24d44d45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "42c41aa4b22cf23b608272c59dfd7ac53eae5c74", "commitAfterChange": "40e03c0f2cb6d68da836ee023d4bc741c1ef6388", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \t\r \tprotected boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "signatureAfterChange": "\r \t\r \tprotected boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "diff": ["-\r", "-\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\r", "-\t\t\tif (imports[i].onDemand) {\r", "-\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "-\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "-\t\t\t\t\t\tif(i != j){\r", "-\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "-\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "-\t\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tif(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)) {\r", "-\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\tif (imports != null){\r", "+\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\tif (imports[i].onDemand) {\r", "+\t\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "+\t\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "+\t\t\t\t\t\t\tif(i != j){\r", "+\t\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "+\t\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "+\t\t\t\t\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tif(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)) {\r", "+\t\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn false; // how do you match p1.p2.A.* ?\r", "-\t\t\t\t\treturn false; // how do you match p1.p2.A.* ?\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t} else\r", "-\r", "-\t\t\t\tif (CharOperation.equals(imports[i].readableName(), readableTypeName)) {\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t\t}\r", "+\t\r", "+\t\t\t\t} else\r", "+\t\r", "+\t\t\t\t\tif (CharOperation.equals(imports[i].readableName(), readableTypeName)) {\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b97652d7de2709d7ac0c74371e81454", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "29700c45fa6624de03b16f6fb5784655c942a2a0", "commitAfterChange": "dbf442c66407c39832dc12f9daf27f32d391d56c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\t", "+\tif (entries == NO_ENTRY_RESULT) return;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c78d923cf2663cb41b17a05d57ba01b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "f3c33fcf9812c391ba41d170d6821b82285978bf", "commitAfterChange": "823f8cf519ce992bfb17971d3e63306334609bad", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnit unitElement, \t\tSourceElementParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration process( \t\t\tCompilationUnit unitElement, \t\t\tSourceElementParser parser, \t\t\tWorkingCopyOwner workingCopyOwner, \t\t\tHashMap problems, \t\t\tboolean creatingAST, \t\t\tint reconcileFlags, \t\t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["+\t */", "-\t\tCompilationUnit unitElement,", "-\t\tSourceElementParser parser,", "-\t\tWorkingCopyOwner workingCopyOwner,", "-\t\tHashMap problems,", "-\t\tboolean creatingAST,", "-\t\tint reconcileFlags,", "-\t\tIProgressMonitor monitor)", "+\t\t\tCompilationUnit unitElement,", "+\t\t\tSourceElementParser parser,", "+\t\t\tWorkingCopyOwner workingCopyOwner,", "+\t\t\tHashMap problems,", "+\t\t\tboolean creatingAST,", "+\t\t\tint reconcileFlags,", "+\t\t\tIProgressMonitor monitor)", "+\t\tCompilationUnitDeclaration unit = null;", "-\t\t\tCompilationUnitDeclaration unit = null;", "-\t\t\tif (parser != null) {", "-\t\t\t\tproblemFinder.parser = parser;", "-\t\t\t\ttry {", "+\t\t\ttry {", "+\t\t\t\tif (parser != null) {", "+\t\t\t\t\tproblemFinder.parser = parser;", "-\t\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t\tproblemFinder.handleInternalException(e, unit);", "+\t\t\t\t} else {", "+\t\t\t\t\tunit =", "+\t\t\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\t\t\tunitElement,", "+\t\t\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\t\t\tanalyzeAndGenerateCode, // analyze code", "+\t\t\t\t\t\t\tanalyzeAndGenerateCode); // generate code", "-\t\t\t} else {", "-\t\t\t\tunit =", "-\t\t\t\t\tproblemFinder.resolve(", "-\t\t\t\t\t\tunitElement,", "-\t\t\t\t\t\ttrue, // verify methods", "-\t\t\t\t\t\tanalyzeAndGenerateCode, // analyze code", "-\t\t\t\t\t\tanalyzeAndGenerateCode); // generate code", "+\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\tproblemFinder.handleInternalException(e, unit);", "-\t\t\tCompilationResult unitResult = unit.compilationResult;", "-\t\t\tCategorizedProblem[] unitProblems = unitResult.getProblems();", "-\t\t\tint length = unitProblems == null ? 0 : unitProblems.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "-\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "-\t\t\t\tproblems.put(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, categorizedProblems);", "+\t\t\tif (unit != null) {", "+\t\t\t\tCompilationResult unitResult = unit.compilationResult;", "+\t\t\t\tCategorizedProblem[] unitProblems = unitResult.getProblems();", "+\t\t\t\tint length = unitProblems == null ? 0 : unitProblems.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "+\t\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "+\t\t\t\t\tproblems.put(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, categorizedProblems);", "+\t\t\t\t}", "+\t\t\t\tunitProblems = unitResult.getTasks();", "+\t\t\t\tlength = unitProblems == null ? 0 : unitProblems.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "+\t\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "+\t\t\t\t\tproblems.put(IJavaModelMarker.TASK_MARKER, categorizedProblems);", "+\t\t\t\t}", "+\t\t\t\tif (NameLookup.VERBOSE) {", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "-\t\t\tunitProblems = unitResult.getTasks();", "-\t\t\tlength = unitProblems == null ? 0 : unitProblems.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "-\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "-\t\t\t\tproblems.put(IJavaModelMarker.TASK_MARKER, categorizedProblems);", "-\t\t\t}", "-\t\t\tif (NameLookup.VERBOSE) {", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t\treturn unit;", "+\t\treturn unit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d73c2e6beb990a2e8316a06f5e7d972", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "2cf58056e866ff671cad90d5365fdd17bef2e395", "commitAfterChange": "5eaac7ac2a1f933d3823239cdabe42da5dc006f8", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " protected void consumeConstructorDeclaration()", "signatureAfterChange": " protected void consumeConstructorDeclaration()", "diff": ["-\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall) {", "-\t\t\t//avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack,", "-\t\t\t\tthis.astPtr + 2,", "-\t\t\t\tstatements = new Statement[length - 1],", "-\t\t\t\t0,", "-\t\t\t\tlength - 1);", "-\t\t\tconstructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "-\t\t} else { //need to add explicitly the super();", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack,", "-\t\t\t\tthis.astPtr + 1,", "-\t\t\t\tstatements = new Statement[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tif (!this.options.ignoreMethodBodies) {", "+\t\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall) {", "+\t\t\t\t//avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 2,", "+\t\t\t\t\tstatements = new Statement[length - 1],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength - 1);", "+\t\t\t\tconstructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "+\t\t\t} else { //need to add explicitly the super();", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 1,", "+\t\t\t\t\tstatements = new Statement[length],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength);", "+\t\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d76cb999170f5b74fcd467082095c01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "b1bbf2139f3f67cdaea0480f0decf88934849c4e", "commitAfterChange": "13243a5d10e37b2eb5c996e3858760c226a8e1be", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException", "signatureAfterChange": "\r protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException", "diff": ["-\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "-\t\tbuffer.setContents(original.getContents());\r", "+\t\tif (buffer != null){\r", "+\t\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "+\t\t\tbuffer.setContents(original.getContents());\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d89bbe6b66c6156a4fc41cd99b6fca2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "70823bcdc247c361af65329f86a126cf9616a2fa", "commitAfterChange": "1bd4bf4c4dea2f86129d0f613a3da00767d07bfb", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void setLastBuiltState(IProject project, Object state)", "signatureAfterChange": " \tpublic void setLastBuiltState(IProject project, Object state)", "diff": ["-\t\tPerProjectInfo info = getPerProjectInfo(project);", "+\t\tif (!JavaProject.hasJavaNature(project)) return; // should never be requested on non-Java projects", "+\t\tPerProjectInfo info = getPerProjectInfo(project, true /*create if missing*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7aefe53acb0f328b4cd1e98706c132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "74fbbad11165f5c8ac0131a349c46c50e436b50b", "commitAfterChange": "a024585149a43be434fc19fbd276b9257362eff2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-", "+\t// if resetTo is used with currentPosition > than eofPosition.", "+\tif (currentPosition > eofPosition) {", "+\t\treturn TokenNameEOF;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e9722e9543382b9be564efb3a5acfe9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "54bf5326ab985536456783d83e145375b5dc7f04", "commitAfterChange": "5dbd397b4fc5184876eeebb1e1ea9235db66fa0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["+\t\t\t\tif (previousMethod == null)  \t// can happen, e.g., if inside a copied lambda with ignored errors", "+\t\t\t\t\treturn null; \t\t\t\t// -> proceed with no new constraints"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbd2cee9c69b81b620118d664f2cf4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator)", "signatureAfterChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator)", "diff": ["-\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "-\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "-\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), argumentTypeNames[j]))", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "+\t\t\t\t\tif (argumentTypeNames != null) {", "+\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "+\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "+\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), argumentTypeNames[j]))", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51235d62b5ebe6520e752452ca6145a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c9c27c9ebff380d212b738c2eaa48c5625675e13", "commitAfterChange": "03dbaeb0be7fb0d4838167b51429df8c5c6e94a9", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 342, "signatureBeforeChange": " protected CompilationUnitDeclaration endParse(int act)", "signatureAfterChange": " protected CompilationUnitDeclaration endParse(int act)", "diff": ["-\t\trecoveredElement.topElement().updateParseTree();", "+\t\t", "+\t\tif (recoveredElement != null) {", "+\t\t\trecoveredElement.topElement().updateParseTree();", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515a20843220d1d87e6cd7064aacb4db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "e91741a42e55c2ecb1b7a219606742415a388279", "commitAfterChange": "7f77173536fc3f7b636457626f7f58197306c0b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public static String convertToIndependantLineDelimiter(String source)", "signatureAfterChange": " public static String convertToIndependantLineDelimiter(String source)", "diff": ["+\tif (source == null) return \"\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524c8e8e598018cef1e89e89713979c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "ec9cd97b0c459c5dc4d2f0ad5e983ded0fc0d5bb", "commitAfterChange": "bfebdf0198219cf180a3f6b7b859385d784ebd28", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "signatureAfterChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "diff": ["+\tif (compatible == null) ", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52a0ee8f72ac630aec43a8c4b9bafe9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "c24ba80bf99295ef7f770d733b09f3ea055c58b7", "commitAfterChange": "43e1a872f6aa500346aa424b28bb0fdd0f4213de", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " private void rebuildIndex(String indexName, IPath path)", "signatureAfterChange": " private void rebuildIndex(String indexName, IPath path)", "diff": ["-\tupdateIndexState(indexName, REBUILDING_STATE);", "-", "+\tif (target == null) return;", "+", "+\tupdateIndexState(indexName, REBUILDING_STATE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5415094ce8036f55a0c64fa93fda52fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "a5afd2507bd69ba3b522e38d3b9c62acfc31d170", "commitAfterChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\t\tIProblemRequestor problemRequestor = owner.getProblemRequestor(workingCopy);", "-\t\tif (problemRequestor instanceof ProblemRequestor) {", "-\t\t\t((ProblemRequestor) problemRequestor).initialize(source.toCharArray());", "+\t\tif (owner != null) {", "+\t\t\tIProblemRequestor problemRequestor = owner.getProblemRequestor(workingCopy);", "+\t\t\tif (problemRequestor instanceof ProblemRequestor) {", "+\t\t\t\t((ProblemRequestor) problemRequestor).initialize(source.toCharArray());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541ba76a9976ab234cd2653b6e77e6c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "d2fba759d7837de1441525f226f602f595016e9d", "commitAfterChange": "fa4ac5f2b99f8df2398d7d03706808dec36119dc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t@Override \tprotected void updateControls()", "signatureAfterChange": " \t@Override \tprotected void updateControls()", "diff": ["-\t\tboolean aptEnabled= Boolean.valueOf(getValue(KEY_APTENABLED)).booleanValue();", "-\t\tfAptEnabledField.setSelection(aptEnabled);", "+\t\tif (fAptEnabledField != null) {", "+\t\t\tboolean aptEnabled= Boolean.valueOf(getValue(KEY_APTENABLED)).booleanValue();", "+\t\t\tfAptEnabledField.setSelection(aptEnabled);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "547132b935933835aa7dd813c48b1555", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "65d5b0757d9f6d9ae4d847cdc0ac64843f3b03b3", "commitAfterChange": "1e679d1a20634ff7b631ac043f1b9d1b716bcd23", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected static String showLineSeparators(String string)", "signatureAfterChange": " protected static String showLineSeparators(String string)", "diff": ["+\tif (string == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54a89eb8c698e5296c06fa3775fe128a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "3d6e745b11a60b30c093ec69f29acab507efa6f4", "commitAfterChange": "5837879057685bd1f5ce163887ddcdfbc05fb795", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public final boolean allowBlankFinalFieldAssignment(FieldBinding binding)", "signatureAfterChange": " public final boolean allowBlankFinalFieldAssignment(FieldBinding binding)", "diff": ["+\tif (methodScope.isLambdaScope()) ", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55290fea26f36968a0d72c7405da5f21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "786c31d9ecce9ffa121f77e75a31a23616243d78", "commitAfterChange": "ca4e1b5f934aed1dee0d7aabe08265d0c6c1b8f7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tIVariableBinding resolveVariable(FieldDeclaration variable)", "signatureAfterChange": " \tIVariableBinding resolveVariable(FieldDeclaration variable)", "diff": ["+\t\tif (variableBinding == null) {", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "561a86a8ff72a6a345bcaaa420f0ce4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "15dcf1c47322fd1abf8ecc7d7c8332878ffa2ca4", "commitAfterChange": "82a0f3c12838ccee831a07a711dbd532d22679fb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException", "signatureAfterChange": "  \tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException", "diff": ["-\t\tchar[] cuSource = getSource();", "-\t\tint recordedAnnotations = 0;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tISourceRange positions = annotations[i].getSourceRange();", "-\t\t\tint start = positions.getOffset();", "-\t\t\tint end = start + positions.getLength();", "-\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end);", "-\t\t\tif (annotationSource != null) {", "-    \t\t\tExpression expression = parseMemberValue(annotationSource);", "-    \t\t\t/*", "-    \t\t\t * expression can be null or not an annotation if the source has changed between", "-    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "-    \t\t\t * this parsing occurred.", "-    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "-    \t\t\t */", "-    \t\t\tif (expression instanceof Annotation) {", "-    \t\t\t\tastAnnotations[recordedAnnotations++] = (Annotation) expression;", "-    \t\t\t}", "+\t\tif (length > 0) {", "+\t\t\tchar[] cuSource = getSource();", "+\t\t\tint recordedAnnotations = 0;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tISourceRange positions = annotations[i].getSourceRange();", "+\t\t\t\tint start = positions.getOffset();", "+\t\t\t\tint end = start + positions.getLength();", "+\t\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end);", "+\t\t\t\tif (annotationSource != null) {", "+\t    \t\t\tExpression expression = parseMemberValue(annotationSource);", "+\t    \t\t\t/*", "+\t    \t\t\t * expression can be null or not an annotation if the source has changed between", "+\t    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "+\t    \t\t\t * this parsing occurred.", "+\t    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "+\t    \t\t\t */", "+\t    \t\t\tif (expression instanceof Annotation) {", "+\t    \t\t\t\tastAnnotations[recordedAnnotations++] = (Annotation) expression;", "+\t    \t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\tif (length != recordedAnnotations) {", "-\t\t\t// resize to remove null annotations", "-\t\t\tSystem.arraycopy(astAnnotations, 0, (astAnnotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "+\t\t\tif (length != recordedAnnotations) {", "+\t\t\t\t// resize to remove null annotations", "+\t\t\t\tSystem.arraycopy(astAnnotations, 0, (astAnnotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "562b91044640161d61a8d2d827d76ef2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "04eaba0fe4e6b5a84c4e8dc4fffbab423284d555", "commitAfterChange": "a7a3afb7a8548d0fba296650ec89abc303b4be12", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": "\r \tITypeBinding resolveExpressionType(Expression expression)", "diff": ["+\t\t\tif (binding == null) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56661fc1807e086ff2d52dca31021d4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "commitAfterChange": "e0e72ddcc0cb92dd5918821db9f129be4dc54623", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["+\t\t\tif (!this.binding.isValidBinding()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d0d14e9e72732950f0cf232d508c72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "72aa931453e3f2172c1e3a9834413fcb8210dc18", "commitAfterChange": "4a9fab23504f482fb4645ec189fabd0652bee495", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t@Override \tpublic ElementKind getKind()", "signatureAfterChange": "  \t@Override \tpublic ElementKind getKind()", "diff": ["+\t\tif (null != _kindHint) {", "+\t\t\treturn _kindHint;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57a7d9d121143773511d75b7331d9d75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "44bc8bb24de374506385d6361730798867bd9b35", "commitAfterChange": "4eb272881c87b1bea3aa02e641fb6fc8190374ff", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic String createIndentationString(final int indentationLevel)", "signatureAfterChange": "  \tpublic String createIndentationString(final int indentationLevel)", "diff": ["-\t\t\t\tint spaceEquivalents = indentationLevel * this.preferences.indentation_size;", "-\t\t\t\ttabs = spaceEquivalents / tabSize;", "-\t\t\t\tspaces = spaceEquivalents % tabSize;", "+\t\t\t\tif (tabSize != 0) {", "+\t\t\t\t\tint spaceEquivalents = indentationLevel * this.preferences.indentation_size;", "+\t\t\t\t\ttabs = spaceEquivalents / tabSize;", "+\t\t\t\t\tspaces = spaceEquivalents % tabSize;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "586fc55e0b15963da187445716b3cca5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java", "commitBeforeChange": "1fd3c9fc562cda07c874ee80cb4f5d32730433f0", "commitAfterChange": "bd573a503eae22a78c7fa84b2935b94de171918d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["+\t\t\tif (lambda == null)", "+\t\t\t\treturn TRUE; // cannot make use of this buggy constraint"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "590a902801e1a32e0ca90135f15a5f72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "e1454516411e21c76afb7797ea67208e4fc9c49d", "commitAfterChange": "85e7f681aa7d70ec863df3c9b4c8ff252b7d94c0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\tif (match != null) return match;", "+\t\tif (match != null) {", "+\t\t\t// TODO (kent) tag method in verifier if it overrides a method which can cause an anonymous error", "+\t\t\tif (match.hasSubstitutedParameters()) return null; // cannot be picked up as an exact match", "+\t\t\treturn match;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5929e00ba9e208e896d35d0bd82b3d31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "8a6b6162ae3ffaa7b5448bfc27d1bab3854207d2", "commitAfterChange": "5df75ce3074574b9ceea64411eeaa18313a445b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic static FlowInfo conditional(FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": "  \tpublic static FlowInfo conditional(FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-", "+\t\tif (initsWhenTrue == initsWhenFalse) return initsWhenTrue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a8b2d8c7f8b4af192c543569f78c241", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "e968b992e38be58d07a46d70f656322d8b2edb33", "commitAfterChange": "4070a80ec708f74aed77de9c7062557e3db209e8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void buttonPressed(int index)", "signatureAfterChange": " \tpublic void buttonPressed(int index)", "diff": ["+\t\t\tif (null == newEntries) {", "+\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b0729bbab5adc77f92fa82170848b4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "ab98a9939a975b86dfdde2e7a0a6d2de49a261f2", "commitAfterChange": "2bcb3d0c9fa104ef6edd7e53ba16f8b7aff57348", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate String formatStatements(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate String formatStatements(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "diff": ["-\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\tif (lineSeparator != null) {", "+\t\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bcd2d1ca7807a9bd9a7a9f14b7168b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "4c0128f8b7916766f71600c5a09deeca3606acf9", "commitAfterChange": "72576798a2c9c0c359b6a1891fb1b926dbb96230", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "signatureAfterChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "diff": ["-\tfor (int i = 0, length = initialTypeNames.length; i < length; i++)\r", "-\t\tif (fullName.equals(initialTypeNames[i]))\r", "-\t\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation\r", "-\r", "+\tif (initialTypeNames != null){\r", "+\t\tfor (int i = 0, length = initialTypeNames.length; i < length; i++)\r", "+\t\t\tif (fullName.equals(initialTypeNames[i]))\r", "+\t\t\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e3ce73917e469d69eaf7564d4ad15d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "cf8dccca7e26bf94e36e8f031d2a4ef316542d45", "commitAfterChange": "ce73e795e17fb13da77192ae5025c50ccc7665fe", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprivate void disassembleAsModifier(IParameterAnnotation parameterAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": "  \tprivate void disassembleAsModifier(IParameterAnnotation parameterAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t\tif (parameterAnnotation == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed6591e0c01936215683031972f2ccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "5e15d21a2464ebcd530c342a2e007320c442592a", "commitAfterChange": "995f69b7113814f96df0af814f13b94a8deb9b04", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void shutdown()", "signatureAfterChange": " public void shutdown()", "diff": ["-\tObject[] indexNames = indexStates.keyTable;", "-\tfor (int i = 0, l = indexNames.length; i < l; i++) {", "-\t\tString key = (String) indexNames[i];", "-\t\tif (key != null && !knownPaths.containsKey(key))", "-\t\t\tupdateIndexState(key, null);", "+\tif (indexStates != null) {", "+\t\tObject[] indexNames = indexStates.keyTable;", "+\t\tfor (int i = 0, l = indexNames.length; i < l; i++) {", "+\t\t\tString key = (String) indexNames[i];", "+\t\t\tif (key != null && !knownPaths.containsKey(key))", "+\t\t\t\tupdateIndexState(key, null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ef19c2f665bdc21644a4f594f735ab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "628e9c4648e198faf112f84ab4f79974c542dba4", "commitAfterChange": "a5c3db41a58c8521d5f8f73e141ab57108cd47bc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate String formatExpression(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate String formatExpression(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "diff": ["+\t\tif (expression == null) {", "+\t\t\t// a problem occured while parsing the source", "+\t\t\treturn source;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f15c37d9f556b27895f5b5baaebc8d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "38b45821c6a8adb25c41b5b709d94fc0713cc3dd", "commitAfterChange": "e6e3682dbb91d2ddab7a0492b5ea218909cc0c5f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private IGenericType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": "\r private IGenericType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "diff": ["+\t\t\tif (superclassName == null) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f717ebab84c2e5fed71c3a5539d840c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c4eeb254aa3e04b05bb343162722324faf2e87ad", "commitAfterChange": "28bb849fe2ae5896fc2b7b393e373422ae130f52", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "diff": ["-\t\t\tremovedRoots = new HashMap();", "-\t\t\tfor (int i = 0; i < roots.length; i++) {", "-\t\t\t\tIPackageFragmentRoot root = roots[i];", "-\t\t\t\tremovedRoots.put(root.getPath(), root);", "+\t\t\tif (roots != null) {", "+\t\t\t\tremovedRoots = new HashMap();", "+\t\t\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\t\t\tremovedRoots.put(root.getPath(), root);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6070d4c19d3f878a71dca14566e91331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "e39c96237d3777022144ecd47671ab124f53a3bf", "commitAfterChange": "0c48397d1c81fc176b58c758c22d05afdd41ef03", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t\tcheckUnusedImports();", "+\t\t\tif (!this.compilationResult.hasSyntaxError()) checkUnusedImports();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61143450cc85709b6b68f537888193cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "commitAfterChange": "3c4337082bfd6cd03c12a697c9ff074574c40dcb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void setUpSuite() throws Exception", "signatureAfterChange": " public void setUpSuite() throws Exception", "diff": ["-\tthis.javaProject = setUpJavaProject(\"JavaSearch\");", "-\tsetUpJavaProject(\"JavaSearch15\", \"1.5\");", "-\tsetUpJavaProject(\"JavaSearchBugs\");", "+\tif (javaProject == null) {", "+\t\tjavaProject = setUpJavaProject(\"JavaSearch\");", "+\t\tsetUpJavaProject(\"JavaSearch15\", \"1.5\");", "+\t\tsetUpJavaProject(\"JavaSearchBugs\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6346ec2df8245d5fa69b7e0db856d71f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ClassDeclarationImpl.java", "commitBeforeChange": "bd36faa2b158581ca5bdb6f9839633c88b1043bf", "commitAfterChange": "ed3e5f1ef27e69d23edb238a5f0023fbf52ea775", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public ClassType getSuperclass()", "signatureAfterChange": "      public ClassType getSuperclass()", "diff": ["-        if( superClass.isClass() )", "+\t\tif ( superClass == null )", "+\t\t\treturn null;", "+\t\telse if( superClass.isClass() )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6654c6c89861571587fe00fb6f22944a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "458d6ecb95c70f1df88b46b781028646894448a8", "commitAfterChange": "eae1dc9444e6dfc78448846e89895dbf064cc65b", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic MethodBinding getExactConstructor(TypeBinding receiverType, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getExactConstructor(TypeBinding receiverType, InvocationSite invocationSite)", "diff": ["-\t\tfinal TypeVariableBinding[] typeVariables = exactConstructor.typeVariables();", "-\t\tif (typeVariables != Binding.NO_TYPE_VARIABLES) {", "-\t\t\tif (typeVariables.length != genericTypeArguments.length)", "-\t\t\t\treturn null;", "-\t\t\texactConstructor = environment().createParameterizedGenericMethod(exactConstructor, genericTypeArguments);", "+\t\tif (exactConstructor != null) {", "+\t\t\tfinal TypeVariableBinding[] typeVariables = exactConstructor.typeVariables();", "+\t\t\tif (typeVariables != Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\tif (typeVariables.length != genericTypeArguments.length)", "+\t\t\t\t\treturn null;", "+\t\t\t\texactConstructor = environment().createParameterizedGenericMethod(exactConstructor, genericTypeArguments);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "672fe783e4f503e8efdaccd38998a15b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "6b83d22a910c2e140d2fd3f8ea7f6dbc1b911422", "commitAfterChange": "8d0d90902203ccd1f00600a41aa29bdae4aef363", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "diff": ["-\t\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "-\t\t\tElement element = ElementFactory.newElement(currentBinding);", "-\t\t\t_annoToElement.put(anno, element);", "+\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it", "+\t\t\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "+\t\t\t\tElement element = ElementFactory.newElement(currentBinding);", "+\t\t\t\t_annoToElement.put(anno, element);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678a2984a1f591e9844929a8ae59a075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 108, "signatureBeforeChange": " protected void consumeConstructorDeclaration()", "signatureAfterChange": " protected void consumeConstructorDeclaration()", "diff": ["-\t\tif (!this.diet || insideFieldInitializer){", "-\t\t\t// add it only in non-diet mode, if diet_bodies, then constructor call will be added elsewhere.", "-\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tif (!this.options.ignoreMethodBodies) {", "+\t\t\tif (!this.diet || insideFieldInitializer){", "+\t\t\t\t// add it only in non-diet mode, if diet_bodies, then constructor call will be added elsewhere.", "+\t\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "681f50b6f557105c209fc8b9f46e3faa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "d0cadab17e13c2fbabeeab7e19dab0ead49500bf", "commitAfterChange": "8457dc17f56c4fff3fa2589438e210393d270f41", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate void buildMethods()", "signatureAfterChange": " \t \tvoid buildMethods()", "diff": ["-\tprivate void buildMethods() {", "+\tvoid buildMethods() {", "+\t\tSourceTypeBinding sourceType = this.referenceContext.binding;", "+\t\tif (sourceType.areMethodsInitialized()) return;", "+", "-\t\tSourceTypeBinding sourceType = this.referenceContext.binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "694cd2e8e51c333e26aa7a9330bb204c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ConfigurableOption.java", "commitBeforeChange": "c06555674038b0a829a0207484cc16e77bccb8ed", "commitAfterChange": "5f4e9c737df9b212364b9e892d0039c92ce2476a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tpublic int getValueIndex()", "signatureAfterChange": "\r \tpublic int getValueIndex()", "diff": ["-\t\t\r", "+\t\tif (valueIndex == -1)\r", "+\t\t\treturn getDefaultValueIndex();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a73a1422d20108742fd7f4ede793b38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PossibleMatch.java", "commitBeforeChange": "19670fddbc0a6ddb9ec9d01212e02b553d64570a", "commitAfterChange": "6c9185aae05dfac5ea0388c66097677dae2d7a93", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public char[] getContents()", "signatureAfterChange": " public char[] getContents()", "diff": ["-\t\t\tIType type = ((ClassFile) this.openable).getType();", "-\t\t\tcontents = sourceMapper.findSource(type, fileName);", "+\t\t\tif (sourceMapper != null) {", "+\t\t\t\tIType type = ((ClassFile) this.openable).getType();", "+\t\t\t\tcontents = sourceMapper.findSource(type, fileName);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a789f6de1eb629fc469786fd064dfe5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1f3011a16a596c6b45d3fa0d438e471eb169f860", "commitAfterChange": "0456a0d7c2e14290878e38bf42667ae054123754", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": "\r protected void consumeToken(int type)", "signatureAfterChange": "\r protected void consumeToken(int type)", "diff": ["-\t\tfor (int i = 0, max = literals.length; i < max; i++) {\r", "-\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);\r", "+\t\t// could not reproduce, but this is the only NPE\r", "+\t\t// added preventive null check see PR 9035\r", "+\t\tif (literals != null) {\r", "+\t\t\tfor (int i = 0, max = literals.length; i < max; i++) {\r", "+\t\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c64c70abb2f7597f29830c78ddb6a8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "928cd8e8316eeb2efcbe7fb30e50fb2f69f6fb68", "commitAfterChange": "9d19f6563fb8721e98df9e0aad114b9009fa6502", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tprivate void flushBuffer()", "signatureAfterChange": "\r \tprivate void flushBuffer()", "diff": ["-\t\tif (scanner.source[scannerSourceLength - 1] == '\\n' && \r", "-\t\t\tscanner.source[scannerSourceLength - 2] == '\\r') {\r", "+\t\tif (scannerSourceLength > 2) {\r", "+\t\t\tif (scanner.source[scannerSourceLength - 1] == '\\n' && \r", "+\t\t\t\tscanner.source[scannerSourceLength - 2] == '\\r') {\r", "+\t\t\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "+\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 2);\r", "+\t\t\t} else if (scanner.source[scannerSourceLength - 1] == '\\n') {\r", "-\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 2);\r", "-\t\t} else if (scanner.source[scannerSourceLength - 1] == '\\n') {\r", "-\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "-\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "-\t\t} else if (scanner.source[scannerSourceLength - 1] == '\\r') {\r", "-\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "-\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t} else if (scanner.source[scannerSourceLength - 1] == '\\r') {\r", "+\t\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "+\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d62650f09b3d1f02f80b2847c510fe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "cac3a76319e3ea7a465153454d90e0a6e8d9035e", "commitAfterChange": "a3a8860de745314f9db17ad200c9ad0e4e9b06a8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "signatureAfterChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "diff": ["-\t\t\tfor (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {\r", "-\t\t\t\tIBinaryMethod binaryMethod = methods[i];\r", "-\t\t\t\tchar[] selector = binaryMethod.isConstructor() ? type.getElementName().toCharArray() : binaryMethod.getSelector();\r", "-\t\t\t\tif (CharOperation.equals(selector, method.selector)) {\r", "-\t\t\t\t\tString[] parameterTypes = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "-\t\t\t\t\tif (length != parameterTypes.length) continue;\r", "-\t\t\t\t\tboolean sameParameters = true;\r", "-\t\t\t\t\tfor (int j = 0; j < length; j++) {\r", "-\t\t\t\t\t\tTypeReference parameterType = arguments[j].type;\r", "-\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "-\t\t\t\t\t\tfor (int k = 0; k < parameterType.dimensions(); k++) {\r", "-\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\tif (methods != null) {\r", "+\t\t\t\tfor (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {\r", "+\t\t\t\t\tIBinaryMethod binaryMethod = methods[i];\r", "+\t\t\t\t\tchar[] selector = binaryMethod.isConstructor() ? type.getElementName().toCharArray() : binaryMethod.getSelector();\r", "+\t\t\t\t\tif (CharOperation.equals(selector, method.selector)) {\r", "+\t\t\t\t\t\tString[] parameterTypes = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "+\t\t\t\t\t\tif (length != parameterTypes.length) continue;\r", "+\t\t\t\t\t\tboolean sameParameters = true;\r", "+\t\t\t\t\t\tfor (int j = 0; j < length; j++) {\r", "+\t\t\t\t\t\t\tTypeReference parameterType = arguments[j].type;\r", "+\t\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "+\t\t\t\t\t\t\tfor (int k = 0; k < parameterType.dimensions(); k++) {\r", "+\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tString parameterTypeName = parameterTypes[j].replace('/', '.');\r", "+\t\t\t\t\t\t\tif (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {\r", "+\t\t\t\t\t\t\t\tsameParameters = false;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tString parameterTypeName = parameterTypes[j].replace('/', '.');\r", "-\t\t\t\t\t\tif (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {\r", "-\t\t\t\t\t\t\tsameParameters = false;\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;\r", "+\t\t\t\t\t\tif (sameParameters) {\r", "+\t\t\t\t\t\t\treturn type.getMethod(new String(selector), parameterTypes);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (sameParameters) {\r", "-\t\t\t\t\t\treturn type.getMethod(new String(selector), parameterTypes);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0b6e17b80a6a939ac335d2d594189a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "5faa7869071c4610856ff5c18e064a7882c6ef15", "commitAfterChange": "0d04687b56af18c0d3597efa62c9f67d3fdc3a51", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic String getBinaryName()", "signatureAfterChange": " \tpublic String getBinaryName()", "diff": ["-\t\tif (this.binding.isTypeVariable()) {", "+\t\tif (this.binding.isCapture()) {", "+\t\t\treturn null; // no binary name for capture binding", "+\t\t} else if (this.binding.isTypeVariable()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71a0a7f3d845490e34c4252614c19c8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "70823bcdc247c361af65329f86a126cf9616a2fa", "commitAfterChange": "1bd4bf4c4dea2f86129d0f613a3da00767d07bfb", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic Object getLastBuiltState(IProject project, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic Object getLastBuiltState(IProject project, IProgressMonitor monitor)", "diff": ["-\t\tPerProjectInfo info = getPerProjectInfo(project);", "+\t\tif (!JavaProject.hasJavaNature(project)) return null; // should never be requested on non-Java projects", "+\t\tPerProjectInfo info = getPerProjectInfo(project, true/*create if missing*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71c8372c12e9d3df7b48c1d62ee47854", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Override \tpublic boolean hides(Element hidden)", "signatureAfterChange": "  \t@Override \tpublic boolean hides(Element hidden)", "diff": ["+\t\tif (hiddenBinding == hiderBinding) {", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76142aa7f32b1e3b504b82045753e59f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["+\t\tif (method == null) return;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f3b058fb3242ce96679ef1625bc524", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "48aa990cddf66187fee96ecef74653a821fe4039", "commitAfterChange": "2acd248eb60573a009a5b58c86beac17419631cd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void setUp() throws Exception", "signatureAfterChange": " \tprotected void setUp() throws Exception", "diff": ["-\t\tthis.formatterOptions = JAVA_PROJECT.getOptions(true);", "+\t\tif (JAVA_PROJECT != null) {", "+\t\t\tthis.formatterOptions = JAVA_PROJECT.getOptions(true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77b73fde16f58a54694f922ee4b742ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "431e7408b1f322cc72b90589fe7c96489b23e8aa", "commitAfterChange": "ec9bc6be749fbdfaa55a496563818e8733fd8314", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding getAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations)", "signatureAfterChange": " \tpublic TypeBinding getAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations)", "diff": ["+\t\t\t\tif (j < 0) // Not kosher, broken type that is not flagged as invalid while reporting compilation error ? don't touch.", "+\t\t\t\t\treturn type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7944c1ce806918019c550ec9600dd27b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseFileManager.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate Iterable<? extends File> concatFiles(Iterable<? extends File> iterable, Iterable<? extends File> iterable2)", "signatureAfterChange": "  \tprivate Iterable<? extends File> concatFiles(Iterable<? extends File> iterable, Iterable<? extends File> iterable2)", "diff": ["+\t\tif (iterable2 == null) return iterable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a188052f40635bfa47edf50c374e755", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "62fb69101ba8a1fb6f0596c4cb5db8c436f453d3", "commitAfterChange": "561bfcb7dcb83daed0ab2c6ee6b66b4bf5d190e3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void bindThrownExceptions()", "signatureAfterChange": " \tpublic void bindThrownExceptions()", "diff": ["+\t\t\t\t\tif (bindingCompoundName == null) continue; // skip problem case"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a352e4d4bfb79f7938963db26976d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bed888bd269b2eda198b4adcd6f3a8b582afad18", "commitAfterChange": "6ec071ff72d783fa798d4c7ea86b2a2f7803e01d", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "-\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "-\t\t\t\tTypeBinding superType = dim == 0 ? itsInterface : (TypeBinding)environment().createArrayType(itsInterface, dim); // recreate array if needed", "-\t\t\t\tif (!typesToVisit.contains(superType)) {", "-\t\t\t\t\ttypesToVisit.add(superType);", "-\t\t\t\t\tmax++;", "-\t\t\t\t\tTypeBinding superTypeErasure = (itsInterface.isTypeVariable() || itsInterface.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "-\t\t\t\t\tif (superTypeErasure != superType) {", "-\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\t\t\tsomeInvocations.add(superType);", "-\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\tif (itsInterfaces != null) { // can be null during code assist operations that use LookupEnvironment.completeTypeBindings(parsedUnit, buildFieldsAndMethods)", "+\t\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "+\t\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "+\t\t\t\t\tTypeBinding superType = dim == 0 ? itsInterface : (TypeBinding)environment().createArrayType(itsInterface, dim); // recreate array if needed", "+\t\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\t\tmax++;", "+\t\t\t\t\t\tTypeBinding superTypeErasure = (itsInterface.isTypeVariable() || itsInterface.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "+\t\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\t\t\t\t\tsomeInvocations.add(superType);", "+\t\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d132eff28028ea6addd4fa204b07f53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "b1fa07ff3d6475305b2ae07b0c0b04d4f34b1d85", "commitAfterChange": "2ca90ef0d924d12bcc4b7b115059913c5e0d7d4a", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tfinal static public String[] toStrings(char[][] array)", "signatureAfterChange": " \tfinal static public String[] toStrings(char[][] array)", "diff": ["+\t\tif (array == null) return NO_STRINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f1c5da023370e9e75f5d04b37d129eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "53e59f4bd82e02ab18d570f640623d6567762067", "commitAfterChange": "83c109b7c53737ef4619646925b9d4265eb983d8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "diff": ["+\t\t\tif (constructorBinding == null) {", "+\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f7c56cc65e0b1a980025175e19ff3e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "8c8cd78ee7d91af397b355193b993289ef7f4454", "commitAfterChange": "dab69163a24dbd341ec146b21a1806a7799bbbc6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public static void createJar(String[] javaPathsAndContents, String[] extraPathsAndContents, String jarPath, String[] classpath, String compliance, Map options) throws IOException", "signatureAfterChange": " public static void createJar(String[] javaPathsAndContents, String[] extraPathsAndContents, String jarPath, String[] classpath, String compliance, Map options) throws IOException", "diff": ["-\tcompileOptions.putAll(options);", "+\tif (options != null) {", "+\t\tcompileOptions.putAll(options);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa6de42a64e829d002fa39deea9b4a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "312080ad16a6bef0ac87ef3aa13c9fc56f80f732", "commitAfterChange": "9b1fcd23ff081eff51095c88c564eedd01574dc9", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  private void readIndexMap()", "signatureAfterChange": "  private void readIndexMap()", "diff": ["+\t\t\t\t\tif (indexPath == null) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8131f7ecf0c063cbca460e1e0adb9fca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "cdc74d3ea8b9c1ba927b31b4a06700c40fc47e90", "commitAfterChange": "a280ef02cf77778b4b6e5e943f20717b92bc3418", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t} else if ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "-\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "-\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t} else if (checkedType.isValidBinding()) {", "+\t\t// if not a valid binding, an error has already been reported for unresolved type", "+\t\tif ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "+\t\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "825852b5bd15a1b6d6bee35a2b72b3a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3ff7b81bced83cc6ffeee9cd4ddf361110eeeb98", "commitAfterChange": "25f2a2d3f2ea6a2ed84c0af6dba49f7f2a42eab8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tboolean forAnonymousType)", "signatureAfterChange": "\r \r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tboolean forAnonymousType)", "diff": ["-\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "-\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "-\t\t\tMethodBinding constructor = methods[f];\r", "-\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\t\r", "-\t\t\t\tif (constructor.isSynthetic()) continue next;\r", "+\t\tif(methods != null) {\r", "+\t\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "+\t\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "+\t\t\t\tMethodBinding constructor = methods[f];\r", "+\t\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\tif (options.checkVisibility\r", "-\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope)) continue next;\r", "-\r", "-\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "-\t\t\t\tint paramLength = parameters.length;\r", "-\t\t\t\tif (minArgLength > paramLength)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "-\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "-\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "-\t\t\t\t\tTypeBinding type = parameters[i];\r", "-\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "-\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "-\t\t\t\t}\r", "-\t\t\t\tchar[][] parameterNames = findMethodParameterNames(constructor,parameterTypeNames);\r", "-\t\t\t\t\r", "-\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "-\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "-\t\t\t\tif (source == null\r", "-\t\t\t\t\t|| source.length <= endPosition\r", "-\t\t\t\t\t|| source[endPosition] != ')')\r", "-\t\t\t\t\tcompletion = new char[] { ')' };\r", "-\t\t\t\t\r", "-\t\t\t\tint relevance = DEFAULTRELEVANCE;\r", "-\t\t\t\t\r", "-\t\t\t\tif(forAnonymousType){\r", "-\t\t\t\t\trequestor.acceptAnonymousType(\r", "-\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\t\tparameterNames,\r", "-\t\t\t\t\t\tcompletion,\r", "-\t\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\trelevance);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\trequestor.acceptMethod(\r", "-\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\t\tcurrentType.sourceName(),\r", "-\t\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\t\tparameterNames,\r", "-\t\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\t\tcompletion,\r", "-\t\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\trelevance);\r", "+\t\t\t\t\tif (constructor.isSynthetic()) continue next;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\tif (options.checkVisibility\r", "+\t\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope)) continue next;\r", "+\t\r", "+\t\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "+\t\t\t\t\tint paramLength = parameters.length;\r", "+\t\t\t\t\tif (minArgLength > paramLength)\r", "+\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "+\t\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "+\t\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "+\t\t\t\t\t\t\t\tcontinue next;\r", "+\t\r", "+\t\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "+\t\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "+\t\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "+\t\t\t\t\t\tTypeBinding type = parameters[i];\r", "+\t\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "+\t\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tchar[][] parameterNames = findMethodParameterNames(constructor,parameterTypeNames);\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "+\t\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "+\t\t\t\t\tif (source == null\r", "+\t\t\t\t\t\t|| source.length <= endPosition\r", "+\t\t\t\t\t\t|| source[endPosition] != ')')\r", "+\t\t\t\t\t\tcompletion = new char[] { ')' };\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tint relevance = DEFAULTRELEVANCE;\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif(forAnonymousType){\r", "+\t\t\t\t\t\trequestor.acceptAnonymousType(\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\t\t\t\tparameterPackageNames,\r", "+\t\t\t\t\t\t\tparameterTypeNames,\r", "+\t\t\t\t\t\t\tparameterNames,\r", "+\t\t\t\t\t\t\tcompletion,\r", "+\t\t\t\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\trelevance);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\trequestor.acceptMethod(\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\t\t\t\tcurrentType.sourceName(),\r", "+\t\t\t\t\t\t\tparameterPackageNames,\r", "+\t\t\t\t\t\t\tparameterTypeNames,\r", "+\t\t\t\t\t\t\tparameterNames,\r", "+\t\t\t\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\t\t\t\tcompletion,\r", "+\t\t\t\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\trelevance);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82d8e4e853d41e018990fdc610bf729a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "44f667842350aefa80632f7ada7f97ba8718496d", "commitAfterChange": "ae74e5c29550b6c950030ea6351d21da8edae8d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(Argument argument, BlockScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(Argument argument, BlockScope scope)", "diff": ["-\t\ttypeDeclaration.binding.resolveTypesFor(binding);", "-\t\tif (argument.binding != null) {", "-\t\t\targument.binding = new AptSourceLocalVariableBinding(argument.binding, binding);", "+\t\tif (binding != null) {", "+\t\t\ttypeDeclaration.binding.resolveTypesFor(binding);", "+\t\t\tif (argument.binding != null) {", "+\t\t\t\targument.binding = new AptSourceLocalVariableBinding(argument.binding, binding);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83790c49882b4d14078367ed83238bc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "f6fa3be1145d6296c15fb372e60410ee5b7af8f2", "commitAfterChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tint[] removeLastTypeArgument(char[] line)", "signatureAfterChange": " \tint[] removeLastTypeArgument(char[] line)", "diff": ["-\t\twhile (line[idx] != ']') idx--;", "+\t\twhile (line[idx] != ']') {", "+\t\t\tidx--;", "+\t\t\tif (idx == 0) return null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "840f2ddef7c66aa46496e551241a3527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "4cb58ab533c79220136a132032afc1404604a700", "commitAfterChange": "c6eb7c253f30ad97be4157d7b386bdebd6f05934", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic static synchronized GeneratedFileManager getGeneratedFileManager(final IProject project)", "signatureAfterChange": " \t \tpublic static synchronized GeneratedFileManager getGeneratedFileManager(final IProject project)", "diff": ["+\t\tif ( project == null )", "+\t\t\treturn null;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "849d802de82108ab739e6b0e7e6b6ef6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "0e9405a9e49c7485808bf9ceeda288829b9a70e4", "commitAfterChange": "9780986f8f62312ec3af9f68bef8ca099c5a7fef", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected boolean matchesName(char[] pattern, char[] name)", "signatureAfterChange": " protected boolean matchesName(char[] pattern, char[] name)", "diff": ["+\tif (pattern == null) return true; // null is as if it was \"*\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84b18e176d97a7fc303e61c1d2f45307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "commitAfterChange": "ed6404d1b00fb0c4d7b0edc065f94f5cf30ee47f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "signatureAfterChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "diff": ["+\t\t\t\t\tif (annotation == null) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8507f027f6642f6b99baacad2a5b1de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ff3d786f8b733e34cd64f8ef3efff230a2dbff42", "commitAfterChange": "d8e17e252326ade78baaea3eb05d18d16eaf07ae", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void checkSourceAttachmentChange(IResourceDelta delta, IResource res)", "signatureAfterChange": "  \tprivate void checkSourceAttachmentChange(IResourceDelta delta, IResource res)", "diff": ["-\t\t\t\t\troot.close();", "+\t\t\t\t\tif (root != null) {", "+\t\t\t\t\t\troot.close();", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "860c46fb1f8569e280a3232513ca8bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprivate IInitializer createInitializerHandle(\r \t\tTypeDeclaration typeDecl,\r \t\tFieldDeclaration initializer,\r \t\tchar[][] definingTypeNames)", "signatureAfterChange": "\r \tprivate IInitializer createInitializerHandle(\r \t\tTypeDeclaration typeDecl,\r \t\tFieldDeclaration initializer,\r \t\tchar[][] definingTypeNames)", "diff": ["+\t\tif (type == null) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8681d4434102951f2e4e81abd5e9de24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrame.java", "commitBeforeChange": "3817fb9be5d23e5c6f76a434da338233b90b5a46", "commitAfterChange": "8d9f700412e8d76f89db3ccd17a42191a013d35d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void addStackItem(VerificationTypeInfo info)", "signatureAfterChange": " public void addStackItem(VerificationTypeInfo info)", "diff": ["+\tif (info == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86b793ef0a080aca475ee5836b016aa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "953f38ab5a79c58eb5d9e90ca68723f889e48081", "commitAfterChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void addDependentsOf(IPath path, boolean isStructuralChange, StringSet qualifiedNames, StringSet simpleNames, StringSet rootNames)", "signatureAfterChange": "  protected void addDependentsOf(IPath path, boolean isStructuralChange, StringSet qualifiedNames, StringSet simpleNames, StringSet rootNames)", "diff": ["-\t\t\tif (CharOperation.equals(last.toCharArray(), TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\tif (CharOperation.equals(last.toCharArray(), TypeConstants.PACKAGE_INFO_NAME)) {", "+\t\t\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=323785, in the case of default package,", "+\t\t\t\t   there is no need to blame the package itself as there can be no annotations or documentation", "+\t\t\t\t   comment tags in the package-info file that can influence the rest of the package. Just bail out", "+\t\t\t\t   so we don't touch null objects below.", "+\t\t\t\t */", "+\t\t\t\tif (path.isEmpty())", "+\t\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86e9b4957ee46a540c7ff46cb85f9050", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f8b58036c6481fce672aca891a6484620ba73893", "commitAfterChange": "c265aa3ebba5b401de02a35987cc293bd79a6c75", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " \tpublic void setOptions(Map newOptions)", "signatureAfterChange": " \tpublic void setOptions(Map newOptions)", "diff": ["+\t\tif (projectPreferences == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88502f07bfdb05b0998bab6c440483b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "d35828dbe6c72fc68c5ab7d479b15a3b31394d26", "commitAfterChange": "722c4d5360d346a714211adcc2c6d805ac4414b0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, IDocument document) throws JavaModelException", "signatureAfterChange": " \tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, IDocument document) throws JavaModelException", "diff": ["-\t\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "-\t\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "-\t\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\t\tif (methodDeclaration.isConstructor()) {", "+\t\t\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "+\t\t\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "+\t\t\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a375b0d5fe1dca89c287686020f8c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestUtil.java", "commitBeforeChange": "78c270cb0e8bf81b3b471a8bdedbb8d9bf04e016", "commitAfterChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic static java.io.File getFileInPlugin(Plugin plugin, IPath path)", "signatureAfterChange": " \tpublic static java.io.File getFileInPlugin(Plugin plugin, IPath path)", "diff": ["+\t */", "+\t\t\tif(null == installURL)", "+\t\t\t\treturn null; // File Not found", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bc09b124d193d3d4b4756ee588f2491", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "ab98a9939a975b86dfdde2e7a0a6d2de49a261f2", "commitAfterChange": "2bcb3d0c9fa104ef6edd7e53ba16f8b7aff57348", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate String formatCompilationUnit(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate String formatCompilationUnit(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "diff": ["-\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\tif (lineSeparator != null) {", "+\t\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dbd694bcbc4f1edc7ac5544434c1249", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "5596ce7177e982e5dd5f29e0b4e0b8ab6f20d1c8", "commitAfterChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \t \t \tpublic boolean doesParticipateInProject(IJavaProject project)", "signatureAfterChange": " \t \t \t \tpublic boolean doesParticipateInProject(IJavaProject project)", "diff": ["+\t\tif (!AptConfig.isEnabled(project)) {", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e39d9beaaa8c27c22cd5971249d8ba3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "b377fb155bdf84a45a253666e2da1d467869be2e", "commitAfterChange": "424b9c711eb8f066b325841662effb171f3ae4ef", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r public String toString()", "signatureAfterChange": "\r public String toString()", "diff": ["+\tif (this == VERIFIED_OK){\r", "+\t\treturn \"JavaModelStatus[OK]\"; //$NON-NLS-1$\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e64eac129c33eedd888f1eb770f7bf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/AstNodeFinder.java", "commitBeforeChange": "5a3a5f398a8971568181868be2d5d76728016763", "commitAfterChange": "44cc03459f9020b4da0ebdb14fa0624b7d8dfc4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FieldDeclaration findField(IField fieldHandle)", "signatureAfterChange": " \tpublic FieldDeclaration findField(IField fieldHandle)", "diff": ["+\t\tif (typeDecl == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f9a590051ccd9b4cdc6642b65f8f58e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t\tif (positions == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fae98a905fb9cfa889d64dbb8337903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "ec0896f6be6c41a0353321bffc1f242fe4e5e1b4", "commitAfterChange": "b0bd844e638d627fddf9ed3dbc5637db4513a8de", "methodNumberBeforeChange": 435, "methodNumberAfterChange": 435, "signatureBeforeChange": " public void unusedPrivateField(FieldDeclaration fieldDecl)", "signatureAfterChange": " public void unusedPrivateField(FieldDeclaration fieldDecl)", "diff": ["+\tif (excludeDueToAnnotation(fieldDecl.annotations)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fe1894cf3890b537358eb06b7ad6394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "0afb6a8af8c4303e5dd78ba653e96f2baec6aaff", "commitAfterChange": "1decf6de90c742ae800c62bb40e904ecf7cf0dbd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void consumeFormalParameter(boolean isVarArgs)", "signatureAfterChange": " protected void consumeFormalParameter(boolean isVarArgs)", "diff": ["-\t\t\ttype.sourceEnd = endOfEllipsis;", "+\t\t\tif (extendedDimensions == 0) {", "+\t\t\t\ttype.sourceEnd = endOfEllipsis;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90b2df9e6e33efe0ad3c5a3aa896d451", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "commitAfterChange": "2bb908fe4c4bec3f1e5a84b7bbc8c64b4eaa7704", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-\t\t\t\tFileGenerationResult result = gfm.generateFileDuringBuild( _env.getFile(),  _typeName, contents, null /* progress monitor */ );", "-\t\t\t\t_env.addGeneratedFile( result.getFile(), result.isModified());", "-\t\t\t\t", "-\t\t\t\t// don't set to false, we don't want to overwrite a previous iteration setting it to true", "-\t\t\t\tif ( result.getSourcePathChanged() )", "-\t\t\t\t\t_env.setSourcePathChanged( true );", "+\t\t\t\tFileGenerationResult result = gfm.generateFileDuringBuild( ", "+\t\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );", "+\t\t\t\tif( result != null ){\t\t", "+\t\t\t\t\t_env.addGeneratedFile( result.getFile(), result.isModified());", "+\t\t\t\t\t// don't set to false, we don't want to overwrite a previous iteration setting it to true", "+\t\t\t\t\tif ( result.getSourcePathChanged() )", "+\t\t\t\t\t\t_env.setSourcePathChanged( true );", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "918a39f8f1ad133e016e6871d5798c1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "commitAfterChange": "495498c492866181dc63a6039b81ee18c37f454c", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 62, "signatureBeforeChange": " \t \tprivate void parseMethod()", "signatureAfterChange": " \t \tprivate void parseMethod()", "diff": ["-\t\tparseFlags();", "+\t \tif (this.scanner.isAtThrownStart()) {", "+\t\t\tparseThrownExceptions();", "+\t \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9214943b0e5946d31192623e75062cd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "commitAfterChange": "70cdd2572147b22def640ddfc07bb300efba9743", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic Answer findType(String name, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, boolean checkRestrictions, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType(String name, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, boolean checkRestrictions, IProgressMonitor monitor)", "diff": ["+\t\tif (index == 0) {", "+\t\t\treturn null;  // bug 377710 - e.g. \".Foo\" (no package, but not \"default\" package)", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92fd35abc2fad5fea8fb16d276bf96ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "4f3f71c2c491e262535413be517afb51c0438761", "commitAfterChange": "df9cf00897f77fb882dcde584b107e44867c57cc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected IType getHandle(IGenericType genericType)", "signatureAfterChange": "\r protected IType getHandle(IGenericType genericType)", "diff": ["+\tif (genericType == null) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9376a97a1fa02f0ad01e74819fab0741", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "5fad474fe873700d0e43495d7c1c8c2c489d0d4f", "commitAfterChange": "d1974547d7c9577873b59a9bbfd6fce3981cc7e4", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \tpublic String getVariablesAsXMLString() throws CoreException", "signatureAfterChange": "\r \tpublic String getVariablesAsXMLString() throws CoreException", "diff": ["-\t\t\tElement varElement= document.createElement(\"variable\"); //$NON-NLS-1$\r", "-\t\t\tvarElement.setAttribute(\"name\", var); //$NON-NLS-1$\r", "-\t\t\tvarElement.setAttribute(\"path\", varPath.toString());\t\t\t //$NON-NLS-1$\r", "-\t\t\trootElement.appendChild(varElement);\r", "+\t\t\tif (varPath != null){\r", "+\t\t\t\tElement varElement= document.createElement(\"variable\"); //$NON-NLS-1$\r", "+\t\t\t\tvarElement.setAttribute(\"name\", var); //$NON-NLS-1$\r", "+\t\t\t\tvarElement.setAttribute(\"path\", varPath.toString());\t\t\t //$NON-NLS-1$\r", "+\t\t\t\trootElement.appendChild(varElement);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93911576c6fe1f1d9ce7c8832a92bfff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementBuilder.java", "commitBeforeChange": "f7875034147ccd8d0394fde55ae89a4e6ecb2e45", "commitAfterChange": "a2ea87d1c5ef301691eaddfeca2630d042a49293", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\tSortMethodDeclaration(int sourceStart, int modifiers, char[] name, char[][] parametersNames, char[][] parametersTypes, char[][] thrownExceptions, char[] returnType)", "signatureAfterChange": " \t\tSortMethodDeclaration(int sourceStart, int modifiers, char[] name, char[][] parametersNames, char[][] parametersTypes, char[][] thrownExceptions, char[] returnType)", "diff": ["-\t\t\tthis.returnType = new String(returnType);", "+\t\t\tif (returnType != null) {", "+\t\t\t\tthis.returnType = new String(returnType);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ffcdc775869cd29a6328e2d461ba87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ecaa55a5b0fdf5b2969e187f9c7ea64fe41466b3", "commitAfterChange": "195b7f74c2847e766faf55780f87d7733eaf87d5", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tpublic boolean isSubtypeOfRawType(TypeBinding paramType)", "signatureAfterChange": "  \tpublic boolean isPossibleSubtypeOfRawType(TypeBinding paramType)", "diff": ["-\tpublic boolean isSubtypeOfRawType(TypeBinding paramType) {", "+\tpublic boolean isPossibleSubtypeOfRawType(TypeBinding paramType) {", "+\t\t\tif (!currentType.isHierarchyConnected()) return true; // do not fault in super types right now, so assume one is a raw type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "975d0bd76082f5c8b8193eb3cb6f70ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "786c31d9ecce9ffa121f77e75a31a23616243d78", "commitAfterChange": "ca4e1b5f934aed1dee0d7aabe08265d0c6c1b8f7", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tITypeBinding resolveType(AnonymousClassDeclaration type)", "signatureAfterChange": " \tITypeBinding resolveType(AnonymousClassDeclaration type)", "diff": ["+\t\t\tif (typeBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "981551ae65556ec8b455b30cf0a163cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "5fc0a896150e2bf83e1744c7e2639f528f668272", "commitAfterChange": "d5037ff9ecee16ca60b86ad580ca6b3f8e03ee6a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=107124", "+\t\t\t// contents can potentially be null if a IOException occurs while retrieving the contents", "+\t\t\tif (contents == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9879c232042ee54e416ceb1fa65e44a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "7cfb26e28d56a6fee52a57e6dcdb9045863b6227", "commitAfterChange": "58ba36970b62e85055d743e983529c59c428ef51", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\t\tif (currentType == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a70a2c8260cac72eb949334965a8a20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "2280fea0c7ffa905aa9d4633b1f02fa1aa3159f9", "commitAfterChange": "21f6a121ff0eaaf97215e1aa3e526871a6d87488", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\t", "+\t\t\tif (typeBinding == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ad425f031d8cbac57e956b212281854", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "cafb328a42240bc62f70f6b130384a29f0e8d16a", "commitAfterChange": "2e9602655400e1beef4a84cdcbb0206d826dd7a1", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "signatureAfterChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "diff": ["-\t\t\t\t\tthis.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));", "+\t\t\t\t\tif (this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "+\t\t\t\t\t\t// focus type is not visible from this project", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bc6e61e603fc5b1b98c11b93930d8ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "ad2da02858ca7c8babcaa54d1755f5d5dc7c4cca", "commitAfterChange": "2800b00fd8a32c02dd22b73112db63e4fdf348f6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic HierarchyBuilder(TypeHierarchy hierarchy) throws JavaModelException", "signatureAfterChange": " \t \tpublic HierarchyBuilder(TypeHierarchy hierarchy) throws JavaModelException", "diff": ["-\t\tSearchableEnvironment searchableEnvironment = project.newSearchableNameEnvironment(unitsToLookInside);", "-\t\tthis.nameLookup = searchableEnvironment.nameLookup;", "-\t\tthis.hierarchyResolver =", "-\t\t\tnew HierarchyResolver(", "-\t\t\t\tsearchableEnvironment,", "-\t\t\t\tproject.getOptions(true),", "-\t\t\t\tthis,", "-\t\t\t\tnew DefaultProblemFactory());", "+\t\tif (project != null) {", "+\t\t\tSearchableEnvironment searchableEnvironment = project.newSearchableNameEnvironment(unitsToLookInside);", "+\t\t\tthis.nameLookup = searchableEnvironment.nameLookup;", "+\t\t\tthis.hierarchyResolver =", "+\t\t\t\tnew HierarchyResolver(", "+\t\t\t\t\tsearchableEnvironment,", "+\t\t\t\t\tproject.getOptions(true),", "+\t\t\t\t\tthis,", "+\t\t\t\t\tnew DefaultProblemFactory());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb93911c67a50682a9b9006532c5558", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "412cc2672dcf3d9edf4fa7f95f4250e00587b472", "commitAfterChange": "66aac02937f04c170f8d05dba872c2c7a8d764e4", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "signatureAfterChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "diff": ["+\t\t\t\tif (currentType.isHierarchyBeingConnected())", "+\t\t\t\t\treturn null; // looking for an undefined member type in its own superclass ref"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d25e69ba4ea9aa7ba2b7b05c538c7e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Initializer.java", "commitBeforeChange": "d48c3936eb7643859e6c2cea0aecbe0fd30a502d", "commitAfterChange": "45a50f132d1a94817dc9fe333d375cdfb8483391", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Initializer(Block block, int modifiers)", "signatureAfterChange": "  \tpublic Initializer(Block block, int modifiers)", "diff": ["-", "-\t\tdeclarationSourceStart = sourceStart = block.sourceStart;", "+\t\t", "+\t\tif (block != null) {", "+\t\t\tdeclarationSourceStart = sourceStart = block.sourceStart;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ece60f2f36d32492e7d08113357268e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/ResourceChangedListener.java", "commitBeforeChange": "4cb58ab533c79220136a132032afc1404604a700", "commitAfterChange": "c6eb7c253f30ad97be4157d7b386bdebd6f05934", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "signatureAfterChange": "  \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "diff": ["+\t\t\t", "+\t\t\tif ( project == null ) ", "+\t\t\t\treturn true;", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a028cb07d5704843910472cc0864dc49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "fd5301cada873ffee16939f68b8d409ae5bbd68a", "commitAfterChange": "1cf6796515efd25e37070e5d5fd11527ade4f393", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " public void illegalLocalTypeDeclaration(TypeDeclaration typeDeclaration)", "signatureAfterChange": " public void illegalLocalTypeDeclaration(TypeDeclaration typeDeclaration)", "diff": ["+\tif (isRecoveredName(typeDeclaration.name)) return;", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05d048696f673c01fcd298414b49ca6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f447e8419317d96ca676850de75b170e4276d1fc", "commitAfterChange": "0b6cbc7336ec44b9257b7aa04e8ba2a7e4c8be56", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+\t\tif (codegenBinding.isVarargs())", "+\t\t\treturn; // completely managed by transforming into implicit lambda expression.", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a17ab50acc38243bc9fa7059e7241e2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "bebdc9460e44c1806cb13aa45b2621b0b8025a79", "commitAfterChange": "fc3af6c8a8336b49210037033165b32598c2fe96", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": "\r \tpublic static void setOptions(Hashtable newOptions)", "diff": ["-\t\t\t//if (key.equals(CORE_ENCODING)) continue; // skipped, contributed by resource prefs\r", "+\t\t\tif (key.equals(CORE_ENCODING)) continue; // skipped, contributed by resource prefs\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22b1f68f04a1282d8199a2ed4edac19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "diff": ["-\t\t\t\t\t\t\tStringBuffer javadocCompletion = new StringBuffer();", "-\t\t\t\t\t\t\tif (receiver.isThis()) {", "-\t\t\t\t\t\t\t\tselector = (((JavadocImplicitTypeReference)receiver).token);", "-\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "-\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t\tif (receiver != null) {", "+\t\t\t\t\t\t\t\tStringBuffer javadocCompletion = new StringBuffer();", "+\t\t\t\t\t\t\t\tif (receiver.isThis()) {", "+\t\t\t\t\t\t\t\t\tselector = (((JavadocImplicitTypeReference)receiver).token);", "+\t\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else if (receiver instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) receiver;", "+\t\t\t\t\t\t\t\t\tselector = typeRef.token;", "+\t\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\t\t\t\t\tjavadocCompletion.append(typeRef.token);", "+\t\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else if (receiver instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) receiver;", "+\t\t\t\t\t\t\t\t\tselector = typeRef.tokens[typeRef.tokens.length-1];", "+\t\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\t\t\t\t\tjavadocCompletion.append(CharOperation.concatWith(typeRef.tokens, '.'));", "+\t\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (receiver instanceof JavadocSingleTypeReference) {", "-\t\t\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) receiver;", "-\t\t\t\t\t\t\t\tselector = typeRef.token;", "-\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "-\t\t\t\t\t\t\t\t\tjavadocCompletion.append(typeRef.token);", "-\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t\t\t// Append parameters types", "+\t\t\t\t\t\t\t\tjavadocCompletion.append(selector);", "+\t\t\t\t\t\t\t\tjavadocCompletion.append('(');", "+\t\t\t\t\t\t\t\tif (constructor.parameters != null) {", "+\t\t\t\t\t\t\t\t\tfor (int p=0, ln=constructor.parameters.length; p<ln; p++) {", "+\t\t\t\t\t\t\t\t\t\tif (p>0) javadocCompletion.append(\", \"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\tTypeBinding argTypeBinding = constructor.parameters[p];", "+\t\t\t\t\t\t\t\t\t\tcreateType(argTypeBinding.erasure(), javadocCompletion);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (receiver instanceof JavadocQualifiedTypeReference) {", "-\t\t\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) receiver;", "-\t\t\t\t\t\t\t\tselector = typeRef.tokens[typeRef.tokens.length-1];", "-\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "-\t\t\t\t\t\t\t\t\tjavadocCompletion.append(CharOperation.concatWith(typeRef.tokens, '.'));", "-\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tjavadocCompletion.append(')');", "+\t\t\t\t\t\t\t\tcompletion = javadocCompletion.toString().toCharArray();", "-\t\t\t\t\t\t\t// Append parameters types", "-\t\t\t\t\t\t\tjavadocCompletion.append(selector);", "-\t\t\t\t\t\t\tjavadocCompletion.append('(');", "-\t\t\t\t\t\t\tif (constructor.parameters != null) {", "-\t\t\t\t\t\t\t\tfor (int p=0, ln=constructor.parameters.length; p<ln; p++) {", "-\t\t\t\t\t\t\t\t\tif (p>0) javadocCompletion.append(\", \"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tTypeBinding argTypeBinding = constructor.parameters[p];", "-\t\t\t\t\t\t\t\t\tcreateType(argTypeBinding.erasure(), javadocCompletion);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tjavadocCompletion.append(')');", "-\t\t\t\t\t\t\tcompletion = javadocCompletion.toString().toCharArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a36e05c99bee61fbaafc7b768d0b9b89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Util.java", "commitBeforeChange": "e531081bb749248fefdd86a3cc7a770c20b0d4b7", "commitAfterChange": "b2cf46864e436b1687a8147226cac3f073baa6a1", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "signatureAfterChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "diff": ["+\t\tif (argumentsString == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a45e232bf822011a354c3746fd331959", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "786c31d9ecce9ffa121f77e75a31a23616243d78", "commitAfterChange": "ca4e1b5f934aed1dee0d7aabe08265d0c6c1b8f7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tITypeBinding resolveExpressionType(Expression expression)", "diff": ["+\t\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a461e2b3e8c3be4ba42b02ee0bb3383b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "ab98a9939a975b86dfdde2e7a0a6d2de49a261f2", "commitAfterChange": "2bcb3d0c9fa104ef6edd7e53ba16f8b7aff57348", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate String formatClassBodyDeclarations(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate String formatClassBodyDeclarations(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "diff": ["-\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\tif (lineSeparator != null) {", "+\t\t\tthis.preferences.line_delimiter = lineSeparator;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a477d1bf906b919ecbf3ed35f6c37ec2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected IType getHandle(IGenericType genericType)", "signatureAfterChange": "\r protected IType getHandle(IGenericType genericType)", "diff": ["+\tif (genericType == null) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a51c58e7605ec6603f0e162b1fb32076", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "dc4de554479d1bd7115bbb51a83f104f76dfaa9e", "commitAfterChange": "a462f60bcd5621db94a0ab92a7b3533ebbfd0b51", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r void recordTypeReference(TypeBinding type)", "signatureAfterChange": "\r void recordTypeReference(TypeBinding type)", "diff": ["-\t\trecordReference(actualType.isNestedType()\r", "+\t\tif (actualType.isLocalType()) return; // no need to add references to a local type\r", "+\t\trecordReference(actualType.isMemberType()\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e23581dc4334b73fb39fc35287b2d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ReferenceCollection.java", "commitBeforeChange": "17f252997734a1fb1f7e356e8b4b3c43b6ed95af", "commitAfterChange": "9c32a0d630f75ae5d76609dca85ab8ac1779ac96", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  void addDependencies(String[] typeNameDependencies)", "signatureAfterChange": "  void addDependencies(String[] typeNameDependencies)", "diff": ["+\t\t\t\tif (temp == EmptyQualifiedNames) break; // qualifiedTypeName is a well known name"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76cb48d4754d8cd68a1db8dc5661eec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java", "commitBeforeChange": "74cd39cf6e739108d05e5fe68e013caacb550927", "commitAfterChange": "8d179b274180ed6b0408715a3052c776545ec578", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void log(Throwable e, String message)", "signatureAfterChange": " \tpublic static void log(Throwable e, String message)", "diff": ["-\t\te.printStackTrace();", "+\t\tif (e != null) {", "+\t\t\te.printStackTrace();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7e2c7f485f1d497d68d3525553ec77d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java", "commitBeforeChange": "f979078d350c923813972d098c8322ebbe6fcac2", "commitAfterChange": "0b5e37f204beb7cc9cae8ed4ae732b208cc6415c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate String getInternalName()", "signatureAfterChange": "  \tprivate String getInternalName()", "diff": ["-\t\t\treturn new String(typeBinding.compoundName[typeBinding.compoundName.length - 1]);", "+\t\t\tif (typeBinding != null) {", "+\t\t\t\treturn new String(typeBinding.compoundName[typeBinding.compoundName.length - 1]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85396a15b0d50d34ba831d92669e1b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7f7148c3b7ae3451b296c63ec6faa42df92b750d", "commitAfterChange": "e562014fc7f6276a90541f6d031954413a725f91", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected void reportAccurateTypeReference(SearchMatch match, ASTNode typeRef, char[] name) throws CoreException", "signatureAfterChange": " protected void reportAccurateTypeReference(SearchMatch match, ASTNode typeRef, char[] name) throws CoreException", "diff": ["-\t", "-\t// Compute source positions of the qualified reference ", "+", "-\tScanner scanner = this.parser.scanner;", "-\tscanner.setSource(this.currentPossibleMatch.getContents());", "-\tscanner.resetTo(sourceStart, sourceEnd);", "+\t", "+\t// Compute source positions of the qualified reference ", "+\tif (name != null) {", "+\t\tScanner scanner = this.parser.scanner;", "+\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "+\t\tscanner.resetTo(sourceStart, sourceEnd);", "-\tint token = -1;", "-\tint currentPosition;", "-\tdo {", "-\t\tcurrentPosition = scanner.currentPosition;", "-\t\ttry {", "-\t\t\ttoken = scanner.getNextToken();", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\tif (token == TerminalTokens.TokenNameIdentifier && this.pattern.matchesName(name, scanner.getCurrentTokenSource())) {", "-\t\t\tint length = scanner.currentPosition-currentPosition;", "-\t\t\tmatch.setOffset(currentPosition);", "-\t\t\tmatch.setLength(length);", "-\t\t\treport(match);", "-\t\t\treturn;", "-\t\t}", "-\t} while (token != TerminalTokens.TokenNameEOF);", "+\t\tint token = -1;", "+\t\tint currentPosition;", "+\t\tdo {", "+\t\t\tcurrentPosition = scanner.currentPosition;", "+\t\t\ttry {", "+\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\tif (token == TerminalTokens.TokenNameIdentifier && this.pattern.matchesName(name, scanner.getCurrentTokenSource())) {", "+\t\t\t\tint length = scanner.currentPosition-currentPosition;", "+\t\t\t\tmatch.setOffset(currentPosition);", "+\t\t\t\tmatch.setLength(length);", "+\t\t\t\treport(match);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t} while (token != TerminalTokens.TokenNameEOF);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a87e50b52b2cf374692281b63bc1bb6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "c8d7e735b1fdf27bd805f7e5ae0a6eacad7e4530", "commitAfterChange": "8fed2cc02e45d0c02f4805c1a6592bef37ca778a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected void setGenericCast(int index, TypeBinding someGenericCast)", "signatureAfterChange": " protected void setGenericCast(int index, TypeBinding someGenericCast)", "diff": ["+\tif (someGenericCast == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a88aedc195a9283480d3e1ec86339650", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "25d711b6378677530fb32ec4af48437daa9af8c9", "commitAfterChange": "311302a34bca17cc44584d40a0411fdbd4638263", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["+\t\t\t\tif (castedExpressionType == null) return; // cannot do better"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8ad61219ee586a4f98806135b1edeab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BaseTypeBinding.java", "commitBeforeChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "commitAfterChange": "4ddbf9298dc613dd5b5aca8c1b39fe7b57d91f28", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding unannotated()", "signatureAfterChange": " \t \tpublic TypeBinding unannotated()", "diff": ["+\t\tif (!this.hasTypeAnnotations())", "+\t\t\treturn this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d83ce57f4bcf653f6bbe9ce7f47e6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "b64a02b9e712c55c420cd8321afb668d733edebf", "commitAfterChange": "010dc9e8d593c0ba9b4912ff35db0ecfac142eab", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+        \tif (methodExceptions[i].isUncheckedException(true)) {", "+        \t\tcontinue next;", "+    \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa5a706dafffb7ae76f512a9536c09a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "ec0896f6be6c41a0353321bffc1f242fe4e5e1b4", "commitAfterChange": "b0bd844e638d627fddf9ed3dbc5637db4513a8de", "methodNumberBeforeChange": 437, "methodNumberAfterChange": 438, "signatureBeforeChange": " public void unusedPrivateType(TypeDeclaration typeDecl)", "signatureAfterChange": " public void unusedPrivateType(TypeDeclaration typeDecl)", "diff": ["+}", "-", "+\tif (excludeDueToAnnotation(typeDecl.annotations)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa91473f9bc6d992463cae4c6416b811", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "commitAfterChange": "e0e72ddcc0cb92dd5918821db9f129be4dc54623", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["+\tif (!this.binding.isValidBinding()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc62ef1990037d2d52cc34d2aa3e26a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "abd7eb8067d05a106270885f602de8a64d08c556", "commitAfterChange": "51349b07c2a6f70ec333ca325c91564e571e10b7", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic TypeBinding[] greaterLowerBound(TypeBinding[] types)", "signatureAfterChange": " \tpublic TypeBinding[] greaterLowerBound(TypeBinding[] types)", "diff": ["+\t\t\tif (iType == null) continue;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac4fcd177c8256e704866f9c41d6559c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "64cb8a4c19a9cbefd929b863841fdc325e83b331", "commitAfterChange": "fcd23c7f31f72a5138ea1cad062c9d8a4a84f1dc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public boolean isRecursive(ArrayList visited)", "signatureAfterChange": " public boolean isRecursive(ArrayList visited)", "diff": ["+\tif (targetConstructor == null) return false; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=358762"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada5d7c539844ec0d667266d4c2eabfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "f716de8eda55be1ba0bb07652365a512b218a530", "commitAfterChange": "9e715badadb0ecc544bc65719994b18da12eefe9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic static String getNameWithoutJavaLikeExtension(String fileName)", "signatureAfterChange": " \tpublic static String getNameWithoutJavaLikeExtension(String fileName)", "diff": ["+\t\tif (index == -1)", "+\t\t\treturn fileName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adbd36e2c8318e2f05f0bedb492f3132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java", "commitBeforeChange": "01c814e6bd45b7fbd49eec3a490338a17c21d9fb", "commitAfterChange": "7f41c81f9c7d91f8343c9192b06df30e34c066aa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic Element newElement(Binding binding, ElementKind kindHint)", "signatureAfterChange": " \tpublic Element newElement(Binding binding, ElementKind kindHint)", "diff": ["+\t\tif (binding == null)", "+\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af7af74d9434ef58b0e76e146ae75959", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "6ebd66d084b36e21840502fb2a7d814341a3b190", "commitAfterChange": "9673337e54ce81e8d22e9d4de37e3f9f0230c274", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " protected TypeBinding captureTypeAnnotations(Scope scope, ReferenceBinding enclosingType, TypeBinding argType, Annotation[] typeArgumentAnnotations)", "signatureAfterChange": " protected TypeBinding captureTypeAnnotations(Scope scope, ReferenceBinding enclosingType, TypeBinding argType, Annotation[] typeArgumentAnnotations)", "diff": ["+    if (annotationBits == 0L)", "+    \treturn argType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8710f273e3968afd0d735aa063f54e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "diff": ["-\t\ttype.superInterfaces = new TypeReference[interfaceCount];", "-\t\tfor (int i = 0; i < interfaceCount; i++) {", "-\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "-\t\t\ttype.superInterfaces[i].bits |= ASTNode.IsSuperType;", "+\t\tif (interfaceCount > 0) {", "+\t\t\ttype.superInterfaces = new TypeReference[interfaceCount];", "+\t\t\tfor (int i = 0; i < interfaceCount; i++) {", "+\t\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "+\t\t\t\ttype.superInterfaces[i].bits |= ASTNode.IsSuperType;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1159baaceecf91b2d6173e1a858459b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/LRUCache.java", "commitBeforeChange": "a45ae3e7ece9f194d45e66f0f249a64adf7b92a5", "commitAfterChange": "92f72449b2d53deda609c1d10780dc370c23647d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\tpublic synchronized String printStats()", "signatureAfterChange": " \t\tpublic synchronized String printStats()", "diff": ["+\t\t\tint oldestCounter = getOldestTimestampCounter();", "+\t\t\tif (oldestCounter == 0) {", "+\t\t\t\treturn \"No elements in cache\"; //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tint oldestCounter = getOldestTimestampCounter();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b66a2cdb8661599b048b978590ff05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathJar.java", "commitBeforeChange": "fb1cdfed170508154ac69c6283fb498228204f0f", "commitAfterChange": "524f4ffae49579e103a152caac281a0f346c952b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r NameEnvironmentAnswer findClass(char[] className, char[][] packageName)", "signatureAfterChange": "\r \r NameEnvironmentAnswer findClass(char[] className, char[][] packageName)", "diff": ["+\tif (directoryCache == null) buildDirectoryStructure();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1cdf53a892012cc71b0734d8e6de0a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static TypeBinding[] substitute(Substitution substitution, TypeBinding[] originalTypes)", "signatureAfterChange": " \tpublic static TypeBinding[] substitute(Substitution substitution, TypeBinding[] originalTypes)", "diff": ["+\t\tif (originalTypes == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b216e5f7b513231399692f8ba446575e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "3d23167de0cc8549a88a05b8aab19471006b9190", "commitAfterChange": "0d12af121ecb12dbfbd4c47c7838f089d904a970", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprotected IFile searchLocallyForIFile(final IBinding binding)", "signatureAfterChange": " \t \tprotected IFile searchLocallyForIFile(final IBinding binding)", "diff": ["+\t\tif (_astRoot == null) {", "+\t\t\treturn null;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2aee051f6cfdb2d59769c417d45ea29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6c797406271c70e354dc360e4e2b55dc743bf914", "commitAfterChange": "6bb034ac24fec033a91d15d668c7ba33f5039fc9", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 201, "signatureBeforeChange": " private boolean javadocVisibility(int visibility, int modifiers)", "signatureAfterChange": " private boolean javadocVisibility(int visibility, int modifiers)", "diff": ["+\tif (modifiers < 0) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d742b04b4978ac1025bbdd2b822b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "f96cd0ecae0cba5d7e7fa39b67cc4c6c7e6eaa8e", "commitAfterChange": "67a18e4f65a6a995842d9a3b7571c2508b82d670", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\t\t\ttypeVars = enclosingMethod.typeVariables;", "+\t\t\t\tif (enclosingMethod != null) {", "+\t\t\t\t\ttypeVars = enclosingMethod.typeVariables;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b43e94170351a012a4797c819e89cc89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "ab38aa14999138bc924ed90a34693b7dee5aa21a", "commitAfterChange": "b5c1652db351290a42a75d3cdd3241441a4413e2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate Expression parseMemberValue(char[] memberValue)", "signatureAfterChange": " \t \tprivate Expression parseMemberValue(char[] memberValue)", "diff": ["+\t\tif (memberValue == null) {", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56d0296fb05382c4f6dc102caa58694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic void acceptSearchMatch(SearchMatch searchMatch) throws CoreException", "signatureAfterChange": " \t\tpublic void acceptSearchMatch(SearchMatch searchMatch) throws CoreException", "diff": ["-\t\t\twriteLineToResult();", "+\t\t\tif (line != null) {", "+\t\t\t\twriteLineToResult();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5c8d7e880a612714f497824be1d134d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes)", "signatureAfterChange": " \tpublic void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes)", "diff": ["-\t\tfor (int i = 0; i < argCount; i++)", "-\t\t\taddTypeReference(parameterTypes[i]);", "+\t\tif (parameterTypes != null) {", "+\t\t\tfor (int i = 0; i < argCount; i++)", "+\t\t\t\taddTypeReference(parameterTypes[i]);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6771c0733992b5b1c7ff64fe44ef663", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Override \tpublic boolean hides(Element hidden)", "signatureAfterChange": "  \t@Override \tpublic boolean hides(Element hidden)", "diff": ["+\t\tif (hiderBinding == hiddenBinding) {", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69ef0aa0fe044bb980f51549ba07194", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "df9d894cd0e76a976715c718f9f4760adeb04a3d", "commitAfterChange": "02a805d51c160f3e1393fc32dacb1d21c6e05b2d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\t\t\t \t\tpublic CompilationParticipant[] getCompilationParticipants(IJavaProject project)", "signatureAfterChange": " \t\t\t\t \t\tpublic CompilationParticipant[] getCompilationParticipants(IJavaProject project)", "diff": ["+\t\t\tif (participants == NO_PARTICPANTS)", "+\t\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b3252d26eeefc02306d44aa7d8cfda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "b89ef89b8b82c7a5d2e21ed9e4c3180d1054cb0a", "commitAfterChange": "f7411d0a028a62aa23533cbe212a3c9b2f96d62a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void shutdown()", "signatureAfterChange": " public void shutdown()", "diff": ["-\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "-\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "-\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\tif (VERBOSE)", "-\t\t\t\t\tJobManager.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "-\t\t\t\tindexesFiles[i].delete();", "+\t\tif (indexesFiles != null) {", "+\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "+\t\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "+\t\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\tJobManager.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "+\t\t\t\t\tindexesFiles[i].delete();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6ddefef6330bef7e5973042b871a094", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "a189e5d72f95566c9a02bf534ce46a7bf3b3f09c", "commitAfterChange": "550a751ce1bc873d333fa63fec3308d2d2a04ec5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic boolean condition18_5_2_bullet_3_3_1(InferenceVariable alpha, TypeBinding targetType)", "signatureAfterChange": " \tpublic boolean condition18_5_2_bullet_3_3_1(InferenceVariable alpha, TypeBinding targetType)", "diff": ["+\t\tif (ts == null)", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6ed7d7b05e8aa108ce00c8a2404ad81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "786c31d9ecce9ffa121f77e75a31a23616243d78", "commitAfterChange": "ca4e1b5f934aed1dee0d7aabe08265d0c6c1b8f7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tIPackageBinding resolvePackage(PackageDeclaration pkg)", "signatureAfterChange": " \tIPackageBinding resolvePackage(PackageDeclaration pkg)", "diff": ["+\t\t\t\tif (packageBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74a0d44240805e66a3d635bd3b3ea3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "2364afdbec314daa8d0b5edfe834ccbfea646954", "commitAfterChange": "5ccdb7e247bbbd1f8f7142380f221525938bf5a9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t} else if ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "-\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "-\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t} else if (checkedType.isValidBinding()) {", "+\t\t// if not a valid binding, an error has already been reported for unresolved type", "+\t\tif ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "+\t\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9b72ce386f9c0005d8eb2458c8c93ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "ec0896f6be6c41a0353321bffc1f242fe4e5e1b4", "commitAfterChange": "b0bd844e638d627fddf9ed3dbc5637db4513a8de", "methodNumberBeforeChange": 434, "methodNumberAfterChange": 434, "signatureBeforeChange": " public void unusedPrivateConstructor(ConstructorDeclaration constructorDecl)", "signatureAfterChange": " public void unusedPrivateConstructor(ConstructorDeclaration constructorDecl)", "diff": ["-", "+\t", "+\tif (excludeDueToAnnotation(constructorDecl.annotations)) return;", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb00afde49646140571ca3910d223618", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes)", "signatureAfterChange": " \tpublic void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes)", "diff": ["-\t\tfor (int i = 0; i < argCount; i++)", "-\t\t\taddTypeReference(parameterTypes[i]);", "+\t\tif (parameterTypes != null) {", "+\t\t\tfor (int i = 0; i < argCount; i++)", "+\t\t\t\taddTypeReference(parameterTypes[i]);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc460bfe82a9a0f732ba1e4c59d10fdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java", "commitBeforeChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "commitAfterChange": "ed6404d1b00fb0c4d7b0edc065f94f5cf30ee47f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic List<? extends AnnotationMirror> getAnnotationMirrors(AnnotationBinding[] annotations)", "signatureAfterChange": " \tpublic List<? extends AnnotationMirror> getAnnotationMirrors(AnnotationBinding[] annotations)", "diff": ["+\t\t\tif (annotation == null) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd59485f9c079c6d84b70d506f5ffaff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePairBinding.java", "commitBeforeChange": "f38491fd234d2a2b50ab4a08bb29f67687e71ddc", "commitAfterChange": "80e40b4c60040fa0aa8e1c95f16e2597f3f0acf0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic boolean isDefault()", "signatureAfterChange": "  \tpublic boolean isDefault()", "diff": ["+\t\tif (defaultValue == null) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bda45cdd417528a8fb759874b93e8014", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "ce6302231c2cb0eb74b3fff9bb1ac1dc4df5b279", "commitAfterChange": "e5bce80011e3833bbea45afb8cd4fb116b193fc5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\tif (last > positions.length) last = positions.length;", "+\tif (last == 0) return;", "+\tif (last > positions.length) last = positions.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf09c24fa59772a46c31d9343fc17794", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\t\tif (receiverType == null) break checkParameterizedAllocation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf8d1accca1625aa03892340a2880052", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected ISchedulingRule getSchedulingRule()", "signatureAfterChange": " \tprotected ISchedulingRule getSchedulingRule()", "diff": ["+\t\tif (resource == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c00ba8317fcb3259b72c88c3228109f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "f5fed9940e8f245f60c38c95ed3dbfa6a338d460", "commitAfterChange": "f9c8085d5f196168022784cbce4ebb351d6b98d6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \tpublic IJavaElement getJavaElement()", "diff": ["+\t\t\tif (fileName == null) return null; // case of a WilCardBinding that doesn't have a corresponding Java element"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0a24b7c1f3c50794ceca8d9803a51a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected IType getHandle(IGenericType genericType)", "signatureAfterChange": "\r protected IType getHandle(IGenericType genericType)", "diff": ["+\tif (genericType == null) return null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d8d9f04b8aed458747caa019cf1149", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "70823bcdc247c361af65329f86a126cf9616a2fa", "commitAfterChange": "1bd4bf4c4dea2f86129d0f613a3da00767d07bfb", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tvoid reconcilePreferenceFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "signatureAfterChange": " \tvoid reconcilePreferenceFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "diff": ["+\t\t\t\t\tif (projectPreferences == null) return; // not a Java project"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3ee8b873b7d4e6eaa22c60672de5b0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "c0727764c7745f2e76ecba317b98c9848fa2e099", "commitAfterChange": "df861f983af4902bdf37c7b1df21d759f350bf91", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "diff": ["+\t\t\t\tif (boundI == boundJ)", "+\t\t\t\t\tcontinue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5036aa9d13e407d57b80c2556aca96a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "0d85904377f1dc1c47411ed763b6eaac7a854229", "commitAfterChange": "669ae8f2e4bed1883362fa2acbc44706352d2378", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "signatureAfterChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "diff": ["+\tif (md.binaryFolder.equals(resource)) return; // skip nested output folder when the project is a source folder"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59da7b489df31f2fd8b2fb7f7a8f68b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void generateCode(ClassScope classScope, ClassFile enclosingClassFile)", "signatureAfterChange": " \tpublic void generateCode(ClassScope classScope, ClassFile enclosingClassFile)", "diff": ["-\t\tif (hasBeenGenerated)", "-\t\t\treturn;", "-\t\t((NestedTypeBinding) binding).computeSyntheticArgumentsOffset();", "+\t\tif (hasBeenGenerated) return;", "+\t\tif (binding != null) ((NestedTypeBinding) binding).computeSyntheticArgumentSlotSizes();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c626d71dc4ad3a6bdc45b70082c05ae5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "93d86f0655c98ed807648682de6277090af4d041", "commitAfterChange": "0afc1a9b53aa0325da7fb144a7014b79087d1149", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField, boolean onlyLongest)", "signatureAfterChange": "  \tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField, boolean onlyLongest)", "diff": ["+\t\tif (namePartsPtr == -1) {", "+\t\t\treturn new char[][] { sourceName };", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c634f5fa0aef37f43fe320f3b9b53203", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tpublic void reportSuperTypeReference(\r \t\tTypeReference typeRef,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportSuperTypeReference(\r \t\tTypeReference typeRef,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["+\t\tif (type == null) return;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c66cb70da7d9bbb2675a4033009b175d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "4dd777707c2803e1e51e44f3ccb37074b166c552", "commitAfterChange": "bb0062c9650742fadc1d35f4bf3fa1b174bd1969", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected boolean matchesTypeReference(char[] pattern, TypeReference type)", "signatureAfterChange": " protected boolean matchesTypeReference(char[] pattern, TypeReference type)", "diff": ["+\tif (type == null) return true; // treat as an inexact match"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6fdcd3e61f2308f85b1f1fc5f0b9120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "9db26c7bea8b081f74e04400ef73e415034114ae", "commitAfterChange": "3ee5245339c28c9f118b2d56a8158cb4aa75c312", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic String getSeverityString(int irritant)", "signatureAfterChange": "  \tpublic String getSeverityString(int irritant)", "diff": ["+\t\tif (this.infoThreshold.isSet(irritant)) {", "+\t\t\treturn INFO;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c78b94caa8624c553ffc4c6fc5d4d9bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NameReference.java", "commitBeforeChange": "cc6cd8059ee44aa98cdf190effa0e5b0901154a4", "commitAfterChange": "a10414ff4882f78075e3cd686b35229cd3fd960e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void setActualReceiverType(ReferenceBinding receiverType)", "signatureAfterChange": " public void setActualReceiverType(ReferenceBinding receiverType)", "diff": ["+\tif (receiverType == null) return; // error scenario only"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c935e6a771fedac9e8008f9f83010e84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "2a23c62d5a3b74783613a638cca640e487db040a", "commitAfterChange": "79c4ba61903262b42e2a1f500afb283891f6e429", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tfor (int i = 0, l = allInheritedMethods == null ? 0 : allInheritedMethods.length; i < l; i++) {", "-\t\t\tif (allInheritedMethods[i] != null && detectInheritedNameClash(originalInherited, allInheritedMethods[i].original()))", "-\t\t\t\treturn;", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=322001. We used to unconditionally check here", "+\t\t   for name clashes between the overridden inherited method and all other \"non-matching\"", "+\t\t   inherited methods with the same method selector here. ", "+\t\t   ", "+\t\t   This makes no sense when the current type is concrete as the overridden method has been", "+\t\t   effectively replaced and is hidden in the current class and cannot contribute to a clash.", "+\t\t   The overriding method or the bridge may collide with an inherited method, but that is being", "+\t\t   checked elsewhere. ", "+\t\t   ", "+\t\t   As a matter of fact, this is true even for abstract types, but we do retain the name clash", "+\t\t   check for abstract types here for compatibility with javac.", "+\t\t   ", "+\t\t   See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=293615 for a very similar issue.", "+\t\t*/", "+\t\tif (this.type.isAbstract()) { ", "+\t\t\tfor (int i = 0, l = allInheritedMethods == null ? 0 : allInheritedMethods.length; i < l; i++) {", "+\t\t\t\tif (allInheritedMethods[i] != null && detectInheritedNameClash(originalInherited, allInheritedMethods[i].original()))", "+\t\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb549f046f7d59c0ce254c2bd4da91d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "a0ec748bf5f6b9a543116c5e57b9f6a98949d743", "commitAfterChange": "9bb323761257fd426141c76d64df753d88acaa39", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t\tpublic void preferenceChange(PreferenceChangeEvent event)", "signatureAfterChange": " \t\tpublic void preferenceChange(PreferenceChangeEvent event)", "diff": ["+\t\t\tif (null == options) {", "+\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbca552858a17cad506d7bff294262a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java", "commitBeforeChange": "b0991463d796f8d722da593e2f8f5c9ff730ab5e", "commitAfterChange": "7cfd56aa5aa705aacf0169b60235be81421d4a6e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t@Override \tpublic boolean hides(Element target)", "signatureAfterChange": "  \t@Override \tpublic boolean hides(Element target)", "diff": ["-\t\t\tFieldBinding hider = (FieldBinding)_binding;", "+\t\t\tif (hidden.isPrivate()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tFieldBinding hider = (FieldBinding)_binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc09e94f764cd5e332080ea4472031d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "06e2337ca747c930ab0dfce473967ff17b176d61", "commitAfterChange": "994b7e2201a6044f122169d1a8922423e74571c5", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "  \tpublic IClasspathEntry[] getReferencedClasspathEntries(IClasspathEntry libraryEntry, IJavaProject project)", "signatureAfterChange": "  \tpublic IClasspathEntry[] getReferencedClasspathEntries(IClasspathEntry libraryEntry, IJavaProject project)", "diff": ["-\t\tPerProjectInfo perProjectInfo = getPerProjectInfo(project.getProject(), false);", "+\t\tif (project == null)", "+\t\t\treturn referencedEntries;", "+\t\t", "+\t\tPerProjectInfo perProjectInfo = getPerProjectInfo(project.getProject(), false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd6d939f444b10d22c246a77551e55ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, final boolean recreate)", "signatureAfterChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "diff": ["-\tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, final boolean recreate){", "-\t\t", "-\t\t// clean up the classpath so that when we actually delete the ", "+\tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate){", "+\t\t// clean up the classpath first so that when we actually delete the ", "-\t\t// (which will cause us to re-add the folder to correct ", "-\t\t// the classpath problem)", "-\t\t  \ttry{\t", "+\t\t\ttry{\t", "+\t\t", "-\t\t ", "-\t\t// schedule the deletion job.", "-\t\tfinal IWorkspaceRunnable runnable = new IWorkspaceRunnable(){", "-            public void run(IProgressMonitor monitor)", "-            {\t\t", "-            \tif( srcFolder != null ){", "-\t            \ttry{", "-\t            \t\tsrcFolder.delete(true, false, null);", "-\t            \t}catch(CoreException e){", "-\t            \t\tAptPlugin.log(e, \"failed to delete old generated source folder \" + srcFolder.getName() ); //$NON-NLS-1$", "-\t            \t}catch(OperationCanceledException cancel){", "-\t            \t\tAptPlugin.log(cancel, \"deletion of generated source folder got cancelled\"); //$NON-NLS-1$", "+\t\t", "+\t\tif( srcFolder != null ){", "+\t\t\t// schedule the deletion job.", "+\t\t\tfinal IWorkspaceRunnable runnable = new IWorkspaceRunnable(){", "+\t            public void run(IProgressMonitor monitor)", "+\t            {\t\t", "+\t            \tif( srcFolder != null ){", "+\t\t            \ttry{", "+\t\t            \t\tsrcFolder.delete(true, false, null);", "+\t\t            \t}catch(CoreException e){", "+\t\t            \t\tAptPlugin.log(e, \"failed to delete old generated source folder \" + srcFolder.getName() ); //$NON-NLS-1$", "+\t\t            \t}catch(OperationCanceledException cancel){", "+\t\t            \t\tAptPlugin.log(cancel, \"deletion of generated source folder got cancelled\"); //$NON-NLS-1$", "+\t\t            \t}", "-            \t}", "-            };", "-        };", "-        IWorkspace ws = _aptProject.getJavaProject().getProject().getWorkspace();", "-        try{", "-        \tws.run(runnable, ws.getRoot(), IWorkspace.AVOID_UPDATE, null);", "-        }catch(CoreException e){", "-    \t\tAptPlugin.log(e, \"Runnable for deleting old generated source folder \" + srcFolder.getName() + \" failed.\"); //$NON-NLS-1$ //$NON-NLS-2$", "-    \t}", "+\t            };", "+\t        };", "+\t        IWorkspace ws = _aptProject.getJavaProject().getProject().getWorkspace();", "+\t        try{", "+\t        \tws.run(runnable, ws.getRoot(), IWorkspace.AVOID_UPDATE, null);", "+\t        }catch(CoreException e){", "+\t    \t\tAptPlugin.log(e, \"Runnable for deleting old generated source folder \" + srcFolder.getName() + \" failed.\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t    \t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd919c622e1eb354614f93555ae7a816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "3d6e745b11a60b30c093ec69f29acab507efa6f4", "commitAfterChange": "5837879057685bd1f5ce163887ddcdfbc05fb795", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public final boolean needBlankFinalFieldInitializationCheck(FieldBinding binding)", "signatureAfterChange": " public final boolean needBlankFinalFieldInitializationCheck(FieldBinding binding)", "diff": ["+\t\tif (methodScope.isLambdaScope())", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf6463308b3ba44300a7941affd292f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public JavaSearchNameEnvironment(IJavaProject javaProject, org.eclipse.jdt.core.ICompilationUnit[] copies)", "signatureAfterChange": " \t public JavaSearchNameEnvironment(IJavaProject javaProject, org.eclipse.jdt.core.ICompilationUnit[] copies)", "diff": ["-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = copies[i];", "-\t\t\tIPackageDeclaration[] pkgs = workingCopy.getPackageDeclarations();", "-\t\t\tString pkg = pkgs.length > 0 ? pkgs[0].getElementName() : \"\"; //$NON-NLS-1$", "-\t\t\tString cuName = workingCopy.getElementName();", "-\t\t\tString mainTypeName = Util.getNameWithoutJavaLikeExtension(cuName);", "-\t\t\tString qualifiedMainTypeName = pkg.length() == 0 ? mainTypeName : pkg.replace('.', '/') + '/' + mainTypeName;", "-\t\t\tthis.workingCopies.put(qualifiedMainTypeName, workingCopy);", "+\t\tif (copies != null) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = copies[i];", "+\t\t\t\tIPackageDeclaration[] pkgs = workingCopy.getPackageDeclarations();", "+\t\t\t\tString pkg = pkgs.length > 0 ? pkgs[0].getElementName() : \"\"; //$NON-NLS-1$", "+\t\t\t\tString cuName = workingCopy.getElementName();", "+\t\t\t\tString mainTypeName = Util.getNameWithoutJavaLikeExtension(cuName);", "+\t\t\t\tString qualifiedMainTypeName = pkg.length() == 0 ? mainTypeName : pkg.replace('.', '/') + '/' + mainTypeName;", "+\t\t\t\tthis.workingCopies.put(qualifiedMainTypeName, workingCopy);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d11b9cd553812ea56a8881752146544c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "a189e5d72f95566c9a02bf534ce46a7bf3b3f09c", "commitAfterChange": "550a751ce1bc873d333fa63fec3308d2d2a04ec5", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tpublic boolean condition18_5_2_bullet_3_3_2(InferenceVariable alpha, TypeBinding targetType, InferenceContext18 ctx18)", "signatureAfterChange": "  \tpublic boolean condition18_5_2_bullet_3_3_2(InferenceVariable alpha, TypeBinding targetType, InferenceContext18 ctx18)", "diff": ["+\t\tif (ts == null)", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e7d02386b493d1c83edaebf1d1cea6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["-\t\t\t\tStringBuffer javadocCompletion = new StringBuffer();", "-\t\t\t\tif (receiver.isThis()) {", "-\t\t\t\t\tif ((this.assistNodeInJavadoc & /*IN_JAVADOC_TEXT*/CompletionOnJavadoc.TEXT) != 0) {", "-\t\t\t\t\t\tjavadocCompletion.append('#');", "-\t\t\t\t\t}", "-\t\t\t\t} else if ((this.assistNodeInJavadoc & /*IN_JAVADOC_TEXT*/CompletionOnJavadoc.TEXT) != 0) {", "-\t\t\t\t\tif (receiver instanceof JavadocSingleTypeReference) {", "-\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) receiver;", "-\t\t\t\t\t\tjavadocCompletion.append(typeRef.token);", "-\t\t\t\t\t\tjavadocCompletion.append('#');", "-\t\t\t\t\t} else if (receiver instanceof JavadocQualifiedTypeReference) {", "-\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) receiver;", "-\t\t\t\t\t\tcompletion = CharOperation.concat(CharOperation.concatWith(typeRef.tokens, '.'), method.selector, '#');", "-\t\t\t\t\t\tfor (int t=0,nt =typeRef.tokens.length; t<nt; t++) {", "-\t\t\t\t\t\t\tif (t>0) javadocCompletion.append('.');", "-\t\t\t\t\t\t\tjavadocCompletion.append(typeRef.tokens[t]);", "+\t\t\t\tif (receiver != null) {", "+\t\t\t\t\tStringBuffer javadocCompletion = new StringBuffer();", "+\t\t\t\t\tif (receiver.isThis()) {", "+\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\t\tjavadocCompletion.append('#');", "-\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t} else if ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\tif (receiver instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) receiver;", "+\t\t\t\t\t\t\tjavadocCompletion.append(typeRef.token);", "+\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t} else if (receiver instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) receiver;", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(CharOperation.concatWith(typeRef.tokens, '.'), method.selector, '#');", "+\t\t\t\t\t\t\tfor (int t=0,nt =typeRef.tokens.length; t<nt; t++) {", "+\t\t\t\t\t\t\t\tif (t>0) javadocCompletion.append('.');", "+\t\t\t\t\t\t\t\tjavadocCompletion.append(typeRef.tokens[t]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tjavadocCompletion.append(method.selector);", "-\t\t\t\t// Append parameters types", "-\t\t\t\tjavadocCompletion.append('(');", "-\t\t\t\tif (method.parameters != null) {", "-\t\t\t\t\tfor (int p=0, ln=method.parameters.length; p<ln; p++) {", "-\t\t\t\t\t\tif (p>0) javadocCompletion.append(\", \"); //$NON-NLS-1$", "-\t\t\t\t\t\tTypeBinding argTypeBinding = method.parameters[p];", "-\t\t\t\t\t\tcreateType(argTypeBinding.erasure(), javadocCompletion);", "+\t\t\t\t\tjavadocCompletion.append(method.selector);", "+\t\t\t\t\t// Append parameters types", "+\t\t\t\t\tjavadocCompletion.append('(');", "+\t\t\t\t\tif (method.parameters != null) {", "+\t\t\t\t\t\tfor (int p=0, ln=method.parameters.length; p<ln; p++) {", "+\t\t\t\t\t\t\tif (p>0) javadocCompletion.append(\", \"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tTypeBinding argTypeBinding = method.parameters[p];", "+\t\t\t\t\t\t\tcreateType(argTypeBinding.erasure(), javadocCompletion);", "+\t\t\t\t\t\t}", "+\t\t\t\t\tjavadocCompletion.append(')');", "+\t\t\t\t\tcompletion = javadocCompletion.toString().toCharArray();", "-\t\t\t\tjavadocCompletion.append(')');", "-\t\t\t\tcompletion = javadocCompletion.toString().toCharArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ff4ff2aee807be6deb39467c356911", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathJar.java", "commitBeforeChange": "fb1cdfed170508154ac69c6283fb498228204f0f", "commitAfterChange": "524f4ffae49579e103a152caac281a0f346c952b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r boolean isPackage(char[][] compoundName, char[] packageName)", "signatureAfterChange": "\r \r boolean isPackage(char[][] compoundName, char[] packageName)", "diff": ["-\treturn \r", "+\tif (directoryCache == null) buildDirectoryStructure();\r", "+\treturn\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ac1c2d1d845fd983c856e324a76fec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "b0991463d796f8d722da593e2f8f5c9ff730ab5e", "commitAfterChange": "7cfd56aa5aa705aacf0169b60235be81421d4a6e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Override \tpublic boolean hides(Element hidden)", "signatureAfterChange": "  \t@Override \tpublic boolean hides(Element hidden)", "diff": ["+\t\tif (hiddenBinding.isPrivate()) {", "+\t\t\treturn false;", "+\t\t}", "-\t\t", "-", "-\t\t", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5645d1c700dbab1e38a2de846d09a90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "d0cadab17e13c2fbabeeab7e19dab0ead49500bf", "commitAfterChange": "8457dc17f56c4fff3fa2589438e210393d270f41", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void buildFields()", "signatureAfterChange": " \t \tvoid buildFields()", "diff": ["-\tprivate void buildFields() {", "-\t\tSourceTypeBinding sourceType = this.referenceContext.binding;\t\t", "+\tvoid buildFields() {", "+\t\tSourceTypeBinding sourceType = this.referenceContext.binding;", "+\t\tif (sourceType.areFieldsInitialized()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6af2ca8571bb70181c41b981e9a200a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationValueImpl.java", "commitBeforeChange": "ef0604aef9ae504bcfc77425341e6baf6891cd21", "commitAfterChange": "b16439228426b14cb0612ff6650bc46c3d9f2a61", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic AnnotationValueImpl( final Object value, \t\t\t\t\t\t\t\tfinal String name, \t\t\t\t\t\t\t\tfinal int index, \t\t\t\t\t\t\t\tfinal AnnotationMirrorImpl annotation, \t\t\t\t\t\t\t\tfinal ProcessorEnvImpl env)", "signatureAfterChange": " \tpublic AnnotationValueImpl( final Object value, \t\t\t\t\t\t\t\tfinal String name, \t\t\t\t\t\t\t\tfinal int index, \t\t\t\t\t\t\t\tfinal AnnotationMirrorImpl annotation, \t\t\t\t\t\t\t\tfinal BaseProcessorEnv env)", "diff": ["-\t\t\t\t\t\t\t\tfinal ProcessorEnvImpl env)", "+\t\t\t\t\t\t\t\tfinal BaseProcessorEnv env)", "+\t\tassert value != null : \"value is null\"; //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b8e54ad74739b0353a23fbd0f2ca9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "45da29fec046b4bab81c695f4ab7b327659ef75f", "commitAfterChange": "a81195ff09b3e00d1785645fd080f14d3c2692cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (constantExpression.constant == NotAConstant)", "-\t\t\tcurrentScope.problemReporter().caseExpressionMustBeConstant(constantExpression);", "-", "-\t\tthis.constantExpression.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (constantExpression != null) {", "+\t\t\tif (constantExpression.constant == NotAConstant) {", "+\t\t\t\tcurrentScope.problemReporter().caseExpressionMustBeConstant(constantExpression);", "+\t\t\t}", "+\t\t\tthis.constantExpression.analyseCode(currentScope, flowContext, flowInfo);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d725c30897c1f8a968dd69db6304ac39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "cec5c4076614b297f82170cc1c845649dd2df0cb", "commitAfterChange": "65a63579ebc9b37573db7995b64988407cf25ede", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner, boolean lastChild)", "signatureAfterChange": " \tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner, boolean lastChild)", "diff": ["-\t\t", "+\t\tif (idx == -1) {", "+\t\t\treturn nodeEnd;", "+\t\t}", "+", "+\t\t\t\t// stop search on condition 1)", "+\t\t\t\t\t\t// stop search on condition 2)", "+\t\t\t\t\t// stop search on condition 3)", "-\t\t\t// Store leading comments indexes", "+\t\t\t// Store trailing comments indexes"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d767f2c20619fd432e4d66b001b95f26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "119ab5f40e72a2e48985fa6b9f7f154cd8ab7391", "commitAfterChange": "8f964ebcfbbe015096db590c4a751ad5a6ca4f58", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["+\t\t\t\t} else if (castedExpressionType == NullBinding){", "+\t\t\t\t\tcontinue; // tolerate null argument cast"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7ff1aaf76d075293cadae5b5ff64776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "commitAfterChange": "f91a77f7dbbae615b9ce90f64f6be8f6d8a36ad5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \t\r \tprivate void checkAndSetModifiers()", "signatureAfterChange": "\r \t\r \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\t\tif (method.isStrictfp())\r", "-\t\t\t\t\tmodifiers |= AccStrictfp;\r", "-\t\t\t\tif (method.isDeprecated())\r", "-\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;\r", "+\t\t\t\tif (method != null){\r", "+\t\t\t\t\tif (method.isStrictfp())\r", "+\t\t\t\t\t\tmodifiers |= AccStrictfp;\r", "+\t\t\t\t\tif (method.isDeprecated())\r", "+\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d6f89167061cecbc221374416d741c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "327da611a0b93f8998399de3e02937c2497802a7", "commitAfterChange": "42d0e867915c53d81d65bec90350d5bf95684e73", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "diff": ["-\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "+\t\t\tif (name != null) {", "+\t\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8e19559423fe61677ed739d6fdc0f17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "28746d11ccbd26f27de3e6f37e37aa3059c91ec1", "commitAfterChange": "cbaf16ad0859cb1637417b40466837eb3e833f00", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r protected Buffer(IFile file, IOpenable owner, boolean readOnly)", "signatureAfterChange": "\r protected Buffer(IFile file, IOpenable owner, boolean readOnly)", "diff": ["-\tsetReadOnly(readOnly);\r", "+\tif (file == null) {\r", "+\t\tsetReadOnly(readOnly);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d917509c858910bedd7ea68b93bd2cc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tpublic void reportTypeDeclaration(\r \t\tTypeDeclaration typeDeclaration,\r \t\tchar[][] simpleTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportTypeDeclaration(\r \t\tTypeDeclaration typeDeclaration,\r \t\tchar[][] simpleTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["+\t\tif (type == null) return;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9de0074fd65974eeb15dc9428bdbcdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "b0991463d796f8d722da593e2f8f5c9ff730ab5e", "commitAfterChange": "7cfd56aa5aa705aacf0169b60235be81421d4a6e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Override \tpublic boolean hides(Element hidden)", "signatureAfterChange": "  \t@Override \tpublic boolean hides(Element hidden)", "diff": ["+\t\tif (hiddenBinding.isPrivate()) {", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da22f273e4806133310de42d5be629db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "c2e1b19147149cbb623e6a2a40f8f224348d89bd", "commitAfterChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif (exceptionArgumentType.id == T_void){\r", "-\t\t\t\tscope.problemReporter().illegalVoidExpression(exceptionArgument);\r", "+\t\t\tif (exceptionArgumentType != null){\r", "+\t\t\t\tif (exceptionArgumentType.id == T_void){\r", "+\t\t\t\t\tscope.problemReporter().illegalVoidExpression(exceptionArgument);\r", "+\t\t\t\t}\r", "+\t\t\t\texceptionArgument.implicitConversion = (exceptionArgumentType.id << 4) + exceptionArgumentType.id;\r", "-\t\t\texceptionArgument.implicitConversion = (exceptionArgumentType.id << 4) + exceptionArgumentType.id;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da5b47a9c960d656e490f5d2555c2813", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static ReferenceBinding[] substitute(Substitution substitution, ReferenceBinding[] originalTypes)", "signatureAfterChange": " \tpublic static ReferenceBinding[] substitute(Substitution substitution, ReferenceBinding[] originalTypes)", "diff": ["+\t\tif (originalTypes == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc8afb81d13275f8b490cd0d5dc71b93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "c7530b44102791083c7f5487f5dd4ce7cebdfce6", "commitAfterChange": "f3583cbdecac6b2a3a121f21a86edfd4a2e9d534", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static TypeDeclarationImpl createReferenceType(ITypeBinding binding, BaseProcessorEnv env)", "signatureAfterChange": "     public static TypeDeclarationImpl createReferenceType(ITypeBinding binding, BaseProcessorEnv env)", "diff": ["-        if(binding == null || binding.isNullType()) return null;        ", "+        if(binding == null || binding.isNullType()) return null;", "+        // \"Recovered\" bindings are bindings to unresolved types.  The type itself may be considered", "+        // to exist (as an ErrorType) but there is no declaration.", "+        if (binding.isRecovered()) return null;", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd00c90dc25bf9c73ed2defaafc6b263", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0ea651863b1d73c9d75d3ccd27dfe7c065a440ed", "commitAfterChange": "0d60306b8c535b7b29f07c162eee46e36d664408", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " protected IType lookupType(ReferenceBinding typeBinding)", "signatureAfterChange": " protected IType lookupType(ReferenceBinding typeBinding)", "diff": ["+\tif (typeBinding == null) return null;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de232227d5a70fb9e810c5b20a5a371e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "75626c86f330665d1108699a16e66c07439f9416", "commitAfterChange": "bef3e5a79fe47869598af3178c0ba26481433802", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "-\t\t\t\t\t\tConstant cst = inits[j].constant;", "-\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\tif (irritant != 0) {", "-\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "-\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\tif (inits != null) {", "+\t\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "+\t\t\t\t\t\t\tConstant cst = inits[j].constant;", "+\t\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de85df4c41c41672e987d9d216155c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java", "commitBeforeChange": "15354ef30ff1d65c0145e0a7585cb94774313c51", "commitAfterChange": "f49cf7529ae8b80cdf3f120143dad37a4f24e498", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate String getRecipientKey()", "signatureAfterChange": " \t \tprivate String getRecipientKey()", "diff": ["+\t\tif (node == null) {", "+\t\t\t// Can happen if annotation bindings have been resolved before having parsed the declaration", "+\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0690c99db5b050b04e864e0008785ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 421, "signatureBeforeChange": " public boolean atConflictScenario(int token)", "signatureAfterChange": " public boolean atConflictScenario(int token)", "diff": ["-\t   start of <type argument> and (b) the use of '(' in '(' expression ')' and '( type ')' and '(' lambda formal parameters ')'. When requested thus,", "-\t   the scanner helps by fabricating synthetic tokens and injecting them into the stream ahead of the tokens that trigger conflicts in the absence", "-\t   of these artificial tokens. These manufactured token help transform the grammar into LALR(1) by splitting the states so that they have unambigious", "-\t   prefixes.", "+\t   start of <type argument> and (b) the use of '(' in '(' expression ')' and '( type ')' and '(' lambda formal parameters ')'. (c) whether the token @", "+\t   begins a Java SE5 style declaration annotation or if it begins a SE8 style type annotation. When requested thus, the scanner helps by fabricating ", "+\t   synthetic tokens and injecting them into the stream ahead of the tokens that trigger conflicts in the absence of these artificial tokens. These ", "+\t   manufactured token help transform the grammar into LALR(1) by splitting the states so that they have unambigious prefixes.", "-\ttoken = token == TokenNameLPAREN ? TokenNameBeginLambda : TokenNameBeginTypeArguments;", "+\tif (token != TokenNameAT) {", "+\t\ttoken = token == TokenNameLPAREN ? TokenNameBeginLambda : TokenNameBeginTypeArguments;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18f90848bb5d0ab705d132beda1ad34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t} else if (this.resolvedType.isMemberType()) { // inner class constructor reference must be qualified", "+\t\t} else if (this.resolvedType.isMemberType()) {", "-\t\t\tReferenceBinding enclosingTypeBinding = allocationType;", "-\t\t\tif (type instanceof JavadocQualifiedTypeReference && (((JavadocQualifiedTypeReference)type).tokens.length != length)) {", "-\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(this.memberStart+1, this.sourceEnd, scope.getDeclarationModifiers());", "-\t\t\t} else {", "-\t\t\t\tint idx = length;", "-\t\t\t\twhile (idx > 0 && CharOperation.equals(qualification[--idx], enclosingTypeBinding.sourceName) && (enclosingTypeBinding = enclosingTypeBinding.enclosingType()) != null) {", "-\t\t\t\t\t// verify that each qualification token matches enclosing types", "-\t\t\t\t}", "-\t\t\t\tif (idx > 0 || enclosingTypeBinding != null) {", "+\t\t\tif (length > 1) { // accept qualified member class constructor reference => see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=103304", "+\t\t\t\tReferenceBinding enclosingTypeBinding = allocationType;", "+\t\t\t\tif (type instanceof JavadocQualifiedTypeReference && ((JavadocQualifiedTypeReference)type).tokens.length != length) {", "+\t\t\t\t} else {", "+\t\t\t\t\tint idx = length;", "+\t\t\t\t\twhile (idx > 0 && CharOperation.equals(qualification[--idx], enclosingTypeBinding.sourceName) && (enclosingTypeBinding = enclosingTypeBinding.enclosingType()) != null) {", "+\t\t\t\t\t\t// verify that each qualification token matches enclosing types", "+\t\t\t\t\t}", "+\t\t\t\t\tif (idx > 0 || enclosingTypeBinding != null) {", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(this.memberStart+1, this.sourceEnd, scope.getDeclarationModifiers());", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1b3750aa891041db53438ddbf3fe3b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " private ReferenceBinding typeToRecord(TypeBinding type)", "signatureAfterChange": " private ReferenceBinding typeToRecord(TypeBinding type)", "diff": ["+\tif (type.isIntersectionCastType()) return null;  // constituents would have been recorded. "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1fb9dded68d049f144ded13d32f8ac7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["+\t\tif (method == null) return; // case of a match found in a type other than the current class file\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2fdb4c50866826e6ae2b7943997febf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "f4e80cbfc8046dac5978d05b428fdff1de38bfb7", "commitAfterChange": "31aadb2fd882236e1c133884089194fdff8d8f94", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "    public void resolve()", "signatureAfterChange": "    public void resolve()", "diff": ["-\t\t\tReferenceBinding superclassBinding = this.binding.superclass;", "-\t\t\tloop: while (superclassBinding != null) {", "-\t\t\t\tif (superclassBinding == javaxRmiCorbaStub) {", "-\t\t\t\t\tneedSerialVersion = false;", "-\t\t\t\t\tbreak loop;", "+\t\t\tif (javaxRmiCorbaStub.isValidBinding()) {", "+\t\t\t\tReferenceBinding superclassBinding = this.binding.superclass;", "+\t\t\t\tloop: while (superclassBinding != null) {", "+\t\t\t\t\tif (superclassBinding == javaxRmiCorbaStub) {", "+\t\t\t\t\t\tneedSerialVersion = false;", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t\tsuperclassBinding = superclassBinding.superclass();", "-\t\t\t\tsuperclassBinding = superclassBinding.superclass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e402915629a8b180d859a28a3c121d65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "f2a8db55d9c2a91376afbcc21d15536fa997b8eb", "commitAfterChange": "c069cc4506b3626fae6e7b8df718ce627f93529a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "diff": ["+\t\tif (infCtx18 == null)", "+\t\t\treturn originalMethod;  // per parity with old F & G integration."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40ca6046fe2e1f2e73b4e85b0d0b24d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "d9396647e280a0cdb636c94fae9233a7a2475f6f", "commitAfterChange": "09617092d586fc57d56d7255b395176bf3d6b1e7", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic static JavaElement getUnresolvedJavaElement(TypeBinding typeBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "signatureAfterChange": " \tpublic static JavaElement getUnresolvedJavaElement(TypeBinding typeBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "diff": ["+\t\t\t\tif (declaringType == null)", "+\t\t\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4b53fc21acb95f874a7e2573ec538d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "b4e011de6a565629f18912dfc841ec9563d7b759", "commitAfterChange": "b03089beba6b009ef7cb1955138705446e620cd8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveType(Type type)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveType(Type type)", "diff": ["+\t\t\t\t// This unlikely case is possible when for some reason binding resolution has been stopped, like duplicate type declaration (bug 376440)", "+\t\t\t\tif (typeBinding == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e797215ac34ff83c16ded859b51f2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EclipseDeclarationImpl.java", "commitBeforeChange": "ed8db6d13903f021069a0e0438ac406d064570b0", "commitAfterChange": "43a40c622936c8decaf7de7fb324b17bbd4f826e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "              <A extends Annotation> A _getAnnotation(Class<A> annotationClass,                                             IAnnotationBinding[] annoInstances)", "signatureAfterChange": "              <A extends Annotation> A _getAnnotation(Class<A> annotationClass,                                             IAnnotationBinding[] annoInstances)", "diff": ["+        \tif (annoInstance == null)", "+        \t\tcontinue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6f080414b628a9b9fea2627370610c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "dd0d8de41ff9634977089468dd69785577ba4097", "commitAfterChange": "802c7ac625f347675c393d0da79bae0fe10a00fd", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void resolve(IGenericType suppliedType)", "signatureAfterChange": " public void resolve(IGenericType suppliedType)", "diff": ["-\t\t\tHashSet localTypes = new HashSet();", "-\t\t\tlocalTypes.add(cu.getPath().toString());", "-\t\t\tthis.superTypesOnly = true;", "-\t\t\tresolve(new Openable[] {(Openable)cu}, localTypes, null);", "+\t\t\tif (cu != null) {", "+\t\t\t\tHashSet localTypes = new HashSet();", "+\t\t\t\tlocalTypes.add(cu.getPath().toString());", "+\t\t\t\tthis.superTypesOnly = true;", "+\t\t\t\tresolve(new Openable[] {(Openable)cu}, localTypes, null);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e82d7a89cbeff4985a2d544119c0bb44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "744a26b9e5bb1af0d6b10cc27cfa62e32d2279f8", "commitAfterChange": "ee88edc6852ca240266a0a82beb39fc6a3f8a578", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate FactoryContainer[] openJarFileDialog(FactoryContainer original)", "signatureAfterChange": " \tprivate FactoryContainer[] openJarFileDialog(FactoryContainer original)", "diff": ["+\t\tif (fJProj == null) {", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8501cb6775eb4d2412769a691696b7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": " void runTest( \t\tboolean shouldCompileOK,  \t\tString[] sourceFiles, \t\tStandardJavaFileManager standardJavaFileManager, \t\tList<String> options, \t\tString[] compileFileNames, \t\tString expectedOutOutputString, \t\tString expectedErrOutputString,  \t\tboolean shouldFlushOutputDirectory, \t\tString[] classFileNames)", "signatureAfterChange": " void runTest( \t\tboolean shouldCompileOK,  \t\tString[] sourceFiles, \t\tStandardJavaFileManager standardJavaFileManager, \t\tList<String> options, \t\tString[] compileFileNames, \t\tString expectedOutOutputString, \t\tString expectedErrOutputString,  \t\tboolean shouldFlushOutputDirectory, \t\tString[] classFileNames)", "diff": ["-\tcheckClassFiles(classFileNames);", "+\t// TODO maxime introduce stderr comparison based upon specific diagnostic listener", "+\tif (classFileNames != null) {", "+\t\tcheckClassFiles(classFileNames);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e883555b1893aabb3051f92030e01fbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b7ff59a9f7a88f8cdef6546bff0e33b8f3b09f28", "commitAfterChange": "47dd59c8b6e7cd0a363f5c7a3e5323d2ab0e6afe", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations)", "diff": ["+\t\t\t} else if (invocation.isRawType()) {", "+\t\t\t\treturn invocation; // raw type is taking precedence"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ccab4deaefdd0bbfc9a3d3f81a4d1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "2996adbc84ee533860ed3db3015812d956d4e3af", "commitAfterChange": "09309996ea366aaaa0139c4c97eba2be8cacb674", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \tpublic ASTNode findDeclaringNode(IBinding binding)", "signatureAfterChange": "\r \tpublic ASTNode findDeclaringNode(IBinding binding)", "diff": ["+\t\tif (binding == null) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9ee17f3160210df7670f9613ea3cf68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexedFile.java", "commitBeforeChange": "6f8d2b2761ad5749ea0c9d799ad1153644b1a925", "commitAfterChange": "f797a4fefd78f3a1e278248a5427c284f913a1e4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tpublic void setProperty(String propertyName, String value)", "signatureAfterChange": "\r \tpublic void setProperty(String propertyName, String value)", "diff": ["-\t\tproperties = new Hashtable();\r", "+\t\tif (properties == null)\r", "+\t\t\tproperties = new Hashtable(3);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea81873c0a5acef0198fb78a063ce0de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "795236662f4c72deb433448a946f4a36cebbebd0", "commitAfterChange": "b74a7b82d9221b86893a88ea5453e92534ffe51b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String[] classpath, String jarPath) throws IOException", "signatureAfterChange": "  public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String[] classpath, String jarPath) throws IOException", "diff": ["-\tfor (int i = 0, l = extraPathsAndContents == null ? 0 : extraPathsAndContents.length; i < l; /* inc in loop */) {", "-\t\tFile  outputFile = new File(classesPath, extraPathsAndContents[i++]);", "-\t\toutputFile.getParentFile().mkdirs();", "-\t\tUtil.writeToFile(extraPathsAndContents[i++], outputFile.getAbsolutePath());", "+\tif (extraPathsAndContents != null) {", "+\t\tfor (int i = 0, l = extraPathsAndContents == null ? 0 : extraPathsAndContents.length; i < l; /* inc in loop */) {", "+\t\t\tFile  outputFile = new File(classesPath, extraPathsAndContents[i++]);", "+\t\t\toutputFile.getParentFile().mkdirs();", "+\t\t\tUtil.writeToFile(extraPathsAndContents[i++], outputFile.getAbsolutePath());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb07e6854b2210f1f15b1242feedab03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tfor (int i = 0; i < max; i++)", "-\t\t\t\tindexedFileNames.put(paths[i], DELETED);", "+\t\t\tif (paths != null) {", "+\t\t\t\tfor (int i = 0; i < max; i++)", "+\t\t\t\t\tindexedFileNames.put(paths[i], DELETED);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb84636a1f2bc5b2946135bc71a80803", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/IndentManipulation.java", "commitBeforeChange": "7d1d057aa07d787304fb79db46f61c973a61b3af", "commitAfterChange": "b362de2959f4600d9b75970043deda0f5d1d376a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static int measureIndentUnits(CharSequence line, int tabWidth, int indentWidth)", "signatureAfterChange": " \tpublic static int measureIndentUnits(CharSequence line, int tabWidth, int indentWidth)", "diff": ["-\t\tif (indentWidth <= 0 || tabWidth < 0 || line == null) {", "+\t\tif (indentWidth < 0 || tabWidth < 0 || line == null) {", "+\t\tif (indentWidth == 0) return 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc6310dfaf8f28a032e3933befd52ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "e5d2b54b64c5be9c6975192bdd4dd72df228563d", "commitAfterChange": "70acfa29e42f50958b8933cfb555efd1b602652e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor)", "signatureAfterChange": "  \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor)", "diff": ["+\t\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebeb5f7143bb2fa7f7179737b65920fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "3fc8f68d913a6f6e40f71f3d7dea34c1f2893e07", "commitAfterChange": "2808c167f87e5191890bb92d5e4f0af641d2f6e4", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " protected void popElement(int kind)", "signatureAfterChange": " protected void popElement(int kind)", "diff": ["-// the name is a misnomer, we allow \"pop\"s not just at the TOS. Lambda wants to be sticky till fully reduced, however we do want other elements poppped at the right point, so ... ", "+// the name is a misnomer, we allow \"pop\"s not just at the TOS. Lambda wants to be sticky till fully reduced, however we do want other elements popped at the right point, so ... ", "-\t\t\tstackPointer --;", "+\t\t\tif (--stackPointer < 0) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1a9344df8002262b7870206dac06f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "e54f2fc3a029c988cbe1baab95071b89f9e923cf", "commitAfterChange": "ce6302231c2cb0eb74b3fff9bb1ac1dc4df5b279", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate void scopeTrialCheck(int stck[], int stack_top, PrimaryRepairInfo repair, int indx)", "signatureAfterChange": " \t \tprivate void scopeTrialCheck(int stck[], int stack_top, PrimaryRepairInfo repair, int indx)", "diff": ["+\t\tif(indx > 20) return; // avoid too much recursive call to improve performance", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec216603f14243bc45b2afefd537f2ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "e69b75f122af6f64c831ddc9380ae2c446ae4d8b", "commitAfterChange": "16ecd30e3e0ba8d843b61278a0e7c52738202301", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r private void updateRoots(IPath containerPath, IResourceDelta containerDelta)", "signatureAfterChange": "\r private void updateRoots(IPath containerPath, IResourceDelta containerDelta)", "diff": ["+\t\t\tif (rootDelta == null) continue;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecb746c56777140a2c76b1cd4ef2ae70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "3460998f65afd2f3c679bbb34fd85982480ddb4c", "commitAfterChange": "7a0e72f91111ce875e9658ab711995ee65a7a8bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t \tprivate void acceptName(char[] name)", "signatureAfterChange": "  \t \tprivate void acceptName(char[] name)", "diff": ["+\t\t// the null check is added to fix bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=166570", "+\t\tif (name == null) return;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edfd2fadeb715fad13692ab42c1c6cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "66655f5e1f98e14cb994324b511a6633d4950147", "commitAfterChange": "05ac7a532e5c7862447e6e0fc351f30875c4dd96", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "signatureAfterChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "diff": ["+\t\tif (enclosingType.isTypeVariable())", "+\t\t\treturn null; // cannot access anything from a type variable"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4ea85caab922d7a287a493241d16b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "8cb005dceff00dfd0f965a5f89af1e85f07ed8f9", "commitAfterChange": "ea9f40d48c76d6574fa5279d54e4c9bc01587c84", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": "  void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["+\tif (index == 0) return; // can happen with methods that contain 'equal' Missing Types, see bug 257384"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef67fa2e4d74cb893310deda812d2fad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "d8f1f284f6441905e7bc6bf6eb6a9443c997d8fe", "commitAfterChange": "a20c7987b715f8a0fad829453c4bde4984a825aa", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic TypeBinding[] createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding functionalInterface)", "signatureAfterChange": " \tpublic TypeBinding[] createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding functionalInterface)", "diff": ["+\t\tif (a == null)", "+\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01ffb4b4eb2a822455c6daaf2d0eec4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "01df0dd7f81a30148e9341436af241c588cea60b", "commitAfterChange": "14f758abdbf93582152d632f97767b107ab4115d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\t\tMethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();", "-\t\tReferenceContext referenceContext = methodScope.referenceContext;", "-\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\tMethodBinding methodBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "-\t\t\tif (methodBinding != null) {", "-\t\t\t\tbuffer.append(methodBinding.computeUniqueKey(false/*not a leaf*/));", "+\t\tif (scope != null) {", "+\t\t\t// the scope can be null. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=185129", "+\t\t\tMethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();", "+\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\tMethodBinding methodBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "+\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\tbuffer.append(methodBinding.computeUniqueKey(false/*not a leaf*/));", "+\t\t\t\t}", "+\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\tTypeBinding typeBinding = ((TypeDeclaration) referenceContext).binding;", "+\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\tbuffer.append(typeBinding.computeUniqueKey(false/*not a leaf*/));", "+\t\t\t\t}", "-\t\t} else if (referenceContext instanceof TypeDeclaration) {", "-\t\t\tTypeBinding typeBinding = ((TypeDeclaration) referenceContext).binding;", "-\t\t\tif (typeBinding != null) {", "-\t\t\t\tbuffer.append(typeBinding.computeUniqueKey(false/*not a leaf*/));", "-\t\t\t}", "+\t", "+\t\t\t// scope index", "+\t\t\tgetScopeKey(scope, buffer);", "-", "-\t\t// scope index", "-\t\tgetScopeKey(scope, buffer);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3fb65ac4cfe45eb629fd7058056d05f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "015c66459c41ce714c2afab061dda99760bcb04e", "commitAfterChange": "cc1df04d2a7670c32d491fa2cc726f1c92c0a8b6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static void setFactoryPath(IJavaProject jproj, IFactoryPath path)\t \t\t\tthrows CoreException", "signatureAfterChange": " \tpublic static void setFactoryPath(IJavaProject jproj, IFactoryPath path)\t \t\t\tthrows CoreException", "diff": ["-\t\t// The factory path isn't saved to the Eclipse preference store,", "-\t\t// so we can't rely on the ChangeListener mechanism.", "-\t\tAnnotationProcessorFactoryLoader.getLoader().resetAll();", "+\t\t// Project-specific factory path files are resources, so changes", "+\t\t// get picked up by the resource listener.  Workspace changes aren't.", "+\t\tif (jproj == null) {", "+\t\t\tAnnotationProcessorFactoryLoader.getLoader().resetAll();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f433844a19c2b88fbd45b1b6c8bfc372", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ef26e9f14c4a534f0067edd2b7ffaae9b83ff6ef", "commitAfterChange": "6fbb460d8cccd01248cb7477c526515fb8db35a6", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["+\t\t\t\t\t\t\t\t\t\t\tif (foundField == temp) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7895be54a9efcd7f0ce93a039e2e0ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "01c0777b298a5c62a2819ec93e382b1ab9650906", "commitAfterChange": "f58d2dbeb8fe5ca58dc0a3fee57b3d7a41711711", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void discardJobs(String jobFamily)", "signatureAfterChange": " \tpublic void discardJobs(String jobFamily)", "diff": ["-\t\t\t\t\tthis.awaitingJobs[i] = null;", "-\t\t\t\t\tif (!(jobFamily == null || currentJob.belongsTo(jobFamily))) { // copy down, compacting", "-\t\t\t\t\t\tthis.awaitingJobs[++loc] = currentJob;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\tUtil.verbose(\"-> discarding background job  - \" + currentJob); //$NON-NLS-1$", "-\t\t\t\t\t\tcurrentJob.cancel();", "+\t\t\t\t\tif (currentJob != null) { // sanity check", "+\t\t\t\t\t\tthis.awaitingJobs[i] = null;", "+\t\t\t\t\t\tif (!(jobFamily == null || currentJob.belongsTo(jobFamily))) { // copy down, compacting", "+\t\t\t\t\t\t\tthis.awaitingJobs[++loc] = currentJob;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\t\tUtil.verbose(\"-> discarding background job  - \" + currentJob); //$NON-NLS-1$", "+\t\t\t\t\t\t\tcurrentJob.cancel();", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f67b4ff4c7571cfc0150ea41ff474a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "316430f6a7a386142798774df034be0e36155d28", "commitAfterChange": "5981e91cc71ba86df42ff9d60654ccdd89adffe1", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["+\tif (annotations == null)", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95c80e78b03cd8c8e5707d53d484557", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseFileManager.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tprivate Iterable<? extends File> prependFiles(Iterable<? extends File> iterable, \t\t\tIterable<? extends File> iterable2)", "signatureAfterChange": "  \tprivate Iterable<? extends File> prependFiles(Iterable<? extends File> iterable, \t\t\tIterable<? extends File> iterable2)", "diff": ["+\t\tif (iterable2 == null) return iterable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c48bbdcc480f23c1cfa29e76a12c8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "d3da1d109c57a90a2bd8342736abf401463d58e5", "commitAfterChange": "ca8a326624990cbfccad61d74787a54a65ea486c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static String getMatchRuleString(final int matchRule)", "signatureAfterChange": " \tpublic static String getMatchRuleString(final int matchRule)", "diff": ["+\t\tif (matchRule == 0) {", "+\t\t\treturn \"R_EXACT_MATCH\"; //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9e582c895a9a2b076b87ffd11f0bb7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "cd83686e68c77b8d85a1807425ed1f45ea502c65", "commitAfterChange": "03133f50b3df27cb3ba8b788b2de65bd0ed4ca93", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["+\t\t\t\tif (this.binding.isLocalType()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb23a20d5f31eeafcbdfd5efd5d7b52c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "74fbbad11165f5c8ac0131a349c46c50e436b50b", "commitAfterChange": "a024585149a43be434fc19fbd276b9257362eff2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-", "+\t// if resetTo is used with currentPosition > than eofPosition.", "+\tif (currentPosition > eofPosition) {", "+\t\treturn TokenNameEOF;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbc0b84e9fd3bbcd430133ba686a39d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "786c31d9ecce9ffa121f77e75a31a23616243d78", "commitAfterChange": "ca4e1b5f934aed1dee0d7aabe08265d0c6c1b8f7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tIMethodBinding resolveMethod(MethodDeclaration method)", "signatureAfterChange": " \tIMethodBinding resolveMethod(MethodDeclaration method)", "diff": ["+\t\t\tif (methodBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2603c8bdef06662c5ef354bcc33b09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "628e9c4648e198faf112f84ab4f79974c542dba4", "commitAfterChange": "a5c3db41a58c8521d5f8f73e141ab57108cd47bc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate String formatClassBodyDeclarations(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate String formatClassBodyDeclarations(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "diff": ["+\t\tif (bodyDeclarations == null) {", "+\t\t\t// a problem occured while parsing the source", "+\t\t\treturn source;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc8733597559cf4222ba08bc2110a94a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "ed9fcb70460f8a7c09bd2ac4b3017e5159d83486", "commitAfterChange": "d518189a9935110f4925579d51368bbbeaff5789", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate void createICompilationUnits()", "signatureAfterChange": " \tprivate void createICompilationUnits()", "diff": ["-\tprivate void createICompilationUnits(){\t\t", "+\tprivate void createICompilationUnits(){", "+\t\tif(_units != null) ", "+\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd21b3fa0a952a91a9732cf758b6c2f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "855d08007f38aa859b621e5e35de6b962791df5f", "commitAfterChange": "4d55f350050ba4edf3b2412d978c3ac5196dfdab", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "diff": ["+\t", "+\t// if path is relative, it cannot be an external path", "+\t// (see http://dev.eclipse.org/bugs/show_bug.cgi?id=22517)", "+\tif (!path.isAbsolute()) return null; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd44958d40564598812b325f8f2c94d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "5746131ccb7ad129bb90f067b41eefc7f137ef60", "commitAfterChange": "3382e05b09c3c43adcbe785e9963776562fba889", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static char[] getSignature(Binding binding)", "signatureAfterChange": " \tpublic static char[] getSignature(Binding binding)", "diff": ["-\t\tresult = CharOperation.replaceOnCopy(result, '/', '.');", "+\t\tif (result != null) {", "+\t\t\tresult = CharOperation.replaceOnCopy(result, '/', '.');", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe25843d763d23c3d37546af5c29fa82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/NewASTRewrite.java", "commitBeforeChange": "f5b5b884f036b9e618a06dde165cd3edcb93e386", "commitAfterChange": "c01c58991465c08e9a09aa1864f2ccc8c3d7c124", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\t \t\t\t \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\t\t", "+\t */", "-\t\tbuf.append(fEventStore.toString());", "+\t\t// be extra careful of uninitialized or mangled instances", "+\t\tif (fEventStore != null) {", "+\t\t\tbuf.append(fEventStore.toString());", "+\t\t}"]}], "num": 31388}
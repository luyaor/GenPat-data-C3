{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2d258be0275a9a804309c992199b24f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eaea71f27f9a5fc7294007629ff2e52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2e8c81b48304c9e33747060a2a7fcd8295c64afe", "commitAfterChange": "50125dca81221f803e384aaa4267a637e226f1c2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic QualifiedName getClasspathPropertyName()", "signatureAfterChange": " \tprivate void savePreferences(Preferences preferences)", "diff": ["-\t */", "-\tpublic QualifiedName getClasspathPropertyName() {", "-\t\treturn new QualifiedName(JavaCore.PLUGIN_ID, \"classpath\"); //$NON-NLS-1$", "-\t}", "+\t */", "+\tprivate void savePreferences(Preferences preferences) {", "+", "+\t\tif (preferences == null || !preferences.needsSaving()) {", "+\t\t\t// nothing to save", "+\t\t\treturn;", "+\t\t}", "+\t", "+\t\t// preferences need to be saved", "+\t\t// the preferences file is located in the plug-in's state area", "+\t\t// at a well-known name (.jprefs)", "+//\t\tFile prefFile = getProject().getLocation().append(PREF_FILENAME).toFile();", "+\t\tFile prefFile = getProject().getPluginWorkingLocation(JavaCore.getPlugin().getDescriptor()).append(PREF_FILENAME).toFile();", "+\t\tif (preferences.propertyNames().length == 0) {", "+\t\t\t// there are no preference settings", "+\t\t\t// rather than write an empty file, just delete any existing file", "+\t\t\tif (prefFile.exists()) {", "+\t\t\t\tprefFile.delete(); // don't worry if delete unsuccessful", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\t// write file, overwriting an existing one", "+\t\tOutputStream out = null;", "+\t\ttry {", "+\t\t\t// do it as carefully as we know how so that we don't lose/mangle", "+\t\t\t// the setting in times of stress", "+\t\t\tout = new BufferedOutputStream(new FileOutputStream(prefFile));", "+\t\t\tpreferences.store(out, null);", "+\t\t} catch (IOException e) { // problems saving preference store - quietly ignore", "+\t\t} finally {", "+\t\t\tif (out != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tout.close();", "+\t\t\t\t} catch (IOException e) { // ignore problems with close", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c01e8c23f32cbb7f277487f72c21478", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "2193765f6a14f1428523dab68858768ca623c9d3", "commitAfterChange": "5450463d69e66bedc3d0797b782f5dab3b9072d6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void testClosedProject() throws JavaModelException", "signatureAfterChange": "  public void testClosedProject() throws JavaModelException, IOException", "diff": ["-public void testClosedProject() throws JavaModelException {", "+public void testClosedProject() throws JavaModelException, IOException {", "+\tIProject project1 = ResourcesPlugin.getWorkspace().getRoot().getProject(\"CP1\");", "-\tIPath jarPath = env.addInternalJar(project1Path, \"temp.jar\", new byte[] {0}); //$NON-NLS-1$", "+\t", "+\tString jarFile = project1.getLocation().toOSString() + File.separator + \"temp.jar\";", "+\t", "+\torg.eclipse.jdt.core.tests.util.Util.createEmptyJar(", "+\t\t\tjarFile,", "+\t\t\tJavaCore.VERSION_1_4);", "+", "+\tIPath jarPath = null;", "+\tFileInputStream fis = null;", "+\ttry {", "+\t\tfis = new FileInputStream(jarFile);", "+\t\tint length = fis.available();", "+\t\tbyte[] jarContent = new byte[length];", "+\t\tfis.read(jarContent); ", "+\t\tjarPath = env.addInternalJar(project1Path, \"temp.jar\", jarContent); //$NON-NLS-1$", "+\t}", "+\tfinally {", "+\t\tif (fis != null) fis.close();", "+\t}"]}], "num": 1111}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4f4749f76bac9cbb16ba1380be14bde", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c2e086c823047cbb6e7cae41a6a1fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "10278a797430cb698cfd46cf8e9f8d898ccc6e22", "commitAfterChange": "68f08d6c81f3b848e0fcb2f296b83150ef5cf8c0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["-\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (methodDeclaration != null) {", "-\t\t\tArrayList parameterSignatures = new ArrayList();", "-\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\t\tType type = parameter.getType();", "-\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "+\t\tif (node != null) {", "+\t\t\tif (node instanceof MethodDeclaration) {", "+\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\t\t\tArrayList parameterSignatures = new ArrayList();", "+\t\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "+\t\t\t\t\tType type = parameter.getType();", "+\t\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\t\t\t}", "+\t\t\t\tint parameterCount = parameterSignatures.size();", "+\t\t\t\tString[] parameters = new String[parameterCount];", "+\t\t\t\tparameterSignatures.toArray(parameters);", "+\t\t\t\treturn declaringType.getMethod(getName(), parameters);", "+\t\t\t} else {", "+\t\t\t\t// annotation type member declaration", "+\t\t\t\tAnnotationTypeMemberDeclaration typeMemberDeclaration = (AnnotationTypeMemberDeclaration) node;", "+\t\t\t\treturn declaringType.getMethod(typeMemberDeclaration.getName().getIdentifier(), new String[0]); // annotation type members don't have parameters", "-\t\t\tint parameterCount = parameterSignatures.size();", "-\t\t\tString[] parameters = new String[parameterCount];", "-\t\t\tparameterSignatures.toArray(parameters);", "-\t\t\treturn declaringType.getMethod(getName(), parameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a18f0aeaeb4cb43a955cdfee638a290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "dbc287e113cd966cc1e20293dfedea17687913c2", "commitAfterChange": "e66f77d0e07fce47c76186011fd33869f4e9edd9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["-\t */", "-\t\tMethodDeclaration method = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (method == null) return null;", "-\t\tArrayList parameterSignatures = new ArrayList();", "-\t\tIterator iterator = method.parameters().iterator();", "-\t\twhile (iterator.hasNext()) {", "-\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\tType type = parameter.getType();", "-\t\t\tparameterSignatures.add(getSignature(type));", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "+\t\tif (methodDeclaration != null) {", "+\t\t\tArrayList parameterSignatures = new ArrayList();", "+\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "+\t\t\t\tType type = parameter.getType();", "+\t\t\t\tparameterSignatures.add(getSignature(type));", "+\t\t\t}", "+\t\t\tint parameterCount = parameterSignatures.size();", "+\t\t\tString[] parameters = new String[parameterCount];", "+\t\t\tparameterSignatures.toArray(parameters);", "+\t\t\treturn declaringType.getMethod(getName(), parameters);", "+\t\t} else {", "+\t\t\t// case of method not in the created AST", "+\t\t\tString selector = getName();", "+\t\t\tchar[] methodSignature = this.binding.genericSignature();", "+\t\t\tif (methodSignature == null)", "+\t\t\t\tmethodSignature = this.binding.signature();", "+\t\t\tmethodSignature = CharOperation.replaceOnCopy(methodSignature, '/', '.');", "+\t\t\tchar[][] parameterSignatures = Signature.getParameterTypes(methodSignature);", "+\t\t\tString[] parameters = CharOperation.toStrings(parameterSignatures);", "+\t\t\tIMethod result = declaringType.getMethod(selector, parameters);", "+\t\t\tif (declaringType.isBinary())", "+\t\t\t\treturn result;", "+\t\t\tIMethod[] methods = null;", "+\t\t\ttry {", "+\t\t\t\tmethods = declaringType.getMethods();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// declaring type doesn't exist", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "+\t\t\tif (candidates == null || candidates.length == 0)", "+\t\t\t\treturn null;", "+\t\t\treturn candidates[0];", "-\t\tint parameterCount = parameterSignatures.size();", "-\t\tString[] parameters = new String[parameterCount];", "-\t\tparameterSignatures.toArray(parameters);", "-\t\treturn declaringType.getMethod(getName(), parameters);"]}], "num": 4572}
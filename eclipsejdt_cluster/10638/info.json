{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7691ed86b7945bed76cccede06a7e1d9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942f948b2792bb7b8a83c9debaa487dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "195b7f74c2847e766faf55780f87d7733eaf87d5", "commitAfterChange": "59d412caa9422940d2fae586e985ddc7647c8585", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "signatureAfterChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "diff": ["-\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "-\t\t\tboolean isInnerBinaryTypeConstructor = isBinary && original.isConstructor() && enclosingType != null;", "-\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "-\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "-\t\t\tif (isInnerBinaryTypeConstructor)", "-\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\tfor (int i = 0;  i < length; i++) {", "-\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "-\t\t\t\tif (isBinary) {", "-\t\t\t\t\tsignature = CharOperation.replaceOnCopy(signature, '/', '.');", "-\t\t\t\t} else {", "-\t\t\t\t\tsignature = toUnresolvedTypeSignature(signature);", "+\t\t\tif (isBinary) {", "+\t\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "+\t\t\t\tboolean isInnerBinaryTypeConstructor = original.isConstructor() && enclosingType != null;", "+\t\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "+\t\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "+\t\t\t\tif (isInnerBinaryTypeConstructor) {", "+\t\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\t\tfor (int i = 0;  i < length; i++) {", "+\t\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "+\t\t\t\t\tsignature = CharOperation.replaceOnCopy(signature, '/', '.');", "+\t\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\t\t}", "+\t\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "+\t\t\t\treturn (JavaElement) result;", "-\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "-\t\t\tif (isBinary)", "-\t\t\t\treturn (JavaElement) result;", "-\t\t\tif (result.exists()) // if perfect match (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=249567 )", "-\t\t\t\treturn (JavaElement) result;", "-\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "-\t\t\tif (candidates == null || candidates.length == 0)", "-\t\t\t\treturn null;", "-\t\t\treturn (JavaElement) candidates[0];", "+\t\t\treturn findMethod(selector, parameters, methods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1e4d92732fceb92dd4aa1ab8a2cfc56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "0218d2fde27ae288f3eb227e030a2aee2bd32f49", "commitAfterChange": "025f6a96e3e3c149e01b0d88c99b73f42c4c49af", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "signatureAfterChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "diff": ["+\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "+\t\t\tboolean isInnerBinaryTypeConstructor = isBinary && original.isConstructor() && enclosingType != null;", "-\t\t\tif (isBinary) {", "-\t\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "-\t\t\t\tboolean isInnerBinaryTypeConstructor = original.isConstructor() && enclosingType != null;", "-\t\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "-\t\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "-\t\t\t\tif (isInnerBinaryTypeConstructor) {", "-\t\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0;  i < length; i++) {", "-\t\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "+\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "+\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "+\t\t\tif (isInnerBinaryTypeConstructor)", "+\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "+\t\t\tfor (int i = 0;  i < length; i++) {", "+\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "+\t\t\t\tif (isBinary) {", "-\t\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\t\t} else {", "+\t\t\t\t\tsignature = toUnresolvedTypeSignature(signature);", "-\t\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "-\t\t\t\treturn (JavaElement) result;", "+\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "+\t\t\tif (isBinary)", "+\t\t\t\treturn (JavaElement) result;", "+\t\t\tif (result.exists()) // if perfect match (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=249567 )", "+\t\t\t\treturn (JavaElement) result;", "-\t\t\treturn findMethod(selector, parameters, methods);", "-\t\t}", "-\t}", "+\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "+\t\t\tif (candidates == null || candidates.length == 0)", "+\t\t\treturn (JavaElement) candidates[0];"]}], "num": 10638}
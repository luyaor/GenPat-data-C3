{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5e8098163bde63c8ffb13aa74d4880a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33e2a64f6230de8131c1eba47e6a6be5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6cbac45128bba7fa6d271bf8229dffb842e17b14", "commitAfterChange": "068cd980b5edbe213826c80d8c3fb1a72582288a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "\t  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\t\tint rank = 0;", "-\t\t\tdo {", "-\t\t\t\tTypeVariableBinding variable = createTypeVariable(wrapper, rank);", "-\t\t\t\tvariable.fPackage = this.fPackage;", "-\t\t\t\tSystem.arraycopy(this.typeVariables, 0, this.typeVariables = new TypeVariableBinding[rank + 1], 0, rank);", "-\t\t\t\tthis.typeVariables[rank++] = variable;", "-\t\t\t\tinitializeTypeVariable(variable, this.typeVariables, wrapper);", "-\t\t\t} while (wrapper.signature[wrapper.start] != '>');", "+\t\t\tthis.typeVariables = createTypeVariables(wrapper, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f7132823c8440b206c2828064b4ff0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6cbac45128bba7fa6d271bf8229dffb842e17b14", "commitAfterChange": "068cd980b5edbe213826c80d8c3fb1a72582288a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["-\t\t\tint rank = 0;", "-\t\t\tdo {", "-\t\t\t\tTypeVariableBinding variable = createTypeVariable(wrapper, rank);", "-\t\t\t\tSystem.arraycopy(typeVars, 0, typeVars = new TypeVariableBinding[rank + 1], 0, rank);", "-\t\t\t\ttypeVars[rank++] = variable;", "-\t\t\t\tinitializeTypeVariable(variable,typeVars, wrapper);", "-\t\t\t} while (wrapper.signature[wrapper.start] != '>');", "+\t\t\ttypeVars = createTypeVariables(wrapper, this);", "+\tfor (int i = 0, length = typeVars.length; i < length; i++) {", "+\t\ttypeVars[i].declaringElement = result; // fixup the declaring element of the type variable", "+\t}"]}], "num": 55020}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbe389334706feae752ce9ce94e81822", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74b840d47e07497ecbebb14c6bc684a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ReferenceExpressionSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test385374a() throws IOException", "signatureAfterChange": " \tpublic void test385374a() throws IOException", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=385374, Support for 308 style type annotations on 335 constructs - make sure illegal modifiers are rejected", "+\t*/", "-\t\tString source = ", "-\t\t\t\t\"interface I {\\n\" +", "-\t\t\t\t\"\tvoid foo();\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"@interface TypeAnnotation {\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"class X<T> {\\n\" +", "-\t\t\t\t\"\t // Primitive array form\\n\" +", "-\t\t\t\t\"\t I x1 = public @TypeAnnotation int []::clone;\\n\" +", "-\t\t\t\t\"\t // Primitive array form with dimension annotations.\\n\" +", "-\t\t\t\t\"\t I x2 = @TypeAnnotation public int @ArrayAnnotation[]@ArrayAnnotation[]::clone; \\n\" +", "-\t\t\t\t\"\t // Primitive array form with dimension annotations and type parameter annotations.\\n\" +", "-\t\t\t\t\"\t I x3 = public @TypeAnnotation int @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"\t // Reference type name form\\n\" +", "-\t\t\t\t\"\t I x4 = @TypeAnnotation public X::clone;\\n\" +", "-\t\t\t\t\"\t // Reference type name array form\\n\" +", "-\t\t\t\t\"\t I x5 = public @TypeAnnotation X []::clone;\\n\" +", "-\t\t\t\t\"\t // Reference type name array form with dimension annotations.\\n\" +", "-\t\t\t\t\"\t I x6 = @TypeAnnotation public X @ArrayAnnotation[]@ArrayAnnotation[]::clone; \\n\" +", "-\t\t\t\t\"\t // Reference type name array form with dimension annotations and type parameter annotations.\\n\" +", "-\t\t\t\t\"\t I x7 = public @TypeAnnotation X @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"\t // Generic type array form with dimension annotations and type parameter annotations.\\n\" +", "-\t\t\t\t\"\t I x8 = public @TypeAnnotation X<@TypeParameterAnnotation String> @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"\t // Qualified generic type array form with dimension annotations and type parameter annotations.\\n\" +", "-\t\t\t\t\"\t I x9 = public @TypeAnnotation X<@TypeParameterAnnotation String>.Y<@TypeParameterAnnotation String> @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\t", "-\t\tString expectedErrorString = ", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in test385374a (at line 9)\\n\" +", "-\t\t\t\t\"\tI x1 = public @TypeAnnotation int []::clone;\\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in test385374a (at line 11)\\n\" +", "-\t\t\t\t\"\tI x2 = @TypeAnnotation public int @ArrayAnnotation[]@ArrayAnnotation[]::clone; \\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in test385374a (at line 13)\\n\" +", "-\t\t\t\t\"\tI x3 = public @TypeAnnotation int @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in test385374a (at line 15)\\n\" +", "-\t\t\t\t\"\tI x4 = @TypeAnnotation public X::clone;\\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"5. ERROR in test385374a (at line 17)\\n\" +", "-\t\t\t\t\"\tI x5 = public @TypeAnnotation X []::clone;\\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"6. ERROR in test385374a (at line 19)\\n\" +", "-\t\t\t\t\"\tI x6 = @TypeAnnotation public X @ArrayAnnotation[]@ArrayAnnotation[]::clone; \\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"7. ERROR in test385374a (at line 21)\\n\" +", "-\t\t\t\t\"\tI x7 = public @TypeAnnotation X @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"8. ERROR in test385374a (at line 23)\\n\" +", "-\t\t\t\t\"\tI x8 = public @TypeAnnotation X<@TypeParameterAnnotation String> @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"9. ERROR in test385374a (at line 25)\\n\" +", "-\t\t\t\t\"\tI x9 = public @TypeAnnotation X<@TypeParameterAnnotation String>.Y<@TypeParameterAnnotation String> @ArrayAnnotation[]@ArrayAnnotation[]::<@TypeParameterAnnotation String>clone; \\n\" +", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, modifiers are illegal here\\n\" +", "-\t\t\t\t\"----------\\n\";", "-\t\tcheckParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), expectedErrorString, \"test385374a\", null);", "+\t\t// Nop."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f1cb14da9ed6f01ccddb4eb81682f20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "aa8f6fbf0e343000a37ce36c64e696c5aab0f7ab", "commitAfterChange": "4bcb18adef599eed2469d0c3af57b805220a0f02", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 339, "signatureBeforeChange": " public void test189()", "signatureAfterChange": " public void test189()", "diff": ["-\t\t\t\"interface I {\\n\" +", "-\t\t\t\"    void m() throws CloneNotSupportedException, InterruptedException;\\n\" +", "+\t\t\t\"interface Interface {\\n\" + ", "+\t\t\t\"    void foo() throws CloneNotSupportedException, InterruptedException;\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"abstract class AbstractClass1 {\\n\" + ", "+\t\t\t\"    public abstract void foo() throws ClassNotFoundException, CloneNotSupportedException;\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"abstract class AbstractClass2 extends AbstractClass1  implements Interface {\\n\" + ", "+\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\"        try {\\n\" + ", "+\t\t\t\"        \tfoo();\\n\" + ", "+\t\t\t\"        } catch (CloneNotSupportedException e) {\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class X extends AbstractClass2 {\\n\" + ", "+\t\t\t\"\t@Override\\n\" + ", "+\t\t\t\"\tpublic void foo() throws CloneNotSupportedException {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class Y extends AbstractClass2 {\\n\" +", "+\t\t\t\"\t@Override public void foo() throws ClassNotFoundException, CloneNotSupportedException {}\\n\" +", "-\t\t\t\"abstract class A {\\n\" +", "-\t\t\t\"    public abstract void m() throws ClassNotFoundException, CloneNotSupportedException;\\n\" +", "+\t\t\t\"class Z extends AbstractClass2 {\\n\" +", "+\t\t\t\"\t@Override public void foo() throws CloneNotSupportedException, InterruptedException {}\\n\" +", "-\t\t\t\"abstract class B extends A implements I {\\n\" +", "-\t\t\t\"\tvoid test() {\\n\" +", "-\t\t\t\"        try { m(); } catch (CloneNotSupportedException e) { }\\n\" +", "-\t\t\t\"    }\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class X extends A implements I {\\n\" +", "-\t\t\t\"\t@Override public void m() throws CloneNotSupportedException {}\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class Y extends A implements I {\\n\" +", "-\t\t\t\"\t@Override public void m() throws ClassNotFoundException, CloneNotSupportedException {}\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class Z extends A implements I {\\n\" +", "-\t\t\t\"\t@Override public void m() throws CloneNotSupportedException, InterruptedException {}\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class All extends A implements I {\\n\" +", "-\t\t\t\"\t@Override public void m() throws ClassNotFoundException, CloneNotSupportedException, InterruptedException {}\\n\" +", "+\t\t\t\"class All extends AbstractClass2 {\\n\" +", "+\t\t\t\"\t@Override public void foo() throws ClassNotFoundException, CloneNotSupportedException, InterruptedException {}\\n\" +", "-\t\t\"1. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\"\t@Override public void m() throws ClassNotFoundException, CloneNotSupportedException {}\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\"\t@Override public void foo() throws ClassNotFoundException, CloneNotSupportedException {}\\n\" + ", "+\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Exception ClassNotFoundException is not compatible with throws clause in Interface.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 25)\\n\" + ", "+\t\t\"\t@Override public void foo() throws CloneNotSupportedException, InterruptedException {}\\n\" + ", "-\t\t\"Exception ClassNotFoundException is not compatible with throws clause in I.m()\\n\" + ", "+\t\t\"Exception InterruptedException is not compatible with throws clause in AbstractClass1.foo()\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 19)\\n\" + ", "-\t\t\"\t@Override public void m() throws CloneNotSupportedException, InterruptedException {}\\n\" + ", "-\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Exception InterruptedException is not compatible with throws clause in A.m()\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\"\t@Override public void foo() throws ClassNotFoundException, CloneNotSupportedException, InterruptedException {}\\n\" + ", "+\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Exception ClassNotFoundException is not compatible with throws clause in Interface.foo()\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\"\t@Override public void m() throws ClassNotFoundException, CloneNotSupportedException, InterruptedException {}\\n\" + ", "-\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Exception ClassNotFoundException is not compatible with throws clause in I.m()\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\"\t@Override public void m() throws ClassNotFoundException, CloneNotSupportedException, InterruptedException {}\\n\" + ", "-\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Exception InterruptedException is not compatible with throws clause in A.m()\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\"\t@Override public void foo() throws ClassNotFoundException, CloneNotSupportedException, InterruptedException {}\\n\" + ", "+\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Exception InterruptedException is not compatible with throws clause in AbstractClass1.foo()\\n\" + "]}], "num": 47434}
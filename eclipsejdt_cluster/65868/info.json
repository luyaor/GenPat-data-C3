{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da102888f8e196cc8ded8f4218bebc12", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a1c05e526da8578af1111c1801ff131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "0ae630552c90fd2cd11872eb375a1964a0c6a4c3", "commitAfterChange": "64ee3f57d71ba4f4e5fa8224c04a06b8409e61e3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic int generateMethodInfoAttributes(MethodBinding methodBinding)", "signatureAfterChange": " \tpublic int generateMethodInfoAttributes(MethodBinding methodBinding)", "diff": ["+\t\t\t} else {", "+\t\t\t\tLambdaExpression lambda = methodBinding.sourceLambda();", "+\t\t\t\tif (lambda != null) {", "+\t\t\t\t\tif ((methodBinding.tagBits & TagBits.HasParameterAnnotations) != 0) {", "+\t\t\t\t\t\tArgument[] arguments = lambda.arguments;", "+\t\t\t\t\t\tif (arguments != null) {", "+\t\t\t\t\t\t\tint parameterCount = methodBinding.parameters.length;", "+\t\t\t\t\t\t\tint argumentCount = arguments.length;", "+\t\t\t\t\t\t\tif (parameterCount > argumentCount) { // synthetics prefixed ", "+\t\t\t\t\t\t\t\tint redShift = parameterCount - argumentCount;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(arguments, 0, arguments = new Argument[parameterCount], redShift, argumentCount);", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < redShift; i++)", "+\t\t\t\t\t\t\t\t\targuments[i] = new Argument(CharOperation.NO_CHAR, 0, null, 0);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tattributesNumber += generateRuntimeAnnotationsForParameters(arguments);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729fbf2c8bc008bb5d22d582fa4d663c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "diff": ["+\t", "+\t// See if we must resolve specifically for generics", "+\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) {", "+\t\tint psLength = parameterSimpleNames.length;", "+\t\ttry {", "+\t\t\t// Currently, we need to resolve for generic if one of method type argument", "+\t\t\t// equals to one of declaring type type parameter", "+\t\t\tITypeParameter[] typeParameters = this.declaringType.getTypeParameters();", "+\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "+\t\t\t\tint tpLength = typeParameters.length;", "+\t\t\t\tfor (int i=0; i<psLength && !this.mustResolveGeneric; i++) {", "+\t\t\t\t\tfor (int j=0; j<tpLength && !this.mustResolveGeneric; j++) {", "+\t\t\t\t\t\tif (CharOperation.equals(parameterSimpleNames[i], typeParameters[j].getElementName().toCharArray())) {", "+\t\t\t\t\t\t\tthis.mustResolveGeneric = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}"]}], "num": 65868}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14c279382641b016c69b33d5136d28f4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "610dec1ab5166de9508b711ea8b7c26d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "commitAfterChange": "8c631374d51cd9cce66092e187c2523badcba90a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "signatureAfterChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "diff": ["-\t\t\tthis.parameters.put(PROBLEM_ID, getFieldName(problem.getID()));", "-\t\t\tthis.parameters.put(PROBLEM_SEVERITY, problem.isError() ? ERROR : WARNING);", "-\t\t\tthis.parameters.put(PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "-\t\t\tthis.parameters.put(PROBLEM_SOURCE_START, new Integer(sourceStart));", "-\t\t\tthis.parameters.put(PROBLEM_SOURCE_END, new Integer(sourceEnd));", "-\t\t\tthis.printTag(PROBLEM_TAG, this.parameters, true, false);", "+\t\t\tthis.parameters.put(Logger.PROBLEM_ID, getFieldName(problem.getID()));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, problem.isError() ? Logger.ERROR : Logger.WARNING);", "+\t\t\tthis.parameters.put(Logger.PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SOURCE_START, new Integer(sourceStart));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SOURCE_END, new Integer(sourceEnd));", "+\t\t\tthis.printTag(Logger.PROBLEM_TAG, this.parameters, true, false);", "-\t\t\tthis.parameters.put(VALUE, problem.getMessage());", "-\t\t\tthis.printTag(PROBLEM_MESSAGE, this.parameters, true, true);", "+\t\t\tthis.parameters.put(Logger.VALUE, problem.getMessage());", "+\t\t\tthis.printTag(Logger.PROBLEM_MESSAGE, this.parameters, true, true);", "-\t\t\tthis.printTag(SOURCE_CONTEXT, this.parameters, true, true);", "+\t\t\tthis.printTag(Logger.SOURCE_CONTEXT, this.parameters, true, true);", "-\t\t\t\tthis.printTag(PROBLEM_ARGUMENTS, null, true, false);", "+\t\t\t\tthis.printTag(Logger.PROBLEM_ARGUMENTS, null, true, false);", "-\t\t\t\t\tthis.parameters.put(PROBLEM_ARGUMENT_VALUE, arguments[i]);", "-\t\t\t\t\tthis.printTag(PROBLEM_ARGUMENT, this.parameters, true, true);", "+\t\t\t\t\tthis.parameters.put(Logger.PROBLEM_ARGUMENT_VALUE, arguments[i]);", "+\t\t\t\t\tthis.printTag(Logger.PROBLEM_ARGUMENT, this.parameters, true, true);", "-\t\t\t\tthis.endTag(PROBLEM_ARGUMENTS);", "+\t\t\t\tthis.endTag(Logger.PROBLEM_ARGUMENTS);", "-\t\t\tthis.endTag(PROBLEM_TAG);", "+\t\t\tthis.endTag(Logger.PROBLEM_TAG);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf9a8e6df20810bc0bf9efd3331cdbb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "504904baf698ed88f756bd940376797a16b35830", "commitAfterChange": "2360ea6176c15a2b2f0744a3b1d793c213d9a28d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t\tprivate void logXmlProblem(IProblem problem, char[] unitSource)", "signatureAfterChange": " \t\tprivate void logXmlProblem(IProblem problem, char[] unitSource)", "diff": ["-\t\t\tparameters.clear();", "-\t\t\tparameters.put(PROBLEM_ID, getFieldName(problem.getID()));", "-\t\t\tparameters.put(PROBLEM_SEVERITY, problem.isError() ? ERROR : WARNING);", "-\t\t\tparameters.put(PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "-\t\t\tparameters.put(PROBLEM_SOURCE_START, new Integer(sourceStart));", "-\t\t\tparameters.put(PROBLEM_SOURCE_END, new Integer(sourceEnd));", "+\t\t\tthis.parameters.clear();", "+\t\t\tthis.parameters.put(PROBLEM_ID, getFieldName(problem.getID()));", "+\t\t\tthis.parameters.put(PROBLEM_SEVERITY, problem.isError() ? ERROR : WARNING);", "+\t\t\tthis.parameters.put(PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "+\t\t\tthis.parameters.put(PROBLEM_SOURCE_START, new Integer(sourceStart));", "+\t\t\tthis.parameters.put(PROBLEM_SOURCE_END, new Integer(sourceEnd));", "-\t\t\tparameters.clear();", "-\t\t\tparameters.put(VALUE, problem.getMessage());", "+\t\t\tthis.parameters.clear();", "+\t\t\tthis.parameters.put(VALUE, problem.getMessage());", "-\t\t\tparameters.clear();", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tif ((sourceStart > sourceEnd)", "-\t\t\t\t|| ((sourceStart < 0) && (sourceEnd < 0))) {", "-\t\t\t\tbuffer.append(Util.bind(\"problem.noSourceInformation\")); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(unitSource, sourceStart, sourceEnd - sourceStart + 1);", "-\t\t\t}", "-\t\t\tparameters.put(VALUE, String.valueOf(buffer));", "-\t\t\tthis.printTag(PROBLEM_SOURCE, parameters, true, true);", "+\t\t\tthis.parameters.clear();", "+\t\t\textractContext(problem, unitSource);", "+\t\t\tthis.printTag(PROBLEM_SOURCE, this.parameters, true, true);", "-\t\t\t\tparameters.clear();", "+\t\t\t\tthis.parameters.clear();", "-\t\t\t\t\tparameters.put(PROBLEM_ARGUMENT_VALUE, arguments[i]);", "-\t\t\t\t\tthis.printTag(PROBLEM_ARGUMENT, parameters, true, true);", "+\t\t\t\t\tthis.parameters.put(PROBLEM_ARGUMENT_VALUE, arguments[i]);", "+\t\t\t\t\tthis.printTag(PROBLEM_ARGUMENT, this.parameters, true, true);"]}], "num": 27424}
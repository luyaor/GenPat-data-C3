{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b50c51df3bf755e47c05d1e460241d2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea2f8e5eedc111d239cca053755c0d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "commitAfterChange": "c2534be63510215f41ecb7f37ff96548973f1992", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected QualifiedName getSourceAttachmentPropertyName() throws JavaModelException", "signatureAfterChange": "\r \tprotected QualifiedName getSourceAttachmentPropertyName() throws JavaModelException", "diff": ["-\t\tZipFile jarFile = null;\r", "-\t\ttry {\r", "-\t\t\tjarFile = getJar();\r", "-\t\t\treturn new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + jarFile.getName()); //$NON-NLS-1$\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tthrow new JavaModelException(e);\r", "-\t\t} finally {\r", "-\t\t\ttry {\r", "-\t\t\t\tif (jarFile != null && JavaModelManager.getJavaModelManager().zipFiles == null) {\r", "-\t\t\t\t\tjarFile.close();\r", "-\t\t\t\t}\r", "-\t\t\t} catch(IOException e) {\r", "-\t\t\t\t// ignore \r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tString jarPath = fResource == null ? fJarPath.toOSString() : fResource.getLocation().toOSString();\r", "+\t\treturn new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + jarPath); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffce112b6e2e4de7ede8daccd9a6f281", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "f1d83e37dc72ba6d2676594fd1c64161817b3d74", "commitAfterChange": "50c8fc7c21507137e2b63d15c742a120cb954eef", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void removeMissingFactoryJars(IJavaProject jproj, Map<FactoryContainer, Attributes> containers)", "signatureAfterChange": " \tprivate void removeMissingFactoryJars(IJavaProject jproj, Map<FactoryContainer, Attributes> containers)", "diff": ["-\t\t\t\tURL url = null;", "-\t\t\t\ttry {", "-\t\t\t\t\turl = ((JarFactoryContainer)fc).getJarFileURL();", "-\t\t\t\t\t// Open the jar to see if it exists - else we'll enter a build marker.", "-\t\t\t\t\t// TODO: we might want to move the \"exists()\" method into JarFactoryContainer,", "-\t\t\t\t\t// and implement it more like ClasspathEntry.validateClasspathEntry().", "-\t\t\t\t\tInputStream is = url.openStream();", "-\t\t\t\t\tis.close();", "-\t\t\t\t} catch (IOException e) {", "+\t\t\t\tFile file = ((JarFactoryContainer)fc).getJarFile();", "+\t\t\t\tif (!file.exists()) {", "-\t\t\t\t\tString jarName = (url != null) ? url.toString() : fc.getId();", "-\t\t\t\t\treportMissingFactoryJar( jarName, jproj );", "+\t\t\t\t\treportMissingFactoryJar( file.toString(), jproj );"]}], "num": 43919}
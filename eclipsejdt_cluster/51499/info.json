{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77ce7c416086c5482f3acc6e57d9d6e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "789fe77072d7a1149ae4198487c2fabb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "24c9e84b2ec4fea87b1bf2f444e5d541a0e3f479", "commitAfterChange": "0685919bfb078b0c67b52f91b0cdb3192d89246d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t\t\tif (scope.isJavaLangObject(castType)) {", "+\t\t\t\tif (castType.id == T_Object) {", "-\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "+\t\t\t\tif (castType.id == T_JavaLangCloneable || castType.id == T_JavaIoSerializable) {", "-\t\t\t\tif (scope.isJavaLangObject(expressionType)) { // potential runtime error", "+\t\t\t\tif (expressionType.id == T_Object) { // potential runtime error", "-\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t} else { // a subclass may implement the interface ==> no check at compile time", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "+\t\t\t\t\treturn false;", "+\t\t\t\tif (!((ReferenceBinding) expressionType).isFinal()) {", "+\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "-\t\t\t\t\treturn true;", "+\t\t\t\t\treturn true;\t\t\t\t    ", "+\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\tif (scope.isJavaLangCloneable(expressionType)", "-\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType)) {// potential runtime error", "+\t\t\tif (expressionType.id == T_JavaLangCloneable", "+\t\t\t\t\t|| expressionType.id == T_JavaIoSerializable) {// potential runtime error", "-\t\t\tif (scope.isJavaLangObject(castType)) { // no runtime error", "+\t\t\tif (castType.id == T_Object) { // no runtime error", "-\t\t\tif (castType == expressionType) { ", "-\t\t\t\treturn false; // identity conversion", "+\t\t\tif (expressionType.isCompatibleWith(castType)) {", "+\t\t\t\treturn false; ", "-\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "+\t\t\tif (!castType.isCompatibleWith(expressionType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ce6006cbccc8f09b0358abf66f7fdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "24c9e84b2ec4fea87b1bf2f444e5d541a0e3f479", "commitAfterChange": "0685919bfb078b0c67b52f91b0cdb3192d89246d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t\t\tif (scope.isJavaLangObject(castType)) {", "+\t\t\t\tif (castType.id == T_Object) {", "-\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "+\t\t\t\tif (castType.id == T_JavaLangCloneable || castType.id == T_JavaIoSerializable) {", "-\t\t\t\tif (scope.isJavaLangObject(expressionType)) { // potential runtime error", "+\t\t\t\tif (expressionType.id == T_Object) { // potential runtime error", "-\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t} else { // a subclass may implement the interface ==> no check at compile time", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "+\t\t\t\t\treturn false;", "+\t\t\t\tif (!((ReferenceBinding) expressionType).isFinal()) {", "+\t\t\t\t    // a subclass may implement the interface ==> no check at compile time", "+\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\tif (!(scope.isJavaLangCloneable(expressionType)", "-\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType))) {// potential runtime error", "+\t\t\tif (!(expressionType.id == T_JavaLangCloneable", "+\t\t\t\t\t|| expressionType.id == T_JavaIoSerializable)) {// potential runtime error", "-\t\t\tif (scope.isJavaLangObject(castType)) { // no runtime error", "+\t\t\tif (castType.id == T_Object) { // no runtime error", "-\t\t\tif (castType == expressionType) { ", "-\t\t\t\treturn false; // identity conversion", "+\t\t\tif (expressionType.isCompatibleWith(castType)) { ", "+\t\t\t\treturn false;", "-\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "+\t\t\tif (!castType.isCompatibleWith(expressionType)) {"]}], "num": 51499}
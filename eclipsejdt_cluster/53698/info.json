{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbbee53f7e159ba0192c0d15b94f3100", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16182f0c20e5d5933ebcdd35bba274a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tif (!areReturnTypesEqual(currentMethod, inheritedMethod)) {", "-\t\t\tproblemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-\t\t\tcontinue nextMethod;", "-\t\t}", "+\t\t// want to tag currentMethod even if return types are not equal", "+\t\t}", "+", "+\t\tif (!areReturnTypesEqual(currentMethod, inheritedMethod)) {", "+\t\t\tproblemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+\t\t\tcontinue nextMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ee2188f9b636ea74bc54af8feb19416", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "3749ab08b3bcc9564a3496ebb9f23e5b7abd23aa", "commitAfterChange": "4a23c9efea3c3cfbb8a860d4cd8de9b8a033b86a", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t", "+", "+\t\tif (this.log != null) {", "+\t\t\tthis.logger.setLog(this.log);", "+\t\t} else {", "+\t\t\tthis.showProgress = false;", "+\t\t}", "+\t\t", "-\t\t}", "-", "-\t\tif (this.log != null) {", "-\t\t\tthis.logger.setLog(this.log);", "-\t\t} else {", "-\t\t\tthis.showProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49e674d15c3b6acb93ec382d70084c39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "16be4e18c433c782d20d23e55162bdd2a0750e51", "commitAfterChange": "a31d7e7b4abbe224ab4fbe696a3874733e052cdb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic int getSeverity(long irritant)", "signatureAfterChange": " \t \tpublic int getSeverity(long irritant)", "diff": ["-\t\tif((this.warningThreshold & irritant) != 0)", "-\t\t\treturn Warning;", "+\t\tif((this.warningThreshold & irritant) != 0)", "+\t\t\treturn Warning;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0d7b7cc60670df9d3bcbf3d640c35f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "signatureAfterChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "diff": ["-\t\tinitialize(type, arguments);", "-", "+\t\tinitialize(type, arguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7201c27137887a62889aa1555f93e198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java", "commitBeforeChange": "74187a49cf531f40f8b8fafd3f5db01750edef2a", "commitAfterChange": "e97cd8427512cb2f404b285abbed5b5911965a1d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void consumeType()", "signatureAfterChange": "  \tpublic void consumeType()", "diff": ["+\t\t// remove main type if needed", "+\t\tif (this.mainTypeStart != -1) {", "+\t\t\tthis.signature.replace(this.mainTypeStart, this.mainTypeEnd, \"\"); //$NON-NLS-1$", "+\t\t}", "+\t\t// parameter types", "-\t\t}", "-\t\t// remove main type if needed", "-\t\tif (this.mainTypeStart != -1) {", "-\t\t\tthis.signature.replace(this.mainTypeStart, this.mainTypeEnd, \"\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b09cb0c2eb9f0ca795f643435f15928", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "ed9fcb70460f8a7c09bd2ac4b3017e5159d83486", "commitAfterChange": "d518189a9935110f4925579d51368bbbeaff5789", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal int round)", "signatureAfterChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal int round)", "diff": ["-\t\taddAllFilesWithMissingTypeError(filesWithMissingType, unitsForFilesWithMissingType, processorEnv);", "-\t\t", "+\t\t", "+\t\taddAllFilesWithMissingTypeError(filesWithMissingType, unitsForFilesWithMissingType, processorEnv);"]}], "num": 53698}
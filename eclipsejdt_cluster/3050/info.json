{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1be012af95ce301a21e92db0701ce475", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a93d254ae8d8cae9c973c2e15624c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "5739eb5b2f82f16d73f7174ce6602e0e03939d00", "commitAfterChange": "c18c68a976e1e7ddfc35757dbbd26a3f421830be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected void beginToCompile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] sourceUnits, String[] bindingKeys)", "signatureAfterChange": " \tprotected void beginToCompile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] sourceUnits, String[] bindingKeys)", "diff": ["-\t\t\t\tthis.requestedKeys.put(parsedUnit.compilationResult.getFileName(), bindingKey);", "+\t\t\t\tchar[] fileName = parsedUnit.compilationResult.getFileName();", "+\t\t\t\tObject existing = this.requestedKeys.get(fileName);", "+\t\t\t\tif (existing == null)", "+\t\t\t\t\tthis.requestedKeys.put(fileName, bindingKey);", "+\t\t\t\telse if (existing instanceof ArrayList)", "+\t\t\t\t\t((ArrayList) existing).add(bindingKey);", "+\t\t\t\telse {", "+\t\t\t\t\tArrayList list = new ArrayList();", "+\t\t\t\t\tlist.add(existing);", "+\t\t\t\t\tlist.add(bindingKey);", "+\t\t\t\t\tthis.requestedKeys.put(fileName, list);", "+\t\t\t\t} ", "+\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6abb6c66ae8f056273dac62c6e28054", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "96af5a429e71ca25b6d63f12d9c3ddf8a8050b76", "commitAfterChange": "86fe5df1661ea451ff0236e707546d6bd1e84ff3", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "signatureAfterChange": " \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "diff": ["-\t\t\tNameEnvironmentAnswer answer = nameEnvironment.findType(bindingType.compoundName);", "+\t\t\tchar[] compoundName = CharOperation.concatWith(bindingType.compoundName, '.');", "+\t\t\tObject type = typeCache.get(compoundName);", "+\t\t\t", "+\t\t\tISourceType sourceType = null;", "+\t\t\tif(type != null) {", "+\t\t\t\tif(type instanceof ISourceType) {", "+\t\t\t\t\tsourceType = (ISourceType) type;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tNameEnvironmentAnswer answer = nameEnvironment.findType(bindingType.compoundName);", "+\t\t\t\tif(answer != null && answer.isSourceType()) {", "+\t\t\t\t\tsourceType = answer.getSourceTypes()[0];", "+\t\t\t\t\ttypeCache.put(compoundName, sourceType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tif(sourceType != null) {", "+\t\t\t\tISourceMethod[] sourceMethods = sourceType.getMethods();", "+\t\t\t\tint len = sourceMethods == null ? 0 : sourceMethods.length;", "+\t\t\t\tfor(int i = 0; i < len ; i++){", "+\t\t\t\t\tISourceMethod sourceMethod = sourceMethods[i];", "+\t\t\t\t\tchar[][] argTypeNames = sourceMethod.getArgumentTypeNames();", "-\t\t\tif(answer != null){", "-\t\t\t\tif(answer.isSourceType()) {", "-\t\t\t\t\tISourceType sourceType = answer.getSourceTypes()[0];", "-\t\t\t\t\tISourceMethod[] sourceMethods = sourceType.getMethods();", "-\t\t\t\t\tint len = sourceMethods == null ? 0 : sourceMethods.length;", "-\t\t\t\t\tfor(int i = 0; i < len ; i++){", "-\t\t\t\t\t\tISourceMethod sourceMethod = sourceMethods[i];", "-\t\t\t\t\t\tchar[][] argTypeNames = sourceMethod.getArgumentTypeNames();", "-", "-\t\t\t\t\t\tif(argTypeNames != null &&", "-\t\t\t\t\t\t\tCharOperation.equals(method.selector,sourceMethod.getSelector()) &&", "-\t\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){", "-\t\t\t\t\t\t\tparameterNames = sourceMethod.getArgumentNames();", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif(argTypeNames != null &&", "+\t\t\t\t\t\tCharOperation.equals(method.selector,sourceMethod.getSelector()) &&", "+\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){", "+\t\t\t\t\t\tparameterNames = sourceMethod.getArgumentNames();", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t} ", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d93ffd32d3767d9e5ecf1a3d1ec493a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e6d78cda375a26ce6fdb882d62ed50fe3c6a25b5", "commitAfterChange": "8aee5680d034dfec291b1e7b2abb4d9d081e8e31", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " \tpublic void resetSecondaryTypesCache(String path)", "signatureAfterChange": " \tpublic void resetSecondaryTypesCache(String path)", "diff": ["-\t\t\t\tprojectInfo.secondaryTypes = null;", "+\t\t\t\tif (projectInfo.secondaryTypes != null) {", "+\t\t\t\t\tObject dirty = projectInfo.secondaryTypes.get(DIRTY_CACHE);", "+\t\t\t\t\tif (dirty == null) {", "+\t\t\t\t\t\tprojectInfo.secondaryTypes.put(DIRTY_CACHE, resource);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tHashSet resources = (dirty instanceof HashSet) ? (HashSet) dirty : new HashSet(3);", "+\t\t\t\t\t\tresources.add(resource);", "+\t\t\t\t\t\tprojectInfo.secondaryTypes.put(DIRTY_CACHE, resource);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 3050}
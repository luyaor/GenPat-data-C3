{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3c0eafd9b1875d6868130801eb86d85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63eb22f56d285d3752de81e044484826", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5b0866f1cda464a8164beeea02560de34d69c4f0", "commitAfterChange": "b28008c809edce916440af06b775c7131d7f882e", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["+\t\t\t\t", "+\t\t\t\tif (sourceType.sourceName == CompletionParser.FAKE_TYPE_NAME) continue;", "-\t\t\t\tif (sourceType.isClass()){", "+\t\t\t\tif (sourceType.isAnnotationType()) {", "+\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "+\t\t\t\t} else if (sourceType.isInterface()) {", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t} else {", "-\t\t\t\t\t", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "-\t\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setFlags(sourceType.modifiers);", "-\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\t\t\t", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "-\t\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setFlags(sourceType.modifiers | Flags.AccInterface);", "-\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "+\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "+\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "+\t\t\t\t\tproposal.setFlags(sourceType.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d25cd7f44aa8414d98cce35d9bab0f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "a41e619c58860e4fb0ad103984917e455aa47d4f", "commitAfterChange": "6166acc1a72eef4415ab90fa4d71205848f659db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic HierarchyScope(IType type, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " \tpublic HierarchyScope(IJavaProject project, IType type, WorkingCopyOwner owner, boolean onlySubtypes, boolean noMemberTypes) throws JavaModelException", "diff": ["+\t */", "+\tpublic HierarchyScope(IJavaProject project, IType type, WorkingCopyOwner owner, boolean onlySubtypes, boolean noMemberTypes) throws JavaModelException {", "+\t\tthis(type, owner);", "+\t\tthis.javaProject = project;", "+\t\tif (onlySubtypes) {", "+\t\t\tthis.subTypes = new HashSet();", "+\t\t}", "+\t\tthis.allowMemberTypes = !noMemberTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab118d41fcabe0c1439239bb6f92b81c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5b0866f1cda464a8164beeea02560de34d69c4f0", "commitAfterChange": "b28008c809edce916440af06b775c7131d7f882e", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "diff": ["+\t\t\t\tif (sourceType.sourceName == CompletionParser.FAKE_TYPE_NAME) continue;", "-\t\t\t\tif (sourceType.isClass()){", "+\t\t\t\tif (sourceType.isAnnotationType()) {", "+\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "+\t\t\t\t} else if (sourceType.isInterface()) {", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t} else {", "-\t\t\t\t\t", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "-\t\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setFlags(sourceType.modifiers);", "-\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\t\t\t", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "-\t\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "-\t\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "-\t\t\t\t\t\tproposal.setFlags(sourceType.modifiers | Flags.AccInterface);", "-\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "+\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "+\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "+\t\t\t\t\tproposal.setFlags(sourceType.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);"]}], "num": 36990}
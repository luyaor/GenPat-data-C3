{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b107ea96f1346347b7853aaebd21b28", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a40f935f1493185c4831e022f824c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "09e6a0d689d92bccdede36cccd43932276d7e4d3", "commitAfterChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope)", "diff": ["-\t\t\tif (!MethodVerifier.isParameterSubsignature(method, otherMethod, environment) || !MethodVerifier.areReturnTypesCompatible(method, otherMethod, environment)) ", "+\t\t\t", "+\t\t\tif (genericMethodSeen) { // adapt type parameters.", "+\t\t\t\totherMethod = MethodVerifier.computeSubstituteMethod(otherMethod, method, environment);", "+\t\t\t\tif (otherMethod == null)", "+\t\t\t\t\tcontinue next;", "+\t\t\t}", "+\t\t\tif (!MethodVerifier.isSubstituteParameterSubsignature(method, otherMethod, environment) || !MethodVerifier.areReturnTypesCompatible(method, otherMethod, environment)) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1d6e3c0dd4251233ae1095ea868be8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/CharOperation.java", "commitBeforeChange": "e90133bc2bb6238e9bed10f9407b68636afe0cf9", "commitAfterChange": "aa3e581727ecbd82f62d5775da80f0c298f9ec87", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public static final boolean match(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd, boolean isCaseSensitive)", "signatureAfterChange": " public static final boolean match(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd, boolean isCaseSensitive)", "diff": ["+\tif (patternEnd < 0) patternEnd = pattern.length;", "+\tif (nameEnd < 0) nameEnd = name.length;", "+\t"]}], "num": 37921}
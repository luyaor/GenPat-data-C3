{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f330c72588b6adbeecd2f8bf4a40fc19", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325ae77f0d3bbdae63d3f780644de87e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "4ec8463782f86806757a76ab2d360d5012825932", "commitAfterChange": "f7bc2ee5d62baf64b6f044f322b40cdaa75e5dcc", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "\t \t \tpublic void testEnumDeclaration()", "signatureAfterChange": " \tpublic void testEnumDeclaration()", "diff": ["+\t */", "+\t\tassertTrue(x.enumConstants().size()== 0);", "+\t\tgenericPropertyListTest(x, x.enumConstants(),", "+\t\t\t\t  new Property(\"EnumConstants\", true, EnumConstantDeclaration.class) { //$NON-NLS-1$", "+\t\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\t\tEnumConstantDeclaration result = targetAst.newEnumConstantDeclaration();", "+\t\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\t\t// use fact that EnumConstantDeclaration is also a BodyDeclaration", "+\t\t\t\t\t\t\tTypeDeclaration d = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\t\td.bodyDeclarations().add(result);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn result;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\t\tEnumConstantDeclaration s1 = x.getAST().newEnumConstantDeclaration();", "+\t\t\t\t\t\ts1.bodyDeclarations().add(x);", "+\t\t\t\t\t\treturn s1;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\t\tEnumConstantDeclaration s1 = (EnumConstantDeclaration) x.getParent();", "+\t\t\t\t\t\ts1.bodyDeclarations().remove(x);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\t", "-\t\tx.bodyDeclarations().add(c1);", "-\t\tx.bodyDeclarations().add(c2);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "+\t\tx.enumConstants().add(c1);", "+\t\tx.enumConstants().add(c2);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(t1);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "+\t\tx.bodyDeclarations().add(t1);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tList es = Arrays.asList(x.getEnumConstants());", "-\t\tassertTrue(es.size() == 2);", "-\t\tassertTrue(es.contains(c1));", "-\t\tassertTrue(es.contains(c2));", "+\t\t// getEnumConstants() is deprecated - this test will be removed after 3.1M3", "+\t\tEnumConstantDeclaration[] cs = x.getEnumConstants();", "+\t\tassertTrue(cs.length == 2);", "+\t\tassertEquals(c1, cs[0]);", "+\t\tassertEquals(c2, cs[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6cafd946881c04830fdd15b9662013e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 129, "signatureBeforeChange": "  \tpublic void testArrayType()", "signatureAfterChange": " \tpublic void testArrayType()", "diff": ["+\t}", "-\t\tassertTrue(x.getComponentType().getParent() == x);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tassertTrue(getArrayComponentType(x).getParent() == x);", "+\t\t} else {", "+\t\t\tassertTrue(x.getElementType().getParent() == x);", "+\t\t}", "-\t\tgenericPropertyTest(x, new Property(\"ComponentType\", true, Type.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleType result = targetAst.newSimpleType(", "-\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tgenericPropertyTest(x, new Property(\"ComponentType\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode wrap() {", "-\t\t\t\tArrayType result = ASTTest.this.ast.newArrayType(x);", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic void unwrap() {", "-\t\t\t\tArrayType a = (ArrayType) x.getParent();", "-\t\t\t\ta.setComponentType(ASTTest.this.ast.newPrimitiveType(PrimitiveType.INT));", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getComponentType();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setComponentType((Type) value);", "-\t\t\t}", "-\t\t});", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tArrayType result = ASTTest.this.ast.newArrayType(x);", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tArrayType a = (ArrayType) x.getParent();", "+\t\t\t\t\tsetArrayComponentType(a, ASTTest.this.ast.newPrimitiveType(PrimitiveType.INT));", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn getArrayComponentType(x);", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tsetArrayComponentType(x, (Type) value);", "+\t\t\t\t}", "+\t\t\t});", "-\t\tx.setComponentType(", "-\t\t\tthis.ast.newArrayType(this.ast.newPrimitiveType(PrimitiveType.INT), 4));", "+\t\t\tsetArrayComponentType(x,", "+\t\t\t\tthis.ast.newArrayType(this.ast.newPrimitiveType(PrimitiveType.INT), 4));", "+\t\t\tassertTrue(x.getDimensions() == 5);", "+\t\t\tassertTrue(x.getElementType().isPrimitiveType());", "+\t\t\tfinal ArrayType x3 = this.ast.newArrayType(x, 2);", "+\t\t\tassertTrue(x3.getDimensions() == 7);", "+\t\t} else {", "+\t\t\tgenericPropertyTest(x, new Property(\"ElementType\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tArrayType result = ASTTest.this.ast.newArrayType(x, 5);", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tArrayType a = (ArrayType) x.getParent();", "+\t\t\t\t\ta.setElementType(ASTTest.this.ast.newPrimitiveType(PrimitiveType.INT));", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getElementType();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setElementType((Type) value);", "+\t\t\t\t}", "+\t\t\t});", "-\t\tassertTrue(x.getDimensions() == 5);", "-\t\tassertTrue(x.getElementType().isPrimitiveType());", "-\t\tfinal ArrayType x3 = this.ast.newArrayType(x, 2);", "-\t\tassertTrue(x3.getDimensions() == 7);", "-\t\t", "+\t\t\tx.setElementType(this.ast.newPrimitiveType(PrimitiveType.INT));", "+\t\t\tassertTrue(x.getDimensions() == 1);", "+\t\t\tassertTrue(x.getElementType().isPrimitiveType());", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaac28dc0dae7d29f243ecc47c4fc16a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "c6d868d8783a57da635a4ee823bfa99a77283712", "commitAfterChange": "eb94d4f8322ccc35580c2be98b06636564603ba3", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "\t\t  \tpublic void testParameterizedType()", "signatureAfterChange": "\t\t  \tpublic void testParameterizedType()", "diff": ["-\t\t\t\tast.newParameterizedType(ast.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\t\t\tast.newParameterizedType(ast.newSimpleType(ast.newSimpleName(\"String\"))); //$NON-NLS-1$", "-\t\tfinal ParameterizedType x = ast.newParameterizedType(ast.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\tType t = ast.newSimpleType(ast.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\tfinal ParameterizedType x = ast.newParameterizedType(t); ", "+\t\tassertTrue(x.getType() == t);", "+\t\tassertTrue(x.getType().getParent() == x);", "+\t\tgenericPropertyTest(x, new Property(\"Type\", true, Type.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tSimpleType result = ", "+\t\t\t\ttargetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode wrap() {", "+\t\t\t\tParameterizedType s1 = ast.newParameterizedType(x); //$NON-NLS-1$", "+\t\t\t\treturn s1;", "+\t\t\t}", "+\t\t\tpublic void unwrap() {", "+\t\t\t\tParameterizedType s1 = (ParameterizedType) x.getParent();", "+\t\t\t\ts1.setType(ast.newSimpleType(ast.newSimpleName(\"z\"))); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tpublic ASTNode get() {", "+\t\t\t\treturn x.getType();", "+\t\t\t}", "+\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\tx.setType((Type) value);", "+\t\t\t}", "+\t\t});", "-\t\t\t\tParameterizedType s1 = ast.newParameterizedType(ast.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\tParameterizedType s1 = ast.newParameterizedType(ast.newSimpleType(ast.newSimpleName(\"foo\"))); //$NON-NLS-1$"]}], "num": 69327}
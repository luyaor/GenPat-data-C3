{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9263ca7862e4c4edcb359cf2084a2d0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c8648d15d5ca1d6556bbde0ddf9c31b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "6951673145a8631d91ae1a92a80455775a1025ab", "commitAfterChange": "be0a3645417b1e39fb6bf5137d34d6f37563762b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\tif (argumentType == NullBinding) ", "+\t\tif (argumentType == NullBinding || this == argumentType) ", "+\t\t", "+\t    if (argumentType.isWildcard()) {", "+\t        WildcardBinding wildcard = (WildcardBinding) argumentType;", "+\t        switch (wildcard.kind) {", "+\t        \tcase Wildcard.SUPER :", "+\t\t            if (!boundCheck(substitution, wildcard.bound)) return false;", "+\t\t            break;", "+\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\tif (this == wildcard.typeVariable()) ", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\tbreak;\t        \t\t", "+\t        }", "+\t    }", "+//\t\tif (this == argumentType) ", "+//\t\t\treturn true;", "+\t\t", "-\t        }", "-\t    }", "-\t    if (argumentType.isWildcard()) {", "-\t        WildcardBinding wildcard = (WildcardBinding) argumentType;", "-\t        if (wildcard.kind == Wildcard.SUPER) {", "-\t            if (!boundCheck(substitution, wildcard.bound)) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ab52299cb9bc2f2cc770bf6f59bc279", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "d374c39ddab0b1f83162946aec27b6b36fb07bfb", "commitAfterChange": "a8a3a90ec5bfee0f774504f5c766dbb8c9570420", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean checkConstructors(Parser parser)", "signatureAfterChange": " \tpublic boolean checkConstructors(Parser parser)", "diff": ["-\t\t\t\t\t\tif (this.kind() == IGenericType.INTERFACE_DECL) {", "-\t\t\t\t\t\t\t// report the problem and continue the parsing", "-\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors(", "-\t\t\t\t\t\t\t\t(ConstructorDeclaration) am);", "+\t\t\t\t\t\tswitch (kind()) {", "+\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL :", "+\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL :", "+\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\t\tparser.problemReporter().annotationTypeDeclarationCannotHaveConstructor((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a040698cc023820537650a8114dbbff2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "ef0a598e8142fdc0982c3f62cf49d826edaa6505", "commitAfterChange": "89e5cfe6011c44c81db4c1b525146cb6d514af0e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic SourceRange getNameRange(IJavaElement element)", "signatureAfterChange": " \tpublic SourceRange getNameRange(IJavaElement element)", "diff": ["-\t\tif (element.getElementType() == IJavaElement.METHOD", "-\t\t\t&& ((IMember) element).isBinary()) {", "-\t\t\tIJavaElement[] el = getUnqualifiedMethodHandle((IMethod) element, false);", "-\t\t\tif(el[1] != null && fSourceRanges.get(el[0]) == null) {", "-\t\t\t\telement = getUnqualifiedMethodHandle((IMethod) element, true)[0];", "-\t\t\t} else {", "-\t\t\t\telement = el[0];", "-\t\t\t}", "+\t\tswitch(element.getElementType()) {", "+\t\t\tcase IJavaElement.METHOD :", "+\t\t\t\tif (((IMember) element).isBinary()) {", "+\t\t\t\t\tIJavaElement[] el = getUnqualifiedMethodHandle((IMethod) element, false);", "+\t\t\t\t\tif(el[1] != null && fSourceRanges.get(el[0]) == null) {", "+\t\t\t\t\t\telement = getUnqualifiedMethodHandle((IMethod) element, true)[0];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\telement = el[0];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.TYPE_PARAMETER :", "+\t\t\t\tSystem.out.println(element);"]}], "num": 58208}
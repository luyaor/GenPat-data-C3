{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80be22db48db2d81a0d1a278ae8a1108", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "989042d60398d2f834076256a29e95d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "115aa955b9babd8a2ed6e802830c5035a2e2a28f", "commitAfterChange": "c555269f6d77af957f827daf14cfb9a3af0c01ad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth, int indentWidth)", "signatureAfterChange": " \tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth)", "diff": ["-\t */", "-\tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth, int indentWidth) {", "-\t\tif (line == null || indentsToRemove <= 0)", "-\t\t\treturn line;", "-", "-\t\tfinal int spaceEquivalentsToRemove= indentsToRemove * indentWidth;", "-\t\t", "-\t\tint start= 0;", "-\t\tint spaceEquivalents= 0;", "-\t\tString prefix= null;", "-\t\t\t\tint remainder= spaceEquivalents % tabWidth;", "-\t\t\t\tspaceEquivalents += tabWidth - remainder;", "-\t\t\t\tspaceEquivalents++;", "+\t */", "+\tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth) {", "+\t\tif (line == null || indentsToRemove <= 0)", "+\t\t\treturn line;", "+\t\t\t", "+\t\tint start= 0;", "+\t\tint indents= 0;", "+\t\tint blanks= 0;", "+\t\tint size= line.length();", "+\t\tfor (int i= 0; i < size; i++) {", "+\t\t\tchar c= line.charAt(i);", "+\t\t\tif (c == '\\t') {", "+\t\t\t\tindents++;", "+\t\t\t\tblanks= 0;", "+\t\t\t} else if (isIndentChar(c)) {", "+\t\t\t\t\tblanks++;", "+\t\t\t\t\tif (blanks == tabWidth) {", "+\t\t\t\t\t\tindents++;", "+\t\t\t\t\t\tblanks= 0;", "+\t\t\t\t\t}", "-\t\t\tif (spaceEquivalents == spaceEquivalentsToRemove) {", "+\t\t\tif (indents == indentsToRemove) {", "-\t\t\t}", "-\t\t\tif (spaceEquivalents > spaceEquivalentsToRemove) {", "-\t\t\t\t// can happen if tabSize > indentSize, e.g tabsize==8, indent==4, indentsToRemove==1, line prefixed with one tab", "-\t\t\t\t// this implements the third option", "-\t\t\t\tstart= i + 1; // remove the tab", "-\t\t\t\t// and add the missing spaces", "-\t\t\t\tchar[] missing= new char[spaceEquivalents - spaceEquivalentsToRemove];", "-\t\t\t\tArrays.fill(missing, ' ');", "-\t\t\t\tprefix= new String(missing);", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\t}\t", "-\t\tString trimmed;", "-\t\t\ttrimmed= \"\"; //$NON-NLS-1$", "+\t\t\treturn \"\"; //$NON-NLS-1$", "-\t\t\ttrimmed= line.substring(start);", "-\t\t", "-\t\tif (prefix == null)", "-\t\t\treturn trimmed;", "-\t\treturn prefix + trimmed;", "+\t\t\treturn line.substring(start);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a594823a7392757697eea36dfe01b0ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "b8409b2c5761cb2e6dbcdfc3bef92e6e755d2aa7", "commitAfterChange": "e968b992e38be58d07a46d70f656322d8b2edb33", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void loadPluginFactoryMap()", "signatureAfterChange": " \tprivate void loadPluginFactoryMap()", "diff": ["-\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(", "-\t\t\t\t\"org.eclipse.jdt.apt.core\",  //$NON-NLS-1$ - namecls of plugin that exposes this extension", "-\t\t\t\t\"annotationProcessorFactory\"); //$NON-NLS-1$ - extension id", "-\t\tIExtension[] extensions =  extension.getExtensions();", "-\t\t// for all extensions of this point...", "-\t\tfor(int i = 0; i < extensions.length; i++){", "-\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "-\t\t\t// for all config elements named \"factory\"", "-\t\t\tfor(int j = 0; j < configElements.length; j++){", "-\t\t\t\tString elementName = configElements[j].getName();", "-\t\t\t\tif (!(\"factory\".equals(elementName))) { //$NON-NLS-1$ - name of configElement", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\ttry {", "-\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$ - attribute name", "-\t\t\t\t\tif (execExt instanceof AnnotationProcessorFactory){", "-\t\t\t\t\t\tPLUGIN_FACTORY_MAP.put( execExt.getClass().getName(), (AnnotationProcessorFactory)execExt );", "-\t\t\t\t\t}", "-\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t// TODO: what follows is extremely similar to FactoryPathUtil#getAllPluginFactoryContainers().", "+\t\t// Surely there is some way to share that code?  The main difference is that there we don't ", "+\t\t// want to instantiate the actual factories, and here we do.", "+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(", "+\t\t\t\tAptPlugin.PLUGIN_ID, // name of plugin that exposes this extension point", "+\t\t// Iterate over all declared extensions of this extension point.  ", "+\t\t// A single plugin may extend the extension point more than once, although it's not recommended.", "+\t\tfor (IExtension extension : extensionPoint.getExtensions())", "+\t\t\t// Iterate over the children of the extension to find one named \"factories\".", "+\t\t\tfor(IConfigurationElement factories : extension.getConfigurationElements())", "+\t\t\t\tif (!\"factories\".equals(factories.getName())) { //$NON-NLS-1$ - name of configElement ", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t// Iterate over the children of the \"factories\" element to find all the ones named \"factory\".", "+\t\t\t\tfor (IConfigurationElement factory : factories.getChildren()) {", "+\t\t\t\t\tif (!\"factory\".equals(factory.getName())) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tObject execExt = factory.createExecutableExtension(\"class\"); //$NON-NLS-1$ - attribute name", "+\t\t\t\t\t\tif (execExt instanceof AnnotationProcessorFactory){", "+\t\t\t\t\t\t\tPLUGIN_FACTORY_MAP.put( execExt.getClass().getName(), (AnnotationProcessorFactory)execExt );", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch(CoreException e) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}"]}], "num": 2359}
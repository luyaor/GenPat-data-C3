{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f967caebe27117ec6978458863f13832", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d127844c25ec0906dd866ab87e17d4bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void set(Map optionsMap)", "signatureAfterChange": " \t \tpublic void set(Map optionsMap)", "diff": ["+\t\t\tif (this.targetJDK >= JDK1_5) this.inlineJsrBytecode = true; // forced in 1.5 mode", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.inlineJsrBytecode = true;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.inlineJsrBytecode = false;", "+\t\t\tif (this.targetJDK < JDK1_5) { // only optional if target < 1.5 (inlining on from 1.5 on)", "+\t\t\t\tif (ENABLED.equals(optionValue)) {", "+\t\t\t\t\tthis.inlineJsrBytecode = true;", "+\t\t\t\t} else if (DISABLED.equals(optionValue)) {", "+\t\t\t\t\tthis.inlineJsrBytecode = false;", "+\t\t\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportUnnecessaryElse)) != null) updateSeverity(UnnecessaryElse, optionValue);", "-\t\tif ((optionValue = optionsMap.get(OPTION_ReportUnnecessaryElse)) != null) updateSeverity(UnnecessaryElse, optionValue);", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportUnsafeTypeOperation)) != null) updateSeverity(UnsafeTypeOperation, optionValue);", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportFinalParameterBound)) != null) updateSeverity(FinalParameterBound, optionValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edd5cec0b74e2a357a7dc84f5c627d23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java", "commitBeforeChange": "4565c4d11214ff6c3b1816642f5ab9e9c25eeecc", "commitAfterChange": "750bdd7b4af2056bfa5a30d4d6b65bbb0afdb706", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void set(Map optionsMap)", "signatureAfterChange": " \tpublic void set(Map optionsMap)", "diff": ["-\t\tif ((optionValue = optionsMap.get(OPTION_PerformForbiddenReferenceCheck)) != null) {", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.checkForbiddenReference = true;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.checkForbiddenReference = false;", "-\t\t\t}", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_PerformDiscouragedReferenceCheck)) != null) {", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.checkDiscouragedReference = true;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.checkDiscouragedReference = false;", "+\t\tif ((optionValue = optionsMap.get(OPTION_HideRestrictedReferences)) != null) {", "+\t\t\tif (NEVER.equals(optionValue)) {", "+\t\t\t\tthis.restrictedReferenceFilter = FILTER_NEVER;", "+\t\t\t} else if (ERROR.equals(optionValue)) {", "+\t\t\t\tthis.restrictedReferenceFilter = FILTER_ERROR;", "+\t\t\t} else if (WARNING.equals(optionValue)) {", "+\t\t\t\tthis.restrictedReferenceFilter = FILTER_WARNING;"]}], "num": 54209}
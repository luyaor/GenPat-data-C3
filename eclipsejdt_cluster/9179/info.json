{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6abf7ff2d1415c9205bd031fb0e2408a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b58ddddb757af892f726e93eb88d73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariablePattern.java", "commitBeforeChange": "9cd1ab49783c2213611dcbe2939a387e78b83c79", "commitAfterChange": "92aee8d421610703027ca2a5b652beed8fbe4ac3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor)", "signatureAfterChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor)", "diff": ["-\tString path;", "+\tString documentPath;", "+\tString relativePath;", "-        String filePath = (type.getFullyQualifiedName('/')).replace('.', '/') + SuffixConstants.SUFFIX_STRING_class;", "-        path = root.getPath() + IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR + filePath;", "+        relativePath = (type.getFullyQualifiedName('/')).replace('.', '/') + SuffixConstants.SUFFIX_STRING_class;", "+        documentPath = root.getPath() + IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR + relativePath;", "-        path = this.localVariable.getPath().toString();", "+\t\tIPath path = this.localVariable.getPath();", "+        documentPath = path.toString();", "+\t\trelativePath = Util.relativePath(path, 1/*remove project segment*/);", "-\t\tAccessRuleSet access = javaSearchScope.getAccessRuleSet(path, index.containerPath);", "+\t\tAccessRuleSet access = javaSearchScope.getAccessRuleSet(relativePath, index.containerPath);", "-\t\t\tif (!requestor.acceptIndexMatch(path, this, participant, access)) ", "+\t\t\tif (!requestor.acceptIndexMatch(documentPath, this, participant, access)) ", "-\t} else if (scope.encloses(path)) {", "-\t\tif (!requestor.acceptIndexMatch(path, this, participant, null)) ", "+\t} else if (scope.encloses(documentPath)) {", "+\t\tif (!requestor.acceptIndexMatch(documentPath, this, participant, null)) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e868136fc4c27e9e336c127464cd0a77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeParameterPattern.java", "commitBeforeChange": "9cd1ab49783c2213611dcbe2939a387e78b83c79", "commitAfterChange": "92aee8d421610703027ca2a5b652beed8fbe4ac3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor)", "diff": ["-\t    IPackageFragmentRoot root = (IPackageFragmentRoot)typeParameter.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "-\t\tString path;", "+\t    IPackageFragmentRoot root = (IPackageFragmentRoot) this.typeParameter.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\tString documentPath;", "+\t\tString relativePath;", "-\t        IType type = (IType)typeParameter.getAncestor(IJavaElement.TYPE);", "-\t        String filePath = (type.getFullyQualifiedName('/')).replace('.', '/') + SuffixConstants.SUFFIX_STRING_class;", "-\t        path = root.getPath() + IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR + filePath;", "+ \t    \tIType type = (IType) this.typeParameter.getAncestor(IJavaElement.TYPE);", "+    \t    relativePath = (type.getFullyQualifiedName('/')).replace('.', '/') + SuffixConstants.SUFFIX_STRING_class;", "+\t        documentPath = root.getPath() + IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR + relativePath;", "-\t        path = typeParameter.getPath().toString();", "+\t\t\tIPath path = this.typeParameter.getPath();", "+\t        documentPath = path.toString();", "+\t\t\trelativePath = Util.relativePath(path, 1/*remove project segment*/);", "-\t\t\tAccessRuleSet access = javaSearchScope.getAccessRuleSet(path, index.containerPath);", "+\t\t\tAccessRuleSet access = javaSearchScope.getAccessRuleSet(relativePath, index.containerPath);", "-\t\t\t\tif (!requestor.acceptIndexMatch(path, this, participant, access)) ", "+\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, this, participant, access)) ", "-\t\t} else if (scope.encloses(path)) {", "-\t\t\tif (!requestor.acceptIndexMatch(path, this, participant, null)) ", "+\t\t} else if (scope.encloses(documentPath)) {", "+\t\t\tif (!requestor.acceptIndexMatch(documentPath, this, participant, null)) "]}], "num": 9179}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59bd8d119e44a32a9c85316dc9355e75", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d8844e5d9b560836b5088955ce77bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "074f76ed30b280be335de3f9fa68939f9241cbe0", "commitAfterChange": "451a4290b08482db72c12f90b576f09a8da8fda2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "diff": ["-\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage) {", "+\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage) {", "-\t\t\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "-\t\t\t\t\tsimpleName,", "+\t\t\t\t\tsimpleName.length == 0 ? null : simpleName, //TODO(david) remove once bug 156340 will be fixed", "-\t\t\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\t\t\tsearchFor,", "-\t\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "-\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\tconvertSearchFilterToModelFilter(searchFor));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b36a37f74dc554e9969019da7f35d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "8641f54de2fbb396358e8ce74c8966d612b3bcdf", "commitAfterChange": "7f7fe7a0ba4a6e12c0bff10c900a5fe01a5f59ed", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage)", "diff": ["-\tpublic void findTypes(char[] prefix, final boolean findMembers, final ISearchRequestor storage) {", "+\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage) {", "-\t\t\t\tsimpleName = CharOperation.toLowerCase(prefix);", "+\t\t\t\tif (camelCaseMatch) {", "+\t\t\t\t\tsimpleName = prefix;", "+\t\t\t\t} else {", "+\t\t\t\t\tsimpleName = CharOperation.toLowerCase(prefix);", "+\t\t\t\t}", "-\t\t\t\tsimpleName =", "-\t\t\t\t\tCharOperation.toLowerCase(", "-\t\t\t\t\t\tCharOperation.subarray(prefix, lastDotIndex + 1, prefix.length));", "+\t\t\t\tif (camelCaseMatch) {", "+\t\t\t\t\tsimpleName = CharOperation.subarray(prefix, lastDotIndex + 1, prefix.length);", "+\t\t\t\t} else {", "+\t\t\t\t\tsimpleName =", "+\t\t\t\t\t\tCharOperation.toLowerCase(", "+\t\t\t\t\t\t\tCharOperation.subarray(prefix, lastDotIndex + 1, prefix.length));", "+\t\t\t\t}", "+\t\t\t\tint matchRule = SearchPattern.R_PREFIX_MATCH;", "+\t\t\t\tif (camelCaseMatch) matchRule |= SearchPattern.R_CAMELCASE_MATCH;", "-\t\t\t\t\tSearchPattern.R_PREFIX_MATCH, // not case sensitive", "+\t\t\t\t\tmatchRule, // not case sensitive"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb29cfc7f11fe24332d688155303e706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "commitAfterChange": "b3c71360bc95e8921739b4788b7eb24580a75ac4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "diff": ["-", "+\t\tfindTypes(prefix, findMembers, camelCaseMatch, searchFor, storage, null);", "+\t}", "-\t\t\ttry {", "-\t\t\t\tint matchRule = SearchPattern.R_PREFIX_MATCH;", "-\t\t\t\tif (camelCaseMatch) matchRule |= SearchPattern.R_CAMELCASE_MATCH;", "-\t\t\t\tnew BasicSearchEngine(this.workingCopies).searchAllTypeNames(", "-\t\t\t\t\tqualification,", "-\t\t\t\t\tSearchPattern.R_EXACT_MATCH,", "-\t\t\t\t\tsimpleName,", "-\t\t\t\t\tmatchRule, // not case sensitive", "-\t\t\t\t\tsearchFor,", "-\t\t\t\t\tgetSearchScope(),", "-\t\t\t\t\ttypeRequestor,", "-\t\t\t\t\tCANCEL_IF_NOT_READY_TO_SEARCH,", "-\t\t\t\t\tprogressMonitor);", "-\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\tfindTypes(", "-\t\t\t\t\tnew String(prefix),", "-\t\t\t\t\tstorage,", "-\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));"]}], "num": 50536}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff2816d015b36453199ebbd00dbc9b0a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b295af85f9197b856c4333f4c88da1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic void test0091() throws JavaModelException", "signatureAfterChange": " \tpublic void test0091() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"@interface X {\\n\" +", "-\t\t\t\t\"\tint id() default 0;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tassertEquals(\"Not an annotation type declaration\", ASTNode.ANNOTATION_TYPE_DECLARATION, node.getNodeType());", "-\t\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "-\t\t\tITypeBinding binding = annotationTypeDeclaration.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tassertTrue(\"Not an annotation\", binding.isAnnotation());", "-\t\t\tassertEquals(\"Wrong name\", \"X\", binding.getName());", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tassertEquals(\"Not an annotation type member declaration\", ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION, node.getNodeType());", "-\t\t\tAnnotationTypeMemberDeclaration memberDeclaration = (AnnotationTypeMemberDeclaration) node;", "-\t\t\tIMethodBinding methodBinding = memberDeclaration.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", methodBinding);", "-\t\t\tassertEquals(\"Wrong name\", \"id\", methodBinding.getName());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"@interface X {\\n\" +", "+\t\t\t\"\tint id() default 0;\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tassertEquals(\"Not an annotation type declaration\", ASTNode.ANNOTATION_TYPE_DECLARATION, node.getNodeType());", "+\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "+\t\tITypeBinding binding = annotationTypeDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tassertTrue(\"Not an annotation\", binding.isAnnotation());", "+\t\tassertEquals(\"Wrong name\", \"X\", binding.getName());", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not an annotation type member declaration\", ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION, node.getNodeType());", "+\t\tAnnotationTypeMemberDeclaration memberDeclaration = (AnnotationTypeMemberDeclaration) node;", "+\t\tIMethodBinding methodBinding = memberDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tassertEquals(\"Wrong name\", \"id\", methodBinding.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da32a603018b1ec286d1f9cc31ebc8c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "c2c89873c61d71348f0b43a177f550bf104965a7", "commitAfterChange": "0034505de2732b8d694205cdc539038707e38e58", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testParameterizedReceiverType() throws JavaModelException", "signatureAfterChange": " \tpublic void testParameterizedReceiverType() throws JavaModelException", "diff": ["-//TODO: bad AST node structure, see https://bugs.eclipse.org/419974#c2 :", "-//\t\t\t\t\t\t\"\t\t\tpublic Z(@A X<T>.@B Y<K, V> Y.this){ }\\n\" +", "-//\t\t\t\t\t\t\"\t\t\tpublic void foo(@B Y<K, V>.@C Z this){ }\\n\" +", "+\t\t\t\t\t\t\"\t\t\tpublic Z(@A X<T>.@B Y<K, V> Y.this, boolean a){ }\\n\" +", "+\t\t\t\t\t\t\"\t\t\tpublic void foo(@B Y<K, V>.@C Z this, boolean a){ }\\n\" +", "-\t\tnode = (ASTNode) type.bodyDeclarations().get(0);", "-\t\tassertEquals(\"Not a method Declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "-\t\tMethodDeclaration method = (MethodDeclaration) node;", "+\t\t", "+\t\tMethodDeclaration method = (MethodDeclaration) type.bodyDeclarations().get(0);", "-//TODO: bad AST node structure, see https://bugs.eclipse.org/419974#c2 :", "-//\t\tassertEquals(\"Incorrect receiver\", \"@A X<T>.@B Y<K,V>\", ((QualifiedType) receiver).toString());", "-//\t\tassertEquals(\"Incorrect method signature\", \"public Z(@A X<T>.@B Y<K,V> Y.this){\\n}\\n\", method.toString());", "-\t\tassertEquals(\"Incorrect receiver\", \"X<T>.@B Y<K,V>\", ((ParameterizedType) receiver).toString());", "-\t\tassertEquals(\"Incorrect method signature\", \"public Z(X<T>.@B Y<K,V> Y.this){\\n}\\n\", method.toString());", "+\t\tassertEquals(\"Not a ParameterizedType\", ASTNode.PARAMETERIZED_TYPE, receiver.getNodeType());", "+\t\tcheckSourceRange(receiver, \"@A X<T>.@B Y<K, V>\", contents);", "+\t\tassertEquals(\"Incorrect method signature\", \"public Z(@A X<T>.@B Y<K,V> Y.this,boolean a){\\n}\\n\", method.toString());", "-//TODO: bad AST node structure, see https://bugs.eclipse.org/419974#c2 :", "-//\t\tassertEquals(\"Incorrect receiver\", \"@B Y<K,V>.@C Z\", ((QualifiedType) receiver).toString());", "-//\t\tassertEquals(\"Incorrect method signature\", \"public void foo(@B Y<K,V>.@C Z this){\\n}\\n\", method.toString());", "-\t\tassertEquals(\"Incorrect receiver\", \"Y<K,V>.@C Z\", ((QualifiedType) receiver).toString());", "+\t\tassertEquals(\"Not a QualifiedType\", ASTNode.QUALIFIED_TYPE, receiver.getNodeType());", "+\t\tcheckSourceRange(receiver, \"@B Y<K, V>.@C Z\", contents);", "+\t\tassertEquals(\"Incorrect method signature\", \"public void foo(@B Y<K,V>.@C Z this,boolean a){\\n}\\n\", method.toString());", "+\t\t", "+\t\tmethod = (MethodDeclaration) type.bodyDeclarations().get(2);", "+\t\treceiver = method.getReceiverType();", "+\t\tassertEquals(\"Not a ParameterizedType\", ASTNode.PARAMETERIZED_TYPE, receiver.getNodeType());", "+\t\tcheckSourceRange(receiver, \"X<T>.@B Y<K, V>\", contents);", "+\t\tassertEquals(\"Incorrect method signature\", \"public Z(X<T>.@B Y<K,V> Y.this){\\n}\\n\", method.toString());", "+\t\t", "+\t\tmethod = (MethodDeclaration) type.bodyDeclarations().get(3);", "+\t\treceiver = method.getReceiverType();", "+\t\tassertEquals(\"Not a QualifiedType\", ASTNode.QUALIFIED_TYPE, receiver.getNodeType());", "+\t\tcheckSourceRange(receiver, \"Y<K, V>.@C Z\", contents);"]}], "num": 14132}
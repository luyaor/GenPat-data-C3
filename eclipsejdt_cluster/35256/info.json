{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97162d7762d00ba5349adefd8e4c49bc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a151ab1742f103d685e1c92136243f91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNonNull(VariableBinding local)", "diff": ["-public void markAsComparedEqualToNonNull(LocalVariableBinding local) {", "+public void markAsComparedEqualToNonNull(VariableBinding local) {", "+    \tif (local instanceof FieldBinding && ((local.modifiers & AccConstant) == AccConstant)) {", "+\t    \t// non-final fields may be modified in separate threads and we cannot be sure about their", "+\t    \t// definite nullness. Hence, marking as definitely unknown to avoid deferring null check for these fields.", "+\t    \tthis.markAsDefinitelyUnknown(local);", "+\t    \treturn;", "+    \t} else {", "+    \t\tposition = local.getAnalysisId(this.maxFieldCount);", "+    \t}", "-    \tif ((position = local.id + this.maxFieldCount) < BitCacheSize) { // use bits", "+    \tif (position < BitCacheSize) { // use bits"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0c93dfe11fe9710d4322bff87bd7818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void markAsDefinitelyNonNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsDefinitelyNonNull(VariableBinding local)", "diff": ["-public void markAsDefinitelyNonNull(LocalVariableBinding local) {", "+public void markAsDefinitelyNonNull(VariableBinding local) {", "-    \t// position is zero-based", "-    \tif ((position = local.id + this.maxFieldCount) < BitCacheSize) { // use bits", "+    \tif (local instanceof FieldBinding && ((local.modifiers & AccConstant) == AccConstant)) {", "+\t    \t// non-final fields may be modified in separate threads and we cannot be sure about their", "+\t    \t// definite nullness. Hence, marking as definitely unknown to avoid deferring null check for these fields.", "+\t    \tthis.markAsDefinitelyUnknown(local);", "+\t    \treturn;", "+    \t} else {", "+    \t\tposition = local.getAnalysisId(this.maxFieldCount);", "+    \t}", "+    \tif (position < BitCacheSize) { // use bits"]}], "num": 35256}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7245de7d88dbf7f82f732c17da6a2ca8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451321cf7a01e123bc51e7f4385e8f80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "commitAfterChange": "d33b892acebec2bc1c5d62c55db84a184bb6f3b3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t// remaining binding keys are package binding keys or base type binding keys", "+\t\t\t// remaining binding keys", "-\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "-\t\t\t\t", "-\t\t\t\t// pass it to requestor", "-\t\t\t\tif (binding != null)", "-\t\t\t\t\tastRequestor.acceptBinding(((BindingKey) this.requestedKeys.valueTable[j]).getKey(), binding);", "+\t\t\t\tif (compilerBinding != null) {", "+\t\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "+\t\t\t\t\tif (binding != null)", "+\t\t\t\t\t\t// pass it to requestor", "+\t\t\t\t\t\tastRequestor.acceptBinding(((BindingKey) this.requestedKeys.valueTable[j]).getKey(), binding);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53120f9bdb100da441fbd8ff8940e812", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "3a08fd770b03e3c88b38242d730bb44cdf12510f", "commitAfterChange": "98f36961615ebbd60632294a29801d230e0a279c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t\tif (compilerBinding != null) {", "-\t\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "-\t\t\t\t\tif (binding != null)", "-\t\t\t\t\t\t// pass it to requestor", "-\t\t\t\t\t\tastRequestor.acceptBinding(((BindingKeyResolver) this.requestedKeys.valueTable[j]).getKey(), binding);", "-\t\t\t\t}", "+\t\t\t\tIBinding binding = compilerBinding == null ? null : resolver.getBinding(compilerBinding);", "+\t\t\t\t// pass it to requestor", "+\t\t\t\tastRequestor.acceptBinding(((BindingKeyResolver) this.requestedKeys.valueTable[j]).getKey(), binding);"]}], "num": 60865}
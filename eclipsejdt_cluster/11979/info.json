{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c97204c904725881c5c4498eeb54e03c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10505d53319e92e84c2a2dc060833e2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "90c4f87ff9590171c32b9a9ab9aa13acdfe2086c", "commitAfterChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public char[] getCharacters()", "signatureAfterChange": "\r public char[] getCharacters()", "diff": ["-\tif (fContents == null) return null;\r", "-\tsynchronized (fLock) {\r", "-\t\tif (fGapStart < 0) {\r", "-\t\t\treturn fContents;\r", "+\tif (this.contents == null) return null;\r", "+\tsynchronized (this.lock) {\r", "+\t\tif (this.gapStart < 0) {\r", "+\t\t\treturn this.contents;\r", "-\t\tint length = fContents.length;\r", "-\t\tchar[] contents = new char[length - fGapEnd + fGapStart];\r", "-\t\tSystem.arraycopy(fContents, 0, contents, 0, fGapStart);\r", "-\t\tSystem.arraycopy(fContents, fGapEnd, contents, fGapStart, length - fGapEnd);\r", "-\t\treturn contents;\r", "+\t\tint length = this.contents.length;\r", "+\t\tchar[] newContents = new char[length - this.gapEnd + this.gapStart];\r", "+\t\tSystem.arraycopy(this.contents, 0, newContents, 0, this.gapStart);\r", "+\t\tSystem.arraycopy(this.contents, this.gapEnd, newContents, this.gapStart, length - this.gapEnd);\r", "+\t\treturn newContents;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b835314bbf24e04b1ac500893e81f8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "90c4f87ff9590171c32b9a9ab9aa13acdfe2086c", "commitAfterChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public String getText(int offset, int length)", "signatureAfterChange": "\r public String getText(int offset, int length)", "diff": ["-\tif (fContents == null)\r", "+\tif (this.contents == null)\r", "-\tsynchronized (fLock) {\r", "-\t\tif (offset + length < fGapStart)\r", "-\t\t\treturn new String(fContents, offset, length);\r", "-\t\tif (fGapStart < offset) {\r", "-\t\t\tint gapLength = fGapEnd - fGapStart;\r", "-\t\t\treturn new String(fContents, offset + gapLength, length);\r", "+\tsynchronized (this.lock) {\r", "+\t\tif (offset + length < this.gapStart)\r", "+\t\t\treturn new String(this.contents, offset, length);\r", "+\t\tif (this.gapStart < offset) {\r", "+\t\t\tint gapLength = this.gapEnd - this.gapStart;\r", "+\t\t\treturn new String(this.contents, offset + gapLength, length);\r", "-\t\tbuf.append(fContents, offset, fGapStart - offset);\r", "-\t\tbuf.append(fContents, fGapEnd, offset + length - fGapStart);\r", "+\t\tbuf.append(this.contents, offset, this.gapStart - offset);\r", "+\t\tbuf.append(this.contents, this.gapEnd, offset + length - this.gapStart);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "905b74e918930a3f6b24649ba92ee3d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "90c4f87ff9590171c32b9a9ab9aa13acdfe2086c", "commitAfterChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public String getContents()", "signatureAfterChange": "\r public String getContents()", "diff": ["-\tif (fContents == null) return null;\r", "-\tsynchronized (fLock) {\r", "-\t\tif (fGapStart < 0) {\r", "-\t\t\treturn new String(fContents);\r", "+\tif (this.contents == null) return null;\r", "+\tsynchronized (this.lock) {\r", "+\t\tif (this.gapStart < 0) {\r", "+\t\t\treturn new String(this.contents);\r", "-\t\tint length = fContents.length;\r", "-\t\tStringBuffer buffer = new StringBuffer(length - fGapEnd + fGapStart);\r", "-\t\tbuffer.append(fContents, 0, fGapStart);\r", "-\t\tbuffer.append(fContents, fGapEnd, length - fGapEnd);\r", "+\t\tint length = this.contents.length;\r", "+\t\tStringBuffer buffer = new StringBuffer(length - this.gapEnd + this.gapStart);\r", "+\t\tbuffer.append(this.contents, 0, this.gapStart);\r", "+\t\tbuffer.append(this.contents, this.gapEnd, length - this.gapEnd);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91be1083f5baacd2205a8e36e2a513d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 40, "signatureBeforeChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int startPos, String keyword)", "signatureAfterChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "diff": ["-\t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int startPos, String keyword) {", "-\t\t\tfStartPos= startPos;", "-\t\t\tfList= getEvent(parent, property).getChildren();", "+\t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword) {", "+\t\t\tthis.startPos= offset;", "+\t\t\tthis.list= getEvent(parent, property).getChildren();", "-\t\t\tint total= fList.length;", "+\t\t\tint total= this.list.length;", "-\t\t\t\treturn fStartPos;", "+\t\t\t\treturn this.startPos;", "-\t\t\t\tint currMark= fList[i].getChangeKind();", "+\t\t\t\tint currMark= this.list[i].getChangeKind();", "-\t\t\t\t\t\tASTNode elem= (ASTNode) fList[i].getOriginalValue();", "+\t\t\t\t\t\tASTNode elem= (ASTNode) this.list[i].getOriginalValue();", "-\t\t\t\t\tTextEditGroup editGroup= getEditGroup(fList[0]); // first node is insert", "-\t\t\t\t\tdoTextInsert(startPos, keyword, editGroup);", "+\t\t\t\t\tTextEditGroup editGroup= getEditGroup(this.list[0]); // first node is insert", "+\t\t\t\t\tdoTextInsert(offset, keyword, editGroup);", "-\t\t\t\tcurrPos= startPos;", "+\t\t\t\tcurrPos= offset;", "-\t\t\t\tcurrPos= startPos;", "+\t\t\t\tcurrPos= offset;", "-\t\t\t\tRewriteEvent currEvent= fList[i];", "+\t\t\t\tRewriteEvent currEvent= this.list[i];", "-\t\t\t\t\t\t\tif (fList[nextIndex].getChangeKind() != RewriteEvent.INSERTED) {", "+\t\t\t\t\t\t\tif (this.list[nextIndex].getChangeKind() != RewriteEvent.INSERTED) {", "-\t\t\t\t\t} else if (fList[nextIndex].getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\t\t\t} else if (this.list[nextIndex].getChangeKind() != RewriteEvent.UNCHANGED) {"]}], "num": 11979}
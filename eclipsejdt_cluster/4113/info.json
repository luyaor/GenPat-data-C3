{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d3c90d5471d66f62be1746af5e1b3fd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6527f19ddc499e974dfdc4a73894306d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "1cba8a56396c1e9ffabcfc721c511ac9d44ca895", "commitAfterChange": "0b176a9b340c0d1c651b660d321231b763e09212", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["-\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r", "-\r", "+\r", "+\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo, conditionConstant == NotAConstant);\r", "+\r", "-\t\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.initsWhenTrue().unconditionalInits());\r", "-\t\t\t\t\tflowInfo.copy().markAsFakeReachable(true));\r", "+\t\t\t\t\tflowInfo.initsWhenFalse().copy().unconditionalInits().markAsFakeReachable(true));\r", "-\t\t\t\t\tflowInfo.copy().markAsFakeReachable(true));\r", "+\t\t\t\t\tflowInfo.initsWhenTrue().copy().unconditionalInits().markAsFakeReachable(true));\r", "-\t\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.initsWhenFalse().unconditionalInits());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8aa46ae8acd279289b99645cade585f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tConstant inlinedCondition;\r", "-\tif ((inlinedCondition = condition.constant) != NotAConstant) {\r", "-\t\tif (inlinedCondition.booleanValue()) {\r", "+\tConstant inlinedCondition = condition.constant;\r", "+\tif (inlinedCondition == NotAConstant) inlinedCondition = condition.conditionalConstant();\r", "+\tif (inlinedCondition != NotAConstant) {\r", "+\t\tif (inlinedCondition.booleanValue() == true) {\r", "-\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.copy());\r", "+\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r", "-\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.copy());\r", "+\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r"]}], "num": 4113}
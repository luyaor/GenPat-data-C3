{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "304edef0ea54bafed2293ea0f9933c35", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6d38ace7999aa2889a873a94e1b1e34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException", "signatureAfterChange": " \tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException", "diff": ["-\t\tIJavaProject project = this.sourceUnit.getJavaProject();", "-\t\tMap originalOptions = project.getOptions(true);", "+\t\tthis.currentProject = this.sourceUnit.getJavaProject();", "+", "+\t\t// set up java project options", "+\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, this.compilerOption);", "+\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, this.compilerOption);", "+\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, this.compilerOption);", "+\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME, JavaCore.IGNORE);", "+\t\tthis.currentProject.setOption(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, this.docCommentSupport);", "+", "+\t\t// Verify source regardings converted comments", "+\t\tchar[] source = sourceStr.toCharArray();", "+\t\tString fileName = unit.getPath().toString();", "+\t\tverifyComments(fileName, source);", "+\t}", "-\t\ttry {", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, this.compilerOption);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, this.compilerOption);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, this.compilerOption);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME, JavaCore.IGNORE);", "-\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, this.resolveBinding); // resolve bindings", "-\t\t} finally {", "-\t\t\tproject.setOptions(originalOptions);", "-\t\t}", "-\t\t", "-\t\t// Verify source regardings converted comments", "-\t\tchar[] source = sourceStr.toCharArray();", "-\t\tverifyComments(sourceStr, source, unitComments);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab40731d8671a56f8773514ad36d69c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int matchField(FieldBinding field, boolean matchName)", "signatureAfterChange": " protected int matchField(FieldBinding field, boolean matchName)", "diff": ["-\tint typeLevel = resolveLevelForType(fieldPattern.typeSimpleName, fieldPattern.typeQualification, field.type);", "-\t", "-\t\t// SEARCH_15 (frederic) Specific field pattern verification for generics (not fully tested yet...)", "-\t\tif (typeLevel == IMPOSSIBLE_MATCH) {", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t\tTypeBinding typeBinding = field.type;", "-\t\tif (typeBinding != null) {", "-\t\t\tboolean isParameterized = typeBinding.isParameterizedType();", "-\t\t\tboolean isRawType = typeBinding.isRawType();", "-\t\t\tif (fieldPattern.typeNames== null) {", "-\t\t\t\tif (isParameterized && !isRawType) return IMPOSSIBLE_MATCH;", "-\t\t\t} else {", "-\t\t\t\tif (!isParameterized) return IMPOSSIBLE_MATCH;", "-\t\t\t\tParameterizedTypeBinding paramTypeBinding = (ParameterizedTypeBinding) typeBinding;", "-\t\t\t\tif (paramTypeBinding.arguments == null) {", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t\tint length = fieldPattern.typeNames.length;", "-\t\t\t\tif (paramTypeBinding.arguments.length != length) return IMPOSSIBLE_MATCH;", "-\t\t\t\tfor (int i= 0; i<length; i++) {", "-\t\t\t\t\tchar[] argType = fieldPattern.typeNames[i];", "-\t\t\t\t\tTypeBinding argTypeBinding = paramTypeBinding.arguments[i];", "-\t\t\t\t\tif (!CharOperation.equals(argType, argTypeBinding.shortReadableName(), fieldPattern.isCaseSensitive) &&", "-\t\t\t\t\t\t!CharOperation.equals(argType, argTypeBinding.readableName(), fieldPattern.isCaseSensitive)) {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t/* Try to pull-up generics verification in PatternLocator?", "-\t\tint typeLevel = resolveLevelForType(", "-\t\t\t\tfieldPattern.typeSimpleName,", "-\t\t\t\tfieldPattern.typeQualification,", "-\t\t\t\tfieldPattern.typeNames,", "-\t\t\t\tfieldPattern.mustResolve(),", "-\t\t\t\ttrue // parameterized,", "-\t\t\t\tfield.type);", "-\t\t*/", "-\t\t// end", "+\t// get real field binding", "+\tFieldBinding fieldBinding = field;", "+\tif (field instanceof ParameterizedFieldBinding) {", "+\t\tfieldBinding = ((ParameterizedFieldBinding) field).originalField;", "+\t}", "+\tint typeLevel = resolveLevelForType(fieldBinding.type);"]}], "num": 52452}
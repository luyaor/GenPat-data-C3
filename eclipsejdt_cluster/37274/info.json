{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1de1e5e1e0f6c82de66e5b88a1b0125d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c9d430cc9f505f3aa6462eae1833b07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "a0bf175365121b2ce6109fd510a1295aae7ead4c", "commitAfterChange": "bc334d447f9fedc80a94198538b7c7d486280e6a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r public final boolean canBeSeenBy(Scope scope)", "signatureAfterChange": "\r \r public final boolean canBeSeenBy(Scope scope)", "diff": ["+\tif (isProtected()) {\r", "+\t\t// answer true if the invocationType is the declaringClass or they are in the same package\r", "+\t\t// OR the invocationType is a subclass of the declaringClass\r", "+\t\t//    AND the invocationType is the invocationType or its subclass\r", "+\t\t//    OR the type is a static method accessed directly through a type\r", "+\t\t//    OR previous assertions are true for one of the enclosing type\r", "+\t\tif (invocationType.fPackage == fPackage) return true;\r", "+\r", "+\t\tReferenceBinding currentType = invocationType;\r", "+\t\tReferenceBinding declaringClass = enclosingType(); // protected types always have an enclosing one\r", "+\t\tif (declaringClass == null) return false; // could be null if incorrect top-level protected type\r", "+\t\t// int depth = 0;\r", "+\t\tdo {\r", "+\t\t\tif (declaringClass == invocationType) return true;\r", "+\t\t\tif (declaringClass.isSuperclassOf(currentType)) return true;\r", "+\t\t\t// depth++;\r", "+\t\t\tcurrentType = currentType.enclosingType();\r", "+\t\t} while (currentType != null);\r", "+\t\treturn false;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f4030624800a4a24be544983742466b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "a0bf175365121b2ce6109fd510a1295aae7ead4c", "commitAfterChange": "bc334d447f9fedc80a94198538b7c7d486280e6a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r public final boolean canBeSeenBy(ReferenceBinding receiverType, SourceTypeBinding invocationType)", "signatureAfterChange": "\r \r public final boolean canBeSeenBy(ReferenceBinding receiverType, SourceTypeBinding invocationType)", "diff": ["-\t\t// answer true if the invocationType is the receiver (or its enclosingType) or they are in the same package\r", "-\t\t// OR the invocationType is a subclass of the enclosingType\r", "-\t\t//    AND the receiverType is the invocationType or its subclass\r", "+\r", "+\t\t// answer true if the invocationType is the declaringClass or they are in the same package\r", "+\t\t// OR the invocationType is a subclass of the declaringClass\r", "+\t\t//    AND the invocationType is the invocationType or its subclass\r", "+\t\t//    OR the type is a static method accessed directly through a type\r", "+\t\t//    OR previous assertions are true for one of the enclosing type\r", "-\t\tReferenceBinding declaringClass = enclosingType();\r", "-\t\tif (declaringClass != null){ // could be null if incorrect top-level protected type\r", "-\t\t\tif (invocationType == declaringClass) return true;\r", "-\t\t\tif (declaringClass.isSuperclassOf(invocationType))\r", "-\t\t\t\treturn invocationType == receiverType || invocationType.isSuperclassOf(receiverType);\r", "-\t\t}\r", "+\r", "+\t\tReferenceBinding currentType = invocationType;\r", "+\t\tReferenceBinding declaringClass = enclosingType(); // protected types always have an enclosing one\r", "+\t\tif (declaringClass == null) return false; // could be null if incorrect top-level protected type\r", "+\t\t//int depth = 0;\r", "+\t\tdo {\r", "+\t\t\tif (declaringClass == invocationType) return true;\r", "+\t\t\tif (declaringClass.isSuperclassOf(currentType)) return true;\r", "+\t\t\t//depth++;\r", "+\t\t\tcurrentType = currentType.enclosingType();\r", "+\t\t} while (currentType != null);\r"]}], "num": 37274}
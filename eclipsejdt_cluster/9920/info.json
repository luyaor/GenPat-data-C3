{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5e9f372b3deb95896895589035f2402", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16b15ca1f60eef1f32b5f3ce461302f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public int literalIndexForType(final char[] constantPoolName)", "signatureAfterChange": " public int literalIndexForType(final char[] constantPoolName)", "diff": ["-\tint index;", "-\tif ((index = classCache.putIfAbsent(constantPoolName, this.currentIndex)) < 0) {", "-\t\t// The entry doesn't exit yet", "-\t\tthis.currentIndex++;", "-\t\tif ((index = -index) > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\twriteU1(ClassTag);", "+    int index;", "+    if ((index = classCache.putIfAbsent(constantPoolName, this.currentIndex)) < 0) {", "+        // The entry doesn't exit yet", "+        this.currentIndex++;", "+        if ((index = -index) > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+       this.offsets[index] = this.currentOffset;", "+        writeU1(ClassTag);", "-\t\t// Then the name index", "-\t\tint nameIndexOffset = this.currentOffset;", "-\t\tif (currentOffset + 2 >= poolContent.length) {", "-\t\t\tresizePoolContents(2);", "-\t\t}", "-\t\tcurrentOffset+=2;", "-\t\tfinal int nameIndex = literalIndex(constantPoolName);", "-\t\tpoolContent[nameIndexOffset++] = (byte) (nameIndex >> 8);", "-\t\tpoolContent[nameIndexOffset] = (byte) nameIndex;", "-\t}", "-\treturn index;", "+        // Then the name index", "+        int nameIndexOffset = this.currentOffset;", "+        if (currentOffset + 2 >= poolContent.length) {", "+            resizePoolContents(2);", "+        }", "+        currentOffset+=2;", "+        final int nameIndex = literalIndex(constantPoolName);", "+        poolContent[nameIndexOffset++] = (byte) (nameIndex >> 8);", "+        poolContent[nameIndexOffset] = (byte) nameIndex;", "+    }", "+    return index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4892f6a4e0cac17826b63f99699c74d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int literalIndex(char[] stringCharArray, byte[] utf8encoding)", "signatureAfterChange": " public int literalIndex(char[] stringCharArray, byte[] utf8encoding)", "diff": ["-\tint index;", "-\tif ((index = stringCache.putIfAbsent(stringCharArray, this.currentIndex)) < 0) {", "-\t\t// The entry doesn't exit yet", "-\t\tthis.currentIndex++;", "-\t\tif ((index = -index) > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\t// Write the tag first", "-\t\twriteU1(StringTag);", "-\t\t// Then the string index", "-\t\tint stringIndexOffset = this.currentOffset;", "-\t\tif (currentOffset + 2 >= poolContent.length) {", "-\t\t\tresizePoolContents(2);", "-\t\t}", "-\t\tcurrentOffset+=2;", "+    int index;", "+    if ((index = stringCache.putIfAbsent(stringCharArray, this.currentIndex)) < 0) {", "+        // The entry doesn't exit yet", "+        this.currentIndex++;", "+        if ((index = -index) > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        // Write the tag first", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(StringTag);", "+        // Then the string index", "+        int stringIndexOffset = this.currentOffset;", "+        if (currentOffset + 2 >= poolContent.length) {", "+            resizePoolContents(2);", "+        }", "+        currentOffset+=2;", "-\t\tfinal int stringIndex = literalIndex(utf8encoding, stringCharArray);", "-\t\tpoolContent[stringIndexOffset++] = (byte) (stringIndex >> 8);", "-\t\tpoolContent[stringIndexOffset] = (byte) stringIndex;", "-\t}", "-\treturn index;", "+        final int stringIndex = literalIndex(utf8encoding, stringCharArray);", "+        poolContent[stringIndexOffset++] = (byte) (stringIndex >> 8);", "+        poolContent[stringIndexOffset] = (byte) stringIndex;", "+    }", "+    return index;"]}], "num": 9920}
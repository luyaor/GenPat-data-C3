{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5d5a3337aa44724d0d8bd60e9c1a467", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21b3b3ea24645c00610a0f15663770ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5e4ea8ac03b51c08067ab35c8af60e3999ca1301", "commitAfterChange": "aaea57f144ce91db666531c49de57c996bd81422", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " private int resetScannerAfterLastTypeArgumentEnd(TypeReference typeRef, Scanner scanner, int depth)", "signatureAfterChange": " private long findLastTypeArgumentInfo(TypeReference typeRef)", "diff": ["-private int resetScannerAfterLastTypeArgumentEnd(TypeReference typeRef, Scanner scanner, int depth) {", "-\t// Default end is current type argument end", "-\tint end = typeRef.sourceEnd;", "+private long findLastTypeArgumentInfo(TypeReference typeRef) {", "-\tTypeReference[] typeArguments = null;", "-\tif (typeRef instanceof ParameterizedQualifiedTypeReference) {", "-\t\tParameterizedQualifiedTypeReference pqtRef = (ParameterizedQualifiedTypeReference) typeRef;", "-\t\tTypeReference[] last = null;", "-\t\tfor (int i=pqtRef.typeArguments.length-1; i>=0 && last==null; i--) {", "-\t\t\tlast = pqtRef.typeArguments[i];", "+\tTypeReference lastTypeArgument = typeRef;", "+\tint depth = 0;", "+\twhile (true) {", "+\t\tTypeReference[] lastTypeArguments = null;", "+\t\tif (lastTypeArgument instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference pqtRef = (ParameterizedQualifiedTypeReference) lastTypeArgument;", "+\t\t\tfor (int i=pqtRef.typeArguments.length-1; i>=0 && lastTypeArguments==null; i--) {", "+\t\t\t\tlastTypeArguments = pqtRef.typeArguments[i];", "+\t\t\t}", "-\t\t// If no children arguments then current type reference is the last type argument", "-\t\tif (last == null) {", "-\t\t\tscanner.resetTo(end+1, scanner.eofPosition-1);", "-\t\t\treturn depth;", "-\t\t}", "-\t\ttypeArguments = last;", "-\t}", "-\t// Get last type argument for single type reference of last list of argument of parameterized qualified type reference", "-\tif (typeRef instanceof ParameterizedSingleTypeReference || typeArguments != null) {", "-\t\tif (typeArguments == null) {", "-\t\t\ttypeArguments = ((ParameterizedSingleTypeReference)typeRef).typeArguments;", "-\t\t}", "+\t\t// Get last type argument for single type reference of last list of argument of parameterized qualified type reference", "-\t\tfor (int i=typeArguments.length-1; i>=0 && last==null; i++) {", "-\t\t\tlast = typeArguments[i];", "+\t\tif (lastTypeArgument instanceof ParameterizedSingleTypeReference || lastTypeArguments != null) {", "+\t\t\tif (lastTypeArguments == null) {", "+\t\t\t\tlastTypeArguments = ((ParameterizedSingleTypeReference)lastTypeArgument).typeArguments;", "+\t\t\t}", "+\t\t\tfor (int i=lastTypeArguments.length-1; i>=0 && last==null; i++) {", "+\t\t\t\tlast = lastTypeArguments[i];", "+\t\t\t}", "-\t\t// If no child argument then current type reference is the last type argument", "-\t\tif (last == null) {", "-\t\t\tscanner.resetTo(end+1, scanner.eofPosition-1);", "-\t\t\treturn depth;", "-\t\t}", "-\t\t// Loop on last type argument to find its last type argument...", "-\t\treturn resetScannerAfterLastTypeArgumentEnd(last, scanner, depth+1);", "+\t\tif (last == null) break;", "+\t\tdepth++;", "+\t\tlastTypeArgument = last;", "-\tscanner.resetTo(end+1, scanner.eofPosition-1);", "-\treturn depth;", "+//\tif (depth == 0) return 0;", "+\treturn (((long) depth) << 32) + lastTypeArgument.sourceEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355003a257ad0c919f3b5331716f5397", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "030558e3600e0a604bc6dac35a883b52ac0c5446", "commitAfterChange": "20a2fc3a8fdc6d3e237f88ae81c19fcd38d96cb4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tcheckParameterizedAllocation: {", "+\t\tif (this.type instanceof ParameterizedQualifiedTypeReference) { // disallow new X<String>.Y<Integer>()", "+\t\t\tReferenceBinding currentType = (ReferenceBinding)this.resolvedType;", "+\t\t\tif (currentType == null) return currentType;", "+\t\t\tdo {", "+\t\t\t\t// isStatic() is answering true for toplevel types", "+\t\t\t\tif ((currentType.modifiers & ClassFileConstants.AccStatic) != 0) break checkParameterizedAllocation;", "+\t\t\t\tif (currentType.isRawType()) break checkParameterizedAllocation;", "+\t\t\t} while ((currentType = currentType.enclosingType())!= null);", "+\t\t\tParameterizedQualifiedTypeReference qRef = (ParameterizedQualifiedTypeReference) this.type;", "+\t\t\tfor (int i = qRef.typeArguments.length - 2; i >= 0; i--) {", "+\t\t\t\tif (qRef.typeArguments[i] != null) {", "+\t\t\t\t\tscope.problemReporter().illegalQualifiedParameterizedTypeAllocation(this.type, this.resolvedType);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t// resolve type arguments (for generic constructor call)", "+\tif (this.typeArguments != null) {", "+\t\tint length = this.typeArguments.length;", "+\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "+\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeReference typeReference = this.typeArguments[i];", "+\t\t\tif ((this.genericTypeArguments[i] = typeReference.resolveType(scope, true /* check bounds*/)) == null) {", "+\t\t\t\targHasError = true;", "+\t\t\t}", "+\t\t\tif (argHasError && typeReference instanceof Wildcard) {", "+\t\t\t\tscope.problemReporter().illegalUsageOfWildcard(typeReference);", "+\t\t\t}", "+\t\t}", "+\t\tif (argHasError) {", "+\t\t\tif (this.arguments != null) { // still attempt to resolve arguments", "+\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}", "+\t}", "-\t\t    TypeBinding parameterType = this.binding.parameters[i];", "-\t\t    TypeBinding argumentType = argumentTypes[i];", "+\t\t\tTypeBinding parameterType = this.binding.parameters[i];", "+\t\t\tTypeBinding argumentType = argumentTypes[i];", "-\t    scope.problemReporter().unsafeRawInvocation(this, this.binding);", "+\t\tscope.problemReporter().unsafeRawInvocation(this, this.binding);", "+\t}", "+\tif (this.typeArguments != null && this.binding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this.binding, this.genericTypeArguments, this.typeArguments);"]}], "num": 19617}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29d4024ca3bd72589b908c0d8ff91b8a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3abbed962eb42fd080668c822c42c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4412fcf3d168e3c5cc3b92c0b70e5bcf2376f3fc", "commitAfterChange": "8bf9953e1351888d8d186166d8f2000b15a08f07", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "diff": ["-public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException {", "+public void locateMatches(SearchDocument[] searchDocuments) throws CoreException {", "-\t\t\ttry {", "-\t\t\t\tJavaProject javaProject = (JavaProject) openable.getJavaProject();", "-\t\t\t\tresource = workingCopy != null ? workingCopy.getResource() : openable.getResource();", "-\t\t\t\tif (resource == null)", "-\t\t\t\t\tresource = javaProject.getProject(); // case of a file in an external jar", "-\t\t\t\tif (!javaProject.equals(previousJavaProject)) {", "-\t\t\t\t\t// locate matches in previous project", "-\t\t\t\t\tif (previousJavaProject != null) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\tif (e.getException() instanceof CoreException) throw e;", "-\t\t\t\t\t\t\t// problem with classpath in this project -> skip it", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tmatchSet.reset();", "+\t\t\tJavaProject javaProject = (JavaProject) openable.getJavaProject();", "+\t\t\tresource = workingCopy != null ? workingCopy.getResource() : openable.getResource();", "+\t\t\tif (resource == null)", "+\t\t\t\tresource = javaProject.getProject(); // case of a file in an external jar", "+\t\t\tif (!javaProject.equals(previousJavaProject)) {", "+\t\t\t\t// locate matches in previous project", "+\t\t\t\tif (previousJavaProject != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// problem with classpath in this project -> skip it", "-\t\t\t\t\tpreviousJavaProject = javaProject;", "+\t\t\t\t\tmatchSet.reset();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// file doesn't exist -> skip it", "-\t\t\t\tcontinue;", "+\t\t\t\tpreviousJavaProject = javaProject;", "-\t\t\t\tif (e.getException() instanceof CoreException) throw e;", "-\t\t\t\t// problem with classpath in last project -> skip it", "+\t\t\t\t// problem with classpath in last project -> ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9eeae7300cc56c69d499f518261e186", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "diff": ["-\tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException {", "+\tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) {", "-\t\t\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "-\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){", "-\t\t\t\t\t\t\tif (classpath[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "-\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[j].getPath());", "+\t\t\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){", "+\t\t\t\t\t\t\t\tif (classpath[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "+\t\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[j].getPath());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// project doesn't exist -> ignore", "-\t\t\t\t\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t\t\t\t\tIJavaProject[] projects;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tprojects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t\t\t\t\t} catch (JavaModelException e1) {", "+\t\t\t\t\t\t\t// cannot retrieve old projects list -> ignore", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t\t\t\t} catch (JavaModelException e2) {", "+\t\t\t\t\t\t\t\t// project doesn't exist -> ignore", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "-\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\tIJavaProject[] projects;", "+\t\ttry {", "+\t\t\tprojects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// cannot retrieve old projects list -> give up", "+\t\t\treturn false;", "+\t\t}", "-\t\t\tIClasspathEntry[] entries = project.getResolvedClasspath(true);", "+\t\t\tIClasspathEntry[] entries;", "+\t\t\ttry {", "+\t\t\t\tentries = project.getResolvedClasspath(true);", "+\t\t\t} catch (JavaModelException e1) {", "+\t\t\t\t// project does not exist -> ignore", "+\t\t\t\tcontinue;", "+\t\t\t}"]}], "num": 71159}
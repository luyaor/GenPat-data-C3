{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8d17660e12371e0ba0d624d7d1e230a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57169e9ed70d489e7a1d848f0463d902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "da50a11f1737dbee3925e1da64ad7f9cbaff2e84", "commitAfterChange": "99342a278896e2f8caf142911ce817f7cc97d106", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "diff": ["+\t\t\t\t\t\t\t\r", "+\t\t\t\t\tif (method.declaringClass.isInterface())\r", "+\t\t\t\t\t\tif(otherMethod\r", "+\t\t\t\t\t\t\t.declaringClass\r", "+\t\t\t\t\t\t\t.implementsInterface(method.declaringClass,true))\r", "+\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\tcompletion.append(method.returnType.sourceName());\r", "+\t\t\t\tchar[] returnPackageName = method.returnType.qualifiedPackageName();\r", "+\t\t\t\tchar[] returnTypeName = CharOperation.concat(returnPackageName,method.returnType.qualifiedSourceName(),'.') ;\r", "+\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.', returnPackageName), returnTypeName)) {\r", "+\t\t\t\t\tcompletion.append(returnTypeName);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcompletion.append(method.returnType.sourceName());\r", "+\t\t\t\t}\r", "-\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',parameterPackageNames[i]), parameterTypeNames[i])){\r", "-\t\t\t\t\t\tcompletion.append(parameterPackageNames[i]);\r", "-\t\t\t\t\t\tcompletion.append('.');\r", "+\t\t\t\t\tchar[] completeParameterTypeName = CharOperation.concat(parameterPackageNames[i], parameterTypeNames[i], '.');\r", "+\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',parameterPackageNames[i]), completeParameterTypeName)){\r", "+\t\t\t\t\t\tcompletion.append(completeParameterTypeName);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tcompletion.append(parameterTypeNames[i]);\r", "-\t\t\t\t\tcompletion.append(parameterTypeNames[i]);\r", "-\t\t\t\tint exceptionCount =0;\r", "-\t\t\t\tif (exceptions != null && (( exceptionCount = exceptions.length) > 0)){\r", "+\t\t\t\t\r", "+\t\t\t\tif (exceptions != null && exceptions.length > 0){\r", "-\t\t\t\t\tfor(int i = 0; i < exceptionCount ; i++){\r", "+\t\t\t\t\tfor(int i = 0; i < exceptions.length ; i++){\r", "-\t\t\t\t\t\tchar[] typeName = exception.qualifiedSourceName();\r", "-\t\t\t\t\t\tchar[] packageName = exception.qualifiedPackageName();\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',packageName), typeName)){\r", "-\t\t\t\t\t\t\tcompletion.append(packageName);\r", "-\t\t\t\t\t\t\tcompletion.append('.');\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tcompletion.append(typeName);\r", "+\r", "+\t\t\t\t\t\tchar[] exceptionPackageName = exception.qualifiedPackageName();\r", "+\t\t\t\t\t\tchar[] exceptionTypeName = CharOperation.concat(exceptionPackageName, exception.qualifiedSourceName());\r", "-\t\t\t\t\t\tif(i != (exceptionCount - 1)){\r", "+\t\t\t\t\t\tif(i != 0){\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif(mustQualifyType(CharOperation.splitOn('.',exceptionPackageName), exceptionTypeName)){\r", "+\t\t\t\t\t\t\tcompletion.append(exceptionTypeName);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tcompletion.append(exception.sourceName());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e9ed3b9e1ff82446e9e8c1e03cf1bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9afcaef5b1b73c3a14828e7dccbe0110d44ea231", "commitAfterChange": "5e5f07a50788a9cd796e088f2ae54e3dae53d5cf", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["-\t\t\t\tfor (int i = 0; i <= expectedTypesPtr; i++) {", "+\t\t\t\tnext : for (int i = 0; i <= expectedTypesPtr; i++) {", "+\t\t\t\t\t\t\tchar[] packageName = refBinding.qualifiedPackageName();", "+\t\t\t\t\t\t\tchar[] typeName = refBinding.sourceName();", "+\t\t\t\t\t\t\tchar[] completionName = typeName;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (!insideQualifiedReference && !refBinding.isMemberType()) {", "+\t\t\t\t\t\t\t\tif (mustQualifyType(packageName, typeName)) {", "+\t\t\t\t\t\t\t\t\tif (packageName == null || packageName.length == 0)", "+\t\t\t\t\t\t\t\t\t\tif (unitScope != null && unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "+\t\t\t\t\t\t\t\t\t\t\tcontinue next; // ignore types from the default package from outside it", "+\t\t\t\t\t\t\t\t\tcompletionName = CharOperation.concat(packageName, typeName, '.');", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\trelevance += R_CASE + R_EXPECTED_TYPE;", "+\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(token, typeName);", "+\t\t\t\t\t\t\trelevance += computeRelevanceForExpectingType(refBinding);", "+\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\trefBinding.qualifiedPackageName(),", "-\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "-\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\t\t\tcompletionName,", "-\t\t\t\t\t\t\t\t\trefBinding.qualifiedPackageName(),", "-\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "-\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\t\t\tcompletionName,"]}], "num": 29239}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e00d40939c525ed3f5307b267a64410d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e156167c9b12489822583de144d981", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public void computeId()", "signatureAfterChange": "  public void computeId()", "diff": ["-\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ASSERTIONERROR[2]))", "-\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAssertionError;", "+\t\t\t\t\tswitch(typeName.length) {", "+\t\t\t\t\t\tcase 13 :", "+\t\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_AUTOCLOSEABLE[2]))", "+\t\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAutoCloseable;", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tcase 14:", "+\t\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ASSERTIONERROR[2]))", "+\t\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAssertionError;", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\t\tcase 11 :", "+\t\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_SAFEVARARGS[2]))", "+\t\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangSafeVarargs;", "+\t\t\t\t\t\t\treturn;", "-\t\t\tif (!CharOperation.equals(TypeConstants.LANG, this.compoundName[1]))", "-\t\t\t\treturn;", "+\t\t\tpackageName = this.compoundName[1];", "+\t\t\tif (packageName.length == 0) return; // just to be safe", "+", "+\t\t\t\tcase 'i':", "+\t\t\t\t\tif (CharOperation.equals(packageName, TypeConstants.INVOKE)) {", "+\t\t\t\t\t\tif (typeName.length == 0) return; // just to be safe", "+\t\t\t\t\t\tswitch (typeName[0]) {", "+\t\t\t\t\t\t\tcase 'M' :", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE[3]))", "+\t\t\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangInvokeMethodHandlePolymorphicSignature;", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn;", "+\t\tcase 5 :", "+\t\t\tif (!CharOperation.equals(TypeConstants.JAVA, this.compoundName[0]))", "+\t\t\t\treturn;", "+\t\t\tpackageName = this.compoundName[1];", "+\t\t\tif (packageName.length == 0) return; // just to be safe", "+", "+\t\t\tif (CharOperation.equals(TypeConstants.LANG, packageName)) {", "+\t\t\t\tpackageName = this.compoundName[2];", "+\t\t\t\tif (packageName.length == 0) return; // just to be safe", "+\t\t\t\tswitch (packageName[0]) {", "+\t\t\t\t\tcase 'i' :", "+\t\t\t\t\t\tif (CharOperation.equals(packageName, TypeConstants.INVOKE)) { ", "+\t\t\t\t\t\t\ttypeName = this.compoundName[3];", "+\t\t\t\t\t\t\tif (typeName.length == 0) return; // just to be safe", "+\t\t\t\t\t\t\tswitch (typeName[0]) {", "+\t\t\t\t\t\t\t\tcase 'M' :", "+\t\t\t\t\t\t\t\t\tchar[] memberTypeName = this.compoundName[4];", "+\t\t\t\t\t\t\t\t\tif (memberTypeName.length == 0) return; // just to be safe", "+\t\t\t\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_POLYMORPHICSIGNATURE[3])", "+\t\t\t\t\t\t\t\t\t\t\t&& CharOperation.equals(memberTypeName, TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_POLYMORPHICSIGNATURE[4]))", "+\t\t\t\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangInvokeMethodHandlePolymorphicSignature;", "+\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbfa6c18d4cdc0ac119f00da6974aaa3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprotected boolean mustQualifyType( \t\tchar[] packageName, \t\tchar[] typeName)", "signatureAfterChange": " \t \tprotected boolean mustQualifyType( \t\tchar[] packageName, \t\tchar[] typeName, \t\tchar[] enclosingTypeNames, \t\tint modifiers)", "diff": ["+\t", "-\t\tchar[] typeName) {", "+\t\tchar[] typeName,", "+\t\tchar[] enclosingTypeNames,", "+\t\tint modifiers) {", "-\t\t\t", "-\t\tchar[][] compoundPackageName = CharOperation.splitOn('.', packageName);", "-\t\tchar[] readableTypeName = CharOperation.concat(packageName, typeName, '.');", "-", "-\t\tif (CharOperation.equals(unitScope.fPackage.compoundName, compoundPackageName))", "+\t\t", "+\t\tif(!this.importCachesInitialized) {", "+\t\t\tthis.initializeImportCaches();", "+\t\t}", "+\t\t", "+\t\tchar[] fullyQualifiedTypeName = null;", "+\t\t", "+\t\tfor (int i = 0; i < this.importCacheCount; i++) {", "+\t\t\tchar[][] importName = this.importsCache[i];", "+\t\t\tif(CharOperation.equals(typeName, importName[0])) {", "+\t\t\t\tif (fullyQualifiedTypeName == null) {", "+\t\t\t\t\tfullyQualifiedTypeName =", "+\t\t\t\t\t\tenclosingTypeNames == null || enclosingTypeNames.length == 0", "+\t\t\t\t\t\t\t\t? CharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\t\t\t\t'.')", "+\t\t\t\t\t\t\t\t: CharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\t\t\tenclosingTypeNames,", "+\t\t\t\t\t\t\t\t\t\t\t'.'),", "+\t\t\t\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\t\t\t\t'.');", "+\t\t\t\t}", "+\t\t\t\treturn !CharOperation.equals(fullyQualifiedTypeName, importName[1]);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif ((enclosingTypeNames == null || enclosingTypeNames.length == 0 ) && CharOperation.equals(this.currentPackageName, packageName))", "-", "-\t\tImportBinding[] imports = unitScope.imports;", "-\t\tif (imports != null){", "-\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "-\t\t\t\tif (imports[i].onDemand) {", "-\t\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {", "-\t\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {", "-\t\t\t\t\t\t\tif(i != j){", "-\t\t\t\t\t\t\t\tif(imports[j].onDemand) {", "-\t\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){", "-\t\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)", "-\t\t\t\t\t\t\t\t\t\t&& !CharOperation.equals(imports[j].compoundName, CharOperation.splitOn('.', readableTypeName))) {", "-\t\t\t\t\t\t\t\t\t\treturn true;\t", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "+\t\t", "+\t\tchar[] fullyQualifiedEnclosingTypeName = null;", "+\t\t", "+\t\tfor (int i = 0; i < this.onDemandImportCacheCount; i++) {", "+\t\t\tImportBinding importBinding = this.onDemandImportsCache[i];", "+\t\t\tBinding resolvedImport = importBinding.resolvedImport;", "+\t\t\t", "+\t\t\tchar[][] importName = importBinding.compoundName;", "+\t\t\tchar[] importFlatName = CharOperation.concatWith(importName, '.');", "+\t\t\t", "+\t\t\tboolean isFound = false;", "+\t\t\t// resolvedImport is a ReferenceBindng or a PackageBinding", "+\t\t\tif(resolvedImport instanceof ReferenceBinding) {", "+\t\t\t\tif(enclosingTypeNames != null && enclosingTypeNames.length != 0) {", "+\t\t\t\t\tif(fullyQualifiedEnclosingTypeName == null) {", "+\t\t\t\t\t\tfullyQualifiedEnclosingTypeName =", "+\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\tenclosingTypeNames,", "+\t\t\t\t\t\t\t\t\t'.');", "+\t\t\t\t\t}", "+\t\t\t\t\tif(CharOperation.equals(fullyQualifiedEnclosingTypeName, importFlatName)) {", "+\t\t\t\t\t\tif(importBinding.isStatic()) {", "+\t\t\t\t\t\t\tisFound = (modifiers & IConstants.AccStatic) != 0;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tisFound = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif(enclosingTypeNames == null || enclosingTypeNames.length == 0) {", "+\t\t\t\t\tif(CharOperation.equals(packageName, importFlatName)) {", "+\t\t\t\t\t\tif(importBinding.isStatic()) {", "+\t\t\t\t\t\t\tisFound = (modifiers & IConstants.AccStatic) != 0;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tisFound = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// find potential conflict with another import", "+\t\t\tif(isFound) {", "+\t\t\t\tfor (int j = 0; j < this.onDemandImportCacheCount; j++) {", "+\t\t\t\t\tif(i != j) {", "+\t\t\t\t\t\tImportBinding conflictingImportBinding = this.onDemandImportsCache[j];", "+\t\t\t\t\t\tif(conflictingImportBinding.resolvedImport instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tReferenceBinding refBinding =", "+\t\t\t\t\t\t\t\t(ReferenceBinding) conflictingImportBinding.resolvedImport;", "+\t\t\t\t\t\t\tif (refBinding.getMemberType(typeName) != null) {", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tchar[] conflictingImportName =", "+\t\t\t\t\t\t\t\tCharOperation.concatWith(conflictingImportBinding.compoundName, '.');", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (this.nameEnvironment.nameLookup.findType(", "+\t\t\t\t\t\t\t\t\tString.valueOf(typeName),", "+\t\t\t\t\t\t\t\t\tString.valueOf(conflictingImportName),", "+\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\tNameLookup.ACCEPT_ALL) != null) {", "+\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn false; // how do you match p1.p2.A.* ?", "-\t", "-\t\t\t\t} else", "-\t", "-\t\t\t\t\tif (CharOperation.equals(imports[i].readableName(), readableTypeName)) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn false;"]}], "num": 36231}
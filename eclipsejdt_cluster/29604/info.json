{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aeaf48bec1798310a3c792cca6200a0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a3d6d772e226332650290265afd7571", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tpublic void handleLineTooLong()", "signatureAfterChange": "  \tpublic void handleLineTooLong()", "diff": ["+\t\tint previousKind = -1;", "+\t\tboolean insideMessageArguments = false;", "+\t\tboolean insideMessageSend = false;", "-\t\t\tif (targetAlignment.tieBreakRule == Alignment.R_OUTERMOST && targetAlignment.couldBreak()){", "+\t\t\tboolean couldBreak = targetAlignment.tieBreakRule == Alignment.R_OUTERMOST ||", "+\t\t\t\t((insideMessageArguments || insideMessageSend) && targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS", "+\t\t\t\t\t\t&& (!targetAlignment.wasReset() || previousKind != Alignment.MESSAGE_SEND));", "+\t\t\tif (couldBreak && targetAlignment.couldBreak()){", "+\t\t\tswitch (targetAlignment.kind) {", "+\t\t\t\tcase Alignment.MESSAGE_ARGUMENTS:", "+\t\t\t\t\tinsideMessageArguments = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Alignment.MESSAGE_SEND:", "+\t\t\t\t\tinsideMessageSend = true;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tpreviousKind = targetAlignment.kind;", "-\t\twhile (targetAlignment != null){", "-\t\t\tif (targetAlignment.couldBreak()){", "-\t\t\t\tthrow new AlignmentException(AlignmentException.LINE_TOO_LONG, relativeDepth);", "+\t\tAlignmentException alignmentException = null;", "+\t\tint msgArgsDepth = -1;", "+\t\twhile (targetAlignment != null) {", "+\t\t\tif (targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS) {", "+\t\t\t\tmsgArgsDepth = relativeDepth;", "+\t\t\t}", "+\t\t\tif (alignmentException == null) {", "+\t\t\t\tif (targetAlignment.couldBreak()) {", "+\t\t\t\t\t// do not throw the exception immediately to have a chance to reset", "+\t\t\t\t\t// previously broken alignments (see bug 203588)", "+\t\t\t\t\talignmentException = new AlignmentException(AlignmentException.LINE_TOO_LONG, relativeDepth);", "+\t\t\t\t}", "+\t\t\t} else if (targetAlignment.wasSplit) {", "+\t\t\t\t// reset the nearest already broken outermost alignment.", "+\t\t\t\t// Note that it's not done twice to avoid infinite loop while raising", "+\t\t\t\t// the exception on an innermost alignment...", "+\t\t\t\tif (!targetAlignment.wasReset()) {", "+\t\t\t\t\ttargetAlignment.reset();", "+\t\t\t\t\tif (msgArgsDepth > alignmentException.relativeDepth) {", "+\t\t\t\t\t\talignmentException.relativeDepth = msgArgsDepth;", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow alignmentException;", "+\t\t\t\t}", "+\t\tif (alignmentException != null) {", "+\t\t\tthrow alignmentException;", "+\t\t}", "+\t\tif (this.currentAlignment != null) {", "+\t\t\tthis.currentAlignment.blockAlign = false;", "+\t\t\tthis.currentAlignment.tooLong = true;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22e1e7f2da707876695ae8e288d2538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "de85d73a10e0280a45c9d9fcbbd2b35068e06127", "commitAfterChange": "df9615ffbbc7235a218c4e9aa88ba85075714875", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tthis.parentScope = blockScope;", "+\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "+\t\t\tif (this.body instanceof Block) {", "+\t\t\t\t// Gather shape information for potential applicability analysis.", "+\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\tboolean valueReturnSeen = false;", "+\t\t\t\t\tboolean voidReturnSeen = false;", "+\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {", "+\t\t\t\t\t\tif (returnStatement.expression != null) {", "+\t\t\t\t\t\t\tthis.valueReturnSeen = true;", "+\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = false;", "+\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = !this.voidReturnSeen;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.voidReturnSeen = true;", "+\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = false;", "+\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = !this.valueReturnSeen;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t};", "+\t\t\t\tthis.traverse(visitor, blockScope);", "+\t\t\t} else {", "+\t\t\t\tExpression expression = (Expression) this.body;", "+\t\t\t\tthis.voidCompatible = expression.statementExpression();", "+\t\t\t\tthis.valueCompatible = true;", "+\t\t\t}\t", "+\t\t\tif (devNullCompilationResult == null)", "+\t\t\t\tdevNullCompilationResult = new CompilationResult(this.compilationResult.getCompilationUnit(), 0, 0, blockScope.compilerOptions().maxProblemsPerUnit);", "+\t\t\treturn new PolyTypeBinding(this);", "+\t\t}"]}], "num": 29604}
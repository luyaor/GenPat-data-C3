{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61acae3b9ee3a4d1c5ba2422480a647e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "977260f5c3b0df4bc187e9dd62fe19e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1c3298c6e059e091058be85e5c193be4f3e2bb5c", "commitAfterChange": "1604c4cb884aee860a1cc5ef654a628a5e36afd0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic java.io.File getGeneratedOutputFile( IJavaProject jp ) \t\t throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic java.io.File getGeneratedSourceFolderOutputLocation() \t\t throws JavaModelException", "diff": ["-\t// TODO - change this to return an IFolder", "-\tpublic java.io.File getGeneratedOutputFile( IJavaProject jp )", "-\t\t throws JavaModelException, CoreException", "+\t */", "+\tpublic java.io.File getGeneratedSourceFolderOutputLocation()", "+\t\t throws JavaModelException ", "-\t\t\tIClasspathEntry cpe = findProjectSourcePath( jp, f, null );", "+\t\t\tIClasspathEntry cpe = findProjectSourcePath( _javaProject, f, null );", "-\t\t\toutputRoot = jp.getOutputLocation();", "+\t\t\toutputRoot = _javaProject.getOutputLocation();", "-\t\tint segments = outputRoot.matchingFirstSegments( jp.getPath() );", "+\t\tint segments = outputRoot.matchingFirstSegments( _javaProject.getPath() );", "-\t\tIPath projectRoot = jp.getProject().getRawLocation();", "+\t\tIPath projectRoot = _javaProject.getProject().getRawLocation();", "-\t\t\tprojectRoot = jp.getProject().getLocation();", "+\t\t\tprojectRoot = _javaProject.getProject().getLocation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb943933ec5d29bab77cb9475b900e19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "be1ab5866130739e4d5dea6be597450bab4d9fe1", "commitAfterChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic java.io.File getGeneratedSourceFolderOutputLocation() \t\t throws JavaModelException", "signatureAfterChange": " \tpublic IPath getGeneratedSourceFolderOutputLocation() \t\t throws JavaModelException", "diff": ["-\tpublic java.io.File getGeneratedSourceFolderOutputLocation()", "+\tpublic IPath getGeneratedSourceFolderOutputLocation()", "-\t\tIPath outputRoot = null;", "-\t\tIFolder f = getGeneratedSourceFolder();", "-\t\tif ( f != null && f.exists() )", "+\t\tIPath outputRootPath = null;", "+\t\tIFolder generatedSourceFolder = getGeneratedSourceFolder();", "+\t\tif ( generatedSourceFolder != null && generatedSourceFolder.exists() )", "-\t\t\tIClasspathEntry cpe = findProjectSourcePath( _javaProject, f );", "+\t\t\tIClasspathEntry cpe = findProjectSourcePath( _javaProject, generatedSourceFolder );", "-\t\t\t\toutputRoot = cpe.getOutputLocation();", "+\t\t\t\toutputRootPath = cpe.getOutputLocation();", "-\t\tif ( outputRoot == null )", "-\t\t\toutputRoot = _javaProject.getOutputLocation();", "+\t\tif ( outputRootPath == null )", "+\t\t\toutputRootPath = _javaProject.getOutputLocation();", "-\t\tint segments = outputRoot.matchingFirstSegments( _javaProject.getPath() );", "-\t\toutputRoot = outputRoot.removeFirstSegments( segments );", "+\t\tint segments = outputRootPath.matchingFirstSegments( _javaProject.getPath() );", "+\t\toutputRootPath = outputRootPath.removeFirstSegments( segments );", "-\t\t// TODO - use getRawLocation() or getLocation()?  sometimes getRawLocation() returns null.  Investigate", "-\t\tIPath projectRoot = _javaProject.getProject().getRawLocation();", "-\t\tif ( projectRoot == null )", "-\t\t\tprojectRoot = _javaProject.getProject().getLocation();", "+\t\t// Now get the absolute path by prepending the project's path", "+\t\tIProject project = _javaProject.getProject();", "+\t\tIPath projectRoot = project.getLocation();", "+\t\toutputRootPath = projectRoot.append(outputRootPath);", "-\t\tjava.io.File file = projectRoot.toFile();", "-\t\tfile = new java.io.File( file, outputRoot.toFile().getPath() );", "-\t\treturn file;\t", "+\t\treturn outputRootPath;"]}], "num": 27335}
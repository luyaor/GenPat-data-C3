{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00634519599c24c23e8d7be12ef5f6b3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b312e4e9c8a426d9511dcc44d0ee2239", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 61, "signatureBeforeChange": "  void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "signatureAfterChange": "  void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "diff": ["-\t// walk all the unique collections & replace the unresolvedType with the resolvedType", "-\t// must prevent 2 entries so == still works (1 containing the unresolvedType and the other containing the resolvedType)", "-\tif (this.uniqueParameterizedTypeBindings.get(unresolvedType) != null) { // update the key", "-\t\tObject[] keys = this.uniqueParameterizedTypeBindings.keyTable;", "-\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "-\t\t\tif (keys[i] == unresolvedType) {", "-\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works - cannot be raw since type of parameterized type", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (this.uniqueRawTypeBindings.get(unresolvedType) != null) { // update the key", "-\t\tObject[] keys = this.uniqueRawTypeBindings.keyTable;", "-\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "-\t\t\tif (keys[i] == unresolvedType) {", "-\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (this.uniqueWildcardBindings.get(unresolvedType) != null) { // update the key", "-\t\tObject[] keys = this.uniqueWildcardBindings.keyTable;", "-\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "-\t\t\tif (keys[i] == unresolvedType) {", "-\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "+\tthis.typeSystem.updateCaches(unresolvedType, resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f34a277e5d0b83d161c3df615017b4ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\t// standard reporting", "-\t\t\t\t\t\tif (this.patternFineGrain == 0) {", "-\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "-\t\t\t\t\t\t\t\tif (otherFields != null) {", "-\t\t\t\t\t\t\t\t\tint length = otherFields.length;", "-\t\t\t\t\t\t\t\t\tint size = 0;", "-\t\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "-\t\t\t\t\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "-\t\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "-\t\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "+\t\t\t\t\t\t\tif (otherFields != null) {", "+\t\t\t\t\t\t\t\tint length = otherFields.length;", "+\t\t\t\t\t\t\t\tint size = 0;", "+\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "+\t\t\t\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "+\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "+\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t } else {", "-\t\t\t\t\t\t\t// finegrain reporting", "-\t\t\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tfield.traverse(visitor, null);", "-\t\t\t\t\t\t\t} catch (WrappedCoreException e) {", "-\t\t\t\t\t\t\t\tthrow e.coreException;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// Remove all remaining nodes", "-\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "-\t\t\t\t\t// standard reporting", "-\t\t\t\t\tif (this.patternFineGrain == 0) {", "-\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\t\tnode = field;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "-\t\t\t\t\t\t\tBlockScope blockScope = null;", "-\t\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "-\t\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "-\t\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t// finegrain reporting", "-\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfield.traverse(visitor, field.isStatic() ? type.staticInitializerScope : type.initializerScope);", "-\t\t\t\t\t} catch (WrappedCoreException e) {", "-\t\t\t\t\t\tthrow e.coreException;", "-\t\t\t\t\t}", "-\t\t\t\t\t// Remove all remaining nodes", "-\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "+\t\t\t\t\t\tBlockScope blockScope = null;", "+\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "+\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "+\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "+\t\t\t\t\treturn;"]}], "num": 34779}
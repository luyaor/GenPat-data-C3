{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e2b74a1c4d095d1f2ed7f18f7299319", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a83ed8b7099ed3ef233c95bafa3218", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": "\r protected void consumePushModifiers()", "signatureAfterChange": "\r protected void consumePushModifiers()", "diff": ["+\tif ((modifiers & AccSynchronized) != 0) {\r", "+\t\t /* remove the starting position of the synchronized keyword\r", "+\t\t  * we don't need it when synchronized is part of the modifiers\r", "+\t\t  */\r", "+\t\tintPtr--;\r", "+\t}\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acda5a7ec319a0d10b9f6956326554d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "f0293a4ee0f47048cbe57865e83a23fed516a419", "commitAfterChange": "161b33b1dd753a14c62dc5cb298555b7a8135f16", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void handle(\r \tint problemId, \r \tString[] problemArguments, \r \tint severity, \r \tint problemStartPosition, \r \tint problemEndPosition, \r \tReferenceContext referenceContext, \r \tCompilationResult unitResult)", "signatureAfterChange": "\r public void handle(\r \tint problemId, \r \tString[] problemArguments, \r \tint severity, \r \tint problemStartPosition, \r \tint problemEndPosition, \r \tReferenceContext referenceContext, \r \tCompilationResult unitResult)", "diff": ["-\t\tthrow new AbortCompilation(problemId, problemArguments);\r", "+\t\tif ((severity & Error) != 0) { // non reportable error is fatal\r", "+\t\t\tthrow new AbortCompilation(problemId, problemArguments);\r", "+\t\t} else {\r", "+\t\t\treturn; // ignore non reportable warning\r", "+\t\t}\r", "-\t\t\t\t(policy.stopOnFirstError() ? AbortCompilation : severity & Abort))\r", "-\t\t\t\t!= 0) {\r", "+\t\t\t\t(policy.stopOnFirstError() ? AbortCompilation : severity & Abort)) != 0) {\r", "+\r"]}], "num": 4789}
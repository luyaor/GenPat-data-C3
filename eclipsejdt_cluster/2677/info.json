{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07d70a21cd5da80624855a5f8fded316", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5a0d13ce1cde01754863a96e8ea47a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void compareFormattedSource() throws IOException, Exception", "signatureAfterChange": "  void compareFormattedSource() throws IOException, Exception", "diff": ["-\t\tString actualResult = runFormatter(codeFormatter, source, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, 0, source.length(), null);", "-\t\tif (!this.hasSpaceFailure && COMPARE) {", "-\t\t\tString expectedResult = expectedFormattedSource(source);", "-\t\t\tassertLineEquals(actualResult, source, expectedResult, false);", "+\t\tif (\"comments\".equals(COMPARE)) {", "+\t\t\tString[] oldFormattedComments = formattedComments(source, true);", "+\t\t\tString[] newFormattedComments = formattedComments(source, false);", "+\t\t\tint length = oldFormattedComments == null ? 0 : oldFormattedComments.length;", "+\t\t\tthis.abortOnFailure = false;", "+\t\t\tassertEquals(\"Unexpected number of comments!\", length, newFormattedComments == null ? 0 : newFormattedComments.length);", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tString oldComment = oldFormattedComments[i];", "+\t\t\t\tString newComment = newFormattedComments[i];", "+\t\t\t\tif (oldComment == null) {", "+\t\t\t\t\tassertNull(\"Unexpected non-null new comment\", newComment);", "+\t\t\t\t} else {", "+\t\t\t\t\tString expected = removeKnownDifferences(oldComment);", "+\t\t\t\t\tString actual = removeKnownDifferences(newComment);", "+\t\t\t\t\tif (!expected.equals(actual)) {", "+\t\t\t\t\t\tString actualResult = runFormatter(codeFormatter, source, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, 0, source.length(), null);", "+\t\t\t\t\t\tString expectedResult = expectedFormattedSource(source);", "+\t\t\t\t\t\tassertEquals(\"Unexpected difference with formatted comment \"+(i+1), expectedResult, actualResult);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tString actualResult = runFormatter(codeFormatter, source, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, 0, source.length(), null);", "+\t\t\tif (!this.hasSpaceFailure && \"true\".equals(COMPARE)) {", "+\t\t\t\tString expectedResult = expectedFormattedSource(source);", "+\t\t\t\tassertLineEquals(actualResult, source, expectedResult, false);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c827978e6f6f7620f1dbeb51c3068aa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "commitAfterChange": "bbd2ac48b173a123c7419ce013244d878b152c22", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void compareFormattedSource() throws IOException, Exception", "signatureAfterChange": "  void compareFormattedSource() throws IOException, Exception", "diff": ["-\tDefaultCodeFormatter codeFormatter = codeFormatter();", "-\t\tif (\"comments\".equals(COMPARE)) {", "-\t\t\tString[] oldFormattedComments = formattedComments(source, true);", "-\t\t\tString[] newFormattedComments = formattedComments(source, false);", "-\t\t\tint length = oldFormattedComments == null ? 0 : oldFormattedComments.length;", "-\t\t\tthis.abortOnFailure = false;", "-\t\t\tassertEquals(\"Unexpected number of comments!\", length, newFormattedComments == null ? 0 : newFormattedComments.length);", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tString oldComment = oldFormattedComments[i];", "-\t\t\t\tString newComment = newFormattedComments[i];", "-\t\t\t\tif (oldComment == null) {", "-\t\t\t\t\tassertNull(\"Unexpected non-null new comment\", newComment);", "-\t\t\t\t} else {", "-\t\t\t\t\tString expected = cleanAllKnownDifferences(oldComment);", "-\t\t\t\t\tString actual = cleanAllKnownDifferences(newComment);", "-\t\t\t\t\tif (!expected.equals(actual)) {", "-\t\t\t\t\t\tString actualResult = runFormatter(codeFormatter, source, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, 0, source.length(), null);", "-\t\t\t\t\t\tString expectedResult = expectedFormattedSource(source);", "-\t\t\t\t\t\tassertEquals(\"Unexpected difference with formatted comment \"+(i+1), Util.convertToIndependantLineDelimiter(expectedResult), Util.convertToIndependantLineDelimiter(actualResult));", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t// Format the source", "+\t\tString actualResult = runFormatter(codeFormatter(), source, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, 0, source.length(), null);", "+", "+\t\t// Look for output to compare with", "+\t\tFile outputFile = new Path(OUTPUT_DIR.getPath()).append(this.path).toFile();", "+\t\tif (COMPARE) {", "+\t\t\tString expectedResult = new String(org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(outputFile, null));", "+\t\t\ttry {", "+\t\t\t\tassertSourceEquals(\"Unexpected format output!\", expectedResult, actualResult);", "+\t\t\t}", "+\t\t\tcatch (ComparisonFailure cf) {", "+\t\t\t\tthis.failureIndex = COMPARISON_FAILURE;", "+//\t\t\t\tFAILURES[COMPARISON_FAILURE].failures.add(this.path);", "+\t\t\t\tthrow cf;", "+\t\t\t}", "+\t\t\tcatch (AssertionFailedError afe) {", "+\t\t\t\tthis.failureIndex = COMPARISON_FAILURE;", "+//\t\t\t\tFAILURES[COMPARISON_FAILURE].failures.add(this.path);", "+\t\t\t\tthrow afe;", "-\t\t\tString actualResult = runFormatter(codeFormatter, source, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, 0, source.length(), null);", "-\t\t\tif (!this.hasSpaceFailure && \"true\".equals(COMPARE)) {", "-\t\t\t\tString expectedResult = expectedFormattedSource(source);", "-\t\t\t\tassertLineEquals(actualResult, source, expectedResult, false);", "-\t\t\t}", "+\t\t\toutputFile.getParentFile().mkdirs();", "+\t\t\tUtil.writeToFile(actualResult, outputFile.getAbsolutePath());"]}], "num": 2677}
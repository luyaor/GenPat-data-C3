{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b93a0ec98e976b952010c78fec51349", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "090a6f92bf44195ea7a68220e67c8b39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 567, "signatureBeforeChange": "  \tpublic void testConstructorInvocation()", "signatureAfterChange": "  \tpublic void testConstructorInvocation()", "diff": ["+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tassertTrue(x.typeArguments().isEmpty());", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.typeArguments(),", "+\t\t\t  new Property(\"TypeArguments\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tType result = targetAst.newSimpleType(targetAst.newSimpleName(\"X\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e27cd9cf64be8a43412df76d53c651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 151, "signatureBeforeChange": "\t\t  \tpublic void testPackageDeclaration()", "signatureAfterChange": "\t\t  \tpublic void testPackageDeclaration()", "diff": ["+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tassertTrue(x.annotations().isEmpty());", "+\t\t}", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.annotations(), new Property(\"Annotations\", true, Annotation.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tMarkerAnnotation result = targetAst.newMarkerAnnotation();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\tPackageDeclaration pd = targetAst.newPackageDeclaration();", "+\t\t\t\t\t\tpd.annotations().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f070f0856416731e633c9b9c0db015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 242, "signatureBeforeChange": " \tpublic void testMethodDeclaration()", "signatureAfterChange": " \tpublic void testMethodDeclaration()", "diff": ["-\t\tassertTrue(x.thrownExceptions().size() == 0);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tassertTrue(x.thrownExceptions().size() == 0);\t\t\t", "+\t\t} else {", "+\t\t\tassertTrue(x.thrownExceptionTypes().size() == 0);\t\t\t", "+\t\t}", "-\t\tgenericPropertyListTest(x, x.thrownExceptions(),", "-\t\t  new Property(\"ThrownExceptions\", true, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tgenericPropertyListTest(x, x.thrownExceptions(),", "+\t\t\t\t\t  new Property(\"ThrownExceptions\", true, Name.class) { //$NON-NLS-1$", "+\t\t\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});\t\t\t", "+\t\t} else {", "+\t\t\tgenericPropertyListTest(x, x.thrownExceptionTypes(),", "+\t\t\t\t\t  new Property(\"ThrownExceptionTypes\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\t\t\tType result = targetAst.newSimpleType(targetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a94160a9c1bfb2c12408868e1a1ab91a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 596, "methodNumberAfterChange": 602, "signatureBeforeChange": "  \tpublic void testSuperMethodInvocation()", "signatureAfterChange": "  \tpublic void testSuperMethodInvocation()", "diff": ["+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tassertTrue(x.typeArguments().isEmpty());", "+\t\t}", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.typeArguments(),", "+\t\t\t  new Property(\"TypeArguments\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tType result = targetAst.newSimpleType(targetAst.newSimpleName(\"X\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e59061630562721f73e357aba0c1490d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 567, "methodNumberAfterChange": 572, "signatureBeforeChange": "  \tpublic void testSuperConstructorInvocation()", "signatureAfterChange": "  \tpublic void testSuperConstructorInvocation()", "diff": ["+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tassertTrue(x.typeArguments().isEmpty());", "+\t\t}", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.typeArguments(),", "+\t\t\t  new Property(\"TypeArguments\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tType result = targetAst.newSimpleType(targetAst.newSimpleName(\"X\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t"]}], "num": 66145}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cd2f0ebcbe1bfbcb58790e80f9b9423", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66212446c2a7e097858776cc57fc3475", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "0de5167791884524f72d9d44c10f0e243af65d00", "commitAfterChange": "07ab76f69fbeeb2f2fd54cdf3d01ee69344b9ae0", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " protected ArrayList handleBootclasspath(ArrayList bootclasspaths, String customEncoding)", "signatureAfterChange": " protected ArrayList handleBootclasspath(ArrayList bootclasspaths, String customEncoding)", "diff": ["-\t \tbootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t/* no bootclasspath specified", "-\t\t * we can try to retrieve the default librairies of the VM used to run", "-\t\t * the batch compiler", "-\t\t */", "-\t\t String javaversion = System.getProperty(\"java.version\");//$NON-NLS-1$", "-\t\t if (javaversion != null && javaversion.equalsIgnoreCase(\"1.1.8\")) { //$NON-NLS-1$", "+\t\tbootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\ttry {", "+\t\t\tUtil.collectRunningVMBootclasspath(bootclasspaths);", "+\t\t} catch(IllegalStateException e) {", "-\t\t }", "-", "-\t \t/*", "-\t \t * Handle >= JDK 1.2.2 settings: retrieve the bootclasspath", "-\t \t */", "-\t\t// check bootclasspath properties for Sun, JRockit and Harmony VMs", "-\t\tString bootclasspathProperty = System.getProperty(\"sun.boot.class.path\"); //$NON-NLS-1$", "-\t\tif ((bootclasspathProperty == null) || (bootclasspathProperty.length() == 0)) {", "-\t\t\t// IBM J9 VMs", "-\t\t\tbootclasspathProperty = System.getProperty(\"vm.boot.class.path\"); //$NON-NLS-1$", "-\t\t\tif ((bootclasspathProperty == null) || (bootclasspathProperty.length() == 0)) {", "-\t\t\t\t// Harmony using IBM VME", "-\t\t\t\tbootclasspathProperty = System.getProperty(\"org.apache.harmony.boot.class.path\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((bootclasspathProperty != null) && (bootclasspathProperty.length() != 0)) {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(bootclasspathProperty, File.pathSeparator);", "-\t\t\tString token;", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "-\t\t\t\t\t\t.getClasspath(token, customEncoding, null);", "-\t\t\t\tif (currentClasspath != null) {", "-\t\t\t\t\tbootclasspaths.add(currentClasspath);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// try to get all jars inside the lib folder of the java home", "-\t\t\tfinal File javaHome = getJavaHome();", "-\t\t\tif (javaHome != null) {", "-\t\t\t\tFile[] directoriesToCheck = null;", "-\t\t\t\tif (System.getProperty(\"os.name\").startsWith(\"Mac\")) {//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\tdirectoriesToCheck = new File[] {", "-\t\t\t\t\t\tnew File(javaHome, \"../Classes\"), //$NON-NLS-1$", "-\t\t\t\t\t};", "-\t\t\t\t} else {", "-\t\t\t\t\t// fall back to try to retrieve them out of the lib directory", "-\t\t\t\t\tdirectoriesToCheck = new File[] {", "-\t\t\t\t\t\tnew File(javaHome, \"lib\") //$NON-NLS-1$", "-\t\t\t\t\t};", "-\t\t\t\t}", "-\t\t\t\tFile[][] systemLibrariesJars = getLibrariesFiles(directoriesToCheck);", "-\t\t\t\tif (systemLibrariesJars != null) {", "-\t\t\t\t\tfor (int i = 0, max = systemLibrariesJars.length; i < max; i++) {", "-\t\t\t\t\t\tFile[] current = systemLibrariesJars[i];", "-\t\t\t\t\t\tif (current != null) {", "-\t\t\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\t\t\tFileSystem.Classpath classpath =", "-\t\t\t\t\t\t\t\t\tFileSystem.getClasspath(current[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\t\tnull, false, null, null);", "-\t\t\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eca3bb9be6da40b4618cdf7622c431b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "7fdd30796329ce26e7f870767adb170e365b96ed", "commitAfterChange": "5d8cf65e1df5f9eb0a074e2096650fc374a7dd1f", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " protected ArrayList handleBootclasspath(ArrayList bootclasspaths, String customEncoding) throws InvalidInputException", "signatureAfterChange": " protected ArrayList handleBootclasspath(ArrayList bootclasspaths, String customEncoding) throws InvalidInputException", "diff": ["-\t \tfinal File javaHome = getJavaHome();", "-\t \t * Handle >= JDK 1.2.2 settings: retrieve rt.jar", "+\t \t * Handle >= JDK 1.2.2 settings: retrieve the bootclasspath", "-\t \t if (javaHome != null) {", "-\t\t\tFile[] directoriesToCheck = null;", "-\t\t\tif (System.getProperty(\"os.name\").startsWith(\"Mac\")) {//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\tdirectoriesToCheck = new File[] {", "-\t\t\t\t\tnew File(javaHome, \"../Classes\"), //$NON-NLS-1$", "-\t\t\t\t};", "-\t\t\t} else {", "-\t\t\t\tdirectoriesToCheck = new File[] {", "-\t\t\t\t\tnew File(javaHome, \"lib\") //$NON-NLS-1$", "-\t\t\t\t};", "+\t\t// check bootclasspath properties for Sun, JRockit and Harmony VMs", "+\t\tString bootclasspathProperty = System.getProperty(\"sun.boot.class.path\"); //$NON-NLS-1$", "+\t\tif ((bootclasspathProperty == null) || (bootclasspathProperty.length() == 0)) {", "+\t\t\t// IBM J9 VMs", "+\t\t\tbootclasspathProperty = System.getProperty(\"vm.boot.class.path\"); //$NON-NLS-1$", "+\t\t\tif ((bootclasspathProperty == null) || (bootclasspathProperty.length() == 0)) {", "+\t\t\t\t// Harmony using IBM VME", "+\t\t\t\tbootclasspathProperty = System.getProperty(\"org.apache.harmony.boot.class.path\"); //$NON-NLS-1$", "-\t\t\tFile[][] systemLibrariesJars = getLibrariesFiles(directoriesToCheck);", "-\t\t\tif (systemLibrariesJars != null) {", "-\t\t\t\tfor (int i = 0, max = systemLibrariesJars.length; i < max; i++) {", "-\t\t\t\t\tFile[] current = systemLibrariesJars[i];", "-\t\t\t\t\tif (current != null) {", "-\t\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\t\tFileSystem.Classpath classpath =", "-\t\t\t\t\t\t\t\tFileSystem.getClasspath(current[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, false, null, null);", "-\t\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "+\t\t}", "+\t\tif ((bootclasspathProperty != null) && (bootclasspathProperty.length() != 0)) {", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(bootclasspathProperty, File.pathSeparator);", "+\t\t\tString token;", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t\t.getClasspath(token, customEncoding, null);", "+\t\t\t\tif (currentClasspath != null) {", "+\t\t\t\t\tbootclasspaths.add(currentClasspath);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// try to get all jars inside the lib folder of the java home", "+\t\t\tfinal File javaHome = getJavaHome();", "+\t\t\tif (javaHome != null) {", "+\t\t\t\tFile[] directoriesToCheck = null;", "+\t\t\t\tif (System.getProperty(\"os.name\").startsWith(\"Mac\")) {//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\tdirectoriesToCheck = new File[] {", "+\t\t\t\t\t\tnew File(javaHome, \"../Classes\"), //$NON-NLS-1$", "+\t\t\t\t\t};", "+\t\t\t\t} else {", "+\t\t\t\t\t// fall back to try to retrieve them out of the lib directory", "+\t\t\t\t\tdirectoriesToCheck = new File[] {", "+\t\t\t\t\t\tnew File(javaHome, \"lib\") //$NON-NLS-1$", "+\t\t\t\t\t};", "+\t\t\t\t}", "+\t\t\t\tFile[][] systemLibrariesJars = getLibrariesFiles(directoriesToCheck);", "+\t\t\t\tif (systemLibrariesJars != null) {", "+\t\t\t\t\tfor (int i = 0, max = systemLibrariesJars.length; i < max; i++) {", "+\t\t\t\t\t\tFile[] current = systemLibrariesJars[i];", "+\t\t\t\t\t\tif (current != null) {", "+\t\t\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "+\t\t\t\t\t\t\t\tFileSystem.Classpath classpath =", "+\t\t\t\t\t\t\t\t\tFileSystem.getClasspath(current[j].getAbsolutePath(),", "+\t\t\t\t\t\t\t\t\t\tnull, false, null, null);", "+\t\t\t\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "+\t\t\t\t\t\t\t\t}", "- \t\t}", "+\t\t}"]}], "num": 61471}
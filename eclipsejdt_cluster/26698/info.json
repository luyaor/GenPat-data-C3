{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57a52e086c086b30a29a1caaca1731b5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13bf1aaaa34510472afb3aef08f98086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "e87bfc3f4fb5c5cbc92139a33aa1f70cbb179bd0", "commitAfterChange": "fea48c1ab8bc004e73a7488c630798836bc78025", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif (this.action == null", "-\t\t\t\t|| this.action.isEmptyBlock()", "-\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0)) {", "+\t\tfinal boolean hasEmptyAction = this.action == null", "+\t\t\t|| this.action.isEmptyBlock()", "+\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0);", "+", "+\t\tif (hasEmptyAction", "+\t\t\t\t&& this.elementVariable.binding.resolvedPosition == -1", "+\t\t\t\t&& this.kind == ARRAY) {", "+\t\t\tcollection.generateCode(scope, codeStream, false);", "+", "-\t\t", "-\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "+\t\tswitch(this.kind) {", "+\t\t\tcase ARRAY :", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\t\tif (this.elementVariable.binding.type.id != T_JavaLangObject) {", "-\t\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "-\t\t\t\t\t\t\tcodeStream.checkcast(this.collectionElementType);", "-\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.checkcast(this.elementVariable.binding.type);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// if unused variable, some side effects still need to be performed (86487)", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\t// still advance in iterator to prevent infinite loop", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase RAW_ITERABLE :", "+\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\tif (this.elementVariable.binding.type.id != T_JavaLangObject) {", "+\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "+\t\t\t\t\t\tcodeStream.checkcast(this.collectionElementType);", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.checkcast(this.elementVariable.binding.type);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) {", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\tthis.action.generateCode(scope, codeStream);", "+", "+\t\tif (!hasEmptyAction) {", "+\t\t\tthis.action.generateCode(scope, codeStream);", "+\t\t}", "+\t\t\t\t\tif (hasEmptyAction && this.elementVariable.binding.resolvedPosition == -1) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed68550382f43f59f4eca0087b2ce0b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "34ee213dde08a7453eec3b2a2a0e314e1d2814a6", "commitAfterChange": "7350d2407528c733101203f94e4081cd258cb05c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tConstant inlinedValue;", "-\t\tif (initialization != null) {", "-\t\t\t// initialize to constant value?", "-\t\t\tif ((inlinedValue = initialization.constant) != Constant.NotAConstant) {", "-\t\t\t\t// forget initializing unused or final locals set to constant value (final ones are inlined)", "-\t\t\t\tif (binding.resolvedPosition != -1) { // may need to preserve variable", "-\t\t\t\t\tint initPC = codeStream.position;", "-\t\t\t\t\tcodeStream.generateConstant(inlinedValue, initialization.implicitConversion);", "-\t\t\t\t\tcodeStream.recordPositionsFrom(initPC, initialization.sourceStart);", "-\t\t\t\t\tcodeStream.store(binding, false);", "-\t\t\t\t\tbinding.recordInitializationStartPC(codeStream.position);", "-\t\t\t\t\t//\t\t\t\tcodeStream.lastInitStateIndexWhenRemovingInits = -2; // reinitialize remove index ", "-\t\t\t\t\t//\t\t\t\tcodeStream.lastInitStateIndexWhenAddingInits = -2; // reinitialize add index\t\t", "-\t\t\t\t}", "-\t\t\t} else { // initializing to non-constant value", "-\t\t\t\tinitialization.generateCode(currentScope, codeStream, true);", "+\t\tgenerateInit: {", "+\t\t\tif (this.initialization == null) ", "+\t\t\t\tbreak generateInit;", "+\t\t\t// forget initializing unused or final locals set to constant value (final ones are inlined)", "+\t\t\tif (binding.resolvedPosition < 0) {", "+\t\t\t\tif (initialization.constant != Constant.NotAConstant) ", "+\t\t\t\t\tbreak generateInit;", "-\t\t\t\tif (binding.resolvedPosition != -1) {", "-\t\t\t\t\t// 26903, need extra cast to store null in array local var\t", "-\t\t\t\t\tif (binding.type.isArrayType() ", "-\t\t\t\t\t\t&& (initialization.resolvedType == TypeBinding.NULL\t// arrayLoc = null", "-\t\t\t\t\t\t\t|| ((initialization instanceof CastExpression)\t// arrayLoc = (type[])null", "-\t\t\t\t\t\t\t\t&& (((CastExpression)initialization).innermostCastedExpression().resolvedType == TypeBinding.NULL)))){", "-\t\t\t\t\t\tcodeStream.checkcast(binding.type); ", "-\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\tcodeStream.store(binding, false);", "-\t\t\t\t\tif (binding.initializationCount == 0) {", "-\t\t\t\t\t\t/* Variable may have been initialized during the code initializing it", "-\t\t\t\t\t\t\te.g. int i = (i = 1);", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tbinding.recordInitializationStartPC(codeStream.position);", "-\t\t\t\t\t\t//\t\t\t\t\tcodeStream.lastInitStateIndexWhenRemovingInits = -2; // reinitialize remove index ", "-\t\t\t\t\t\t//\t\t\t\t\tcodeStream.lastInitStateIndexWhenAddingInits = -2; // reinitialize add index ", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif ((binding.type == TypeBinding.LONG) || (binding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tinitialization.generateCode(currentScope, codeStream, false);", "+\t\t\t\tbreak generateInit;", "+\t\t\t}\t\t\t", "+\t\t\tinitialization.generateCode(currentScope, codeStream, true);", "+\t\t\t// 26903, need extra cast to store null in array local var\t", "+\t\t\tif (binding.type.isArrayType() ", "+\t\t\t\t&& (initialization.resolvedType == TypeBinding.NULL\t// arrayLoc = null", "+\t\t\t\t\t|| ((initialization instanceof CastExpression)\t// arrayLoc = (type[])null", "+\t\t\t\t\t\t&& (((CastExpression)initialization).innermostCastedExpression().resolvedType == TypeBinding.NULL)))){", "+\t\t\t\tcodeStream.checkcast(binding.type); ", "+\t\t\t}\t\t\t\t\t", "+\t\t\tcodeStream.store(binding, false);", "+\t\t\tif ((this.bits & ASTNode.FirstAssignmentToLocal) != 0) {", "+\t\t\t\t/* Variable may have been initialized during the code initializing it", "+\t\t\t\t\te.g. int i = (i = 1);", "+\t\t\t\t*/", "+\t\t\t\tbinding.recordInitializationStartPC(codeStream.position);"]}], "num": 26698}
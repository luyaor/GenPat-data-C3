{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a96c30fcc4ce511132a81058c526c5e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e71916d2e4cc00619a45e084887a71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "4facfcdf4a36f611ae455f345faa2a13f779251b", "commitAfterChange": "9b4626a240c7fe9f3a95f4bc274592915f73c7ef", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo sourceMethod, CompilationResult compilationResult)", "diff": ["-\tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult) {", "+\tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo sourceMethod, CompilationResult compilationResult) {", "+\t\tint modifiers = sourceMethod.getModifiers();", "-\t\t\tMethodDeclaration decl = new MethodDeclaration(compilationResult);", "-\t\t\t/* convert return type */", "-\t\t\tdecl.returnType =", "-\t\t\t\tcreateTypeReference(sourceMethod.getReturnTypeName(), start, end);", "-\t\t\tmethod = decl;", "+\t\t\tMethodDeclaration decl;", "+\t\t\tif (sourceMethod.isAnnotationMethod()) {", "+\t\t\t\tAnnotationMethodDeclaration annotationMethodDeclaration = new AnnotationMethodDeclaration(compilationResult);", "+", "+\t\t\t\t/* conversion of default value */", "+\t\t\t\tif ((this.flags & FIELD_INITIALIZATION) != 0) {", "+\t\t\t\t\tchar[] defaultValueSource = sourceMethod.getDefaultValueSource();", "+\t\t\t\t\tif (defaultValueSource != null) {", "+\t\t\t\t\t\tif (this.parser == null) {", "+\t\t\t\t\t\t\tthis.parser = new Parser(this.problemReporter, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// TODO (jerome) handle Annotation and MemberValusArrayInitializer)", "+\t\t\t\t\t\tExpression expression =  this.parser.parseExpression(defaultValueSource, 0, defaultValueSource.length, this.unit);", "+\t\t\t\t\t\tif (expression != null) {", "+\t\t\t\t\t\t\tannotationMethodDeclaration.defaultValue = expression;", "+\t\t\t\t\t\t\tmodifiers |= AccAnnotationDefault;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tdecl = annotationMethodDeclaration;", "+\t\t\t} else {", "+\t\t\t\tdecl = new MethodDeclaration(compilationResult);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// convert return type", "+\t\t\tdecl.returnType = createTypeReference(sourceMethod.getReturnTypeName(), start, end);", "+\t\t\t", "+\t\t\t// type parameters", "+\t\t\t", "+\t\t\tmethod = decl;", "-\t\tint modifiers = sourceMethod.getModifiers();", "-\t\tif ((this.flags & LOCAL_TYPE) != 0 && sourceMethod instanceof SourceMethodElementInfo) {", "-\t\t\tIJavaElement[] children = ((SourceMethodElementInfo)sourceMethod).getChildren();", "+\t\tif ((this.flags & LOCAL_TYPE) != 0) {", "+\t\t\tIJavaElement[] children = sourceMethod.getChildren();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afbbeb1b91368424cbf29a4f949982ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "068cd980b5edbe213826c80d8c3fb1a72582288a", "commitAfterChange": "6eb32d06a01a4c0cd88aa5091b2c41c8c1c0f654", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo methodInfo, CompilationResult compilationResult)", "diff": ["-\tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo sourceMethod, CompilationResult compilationResult) {", "+\tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo methodInfo, CompilationResult compilationResult) {", "-\t\tint start = sourceMethod.getNameSourceStart();", "-\t\tint end = sourceMethod.getNameSourceEnd();", "+\t\tint start = methodInfo.getNameSourceStart();", "+\t\tint end = methodInfo.getNameSourceEnd();", "-\t\tchar[][] typeParameterNames = sourceMethod.getTypeParameterNames();", "+\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "-\t\t\t\tchar[][][] typeParameterBounds = sourceMethod.getTypeParameterBounds();", "+\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "-\t\tint modifiers = sourceMethod.getModifiers();", "-\t\tif (sourceMethod.isConstructor()) {", "+\t\tint modifiers = methodInfo.getModifiers();", "+\t\tif (methodInfo.isConstructor()) {", "-\t\t\tif (sourceMethod.isAnnotationMethod()) {", "+\t\t\tif (methodInfo.isAnnotationMethod()) {", "-\t\t\t\t\tchar[] defaultValueSource = sourceMethod.getDefaultValueSource();", "+\t\t\t\t\tchar[] defaultValueSource = methodInfo.getDefaultValueSource();", "-\t\t\tdecl.returnType = createTypeReference(sourceMethod.getReturnTypeName(), start, end);", "+\t\t\tdecl.returnType = createTypeReference(methodInfo.getReturnTypeName(), start, end);", "-\t\tmethod.selector = sourceMethod.getSelector();", "+\t\tmethod.selector = methodInfo.getSelector();", "-\t\tmethod.declarationSourceStart = sourceMethod.getDeclarationSourceStart();", "-\t\tmethod.declarationSourceEnd = sourceMethod.getDeclarationSourceEnd();", "+\t\tmethod.declarationSourceStart = methodInfo.getDeclarationSourceStart();", "+\t\tmethod.declarationSourceEnd = methodInfo.getDeclarationSourceEnd();", "-\t\tchar[][] argumentTypeNames = sourceMethod.getArgumentTypeNames();", "-\t\tchar[][] argumentNames = sourceMethod.getArgumentNames();", "+\t\tchar[][] argumentTypeNames = methodInfo.getArgumentTypeNames();", "+\t\tchar[][] argumentNames = methodInfo.getArgumentNames();", "-\t\tchar[][] exceptionTypeNames = sourceMethod.getExceptionTypeNames();", "+\t\tchar[][] exceptionTypeNames = methodInfo.getExceptionTypeNames();", "-\t\t\tIJavaElement[] children = sourceMethod.getChildren();", "+\t\t\tIJavaElement[] children = methodInfo.getChildren();"]}], "num": 23252}
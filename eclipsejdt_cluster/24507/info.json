{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28465dc794d4a7fd104fdfc2f563ffed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "655998fe2275f3d5786d720e75416510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tpublic void test0117()", "signatureAfterChange": " \tpublic void test0117()", "diff": ["-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew X<X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The type X.MX.MMX is not a valid substitute for the bounded parameter <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>> of the type X<T>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew X<X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The type X.MX.MMX is not a valid substitute for the bounded parameter <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>> of the type X<T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77a460f4d5b6fc844c9038db6aee5702", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 543, "methodNumberAfterChange": 543, "signatureBeforeChange": " \tpublic void test539()", "signatureAfterChange": " \tpublic void test539()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tI2 v = b.willBe(I2.class);\\n\" + ", "-\t\t\t\"\t   ^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X.I1 to X.I2\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tI2 v = b.willBe(I2.class);\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X.I1 to X.I2\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce1c384e044ce44993984029f3be101c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic void test0129()", "signatureAfterChange": " \tpublic void test0129()", "diff": ["-\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tpublic Class <? extends Object> getClass() {\\n\" + ", "-\t\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method getClass() of type XY should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tpublic Class <? extends Object> getClass() {\\n\" + ", "+\t\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method getClass() of type XY should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb1ceb8d583a1abb7818431e3098f257", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 257, "methodNumberAfterChange": 257, "signatureBeforeChange": " \tpublic void test253()", "signatureAfterChange": " \tpublic void test253()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tList<Number> ls2 = (List<? extends Number>)ls;\\n\" + ", "-\t\t\t\"\t             ^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Number> to List<Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tList<Number> ls2 = (List<? extends Number>)ls;\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Number> to List<Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6daf45dfc67285a507e1742302e5958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "35192bdd39bce1e9b15851263fdb1cc51a01a12d", "commitAfterChange": "346ec90ab8195c0220dfb3a809d3812bb65c1857", "methodNumberBeforeChange": 719, "methodNumberAfterChange": 719, "signatureBeforeChange": " public void test0701()", "signatureAfterChange": " public void test0701()", "diff": ["-\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"\tList<Counter<? extends String>> list5 = Arrays.asList(songCounter, genreCounter);\\n\" + ", "-\t\t\"\t                                ^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<Deejay.Counter<? extends Object>> to List<Deejay.Counter<? extends String>>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\tList<Counter<? extends String>> list5 = Arrays.asList(songCounter, genreCounter);\\n\" + ", "+\t\t\"\t                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<Deejay.Counter<? extends Object>> to List<Deejay.Counter<? extends String>>\\n\" + "]}], "num": 24507}
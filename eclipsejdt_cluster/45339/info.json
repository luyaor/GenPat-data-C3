{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea5bb667542a2396a5a46c2f71223f7b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807920f83373a4047df85dd61e2aa4e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index, \t\tFlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo)", "diff": ["-\t */", "-\tpublic void manageSyntheticAccessIfNecessary(", "-\t\tBlockScope currentScope,", "-\t\tFieldBinding fieldBinding,", "-\t\tTypeBinding lastReceiverType,", "-\t\tint index,", "-\t\tFlowInfo flowInfo) {", "-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0) return;", "+ */", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo) {", "+\t// do nothing", "+}", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\tboolean useDelegate;", "-\t\tif (index < 0) { // write-access?", "-\t\t    useDelegate = fieldBinding == this.binding && this.delegateThis != null;", "-\t\t} else {", "-\t\t\tuseDelegate = index == 0 && this.delegateThis != null;", "-\t\t}", "-", "-\t\tif (useDelegate) {", "-\t\t\tlastReceiverType = this.delegateThis.type;", "-\t\t}", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t// and not from Object or implicit static field access.", "-\t\tif (fieldBinding.declaringClass != lastReceiverType", "-\t\t\t\t&& !lastReceiverType.isArrayType()", "-\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || (index < 0 ? fieldBinding != this.binding : index > 0) || this.indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())", "-\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !(useDelegate", "-\t\t\t\t\t\t? new CodeSnippetScope(currentScope).canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) this.delegateThis.type)", "-\t\t\t\t\t\t: fieldBinding.declaringClass.canBeSeenBy(currentScope))) {", "-", "-\t\t\t    if (index < 0) { // write-access?", "-\t\t\t\t\tif (fieldBinding == this.binding){", "-\t\t\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){", "-\t\t\t\t\t\t\tint l = this.otherBindings.length;", "-\t\t\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.otherCodegenBindings[this.otherCodegenBindings.length-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t\t}", "-\t\t\t    } if (index == 0){", "-\t\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t} else {", "-\t\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){", "-\t\t\t\t\t\tint l = this.otherBindings.length;", "-\t\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.otherCodegenBindings[index-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c3c89e70c0dff6908edf7c28d514740", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\t\t \tpublic void manageSyntheticAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index, \t\tFlowInfo flowInfo)", "signatureAfterChange": "\t\t \tpublic void manageSyntheticAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index, \t\tFlowInfo flowInfo)", "diff": ["+\t\t// if the binding declaring class is not visible, need special action", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "+\t\t// and not from Object or implicit static field access.\t", "-\t\t\t&& !lastReceiverType.isArrayType()\t\t\t", "-\t\t\t&& fieldBinding.declaringClass != null", "-\t\t\t&& !fieldBinding.isConstantValue()", "-\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t\t&& ((index < 0 ? fieldBinding != binding : index > 0) || this.indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())", "-\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject)", "+\t\t\t\t&& !lastReceiverType.isArrayType()", "+\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "+\t\t\t\t&& !fieldBinding.isConstantValue()) {", "+\t\t\tCompilerOptions options = currentScope.environment().options;", "+\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || (index < 0 ? fieldBinding != binding : index > 0) || this.indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t\t\t\t: fieldBinding.declaringClass.canBeSeenBy(currentScope)))){", "-\t\t    if (index < 0) { // write-access?", "-\t\t\t\tif (fieldBinding == this.binding){", "+\t\t\t\t\t\t: fieldBinding.declaringClass.canBeSeenBy(currentScope))) {", "+\t", "+\t\t\t    if (index < 0) { // write-access?", "+\t\t\t\t\tif (fieldBinding == this.binding){", "+\t\t\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){", "+\t\t\t\t\t\t\tint l = this.otherBindings.length;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.otherCodegenBindings[this.otherCodegenBindings.length-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "+\t\t\t\t\t}", "+\t\t\t    } if (index == 0){", "-\t\t\t\t\tthis.otherCodegenBindings[this.otherCodegenBindings.length-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "+\t\t\t\t\tthis.otherCodegenBindings[index-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t    } if (index == 0){", "-\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t} else {", "-\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){", "-\t\t\t\t\tint l = this.otherBindings.length;", "-\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);", "-\t\t\t\t}", "-\t\t\t\tthis.otherCodegenBindings[index-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t}", "+\t\t\t}\t\t"]}], "num": 45339}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "628b2e8c8bd360c2753f3d241bdfabf7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3db5b7ebe966479dbb9447618fc0aa36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c326c940f9ef138395e800fef452568d0c87c6c0", "commitAfterChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (this.expectedType != null && this.original == this) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "-\t\t\trecordFunctionalType(scope);", "-\t\t}", "-\t\t", "-    \t\tthis.lhs.bits |= ASTNode.IgnoreRawTypeCheck;", "+    \t\tif (this.original == this)", "+    \t\t\trecordFunctionalType(scope);", "+    \t\tthis.lhs.bits |= ASTNode.IgnoreRawTypeCheck;", "+    \t\tif (isConstructorReference() && lhsType.isArrayType()) {", "+\t        \tfinal TypeBinding leafComponentType = lhsType.leafComponentType();", "+\t\t\t\tif (!leafComponentType.isReifiable()) {", "+\t        \t\tscope.problemReporter().illegalGenericArray(leafComponentType, this);", "+\t        \t\treturn this.resolvedType = null;", "+\t        \t}", "+\t\t\t\tif (this.typeArguments != null) {", "+\t                scope.problemReporter().invalidTypeArguments(this.typeArguments);", "+\t                return this.resolvedType = null;", "+\t            }", "+\t        \tthis.binding = this.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "+\t        }", "+", "+", "-\t\t", "+", "+\t\t/* For Reference expressions unlike other call sites, we always have a receiver _type_ since LHS of :: cannot be empty. ", "+\t\t   LHS's resolved type == actual receiver type. All code below only when a valid descriptor is available.", "+\t\t*/", "+    \tif (this.descriptor == null || !this.descriptor.isValidBinding())", "+    \t\treturn this.resolvedType =  null;", "+     ", "-        \tfinal TypeBinding leafComponentType = lhsType.leafComponentType();", "-\t\t\tif (!leafComponentType.isReifiable()) {", "-        \t\tscope.problemReporter().illegalGenericArray(leafComponentType, this);", "-        \t\treturn this.resolvedType = null;", "-        \t}", "-", "-            if (this.typeArguments != null) {", "-                scope.problemReporter().invalidTypeArguments(this.typeArguments);", "-                return this.resolvedType = null;", "-            }", "-", "-        \tthis.binding = this.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "-\t\t/* For Reference expressions unlike other call sites, we always have a receiver _type_ since LHS of :: cannot be empty. ", "-\t\t   LHS's resolved type == actual receiver type. All code below only when a valid descriptor is available.", "-\t\t */", "-        if (this.descriptor == null || !this.descriptor.isValidBinding())", "-        \treturn this.resolvedType =  null;", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9dc5ec4baf0dc760cbdd1694fa004b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c326c940f9ef138395e800fef452568d0c87c6c0", "commitAfterChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tif (this.expectedType != null && this.original == this) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "-\t\t\tthis.ordinal = recordFunctionalType(blockScope);", "-\t\t}", "-\t\t", "-\t\tthis.constant = Constant.NotAConstant;", "-\t\tthis.enclosingScope = blockScope;", "-\t\t", "-\t\tif (!argumentsTypeElided) {", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tthis.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);", "+\t\t", "+\t\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tthis.constant = Constant.NotAConstant;", "+\t\t\tthis.enclosingScope = blockScope;", "+\t\t\tif (this.original == this)", "+\t\t\t\tthis.ordinal = recordFunctionalType(blockScope);", "+\t\t\t", "+\t\t\tif (!argumentsTypeElided) {", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);", "+\t\t\t}", "+\t\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "+\t\t\t\treturn this.resolvedType = new PolyTypeBinding(this);", "+\t\t\t} ", "-\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "-\t\t\treturn this.resolvedType = new PolyTypeBinding(this);", "-\t\t} "]}], "num": 53789}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6265fdd5547c08e1306e89e8386d20c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f502bcbed41c08650a680593d7f6d49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private void internalGenerateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": "  private void internalGenerateCode(ClassScope classScope, ClassFile classFile)", "diff": ["+\t\t// if a problem got reported during code gen, then trigger problem method creation", "+\t\tif (this.ignoreFurtherInvestigation) {", "+\t\t\tthrow new AbortMethod(this.scope.referenceCompilationUnit().compilationResult, null);", "+\t\t}", "-", "-\t// if a problem got reported during code gen, then trigger problem method creation", "-\tif (this.ignoreFurtherInvestigation) {", "-\t\tthrow new AbortMethod(this.scope.referenceCompilationUnit().compilationResult, null);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c85b297704882132649bc92b9f6f3c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void generateCode(ClassFile classFile)", "signatureAfterChange": "  \tpublic void generateCode(ClassFile classFile)", "diff": ["+\t\t\t// if a problem got reported during code gen, then trigger problem method creation", "+\t\t\tif (this.ignoreFurtherInvestigation) {", "+\t\t\t\tthrow new AbortMethod(this.scope.referenceCompilationUnit().compilationResult, null);", "+\t\t\t}", "-", "-\t\t// if a problem got reported during code gen, then trigger problem method creation", "-\t\tif (this.ignoreFurtherInvestigation) {", "-\t\t\tthrow new AbortMethod(this.scope.referenceCompilationUnit().compilationResult, null);", "-\t\t}"]}], "num": 11534}
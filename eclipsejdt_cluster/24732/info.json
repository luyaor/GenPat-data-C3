{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bd27a2d4fb964ccdf222dbb3a3d12a9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03b6ee132df1e0d3560a3e16e538cc97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionNodeDetector.java", "commitBeforeChange": "c614621106519ff8481a1054577c7b362708dd68", "commitAfterChange": "283007dac99c2184e8a3866c05be98ceb42f71c9", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \t \tprivate void endVisit(AstNode astNode)", "signatureAfterChange": " \t \tprivate void endVisit(AstNode astNode)", "diff": ["-\t\t\tif(!(astNode instanceof AllocationExpression && ((AllocationExpression) astNode).type == searchedNode)) {", "+\t\t\tif(!(astNode instanceof AllocationExpression && ((AllocationExpression) astNode).type == searchedNode)", "+\t\t\t\t&& !(astNode instanceof ConditionalExpression && ((ConditionalExpression) astNode).valueIfTrue == searchedNode)", "+\t\t\t\t&& !(astNode instanceof ConditionalExpression && ((ConditionalExpression) astNode).valueIfFalse == searchedNode)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f1b99817b775ff8f693bdaaa9a4a48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "50ccfd22c9edba40e321679792b900f0f1aa1621", "commitAfterChange": "4149e2502eef0fdb7b9921e198e3c6810a46bd6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \t@Override \tpublic List<? extends TypeMirror> getInterfaces()", "signatureAfterChange": " \t \t@Override \tpublic List<? extends TypeMirror> getInterfaces()", "diff": ["-\t\t\tTypeMirror interfaceType = _env.getFactory().newTypeMirror(interfaceBinding);", "-\t\t\tinterfaces.add(interfaceType);", "+\t\t\t// JSR269 spec requires us to return unresolved superinterfaces, but javac has", "+\t\t\t// a bug in this regard; as of 5/08 we emulate javac, rather than follow the spec.", "+\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=231521", "+\t\t\tif (interfaceBinding.isValidBinding() &&", "+\t\t\t\t// using binding types...", "+\t\t\t\t\t!(interfaceBinding instanceof MissingTypeBinding) &&", "+\t\t\t\t\t!(interfaceBinding instanceof ParameterizedTypeBinding &&", "+\t\t\t\t\t\t\t((ParameterizedTypeBinding) interfaceBinding).genericType() instanceof MissingTypeBinding)", "+\t\t\t\t// since HasMissingType reports indirect missing types, which is not what we need", "+\t\t\t\t/* &&", "+\t\t\t\t\t(interfaceBinding.tagBits & TagBits.HasMissingType) == 0 */) {", "+\t\t\t\tTypeMirror interfaceType = _env.getFactory().newTypeMirror(interfaceBinding);", "+\t\t\t\tinterfaces.add(interfaceType);", "+\t\t\t}"]}], "num": 24732}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66310a040c127de588834b301fab7309", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095405b30eccf35fedbf94e71036fe30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int parentType) {\r", "-\t\tboolean isOnClasspath = this.isOnClasspath(classpath, res);\r", "-\t\tOpenable element = null;\r", "-\t\tboolean processChildren = true;\r", "-\t\tJavaProject project = null;\r", "-\t\tif (isOnClasspath) {\r", "-\t\t\tOpenable[] elements = this.createElements(res);\r", "-\t\t\tif (elements != null) {\r", "-\t\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\t\t\telement = elements[i];\r", "-\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t// check if current resource is now on classpath and determine the element type\r", "+\t\tboolean isOnClasspath = false;\r", "+\t\tint elementType = -1;\r", "+\t\tswitch (parentType) {\r", "+\t\t\tcase IJavaElement.JAVA_MODEL:\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\tisOnClasspath = this.isOnClasspath(res.getFullPath());\r", "+\t\t\t\tif (isOnClasspath) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t} else {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\tisOnClasspath = true;\r", "+\t\t\t\tif (res instanceof IFolder) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "+\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t}\t\t\t\t\t\t\r", "+\t\t\r", "+\t\tboolean processChildren = true;\r", "+\t\tif (isOnClasspath) {\r", "+\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create((IProject)res);\r", "-\t\t\t\tif (project == null) return false; // not a Java project\r", "-\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tif (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project\r", "+\t\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tclasspath = project.getExpandedClasspath(true);\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t}\r", "-\t\t\t\t// if classpath is known, we are for sure out of classpath: stop processing children\r", "-\t\t\t\tprocessChildren = classpath != null;\r", "+\t\t\t\t// not yet inside a package fragment root\r", "+\t\t\t\tprocessChildren = true;\r", "+\t\t\tOpenable element = null;\r", "-\t\t\t\tif (!traverseDelta(child, isOnClasspath ? null : classpath)) {\r", "+\t\t\t\tif (!traverseDelta(child, elementType)) {\r", "+\t\t\t\t\t\t\tif (element == null) {\r", "+\t\t\t\t\t\t\t\telement = this.createElement(res, elementType);\r", "+\t\t\t\t\t\t\t\tif (element == null) continue;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\tif (oneChildOnClasspath || project != null) {\r", "+\t\t\tif (oneChildOnClasspath || res instanceof IProject) {\r", "-\t\t\t\tif (project == null) {\r", "-\t\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "-\t\t\t\t}\r", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tif (orphanChildren[i] != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "-\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}", "+\t\t\t\tJavaProject project = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\tif (project != null) {\r", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tif (orphanChildren[i] != null) {\r", "+\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\r", "-\t\t\treturn isOnClasspath && element != null; // element is null if non-java resource in package\r", "+\t\t\treturn \r", "+\t\t\t\tisOnClasspath \r", "+\t\t\t\t\t&& (elementType == IJavaElement.COMPILATION_UNIT \r", "+\t\t\t\t\t\t|| elementType == IJavaElement.CLASS_FILE);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57537b0074b42beaf3a8c0b139497013", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java", "commitBeforeChange": "b8409b2c5761cb2e6dbcdfc3bef92e6e755d2aa7", "commitAfterChange": "e968b992e38be58d07a46d70f656322d8b2edb33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static List<PluginFactoryContainer> getAllPluginFactoryContainers()", "signatureAfterChange": " \tpublic static Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()", "diff": ["-\tpublic static List<PluginFactoryContainer> getAllPluginFactoryContainers()", "+\tpublic static Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()", "+\t\tclass PluginContents {", "+\t\t\tpublic final PluginFactoryContainer fc;", "+\t\t\tpublic final boolean b;", "+\t\t\tpublic PluginContents(PluginFactoryContainer fc, boolean b) {", "+\t\t\t\tthis.fc = fc;", "+\t\t\t\tthis.b = b;", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\tMap<String, PluginFactoryContainer> containers = ", "-\t\t\tnew TreeMap<String, PluginFactoryContainer>();", "+\t\tMap<String, PluginContents> plugins = ", "+\t\t\tnew TreeMap<String, PluginContents>();", "-\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(", "-\t\t\t\t\"org.eclipse.jdt.apt.core\",  //$NON-NLS-1$ - name of plugin that exposes this extension", "+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(", "+\t\t\t\tAptPlugin.PLUGIN_ID, // name of plugin that exposes this extension point", "-\t\tIExtension[] extensions =  extension.getExtensions();", "-\t\t// A single plugin may extend the extension point more than once.", "-\t\tfor(int i = 0; i < extensions.length; i++) ", "+\t\t// A single plugin may extend the extension point more than once, although it's not recommended.", "+\t\tfor (IExtension extension : extensionPoint.getExtensions())", "-\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "-\t\t\t// Iterate over all the factories in a single extension declaration.", "-\t\t\t// An extension may define more than one factory.", "-\t\t\tfor(int j = 0; j < configElements.length; j++)", "+\t\t\t// getNamespace() returns the plugin id", "+\t\t\tString pluginId = extension.getNamespace();", "+\t\t\t// Iterate over the children of the extension to find one named \"factories\".", "+\t\t\tfor(IConfigurationElement factories : extension.getConfigurationElements())", "-\t\t\t\tString elementName = configElements[j].getName();", "-\t\t\t\tif ( \"factory\".equals( elementName ) ) //$NON-NLS-1$ - name of configElement ", "-\t\t\t\t{ ", "-\t\t\t\t\tString pluginId = extensions[i].getNamespace();", "-\t\t\t\t\tPluginFactoryContainer container = containers.get(pluginId);", "-\t\t\t\t\tif ( container == null )", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// getNamespace() returns the plugin id", "-\t\t\t\t\t\tcontainer = new PluginFactoryContainer(pluginId);", "-\t\t\t\t\t\tcontainers.put( pluginId, container );", "+\t\t\t\tif (!\"factories\".equals(factories.getName())) { //$NON-NLS-1$ - name of configElement ", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t// Get enableDefault.  If the attribute is missing, default to true.", "+\t\t\t\tString enableDefaultStr = factories.getAttribute(\"enableDefault\");", "+\t\t\t\tboolean enableDefault = true;", "+\t\t\t\tif (\"false\".equals(enableDefaultStr)) {", "+\t\t\t\t\tenableDefault = false;", "+\t\t\t\t}", "+\t\t\t\t// Iterate over the children of the \"factories\" element to find all the ones named \"factory\".", "+\t\t\t\tfor (IConfigurationElement factory : factories.getChildren()) {", "+\t\t\t\t\tif (!\"factory\".equals(factory.getName())) {", "+\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tcontainer.addFactoryName( configElements[j].getAttribute(\"class\") );", "+\t\t\t\t\tPluginContents pc = plugins.get(pluginId);", "+\t\t\t\t\tif ( pc == null )", "+\t\t\t\t\t{", "+\t\t\t\t\t\tPluginFactoryContainer fc = new PluginFactoryContainer(pluginId);", "+\t\t\t\t\t\tpc = new PluginContents(fc, enableDefault);", "+\t\t\t\t\t\tplugins.put( pluginId, pc );", "+\t\t\t\t\t}", "+\t\t\t\t\tpc.fc.addFactoryName( factory.getAttribute(\"class\") );", "-\t\tList<PluginFactoryContainer> list = new ArrayList<PluginFactoryContainer>(containers.values());", "-\t\t", "-\t\treturn list;", "+\t\tMap<FactoryContainer, Boolean> map = new LinkedHashMap<FactoryContainer, Boolean>();", "+\t\tfor (PluginContents pc : plugins.values()) {", "+\t\t\tmap.put(pc.fc, new Boolean(pc.b));", "+\t\t}", "+\t\treturn map;"]}], "num": 36709}
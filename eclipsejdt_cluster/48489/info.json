{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efba6fa2839a911827071ec256a13cc6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bd33865db30ca45a5b13b9a8466d3a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic CompilationUnit[] getCompilationUnits() \t\tthrows InvalidInputException", "signatureAfterChange": " \tpublic CompilationUnit[] getCompilationUnits() \t\tthrows InvalidInputException", "diff": ["-\t\tint fileCount = filenames.length;", "+\t\tint fileCount = this.filenames.length;", "-\t\tString defaultEncoding = (String) options.get(CompilerOptions.OPTION_Encoding);", "+\t\tString defaultEncoding = (String) this.options.get(CompilerOptions.OPTION_Encoding);", "-\t\t\tchar[] charName = filenames[i].toCharArray();", "+\t\t\tchar[] charName = this.filenames[i].toCharArray();", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.more\", filenames[i])); //$NON-NLS-1$", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.more\", this.filenames[i])); //$NON-NLS-1$", "-\t\t\tFile file = new File(filenames[i]);", "+\t\t\tFile file = new File(this.filenames[i]);", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.missing\", filenames[i])); //$NON-NLS-1$", "-\t\t\tString encoding = encodings[i];", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.missing\", this.filenames[i])); //$NON-NLS-1$", "+\t\t\tString encoding = this.encodings[i];", "-\t\t\tunits[i] = new CompilationUnit(null, filenames[i], encoding);", "+\t\t\tunits[i] = new CompilationUnit(null, this.filenames[i], encoding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31636bf3bcb055f0f091dade57b71ea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "signatureAfterChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "diff": ["-\t\tif(expectedTypes != null && proposalType != null) {", "-\t\t\tfor (int i = 0; i <= expectedTypesPtr; i++) {", "-\t\t\t\tif(CharOperation.equals(expectedTypes[i].qualifiedPackageName(), proposalType.qualifiedPackageName()) &&", "-\t\t\t\t\tCharOperation.equals(expectedTypes[i].qualifiedSourceName(), proposalType.qualifiedSourceName())) {", "+\t\tif(this.expectedTypes != null && proposalType != null) {", "+\t\t\tfor (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\tif(CharOperation.equals(this.expectedTypes[i].qualifiedPackageName(), proposalType.qualifiedPackageName()) &&", "+\t\t\t\t\tCharOperation.equals(this.expectedTypes[i].qualifiedSourceName(), proposalType.qualifiedSourceName())) {", "-\t\t\t\tif((expectedTypesFilter & SUBTYPE) != 0", "-\t\t\t\t\t&& proposalType.isCompatibleWith(expectedTypes[i])) {", "+\t\t\t\tif((this.expectedTypesFilter & SUBTYPE) != 0", "+\t\t\t\t\t&& proposalType.isCompatibleWith(this.expectedTypes[i])) {", "-\t\t\t\tif((expectedTypesFilter & SUPERTYPE) != 0", "-\t\t\t\t\t&& expectedTypes[i].isCompatibleWith(proposalType)) {", "+\t\t\t\tif((this.expectedTypesFilter & SUPERTYPE) != 0", "+\t\t\t\t\t&& this.expectedTypes[i].isCompatibleWith(proposalType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c5e7ba39c573f7696c38dad25f11cd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a87480d5b5d59aa86287e7fabbb253a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "c9050a3a9594b7d361850fa9a3880d65c49e6aec", "commitAfterChange": "861f1162953e56602b4d7507e52e1f13733854c4", "methodNumberBeforeChange": 294, "methodNumberAfterChange": 295, "signatureBeforeChange": "\r public final void writeSignedWord(int value)", "signatureAfterChange": "\r public final void writeSignedWord(int value)", "diff": ["-\t\tbCodeStream[classFileOffset++] = (byte) (value >> 24);\r", "+\t\tbCodeStream[classFileOffset++] = (byte) ((value & 0xFF000000) >> 24);\r", "-\t\tresizeByteArray((byte) (value >> 24));\r", "+\t\tresizeByteArray((byte) ((value & 0xFF000000) >> 24));\r", "-\t\tbCodeStream[classFileOffset++] = (byte) (value >> 16);\r", "+\t\tbCodeStream[classFileOffset++] = (byte) ((value & 0xFF0000) >> 16);\r", "-\t\tresizeByteArray((byte) (value >> 16));\r", "+\t\tresizeByteArray((byte) ((value & 0xFF0000) >> 16));\r", "-\t\tbCodeStream[classFileOffset++] = (byte) (value >> 8);\r", "+\t\tbCodeStream[classFileOffset++] = (byte) ((value & 0xFF00) >> 8);\r", "-\t\tresizeByteArray((byte) (value >> 8));\r", "+\t\tresizeByteArray((byte) ((value & 0xFF00) >> 8));\r", "-\t\tbCodeStream[classFileOffset++] = (byte) value;\r", "+\t\tbCodeStream[classFileOffset++] = (byte) (value & 0xFF);\r", "-\t\tresizeByteArray((byte) value);\r", "+\t\tresizeByteArray((byte) (value & 0xFF));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbfe38833dc2f212d237eed66fda878b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\tif ((operationTypeID = implicitConversion >> 4) == T_String || operationTypeID == T_Object) {", "+\tif ((operationTypeID = this.implicitConversion >> 4) == T_String || operationTypeID == T_Object) {", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);\t\t\t", "+\t\t\tcodeStream.generateConstant(expression.constant, this.implicitConversion);\t\t\t", "-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {"]}], "num": 48489}
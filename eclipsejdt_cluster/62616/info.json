{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5e30ea6ae756560d983c363124ba534", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90d150bd91b97772f190f6c7023471ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8ff32a67561d85d16e0a42904446ef1ba698078c", "commitAfterChange": "65583c0d396b6d77e17bf3a8f03add75b5a18d0d", "methodNumberBeforeChange": 293, "methodNumberAfterChange": 294, "signatureBeforeChange": " protected void consumeExplicitThisParameter()", "signatureAfterChange": " protected void consumeExplicitThisParameter(boolean isQualified)", "diff": ["-protected void consumeExplicitThisParameter() {", "+}", "+protected void consumeExplicitThisParameter(boolean isQualified) {", "+\t// VariableDeclaratorIdOrThis ::= Name '.' 'this'", "+", "+\tTypeReference qualifyingTypeReference = null;", "+\tif (isQualified) {", "+\t\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "+\t\tpushOnGenericsLengthStack(0); // handle type arguments", "+\t\tqualifyingTypeReference = getUnannotatedTypeReference(0);", "+\t}", "+\tpushOnExpressionStack(qualifyingTypeReference);", "-\tpushOnIntStack(0);  // extended dimensions..\t", "+\tpushOnIntStack(0);  // extended dimensions ...", "+\tpushOnIntStack(0);  // signal explicit this"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f1f94c94f090ab01a99f9166a37dd30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d57293f4f12e1bef48b48f8eb4effbb7e4554bd3", "commitAfterChange": "80133b35a6b0bcde494737060ceebe86e07b8204", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 257, "signatureBeforeChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference)", "signatureAfterChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference, boolean tolerateAnnotationsOnDimensions)", "diff": ["+}", "+private void rejectIllegalTypeAnnotations(TypeReference typeReference, boolean tolerateAnnotationsOnDimensions) {", "+\tboolean tolerated = false;", "-\t\t\tproblemReporter().misplacedTypeAnnotations(misplacedAnnotations[0], misplacedAnnotations[misplacedAnnotations.length - 1]);", "+\t\t\tif (tolerateAnnotationsOnDimensions) {", "+\t\t\t\tproblemReporter().toleratedMisplacedTypeAnnotations(misplacedAnnotations[0], misplacedAnnotations[misplacedAnnotations.length - 1]);", "+\t\t\t\ttolerated = true;", "+\t\t\t}", "+\t\t\telse ", "+\t\t\t\tproblemReporter().misplacedTypeAnnotations(misplacedAnnotations[0], misplacedAnnotations[misplacedAnnotations.length - 1]);", "-\ttypeReference.annotations = null;", "-\ttypeReference.setAnnotationsOnDimensions(null);", "-\ttypeReference.bits &= ~ASTNode.HasTypeAnnotations;", "+\tif (!tolerated) {", "+\t\ttypeReference.annotations = null;", "+\t\ttypeReference.setAnnotationsOnDimensions(null);", "+\t\ttypeReference.bits &= ~ASTNode.HasTypeAnnotations;", "+\t}"]}], "num": 62616}
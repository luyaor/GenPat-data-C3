{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c9cb150eeef0537e1594ed1d0e912f6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2089fd40c85ba1187d70f33fad30376f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 266, "signatureBeforeChange": " public void test119()", "signatureAfterChange": " public void test119()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runNegativeTest(", "-    \t\tnew String[] {", "-    \t\t\t\"X.java\",", "-    \t\t\t\"class Y<E> {\\n\" + ", "-    \t\t\t\"\tE foo() {\\n\" + ", "-    \t\t\t\"\t\treturn null;\\n\" + ", "-    \t\t\t\"\t}\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"\\n\" + ", "-    \t\t\t\"public class X<T> extends Y<T> {\\n\" + ", "-    \t\t\t\"\t@Override\\n\" + ", "-    \t\t\t\"\tT foo() {\\n\" + ", "-    \t\t\t\"\t\treturn null;\\n\" + ", "-    \t\t\t\"\t}\\n\" + ", "-    \t\t\t\"}\"", "-    \t\t},", "-    \t\t\"----------\\n\" + ", "-    \t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "-    \t\t\"\tT foo() {\\n\" + ", "-    \t\t\"\t  ^^^^^\\n\" + ", "-    \t\t\"The method X<T>.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\",", "-    \t\tnull,", "-    \t\ttrue,", "-    \t\toptions", "-    \t);", "-\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y<E> {\\n\" + ", "+\t\t\t\"\tE foo() {\\n\" + ", "+\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X<T> extends Y<T> {\\n\" + ", "+\t\t\t\"\t@Override\\n\" + ", "+\t\t\t\"\tT foo() {\\n\" + ", "+\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tT foo() {\\n\" + ", "+\t\t\"\t  ^^^^^\\n\" + ", "+\t\t\"The method X<T>.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tnull,", "+\t\ttrue,", "+\t\toptions", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448fff14fa41dc31e83013cae658dd91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 261, "methodNumberAfterChange": 261, "signatureBeforeChange": " public void test114()", "signatureAfterChange": " public void test114()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runNegativeTest(", "-    \t\tnew String[] {", "-    \t\t\t\"X.java\",", "-    \t\t\t\"class Y {\\n\" + ", "-    \t\t\t\"  void foo() {}\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"public class X extends Y {\\n\" + ", "-    \t\t\t\"  @Override\\n\" +", "-    \t\t\t\"  void foo() {\\n\" + ", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\"", "-    \t\t},", "-    \t\t\"----------\\n\" + ", "-    \t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-    \t\t\"\tvoid foo() {\\n\" + ", "-    \t\t\"\t     ^^^^^\\n\" + ", "-    \t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\",", "-    \t\tnull,", "-    \t\ttrue,", "-    \t\toptions", "-    \t);", "-\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y {\\n\" + ", "+\t\t\t\"  void foo() {}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"  @Override\\n\" +", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tnull,", "+\t\ttrue,", "+\t\toptions", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9239670b17de13b0131f90522ee98b75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 265, "signatureBeforeChange": " public void test118()", "signatureAfterChange": " public void test118()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runNegativeTest(", "-    \t\tnew String[] {", "-    \t\t\t\"X.java\",", "-    \t\t\t\"class Y<E> {\\n\" + ", "-    \t\t\t\"\t<U extends E> U foo() {\\n\" + ", "-    \t\t\t\"\t\treturn null;\\n\" + ", "-    \t\t\t\"\t}\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"\\n\" + ", "-    \t\t\t\"public class X<T> extends Y<T> {\\n\" + ", "-    \t\t\t\"\t@Override\\n\" + ", "-    \t\t\t\"\t<V extends T> V foo() {\\n\" + ", "-    \t\t\t\"\t\treturn null;\\n\" + ", "-    \t\t\t\"\t}\\n\" + ", "-    \t\t\t\"}\"", "-    \t\t},", "-    \t\t\"----------\\n\" + ", "-    \t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "-    \t\t\"\t<V extends T> V foo() {\\n\" + ", "-    \t\t\"\t                ^^^^^\\n\" + ", "-    \t\t\"The method X<T>.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\",", "-    \t\tnull,", "-    \t\ttrue,", "-    \t\toptions", "-    \t);", "-\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y<E> {\\n\" + ", "+\t\t\t\"\t<U extends E> U foo() {\\n\" + ", "+\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X<T> extends Y<T> {\\n\" + ", "+\t\t\t\"\t@Override\\n\" + ", "+\t\t\t\"\t<V extends T> V foo() {\\n\" + ", "+\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\t<V extends T> V foo() {\\n\" + ", "+\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\"The method X<T>.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tnull,", "+\t\ttrue,", "+\t\toptions", "+\t);"]}], "num": 14752}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7ded4c2f04f0a79efeef28628a2ff28", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c9de3181086be9966d2422de7cea728", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "d4ec2cadb3e7536bb815d2a43adb7b51f267f01a", "commitAfterChange": "78310b6881d29e4104dd5ac0bf79c342409c9931", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate Annotation newAnnotation(AST ast, IAnnotationBinding annotation, ImportRewriteContext context)", "signatureAfterChange": " \tpublic Annotation addAnnotation(IAnnotationBinding annotation, AST ast, ImportRewriteContext context)", "diff": ["+\t */", "+\tpublic Annotation addAnnotation(IAnnotationBinding annotation, AST ast, ImportRewriteContext context) {", "+\t\tType type = addImport(annotation.getAnnotationType(), ast, context);", "+\t\tName name;", "+\t\tif (type instanceof SimpleType) {", "+\t\t\tSimpleType simpleType = (SimpleType) type;", "+\t\t\tname = simpleType.getName();", "+\t\t\t// cut 'name' loose from its parent, so that it can be reused", "+\t\t\tsimpleType.setName(ast.newName(\"a\")); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tname = ast.newName(\"invalid\"); //$NON-NLS-1$", "+\t\t}", "+", "+\t\tIMemberValuePairBinding[] mvps= annotation.getDeclaredMemberValuePairs();", "+\t\tif (mvps.length == 0) {", "+\t\t\tMarkerAnnotation result = ast.newMarkerAnnotation();", "+\t\t\tresult.setTypeName(name);", "+\t\t\treturn result;", "+\t\t} else if (mvps.length == 1 && \"value\".equals(mvps[0].getName())) { //$NON-NLS-1$", "+\t\t\tSingleMemberAnnotation result= ast.newSingleMemberAnnotation();", "+\t\t\tresult.setTypeName(name);", "+\t\t\tObject value = mvps[0].getValue();", "+\t\t\tif (value != null)", "+\t\t\t\tresult.setValue(addAnnotation(ast, value, context));", "+\t\t\treturn result;", "+\t\t} else {", "+\t\t\tNormalAnnotation result = ast.newNormalAnnotation();", "+\t\t\tresult.setTypeName(name);", "+\t\t\tfor (int i= 0; i < mvps.length; i++) {", "+\t\t\t\tIMemberValuePairBinding mvp = mvps[i];", "+\t\t\t\tMemberValuePair mvpNode = ast.newMemberValuePair();", "+\t\t\t\tmvpNode.setName(ast.newSimpleName(mvp.getName()));", "+\t\t\t\tObject value = mvp.getValue();", "+\t\t\t\tif (value != null)", "+\t\t\t\t\tmvpNode.setValue(addAnnotation(ast, value, context));", "+\t\t\t\tresult.values().add(mvpNode);", "+\t\t\t}", "+\t\t\treturn result;", "+\t\t}", "+\t}", "-\tprivate Annotation newAnnotation(AST ast, IAnnotationBinding annotation, ImportRewriteContext context) {", "-\t\tType type = addImport(annotation.getAnnotationType(), ast, context);", "-\t\tName name;", "-\t\tif (type instanceof SimpleType) {", "-\t\t\tSimpleType simpleType = (SimpleType) type;", "-\t\t\tname = simpleType.getName();", "-\t\t\t// cut 'name' loose from its parent, so that it can be reused", "-\t\t\tsimpleType.setName(ast.newName(\"a\")); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tname = ast.newName(\"invalid\"); //$NON-NLS-1$", "-\t\t}", "-", "-\t\tIMemberValuePairBinding[] mvps= annotation.getDeclaredMemberValuePairs();", "-\t\tif (mvps.length == 0) {", "-\t\t\tMarkerAnnotation result = ast.newMarkerAnnotation();", "-\t\t\tresult.setTypeName(name);", "-\t\t\treturn result;", "-\t\t} else if (mvps.length == 1 && \"value\".equals(mvps[0].getName())) { //$NON-NLS-1$", "-\t\t\tSingleMemberAnnotation result= ast.newSingleMemberAnnotation();", "-\t\t\tresult.setTypeName(name);", "-\t\t\tObject value = mvps[0].getValue();", "-\t\t\tif (value != null)", "-\t\t\t\tresult.setValue(newAnnotationValue(ast, value, context));", "-\t\t\treturn result;", "-\t\t} else {", "-\t\t\tNormalAnnotation result = ast.newNormalAnnotation();", "-\t\t\tresult.setTypeName(name);", "-\t\t\tfor (int i= 0; i < mvps.length; i++) {", "-\t\t\t\tIMemberValuePairBinding mvp = mvps[i];", "-\t\t\t\tMemberValuePair mvpNode = ast.newMemberValuePair();", "-\t\t\t\tmvpNode.setName(ast.newSimpleName(mvp.getName()));", "-\t\t\t\tObject value = mvp.getValue();", "-\t\t\t\tif (value != null)", "-\t\t\t\t\tmvpNode.setValue(newAnnotationValue(ast, value, context));", "-\t\t\t\tresult.values().add(mvpNode);", "-\t\t\t}", "-\t\t\treturn result;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39f189f7d6544f38a0bc381b62e3bd51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "d4ec2cadb3e7536bb815d2a43adb7b51f267f01a", "commitAfterChange": "78310b6881d29e4104dd5ac0bf79c342409c9931", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate Expression newAnnotationValue(AST ast, Object value, ImportRewriteContext context)", "signatureAfterChange": "  \tprivate Expression addAnnotation(AST ast, Object value, ImportRewriteContext context)", "diff": ["-", "-\tprivate Expression newAnnotationValue(AST ast, Object value, ImportRewriteContext context) {", "+\tprivate Expression addAnnotation(AST ast, Object value, ImportRewriteContext context) {", "-\t\t\treturn newAnnotation(ast, (IAnnotationBinding) value, context);", "+\t\t\treturn addAnnotation((IAnnotationBinding) value, ast, context);", "-\t\t\t\treturn newAnnotationValue(ast, values[0], context);", "+\t\t\t\treturn addAnnotation(ast, values[0], context);", "-\t\t\t\texpressions.add(newAnnotationValue(ast, values[i], context));", "+\t\t\t\texpressions.add(addAnnotation(ast, values[i], context));"]}], "num": 34951}
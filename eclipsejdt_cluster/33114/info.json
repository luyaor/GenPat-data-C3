{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79ac91be295db86f31585af336c47bc5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ebe8277550cce32b97869ccee3ba6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate String probeFormatting(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\tprivate String probeFormatting(String source, int indentationLevel, int[] positions, String lineSeparator, Map options) {", "-\t\tExpression expression = parseExpression(source.toCharArray(), options);", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "+\t\tExpression expression = parseExpression(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatExpression(source, indentationLevel, positions, lineSeparator, options, expression);", "+\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, offset, length);", "-\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), options);", "+\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatStatements(source, indentationLevel, positions, lineSeparator, options, constructorDeclaration);", "+\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);", "-\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), options);", "+\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options, bodyDeclarations);", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "-\t\treturn formatCompilationUnit(source, indentationLevel, positions, lineSeparator, options);", "+\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, offset, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8fbb7e455c136d835d6860f2517b191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "diff": ["-\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "+\t\t", "+\t\tIRegion coveredRegion = getCoveredRegion(regions);", "+\t\tint offset = coveredRegion.getOffset();", "+\t\tint length = coveredRegion.getLength();", "+\t\t", "-\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, regions);", "-\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, regions);", "-\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, regions);", "-\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, offset, length);", "+\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, regions);", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, regions);", "-\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);", "+\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, regions);", "-\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, offset, length);", "+\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions);", "+\t}"]}], "num": 33114}
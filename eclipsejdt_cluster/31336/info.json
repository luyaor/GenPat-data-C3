{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61c244c90b78521195fc9bee57960d85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a8b9367afba4126192c3d4d1c14eeb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " void initialize(boolean reuseExistingFile) throws IOException", "signatureAfterChange": " void initialize(boolean reuseExistingFile) throws IOException", "diff": ["-}", "-\tFile indexFile = getIndexFile();", "-\tif (indexFile.exists()) {", "+\tif (this.indexFile.exists()) {", "-\t\t\tRandomAccessFile file = new RandomAccessFile(this.fileName, \"r\"); //$NON-NLS-1$", "+\t\t\tRandomAccessFile file = new RandomAccessFile(this.indexFile, \"r\"); //$NON-NLS-1$", "-\t\tif (!indexFile.delete()) {", "+\t\tif (!this.indexFile.delete()) {", "-\t\t\t\tSystem.out.println(\"initialize - Failed to delete index \" + this.fileName); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to delete index \" + this.fileName); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"initialize - Failed to delete index \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tthrow new IOException(\"Failed to delete index \" + this.indexFile); //$NON-NLS-1$", "-\tif (indexFile.createNewFile()) {", "-\t\tRandomAccessFile file = new RandomAccessFile(this.fileName, \"rw\"); //$NON-NLS-1$", "+\tif (this.indexFile.createNewFile()) {", "+\t\tRandomAccessFile file = new RandomAccessFile(this.indexFile, \"rw\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"initialize - Failed to create new index \" + this.fileName); //$NON-NLS-1$", "-\t\tthrow new IOException(\"Failed to create new index \" + this.fileName); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"initialize - Failed to create new index \" + this.indexFile); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Failed to create new index \" + this.indexFile); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ecb0df178ae8acd136a7c5e08f279b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ea916b0462fec6996e619f84c30f348e2877686a", "commitAfterChange": "558c64a899c0debc518d6eb92e85f37b05902eba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding expectedResultType()", "signatureAfterChange": "  \tpublic TypeBinding expectedResultType()", "diff": ["-\t\tMethodBinding singleAbstractMethod = expectedType().getSingleAbstractMethod();", "-\t\tif (singleAbstractMethod != null) return singleAbstractMethod.returnType;", "-\t\treturn TypeBinding.NULL;", "+\t\treturn this.singleAbstractMethod != null && this.singleAbstractMethod.isValidBinding() ? this.singleAbstractMethod.returnType : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9166d6a8167444830b5a11a069e96a71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-", "+\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "-\t\tReferenceBinding allocatedType = this.superTypeBinding == null ? this.binding.declaringClass : this.superTypeBinding;", "-\t\t\t(ReferenceBinding) allocatedType.erasure(),", "+\t\t\t(ReferenceBinding)(this.anonymousType == null ", "+\t\t\t\t? this.binding.declaringClass.erasure()", "+\t\t\t\t: this.binding.declaringClass.superclass().erasure()),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "951b59fc3cf336f00a4ee38e70c273be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "commitAfterChange": "ab734870d680bdde73d51371df0336cce36fb2b0", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 216, "signatureBeforeChange": " public void initializeScanner()", "signatureAfterChange": " public void initializeScanner()", "diff": ["-\tCompilerOptions options = this.problemReporter.options;", "-\t\toptions.getSeverity(CompilerOptions.NonExternalizedString) != ProblemSeverities.Ignore /*nls*/, ", "-\t\tthis.sourceLevel /*sourceLevel*/, ", "-\t\toptions.taskTags/*taskTags*/,", "-\t\toptions.taskPriorites/*taskPriorities*/);", "+\t\tthis.options.getSeverity(CompilerOptions.NonExternalizedString) != ProblemSeverities.Ignore /*nls*/, ", "+\t\tthis.options.sourceLevel /*sourceLevel*/, ", "+\t\tthis.options.taskTags/*taskTags*/,", "+\t\tthis.options.taskPriorites/*taskPriorities*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baacb2fecb2461f3450ab2066222fdcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods)", "diff": ["+}", "-\t\tproblemReporter(currentMethod).varargsConflict(currentMethod, inheritedMethod);", "-", "-\tMethodBinding originalInherited = inheritedMethod.original();", "+\t\tproblemReporter(currentMethod).varargsConflict(currentMethod, inheritedMethod, this.type);", "+\tMethodBinding originalInherited = inheritedMethod.original();", "-\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "-//\t\t} else if (inheritedMethod.hasSubstitutedReturnType() && originalInherited.returnType.leafComponentType().isTypeVariable()) {", "-\t\t} else if (originalInherited.returnType.leafComponentType().isTypeVariable()) { // ", "-\t\t\t\tif (((TypeVariableBinding) originalInherited.returnType.leafComponentType()).declaringElement == originalInherited) { // see 81618 - type variable from inherited method", "-\t\t\t\t\tTypeBinding currentReturnType = currentMethod.returnType.leafComponentType();", "-\t\t\t\t\tif (!currentReturnType.isTypeVariable() || ((TypeVariableBinding) currentReturnType).declaringElement != currentMethod)", "-\t\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "-\t\t\t\t}", "+\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "+\t\t} else if (inheritedMethod.hasSubstitutedReturnType() && originalInherited.returnType.leafComponentType().isTypeVariable()) {", "+\t\t\tif (((TypeVariableBinding) originalInherited.returnType.leafComponentType()).declaringElement == originalInherited) { // see 81618 - type variable from inherited method", "+\t\t\t\tTypeBinding currentReturnType = currentMethod.returnType.leafComponentType();", "+\t\t\t\tif (!currentReturnType.isTypeVariable() || ((TypeVariableBinding) currentReturnType).declaringElement != currentMethod)", "+\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "+\t\t\t}"]}], "num": 31336}
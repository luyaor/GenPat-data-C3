{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1b9a395de4cd32d0fe94d43050a144c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72fd488919e283a99c29c5e467799eac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, \t\t\tLabel trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedBoolean(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "-\t\tboolean valueRequired) {", "-\t\t\t", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);", "-\t\t\treturn;", "-\t\t}", "-\t\tConstant condConst;", "-\t\tif ((condConst = left.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t// <something equivalent to true> && x", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t} else {", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t// <something equivalent to false> && x", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (falseLabel != null) {", "-\t\t\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "-\t\t\tif (mergedInitStateIndex != -1) {", "-\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tmergedInitStateIndex);", "-\t\t\treturn;", "-\t\t}", "-\t\tif ((condConst = right.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t// x && <something equivalent to true>", "-\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t} else {", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t}", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t\t// x && <something equivalent to false>", "-\t\t\t\tLabel internalFalseLabel = new Label(codeStream);", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tinternalFalseLabel, ", "-\t\t\t\t\ttrue);", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t\tinternalFalseLabel.place();", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (falseLabel != null) {", "-\t\t\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "-\t\t\t}", "-\t\t\tif (mergedInitStateIndex != -1) {", "-\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tmergedInitStateIndex);", "-\t\t\t}", "-\t\t\treturn;", "-\t\t}", "-\t\t// default case", "-\t\tif (falseLabel == null) {", "-\t\t\tif (trueLabel != null) {", "-\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\tLabel internalFalseLabel = new Label(codeStream);", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tinternalFalseLabel,", "-\t\t\t\t\ttrue); // need value, e.g. if (a == 1 && ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a!=1", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\tinternalFalseLabel.place();", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// implicit falling through the TRUE case", "-\t\t\tif (trueLabel == null) {", "-\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, null, falseLabel, true); // need value, e.g. if (a == 1 && ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a!=1", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t} else {", "-\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tmergedInitStateIndex);", "+\t */", "+\tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream,", "+\t\t\tLabel trueLabel, Label falseLabel, boolean valueRequired) {", "+", "+\t\tif (constant != Constant.NotAConstant) {", "+\t\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// <expr> && true --> <expr>", "+\t\tConstant cst = right.constant;", "+\t\tif (cst != NotAConstant && cst.booleanValue() == true) {", "+\t\t\tint pc = codeStream.position;", "+\t\t\tthis.left.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);", "+\t\t\tif (mergedInitStateIndex != -1) {", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\t\t}\t\t\t", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tcst = left.optimizedBooleanConstant();", "+\t\tboolean leftIsConst = cst != NotAConstant;", "+\t\tboolean leftIsTrue = leftIsConst && cst.booleanValue() == true;", "+", "+\t\tcst = right.optimizedBooleanConstant();", "+\t\tboolean rightIsConst = cst != NotAConstant;", "+\t\tboolean rightIsTrue = rightIsConst && cst.booleanValue() == true;", "+", "+\t\t// default case", "+\t\tgenerateOperands : {", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tLabel internalFalseLabel = new Label(codeStream);", "+\t\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, null,", "+\t\t\t\t\t\t\tinternalFalseLabel, !leftIsConst); ", "+\t\t\t\t\t// need value, e.g. if (a == 1 && ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a!=1", "+\t\t\t\t\tif (leftIsConst && !leftIsTrue) {", "+\t\t\t\t\t\tinternalFalseLabel.place();", "+\t\t\t\t\t\tbreak generateOperands; // no need to generate right operand", "+\t\t\t\t\t}", "+\t\t\t\t\tif (rightInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream", "+\t\t\t\t\t\t\t\t.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "+\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(currentScope, codeStream, trueLabel, null,", "+\t\t\t\t\t\t\tvalueRequired && !rightIsConst);", "+\t\t\t\t\tif (valueRequired && rightIsConst && rightIsTrue) {", "+\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "+\t\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\t\t\t}", "+\t\t\t\t\tinternalFalseLabel.place();", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, null, falseLabel, !leftIsConst); ", "+\t\t\t\t\t// need value, e.g. if (a == 1 && ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a!=1", "+\t\t\t\t\tif (leftIsConst && !leftIsTrue) {", "+\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "+\t\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\t\t\t\tbreak generateOperands; // no need to generate right operand", "+\t\t\t\t\t}", "+\t\t\t\t\tif (rightInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream", "+\t\t\t\t\t\t\t\t.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "+\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(currentScope, codeStream, null, falseLabel,", "+\t\t\t\t\t\t\tvalueRequired && !rightIsConst);", "+\t\t\t\t\tif (valueRequired && rightIsConst && !rightIsTrue) {", "+\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "+\t\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (mergedInitStateIndex != -1) {", "+\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3e0f3a08fcdd030fa050676613211f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\tpublic void generateOptimizedBoolean(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "-\t\tboolean valueRequired) {", "+\tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {", "+", "-\t\tConstant condConst;", "-\t\tif ((condConst = left.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t// <something equivalent to true> || x", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\t// <something equivalent to false> || x", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t} else {", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t}", "-\t\t\t}", "+", "+\t\t// <expr> || false --> <expr>", "+\t\tConstant cst = right.constant;", "+\t\tif (cst != NotAConstant && cst.booleanValue() == false) {", "+\t\t\tint pc = codeStream.position;", "+\t\t\tthis.left.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);", "-\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tmergedInitStateIndex);", "-\t\t\t}", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\t\t}\t\t\t", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\tif ((condConst = right.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t// x || <something equivalent to true>", "-\t\t\t\tLabel internalTrueLabel = new Label(codeStream);", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tinternalTrueLabel,", "-\t\t\t\t\tnull,", "-\t\t\t\t\ttrue); ", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t\tinternalTrueLabel.place();", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\t// x || <something equivalent to false>", "-\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t} else {", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t}", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tfalse);", "-\t\t\t}", "-\t\t\tif (mergedInitStateIndex != -1) {", "-\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tmergedInitStateIndex);", "-\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+\t\t", "+\t\tcst = left.optimizedBooleanConstant();", "+\t\tboolean leftIsConst = cst != NotAConstant;", "+\t\tboolean leftIsTrue = leftIsConst && cst.booleanValue() == true;", "+", "+\t\tcst = right.optimizedBooleanConstant();", "+\t\tboolean rightIsConst = cst != NotAConstant;", "+\t\tboolean rightIsTrue = rightIsConst && cst.booleanValue() == true;", "+", "-\t\tif (falseLabel == null) {", "-\t\t\tif (trueLabel != null) {", "-\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, trueLabel, null, true); // need value, e.g. if (a == 1 || ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a==1", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "+\t\tgenerateOperands : {", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, trueLabel, null, !leftIsConst); ", "+\t\t\t\t\t// need value, e.g. if (a == 1 || ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a==1", "+\t\t\t\t\tif (leftIsConst && leftIsTrue) {", "+\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "+\t\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\t\t\t\tbreak generateOperands; // no need to generate right operand", "+\t\t\t\t\t}", "+\t\t\t\t\tif (rightInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream", "+\t\t\t\t\t\t\t\t.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "+\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(currentScope, codeStream, trueLabel, null, valueRequired && !rightIsConst);", "+\t\t\t\t\tif (valueRequired && rightIsConst && rightIsTrue) {", "+\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "+\t\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// implicit falling through the TRUE case", "-\t\t\tif (trueLabel == null) {", "-\t\t\t\tLabel internalTrueLabel = new Label(codeStream);", "-\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tinternalTrueLabel,", "-\t\t\t\t\tnull,", "-\t\t\t\t\ttrue);// need value, e.g. if (a == 1 || ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a==1", "-\t\t\t\tif (rightInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\tinternalTrueLabel.place();", "-\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tLabel internalTrueLabel = new Label(codeStream);", "+\t\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, internalTrueLabel, null, !leftIsConst); ", "+\t\t\t\t\t// need value, e.g. if (a == 1 || ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a==1", "+\t\t\t\t\tif (leftIsConst && leftIsTrue) {", "+\t\t\t\t\t\tinternalTrueLabel.place();", "+\t\t\t\t\t\tbreak generateOperands; // no need to generate right operand", "+\t\t\t\t\t}", "+\t\t\t\t\tif (rightInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream", "+\t\t\t\t\t\t\t\t.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);", "+\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(currentScope, codeStream, null, falseLabel, valueRequired && !rightIsConst);", "+\t\t\t\t\tif (valueRequired && rightIsConst) {", "+\t\t\t\t\t\tif (!rightIsTrue) {", "+\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "+\t\t\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tinternalTrueLabel.place();", "+\t\t\t\t} else {", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t}", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tmergedInitStateIndex);", "+\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);"]}], "num": 37927}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cc623d167553ad9fd20532458e3af30", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "176f36aa6670fc4cb4fb7aae401cd016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test0092() throws JavaModelException", "signatureAfterChange": " \tpublic void test0092() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  public enum Rank { DEUCE, THREE, FOUR, FIVE, SIX,\\n\" +", "-\t\t\t\t\"    SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE }\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"  //public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES }\\n\" +", "-\t\t\t\t\"  public enum Suit{\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"  private X(int rank, int suit) {  \\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  \\n\" +", "-\t\t\t\t\"  private static final List<X> protoDeck = new ArrayList<X>();\\n\" +", "-\t\t\t\t\"  \\n\" +", "-\t\t\t\t\"  public static ArrayList<X> newDeck() {\\n\" +", "-\t\t\t\t\"      return new ArrayList<X>(protoDeck); // Return copy of prototype deck\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy,", "-\t\t\t\tfalse);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public enum Rank { DEUCE, THREE, FOUR, FIVE, SIX,\\n\" +", "+\t\t\t\"    SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE }\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"  //public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES }\\n\" +", "+\t\t\t\"  public enum Suit{\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"  private X(int rank, int suit) {  \\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  \\n\" +", "+\t\t\t\"  private static final List<X> protoDeck = new ArrayList<X>();\\n\" +", "+\t\t\t\"  \\n\" +", "+\t\t\t\"  public static ArrayList<X> newDeck() {\\n\" +", "+\t\t\t\"      return new ArrayList<X>(protoDeck); // Return copy of prototype deck\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy,", "+\t\t\tfalse);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21c89591b5fb0ed877311e11d737485", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void test0080() throws JavaModelException", "signatureAfterChange": " \tpublic void test0080() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\t<T extends A> T foo(T t) {\\n\" + ", "-\t\t\t\t\"\t\treturn t;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tnew X().bar();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tvoid bar() {\\n\" + ", "-\t\t\t\t\"\t\tB b = /*start*/foo(new B())/*end*/;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"class A {}\\n\" + ", "-\t\t\t\t\"class B extends A {}\\n\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "-\t\t\tassertTrue(\"Not a parameterized method\", methodBinding.isParameterizedMethod());", "-\t\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\t\\n\" + ", "+\t\t\t\"\t<T extends A> T foo(T t) {\\n\" + ", "+\t\t\t\"\t\treturn t;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\tnew X().bar();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\"\t\tB b = /*start*/foo(new B())/*end*/;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class A {}\\n\" + ", "+\t\t\t\"class B extends A {}\\n\",", "+\t\t\tthis.workingCopy);", "+\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "+\t\tassertTrue(\"Not a parameterized method\", methodBinding.isParameterizedMethod());", "+\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());"]}], "num": 32135}
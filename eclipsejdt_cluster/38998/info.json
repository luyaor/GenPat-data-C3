{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d84ab76d6af856da14f708e4a667f2b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "587611bf9589762d1bb11f3f95401b54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r public void test0028() throws IOException", "signatureAfterChange": "\r public void test0028() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker HashMap<@Readonly String, Object> foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>HashMap<String, @NonNull Object> bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0028\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0028 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object> foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0028\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5f0db90afe4a7d23b83617caf70a27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r public void test0029() throws IOException", "signatureAfterChange": "\r public void test0029() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>HashMap<String, @NonNull Object>.Iterator bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0029\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0029 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0029\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b22664ce60d7ab13d55e6dc42db525", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "\r public void test0111() throws IOException", "signatureAfterChange": "\r public void test0111() throws IOException", "diff": ["-\tString expectedUnitToString =\r", "-\t\t\"class X {\\n\" +\r", "-\t\t\"  public <T>X(T t) {\\n\" +\r", "-\t\t\"    super();\\n\" +\r", "-\t\t\"    System.out.println(t);\\n\" +\r", "-\t\t\"  }\\n\" +\r", "-\t\t\"  public static void main(String[] args) {\\n\" +\r", "-\t\t\"    new <@Readonly String>@Marker @SingleMember(0) X(\\\"SUCCESS\\\");\\n\" +\r", "-\t\t\"  }\\n\" +\r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_DOCUMENT_ELEMENT_PARSER, source.toCharArray(), null, \"test0111\", expectedUnitToString );\r", "+\tString expectedError =\r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0111 (at line 6)\\n\" +\r", "+\t\t\t\"\tnew <@Readonly String> @Marker @SingleMember(0) X(\\\"SUCCESS\\\");\\n\" +\r", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0111\", null);\r"]}], "num": 38998}
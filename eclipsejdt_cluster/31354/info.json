{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41991b8377d540c1e7a126f80728c415", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37613fe3e95205c982f7891b3394b7e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bde9840f9573d77080a23dfde60bdb51dc549649", "commitAfterChange": "e5950298e29dbaf979a85e6f3f4a27d3f4b008e8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["-\t\t\t\tICompilationUnit unitToLookInside = workingCopies[i];", "-\t\t\t\tICompilationUnit original = unitToLookInside.getPrimary();", "-\t\t\t\tthis.unitsToLookInside.put(original, unitToLookInside);", "+\t\t\t\tICompilationUnit workingCopy = workingCopies[i];", "+\t\t\t\tPackageFragment pkg = (PackageFragment) workingCopy.getParent();", "+\t\t\t\tHashMap typeMap = (HashMap) this.unitsToLookInside.get(pkg);", "+\t\t\t\tif (typeMap == null) {", "+\t\t\t\t\ttypeMap = new HashMap();", "+\t\t\t\t\tthis.unitsToLookInside.put(pkg, typeMap);", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tIType[] types = workingCopy.getTypes();", "+\t\t\t\t\tfor (int j = 0, typeLength = types.length; j < typeLength; j++) {", "+\t\t\t\t\t\tIType type = types[j];", "+\t\t\t\t\t\tString typeName = type.getElementName();", "+\t\t\t\t\t\tObject existing = typeMap.get(typeName);", "+\t\t\t\t\t\tif (existing == null) {", "+\t\t\t\t\t\t\ttypeMap.put(typeName, type);", "+\t\t\t\t\t\t} else if (existing instanceof IType) {", "+\t\t\t\t\t\t\ttypeMap.put(typeName, new IType[] {(IType) existing, type});", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tIType[] existingTypes = (IType[]) existing;", "+\t\t\t\t\t\t\tint existingTypeLength = existingTypes.length;", "+\t\t\t\t\t\t\tSystem.arraycopy(existingTypes, 0, existingTypes = new IType[existingTypeLength+1], 0, existingTypeLength);", "+\t\t\t\t\t\t\texistingTypes[length] = type;", "+\t\t\t\t\t\t\ttypeMap.put(typeName, existingTypes);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// working copy doesn't exist -> ignore", "+\t\t\t\t}", "-\t\t\t\tPackageFragment pkg = (PackageFragment) unitToLookInside.getParent();", "+\t\t\t\t// add root of package fragment to cache"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "760e5bbfd89bfb028cf685650fffd766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "9f8931bf92b7966fbd8c101a448f79f7965fbbf9", "commitAfterChange": "3bf5bab95449ec256a601c2551910573083178b4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name)", "signatureAfterChange": " public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, int start, int end)", "diff": ["-public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name) {", "-\tIType type= resolveType(declaringTypePackageName, declaringTypeName,", "-\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "-\tif (type != null) {", "-\t\tIField field= type.getField(new String(name));", "-\t\tif (field.exists()) {", "-\t\t\taddElement(field);", "-\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.print(field.toString());", "-\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, int start, int end) {", "+\tif(isDeclaration) {", "+\t\tIType type= resolveTypeByLocation(declaringTypePackageName, declaringTypeName,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,", "+\t\t\t\tstart, end);", "+\t\tif(type != null) {", "+\t\t\ttry {", "+\t\t\t\tIField[] fields = type.getFields();", "+\t\t\t\tfor (int i = 0; i < fields.length; i++) {", "+\t\t\t\t\tIField field = fields[i];", "+\t\t\t\t\tISourceRange range = field.getNameRange();", "+\t\t\t\t\tif(range.getOffset() <= start", "+\t\t\t\t\t\t\t&& range.getOffset() + range.getLength() >= end", "+\t\t\t\t\t\t\t&& field.getElementName().equals(new String(name))) {", "+\t\t\t\t\t\taddElement(fields[i]);", "+\t\t\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tSystem.out.print(field.toString());", "+\t\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn; // only one method is possible", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\treturn; ", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tIType type= resolveType(declaringTypePackageName, declaringTypeName,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "+\t\tif (type != null) {", "+\t\t\tIField field= type.getField(new String(name));", "+\t\t\tif (field.exists()) {", "+\t\t\t\taddElement(field);", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(field.toString());", "+\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t}"]}], "num": 31354}
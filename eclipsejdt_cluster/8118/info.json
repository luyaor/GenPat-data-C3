{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e9088d1ec0c16e3266bea34d87f5378", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a82820bae26ee8624a49569b8f19299", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "00271ea450a08e464e158f7e4f05b195c1058507", "commitAfterChange": "c0b416aedc7957c92c0ea3ebe495003a2c5390e6", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "-\t\t\t\t\t\t\t\tcursor.arityMax) {", "-\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS);", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity < cursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor);", "-\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor);", "-\t\t\t\t\tint numberOfParens = (expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "-\t\t\t\t\t\t\t\tcursor.arityMax) {", "-\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS);", "-\t\t\t\t\t\tif (numberOfParens != 0) {", "-\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "-\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity < cursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor);", "+\t\t\t\t\t\t// clear the bits on cursor", "+\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "-\t\t\t\t\t\tif (numberOfParens != 0) {", "-\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "-\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor);", "+\t\t\t\t\t\t// clear the bits on cursor", "+\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd9d5e52da104524d5c5b1874360144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9fb0bbe2a3801102d42dc2cab72c635ae1849ea0", "commitAfterChange": "906658ef6f48da220e1774c79e394ded35878c9f", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["+\t\t\t\t\tint numberOfParens = (expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\tif (numberOfParens != 0) {", "+\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "+\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (numberOfParens != 0) {", "+\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "+\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\t}", "-\t\t\t} else if (expr1 instanceof BinaryExpression && ", "-\t\t\t\t\t\t\t// single out the a + b case", "-\t\t\t\t\t\t((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t} else if (expr1 instanceof BinaryExpression", "+\t\t\t\t\t&& ((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t\t// single out the a + b case", "-\t\t\t\t\top);\t\t", "+\t\t\t\t\top);"]}], "num": 8118}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec2103b63e0822f2d13539d296af6dc5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c9d57816a6a1695880563c36407408c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic boolean visit(TextElement node)", "signatureAfterChange": " \tpublic boolean visit(AnnotationTypeDeclaration node)", "diff": ["+\t */", "+\tpublic boolean visit(AnnotationTypeDeclaration node) {", "+\t\tASTNode javadoc= getChildNode(node, AnnotationTypeDeclaration.JAVADOC_PROPERTY);", "+\t\tif (javadoc != null) {", "+\t\t\tjavadoc.accept(this);", "+\t\t}", "+\t\tvisitList(node, AnnotationTypeDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));", "+\t\tthis.result.append(\"@interface \");//$NON-NLS-1$", "+\t\tgetChildNode(node, AnnotationTypeDeclaration.NAME_PROPERTY).accept(this);", "+\t\tthis.result.append('{');", "+\t\tvisitList(node, AnnotationTypeDeclaration.BODY_DECLARATIONS_PROPERTY, EMPTY); ", "+\t\tthis.result.append('}');", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3228d1d76d3c58a3de568ec60d4a0cfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "commitAfterChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 211, "signatureBeforeChange": "  \tprivate String returnDeclaringClassName(IConstantPoolEntry constantRef)", "signatureAfterChange": "  \tprivate String returnDeclaringClassName(IConstantPoolEntry constantRef)", "diff": ["+\t\tif (isCompact()) {", "+\t\t\tchar[] className = constantRef.getClassName();", "+\t\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('/', className);", "+\t\t\tif (lastIndexOfSlash != -1) {", "+\t\t\t\treturn new String(CharOperation.subarray(className, lastIndexOfSlash + 1, className.length));", "+\t\t\t}", "+\t\t\treturn new String(constantRef.getClassName());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57d32721693accd59245b3421aea3bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dc74bbda99d44eb7c9bf5e21853e09a003a72218", "commitAfterChange": "3c289b9a951cfd3e36c9387c73b3893fba2c0158", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["+\t\t\tif(method.typeVariables != null && method.typeVariables.length > 0) {", "+\t\t\t\tchar[][] excludedNames = findEnclosingTypeNames(scope);", "+\t\t\t\tchar[][] substituedParameterNames = substituteMethodTypeParameterNames(method.typeVariables, excludedNames);", "+\t\t\t\tif(substituedParameterNames != null) {", "+\t\t\t\t\tmethod = new ParameterizedMethodBinding(", "+\t\t\t\t\t\t\t\tmethod.declaringClass,", "+\t\t\t\t\t\t\t\tmethod,", "+\t\t\t\t\t\t\t\tsubstituedParameterNames,", "+\t\t\t\t\t\t\t\tscope.environment());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652a88e83efc478e860d1352ff613331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "223ac176333d2fadca381dedcd267fe1a5e5fa31", "commitAfterChange": "908f55d6ba77993f6a6683ec18032e11ce9fef34", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "signatureAfterChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "diff": ["-\tint index = blockIndex != -1 && controlIndex < blockIndex ? blockIndex : controlIndex;", "-", "+\tint index;", "+\tif (controlIndex != -1) {", "+\t\tindex = blockIndex != -1 && controlIndex < blockIndex ? blockIndex : controlIndex;", "+\t} else {", "+\t\t// To handle the case when the completion is requested before enclosing R_PAREN", "+\t\t// and an instanceof expression is also present", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=261534", "+\t\tint instanceOfIndex = lastIndexOfElement(K_BETWEEN_INSTANCEOF_AND_RPAREN);", "+\t\tindex = blockIndex != -1 && instanceOfIndex < blockIndex ? blockIndex : instanceOfIndex;", "+\t}", "-", "+\t\tif (statement instanceof AND_AND_Expression && this.assistNode instanceof Statement) {", "+\t\t\tstatement = (Statement) this.assistNode;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de509f19e30fdb5c9fe5b36c164b7a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "b3bdb44776faa860f50f450670f79dfc874cc5b3", "commitAfterChange": "a59c911bb67a4a0588e810060c73cd3ec2f53032", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["-\t} else if (signature.equals(Signature.SIG_LONG)) { ", "-\t\tconstant = new Long(constantSource);", "+\t} else if (signature.equals(Signature.SIG_LONG)) {", "+\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "+\t\t\tif (index != -1) {", "+\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "+\t\t\t} else {", "+\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\t\t\t}", "+\t\t} else {", "+\t\t\tconstant = new Long(constantSource);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c351c56b7a872f637e7125006ffc64bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "820e796a655cc430ae4ae3cd649830ad2aa11511", "commitAfterChange": "15e62f7752b5ba1cd51b3fafb5a3b0c9d1ba5891", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public static char[][] getThrownExceptionTypes(char[] methodSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getThrownExceptionTypes(char[] methodSignature) throws IllegalArgumentException", "diff": ["-\tint paren = CharOperation.lastIndexOf(C_PARAM_END, methodSignature);", "-\tif (paren == -1) {", "+\tint exceptionStart = CharOperation.indexOf(C_EXCEPTION_START, methodSignature);", "+\tif (exceptionStart == -1) {", "+\t\tint paren = CharOperation.lastIndexOf(C_PARAM_END, methodSignature);", "+\t\tif (paren == -1) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\t// ignore return type", "+\t\texceptionStart = Util.scanTypeSignature(methodSignature, paren+1) + 1;", "+\t\tint length = methodSignature.length;", "+\t\tif (exceptionStart == length) return CharOperation.NO_CHAR_CHAR;", "-\t// ignore return type", "-\tint exceptionStart = Util.scanTypeSignature(methodSignature, paren+1) + 1;", "-\tif (exceptionStart == length) return CharOperation.NO_CHAR_CHAR;", "-\t", "-\tArrayList exceptionList = new ArrayList(1);", "+\tArrayList exceptionList = new ArrayList(1);", "+\t\tif (methodSignature[i] == C_EXCEPTION_START) {", "+\t\t\texceptionStart++;", "+\t\t\ti++;", "+\t\t} else {", "+\t\t\tthrow new IllegalArgumentException();\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d117edcd73b6bfa292f705a75dafa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "commitAfterChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 210, "signatureBeforeChange": "  \tprivate String returnConstantClassName(IConstantPoolEntry constantClass)", "signatureAfterChange": "  \tprivate String returnConstantClassName(IConstantPoolEntry constantClass)", "diff": ["+", "+\t\t} else if ((mode & ClassFileBytesDisassembler.COMPACT) != 0) {", "+\t\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('/', classInfoName);", "+\t\t\tif (lastIndexOfSlash != -1) {", "+\t\t\t\treturn new String(CharOperation.subarray(classInfoName, lastIndexOfSlash + 1, classInfoName.length));", "+\t\t\t}", "+\t\t\treturn new String(classInfoName);"]}], "num": 16460}
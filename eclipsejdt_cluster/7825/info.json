{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca1fe85abcad70285910127851ae5be3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "363d453442e6f9d59a14616f2b3a197c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, previousPosition);", "-\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, this.inlineTagStart);", "+\t\t\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, this.inlineTagStart);", "-\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, previousPosition);", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) {", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) {", "-\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\tif (this.kind != COMPIL_PARSER) {", "-\t\t\t} else if (this.kind == DOM_PARSER && this.lineStarted && this.textStart < previousPosition) {", "+\t\t\t} else if (this.kind != COMPIL_PARSER && this.lineStarted && this.textStart < previousPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3991e001d41b499dda7ca9225959cfaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "557b942f819d62ffe9419db1ce92c3e011ea65a9", "commitAfterChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t// see specifications p.68", "+\t\t// see specifications 5.5", "-\t\t", "+", "+\t\t// identity conversion cannot be performed upfront, due to side-effects", "+\t\t// like constant propagation", "+\t\t\t\t", "-\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)", "-\t\tif (expressionType == NullBinding) ", "+\t\tif (expressionType == NullBinding) {", "+\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "+\t\t\t//\t\tneedRuntimeCheckcast = true;", "+\t\t\t//\t}", "-", "+\t\t}", "+\t\t\tif (castType == expressionType) return; // identity conversion", "+", "-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)){ // no runtime error", "+\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "-\t\t\t\tif (Scope.areTypesCompatible(castType, expressionType)) {", "+\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)) ", "+\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "-\t\t\t\tif (!Scope.areTypesCompatible(castType, expressionType)) {", "+\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\tif (castType != expressionType", "-\t\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "+\t\t\tif (castType == expressionType) return; // identity conversion", "+\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "-\t\t\treturn;"]}], "num": 7825}
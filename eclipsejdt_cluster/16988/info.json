{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fb0fdc6e1bebac28fba75d8ca91d623", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e06cfd9397b70d1d68ffad33d69deeb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \r \tprivate IBinding resolveNameForNameReference(Name name, AstNode node)", "signatureAfterChange": "\r \r \tprivate IBinding internalResolveNameForSimpleName(Name name)", "diff": ["-\r", "-\tprivate IBinding resolveNameForNameReference(Name name, AstNode node) {\r", "-\t\tif (node != null) {\r", "-\t\t\tif (node instanceof SingleNameReference) {\r", "-\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "-\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "-\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// this is a variable or a field\r", "-\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);\t\t\t\t\r", "-\t\t\t\t}\r", "-\t\t\t} else if (node instanceof QualifiedNameReference) {\r", "-\t\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;\r", "-\t\t\r", "-\t\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "-\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// this is a variable or a field\r", "-\t\t\t\t\tif (qualifiedNameReference.otherBindings == null) {\r", "-\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);\t\t\t\t\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\t\t\t\t\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t// this might be a inner qualified name or simple name inside a qualified name\r", "-\t\tint index = 1;\r", "-\t\tQualifiedName firstQualifier = null;\r", "-\t\tName firstName = name;\r", "-\t\tif (name.isSimpleName()) {\r", "-\t\t\tif (name.getParent() instanceof QualifiedName) {\r", "-\t\t\t\tname = (QualifiedName) name.getParent();\r", "-\t\t\t\tfirstQualifier = (QualifiedName) name;\r", "-\t\t\t} else {\r", "-\t\t\t\treturn super.resolveName(name);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\twhile (name.getParent() instanceof QualifiedName) {\r", "-\t\t\tindex++;\r", "-\t\t\tname = (QualifiedName) name.getParent();\r", "-\t\t}\r", "-\t\t// now we can retrieve the enclosing compiler's node corresponding to the inner name\r", "-\t\tnode = (AstNode) this.newAstToOldAst.get(name);\r", "-\t\tif (node == null) {\r", "-\t\t\treturn super.resolveName(name);\r", "-\t\t} else if (node instanceof NameReference) {\r", "-\t\t\t\r", "-\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;\r", "-\t\t\tif (firstQualifier != null) {\r", "-\t\t\t\t// handle the first simple name in a qualified name a.b.c.d (handles the 'a' case)\r", "-\t\t\t\tName firstQualifierName = firstQualifier.getQualifier();\r", "-\t\t\t\tif (firstQualifierName.isSimpleName() && firstName == firstQualifierName) {\r", "-\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);\t\t\t\t\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "-\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "-\t\t\t} else {\r", "-\t\t\t\t// this is a variable or a field\r", "-\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - index]);\t\t\t\t\r", "-\t\t\t}\r", "-\t\t} else if (node instanceof MessageSend) {\r", "-\t\t\treturn this.resolveNameForMessageSend(name, node, index);\r", "-\t\t}\r", "-\t\treturn super.resolveName(name);\r", "-\t}\r", "+\r", "+\tprivate IBinding internalResolveNameForSimpleName(Name name) {\r", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(name);\r", "+\t\tif (node == null) {\r", "+\t\t\tASTNode parent = name.getParent();\r", "+\t\t\tif (parent instanceof QualifiedName) {\r", "+\t\t\t\t// retrieve the qualified name and remember at which position is the simple name\r", "+\t\t\t\tQualifiedName qualifiedName = (QualifiedName) parent;\r", "+\t\t\t\tint index = -1;\r", "+\t\t\t\tif (qualifiedName.getQualifier() == name) {\r", "+\t\t\t\t\tindex++;\r", "+\t\t\t\t}\r", "+\t\t\t\twhile (parent instanceof QualifiedName) {\r", "+\t\t\t\t\tqualifiedName = (QualifiedName) parent;\r", "+\t\t\t\t\tparent = parent.getParent();\r", "+\t\t\t\t\tindex++;\r", "+\t\t\t\t}\r", "+\t\t\t\treturn returnBindingForQualifiedNamePart(qualifiedName, index);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (node instanceof SingleNameReference) {\r", "+\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "+\t\t\tif (singleNameReference.isTypeReference()) {\r", "+\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "+\t\t\t} else {\r", "+\t\t\t\t// this is a variable or a field\r", "+\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);\t\t\t\t\r", "+\t\t\t}\r", "+\t\t} else if (node instanceof QualifiedSuperReference) {\r", "+\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) node;\r", "+\t\t\treturn this.getTypeBinding(qualifiedSuperReference.qualification.binding);\r", "+\t\t}\r", "+\t\treturn null;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec68bb70254e37dbd46ab99881867d6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "04eaba0fe4e6b5a84c4e8dc4fffbab423284d555", "commitAfterChange": "a7a3afb7a8548d0fba296650ec89abc303b4be12", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["+\t\tif (node != null) {\r", "+\t\t\tif (node instanceof SingleNameReference) {\r", "+\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "+\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// this is a variable or a field\r", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t} else if (node instanceof QualifiedNameReference) {\r", "+\t\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;\r", "+\t\t\t\t\r", "+\t\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// this is a variable or a field\r", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// this might be a inner qualified name or simple name inside a qualified name\r", "+\t\tint index = 1;\r", "+\t\tQualifiedName firstQualifier = null;\r", "+\t\tName firstName = name;\r", "+\t\tif (name.isSimpleName()) {\r", "+\t\t\tif (name.getParent() instanceof QualifiedName) {\r", "+\t\t\t\tname = (QualifiedName) name.getParent();\r", "+\t\t\t\tfirstQualifier = (QualifiedName) name;\r", "+\t\t\t} else {\r", "+\t\t\t\treturn super.resolveName(name);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\twhile (name.getParent() instanceof QualifiedName) {\r", "+\t\t\tindex++;\r", "+\t\t\tname = (QualifiedName) name.getParent();\r", "+\t\t}\r", "+\t\t// now we can retrieve the enclosing compiler's node corresponding to the inner name\r", "+\t\tnode = (AstNode) this.newAstToOldAst.get(name);\r", "-\t\t}\r", "-\t\tif (node instanceof SingleNameReference) {\r", "-\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "-\t\t\tif (singleNameReference.isFieldReference()) {\r", "-\t\t\t\treturn this.getVariableBinding(singleNameReference.fieldBinding());\r", "-\t\t\t} else if (singleNameReference.isTypeReference()) {\r", "-\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "-\t\t\t} else {\r", "-\t\t\t\t// this is a variable\r", "-\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);\t\t\t\t\r", "-\t\t\t}\r", "-\t\t} else if (node instanceof QualifiedNameReference) {\r", "+\t\t} else {\r", "-\t\t\tif (qualifiedNameReference.isFieldReference()) {\r", "-\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\r", "-\t\t\t} else if (qualifiedNameReference.isTypeReference()) {\r", "-\t\t\t\tthis.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\tif (firstQualifier != null) {\r", "+\t\t\t\t// handle the first simple name in a qualified name a.b.c.d (handles the 'a' case)\r", "+\t\t\t\tName firstQualifierName = firstQualifier.getQualifier();\r", "+\t\t\t\tif (firstQualifierName.isSimpleName() && firstName == firstQualifierName) {\r", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "-\t\t\t\t// this is a variable\r", "-\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\t\t\t\t\r", "+\t\t\t\t// this is a variable or a field\r", "+\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - index]);\t\t\t\t\r", "-\t\treturn super.resolveName(name);\r"]}], "num": 16988}
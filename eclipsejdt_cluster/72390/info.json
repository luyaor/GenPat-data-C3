{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3796dc73b49fe7a48e6a84953e2d3dd9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18e80011afcad86f432ca4b2fb103af6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"1. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"1. WARNING in B.java (at line 1)\\n\" + ", "+\t\t\t\"\tinterface I<E extends Comparable> { void test(E element); }\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A implements I<Integer> { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"1. WARNING in B.java (at line 1)\\n\" + ", "+\t\t\t\"\tabstract class AA<E extends Comparable> { abstract void test(E element); }\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6cd8f77478398073a15e14f0ed21f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void test074()", "signatureAfterChange": " public void test074()", "diff": ["-\t\t\t\"}\"", "+\t\t\t\"}\\n\" +", "+\t\t\t\"public class Y {}\\n\"", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t: // no ambiguities in 1.8", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Y.java (at line 3)\\n\" + ", "+\t\t\t\"\tvoid a(I x) {}\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Y.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass C extends B implements I {\\n\" + ", "+\t\t\t\"\t                             ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Y.java (at line 28)\\n\" + ", "+\t\t\t\"\tvoid a(I x) {}\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Y.java (at line 33)\\n\" + ", "+\t\t\t\"\tclass B2 extends A2 {}\\n\" + ", "+\t\t\t\"\t                 ^^\\n\" + ", "+\t\t\t\"A2 is a raw type. References to generic type A2<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Y.java (at line 34)\\n\" + ", "+\t\t\t\"\tclass C2 extends B2 implements I {\\n\" + ", "+\t\t\t\"\t                               ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\")"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7a5f134e921573858fdbf55988c647", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e62c45ebe5881b0e2838be4fcb8a4a48c85b9c0c", "commitAfterChange": "c36a6a2b662267e56067d121b7f34ae48cbcb692", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void test037()", "signatureAfterChange": "  \tpublic void test037()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ? ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tabstract class Y implements J, I { }\\n\" + ", "+\t\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo(A<String>) of type J has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tclass YYY implements J, I { public void foo(A a) {} }\\n\" + ", "+\t\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tclass XXX implements I, J { public void foo(A a) {} }\\n\" + ", "+\t\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tclass ZZZ implements K { public void foo(A a) {} }\\n\" + ", "+\t\t\t\t\"\t                                         ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tinterface K extends I { void foo(A<String> a); }\\n\" + ", "+\t\t\t\t\"\t                             ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1df6983ca7fc80881e9db77b96c6fed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in A.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override List getList() { return null; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                                                      ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                                                ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e88368e8d52f155864e65e3d0cdcaf77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void test037()", "signatureAfterChange": "  \tpublic void test037()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "-\t\t);", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass YYY implements J, I { public void foo(A a) {} }\\n\" + ", "+\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tclass XXX implements I, J { public void foo(A a) {} }\\n\" + ", "+\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass ZZZ implements K { public void foo(A a) {} }\\n\" + ", "+\t\t\t\"\t                                         ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tinterface K extends I { void foo(A<String> a); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e294e0f00e897c0fd604218679aafa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 439, "signatureBeforeChange": " \tpublic void test435()", "signatureAfterChange": " \tpublic void test435()", "diff": ["-\t\t\t\"1. ERROR in orders\\\\impl\\\\IntegerOrder2.java (at line 10)\\r\\n\" + ", "-\t\t\t\"\tpublic Comparable previous(Comparable arg0) {\\r\\n\" + ", "+\t\t\t\"1. WARNING in orders\\\\impl\\\\IntegerOrder2.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic Comparable previous(Comparable arg0) {\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in orders\\\\impl\\\\IntegerOrder2.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic Comparable previous(Comparable arg0) {\\n\" + ", "-\t\t\t\"2. ERROR in orders\\\\impl\\\\IntegerOrder2.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tpublic Comparable next(Comparable arg0) {\\r\\n\" + ", "+\t\t\t\"3. WARNING in orders\\\\impl\\\\IntegerOrder2.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic Comparable previous(Comparable arg0) {\\n\" + ", "+\t\t\t\"\t                           ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in orders\\\\impl\\\\IntegerOrder2.java (at line 14)\\n\" + ", "+\t\t\t\"\tpublic Comparable next(Comparable arg0) {\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in orders\\\\impl\\\\IntegerOrder2.java (at line 14)\\n\" + ", "+\t\t\t\"\tpublic Comparable next(Comparable arg0) {\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in orders\\\\impl\\\\IntegerOrder2.java (at line 14)\\n\" + ", "+\t\t\t\"\tpublic Comparable next(Comparable arg0) {\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fddc2aad64082de81edf48e0f6928193", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "94e87775403a1be90933921189758fda2ba4fb6c", "commitAfterChange": "bd01e05f0477a2d168d72337205595e4fa08ba90", "methodNumberBeforeChange": 882, "methodNumberAfterChange": 882, "signatureBeforeChange": " public void _test876()", "signatureAfterChange": " public void test876()", "diff": ["-public void _test876() {", "+public void test876() {", "-\t\t\"should be 3 errors\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tClass<Class> cc = cco; // ko\\n\" + ", "+\t\t\"\t      ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tClass<Class> cc = cco; // ko\\n\" + ", "+\t\t\"\t                  ^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<Class<Object>> to Class<Class>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tClass<Class<Object>> cco2 = cc; // ko\\n\" + ", "+\t\t\"\t                            ^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<Class> to Class<Class<Object>>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tClass<? extends Class> cec = ceco; // ok\\n\" + ", "+\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"\tClass<? extends Class<Object>> ceco2 = cec; // ko\\n\" + ", "+\t\t\"\t                                       ^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<capture-of ? extends Class> to Class<? extends Class<Object>>\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 72390}
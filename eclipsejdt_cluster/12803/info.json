{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "885d87bb7f1f740db7f71399aac7f804", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "005ccf11243e72f88b20c4bd3b9714db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "62e6598ad525aedf54491e9cd53ee24a52fbe8f9", "commitAfterChange": "d0983045319f4deaedb594fb4398659a34901dc9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["-\tString[] types= Signature.getParameterTypes(methodSig);", "-\tassertEquals(\"Signature#getParameterTypes is not correct1\", 3, types.length);", "-\tassertEquals(\"Signature#getParameterTypes is not correct2\", \"QObject;\", types[1]);", "+\tString[] parameterTypes = Signature.getParameterTypes(methodSig);", "+\tassertEquals(\"Signature#getParameterTypes is not correct1\", 3, parameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes is not correct2\", \"QObject;\", parameterTypes[1]);", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "+\t\t\tparameterTypes.length);", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\t\t\tparameterTypes[0]);", "-\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\t\t\tparameterTypes[1]);", "-\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\t\t\tparameterTypes[2]);", "-\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\t\t\tparameterTypes[3]);", "-\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\t\t\tparameterTypes[4]);", "-\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\t\t\tparameterTypes[5]);", "-\t\t\tSignature.getParameterTypes(methodSig)[6]);", "+\t\t\tparameterTypes[6]);", "-\t\t\tSignature.getParameterTypes(methodSig)[7]);", "+\t\t\tparameterTypes[7]);", "-\t\t\tSignature.getParameterTypes(methodSig)[8]);", "+\t\t\tparameterTypes[8]);", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "+\t\t\tparameterTypes.length);", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\t\t\tparameterTypes[0]);", "-\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\t\t\tparameterTypes[1]);", "-\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\t\t\tparameterTypes[2]);", "-\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\t\t\tparameterTypes[3]);", "-\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\t\t\tparameterTypes[4]);", "-\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\t\t\tparameterTypes[5]);", "-\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "-\tassertEquals(\"Signature#getParameterTypes 6\", \"La;\",", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1, parameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La;\", parameterTypes[0]);", "+\t", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "+\t\t\tparameterTypes.length);", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "-\tmethodSig = \"(La/b/c<TE;>.d<TF;>;)V\";", "+\t\t\tparameterTypes[0]);", "+", "+\tmethodSig = \"(La.b.c<TE;>.d<TF;>;)V\";", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "-\tassertEquals(\"Signature#getParameterTypes 6\", \"La/b/c<TE;>.d<TF;>;\",", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\t\t\tparameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La.b.c<TE;>.d<TF;>;\",", "+\t\t\tparameterTypes[0]);", "+", "+\t// signature with type variable", "+\tmethodSig = \"<TYPE:Ljava.lang.Object;>(Ljava.lang.Object;Ljava.lang.Class<TTYPE;>;)TTYPE;\";", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "+\tassertEquals(\"Signature#getParameterTypes 7\", 2,", "+\t\t\tparameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes 7\", \"Ljava.lang.Object;\",", "+\t\t\tparameterTypes[0]);", "+\tassertEquals(\"Signature#getParameterTypes 7\", \"Ljava.lang.Class<TTYPE;>;\",", "+\t\t\tparameterTypes[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ae3ecdb352ca1f5332909a7bf1a7c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "71bba81717c7a1fbd86b1422cf134703931a54cb", "commitAfterChange": "94e87775403a1be90933921189758fda2ba4fb6c", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType)", "diff": ["-    ", "+\tif (otherType == this)", "+\t\treturn true;", "+\tif (otherType.id == TypeIds.T_JavaLangObject)", "+\t\treturn true;", "+\tObject result;", "+\tif (this.compatibleCache == null) {", "+\t\tthis.compatibleCache = new SimpleLookupTable(3);", "+\t\tresult = null;", "+\t} else {", "+\t\tresult = this.compatibleCache.get(otherType);", "+\t\tif (result != null) {", "+\t\t\treturn result == Boolean.TRUE;", "+\t\t}", "+\t}", "+\tthis.compatibleCache.put(otherType, Boolean.FALSE); // protect from recursive call", "+\tif (isCompatibleWith0(otherType)) {", "+\t\tthis.compatibleCache.put(otherType, Boolean.TRUE);", "+\t\treturn true;", "+\t}", "+\treturn false;", "+}", "-\t// equivalence may allow compatibility with array type through wildcard bound", "-\t\t\treturn false; // should have passed equivalence check above if wildcard", "-\t\t\t\t\t\treturn false; // should have passed equivalence check above if same erasure", "-\t\t\tif (this.isInterface())  // Explicit conversion from an interface to a class is not allowed"]}], "num": 12803}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16eea3e269d762d784ca9632e373def4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20d7f739ff9367f2561670a81826f51c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["+\tAnnotationBinding[][] paramAnnotations = null; ", "+\t\t\tif (this.environment.storeAnnotations)", "+\t\t\t\tparamAnnotations = new AnnotationBinding[size][];", "-\t\t\t\tif (i >= startIndex)   // skip the synthetic arg if necessary", "+\t\t\t\tif (i >= startIndex) {   // skip the synthetic arg if necessary", "+\t\t\t\t\t// 'paramAnnotations' line up with 'parameters'", "+\t\t\t\t\t// int parameter to method.getParameterAnnotations() include the synthetic arg", "+\t\t\t\t\tif (paramAnnotations != null)", "+\t\t\t\t\t\tparamAnnotations[i - startIndex] = createAnnotations(method.getParameterAnnotations(i), this.environment);", "+\t\t\t\t}", "-\t\t\t\tparameters = new TypeBinding[types.size()];", "+\t\t\t\tint numParam = types.size();", "+\t\t\t\tparameters = new TypeBinding[numParam];", "+\t\t\t\tif (this.environment.storeAnnotations) {", "+\t\t\t\t\tparamAnnotations = new AnnotationBinding[numParam][];", "+\t\t\t\t\tfor (int i = 0; i < numParam; i++)", "+\t\t\t\t\t\tparamAnnotations[i] = createAnnotations(method.getParameterAnnotations(i), this.environment);", "+\t\t\t\t}", "+\tif (this.environment.storeAnnotations)", "+\t\tresult.setAnnotations(", "+\t\t\tcreateAnnotations(method.getAnnotations(), this.environment),", "+\t\t\tparamAnnotations,", "+\t\t\tisAnnotationType() ? convertMemberValue(method.getDefaultValue(), this.environment) : null);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db7e63aa504a94a515d6e9fca552288", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8308cfd802c8b60b3cfe136b716c3a270c031128", "commitAfterChange": "5f4b17a62cffd1579d0f5c93e6dae75091d296b0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\tint argLength = arguments.length;", "-\t\t\tfor (int i = 0; i < argLength; i++)", "-\t\t\t\tparameters[i].collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t", "+\t\t\t// collect argument type mapping, handling varargs", "+\t\t\tif (originalMethod.isVarargs()) {", "+\t\t\t\tint paramLength = parameters.length;", "+\t\t\t\tint minArgLength = paramLength - 1;", "+\t\t\t\tint argLength = arguments.length;", "+\t\t\t\t// process mandatory arguments", "+\t\t\t\tfor (int i = 0; i < minArgLength; i++)", "+\t\t\t\t\tparameters[i].collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t\t// process optional arguments", "+\t\t\t\tif (minArgLength < argLength) {", "+\t\t\t\t\tTypeBinding varargType = parameters[minArgLength]; // last arg type - as is ?", "+\t\t\t\t\tif (paramLength != argLength // argument is passed as is ?", "+\t\t\t\t\t\t\t||  (arguments[minArgLength] != NullBinding", "+\t\t\t\t\t\t\t\t\t&& (arguments[minArgLength].dimensions() != varargType.dimensions()))) { ", "+\t\t\t\t\t\tvarargType = ((ArrayBinding)varargType).elementsType(); // eliminate one array dimension", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i = minArgLength; i < argLength; i++)", "+\t\t\t\t\t\tvarargType.collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint paramLength = parameters.length;", "+\t\t\t\tfor (int i = 0; i < paramLength; i++)", "+\t\t\t\t\tparameters[i].collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8c4005725d5694be3d696d54b4f3a4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "4a9b6fe7716b388465a0e3822e83603fcd673790", "commitAfterChange": "8d96b52b3ee6d748bf52fa2774ac5cb71b98586d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public ReferenceBinding setFocusType(char[][] compoundName)", "signatureAfterChange": " public ReferenceBinding setFocusType(char[][] compoundName)", "diff": ["+\t\tif (this.focusType == null) {", "+\t\t\tint length = compoundName.length;", "+\t\t\tchar[] typeName = compoundName[length-1];", "+\t\t\tint firstDollar = CharOperation.indexOf('$', typeName);", "+\t\t\tif (firstDollar != -1) {", "+\t\t\t\tcompoundName[length-1] = CharOperation.subarray(typeName, 0, firstDollar);", "+\t\t\t\tthis.focusType = this.lookupEnvironment.askForType(compoundName);", "+\t\t\t\tif (this.focusType != null) {", "+\t\t\t\t\tchar[][] memberTypeNames = CharOperation.splitOn('$', typeName, firstDollar+1, typeName.length);", "+\t\t\t\t\tfor (int i = 0; i < memberTypeNames.length; i++) {", "+\t\t\t\t\t\tthis.focusType = this.focusType.getMemberType(memberTypeNames[i]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e60b037cf1bf08320bf2de449e0fc38a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "6660c11fbd338cdace0b80e024a9e47f8c34c2d5", "commitAfterChange": "64151d299c94cd994364e344797612fa2bd1a461", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tprotected IJavaElement getSourceElementAt(int position) throws JavaModelException", "signatureAfterChange": " \tprotected IJavaElement getSourceElementAt(int position) throws JavaModelException", "diff": ["-\t\t\tint i;", "-\t\t\tfor (i = 0; i < children.length; i++) {", "+\t\t\tfor (int i = children.length-1; i >= 0; i--) {", "-\t\t\t\t\tif (position < range.getOffset() + range.getLength() && position >= range.getOffset()) {", "-\t\t\t\t\t\tif (child instanceof IParent) {", "+\t\t\t\t\tint start = range.getOffset();", "+\t\t\t\t\tint end = start + range.getLength();", "+\t\t\t\t\tif (start <= position && position <= end) {", "+\t\t\t\t\t\tif (child instanceof IField) {", "+\t\t\t\t\t\t\t// check muti-declaration case (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=39943)", "+\t\t\t\t\t\t\tint declarationStart = start;", "+\t\t\t\t\t\t\tSourceRefElement candidate = null;", "+\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\t// check name range", "+\t\t\t\t\t\t\t\trange = ((IField)child).getNameRange();", "+\t\t\t\t\t\t\t\tif (position <= range.getOffset() + range.getLength()) {", "+\t\t\t\t\t\t\t\t\tcandidate = child;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\treturn candidate == null ? child.getSourceElementAt(position) : candidate.getSourceElementAt(position);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tchild = --i>=0 ? (SourceRefElement) children[i] : null;", "+\t\t\t\t\t\t\t} while (child != null && child.getSourceRange().getOffset() == declarationStart);", "+\t\t\t\t\t\t\t// position in field's type: use first field", "+\t\t\t\t\t\t\treturn candidate.getSourceElementAt(position);", "+\t\t\t\t\t\t} else if (child instanceof IParent) {"]}], "num": 27504}
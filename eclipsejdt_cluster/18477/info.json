{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "703cec1b6a5cbc755ef5f47b58aedd7c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43dc0971f326ee259a3dea86cea3c662", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1f911d51d5f7aed075946732ed8e3d1eec231ff5", "commitAfterChange": "994909f27ab64cbff8a4b8b71b6f8d78e265bc42", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \r \tprivate boolean mustQualifyType(\r \t\tchar[][] packageName,\r \t\tchar[] readableTypeName)", "signatureAfterChange": "\r \r \tprivate boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "diff": ["-\t\tchar[][] packageName,\r", "-\t\tchar[] readableTypeName) {\r", "+\t\tchar[] packageName,\r", "+\t\tchar[] typeName) {\r", "+\t\t\t\r", "+\t\tchar[][] compoundPackageName = CharOperation.splitOn('.', packageName);\r", "+\t\tchar[] readableTypeName = CharOperation.concat(packageName, typeName, '.');\r", "-\t\tif (CharOperation.equals(unitScope.fPackage.compoundName, packageName))\r", "+\t\tif (CharOperation.equals(unitScope.fPackage.compoundName, compoundPackageName))\r", "-\r", "-\t\t\t\tif (CharOperation.equals(imports[i].compoundName, packageName))\r", "+\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "+\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "+\t\t\t\t\t\tif(i != j){\r", "+\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "+\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "+\t\t\t\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tif(CharOperation.endsWith(imports[j].readableName(), typeName)) {\r", "+\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf7677ae41d84b379a9b85f1a159a25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "ad2166cdb4061bd08d277e145a390369585ad35a", "commitAfterChange": "3ecd15451330956435ccef213a5775052d6006c5", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \t\tprotected String getSeparatorString(int nodeIndex)", "signatureAfterChange": " \t\t \t\tprotected String getSeparatorString(int nodeIndex, int nextNodeIndex)", "diff": ["+\t\t", "+\t\tprotected String getSeparatorString(int nodeIndex, int nextNodeIndex) {", "-\t\t\tbuf.append(createIndentString(getNodeIndent(nodeIndex + 1)));", "+\t\t\tbuf.append(createIndentString(getNodeIndent(nextNodeIndex)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "656471422090151b27e12504f4016652", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "1fa0b970f57a68665cdfde955081db2621c42276", "commitAfterChange": "be945f896dfe94a8d4114819ea1c2afbe987ee6b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\t\tthis.key = this.getElementType().getKey() + this.getDimensions();", "+\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(this.getElementType().getKey());", "+\t\t\t\t\t\tint dimensions = this.getDimensions();", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.key = String.valueOf(buffer);", "-\t\t\t\t\t\tthis.key = Integer.toString(this.getDimensions());", "+\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\tint dimensions = this.getDimensions();", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.key = String.valueOf(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff4e9cf4d66edef6a12084798c036cc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveType(Type type)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveType(Type type)", "diff": ["-\t\t\tif (node instanceof TypeReference) {", "+            if (node instanceof ParameterizedQualifiedTypeReference) {", "+ \t\t\t\tParameterizedQualifiedTypeReference typeReference = (ParameterizedQualifiedTypeReference) node;", "+ \t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = typeReference.resolvedType;", "+ \t\t\t\tint index;", "+ \t\t\t\tif (type.isQualifiedType()) {", "+ \t\t\t\t\tindex = ((QualifiedType) type).index;", "+ \t\t\t\t} else if (type.isParameterizedType()) {", "+ \t\t\t\t\tindex = ((ParameterizedType) type).index;", "+ \t\t\t\t} else {", "+ \t\t\t\t\tindex = 1;", "+ \t\t\t\t}", "+ \t\t\t\tfinal int numberOfTypeArgumentsNotNull = getTypeArguments(typeReference);", "+ \t\t\t\tif (index != numberOfTypeArgumentsNotNull) {", "+\t \t\t\t\tint  i = numberOfTypeArgumentsNotNull;", "+\t \t\t\t\twhile (i != index) {", "+\t \t\t\t\t\ttypeBinding = typeBinding.enclosingType();", "+\t \t\t\t\t\ti --;", "+\t \t\t\t\t}", "+\t \t\t\t\tbinding = typeBinding;", "+ \t\t\t\t} else {", "+\t\t\t\t\tbinding = typeBinding;", "+ \t\t\t\t}", "+            } else if (node instanceof TypeReference) {"]}], "num": 18477}
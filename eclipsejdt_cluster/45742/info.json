{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "153eb46bed0bc3d16de4d3a2538bb9f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "361766e5c2a4019a07989555ac7dfcd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingExpressionsTest.java", "commitBeforeChange": "0878e1dc107fb190292b2de3d6e4f25e19c0489c", "commitAfterChange": "80b12656ac31b339fd22081301db662b77277ac4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic static Test setUpTest(Test someTest)", "signatureAfterChange": "  \tpublic void testInfixExpression2() throws Exception", "diff": ["-", "-\tpublic static Test setUpTest(Test someTest) {", "-\t\tTestSuite suite= new Suite(\"one test\");", "-\t\tsuite.addTest(someTest);", "-\t\treturn suite;", "+\tpublic void testInfixExpression2() throws Exception {", "+\t\tIPackageFragment pack1= this.sourceFolder.createPackageFragment(\"test1\", false, null);", "+\t\tStringBuffer buf= new StringBuffer();", "+\t\tbuf.append(\"package test1;\\n\");", "+\t\tbuf.append(\"public class E {\\n\");", "+\t\tbuf.append(\"    public void foo() {\\n\");", "+\t\tbuf.append(\"        i= 0 + 2;\\n\");", "+\t\tbuf.append(\"        j= 1 + 0;\\n\");", "+\t\tbuf.append(\"        k= 0 + 2 + 3 + 4 + 5;\\n\");", "+\t\tbuf.append(\"        l= 1 + 0 + 3 + 4 + 5;\\n\");", "+\t\tbuf.append(\"        m= 0 + 0 + 0 + 4 + 5;\\n\");", "+\t\tbuf.append(\"    }\\n\");", "+\t\tbuf.append(\"}\\n\");", "+\t\tICompilationUnit cu= pack1.createCompilationUnit(\"E.java\", buf.toString(), false, null);", "+\t", "+\t\tCompilationUnit astRoot= createAST(cu);", "+\t\tASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());", "+\t", "+\t\tassertTrue(\"Parse errors\", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);", "+\t\tTypeDeclaration type= findTypeDeclaration(astRoot, \"E\");", "+\t\tMethodDeclaration methodDecl= findMethodDeclaration(type, \"foo\");", "+\t\tBlock block= methodDecl.getBody();", "+\t\tList statements= block.statements();", "+\t\t{ // remove left side", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(0);", "+\t\t\tAssignment assignment= (Assignment) stmt.getExpression();", "+\t\t\tInfixExpression expr= (InfixExpression) assignment.getRightHandSide();", "+\t", "+\t\t\trewrite.remove(expr.getLeftOperand(), null);", "+\t\t}", "+\t", "+\t\t{ // remove right side", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(1);", "+\t\t\tAssignment assignment= (Assignment) stmt.getExpression();", "+\t\t\tInfixExpression expr= (InfixExpression) assignment.getRightHandSide();", "+\t", "+\t\t\trewrite.remove(expr.getRightOperand(), null);", "+\t\t}", "+\t", "+\t\t{ // remove left side (with extended operands)", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(2);", "+\t\t\tAssignment assignment= (Assignment) stmt.getExpression();", "+\t\t\tInfixExpression expr= (InfixExpression) assignment.getRightHandSide();", "+\t", "+\t\t\trewrite.remove(expr.getLeftOperand(), null);", "+\t\t}", "+\t", "+\t\t{ // remove right side (with extended operands)", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(3);", "+\t\t\tAssignment assignment= (Assignment) stmt.getExpression();", "+\t\t\tInfixExpression expr= (InfixExpression) assignment.getRightHandSide();", "+\t\t\t", "+\t\t\trewrite.remove(expr.getRightOperand(), null);", "+\t\t}", "+\t\t", "+\t\t{ // remove left, right, and extended operand", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(4);", "+\t\t\tAssignment assignment= (Assignment) stmt.getExpression();", "+\t\t\tInfixExpression expr= (InfixExpression) assignment.getRightHandSide();", "+\t\t\t", "+\t\t\trewrite.remove(expr.getLeftOperand(), null);", "+\t\t\trewrite.remove(expr.getRightOperand(), null);", "+\t\t\trewrite.remove((ASTNode) expr.extendedOperands().get(0), null);", "+\t\t}", "+\t\t", "+\t\tString preview= evaluateRewrite(cu, rewrite);", "+\t", "+\t\tbuf= new StringBuffer();", "+\t\tbuf.append(\"package test1;\\n\");", "+\t\tbuf.append(\"public class E {\\n\");", "+\t\tbuf.append(\"    public void foo() {\\n\");", "+\t\tbuf.append(\"        i= 2;\\n\");", "+\t\tbuf.append(\"        j= 1;\\n\");", "+\t\tbuf.append(\"        k= 2 + 3 + 4 + 5;\\n\");", "+\t\tbuf.append(\"        l= 1 + 3 + 4 + 5;\\n\");", "+\t\tbuf.append(\"        m= 4 + 5;\\n\");", "+\t\tbuf.append(\"    }\\n\");", "+\t\tbuf.append(\"}\\n\");", "+\t\tassertEqualString(preview, buf.toString());", "+\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "406e02c11dc5d32e2a91649cbc57b779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/DebugEvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void compileAndDeploy(String source, String className)", "signatureAfterChange": " \tpublic void compileAndDeploy(String source, String className)", "diff": ["-}", "-public void compileAndDeploy(String source, String className) {", "-\tresetEnv(); // needed to reinitialize the caches", "-\tFile directory = new File(SOURCE_DIRECTORY);", "-\tif (!directory.exists()) {", "-\t\tif (!directory.mkdir()) {", "-\t\t\tSystem.out.println(\"Could not create \" + SOURCE_DIRECTORY);", "+\t}", "+\tpublic void compileAndDeploy(String source, String className) {", "+\t\tresetEnv(); // needed to reinitialize the caches", "+\t\tFile directory = new File(SOURCE_DIRECTORY);", "+\t\tif (!directory.exists()) {", "+\t\t\tif (!directory.mkdir()) {", "+\t\t\t\tSystem.out.println(\"Could not create \" + SOURCE_DIRECTORY);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tString fileName = SOURCE_DIRECTORY + File.separator + className + \".java\";", "+\t\ttry {", "+\t\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(fileName));", "+\t\t\twriter.write(source);", "+\t\t\twriter.flush();", "+\t\t\twriter.close();", "+\t\t} catch(IOException e) {", "+\t\t\te.printStackTrace();", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tbuffer", "+\t\t\t.append(\"\\\"\")", "+\t\t\t.append(fileName)", "+\t\t\t.append(\"\\\" -d \\\"\")", "+\t\t\t.append(EvaluationSetup.EVAL_DIRECTORY + File.separator + LocalVMLauncher.REGULAR_CLASSPATH_DIRECTORY)", "+\t\t\t.append(\"\\\" -nowarn -g -classpath \\\"\")", "+\t\t\t.append(Util.getJavaClassLibsAsString())", "+\t\t\t.append(SOURCE_DIRECTORY)", "+\t\t\t.append(\"\\\"\");", "+\t\torg.eclipse.jdt.internal.compiler.batch.Main.compile(buffer.toString());", "-\tString fileName = SOURCE_DIRECTORY + File.separator + className + \".java\";", "-\ttry {", "-\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(fileName));", "-\t\twriter.write(source);", "-\t\twriter.flush();", "-\t\twriter.close();", "-\t} catch(IOException e) {", "-\t\te.printStackTrace();", "-\t\treturn;", "-\tStringBuffer buffer = new StringBuffer();", "-\tbuffer", "-\t\t.append(\"\\\"\")", "-\t\t.append(fileName)", "-\t\t.append(\"\\\" -d \\\"\")", "-\t\t.append(EVAL_DIRECTORY + File.separator + LocalVMLauncher.REGULAR_CLASSPATH_DIRECTORY)", "-\t\t.append(\"\\\" -nowarn -g -classpath \\\"\")", "-\t\t.append(Util.getJavaClassLibsAsString())", "-\t\t.append(SOURCE_DIRECTORY)", "-\t\t.append(\"\\\"\");", "-\torg.eclipse.jdt.internal.compiler.batch.Main.compile(buffer.toString());", "-}"]}], "num": 45742}
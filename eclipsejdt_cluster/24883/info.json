{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "890f440e09c4060a44a9f4d48b92ea98", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f03d0a88829a4054eb515d64d7a271a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "fa5b9584504523e008d75d3102bbd9fdb41a99d1", "commitAfterChange": "be28c707007790646fb850eb239db7444413aebf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["+\t\t\tcase K_ARRAY_INITIALIZER :", "+\t\t\t\tArrayInitializer arrayInitializer = new ArrayInitializer();", "+\t\t\t\tarrayInitializer.expressions = new Expression[]{expression};", "+\t\t\t\texpressionPtr -= expressionLengthStack[expressionLengthPtr--];", "+\t\t\t\t", "+\t\t\t\tif(expressionLengthPtr > -1", "+\t\t\t\t\t&& expressionPtr > -1", "+\t\t\t\t\t&& this.expressionStack[expressionPtr] != null", "+\t\t\t\t\t&& this.expressionStack[expressionPtr].sourceStart > info) {", "+\t\t\t\t\texpressionLengthPtr--;\t", "+\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\tlastCheckPoint = scanner.currentPosition;", "+\t\t\t\t", "+\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER, 1) == K_ARRAY_CREATION) {", "+\t\t\t\t\tArrayAllocationExpression allocationExpression = new ArrayAllocationExpression();", "+\t\t\t\t\tallocationExpression.type = getTypeReference(0);", "+\t\t\t\t\tint length = expressionLengthStack[expressionLengthPtr];", "+\t\t\t\t\tallocationExpression.dimensions = new Expression[length];", "+", "+\t\t\t\t\tallocationExpression.initializer = arrayInitializer;", "+\t\t\t\t\tassistNodeParent = allocationExpression;", "+\t\t\t\t} else if(currentElement instanceof RecoveredField) {", "+\t\t\t\t\tRecoveredField recoveredField = (RecoveredField) currentElement;", "+\t\t\t\t\tif(recoveredField.fieldDeclaration.type.dimensions() == 0) {", "+\t\t\t\t\t\tBlock block = new Block(0);", "+\t\t\t\t\t\tblock.sourceStart = info;", "+\t\t\t\t\t\tcurrentElement = currentElement.add(block, 1);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatement = arrayInitializer;", "+\t\t\t\t\t}", "+\t\t\t\t} else if(currentElement instanceof RecoveredLocalVariable) {", "+\t\t\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) currentElement;", "+\t\t\t\t\tif(recoveredLocalVariable.localDeclaration.type.dimensions() == 0) {", "+\t\t\t\t\t\tBlock block = new Block(0);", "+\t\t\t\t\t\tblock.sourceStart = info;", "+\t\t\t\t\t\tcurrentElement = currentElement.add(block, 1);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatement = arrayInitializer;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tstatement = arrayInitializer;", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_ARRAY_CREATION :", "+\t\t\t\tArrayAllocationExpression allocationExpression = new ArrayAllocationExpression();", "+\t\t\t\tallocationExpression.type = getTypeReference(0);", "+\t\t\t\tallocationExpression.dimensions = new Expression[]{expression};", "+\t\t\t\t", "+\t\t\t\tassistNodeParent = allocationExpression;", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_ASSISGNMENT_OPERATOR :", "+\t\t\t\tif(expressionPtr > 0 && expressionStack[expressionPtr - 1] != null) {", "+\t\t\t\t\tAssignment assignment;", "+\t\t\t\t\tif(info == EQUAL) {", "+\t\t\t\t\t\tassignment = new Assignment(", "+\t\t\t\t\t\t\texpressionStack[expressionPtr - 1],", "+\t\t\t\t\t\t\texpression,", "+\t\t\t\t\t\t\texpression.sourceEnd", "+\t\t\t\t\t\t);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tassignment = new CompoundAssignment(", "+\t\t\t\t\t\t\texpressionStack[expressionPtr - 1],", "+\t\t\t\t\t\t\texpression,", "+\t\t\t\t\t\t\tinfo,", "+\t\t\t\t\t\t\texpression.sourceEnd", "+\t\t\t\t\t\t);", "+\t\t\t\t\t}", "+\t\t\t\t\tassistNodeParent = assignment;", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a13042c373372e8f5b6716ac9577a0cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "b1ce5a863ad0a541f80dd0793ff207f1e4ecf677", "commitAfterChange": "72d60854091bd7e8a5aafafdfea62cc297a3eb41", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "diff": ["+\t\tboolean storeType = true, storeParam = true;", "+\t\tint parameterized = 0;", "+\t\tint paramPtr = -1;", "+\t\tchar[][] paramNames = null;", "+\t\tint[] wildcards = new int[10];", "-\t\t\tswitch (token) {", "-\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault: // all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])", "+\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\tif (storeParam) {", "+\t\t\t\t\tswitch (token) {", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Not treated yet...", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameQUESTION:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == -1) {", "+\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.UNBOUND;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameextends:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == Wildcard.UNBOUND) {", "+\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.EXTENDS;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamesuper:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == Wildcard.UNBOUND) {", "+\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.SUPER;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameCOMMA:", "+\t\t\t\t\t\t\tif (parameterized == 1) {", "+\t\t\t\t\t\t\t\tparamPtr++;", "+\t\t\t\t\t\t\t\twildcards[paramPtr] = -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\t\t\tif (parameterized == 1) storeParam = false;", "+\t\t\t\t\t\t\tparameterized--;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "+\t\t\t\t\t\t\tif (parameterized == 0) {", "+\t\t\t\t\t\t\t\tparamNames = new char[10][]; // 10 parameters max", "+\t\t\t\t\t\t\t\tparamPtr++;", "+\t\t\t\t\t\t\t\twildcards[paramPtr] = -1;", "+\t\t\t\t\t\t\t\tstoreType = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tparameterized++;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "+\t\t\t\t\t\t\tif (parameterized == 1 && storeParam) {", "+\t\t\t\t\t\t\t\tif (paramPtr < paramNames.length) {", "+\t\t\t\t\t\t\t\t\tif (paramNames[paramPtr] == null) {", "+\t\t\t\t\t\t\t\t\t\t// never store id at this index", "+\t\t\t\t\t\t\t\t\t\tparamNames[paramPtr] = scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// syntax error", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (storeType) { // store type if not in type arguments declaration", "+\t\t\t\t}", "+\t\t\t\tstoreType = parameterized == 0;", "+\t\t// Resize param names array if necessary", "+\t\tif (paramPtr >= 0) {", "+\t\t\tSystem.arraycopy(paramNames, 0, paramNames = new char[paramPtr+1][], 0, paramPtr+1);", "+\t\t\tSystem.arraycopy(wildcards, 0, wildcards = new int[paramPtr+1], 0, paramPtr+1);", "+\t\t}", "-\t\t\t\treturn new TypeReferencePattern(qualificationChars, typeChars, matchRule);", "+\t\t\t\treturn new TypeReferencePattern(qualificationChars, typeChars, paramNames, false /* not generic */, wildcards, matchRule);"]}], "num": 24883}
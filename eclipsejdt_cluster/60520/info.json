{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4df1f6e7c40c62711f72d8e467facda6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef9e20fbf54ddcd86d5c7554b78f1bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "305e4f0c27f7df148c6acf3c313dda144407f8c1", "commitAfterChange": "c72a639799e1f7a209f8477bea888d0d19067c25", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "diff": ["-\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1); // need to hold onto this\r", "-\tCompilationUnitDeclaration unit =\r", "-\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\tCompilationUnitDeclaration unit;\r", "+\tif (sourceType instanceof SourceTypeElementInfo) {\r", "+\t\t// get source\r", "+\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo)sourceType;\r", "+\t\tIType type = elementInfo.getHandle();\r", "+\t\ttry {\r", "+\t\t\tfinal IFile file = (IFile)type.getUnderlyingResource();\r", "+\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "+\r", "+\t\t\t// get main type name\r", "+\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "+\t\t\tfinal char[] mainTypeName = fileName.substring(0, fileName.length()-5).toCharArray(); \r", "+\r", "+\t\t\t// source unit\r", "+\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "+\t\t\t\tpublic char[] getContents() {\r", "+\t\t\t\t\treturn source;\r", "+\t\t\t\t}\r", "+\t\t\t\tpublic char[] getFileName() {\r", "+\t\t\t\t\treturn fileName.toCharArray();\r", "+\t\t\t\t}\r", "+\t\t\t\tpublic char[] getMainTypeName() {\r", "+\t\t\t\t\treturn mainTypeName;\r", "+\t\t\t\t}\r", "+\t\t\t};\r", "+\t\t\t\r", "+\t\t\t// diet parse\r", "+\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);  \r", "+\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\tunit = null;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 0, 0);\r", "+\t\tunit =\r", "+\t\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\t}\r", "+\t\tthis.parsedUnits.put(sourceType.getQualifiedName(), unit);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a655b2826def0b5fe9b73c71e2331662", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "signatureAfterChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["- */\r", "-public void accept(ISourceType sourceType, PackageBinding packageBinding) {\r", "-\twhile (sourceType.getEnclosingType() != null) sourceType = sourceType.getEnclosingType();\r", "-\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1); // need to hold onto this\r", "-\tCompilationUnitDeclaration unit =\r", "-\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "-\tif (unit != null) {\r", "-\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "-\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "-\t}\r", "-}\r", "+\t */\r", "+\tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding) {\r", "+\t\tISourceType sourceType = sourceTypes[0];\r", "+\t\twhile (sourceType.getEnclosingType() != null)\r", "+\t\t\tsourceType = sourceType.getEnclosingType();\r", "+\t\tCompilationUnitDeclaration unit;\r", "+\t\tif (sourceType instanceof SourceTypeElementInfo) {\r", "+\t\t\t// get source\r", "+\t\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo) sourceType;\r", "+\t\t\tIType type = elementInfo.getHandle();\r", "+\t\t\t\tfinal IFile file = (IFile) type.getUnderlyingResource();\r", "+\t\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "+\t\t\t\t// get main type name\r", "+\t\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "+\t\t\t\tfinal char[] mainTypeName =\r", "+\t\t\t\t\tfileName.substring(0, fileName.length() - 5).toCharArray();\r", "+\t\t\t\t// source unit\r", "+\t\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "+\t\t\t\t\tpublic char[] getContents() {\r", "+\t\t\t\t\t\treturn source;\r", "+\t\t\t\t\tpublic char[] getFileName() {\r", "+\t\t\t\t\t\treturn fileName.toCharArray();\r", "+\t\t\t\t\tpublic char[] getMainTypeName() {\r", "+\t\t\t\t\t\treturn mainTypeName;\r", "+\t\t\t\t};\r", "+\r", "+\t\t\t\t// diet parse\r", "+\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "+\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\tunit = null;\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tCompilationResult result =\r", "+\t\t\t\tnew CompilationResult(sourceType.getFileName(), 0, 0);\r", "+\t\t\tunit =\r", "+\t\t\t\tSourceTypeConverter.buildCompilationUnit(\r", "+\t\t\t\t\tsourceTypes,\r", "+\t\t\t\t\ttrue,\r", "+\t\t\t\t\ttrue,\r", "+\t\t\t\t\tlookupEnvironment.problemReporter,\r", "+\t\t\t\t\tresult);\r", "+\t\t}\r", "+\r", "+\t\tif (unit != null) {\r", "+\t\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "+\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "+\t\t\tthis.parsedUnits.put(sourceType.getQualifiedName(), unit);\r", "+\t\t}\r", "+\t}\r"]}], "num": 60520}
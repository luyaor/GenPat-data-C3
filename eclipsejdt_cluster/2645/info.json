{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3998f4680b4fdd1be6f257675068667", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b001b5fae2f851a0376a3a565b53c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "2a01994b0addf3b51b8cc85382b32cfdc277de6c", "commitAfterChange": "03bf58276587a73704c9ef865d4a7b548edf18f3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \r private String[] getPathsOfDeclaringType()", "signatureAfterChange": "\r \r private String[] getPathsOfDeclaringType()", "diff": ["-\t\tif (indexManager != null) {\r", "-\t\t\tindexManager.performConcurrentJob(\r", "-\t\t\t\tnew PatternSearchJob(\r", "-\t\t\t\t\tsearchPattern, \r", "-\t\t\t\t\tscope, \r", "-\t\t\t\t\tdetailLevel, \r", "-\t\t\t\t\tsearchRequestor, \r", "-\t\t\t\t\tindexManager),\r", "-\t\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,\r", "-\t\t\t\tprogressMonitor);\r", "-\t\t\treturn pathCollector.getPaths();\r", "-\t\t}\r", "+\r", "+\t\tindexManager.performConcurrentJob(\r", "+\t\t\tnew PatternSearchJob(\r", "+\t\t\t\tsearchPattern, \r", "+\t\t\t\tscope, \r", "+\t\t\t\tdetailLevel, \r", "+\t\t\t\tsearchRequestor, \r", "+\t\t\t\tindexManager),\r", "+\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,\r", "+\t\t\tprogressMonitor);\r", "+\t\treturn pathCollector.getPaths();\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97ea73514534e58f1c78d57e6be0716e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "2990e636ee766a24121ef2ab5ed2ac0b361907fa", "commitAfterChange": "fb53fb0f6811ae02c9c57ef9c1be53c095492760", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeArguments()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeArguments()", "diff": ["-\t\tif (this.binding.isParameterizedType()) {", "+\t\tif (this.binding.isParameterizedTypeWithActualArguments()) {", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentsLength = arguments.length;", "-\t\t\t\tITypeBinding[] newTypeArguments = new ITypeBinding[argumentsLength];", "-\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "-\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(arguments[i]);", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn this.typeArguments = NO_TYPE_BINDINGS;", "-\t\t\t\t\t}", "-\t\t\t\t\tnewTypeArguments[i] = typeBinding;", "+\t\t\tint argumentsLength = arguments.length;", "+\t\t\tITypeBinding[] newTypeArguments = new ITypeBinding[argumentsLength];", "+\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(arguments[i]);", "+\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\treturn this.typeArguments = NO_TYPE_BINDINGS;", "-\t\t\t\treturn this.typeArguments = newTypeArguments;", "+\t\t\t\tnewTypeArguments[i] = typeBinding;", "+\t\t\treturn this.typeArguments = newTypeArguments;"]}], "num": 2645}
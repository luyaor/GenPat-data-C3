{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "077c85f2bdd484298febd9dc0addc9ff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ab5088590bcfe6862286d47f3bd4521", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 105, "signatureBeforeChange": " \t \tprivate PrimitiveType.Code getPrimitiveTypeCode(char[] name)", "signatureAfterChange": " \t \tprotected PrimitiveType.Code getPrimitiveTypeCode(char[] name)", "diff": ["+\t", "+\tprotected PrimitiveType.Code getPrimitiveTypeCode(char[] name) {", "+\t\tswitch(name[0]) {", "+\t\t\tcase 'i' :", "+\t\t\t\tif (name.length == 3 && name[1] == 'n' && name[2] == 't') {", "+\t\t\t\t\treturn PrimitiveType.INT;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'l' :", "+\t\t\t\tif (name.length == 4 && name[1] == 'o' && name[2] == 'n' && name[3] == 'g') {", "+\t\t\t\t\treturn PrimitiveType.LONG;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'd' :", "+\t\t\t\tif (name.length == 6", "+\t\t\t\t\t && name[1] == 'o'", "+\t\t\t\t\t && name[2] == 'u'", "+\t\t\t\t\t && name[3] == 'b'", "+\t\t\t\t\t && name[4] == 'l'", "+\t\t\t\t\t && name[5] == 'e') {", "+\t\t\t\t\treturn PrimitiveType.DOUBLE;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'f' :", "+\t\t\t\tif (name.length == 5", "+\t\t\t\t\t && name[1] == 'l'", "+\t\t\t\t\t && name[2] == 'o'", "+\t\t\t\t\t && name[3] == 'a'", "+\t\t\t\t\t && name[4] == 't') {", "+\t\t\t\t\treturn PrimitiveType.FLOAT;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'b' :", "+\t\t\t\tif (name.length == 4", "+\t\t\t\t\t && name[1] == 'y'", "+\t\t\t\t\t && name[2] == 't'", "+\t\t\t\t\t && name[3] == 'e') {", "+\t\t\t\t\treturn PrimitiveType.BYTE;", "+\t\t\t\t} else", "+\t\t\t\t\tif (name.length == 7", "+\t\t\t\t\t\t && name[1] == 'o'", "+\t\t\t\t\t\t && name[2] == 'o'", "+\t\t\t\t\t\t && name[3] == 'l'", "+\t\t\t\t\t\t && name[4] == 'e'", "+\t\t\t\t\t\t && name[5] == 'a'", "+\t\t\t\t\t\t && name[6] == 'n') {", "+\t\t\t\t\treturn PrimitiveType.BOOLEAN;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'c' :", "+\t\t\t\tif (name.length == 4", "+\t\t\t\t\t && name[1] == 'h'", "+\t\t\t\t\t && name[2] == 'a'", "+\t\t\t\t\t && name[3] == 'r') {", "+\t\t\t\t\treturn PrimitiveType.CHAR;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 's' :", "+\t\t\t\tif (name.length == 5", "+\t\t\t\t\t && name[1] == 'h'", "+\t\t\t\t\t && name[2] == 'o'", "+\t\t\t\t\t && name[3] == 'r'", "+\t\t\t\t\t && name[4] == 't') {", "+\t\t\t\t\treturn PrimitiveType.SHORT;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'v' :", "+\t\t\t\tif (name.length == 4", "+\t\t\t\t\t && name[1] == 'o'", "+\t\t\t\t\t && name[2] == 'i'", "+\t\t\t\t\t && name[3] == 'd') {", "+\t\t\t\t\treturn PrimitiveType.VOID;", "+\t\t\t\t}", "+\t\t}", "+\t\treturn null; // cannot be reached", "+\t}", "-\tprivate PrimitiveType.Code getPrimitiveTypeCode(char[] name) {", "-\t\tswitch(name[0]) {", "-\t\t\tcase 'i' :", "-\t\t\t\tif (name.length == 3 && name[1] == 'n' && name[2] == 't') {", "-\t\t\t\t\treturn PrimitiveType.INT;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase 'l' :", "-\t\t\t\tif (name.length == 4 && name[1] == 'o' && name[2] == 'n' && name[3] == 'g') {", "-\t\t\t\t\treturn PrimitiveType.LONG;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase 'd' :", "-\t\t\t\tif (name.length == 6", "-\t\t\t\t\t && name[1] == 'o'", "-\t\t\t\t\t && name[2] == 'u'", "-\t\t\t\t\t && name[3] == 'b'", "-\t\t\t\t\t && name[4] == 'l'", "-\t\t\t\t\t && name[5] == 'e') {", "-\t\t\t\t\treturn PrimitiveType.DOUBLE;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase 'f' :", "-\t\t\t\tif (name.length == 5", "-\t\t\t\t\t && name[1] == 'l'", "-\t\t\t\t\t && name[2] == 'o'", "-\t\t\t\t\t && name[3] == 'a'", "-\t\t\t\t\t && name[4] == 't') {", "-\t\t\t\t\treturn PrimitiveType.FLOAT;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase 'b' :", "-\t\t\t\tif (name.length == 4", "-\t\t\t\t\t && name[1] == 'y'", "-\t\t\t\t\t && name[2] == 't'", "-\t\t\t\t\t && name[3] == 'e') {", "-\t\t\t\t\treturn PrimitiveType.BYTE;", "-\t\t\t\t} else", "-\t\t\t\t\tif (name.length == 7", "-\t\t\t\t\t\t && name[1] == 'o'", "-\t\t\t\t\t\t && name[2] == 'o'", "-\t\t\t\t\t\t && name[3] == 'l'", "-\t\t\t\t\t\t && name[4] == 'e'", "-\t\t\t\t\t\t && name[5] == 'a'", "-\t\t\t\t\t\t && name[6] == 'n') {", "-\t\t\t\t\treturn PrimitiveType.BOOLEAN;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase 'c' :", "-\t\t\t\tif (name.length == 4", "-\t\t\t\t\t && name[1] == 'h'", "-\t\t\t\t\t && name[2] == 'a'", "-\t\t\t\t\t && name[3] == 'r') {", "-\t\t\t\t\treturn PrimitiveType.CHAR;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase 's' :", "-\t\t\t\tif (name.length == 5", "-\t\t\t\t\t && name[1] == 'h'", "-\t\t\t\t\t && name[2] == 'o'", "-\t\t\t\t\t && name[3] == 'r'", "-\t\t\t\t\t && name[4] == 't') {", "-\t\t\t\t\treturn PrimitiveType.SHORT;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase 'v' :", "-\t\t\t\tif (name.length == 4", "-\t\t\t\t\t && name[1] == 'o'", "-\t\t\t\t\t && name[2] == 'i'", "-\t\t\t\t\t && name[3] == 'd') {", "-\t\t\t\t\treturn PrimitiveType.VOID;", "-\t\t\t\t}", "-\t\tthrow new IllegalArgumentException(\"Not a primitive type\");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b25b277c3686570bb87a8a500715dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "510bca02ec1705cb49e8296894c2f20084ae432d", "commitAfterChange": "4b7339d0380d230f31bd3019b0bc7395f10d2215", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t\tString normalized(String originalValue)", "signatureAfterChange": "  \t\tString normalized(String originalValue)", "diff": ["+\t\t\tString result;", "-\t\t\t\treturn super.normalized(originalValue);", "-\t\t\tfinal int START = 0, KEEPING = 1, KEEPING_R = 2, SKIPING = 3, SKIPING_R = 4, END = 5, ERROR = 6;", "-\t\t\tint state = START, currentLineIndex = 0, currentCharIndex = 0, sourceLength;", "-\t\t\tchar currentChar = '\\0';", "-\t\t\tif (first <= 0)", "-\t\t\t\tstate = SKIPING;", "-\t\t\telse", "-\t\t\t\tstate = KEEPING;", "-\t\t\tStringBuffer normalizedValueBuffer = new StringBuffer(), source = new StringBuffer(", "-\t\t\t\t\toriginalValue);", "-\t\t\tsourceLength = source.length();", "-\t\t\twhile (state != END && state != ERROR) {", "-\t\t\t\tif (currentCharIndex < sourceLength) {", "-\t\t\t\t\tcurrentChar = source.charAt(currentCharIndex++);", "-\t\t\t\t\tswitch (currentChar) {", "-\t\t\t\t\tcase '\\r':", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tstate = KEEPING_R;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING:", "-\t\t\t\t\t\t\tstate = SKIPING_R;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '\\n':", "-\t\t\t\t\t\tcurrentLineIndex++;", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING_R:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tif (currentLineIndex == first) {", "-\t\t\t\t\t\t\t\tstate = SKIPING;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING_R:", "-\t\t\t\t\t\t\t// in effect, we tolerate too big first and number", "-\t\t\t\t\t\t\t// values", "-\t\t\t\t\t\t\tif (currentLineIndex >= first + number) {", "-\t\t\t\t\t\t\t\tif (currentCharIndex < sourceLength)", "-\t\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(source", "-\t\t\t\t\t\t\t\t\t\t\t.substring(currentCharIndex));", "-\t\t\t\t\t\t\t\tstate = END;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING:", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t}", "-\t\t\t\t} ", "-\t\t\t\telse if (currentChar == '\\n')", "-\t\t\t\t\tstate = END;", "+\t\t\t\tresult = super.normalized(originalValue);", "+\t\t\telse {", "+\t\t\t\tfinal int START = 0, KEEPING = 1, KEEPING_R = 2, SKIPING = 3, SKIPING_R = 4, END = 5, ERROR = 6;", "+\t\t\t\tint state = START, currentLineIndex = 0, currentCharIndex = 0, sourceLength;", "+\t\t\t\tchar currentChar = '\\0';", "+\t\t\t\tif (first <= 0)", "+\t\t\t\t\tstate = SKIPING;", "-\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\tstate = KEEPING;", "+\t\t\t\tStringBuffer normalizedValueBuffer = new StringBuffer(), source = new StringBuffer(", "+\t\t\t\t\t\toriginalValue);", "+\t\t\t\tsourceLength = source.length();", "+\t\t\t\twhile (state != END && state != ERROR) {", "+\t\t\t\t\tif (currentCharIndex < sourceLength) {", "+\t\t\t\t\t\tcurrentChar = source.charAt(currentCharIndex++);", "+\t\t\t\t\t\tswitch (currentChar) {", "+\t\t\t\t\t\tcase '\\r':", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tstate = KEEPING_R;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING:", "+\t\t\t\t\t\t\t\tstate = SKIPING_R;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\\n':", "+\t\t\t\t\t\t\tcurrentLineIndex++;", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING: // tolerate Linux line delimiters", "+\t\t\t\t\t\t\tcase KEEPING_R:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tif (currentLineIndex == first) {", "+\t\t\t\t\t\t\t\t\tstate = SKIPING;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING: // tolerate Linux line delimiters", "+\t\t\t\t\t\t\tcase SKIPING_R:", "+\t\t\t\t\t\t\t\t// in effect, we tolerate too big first and number", "+\t\t\t\t\t\t\t\t// values", "+\t\t\t\t\t\t\t\tif (currentLineIndex >= first + number) {", "+\t\t\t\t\t\t\t\t\tif (currentCharIndex < sourceLength)", "+\t\t\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(source", "+\t\t\t\t\t\t\t\t\t\t\t\t.substring(currentCharIndex));", "+\t\t\t\t\t\t\t\t\tstate = END;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING:", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} ", "+\t\t\t\t\telse if (currentChar == '\\n')", "+\t\t\t\t\t\tstate = END;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t}", "+\t\t\t\tif (state == ERROR)", "+\t\t\t\t\tnormalizedValueBuffer", "+\t\t\t\t\t\t\t.append(\"UNEXPECTED ERROR in LinesRangeNormalizer\");", "+\t\t\t\tresult = super.normalized(normalizedValueBuffer.toString());", "-\t\t\tif (state == ERROR)", "-\t\t\t\tnormalizedValueBuffer", "-\t\t\t\t\t\t.append(\"UNEXPECTED ERROR in LinesRangeNormalizer\");", "-\t\t\treturn super.normalized(normalizedValueBuffer.toString());", "+\t\t\treturn result;"]}], "num": 11750}
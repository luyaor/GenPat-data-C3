{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e5553defd7ee4ebece6d58ba74c4f09", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82f0370225a6e4d0c90a1b6b09624670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a83998eafb5710017d069118e5017f85165dc68d", "commitAfterChange": "507dcedd3a1fdac6fc22c9b1a4a0ec9c8798fdc1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t */", "-\t\t// search for compiler ast nodes with same position", "-\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "-\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "-\t\t\tif (typeRef.sourceStart==start) {", "-\t\t\t\treturn typeRef;", "+\t\t// parameters array", "+\t\tif (this.parameters != null) {", "+\t\t\tfor (int i=0; i<this.parameters.length; i++) {", "+\t\t\t\tJavadocSingleNameReference param = this.parameters[i];", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "-\t\tfor (int i=0; i<this.references.length; i++) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "-\t\t\tif (expression.sourceStart==start) {", "-\t\t\t\treturn expression;", "+\t\t// thrown exception array", "+\t\tif (this.thrownExceptions != null) {", "+\t\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "+\t\t\t\tif (typeRef.sourceStart==start) {", "+\t\t\t\t\treturn typeRef;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// references array", "+\t\tif (this.references != null) {", "+\t\t\tfor (int i=0; i<this.references.length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "+\t\t\t\tif (expression.sourceStart==start) {", "+\t\t\t\t\treturn expression;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81f7de2ae0383049789d6c6b63cbbe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "e1b169e81e77457e606284ca99eb647f32044188", "commitAfterChange": "3aabc067e22084d59ef0ea59b0d58e1085dede4c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "signatureAfterChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-\t\t", "+\t\tif (r2.findSuperTypeOriginatingFrom(r1) != null)", "+\t\t\treturn false;", "+\t\tint i;", "-\t\t\tfor (int i = 0; i < returnExpressionsLength; i++) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "-\t\t\treturn true;", "+\t\t\tif (i == returnExpressionsLength)", "+\t\t\t\treturn true;", "-\t\tif (returnExpressionsLength == 0)", "-\t\t\treturn false;", "-\t\t", "-\t\tsSam = s.getSingleAbstractMethod(this.enclosingScope);", "-\t\tfor (int i = 0; i < returnExpressionsLength; i++) {", "-\t\t\tExpression resultExpression = returnExpressions[i];", "-\t\t\tif (!resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType))", "-\t\t\t\treturn false;", "+\t\tif (!r1.isBaseType() && r2.isBaseType()) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "+\t\t\t\tif (returnExpressions[i].resolvedType.isBaseType())", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i == returnExpressionsLength)", "+\t\t\t\treturn true;", "-\t\treturn true;", "+\t\tif (r1.isFunctionalInterface(this.enclosingScope) && r2.isFunctionalInterface(this.enclosingScope)) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "+\t\t\t\tExpression resultExpression = returnExpressions[i];", "+\t\t\t\tif (!resultExpression.sIsMoreSpecific(r1, r2))", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i != 0 && i == returnExpressionsLength)", "+\t\t\t\treturn true;", "+\t\t}", "+\t\treturn false;"]}], "num": 18743}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ad0fcc385dd60544a45d02fa5c8819f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18bc603dd87958007993a8af26916913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryTypeConverter.java", "commitBeforeChange": "08c130b51e222d1dc818f74430195d7cc0d9ba9c", "commitAfterChange": "f44833f9e9c6c61508713666b8c272384401715c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "signatureAfterChange": " \t \tprivate AbstractMethodDeclaration convert(IMethod method, IType type) throws JavaModelException", "diff": ["-\tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException {", "+\tprivate AbstractMethodDeclaration convert(IMethod method, IType type) throws JavaModelException {", "+\t\t", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParams = null;", "+\t\t", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t/* convert type parameters */", "+\t\t\tITypeParameter[] typeParameters = method.getTypeParameters();", "+\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "+\t\t\t\tint parameterCount = typeParameters.length;", "+\t\t\t\ttypeParams = new org.eclipse.jdt.internal.compiler.ast.TypeParameter[parameterCount];", "+\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\tITypeParameter typeParameter = typeParameters[i];", "+\t\t\t\t\ttypeParams[i] = ", "+\t\t\t\t\t\tcreateTypeParameter(", "+\t\t\t\t\t\t\t\ttypeParameter.getElementName().toCharArray(), ", "+\t\t\t\t\t\t\t\tstringArrayToCharArray(typeParameter.getBounds()),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t0);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t\tdecl.typeParameters = typeParams;", "-\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(method.getReturnType()).toCharArray(), typeNames);", "+\t\t\tTypeReference typeReference = createTypeReference(method.getReturnType());", "+\t\t\tdecl.typeParameters = typeParams;", "-\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(argumentTypeName).toCharArray(), typeNames);", "+\t\t\tTypeReference typeReference = createTypeReference(argumentTypeName);", "-\t\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(exceptionTypeNames[i]).toCharArray(), typeNames);", "+\t\t\t\tTypeReference typeReference = createTypeReference(exceptionTypeNames[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af3bb62653a64b0fe782ca911ef23548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryTypeConverter.java", "commitBeforeChange": "08c130b51e222d1dc818f74430195d7cc0d9ba9c", "commitAfterChange": "f44833f9e9c6c61508713666b8c272384401715c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate static TypeDeclaration convert(IType type, IType alreadyComputedMember,TypeDeclaration alreadyComputedMemberDeclaration, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "signatureAfterChange": " \t \tprivate TypeDeclaration convert(IType type, IType alreadyComputedMember,TypeDeclaration alreadyComputedMemberDeclaration) throws JavaModelException", "diff": ["-\tprivate static TypeDeclaration convert(IType type, IType alreadyComputedMember,TypeDeclaration alreadyComputedMemberDeclaration, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException {", "+\tprivate TypeDeclaration convert(IType type, IType alreadyComputedMember,TypeDeclaration alreadyComputedMemberDeclaration) throws JavaModelException {", "-\t\t\tTypeReference typeReference = createTypeReference(type.getSuperclassName().toCharArray(), typeNames);", "+\t\t\tTypeReference typeReference = createTypeReference(type.getSuperclassTypeSignature());", "-\t\tString[] interfaceNames = type.getSuperInterfaceNames();", "-\t\tint interfaceCount = interfaceNames == null ? 0 : interfaceNames.length;", "+\t\tString[] interfaceTypes = type.getSuperInterfaceTypeSignatures();", "+\t\tint interfaceCount = interfaceTypes == null ? 0 : interfaceTypes.length;", "-\t\t\tTypeReference typeReference = createTypeReference(interfaceNames[i].toCharArray(), typeNames);", "+\t\t\tTypeReference typeReference = createTypeReference(interfaceTypes[i]);", "+\t\t}", "+\t\t", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t", "+\t\t\t/* convert type parameters */", "+\t\t\tITypeParameter[] typeParameters = type.getTypeParameters();", "+\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "+\t\t\t\tint parameterCount = typeParameters.length;", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParams = new org.eclipse.jdt.internal.compiler.ast.TypeParameter[parameterCount];", "+\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\tITypeParameter typeParameter = typeParameters[i];", "+\t\t\t\t\ttypeParams[i] = ", "+\t\t\t\t\t\tcreateTypeParameter(", "+\t\t\t\t\t\t\t\ttypeParameter.getElementName().toCharArray(), ", "+\t\t\t\t\t\t\t\tstringArrayToCharArray(typeParameter.getBounds()),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t0);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\ttypeDeclaration.typeParameters = typeParams;", "+\t\t\t}", "-\t\t\t\ttypeDeclaration.memberTypes[i] = convert(memberTypes[i], null, null, compilationResult, typeNames);", "+\t\t\t\ttypeDeclaration.memberTypes[i] = convert(memberTypes[i], null, null);", "-\t\t\tFieldDeclaration fieldDeclaration = convert(fields[i], type, typeNames);", "+\t\t\tFieldDeclaration fieldDeclaration = convert(fields[i], type);", "-\t\t\tAbstractMethodDeclaration method = convert(methods[i], type, compilationResult, typeNames);", "+\t\t\tAbstractMethodDeclaration method = convert(methods[i], type);"]}], "num": 61999}
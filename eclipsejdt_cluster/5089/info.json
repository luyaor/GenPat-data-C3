{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "062763ba03d3f7b4ab42f552154ced51", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00cec58b9e81787dd36bf234f5b7a50a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 108, "signatureBeforeChange": " \t \tprivate char[][] findUnresolvedReferenceBefore(int to, BlockScope scope, final char[][] discouragedNames)", "signatureAfterChange": " \t \tprivate char[][] findUnresolvedReferenceBefore(int recordTo, int parseTo, BlockScope scope, final char[][] discouragedNames)", "diff": ["-\tprivate char[][] findUnresolvedReferenceBefore(int to, BlockScope scope, final char[][] discouragedNames) {", "-\t\tfinal int discouragedNamesCount = discouragedNames == null ? 0 : discouragedNames.length;", "+\tprivate char[][] findUnresolvedReferenceBefore(int recordTo, int parseTo, BlockScope scope, final char[][] discouragedNames) {", "-\t\t\t\t\tfor (int i = 0; i < discouragedNamesCount; i++) {", "-\t\t\t\t\t\tif (CharOperation.equals(discouragedNames[i], name, false)) return;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\trelevance += computeRelevanceForResolution(false);", "-\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(completionToken, name);", "-\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for local variable", "-\t\t\t\t\tCompletionEngine.this.noProposal = false;", "-\t\t\t\t\tif(!CompletionEngine.this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "-\t\t\t\t\t\tCompletionProposal proposal = CompletionEngine.this.createProposal(CompletionProposal.LOCAL_VARIABLE_REF, CompletionEngine.this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\t\tcreateTypeSignature(", "-\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "-\t\t\t\t\t\t\t\t\tOBJECT));", "-\t\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "-\t\t\t\t\t\tproposal.setTypeName(OBJECT);", "-\t\t\t\t\t\tproposal.setName(name);", "-\t\t\t\t\t\tproposal.setCompletion(name);", "-\t\t\t\t\t\tproposal.setFlags(Flags.AccDefault);", "-\t\t\t\t\t\tproposal.setReplaceRange(CompletionEngine.this.startPosition - CompletionEngine.this.offset, CompletionEngine.this.endPosition - CompletionEngine.this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tCompletionEngine.this.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tCompletionEngine.this.printDebug(proposal);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t", "+\t\t\t\t\tCompletionEngine.this.acceptUnresolvedName(name);", "-\t\t\t\t\tto,", "+\t\t\t\t\trecordTo,", "+\t\t\t\t\tparseTo,", "+\t\t\t\t\tdiscouragedNames,", "-\t\t\t\t\t\t\tif (initializer.block.sourceStart <= to &&", "-\t\t\t\t\t\t\t\t\tto < initializer.bodyEnd) {", "+\t\t\t\t\t\t\tif (initializer.block.sourceStart <= recordTo &&", "+\t\t\t\t\t\t\t\t\trecordTo < initializer.bodyEnd) {", "-\t\t\t\t\t\t\t\t\t\tto,", "+\t\t\t\t\t\t\t\t\t\trecordTo,", "+\t\t\t\t\t\t\t\t\t\tparseTo,", "+\t\t\t\t\t\t\t\t\t\tdiscouragedNames,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0ea4dac34eeea57e85d96157ec7ddaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 105, "signatureBeforeChange": " \t \tprivate char[][] findUnresolvedReferenceAfter(int from, BlockScope scope, final char[][] discouragedNames)", "signatureAfterChange": " \t \tprivate char[][] findUnresolvedReferenceAfter(int from, BlockScope scope, final char[][] discouragedNames)", "diff": ["-\t\tfinal int discouragedNamesCount = discouragedNames == null ? 0 : discouragedNames.length;", "-\t\t\t\t\tfor (int i = 0; i < discouragedNamesCount; i++) {", "-\t\t\t\t\t\tif (CharOperation.equals(discouragedNames[i], name, false)) return;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\trelevance += computeRelevanceForResolution(false);", "-\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(completionToken, name);", "-\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for local variable", "-\t\t\t\t\tCompletionEngine.this.noProposal = false;", "-\t\t\t\t\tif(!CompletionEngine.this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "-\t\t\t\t\t\tCompletionProposal proposal = CompletionEngine.this.createProposal(CompletionProposal.LOCAL_VARIABLE_REF, CompletionEngine.this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\t\tcreateTypeSignature(", "-\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "-\t\t\t\t\t\t\t\t\tOBJECT));", "-\t\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "-\t\t\t\t\t\tproposal.setTypeName(OBJECT);", "-\t\t\t\t\t\tproposal.setName(name);", "-\t\t\t\t\t\tproposal.setCompletion(name);", "-\t\t\t\t\t\tproposal.setFlags(Flags.AccDefault);", "-\t\t\t\t\t\tproposal.setReplaceRange(CompletionEngine.this.startPosition - CompletionEngine.this.offset, CompletionEngine.this.endPosition - CompletionEngine.this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tCompletionEngine.this.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tCompletionEngine.this.printDebug(proposal);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t", "+\t\t\t\t\tCompletionEngine.this.acceptUnresolvedName(name);", "+\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\t\t\t\t\t\tdiscouragedNames,"]}], "num": 5089}
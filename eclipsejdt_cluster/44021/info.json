{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "daf3f84bbd61e7e980509315307b5921", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b8a3347ff4f4eae96c3e77e3e5acbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["+\t\t// handle captured wildcards.", "+\t\tcase Binding.TYPE_PARAMETER: {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=347426", "+\t\t\tif (!isParameterizedType() || !otherType.isCapture()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tCaptureBinding capture = (CaptureBinding) otherType;", "+\t\t\tWildcardBinding wildcard = capture.wildcard;", "+\t\t\tTypeBinding upperBound = null;", "+\t\t\tTypeBinding [] otherBounds = null;", "+\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\treturn false; // T super syntax isn't allowed, impossible capture.", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\tTypeVariableBinding variable = wildcard.genericType.typeVariables()[wildcard.rank];", "+\t\t\t\t\tupperBound = variable.upperBound();", "+\t\t\t\t\totherBounds = variable.boundsCount() > 1 ? variable.otherUpperBounds() : null;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\t\totherBounds = wildcard.otherBounds;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\t// Given class A<T extends B<?>>, A<?> cannot be the universe of all parameterizations of A", "+\t\t\tif (upperBound.id == TypeIds.T_JavaLangObject && otherBounds == null) {", "+\t\t\t\treturn false; // but given class A<T>, A<?> stays an unbounded wildcard, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=348956", "+\t\t\t}", "+\t\t\totherType = capture.environment.createWildcard(null, 0, upperBound, otherBounds, Wildcard.EXTENDS);", "+\t\t\treturn isTypeArgumentContainedBy(otherType);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e559f022206ede0cccf236892c7533f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic boolean isFromSource()", "signatureAfterChange": " \tpublic boolean isFromSource()", "diff": ["+\t\t} else if (isTypeVariable()) {", "+\t\t\tfinal TypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\tfinal Binding declaringElement = typeVariableBinding.declaringElement;", "+\t\t\tif (declaringElement instanceof MethodBinding) {", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) declaringElement;", "+\t\t\t\treturn !methodBinding.declaringClass.isBinaryBinding();", "+\t\t\t} else {", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement;", "+\t\t\t\tif (typeBinding instanceof ReferenceBinding) {", "+\t\t\t\t\treturn !((ReferenceBinding) typeBinding).isBinaryBinding();", "+\t\t\t\t} else if (typeBinding instanceof ArrayBinding) {", "+\t\t\t\t\tfinal ArrayBinding arrayBinding = (ArrayBinding) typeBinding;", "+\t\t\t\t\tfinal org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType = arrayBinding.leafComponentType;", "+\t\t\t\t\tif (leafComponentType instanceof ReferenceBinding) {", "+\t\t\t\t\t\treturn !((ReferenceBinding) leafComponentType).isBinaryBinding();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t} else if (isCapture()) {", "+\t\t\tCaptureBinding captureBinding = (CaptureBinding) this.binding;", "+\t\t\treturn !captureBinding.sourceType.isBinaryBinding();"]}], "num": 44021}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06b8b796770517be10aee4fd9dd6acd4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c78d923cf2663cb41b17a05d57ba01b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "f3c33fcf9812c391ba41d170d6821b82285978bf", "commitAfterChange": "823f8cf519ce992bfb17971d3e63306334609bad", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnit unitElement, \t\tSourceElementParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration process( \t\t\tCompilationUnit unitElement, \t\t\tSourceElementParser parser, \t\t\tWorkingCopyOwner workingCopyOwner, \t\t\tHashMap problems, \t\t\tboolean creatingAST, \t\t\tint reconcileFlags, \t\t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["+\t */", "-\t\tCompilationUnit unitElement,", "-\t\tSourceElementParser parser,", "-\t\tWorkingCopyOwner workingCopyOwner,", "-\t\tHashMap problems,", "-\t\tboolean creatingAST,", "-\t\tint reconcileFlags,", "-\t\tIProgressMonitor monitor)", "+\t\t\tCompilationUnit unitElement,", "+\t\t\tSourceElementParser parser,", "+\t\t\tWorkingCopyOwner workingCopyOwner,", "+\t\t\tHashMap problems,", "+\t\t\tboolean creatingAST,", "+\t\t\tint reconcileFlags,", "+\t\t\tIProgressMonitor monitor)", "+\t\tCompilationUnitDeclaration unit = null;", "-\t\t\tCompilationUnitDeclaration unit = null;", "-\t\t\tif (parser != null) {", "-\t\t\t\tproblemFinder.parser = parser;", "-\t\t\t\ttry {", "+\t\t\ttry {", "+\t\t\t\tif (parser != null) {", "+\t\t\t\t\tproblemFinder.parser = parser;", "-\t\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t\tproblemFinder.handleInternalException(e, unit);", "+\t\t\t\t} else {", "+\t\t\t\t\tunit =", "+\t\t\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\t\t\tunitElement,", "+\t\t\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\t\t\tanalyzeAndGenerateCode, // analyze code", "+\t\t\t\t\t\t\tanalyzeAndGenerateCode); // generate code", "-\t\t\t} else {", "-\t\t\t\tunit =", "-\t\t\t\t\tproblemFinder.resolve(", "-\t\t\t\t\t\tunitElement,", "-\t\t\t\t\t\ttrue, // verify methods", "-\t\t\t\t\t\tanalyzeAndGenerateCode, // analyze code", "-\t\t\t\t\t\tanalyzeAndGenerateCode); // generate code", "+\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\tproblemFinder.handleInternalException(e, unit);", "-\t\t\tCompilationResult unitResult = unit.compilationResult;", "-\t\t\tCategorizedProblem[] unitProblems = unitResult.getProblems();", "-\t\t\tint length = unitProblems == null ? 0 : unitProblems.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "-\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "-\t\t\t\tproblems.put(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, categorizedProblems);", "+\t\t\tif (unit != null) {", "+\t\t\t\tCompilationResult unitResult = unit.compilationResult;", "+\t\t\t\tCategorizedProblem[] unitProblems = unitResult.getProblems();", "+\t\t\t\tint length = unitProblems == null ? 0 : unitProblems.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "+\t\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "+\t\t\t\t\tproblems.put(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, categorizedProblems);", "+\t\t\t\t}", "+\t\t\t\tunitProblems = unitResult.getTasks();", "+\t\t\t\tlength = unitProblems == null ? 0 : unitProblems.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "+\t\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "+\t\t\t\t\tproblems.put(IJavaModelMarker.TASK_MARKER, categorizedProblems);", "+\t\t\t\t}", "+\t\t\t\tif (NameLookup.VERBOSE) {", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "-\t\t\tunitProblems = unitResult.getTasks();", "-\t\t\tlength = unitProblems == null ? 0 : unitProblems.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "-\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "-\t\t\t\tproblems.put(IJavaModelMarker.TASK_MARKER, categorizedProblems);", "-\t\t\t}", "-\t\t\tif (NameLookup.VERBOSE) {", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t\treturn unit;", "+\t\treturn unit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55fcc856c7d4b39acbe9d2ee17d26242", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "b3921c5eea6f0c6a7e0f7e9f7a3a4e8e611961a3", "commitAfterChange": "502bad8ce7c832154fb3a7a8f85a868d7d077253", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy) throws JavaModelException", "diff": ["-\tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException {", "+\tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy) throws JavaModelException {", "+\t\t\tthis.resolveBindings = this.requestorIsActive;", "-\t\tif (this.ast != null) return this.ast; // no need to recompute AST if known already", "-\t\tif (((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0) || this.resolveBindings) {", "-\t\t\tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject())) {", "-\t\t\t\tHashMap problemMap;", "-\t\t\t\tif (this.problems == null) {", "-\t\t\t\t\tproblemMap = new HashMap();", "-\t\t\t\t\tif ((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0)", "-\t\t\t\t\t\tthis.problems = problemMap;", "-\t\t\t\t} else", "-\t\t\t\t\tproblemMap = this.problems;", "-\t\t\t\tCompilationUnitDeclaration unit = null;", "-\t\t\t\ttry {", "-\t\t\t\t\t// find problems", "-\t\t\t\t\tchar[] contents = workingCopy.getContents();", "-\t\t\t\t\tunit =", "-\t\t\t\t\t\tCompilationUnitProblemFinder.process(", "-\t\t\t\t\t\t\tworkingCopy,", "-\t\t\t\t\t\t\tcontents,", "-\t\t\t\t\t\t\tthis.workingCopyOwner,", "-\t\t\t\t\t\t\tproblemMap,", "-\t\t\t\t\t\t\tthis.astLevel != ICompilationUnit.NO_AST/*creating AST if level is not NO_AST */,", "-\t\t\t\t\t\t\treconcileFlags,", "-\t\t\t\t\t\t\tthis.progressMonitor);", "-\t\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "-", "-\t\t\t\t\t// create AST if needed", "-\t\t\t\t\tif (this.astLevel != ICompilationUnit.NO_AST && unit != null) {", "-\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "-\t\t\t\t\t\tthis.ast =", "-\t\t\t\t\t\t\tAST.convertCompilationUnit(", "-\t\t\t\t\t\t\t\tthis.astLevel,", "-\t\t\t\t\t\t\t\tunit,", "-\t\t\t\t\t\t\t\tcontents,", "-\t\t\t\t\t\t\t\toptions,", "-\t\t\t\t\t\t\t\ttrue/*isResolved*/,", "-\t\t\t\t\t\t\t\tworkingCopy,", "-\t\t\t\t\t\t\t\treconcileFlags,", "-\t\t\t\t\t\t\t\tthis.progressMonitor);", "-\t\t\t\t\t\tif (this.ast != null) {", "-\t\t\t\t\t\t\tthis.deltaBuilder.delta = new JavaElementDelta(workingCopy);", "-\t\t\t\t\t\t\tthis.deltaBuilder.delta.changedAST(this.ast);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "-\t\t\t\t\t}", "-\t\t\t    } catch (JavaModelException e) {", "-\t\t\t    \tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()))", "-\t\t\t    \t\tthrow e;", "-\t\t\t    \t// else JavaProject has lost its nature (or most likely was closed/deleted) while reconciling -> ignore", "-\t\t\t    \t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=100919)", "-\t\t\t    } finally {", "-\t\t\t        if (unit != null) {", "-\t\t\t            unit.cleanUp();", "-\t\t\t        }", "-\t\t\t    }", "-\t\t\t} // else working copy not in a Java project", "-\t\t\treturn this.ast;", "-\t\t}", "-\t\treturn null;", "+\t\tif (this.ast != null) ", "+\t\t\treturn this.ast; // no need to recompute AST if known already", "+\t\t", "+\t\tCompilationUnitDeclaration unit = null;", "+\t\tchar[] contents = null;", "+\t\ttry {", "+\t\t\t// find problems if needed", "+\t\t\tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()) ", "+\t\t\t\t\t&& (this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0) {", "+\t\t\t\tthis.resolveBindings = this.requestorIsActive;", "+\t\t\t\tif (this.problems == null)", "+\t\t\t\t\tthis.problems = new HashMap();", "+\t\t\t\tcontents = workingCopy.getContents();", "+\t\t\t\tunit =", "+\t\t\t\t\tCompilationUnitProblemFinder.process(", "+\t\t\t\t\t\tworkingCopy,", "+\t\t\t\t\t\tcontents,", "+\t\t\t\t\t\tthis.workingCopyOwner,", "+\t\t\t\t\t\tthis.problems,", "+\t\t\t\t\t\tthis.astLevel != ICompilationUnit.NO_AST/*creating AST if level is not NO_AST */,", "+\t\t\t\t\t\treconcileFlags,", "+\t\t\t\t\t\tthis.progressMonitor);", "+\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// create AST if needed", "+\t\t\tif (this.astLevel != ICompilationUnit.NO_AST ", "+\t\t\t\t\t&& unit !=null/*unit is null if working copy is consistent && (problem detection not forced || non-Java project) -> don't create AST as per API*/) {", "+\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "+\t\t\t\t// convert AST", "+\t\t\t\tthis.ast =", "+\t\t\t\t\tAST.convertCompilationUnit(", "+\t\t\t\t\t\tthis.astLevel,", "+\t\t\t\t\t\tunit,", "+\t\t\t\t\t\tcontents,", "+\t\t\t\t\t\toptions,", "+\t\t\t\t\t\tthis.resolveBindings,", "+\t\t\t\t\t\tworkingCopy,", "+\t\t\t\t\t\treconcileFlags,", "+\t\t\t\t\t\tthis.progressMonitor);", "+\t\t\t\tif (this.ast != null) {", "+\t\t\t\t\tthis.deltaBuilder.delta = new JavaElementDelta(workingCopy);", "+\t\t\t\t\tthis.deltaBuilder.delta.changedAST(this.ast);", "+\t\t\t\t}", "+\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "+\t\t\t}", "+\t    } catch (JavaModelException e) {", "+\t    \tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()))", "+\t    \t\tthrow e;", "+\t    \t// else JavaProject has lost its nature (or most likely was closed/deleted) while reconciling -> ignore", "+\t    \t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=100919)", "+\t    } finally {", "+\t        if (unit != null) {", "+\t            unit.cleanUp();", "+\t        }", "+\t    }", "+\t\treturn this.ast;"]}], "num": 39962}
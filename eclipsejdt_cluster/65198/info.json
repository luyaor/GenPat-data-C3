{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a20f9352eec0516d825d0668a1e93e39", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0795acb7819ed7738040fbf5aba0c0d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "a6231ce33b0c4c1035133950b71c0c97d48b4fc8", "commitAfterChange": "fb73ff7c4976ff452de2ec97a6404f1940e5234e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public static int nextAvailablePortNumber()", "signatureAfterChange": " public static int getFreePort()", "diff": ["-public static int nextAvailablePortNumber() {", "-\tfor (int i = MAX_PORT_NUMBER; i > 1000; i--) {", "-\t\tint localPort = new SocketHelper().getAvailablePort(i);", "-\t\tif (localPort != -1) {", "-\t\t\treturn localPort;", "+public static int getFreePort() {", "+\tServerSocket socket = null;", "+\ttry {", "+\t\tsocket = new ServerSocket(0);", "+\t\treturn socket.getLocalPort();", "+\t} catch (IOException e) {", "+\t\t// ignore", "+\t} finally {", "+\t\tif (socket != null) {", "+\t\t\ttry {", "+\t\t\t\tsocket.close();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// ignore", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8aa9c31194b7aac699f85dcb50d70f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/DecodeCodeFormatterPreferences.java", "commitBeforeChange": "e1c9e65754ffe72856bfc19d7da5eba548fc43bc", "commitAfterChange": "9d4f7131389390a16a995494da191d8ab6c07c5a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static Map decodeCodeFormatterOptions(String fileName, String profileName)", "signatureAfterChange": "  \tpublic static Map decodeCodeFormatterOptions(String fileName)", "diff": ["+\tpublic static Map decodeCodeFormatterOptions(String fileName) {", "+\t\ttry {", "+\t\t\tLineNumberReader reader = new LineNumberReader(new FileReader(fileName));", "+\t\t\tMap options = new HashMap();", "+\t\t\tString line;", "+\t\t\twhile ((line = reader.readLine()) != null) {", "+\t\t\t\tif (line.startsWith(\"#\")) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tStringTokenizer stringTokenizer = new StringTokenizer(line, \"=\");", "+\t\t\t\toptions.put(stringTokenizer.nextElement(), stringTokenizer.nextElement());", "+\t\t\t}", "+\t\t\treader.close();", "+\t\t\treturn options;", "+\t\t} catch (IOException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abd6c49d29b68152291d7abc0a32bde2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "535178e6ff3c7be5f5cdc90d8a470557840e3a3e", "commitAfterChange": "cdbb23d25684170107e611f9ad2770f482d2dd3b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private final static void buildFileForTable(String filename, byte[] bytes) throws java.io.IOException", "signatureAfterChange": " private final static void buildFileForTable(String filename, byte[] bytes)", "diff": ["-private final static void buildFileForTable(String filename, byte[] bytes) throws java.io.IOException {", "-\tjava.io.FileOutputStream stream = new java.io.FileOutputStream(filename);", "-\tstream.write(bytes);", "-\tstream.close();", "+private final static void buildFileForTable(String filename, byte[] bytes) {", "+\tjava.io.FileOutputStream stream = null;", "+\ttry {", "+\t\tstream = new java.io.FileOutputStream(filename);", "+\t\tstream.write(bytes);", "+\t} catch(IOException e) {", "+\t\tif (stream != null) {", "+\t\t\ttry {", "+\t\t\t\tstream.close();", "+\t\t\t} catch (IOException e1) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 65198}
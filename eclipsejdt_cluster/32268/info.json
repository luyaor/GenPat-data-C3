{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7497a572d914dcd85ee59152a0fcc92b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25c4da3f36958d41816f45d695137c0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "5a0b16973c5f2b4b1beccfae3f83602332ac3f5d", "commitAfterChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tIJavaProject javaProject, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap options, \t\t\tWorkingCopyOwner owner, \t\t\tint flags, \t\t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tIJavaProject javaProject, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap options, \t\t\tWorkingCopyOwner owner, \t\t\tint flags, \t\t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\tCompilerOptions compilerOptions = getCompilerOptions(options, (flags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0);", "+\t\t\tboolean ignoreMethodBodies = (flags & ICompilationUnit.IGNORE_METHOD_BODIES) != 0;", "+\t\t\tcompilerOptions.ignoreMethodBodies = ignoreMethodBodies;", "-\t\t\t\t\tgetCompilerOptions(options, (flags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0),", "+\t\t\t\t\tcompilerOptions,", "-", "+\t\t\tboolean analyzeCode = true;", "+\t\t\tboolean generateCode = true;", "+\t\t\tif (ignoreMethodBodies) {", "+\t\t\t\tanalyzeCode = false;", "+\t\t\t\tgenerateCode = false;", "+\t\t\t}", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "+\t\t\t\t\tanalyzeCode, // analyze code", "+\t\t\t\t\tgenerateCode); // generate code"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863624c649daf42bd8b4b809c02808c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "5a0b16973c5f2b4b1beccfae3f83602332ac3f5d", "commitAfterChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnit unitElement, \t\tSourceElementParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnit unitElement, \t\tSourceElementParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["+\t\t\tCompilerOptions compilerOptions = getCompilerOptions(project.getOptions(true), creatingAST, ((reconcileFlags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0));", "+\t\t\tboolean ignoreMethodBodies = (reconcileFlags & ICompilationUnit.IGNORE_METHOD_BODIES) != 0;", "+\t\t\tcompilerOptions.ignoreMethodBodies = ignoreMethodBodies;", "-\t\t\t\tgetCompilerOptions(project.getOptions(true), creatingAST, ((reconcileFlags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0)),", "+\t\t\t\tcompilerOptions,", "+\t\t\tboolean analyzeCode = true;", "+\t\t\tboolean generateCode = true;", "+\t\t\tif (ignoreMethodBodies) {", "+\t\t\t\tanalyzeCode = false;", "+\t\t\t\tgenerateCode = false;", "+\t\t\t}", "-\t\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\t\ttrue); // generate code", "+\t\t\t\t\t\tanalyzeCode, // analyze code", "+\t\t\t\t\t\tgenerateCode); // generate code", "-\t\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\t\ttrue); // generate code", "+\t\t\t\t\t\tanalyzeCode, // analyze code", "+\t\t\t\t\t\tgenerateCode); // generate code"]}], "num": 32268}
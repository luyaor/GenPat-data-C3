{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd421e6c4333229bacefd992a176dfa7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a6c21e0bfd369ec3ab93b54fac06b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t@Override \tpublic String getTypeQualifiedName()", "signatureAfterChange": " \t \tpublic IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner)", "diff": ["+\t", "+\tpublic IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner) {", "+\t\tif (token.charAt(0) != JEM_LAMBDA_METHOD)", "+\t\t\treturn null;", "+\t\t", "+\t\t// ----", "+\t\tif (!memento.hasMoreTokens()) return this;", "+\t\tString selector = memento.nextToken();", "+\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_COUNT) return this;", "+\t\tif (!memento.hasMoreTokens()) return this;", "+\t\tint length = Integer.parseInt(memento.nextToken());", "+\t\tString [] parameterTypes = new String[length];", "+\t\tString [] parameterNames = new String[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\t\tparameterTypes[i] = memento.nextToken();", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\t\tparameterNames[i] = memento.nextToken();", "+\t\t}", "+\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\tString returnType = memento.nextToken();", "+\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\tString key = memento.nextToken();", "+\t\tthis.lambdaMethod = LambdaMethod.make(this, selector, key, this.sourceStart, this.sourceEnd, this.arrowPosition, parameterTypes, parameterNames, returnType);", "+\t\tILocalVariable [] parameters = new ILocalVariable[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tparameters[i] = (ILocalVariable) this.lambdaMethod.getHandleFromMemento(memento, workingCopyOwner);", "+\t\t}", "+\t\tthis.lambdaMethod.elementInfo.arguments  = parameters;", "+\t\tthis.elementInfo.children = new IJavaElement[] { this.lambdaMethod };", "+\t\treturn this.lambdaMethod;", "-", "-\t@Override", "-\tpublic String getTypeQualifiedName() {", "-\t\treturn null;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c1b556b78410c2b0131273f5780372c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner)", "signatureAfterChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner)", "diff": ["+\t\tcase JEM_LAMBDA_EXPRESSION:", "+\t\t\tif (!memento.hasMoreTokens()) return this;", "+\t\t\tString name = memento.nextToken();", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.STRING)", "+\t\t\t\treturn this;", "+\t\t\tif (!memento.hasMoreTokens()) return this;", "+\t\t\tString interphase = memento.nextToken();", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.COUNT) ", "+\t\t\t\treturn this;", "+\t\t\tint sourceStart = Integer.parseInt(memento.nextToken());", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.COUNT) ", "+\t\t\t\treturn this;", "+\t\t\tint sourceEnd = Integer.parseInt(memento.nextToken());", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.COUNT) ", "+\t\t\t\treturn this;", "+\t\t\tint arrowPosition = Integer.parseInt(memento.nextToken());", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.LAMBDA_METHOD) ", "+\t\t\t\treturn this;", "+\t\t\tLambdaExpression expression = new LambdaExpression(this, name, interphase, sourceStart, sourceEnd, arrowPosition);", "+\t\t\treturn expression.getHandleFromMemento(token, memento, workingCopyOwner);"]}], "num": 4369}
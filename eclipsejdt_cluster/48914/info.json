{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3b89e5736c31f0524e8f98ed84f14dc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d0b21620f1c07c8624a9423e962933e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "13d88a2db10e3a34264b75313001b46a5abddbdd", "commitAfterChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static CodeFormatter createCodeFormatter(Map options, int mode)", "signatureAfterChange": " \tpublic static CodeFormatter createCodeFormatter(Map options, int mode)", "diff": ["-\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID,", "-\t\t\t\tJavaCore.JAVA_FORMATTER_EXTENSION_POINT_ID);", "-\t\tif (extension != null) {", "-\t\t\tIExtension[] extensions = extension.getExtensions();", "-\t\t\tfor (int i = 0; i < extensions.length; i++) {", "-\t\t\t\tIConfigurationElement[] configElements = extensions[i].getConfigurationElements();", "-\t\t\t\tfor (int j = 0; j < configElements.length; j++) {", "-\t\t\t\t\tString initializerID = configElements[j].getAttribute(\"id\"); //$NON-NLS-1$", "-\t\t\t\t\tif (initializerID != null && initializerID.equals(formatterId)) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tif (execExt instanceof CodeFormatter) {", "-\t\t\t\t\t\t\t\tCodeFormatter formatter = (CodeFormatter) execExt;", "-\t\t\t\t\t\t\t\tformatter.setOptions(currentOptions);", "-\t\t\t\t\t\t\t\treturn formatter;", "+\t\tif (formatterId != null) {", "+\t\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID,", "+\t\t\t\t\tJavaCore.JAVA_FORMATTER_EXTENSION_POINT_ID);", "+\t\t\tif (extension != null) {", "+\t\t\t\tIExtension[] extensions = extension.getExtensions();", "+\t\t\t\tfor (int i = 0; i < extensions.length; i++) {", "+\t\t\t\t\tIConfigurationElement[] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\t\tfor (int j = 0; j < configElements.length; j++) {", "+\t\t\t\t\t\tString initializerID = configElements[j].getAttribute(\"id\"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (initializerID != null && initializerID.equals(formatterId)) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tif (execExt instanceof CodeFormatter) {", "+\t\t\t\t\t\t\t\t\tCodeFormatter formatter = (CodeFormatter) execExt;", "+\t\t\t\t\t\t\t\t\tformatter.setOptions(currentOptions);", "+\t\t\t\t\t\t\t\t\treturn formatter;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(e.getStatus());", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(e.getStatus());", "-\t\t\t\t\t\t\tbreak;", "+\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING,", "+\t\t\t\t\t\"Unable to instantiate formatter extension '\" + formatterId + \"', returning built-in formatter.\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING,", "-\t\t\t\t\"Unable to instantiate formatter extension, returning built-in formatter.\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a594823a7392757697eea36dfe01b0ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "b8409b2c5761cb2e6dbcdfc3bef92e6e755d2aa7", "commitAfterChange": "e968b992e38be58d07a46d70f656322d8b2edb33", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void loadPluginFactoryMap()", "signatureAfterChange": " \tprivate void loadPluginFactoryMap()", "diff": ["-\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(", "-\t\t\t\t\"org.eclipse.jdt.apt.core\",  //$NON-NLS-1$ - namecls of plugin that exposes this extension", "-\t\t\t\t\"annotationProcessorFactory\"); //$NON-NLS-1$ - extension id", "-\t\tIExtension[] extensions =  extension.getExtensions();", "-\t\t// for all extensions of this point...", "-\t\tfor(int i = 0; i < extensions.length; i++){", "-\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "-\t\t\t// for all config elements named \"factory\"", "-\t\t\tfor(int j = 0; j < configElements.length; j++){", "-\t\t\t\tString elementName = configElements[j].getName();", "-\t\t\t\tif (!(\"factory\".equals(elementName))) { //$NON-NLS-1$ - name of configElement", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\ttry {", "-\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$ - attribute name", "-\t\t\t\t\tif (execExt instanceof AnnotationProcessorFactory){", "-\t\t\t\t\t\tPLUGIN_FACTORY_MAP.put( execExt.getClass().getName(), (AnnotationProcessorFactory)execExt );", "-\t\t\t\t\t}", "-\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t// TODO: what follows is extremely similar to FactoryPathUtil#getAllPluginFactoryContainers().", "+\t\t// Surely there is some way to share that code?  The main difference is that there we don't ", "+\t\t// want to instantiate the actual factories, and here we do.", "+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(", "+\t\t\t\tAptPlugin.PLUGIN_ID, // name of plugin that exposes this extension point", "+\t\t// Iterate over all declared extensions of this extension point.  ", "+\t\t// A single plugin may extend the extension point more than once, although it's not recommended.", "+\t\tfor (IExtension extension : extensionPoint.getExtensions())", "+\t\t\t// Iterate over the children of the extension to find one named \"factories\".", "+\t\t\tfor(IConfigurationElement factories : extension.getConfigurationElements())", "+\t\t\t\tif (!\"factories\".equals(factories.getName())) { //$NON-NLS-1$ - name of configElement ", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t// Iterate over the children of the \"factories\" element to find all the ones named \"factory\".", "+\t\t\t\tfor (IConfigurationElement factory : factories.getChildren()) {", "+\t\t\t\t\tif (!\"factory\".equals(factory.getName())) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tObject execExt = factory.createExecutableExtension(\"class\"); //$NON-NLS-1$ - attribute name", "+\t\t\t\t\t\tif (execExt instanceof AnnotationProcessorFactory){", "+\t\t\t\t\t\t\tPLUGIN_FACTORY_MAP.put( execExt.getClass().getName(), (AnnotationProcessorFactory)execExt );", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch(CoreException e) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}"]}], "num": 48914}
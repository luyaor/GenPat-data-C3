{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9002c178c7a1be7f9e78690629624387", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51b5d8011beb611ad8833033fd9336a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \tBlockScope currentScope, \tFlowContext flowContext, \tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-\t\t// record setting a variable: various scenarii are possible, setting an array reference, ", "-\t\t// a field reference, a blank final field reference, a field of an enclosing instance or ", "-\t\t// just a local variable.", "-", "-\t\tLocalVariableBinding local = this.lhs.localVariableBinding();", "-\t\tint nullStatus = this.expression.nullStatus(flowInfo);", "-\t\tif (local != null && nullStatus == FlowInfo.NULL) {", "-\t\t\t\tflowContext.recordUsingNullReference(currentScope, local, this.lhs, FlowInfo.NON_NULL, flowInfo);", "+public FlowInfo analyseCode(", "+\tBlockScope currentScope,", "+\tFlowContext flowContext,", "+\tFlowInfo flowInfo) {", "+\t// record setting a variable: various scenarii are possible, setting an array reference, ", "+\t// a field reference, a blank final field reference, a field of an enclosing instance or ", "+\t// just a local variable.", "+\tLocalVariableBinding local = this.lhs.localVariableBinding();", "+\tint nullStatus = this.expression.nullStatus(flowInfo);", "+\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\tif (nullStatus == FlowInfo.NULL) {", "+\t\t\tflowContext.recordUsingNullReference(currentScope, local, this.lhs, ", "+\t\t\t\tFlowContext.CAN_ONLY_NULL, flowInfo);", "-\t\tflowInfo = ((Reference) lhs)", "-\t\t\t.analyseAssignment(currentScope, flowContext, flowInfo, this, false)", "-\t\t\t.unconditionalInits();", "-\t\tif (local != null) {", "-\t\t\tswitch(nullStatus) {", "-\t\t\t\tcase FlowInfo.NULL :", "-\t\t\t\t\tflowInfo.markAsDefinitelyNull(local);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase FlowInfo.NON_NULL :", "-\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(local);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}\t\t", "-\t\treturn flowInfo;", "+\tflowInfo = ((Reference) lhs)", "+\t\t.analyseAssignment(currentScope, flowContext, flowInfo, this, false)", "+\t\t.unconditionalInits();", "+\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\tswitch(nullStatus) {", "+\t\t\tcase FlowInfo.NULL :", "+\t\t\t\tflowInfo.markAsDefinitelyNull(local);", "+\t\t\t\tbreak;", "+\t\t\tcase FlowInfo.NON_NULL :", "+\t\t\t\tflowInfo.markAsDefinitelyNonNull(local);", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tflowInfo.markAsDefinitelyUnknown(local);", "+\t\t}", "+\t}\t\t", "+\treturn flowInfo;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abd91d923fbfd2c9d87d78a5a9e31a6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-\tpublic void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse) {", "+\tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse) {", "-\t\tif (local != null) {", "+\t\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\tif (local != null) {", "+\t\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4639ad5e83f66c2d222a4ac6f466ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "83393c42b2bb8a7100c4a42bf5cd8fe234436ee5", "commitAfterChange": "8962621085b2247c6ff805ec82d289a9a0613a10", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "signatureAfterChange": " public static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["-\t\t\tif ((alternateLeftTypeId = alternateLeftType.id) == leftTypeId) { // obvious identity cast", "+\t\t\tif ((alternateLeftTypeId = alternateLeftType.id) == leftTypeId || scope.environment().computeBoxingType(alternateLeftType).id == leftTypeId) { // obvious identity cast", "-\t\t\tif ((alternateRightTypeId = alternateRightType.id) == rightTypeId) { // obvious identity cast", "+\t\t\tif ((alternateRightTypeId = alternateRightType.id) == rightTypeId || scope.environment().computeBoxingType(alternateRightType).id == rightTypeId) { // obvious identity cast"]}], "num": 21167}
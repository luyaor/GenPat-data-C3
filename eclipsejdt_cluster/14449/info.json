{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd1992fee184f1660db712a763863911", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9cece9642e3af11969498dbed13c29c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t */\r", "-\tprivate void configure(String[] argv) throws InvalidInputException {\r", "-\t\tif ((argv == null) || (argv.length == 0))\r", "-\t\t\tthrow new InvalidInputException(\"no source file specified\");\r", "-\t\tfinal int InsideClasspath = 1;\r", "-\t\tfinal int InsideDestinationPath = 2;\r", "-\t\tfinal int TargetSetting = 4;\r", "-\t\tfinal int InsideLog = 8;\r", "-\t\tfinal int InsideRepetition = 16;\r", "-\t\tfinal int Default = 0;\r", "-\t\tint DEFAULT_SIZE_CLASSPATH = 4;\r", "-\t\tboolean noWarnOptionInUsed = false;\r", "-\t\tboolean warnOptionInUsed = false;\r", "-\t\tint pathCount = 0;\r", "-\t\tint index = -1, filesCount = 0, argCount = argv.length;\r", "-\t\tint mode = Default;\r", "-\t\trepetitions = 0;\r", "-\t\tboolean versionIDRequired = false;\r", "-\t\tboolean printUsageRequired = false;\r", "-\r", "-\t\twhile (++index < argCount) {\r", "-\t\t\tString currentArg = argv[index].trim();\r", "-\t\t\tif (currentArg.endsWith(\".java\")) {\r", "-\t\t\t\tif (filenames == null) {\r", "-\t\t\t\t\tfilenames = new String[argCount - index];\r", "-\t\t\t\t} else\r", "-\t\t\t\t\tif (filesCount == filenames.length) {\r", "-\t\t\t\t\t\tint length = filenames.length;\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tfilenames,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t(filenames = new String[length + argCount - index]),\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tlength);\r", "-\t\t\t\t\t}\r", "-\t\t\t\tfilenames[filesCount++] = currentArg;\r", "-\t\t\t\tmode = Default;\r", "+ */\r", "+private void configure(String[] argv) throws InvalidInputException {\r", "+\tif ((argv == null) || (argv.length == 0))\r", "+\t\tthrow new InvalidInputException(\"no source file specified\");\r", "+\tfinal int InsideClasspath = 1;\r", "+\tfinal int InsideDestinationPath = 2;\r", "+\tfinal int TargetSetting = 4;\r", "+\tfinal int InsideLog = 8;\r", "+\tfinal int InsideRepetition = 16;\r", "+\tfinal int Default = 0;\r", "+\tint DEFAULT_SIZE_CLASSPATH = 4;\r", "+\tboolean noWarnOptionInUsed = false;\r", "+\tboolean warnOptionInUsed = false;\r", "+\tint pathCount = 0;\r", "+\tint index = -1, filesCount = 0, argCount = argv.length;\r", "+\tint mode = Default;\r", "+\trepetitions = 0;\r", "+\tboolean versionIDRequired = false;\r", "+\tboolean printUsageRequired = false;\r", "+\t\r", "+\twhile (++index < argCount) {\r", "+\t\tString currentArg = argv[index].trim();\r", "+\t\tif (currentArg.endsWith(\".java\")) {\r", "+\t\t\tif (filenames == null) {\r", "+\t\t\t\tfilenames = new String[argCount - index];\r", "+\t\t\t} else if (filesCount == filenames.length) {\r", "+\t\t\t\tint length = filenames.length;\r", "+\t\t\t\tSystem.arraycopy(filenames, 0, (filenames = new String[length + argCount - index]), 0, length);\r", "+\t\t\t}\r", "+\t\t\tfilenames[filesCount++] = currentArg;\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-log\")) {\r", "+\t\t\tif (log != null)\r", "+\t\t\t\tthrow new InvalidInputException(\"duplicate log specification: \" + currentArg);\r", "+\t\t\tmode = InsideLog;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-repeat\")) {\r", "+\t\t\tif (repetitions > 0)\r", "+\t\t\t\tthrow new InvalidInputException(\"duplicate repeat specification: \" + currentArg);\r", "+\t\t\tmode = InsideRepetition;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-d\")) {\r", "+\t\t\tif (destinationPath != null)\r", "+\t\t\t\tthrow new InvalidInputException(\"duplicate output path specification: \" + currentArg);\r", "+\t\t\tmode = InsideDestinationPath;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-classpath\")) {\r", "+\t\t\tif (pathCount > 0)\r", "+\t\t\t\tthrow new InvalidInputException(\"duplicate classpath specification: \" + currentArg);\r", "+\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];\r", "+\t\t\tmode = InsideClasspath;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-progress\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\tshowProgress = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-proceedOnError\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\tproceedOnError = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-time\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\ttimer = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-version\") || currentArg.equals(\"-v\")) {\r", "+\t\t\tversionIDRequired = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-help\")) {\r", "+\t\t\tprintUsageRequired = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\t\t\r", "+\t\tif (currentArg.equals(\"-noImportError\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\timportProblemIsError = false;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-noExit\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\tsystemExitWhenFinished = false;\r", "+\t\t\tcontinue;\r", "+\t\t}\t\t\r", "+\t\tif (currentArg.equals(\"-verbose\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\tverbose = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-referenceInfo\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\tproduceRefInfo = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.startsWith(\"-g\")) {\r", "+\t\t\tmode = Default;\r", "+\t\t\tdebugMask = 0; // reinitialize the default value\r", "+\t\t\tString debugOption = currentArg;\r", "+\t\t\tint length = currentArg.length();\r", "+\t\t\tif (length == 2) {\r", "+\t\t\t\tdebugMask = CompilerOptions.Lines | CompilerOptions.Vars | CompilerOptions.Source;\r", "-\t\t\tif (currentArg.equals(\"-log\")) {\r", "-\t\t\t\tif (log != null)\r", "-\t\t\t\t\tthrow new InvalidInputException(\"duplicate log specification: \" + currentArg);\r", "-\t\t\t\tmode = InsideLog;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-repeat\")) {\r", "-\t\t\t\tif (repetitions > 0)\r", "-\t\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\t\"duplicate repeat specification: \" + currentArg);\r", "-\t\t\t\tmode = InsideRepetition;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-d\")) {\r", "-\t\t\t\tif (destinationPath != null)\r", "-\t\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\t\"duplicate output path specification: \" + currentArg);\r", "-\t\t\t\tmode = InsideDestinationPath;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-classpath\")) {\r", "-\t\t\t\tif (pathCount > 0)\r", "-\t\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\t\"duplicate classpath specification: \" + currentArg);\r", "-\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];\r", "-\t\t\t\tmode = InsideClasspath;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-progress\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tshowProgress = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-proceedOnError\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tproceedOnError = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-time\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\ttimer = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-version\") || currentArg.equals(\"-v\")) {\r", "-\t\t\t\tversionIDRequired = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-help\")) {\r", "-\t\t\t\tprintUsageRequired = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-noImportError\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\timportProblemIsError = false;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-noExit\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tsystemExitWhenFinished = false;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-verbose\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tverbose = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-referenceInfo\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tproduceRefInfo = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.startsWith(\"-g\")) {\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tdebugMask = 0; // reinitialize the default value\r", "-\t\t\t\tString debugOption = currentArg;\r", "-\t\t\t\tint length = currentArg.length();\r", "-\t\t\t\tif (length == 2) {\r", "-\t\t\t\t\tdebugMask =\r", "-\t\t\t\t\t\tCompilerOptions.Lines | CompilerOptions.Vars | CompilerOptions.Source;\r", "+\t\t\tif (length > 3) {\r", "+\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\"))\r", "-\t\t\t\t}\r", "-\t\t\t\tif (length > 3) {\r", "-\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\"))\r", "-\t\t\t\t\t\tcontinue;\r", "-\t\t\t\t\tStringTokenizer tokenizer =\r", "-\t\t\t\t\t\tnew StringTokenizer(debugOption.substring(3, debugOption.length()), \",\");\r", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\t\tString token = tokenizer.nextToken();\r", "-\t\t\t\t\t\tif (token.equals(\"vars\")) {\r", "-\t\t\t\t\t\t\tdebugMask |= CompilerOptions.Vars;\r", "-\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\tif (token.equals(\"lines\")) {\r", "-\t\t\t\t\t\t\t\tdebugMask |= CompilerOptions.Lines;\r", "-\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\tif (token.equals(\"source\")) {\r", "-\t\t\t\t\t\t\t\t\tdebugMask |= CompilerOptions.Source;\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(\"invalid debug option: \" + debugOption);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t}\r", "-\t\t\t\tthrow new InvalidInputException(\"invalid debug option: \" + debugOption);\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.startsWith(\"-nowarn\")) {\r", "-\t\t\t\tnoWarnOptionInUsed = true;\r", "-\t\t\t\tif (warnOptionInUsed)\r", "-\t\t\t\t\tthrow new InvalidInputException(\"duplicate usage of warning configuration\");\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\twarningMask = TemporaryWarning;\r", "-\t\t\t\t// reinitialize the default value (still see TemporaryWarning)\t\t\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.startsWith(\"-warn\")) {\r", "-\t\t\t\twarnOptionInUsed = true;\r", "-\t\t\t\tif (noWarnOptionInUsed)\r", "-\t\t\t\t\tthrow new InvalidInputException(\"duplicate usage of warning configuration\");\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tString warningOption = currentArg;\r", "-\t\t\t\tint length = currentArg.length();\r", "-\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) {\r", "-\t\t\t\t\twarningMask = TemporaryWarning;\r", "-\t\t\t\t\t// reinitialize the default value (still see TemporaryWarning)\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (length < 6)\r", "-\t\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\t\"invalid warning configuration: \" + warningOption);\r", "-\t\t\t\tStringTokenizer tokenizer =\r", "-\t\t\t\t\tnew StringTokenizer(warningOption.substring(6, warningOption.length()), \",\");\r", "-\t\t\t\tint tokenCounter = 0;\r", "-\t\t\t\twarningMask = 0; // reinitialize the default value\t\t\t\t\r", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\");\r", "-\t\t\t\t\ttokenCounter++;\r", "-\t\t\t\t\tif (token.equals(\"constructorName\")) {\r", "-\t\t\t\t\t\twarningMask |= CompilerOptions.MethodWithConstructorName;\r", "-\t\t\t\t\t} else\r", "-\t\t\t\t\t\tif (token.equals(\"packageDefaultMethod\")) {\r", "-\t\t\t\t\t\t\twarningMask |= CompilerOptions.OverriddenPackageDefaultMethod;\r", "-\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\tif (token.equals(\"maskedCatchBlocks\")) {\r", "-\t\t\t\t\t\t\t\twarningMask |= CompilerOptions.MaskedCatchBlock;\r", "-\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\tif (token.equals(\"deprecation\")) {\r", "-\t\t\t\t\t\t\t\t\twarningMask |= CompilerOptions.UsingDeprecatedAPI;\r", "-\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\tif (token.equals(\"unusedLocals\")) {\r", "-\t\t\t\t\t\t\t\t\t\twarningMask |= CompilerOptions.UnusedLocalVariable;\r", "-\t\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\t\tif (token.equals(\"unusedArguments\")) {\r", "-\t\t\t\t\t\t\t\t\t\t\twarningMask |= CompilerOptions.UnusedArgument;\r", "-\t\t\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\t\t\tif (token.equals(\"syntheticAccess\")) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\twarningMask |= CompilerOptions.AccessEmulation;\r", "-\t\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(\"invalid warning: \" + token);\r", "-\t\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tif (tokenCounter == 0)\r", "-\t\t\t\t\tthrow new InvalidInputException(\"invalid warning option: \" + currentArg);\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-target\")) {\r", "-\t\t\t\tmode = TargetSetting;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (currentArg.equals(\"-preserveAllLocals\")) {\r", "-\t\t\t\tpreserveAllLocalVariables = true;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (mode == TargetSetting) {\r", "-\t\t\t\tif (currentArg.equals(\"1.1\")) {\r", "-\t\t\t\t\ttargetJDK = CompilerOptions.JDK1_1;\r", "-\t\t\t\t} else\r", "-\t\t\t\t\tif (currentArg.equals(\"1.2\")) {\r", "-\t\t\t\t\t\ttargetJDK = CompilerOptions.JDK1_2;\r", "+\t\t\t\t\tif (token.equals(\"vars\")) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Vars;\r", "+\t\t\t\t\t} else if (token.equals(\"lines\")) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Lines;\r", "+\t\t\t\t\t} else if (token.equals(\"source\")) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Source;\r", "-\t\t\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\t\t\"target JDK is either '1.1' or '1.2': \" + currentArg);\r", "+\t\t\t\t\t\tthrow new InvalidInputException(\"invalid debug option: \" + debugOption);\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (mode == InsideLog) {\r", "-\t\t\t\tlog = currentArg;\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\t\t\tif (mode == InsideRepetition) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\trepetitions = Integer.parseInt(currentArg);\r", "-\t\t\t\t\tif (repetitions <= 0) {\r", "-\t\t\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\t\t\"repetition must be a positive integer: \" + currentArg);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} catch (NumberFormatException e) {\r", "-\t\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\t\"repetition must be a positive integer: \" + currentArg);\r", "-\t\t\t\tmode = Default;\r", "-\t\t\tif (mode == InsideDestinationPath) {\r", "-\t\t\t\tdestinationPath = currentArg;\r", "-\t\t\t\tmode = Default;\r", "+\t\t\tthrow new InvalidInputException(\"invalid debug option: \" + debugOption);\r", "+\t\t}\r", "+\t\tif (currentArg.startsWith(\"-nowarn\")) {\r", "+\t\t\tnoWarnOptionInUsed = true;\r", "+\t\t\tif (warnOptionInUsed)\r", "+\t\t\t\tthrow new InvalidInputException(\"duplicate usage of warning configuration\");\r", "+\t\t\tmode = Default;\r", "+\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\t\t\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.startsWith(\"-warn\")) {\r", "+\t\t\twarnOptionInUsed = true;\r", "+\t\t\tif (noWarnOptionInUsed)\r", "+\t\t\t\tthrow new InvalidInputException(\"duplicate usage of warning configuration\");\r", "+\t\t\tmode = Default;\r", "+\t\t\tString warningOption = currentArg;\r", "+\t\t\tint length = currentArg.length();\r", "+\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) {\r", "+\t\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\r", "-\t\t\tif (mode == InsideClasspath) {\r", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tint length;\r", "-\t\t\t\t\tif ((length = classpaths.length) <= pathCount) {\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tclasspaths,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t(classpaths = new String[length * 2]),\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tlength);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tclasspaths[pathCount++] = tokenizer.nextToken();\r", "+\t\t\tif (length < 6)\r", "+\t\t\t\tthrow new InvalidInputException(\"invalid warning configuration: \" + warningOption);\r", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\");\r", "+\t\t\tint tokenCounter = 0;\r", "+\t\t\twarningMask = 0; // reinitialize the default value\t\t\t\t\r", "+\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "+\t\t\t\tString token = tokenizer.nextToken();\r", "+\t\t\t\ttokenCounter++;\r", "+\t\t\t\tif (token.equals(\"constructorName\")) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.MethodWithConstructorName;\r", "+\t\t\t\t} else if (token.equals(\"packageDefaultMethod\")) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.OverriddenPackageDefaultMethod;\r", "+\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.MaskedCatchBlock;\r", "+\t\t\t\t} else if (token.equals(\"deprecation\")) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UsingDeprecatedAPI;\r", "+\t\t\t\t} else if (token.equals(\"unusedLocals\")) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UnusedLocalVariable;\r", "+\t\t\t\t} else if (token.equals(\"unusedArguments\")) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UnusedArgument;\r", "+\t\t\t\t} else if (token.equals(\"syntheticAccess\")){\r", "+\t\t\t\t\twarningMask |= CompilerOptions.AccessEmulation;\r", "+\t\t\t\t} else if (token.equals(\"nls\")){\r", "+\t\t\t\t\twarningMask |= CompilerOptions.NonExternalizedString;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tthrow new InvalidInputException(\"invalid warning: \" + token);\r", "-\t\t\t\tmode = Default;\r", "-\t\t\t\tcontinue;\r", "-\t\t\t//default is input directory\r", "-\t\t\tcurrentArg = currentArg.replace('/', File.separatorChar);\r", "-\t\t\tif (currentArg.endsWith(File.separator))\r", "-\t\t\t\tcurrentArg =\r", "-\t\t\t\t\tcurrentArg.substring(0, currentArg.length() - File.separator.length());\r", "-\t\t\tFile dir = new File(currentArg);\r", "-\t\t\tif (!dir.isDirectory())\r", "-\t\t\t\tthrow new InvalidInputException(\"directory does not exist: \" + currentArg);\r", "-\t\t\tFileFinder finder = new FileFinder();\r", "-\t\t\ttry {\r", "-\t\t\t\tfinder.find(dir, \".JAVA\", verbose);\r", "-\t\t\t} catch (Exception e) {\r", "-\t\t\t\tthrow new InvalidInputException(\r", "-\t\t\t\t\t\"i/o error : unable to retrieve .JAVA files in directory: \" + currentArg);\r", "-\t\t\t}\r", "-\t\t\tif (filenames != null) {\r", "-\t\t\t\t// some source files were specified explicitly\r", "-\t\t\t\tString results[] = finder.resultFiles;\r", "-\t\t\t\tint length = results.length;\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tfilenames,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\t(filenames = new String[length + filesCount]),\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tfilesCount);\r", "-\t\t\t\tSystem.arraycopy(results, 0, filenames, filesCount, length);\r", "-\t\t\t\tfilesCount += length;\r", "+\t\t\tif (tokenCounter == 0)\r", "+\t\t\t\tthrow new InvalidInputException(\"invalid warning option: \" + currentArg);\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-target\")) {\r", "+\t\t\tmode = TargetSetting;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-preserveAllLocals\")) {\r", "+\t\t\tpreserveAllLocalVariables = true;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (mode == TargetSetting) {\r", "+\t\t\tif (currentArg.equals(\"1.1\")) {\r", "+\t\t\t\ttargetJDK = CompilerOptions.JDK1_1;\r", "+\t\t\t} else if (currentArg.equals(\"1.2\")) {\r", "+\t\t\t\ttargetJDK = CompilerOptions.JDK1_2;\r", "-\t\t\t\tfilenames = finder.resultFiles;\r", "-\t\t\t\tfilesCount = filenames.length;\r", "+\t\t\t\tthrow new InvalidInputException(\"target JDK is either '1.1' or '1.2': \" + currentArg);\r", "-\r", "-\t\t/*\r", "-\t\t * Standalone options\r", "-\t\t */\r", "-\t\tif (versionIDRequired) {\r", "-\t\t\tout.println(\r", "-\t\t\t\t\"Eclipse Java Compiler \" + this.versionID + \", Copyright IBM Corp 2000\\n\");\r", "-\t\t\treturn;\r", "+\t\tif (mode == InsideLog){\r", "+\t\t\tlog = currentArg;\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "-\r", "-\t\tif (printUsageRequired) {\r", "-\t\t\tprintUsage();\r", "-\t\t\treturn;\r", "-\t\t}\r", "-\r", "-\t\tif (filesCount != 0)\r", "-\t\t\tSystem.arraycopy(\r", "-\t\t\t\tfilenames,\r", "-\t\t\t\t0,\r", "-\t\t\t\t(filenames = new String[filesCount]),\r", "-\t\t\t\t0,\r", "-\t\t\t\tfilesCount);\r", "-\t\tif (pathCount == 0) {\r", "-\t\t\tString classProp = System.getProperty(\"LFclasspath\");\r", "-\t\t\tif ((classProp == null) || (classProp.length() == 0)) {\r", "-\t\t\t\tout.println(\r", "-\t\t\t\t\t\"no classpath defined (LF_CLASSPATH), using default directory instead\");\r", "-\t\t\t\tclassProp = \".\";\r", "+\t\tif (mode == InsideRepetition){\r", "+\t\t\ttry {\r", "+\t\t\t\trepetitions = Integer.parseInt(currentArg);\r", "+\t\t\t\tif (repetitions <= 0){\r", "+\t\t\t\t\tthrow new InvalidInputException(\"repetition must be a positive integer: \" + currentArg);\r", "+\t\t\t\t}\r", "+\t\t\t} catch(NumberFormatException e){\r", "+\t\t\t\tthrow new InvalidInputException(\"repetition must be a positive integer: \" + currentArg);\r", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);\r", "-\t\t\tclasspaths = new String[tokenizer.countTokens()];\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (mode == InsideDestinationPath) {\r", "+\t\t\tdestinationPath = currentArg;\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (mode == InsideClasspath) {\r", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);\r", "+\t\t\t\tint length;\r", "+\t\t\t\tif ((length = classpaths.length) <= pathCount) {\r", "+\t\t\t\t\tSystem.arraycopy(classpaths, 0, (classpaths = new String[length * 2]), 0, length);\r", "+\t\t\t\t}\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "-\r", "-\t\tif (classpaths == null)\r", "-\t\t\tclasspaths = new String[0];\r", "-\t\tSystem.arraycopy(\r", "-\t\t\tclasspaths,\r", "-\t\t\t0,\r", "-\t\t\t(classpaths = new String[pathCount]),\r", "-\t\t\t0,\r", "-\t\t\tpathCount);\r", "-\t\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "-\t\t\tFile file = new File(classpaths[i]);\r", "-\t\t\tif (!file.exists())\r", "-\t\t\t\tthrow new InvalidInputException(\"incorrect classpath: \" + classpaths[i]);\r", "+\t\t//default is input directory\r", "+\t\tcurrentArg = currentArg.replace('/', File.separatorChar);\r", "+\t\tif (currentArg.endsWith(File.separator))\r", "+\t\t\tcurrentArg = currentArg.substring(0, currentArg.length() - File.separator.length());\r", "+\t\tFile dir = new File(currentArg);\r", "+\t\tif (!dir.isDirectory())\r", "+\t\t\tthrow new InvalidInputException(\"directory does not exist: \" + currentArg);\r", "+\t\tFileFinder finder = new FileFinder();\r", "+\t\ttry{\r", "+\t\t\tfinder.find(dir, \".JAVA\", verbose);\r", "+\t\t} catch(Exception e){\r", "+\t\t\tthrow new InvalidInputException(\"i/o error : unable to retrieve .JAVA files in directory: \" + currentArg);\t\t\r", "-\t\tif (destinationPath == null) {\r", "-\t\t\tdestinationPath = System.getProperty(\"user.dir\");\r", "-\t\t} else\r", "-\t\t\tif (\"none\".equals(destinationPath)) {\r", "-\t\t\t\tdestinationPath = null;\r", "-\t\t\t}\r", "-\r", "-\t\tif (filenames == null)\r", "-\t\t\tthrow new InvalidInputException(\"no source file specified\");\r", "-\r", "-\t\tif (log != null) {\r", "-\t\t\ttry {\r", "-\t\t\t\tout = new PrintWriter(new FileOutputStream(log, false));\r", "-\t\t\t} catch (IOException e) {\r", "-\t\t\t\tthrow new InvalidInputException(\"cannot open .log file\");\r", "-\t\t\t}\r", "+\t\tif (filenames != null) {\r", "+\t\t\t// some source files were specified explicitly\r", "+\t\t\tString results[] = finder.resultFiles;\r", "+\t\t\tint length = results.length;\r", "+\t\t\tSystem.arraycopy(filenames, 0, (filenames = new String[length + filesCount]), 0, filesCount);\r", "+\t\t\tSystem.arraycopy(results, 0, filenames, filesCount, length);\r", "+\t\t\tfilesCount += length;\r", "-\t\t\tshowProgress = false;\r", "+\t\t\tfilenames = finder.resultFiles;\r", "+\t\t\tfilesCount = filenames.length;\r", "-\t\tif (repetitions == 0) {\r", "-\t\t\trepetitions = 1;\r", "-\t\t}\r", "+\t\tmode = Default;\r", "+\t\tcontinue;\r", "+\t * Standalone options\r", "+\tif (versionIDRequired) {\r", "+\t\tout.println(\"Eclipse Java Compiler \"+ this.versionID + \", Copyright IBM Corp 2000\\n\");\r", "+\t\treturn;\r", "+\t}\r", "+\t\t\r", "+\tif (printUsageRequired) {\r", "+\t\tprintUsage();\r", "+\t\treturn;\r", "+\t}\t\r", "+\t\r", "+\tif (filesCount != 0)\r", "+\t\tSystem.arraycopy(filenames, 0, (filenames = new String[filesCount]), 0, filesCount);\r", "+\tif (pathCount == 0) {\r", "+\t\tString classProp = System.getProperty(\"LFclasspath\");\r", "+\t\tif ((classProp == null) || (classProp.length() == 0)) {\r", "+\t\t\tout.println(\"no classpath defined (LF_CLASSPATH), using default directory instead\");\r", "+\t\t\tclassProp = \".\";\r", "+\t\t}\r", "+\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);\r", "+\t\tclasspaths = new String[tokenizer.countTokens()];\r", "+\t\twhile (tokenizer.hasMoreTokens()) {\r", "+\t\t\tclasspaths[pathCount++] = tokenizer.nextToken();\r", "+\t\t}\r", "+\t}\r", "+\r", "+\tif (classpaths == null)\r", "+\t\tclasspaths = new String[0];\r", "+\tSystem.arraycopy(classpaths, 0, (classpaths = new String[pathCount]), 0, pathCount);\r", "+\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "+\t\tFile file = new File(classpaths[i]);\r", "+\t\tif (!file.exists())\r", "+\t\t\tthrow new InvalidInputException(\"incorrect classpath: \" + classpaths[i]);\r", "+\t}\r", "+\tif (destinationPath == null) {\r", "+\t\tdestinationPath = System.getProperty(\"user.dir\");\r", "+\t} else if (\"none\".equals(destinationPath)) {\r", "+\t\tdestinationPath = null;\r", "+\t}\r", "+\t\t\r", "+\tif (filenames == null)\r", "+\t\tthrow new InvalidInputException(\"no source file specified\");\r", "+\r", "+\tif (log != null){\r", "+\t\ttry {\r", "+\t\t\tout = new PrintWriter(new FileOutputStream(log, false));\r", "+\t\t} catch(IOException e){\r", "+\t\t\tthrow new InvalidInputException(\"cannot open .log file\");\r", "+\t\t}\r", "+\t} else {\r", "+\t\tshowProgress = false;\r", "+\t}\r", "+\tif (repetitions == 0) {\r", "+\t\trepetitions = 1;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc486bb3a5e0dfe3061e1859a908597", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "4b831e8897b5d08fc4189f64c5b148109c36337b", "commitAfterChange": "e97dff1004437e7793059cc79f21bd49d58afcab", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t} else if (token.equals(\"assertIdentifier\"/*nonNLS*/)){\r", "+\t\t\t\t\twarningMask |= CompilerOptions.AssertUsedAsAnIdentifier;\r"]}], "num": 14449}
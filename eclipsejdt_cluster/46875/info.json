{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a9572bfaf6f86774709ba87477ba072", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2621d3b1322e4452ee1815e2763aaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-}", "-\tif (this.constant != Constant.NotAConstant) {", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\t}", "-\t} else {", "-\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\tif (valueRequired) {", "-\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\tcodeStream.arraylength();", "-\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t} else {", "-\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\tif (!lastFieldBinding.isStatic()){", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t}", "-\t\t\t\t\t// inline the last field constant", "-\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t}", "+\tif ((this.bits & Binding.VARIABLE) == 0) { // nothing to do if type ref", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t}", "+\tFieldBinding lastFieldBinding = this.otherBindings == null ? (FieldBinding) this.binding : this.otherBindings[this.otherBindings.length-1];", "+\tif (lastFieldBinding.canBeSeenBy(getFinalReceiverType(), this, currentScope)) {", "+\t\tsuper.generateCode(currentScope, codeStream, valueRequired);", "+\t\treturn;", "+\t}", "+\tlastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tif (lastFieldBinding != null) {", "+\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\tif (!isStatic){", "+\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\tif (lastFieldBinding != null && !lastFieldBinding.isStatic()){", "-\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\tcodeStream.pop();", "+\t\t\tboolean isFirst = lastFieldBinding == this.binding", "+\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "+\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "+\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherBindings == null ? 0 : this.otherBindings.length);", "+\t\t\tif (valueRequired", "+\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "+\t\t\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t\t\t|| requiredGenericCast != null) {", "+\t\t\t\tint lastFieldPc = codeStream.position;", "+\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\t\t\t// conversion only generated if unboxing", "+\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "+\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "+\t\t\t} else {", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccea1dbf0d963cbb6663d6788270a120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected void reportAccurateTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportAccurateParameterizedMethodReference(SearchMatch match, ASTNode statement, TypeReference[] typeArguments) throws CoreException", "diff": ["-protected void reportAccurateTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException {", "-\treportAccurateTypeReference(typeRef, name, element, accuracy, SearchPattern.R_EXACT_MATCH);", "-}", "+protected void reportAccurateParameterizedMethodReference(SearchMatch match, ASTNode statement, TypeReference[] typeArguments) throws CoreException {", "+\tif (match.getRule() == 0) return;", "+\tif (!encloses((IJavaElement)match.getElement())) return;", "+", "+\t// If there's type arguments, look for end (ie. char '>') of last one.", "+\tint start = match.getOffset();", "+\tif (typeArguments != null && typeArguments.length > 0) {", "+\t\tboolean isErasureMatch= (pattern instanceof OrPattern) ? ((OrPattern)pattern).isErasureMatch() : ((JavaSearchPattern)pattern).isErasureMatch();", "+\t\tif (!isErasureMatch) {", "+\t\t\t", "+\t\t\t// Initialize scanner", "+\t\t\tScanner scanner = this.parser.scanner;", "+\t\t\tchar[] source = this.currentPossibleMatch.getContents();", "+\t\t\tscanner.setSource(source);", "+", "+\t\t\t// Search previous opening '<'", "+\t\t\tstart = typeArguments[0].sourceStart;", "+\t\t\tint end = statement.sourceEnd;", "+\t\t\tscanner.resetTo(start, end);", "+\t\t\tint lineStart = start;", "+\t\t\ttry {", "+\t\t\t\tlinesUp: while (true) {", "+\t\t\t\t\twhile (scanner.source[scanner.currentPosition] != '\\n') {", "+\t\t\t\t\t\tscanner.currentPosition--;", "+\t\t\t\t\t\tif (scanner.currentPosition == 0) break linesUp;", "+\t\t\t\t\t}", "+\t\t\t\t\tlineStart = scanner.currentPosition+1;", "+\t\t\t\t\tscanner.resetTo(lineStart, end);", "+\t\t\t\t\twhile (!scanner.atEnd()) {", "+\t\t\t\t\t\tif (scanner.getNextToken() == TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\tstart = scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\tbreak linesUp;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tend = lineStart - 2;", "+\t\t\t\t\tscanner.currentPosition = end;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (InvalidInputException ex) {", "+\t\t\t\t// give up", "+\t\t\t}", "+\t \t}", "+\t}", "+\t", "+\t// Report match", "+\tmatch.setOffset(start);", "+\tmatch.setLength(statement.sourceEnd-start+1);", "+\treport(match);", "+}"]}], "num": 46875}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "155efef3edae0deccddfffbfe06cca1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cf58db3f42c7909b6c98f9824214944", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java", "commitBeforeChange": "4ec3d8941998f287d44af5beff0b7f8ef9d972cc", "commitAfterChange": "b1cdfe3ee438c0a38b27b1a4134346d549384d6a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-// TODO find exceptions thrown by the lambda's body, see 18.2.5 bullet 5", "-//\t\t\t\t((LambdaExpression)this.left).", "-//\t\t\t\tInferenceContext18.missingImplementation(\"NYI\");", "+\t\t\tLambdaExpression lambda = ((LambdaExpression) this.left).getResolvedCopyForInferenceTargeting(this.right);", "+\t\t\tSet<TypeBinding> ePrimeSet = lambda.getThrownExceptions();", "+\t\t\tePrime = ePrimeSet.toArray(new TypeBinding[ePrimeSet.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98cf9602ca2c168f1eea18eef3533c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "dec6a2f0da20e1df11b1bec260506ef56476e2e8", "commitAfterChange": "543ead2a7b5176c7eb8059daf958f5e6badc53ee", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-\t\t", "+", "+        final boolean isConstructorRef = isConstructorReference();", "+\t\tif (isConstructorRef && this.receiverType.isArrayType()) {", "+\t\t\tfinal TypeBinding leafComponentType = this.receiverType.leafComponentType();", "+\t\t\tif (!leafComponentType.isReifiable()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+", "-        final boolean isMethodReference = isMethodReference();", "-        \tMethodBinding compileTimeDeclaration = ", "-        \t\t\tthis.exactMethodBinding != null ? this.exactMethodBinding :", "-        \t\t\t\t\t\t\tisMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "-        \t\t\t\t\t\t\t\t\t\t\t\tscope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this);", "+\t\t\tMethodBinding compileTimeDeclaration = this.exactMethodBinding != null ? this.exactMethodBinding : isConstructorRef", "+\t\t\t\t\t\t\t? scope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this)", "+\t\t\t\t\t\t\t: scope.getMethod(this.receiverType, this.selector, descriptorParameters, this);"]}], "num": 65005}
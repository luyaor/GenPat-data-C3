{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c6d66a7ca6a23cb1ca1f45d3bd93793", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a9f911bfe0a7850e13e5136a9acbbba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["+\t\tint rightStatus = this.right.nullStatus(flowInfo);", "+\t\tint leftStatus = this.left.nullStatus(flowInfo);", "+\t\t// check if either method is annotated @NonNull and compared to null:", "+\t\tif (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {", "+\t\t\tif (this.left instanceof MessageSend) { ", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.left).binding, this.left);", "+\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {", "+\t\t\tif (this.right instanceof MessageSend) {", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.right).binding, this.right);", "+\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t}", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, this.right.nullStatus(flowInfo), this.left);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, rightStatus, this.left);", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, this.left.nullStatus(flowInfo), this.right);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, leftStatus, this.right);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "816bfa0a723e0396cc0ad7457d9331c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "d63e77a4f3e59d96dada738a65e836b17108f62c", "commitAfterChange": "8b3dd5b0f6f317bedbda94f1dc54e156c48d6322", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["+\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tchar pc = peekChar();", "+\t\t\t\t\tif (!Character.isWhitespace(pc) && (!this.inlineTagStarted || pc != '}')) {", "+\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, this.lineEnd);", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\tchar pc = peekChar();", "+\t\t\t\tif (!Character.isWhitespace(pc) && (!this.inlineTagStarted || pc != '}')) {", "+\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, this.lineEnd);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf7d25808e129685956e73002ed0acb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   \tpublic void diagnoseParse()", "signatureAfterChange": "   \tpublic void diagnoseParse()", "diff": ["+\t\t", "+\t\tboolean forceRecoveryAfterLBracketMissing = false;", "+\t\tint forceRecoveryToken = -1;", "+\t\t\t\tif((tok != TokenNameRBRACE || (forceRecoveryToken != currentToken && (lexStream.flags(currentToken) & LexStream.LBRACE_MISSING) != 0))", "+\t\t\t\t\t&& (lexStream.flags(currentToken) & LexStream.IS_AFTER_JUMP) !=0) {", "+\t\t\t\t\tact = ERROR_ACTION;", "+\t\t\t\t\tif(forceRecoveryToken != currentToken", "+\t\t\t\t\t\t&& (lexStream.flags(currentToken) & LexStream.LBRACE_MISSING) != 0) {", "+\t\t\t\t\t\tforceRecoveryAfterLBracketMissing = true;", "+\t\t\t\t\t\tforceRecoveryToken = currentToken;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\tRepairCandidate candidate = errorRecovery(currentToken);", "+\t\t\t\tRepairCandidate candidate = errorRecovery(currentToken, forceRecoveryAfterLBracketMissing);", "+\t\t\t\t", "+\t\t\t\tforceRecoveryAfterLBracketMissing = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deea895001d49c8f84e11c0b6450e66d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "e92fd424cb52414670d7c1c0821260cf9689e9c2", "commitAfterChange": "6e948309151af4f2f81e957b7c11094acdae18d8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\t\tBlockScope currentScope, \t\t\tFlowContext flowContext, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\t\tBlockScope currentScope, \t\t\tFlowContext flowContext, \t\t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\tint fallThroughState = CASE;", "+\t\t\t\t\t\tif (fallThroughState == FALLTHROUGH", "+\t\t\t\t\t\t\t\t&& (statement.bits & ASTNode.DocumentedFallthrough) == 0) { // the case is not fall-through protected by a line comment", "+\t\t\t\t\t\t\tscope.problemReporter().possibleFallThroughCase(this.scope.enclosingCase);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfallThroughState = CASE;", "+\t\t\t\t\t\tif (fallThroughState == FALLTHROUGH ", "+\t\t\t\t\t\t\t\t&& (statement.bits & ASTNode.DocumentedFallthrough) == 0) {", "+\t\t\t\t\t\t\tscope.problemReporter().possibleFallThroughCase(this.scope.enclosingCase);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfallThroughState = CASE;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfallThroughState = FALLTHROUGH; // reset below if needed", "+\t\t\t\t\t\tif (caseInits == FlowInfo.DEAD_END) {", "+\t\t\t\t\t\t\tfallThroughState = ESCAPING;", "+\t\t\t\t\t\t}"]}], "num": 20863}
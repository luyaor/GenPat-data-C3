{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e353a4b9ef8c9f454f481ad241ddc7d5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44bc1752fe5d5f2de89fe69f44a065ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "commitAfterChange": "9fe7a0961c6a22749dae4c4e81b9646dbf13e5af", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "signatureAfterChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["+\t */", "-\t\tboolean noProblems = true;", "-\t\tnextVariable : for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\tboolean noProblems = true;", "+\t\tnextVariable: for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\t\tboolean isFirstBoundTypeVariable = false;", "-\t\t\t\tnoProblems = false;", "-\t\t\t\tcontinue nextVariable;", "-\t\t\t}", "-\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "-\t\t\tif (superType.isArrayType()) {", "-\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "-\t\t\t\tcontinue nextVariable;", "-\t\t\t}", "-\t\t\tboolean isTypeVariableFirstBound =  superType.isTypeVariable();", "-\t\t\tif (isTypeVariableFirstBound) {", "-\t\t\t\tTypeVariableBinding varSuperType = (TypeVariableBinding) superType;", "-\t\t\t\tif (varSuperType.rank >= typeVariable.rank && varSuperType.declaringElement == typeVariable.declaringElement) {", "-\t\t\t\t\tproblemReporter().forwardTypeVariableReference(typeParameter, varSuperType);", "-\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\tcontinue nextVariable;", "+\t\t\t} else {", "+\t\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "+\t\t\t\tfirstBound: {", "+\t\t\t\t\tswitch (superType.kind()) {", "+\t\t\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "+\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\tbreak firstBound; // do not keep first bound", "+\t\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t\tisFirstBoundTypeVariable = true;", "+\t\t\t\t\t\t\tTypeVariableBinding varSuperType = (TypeVariableBinding) superType;", "+\t\t\t\t\t\t\tif (varSuperType.rank >= typeVariable.rank && varSuperType.declaringElement == typeVariable.declaringElement) {", "+\t\t\t\t\t\t\t\tproblemReporter().forwardTypeVariableReference(typeParameter, varSuperType);", "+\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t\tbreak firstBound; // do not keep first bound", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tif (((ReferenceBinding) superType).isFinal()) {", "+\t\t\t\t\t\t\t\tproblemReporter().finalVariableBound(typeVariable, typeRef);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "+\t\t\t\t\tif (!superType.isInterface()) {", "+\t\t\t\t\t\ttypeVariable.superclass = superRefType;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superRefType};", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeVariable.firstBound = superRefType; // first bound used to compute erasure", "-\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "-\t\t\tif (superRefType.isFinal())", "-\t\t\t\tproblemReporter().finalVariableBound(typeVariable, typeRef);", "-\t\t\tif (!superType.isInterface()) {", "-\t\t\t\ttypeVariable.superclass = superRefType;", "-\t\t\t} else {", "-\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superRefType};", "-\t\t\t}", "-\t\t\ttypeVariable.firstBound = superRefType; // first bound used to compute erasure", "-\t\t\t\tfor (int j = 0, boundLength = boundRefs.length; j < boundLength; j++) {", "+\t\t\t\tnextBound: for (int j = 0, boundLength = boundRefs.length; j < boundLength; j++) {", "-\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t}", "-\t\t\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "-\t\t\t\t\tif (isTypeVariableFirstBound && j == 0) {", "-\t\t\t\t\t\tproblemReporter().noAdditionalBoundAfterTypeVariable(typeRef);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (superType.isArrayType()) {", "-\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "-\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t}", "-\t\t\t\t\tsuperRefType = (ReferenceBinding) superType;", "-\t\t\t\t\tif (!superType.isInterface()) {", "-\t\t\t\t\t\tproblemReporter().boundMustBeAnInterface(typeRef, superType);", "-\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t}", "-\t\t\t\t\t// check against superclass", "-\t\t\t\t\tif (checkForErasedCandidateCollisions && typeVariable.firstBound == typeVariable.superclass) {", "-\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, typeVariable.superclass, invocations, typeVariable, typeRef)) {", "-\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t// check against superinterfaces", "-\t\t\t\t\tfor (int index = typeVariable.superInterfaces.length; --index >= 0;) {", "-\t\t\t\t\t\tReferenceBinding previousInterface = typeVariable.superInterfaces[index];", "-\t\t\t\t\t\tif (previousInterface == superRefType) {", "-\t\t\t\t\t\t\tproblemReporter().duplicateBounds(typeRef, superType);", "+\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "+\t\t\t\t\t\tboolean didAlreadyComplain = false;", "+\t\t\t\t\t\tif (isFirstBoundTypeVariable && j == 0) {", "+\t\t\t\t\t\t\tproblemReporter().noAdditionalBoundAfterTypeVariable(typeRef);", "-\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (checkForErasedCandidateCollisions) {", "-\t\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, previousInterface, invocations, typeVariable, typeRef)) {", "-\t\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\t\tcontinue nextVariable;", "+\t\t\t\t\t\t\tdidAlreadyComplain = true;", "+\t\t\t\t\t\t\t//continue nextBound; - keep these bounds to minimize secondary errors", "+\t\t\t\t\t\t} else if (superType.isArrayType()) {", "+\t\t\t\t\t\t\tif (!didAlreadyComplain) {", "+\t\t\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "+\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (!superType.isInterface()) {", "+\t\t\t\t\t\t\t\tif (!didAlreadyComplain) {", "+\t\t\t\t\t\t\t\t\tproblemReporter().boundMustBeAnInterface(typeRef, superType);", "+\t\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t// check against superclass", "+\t\t\t\t\t\tif (checkForErasedCandidateCollisions && typeVariable.firstBound == typeVariable.superclass) {", "+\t\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, typeVariable.superclass, invocations, typeVariable, typeRef)) {", "+\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// check against superinterfaces", "+\t\t\t\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "+\t\t\t\t\t\tfor (int index = typeVariable.superInterfaces.length; --index >= 0;) {", "+\t\t\t\t\t\t\tReferenceBinding previousInterface = typeVariable.superInterfaces[index];", "+\t\t\t\t\t\t\tif (previousInterface == superRefType) {", "+\t\t\t\t\t\t\t\tproblemReporter().duplicateBounds(typeRef, superType);", "+\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (checkForErasedCandidateCollisions) {", "+\t\t\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, previousInterface, invocations, typeVariable, typeRef)) {", "+\t\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint size = typeVariable.superInterfaces.length;", "+\t\t\t\t\t\tSystem.arraycopy(typeVariable.superInterfaces, 0, typeVariable.superInterfaces = new ReferenceBinding[size + 1], 0, size);", "+\t\t\t\t\t\ttypeVariable.superInterfaces[size] = superRefType;", "-\t\t\t\t\tint size = typeVariable.superInterfaces.length;", "-\t\t\t\t\tSystem.arraycopy(typeVariable.superInterfaces, 0, typeVariable.superInterfaces = new ReferenceBinding[size + 1], 0, size);", "-\t\t\t\t\ttypeVariable.superInterfaces[size] = superRefType;", "+\t\t\tnoProblems &= (typeVariable.tagBits & TagBits.HierarchyHasProblems) == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7493616a50d4c75c50966d153c0d3d3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["-\t\tif (isAnonymous() || isLocal()) {", "-\t\t\treturn NO_NAME;", "-\t\t}", "-\t\tif (isPrimitive() || isNullType()) {", "-\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "-\t\t\treturn new String(baseTypeBinding.simpleName);", "-\t\t}", "-\t\tif (isWildcardType()) {", "-\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "-\t\t\tfinal ITypeBinding bound = getBound();", "-\t\t\tif (bound != null) {", "-\t\t\t\tswitch(wildcardBinding.kind) {", "-\t\t\t        case Wildcard.SUPER :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "-\t\t\t            break;", "-\t\t\t        case Wildcard.EXTENDS :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "+\t\tStringBuffer buffer;", "+\t\tswitch (this.binding.kind()) {", "+\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\t\tfinal ITypeBinding bound = getBound();", "+\t\t\t\tif (bound != null) {", "+\t\t\t\t\tswitch(wildcardBinding.boundKind) {", "+\t\t\t\t        case Wildcard.SUPER :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t\t            break;", "+\t\t\t\t        case Wildcard.EXTENDS :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(bound.getQualifiedName());", "-\t\t\t\tbuffer.append(bound.getQualifiedName());", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isRawType()) {", "-\t\t\treturn getTypeDeclaration().getQualifiedName();", "-\t\t}", "-\t\tif (isArray()) {", "-\t\t\tITypeBinding elementType = getElementType();", "-\t\t\tif (elementType.isLocal() || elementType.isAnonymous()) {", "-\t\t\t\treturn NO_NAME;", "-\t\t\t}", "-\t\t\tfinal int dimensions = getDimensions();", "-\t\t\tchar[] brackets = new char[dimensions * 2];", "-\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "-\t\t\t\tbrackets[i] = ']';", "-\t\t\t\tbrackets[i - 1] = '[';", "-\t\t\t}", "-\t\t\tStringBuffer buffer = new StringBuffer(elementType.getQualifiedName());", "-\t\t\tbuffer.append(brackets);", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isTypeVariable()) {", "-\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "-\t\t\treturn new String(typeVariableBinding.sourceName);", "-\t\t}", "-\t\tif (isMember()) {", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer", "-\t\t\t\t.append(getDeclaringClass().getQualifiedName())", "-\t\t\t\t.append('.');", "-\t\t\tif (isParameterizedType()) {", "-\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "-\t\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t", "+\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\treturn getTypeDeclaration().getQualifiedName();", "+\t\t\t\t", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tITypeBinding elementType = getElementType();", "+\t\t\t\tif (elementType.isLocal() || elementType.isAnonymous() || elementType.isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\tfinal int dimensions = getDimensions();", "+\t\t\t\tchar[] brackets = new char[dimensions * 2];", "+\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "+\t\t\t\t\tbrackets[i] = ']';", "+\t\t\t\t\tbrackets[i - 1] = '[';", "+\t\t\t\t}", "+\t\t\t\tbuffer = new StringBuffer(elementType.getQualifiedName());", "+\t\t\t\tbuffer.append(brackets);", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\tif (isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\t\treturn new String(typeVariableBinding.sourceName);", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tif (isMember()) {", "+\t\t\t\t\tbuffer", "+\t\t\t\t\t\t.append(getDeclaringClass().getQualifiedName())", "+\t\t\t\t\t\t.append('.');", "+\t\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "+\t\t\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "+\t\t\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\t\t\tbuffer.append('<');", "+\t\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbuffer.append(typeArguments[i].getQualifiedName());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append('>');\t", "+\t\t\t\t\t}", "+\t\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tbuffer.append(getTypeDeclaration().getQualifiedName());", "-\t\t\t\t\tbuffer.append('>');\t", "+\t\t\t\t\tbuffer.append('>');", "-\t\t\t} else {", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tdefault :", "+\t\t\t\tif (isAnonymous() || isLocal()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\tif (isPrimitive() || isNullType()) {", "+\t\t\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "+\t\t\t\t\treturn new String(baseTypeBinding.simpleName);", "+\t\t\t\t}", "+\t\t\t\tif (isMember()) {", "+\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\tbuffer", "+\t\t\t\t\t\t.append(getDeclaringClass().getQualifiedName())", "+\t\t\t\t\t\t.append('.');", "+\t\t\t\t\tbuffer.append(getName());", "+\t\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t}", "+\t\t\t\tPackageBinding packageBinding = this.binding.getPackage();", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "+\t\t\t\t\tbuffer.append(CharOperation.concatWith(packageBinding.compoundName, '.')).append('.');", "+\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "+\t\t\t\treturn String.valueOf(buffer);", "-\t\tif (isParameterizedType()) {", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(getTypeDeclaration().getQualifiedName());", "-\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "-\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "-\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\tbuffer.append('<');", "-\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "-\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t\t}", "-\t\t\t\t\tbuffer.append(typeArguments[i].getQualifiedName());", "-\t\t\t\t}", "-\t\t\t\tbuffer.append('>');", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isRawType()) {", "-\t\t\treturn getTypeDeclaration().getQualifiedName();", "-\t\t}", "-\t\tPackageBinding packageBinding = this.binding.getPackage();", "-\t\t", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "-\t\t\tbuffer.append(CharOperation.concatWith(packageBinding.compoundName, '.')).append('.');", "-\t\t}", "-\t\tbuffer.append(getName());", "-", "-\t\treturn String.valueOf(buffer);"]}], "num": 25007}
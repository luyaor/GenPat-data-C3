{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a44e0a9c49f933c3d2794fe5f638c80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "594ac83e26fcff86ae6f516a0136d965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "93ae272625cf7aea539e03a762b5190105386996", "commitAfterChange": "c6f78f890c1ca00b0157b632da091fae2c781833", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\t\t// TODO (olivier) add probing for comment formatting", "+\t\tif (ProbingScanner == null) {", "+\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT ", "+\t\t\tProbingScanner = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_3, ClassFileConstants.JDK1_3, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\t}", "+\t\tProbingScanner.setSource(source.toCharArray());", "+\t\tProbingScanner.resetTo(offset, offset + length);", "+\t\ttry {", "+\t\t\tswitch(ProbingScanner.getNextToken()) {", "+\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "+\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tProbingScanner.setSource((char[]) null);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aa72a8139ff5130de2100a699fe63c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "1a8cfd60f35f9eb233d4395676551d0101e49aa3", "commitAfterChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "diff": ["-\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT ", "-\t\t\tPROBING_SCANNER = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_3, ClassFileConstants.JDK1_3, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT", "+\t\t\t// do not tokenize white spaces to get single comments even with spaces before...", "+\t\t\tPROBING_SCANNER = new Scanner(true, false/*do not tokenize whitespaces*/, false/*nls*/, ClassFileConstants.JDK1_6, ClassFileConstants.JDK1_6, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\tPROBING_SCANNER.resetTo(offset, offset + length);", "+\t\tPROBING_SCANNER.resetTo(offset, offset + length - 1);", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {"]}], "num": 44161}
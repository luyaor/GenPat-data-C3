{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28ffc4d73f58d421bc7ecbc6bd5b92f1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d1c2815bf3221a8fc399dd41f602a1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void test054d()", "signatureAfterChange": " \tpublic void test054d()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T> T a(A<T> t) {return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<T> String a(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t<T> T aa(A<T> t) {return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tString aa(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: <T#1>a(A<Object>) and <T#2>a(A<T#2>) have the same erasure", "+", "+        <T> String a(A<Object> o) {return null;}", "+                   ^", "+  where T#1,T#2 are type-variables:", "+    T#1 extends Object declared in method <T#1>a(A<Object>)", "+    T#2 extends Object declared in method <T#2>a(A<T#2>)", "+X.java:5: name clash: aa(A<Object>) and <T>aa(A<T>) have the same erasure", "+        String aa(A<Object> o) {return null;}", "+               ^", "+  where T is a type-variable:", "+    T extends Object declared in method <T>aa(A<T>)", "+2 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c52ef1f032301bc5878fe4d6474b81fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 168, "signatureBeforeChange": " \tpublic void test050i()", "signatureAfterChange": " \tpublic void test050i()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t<N> Object b(A<String> n) { return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: <N#1>a(A<Number>) and <N#2>a(A<Number>) have the same erasure", "+        <N> Object a(A<Number> n) { return null; }", "+                   ^", "+  where N#1,N#2 are type-variables:", "+    N#1 extends Object declared in method <N#1>a(A<Number>)", "+    N#2 extends B declared in method <N#2>a(A<Number>)", "+X.java:5: name clash: <N#1>b(A<String>) and <N#2>b(A<Number>) have the same erasure", "+        <N> Object b(A<String> n) { return null; }", "+                   ^", "+  where N#1,N#2 are type-variables:", "+    N#1 extends Object declared in method <N#1>b(A<String>)", "+    N#2 extends B declared in method <N#2>b(A<Number>)", "+2 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc64d1f5cb00afad0071e13f8956bee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\t\t public static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" +", "-\t\t\t\t\"\t\t public static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "-\t\t\t\t\"\t\t public static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\t \tX.<A>foo();\\n\" +", "-\t\t\t\t\"\t\t \tX.<B>foo();\\n\" +", "-\t\t\t\t\"\t\t \tnew X().<B>foo();\\n\" +", "-\t\t\t\t\"\t\t }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class A {}\\n\" +", "-\t\t\t\t\"class B {}\\n\"", "-\t\t\t},", "-\t\t\t\"ABB\"", "-\t\t);", "-\t}", "+\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" +", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\t\"\t\tX.<A>foo();\\n\" +", "+\t\t\t\t\"\t\tX.<B>foo();\\n\" +", "+\t\t\t\t\"\t\tnew X().<B>foo();\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"class B {}\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX.<B>foo();\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+/* javac 7", "+X.java:3: name clash: <N>foo() and <S>foo() have the same erasure", "+        public static <N extends B> N foo() { System.out.print(\"B\"); return null; }", "+                                      ^", "+  where N,S are type-variables:", "+    N extends B declared in method <N>foo()", "+    S extends A declared in method <S>foo()", "+X.java:6: method foo in class X cannot be applied to given types", "+                X.<B>foo();", "+                 ^", "+  required: no arguments", "+  found: no arguments", "+X.java:7: method foo in class X cannot be applied to given types", "+                new X().<B>foo();", "+                       ^", "+  required: no arguments", "+  found: no arguments", "+3 errors", "+ */", "+\t}"]}], "num": 33040}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d47acf5b24a4e2bbf67bdf04989f56b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2498ca934fe153e24e5d9a5b0564e7ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c205e8112abd26463d14623ba60cb47b7f32038f", "commitAfterChange": "534dceb27f709f6f9aedf57dbaee425bf3f6decc", "methodNumberBeforeChange": 282, "methodNumberAfterChange": 282, "signatureBeforeChange": " private int nodeSourceEnd(Binding field, ASTNode node, int index)", "signatureAfterChange": " private int nodeSourceEnd(Binding field, ASTNode node, int index)", "diff": ["-\t\t\treturn (int) (ref.sourcePositions[ref.indexOfFirstFieldBinding-1]);", "+\t\t\tif (index == 0) {", "+\t\t\t\treturn (int) (ref.sourcePositions[ref.indexOfFirstFieldBinding-1]);", "+\t\t\t} else {", "+\t\t\t\treturn (int) (ref.sourcePositions[index]);", "+\t\t\t}", "-\t\t\tfor (int i = 0, length = otherFields.length; i < length; i++) {", "-\t\t\t\tif (otherFields[i] == field)", "-\t\t\t\t\treturn (int) (ref.sourcePositions[i + offset]);", "+\t\t\tif (index != 0) {", "+\t\t\t\tfor (int i = 0, length = otherFields.length; i < length; i++) {", "+\t\t\t\t\tif ((otherFields[i] == field) && (i + offset == index)) {", "+\t\t\t\t\t\treturn (int) (ref.sourcePositions[i + offset]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0, length = otherFields.length; i < length; i++) {", "+\t\t\t\t\tif (otherFields[i] == field)", "+\t\t\t\t\t\treturn (int) (ref.sourcePositions[i + offset]);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5514be287c3f1c1491ba93ccaa4972c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c205e8112abd26463d14623ba60cb47b7f32038f", "commitAfterChange": "534dceb27f709f6f9aedf57dbaee425bf3f6decc", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 283, "signatureBeforeChange": " private int nodeSourceStart(Binding field, ASTNode node)", "signatureAfterChange": " private int nodeSourceStart(Binding field, ASTNode node, int index)", "diff": ["-private int nodeSourceStart(Binding field, ASTNode node) {", "+private int nodeSourceStart(Binding field, ASTNode node, int index) {", "-\t\t\treturn (int) (ref.sourcePositions[ref.indexOfFirstFieldBinding-1] >> 32);", "+\t\t\tif (index == 0) {", "+\t\t\t\treturn (int) (ref.sourcePositions[ref.indexOfFirstFieldBinding-1] >> 32);", "+\t\t\t} else {", "+\t\t\t\treturn (int) (ref.sourcePositions[index] >> 32);", "+\t\t\t}", "-\t\t\tfor (int i = 0, length = otherFields.length; i < length; i++) {", "-\t\t\t\tif (otherFields[i] == field)", "-\t\t\t\t\treturn (int) (ref.sourcePositions[i + offset] >> 32);", "+\t\t\tif (index != 0) {", "+\t\t\t\tfor (int i = 0, length = otherFields.length; i < length; i++) {", "+\t\t\t\t\tif ((otherFields[i] == field) && (i + offset == index)) {", "+\t\t\t\t\t\treturn (int) (ref.sourcePositions[i + offset] >> 32);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0, length = otherFields.length; i < length; i++) {", "+\t\t\t\t\tif (otherFields[i] == field) {", "+\t\t\t\t\t\treturn (int) (ref.sourcePositions[i + offset] >> 32);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577d4e36b74132d5f23b2a0c02800a67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "45342f8bb4f6d2ee4110ba3a5733c6f91b36b60e", "commitAfterChange": "ab8ca59a5dd4b7954a1bf4f4ac6d29a32841c241", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 298, "signatureBeforeChange": " private int nodeSourceEnd(Binding field, ASTNode node, int index)", "signatureAfterChange": " private int nodeSourceEnd(Binding field, ASTNode node, int index)", "diff": ["-\t\t\t\treturn (int) (ref.sourcePositions[index]);", "+\t\t\t\tint length = ref.sourcePositions.length;", "+\t\t\t\tif (index < length) {", "+\t\t\t\t\treturn (int) (ref.sourcePositions[index]);", "+\t\t\t\t}", "+\t\t\t\treturn (int) (ref.sourcePositions[0]);", "+\t\tif (index < length) {", "+\t\t\treturn (int) reference.sourcePositions[index];", "+\t\t}", "+\t} else if (node instanceof QualifiedTypeReference) {", "+\t\tQualifiedTypeReference reference = (QualifiedTypeReference) node;", "+\t\tint length = reference.sourcePositions.length;", "+\t\tif (index < length) {", "+\t\t\treturn (int) reference.sourcePositions[index];", "+\t\t}"]}], "num": 9190}
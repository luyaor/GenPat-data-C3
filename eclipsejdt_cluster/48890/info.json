{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb655d90e00bd612eb45f0ab05e8c14d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bf3583047ce19602f828aca2923b51d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+", "+\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "+\t\tthis.codegenBinding = this.binding.original();", "+", "-\t\t\tif (currentScope", "-\t\t\t\t.environment()", "-\t\t\t\t.options", "-\t\t\t\t.isPrivateConstructorAccessChangingVisibility) {", "-\t\t\t\tbinding.tagForClearingPrivateModifier();", "+\t\t\tif (currentScope.environment().options.isPrivateConstructorAccessChangingVisibility) {", "+\t\t\t\tthis.codegenBinding.tagForClearingPrivateModifier();", "-\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, isSuperAccess());", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ab95f558619d8ee86eef1f77fd8fb06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "+\t\tthis.codegenBinding = this.binding.original();", "+\t\t", "-\t\tif (binding.isPrivate() && (accessMode != This)) {", "+\t\tif (binding.isPrivate() && accessMode != This) {", "-\t\t\tif (currentScope", "-\t\t\t\t.environment()", "-\t\t\t\t.options", "-\t\t\t\t.isPrivateConstructorAccessChangingVisibility) {", "-\t\t\t\tbinding.tagForClearingPrivateModifier();", "+\t\t\tif (currentScope.environment().options.isPrivateConstructorAccessChangingVisibility) {", "+\t\t\t\tthis.codegenBinding.tagForClearingPrivateModifier();", "-\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, isSuperAccess());", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);"]}], "num": 48890}
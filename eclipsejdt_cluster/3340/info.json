{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9abbdb765692c3c321f6710288ea5f6c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec503269855e77d585b2877455676dad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "commitAfterChange": "f38491fd234d2a2b50ab4a08bb29f67687e71ddc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["+\t\tboolean hasError = false;", "-\t\t\treturn null;", "+\t\t\thasError = true;", "+\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t\treturn null;", "+\t\t\thasError = true;", "+\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t\treturn null;", "+\t\t\thasError = true;", "+\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\thasError = true;", "+\t\tif (hasError) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f177253f84958a0af481202bf7d980ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "commitAfterChange": "4d171ddaa03263dfdcaba85fefc5b6e9a52639eb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tIJavaProject currentProject, \t\tIPath currentOutput, \t\tint outputTraverseMode)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tIJavaProject currentProject, \t\tIPath currentOutput, \t\tint outputTraverseMode)", "diff": ["+\t\t\t\tboolean outputIsFiltered = false;", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// case of .class file under project and no source folder", "-\t\t\t\t\t\t// proj=bin", "-\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT ", "-\t\t\t\t\t\t\t&& childRes instanceof IFile ", "-\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {", "-\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\toutputIsFiltered = true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// case of .class file under project and no source folder", "+\t\t\t\t\t\t\t// proj=bin", "+\t\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT ", "+\t\t\t\t\t\t\t\t\t&& childRes instanceof IFile ", "+\t\t\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {", "+\t\t\t\t\t\t\t\toutputIsFiltered = true;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\tif (childType == -1", "-\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tif (currentProject != null) {", "-\t\t\t\t\t\t\tif (!isValidParent) continue; ", "-\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "-\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "-\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "-\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && res instanceof IProject)) { ", "-\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "-\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\tif (!outputIsFiltered) {", "+\t\t\t\t\tif (childType == -1", "+\t\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tif (currentProject != null) {", "+\t\t\t\t\t\t\t\tif (!isValidParent) continue; ", "-\t\t\t\t\t\t\t\t\tisValidParent = false;", "-\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "+\t\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "+\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "+\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && res instanceof IProject)) { ", "+\t\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "+\t\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t\t\tisValidParent = false;", "+\t\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// add child as non java resource", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\torphanChildren[i] = child;", "-\t\t\t\t\t\t\t// add child as non java resource", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\toneChildOnClasspath = true;", "-\t\t\t\t} else {", "-\t\t\t\t\toneChildOnClasspath = true;", "-\t\t\t\t", "+\t\t\t\t\t\t\t\t"]}], "num": 3340}
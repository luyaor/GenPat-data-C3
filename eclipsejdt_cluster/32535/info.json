{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33307fcefe96557ff8fe85296391bade", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2c1ba7059f0c9752a76a7a8b5d8ae4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 128, "signatureBeforeChange": " \tpublic void setRawClasspath( \t\tIClasspathEntry[] entries, \t\tIPath output, \t\tboolean canModifyResources, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void setRawClasspath( \t\tIClasspathEntry[] entries, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tIClasspathEntry[] entries,", "-\t\tIPath output,", "-\t\tboolean canModifyResources,", "-\t\tIProgressMonitor monitor)", "-\t\tthrows JavaModelException {", "-\t\tsetRawClasspath(", "-\t\t\tentries, ", "-\t\t\toutput,", "-\t\t\tmonitor, ", "-\t\t\tcanModifyResources, ", "-\t\t\tgetResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/),", "-\t\t\ttrue, // needValidation", "-\t\t\tcanModifyResources); // save only if modifying resources is allowed", "+\t\t\tgetOutputLocation()/*don't change output*/,", "+\t\t\ttrue/*can change resource (as per API contract)*/,", "+\t\t\tmonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9613de8ecb590e6c1f36591fba677c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean statementsRecovery)", "signatureAfterChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean parseLiteralExpressionsAsConstants)", "diff": ["+\t\tINameEnvironment environment,", "+\t\tIErrorHandlingPolicy policy,", "+\t\tMap settings,", "+\t\tfinal ICompilerRequestor requestor,", "+\t\tIProblemFactory problemFactory,", "+\t\tboolean parseLiteralExpressionsAsConstants) {", "+\t\tthis(environment, policy, new CompilerOptions(settings, parseLiteralExpressionsAsConstants), requestor, problemFactory, null); ", "-\t\t\tINameEnvironment environment,", "-\t\t\tIErrorHandlingPolicy policy,", "-\t\t\tMap settings,", "-\t\t\tfinal ICompilerRequestor requestor,", "-\t\t\tIProblemFactory problemFactory,", "-\t\t\tboolean parseLiteralExpressionsAsConstants,", "-\t\t\tboolean storeAnnotations,", "-\t\t\tboolean statementsRecovery) {", "-\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "-\t\t\t\tnull, // default ", "-\t\t\t\tparseLiteralExpressionsAsConstants, storeAnnotations, true, statementsRecovery);"]}], "num": 32535}
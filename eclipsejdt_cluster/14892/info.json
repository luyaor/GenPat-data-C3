{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7cf550cf40495416c70a763cce46986", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "152d01fdcf271de4a0732ddbaf56a26c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tTypeBinding receiverErasure = this.receiverType.erasure();", "+\t\tif (receiverErasure instanceof ReferenceBinding) {", "+\t\t\tReferenceBinding match = ((ReferenceBinding)receiverErasure).findSuperTypeErasingTo((ReferenceBinding)this.binding.declaringClass.erasure());", "+\t\t\tif (match == null) {", "+\t\t\t\tthis.receiverType = this.binding.declaringClass; // handle indirect inheritance thru variable secondary bound", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73130742cdcfdde9157c09c00984610e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\t// set generic cast of for previous field (if any)", "-\t\t\tif (field != null) {", "-\t\t\t\tFieldBinding originalBinding = field.original();", "-\t\t\t\tif (originalBinding != field) {", "-\t\t\t\t    // extra cast needed if method return type has type variable", "-\t\t\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && type.id != T_JavaLangObject) {", "-\t\t\t\t    \tsetGenericCast(index-1,originalBinding.type.genericCast(type)); // type cannot be base-type even in boxing case", "-\t\t\t\t    }", "-\t\t\t\t} \t", "-\t\t\t}", "-\t\t\tbits &= ~DepthMASK; // flush previous depth if any\t\t\t", "+\t\t\tbits &= ~DepthMASK; // flush previous depth if any\t\t", "+\t\t\tFieldBinding previousField = field;", "+\t\t\t\t// set generic cast of for previous field (if any)", "+\t\t\t\tif (previousField != null) {", "+\t\t\t\t\tTypeBinding fieldReceiverType = type;", "+\t\t\t\t\tTypeBinding receiverErasure = type.erasure();", "+\t\t\t\t\tif (receiverErasure instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)receiverErasure).findSuperTypeErasingTo((ReferenceBinding)field.declaringClass.erasure());", "+\t\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\t\tfieldReceiverType = field.declaringClass; // handle indirect inheritance thru variable secondary bound", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tFieldBinding originalBinding = previousField.original();", "+\t\t\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && fieldReceiverType.id != T_JavaLangObject) {", "+\t\t\t\t    \tsetGenericCast(index-1,originalBinding.type.genericCast(fieldReceiverType)); // type cannot be base-type even in boxing case", "+\t\t\t\t    }", "+\t\t\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f9a0540fc1cfa40e11d45ba17b6ee98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "71e00bc6ce002ae2797821f95ef177097d92a83a", "commitAfterChange": "f4e80cbfc8046dac5978d05b428fdff1de38bfb7", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "    public void resolve()", "signatureAfterChange": "    public void resolve()", "diff": ["-\t\t\tthis.scope.problemReporter().missingSerialVersion(this);", "+\t\t\t//check that the current type doesn't extend javax.rmi.CORBA.Stub", "+\t\t\tTypeBinding javaxRmiCorbaStub = this.scope.getType(TypeConstants.JAVAX_RMI_CORBA_STUB, 4);", "+\t\t\tReferenceBinding superclassBinding = this.binding.superclass;", "+\t\t\tloop: while (superclassBinding != null) {", "+\t\t\t\tif (superclassBinding == javaxRmiCorbaStub) {", "+\t\t\t\t\tneedSerialVersion = false;", "+\t\t\t\t\tbreak loop;", "+\t\t\t\t}", "+\t\t\t\tsuperclassBinding = superclassBinding.superclass();", "+\t\t\t}", "+\t\t\tif (needSerialVersion) {", "+\t\t\t\tthis.scope.problemReporter().missingSerialVersion(this);", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1712357c8ce42711c4a970cabd4ad46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate boolean connectSuperInterfaces()", "signatureAfterChange": " \tprivate boolean connectSuperInterfaces()", "diff": ["-\t\t\tReferenceBinding superInterface = findSupertype(referenceContext.superInterfaces[i]);", "+\t\t    TypeReference superInterfaceRef = referenceContext.superInterfaces[i];", "+\t\t\tReferenceBinding superInterface = findSupertype(superInterfaceRef);", "-\t\t\t\tnoProblems = false;", "-\t\t\t\tcontinue nextInterface;", "-\t\t\t}", "-\t\t\treferenceContext.superInterfaces[i].resolvedType = superInterface; // hold onto the problem type", "-\t\t\tif (!superInterface.isValidBinding()) {", "-\t\t\t\tproblemReporter().invalidSuperinterface(", "-\t\t\t\t\tsourceType,", "-\t\t\t\t\treferenceContext.superInterfaces[i],", "-\t\t\t\t\tsuperInterface);", "+\t\t\tsuperInterfaceRef.resolvedType = superInterface; // hold onto the problem type", "+\t\t\t\tsourceType.tagBits |= HierarchyHasProblems;", "+\t\t\t\tnoProblems = false;", "+\t\t\t\tcontinue nextInterface;", "+\t\t\t}", "+\t\t\tReferenceBinding invalid = findAmbiguousInterface(superInterface, sourceType);", "+\t\t\tif (invalid != null) {", "+\t\t\t\tReferenceBinding generic = null;", "+\t\t\t\tif (superInterface.isParameterizedType())", "+\t\t\t\t\tgeneric = ((ParameterizedTypeBinding) superInterface).type;", "+\t\t\t\telse if (invalid.isParameterizedType())", "+\t\t\t\t\tgeneric = ((ParameterizedTypeBinding) invalid).type;", "+\t\t\t\tproblemReporter().superinterfacesCollide(generic, referenceContext, superInterface, invalid);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bae870656116fd6c7aee9fc9d4575126", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "520c83ffe744bff7033f38d9dae19a34f622d060", "commitAfterChange": "dd7653848d6e210b553f9a046fbf18fb94d2a610", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public boolean detectAnnotationCycle()", "signatureAfterChange": " public boolean detectAnnotationCycle()", "diff": ["+\tboolean inCycle = false; // check each method before failing", "-\t\tif (returnType.isAnnotationType() && ((ReferenceBinding) returnType).detectAnnotationCycle()) {", "+\t\tif (this == returnType) {", "+\t\t\tif (this instanceof SourceTypeBinding) {", "+\t\t\t\tMethodDeclaration decl = (MethodDeclaration) currentMethods[i].sourceMethod();", "+\t\t\t\t((SourceTypeBinding) this).scope.problemReporter().annotationCircularity(this, this, decl != null ? decl.returnType : null);", "+\t\t\t}", "+\t\t} else if (returnType.isAnnotationType() && ((ReferenceBinding) returnType).detectAnnotationCycle()) {", "-\t\t\treturn true;", "+\t\t\tinCycle = true;", "+\tif (inCycle)", "+\t\treturn true;"]}], "num": 14892}
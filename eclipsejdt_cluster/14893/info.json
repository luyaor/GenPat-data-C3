{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8ba6697df5e8e0ae4f9726309b3fd98", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26eadb27af8360fd83a873bfe1327308", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void resolve(ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\tprivate void resolve(ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor) {", "-", "-\t\tDefaultBindingResolver.BindingTables bindingTables = new DefaultBindingResolver.BindingTables();", "+\tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor) {", "+\t", "+\t\tastRequestor.compilationUnitResolver = this;", "+\t\tthis.bindingTables = new DefaultBindingResolver.BindingTables();", "-\t\t\tICompilationUnit[] workingCopies = astRequestor.getSources();", "-\t\t\tif (workingCopies == null) return;", "-\t\t\tint length = workingCopies.length;", "+\t\t\tint length = compilationUnits.length;", "-\t\t\tSystem.arraycopy(workingCopies, 0, sourceUnits, 0, length);", "-\t\t\tbeginToCompile(sourceUnits);", "+\t\t\tSystem.arraycopy(compilationUnits, 0, sourceUnits, 0, length);", "+\t\t\tbeginToCompile(sourceUnits, bindingKeys);", "-\t\t\t\t\t// convert AST", "-\t\t\t\t\tCompilationResult compilationResult = unit.compilationResult;", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = compilationResult.compilationUnit;", "-\t\t\t\t\tchar[] contents = sourceUnit.getContents();", "-\t\t\t\t\tAST ast = AST.newAST(apiLevel);", "-\t\t\t\t\tast.setDefaultNodeFlag(ASTNode.ORIGINAL);", "-\t\t\t\t\tASTConverter converter = new ASTConverter(compilerOptions, true/*need to resolve bindings*/, monitor);", "-\t\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, bindingTables);", "-\t\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\t\tconverter.setAST(ast);", "-\t\t\t\t\tCompilationUnit compilationUnit = converter.convert(unit, contents);", "-\t\t\t\t\tcompilationUnit.setLineEndTable(compilationResult.lineSeparatorPositions);", "-\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\tICompilationUnit source = (ICompilationUnit) this.requestedSources.removeKey(unit.compilationResult.getFileName());", "+\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t// convert AST", "+\t\t\t\t\t\tCompilationResult compilationResult = unit.compilationResult;", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = compilationResult.compilationUnit;", "+\t\t\t\t\t\tchar[] contents = sourceUnit.getContents();", "+\t\t\t\t\t\tAST ast = AST.newAST(apiLevel);", "+\t\t\t\t\t\tast.setDefaultNodeFlag(ASTNode.ORIGINAL);", "+\t\t\t\t\t\tASTConverter converter = new ASTConverter(compilerOptions, true/*need to resolve bindings*/, monitor);", "+\t\t\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables, this);", "+\t\t\t\t\t\tast.setBindingResolver(resolver);", "+\t\t\t\t\t\tconverter.setAST(ast);", "+\t\t\t\t\t\tCompilationUnit compilationUnit = converter.convert(unit, contents);", "+\t\t\t\t\t\tcompilationUnit.setLineEndTable(compilationResult.lineSeparatorPositions);", "+\t\t\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// pass it to requestor", "+\t\t\t\t\t\tastRequestor.acceptAST(compilationUnit, source);", "+\t\t\t\t\t} ", "-\t\t\t\t\t// pass it to requestor", "-\t\t\t\t\tastRequestor.acceptAST(compilationUnit);", "+\t\t\t\t\tBindingKey bindingKey = (BindingKey) this.requestedKeys.removeKey(unit.compilationResult.getFileName());", "+\t\t\t\t\tif (bindingKey != null) {", "+\t\t\t\t\t\tBinding compilerBinding = bindingKey.getCompilerBinding(unit, this);", "+\t\t\t\t\t\tif (compilerBinding != null) {", "+\t\t\t\t\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables, this);", "+\t\t\t\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t// pass it to requestor", "+\t\t\t\t\t\t\tif (binding != null)", "+\t\t\t\t\t\t\t\tastRequestor.acceptBinding(binding, bindingKey.getKey());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// remaining binding keys are package binding keys", "+\t\t\tchar[][] pkgNames = this.requestedKeys.keyTable;", "+\t\t\tfor (int j = 0, pkgLength = pkgNames.length; j < pkgLength; j++) {", "+\t\t\t\tchar[] pkgName = pkgNames[j];", "+\t\t\t\tif (pkgName == null) continue;", "+\t\t\t\tBinding compilerBinding = new PackageBinding(CharOperation.splitOn('.', pkgName), null, this.lookupEnvironment);", "+\t\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(null, owner, this.bindingTables, this);", "+\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "-\t\t\t\tif (i == this.totalUnits-1) {", "-\t\t\t\t\t// end of batch: look for new one", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tworkingCopies = astRequestor.getSources();", "-\t\t\t\t\t} while (workingCopies != null && workingCopies.length == 0);", "-\t\t\t\t\tif (workingCopies != null) {", "-\t\t\t\t\t\tfor (int j = 0, workingCopyLength = workingCopies.length; j < workingCopyLength; j++) {", "-\t\t\t\t\t\t\tICompilationUnit workingCopy = workingCopies[j];", "-\t\t\t\t\t\t\taccept((org.eclipse.jdt.internal.compiler.env.ICompilationUnit) workingCopy, null /* no access restriction*/);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t// pass it to requestor", "+\t\t\t\tif (binding != null)", "+\t\t\t\t\tastRequestor.acceptBinding(binding, ((BindingKey) this.requestedKeys.valueTable[j]).getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1092409be720427d08fe25fe9d0daf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "146dc3b7afcca724ac2ba30b2cbb382c047a5a77", "commitAfterChange": "916862391ff792c972ae46f3240db598c93015ba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tboolean hasTypeVarArgs = false;", "+\t\tboolean hasArgsTypeVar = false;", "-\t\t\t\t} else if (!hasTypeVarArgs) {", "-\t\t\t\t\thasTypeVarArgs = argumentTypes[i].isTypeVariable();", "+\t\t\t\t} else if (!hasArgsTypeVar) {", "+\t\t\t\t\thasArgsTypeVar = argumentTypes[i].isTypeVariable();", "-\t\tthis.binding = (this.receiver != null && this.receiver.isThis())", "-\t\t\t? scope.getImplicitMethod(this.selector, argumentTypes, this)", "-\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "+\t\tthis.binding = scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "+\t\tif (!this.binding.isValidBinding()) {", "+\t\t\t// Try method in enclosing types", "+\t\t\tTypeBinding enclosingTypeBinding = this.actualReceiverType;", "+\t\t\tMethodBinding methodBinding = this.binding;", "+\t\t\twhile (!methodBinding.isValidBinding() && (enclosingTypeBinding.isMemberType() || enclosingTypeBinding.isLocalType())) {", "+\t\t\t\tenclosingTypeBinding = enclosingTypeBinding.enclosingType();", "+\t\t\t\tmethodBinding = scope.getMethod(enclosingTypeBinding, this.selector, argumentTypes, this);", "+\t\t\t}", "+\t\t\tif (methodBinding.isValidBinding()) {", "+\t\t\t\tthis.binding = methodBinding;", "+\t\t\t} else {", "+\t\t\t\t// Try to search a constructor instead", "+\t\t\t\tenclosingTypeBinding = this.actualReceiverType;", "+\t\t\t\tMethodBinding contructorBinding = this.binding;", "+\t\t\t\twhile (!contructorBinding.isValidBinding() && (enclosingTypeBinding.isMemberType() || enclosingTypeBinding.isLocalType())) {", "+\t\t\t\t\tenclosingTypeBinding = enclosingTypeBinding.enclosingType();", "+\t\t\t\t\tif (CharOperation.equals(this.selector, enclosingTypeBinding.shortReadableName())) {", "+\t\t\t\t\t\tcontructorBinding = scope.getConstructor((ReferenceBinding)enclosingTypeBinding, argumentTypes, this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (contructorBinding.isValidBinding()) {", "+\t\t\t\t\tthis.binding = contructorBinding;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t} else if (hasTypeVarArgs) {", "+\t\t} else if (hasArgsTypeVar) {", "+\t\t} else if (binding.isVarargs()) {", "+\t\t\tint length = argumentTypes.length;", "+\t\t\tif (!(binding.parameters.length == length && argumentTypes[length-1].isArrayType())) {", "+\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b00b4dd28c1204cda9249de7e7ed46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object bracePositionForBlockInCaseOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK_IN_CASE);", "+\t\tif (bracePositionForBlockInCaseOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_block_in_case = (String) bracePositionForBlockInCaseOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_block_in_case = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeCatchInTryStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH_IN_TRY_STATEMENT);", "+\t\tif (insertNewLineBeforeCatchInTryStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_catch_in_try_statement = JavaCore.INSERT.equals(insertNewLineBeforeCatchInTryStatementOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeElseInIfStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE_IN_IF_STATEMENT);", "+\t\tif (insertNewLineBeforeElseInIfStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_else_in_if_statement = JavaCore.INSERT.equals(insertNewLineBeforeElseInIfStatementOption);", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeFinallyInTryStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY_IN_TRY_STATEMENT);", "+\t\tif (insertNewLineBeforeFinallyInTryStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_finally_in_try_statement = JavaCore.INSERT.equals(insertNewLineBeforeFinallyInTryStatementOption);", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeWhileInDoStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT);", "+\t\tif (insertNewLineBeforeWhileInDoStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_while_in_do_statement = JavaCore.INSERT.equals(insertNewLineBeforeWhileInDoStatementOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterColonInCaseOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE);", "+\t\tif (insertSpaceAfterColonInCaseOption != null) {", "+\t\t\tthis.insert_space_after_colon_in_case = JavaCore.INSERT.equals(insertSpaceAfterColonInCaseOption);", "+\t\tfinal Object keepEmptyArrayInitializerOnOneLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_EMPTY_ARRAY_INITIALIZER_ON_ONE_LINE);", "+\t\tif (keepEmptyArrayInitializerOnOneLineOption != null) {", "+\t\t\tthis.keep_empty_array_initializer_on_one_line = DefaultCodeFormatterConstants.TRUE.equals(keepEmptyArrayInitializerOnOneLineOption);", "+\t\t}"]}], "num": 14893}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "438b2cdc73bcb6046c97063afe815b37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fdf57239019adf4c7cf40639e5c6b49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "14369aade824a8ea9cd172f06aeb63b163bb9bf0", "commitAfterChange": "76049c710d8a15447cdfbafce1296b7824e89c76", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes,  \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tIPackageFragmentRoot root,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes, \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "diff": ["+\t\t\tIPackageFragmentRoot root, ", "-\t\t\tboolean waitForIndexes, ", "+\t\t\tboolean waitForIndexes,", "+\t\t\tif (root != null && !packages[i].getParent().equals(root)) {", "+\t\t\t\t// filter package which are not in same root", "+\t\t\t\tcontinue;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520826c96139c6757be197b92b464ab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "4e907850ddc55384eab3db9a6cd45146c9e7c02d", "commitAfterChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tIPackageFragmentRoot root,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes, \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes,  \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "diff": ["-\t\t\tIPackageFragmentRoot root, ", "-\t\t\tboolean waitForIndexes,", "+\t\t\tboolean waitForIndexes, ", "-\t\t\tif (root != null && !packages[i].getParent().equals(root)) {", "-\t\t\t\t// filter package which are not in same root", "-\t\t\t\tcontinue;", "-\t\t\t}"]}], "num": 58803}
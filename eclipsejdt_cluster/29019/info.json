{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d177f615aea0a94be5a70182c373643b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b35170c05818ec0dda71bf48e60e412", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "1e351d47b6a42ac5f4bfe0ec77b007aad61afe06", "commitAfterChange": "de2ebbd8d2a96003685d1ff75c62901c3d156a6c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tthenInitStateIndex = currentScope.methodScope().recordInitializationStates(flowInfo.initsWhenTrue());\r", "-\telseInitStateIndex = currentScope.methodScope().recordInitializationStates(flowInfo.initsWhenFalse());\r", "+\tFlowInfo trueInfo = flowInfo.initsWhenTrue();\r", "+\tthenInitStateIndex = currentScope.methodScope().recordInitializationStates(trueInfo);\r", "+\tFlowInfo falseInfo = flowInfo.initsWhenFalse();\r", "+\telseInitStateIndex = currentScope.methodScope().recordInitializationStates(falseInfo);\r", "+\t\r", "+\t// propagate analysis\r", "+\ttrueInfo = valueIfTrue.analyseCode(currentScope, flowContext, trueInfo.copy());\r", "+\tfalseInfo = valueIfFalse.analyseCode(currentScope, flowContext, falseInfo.copy());\r", "+\t\r", "+\t// merge back using a conditional info\r", "+\t// if ((t && (v = t)) ? t : t && (v = f)) r = v;  -- ok\r", "+\tFlowInfo mergedInfo = FlowInfo.conditional(\r", "+\t\ttrueInfo.initsWhenTrue().unconditionalInits().mergedWith(\r", "+\t\t\tfalseInfo.initsWhenTrue().unconditionalInits()),\r", "+\t\tfalseInfo.initsWhenFalse().unconditionalInits().mergedWith(\r", "+\t\t\tfalseInfo.initsWhenFalse().unconditionalInits()));\r", "+/*\t\t\t\r", "+*/\t\t\t\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7847e3a89c76f8954952b14285caa784", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "c184ff0d8868e4e4a23c45be667e27d2482aa33f", "commitAfterChange": "5f9b5f6bde6ddbfdbfa46be3b81806de99313773", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowInfo postCondInfo =", "+\t\tFlowInfo condInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "-\t\t\t\tflowInfo);", "+\t\t\t\tcondInfo);", "+\t\tFlowInfo exitBranch;", "-\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, postCondInfo);", "+\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, condInfo);", "-\t\t\t\tFlowInfo mergedInfo = postCondInfo.initsWhenFalse().unconditionalInits();", "+\t\t\t\tFlowInfo mergedInfo = condInfo.initsWhenFalse().unconditionalInits();", "-\t\t\t\tactionInfo = postCondInfo.initsWhenTrue().copy();", "+\t\t\t\tactionInfo = condInfo.initsWhenTrue().copy();", "-\t\t\t\t\tpostCondInfo.initsWhenTrue());", "+\t\t\t\t\tcondInfo.initsWhenTrue());", "+\t\t\texitBranch = condInfo.initsWhenFalse();", "+\t\t\texitBranch.addInitializationsFrom(flowInfo); // recover null inits from before condition analysis", "-\t\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, postCondInfo);", "+\t\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, condInfo);", "-\t\t\t\tpostCondInfo.initsWhenFalse().addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "+\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "-\t\t\t\tpostCondInfo.initsWhenFalse(), ", "+\t\t\t\texitBranch,", "-\t\tmergedInfo.addPotentialInitializationsFrom(actionInfo.unconditionalInits());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9070c72dea4d0db66812865c9e915fb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "c184ff0d8868e4e4a23c45be667e27d2482aa33f", "commitAfterChange": "5f9b5f6bde6ddbfdbfa46be3b81806de99313773", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tflowInfo = this.collection.analyseCode(scope, flowContext, flowInfo);", "+\t\tFlowInfo condInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "+\t\tcondInfo = this.collection.analyseCode(scope, flowContext, condInfo);", "-\t\tflowInfo.markAsDefinitelyAssigned(this.elementVariable.binding);", "+\t\tcondInfo.markAsDefinitelyAssigned(this.elementVariable.binding);", "-\t\tthis.postCollectionInitStateIndex = currentScope.methodScope().recordInitializationStates(flowInfo);", "+\t\tthis.postCollectionInitStateIndex = currentScope.methodScope().recordInitializationStates(condInfo);", "-\t\tFlowInfo actionInfo = flowInfo.initsWhenTrue().copy();", "+\t\tFlowInfo actionInfo = condInfo.initsWhenTrue().copy();", "+\t\tFlowInfo exitBranch;", "+\t\t\texitBranch = condInfo.initsWhenFalse();", "+\t\t\texitBranch.addInitializationsFrom(flowInfo); // recover null inits from before condition analysis\t\t\t", "-\t\t\t\tflowInfo.initsWhenFalse().addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "+\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "+\t\t} else {", "+\t\t\texitBranch = condInfo.initsWhenFalse();", "-\t\t\t\tflowInfo.initsWhenFalse(), ", "+\t\t\t\texitBranch, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf357f129f871a03f854e6eea8471b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "c184ff0d8868e4e4a23c45be667e27d2482aa33f", "commitAfterChange": "5f9b5f6bde6ddbfdbfa46be3b81806de99313773", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\tFlowInfo condInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "-\t\t\t\tflowInfo =", "+\t\t\t\tcondInfo =", "-\t\t\t\t\t\tflowInfo);", "+\t\t\t\t\t\tcondInfo);", "-\t\t\t\tcondLoopContext.complainOnDeferredChecks(scope, flowInfo);", "+\t\t\t\tcondLoopContext.complainOnDeferredChecks(scope, condInfo);", "-\t\t\t\tactionInfo = flowInfo.initsWhenTrue().copy();", "+\t\t\t\tactionInfo = condInfo.initsWhenTrue().copy().unconditionalInits().discardNullRelatedInitializations();", "-\t\t\tFlowInfo initsWhenTrue = flowInfo.initsWhenTrue();", "+\t\t\tFlowInfo initsWhenTrue = condInfo.initsWhenTrue();", "-\t\t\t\t\tactionInfo = initsWhenTrue.copy();", "+\t\t\t\t\tactionInfo = initsWhenTrue.copy().unconditionalInits().discardNullRelatedInitializations();", "-\t\t\t\t\tcondLoopContext.complainOnDeferredChecks(scope, flowInfo);", "+\t\t\t\t\tcondLoopContext.complainOnDeferredChecks(scope, condInfo);", "-\t\tFlowInfo exitBranch = flowInfo.initsWhenFalse();", "+\t\tFlowInfo exitBranch = condInfo.initsWhenFalse();", "+\t\texitBranch.addInitializationsFrom(flowInfo); // recover null inits from before condition analysis"]}], "num": 29019}
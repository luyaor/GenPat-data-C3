{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c62cdfb2f41f3aa77d1cc5b9753fb903", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6423d823deb963c66787b842191e0838", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "e3ab7adcf5341254d66eeef47fc0727dbe42868f", "commitAfterChange": "8915ec2bb74e44419be85002d7c3a4c9f8582635", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 395, "signatureBeforeChange": " protected void checkNonExternalizedStringLiteral()", "signatureAfterChange": " protected void reportNonExternalizedStringLiterals()", "diff": ["-protected void checkNonExternalizedStringLiteral() {", "-\tif (this.scanner.wasNonExternalizedStringLiteral) {", "-\t\tStringLiteral[] literals = this.scanner.nonNLSStrings;", "-\t\t// could not reproduce, but this is the only NPE", "-\t\t// added preventive null check see PR 9035", "-\t\tif (literals != null) {", "-\t\t\tfor (int i = 0, max = literals.length; i < max; i++) {", "-\t\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);", "-\t\t\t}", "-\t\t}", "-\t\tthis.scanner.wasNonExternalizedStringLiteral = false;", "-\t}", "-}", "+protected void reportNonExternalizedStringLiterals() {", "+\tfinal Set nonNLSStrings = this.scanner.nonNLSStrings;", "+\tfinal int nonNLSStringsSize = nonNLSStrings == null ? 0 : nonNLSStrings.size();", "+\tif (nonNLSStringsSize != 0) {", "+\t\tStringLiteral[] literals = new StringLiteral[nonNLSStringsSize];", "+\t\tnonNLSStrings.toArray(literals);", "+\t\tArrays.sort(literals, new Comparator() {", "+\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\tStringLiteral literal1 = (StringLiteral) o1;", "+\t\t\t\tStringLiteral literal2 = (StringLiteral) o2;", "+\t\t\t\treturn literal1.sourceStart - literal2.sourceStart;", "+\t\t\t}", "+\t\t});", "+\t\tfor (int i = 0; i < nonNLSStringsSize; i++) {", "+\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);", "+\t\t}", "+\t}", "+\tfinal Set unnecessaryNONNLSTags = this.scanner.unnecessaryNONNLSTags;", "+\tfinal int unnecessaryNONNLSTagsSize = unnecessaryNONNLSTags == null ? 0 : unnecessaryNONNLSTags.size();", "+\tif (unnecessaryNONNLSTagsSize != 0) {", "+\t\tNLSTag[] tags = new NLSTag[unnecessaryNONNLSTagsSize];", "+\t\tunnecessaryNONNLSTags.toArray(tags);", "+\t\t// filter out all used nls tags", "+\t\tArrayList arrayList = new ArrayList();", "+\t\tfor (int i = 0; i < unnecessaryNONNLSTagsSize; i++) {", "+\t\t\tNLSTag tag = tags[i];", "+\t\t\tif ((tag.bits & NLSTag.UNUSED) != 0) {", "+\t\t\t\tarrayList.add(tag);", "+\t\t\t}", "+\t\t}", "+\t\tCollections.sort(arrayList, new Comparator() {", "+\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\tNLSTag tag1 = (NLSTag) o1;", "+\t\t\t\tNLSTag tag2 = (NLSTag) o1;", "+\t\t\t\treturn tag1.start - tag2.start;", "+\t\t\t}", "+\t\t});", "+\t\tfor (int i = 0, max = arrayList.size(); i < max; i++) {", "+\t\t\tNLSTag tag = (NLSTag) arrayList.get(i); ", "+\t\t\tproblemReporter().unnecessaryNONNLSTags(tag.start, tag.end);", "+\t\t}", "+\t}", "+\tthis.scanner.nonNLSStrings = null;", "+\tthis.scanner.unnecessaryNONNLSTags = null;", "+\tthis.scanner.currentLine = null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "949a234b1c16e253880a2daf48cd2717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b7b27ff488733ad97566caef0cb2bdd99a3b7b63", "commitAfterChange": "d2bf5e6bc7d5c8ce5696375ed384baae09128c52", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 369, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\treportNonExternalizedStringLiterals();", "+\tif (this.scanner.currentLine != null) {", "+\t\tfinal Set nonNLSStrings = this.scanner.nonNLSStrings;", "+\t\tif (nonNLSStrings != null) {", "+\t\t\tfinal int nonNLSStringsSize = nonNLSStrings.size();", "+\t\t\tStringLiteral[] literals = new StringLiteral[nonNLSStringsSize];", "+\t\t\tnonNLSStrings.toArray(literals);", "+\t\t\tArrays.sort(literals, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\tStringLiteral literal1 = (StringLiteral) o1;", "+\t\t\t\t\tStringLiteral literal2 = (StringLiteral) o2;", "+\t\t\t\t\treturn literal1.sourceStart - literal2.sourceStart;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\tfor (int i = 0; i < nonNLSStringsSize; i++) {", "+\t\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);", "+\t\t\t}", "+\t\t}", "+\t\tfinal Set unnecessaryNLSTags = this.scanner.unnecessaryNLSTags;", "+\t\tif (unnecessaryNLSTags != null) {", "+\t\t\tfinal int unnecessaryNLSTagsSize = unnecessaryNLSTags.size();", "+\t\t\tif (unnecessaryNLSTagsSize != 0) {", "+/*\t\t\t\tNLSTag[] tags = new NLSTag[unnecessaryNLSTagsSize];", "+\t\t\t\tunnecessaryNLSTags.toArray(tags);", "+\t\t\t\t// filter out all used nls tags", "+\t\t\t\tArrayList arrayList = new ArrayList();", "+\t\t\t\tfor (int i = 0; i < unnecessaryNLSTagsSize; i++) {", "+\t\t\t\t\tNLSTag tag = tags[i];", "+\t\t\t\t\tif ((tag.bits & NLSTag.UNUSED) != 0) {", "+\t\t\t\t\t\tarrayList.add(tag);", "+\t\t\t\t\t}", "+\t\t\t\t}*/", "+\t\t\t\tArrayList arrayList = new ArrayList();", "+\t\t\t\tarrayList.addAll(unnecessaryNLSTags);", "+\t\t\t\tCollections.sort(arrayList, new Comparator() {", "+\t\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\t\tNLSTag tag1 = (NLSTag) o1;", "+\t\t\t\t\t\tNLSTag tag2 = (NLSTag) o1;", "+\t\t\t\t\t\treturn tag1.start - tag2.start;", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tloop : for (int i = 0, max = arrayList.size(); i < max; i++) {", "+\t\t\t\t\tNLSTag tag = (NLSTag) arrayList.get(i); ", "+\t\t\t\t\tif (tag.bits != NLSTag.UNUSED) {", "+\t\t\t\t\t\tcontinue loop;", "+\t\t\t\t\t}", "+\t\t\t\t\tproblemReporter().unnecessaryNLSTags(tag.start, tag.end);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tthis.scanner.nonNLSStrings = null;", "+\t\tthis.scanner.unnecessaryNLSTags = null;", "+\t\tthis.scanner.currentLine = null;", "+\t}"]}], "num": 62340}
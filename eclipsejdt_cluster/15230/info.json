{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcadfb8a33b58bbaadc067676e5a60ec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b16f14370c56a743ae0c3e42ec48bbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 97, "signatureBeforeChange": " \tpublic void test0090() throws JavaModelException", "signatureAfterChange": " \tpublic void test0090() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode result = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\tpublic void foo() {}\\n\" +", "-\t\t\t\t\"\tpublic void bar(X x, int f) {\\n\" +", "-\t\t\t\t\"\t\tx.foo();\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, result.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) result;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tcompilationUnit.accept(new ASTVisitor() {", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.SingleVariableDeclaration)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(SingleVariableDeclaration node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.VariableDeclarationFragment)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(VariableDeclarationFragment node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.FieldAccess)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(FieldAccess node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(org.eclipse.jdt.core.dom.SuperFieldAccess)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(SuperFieldAccess node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t});", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode result = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\tpublic void foo() {}\\n\" +", "+\t\t\t\"\tpublic void bar(X x, int f) {\\n\" +", "+\t\t\t\"\t\tx.foo();\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, result.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) result;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tcompilationUnit.accept(new ASTVisitor() {", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.SingleVariableDeclaration)", "+\t\t\t */", "+\t\t\tpublic boolean visit(SingleVariableDeclaration node) {", "+\t\t\t\tIVariableBinding binding = node.resolveBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.VariableDeclarationFragment)", "+\t\t\t */", "+\t\t\tpublic boolean visit(VariableDeclarationFragment node) {", "+\t\t\t\tIVariableBinding binding = node.resolveBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.FieldAccess)", "+\t\t\t */", "+\t\t\tpublic boolean visit(FieldAccess node) {", "+\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(org.eclipse.jdt.core.dom.SuperFieldAccess)", "+\t\t\t */", "+\t\t\tpublic boolean visit(SuperFieldAccess node) {", "+\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06d6e9afa022920f2bfc7fdde29316a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void test0106() throws JavaModelException", "signatureAfterChange": " \tpublic void test0106() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"@interface Ann {}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@p.Ann public class X {}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 1);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "-\t\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "-\t\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "-\t\t\tITypeBinding typeBinding = markerAnnotation.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", typeBinding);", "-\t\t\tName name = markerAnnotation.getTypeName();", "-\t\t\ttypeBinding = name.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", typeBinding);", "-\t\t\tIBinding binding = name.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tassertEquals(\"Wrong kind of binding\", IBinding.TYPE, binding.getKind());", "-\t\t\tassertEquals(\"Not a qualified name\", ASTNode.QUALIFIED_NAME, name.getNodeType());", "-\t\t\tQualifiedName qualifiedName = (QualifiedName) name;", "-\t\t\tSimpleName simpleName = qualifiedName.getName();", "-\t\t\tbinding = simpleName.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tname = qualifiedName.getQualifier();", "-\t\t\tbinding = name.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);\t\t\t", "-\t\t\tassertEquals(\"Wrong kind of binding\", IBinding.PACKAGE, binding.getKind());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"@interface Ann {}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@p.Ann public class X {}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 1);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "+\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "+\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "+\t\tITypeBinding typeBinding = markerAnnotation.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tName name = markerAnnotation.getTypeName();", "+\t\ttypeBinding = name.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tIBinding binding = name.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tassertEquals(\"Wrong kind of binding\", IBinding.TYPE, binding.getKind());", "+\t\tassertEquals(\"Not a qualified name\", ASTNode.QUALIFIED_NAME, name.getNodeType());", "+\t\tQualifiedName qualifiedName = (QualifiedName) name;", "+\t\tSimpleName simpleName = qualifiedName.getName();", "+\t\tbinding = simpleName.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tname = qualifiedName.getQualifier();", "+\t\tbinding = name.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);\t\t\t", "+\t\tassertEquals(\"Wrong kind of binding\", IBinding.PACKAGE, binding.getKind());"]}], "num": 15230}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "085f03c57efa5689f1fa108747c2d519", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7abf3feacccc68ed039ee2f130a93496", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "f3797939fa5164cd62a3ae51074dba1ccea759ff", "commitAfterChange": "0df341e86846b5d019d9adfde0716c02f828f524", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static String[] loadMessageTemplates(Locale loc)", "signatureAfterChange": " public static HashtableOfInt loadMessageTemplates(Locale loc)", "diff": ["-public static String[] loadMessageTemplates(Locale loc) {", "+public static HashtableOfInt loadMessageTemplates(Locale loc) {", "-\tString[] templates = new String[MAX_MESSAGES];", "-\tfor (int i = 0, max = templates.length; i < max; i++) {", "-\t\ttry {", "-\t\t\ttemplates[i] = bundle.getString(String.valueOf(i));", "+\tHashtableOfInt templates = new HashtableOfInt(700);", "+\tEnumeration keys = bundle.getKeys();", "+\twhile (keys.hasMoreElements()) {", "+\t    String key = (String)keys.nextElement();", "+\t    try {", "+\t        int messageID = Integer.parseInt(key);", "+\t\t\ttemplates.put(keyFromID(messageID), bundle.getString(key));", "+\t    } catch(NumberFormatException e) {", "+\t        // key ill-formed", "-\t\t}", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f1fa8d1d9e5600d142e7fd0ce03dd08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "0ae44cb94fd5970ee99a6625f01c4e21cfef9943", "commitAfterChange": "7d0759aa475ed30414afbcf0da4d76dd1b16cba1", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": "\r \tpublic static void setOptions(Hashtable newOptions)", "diff": ["+\t */\r", "+\tpublic static void setOptions(Hashtable newOptions) {\r", "+\t\t\r", "+\t\t// see #initializeDefaultPluginPreferences() for changing default settings\r", "+\t\tPreferences preferences = getPlugin().getPluginPreferences();\r", "+\r", "+\t\tif (newOptions == null){\r", "+\t\t\tnewOptions = JavaCore.getDefaultOptions();\r", "+\t\t}\r", "+\t\tEnumeration keys = newOptions.keys();\r", "+\t\twhile (keys.hasMoreElements()){\r", "+\t\t\tString key = (String)keys.nextElement();\r", "+\t\t\tif (key.equals(CompilerOptions.OPTION_Encoding)) continue; // skipped, contributed by resource prefs\r", "+\t\t\tString value = (String)newOptions.get(key);\r", "+\t\t\tpreferences.setValue(key, value);\r", "+\t\t}\r", "+\t}\r", "-\t */\r", "-\tpublic static void setOptions(Hashtable newOptions) {\r", "-\t\tif (newOptions == null){\r", "-\t\t\tJavaModelManager.Options = getDefaultOptions();\r", "-\t\t} else {\r", "-\t\t\tJavaModelManager.Options = (Hashtable)newOptions.clone();\r", "-\t\t}\r", "-\t}\r"]}], "num": 33136}
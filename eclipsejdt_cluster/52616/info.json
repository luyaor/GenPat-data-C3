{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "908df04c7d7d551c951cfceda592b5bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b6a1476663c6531ce834f813f0666b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void configure( String newValue, String oldValue )", "signatureAfterChange": " \tprivate void configure()", "diff": ["-\tprivate void configure( String newValue, String oldValue ) ", "-\t{", "-\t\t", "-\t\t// bail if they specify null, empty-string or don't change the name of the source folder", "-\t\tif ( newValue == null || ", "-\t\t\t newValue.length() == 0 || ", "-\t\t\t newValue.equals(oldValue) )", "-\t\t\treturn;", "-\t\t", "-\t\t_aptProject.projectClean( true );", "-", "-\t\tIFolder srcFolder = null;", "-\t\tsynchronized ( this )", "-\t\t{", "-\t\t\t_generatedSourceFolderName = newValue;", "-\t\t\tsrcFolder = _generatedSourceFolder;", "-\t\t", "-\t\t// if the preference change occur before we actually", "-\t\t// initialized the _generatedSourceFolder. ", "-\t\t// This may happen when the pre-processor resource change event occurs after", "-\t\t// the preference change event.", "-\t\tif( oldValue != null && srcFolder == null ){", "-\t\t\tsrcFolder = _aptProject.getJavaProject().getProject().getFolder( oldValue );", "-\t\t", "-\t\tresetGeneratedSrcFolder(srcFolder, true);\t\t", "+\t */", "+\tprivate void configure() {", "+\t\t", "+\t\tassert(_generatedSourceFolder == null): \"Should have already removed old folder by now\"; //$NON-NLS-1$", "+\t\tIFolder srcFolder = getFolderPreference();", "+\t\tif (srcFolder == null) {", "+\t\t\tIStatus status = AptPlugin.createStatus(null, \"Could not create generated source folder (\" + //$NON-NLS-1$", "+\t\t\t\t\tAptConfig.getGenSrcDir(_aptProject.getJavaProject()) + \")\"); //$NON-NLS-1$", "+\t\t\tAptPlugin.log(status);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\t// Ensure that the new folder exists on disk.", "+\t\tif (createOnDisk(srcFolder)) {", "+\t\t\t// Add it to the classpath.", "+\t\t\tif (addToClasspath(srcFolder)) {", "+\t\t\t\t// Only if we get this far do we actually set _generatedSourceFolder.", "+\t\t\t\tsynchronized ( this ) {", "+\t\t\t\t\t_generatedSourceFolder = srcFolder;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e14853a6af66c504db0ed1ce040ba39e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void createGeneratedSourceFolder()", "signatureAfterChange": " \tpublic void ensureFolderExists()", "diff": ["-\tpublic void createGeneratedSourceFolder(){", "-\t\tIFolder srcFolder = getFolder();", "-\t\t// This most likely means the preference change event hasn't occured yet", "-\t\t// and we don't know about the name of the generated source directory.", "-\t\tif( srcFolder == null )", "+\tpublic void ensureFolderExists(){", "+\t\t// If APT is disabled, do nothing.", "+\t\tif (!AptConfig.isEnabled(_aptProject.getJavaProject())) {", "-\t\ttry{", "-\t\t\tsrcFolder.refreshLocal( IResource.DEPTH_INFINITE, null );", "-\t\t\tif (!srcFolder.exists()) {", "-\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\tAptPlugin.trace(\"creating \" + srcFolder.getProjectRelativePath()); //$NON-NLS-1$", "-\t\t\t\t\t", "-\t\t\t\tFileSystemUtil.makeDerivedParentFolders(srcFolder);", "+\t\t}", "+\t\t", "+\t\t// In principle we could bail out here, if (_generatedSourceFolder != null).", "+\t\t// However, this method is an opportunity to detect and fix problems such ", "+\t\t// as the folder getting deleted without generatedSourceFolderDeleted() ", "+\t\t// getting called (e.g., without user having done a refresh).", "+\t\tIFolder srcFolder = getFolder();", "+\t\tif (srcFolder == null) {", "+\t\t\tIStatus status = AptPlugin.createStatus(null, \"Could not create generated source folder (\" + //$NON-NLS-1$", "+\t\t\t\t\tAptConfig.getGenSrcDir(_aptProject.getJavaProject()) + \")\"); //$NON-NLS-1$", "+\t\t\tAptPlugin.log(status);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (createOnDisk(srcFolder)) {", "+\t\t\tif (isOnClasspath(srcFolder)) {", "+\t\t\t\tsynchronized (this) {", "+\t\t\t\t\t// Only set _generatedSourceFolder if folder is on disk and on classpath.", "+\t\t\t\t\t_generatedSourceFolder = srcFolder;", "+\t\t\t\t}", "-\t\tcatch(CoreException ce){", "-\t\t\tAptPlugin.log(ce, \"Failure during refreshLocal on \" + srcFolder.getProjectRelativePath()); //$NON-NLS-1$", "-\t\t}", "-\t\tsynchronized (this) {", "-\t\t\t_generatedSourceFolder = srcFolder;", "-\t\t}"]}], "num": 52616}
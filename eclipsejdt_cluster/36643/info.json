{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b61650176fc5dd06afe046cbd2878c80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9721c6463cffb227bf136f8913103ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel targetLabel, int gotoLocation)", "signatureAfterChange": " public boolean hasFramePositions()", "diff": ["-}", "-public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel targetLabel, int gotoLocation) {", "-    if (targetLabel.delegate != null) return false; // already inlined", "-    int chaining = L_UNKNOWN;", "-", "-    boolean removeFrame = true;", "-    for (int i = this.countLabels - 1; i >= 0; i--) {", "-        BranchLabel currentLabel = labels[i];", "-        if (currentLabel.position != gotoLocation) break;", "-        if (currentLabel == targetLabel) {", "-            chaining |= L_CANNOT_OPTIMIZE;", "-            continue;", "-        }", "-        if (currentLabel.isStandardLabel()) {", "-            if (currentLabel.delegate != null) continue;", "-            chaining |= L_OPTIMIZABLE;", "-            if (currentLabel.forwardReferenceCount() == 0 && ((currentLabel.tagBits & BranchLabel.USED) != 0)) {", "-                removeFrame = false;", "-            }", "-            continue;", "-        }", "-        // case label", "-        removeFrame = false;", "-        chaining |= L_CANNOT_OPTIMIZE;", "-    }", "-    if ((chaining & L_OPTIMIZABLE) != 0) {", "-        for (int i = this.countLabels - 1; i >= 0; i--) {", "-            BranchLabel currentLabel = labels[i];", "-            if (currentLabel.position != gotoLocation) break;", "-            if (currentLabel == targetLabel) continue;", "-            if (currentLabel.isStandardLabel()) {", "-                if (currentLabel.delegate != null) continue;", "-                targetLabel.becomeDelegateFor(currentLabel);", "-                // we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame", "-                if (removeFrame) {", "-                    currentLabel.tagBits &= ~BranchLabel.USED;", "-                    this.removeStackFrameFor(gotoLocation);", "-                }", "-            }", "-        }", "-    }", "-    return (chaining & (L_OPTIMIZABLE|L_CANNOT_OPTIMIZE)) == L_OPTIMIZABLE; // check was some standards, and no case/recursive", "-}", "+}", "+public boolean hasFramePositions() {", "+\treturn this.framePositions.size() != 0;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec508fa2068aa2730021614abcc37f42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "b722a746f46217b7440d73c5e0dfc83844a8012d", "commitAfterChange": "9cc5bde0cff147bf990090541b8a0cede8969f68", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": " public void inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation)", "signatureAfterChange": " public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation)", "diff": ["- */", "-public void inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation) {", "-\t", "-/*", "- Code required to optimized unreachable gotos.", "-\tpublic boolean isBranchTarget(int location) {", "-\t\tLabel[] labels = codeStream.labels;", "-\t\tfor (int i = codeStream.countLabels - 1; i >= 0; i--){", "-\t\t\tLabel label = labels[i];", "-\t\t\tif ((label.position == location) && label.isStandardLabel()){", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}", "- */", "-\tboolean hasStandardLabel = false;", "+public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation) {", "+\tint chaining = L_UNKNOWN;", "+", "-\t\tif (currentLabel.position == gotoLocation) {", "-\t\t\tif (currentLabel.isStandardLabel()) {", "-\t\t\t\thasStandardLabel = true;", "-\t\t\t\tif (currentLabel.forwardReferenceCount == 0 && ((currentLabel.tagBits & BranchLabel.USED) != 0)) {", "-\t\t\t\t\tremoveFrame = false;", "-\t\t\t\t}", "-\t\t\t} else if (currentLabel.isCaseLabel()) {", "+\t\tif (currentLabel.position != gotoLocation) break;", "+\t\tif (currentLabel == label) {", "+\t\t\tchaining |= L_CANNOT_OPTIMIZE;", "+\t\t\tcontinue;", "+\t\t}", "+\t\tif (currentLabel.isStandardLabel()) {", "+\t\t\tif (label.delegate != null) continue;\t\t\t", "+\t\t\tchaining |= L_OPTIMIZABLE;", "+\t\t\tif (currentLabel.forwardReferenceCount() == 0 && ((currentLabel.tagBits & BranchLabel.USED) != 0)) {", "-\t\t} else {", "-\t\t\tbreak; // same target labels should be contiguous", "+\t\t\tcontinue;", "+\t\t// case label", "+\t\tremoveFrame = false;", "+\t\tchaining |= L_CANNOT_OPTIMIZE;", "-\tif (hasStandardLabel) {", "+\tif ((chaining & L_OPTIMIZABLE) != 0) {", "-\t\t\tif (currentLabel.position == gotoLocation) {", "-\t\t\t\tif (currentLabel.isStandardLabel()){", "-\t\t\t\t\tlabel.appendForwardReferencesFrom(currentLabel);", "-\t\t\t\t\t// we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame", "-\t\t\t\t\tif (removeFrame) {", "-\t\t\t\t\t\tcurrentLabel.tagBits &= ~BranchLabel.USED;", "-\t\t\t\t\t\tthis.removeStackFrameFor(gotoLocation);", "-\t\t\t\t\t}", "+\t\t\tif (currentLabel.position != gotoLocation) break;", "+\t\t\tif (currentLabel == label) continue;", "+\t\t\tif (currentLabel.isStandardLabel()) {", "+\t\t\t\tif (label.delegate != null) continue;", "+\t\t\t\tlabel.becomeDelegateFor(currentLabel);", "+\t\t\t\t// we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame", "+\t\t\t\tif (removeFrame) {", "+\t\t\t\t\tcurrentLabel.tagBits &= ~BranchLabel.USED;", "+\t\t\t\t\tthis.removeStackFrameFor(gotoLocation);", "-\t\t\t\t/*", "-\t\t\t\t Code required to optimized unreachable gotos.", "-\t\t\t\t\tlabel.position = POS_NOT_SET;", "-\t\t\t\t*/", "-\t\t\t} else {", "-\t\t\t\tbreak; // same target labels should be contiguous", "+\treturn (chaining & (L_OPTIMIZABLE|L_CANNOT_OPTIMIZE)) == L_OPTIMIZABLE; // check was some standards, and no case/recursive\t"]}], "num": 36643}
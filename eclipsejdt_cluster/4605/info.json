{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c5c16178baea790924dade488f9e94b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a299c7b800f5277afe59cb68cc75b77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IFile generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIProject project, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "signatureAfterChange": " \tpublic synchronized FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIJavaProject javaProject, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "diff": ["-\tpublic IFile generateFileDuringBuild(", "+\tpublic synchronized FileGenerationResult generateFileDuringBuild(", "-\t\t\tIProject project,", "+\t\t\tIJavaProject javaProject,", "+\t\t\tIProject project = javaProject.getProject();", "+\t\t\t// create folder for generated source files", "+\t\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "+\t\t\tif (!folder.exists())", "+\t\t\t\tfolder.create(true, false, null);", "-\t\t// create folder for generated source files", "-\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\tif (!folder.exists())", "-\t\t\tfolder.create(true, false, null);", "-", "-\t\t// split the type name into its parts", "-\t\tString[] parts = typeName.split( \"\\\\.\");", "-", "-\t\t//  create folders for the package parts", "-\t\tint i = 0;", "-\t\tfor ( ;i < parts.length - 1; i++ )", "-\t\t{", "-\t\t\tfolder = folder.getFolder( parts[i] );", "-\t\t\tif ( !folder.exists() )", "-\t\t\t\tfolder.create( true, false, null );", "-\t\t}", "-\t\t", "-\t\tString fileName = parts[i] + \".java\";\t\t", "-\t\tIFile file = folder.getFile( fileName );", "-", "-\t\tbyte[] bytes;", "-\t\tif ( charsetName == null || charsetName == \"\" )", "-\t\t\tbytes = contents.getBytes();", "-\t\telse", "-\t\t\tbytes = contents.getBytes( charsetName );", "-\t\tInputStream is = new ByteArrayInputStream( bytes );", "-\t\t", "-\t\tif ( !file.exists() )", "-\t\t{", "-\t\t\tfile.create( is, true, progressMonitor );", "-\t\t}", "-\t\telse", "-\t\t{", "-\t\t\tmakeReadOnly( file, false );", "-\t\t\tfile.setContents( is, true, true, progressMonitor );", "-\t\t}", "-\t\t", "-\t\tfile.setDerived( true );", "-\t\t", "-\t\tmakeReadOnly( file, true );", "-\t\t", "-\t\tupdateFileMaps( typeName, parentFile, file );", "-\t\treturn file;", "+\t\t\t//", "+\t\t\t// make sure __generated_src dir is on the cp if not already", "+\t\t\t//", "+\t\t\tupdateProjectClasspath( (JavaProject)javaProject, folder, progressMonitor );", "+\t\t\t", "+\t\t\t// split the type name into its parts", "+\t\t\tString[] parts = typeName.split( \"\\\\.\");", "+\t", "+\t\t\t//  create folders for the package parts", "+\t\t\tint i = 0;", "+\t\t\tfor ( ;i < parts.length - 1; i++ )", "+\t\t\t{", "+\t\t\t\tfolder = folder.getFolder( parts[i] );", "+\t\t\t\tif ( !folder.exists() )", "+\t\t\t\t\tfolder.create( true, false, null );", "+\t\t\t}", "+\t\t\t", "+\t\t\tString fileName = parts[i] + \".java\";\t\t", "+\t\t\tIFile file = folder.getFile( fileName );", "+\t", "+\t\t\tbyte[] bytes;", "+\t\t\tif ( charsetName == null || charsetName == \"\" )", "+\t\t\t\tbytes = contents.getBytes();", "+\t\t\telse", "+\t\t\t\tbytes = contents.getBytes( charsetName );", "+\t\t\tInputStream is = new ByteArrayInputStream( bytes );", "+\t\t\t", "+\t\t\tboolean contentsDiffer = true;", "+\t\t\t", "+\t\t\tif ( !file.exists() )", "+\t\t\t{", "+\t\t\t\tfile.create( is, true, progressMonitor );", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\t// Check if the content has changed", "+\t\t\t\tInputStream oldData = null;", "+\t\t\t\ttry {", "+\t\t\t\t\toldData = new BufferedInputStream(file.getContents());", "+\t\t\t\t\tcontentsDiffer = !compareStreams(oldData, is);", "+\t\t\t\t}", "+\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\t// Do nothing. Assume the new content is different", "+\t\t\t\t}", "+\t\t\t\tfinally {", "+\t\t\t\t\tis.reset();", "+\t\t\t\t\tif (oldData != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\toldData.close();", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t\tcatch (IOException ioe) ", "+\t\t\t\t\t\t{}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (contentsDiffer) {", "+\t\t\t\t\tmakeReadOnly( file, false );", "+\t\t\t\t\tfile.setContents( is, true, true, progressMonitor );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tfile.setDerived( true );", "+\t\t\t", "+\t\t\tmakeReadOnly( file, true );", "+\t\t\t", "+\t\t\tupdateFileMaps( typeName, parentFile, file );", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88f1b20b89b8bd2d1fc1036bf1df4e7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "939026bc82336aff64b71f4dbbdc38f50f6da545", "commitAfterChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t\tpublic void test025()", "signatureAfterChange": " \t\tpublic void test025()", "diff": ["+\t\t\tString path = ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString();", "+\t\t\tString libPath = null;", "+\t\t\tif (path.endsWith(File.separator)) {", "+\t\t\t\tlibPath = path + \"lib.jar\";", "+\t\t\t} else {", "+\t\t\t\tlibPath = path + File.separator + \"lib.jar\";", "+\t\t\t}", "+\t\t\tboolean jarCreated = false;", "+\t\t\ttry {", "+\t\t\t\tUtil.createJar(new String[] {", "+\t\t\t\t\t\t\"my/pkg/Zork.java\",", "+\t\t\t\t\t\t\"package my.pkg;\\n\" + ", "+\t\t\t\t\t\t\"public class Zork {\\n\" + ", "+\t\t\t\t\t\t\"}\",", "+\t\t\t\t\t},", "+\t\t\t\t\tlibPath,", "+\t\t\t\t\tJavaCore.VERSION_1_4);", "+\t\t\t\tjarCreated = true;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "-\t\t\t\t\t\t\"  sun.net.spi.nameservice.dns.DNSNameService dummy;\\n\" + ", "+\t\t\t\t\t\t\"  my.pkg.Zork dummy;\\n\" + ", "-\t\t\t\t+ \" -extdirs \\\"\" + getExtDirectory() + File.pathSeparator + OUTPUT_DIR +  File.separator + \"src1\\\"\" ", "+\t\t\t\t+ \" -extdirs \\\"\" + path + File.pathSeparator + OUTPUT_DIR +  File.separator + \"src1\\\"\" ", "-\t\t\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/1]\\n\" + ", "-\t\t\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\t\t\"[reading    java/lang/Object.class]\\n\" + ", "-\t\t\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "-\t\t\t\t\"[writing    Y.class - #1]\\n\" + ", "-\t\t\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "-\t\t\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\t\t\"[reading    sun/net/spi/nameservice/dns/DNSNameService.class]\\n\" + ", "-\t\t\t\t\"[writing    X.class - #2]\\n\" + ", "-\t\t\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\t\t\"[2 units compiled]\\n\" + ", "-\t\t\t\t\"[2 .class files generated]\\n\",", "+\t\t        \"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/1]\\n\" + ", "+\t\t        \"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t        \"[reading    java/lang/Object.class]\\n\" + ", "+\t\t        \"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "+\t\t        \"[writing    Y.class - #1]\\n\" + ", "+\t\t        \"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "+\t\t        \"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t        \"[reading    my/pkg/Zork.class]\\n\" + ", "+\t\t        \"[writing    X.class - #2]\\n\" + ", "+\t\t        \"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t        \"[2 units compiled]\\n\" + ", "+\t\t        \"[2 .class files generated]\\n\",", "+\t\t\tif (jarCreated) {", "+\t\t\t\tnew File(libPath).delete();", "+\t\t\t}"]}], "num": 4605}
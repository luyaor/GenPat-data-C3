{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8205b389db8c8b39c60e369d08a608f6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "093b3318ed1364e9f86c94bd89bd353f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug51226() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51226() throws JavaModelException", "diff": ["-\t\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 1, unit.getCommentList().size());", "+\t\t\tassumeEquals(prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\t\tassumeEquals(prefix+\"Wrong number of comments\", 1, unit.getCommentList().size());", "-\t\t\tassumeTrue(this.prefix+\"Comment should be a Javadoc one\", comment.isDocComment());", "-\t\t\tJavadoc docComment = (Javadoc) comment;", "-\t\t\tassumeEquals(this.prefix+\"Wrong number of tags\", 1, docComment.tags().size());", "-\t\t\tTagElement tagElement = (TagElement) docComment.tags().get(0);", "-\t\t\tassumeNull(this.prefix+\"Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "-\t\t\tassumeEquals(this.prefix+\"Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "-\t\t\tASTNode fragment = (ASTNode) tagElement.fragments().get(0);", "-\t\t\tassumeEquals(this.prefix+\"Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "-\t\t\tTextElement textElement = (TextElement) fragment;", "-\t\t\tassumeEquals(this.prefix+\"Invalid content for text element \", \"Test\", textElement.getText());", "-\t\t\tif (debug) System.out.println(docComment+\"\\nsuccessfully verified.\");", "+\t\t\tassumeTrue(prefix+\"Comment should be a Javadoc one\", comment.isDocComment());", "+\t\t\tif (docCommentSupport.equals(JavaCore.ENABLED)) {", "+\t\t\t\tJavadoc docComment = (Javadoc) comment;", "+\t\t\t\tassumeEquals(prefix+\"Wrong number of tags\", 1, docComment.tags().size());", "+\t\t\t\tTagElement tagElement = (TagElement) docComment.tags().get(0);", "+\t\t\t\tassumeNull(prefix+\"Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "+\t\t\t\tassumeEquals(prefix+\"Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "+\t\t\t\tASTNode fragment = (ASTNode) tagElement.fragments().get(0);", "+\t\t\t\tassumeEquals(prefix+\"Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "+\t\t\t\tTextElement textElement = (TextElement) fragment;", "+\t\t\t\tassumeEquals(prefix+\"Invalid content for text element \", \"Test\", textElement.getText());", "+\t\t\t\tif (debug) System.out.println(docComment+\"\\nsuccessfully verified.\");", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5191b546f70390f4a0dbad0cdd3e405e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprivate void verifyNameBindings(Name name)", "signatureAfterChange": " \tprivate void verifyNameBindings(Name name)", "diff": ["-\t\t\t\tassumeNull(this.prefix+name+\" binding should be null!\", binding);", "+\t\t\t\tassumeNull(prefix+name+\" binding should be null!\", binding);", "-\t\t\t\tassumeNotNull(this.prefix+name+\" binding was not found!\", binding);", "+\t\t\t\tassumeNotNull(prefix+name+\" binding was not found!\", binding);", "-\t\t\t\t\tassumeNull(this.prefix+simpleName+\" binding should be null!\", binding);", "+\t\t\t\t\tassumeNull(prefix+simpleName+\" binding should be null!\", binding);", "-\t\t\t\t\tassumeNotNull(this.prefix+simpleName+\" binding was not found!\", binding);", "+\t\t\t\t\tassumeNotNull(prefix+simpleName+\" binding was not found!\", binding);", "-\t\t\t\tif (index > 0 && this.packageBinding) {", "-\t\t\t\t\tassumeEquals(this.prefix+\"Wrong binding type!\", IBinding.PACKAGE, binding.getKind());", "+\t\t\t\tif (index > 0 && packageBinding) {", "+\t\t\t\t\tassumeEquals(prefix+\"Wrong binding type!\", IBinding.PACKAGE, binding.getKind());", "-\t\t\t\t\tassumeNull(this.prefix+name+\" binding should be null!\", binding);", "+\t\t\t\t\tassumeNull(prefix+name+\" binding should be null!\", binding);", "-\t\t\t\t\tassumeNotNull(this.prefix+name+\" binding was not found!\", binding);", "+\t\t\t\t\tassumeNotNull(prefix+name+\" binding was not found!\", binding);", "-\t\t\t\tif (this.packageBinding) {", "-\t\t\t\t\tassumeEquals(this.prefix+\"Wrong binding type!\", IBinding.PACKAGE, binding.getKind());", "+\t\t\t\tif (packageBinding) {", "+\t\t\t\t\tassumeEquals(prefix+\"Wrong binding type!\", IBinding.PACKAGE, binding.getKind());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9186d21a5601566d258ee1702a6046e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\t\t\t\t\t\tassumeTrue(this.prefix+\"Reference '\"+previousFragment+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassumeTrue(prefix+\"Reference '\"+previousFragment+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t\t\tassumeTrue(this.prefix+\"Unknown reference '\"+previousFragment+\"' should NOT be bound!\", !text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassumeTrue(prefix+\"Unknown reference '\"+previousFragment+\"' should NOT be bound!\", !text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+name+\" binding was not found!\", name.resolveBinding());", "+\t\t\t\t\t\tassumeNotNull(prefix+\"\"+name+\" binding was not found!\", name.resolveBinding());", "-\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "-\t\t\t\t\t\t\t\t\tSystem.out.println(this.prefix+\"Binding for selector of  '\"+methodRef+\"' is null.\");", "+\t\t\t\t\t\t\t\t\tSystem.out.println(prefix+\"Binding for selector of  '\"+methodRef+\"' is null.\");", "-\t\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "-\t\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t\t\tassumeNull(prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "-\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "-\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t\tassumeNull(prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "-\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "+\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "-\t\tassumeTrue(this.prefix+\"Reference '\"+(previousFragment==null?tagElement:previousFragment)+\"' should be bound!\", (!resolvedBinding || previousBinding != null));", "+\t\tassumeTrue(prefix+\"Reference '\"+(previousFragment==null?tagElement:previousFragment)+\"' should be bound!\", (!resolvedBinding || previousBinding != null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afce124b34d7baa9273ca21f9ae284d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "diff": ["-\t\tboolean stop = this.stopOnFailure;", "-//\t\tthis.stopOnFailure = false;", "+\t\tboolean stop = stopOnFailure;", "+//\t\tstopOnFailure = false;", "-\t\tassumeTrue(this.prefix+\"Misplaced javadoc start at <\"+start+\">: \"+docComment, source[start++] == '/' && source[start++] == '*' && source[start++] == '*');", "+\t\tassumeTrue(prefix+\"Misplaced javadoc start at <\"+start+\">: \"+docComment, source[start++] == '/' && source[start++] == '*' && source[start++] == '*');", "-\t\t\tassumeEquals(this.prefix+\"Wrong start position <\"+teStart+\"> for tag element: \"+tagElement, tagStart, teStart);", "+\t\t\tassumeEquals(prefix+\"Wrong start position <\"+teStart+\"> for tag element: \"+tagElement, tagStart, teStart);", "-\t\tassumeTrue(this.prefix+\"Misplaced javadoc end at <\"+tagStart+'>', source[tagStart-1] == '*' && source[tagStart] == '/');", "-\t\tassumeEquals(this.prefix+\"Wrong javadoc length at <\"+end+\">: \", tagStart, end);", "-\t\tthis.stopOnFailure = stop;", "-\t\tassertTrue(!stop || this.failures.size()==0);", "+\t\tassumeTrue(prefix+\"Misplaced javadoc end at <\"+tagStart+'>', source[tagStart-1] == '*' && source[tagStart] == '/');", "+\t\tassumeEquals(prefix+\"Wrong javadoc length at <\"+end+\">: \", tagStart, end);", "+\t\tstopOnFailure = stop;", "+\t\tassertTrue(!stop || failures.size()==0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc36ed303524d8f91fc5f652080deaef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "988b834a35e1571af05adddd8db1ce5aaa1f0ff0", "commitAfterChange": "c90773ded969a955dbf869e7d3cd599898423a64", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingExpressionsTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingInsertBoundTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingMethodDeclTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingMoveCodeTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingStatementsTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingTrackingTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingJavadocTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingTypeDeclTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingGroupNodeTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingRevertTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(SourceModifierTest.class));", "+\t\tsuite.addTest(ASTRewritingExpressionsTest.suite());", "+\t\tsuite.addTest(ASTRewritingInsertBoundTest.suite());", "+\t\tsuite.addTest(ASTRewritingMethodDeclTest.suite());", "+\t\tsuite.addTest(ASTRewritingMoveCodeTest.suite());", "+\t\tsuite.addTest(ASTRewritingStatementsTest.suite());", "+\t\tsuite.addTest(ASTRewritingTrackingTest.suite());", "+\t\tsuite.addTest(ASTRewritingJavadocTest.suite());", "+\t\tsuite.addTest(ASTRewritingTypeDeclTest.suite());", "+\t\tsuite.addTest(ASTRewritingGroupNodeTest.suite());", "+\t\tsuite.addTest(ASTRewritingRevertTest.suite());", "+\t\tsuite.addTest(LineCommentOffsetsTest.suite());", "+\t\tsuite.addTest(ASTRewritingWithStatementsRecoveryTest.suite());", "+\t\tsuite.addTest(ASTRewritePropertyTest.suite());", "+\t\tsuite.addTest(ASTRewritingPackageDeclTest.suite());", "+\t\t", "+\t\tsuite.addTest(SourceModifierTest.suite());", "-\t\tsuite.addTest(addMethodsToSuite(LineCommentOffsetsTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingWithStatementsRecoveryTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritePropertyTest.class));", "-\t\tsuite.addTest(addMethodsToSuite(ASTRewritingPackageDeclTest.class));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfe0dc3be3b9fedd2d0ab96697146c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "c2258f3a34b02ad7356115c6022b2790f990bcd4", "commitAfterChange": "b114726e6672732b572036987107a1d4de90980d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["-\t\tif (this.arguments != null) {", "-\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "-\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t}", "-\t\t}", "+\t\tgenerateArguments(binding, arguments, currentScope, codeStream);", "-\tif (valueRequired) {", "+\tif (valueRequired){", "-\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tif (this.valueCast != null) ", "+\t\t\tcodeStream.checkcast(this.valueCast);", "+\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\tswitch (this.codegenBinding.returnType.id) {", "+\t\tswitch(binding.returnType.id){", "-\t\t\tdefault :", "+\t\t\tdefault:", "-\t// TODO (philippe) need to revise codegen to include genericCast", "-\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tcodeStream.recordPositionsFrom(pc, (int)(this.nameSourcePosition >>> 32)); // highlight selector"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ac68e3f0cc9485da07e71fffd1a68a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\tthis.problemReporter(currentMethod).staticAndInstanceConflict(currentMethod, inheritedMethod);", "+\t\t\tproblemReporter(currentMethod).staticAndInstanceConflict(currentMethod, inheritedMethod);", "-\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+\t\t\tproblemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-\t\t\t\tthis.checkExceptions(currentMethod, inheritedMethod);", "+\t\t\t\tcheckExceptions(currentMethod, inheritedMethod);", "-\t\t\t\tthis.problemReporter(currentMethod).finalMethodCannotBeOverridden(currentMethod, inheritedMethod);", "-\t\t\tif (!this.isAsVisible(currentMethod, inheritedMethod))", "-\t\t\t\tthis.problemReporter(currentMethod).visibilityConflict(currentMethod, inheritedMethod);", "+\t\t\t\tproblemReporter(currentMethod).finalMethodCannotBeOverridden(currentMethod, inheritedMethod);", "+\t\t\tif (!isAsVisible(currentMethod, inheritedMethod))", "+\t\t\t\tproblemReporter(currentMethod).visibilityConflict(currentMethod, inheritedMethod);", "-\t\t\t\t\tthis.problemReporter(currentMethod).overridesDeprecatedMethod(currentMethod, inheritedMethod);", "+\t\t\t\t\tproblemReporter(currentMethod).overridesDeprecatedMethod(currentMethod, inheritedMethod);", "+\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod);"]}], "num": 63421}
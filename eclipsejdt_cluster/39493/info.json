{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b6a63e9e1359d07dcb2753fcaac031c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f0dbfac56c9966e306c81455098ad84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "diff": ["+ */", "+public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose) {", "+\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7 && location instanceof ThrowStatement) {", "+\t\tExpression throwExpression = ((ThrowStatement)location).exception;", "+\t\tLocalVariableBinding throwArgBinding = throwExpression.localVariableBinding();", "+\t\tif (throwExpression instanceof SingleNameReference // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350361 ", "+\t\t\t\t&& throwArgBinding instanceof CatchParameterBinding && throwArgBinding.isEffectivelyFinal()) {", "+\t\t\tCatchParameterBinding parameter = (CatchParameterBinding) throwArgBinding;", "+\t\t\tcheckExceptionHandlers(parameter.getPreciseTypes(), location, flowInfo, scope);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t\t\t\t\t\t\t\traisedException, // precise exception that will be caught", "+\t\t\t\t\t\t\t\tcaughtException,", "-\tscope.problemReporter().unhandledException(raisedException, location);", "+\tif (isExceptionOnAutoClose) {", "+\t\tscope.problemReporter().unhandledExceptionFromAutoClose(raisedException, location);", "+\t} else {", "+\t\tscope.problemReporter().unhandledException(raisedException, location);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eceb999c5f11de61bb214c6f1f70129d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static MethodBinding checkForContraditions( \t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope)", "signatureAfterChange": " \tpublic static MethodBinding checkForContradictions( \t\t\tfinal MethodBinding method, final Object location, final Scope scope)", "diff": ["-\tpublic static MethodBinding checkForContraditions(", "-\t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope) {", "+\tpublic static MethodBinding checkForContradictions(", "+\t\t\tfinal MethodBinding method, final Object location, final Scope scope) {", "+\t\tint start = 0, end = 0;", "+\t\tif (location instanceof InvocationSite) {", "+\t\t\tstart = ((InvocationSite) location).sourceStart();", "+\t\t\tend = ((InvocationSite) location).sourceEnd();", "+\t\t} else if (location instanceof ASTNode) {", "+\t\t\tstart = ((ASTNode) location).sourceStart;", "+\t\t\tend = ((ASTNode) location).sourceEnd;", "+\t\t}", "-\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);", "+\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, start, end, location instanceof FunctionalExpression);", "-\t\tif (invocationSite instanceof Invocation)", "-\t\t\targuments = ((Invocation)invocationSite).arguments();", "+\t\tif (location instanceof Invocation)", "+\t\t\targuments = ((Invocation)location).arguments();", "-\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);", "+\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, start, end, location instanceof FunctionalExpression);"]}], "num": 39493}
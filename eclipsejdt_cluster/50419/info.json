{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8d2887c360b530cd3a9ec9430c54433", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27b58f081360adbba2c6eea456d08294", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void test013()", "signatureAfterChange": "  \tpublic void test013()", "diff": ["-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type X5 has the same erasure as foo(Class<T>) of type A but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type X5 has the same erasure as foo(Class<T>) of type A but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "424b3d5b67618e14a6425d3a14155227", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6ed1cf547d485640f7cc1b111de3d2b3735f006a", "commitAfterChange": "166c95a7f5d14add7c42133646d3ce6662785db7", "methodNumberBeforeChange": 407, "methodNumberAfterChange": 407, "signatureBeforeChange": " public void testBug317719h() throws Exception", "signatureAfterChange": " public void testBug317719h() throws Exception", "diff": ["-\t\t\t\"\tpublic class Test<Key, Value> extends LinkedHashMap<Key, Collection<Value>> {\\n\" + ", "+\t\t\t\"\tpublic class Test<Key, Value> extends HashMap<Key, Collection<Value>> {\\n\" + ", "-\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type LinkedHashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type HashMap<K,V> but does not override it\\n\" + ", "-\t\t\t\t\"\tpublic class Test<Key, Value> extends LinkedHashMap<Key, Collection<Value>> {\\n\" + ", "+\t\t\t\t\"\tpublic class Test<Key, Value> extends HashMap<Key, Collection<Value>> {\\n\" + ", "-\t\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type LinkedHashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type HashMap<K,V> but does not override it\\n\" + ", "-\t\t\t\"import java.util.LinkedHashMap;\\n\" +", "-\t\t\t\"public class Test<Key, Value> extends LinkedHashMap<Key, Collection<Value>> {\\n\" +", "+\t\t\t\"import java.util.HashMap;\\n\" +", "+\t\t\t\"public class Test<Key, Value> extends HashMap<Key, Collection<Value>> {\\n\" +"]}], "num": 50419}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3290dd88ecd2155daedf6e89056ebbac", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5074d67bf77f94d55b9147d053a9431c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "3ec169b44d3736817b7c4ce9bf1791fcda57b692", "commitAfterChange": "4a83e27deea774790864c829cd5109d435b50edd", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " public boolean isProvablyDistinctFrom(TypeBinding otherType)", "signatureAfterChange": " public boolean isProvablyDistinctFrom(TypeBinding otherType)", "diff": ["-\tif (this.isTypeVariable()) return false;", "-\tif (this.isWildcard()) return false;", "-\tif (otherType.isTypeVariable()) return false;", "-\tif (otherType.isWildcard()) return false;", "-\tif (this.isParameterizedType()) {", "-\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) this;", "-\t\tif (parameterizedType.type.isProvablyDistinctFrom(otherType.erasure())) return true;", "-\t\tif (otherType.isGenericType()) return false;", "-\t\tif (otherType.isRawType()) return false;", "-\t\tif (otherType.isParameterizedType()) {", "-\t\t\tTypeBinding[] arguments = parameterizedType.arguments;", "-\t\t\tif (arguments == null) return false;", "-\t\t\tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherType;", "-\t\t\tTypeBinding[] otherArguments = otherParameterizedType. arguments;", "-\t\t\tif (otherArguments == null) return false;", "-\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "-\t\t\t\tif (arguments[i].isProvablyDistinctFrom(otherArguments[i])) return true;", "-\t\t\t}", "+\tswitch (otherType.bindingType()) {", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\tcase Binding.WILDCARD_TYPE :", "-\t\t}", "-\t} else if (this.isRawType()) {", "-\t\treturn this.erasure().isProvablyDistinctFrom(otherType.erasure());", "-\t} else if (this.isGenericType()) {", "-\t\treturn this != otherType.erasure();", "+\t}", "+\tswitch(bindingType()) {", "+\t\t", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn false;", "+\t\t\t", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) this;", "+\t\t\tif (parameterizedType.type.isProvablyDistinctFrom(otherType.erasure())) return true;", "+\t\t\tswitch (otherType.bindingType()) {", "+\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\treturn false;", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tTypeBinding[] arguments = parameterizedType.arguments;", "+\t\t\t\t\tif (arguments == null) return false;", "+\t\t\t\t\tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherType;", "+\t\t\t\t\tTypeBinding[] otherArguments = otherParameterizedType. arguments;", "+\t\t\t\t\tif (otherArguments == null) return false;", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "+\t\t\t\t\t\tif (arguments[i].isProvablyDistinctFrom(otherArguments[i])) return true;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t", "+\t\t\t}", "+\t\t\tbreak;", "+", "+\t\tcase Binding.RAW_TYPE :", "+\t\t\treturn this.erasure().isProvablyDistinctFrom(otherType.erasure());", "+\t\t\t", "+\t\tcase Binding.GENERIC_TYPE :", "+\t\t\treturn this != otherType.erasure();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99d971f68d54f9b386ed9d90239562a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-    if (otherType == null) return false;", "-    switch(otherType.kind()) {", "+\tif (otherType == null) return false;", "+\tswitch(otherType.kind()) {", "-    \tcase Binding.WILDCARD_TYPE :", "+\t\tcase Binding.WILDCARD_TYPE :", "-    \t", "-    \tcase Binding.PARAMETERIZED_TYPE :", "-\t        if ((otherType.tagBits & HasDirectWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "-\t        \treturn false; // should have been identical", "-\t        ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-\t        if (this != otherParamType.type) ", "-\t            return false;", "-            if (!isStatic()) { // static member types do not compare their enclosing", "-\t\t        ReferenceBinding enclosing = enclosingType();", "-\t\t        if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-\t\t            return false;", "-            }", "-\t        int length = this.typeVariables == null ? 0 : this.typeVariables.length;", "-\t        TypeBinding[] otherArguments = otherParamType.arguments;", "-\t        int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-\t        if (otherLength != length) ", "-\t            return false;", "-\t        for (int i = 0; i < length; i++) {", "-\t        \tif (!this.typeVariables[i].isTypeArgumentContainedBy(otherArguments[i]))", "+", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\tif ((otherType.tagBits & HasDirectWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+\t\t\t\treturn false; // should have been identical", "+\t\t\tParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t\t\tif (this != otherParamType.type) ", "+\t\t\t\treturn false;", "+\t\t\tif (!isStatic()) { // static member types do not compare their enclosing", "+\t\t\t\tReferenceBinding enclosing = enclosingType();", "+\t\t\t\tif (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-\t        }", "-\t        return true;", "-    \t", "-    \tcase Binding.RAW_TYPE :", "+\t\t\t}", "+\t\t\tint length = this.typeVariables == null ? 0 : this.typeVariables.length;", "+\t\t\tTypeBinding[] otherArguments = otherParamType.arguments;", "+\t\t\tint otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t\tif (otherLength != length) ", "+\t\t\t\treturn false;", "+\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\tif (!this.typeVariables[i].isTypeArgumentContainedBy(otherArguments[i]))", "+\t\t\t\t\treturn false;", "+\t\t\treturn true;", "+", "+\t\tcase Binding.RAW_TYPE :", "-    }", "+\t}"]}], "num": 16951}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56ce55fe37eeec325afa1871850c87d9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9de21dc7a9b942cd0c5e4d954712c438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The static method foo() from the type X should be accessed in a static way\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\tX.<B>foo();\\n\" + ", "+\t\t\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "-\t\t\t\"\t                              ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "-\t\t\t\"\t                              ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tX.<B>foo();\\n\" + ", "-\t\t\t\"\t     ^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tnew X().<B>foo();\\n\" + ", "-\t\t\t\"\t           ^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc64d1f5cb00afad0071e13f8956bee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\t\t public static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" +", "-\t\t\t\t\"\t\t public static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "-\t\t\t\t\"\t\t public static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\t \tX.<A>foo();\\n\" +", "-\t\t\t\t\"\t\t \tX.<B>foo();\\n\" +", "-\t\t\t\t\"\t\t \tnew X().<B>foo();\\n\" +", "-\t\t\t\t\"\t\t }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class A {}\\n\" +", "-\t\t\t\t\"class B {}\\n\"", "-\t\t\t},", "-\t\t\t\"ABB\"", "-\t\t);", "-\t}", "+\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" +", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\t\"\t\tX.<A>foo();\\n\" +", "+\t\t\t\t\"\t\tX.<B>foo();\\n\" +", "+\t\t\t\t\"\t\tnew X().<B>foo();\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"class B {}\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX.<B>foo();\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+/* javac 7", "+X.java:3: name clash: <N>foo() and <S>foo() have the same erasure", "+        public static <N extends B> N foo() { System.out.print(\"B\"); return null; }", "+                                      ^", "+  where N,S are type-variables:", "+    N extends B declared in method <N>foo()", "+    S extends A declared in method <S>foo()", "+X.java:6: method foo in class X cannot be applied to given types", "+                X.<B>foo();", "+                 ^", "+  required: no arguments", "+  found: no arguments", "+X.java:7: method foo in class X cannot be applied to given types", "+                new X().<B>foo();", "+                       ^", "+  required: no arguments", "+  found: no arguments", "+3 errors", "+ */", "+\t}"]}], "num": 50276}
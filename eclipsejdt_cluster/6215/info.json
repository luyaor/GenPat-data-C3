{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b223ecbb2ad95350f1b2d79bf6d043e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "072b5744187721e8b900b38956a93bdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "858ca1d772030ec247ced002ba048d473dc8663e", "commitAfterChange": "0ea651863b1d73c9d75d3ccd27dfe7c065a440ed", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t/* according to 16.2.10, potential initializations are to be considered in any case", "+\t\t\t */", "+\t\t\tmergedInfo.addPotentialInitializationsFrom(flowInfo.initsWhenFalse());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0d494ab4a6870cff8fa1eb1152c89f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a8ed44ab293103676897ed9136a7f2a05e2373aa", "commitAfterChange": "e65b63041c8c7cd949117994382bac725ff52855", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["-\t\tif (!method.isConstructor())", "-\t\t\treturnType = environment.getTypeFromTypeSignature(wrapper, typeVars, this);", "+\t\t// always retrieve return type (for constructors, its V for void - will be ignored)", "+\t\treturnType = environment.getTypeFromTypeSignature(wrapper, typeVars, this);", "-\t\t\t// attempt to find each superinterface if it exists in the cache (otherwise - resolve it when requested)", "+\t\t\t// attempt to find each exception if it exists in the cache (otherwise - resolve it when requested)"]}], "num": 6215}
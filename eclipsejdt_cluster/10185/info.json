{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "786c1a8d442b46abe6fdd2b791c711db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87449223cc40ea8b6c01b45c1628eee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": "  public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t}", "-\tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "-\t", "-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0)\treturn;", "-\t", "-\t\t//If inlinable field, forget the access emulation, the code gen will directly target it", "-\t\tif (constant != Constant.NotAConstant)", "-\t\t\treturn;", "-\t", "-\t\tif ((bits & Binding.FIELD) != 0) {", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\tFieldBinding codegenField = fieldBinding.original();", "-\t\t\tthis.codegenBinding = codegenField;", "-\t\t\tif (((bits & DepthMASK) != 0)", "-\t\t\t\t&& (codegenField.isPrivate() // private access", "-\t\t\t\t\t|| (codegenField.isProtected() // implicit protected access", "-\t\t\t\t\t\t\t&& codegenField.declaringClass.getPackage() != currentScope.enclosingSourceType().getPackage()))) {", "-\t\t\t\tif (syntheticAccessors == null)", "-\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "-\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = ", "-\t\t\t\t    ((SourceTypeBinding)currentScope.enclosingSourceType().", "-\t\t\t\t\t\tenclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).addSyntheticMethod(codegenField, isReadAccess);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, isReadAccess);", "-\t\t\t\treturn;", "-\t\t\t// if the binding declaring class is not visible, need special action", "-\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t// and not from Object or implicit static field access.\t", "-\t\t\tif (fieldBinding.declaringClass != this.actualReceiverType", "-\t\t\t\t\t&& !this.actualReceiverType.isArrayType()", "-\t\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !fieldBinding.isStatic())", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "+", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0)\treturn;", "+", "+\t//If inlinable field, forget the access emulation, the code gen will directly target it", "+\tif (this.constant != Constant.NotAConstant)", "+\t\treturn;", "+", "+\tif ((this.bits & Binding.FIELD) != 0) {", "+\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t\tFieldBinding codegenField = fieldBinding.original();", "+\t\tthis.codegenBinding = codegenField;", "+\t\tif (((this.bits & ASTNode.DepthMASK) != 0)", "+\t\t\t&& (codegenField.isPrivate() // private access", "+\t\t\t\t|| (codegenField.isProtected() // implicit protected access", "+\t\t\t\t\t\t&& codegenField.declaringClass.getPackage() != currentScope.enclosingSourceType().getPackage()))) {", "+\t\t\tif (this.syntheticAccessors == null)", "+\t\t\t\tthis.syntheticAccessors = new MethodBinding[2];", "+\t\t\tthis.syntheticAccessors[isReadAccess ? SingleNameReference.READ : SingleNameReference.WRITE] = ", "+\t\t\t    ((SourceTypeBinding)currentScope.enclosingSourceType().", "+\t\t\t\t\tenclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT)).addSyntheticMethod(codegenField, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, isReadAccess);", "+\t\t\treturn;", "+\t\t}", "+\t\t// if the binding declaring class is not visible, need special action", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "+\t\t// and not from Object or implicit static field access.\t", "+\t\tif (fieldBinding.declaringClass != this.actualReceiverType", "+\t\t\t\t&& !this.actualReceiverType.isArrayType()", "+\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "+\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "+\t\t\tCompilerOptions options = currentScope.compilerOptions();", "+\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !fieldBinding.isStatic())", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object fields", "-\t\t\t\t}", "-\t\t\t}\t\t\t\t\t", "-\t\t}", "+\t\t\t}", "+\t\t}\t\t\t\t\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "913e9ff5eccc6fe199ef86729c7ac173", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "9342b96a381853e1615fe3469e0733ba096bc721", "commitAfterChange": "ae19e299e0e11fadbd87c6347d9c7218ebc4c881", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void _manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tpublic void _manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "+public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "+", "+\tif (this.delegateThis == null) {", "+\t\tsuper.manageSyntheticReadAccessIfNecessary(currentScope, flowInfo);", "+\t\treturn;", "+\t}", "-\t\tif (this.delegateThis == null) {", "-\t\t\tsuper.manageSyntheticReadAccessIfNecessary(currentScope, flowInfo);", "-\t\t\treturn;", "-\t\t}", "-\t\t", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\t//If inlinable field, forget the access emulation, the code gen will directly target it", "-\t\tif (constant != NotAConstant)", "-\t\t\treturn;", "-\t\tif ((bits & FIELD) != 0) {", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "+\tif (!flowInfo.isReachable()) return;", "+\t//If inlinable field, forget the access emulation, the code gen will directly target it", "+\tif (constant != NotAConstant)", "+\t\treturn;", "+\tif ((bits & FIELD) != 0) {", "+\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\t// if the binding declaring class is not visible, need special action", "-\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t// and not from Object or implicit static field access.\t", "-\t\t\tif (fieldBinding.declaringClass != this.delegateThis.type", "-\t\t\t\t&& fieldBinding.declaringClass != null", "-\t\t\t\t&& fieldBinding.constant == NotAConstant", "-\t\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2 ", "-\t\t\t\t\t\t&& !fieldBinding.isStatic()", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object) // no change for Object fields (if there was any)", "-\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.delegateThis.type);", "-\t\t\t}", "+\t\t// if the binding declaring class is not visible, need special action", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "+\t\t// and not from Object or implicit static field access.\t", "+\t\tif (fieldBinding.declaringClass != this.delegateThis.type", "+\t\t\t&& fieldBinding.declaringClass != null", "+\t\t\t&& fieldBinding.constant == NotAConstant", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2 ", "+\t\t\t\t\t&& !fieldBinding.isStatic()", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object) // no change for Object fields (if there was any)", "+\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.delegateThis.type);", "+}"]}], "num": 10185}
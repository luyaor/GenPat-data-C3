{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44caf0848e64d568f3dd0edd1d4aca97", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4628c19e9618cd24e08e63ec80a8486c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " \tpublic boolean visit(Wildcard wildcard, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tUnionTypeReference unionTypeReference, \t\tBlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(", "+\t\tUnionTypeReference unionTypeReference,", "+\t\tBlockScope scope) {", "+", "+\t\tTypeReference[] typeReferences = unionTypeReference.typeReferences;", "+\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "+\t\t\tif (i != 0) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameOR, true);", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\ttypeReferences[i].traverse(this, scope);", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6d3415bc14393f559f5aa096f5c54cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "ad8ad2366de236ac9e408abbe230da3a62708b42", "commitAfterChange": "51a4920b87bcafb7fd9775573ee6626558991e47", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  \tprotected void assertProblems(String message, String expected, ProblemRequestor problemRequestor)", "signatureAfterChange": "  \tprotected void assertProblems(String message, String expected, IProblem[] problems, char[] source)", "diff": ["+\tprotected void assertProblems(String message, String expected, IProblem[] problems, char[] source) {", "+\t\tProblemRequestor pbRequestor = new ProblemRequestor();", "+\t\tpbRequestor.unitSource = source;", "+\t\tfor (int i = 0, length = problems.length; i < length; i++) {", "+\t\t\tpbRequestor.acceptProblem(problems[i]);", "+\t\t}", "+\t\tassertProblems(message, expected, pbRequestor);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d81043d00e2ce9efa20cd5a540dc2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "abab907ca988de55db9659fc1161de10230e8bdf", "commitAfterChange": "5a0382cf8f4f31c0856d2c7bec7b6965767832d9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public int matchLevel(Binding binding)", "signatureAfterChange": "\r public int matchLevel(Binding binding)", "diff": ["-\tif (!(binding instanceof ReferenceBinding)) return IMPOSSIBLE_MATCH;\r", "+\tif (!(binding instanceof TypeBinding)) return IMPOSSIBLE_MATCH;\r", "+\tTypeBinding typeBinding = (TypeBinding)binding;\r", "+\tif (typeBinding instanceof ArrayBinding) typeBinding = ((ArrayBinding)typeBinding).leafComponentType;\r", "+\tif (typeBinding instanceof ProblemReferenceBinding) return INACCURATE_MATCH;\r", "-\tReferenceBinding type = (ReferenceBinding) binding;\r", "-\tint level = this.matchLevelForType(this.simpleName, this.qualification, type.superclass());\r", "-\tif (level != IMPOSSIBLE_MATCH) {\r", "-\t\treturn level;\r", "-\t}\r", "-\t\r", "-\tReferenceBinding[] superInterfaces = type.superInterfaces();\r", "-\tfor (int i = 0, max = superInterfaces.length; i < max; i++){\r", "-\t\tint newLevel = this.matchLevelForType(this.simpleName, this.qualification, superInterfaces[i]);\r", "-\t\tswitch (newLevel) {\r", "-\t\t\tcase IMPOSSIBLE_MATCH:\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\tcase ACCURATE_MATCH: // keep previous level\r", "-\t\t\t\tbreak;\r", "-\t\t\tdefault: // ie. INACCURATE_MATCH\r", "-\t\t\t\tlevel = newLevel;\r", "-\t\t\t\tbreak;\r", "+\twhile (typeBinding != null ) {\r", "+\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);\r", "+\t\tif (level != IMPOSSIBLE_MATCH) {\r", "+\t\t\treturn level;\r", "+\t\t}\r", "+\t\tif (typeBinding instanceof ReferenceBinding){\r", "+\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "+\t\t} else {\r", "+\t\t\ttypeBinding = null;\r", "-\treturn level;\r", "+\treturn IMPOSSIBLE_MATCH;\r"]}], "num": 13545}
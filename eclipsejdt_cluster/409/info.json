{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6990b2bd63c1fb8e701ca21bfbde19fc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e5e5db76da7f1c3c5b0167c28c42dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "758f55a5a64497d7398f91effe575e974d834411", "commitAfterChange": "a920298c522cfd65cad97a6c929cd34516c3baed", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void append(String text)", "signatureAfterChange": "\r public void append(String text)", "diff": ["-\tif (!isReadOnly()) {\r", "-\t\tint textLength = text.length();\r", "-\t\tif (textLength == 0) {\r", "-\t\t\treturn;\r", "-\t\t}\r", "-\t\tint length = getLength();\r", "-\t\tadjustGap(length, textLength);\r", "-\t\tSystem.arraycopy(text.toCharArray(), 0, this.contents, length, textLength);\r", "-\t\tthis.gapStart += textLength;\r", "-\t\tthis.flags |= F_HAS_UNSAVED_CHANGES;\r", "-\t\tnotifyChanged(new BufferChangedEvent(this, length, 0, text));\r", "-\t}\r", "+\tthis.append(text.toCharArray());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d412604678921afd831873d59662d4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 56, "signatureBeforeChange": " protected void pushNotInMethod()", "signatureAfterChange": " protected void prepareForHeaders()", "diff": ["-protected void pushNotInMethod() {", "-\ttry {", "-\t\tthis.inMethodStack[++this.inMethodPtr] = false;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//except in test's cases, it should never raise", "-\t\tint oldStackLength = this.inMethodStack.length;", "-\t\tSystem.arraycopy(this.inMethodStack , 0, (this.inMethodStack = new boolean[oldStackLength + StackIncrement]), 0, oldStackLength);", "-\t\tthis.inMethodStack[this.inMethodPtr] = false;", "-\t}", "+protected void prepareForHeaders() {", "+\tnestedMethod[nestedType = 0] = 0;", "+\tvariablesCounter[nestedType] = 0;", "+\trealBlockStack[realBlockPtr = 0] = 0;", "+\t", "+\tpopUntilElement(K_TYPE_DELIMITER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4374a619c3dfeb03a737740571221e5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected void setCodegenBinding(FieldBinding fieldBinding, int index, FieldBinding someCodegenBinding, TypeBinding someGenericCast)", "signatureAfterChange": " \tprotected void setCodegenBinding(int index, FieldBinding someCodegenBinding)", "diff": ["-\tprotected void setCodegenBinding(FieldBinding fieldBinding, int index, FieldBinding someCodegenBinding, TypeBinding someGenericCast) {", "+\tprotected void setCodegenBinding(int index, FieldBinding someCodegenBinding) {", "-\t\tif (fieldBinding == binding){", "+\t\tif (index == 0){", "-\t\t\tif (someGenericCast != null) this.genericCast = someGenericCast;", "-\t\t    int position = index < 0 ? length-1: index-1; // write is always the last", "-\t\t\tthis.otherCodegenBindings[position] = someCodegenBinding;", "-\t\t\tif (someGenericCast != null) {", "-\t\t\t    if (this.otherGenericCasts == null) {", "-\t\t\t        this.otherGenericCasts = new TypeBinding[length];", "-\t\t\t    }", "-\t\t\t    this.otherGenericCasts[position] = someGenericCast;", "-\t\t\t}", "+\t\t\tthis.otherCodegenBindings[index-1] = someCodegenBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54fa9e4d52dc25410f1107e8f3528404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "8924dfc4fa3fe74549012523c4b06ea66d1d771f", "commitAfterChange": "32ddf534b04d269b876c2c25ef9641f93fbc4b4b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "signatureAfterChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "diff": ["-\t// source name must be one name without \"$\".", "-\tchar[] possibleSourceName = this.compoundName[this.compoundName.length - 1];", "-\tint start = CharOperation.lastIndexOf('$', possibleSourceName) + 1;", "-\tif (start == 0) {", "-\t\tthis.sourceName = possibleSourceName;", "-\t} else {", "-\t\tthis.sourceName = new char[possibleSourceName.length - start];", "-\t\tSystem.arraycopy(possibleSourceName, start, this.sourceName, 0, this.sourceName.length);", "-\t}", "-", "+\tthis.sourceName = binaryType.getSourceName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fafc93b6f6ca677eb7cd7faed8fe169", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " protected void consumeAssignmentOperator(int pos)", "signatureAfterChange": " protected void consumeAssignmentOperator(int pos)", "diff": ["-\ttry {", "-\t\tthis.intStack[++this.intPtr] = pos;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//this.intPtr is correct ", "-\t\tint oldStackLength = this.intStack.length;", "-\t\tint oldStack[] = this.intStack;", "-\t\tthis.intStack = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldStack, 0, this.intStack, 0, oldStackLength);", "-\t\tthis.intStack[this.intPtr] = pos;", "-\t}", "+\tpushOnIntStack(pos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9712b39238df212f48e22f2262eed2e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "56f02b653e0dc58dc37c3d15b2e6a78c25c99600", "commitAfterChange": "ee09a8a98faa8f7f5560760965a7dd66e79f6d04", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r private void storeLabelsIfNeeded()", "signatureAfterChange": "\r private void storeLabelsIfNeeded()", "diff": ["-\tint counter = this.labelCounterPtr >= 0 ? this.labelCounterStack[this.labelCounterPtr] : 0;\r", "-\tif (this.labels == null && this.identifierPtr >= 0) {\r", "-\t\tthis.labels = new char[counter][];\r", "-\t\tSystem.arraycopy(this.identifierStack, this.identifierPtr - counter + 1, this.labels, 0, counter);\r", "-\t}\r", "-\tthis.identifierPtr -= counter;\r", "-\tthis.identifierLengthPtr -= counter; // labels have not been concatenated yet\r", "+//\tint counter = this.labelCounterPtr >= 0 ? this.labelCounterStack[this.labelCounterPtr] : 0;\r", "+//\tif (this.labels == null && this.identifierPtr >= 0) {\r", "+//\t\tthis.labels = new char[counter][];\r", "+//\t\tSystem.arraycopy(this.identifierStack, this.identifierPtr - counter + 1, this.labels, 0, counter);\r", "+//\t}\r", "+//\tthis.identifierPtr -= counter;\r", "+//\tthis.identifierLengthPtr -= counter; // labels have not been concatenated yet\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1c04dcf6d3f8d5ee5e5c5fae7c88df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "1a8cfd60f35f9eb233d4395676551d0101e49aa3", "commitAfterChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  private void pushText(int start, int end, int htmlIndex, int htmlDepth)", "signatureAfterChange": "  private void pushText(int start, int end, int htmlIndex, int htmlDepth)", "diff": ["-\tint textEnd = end;", "-\tif (this.javadocTextEnd > 0 && end >= this.javadocTextEnd) {", "-\t\t// Special case on javadoc text end, need to retrieve the space", "-\t\t// position by rescanning the text", "-\t\tint restart = this.spacePosition == -1 ? start : this.spacePosition;", "-\t\tthis.scanner.resetTo(restart, end-1/* before last star*/);", "-\t\ttry {", "-\t\t\tif (this.scanner.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\ttextEnd = this.spacePosition;", "-\t\t\t}", "-\t\t}", "-\t\tcatch (InvalidInputException iie) {", "-\t\t\t// do nothing", "-\t\t}", "-\t}", "-\tFormatJavadocText text = new FormatJavadocText(start, textEnd-1, lineStart, htmlIndex, htmlDepth);", "+\tFormatJavadocText text = new FormatJavadocText(start, end-1, lineStart, htmlIndex, htmlDepth);"]}], "num": 409}
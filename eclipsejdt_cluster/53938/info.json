{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98ad374ead8374db463270c68999deea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3c58fd5ee94686da85b70a9b4aa745", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "3b755d4e14f95caf2a60783a66e89e17e7199e48", "commitAfterChange": "efe133ae678322ac49a8b9b58aa2e56b16527b71", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\tpublic void logException(Exception e)", "signatureAfterChange": " \t\tpublic void logException(Exception e)", "diff": ["-\t\t\tfinal String message = e.getMessage();", "+\t\t\tStringWriter writer = new StringWriter();", "+\t\t\tPrintWriter printWriter = new PrintWriter(writer);", "+\t\t\te.printStackTrace(printWriter);", "+\t\t\tprintWriter.flush();", "+\t\t\tprintWriter.close();", "+\t\t\tfinal String stackTrace = writer.getBuffer().toString();", "+\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(stackTrace));", "+\t\t\t\tString line;", "+\t\t\t\tint i = 0;", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tString message = null;", "+\t\t\t\ttry {", "+\t\t\t\t\twhile ((line = reader.readLine()) != null && i < 4) {", "+\t\t\t\t\t\tbuffer.append(line).append(LINE_SEPARATOR);", "+\t\t\t\t\t\ti++;", "+\t\t\t\t\t}", "+\t\t\t\t\treader.close();", "+\t\t\t\t\tmessage = buffer.toString();", "+\t\t\t\t} catch (IOException e1) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t\tmessage = e.getMessage();", "+\t\t\t\t}", "-\t\t\tthis.printlnErr(message);", "+\t\t\tthis.printlnErr(stackTrace);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46db19e5182da70cb078f0a1bdb93243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java", "commitBeforeChange": "65f5152e309a08bb91b2b35f96e93b2fa93bae4f", "commitAfterChange": "a16b4bac72f18b88e0ee337c3ee2d4cf28bfb8b4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t@Override \tpublic String toString()", "signatureAfterChange": "  \t@Override     public String toString()", "diff": ["-\t */", "-\tpublic String toString() {", "-\t\tif (this._binding == null) {", "-\t\t\treturn \"@any()\"; //$NON-NLS-1$", "+    public String toString() {", "+    \tTypeMirror decl = getAnnotationType();", "+    \tStringBuilder sb = new StringBuilder();", "+    \tsb.append('@');", "+    \tsb.append(decl.toString());", "+    \tMap<? extends ExecutableElement, ? extends AnnotationValue> values = getElementValues();", "+\t\tif (!values.isEmpty()) {", "+\t\t\tsb.append('(');", "+\t\t\tboolean first = true;", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> e : values.entrySet()) {", "+\t\t\t\tif (!first) {", "+\t\t\t\t\tsb.append(\", \"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tfirst = false;", "+\t\t\t\tsb.append(e.getKey().getSimpleName());", "+\t\t\t\tsb.append(\" = \"); //$NON-NLS-1$", "+\t\t\t\tsb.append(e.getValue().toString());", "+\t\t\t}", "+\t\t\tsb.append(')');", "-\t\treturn \"@\" + _binding.getAnnotationType().debugName(); //$NON-NLS-1$", "-\t}", "+\t\treturn sb.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8750090e9ed07848422584fdfe63517b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "65f5152e309a08bb91b2b35f96e93b2fa93bae4f", "commitAfterChange": "a16b4bac72f18b88e0ee337c3ee2d4cf28bfb8b4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public String toString()", "signatureAfterChange": "      @Override \tpublic String toString()", "diff": ["-    public String toString()", "+    @Override", "+\tpublic String toString()", "-\t\treturn _domAnnotation.toString();\t\t\t", "+    \tAnnotationTypeDeclaration decl = getAnnotationType().getDeclaration();", "+    \tStringBuilder sb = new StringBuilder();", "+    \tsb.append('@');", "+    \tsb.append(decl.getQualifiedName());", "+    \tMap<AnnotationTypeElementDeclaration, AnnotationValue> values = getElementValues();", "+\t\tif (!values.isEmpty()) {", "+\t\t\tsb.append('(');", "+\t\t\tboolean first = true;", "+\t\t\tfor (Entry<AnnotationTypeElementDeclaration, AnnotationValue> e : values.entrySet()) {", "+\t\t\t\tif (!first) {", "+\t\t\t\t\tsb.append(\", \"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tfirst = false;", "+\t\t\t\tsb.append(e.getKey().getSimpleName());", "+\t\t\t\tsb.append(\" = \"); //$NON-NLS-1$", "+\t\t\t\tsb.append(e.getValue().toString());", "+\t\t\t}", "+\t\t\tsb.append(')');", "+\t\t}", "+\t\treturn sb.toString();"]}], "num": 53938}
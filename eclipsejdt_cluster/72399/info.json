{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2006eaeea389b004762200ddebcff2bb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8878c396d9cf435a0d59a0654f7493d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void generateCode(ClassFile enclosingClassFile)", "signatureAfterChange": " public void generateCode(ClassFile enclosingClassFile)", "diff": ["+ */", "+public void generateCode(ClassFile enclosingClassFile) {", "+\tif (this.hasBeenGenerated)", "+\t\treturn;", "+\tthis.hasBeenGenerated = true;", "+\tif (this.ignoreFurtherInvestigation) {", "+\t\tif (this.binding == null)", "+\t\t\treturn;", "+\t\tClassFile.createProblemType(", "+\t\t\tthis,", "+\t\t\tthis.scope.referenceCompilationUnit().compilationResult);", "+\t\treturn;", "+\t}", "+\ttry {", "+\t\t// create the result for a compiled type", "+\t\tClassFile classFile = new ClassFile(this.binding, enclosingClassFile, false);", "+\t\t// generate all fiels", "+\t\tclassFile.addFieldInfos();", "+\t\t// record the inner type inside its own .class file to be able", "+\t\t// to generate inner classes attributes", "+\t\tif (this.binding.isMemberType())", "+\t\t\tclassFile.recordEnclosingTypeAttributes(this.binding);", "+\t\tif (this.binding.isLocalType()) {", "+\t\t\tenclosingClassFile.recordNestedLocalAttribute(this.binding);", "+\t\t\tclassFile.recordNestedLocalAttribute(this.binding);", "+\t\t}", "+\t\tif (this.memberTypes != null) {", "+\t\t\t\t// record the inner type inside its own .class file to be able", "+\t\t\t\t// to generate inner classes attributes", "+\t\t\t\tclassFile.recordNestedMemberAttribute(this.memberTypes[i].binding);", "+\t\t\t\tthis.memberTypes[i].generateCode(this.scope, classFile);", "+\t\t// generate all methods", "+\t\tclassFile.setForMethodInfos();", "+\t\tif (this.methods != null) {", "+\t\t\t\tthis.methods[i].generateCode(this.scope, classFile);", "+\t\t// generate all synthetic and abstract methods", "+\t\tclassFile.addSpecialMethods();", "+\t\tif (this.ignoreFurtherInvestigation) { // trigger problem type generation for code gen errors", "+\t\t\tthrow new AbortType(this.scope.referenceCompilationUnit().compilationResult, null);", "-\t */", "-\tpublic void generateCode(ClassFile enclosingClassFile) {", "-", "-\t\tif (hasBeenGenerated)", "+\t\t// finalize the compiled type result", "+\t\tclassFile.addAttributes();", "+\t\tthis.scope.referenceCompilationUnit().compilationResult.record(", "+\t\t\tthis.binding.constantPoolName(),", "+\t\t\tclassFile);", "+\t} catch (AbortType e) {", "+\t\tif (this.binding == null)", "-\t\thasBeenGenerated = true;", "-\t\tif (ignoreFurtherInvestigation) {", "-\t\t\tif (binding == null)", "-\t\t\t\treturn;", "-\t\t\tClassFile.createProblemType(", "-\t\t\t\tthis,", "-\t\t\t\tscope.referenceCompilationUnit().compilationResult);", "-\t\t\treturn;", "-\t\t}", "-\t\ttry {", "-\t\t\t// create the result for a compiled type", "-\t\t\tClassFile classFile = new ClassFile(binding, enclosingClassFile, false);", "-\t\t\t// generate all fiels", "-\t\t\tclassFile.addFieldInfos();", "+\t\tClassFile.createProblemType(", "+\t\t\tthis,", "+\t\t\tthis.scope.referenceCompilationUnit().compilationResult);", "+\t}", "+}", "-\t\t\t// record the inner type inside its own .class file to be able", "-\t\t\t// to generate inner classes attributes", "-\t\t\tif (binding.isMemberType())", "-\t\t\t\tclassFile.recordEnclosingTypeAttributes(binding);", "-\t\t\tif (binding.isLocalType()) {", "-\t\t\t\tenclosingClassFile.recordNestedLocalAttribute(binding);", "-\t\t\t\tclassFile.recordNestedLocalAttribute(binding);", "-\t\t\t}", "-\t\t\tif (memberTypes != null) {", "-\t\t\t\tfor (int i = 0, max = memberTypes.length; i < max; i++) {", "-\t\t\t\t\t// record the inner type inside its own .class file to be able", "-\t\t\t\t\t// to generate inner classes attributes", "-\t\t\t\t\tclassFile.recordNestedMemberAttribute(memberTypes[i].binding);", "-\t\t\t\t\tmemberTypes[i].generateCode(scope, classFile);", "-\t\t\t// generate all methods", "-\t\t\tclassFile.setForMethodInfos();", "-\t\t\tif (methods != null) {", "-\t\t\t\tfor (int i = 0, max = methods.length; i < max; i++) {", "-\t\t\t\t\tmethods[i].generateCode(scope, classFile);", "-\t\t\t}", "-\t\t\t// generate all synthetic and abstract methods", "-\t\t\tclassFile.addSpecialMethods();", "-", "-\t\t\tif (ignoreFurtherInvestigation) { // trigger problem type generation for code gen errors", "-\t\t\t\tthrow new AbortType(scope.referenceCompilationUnit().compilationResult, null);", "-\t\t\t}", "-", "-\t\t\t// finalize the compiled type result", "-\t\t\tclassFile.addAttributes();", "-\t\t\tscope.referenceCompilationUnit().compilationResult.record(", "-\t\t\t\tbinding.constantPoolName(),", "-\t\t\t\tclassFile);", "-\t\t} catch (AbortType e) {", "-\t\t\tif (binding == null)", "-\t\t\t\treturn;", "-\t\t\tClassFile.createProblemType(", "-\t\t\t\tthis,", "-\t\t\t\tscope.referenceCompilationUnit().compilationResult);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aadbe5b4b06175ece5d12997310a148c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetTypeDeclaration.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(ClassFile enclosingClassFile)", "signatureAfterChange": " public void generateCode(ClassFile enclosingClassFile)", "diff": ["-\tif (hasBeenGenerated) return;", "-\thasBeenGenerated = true;", "+\tif (this.hasBeenGenerated) return;", "+\tthis.hasBeenGenerated = true;", "-\tif (ignoreFurtherInvestigation) {", "-\t\tif (binding == null)", "+\tif (this.ignoreFurtherInvestigation) {", "+\t\tif (this.binding == null)", "-\t\tCodeSnippetClassFile.createProblemType(this, scope.referenceCompilationUnit().compilationResult);", "+\t\tCodeSnippetClassFile.createProblemType(this, this.scope.referenceCompilationUnit().compilationResult);", "-\t\tClassFile classFile = new CodeSnippetClassFile(binding, enclosingClassFile, false);", "+\t\tClassFile classFile = new CodeSnippetClassFile(this.binding, enclosingClassFile, false);", "-\t\tif (binding.isMemberType())", "-\t\t\tclassFile.recordEnclosingTypeAttributes(binding);", "-\t\tif (binding.isLocalType()) {", "-\t\t\tenclosingClassFile.recordNestedLocalAttribute(binding);", "-\t\t\tclassFile.recordNestedLocalAttribute(binding);", "+\t\tif (this.binding.isMemberType())", "+\t\t\tclassFile.recordEnclosingTypeAttributes(this.binding);", "+\t\tif (this.binding.isLocalType()) {", "+\t\t\tenclosingClassFile.recordNestedLocalAttribute(this.binding);", "+\t\t\tclassFile.recordNestedLocalAttribute(this.binding);", "-\t\tif (memberTypes != null) {", "-\t\t\tfor (int i = 0, max = memberTypes.length; i < max; i++) {", "+\t\tif (this.memberTypes != null) {", "+\t\t\tfor (int i = 0, max = this.memberTypes.length; i < max; i++) {", "-\t\t\t\tclassFile.recordNestedMemberAttribute(memberTypes[i].binding);", "-\t\t\t\tmemberTypes[i].generateCode(scope, classFile);", "+\t\t\t\tclassFile.recordNestedMemberAttribute(this.memberTypes[i].binding);", "+\t\t\t\tthis.memberTypes[i].generateCode(this.scope, classFile);", "-\t\tif (methods != null) {", "-\t\t\tfor (int i = 0, max = methods.length; i < max; i++) {", "-\t\t\t\tmethods[i].generateCode(scope, classFile);", "+\t\tif (this.methods != null) {", "+\t\t\tfor (int i = 0, max = this.methods.length; i < max; i++) {", "+\t\t\t\tthis.methods[i].generateCode(this.scope, classFile);", "-\t\tif (ignoreFurtherInvestigation){ // trigger problem type generation for code gen errors", "-\t\t\tthrow new AbortType(scope.referenceCompilationUnit().compilationResult);", "+\t\tif (this.ignoreFurtherInvestigation){ // trigger problem type generation for code gen errors", "+\t\t\tthrow new AbortType(this.scope.referenceCompilationUnit().compilationResult);", "-\t\tscope.referenceCompilationUnit().compilationResult.record(binding.constantPoolName(), classFile);", "+\t\tthis.scope.referenceCompilationUnit().compilationResult.record(this.binding.constantPoolName(), classFile);", "-\t\tif (binding == null)", "+\t\tif (this.binding == null)", "-\t\tCodeSnippetClassFile.createProblemType(this, scope.referenceCompilationUnit().compilationResult);", "+\t\tCodeSnippetClassFile.createProblemType(this, this.scope.referenceCompilationUnit().compilationResult);"]}], "num": 72399}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4d01b4d3701d797d840f79fcfed2774", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28a621ab44df537331e572e0524be07e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "signatureAfterChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "diff": ["-\t\t// Generate two attribute: constantValueAttribute and SyntheticAttribute", "+\t\tif (targetJDK < ClassFileConstants.JDK1_5) {", "+\t\t    // pre 1.5, synthetic was an attribute, not a modifier", "+\t\t    accessFlags &= ~AccSynthetic;", "+\t\t}\t\t", "+\t\t// Generate the constantValueAttribute", "+\t\t\tif (contentsOffset + 8 >= contents.length) {", "+\t\t\t\tresizeContents(8);", "+\t\t\t}", "-\t\tif (fieldBinding.isSynthetic()) {", "+\t\tif (this.targetJDK < ClassFileConstants.JDK1_5 && fieldBinding.isSynthetic()) {", "+\t\t\tif (contentsOffset + 6 >= contents.length) {", "+\t\t\t\tresizeContents(6);", "+\t\t\t}", "+\t\t\tif (contentsOffset + 6 >= contents.length) {", "+\t\t\t\tresizeContents(6);", "+\t\t\t}", "+\t\t// add signature attribute", "+\t\tchar[] genericSignature = fieldBinding.genericSignature();", "+\t\tif (genericSignature != null) {", "+\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "+\t\t\t// to the @fieldBinding", "+\t\t\tif (contentsOffset + 8 >= contents.length) {", "+\t\t\t\tresizeContents(8);", "+\t\t\t}", "+\t\t\tint signatureAttributeNameIndex =", "+\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.SignatureName);", "+\t\t\tcontents[contentsOffset++] = (byte) (signatureAttributeNameIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) signatureAttributeNameIndex;", "+\t\t\t// the length of a signature attribute is equals to 2", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 2;", "+\t\t\tint signatureIndex =", "+\t\t\t\tconstantPool.literalIndex(genericSignature);", "+\t\t\tcontents[contentsOffset++] = (byte) (signatureIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) signatureIndex;", "+\t\t\tattributeNumber++;", "+\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecbf38d59ed4d2759ab05c172e01e848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "08705eafdfa67c6d3ffc73b48a9888b3c4d4ff93", "commitAfterChange": "5e9228969768cbfafe3797c4206907b59326e768", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["+\t\tif (targetJDK >= ClassFileConstants.JDK1_5", "+\t\t\t\t&& (this.referenceBinding.isAnonymousType() || this.referenceBinding.isLocalType())) {", "+\t\t\t// add enclosing method attribute (1.5 mode only)", "+\t\t\tif (contentsOffset + 10 >= contents.length) {", "+\t\t\t\tresizeContents(10);", "+\t\t\t}", "+\t\t\tint enclosingMethodAttributeNameIndex =", "+\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.EnclosingMethodName);", "+\t\t\tcontents[contentsOffset++] = (byte) (enclosingMethodAttributeNameIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) enclosingMethodAttributeNameIndex;", "+\t\t\t// the length of a signature attribute is equals to 2", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 4;", "+\t\t\t", "+\t\t\tint enclosingTypeIndex = constantPool.literalIndexForType(this.referenceBinding.enclosingType().constantPoolName());", "+\t\t\tcontents[contentsOffset++] = (byte) (enclosingTypeIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) enclosingTypeIndex;", "+\t\t\tbyte methodIndexByte1 = 0;", "+\t\t\tbyte methodIndexByte2 = 0;", "+\t\t\tif (this.referenceBinding.scope != null) {", "+\t\t\t\tMethodScope methodScope = this.referenceBinding.scope.methodScope();", "+\t\t\t\tif (methodScope != null) {", "+\t\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) referenceContext;", "+\t\t\t\t\t\tMethodBinding methodBinding = methodDeclaration.binding;", "+\t\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForMethod(methodBinding.selector, methodBinding.signature());", "+\t\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "+\t\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcontents[contentsOffset++] = methodIndexByte1;", "+\t\t\tcontents[contentsOffset++] = methodIndexByte2;", "+\t\t\tattributeNumber++;\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f941f89f0d0c1a748665652a4c2c5fc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 14, "signatureBeforeChange": " public int literalIndexForLdc(char[] stringCharArray)", "signatureAfterChange": " public int literalIndexForLdc(char[] stringCharArray)", "diff": ["-\tif ((index = stringCache.get(stringCharArray)) < 0) {", "-\t\tint stringIndex;", "+\tif ((index = stringCache.putIfAbsent(stringCharArray, this.currentIndex)) < 0) {", "-\t\tif ((stringIndex = UTF8Cache.get(stringCharArray)) < 0) {", "+\t\tthis.currentIndex++;", "+\t\t// Write the tag first", "+\t\twriteU1(StringTag);", "+\t\t", "+\t\t// Then the string index", "+\t\tint stringIndexOffset = this.currentOffset;", "+\t\tif (currentOffset + 2 >= poolContent.length) {", "+\t\t\tresizePoolContents(2);", "+\t\t}", "+\t\tcurrentOffset+=2;", "+", "+\t\tint stringIndex;", "+\t\tif ((stringIndex = UTF8Cache.putIfAbsent(stringCharArray, this.currentIndex)) < 0) {", "+\t\t\tthis.currentIndex++;", "-\t\t\t\t\twriteU1(current);", "+\t\t\t\t\tif (currentOffset + 1 >= poolContent.length) {", "+\t\t\t\t\t\t// we need to resize the poolContent array because we won't have", "+\t\t\t\t\t\t// enough space to write the length", "+\t\t\t\t\t\tresizePoolContents(1);", "+\t\t\t\t\t}", "+\t\t\t\t\tpoolContent[currentOffset++] = (byte)(current);", "-\t\t\t\t\t\twriteU1(0xE0 | ((current >> 12) & 0x0F)); // 0xE0 = 1110 0000", "-\t\t\t\t\t\twriteU1(0x80 | ((current >> 6) & 0x3F)); // 0x80 = 1000 0000", "-\t\t\t\t\t\twriteU1(0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "+\t\t\t\t\t\tif (currentOffset + 3 >= poolContent.length) {", "+\t\t\t\t\t\t\t// we need to resize the poolContent array because we won't have", "+\t\t\t\t\t\t\t// enough space to write the length", "+\t\t\t\t\t\t\tresizePoolContents(3);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpoolContent[currentOffset++] = (byte) (0xE0 | ((current >> 12) & 0x0F)); // 0xE0 = 1110 0000", "+\t\t\t\t\t\tpoolContent[currentOffset++] = (byte) (0x80 | ((current >> 6) & 0x3F)); // 0x80 = 1000 0000", "+\t\t\t\t\t\tpoolContent[currentOffset++] = (byte) (0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "+\t\t\t\t\t\tif (currentOffset + 2 >= poolContent.length) {", "+\t\t\t\t\t\t\t// we need to resize the poolContent array because we won't have", "+\t\t\t\t\t\t\t// enough space to write the length", "+\t\t\t\t\t\t\tresizePoolContents(2);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\twriteU1(0xC0 | ((current >> 6) & 0x1F)); // 0xC0 = 1100 0000", "-\t\t\t\t\t\twriteU1(0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "+\t\t\t\t\t\tpoolContent[currentOffset++] = (byte) (0xC0 | ((current >> 6) & 0x1F)); // 0xC0 = 1100 0000", "+\t\t\t\t\t\tpoolContent[currentOffset++] = (byte) (0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "-\t\t\t\treturn -1;", "+\t\t\t\treturn 0;", "-\t\t\tstringIndex = UTF8Cache.put(stringCharArray, currentIndex++);", "-\t\t\tpoolContent[savedCurrentOffset] = (byte) (length >> 8);", "-\t\t\tpoolContent[savedCurrentOffset + 1] = (byte) length;", "+\t\t\tpoolContent[savedCurrentOffset++] = (byte) (length >> 8);", "+\t\t\tpoolContent[savedCurrentOffset] = (byte) length;", "+\t\t\tstringIndex = -stringIndex;", "-\t\tindex = stringCache.put(stringCharArray, currentIndex++);", "-\t\tif (index > 0xFFFF){", "+\t\tif ((index = -index) > 0xFFFF){", "-\t\t// Write the tag first", "-\t\twriteU1(StringTag);", "-\t\t// Then the string index", "-\t\twriteU2(stringIndex);", "+\t\tpoolContent[stringIndexOffset++] = (byte) (stringIndex >> 8);", "+\t\tpoolContent[stringIndexOffset] = (byte) stringIndex;"]}], "num": 4000}
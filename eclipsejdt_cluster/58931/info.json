{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2fa5f27db1a065deb9f5c1622796248", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3935c4fe99624fbba9826d9e49929a0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\t\t\tnew FieldDeclarationPattern(", "+\t\t\t\t\t\tnew FieldPattern(", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tnew FieldReferencePattern(", "+\t\t\t\t\t\tnew FieldPattern(", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\ttrue, // read access", "+\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\ttrue,  // read access", "-\t\t\t\t\t\t\ttrue); // write access", "+\t\t\t\t\t\t\ttypeSimpleName);", "-\t\t\t\t\t\tnew FieldReferencePattern(", "+\t\t\t\t\t\tnew FieldPattern(", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\ttrue, // read access only", "+\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\ttrue,  // read access only", "-\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\ttypeSimpleName);", "-\t\t\t\t\t\tnew FieldReferencePattern(", "+\t\t\t\t\t\tnew FieldPattern(", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\ttrue, // write access only", "-\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\ttrue); // write access only", "+\t\t\t\t\t\t\ttypeSimpleName);", "-\t\t\t\t\tsearchPattern = new OrPattern(", "-\t\t\t\t\t\tnew FieldDeclarationPattern(", "+\t\t\t\t\tsearchPattern =", "+\t\t\t\t\t\tnew FieldPattern(", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\ttrue, // read access", "+\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\ttypeSimpleName), ", "-\t\t\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\tEXACT_MATCH, ", "-\t\t\t\t\t\t\tCASE_SENSITIVE, ", "-\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\ttrue,  // read access", "-\t\t\t\t\t\t\ttrue)); // write access", "+\t\t\t\t\t\t\ttypeSimpleName);", "-\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(", "+\t\t\t\t\t\t\tnew ConstructorPattern(", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tparameterSimpleNames);", "+\t\t\t\t\t\t\t\tparameterSimpleNames,", "+\t\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\tnew MethodDeclarationPattern(", "+\t\t\t\t\t\t\tnew MethodPattern(", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tparameterSimpleNames);", "+\t\t\t\t\t\t\t\tparameterSimpleNames,", "+\t\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\tnew ConstructorReferencePattern(", "+\t\t\t\t\t\t\tnew ConstructorPattern(", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\tnew MethodReferencePattern(", "+\t\t\t\t\t\t\tnew MethodPattern(", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tsearchPattern = new OrPattern(", "-\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\tEXACT_MATCH, ", "-\t\t\t\t\t\t\t\tCASE_SENSITIVE, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\tparameterSimpleNames), ", "-\t\t\t\t\t\t\tnew ConstructorReferencePattern(", "+\t\t\t\t\t\tsearchPattern =", "+\t\t\t\t\t\t\tnew ConstructorPattern(", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\tmethod.getDeclaringType()));", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType());", "-\t\t\t\t\t\tsearchPattern = new OrPattern(", "-\t\t\t\t\t\t\tnew MethodDeclarationPattern(", "-\t\t\t\t\t\t\t\tselector, ", "-\t\t\t\t\t\t\t\tEXACT_MATCH, ", "-\t\t\t\t\t\t\t\tCASE_SENSITIVE, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\treturnQualification, ", "-\t\t\t\t\t\t\t\treturnSimpleName, ", "-\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\tparameterSimpleNames), ", "-\t\t\t\t\t\t\tnew MethodReferencePattern(", "+\t\t\t\t\t\tsearchPattern =", "+\t\t\t\t\t\t\tnew MethodPattern(", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\tmethod.getDeclaringType()));", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType());", "-\tif (searchPattern != null) {", "+\tif (searchPattern != null)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73d1a2e4421f0775bdf4282e4ee41ec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": " private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\twhile (token != TerminalTokens.TokenNameEOF){", "-\t\tswitch(mode){", "-", "+\twhile (token != TerminalTokens.TokenNameEOF) {", "+\t\tswitch(mode) {", "-\t\t\t\t\t\tif (declaringType == null){", "+\t\t\t\t\t\tif (declaringType == null) {", "-\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken ", "-\t\t\t\t\t\t\t|| TerminalTokens.TokenNameDOT == lastToken)){", "+\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken || TerminalTokens.TokenNameDOT == lastToken))", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (fieldName == null) {", "+\t\t\t\t\t\tif (fieldName == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (type == null){", "+\t\t\t\t\t\tif (type == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\tif (declaringType != null){", "+\tif (declaringType != null) {", "-\t\tif (lastDotPosition >= 0){", "+\t\tif (lastDotPosition >= 0) {", "-\t\t\tif (declaringTypeQualification.length == 1 && declaringTypeQualification[0] == '*') declaringTypeQualification = null;", "+\t\t\tif (declaringTypeQualification.length == 1 && declaringTypeQualification[0] == '*')", "+\t\t\t\tdeclaringTypeQualification = null;", "-\t\tif (declaringTypeSimpleName.length == 1 && declaringTypeSimpleName[0] == '*') declaringTypeSimpleName = null;", "+\t\tif (declaringTypeSimpleName.length == 1 && declaringTypeSimpleName[0] == '*')", "+\t\t\tdeclaringTypeSimpleName = null;", "-\tif (type != null){", "+\tif (type != null) {", "-\t\tif (lastDotPosition >= 0){", "+\t\tif (lastDotPosition >= 0) {", "-\t\tif (typeSimpleName.length == 1 && typeSimpleName[0] == '*') typeSimpleName = null;", "+\t\tif (typeSimpleName.length == 1 && typeSimpleName[0] == '*')", "+\t\t\ttypeSimpleName = null;", "-\tSearchPattern searchPattern = null;", "-\tswitch (limitTo){", "+\tswitch (limitTo) {", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldDeclarationPattern(", "+\t\t\treturn new FieldPattern(", "+\t\t\t\ttrue,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tfieldNameChars,", "+\t\t\t\tmatchMode,", "+\t\t\t\tisCaseSensitive,", "+\t\t\t\tdeclaringTypeQualification,", "+\t\t\t\tdeclaringTypeSimpleName,", "+\t\t\t\ttypeQualification,", "+\t\t\t\ttypeSimpleName);", "+\t\tcase IJavaSearchConstants.REFERENCES :", "+\t\t\treturn new FieldPattern(", "+\t\t\t\tfalse,", "+\t\t\t\ttrue, // read access", "+\t\t\t\ttrue, // write access", "-\t\t\tbreak;", "-\t\tcase IJavaSearchConstants.REFERENCES :", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue); // write access", "-\t\t\tbreak;", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\ttrue, // read access only", "-\t\t\t\t\tfalse);", "-\t\t\tbreak;", "+\t\t\treturn new FieldPattern(", "+\t\t\t\tfalse,", "+\t\t\t\ttrue, // read access only", "+\t\t\t\tfalse,", "+\t\t\t\tfieldNameChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\ttypeQualification, ", "+\t\t\t\ttypeSimpleName);", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue); // write access only", "-\t\t\tbreak;", "+\t\t\treturn new FieldPattern(", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\ttrue, // write access only", "+\t\t\t\tfieldNameChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\ttypeQualification, ", "+\t\t\t\ttypeSimpleName);", "-\t\t\tsearchPattern = new OrPattern(", "-\t\t\t\tnew FieldDeclarationPattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName),", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue)); // write access", "-\t\t\tbreak;", "+\t\t\treturn new FieldPattern(", "+\t\t\t\ttrue,", "+\t\t\t\ttrue, // read access", "+\t\t\t\ttrue, // write access", "+\t\t\t\tfieldNameChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\ttypeQualification, ", "+\t\t\t\ttypeSimpleName);", "-\treturn searchPattern;", "-", "+\treturn null;"]}], "num": 58931}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c62a798d6d947021c3a0faca12d0939", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de3a461f52b8aa59f2982bac7daef89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException", "signatureAfterChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException", "diff": ["-public void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException {", "-\treportBinaryMatch(null, binaryMember, info, accuracy);", "-}", "+ */", "+private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException {", "+\t// handle the nodes for the local type first", "+\tif ((field.bits & AstNode.HasLocalTypeMASK) != 0) {", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(", "+\t\t\t(parent instanceof IType)", "+\t\t\t\t? (field.isField()", "+\t\t\t\t\t? (IJavaElement) createFieldHandle(field, (IType) parent)", "+\t\t\t\t\t: (IJavaElement) createInitializerHandle(type, field, (IType) parent))", "+\t\t\t\t: parent,", "+\t\t\tnodeSet);", "+\t\ttry {", "+\t\t\tfield.traverse(localDeclarationVisitor, null);", "+\t\t} catch (WrappedCoreException e) {", "+\t\t\tthrow e.coreException;", "+\t\t}", "+\t}", "+", "+\tif (typeInHierarchy) {", "+\t\tAstNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, field.declarationSourceEnd);", "+\t\tif (nodes != null) {", "+\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) != 0)", "+\t\t\t\t\treportReference(node, type, field, parent, level.intValue());", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e207025255a8f5ed961c0c05abac121b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, boolean typeInHierarchy) throws CoreException", "signatureAfterChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, boolean typeInHierarchy) throws CoreException", "diff": ["-\tif (typeInHierarchy) {", "-\t\tAstNode[] nodes = this.matchingNodes(field.declarationSourceStart, field.declarationSourceEnd);", "-\t\tfor (int i = 0; i < nodes.length; i++) {", "-\t\t\tAstNode node = nodes[i];", "-\t\t\tInteger level = (Integer)this.matchingNodes.get(node);", "-\t\t\tif ((this.matchContainer & SearchPattern.FIELD) != 0) {", "-\t\t\t\tthis.locator.reportReference(", "-\t\t\t\t\tnode, ", "-\t\t\t\t\ttype, ", "-\t\t\t\t\tfield, ", "-\t\t\t\t\tparent, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\tthis.matchingNodes.remove(node);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t// handle the nodes for the local type first", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor();", "-\t\tlocalDeclarationVisitor.enclosingElement = ", "-\t\t\t(parent instanceof IType) ?", "-\t\t\t\t(field.isField() ?", "-\t\t\t\t\t(IJavaElement)this.locator.createFieldHandle(field, (IType)parent) :", "-\t\t\t\t\t(IJavaElement)this.locator.createInitializerHandle(type, field, (IType)parent)) :", "-\t\t\t\tparent;", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(", "+\t\t\t(parent instanceof IType)", "+\t\t\t\t? (field.isField()", "+\t\t\t\t\t? (IJavaElement) this.locator.createFieldHandle(field, (IType) parent)", "+\t\t\t\t\t: (IJavaElement) this.locator.createInitializerHandle(type, field, (IType) parent))", "+\t\t\t\t: parent);", "+\t\t}", "+\t}", "+", "+\tif (typeInHierarchy) {", "+\t\tAstNode[] nodes = matchingNodes(field.declarationSourceStart, field.declarationSourceEnd);", "+\t\tif (nodes != null) {", "+\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(node);", "+\t\t\t\tif ((this.matchContainer & SearchPattern.FIELD) != 0)", "+\t\t\t\t\tthis.locator.reportReference(node, type, field, parent, level.intValue());", "+\t\t\t}"]}], "num": 60195}
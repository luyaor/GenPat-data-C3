{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af1df383d1be0569d61c6123e87026c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d1ed913d7ab5da14a66bdf51ef5f9ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void testEnumImplementations(TypeDeclaration testClass)", "signatureAfterChange": " \tprivate void testEnumImplementations(TypeDeclaration testClass)", "diff": ["-\t\tassertTrue(\"EnumDeclaration exists\", enumDecl != null);", "+\t\tProcessorTestStatus.assertTrue(\"EnumDeclaration exists\", enumDecl != null);", "-\t\tassertEquals(\"Number of enum constants\", 2, enumConstDecls.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of enum constants\", 2, enumConstDecls.size());", "-\t\tassertTrue(\"enum constant \\\"aardvark\\\" exists\", enumConstAardvark != null);", "-\t\tassertTrue(\"enum constant \\\"anteater\\\" exists\", enumConstAnteater != null);", "+\t\tProcessorTestStatus.assertTrue(\"enum constant \\\"aardvark\\\" exists\", enumConstAardvark != null);", "+\t\tProcessorTestStatus.assertTrue(\"enum constant \\\"anteater\\\" exists\", enumConstAnteater != null);", "-\t\tassertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAardvark.toString());", "-\t\tassertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAnteater.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAardvark.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAnteater.toString());", "-\t\tassertEquals(\"Modifier.values() array length\", 11, valuesArrayLength);", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.values() array length\", 11, valuesArrayLength);", "-\t\tassertEquals(\"Modifier.ABSTRACT\", \"abstract\", Modifier.ABSTRACT.toString());", "-\t\tassertEquals(\"Modifier.FINAL\", \"final\", Modifier.FINAL.toString());", "-\t\tassertEquals(\"Modifier.NATIVE\", \"native\", Modifier.NATIVE.toString());", "-\t\tassertEquals(\"Modifier.PRIVATE\", \"private\", Modifier.PRIVATE.toString());", "-\t\tassertEquals(\"Modifier.PROTECTED\", \"protected\", Modifier.PROTECTED.toString());", "-\t\tassertEquals(\"Modifier.PUBLIC\", \"public\", Modifier.PUBLIC.toString());", "-\t\tassertEquals(\"Modifier.STATIC\", \"static\", Modifier.STATIC.toString());", "-\t\tassertEquals(\"Modifier.STRICTFP\", \"strictfp\", Modifier.STRICTFP.toString());", "-\t\tassertEquals(\"Modifier.SYNCHRONIZED\", \"synchronized\", Modifier.SYNCHRONIZED.toString());", "-\t\tassertEquals(\"Modifier.TRANSIENT\", \"transient\", Modifier.TRANSIENT.toString());", "-\t\tassertEquals(\"Modifier.VOLATILE\", \"volatile\", Modifier.VOLATILE.toString());", "-\t\tassertEquals(\"Modifier.valueOf(\\\"PUBLIC\\\")\", Modifier.PUBLIC, Modifier.valueOf(\"PUBLIC\"));", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.ABSTRACT\", \"abstract\", Modifier.ABSTRACT.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.FINAL\", \"final\", Modifier.FINAL.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.NATIVE\", \"native\", Modifier.NATIVE.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.PRIVATE\", \"private\", Modifier.PRIVATE.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.PROTECTED\", \"protected\", Modifier.PROTECTED.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.PUBLIC\", \"public\", Modifier.PUBLIC.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.STATIC\", \"static\", Modifier.STATIC.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.STRICTFP\", \"strictfp\", Modifier.STRICTFP.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.SYNCHRONIZED\", \"synchronized\", Modifier.SYNCHRONIZED.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.TRANSIENT\", \"transient\", Modifier.TRANSIENT.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.VOLATILE\", \"volatile\", Modifier.VOLATILE.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.valueOf(\\\"PUBLIC\\\")\", Modifier.PUBLIC, Modifier.valueOf(\"PUBLIC\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "610dec1ab5166de9508b711ea8b7c26d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "commitAfterChange": "8c631374d51cd9cce66092e187c2523badcba90a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "signatureAfterChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "diff": ["-\t\t\tthis.parameters.put(PROBLEM_ID, getFieldName(problem.getID()));", "-\t\t\tthis.parameters.put(PROBLEM_SEVERITY, problem.isError() ? ERROR : WARNING);", "-\t\t\tthis.parameters.put(PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "-\t\t\tthis.parameters.put(PROBLEM_SOURCE_START, new Integer(sourceStart));", "-\t\t\tthis.parameters.put(PROBLEM_SOURCE_END, new Integer(sourceEnd));", "-\t\t\tthis.printTag(PROBLEM_TAG, this.parameters, true, false);", "+\t\t\tthis.parameters.put(Logger.PROBLEM_ID, getFieldName(problem.getID()));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, problem.isError() ? Logger.ERROR : Logger.WARNING);", "+\t\t\tthis.parameters.put(Logger.PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SOURCE_START, new Integer(sourceStart));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SOURCE_END, new Integer(sourceEnd));", "+\t\t\tthis.printTag(Logger.PROBLEM_TAG, this.parameters, true, false);", "-\t\t\tthis.parameters.put(VALUE, problem.getMessage());", "-\t\t\tthis.printTag(PROBLEM_MESSAGE, this.parameters, true, true);", "+\t\t\tthis.parameters.put(Logger.VALUE, problem.getMessage());", "+\t\t\tthis.printTag(Logger.PROBLEM_MESSAGE, this.parameters, true, true);", "-\t\t\tthis.printTag(SOURCE_CONTEXT, this.parameters, true, true);", "+\t\t\tthis.printTag(Logger.SOURCE_CONTEXT, this.parameters, true, true);", "-\t\t\t\tthis.printTag(PROBLEM_ARGUMENTS, null, true, false);", "+\t\t\t\tthis.printTag(Logger.PROBLEM_ARGUMENTS, null, true, false);", "-\t\t\t\t\tthis.parameters.put(PROBLEM_ARGUMENT_VALUE, arguments[i]);", "-\t\t\t\t\tthis.printTag(PROBLEM_ARGUMENT, this.parameters, true, true);", "+\t\t\t\t\tthis.parameters.put(Logger.PROBLEM_ARGUMENT_VALUE, arguments[i]);", "+\t\t\t\t\tthis.printTag(Logger.PROBLEM_ARGUMENT, this.parameters, true, true);", "-\t\t\t\tthis.endTag(PROBLEM_ARGUMENTS);", "+\t\t\t\tthis.endTag(Logger.PROBLEM_ARGUMENTS);", "-\t\t\tthis.endTag(PROBLEM_TAG);", "+\t\t\tthis.endTag(Logger.PROBLEM_TAG);"]}], "num": 41754}
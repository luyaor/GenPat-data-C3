{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c54eac90b1c563a229f9a87471e55ec6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d31786c13562d0b84d2dcd9275dbc3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void test028()", "signatureAfterChange": " public void test028()", "diff": ["-\t\t\"      0  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"      0  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"      4  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"      4  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"      9  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"      9  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"     13  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "-\t\t\"     16  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     13  invokespecial java.util.ArrayList() [18]\\n\" + ", "+\t\t\"     16  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     22  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     25  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     22  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     25  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     30  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     30  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     36  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     39  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     36  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     39  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     44  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     44  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     50  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     53  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     50  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     53  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     58  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     58  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     63  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"     63  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"     67  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "-\t\t\"     70  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     67  invokespecial java.util.ArrayList() [18]\\n\" + ", "+\t\t\"     70  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     76  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     79  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     76  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     79  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     84  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     84  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     90  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     93  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     90  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     93  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     98  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     98  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"    104  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"    107  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"    104  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"    107  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"    112  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"    112  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"    123  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"    126  checkcast java/util/ArrayList [17]\\n\" + ", "-\t\t\"    129  invokevirtual java/util/ArrayList.iterator()Ljava/util/Iterator; [38]\\n\" + ", "-\t\t\"    132  astore [local_4]\\n\" + ", "+\t\t\"    123  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"    126  checkcast java.util.ArrayList [17]\\n\" + ", "+\t\t\"    129  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator  [38]\\n\" + ", "+\t\t\"    132  astore 4\\n\" + ", "-\t\t\"    137  aload [local_4]\\n\" + ", "-\t\t\"    139  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [44] [nargs: 1]\\n\" + ", "-\t\t\"    144  checkcast java/lang/String [46]\\n\" + ", "+\t\t\"    137  aload 4\\n\" + ", "+\t\t\"    139  invokeinterface java.util.Iterator.next() : java.lang.Object  [44] [nargs: 1]\\n\" + ", "+\t\t\"    144  checkcast java.lang.String [46]\\n\" + ", "-\t\t\"    148  getstatic java/lang/System.out Ljava/io/PrintStream; [52]\\n\" + ", "+\t\t\"    148  getstatic java.lang.System.out : java.io.PrintStream [52]\\n\" + ", "-\t\t\"    152  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [58]\\n\" + ", "-\t\t\"    155  aload [local_4]\\n\" + ", "-\t\t\"    157  invokeinterface java/util/Iterator.hasNext()Z [62] [nargs: 1]\\n\" + ", "+\t\t\"    152  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [58]\\n\" + ", "+\t\t\"    155  aload 4\\n\" + ", "+\t\t\"    157  invokeinterface java.util.Iterator.hasNext() : boolean  [62] [nargs: 1]\\n\" + ", "-\t\t\"    170  invokevirtual java/util/ArrayList.size()I [66]\\n\" + ", "+\t\t\"    170  invokevirtual java.util.ArrayList.size() : int  [66]\\n\" + ", "-\t\t\"        [pc: 0, pc: 177] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: Ljava/util/ArrayList;\\n\" + ", "-\t\t\"        [pc: 118, pc: 176] local: i index: 2 type: I\\n\" + ", "-\t\t\"        [pc: 148, pc: 165] local: s index: 3 type: Ljava/lang/String;\\n\" + ", "+\t\t\"        [pc: 0, pc: 177] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 118, pc: 176] local: i index: 2 type: int\\n\" + ", "+\t\t\"        [pc: 148, pc: 165] local: s index: 3 type: java.lang.String\\n\" + ", "-\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: Ljava/util/ArrayList<Ljava/util/ArrayList<Ljava/lang/String;>;>;\\n\";", "+\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: java.util.ArrayList<java.util.ArrayList<java.lang.String>>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "128ba6c3781ae7cc4c5090dc3e66d39d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testStringAnyStrings01() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java [NonGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java [NonGeneric] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa3246303522ed5b1ebd1fe18b78265", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " public void testTypeRefGenericAllG5_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG5_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<\ufffd|Object|\ufffd, Exception, RuntimeException> gm = new Multiple<Object, Exception, RuntimeException>();@115] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, \ufffd|Exception|\ufffd, RuntimeException> gm = new Multiple<Object, Exception, RuntimeException>();@123] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, \ufffd|RuntimeException|\ufffd> gm = new Multiple<Object, Exception, RuntimeException>();@134] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, RuntimeException> gm = new Multiple<\ufffd|Object|\ufffd, Exception, RuntimeException>();@170] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, RuntimeException> gm = new Multiple<Object, \ufffd|Exception|\ufffd, RuntimeException>();@178] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, RuntimeException> gm = new Multiple<Object, Exception, \ufffd|RuntimeException|\ufffd>();@189] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.<\ufffd|Object|\ufffd, Exception, RuntimeException>generic(new Object(), new Exception(), new RuntimeException());@367] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.<Object, \ufffd|Exception|\ufffd, RuntimeException>generic(new Object(), new Exception(), new RuntimeException());@375] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.<Object, Exception, \ufffd|RuntimeException|\ufffd>generic(new Object(), new Exception(), new RuntimeException());@386] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.paramTypesArgs(new Single<\ufffd|Object|\ufffd>(), new Single<Exception>(), new Single<RuntimeException>(), gm);@656] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<\ufffd|Exception|\ufffd>(), new Single<RuntimeException>(), gm);@678] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<Exception>(), new Single<\ufffd|RuntimeException|\ufffd>(), gm);@703] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm = gm.<\ufffd|Object|\ufffd, Exception, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm);@838] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm = gm.<Object, \ufffd|Exception|\ufffd, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm);@846] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm = gm.<Object, Exception, \ufffd|RuntimeException|\ufffd>complete(new Object(), new Exception(), new RuntimeException(), gm);@857] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [\t\tgm.paramTypesArgs(new Single<\ufffd|Object|\ufffd>(), new Single<Object>(), new Single<Object>(), gm);@1095] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<\ufffd|Object|\ufffd>(), new Single<Object>(), gm);@1117] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<Object>(), new Single<\ufffd|Object|\ufffd>(), gm);@1139] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<\ufffd|Object|\ufffd, ? extends Throwable, ? extends Exception> gm = new Multiple<Object, Exception, RuntimeException>();@1295] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends Exception> gm = new Multiple<\ufffd|Object|\ufffd, Exception, RuntimeException>();@1363] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends Exception> gm = new Multiple<Object, \ufffd|Exception|\ufffd, RuntimeException>();@1371] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends Exception> gm = new Multiple<Object, Exception, \ufffd|RuntimeException|\ufffd>();@1382] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.<\ufffd|Object|\ufffd, RuntimeException, RuntimeException>generic(new Object(), new RuntimeException(), new RuntimeException());@1409] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.<Object, \ufffd|RuntimeException|\ufffd, RuntimeException>generic(new Object(), new RuntimeException(), new RuntimeException());@1417] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.<Object, RuntimeException, \ufffd|RuntimeException|\ufffd>generic(new Object(), new RuntimeException(), new RuntimeException());@1435] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.paramTypesArgs(new Single<\ufffd|Object|\ufffd>(), new Single<Throwable>(), new Single<Exception>(), gm);@1554] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<\ufffd|Throwable|\ufffd>(), new Single<Exception>(), gm);@1576] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<Throwable>(), new Single<\ufffd|Exception|\ufffd>(), gm);@1601] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm = gm.<\ufffd|Object|\ufffd, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm);@1660] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm = gm.<Object, \ufffd|RuntimeException|\ufffd, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm);@1668] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm = gm.<Object, RuntimeException, \ufffd|RuntimeException|\ufffd>complete(new Object(), new RuntimeException(), new RuntimeException(), gm);@1686] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<\ufffd|Object|\ufffd, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<Object, Exception, RuntimeException>();@1893] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<\ufffd|Object|\ufffd, Exception, RuntimeException>();@1983] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<Object, \ufffd|Exception|\ufffd, RuntimeException>();@1991] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<Object, Exception, \ufffd|RuntimeException|\ufffd>();@2002] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.<\ufffd|Object|\ufffd, RuntimeException, IllegalMonitorStateException>generic(new Object(), new RuntimeException(), new IllegalMonitorStateException());@2029] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.<Object, \ufffd|RuntimeException|\ufffd, IllegalMonitorStateException>generic(new Object(), new RuntimeException(), new IllegalMonitorStateException());@2037] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.<Object, RuntimeException, \ufffd|IllegalMonitorStateException|\ufffd>generic(new Object(), new RuntimeException(), new IllegalMonitorStateException());@2055] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.paramTypesArgs(new Single<\ufffd|Object|\ufffd>(), new Single<RuntimeException>(), new Single<RuntimeException>(), gm);@2198] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<\ufffd|RuntimeException|\ufffd>(), new Single<RuntimeException>(), gm);@2220] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<RuntimeException>(), new Single<\ufffd|RuntimeException|\ufffd>(), gm);@2252] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm = gm.<\ufffd|Object|\ufffd, RuntimeException, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm);@2318] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm = gm.<Object, \ufffd|RuntimeException|\ufffd, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm);@2326] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm = gm.<Object, RuntimeException, \ufffd|IllegalMonitorStateException|\ufffd>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm);@2344] EXACT_MATCH\"", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<!|Object|!, Exception, RuntimeException> gm = new Multiple<Object, Exception, RuntimeException>();@115] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, !|Exception|!, RuntimeException> gm = new Multiple<Object, Exception, RuntimeException>();@123] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, !|RuntimeException|!> gm = new Multiple<Object, Exception, RuntimeException>();@134] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, RuntimeException> gm = new Multiple<!|Object|!, Exception, RuntimeException>();@170] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, RuntimeException> gm = new Multiple<Object, !|Exception|!, RuntimeException>();@178] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tMultiple<Object, Exception, RuntimeException> gm = new Multiple<Object, Exception, !|RuntimeException|!>();@189] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.<!|Object|!, Exception, RuntimeException>generic(new Object(), new Exception(), new RuntimeException());@367] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.<Object, !|Exception|!, RuntimeException>generic(new Object(), new Exception(), new RuntimeException());@375] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.<Object, Exception, !|RuntimeException|!>generic(new Object(), new Exception(), new RuntimeException());@386] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.paramTypesArgs(new Single<!|Object|!>(), new Single<Exception>(), new Single<RuntimeException>(), gm);@656] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<!|Exception|!>(), new Single<RuntimeException>(), gm);@678] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<Exception>(), new Single<!|RuntimeException|!>(), gm);@703] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm = gm.<!|Object|!, Exception, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm);@838] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm = gm.<Object, !|Exception|!, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm);@846] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [\t\tgm = gm.<Object, Exception, !|RuntimeException|!>complete(new Object(), new Exception(), new RuntimeException(), gm);@857] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [\t\tgm.paramTypesArgs(new Single<!|Object|!>(), new Single<Object>(), new Single<Object>(), gm);@1095] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<!|Object|!>(), new Single<Object>(), gm);@1117] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<Object>(), new Single<!|Object|!>(), gm);@1139] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<!|Object|!, ? extends Throwable, ? extends Exception> gm = new Multiple<Object, Exception, RuntimeException>();@1295] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends Exception> gm = new Multiple<!|Object|!, Exception, RuntimeException>();@1363] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends Exception> gm = new Multiple<Object, !|Exception|!, RuntimeException>();@1371] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends Exception> gm = new Multiple<Object, Exception, !|RuntimeException|!>();@1382] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.<!|Object|!, RuntimeException, RuntimeException>generic(new Object(), new RuntimeException(), new RuntimeException());@1409] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.<Object, !|RuntimeException|!, RuntimeException>generic(new Object(), new RuntimeException(), new RuntimeException());@1417] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.<Object, RuntimeException, !|RuntimeException|!>generic(new Object(), new RuntimeException(), new RuntimeException());@1435] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.paramTypesArgs(new Single<!|Object|!>(), new Single<Throwable>(), new Single<Exception>(), gm);@1554] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<!|Throwable|!>(), new Single<Exception>(), gm);@1576] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<Throwable>(), new Single<!|Exception|!>(), gm);@1601] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm = gm.<!|Object|!, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm);@1660] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm = gm.<Object, !|RuntimeException|!, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm);@1668] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tgm = gm.<Object, RuntimeException, !|RuntimeException|!>complete(new Object(), new RuntimeException(), new RuntimeException(), gm);@1686] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<!|Object|!, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<Object, Exception, RuntimeException>();@1893] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<!|Object|!, Exception, RuntimeException>();@1983] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<Object, !|Exception|!, RuntimeException>();@1991] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super IllegalMonitorStateException> gm = new Multiple<Object, Exception, !|RuntimeException|!>();@2002] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.<!|Object|!, RuntimeException, IllegalMonitorStateException>generic(new Object(), new RuntimeException(), new IllegalMonitorStateException());@2029] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.<Object, !|RuntimeException|!, IllegalMonitorStateException>generic(new Object(), new RuntimeException(), new IllegalMonitorStateException());@2037] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.<Object, RuntimeException, !|IllegalMonitorStateException|!>generic(new Object(), new RuntimeException(), new IllegalMonitorStateException());@2055] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.paramTypesArgs(new Single<!|Object|!>(), new Single<RuntimeException>(), new Single<RuntimeException>(), gm);@2198] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<!|RuntimeException|!>(), new Single<RuntimeException>(), gm);@2220] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm.paramTypesArgs(new Single<Object>(), new Single<RuntimeException>(), new Single<!|RuntimeException|!>(), gm);@2252] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm = gm.<!|Object|!, RuntimeException, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm);@2318] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm = gm.<Object, !|RuntimeException|!, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm);@2326] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tgm = gm.<Object, RuntimeException, !|IllegalMonitorStateException|!>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm);@2344] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86d79e3e494feb130a857b617923a72e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void testTypeRefGenericAll01() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java [import \ufffd|java.io.Serializable|\ufffd;@23] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java [import \ufffd|type.def.Types|\ufffd;@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {@168] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {@178] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;@189] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;@228] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;@239] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;@254] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;@270] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java [import \ufffd|java.io.Serializable|\ufffd;@23] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java [import \ufffd|type.def.Types|\ufffd;@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends \ufffd|Generic|\ufffd<Types, UClass, VClass> {@104] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, \ufffd|UClass|\ufffd, VClass> {@119] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, \ufffd|VClass|\ufffd> {@127] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\t\ufffd|TestGeneric|\ufffd<Types> test;@138] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\t\ufffd|TestGeneric|\ufffd<String> foo(TestGeneric<Types> param1, Comparable<String> param2) {@164] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<\ufffd|String|\ufffd> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(\ufffd|TestGeneric|\ufffd<Types> param1, Comparable<String> param2) {@188] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, \ufffd|Comparable|\ufffd<String> param2) {@215] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<\ufffd|String|\ufffd> param2) {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\t\ufffd|Comparable|\ufffd<TestGeneric<Types>> bar() {@264] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<\ufffd|TestGeneric|\ufffd<Types>> bar() {@275] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends \ufffd|Types|\ufffd implements Comparable<Types>, Serializable {@345] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements \ufffd|Comparable|\ufffd<Types>, Serializable {@362] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<Types>, \ufffd|Serializable|\ufffd {@381] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass.serialVersionUID [\tprivate static final \ufffd|long|\ufffd serialVersionUID = 1L;@418] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic \ufffd|int|\ufffd compareTo(Types o) {@454] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic int compareTo(\ufffd|Types|\ufffd o) {@468] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends \ufffd|A|\ufffd<Types> {}@517] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java [import !|java.io.Serializable|!;@23] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java [import !|type.def.Types|!;@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & !|Comparable|!<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & !|Serializable|!, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends !|A|!<? super Types>> {@168] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {@178] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\t!|Generic|!<? extends Types, ?, ?> field;@189] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.comp [\t!|Comparable|!<String> comp;@228] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<!|String|!> comp;@239] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.clazz [\t!|Class|!<? extends Exception> clazz;@254] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends !|Exception|!> clazz;@270] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java [import !|java.io.Serializable|!;@23] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java [import !|type.def.Types|!;@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends !|Generic|!<Types, UClass, VClass> {@104] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, !|UClass|!, VClass> {@119] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, !|VClass|!> {@127] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\t!|TestGeneric|!<Types> test;@138] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\t!|TestGeneric|!<String> foo(TestGeneric<Types> param1, Comparable<String> param2) {@164] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<!|String|!> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(!|TestGeneric|!<Types> param1, Comparable<String> param2) {@188] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, !|Comparable|!<String> param2) {@215] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<!|String|!> param2) {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\t!|Comparable|!<TestGeneric<Types>> bar() {@264] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<!|TestGeneric|!<Types>> bar() {@275] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends !|Types|! implements Comparable<Types>, Serializable {@345] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements !|Comparable|!<Types>, Serializable {@362] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<Types>, !|Serializable|! {@381] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass.serialVersionUID [\tprivate static final !|long|! serialVersionUID = 1L;@418] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic !|int|! compareTo(Types o) {@454] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic int compareTo(!|Types|! o) {@468] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends !|A|!<Types> {}@517] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad7c670207f4622e222734ffbcf1775a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "f1fdf8c7fa5a7bd0ac48906a553cf841bede7cc3", "commitAfterChange": "390339e621ed8e3fdf0ba59eebe114d75a12ab27", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-\t\tbuf.append(\"\\n-local variables debug attributes: \").append((produceDebugAttributes & Vars) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-line number debug attributes: \").append((produceDebugAttributes & Lines) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-source debug attributes: \").append((produceDebugAttributes & Source) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-preserve all local variables: \").append(preserveAllLocalVariables ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-unreachable code: \").append(getSeverityString(UnreachableCode)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-import problem: \").append(getSeverityString(ImportProblem)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n--method with constructor name: \").append(getSeverityString(MethodWithConstructorName)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-overridden package default method: \").append(getSeverityString(OverriddenPackageDefaultMethod)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-deprecation: \").append(getSeverityString(UsingDeprecatedAPI)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-masked catch block: \").append(getSeverityString(MaskedCatchBlock)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused local variable: \").append(getSeverityString(UnusedLocalVariable)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused parameter: \").append(getSeverityString(UnusedArgument)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused import: \").append(getSeverityString(UnusedImport)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-synthetic access emulation: \").append(getSeverityString(AccessEmulation)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-assignment with no effect: \").append(getSeverityString(NoEffectAssignment)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-non externalized string: \").append(getSeverityString(NonExternalizedString)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-static access receiver: \").append(getSeverityString(NonStaticAccessToStatic)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-indirect static access: \").append(getSeverityString(IndirectStaticAccess)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-incompatible non inherited interface method: \").append(getSeverityString(IncompatibleNonInheritedInterfaceMethod)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused private member: \").append(getSeverityString(UnusedPrivateMember)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-local variable hiding another variable: \").append(getSeverityString(LocalVariableHiding)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-field hiding another variable: \").append(getSeverityString(FieldHiding)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-possible accidental boolean assignment: \").append(getSeverityString(AccidentalBooleanAssign)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-superfluous semicolon: \").append(getSeverityString(SuperfluousSemicolon)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-uncommented empty block: \").append(getSeverityString(UndocumentedEmptyBlock)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unnecessary type check: \").append(getSeverityString(UnnecessaryTypeCheck)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-invalid annotation: \").append(getSeverityString(InvalidAnnotation)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-finally block not completing normally: \").append(getSeverityString(FinallyBlockNotCompleting)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused declared thrown exception: \").append(getSeverityString(UnusedDeclaredThrownException)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-JDK compliance level: \"+ versionFromJdkLevel(complianceLevel)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-JDK source level: \"+ versionFromJdkLevel(sourceLevel)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-JDK target level: \"+ versionFromJdkLevel(targetJDK)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-private constructor access: \").append(isPrivateConstructorAccessChangingVisibility ? \"extra argument\" : \"make default access\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-verbose : \").append(verbose ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-produce reference info : \").append(produceReferenceInfo ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-parse literal expressions as constants : \").append(parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-encoding : \").append(defaultEncoding == null ? \"<default>\" : defaultEncoding); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-task tags: \").append(this.taskTags == null ? \"\" : new String(CharOperation.concatWith(this.taskTags,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-task priorities : \").append(this.taskPriorites == null ? \"\" : new String(CharOperation.concatWith(this.taskPriorites,','))); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-report deprecation inside deprecated code : \").append(reportDeprecationInsideDeprecatedCode ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report unused parameter when implementing abstract method : \").append(reportUnusedParameterWhenImplementingAbstract ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report unused parameter when overriding concrete method : \").append(reportUnusedParameterWhenOverridingConcrete ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report constructor/setter parameter hiding existing field : \").append(reportSpecialParameterHidingField ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- local variables debug attributes: \").append((produceDebugAttributes & Vars) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- line number debug attributes: \").append((produceDebugAttributes & Lines) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- source debug attributes: \").append((produceDebugAttributes & Source) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- preserve all local variables: \").append(preserveAllLocalVariables ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- unreachable code: \").append(getSeverityString(UnreachableCode)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- import problem: \").append(getSeverityString(ImportProblem)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- method with constructor name: \").append(getSeverityString(MethodWithConstructorName)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- overridden package default method: \").append(getSeverityString(OverriddenPackageDefaultMethod)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- deprecation: \").append(getSeverityString(UsingDeprecatedAPI)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- masked catch block: \").append(getSeverityString(MaskedCatchBlock)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused local variable: \").append(getSeverityString(UnusedLocalVariable)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused parameter: \").append(getSeverityString(UnusedArgument)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused import: \").append(getSeverityString(UnusedImport)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- synthetic access emulation: \").append(getSeverityString(AccessEmulation)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- assignment with no effect: \").append(getSeverityString(NoEffectAssignment)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- non externalized string: \").append(getSeverityString(NonExternalizedString)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- static access receiver: \").append(getSeverityString(NonStaticAccessToStatic)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- indirect static access: \").append(getSeverityString(IndirectStaticAccess)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- incompatible non inherited interface method: \").append(getSeverityString(IncompatibleNonInheritedInterfaceMethod)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused private member: \").append(getSeverityString(UnusedPrivateMember)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- local variable hiding another variable: \").append(getSeverityString(LocalVariableHiding)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- field hiding another variable: \").append(getSeverityString(FieldHiding)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- possible accidental boolean assignment: \").append(getSeverityString(AccidentalBooleanAssign)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- superfluous semicolon: \").append(getSeverityString(SuperfluousSemicolon)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- uncommented empty block: \").append(getSeverityString(UndocumentedEmptyBlock)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unnecessary type check: \").append(getSeverityString(UnnecessaryTypeCheck)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- invalid annotation: \").append(getSeverityString(InvalidAnnotation)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- finally block not completing normally: \").append(getSeverityString(FinallyBlockNotCompleting)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused declared thrown exception: \").append(getSeverityString(UnusedDeclaredThrownException)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- JDK compliance level: \"+ versionFromJdkLevel(complianceLevel)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- JDK source level: \"+ versionFromJdkLevel(sourceLevel)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- JDK target level: \"+ versionFromJdkLevel(targetJDK)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- private constructor access: \").append(isPrivateConstructorAccessChangingVisibility ? \"extra argument\" : \"make default access\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- verbose : \").append(verbose ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- produce reference info : \").append(produceReferenceInfo ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- parse literal expressions as constants : \").append(parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- encoding : \").append(defaultEncoding == null ? \"<default>\" : defaultEncoding); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n\\t- task tags: \").append(this.taskTags == null ? \"\" : new String(CharOperation.concatWith(this.taskTags,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n\\t- task priorities : \").append(this.taskPriorites == null ? \"\" : new String(CharOperation.concatWith(this.taskPriorites,','))); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n\\t- report deprecation inside deprecated code : \").append(reportDeprecationInsideDeprecatedCode ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- report unused parameter when implementing abstract method : \").append(reportUnusedParameterWhenImplementingAbstract ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- report unused parameter when overriding concrete method : \").append(reportUnusedParameterWhenOverridingConcrete ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- report constructor/setter parameter hiding existing field : \").append(reportSpecialParameterHidingField ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54ab9494d33508a96585087a4a95a59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\","]}], "num": 27067}
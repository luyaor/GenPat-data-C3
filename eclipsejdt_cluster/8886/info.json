{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d832ae3ac81c5922d08c8f2f3e17210", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d4b1ce865245d09286979f806238f75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuilderTests.java", "commitBeforeChange": "bfa05a20ec0a958753843844013be5b92083b63e", "commitAfterChange": "396bb6788165ebecfca2ef8698ce00acae3946f5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void expectingSpecificProblemsFor(IPath root, Problem[] problems)", "signatureAfterChange": " \tprotected void expectingSpecificProblemsFor(IPath root, Problem[] problems)", "diff": ["+\t\t\tSystem.out.println(\"missing expected problem: \" + problem);", "-\t\t\t\tSystem.out.print(\"got pb:\t\tnew Problem(\\\"\" + pb.getLocation() + \"\\\", \\\"\" + pb.getMessage() + \"\\\", \\\"\" + pb.getResourcePath() + \"\\\"\");", "-\t\t\t\tSystem.out.print(\", \" + pb.getStart() + \", \" + pb.getEnd() +  \", \" + pb.getCategoryId());", "-\t\t\t\tSystem.out.println(\")\");", "+\t\t\t\tif (pb != null) {", "+\t\t\t\t\tSystem.out.print(\"got pb:\t\tnew Problem(\\\"\" + pb.getLocation() + \"\\\", \\\"\" + pb.getMessage() + \"\\\", \\\"\" + pb.getResourcePath() + \"\\\"\");", "+\t\t\t\t\tSystem.out.print(\", \" + pb.getStart() + \", \" + pb.getEnd() +  \", \" + pb.getCategoryId());", "+\t\t\t\t\tSystem.out.println(\")\");", "+\t\t\t\t}", "-\t\t\tassertTrue(\"missing expected problem : \" + problem, false);", "+\t\t\tassertTrue(\"missing expected problem: \" + problem, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a1458eeeea856e5a21762aba9ebe5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "e37796f522b7bb4721626cf54f6fb6424b32950c", "commitAfterChange": "cb73a34d3fbf60bb435ba470954bcb213328d377", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void expectingSpecificProblemsFor(IPath root, Problem[] problems)", "signatureAfterChange": " \tprotected void expectingSpecificProblemsFor(IPath root, Problem[] problems, boolean storeRange)", "diff": ["+\t */", "+\tprotected void expectingSpecificProblemsFor(IPath root, Problem[] problems, boolean storeRange) {", "-\t\tProblem[] rootProblems = env.getProblemsFor(root);", "+\t\tProblem[] rootProblems = env.getProblemsFor(root, storeRange);", "-\t\t\t\tSystem.out.println(\"got pb:\t\tnew Problem(\\\"\" + pb.getLocation() + \"\\\", \\\"\" + pb.getMessage() + \"\\\", \\\"\" + pb.getResourcePath() + \"\\\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\t\t\tSystem.out.print(\"got pb:\t\tnew Problem(\\\"\" + pb.getLocation() + \"\\\", \\\"\" + pb.getMessage() + \"\\\", \\\"\" + pb.getResourcePath() + \"\\\"\");", "+\t\t\t\tif (pb.getStart() != -1 && pb.getEnd() != -1)", "+\t\t\t\t\tSystem.out.print(\", \" + pb.getStart() + \", \" + pb.getEnd());", "+\t\t\t\tSystem.out.println(\")\");", "-\t\t\tassertTrue(\"missing expected problem : \" + problem, false); //$NON-NLS-1$", "+\t\t\tassertTrue(\"missing expected problem : \" + problem, false);"]}], "num": 8886}
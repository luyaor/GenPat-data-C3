{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "181bfd70db5804a6415e9c8aab05157a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25fccde19cecf0b98401617b3c12b13c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "a2d2be92ededb467e24ec541264fdd8abe9bb244", "commitAfterChange": "0325089db3ca0a8e6a36752438c4d3b535f031b0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object node)", "signatureAfterChange": "  \tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object value)", "diff": ["-\tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object node) {", "+\tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object value) {", "-\t\t\tString message= \"Can not modify a list property, use a list rewriter\"; //$NON-NLS-1$", "+\t\t\tString message = \"Can not modify a list property, use getListRewrite()\"; //$NON-NLS-1$", "+\t\tif (!RewriteEventStore.DEBUG) {", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (value == null) {", "+\t\t\tif (prop.isSimpleProperty() && ((SimplePropertyDescriptor) prop).isMandatory()", "+\t\t\t\t\t|| prop.isChildProperty() && ((ChildPropertyDescriptor) prop).isMandatory()) {", "+\t\t\t\tString message = \"Can not remove property \" + prop.getId(); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(message);", "+\t\t\t}", "+\t\t\t", "+\t\t} else {", "+\t\t\tClass valueType;", "+\t\t\tif (prop.isSimpleProperty()) {", "+\t\t\t\tSimplePropertyDescriptor p = (SimplePropertyDescriptor) prop;", "+\t\t\t\tvalueType = p.getValueType();", "+\t\t\t\tif (valueType == int.class) {", "+\t\t\t\t\tvalueType = Integer.class;", "+\t\t\t\t} else if (valueType == boolean.class) {", "+\t\t\t\t\tvalueType = Boolean.class;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tChildPropertyDescriptor p = (ChildPropertyDescriptor) prop;", "+\t\t\t\tvalueType = p.getChildType();", "+\t\t\t}", "+\t\t\tif (!valueType.isAssignableFrom(value.getClass())) {", "+\t\t\t\tString message = value.getClass().getName() + \" is not a valid type for \" + prop.getNodeClass().getName() //$NON-NLS-1$", "+\t\t\t\t\t\t+ \" property '\" + prop.getId() + '\\''; //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(message);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd3f9216e8a6f787a7661c56f9ce9ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "1a4eed4ffa5088e3ebe92ac8897cc3720d983860", "commitAfterChange": "f1f25c6cdf998a1ec590849c8e88206d0ec0f3ca", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object node)", "signatureAfterChange": "  \tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object value)", "diff": ["-\tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object node) {", "+\tprivate void validatePropertyType(StructuralPropertyDescriptor prop, Object value) {", "-\t\t\tString message= \"Can not modify a list property, use a list rewriter\"; //$NON-NLS-1$", "+\t\t\tString message = \"Can not modify a list property, use getListRewrite()\"; //$NON-NLS-1$", "+\t\tif (!RewriteEventStore.DEBUG) {", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (value == null) {", "+\t\t\tif (prop.isSimpleProperty() && ((SimplePropertyDescriptor) prop).isMandatory()", "+\t\t\t\t\t|| prop.isChildProperty() && ((ChildPropertyDescriptor) prop).isMandatory()) {", "+\t\t\t\tString message = \"Can not remove property \" + prop.getId(); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(message);", "+\t\t\t}", "+\t\t\t", "+\t\t} else {", "+\t\t\tClass valueType;", "+\t\t\tif (prop.isSimpleProperty()) {", "+\t\t\t\tSimplePropertyDescriptor p = (SimplePropertyDescriptor) prop;", "+\t\t\t\tvalueType = p.getValueType();", "+\t\t\t\tif (valueType == int.class) {", "+\t\t\t\t\tvalueType = Integer.class;", "+\t\t\t\t} else if (valueType == boolean.class) {", "+\t\t\t\t\tvalueType = Boolean.class;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tChildPropertyDescriptor p = (ChildPropertyDescriptor) prop;", "+\t\t\t\tvalueType = p.getChildType();", "+\t\t\t}", "+\t\t\tif (!valueType.isAssignableFrom(value.getClass())) {", "+\t\t\t\tString message = value.getClass().getName() + \" is not a valid type for \" + prop.getNodeClass().getName() //$NON-NLS-1$", "+\t\t\t\t\t\t+ \" property '\" + prop.getId() + '\\''; //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(message);", "+\t\t\t}", "+\t\t}"]}], "num": 28242}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2be1811f7cb501a4dd35e5652e063176", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b93f17b496718100380f51ddb02f818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "27eb09c903e84c44cba8d330978f2df5010fd35c", "commitAfterChange": "1fb602b75e740fee79145d5e2e5fdf04a9fb5ee8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testIndexing() throws CoreException", "signatureAfterChange": " \tpublic void testIndexing() throws CoreException", "diff": ["-\t\t// Measures", "-\t\tint measures = false ? MEASURES_COUNT/2 : 1;", "-\t\tfor (int i=0; i<measures; i++) {", "+\t\t// Remove project previous indexing", "+\t\tINDEX_MANAGER.removeIndexFamily(new Path(\"\"));", "+\t\tINDEX_MANAGER.reset();", "-\t\t\t// Remove project previous indexing", "-\t\t\tINDEX_MANAGER.removeIndexFamily(new Path(\"\"));", "-\t\t\tINDEX_MANAGER.reset();", "+\t\t// Clean memory", "+\t\trunGc();", "-\t\t\t// Clean memory", "-\t\t\trunGc();", "-", "-\t\t\t// Restart brand new indexing", "-\t\t\tINDEX_MANAGER.request(new Measuring(true/*start measuring*/));", "-\t\t\tfor (int j=0, length=ALL_PROJECTS.length; j<length; j++) {", "-\t\t\t\tINDEX_MANAGER.indexAll(ALL_PROJECTS[j].getProject());", "-\t\t\t}", "-\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "-", "-\t\t\t// end measure", "-\t\t\tINDEX_MANAGER.request(new Measuring(false /*end measuring*/));", "-\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\t// Restart brand new indexing", "+\t\tINDEX_MANAGER.request(new Measuring(true/*start measuring*/));", "+\t\tfor (int j=0, length=ALL_PROJECTS.length; j<length; j++) {", "+\t\t\tINDEX_MANAGER.indexAll(ALL_PROJECTS[j].getProject());", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+", "+\t\t// end measure", "+\t\tINDEX_MANAGER.request(new Measuring(false /*end measuring*/));", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d82264c0476e5e97f8497218e131015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "commitAfterChange": "193042cfcc3e974ade1d4da172a703fabd891361", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testIndexing() throws CoreException", "signatureAfterChange": " \tpublic void testIndexing() throws CoreException", "diff": ["-\t", "+", "-\t\twaitUntilIndexesReady();", "-\t\t", "-\t\t// Remove all previous indexing", "-\t\tINDEX_MANAGER.removeIndexFamily(new Path(\"\"));", "-\t\tINDEX_MANAGER.reset();", "-\t\t", "-\t\t// Clean memory", "-\t\trunGc();", "-\t", "-\t\t// Restart brand new indexing", "-\t\tINDEX_MANAGER.request(new Measuring(true/*start measuring*/));", "-\t\tfor (int i=0, length=ALL_PROJECTS.length; i<length; i++) {", "-\t\t\tINDEX_MANAGER.indexAll(ALL_PROJECTS[i].getProject());", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+", "+\t\t// Measures", "+\t\tint measures = false ? MEASURES_COUNT/2 : 1;", "+\t\tfor (int i=0; i<measures; i++) {", "+", "+\t\t\t// Remove project previous indexing", "+\t\t\tINDEX_MANAGER.removeIndexFamily(new Path(\"\"));", "+\t\t\tINDEX_MANAGER.reset();", "+", "+\t\t\t// Clean memory", "+\t\t\trunGc();", "+", "+\t\t\t// Restart brand new indexing", "+\t\t\tINDEX_MANAGER.request(new Measuring(true/*start measuring*/));", "+\t\t\tfor (int j=0, length=ALL_PROJECTS.length; j<length; j++) {", "+\t\t\t\tINDEX_MANAGER.indexAll(ALL_PROJECTS[j].getProject());", "+\t\t\t}", "+\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+", "+\t\t\t// end measure", "+\t\t\tINDEX_MANAGER.request(new Measuring(false /*end measuring*/));", "+\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\t\t", "-\t\t// Wait for indexing end", "-\t\twaitUntilIndexesReady();", "-\t\t", "+", "-\t\tINDEX_MANAGER.request(new Measuring(false /*end measuring*/));", "-\t\twaitUntilIndexesReady();", "+\t\tcommitMeasurements();", "+\t\tassertPerformance();"]}], "num": 52011}
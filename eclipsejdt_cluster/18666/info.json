{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47e072c1a47e2a29a69fc0d6ba0be807", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03cfd8948dca469c32ae18e02bcf0020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "1995deba8c96efdefeb6a6078c7e55c511780c0c", "commitAfterChange": "c0961b9d73157eff51e68a5c49ea401574d94c27", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " void recordTypeReferences(TypeBinding[] types)", "signatureAfterChange": " void recordTypeReferences(TypeBinding[] types)", "diff": ["-\tif (qualifiedReferences == null) return; // not recording dependencies", "+\tif (referencedTypes == null) return; // not recording dependencies", "-\t\tif (actualType != null)", "-\t\t\trecordQualifiedReference(actualType.isMemberType()", "-\t\t\t\t? CharOperation.splitOn('.', actualType.readableName())", "-\t\t\t\t: actualType.compoundName);", "+\t\tif (actualType != null && !referencedTypes.containsIdentical(actualType))", "+\t\t\treferencedTypes.add(actualType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccc36d6557b3127e87b1a1251b80eeec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "420aa82752ec3e926a634ee4daaacddae8a8ab80", "commitAfterChange": "f68c3205ee145ec7c1c029e73701ee13aaf91bec", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "signatureAfterChange": " \tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "diff": ["-\t\tif (methodBinding != null && !methodBinding.isValidBinding()) {", "-\t\t\t/*", "-\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=23597\r\t\t\t */", "-\t\t\tswitch(methodBinding.problemId()) {", "-\t\t\t\tcase ProblemReasons.NotVisible : ", "-\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "-\t\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\t\t\t\tif (declaringClass != null) {", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding exactBinding = declaringClass.getExactMethod(methodBinding.selector, methodBinding.parameters);", "-\t\t\t\t\t\tif (exactBinding != null) {", "-\t\t\t\t\t\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(methodBinding);", "-\t\t\t\t\t\t\tif (binding != null) {", "+\t\tif (methodBinding != null) {", "+\t\t\tif (methodBinding.isValidBinding()) {", "+\t\t\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(methodBinding);", "+\t\t\t\tif (binding != null) {", "+\t\t\t\t\treturn binding;", "+\t\t\t\t}", "+\t\t\t\tbinding = new MethodBinding(this, methodBinding);", "+\t\t\t\tthis.compilerBindingsToASTBindings.put(methodBinding, binding);", "+\t\t\t\treturn binding;", "+\t\t\t} else {", "+\t\t\t\t/*", "+\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=23597\r\t\t\t\t */", "+\t\t\t\tswitch(methodBinding.problemId()) {", "+\t\t\t\t\tcase ProblemReasons.NotVisible : ", "+\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\t\t\t\t\tif (declaringClass != null) {", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding exactBinding = declaringClass.getExactMethod(methodBinding.selector, methodBinding.parameters);", "+\t\t\t\t\t\t\tif (exactBinding != null) {", "+\t\t\t\t\t\t\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(exactBinding);", "+\t\t\t\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\t\t\t\treturn binding;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbinding = new MethodBinding(this, exactBinding);", "+\t\t\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(exactBinding, binding);", "-\t\t\t\t\t\t\tbinding = new MethodBinding(this, exactBinding);", "-\t\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(methodBinding, binding);", "-\t\t\t\t\t\t\treturn binding;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\tif (methodBinding == null || !methodBinding.isValidBinding()) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(methodBinding);", "-\t\tif (binding != null) {", "-\t\t\treturn binding;", "-\t\t}", "-\t\tbinding = new MethodBinding(this, methodBinding);", "-\t\tthis.compilerBindingsToASTBindings.put(methodBinding, binding);", "-\t\treturn binding;", "+\t\treturn null;"]}], "num": 18666}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5499d8a62e6c1407a724e4cc1b9fbeca", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15ffb2ac1787084430e6b764d9b581fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "067d4c602423adaae99e87247cc8cdbc112437d7", "commitAfterChange": "57396a418c2c0c112a60b670e887da389156bc9b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["+\t\tfinal CompilerOptions compilerOptions = this.scope.compilerOptions();", "-\t\t\tif (this.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "+\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "-\t\t\t\t", "+\t\t", "-\t\tsuper.resolveStatements(); ", "+\t\tsuper.resolveStatements();", "+\t\t", "+\t\t// TagBits.OverridingMethodWithSupercall is set during the resolveStatements() call", "+\t\tif (compilerOptions.getSeverity(CompilerOptions.OverridingMethodWithoutSuperInvocation) != ProblemSeverities.Ignore) {", "+\t\t\tif (this.binding != null) {", "+        \t\tint bindingModifiers = this.binding.modifiers;", "+        \t\tif ((bindingModifiers & (ExtraCompilerModifiers.AccOverriding|ExtraCompilerModifiers.AccImplementing)) == ExtraCompilerModifiers.AccOverriding", "+        \t\t\t\t&& (this.bits & ASTNode.OverridingMethodWithSupercall) == 0) {", "+        \t\t\tthis.scope.problemReporter().overridesMethodWithoutSuperInvocation(this.binding);", "+        \t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16dcfd5a4a4d26f7f3d4099e6ef36861", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "067d4c602423adaae99e87247cc8cdbc112437d7", "commitAfterChange": "57396a418c2c0c112a60b670e887da389156bc9b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "-\t\t\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore) {", "+\t\t\t\t\t&& compilerOptions.getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore) {", "-\t\t\t&& scope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_5 ", "+\t\t\t&& compilerOptions.complianceLevel >= ClassFileConstants.JDK1_5 ", "+\tif (receiver.isSuper() && compilerOptions.getSeverity(CompilerOptions.OverridingMethodWithoutSuperInvocation) != ProblemSeverities.Ignore) {", "+\t\tfinal ReferenceContext referenceContext = scope.methodScope().referenceContext;", "+\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\tfinal AbstractMethodDeclaration abstractMethodDeclaration = (AbstractMethodDeclaration) referenceContext;", "+\t\t\tMethodBinding enclosingMethodBinding = abstractMethodDeclaration.binding;", "+\t\t\tif (enclosingMethodBinding.isOverriding()", "+\t\t\t\t\t&& CharOperation.equals(this.binding.selector, enclosingMethodBinding.selector)", "+\t\t\t\t\t&& this.binding.areParametersEqual(enclosingMethodBinding)) {", "+\t\t\t\tabstractMethodDeclaration.bits |= ASTNode.OverridingMethodWithSupercall;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e98c799575c5afbdfc16a242d44c02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "f963317eb29ffe4dba07b023619d08ff06cca487", "commitAfterChange": "ebb9d095edde50982cd92db1efc7e45919716d7a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(Argument argument, BlockScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(Argument argument, BlockScope scope)", "diff": ["-\t\tMethodBinding binding = ((AbstractMethodDeclaration) scope.referenceContext()).binding;", "-\t\tif (binding != null) {", "-\t\t\tTypeDeclaration typeDeclaration = scope.referenceType();", "-\t\t\ttypeDeclaration.binding.resolveTypesFor(binding);", "-\t\t\tif (argument.binding != null) {", "-\t\t\t\targument.binding = new AptSourceLocalVariableBinding(argument.binding, binding);", "+\t\tReferenceContext referenceContext = scope.referenceContext();", "+\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\tMethodBinding binding = ((AbstractMethodDeclaration) referenceContext).binding;", "+\t\t\tif (binding != null) {", "+\t\t\t\tTypeDeclaration typeDeclaration = scope.referenceType();", "+\t\t\t\ttypeDeclaration.binding.resolveTypesFor(binding);", "+\t\t\t\tif (argument.binding != null) {", "+\t\t\t\t\targument.binding = new AptSourceLocalVariableBinding(argument.binding, binding);", "+\t\t\t\t}", "-\t\t}", "-\t\tif (annotations != null) {", "-\t\t\tthis.resolveAnnotations(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tannotations,", "-\t\t\t\t\targument.binding);", "+\t\t\tif (annotations != null) {", "+\t\t\t\tthis.resolveAnnotations(", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tannotations,", "+\t\t\t\t\t\targument.binding);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0232fa5b1be028824b36ffaf0786dcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "a8a3dc803188a8f412e8e9727c27a357015eb102", "commitAfterChange": "ebee92b09c2df43d9d4f2bbbd891d81bc1d00c76", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["-\t\t\tif (this.referenceBinding.scope != null) {", "-\t\t\t\tMethodScope methodScope = this.referenceBinding.scope.methodScope();", "-\t\t\t\tif (methodScope != null) {", "-\t\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "-\t\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) referenceContext;", "-\t\t\t\t\t\tMethodBinding methodBinding = methodDeclaration.binding;", "-\t\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForMethod(methodBinding.selector, methodBinding.signature());", "-\t\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "-\t\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;", "-\t\t\t\t\t}", "+\t\t\tif (this.referenceBinding instanceof LocalTypeBinding) {", "+\t\t\t\tMethodBinding methodBinding = ((LocalTypeBinding) this.referenceBinding).enclosingMethod;", "+\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForMethod(methodBinding.selector, methodBinding.signature());", "+\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "+\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;"]}], "num": 47304}
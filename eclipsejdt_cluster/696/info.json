{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b949528661f085eef6d6f0e16919757", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62101f24cada71189ceba4f078eaabbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "b026aefdcbffec474ae6cafef5ea7136332c257c", "commitAfterChange": "66b4e0bcd2caf6d10171af7fc0d24f109b7f6263", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void faultInImports()", "signatureAfterChange": " void faultInImports()", "diff": ["-\t\tif (importReference.onDemand && CharOperation.equals(JAVA_LANG, importReference.tokens)) {", "+\t\tif (importReference.onDemand && CharOperation.equals(JAVA_LANG, importReference.tokens) && !importReference.isStatic()) {", "+\t\t\tif (importReference.isStatic() && importBinding instanceof PackageBinding) {", "+\t\t\t\tproblemReporter().cannotImportPackage(importReference);", "+\t\t\t\tcontinue nextImport;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb6a8436a0eebaa3e04e3d685a8da95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementsOperation.java", "commitBeforeChange": "de1902358d63b1941a17fd54aec570fbf78d2d3e", "commitAfterChange": "a7831f00aa7162fca2867ec12502713787229e00", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tif (!isWorkingCopy) { // if unit is working copy, then save will have already fired the delta", "+\t\t\tif (!isWorkingCopy // if unit is working copy, then save will have already fired the delta", "+\t\t\t\t&& !Util.isExcluded(unit)", "+\t\t\t\t&& unit.getParent().exists()) { // if unit is working copy, then save will have already fired the delta", "-\t\t\t} // else unit is created outside classpath", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85766274adeb175d10d6a263ebcc3158", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java", "commitBeforeChange": "dec2dac6f78a5ffa915ffd3b73cb386c60b72cae", "commitAfterChange": "eead3352ceb339c6e7d1c285e537cdff0d79d4a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void executeOperation() throws JavaModelException", "signatureAfterChange": " protected void executeOperation() throws JavaModelException", "diff": ["-\t\t\t\tif (unit.getParent().exists()) {", "+\t\t\t\tif (!Util.isExcluded(unit)", "+\t\t\t\t\t\t&& unit.getParent().exists()) {", "-\t\t\t\tif (unit.getParent().exists()) {", "+\t\t\t\tif (!Util.isExcluded(unit)", "+\t\t\t\t\t\t&& unit.getParent().exists()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca5ecc9550b0b5f680f89956d9234f7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "45eeabd31b9c2797f8358a82ef28ccf00894105c", "commitAfterChange": "5d2c6921b9c27b1190136ddb9ecff1e67f94074b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\t\t\t\tif (current != null) { // non visible methods cannot be overridden so a warning is issued", "+\t\t\t\tif (current != null && !inheritedMethod.isStatic()) { // non visible methods cannot be overridden so a warning is issued", "-\t\t\t\t\t\tif (areMethodsCompatible(current[i], inheritedMethod)) {", "+\t\t\t\t\t\tif (!current[i].isStatic() && areMethodsCompatible(current[i], inheritedMethod)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd22244cca62194574862c9f305668a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "b026aefdcbffec474ae6cafef5ea7136332c257c", "commitAfterChange": "66b4e0bcd2caf6d10171af7fc0d24f109b7f6263", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAndSetImports()", "signatureAfterChange": " void checkAndSetImports()", "diff": ["-\t\tif (importReference.onDemand && CharOperation.equals(JAVA_LANG, importReference.tokens)) {", "+\t\tif (importReference.onDemand && CharOperation.equals(JAVA_LANG, importReference.tokens) && !importReference.isStatic()) {", "-\t\t\tif (!importBinding.isValidBinding())", "+\t\t\tif (!importBinding.isValidBinding() || (importReference.isStatic() && importBinding instanceof PackageBinding))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8fa3411661b249afe4b3905fb48de47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "cdbba3fe3494f2d010469af9060ef95e48842233", "commitAfterChange": "35725fdbc820b5d03438d3e4a4d3db79142d2182", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r void recordTypeReference(TypeBinding type)", "signatureAfterChange": "\r void recordTypeReference(TypeBinding type)", "diff": ["-\tif (qualifiedReferences == null) return; // we're not recording dependencies\r", "+\tif (qualifiedReferences == null) return; // not recording dependencies\r", "-\tif (!type.isBaseType()) {\r", "+\tif (!type.isBaseType() && !typeReferences.containsIdentical(type)) {\r", "+\t\ttypeReferences.add(type);\r", "-\t\t\trecordReference(actualType.isMemberType()\r", "+\t\t\trecordQualifiedReference(actualType.isMemberType()\r", "-\t\t\t\trecordTypeReference(actualType.enclosingType());\r", "+\t\t\t\trecordTypeReference(actualType.enclosingType()); // to record its supertypes\r"]}], "num": 696}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f31361fb713a52056ebfcedd604ad92", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c881eb53a4786e52d9dcd6b474d87ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void codeComplete(String codeSnippet, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " public void codeComplete(String codeSnippet, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "diff": ["+\tif (requestor == null) {", "+\t\tthrow new IllegalArgumentException(\"Completion requestor cannot be null\"); //$NON-NLS-1$", "+\t}", "+\tcodeComplete(codeSnippet, position, new CompletionRequestorWrapper(requestor), owner);", "+}", "-\t\tnew CompletionRequestorWrapper(requestor, environment.nameLookup),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "521fb15b8337da89a9bca63b4bcb6c8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "074bcf8e02160c02f4c4edb70f2f1ade7ede52b7", "commitAfterChange": "8c503d83a2dff1bb15e1f5e8ad0d9e213a2f4761", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (valueIfTrueType == NullBinding) {", "-\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = valueIfFalseType;", "-\t\t\t} else if (valueIfFalseType == NullBinding) {", "-\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = valueIfTrueType;", "-\t\t\t}", "-\t\t\tTypeBinding commonType = scope.lowerUpperBound(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\tTypeBinding commonType = null;", "+\t\t\tif (valueIfTrueType == NullBinding) {", "+\t\t\t\tcommonType = valueIfFalseType;", "+\t\t\t} else if (valueIfFalseType == NullBinding) {", "+\t\t\t\tcommonType = valueIfTrueType;", "+\t\t\t} else {", "+\t\t\t\tcommonType = scope.lowerUpperBound(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6c725078423554c13ae4758d82778e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "7b5e14fca8a5cf7d78d10afc4f2876c54b0a784d", "commitAfterChange": "c8c3d94ea6c8e6d06889654739669f82abe249ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t// resolve new path (asking for marker creation if problems)", "-\t\tJavaProject project = getProject();", "-\t\tIClasspathEntry[] newResolvedPath = ", "-\t\t\tproject.getResolvedClasspath(", "-\t\t\t\tthis.newRawPath,", "-\t\t\t\ttrue, // ignoreUnresolvedEntry", "-\t\t\t\tthis.canChangeResource);// also update cp markers", "-\t\t\t\t", "-\t\t// compute needCycleCheck bit", "-\t\tcomputeCycleCheck(this.oldResolvedPath, newResolvedPath, project.getJavaModelManager(), project);", "-", "-\t\t\tif (this.newRawPath != ReuseClasspath) updateClasspath(newResolvedPath);", "+\t\t\tif (this.newRawPath == UpdateClasspath) this.newRawPath = getProject().getRawClasspath();", "+\t\t\tif (this.newRawPath != ReuseClasspath){", "+\t\t\t\tupdateClasspath();", "+\t\t\t}"]}], "num": 34767}
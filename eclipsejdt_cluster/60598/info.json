{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28d586d9ab01ef74b9b99be94244a5fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3045f109ef2d6bb4b0b84c377768400f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void matchReportReference(Expression expr, IJavaElement element, int accuracy, int start, int end, int lastIndex, TypeBinding refBinding, MatchLocator locator) throws CoreException", "signatureAfterChange": " void matchReportReference(Expression expr, IJavaElement element, int accuracy, int start, int end, int lastIndex, TypeBinding refBinding, MatchLocator locator) throws CoreException", "diff": ["-\t\tif (refinedAccuracy == -1 || (refinedAccuracy == SearchMatch.A_ERASURE && !this.isErasureMatch)) {", "+\t\tif (refinedAccuracy == -1 || (refinedAccuracy == SearchPattern.R_ERASURE_MATCH && !this.isErasureMatch)) {", "-\t\trule |= refinedAccuracy & SearchMatch.RULE_MASK;", "-\t\trefinedAccuracy = refinedAccuracy & (~SearchMatch.RULE_MASK);", "+\t\trule |= refinedAccuracy & RULE_MASK;", "+\t\trefinedAccuracy = refinedAccuracy & (~RULE_MASK);", "-\t\trule = SearchMatch.A_ERASURE;", "+\t\trule = SearchPattern.R_ERASURE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "646e41d1f082565deb1e6b9016fa7620", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7882956f959d3c6393e0d8829373f1d0522732ab", "commitAfterChange": "5147f5a5f17d6e4dce9e06801af75e51b27b5773", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "signatureAfterChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "diff": ["+\tint superRefKind;", "+\ttry {", "+\t\tsuperRefKind = type.isClass() ? SuperTypeReferencePattern.ONLY_SUPER_CLASSES : SuperTypeReferencePattern.ALL_SUPER_TYPES;", "+\t} catch (JavaModelException e) {", "+\t\tsuperRefKind = SuperTypeReferencePattern.ALL_SUPER_TYPES;", "+\t}", "-\t\tnew SuperTypeReferencePattern(null, null, false, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "+\t\tnew SuperTypeReferencePattern(null, null, superRefKind, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);"]}], "num": 60598}
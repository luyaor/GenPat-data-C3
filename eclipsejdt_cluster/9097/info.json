{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f50ee4f7ce46bfceabdc04d90f616035", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d4f71a5dfb4de30ec20b1c9b3d4565", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/LocalVirtualMachine.java", "commitBeforeChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "commitAfterChange": "b7f468690a70977c68b74d1aeee81bdba359d238", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void cleanupTargetPath() throws TargetException", "signatureAfterChange": " protected void cleanupTargetPath() throws TargetException", "diff": ["-\t\tcleanupDirectory(new File(targetPath, LocalVMLauncher.REGULAR_CLASSPATH_DIRECTORY));", "-\t\tcleanupDirectory(new File(targetPath, LocalVMLauncher.BOOT_CLASSPATH_DIRECTORY));", "+\t\tUtil.delete(new File(targetPath, LocalVMLauncher.REGULAR_CLASSPATH_DIRECTORY));", "+\t\tUtil.delete(new File(targetPath, LocalVMLauncher.BOOT_CLASSPATH_DIRECTORY));", "-\t\t// workaround pb with Process.exitValue() that returns the process has exited, but it has not free the file yet", "+\t\t/* workaround pb with Process.exitValue() that returns the process has exited, but it has not free the file yet", "-\t\tif (file.exists()) {", "+\t\t*/", "+\t\tif (!Util.delete(file)) {", "-\t\tcleanupDirectory(new File(targetPath));", "+\t\tUtil.delete(targetPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d301c0ae1bc6295f7967d5c211f3ba2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\tint varLength = typeVariables.length;", "-\t\t\tMap collectedSubstitutes = new HashMap(varLength);", "-\t\t\tfor (int i = 0; i < varLength; i++)", "-\t\t\t\tcollectedSubstitutes.put(typeVariables[i], new TypeBinding[3][]);", "-\t\t\t", "-\t\t\tsubstitutes = new TypeBinding[varLength];", "-\t\t\tmethodSubstitute = inferFromArgumentTypes(scope, originalMethod, arguments, parameters, collectedSubstitutes, substitutes);", "+\t\t\tInferenceContext inferenceContext = new InferenceContext(originalMethod);", "+\t\t\tmethodSubstitute = inferFromArgumentTypes(scope, originalMethod, arguments, parameters, inferenceContext);", "-\t\t\tif (hasUnresolvedTypeArgument(substitutes)) {", "+\t\t\tif (inferenceContext.hasUnresolvedTypeArgument()) {", "-\t\t\t\tmethodSubstitute = methodSubstitute.inferFromExpectedType(scope, expectedType, collectedSubstitutes, substitutes);", "+\t\t\t\tmethodSubstitute = methodSubstitute.inferFromExpectedType(scope, expectedType, inferenceContext);", "-", "-\t}"]}], "num": 9097}
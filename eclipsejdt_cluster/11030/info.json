{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44b0f1fac0c060ee0846a50aebb52f61", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a9f64f83c3668b34578b3bf26d0302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "1438111baa39ba1a30117b19ff4ad6ece4a69fe1", "commitAfterChange": "a40625e8b71686fab9f6c8b263e48ade1ab498db", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "signatureAfterChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "diff": ["-\t\t\t\t// in this case we don't yet have the solution, compute it now:", "+\t\t\t\t// in this case we may not yet have the solution(?, get or compute it now:", "+\t\t\t\tSolution solution = (Solution) this.solutionsPerTargetType.get(targetType);", "-\t\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method);", "+\t\t\t\t\tif (solution != null && solution.bounds != null)", "+\t\t\t\t\t\tbounds = solution.bounds;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method.shallowOriginal());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be33233a9aaa907b4fdff0a51e655b2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6c76d390a016d2bc042688766f03adca637f8318", "commitAfterChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "signatureAfterChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "diff": ["-\t\tif ((targetType == null || !targetType.isProperType(true)) && site.getExpressionContext() == ExpressionContext.VANILLA_CONTEXT) {", "-\t\t\t// in this case we don't yet have the solution, compute it now:", "-\t\t\ttry {", "-\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method);", "-\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\treturn false;", "+\t\tif (targetType == null || !targetType.isProperType(true)) {", "+\t\t\tif (site.getExpressionContext() == ExpressionContext.VANILLA_CONTEXT) {", "+\t\t\t\t// in this case we don't yet have the solution, compute it now:", "+\t\t\t\ttry {", "+\t\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method);", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (bounds == null)", "+\t\t\t\t\treturn false;", "-\t\t\tif (bounds == null)", "-\t\t\t\treturn false;", "+\t\t} else {", "+\t\t\tSolution solution = (Solution) this.solutionsPerTargetType.get(targetType);", "+\t\t\tif (solution != null && solution.bounds != null)", "+\t\t\t\tbounds = solution.bounds;"]}], "num": 11030}
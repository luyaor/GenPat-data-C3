{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eda2e373995c8d459fbff04d601b11b7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a48c6f03cd5eb83dd97f5382c949073", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ReferenceTypeCompletionTest.java", "commitBeforeChange": "f2d453b40b80a7b4342f872cb4a2ceb30cb26035", "commitAfterChange": "ff67eddd91980875c818d1dd4c9e986c8fe296a7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testCatchClause3()", "signatureAfterChange": " public void testCatchClause3()", "diff": ["-\t\t\"  void foo() {\\n\" +", "-\t\t\"    <CompleteOnException:x.y.X>;\\n\" + ", "+\t\t\"  void foo() {\\n\" + ", "+\t\t\"    try \\n\" + ", "+\t\t\"      {\\n\" + ", "+\t\t\"        fred();\\n\" + ", "+\t\t\"      }\\n\" + ", "+\t\t\"    catch (<CompleteOnException:x.y.X>  )       {\\n\" + ", "+\t\t\"      }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1131df691587e0e6ece07304346f8aaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void testBug96237_Public03()", "signatureAfterChange": " \tpublic void testBug96237_Public03()", "diff": ["+\t\t\t\t\"}\",", "+\t\t\t\t\"comment6a/test/Valid.java\",", "+\t\t\t\t\"package comment6a.test;\\n\" + ", "+\t\t\t\t\"import comment6a.def.Test;\\n\" + ", "+\t\t\t\t\"/**\\n\" + ", "+\t\t\t\t\" * @see comment6a.def.Test.Inner\\n\" + ", "+\t\t\t\t\" */\\n\" + ", "+\t\t\t\t\"public class Valid extends Test { \\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194d912f7021692718ca0e0b6c0593bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void test050g()", "signatureAfterChange": " \tpublic void test050g()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\t<N extends B> N b(A<String> s) { return null; }\\n\" +", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "195291665e5cf5af143eb2e5f2d8d006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic void testBug96237_Private03()", "signatureAfterChange": " \tpublic void testBug96237_Private03()", "diff": ["+\t\t\t\t\"}\",", "+\t\t\t\t\"comment6a/test/Valid.java\",", "+\t\t\t\t\"package comment6a.test;\\n\" + ", "+\t\t\t\t\"import comment6a.def.Test;\\n\" + ", "+\t\t\t\t\"/**\\n\" + ", "+\t\t\t\t\" * @see comment6a.def.Test.Inner\\n\" + ", "+\t\t\t\t\" */\\n\" + ", "+\t\t\t\t\"public class Valid extends Test { \\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c06c8a04f610293b8dca610b64e3c35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tpublic void test050h()", "signatureAfterChange": " \tpublic void test050h()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tB c(A<String> s) { return null; }\\n\" +", "+\t\t\t\"\t  ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2276cf40f6606b66c5cfd8307f4b52fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 511, "methodNumberAfterChange": 534, "signatureBeforeChange": " public void testBug201064() throws CoreException", "signatureAfterChange": " public void testBug201064a_CamelCase() throws CoreException", "diff": ["-public void testBug201064() throws CoreException {", "+public void testBug201064a_CamelCase() throws CoreException {", "-\tsearchAllTypeNames(\"CCase\", SearchPattern.R_CAMEL_CASE_MATCH, collector);", "+\tsearchAllTypeNames(\"CCase\", SearchPattern.R_CAMELCASE_MATCH, collector);", "-\t\t\"CatCase (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"CxxCase (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\",", "-\t\tcollector", "-\t);", "-}", "+\t\t\"CamelCaseEntry (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" +", "+\t\t\"CamelCasexxEntry (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" +", "+\t\t\"CxxCase (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236e0d904898ce388f5db69e9cd3e25f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "10545bbf89db4e21cbdfaf0260ea872d78aa91e9", "commitAfterChange": "b2b8c809039544e3b7857112d3dba58d84cc4820", "methodNumberBeforeChange": 377, "methodNumberAfterChange": 377, "signatureBeforeChange": "\r public void testBug475746()", "signatureAfterChange": "\r public void testBug475746()", "diff": ["+\t\t\"\tpublic interface I {\\r\\n\" + \r", "+\t\t\"\t\tvoid m(int a);\\r\\n\" + \r", "+\t\t\"\t}\\r\\n\" + \r", "+\t\t\"\tpublic interface I {\\r\\n\" + \r", "+\t\t\"\t\tvoid m( int a );\\r\\n\" + \r", "+\t\t\"\t}\\r\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24f87e7513f086ba5dafcc6ceeb26a43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "f2d453b40b80a7b4342f872cb4a2ceb30cb26035", "commitAfterChange": "ff67eddd91980875c818d1dd4c9e986c8fe296a7", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void testEA_1()", "signatureAfterChange": " public void testEA_1()", "diff": ["-\t\t\"    <CompleteOnException:E>;\\n\" + ", "+\t\t\"    try \\n\" + ", "+\t\t\"      {\\n\" + ", "+\t\t\"        throw new Error();\\n\" + ", "+\t\t\"      }\\n\" + ", "+\t\t\"    catch (<CompleteOnException:E>  )       {\\n\" + ", "+\t\t\"      }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26b81f8f60a60038f4c5f547e7f11b94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 513, "methodNumberAfterChange": 540, "signatureBeforeChange": " public void testBug201064c() throws CoreException", "signatureAfterChange": " public void testBug201064g_CamelCase() throws CoreException", "diff": ["-}", "-public void testBug201064c() throws CoreException {", "-\tTypeNameMatchCollector collector = new TypeNameMatchCollector();", "-\tsearchAllTypeNames(\"CamelCase\", SearchPattern.R_CAMEL_CASE_MATCH, collector);", "-\tassertSearchResults(", "-\t\t\"CamelCase (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\",", "-\t\tcollector", "-\t);", "-}", "+}", "+public void testBug201064g_CamelCase() throws CoreException {", "+\tTypeNameMatchCollector collector = new TypeNameMatchCollector();", "+\tsearchAllTypeNames(\"CCa\", SearchPattern.R_CAMELCASE_MATCH, collector);", "+\tassertSearchResults(", "+\t\t\"CamelCase (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" + ", "+\t\t\"CamelCaseEntry (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" +", "+\t\t\"CamelCasexxEntry (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" +", "+\t\t\"CatCase (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" + ", "+\t\t\"CatCasexx (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" + ", "+\t\t\"CxxCase (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\\n\" +", "+\t\t\"CxxxxCasexx (not open) [in CamelCase.java [in b201064 [in src [in JavaSearchBugs]]]]\",", "+\t\tcollector", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32a920bf1a553abf9a8f4cb2d11beab3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void _test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\tpublic void _test020(){", "+\tpublic void test020(){", "-\t        \"[1 .class file generated]\\n\",", "+\t\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/X.java - #1/1]\\n\" + ", "+\t\t\t\"[reading    java/lang/Object.class]\\n\" + ", "+\t\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/X.java - #1/1]\\n\" + ", "+\t\t\t\"[writing    X.class - #1]\\n\" + ", "+\t\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/X.java - #1/1]\\n\" + ", "+\t\t\t\"[1 unit compiled]\\n\" + ", "+\t\t\t\"[1 .class file generated]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "330397e660c163307da47286eeb53561", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "152d18d4cacb9bd3ea7ba43af5713a4d308c0471", "commitAfterChange": "01ebf46478e499b6682d2e0eb34536c095d3cff8", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Superinterface() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Supertype() throws CoreException", "diff": ["-public void testTypeRefQualifiedAll_Superinterface() throws CoreException {", "-\tsetUpTypeRefQualifiedAll();", "-\tsearch(\"*\", TYPE, SUPERINTERFACE_TYPE_REFERENCE, getJavaSearchWorkingCopiesScope());", "-\tassertSearchResults(", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" + ", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" + ", "-\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\"", "-\t);", "-}", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends \ufffd|Exception|\ufffd implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" + ", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" + ", "+\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ac40395894d484f69f5b903a923291", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 162, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" +", "+\t\t\t\"\t     ^^^^^^^^^^^\\n\" +", "+\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47123f3e2337171672ddcc7c329fcaf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic void testBug96237_Private03()", "signatureAfterChange": " \tpublic void testBug96237_Private03()", "diff": ["+\t\t\t\t\"}\",", "+\t\t\t\t\"comment6a/test/Valid.java\",", "+\t\t\t\t\"package comment6a.test;\\n\" + ", "+\t\t\t\t\"import comment6a.def.Test;\\n\" + ", "+\t\t\t\t\"/**\\n\" + ", "+\t\t\t\t\" * @see comment6a.def.Test.Inner\\n\" + ", "+\t\t\t\t\" */\\n\" + ", "+\t\t\t\t\"public class Valid extends Test { \\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5ca4be26905b943a93d16ac8ae50e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "29183523042f1cf503573e3f636ae6c8239ce417", "commitAfterChange": "3dc9208ee3dd7ca44324c3fa1eab92bbdae38ded", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void setUpInnerClassesJar() throws IOException, CoreException", "signatureAfterChange": " private void setUpInnerClassesJar() throws IOException, CoreException", "diff": ["+\t\t\"    class WW {\\n\" +", "+\t\t\"      WW() {}\\n\" +", "+\t\t\"      class WWW {\\n\" +", "+\t\t\"        WWW() {}\\n\" +", "+\t\t\"      }\\n\" +", "+\t\t\"    }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba4f82a6108ec46487542e985d9c7f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java", "commitBeforeChange": "eb0413d7c3f6c8377e410e116826fcfccbec3365", "commitAfterChange": "7cf8a68136e90cda676cf99c112914a22eaf96cd", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test427628a()", "signatureAfterChange": " public void test427628a()", "diff": ["-\t\t\t\"The method test(((i != null) ? i.getJ() : null)) is undefined for the type X\\n\" + ", "+\t\t\t\"The method test(X.I) in the type X is not applicable for the arguments (((i != null) ? i.getJ() : null))\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\ttest(i!=null?i.getJ():null);\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X.J to X.I\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c45146b77ed1af4ce229d2f721c4f80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java", "commitBeforeChange": "f74cac509deaf512c7535f38357f0bf074e0e26d", "commitAfterChange": "4f8754b531ef7a0f61f91d095d8127db2debc51a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test015() throws Exception", "signatureAfterChange": " public void test015() throws Exception", "diff": ["-\t\t\t\"  0 : # 89 arguments: {#90,#93,#94,#95}\\n\" + ", "+\t\t\t\"  0 : # 89 invokestatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;\" + ", "+\t\t\t\"Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\\n\" + ", "+\t\t\t\"\tMethod arguments:\\n\" + ", "+\t\t\t\"\t\t#90 ()V\\n\" + ", "+\t\t\t\"\t\t#93 invokestatic X.lambda$0:()V\\n\" + ", "+\t\t\t\"\t\t#94 ()V\\n\" + ", "+\t\t\t\"\t\t#95 1\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "640aed310d8b72372dbdb116c20b642b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "commitAfterChange": "142c1803cd69a49b32423044506cd57c4ca51a87", "methodNumberBeforeChange": 774, "methodNumberAfterChange": 774, "signatureBeforeChange": " public void test768()", "signatureAfterChange": " public void test768()", "diff": ["-\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\t<T extends Y<Object>, U extends T & Z>  T foo3() { return null; }\\n\" + ", "+\t\t\"\t                                    ^\\n\" + ", "+\t\t\"Cannot specify any additional bound Z when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 5)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a98e7e0a6134677e0407cc5b4742e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 276, "methodNumberAfterChange": 276, "signatureBeforeChange": " public void testBug330313_wksp1_06_njl()", "signatureAfterChange": " public void testBug330313_wksp1_06_njl()", "diff": ["-\t\t\"\t\t\tindex = this.manager.getIndexForUpdate(this.containerPath, true,\\n\" + ", "-\t\t\"\t\t\t\t\t/* reuse index file */ true /* create if none */);\\n\" + ", "+\t\t\"\t\t\tindex = this.manager.getIndexForUpdate(this.containerPath, true, /*\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * reuse\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * index\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * file\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\\n\" + ", "+\t\t\"\t\t\t\t\ttrue /* create if none */);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ad2939868d232b40ff1bb75cae9d200", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericFieldTests.java", "commitBeforeChange": "86972da0fa080b830854fd7d7f55fff691dfd9b2", "commitAfterChange": "15a94ab3b4696b9a91478e597e9917a9f9bf6f55", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testElementPatternLocalVariables01() throws CoreException", "signatureAfterChange": " \tpublic void testElementPatternLocalVariables01() throws CoreException", "diff": ["+\t\t\t\"src/g4/v/ref/R1.java void g4.v.ref.R1.simple_name(Generic<Object>, Generic<Exception>, Generic<? extends Throwable>, Generic<? super RuntimeException>).gen_obj [gen_obj] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R1.java void g4.v.ref.R1.simple_name(Generic<Object>, Generic<Exception>, Generic<? extends Throwable>, Generic<? super RuntimeException>).gen_exc [gen_exc] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R1.java void g4.v.ref.R1.simple_name(Generic<Object>, Generic<Exception>, Generic<? extends Throwable>, Generic<? super RuntimeException>).gen_thr [gen_thr] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R1.java void g4.v.ref.R1.simple_name(Generic<Object>, Generic<Exception>, Generic<? extends Throwable>, Generic<? super RuntimeException>).gen_run [gen_run] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bfc06dbd45b106c2e8a64700d512a29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 201, "signatureBeforeChange": " public void test0507_try_finally()", "signatureAfterChange": " public void test0507_try_finally()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tif (o == null) {\\n\" + ", "+\t\t\"      o = new Object();\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "723912e8fafb86ab1fa17b2d01c64f26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericFieldTests.java", "commitBeforeChange": "86972da0fa080b830854fd7d7f55fff691dfd9b2", "commitAfterChange": "15a94ab3b4696b9a91478e597e9917a9f9bf6f55", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testElementPatternLocalVariables07() throws CoreException", "signatureAfterChange": " \tpublic void testElementPatternLocalVariables07() throws CoreException", "diff": ["+\t\t\t\"src/g4/v/ref/R4.java void g4.v.ref.R4.qualified_name(g1.t.s.def.Generic<Object>.Member, g1.t.s.def.Generic<Exception>.Member, g1.t.s.def.Generic<? extends Throwable>.Member, g1.t.s.def.Generic<? super RuntimeException>.Member).gen_obj [gen_obj] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R4.java void g4.v.ref.R4.qualified_name(g1.t.s.def.Generic<Object>.Member, g1.t.s.def.Generic<Exception>.Member, g1.t.s.def.Generic<? extends Throwable>.Member, g1.t.s.def.Generic<? super RuntimeException>.Member).gen_exc [gen_exc] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R4.java void g4.v.ref.R4.qualified_name(g1.t.s.def.Generic<Object>.Member, g1.t.s.def.Generic<Exception>.Member, g1.t.s.def.Generic<? extends Throwable>.Member, g1.t.s.def.Generic<? super RuntimeException>.Member).gen_thr [gen_thr] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R4.java void g4.v.ref.R4.qualified_name(g1.t.s.def.Generic<Object>.Member, g1.t.s.def.Generic<Exception>.Member, g1.t.s.def.Generic<? extends Throwable>.Member, g1.t.s.def.Generic<? super RuntimeException>.Member).gen_run [gen_run] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b06bc261cb02f727a1fbab2bab011c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 370, "signatureBeforeChange": "  public void test1031()", "signatureAfterChange": "  public void test1031()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"\tif (a == null) {\\n\" + ", "+\t\t\"      System.out.println();\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8010eb65a97625da2fcdcca44fe78b93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void testBug96237_Public03()", "signatureAfterChange": " \tpublic void testBug96237_Public03()", "diff": ["+\t\t\t\t\"}\",", "+\t\t\t\t\"comment6a/test/Valid.java\",", "+\t\t\t\t\"package comment6a.test;\\n\" + ", "+\t\t\t\t\"import comment6a.def.Test;\\n\" + ", "+\t\t\t\t\"/**\\n\" + ", "+\t\t\t\t\" * @see comment6a.def.Test.Inner\\n\" + ", "+\t\t\t\t\" */\\n\" + ", "+\t\t\t\t\"public class Valid extends Test { \\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c170acab40eddd9727d9182baeabaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "29183523042f1cf503573e3f636ae6c8239ce417", "commitAfterChange": "3dc9208ee3dd7ca44324c3fa1eab92bbdae38ded", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void testInnerClass1() throws JavaModelException", "signatureAfterChange": " public void testInnerClass1() throws JavaModelException", "diff": ["+\t\t\"    class WW {\\n\" + ", "+\t\t\"      WW() {}\\n\" + ", "+\t\t\"      class WWW {\\n\" + ", "+\t\t\"        WWW() {}\\n\" + ", "+\t\t\"      }\\n\" + ", "+\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8884924e521c710986ec92912f0a1e30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "afd9d4680c771ea3305bd1c2231ace193ccd313f", "commitAfterChange": "b403420c651fc8995a4c44cff2ecebab69cc0fa2", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  public void test061() throws JavaModelException", "signatureAfterChange": "  public void test061() throws JavaModelException", "diff": ["-\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), [116, 145], 21}\\n\" + ", "-\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, [116, 145], 21}\"", "+\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), [116, 145], \"+R_DICUNR+\"}\\n\" + ", "+\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, [116, 145], \"+R_DICUNR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "902fc81b3987d78c1806d44b0d73ef7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "e87e98cf60c0ad7673fccbc25120f5081987bb3d", "commitAfterChange": "0592ec3e1f1d98387552b799ec4dbe7681f59514", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void test072()", "signatureAfterChange": " \tpublic void test072()", "diff": ["-\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"public abstract class X {\\n\" + ", "+\t\t\t\"\tnative void foo11();\\n\" +", "+\t\t\t\"\tabstract String foo12();\\n\" +", "-\t\t\t\"public class X extends java.lang.Object {\\n\" + ", "+\t\t\t\"public abstract class X extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  native void foo11();\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  abstract java.lang.String foo12();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f044e89381f96af7f61a420cf09d081", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 228, "signatureBeforeChange": " public void testEnum01() throws CoreException", "signatureAfterChange": " \tpublic void testEnum01() throws CoreException", "diff": ["- */", "-public void testEnum01() throws CoreException {", "-\tIType type = getCompilationUnit(\"JavaSearch15\", \"src\", \"e1\", \"T.java\").getType(\"T\");", "-\tsearch(type, REFERENCES, getJavaSearchScope15(), this.resultCollector);", "-\tassertSearchResults(", "-\t\t\"src/e1/X.java [e1.T]\\n\" + ", "-\t\t\"src/e1/X.java void e1.X.main(String[]) [T]\\n\" + ", "-\t\t\"src/e1/X.java void e1.X.main(String[]) [T]\\n\" + ", "-\t\t\"src/e1/X.java Location e1.X.location(T) [T]\",", "-\t\tthis.resultCollector);", "-}", "+\t */", "+\tpublic void testEnum01() throws CoreException {", "+\t\tIType type = getCompilationUnit(\"JavaSearch15\", \"src\", \"e1\", \"Team.java\").getType(\"Team\");", "+\t\tsearch(type, REFERENCES, getJavaSearchScope15(), this.resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\"src/a1/Author.java [e1.Team]\\n\" + ", "+\t\t\t\"src/a1/Author.java [e1.Team]\\n\" + ", "+\t\t\t\"src/a1/Author.java Team[] a1.Author.name() [Team]\\n\" + ", "+\t\t\t\"src/a1/Test.java [e1.Team]\\n\" + ", "+\t\t\t\"src/e1/Test.java void e1.Test.main(String[]) [Team]\\n\" + ", "+\t\t\t\"src/e1/Test.java void e1.Test.main(String[]) [Team]\\n\" + ", "+\t\t\t\"src/e1/Test.java Location e1.Test.location(Team) [Team]\",", "+\t\t\tthis.resultCollector);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a09f1604ae35d6d2fa4babb9b13a1b64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "bd9b00bcf9923b9da6ff38651a157fa6bc3f2dc8", "commitAfterChange": "ff2b96761b3897e8f6c8feeb8c31198c182dd190", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 439, "signatureBeforeChange": " public void testBug304416() throws Exception", "signatureAfterChange": " public void testBug304416() throws Exception", "diff": ["-\t\t\"     5  ifnull 12\\n\" + ", "+\t\t\"     5  ifnull 26\\n\" + ", "-\t\t\"     9  ifnull 12\\n\" + ", "-\t\t\"    12  return\\n\";", "+\t\t\"     9  ifnull 26\\n\" + ", "+\t\t\"    12  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    15  aload_1 [s]\\n\" + ", "+\t\t\"    16  invokevirtual java.io.PrintStream.println(java.lang.String) : void [22]\\n\" + ", "+\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    22  aload_2 [s2]\\n\" + ", "+\t\t\"    23  invokevirtual java.io.PrintStream.println(java.lang.String) : void [22]\\n\" + ", "+\t\t\"    26  return\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a47da67dde7ebf382675e1b063511a07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug96237_Private03()", "signatureAfterChange": " \tpublic void testBug96237_Private03()", "diff": ["+\t\t\t\t\"}\",", "+\t\t\t\t\"comment6a/test/Valid.java\",", "+\t\t\t\t\"package comment6a.test;\\n\" + ", "+\t\t\t\t\"import comment6a.def.Test;\\n\" + ", "+\t\t\t\t\"/**\\n\" + ", "+\t\t\t\t\" * @see comment6a.def.Test.Inner\\n\" + ", "+\t\t\t\t\" */\\n\" + ", "+\t\t\t\t\"public class Valid extends Test { \\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac7ae150dcd03c35954b81859d6751cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "152d18d4cacb9bd3ea7ba43af5713a4d308c0471", "commitAfterChange": "01ebf46478e499b6682d2e0eb34536c095d3cff8", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void testTypeRefAll_Superinterface() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Supertype() throws CoreException", "diff": ["-public void testTypeRefAll_Superinterface() throws CoreException {", "-\tsetUpTypeRefAll();", "-\tsearch(\"*\", TYPE, SUPERINTERFACE_TYPE_REFERENCE, getJavaSearchWorkingCopiesScope());", "-\tassertSearchResults(", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" + ", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" + ", "-\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\"", "-\t);", "-}", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends \ufffd|Exception|\ufffd implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" + ", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" + ", "+\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af6e39cc2f4af249a4ffef49bfe6d20b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test010a()", "signatureAfterChange": " public void test010a()", "diff": ["-\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" +", "-\t\t\"\tstatic <L2 extends ErrorListener & Listener> Object createParser(L2 l) { return null; }\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\"\tstatic <L1 extends Listener & ErrorListener> Object createParser(L1 l) { return null; }\\n\" +", "+\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Method createParser(L1) has the same erasure createParser(X.Listener) as another method in type X\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "+\t\t\"\tstatic <L2 extends ErrorListener & Listener> Object createParser(L2 l) { return null; }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c58692c5061f8da976466aacb4d9d100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericFieldTests.java", "commitBeforeChange": "86972da0fa080b830854fd7d7f55fff691dfd9b2", "commitAfterChange": "15a94ab3b4696b9a91478e597e9917a9f9bf6f55", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testElementPatternLocalVariables03() throws CoreException", "signatureAfterChange": " \tpublic void testElementPatternLocalVariables03() throws CoreException", "diff": ["+\t\t\t\"src/g4/v/ref/R2.java void g4.v.ref.R2.qualified_name(g1.t.s.def.NonGeneric.GenericMember<Object>, g1.t.s.def.NonGeneric.GenericMember<Exception>, g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>, g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>).gen_obj [gen_obj] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R2.java void g4.v.ref.R2.qualified_name(g1.t.s.def.NonGeneric.GenericMember<Object>, g1.t.s.def.NonGeneric.GenericMember<Exception>, g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>, g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>).gen_exc [gen_exc] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R2.java void g4.v.ref.R2.qualified_name(g1.t.s.def.NonGeneric.GenericMember<Object>, g1.t.s.def.NonGeneric.GenericMember<Exception>, g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>, g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>).gen_thr [gen_thr] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R2.java void g4.v.ref.R2.qualified_name(g1.t.s.def.NonGeneric.GenericMember<Object>, g1.t.s.def.NonGeneric.GenericMember<Exception>, g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>, g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>).gen_run [gen_run] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d52dddfdcb3d6be7bbf7ad2cd5fdb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void test0306_if_else()", "signatureAfterChange": " public void test0306_if_else()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) {\\n\" + ", "+\t\t\"        // do nothing\\n\" + ", "+\t\t\"      }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb6a79b89ed4126bf520a634c115534", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void test098()", "signatureAfterChange": " public void test098()", "diff": ["-\t\t\"\",", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\t} else {\t\\n\" + ", "+\t\t\"\t\tSystem.out.println(\\\"unreachable inner class = \\\" + new Object() {}.getClass());\t\\n\" + ", "+\t\t\"\t\t}\t\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e871737f8f9c6043bbd557a23314f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug96237_Public03()", "signatureAfterChange": " \tpublic void testBug96237_Public03()", "diff": ["+\t\t\t\t\"}\",", "+\t\t\t\t\"comment6a/test/Valid.java\",", "+\t\t\t\t\"package comment6a.test;\\n\" + ", "+\t\t\t\t\"import comment6a.def.Test;\\n\" + ", "+\t\t\t\t\"/**\\n\" + ", "+\t\t\t\t\" * @see comment6a.def.Test.Inner\\n\" + ", "+\t\t\t\t\" */\\n\" + ", "+\t\t\t\t\"public class Valid extends Test { \\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6cd3aecd370ea55ad44bbf9a51a8867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericFieldTests.java", "commitBeforeChange": "86972da0fa080b830854fd7d7f55fff691dfd9b2", "commitAfterChange": "15a94ab3b4696b9a91478e597e9917a9f9bf6f55", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testElementPatternLocalVariables05() throws CoreException", "signatureAfterChange": " \tpublic void testElementPatternLocalVariables05() throws CoreException", "diff": ["+\t\t\t\"src/g4/v/ref/R3.java void g4.v.ref.R3.simple_name(Generic<Object>.MemberGeneric<Object>, Generic<Exception>.MemberGeneric<Exception>, Generic<? extends Throwable>.MemberGeneric<? extends Throwable>, Generic<? super RuntimeException>.MemberGeneric<? super RuntimeException>).gen_obj [gen_obj] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R3.java void g4.v.ref.R3.simple_name(Generic<Object>.MemberGeneric<Object>, Generic<Exception>.MemberGeneric<Exception>, Generic<? extends Throwable>.MemberGeneric<? extends Throwable>, Generic<? super RuntimeException>.MemberGeneric<? super RuntimeException>).gen_exc [gen_exc] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R3.java void g4.v.ref.R3.simple_name(Generic<Object>.MemberGeneric<Object>, Generic<Exception>.MemberGeneric<Exception>, Generic<? extends Throwable>.MemberGeneric<? extends Throwable>, Generic<? super RuntimeException>.MemberGeneric<? super RuntimeException>).gen_thr [gen_thr] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g4/v/ref/R3.java void g4.v.ref.R3.simple_name(Generic<Object>.MemberGeneric<Object>, Generic<Exception>.MemberGeneric<Exception>, Generic<? extends Throwable>.MemberGeneric<? extends Throwable>, Generic<? super RuntimeException>.MemberGeneric<? super RuntimeException>).gen_run [gen_run] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d24d68746b2a32ecdbb98340a0b92c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumDietRecoveryTest.java", "commitBeforeChange": "7a8728f6d81c28d6bb26a6aa19e5258c1824c75b", "commitAfterChange": "58d1213fc33b8c0012fb5fd98a7e0347bfcceca1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void test0001()", "signatureAfterChange": "  public void test0001()", "diff": ["+\t\t\"  <clinit>() {\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"  <clinit>() {\\n\" + ", "+\t\t\"  }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3e178206f92b058cd128f502063efd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tpublic void test0033()", "signatureAfterChange": "  \tpublic void test0033()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tvoid foo(E e){}\\n\" +", "+\t\t\t\"\t     ^^^^^^^^\\n\" +", "+\t\t\t\"Method foo(E) has the same erasure foo(Object) as another method in type X<E,T>\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf01ad2381f4c13219b1757820b9e50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void test001()", "signatureAfterChange": "  public void test001()", "diff": ["-\t\"----------\\n\" +", "-\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\"\tpublic String foo(int i) {\\n\" +", "-\t\"\t              ^^^^^^^^^^\\n\" +", "-\t\"This method must return a result of type String\\n\" +", "+\t\"----------\\n\" + ", "+\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\"\tpublic String foo(int i) {\\n\" + ", "+\t\"\t              ^^^^^^^^^^\\n\" + ", "+\t\"This method must return a result of type String\\n\" + ", "+\t\"----------\\n\" + ", "+\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\"\tif (i > 0) {\\n\" + ", "+\t\"\t\t\treturn null;\\n\" + ", "+\t\"\t\t}\\n\" + ", "+\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5529fc5a3d09d7be83fb3c085028906", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tpublic void test0034()", "signatureAfterChange": "  \tpublic void test0034()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tvoid foo(E e){}\\n\" +", "+\t\t\t\"\t     ^^^^^^^^\\n\" +", "+\t\t\t\"Method foo(E) has the same erasure foo(Exception) as another method in type X<E,T>\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +"]}], "num": 29577}
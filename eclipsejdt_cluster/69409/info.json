{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85b725b468f401cfd476dfd6bdf6d25c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24b985556e57ea5f45543c584a2507fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d2eb21aa89935901dbdadab7e4f2ef196739750b", "commitAfterChange": "32876c0bd309ef116b634cd21181153eca601c1f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r protected void traverseDelta(IResourceDelta delta, Openable parentElement)", "signatureAfterChange": "\r \tprotected void traverseDelta(IResourceDelta delta, Openable parentElement)", "diff": ["+\t */\r", "+\tprotected void traverseDelta(IResourceDelta delta, Openable parentElement) {\r", "+\r", "+\t\tOpenable[] elements = this.createElements(delta.getResource());\r", "+\t\tOpenable element = null;\r", "+\t\tint flags = delta.getFlags();\r", "+\t\tfProcessChildren = true;\r", "+\t\tif (elements != null) {\r", "+\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "+\t\t\t\telement = elements[i];\r", "+\t\t\t\tIResource res = delta.getResource();\r", "+\r", "+\t\t\t\tupdateIndex(element, delta);\r", "+\t\t\t\tswitch (delta.getKind()) {\r", "+\t\t\t\t\tcase IResourceDelta.ADDED :\r", "+\t\t\t\t\t\tPackageFragmentRoot pkgRoot;\r", "+\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "+\t\t\t\t\t\t\t&& parentElement != null\r", "+\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "+\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "+\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "+\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\telementAdded(element, delta);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IResourceDelta.REMOVED :\r", "+\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "+\t\t\t\t\t\t\t&& parentElement != null\r", "+\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "+\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "+\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "+\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\telementRemoved(element, delta);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IResourceDelta.CHANGED :\r", "+\t\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {\r", "+\t\t\t\t\t\t\tcontentChanged(element, delta);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\t\t\t\tres = delta.getResource();\r", "+\t\t\t\t\t\t\tif (isOpen(res)) {\r", "+\t\t\t\t\t\t\t\telementOpened(element, delta);\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\telementClosed(element, delta);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\ttry {\r", "+\t\t\t\tif (parentElement != null && delta.getResource() != null) {\r", "+\t\t\t\t\tswitch (delta.getResource().getType()) {\r", "+\t\t\t\t\t\tcase IResource.FILE :\r", "+\t\t\t\t\t\tcase IResource.FOLDER :\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "+\t\t\t\t\t}\r", "+\t\t}\r", "+\t\tif (fProcessChildren) {\r", "+\t\t\tIResourceDelta[] children = delta.getAffectedChildren();\r", "+\t\t\tfor (int i = 0; i < children.length; i++) {\r", "+\t\t\t\ttraverseDelta(children[i], element);\r", "+\t\t\t}\r", "- */\r", "-protected void traverseDelta(IResourceDelta delta, Openable parentElement) {\r", "-\tOpenable[] elements = this.createElements(delta.getResource());\r", "-\tOpenable element = null;\r", "-\tint flags = delta.getFlags();\r", "-\tfProcessChildren = true;\r", "-\tif (elements != null) {\r", "-\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\telement = elements[i];\r", "-\t\t\tIResource res = delta.getResource();\r", "-\t\t\tupdateIndex(element, delta);\r", "-\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\tcase IResourceDelta.ADDED:\r", "-\t\t\t\t\tPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\tif (res.getType() == IResource.FILE \r", "-\t\t\t\t\t\t&& parentElement != null \r", "-\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){\r", "-\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\telementAdded(element, delta);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IResourceDelta.REMOVED:\r", "-\t\t\t\t\tif (res.getType() == IResource.FILE \r", "-\t\t\t\t\t\t&& parentElement != null \r", "-\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){\r", "-\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\telementRemoved(element, delta);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IResourceDelta.CHANGED:\r", "-\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {\r", "-\t\t\t\t\t\tcontentChanged(element, delta);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t\t\tres = delta.getResource();\r", "-\t\t\t\t\t\tif (isOpen(res)) {\r", "-\t\t\t\t\t\t\telementOpened(element, delta);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\telementClosed(element, delta);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\ttry {\r", "-\t\t\tif (parentElement != null && delta.getResource() != null) {\r", "-\t\t\t\tswitch (delta.getResource().getType()) {\r", "-\t\t\t\t\tcase IResource.FILE:\r", "-\t\t\t\t\tcase IResource.FOLDER:\r", "-\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t}\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\t// do nothing\r", "-\t\t}\r", "-\t\t\t\r", "-\t\t// checked for a moved root - the factory cannot create elements for roots not specified\r", "-\t\t// on the classpath.\r", "-\t\tif (delta.getKind() == IResourceDelta.ADDED &&\r", "-\t\t\t((flags & IResourceDelta.MOVED_FROM) > 1)) {\r", "-\t\t\t\tIProject project = delta.getResource().getProject();\r", "-\t\t\t\tif (project != null) {\r", "-\t\t\t\t\tJavaProject jp = (JavaProject)JavaCore.create(project);\r", "-\t\t\t\t\tif (jp != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tIClasspathEntry oldEntry = jp.getClasspathEntryFor(delta.getMovedFromPath());\r", "-\t\t\t\t\t\t\tif (oldEntry != null) {\r", "-\t\t\t\t\t\t\t\tIClasspathEntry newEntry = newClasspathEntry(jp, oldEntry, delta.getResource().getFullPath());\r", "-\t\t\t\t\t\t\t\taddClasspathEntry(jp, oldEntry, newEntry);\r", "-\t\t\t\t\t\t\t\t// now the factory can create the root.\r", "-\t\t\t\t\t\t\t\telement = (Openable)JavaCore.create(delta.getResource());\r", "-\t\t\t\t\t\t\t\telementAdded(element, delta);\r", "-\t\t\t\t\t\t\t\tJavaElementDelta rootDelta = fCurrentDelta.find(element);\r", "-\t\t\t\t\t\t\t\trootDelta.setFlags(rootDelta.getFlags() | IJavaElementDelta.F_ADDED_TO_CLASSPATH);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t\t// nothing\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t}\r", "-\tif (fProcessChildren) {\r", "-\t\tIResourceDelta[] children = delta.getAffectedChildren();\r", "-\t\tfor (int i = 0; i < children.length; i++) {\r", "-\t\t\ttraverseDelta(children[i], element);\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298a4fd311c738a3dff65b23c5deb932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected void traverseDelta(IResourceDelta delta, Openable parentElement)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "diff": ["-\tprotected void traverseDelta(IResourceDelta delta, Openable parentElement) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {\r", "-\t\tOpenable[] elements = this.createElements(delta.getResource());\r", "+\t\tIResource res = delta.getResource();\r", "+\t\tboolean isOnClasspath = this.isOnClasspath(classpath, res);\r", "+\t\t\r", "-\t\tint flags = delta.getFlags();\r", "-\t\tif (elements != null) {\r", "-\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\t\telement = elements[i];\r", "-\t\t\t\tIResource res = delta.getResource();\r", "-\r", "-\t\t\t\tupdateIndex(element, delta);\r", "-\t\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\t\tcase IResourceDelta.ADDED :\r", "-\t\t\t\t\t\tPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "-\t\t\t\t\t\t\t&& parentElement != null\r", "-\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "-\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "-\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\telementAdded(element, delta);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.REMOVED :\r", "-\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "-\t\t\t\t\t\t\t&& parentElement != null\r", "-\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "-\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "-\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\telementRemoved(element, delta);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.CHANGED :\r", "-\t\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {\r", "-\t\t\t\t\t\t\tcontentChanged(element, delta);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t\t\t\tres = delta.getResource();\r", "-\t\t\t\t\t\t\tif (isOpen(res)) {\r", "-\t\t\t\t\t\t\t\telementOpened(element, delta);\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\telementClosed(element, delta);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\tJavaProject project = null;\r", "+\t\tif (isOnClasspath) {\r", "+\t\t\tOpenable[] elements = this.createElements(res);\r", "+\t\t\tif (elements != null) {\r", "+\t\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "+\t\t\t\t\telement = elements[i];\r", "+\t\t\t\t\tthis.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn false;\r", "-\t\t\ttry {\r", "-\t\t\t\tif (parentElement != null && delta.getResource() != null) {\r", "-\t\t\t\t\tswitch (delta.getResource().getType()) {\r", "-\t\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t}\r", "+\t\t\tif (res instanceof IProject) {\r", "+\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create((IProject)res);\r", "+\t\t\t\tif (project == null) return false; // not a Java project\r", "+\t\t\t\tthis.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\tif (delta.getKind() != IResourceDelta.CHANGED \r", "+\t\t\t\t\t\t|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\t\treturn false; // don't go deeper for added, removed, opened or closed projects\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// do nothing\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tclasspath = project.getExpandedClasspath(true);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t// if classpath is known, we are for sure out of classpath: stop processing children\r", "+\t\t\t\tfProcessChildren = classpath != null;\r", "-\t\t\tfor (int i = 0; i < children.length; i++) {\r", "-\t\t\t\ttraverseDelta(children[i], element);\r", "+\t\t\tboolean oneChildOnClasspath = false;\r", "+\t\t\tint length = children.length;\r", "+\t\t\tIResourceDelta[] orphanChildren = new IResourceDelta[length];\r", "+\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\tIResourceDelta child = children[i];\r", "+\t\t\t\tif (!traverseDelta(child, isOnClasspath ? null : classpath)) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tif (isOnClasspath) { \r", "+\t\t\t\t\t\t\t// add child as non java resource if current element on classpath\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(element, child);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\torphanChildren[i] = child;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\toneChildOnClasspath = true;\r", "+\t\t\t\t}\r", "+\t\t\tif (oneChildOnClasspath || project != null) {\r", "+\t\t\t\t// add orphan children (case of non java resources under project)\r", "+\t\t\t\tif (project == null) {\r", "+\t\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\t}\r", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (orphanChildren[i] != null) {\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}", "+\t\t\t\t}\r", "+\t\t\t} // else resource delta will be added by parent\r", "+\t\t\treturn isOnClasspath || oneChildOnClasspath;\r", "+\t\t} else {\r", "+\t\t\treturn isOnClasspath && element != null; // element is null if non-java resource in package\r"]}], "num": 69409}
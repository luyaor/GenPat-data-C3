{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21aa5080543fac9e968ddbd69bdff4ec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e68e1fc41239734f95d30af39f27e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7ecaef5de16e38a10853a04df519c7ec4f9241fc", "commitAfterChange": "69abb8d1d00eb0a16e17263935c45f1044354687", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t} else if (genericTypeArguments != null) {", "+\t\t} else if (genericTypeArguments != null && compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred) {", "+\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred)", "-\t\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);", "-\t\t\t\t}", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "+\t\t\t} else if (!method.isOverriding() || !isOverriddenMethodGeneric(method)) {", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3355069b0e67d1b616bb313fab63a388", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "signatureAfterChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "diff": ["-\tProblemReporter reporter = scope.problemReporter();", "-\tif ((reporter.computeSeverity(IProblem.RedundantSpecificationOfTypeArguments) == ProblemSeverities.Ignore) || scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_7) return;", "+\tif ((scope.problemReporter().computeSeverity(IProblem.RedundantSpecificationOfTypeArguments) == ProblemSeverities.Ignore) || scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_7) return;", "-\t\t\t\treporter.redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);", "+\t\t\t\tscope.problemReporter().redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);", "-\t\tinferredTypes = inferElidedTypes(allocationType.genericType(), enclosingType, argumentTypes, scope);", "+\t\tinferredTypes = inferElidedTypes(allocationType, enclosingType, argumentTypes, scope);", "-\treporter.redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);", "+\tscope.problemReporter().redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);"]}], "num": 18615}
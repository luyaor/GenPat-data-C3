{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c83f91955c58c42a205ea6200ef050a4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cd573937d1bea650356af67292023f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected static char[] createTypeDeclaration(char[] packageName, char[][] enclosingTypeNames, char[] typeName, boolean isClass)", "signatureAfterChange": " public static TypeDeclarationPattern getTypeDeclarationRecord()", "diff": ["+public static TypeDeclarationPattern getTypeDeclarationRecord() {", "+\treturn (TypeDeclarationPattern)indexRecord.get();", "- */", "-protected static char[] createTypeDeclaration(char[] packageName, char[][] enclosingTypeNames, char[] typeName, boolean isClass) {", "-\tint packageLength = packageName == null ? 0 : packageName.length;", "-\tint enclosingTypeNamesLength = 0;", "-\tif (enclosingTypeNames != null)", "-\t\tfor (int i = 0, length = enclosingTypeNames.length; i < length; i++)", "-\t\t\tenclosingTypeNamesLength += enclosingTypeNames[i].length + 1;", "-\tint pos = TYPE_DECL_LENGTH;", "-\tchar[] result = new char[pos + packageLength + typeName.length + enclosingTypeNamesLength + 4];", "-\tSystem.arraycopy(TYPE_DECL, 0, result, 0, pos);", "-\tresult[pos++] = isClass ? CLASS_SUFFIX : INTERFACE_SUFFIX;", "-\tresult[pos++] = SEPARATOR;", "-\tif (packageLength > 0) {", "-\t\tSystem.arraycopy(packageName, 0, result, pos, packageLength);", "-\t\tpos += packageLength;", "-\t}", "-\tresult[pos++] = SEPARATOR;", "-\tSystem.arraycopy(typeName, 0, result, pos, typeName.length);", "-\tpos += typeName.length;", "-\tresult[pos++] = SEPARATOR;", "-\tif (enclosingTypeNames != null) {", "-\t\tfor (int i = 0, length = enclosingTypeNames.length; i < length; i++) {", "-\t\t\tint enclosingTypeNameLength = enclosingTypeNames[i].length;", "-\t\t\tSystem.arraycopy(enclosingTypeNames[i], 0, result, pos, enclosingTypeNameLength);", "-\t\t\tpos += enclosingTypeNameLength;", "-\t\t\tresult[pos++] = SEPARATOR;", "-\t\t}", "-\t}", "-\treturn result;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da5b8265888166aaf01f18a84351f3a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static char[] createMethodSignature( \t\tchar[][] parameterTypes, \t\tchar[] returnType, \t\tchar[][] formalTypeParameters, \t\tchar[][] thrownExceptions)", "signatureAfterChange": " public static char[] createMethodSignature(char[][] parameterTypes, char[] returnType)", "diff": ["-public static char[] createMethodSignature(", "-\t\tchar[][] parameterTypes,", "-\t\tchar[] returnType,", "-\t\tchar[][] formalTypeParameters,", "-\t\tchar[][] thrownExceptions) {", "-\tint formalTypeParameterCount = formalTypeParameters.length;", "-\tint formalTypeLength = 0;", "-\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "-\t\tformalTypeLength += formalTypeParameters[i].length;", "-\t}", "-\tint parameterTypesCount = parameterTypes.length;", "+public static char[] createMethodSignature(char[][] parameterTypes, char[] returnType) {", "+\tint parameterTypesLength = parameterTypes.length;", "-\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\tfor (int i = 0; i < parameterTypesLength; i++) {", "+\t\t", "-\tint thrownExceptionsCount = thrownExceptions.length;", "-\tint exceptionsLength = 0;", "-\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "-\t\texceptionsLength += thrownExceptions[i].length;", "-\t}", "-\tint extras = 2; // \"(\" and \")\"", "-\tif (formalTypeParameterCount > 0) {", "-\t\textras += 2;   // \"<\" and \">\"", "-\t}", "-\tif (thrownExceptionsCount > 0) {", "-\t\textras += thrownExceptionsCount;   // one \"^\" per", "-\t}", "-\tchar[] result = new char[extras+ formalTypeLength + parameterLength + returnTypeLength + exceptionsLength];", "-\tint index = 0;", "-\tif (formalTypeParameterCount > 0) {", "-\t\tresult[index++] = C_GENERIC_START;", "-\t\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "-\t\t\tchar[] formalTypeParameter = formalTypeParameters[i];", "-\t\t\tint length = formalTypeParameter.length;", "-\t\t\tSystem.arraycopy(formalTypeParameter, 0, result, index, length);", "-\t\t\tindex += length;", "-\t\t}", "-\t\tresult[index++] = C_GENERIC_END;", "-\t}", "-\tresult[index++] = C_PARAM_START;", "-\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\tchar[] result = new char[1 + parameterLength + 1 + returnTypeLength];", "+\tresult[0] = C_PARAM_START;", "+\tint index = 1;", "+\tfor (int i = 0; i < parameterTypesLength; i++) {", "-\tresult[index++] = C_PARAM_END;", "-\tSystem.arraycopy(returnType, 0, result, index, returnTypeLength);", "-\tindex += returnTypeLength;", "-\tif (thrownExceptionsCount > 0) {", "-\t\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "-\t\t\tresult[index++] = C_THROWS;", "-\t\t\tchar[] thrownException = thrownExceptions[i];", "-\t\t\tint length = thrownException.length;", "-\t\t\tSystem.arraycopy(thrownException, 0, result, index, length);", "-\t\t\tindex += length;", "-\t\t}", "-\t}", "+\tresult[index] = C_PARAM_END;", "+\tSystem.arraycopy(returnType, 0, result, index+1, returnTypeLength);"]}], "num": 33736}
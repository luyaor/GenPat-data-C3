{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21dbbe2ac4e2cb05fe9074860706736f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c2690b8a012e5dbbbf4ca54b21c5416", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "70a6b9aa4e057d5f0e7a85fe2e732742f959e609", "commitAfterChange": "41f1557c0254631588fe2b45835fb41deba624e6", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void _test013()", "signatureAfterChange": " \tpublic void _test013()", "diff": ["-\t\t\t\t\"1 problem (1 error)\"", "-, ", "+\t\t\t\t\"1 problem (1 error)\", ", "-\t\t\t\"<compiler name=\\\"Eclipse Java Compiler\\\" copyright=\\\"Copyright IBM Corp 2000, 2005. All rights reserved.\\\" version=\\\"0.559, pre-3.1.0 release candidate-1\\\">\\n\" + ", "+\t\t\t\"<compiler name=\\\"Eclipse Java Compiler\\\" copyright=\\\"Copyright IBM Corp 2000, 2005. All rights reserved.\\\" version=\\\"{1}\\\">\\n\" + ", "-\t\t\t\"\t\t<argument value=\\\"---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"X.java\\\"/>\\n\" + ", "+\t\t\t\"\t\t<argument value=\\\"---OUTPUT_DIR_PLACEHOLDER---{0}X.java\\\"/>\\n\" + ", "-\t\t\t\"\t\t<argument value=\\\"---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"log.xml\\\"/>\\n\" + ", "+\t\t\t\"\t\t<argument value=\\\"---OUTPUT_DIR_PLACEHOLDER---{0}log.xml\\\"/>\\n\" + ", "-\t\t\t\"\t\t<source path=\\\"---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"X.java\\\">\\n\" + ", "+\t\t\t\"\t\t<source path=\\\"---OUTPUT_DIR_PLACEHOLDER---{0}X.java\\\">\\n\" + ", "-\t\t\t\"\t\t\t<classfile path=\\\"---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"X.class\\\"/>\\n\" + ", "+\t\t\t\"\t\t\t<classfile path=\\\"---OUTPUT_DIR_PLACEHOLDER---{0}X.class\\\"/>\\n\" + ", "-\t\tboolean compareOK = semiNormalizedComparison(expectedLogContents,", "+\t\tboolean compareOK = semiNormalizedComparison(", "+\t\t\t\tMessageFormat.format(", "+\t\t\t\t\t\texpectedLogContents,", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tFile.separator,", "+\t\t\t\t\t\t\t\tMain.bind(\"compiler.version\")", "+\t\t\t\t\t\t}),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c6f17ec17233d176f1797967b295e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "70a6b9aa4e057d5f0e7a85fe2e732742f959e609", "commitAfterChange": "41f1557c0254631588fe2b45835fb41deba624e6", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void _test012()", "signatureAfterChange": " public void _test012()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[0],", "-        \" -help -showversion -referenceInfo\",", "-        \"Eclipse Java Compiler 0.559, pre-3.1.0 release candidate-1, Copyright IBM Corp 2000, 2005. All rights reserved.\\n\" + ", "+\tfinal String expectedOutput =", "+        \"{0}\\n\" + ", "-        \" Possible options are listed below. Options enabled by default are prefixed with \\'+\\'\\n\" + ", "+        \" Possible options are listed below. Options enabled by default are prefixed with \\'\\'+\\'\\'\\n\" + ", "-        \"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"    -cp -classpath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       \\'[\\' and \\']\\' (e.g. [-X.java] to deny access to type X)\\n\" + ", "-        \"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"                       \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java] to deny access to type X)\\n\" + ", "+        \"    -bootclasspath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       specify access rules for types between \\'[\\' and \\']\\' (e.g. [-X.java]\\n\" + ", "+        \"                       specify access rules for types between \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java]\\n\" + ", "-        \"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"    -sourcepath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       specify access rules for types between \\'[\\' and \\']\\' (e.g. [-X.java]\\n\" + ", "+        \"                       specify access rules for types between \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java]\\n\" + ", "-        \"    -extdirs <directories separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"    -extdirs <directories separated by {1}>\\n\" + ", "-        \"                       when suffixed with \\'[\\'<enc>\\']\\' (e.g. X.java[utf8])\\n\" + ", "+        \"                       when suffixed with \\'\\'[\\'\\'<enc>\\'\\']\\'\\' (e.g. X.java[utf8])\\n\" + ", "-        \"      assertIdentifier   + \\'assert\\' used as identifier\\n\" + ", "+        \"      assertIdentifier   + \\'\\'assert\\'\\' used as identifier\\n\" + ", "-        \"\\n\", ", "+        \"\\n\";", "+", "+\tthis.runConformTest(", "+\t\tnew String[0],", "+        \" -help -showversion -referenceInfo\",", "+\t\tMessageFormat.format(expectedOutput, new String[] {", "+\t\t\t\tMain.bind(\"misc.version\", new String[] {", "+\t\t\t\t\tMain.bind(\"compiler.name\"),", "+\t\t\t\t\tMain.bind(\"compiler.version\"),", "+\t\t\t\t\tMain.bind(\"compiler.copyright\")", "+\t\t\t\t}),", "+\t\t\t\tFile.pathSeparator", "+\t\t}),"]}], "num": 46349}
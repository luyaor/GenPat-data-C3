{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a358c5438240ecfecc892bfa3cfc55c5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3185a2bb9a5c58d30de039aca13da44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "c2862088078b3d0bc7ba3af4b4865ffe4ca72da7", "commitAfterChange": "945521c99c895e07ea8e1e22071b43333b314109", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateReadSequence( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateReadSequence( \t\tBlockScope currentScope, \t\tCodeStream codeStream)", "diff": ["-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "+\t\tCodeStream codeStream) {", "+\t\t\t", "-\t\tint indexOfFirstValueRequired;", "-\t\tif (valueRequired) {", "-\t\t\tindexOfFirstValueRequired = otherBindingsCount;", "-\t\t\twhile (indexOfFirstValueRequired > 0) {", "-\t\t\t\tFieldBinding otherBinding = this.otherCodegenBindings[indexOfFirstValueRequired - 1];", "-\t\t\t\tif (otherBinding.isStatic() || otherBinding.constant != NotAConstant)", "-\t\t\t\t\tbreak; // no longer need any value before this point", "-\t\t\t\tindexOfFirstValueRequired--;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tindexOfFirstValueRequired = otherBindingsCount + 1;", "-\t\t}", "-\t\tif (indexOfFirstValueRequired == 0) {", "-\t\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\t\tcase FIELD :", "-\t\t\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "-\t\t\t\t\t// if first field is actually constant, we can inline it", "-\t\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0);", "-\t\t\t\t\t\t// no implicit conversion", "-\t\t\t\t\t\tlastFieldBinding = null; // will not generate it again", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\tObject[] emulationPath =", "-\t\t\t\t\t\t\t\tcurrentScope.getExactEmulationPath(", "-\t\t\t\t\t\t\t\t\tcurrentScope.enclosingSourceType().enclosingTypeAt(", "-\t\t\t\t\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT));", "-\t\t\t\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+", "+\t\tboolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();", "+\t\tswitch (bits & RestrictiveFlagMASK) {", "+\t\t\tcase FIELD :", "+\t\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\t\t// if first field is actually constant, we can inline it", "+\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\tcase LOCAL : // reading the first local variable", "-\t\t\t\t\tlastFieldBinding = null;", "-\t\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "-\t\t\t\t\t// regular local variable read", "-\t\t\t\t\tif (localBinding.constant != NotAConstant) {", "-\t\t\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0);", "-\t\t\t\t\t\t// no implicit conversion", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// outer local?", "-\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\t\tif (path == null) {", "-\t\t\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "-\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (needValue && !lastFieldBinding.isStatic()) {", "+\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tObject[] emulationPath =", "+\t\t\t\t\t\t\tcurrentScope.getExactEmulationPath(", "+\t\t\t\t\t\t\t\tcurrentScope.enclosingSourceType().enclosingTypeAt(", "+\t\t\t\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT));", "+\t\t\t\t\t\tif (emulationPath == null) {", "+\t\t\t\t\t\t\t// internal error, per construction we should have found it", "+\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tlastFieldBinding = null;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase LOCAL : // reading the first local variable", "+\t\t\t\tif (!needValue) break; // no value needed", "+\t\t\t\tlastFieldBinding = null;", "+\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\t\t// regular local variable read", "+\t\t\t\tif (localBinding.constant != NotAConstant) {", "+\t\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0);", "+\t\t\t\t\t// no implicit conversion", "+\t\t\t\t} else {", "+\t\t\t\t\t// outer local?", "+\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\t\tif (path == null) {", "+\t\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "+\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "-\t\t\tint start = indexOfFirstValueRequired == 0 ? 0 : indexOfFirstValueRequired - 1;", "-\t\t\tfor (int i = start; i < otherBindingsCount; i++) {", "+\t\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "+\t\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "-\t\t\t\t\tMethodBinding accessor =", "-\t\t\t\t\t\tsyntheticReadAccessors == null ? null : syntheticReadAccessors[i];", "-\t\t\t\t\tif (accessor == null)", "-\t\t\t\t\t\tif (lastFieldBinding.isStatic())", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\tneedValue = !nextField.isStatic();", "+\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\tMethodBinding accessor =", "+\t\t\t\t\t\t\tsyntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "+\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "+\t\t\t\t\t\t\t\tif (this.lastFieldBinding != this.codegenBinding && !this.lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0);", "+\t\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.codegenBinding != this.lastFieldBinding && !this.lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "-\t\t\t\tlastFieldBinding = otherCodegenBindings[i];", "+\t\t\t\tthis.lastFieldBinding = nextField;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e46437a7bedf855ec97bc0f5e22ca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-", "-\tint otherBindingsCount = this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length;", "+\tint otherBindingsCount = this.otherBindings == null ? 0 : this.otherBindings.length;", "-\tFieldBinding lastFieldBinding = null;", "-\tTypeBinding lastGenericCast = null;", "-", "+\tFieldBinding lastFieldBinding;", "+\tTypeBinding lastGenericCast;", "+\tTypeBinding lastReceiverType;", "+\tboolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "+\t", "-\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\tlastFieldBinding = ((FieldBinding) this.binding).original();", "+\t\t\tlastReceiverType = this.actualReceiverType;", "-\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\tif (lastFieldBinding.canBeSeenBy(this.actualReceiverType, this, currentScope)) {", "+\t\t\tlastFieldBinding = null;", "+\t\t\tlastGenericCast = null;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "+\t\t\tlastReceiverType = localBinding.type;", "-\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\tbreak;", "+\t\tdefault : // should not occur", "+\t\t\treturn null;\t\t\t", "-", "-\tif (this.otherCodegenBindings != null) {", "+\tint positionsLength = this.sourcePositions.length;", "+\tFieldBinding initialFieldBinding = lastFieldBinding; // can be null if initial was a local binding", "+\tif (this.otherBindings != null) {", "-\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "+\t\t\tint pc = codeStream.position;", "+\t\t\tFieldBinding nextField = this.otherBindings[i].original();", "-\t\t\t\tif (needValue) {", "-\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "-\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\t\tif (i > 0 && !lastFieldBinding.isStatic()) {", "+\t\t\t\t\t}", "+\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (needValue || (i > 0 && complyTo14) || lastGenericCast != null) {", "+\t\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "+\t\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i];", "+\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, lastFieldBinding, lastReceiverType, i == 0 && this.indexOfFirstFieldBinding == 1);", "+\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getstatic, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getfield, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (lastGenericCast != null) {", "+\t\t\t\t\t\t\tcodeStream.checkcast(lastGenericCast);", "+\t\t\t\t\t\t\tlastReceiverType = lastGenericCast;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tlastReceiverType = lastFieldBinding.type;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!needValue) codeStream.pop();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (lastFieldBinding == initialFieldBinding) {", "+\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\t\tif (initialFieldBinding.declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "+\t\t\t\t\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i];", "+\t\t\t\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, lastFieldBinding, lastReceiverType, i == 0 && this.indexOfFirstFieldBinding == 1);", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getstatic, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (!lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlastReceiverType = lastFieldBinding.type;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((positionsLength - otherBindingsCount + i - 1) >= 0) {", "+\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[positionsLength - otherBindingsCount + i - 1] >>>32);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, fieldPosition);", "-\t\t\tif (lastFieldBinding != null && !lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\tif (lastFieldBinding != null && !lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "-\t\t\t}", "+\t\t\t}\t\t\t", "-\treturn lastFieldBinding;", "+\treturn lastFieldBinding;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98c9430a47c6aefef693f8d04204796", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "c2862088078b3d0bc7ba3af4b4865ffe4ca72da7", "commitAfterChange": "945521c99c895e07ea8e1e22071b43333b314109", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateReadSequence(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-public void generateReadSequence(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-", "+public void generateReadSequence(BlockScope currentScope, CodeStream codeStream) {", "-\tint indexOfFirstValueRequired;", "-\tif (valueRequired) {", "-\t\tindexOfFirstValueRequired = otherBindingsCount;", "-\t\twhile (indexOfFirstValueRequired > 0) {", "-\t\t\tFieldBinding otherBinding = this.otherCodegenBindings[indexOfFirstValueRequired - 1];", "-\t\t\tif (otherBinding.isStatic() || otherBinding.constant != NotAConstant)", "-\t\t\t\tbreak; // no longer need any value before this point", "-\t\t\tindexOfFirstValueRequired--;", "-\t\t}", "-\t} else {", "-\t\tindexOfFirstValueRequired = otherBindingsCount + 1;", "-\t}", "-\tif (indexOfFirstValueRequired == 0) {", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\tcase FIELD :", "-\t\t\t\tlastFieldBinding = (FieldBinding) binding;", "-\t\t\t\t// if first field is actually constant, we can inline it", "-\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0); // no implicit conversion", "-\t\t\t\t\tlastFieldBinding = null; // will not generate it again", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+", "+\tboolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();", "+\tswitch (bits & RestrictiveFlagMASK) {", "+\t\tcase FIELD :", "+\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\t// if first field is actually constant, we can inline it", "+\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (needValue) {", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase LOCAL : // reading the first local variable", "-\t\t\t\tlastFieldBinding = null;", "-\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "-", "-\t\t\t\t// regular local variable read", "-\t\t\t\tif (localBinding.constant != NotAConstant) {", "-\t\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0); // no implicit conversion", "-\t\t\t\t} else {", "-\t\t\t\t\t// outer local?", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\tif (path == null) {", "-\t\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "-\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "-\t\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase LOCAL : // reading the first local variable", "+\t\t\tif (!needValue) break; // no value needed", "+\t\t\tlastFieldBinding = null;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\t// regular local variable read", "+\t\t\tif (localBinding.constant != NotAConstant) {", "+\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0);", "+\t\t\t\t// no implicit conversion", "+\t\t\t} else {", "+\t\t\t\t// outer local?", "+\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\tif (path == null) {", "+\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "+\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "-\t\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tlastFieldBinding = null;", "-\t}", "-\t// all intermediate field accesses are read accesses", "-\t// only the last field binding is a write access", "-\tif (otherBindings != null) {", "-\t\tint start = indexOfFirstValueRequired == 0 ? 0 : indexOfFirstValueRequired - 1;", "-\t\tfor (int i = start; i < otherBindingsCount; i++) {", "-\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\tif (lastFieldBinding.isStatic())", "-\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\tcodeStream.load(localBinding);", "+\t}", "-\t\t\tlastFieldBinding = this.otherCodegenBindings[i];", "+\t// all intermediate field accesses are read accesses", "+\t// only the last field binding is a write access", "+\tif (this.otherCodegenBindings != null) {", "+\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "+\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "+\t\t\tif (lastFieldBinding != null) {", "+\t\t\t\tneedValue = !nextField.isStatic();", "+\t\t\t\tif (needValue) {", "+\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "+\t\t\t\t\t\t\tif (this.lastFieldBinding != this.codegenBinding && !this.lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0);", "+\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.codegenBinding != this.lastFieldBinding && !this.lastFieldBinding.isStatic()){", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.lastFieldBinding = nextField;", "-\t\t}", "+\t\t}\t\t\t"]}], "num": 61956}
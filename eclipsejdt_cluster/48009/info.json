{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b8e1ab0b880310b1b088854d2481782", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "021d5cb54858f28e36b42195bf37ea31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "5830f34f316eb59740b3f5242c08f1b46d8edf90", "commitAfterChange": "d9d1b97f49560324c7b848690f93b474a074ee07", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)arguments[i], binding.parameters[i]);", "+\t\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)arguments[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd75bb4a9ecf00249ab182ecba2fb76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "3e74f4ef73845fee74b0867380da94913c5a23bb", "commitAfterChange": "9b26565edd8f00a28f01564be0384c99bbdfa335", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\t\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)argument, binding.parameters[i]);", "+\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)argument);"]}], "num": 48009}
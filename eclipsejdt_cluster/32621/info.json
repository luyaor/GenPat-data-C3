{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83e6d25b2c694ec3cae59e272d5c5e99", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81eadf8119253974e2d43352551e6f0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\tString extType;", "-\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "-\t\textType = EXTENSION_java;", "-\t} else {", "-\t\textType = EXTENSION_class;", "-\t}", "-\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "-\t\t\t\tif (extension != null) {", "-\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "-\t\t\t\t\t\tIJavaElement childElement;", "-\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tIJavaElement childElement;", "+\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "+\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "+\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName())) {", "+\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\tvChildren.add(childElement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4d595fb99aaf78bbef521dcc5f7566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, inclusionPatterns, exclusionPatterns)) {", "-\t\t\t\tIJavaElement childElement;", "-\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\tvChildren.add(childElement);", "+\t\tint length = members.length;", "+\t\tif (length > 0) {", "+\t\t\tIJavaProject project = getJavaProject();", "+\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIResource child = members[i];", "+\t\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t\t&& !Util.isExcluded(child, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName(), sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "+\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName(), sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t}"]}], "num": 32621}
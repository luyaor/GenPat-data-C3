{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26ee2e1a7d1b9f862fe9305033120317", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199437cbe1ccbf6b7eb733697ae86312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-nullAnnotations:\")) { //$NON-NLS-1$", "-\t\t\t\t\tStringTokenizer tokenizer =", "-\t\t\t\t\t\tnew StringTokenizer(currentArg.substring(\"-nullAnnotations:\".length()), \",\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\tif (token.startsWith(\"nullable=\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, token.substring(\"nullable=\".length())); //$NON-NLS-1$", "-\t\t\t\t\t\t} else if (token.startsWith(\"nonnull=\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, token.substring(\"nonnull=\".length())); //$NON-NLS-1$", "-\t\t\t\t\t\t} else if (token.equals(\"emulate\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_EmulateNullAnnotationTypes, CompilerOptions.ENABLED);", "-\t\t\t\t\t\t} else if (token.equals(\"import\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_DefaultImportNullAnnotationTypes, CompilerOptions.ENABLED);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\t\t\tthis.bind(\"configure.unrecognized.nullannotation.option\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = DEFAULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d99a917524712d994c69cd6f560c92de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "ba572e75ccc281ead35081ded887517feadc6035", "commitAfterChange": "bc3205eeacff8d7a677f8589b17d0604c418d42c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " public static void createJar(String[] pathsAndContents, String jarPath, String compliance) throws IOException", "signatureAfterChange": " public static void createJar(String[] pathsAndContents, String jarPath, String compliance) throws IOException", "diff": ["-    Map options = new HashMap();", "-    options.put(CompilerOptions.OPTION_Compliance, compliance);", "-    options.put(CompilerOptions.OPTION_Source, compliance);", "-    options.put(CompilerOptions.OPTION_TargetPlatform, compliance);", "-    // Ignore options with new defaults (since bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=76530)", "-    options.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);", "-    options.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE);", "-    options.put(CompilerOptions.OPTION_ReportFieldHiding, CompilerOptions.IGNORE);", "-    options.put(CompilerOptions.OPTION_ReportLocalVariableHiding, CompilerOptions.IGNORE);", "-    options.put(CompilerOptions.OPTION_ReportTypeParameterHiding, CompilerOptions.IGNORE);", "-    options.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);", "-    options.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);", "-    createJar(pathsAndContents, options, jarPath);", "+    createJar(pathsAndContents, getCompileOptions(compliance), jarPath);"]}], "num": 34210}
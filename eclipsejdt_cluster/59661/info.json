{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3af28b71a413023fc2eea70f3853ae2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95caf556dd611951145f0e588a43f260", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "ce4dcdda36d145f85633203e671aabd032ebd393", "commitAfterChange": "b60aac81ebd86849e9f3995f202b266825efdd72", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public final boolean canBeSeenBy(ReferenceBinding receiverType, SourceTypeBinding invocationType)", "signatureAfterChange": "  public final boolean canBeSeenBy(ReferenceBinding receiverType, SourceTypeBinding invocationType)", "diff": ["-\t\tif (!(receiverType == this || receiverType == enclosingType())) return false;", "+\t\treceiverCheck: {", "+\t\t\tif (!(receiverType == this || receiverType == enclosingType())) {", "+\t\t\t\t// special tolerance for type variable direct bounds", "+\t\t\t\tif (receiverType.isTypeVariable()) {", "+\t\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) receiverType;", "+\t\t\t\t\tif (typeVariable.isErasureBoundTo(this.erasure()) || typeVariable.isErasureBoundTo(enclosingType().erasure())) {", "+\t\t\t\t\t\tbreak receiverCheck;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caccf643b3ffd09566e3484c3251ccb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "e657b912c1ef94d48e9749f2cbf91c83fff8728f", "commitAfterChange": "a34df737b5102c35af6a4e4a81e1b17f0f972c06", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t} else if (this.pattern.findReferences && reference instanceof QualifiedNameReference) {", "+\t} else if (reference instanceof FieldReference) {", "+\t\tlong position = ((FieldReference) reference).nameSourcePosition;", "+\t\tlocator.report(position, position, element, accuracy);", "+\t} else if (reference instanceof SingleNameReference) {", "+\t\tlocator.report(reference.sourceStart, reference.sourceEnd, element, accuracy);", "+\t} else if (reference instanceof QualifiedNameReference) {", "-\t\tlocator.reportAccurateReference(", "-\t\t\treference.sourceStart, ", "-\t\t\treference.sourceEnd, ", "-\t\t\tqNameRef.tokens, ", "-\t\t\telement, ", "-\t\t\taccuracies);", "-\t} else {", "-\t\tlocator.reportAccurateReference(", "-\t\t\treference.sourceStart, ", "-\t\t\treference.sourceEnd, ", "-\t\t\tnew char[][] {this.pattern.name}, ", "-\t\t\telement, ", "-\t\t\taccuracy);", "+\t\tlocator.reportAccurateReference(reference.sourceStart, reference.sourceEnd, qNameRef.tokens, element, accuracies);"]}], "num": 59661}
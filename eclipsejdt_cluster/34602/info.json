{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8707e080495adee60b8a38a387d451f8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10f78a7cda8ef2b20b9c9d4245b6f8d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "2fdac50d0a994a41e3b73d3202a0de983b014e1d", "commitAfterChange": "5291cd66203d5d42725b1c4b5cba50a5232bc244", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "    \tstatic void internalSetUserLibrary(String name, UserLibrary library, boolean save, boolean rebind, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \t \tprivate void initialize()", "diff": ["+\tprivate void initialize() {", "+\t\tthis.userLibraries = new HashMap();", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString[] propertyNames;", "+\t\ttry {", "+\t\t\tpropertyNames = instancePreferences.keys();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while initializing user libraries\"); //$NON-NLS-1$", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tboolean preferencesNeedFlush = false;", "+\t\tfor (int i = 0, length = propertyNames.length; i < length; i++) {", "+\t\t\tString propertyName = propertyNames[i];", "+\t\t\tif (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "+\t\t\t\tString propertyValue = instancePreferences.get(propertyName, null);", "+\t\t\t\tif (propertyValue != null) {", "+\t\t\t\t\tString libName= propertyName.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "+\t\t\t\t\tStringReader reader = new StringReader(propertyValue);", "+\t\t\t\t\tUserLibrary library;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tlibrary = UserLibrary.createFromString(reader);", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\tUtil.log(e, \"Exception while initializing user library \" + libName); //$NON-NLS-1$", "+\t\t\t\t\t\tinstancePreferences.remove(propertyName);", "+\t\t\t\t\t\tpreferencesNeedFlush = true;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.userLibraries.put(libName, library);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (preferencesNeedFlush) {", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while flusing instance preferences\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "-", "-\tstatic void internalSetUserLibrary(String name, UserLibrary library, boolean save, boolean rebind, IProgressMonitor monitor) throws JavaModelException {", "-\t\tif (library == null) {", "-\t\t\tObject previous= getLibraryMap().remove(name);", "-\t\t\tif (previous == null) {", "-\t\t\t\treturn; // no change", "-\t\t\t}", "-\t\t} else {", "-\t\t\tObject previous= getLibraryMap().put(name, library);", "-\t\t\tif (library.equals(previous)) {", "-\t\t\t\treturn; // no change", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString containerKey = CP_USERLIBRARY_PREFERENCES_PREFIX+name;", "-\t\tString containerString = CP_ENTRY_IGNORE;", "-\t\tif (library != null) {", "-\t\t\ttry {", "-\t\t\t\tcontainerString= library.serialize();", "-\t\t\t} catch (IOException e) {", "-\t\t\t\t// could not encode entry: leave it as CP_ENTRY_IGNORE", "-\t\t\t}", "-\t\t}", "-\t\tinstancePreferences.removePreferenceChangeListener(listener);", "-\t\ttry {", "-\t\t\tinstancePreferences.put(containerKey, containerString);", "-\t\t\tif (save) {", "-\t\t\t\ttry {", "-\t\t\t\t\tinstancePreferences.flush();", "-\t\t\t\t} catch (BackingStoreException e) {", "-\t\t\t\t\t// nothing to do in this case", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (rebind) {", "-\t\t\t\trebindClasspathEntries(name, library==null, monitor);", "-\t\t\t}", "-\t\t\t", "-\t\t} finally {", "-\t\t\tinstancePreferences.addPreferenceChangeListener(listener);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812a77c407a092aaff7d3477238a1575", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void rememberWithSuperTypes(ReferenceBinding referenceBinding, HandleFactory factory, CompilationUnitScope compilationUnitScope, Openable openable)", "signatureAfterChange": " private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes)", "diff": ["-private void rememberWithSuperTypes(ReferenceBinding referenceBinding, HandleFactory factory, CompilationUnitScope compilationUnitScope, Openable openable) {", "-\tif (!(referenceBinding instanceof SourceTypeBinding)) return;", "-\tSourceTypeBinding type = (SourceTypeBinding)referenceBinding;", "-\tif (type.scope.compilationUnitScope() != compilationUnitScope) return;", "-\tIJavaElement element = factory.createElement(type.scope.referenceContext, compilationUnitScope.referenceContext, openable);", "-\tif (element == null) return;", "-\tISourceType sourceType = null;", "-\ttry {", "-\t\tsourceType = (ISourceType)((JavaElement)element).getElementInfo();", "-\t} catch (JavaModelException e) {", "-\t\treturn;", "+private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes) {", "+\tTypeDeclaration[] types = parsedUnit.types;", "+\tif (types != null) {", "+\t\tfor (int i = 0, length = types.length; i < length; i++) {", "+\t\t\tTypeDeclaration type = types[i];", "+\t\t\trememberWithMemberTypes(type, cu.getType(new String(type.name)));", "+\t\t}", "-\tremember(sourceType, type);", "+\tif (includeLocalTypes && parsedUnit.localTypes != null) {", "+\t\tHandleFactory factory = new HandleFactory();", "+\t\tHashSet existingElements = new HashSet(parsedUnit.localTypeCount);", "+\t\tHashMap knownScopes = new HashMap(parsedUnit.localTypeCount);", "+\t\tfor (int i = 0; i < parsedUnit.localTypeCount; i++) {", "+\t\t\tLocalTypeBinding localType = parsedUnit.localTypes[i];", "+\t\t\tClassScope classScope = localType.scope;", "+\t\t\tTypeDeclaration typeDecl = classScope.referenceType();", "+\t\t\tIType typeHandle = (IType)factory.createElement(classScope, cu, existingElements, knownScopes);", "+\t\t\trememberWithMemberTypes(typeDecl, typeHandle);", "+\t\t}", "+\t}", "+}", "-\tif (type.superclass != null) {", "-\t\trememberWithSuperTypes(type.superclass, factory, compilationUnitScope, openable);", "-\tReferenceBinding[] superInterfaces = type.superInterfaces;", "-\tif (superInterfaces != null) {", "-\t\tfor (int i = 0, length = superInterfaces.length; i < length; i++) {", "-\t\t\tReferenceBinding superInterface = superInterfaces[i];", "-\t\t\trememberWithSuperTypes(superInterface, factory, compilationUnitScope, openable);", "-}"]}], "num": 34602}
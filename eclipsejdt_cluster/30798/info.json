{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "219a1d47d7e0f300b559351e2301bd86", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b487aa494c04f84a318a58b99cad071", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "027a5942c1f8a8df8288ac0e347e39e4a0c4c335", "commitAfterChange": "16d018b1beaec2325e8b119cf0432c848cb2dd74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress, boolean isSuppressingWarnings) {", "+\tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings) {", "-\t\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "-\t\t\t\t\t}", "+\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(value);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t", "-\t\t\tcompilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);", "+\t\t\tscope.referenceCompilationUnit().compilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb8ba0b4dccfc144ab37789bd87de6d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int literalIndex(char[] utf8Constant)", "signatureAfterChange": " public int literalIndex(char[] utf8Constant)", "diff": ["-\tint index;", "-\tif ((index = UTF8Cache.putIfAbsent(utf8Constant, this.currentIndex)) < 0) {", "-\t\tindex = -index;", "-\t\t// The entry doesn't exit yet", "-\t\t// Write the tag first", "-\t\twriteU1(Utf8Tag);", "-\t\t// Then the size of the stringName array", "-\t\tint savedCurrentOffset = currentOffset;", "-\t\tif (currentOffset + 2 >= poolContent.length) {", "-\t\t\t// we need to resize the poolContent array because we won't have", "-\t\t\t// enough space to write the length", "-\t\t\tresizePoolContents(2);", "-\t\t}", "-\t\tcurrentOffset += 2;", "-\t\tint length = 0;", "-\t\tfor (int i = 0; i < utf8Constant.length; i++) {", "-\t\t\tchar current = utf8Constant[i];", "-\t\t\tif ((current >= 0x0001) && (current <= 0x007F)) {", "-\t\t\t\t// we only need one byte: ASCII table", "-\t\t\t\twriteU1(current);", "-\t\t\t\tlength++;", "-\t\t\t} else {", "-\t\t\t\tif (current > 0x07FF) {", "-\t\t\t\t\t// we need 3 bytes", "-\t\t\t\t\tlength += 3;", "-\t\t\t\t\twriteU1(0xE0 | ((current >> 12) & 0x0F)); // 0xE0 = 1110 0000", "-\t\t\t\t\twriteU1(0x80 | ((current >> 6) & 0x3F)); // 0x80 = 1000 0000", "-\t\t\t\t\twriteU1(0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "-\t\t\t\t} else {", "-\t\t\t\t\t// we can be 0 or between 0x0080 and 0x07FF", "-\t\t\t\t\t// In that case we only need 2 bytes", "-\t\t\t\t\tlength += 2;", "-\t\t\t\t\twriteU1(0xC0 | ((current >> 6) & 0x1F)); // 0xC0 = 1100 0000", "-\t\t\t\t\twriteU1(0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (length >= 65535) {", "-\t\t\tcurrentOffset = savedCurrentOffset - 1;", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceForConstant(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\tif (index > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\tcurrentIndex++;     ", "-\t\t// Now we know the length that we have to write in the constant pool", "-\t\t// we use savedCurrentOffset to do that", "-\t\tpoolContent[savedCurrentOffset] = (byte) (length >> 8);", "-\t\tpoolContent[savedCurrentOffset + 1] = (byte) length;", "-\t}", "-\treturn index;", "+    int index;", "+    if ((index = UTF8Cache.putIfAbsent(utf8Constant, this.currentIndex)) < 0) {", "+        if ((index = -index)> 0xFFFF) {", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        // The entry doesn't exit yet", "+        // Write the tag first", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(Utf8Tag);", "+        // Then the size of the stringName array", "+        int savedCurrentOffset = currentOffset;", "+        if (currentOffset + 2 >= poolContent.length) {", "+            // we need to resize the poolContent array because we won't have", "+            // enough space to write the length", "+            resizePoolContents(2);", "+        }", "+        currentOffset += 2;", "+        length = 0;", "+        for (int i = 0; i < utf8Constant.length; i++) {", "+            char current = utf8Constant[i];", "+            if ((current >= 0x0001) && (current <= 0x007F)) {", "+                // we only need one byte: ASCII table", "+                writeU1(current);", "+                length++;", "+            } else {", "+                if (current > 0x07FF) {", "+                    // we need 3 bytes", "+                    length += 3;", "+                    writeU1(0xE0 | ((current >> 12) & 0x0F)); // 0xE0 = 1110 0000", "+                    writeU1(0x80 | ((current >> 6) & 0x3F)); // 0x80 = 1000 0000", "+                    writeU1(0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "+                } else {", "+                    // we can be 0 or between 0x0080 and 0x07FF", "+                    // In that case we only need 2 bytes", "+                    length += 2;", "+                    writeU1(0xC0 | ((current >> 6) & 0x1F)); // 0xC0 = 1100 0000", "+                    writeU1(0x80 | (current & 0x3F)); // 0x80 = 1000 0000", "+                }", "+            }", "+        }", "+        if (length >= 65535) {", "+            currentOffset = savedCurrentOffset - 1;", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceForConstant(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        if (index > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        currentIndex++;", "+        // Now we know the length that we have to write in the constant pool", "+        // we use savedCurrentOffset to do that", "+        poolContent[savedCurrentOffset] = (byte) (length >> 8);", "+        poolContent[savedCurrentOffset + 1] = (byte) length;", "+    }", "+    return index;"]}], "num": 30798}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63acf8dad6bb93b6f8918aa192b8c4c3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8f495c35985bfafd729b78ed4c511b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding)", "diff": ["-\t", "-\tprotected TypeBinding getTypeBinding(Scope scope) {", "-\t\t", "-\t\tif (this.resolvedType != null)", "-\t\t\treturn this.resolvedType;", "+", "+\tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding) {", "-\t\t\treturn scope.getType(this.tokens, this.tokens.length);", "+\t\t    if (this.resolvedType == null) {", "+\t\t\t\tthis.resolvedType = scope.getType(this.tokens[tokenIndex], packageBinding);", "+\t\t    } else {", "+\t\t\t    this.resolvedType = scope.getMemberType(this.tokens[tokenIndex], (ReferenceBinding) this.resolvedType);", "+\t\t\t\tif (this.resolvedType instanceof ProblemReferenceBinding) {", "+\t\t\t\t\tProblemReferenceBinding problemBinding = (ProblemReferenceBinding) this.resolvedType;", "+\t\t\t\t\tthis.resolvedType = new ProblemReferenceBinding(", "+\t\t\t\t\t\torg.eclipse.jdt.core.compiler.CharOperation.subarray(this.tokens, 0, tokenIndex + 1),", "+\t\t\t\t\t\tproblemBinding.original,", "+\t\t\t\t\t\tthis.resolvedType.problemId());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t    return this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52e77520e82fb820452de9a0bbb5ff63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tif (rightType.isArrayType() && ((ArrayBinding) rightType).elementsType() == CharBinding) {", "+\t\t\t\tif (rightType.isArrayType() && ((ArrayBinding) rightType).elementsType() == TypeBinding.CHAR) {", "-\t\t\t\tif (leftType.isArrayType() && ((ArrayBinding) leftType).elementsType() == CharBinding) {", "+\t\t\t\tif (leftType.isArrayType() && ((ArrayBinding) leftType).elementsType() == TypeBinding.CHAR) {", "-\t\t\t\tthis.resolvedType = BooleanBinding;", "+\t\t\t\tthis.resolvedType = TypeBinding.BOOLEAN;", "-\t\t\t\tthis.resolvedType = ByteBinding;", "+\t\t\t\tthis.resolvedType = TypeBinding.BYTE;", "-\t\t\t\tthis.resolvedType = CharBinding;", "+\t\t\t\tthis.resolvedType = TypeBinding.CHAR;", "-\t\t\t\tthis.resolvedType = DoubleBinding;", "+\t\t\t\tthis.resolvedType = TypeBinding.DOUBLE;", "-\t\t\t\tthis.resolvedType = FloatBinding;", "+\t\t\t\tthis.resolvedType = TypeBinding.FLOAT;", "-\t\t\t\tthis.resolvedType = IntBinding;", "+\t\t\t\tthis.resolvedType = TypeBinding.INT;", "-\t\t\t\tthis.resolvedType = LongBinding;", "+\t\t\t\tthis.resolvedType = TypeBinding.LONG;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712c1006a89be0acc5c402e7a3c1f331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "0d2bb4cd9a920a832985dcd25c76a6d09b85febf", "commitAfterChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (leftTypeId == T_String", "-\t\t\t\t\t&& rightType.isArrayType()", "-\t\t\t\t\t&& ((ArrayBinding) rightType).elementsType() == CharBinding) {", "-\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(right);", "-\t\t\t\t\t} else if (rightTypeId == T_String", "-\t\t\t\t\t\t\t&& leftType.isArrayType()", "-\t\t\t\t\t\t\t&& ((ArrayBinding) leftType).elementsType() == CharBinding) {", "-\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(left);", "+\t\t\tif (leftTypeId == T_String) {", "+\t\t\t\tthis.left.computeConversion(scope, leftType, leftType);", "+\t\t\t\tif (rightType.isArrayType() && ((ArrayBinding) rightType).elementsType() == CharBinding) {", "+\t\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(right);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (rightTypeId == T_String) {", "+\t\t\t\tthis.right.computeConversion(scope, rightType, rightType);", "+\t\t\t\tif (leftType.isArrayType() && ((ArrayBinding) leftType).elementsType() == CharBinding) {", "+\t\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(left);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9301319a86045aba6bfd9bd8fec1439", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (leftType != NullBinding && leftType.isBaseType()) {", "+\t\t\tif (leftType != TypeBinding.NULL && leftType.isBaseType()) {", "-\t\t\t\tif (rightType != NullBinding && rightType.isBaseType()) {", "+\t\t\t\tif (rightType != TypeBinding.NULL && rightType.isBaseType()) {", "-\t\t\treturn this.resolvedType = BooleanBinding;", "+\t\t\treturn this.resolvedType = TypeBinding.BOOLEAN;", "-\t\tif ((!leftType.isBaseType() || leftType == NullBinding) // cannot compare: Object == (int)0", "-\t\t\t\t&& (!rightType.isBaseType() || rightType == NullBinding)", "+\t\tif ((!leftType.isBaseType() || leftType == TypeBinding.NULL) // cannot compare: Object == (int)0", "+\t\t\t\t&& (!rightType.isBaseType() || rightType == TypeBinding.NULL)", "-\t\t\treturn this.resolvedType = BooleanBinding;", "+\t\t\treturn this.resolvedType = TypeBinding.BOOLEAN;"]}], "num": 4733}
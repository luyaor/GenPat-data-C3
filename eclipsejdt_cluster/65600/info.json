{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70cec048d3cb292b45e3a0320f71d9f9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "055fdfcd79e4351d83526655ac317dc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "48d2e5271b9ec9e3f9d53b669ddceb5e8a4c0aff", "commitAfterChange": "a78da08c77ccead3814d2a0c0dfa686cde302733", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected IDocument getDocument(ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " \tprotected void applyTextEdit(ICompilationUnit cu, TextEdit edits) throws JavaModelException", "diff": ["+\t}", "+\tprotected void applyTextEdit(ICompilationUnit cu, TextEdit edits) throws JavaModelException {", "+\t\ttry {", "+\t\t\tcu.applyTextEdit(edits, this.progressMonitor);", "+\t\t} catch (JavaModelException e) {", "+\t\t\tif (e.getJavaModelStatus().getCode() == IJavaModelStatusConstants.BAD_TEXT_EDIT_LOCATION) {", "+\t\t\t\t// content changed under us", "+\t\t\t\tthrow new JavaModelException(e.getException(), IJavaModelStatusConstants.INVALID_CONTENTS);", "+\t\t\t} else {", "+\t\t\t\tthrow e;", "+\t\t\t}", "+\t\t}", "-\t */", "-\tprotected IDocument getDocument(ICompilationUnit cu) throws JavaModelException {", "-\t\tIBuffer buffer = cu.getBuffer();", "-\t\tif (buffer instanceof IDocument)", "-\t\t\treturn (IDocument) buffer;", "-\t\treturn new DocumentAdapter(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5330cc2fcbb6d880d1b832a12b8dfa7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7d3413f2e54a1d74c024c68815343b32316b40c7", "commitAfterChange": "ce90018d214b0b5d93f0b2267d30c18ada4fb537", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": "     \tpublic IEclipsePreferences getEclipsePreferences()", "signatureAfterChange": " \tpublic IEclipsePreferences getEclipsePreferences()", "diff": ["-    \t */", "-    \tpublic IEclipsePreferences getEclipsePreferences(){", "-    \t\tif (!JavaProject.hasJavaNature(this.project)) return null;", "-    \t\t// Get cached preferences if exist", "-    \t\tJavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(this.project, true);", "-    \t\tif (perProjectInfo.preferences != null) return perProjectInfo.preferences;", "-    \t\t// Init project preferences", "-    \t\tIScopeContext context = new ProjectScope(getProject());", "-    \t\tfinal IEclipsePreferences eclipsePreferences = context.getNode(JavaCore.PLUGIN_ID);", "-    \t\tupdatePreferences(eclipsePreferences);", "-    \t\tperProjectInfo.preferences = eclipsePreferences;", "+\t */", "+\tpublic IEclipsePreferences getEclipsePreferences() {", "+\t\tif (!JavaProject.hasJavaNature(this.project)) return null;", "+\t\t// Get cached preferences if exist", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(this.project, true);", "+\t\tif (perProjectInfo.preferences != null) return perProjectInfo.preferences;", "+\t\t// Init project preferences", "+\t\tIScopeContext context = new ProjectScope(getProject());", "+\t\tfinal IEclipsePreferences eclipsePreferences = context.getNode(JavaCore.PLUGIN_ID);", "+\t\tupdatePreferences(eclipsePreferences);", "+\t\tperProjectInfo.preferences = eclipsePreferences;", "-    \t\t// Listen to node removal from parent in order to reset cache (see bug 68993)", "-    \t\tIEclipsePreferences.INodeChangeListener nodeListener = new IEclipsePreferences.INodeChangeListener() {", "-    \t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "-    \t\t\t\t// do nothing", "-    \t\t\t}", "-    \t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "-    \t\t\t\tif (event.getChild() == eclipsePreferences) {", "-    \t\t\t\t\tJavaModelManager.getJavaModelManager().resetProjectPreferences(JavaProject.this);", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t};", "-    \t\t((IEclipsePreferences) eclipsePreferences.parent()).addNodeChangeListener(nodeListener);", "+\t\t// Listen to new preferences node", "+\t\tfinal IEclipsePreferences eclipseParentPreferences = (IEclipsePreferences) eclipsePreferences.parent();", "+\t\tif (eclipseParentPreferences != null) {", "+\t\t\tif (this.preferencesNodeListener != null) {", "+\t\t\t\teclipseParentPreferences.removeNodeChangeListener(this.preferencesNodeListener);", "+\t\t\t}", "+\t\t\tthis.preferencesNodeListener = new IEclipsePreferences.INodeChangeListener() {", "+\t\t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "+\t\t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\tif (event.getChild() == eclipsePreferences) {", "+\t\t\t\t\t\tJavaModelManager.getJavaModelManager().resetProjectPreferences(JavaProject.this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\teclipseParentPreferences.addNodeChangeListener(this.preferencesNodeListener);", "+\t\t}", "-    \t\t// Listen to preference changes", "-    \t\tIEclipsePreferences.IPreferenceChangeListener preferenceListener = new IEclipsePreferences.IPreferenceChangeListener() {", "-    \t\t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "-    \t\t\t\tString propertyName = event.getKey();", "-\t\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\t\t\tif (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "-\t\t\t\t\t\tif (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(JavaProject.this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tmanager.resetProjectOptions(JavaProject.this);", "-\t\t\t\t\t\tJavaProject.this.resetCaches(); // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=233568", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t};", "-    \t\teclipsePreferences.addPreferenceChangeListener(preferenceListener);", "-    \t\treturn eclipsePreferences;", "-    \t}", "+\t\t// Listen to preferences changes", "+\t\tif (this.preferencesChangeListener != null) {", "+\t\t\teclipsePreferences.removePreferenceChangeListener(this.preferencesChangeListener);", "+\t\t}", "+\t\tthis.preferencesChangeListener = new IEclipsePreferences.IPreferenceChangeListener() {", "+\t\t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "+\t\t\t\tString propertyName = event.getKey();", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tif (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "+\t\t\t\t\tif (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL))", "+\t\t\t\t\t{", "+\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(JavaProject.this);", "+\t\t\t\t\t}", "+\t\t\t\t\tmanager.resetProjectOptions(JavaProject.this);", "+\t\t\t\t\tJavaProject.this.resetCaches(); // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=233568", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\teclipsePreferences.addPreferenceChangeListener(this.preferencesChangeListener);", "+\t\treturn eclipsePreferences;", "+\t}"]}], "num": 65600}
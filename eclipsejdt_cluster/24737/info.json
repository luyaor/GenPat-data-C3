{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0130cd308304dcfc3a4f6d6a93b30f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13981ef5a4b0026912c18a896ce345de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "1740233a8dca1d707aa9811c9f07a7ace8f5d808", "commitAfterChange": "36542264af3396595138a00ba7efc11cead3cfc1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "signatureAfterChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "diff": ["+\t// substitute compilation units with working copies\r", "+\tHashMap wcPaths = new HashMap(); // a map from path to working copies\r", "+\tint wcLength;\r", "+\tIWorkingCopy[] workingCopies = this.getWokingCopies();\r", "+\tif (workingCopies != null && (wcLength = workingCopies.length) > 0) {\r", "+\t\tString[] newPaths = new String[wcLength];\r", "+\t\tfor (int i = 0; i < wcLength; i++) {\r", "+\t\t\tIWorkingCopy workingCopy = workingCopies[i];\r", "+\t\t\tString path = workingCopy.getOriginalElement().getPath().toString();\r", "+\t\t\twcPaths.put(path, workingCopy);\r", "+\t\t\tnewPaths[i] = path;\r", "+\t\t}\r", "+\t\tint potentialSubtypesLength = allPotentialSubTypes.length;\r", "+\t\tSystem.arraycopy(allPotentialSubTypes, 0, allPotentialSubTypes = new String[potentialSubtypesLength+wcLength], 0, potentialSubtypesLength);\r", "+\t\tSystem.arraycopy(newPaths, 0, allPotentialSubTypes, potentialSubtypesLength, wcLength);\r", "+\t}\r", "+\t\t\t\r", "-\t\t\tOpenable handle = \r", "-\t\t\t\tresourcePath.equals(focusPath) ? \r", "-\t\t\t\t\tfocusCU :\r", "-\t\t\t\t\tfactory.createOpenable(resourcePath);\r", "-\t\t\tif (handle == null) continue; // match is outside classpath\r", "+\t\t\tOpenable handle;\r", "+\t\t\tIWorkingCopy workingCopy = (IWorkingCopy)wcPaths.get(resourcePath);\r", "+\t\t\tif (workingCopy != null) {\r", "+\t\t\t\thandle = (Openable)workingCopy;\r", "+\t\t\t} else {\r", "+\t\t\t\thandle = \r", "+\t\t\t\t\tresourcePath.equals(focusPath) ? \r", "+\t\t\t\t\t\tfocusCU :\r", "+\t\t\t\t\t\tfactory.createOpenable(resourcePath);\r", "+\t\t\t\tif (handle == null) continue; // match is outside classpath\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff4cf609a8783c246d047b7a2cd2385", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "2faa7dcefcba49716eb602b07f666c741c012441", "commitAfterChange": "0c050a9e41e2d9f51004e54259260763cb09b54a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "diff": ["-\t\t// sort file paths projects\r", "-\t\tUtil.sort(filePaths); \r", "-\t\t\r", "-\t\tHashSet wcPaths = new HashSet(); // a set of Strings\r", "-\t\tif (workingCopies != null) {\r", "-\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {\r", "+\t\t\r", "+\t\t// substitute compilation units with working copies\r", "+\t\tHashMap wcPaths = new HashMap(); // a map from path to working copies\r", "+\t\tint wcLength;\r", "+\t\tif (workingCopies != null && (wcLength = workingCopies.length) > 0) {\r", "+\t\t\tString[] newPaths = new String[wcLength];\r", "+\t\t\tfor (int i = 0; i < wcLength; i++) {\r", "-\t\t\t\t\twcPaths.add(res.getFullPath().toString());\r", "+\t\t\t\t\tString path = res.getFullPath().toString();\r", "+\t\t\t\t\twcPaths.put(path, workingCopy);\r", "+\t\t\t\t\tnewPaths[i] = path;\r", "+\t\t\tint filePathsLength = filePaths.length;\r", "+\t\t\tSystem.arraycopy(filePaths, 0, filePaths = new String[filePathsLength+wcLength], 0, filePathsLength);\r", "+\t\t\tSystem.arraycopy(newPaths, 0, filePaths, filePathsLength, wcLength);\r", "+\t\t\r", "+\t\t// sort file paths projects\r", "+\t\tUtil.sort(filePaths); \r", "-\t\tthis.initializeMatchingOpenables(workingCopies);\r", "+\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "-\t\t\t// skip paths that are hidden by a working copy\r", "-\t\t\tif (wcPaths.contains(pathString)) continue;\r", "+\t\t\t// skip duplicate paths\r", "+\t\t\tif (i > 0 && pathString.equals(filePaths[i-1])) continue;\r", "-\t\t\tOpenable openable = this.handleFactory.createOpenable(pathString);\r", "-\t\t\tif (openable == null)\r", "-\t\t\t\tcontinue; // match is outside classpath\r", "+\t\t\tOpenable openable;\r", "+\t\t\tIWorkingCopy workingCopy = (IWorkingCopy)wcPaths.get(pathString);\r", "+\t\t\tif (workingCopy != null) {\r", "+\t\t\t\topenable = (Openable)workingCopy;\r", "+\t\t\t} else {\r", "+\t\t\t\topenable = this.handleFactory.createOpenable(pathString);\r", "+\t\t\t\tif (openable == null)\r", "+\t\t\t\t\tcontinue; // match is outside classpath\r", "+\t\t\t}\r", "-\t\t\t\tresource = openable.getUnderlyingResource();\r", "+\t\t\t\tif (workingCopy != null) {\r", "+\t\t\t\t\tresource = workingCopy.getOriginalElement().getUnderlyingResource();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tresource = openable.getUnderlyingResource();\r", "+\t\t\t\t}\r", "-\t\t\t\t\t\tthis.initializeMatchingOpenables(workingCopies);\r", "+\t\t\t\t\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "-\t\t\tthis.initializeMatchingOpenables(workingCopies);\r", "-\t\t}\r", "+\t\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "+\t\t} \r"]}], "num": 24737}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "417994b380593325e5b52bf1f1c8dc3a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1178939a7fbc220a004f9ffc423a36a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 236, "methodNumberAfterChange": 236, "signatureBeforeChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "signatureAfterChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "diff": ["-\tif(referenceContext instanceof MethodDeclaration) {", "-\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) referenceContext;", "+\tif(this.referenceContext instanceof MethodDeclaration) {", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) this.referenceContext;", "-\tcompilationUnit.compilationResult.lineSeparatorPositions = scanner.getLineEnds();", "-\tscanner.recordLineSeparator = false;", "+\tthis.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();", "+\tthis.scanner.recordLineSeparator = false;", "-\tint start = scanner.initialPosition;", "-\tint end = scanner.eofPosition <= Integer.MAX_VALUE ? scanner.eofPosition - 1 : scanner.eofPosition;", "+\tint start = this.scanner.initialPosition;", "+\tint end = this.scanner.eofPosition <= Integer.MAX_VALUE ? this.scanner.eofPosition - 1 : this.scanner.eofPosition;", "-\t\tscanner.resetTo(start, end);", "+\t\tthis.scanner.resetTo(start, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33c2c8bbe131fcd484716d1d3437f779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "fd230c4ee1ceefd6a4812ebc7de0e734ce8df73c", "commitAfterChange": "e752367433ca417806253a6753c55772428a8bf6", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "signatureAfterChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "diff": ["+// A P I", "+\tif(referenceContext instanceof MethodDeclaration) {", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) referenceContext;", "+\t\tif(methodDeclaration.errorInSignature){", "+\t\t\treturn;", "+\t\t}", "+\t}", "-\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, isDietParse, oldFirstToken);", "-\tdiagnoseParser.diagnoseParse();", "+\tint start = scanner.initialPosition;", "+\tint end = scanner.eofPosition <= Integer.MAX_VALUE ? scanner.eofPosition - 1 : scanner.eofPosition;", "+\tif(isDietParse) {", "+\t\tTypeDeclaration[] types = this.compilationUnit.types;", "+\t\t", "+\t\tint[][] intervalToSkip = org.eclipse.jdt.internal.compiler.parser.diagnose.Util.computeDietRange(types);", "+\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end, intervalToSkip[0], intervalToSkip[1], intervalToSkip[2]);", "+\t\tdiagnoseParser.diagnoseParse();", "+\t\t", "+\t\treportSyntaxErrorsForSkippedMethod(types);", "+\t\tscanner.resetTo(start, end);", "+\t} else {", "+\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end);", "+\t\tdiagnoseParser.diagnoseParse();", "+\t}"]}], "num": 37957}
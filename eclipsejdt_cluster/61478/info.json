{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5245a97bad87a71557a3910a880cc0bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "148f9cd197a3d4157bd1b432c23f0378", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "63739b2368f2809d49b2ea10b6b3b2f6af96a94d", "commitAfterChange": "a08ab6c5a1a888fb837cc617f27fffac78616bdc", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression)", "diff": ["-\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "-\t\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\t\t \tsetInfixSourcePositions(infixExpression, expression.sourceStart);", "-\t\t\tint startPosition = leftExpression.getStartPosition();", "-\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t \tsetInfixSourcePositions(infixExpression, expression.sourceStart);", "-\t\tint startPosition = leftExpression.getStartPosition();", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t \tsetInfixSourcePositions(infixExpression, expression.sourceStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19e24767c454c4ace39ef4fd9df31732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "8e2ef31cf8fd6f75aa20407e8ef5b91a95949af6", "commitAfterChange": "7b76bd109981132b10232dab12b61206fb5d8435", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate synchronized ICompilationUnit getWorkingCopyForGeneratedFile(IFile parentFile, String typeName, CompilationUnitHelper cuh)", "signatureAfterChange": " \tprivate synchronized ICompilationUnit getWorkingCopyForReconcile(IFile parentFile, String typeName, CompilationUnitHelper cuh)", "diff": ["-\tprivate synchronized ICompilationUnit getWorkingCopyForGeneratedFile(IFile parentFile, String typeName, CompilationUnitHelper cuh)", "+\tprivate synchronized ICompilationUnit getWorkingCopyForReconcile(IFile parentFile, String typeName, CompilationUnitHelper cuh)", "-\t\tworkingCopy = _hiddenBuiltTypes.get(generatedFile);", "+\t\tworkingCopy = _hiddenBuiltTypes.remove(generatedFile);", "+\t\t\t_reconcileNonDeps.remove(parentFile, generatedFile);", "+\t\t\t_reconcileGenTypes.put(generatedFile, workingCopy);", "+\t\t\t_reconcileDeps.put(parentFile, generatedFile);", "-\t\t\t\t\t\"move working copy from hidden to regular list: \" + generatedFile); //$NON-NLS-1$", "-\t\t\t_hiddenBuiltTypes.remove(generatedFile);", "-\t\t\t_workingCopies.put(generatedFile, workingCopy);", "+\t\t\t\t\t\"moved working copy from hidden to regular list: \" + generatedFile); //$NON-NLS-1$", "-\t\t\tworkingCopy = _workingCopies.get(generatedFile);", "-\t\t\tif (null == workingCopy) {", "+\t\t\tworkingCopy = _reconcileGenTypes.get(generatedFile);", "+\t\t\tif (null != workingCopy) {", "+\t\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace(", "+\t\t\t\t\t\t\"obtained existing working copy from regular list: \" + generatedFile); //$NON-NLS-1$", "+\t\t\t} else {", "-\t\t\t\tworkingCopy = cuh.createWorkingCopy(typeName, root);", "-\t\t\t\t_workingCopies.put(generatedFile, workingCopy);", "+\t\t\t\tworkingCopy = cuh.getWorkingCopy(typeName, root);", "+\t\t\t\t_reconcileDeps.put(parentFile, generatedFile);", "+\t\t\t\t_reconcileGenTypes.put(generatedFile, workingCopy);", "-\t\t\t} else {", "-\t\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace(", "-\t\t\t\t\t\t\"obtained existing working copy from regular list: \" + workingCopy.getElementName()); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Add it to the dependency map (a no-op if it's already there)", "-\t\tboolean added = _parentToGenWorkingCopies.put(parentFile, workingCopy);", "-\t\tif (AptPlugin.DEBUG_GFM_MAPS) {", "-\t\t\tif (added)", "-\t\t\t\tAptPlugin.trace(\"working copy association added: \" + parentFile + \" -> \" + workingCopy.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\telse", "-\t\t\t\tAptPlugin.trace(\"working copy association already present: \" + parentFile + \" -> \" + workingCopy.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t} ", "-", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619173dda4017a9eebcfbce20a59f5e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "63739b2368f2809d49b2ea10b6b3b2f6af96a94d", "commitAfterChange": "a08ab6c5a1a888fb837cc617f27fffac78616bdc", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression expression)", "diff": ["-\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "-\t\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\t\t \tsetInfixSourcePositions(infixExpression, expression.sourceStart);", "-\t\t\tint startPosition = leftExpression.getStartPosition();", "-\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t \tsetInfixSourcePositions(infixExpression, expression.sourceStart);", "-\t\tint startPosition = leftExpression.getStartPosition();", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t \tsetInfixSourcePositions(infixExpression, expression.sourceStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de72e75bd8cacdceba33114be7af5f97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void generateSyntheticBodyForSwitchTable(SyntheticMethodBinding methodBinding)", "signatureAfterChange": " public void generateSyntheticBodyForSwitchTable(SyntheticMethodBinding methodBinding)", "diff": ["-public void generateSyntheticBodyForSwitchTable(SyntheticMethodBinding methodBinding) {", "-\tfinal Label nullLabel = new Label(this);", "-\tFieldBinding syntheticFieldBinding = methodBinding.targetReadField;", "-", "-\tthis.getstatic(syntheticFieldBinding);", "-\tthis.ifnull(nullLabel);", "-\tfinal int stackSizeForIf = this.stackDepth;", "-\tthis.areturn();", "-\tnullLabel.place();", "-\tthis.stackDepth = stackSizeForIf;", "-\tthis.pop();", "-\tReferenceBinding enumBinding = (ReferenceBinding) methodBinding.targetEnumType;", "-\tchar[] signature = \"()\".toCharArray(); //$NON-NLS-1$", "-\tArrayBinding arrayBinding = scope.createArrayType(enumBinding, 1);", "-\tsignature = CharOperation.concat(signature, arrayBinding.constantPoolName());", "-\tthis.invoke(OPC_invokestatic, 0, 1, enumBinding.constantPoolName(), TypeConstants.VALUES, signature);", "-\tthis.arraylength();", "-\tthis.newarray(ClassFileConstants.INT_ARRAY);", "-\tfinal FieldBinding[] fields = enumBinding.fields();", "-\tif (fields != null) {", "-\t\tfor (int i = 0, max = fields.length; i < max; i++) {", "-\t\t\tFieldBinding fieldBinding = fields[i];", "-\t\t\tif ((fieldBinding.getAccessFlags() & ClassFileConstants.AccEnum) != 0) {", "-\t\t\t\tfinal Label endLabel = new Label(this);", "-\t\t\t\tfinal ExceptionLabel anyExceptionHandler = new ExceptionLabel(this, TypeBinding.LONG /* represents NoSuchFieldError*/);", "-\t\t\t\tthis.aload_0();", "-\t\t\t\tthis.getstatic(fieldBinding);", "-\t\t\t\tthis.invokeEnumOrdinal(enumBinding.constantPoolName());", "-\t\t\t\tthis.generateInlinedValue(fieldBinding.id);", "-\t\t\t\tthis.iastore();", "-\t\t\t\tanyExceptionHandler.placeEnd();", "-\t\t\t\tthis.goto_(endLabel);", "-\t\t\t\t// Generate the body of the exception handler", "-\t\t\t\tfinal int saveStackSize = stackDepth;", "-\t\t\t\tstackDepth = 1;", "-\t\t\t\tanyExceptionHandler.place();", "-\t\t\t\tthis.pop(); // we don't use it so we can pop it", "-\t\t\t\tstackDepth = saveStackSize;", "-\t\t\t\tendLabel.place();\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t}", "-\tthis.putstatic(syntheticFieldBinding);", "-\tareturn();", "+public void generateSyntheticBodyForSwitchTable(SyntheticMethodBinding methodBinding) {", "+\tClassScope scope = ((SourceTypeBinding)methodBinding.declaringClass).scope;", "+\tinitializeMaxLocals(methodBinding);", "+\tfinal Label nullLabel = new Label(this);", "+\tFieldBinding syntheticFieldBinding = methodBinding.targetReadField;", "+", "+\tthis.getstatic(syntheticFieldBinding);", "+\tthis.dup();", "+\tthis.ifnull(nullLabel);", "+\tthis.areturn();", "+\tthis.pushOnStack(syntheticFieldBinding.type);", "+\tnullLabel.place();", "+\tthis.pop();", "+\tReferenceBinding enumBinding = (ReferenceBinding) methodBinding.targetEnumType;", "+\tArrayBinding arrayBinding = scope.createArrayType(enumBinding, 1);", "+\tthis.invokeJavaLangEnumValues(enumBinding, arrayBinding);", "+\tthis.arraylength();", "+\tthis.newarray(ClassFileConstants.INT_ARRAY);", "+\tthis.astore_0();", "+\tfinal FieldBinding[] fields = enumBinding.fields();", "+\tif (fields != null) {", "+\t\tfor (int i = 0, max = fields.length; i < max; i++) {", "+\t\t\tFieldBinding fieldBinding = fields[i];", "+\t\t\tif ((fieldBinding.getAccessFlags() & ClassFileConstants.AccEnum) != 0) {", "+\t\t\t\tfinal Label endLabel = new Label(this);", "+\t\t\t\tfinal ExceptionLabel anyExceptionHandler = new ExceptionLabel(this, TypeBinding.LONG /* represents NoSuchFieldError*/);", "+\t\t\t\tthis.aload_0();", "+\t\t\t\tthis.getstatic(fieldBinding);", "+\t\t\t\tthis.invokeEnumOrdinal(enumBinding.constantPoolName());", "+\t\t\t\tthis.generateInlinedValue(fieldBinding.id);", "+\t\t\t\tthis.iastore();", "+\t\t\t\tanyExceptionHandler.placeEnd();", "+\t\t\t\tthis.goto_(endLabel);", "+\t\t\t\t// Generate the body of the exception handler", "+\t\t\t\tthis.pushOnStack(scope.getJavaLangThrowable());", "+\t\t\t\tanyExceptionHandler.place();", "+\t\t\t\tthis.pop(); // we don't use it so we can pop it", "+\t\t\t\tendLabel.place();\t\t\t\t", "+\t\t\t}", "+\t\t}", "+\t}", "+\tthis.aload_0();", "+\tthis.dup();", "+\tthis.putstatic(syntheticFieldBinding);", "+\tareturn();", "+}"]}], "num": 61478}
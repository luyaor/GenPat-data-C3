{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef432822c43432c899486e0193c29c5b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ef90d45cf4725370e86503391abd4e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "027a5942c1f8a8df8288ac0e347e39e4a0c4c335", "commitAfterChange": "16d018b1beaec2325e8b119cf0432c848cb2dd74", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": "     public void test137()", "signatureAfterChange": "     public void test137()", "diff": ["+    \t\t\t\"@SuppressWarnings(\\\"all\\\")//$NON-NLS-1$\\n\" + ", "-    \t\t\t\"\t\t// Zork z;\\n\" + ", "+    \t\t\t\"\t\tZork z;\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\t} finally {\\n\" + ", "-\t\t\t\"\t\t\tthrow new Error();\\n\" + ", "-\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"finally block does not complete normally\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 19)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f335ddd1f92ed3297f9bbc46cc5b701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e2422311047b85902980920dda1eeedf124d520c", "commitAfterChange": "c107fdebcaaafcbea0a28f68e9b229afba9f7c4f", "methodNumberBeforeChange": 1376, "methodNumberAfterChange": 1376, "signatureBeforeChange": " public void test1345() throws Exception", "signatureAfterChange": " public void test1345() throws Exception", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tpublic class X<T> extends Adapter {\\n\" +", "-\t\t\t\"\t                          ^^^^^^^\\n\" +", "-\t\t\t\"Adapter is a raw type. References to generic type Adapter<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" +", "-\t\t\t\"\t           ^^^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" +", "-\t\t\t\"\t                    ^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The method makeSetter() of type X<T> should be tagged with @Override since it actually overrides a superclass method\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot cast from new Adapter.Setter(){} to String\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type mismatch: cannot convert from String to Adapter.Setter\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t                    ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t                            ^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"9. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" +", "-\t\t\t\"\t                                       ^^^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tpublic class X<T> extends Adapter {\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^\\n\" + ", "+\t\t\t\"Adapter is a raw type. References to generic type Adapter<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method makeSetter() of type X<T> has the same erasure as makeSetter() of type Adapter but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot cast from new Adapter.Setter(){} to String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from String to Adapter.Setter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t                            ^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c98596a21717f80d5f11a39d6c076a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c76ca0258749c2717f441fbd5cdd6335fcc29bd3", "commitAfterChange": "00fb29417bfb5734c6eca9ef041023eab85e6eb6", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.useSingleThread\\\" value=\\\"disabled\\\"/>\\n\" + "]}], "num": 69186}
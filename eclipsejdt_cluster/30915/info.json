{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3741c21b83800649ffa7af7baf78a2f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e11e94dd7110305f31d50cbb57483b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/pattern/InternalSearchPattern.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprotected char[] encodeIndexKey(char[] key)", "signatureAfterChange": " protected SearchPattern currentPattern()", "diff": ["-", "-\tprotected char[] encodeIndexKey(char[] key) {", "-\t\t// TODO (kent) with new index, need to encode key for case insensitive queries too", "-\t\t// also want to pass along the entire pattern", "-\t\tif (this.isCaseSensitive && key != null) {", "-\t\t\tswitch(this.matchMode) {", "-\t\t\t\tcase SearchPattern.R_EXACT_MATCH :", "-\t\t\t\tcase  SearchPattern.R_PREFIX_MATCH :", "-\t\t\t\t\treturn key;", "-\t\t\t\tcase  SearchPattern.R_PATTERN_MATCH :", "-\t\t\t\t\tint starPos = CharOperation.indexOf('*', key);", "-\t\t\t\t\tswitch(starPos) {", "-\t\t\t\t\t\tcase -1 :", "-\t\t\t\t\t\t\treturn key;", "-\t\t\t\t\t\tdefault : ", "-\t\t\t\t\t\t\tchar[] result = new char[starPos];", "-\t\t\t\t\t\t\tSystem.arraycopy(key, 0, result, 0, starPos);", "-\t\t\t\t\t\t\treturn result;", "-\t\t\t\t\t\tcase 0 : // fall through", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase  SearchPattern.R_REGEXP_MATCH:", "-\t\t\t\t\t// TODO (jerome) implement", "-\t\t\t\t\treturn key;", "-\t\t\t}", "-\t\t}", "-\t\treturn CharOperation.NO_CHAR; // find them all", "-\t}", "+}", "+protected SearchPattern currentPattern() {", "+\treturn (SearchPattern) this;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a94efa4f4b3106d6371a67aa419d4ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MementoTokenizer.java", "commitBeforeChange": "2d127f9c4f7d2f6e84664bc558e4d5a8224f5ac8", "commitAfterChange": "ba102afaa27b3b6b63ee0fd01eab5a8d45f4d8a9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic String nextToken()", "signatureAfterChange": "  \tpublic String nextToken()", "diff": ["+\t\t\t\t// Also covers JavaElement#JEM_DELIMITER_ESCAPE, in which case, ", "+\t\t\t\t// we seek ahead by one char and check if it's an escaped delimiter", "+\t\t\t\t// and if that's true, we return that as the token. ", "+\t\t\t\t// Else, we decide that JEM_JAVAPROJECT is the current token.", "+\t\t\t\tif (this.index < this.length) {", "+\t\t\t\t\tchar nextChar = this.memento[this.index++];", "+\t\t\t\t\tswitch(nextChar) {", "+\t\t\t\t\t\tcase JavaElement.JEM_LAMBDA_EXPRESSION:", "+\t\t\t\t\t\t\treturn LAMBDA_EXPRESSION;", "+\t\t\t\t\t\tcase JavaElement.JEM_LAMBDA_METHOD:", "+\t\t\t\t\t\t\treturn LAMBDA_METHOD;", "+\t\t\t\t\t\tcase JavaElement.JEM_STRING:", "+\t\t\t\t\t\t\treturn STRING;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tthis.index--;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tcase JavaElement.JEM_LAMBDA_EXPRESSION:", "-\t\t\t\treturn LAMBDA_EXPRESSION;", "-\t\t\tcase JavaElement.JEM_LAMBDA_METHOD:", "-\t\t\t\treturn LAMBDA_METHOD;", "-\t\t\tcase JavaElement.JEM_STRING:", "-\t\t\t\treturn STRING;", "-\t\t\t\tcase JavaElement.JEM_LAMBDA_EXPRESSION:", "-\t\t\t\tcase JavaElement.JEM_LAMBDA_METHOD:\t", "-\t\t\t\tcase JavaElement.JEM_STRING:"]}], "num": 30915}
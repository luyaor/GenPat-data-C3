{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2b3bec269dda68bceebf7d3e835aadb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4271eca383619708dc4ba74a1a794db8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "cc7f1a1bacd0718b1de1e767c95d5236699eb41e", "commitAfterChange": "d5b7e480bcefa88000f87f4e00b21f497f2bba90", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\tConstant condConstant = this.condition.optimizedBooleanConstant();", "-\t\tif (thenStatement == null) {", "+\t\tif (this.thenStatement == null) {", "-\t\t\tConstant cst;", "-\t\t\t\t((((cst = condition.constant) != NotAConstant)", "-\t\t\t\t\t&& (cst.booleanValue() == false))", "-\t\t\t\t\t|| (((cst = condition.optimizedBooleanConstant()) != NotAConstant)", "-\t\t\t\t\t\t&& (cst.booleanValue() == false)))", "-\t\t\t\t\t? (flowInfo.initsWhenTrue().copy().markAsFakeReachable(true))", "+\t\t\t\t(condConstant != NotAConstant && condConstant.booleanValue() == false)", "+\t\t\t\t\t? flowInfo.initsWhenTrue().copy().markAsFakeReachable(true)", "-\t\tthenExit = (thenFlowInfo == FlowInfo.DeadEnd) || thenFlowInfo.isFakeReachable();", "+\t\tthis.thenExit = (thenFlowInfo == FlowInfo.DeadEnd) || thenFlowInfo.isFakeReachable();", "-\t\tif (elseStatement == null) {", "+\t\tif (this.elseStatement == null) {", "-\t\t\tConstant cst;", "-\t\t\t\t((((cst = condition.constant) != NotAConstant) && (cst.booleanValue() == true))", "-\t\t\t\t\t|| (((cst = condition.optimizedBooleanConstant()) != NotAConstant)", "-\t\t\t\t\t\t&& (cst.booleanValue() == true)))", "-\t\t\t\t\t? (flowInfo.initsWhenFalse().copy().markAsFakeReachable(true))", "+\t\t\t\t(condConstant != NotAConstant && condConstant.booleanValue() == true)", "+\t\t\t\t\t? flowInfo.initsWhenFalse().copy().markAsFakeReachable(true)", "-\t\tif ((condition.constant != NotAConstant)", "-\t\t\t&& (condition.constant.booleanValue() == true)) {", "+\t\tif (condConstant != NotAConstant && condConstant.booleanValue() == true) {", "-\t\t\tif (thenExit) {", "+\t\t\tif (this.thenExit) {", "-\t\t\tif ((condition.constant != NotAConstant)", "-\t\t\t\t&& (condition.constant.booleanValue() == false)) {", "-\t\t\t\tif (elseFlowInfo == FlowInfo.DeadEnd) {", "+\t\t\tif (condConstant != NotAConstant && condConstant.booleanValue() == false) {", "+\t\t\t\tif (elseFlowInfo == FlowInfo.DeadEnd || elseFlowInfo.isFakeReachable()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914ce6ee00e4b71a0b15cfe40d06a209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif ((bits & IsReachableMASK) == 0) {", "+\t\tif ((this.bits & IsReachableMASK) == 0) {", "-\t\tConstant cst, condCst;", "-\t\tboolean hasThenPart =", "-\t\t\t!((((cst = condition.constant) != NotAConstant)", "-\t\t\t\t&& (cst.booleanValue() == false))", "-\t\t\t\t|| (thenStatement == null)", "-\t\t\t\t|| (thenStatement.isEmptyBlock())", "-\t\t\t\t|| (((condCst = condition.conditionalConstant()) != NotAConstant)", "-\t\t\t\t\t&& (condCst.booleanValue() == false)));", "+\t\tConstant cst;", "+\t\tboolean hasThenPart = ", "+\t\t\t!(((cst = this.condition.optimizedBooleanConstant()) != NotAConstant", "+\t\t\t\t\t&& cst.booleanValue() == false)", "+\t\t\t\t|| this.thenStatement == null", "+\t\t\t\t|| this.thenStatement.isEmptyBlock());", "-\t\t\t!(((cst != NotAConstant) && (cst.booleanValue() == true))", "-\t\t\t\t|| (elseStatement == null)", "-\t\t\t\t|| (elseStatement.isEmptyBlock())", "-\t\t\t\t|| (((condCst = condition.conditionalConstant()) != NotAConstant)", "-\t\t\t\t\t&& (condCst.booleanValue() == true)));", "+\t\t\t!((cst != NotAConstant && cst.booleanValue() == true)", "+\t\t\t\t|| this.elseStatement == null", "+\t\t\t\t|| this.elseStatement.isEmptyBlock());", "-\t\t\tcondition.generateOptimizedBoolean(", "+\t\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\tthenStatement.generateCode(currentScope, codeStream);", "+\t\t\tthis.thenStatement.generateCode(currentScope, codeStream);", "-\t\t\t\tthenStatement.branchChainTo(endifLabel);", "+\t\t\t\tthis.thenStatement.branchChainTo(endifLabel);", "-\t\t\t\tcondition.generateOptimizedBoolean(", "+\t\t\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\t\tcondition.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "-\t\t\telseStatement.generateCode(currentScope, codeStream);", "+\t\t\tthis.elseStatement.generateCode(currentScope, codeStream);"]}], "num": 66146}
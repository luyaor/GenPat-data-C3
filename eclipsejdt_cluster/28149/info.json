{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33ec50fd27357fbb78d04867c51d1b94", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "444aa8b9394da5d7b8f051de17c90565", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "commitAfterChange": "f91a77f7dbbae615b9ce90f64f6be8f6d8a36ad5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, boolean forArray)", "signatureAfterChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "diff": ["-\tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, boolean forArray){\r", "+\tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim){\r", "-\t\t\tif(nameEnvironment.findType(qualifiedSourceName, CharOperation.splitOn('.', qualifiedPackageName)) == null)\r", "-\t\t\t\treturn;\r", "-\t\t\t\r", "-\t\t\tif(forArray) {\r", "-\t\t\t\tsourceName = CharOperation.subarray(sourceName, 0, sourceName.length - 2);\r", "-\t\t\t}\r", "-\r", "-\t\t\t\t\t\tname = computeBaseNames('z', excludeNames);\r", "+\t\t\t\t\t\tname = computeBaseNames('b', excludeNames);\r", "-\t\t\tchar[][] names = computeNames(sourceName, forArray);\r", "+\t\t\tchar[][] names = computeNames(sourceName, dim > 0);\r", "+\t\t\tchar[] displayName;\r", "+\t\t\tif (dim > 0){\r", "+\t\t\t\tint l = qualifiedSourceName.length;\r", "+\t\t\t\tdisplayName = new char[l+(2*dim)];\r", "+\t\t\t\tSystem.arraycopy(qualifiedSourceName, 0, displayName, 0, l);\r", "+\t\t\t\tfor(int i = 0; i < dim; i++){\r", "+\t\t\t\t\tdisplayName[l+(i*2)] = '[';\r", "+\t\t\t\t\tdisplayName[l+(i*2)+1] = ']';\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tdisplayName = qualifiedSourceName;\r", "+\t\t\t}\r", "-\t\t\t\t\tqualifiedSourceName,\r", "+\t\t\t\t\tdisplayName,\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71854b45904c8cb9f1abb5aa4cc0af72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "signatureAfterChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "diff": ["-\t\t\t\t\t\tthis.tagBits |= TagBits.HasInconsistentHierarchy;", "+\t\t\t\t\t\tthis.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\t\t\t\t\tthis.signature = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));\t\t\t\t", "+\t\t\t\t\t\t\t\t\tthis.signature = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));", "+\t\t\t\tcase 'M' :", "+\t\t\t\t\tif (CharOperation.equals(attributeName, AttributeNamesConstants.MissingTypesName)) {", "+\t\t\t\t\t\t// decode the missing types", "+\t\t\t\t\t\tint missingTypeOffset = readOffset + 6;", "+\t\t\t\t\t\tint numberOfMissingTypes = u2At(missingTypeOffset);", "+\t\t\t\t\t\tif (numberOfMissingTypes != 0) {", "+\t\t\t\t\t\t\tmissingTypeNames = new char[numberOfMissingTypes][][];", "+\t\t\t\t\t\t\tmissingTypeOffset += 2;", "+\t\t\t\t\t\t\tfor (int j = 0; j < numberOfMissingTypes; j++) {", "+\t\t\t\t\t\t\t\tutf8Offset = constantPoolOffsets[u2At(constantPoolOffsets[u2At(missingTypeOffset)] + 1)];", "+\t\t\t\t\t\t\t\tchar[] missingTypeConstantPoolName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));", "+\t\t\t\t\t\t\t\tmissingTypeNames[j] = CharOperation.splitOn('/', missingTypeConstantPoolName);", "+\t\t\t\t\t\t\t\tmissingTypeOffset += 2;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 28149}
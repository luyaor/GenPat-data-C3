{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e343a237f16bb7cbbe24de96fbe48f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f828bcf77ef13ef919d417280752436", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "948661c4cb198af70b598b9954e5159cb73d7234", "commitAfterChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private void matchReportReference(QualifiedTypeReference typeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r private void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-private void matchReportReference(QualifiedTypeReference typeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r", "-\tchar[][] qualifiedName = CharOperation.splitOn('.', CharOperation.concat(this.qualification, this.simpleName, '.'));\r", "-\tlocator.reportAccurateReference(typeRef.sourceStart, typeRef.sourceEnd, qualifiedName, element, accuracy);\r", "+private void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r", "+\tchar[][] tokens = null;\r", "+\tTypeBinding typeBinding = qTypeRef.binding;\r", "+\tif (typeBinding instanceof ArrayBinding) {\r", "+\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;\r", "+\t}\r", "+\tchar[][] typeTokens = qTypeRef.tokens;\r", "+\tint lastIndex = typeTokens.length-1;\r", "+\t// try to match all enclosing types for which the token matches as well.\r", "+\twhile (typeBinding != null && lastIndex >= 0){\r", "+\t\tif (matchesName(this.simpleName, typeTokens[lastIndex--])) {\r", "+\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);\r", "+\t\t\tif (level != IMPOSSIBLE_MATCH) {\r", "+\t\t\t\ttokens = new char[lastIndex+2][];\r", "+\t\t\t\tSystem.arraycopy(typeTokens, 0, tokens, 0, lastIndex+2);\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (typeBinding instanceof ReferenceBinding){\r", "+\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "+\t\t} else {\r", "+\t\t\ttypeBinding = null;\r", "+\t\t}\r", "+\t}\r", "+\tif (tokens == null) {\r", "+\t\ttokens = qTypeRef.tokens;\r", "+\t}\r", "+\tlocator.reportAccurateReference(qTypeRef.sourceStart, qTypeRef.sourceEnd, tokens, element, accuracy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad774529e0350a44f4eec9f7a253e4e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "948661c4cb198af70b598b9954e5159cb73d7234", "commitAfterChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void matchReportReference(QualifiedNameReference nameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r private void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-private void matchReportReference(QualifiedNameReference nameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r", "-\tchar[][] qualifiedName = CharOperation.splitOn('.', \r", "-\t\tthis.qualification == null ? \r", "-\t\t\tthis.simpleName :\r", "-\t\t\tCharOperation.concat(this.qualification, this.simpleName, '.'));\r", "-\tlocator.reportAccurateReference(nameRef.sourceStart, nameRef.sourceEnd, qualifiedName, element, accuracy);\r", "+private void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r", "+\tchar[][] tokens = null;\r", "+\tBinding binding = qNameRef.binding;\r", "+\tTypeBinding typeBinding = null;\r", "+\tchar[][] nameTokens = qNameRef.tokens;\r", "+\tint lastIndex = nameTokens.length-1;\r", "+\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {\r", "+\t\tcase BindingIds.FIELD : // reading a field\r", "+\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "+\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "+\t\t\tlastIndex -= otherBindingsCount + 1;\r", "+\t\t\tbreak;\r", "+\t\tcase BindingIds.TYPE : //=============only type ==============\r", "+\t\t\ttypeBinding = (TypeBinding)binding;\r", "+\t}\r", "+\t// try to match all enclosing types for which the token matches as well.\r", "+\twhile (typeBinding != null && lastIndex >= 0){\r", "+\t\tif (this.matchesName(this.simpleName, nameTokens[lastIndex--])) {\r", "+\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);\r", "+\t\t\tif (level != IMPOSSIBLE_MATCH) {\r", "+\t\t\t\ttokens = new char[lastIndex+2][];\r", "+\t\t\t\tSystem.arraycopy(nameTokens, 0, tokens, 0, lastIndex+2);\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (typeBinding instanceof ReferenceBinding){\r", "+\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "+\t\t} else {\r", "+\t\t\ttypeBinding = null;\r", "+\t\t}\r", "+\t} \r", "+\tif (tokens == null) {\r", "+\t\ttokens = qNameRef.tokens;\r", "+\t}\r", "+\tlocator.reportAccurateReference(qNameRef.sourceStart, qNameRef.sourceEnd, tokens, element, accuracy);\r"]}], "num": 16937}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12660df0211f2315dd8b7b6dcfee495c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58998eb8cbf68cfe7b92ffe7fb17d80f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "124643a9b7e02d95e1d58a7a8c2d6cfa0cf9fa28", "commitAfterChange": "ef6d0ed8f44402be2b4df60004e0bd04afc498e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\tIIndexSearchRequestor orCombiner = (IIndexSearchRequestor) new OrPathCombiner(requestor);", "+\t// per construction, OR pattern can only be used with a PathCollector (which already gather results using a set)", "-\t\tthis.patterns[i].findIndexMatches(input, orCombiner, progressMonitor, scope);", "+\t\tthis.patterns[i].findIndexMatches(input, requestor, progressMonitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9574e6c85931f833a9849376ce1d82bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/pattern/InternalSearchPattern.java", "commitBeforeChange": "c17d493078a2c5dda9d1eb1299696eeeaa1846c4", "commitAfterChange": "168fe2eb6fc2338f27a5d0bc7cd06007fc53ed39", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " \tpublic void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-\t", "-\t\tfor (int iCategory = 0, categoriesLength = categories.length; iCategory < categoriesLength; iCategory++) {", "+\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "-\t\t\tchar[] category = categories[iCategory];", "-\t\t\tfindIndexMatches(input, requestor, participant, scope, progressMonitor, queryKey, category);", "+\t\t\tfindIndexMatches(input, requestor, participant, scope, progressMonitor, queryKey, categories[i]);"]}], "num": 18167}
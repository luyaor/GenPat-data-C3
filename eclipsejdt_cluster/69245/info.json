{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c50b1f796f64b4dba98284c8fc5d163a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "002349281f250b3f001100b7ccfcc905", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests2.java", "commitBeforeChange": "120defa76e249a7b50b5aa52206e16b815780186", "commitAfterChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testBug376673b() throws CoreException", "signatureAfterChange": " \tpublic void testBug376673b() throws CoreException", "diff": ["-\t\t\t\t\t\"class \ud842\udf9f1 {\" +", "-\t\t\t\t\t\"\tpublic void \ud842\udf9fm() {}\\n\" +", "+\t\t\t\t\t\"class \\uD842\\uDF9F1 {\" +", "+\t\t\t\t\t\"\tpublic void \\uD842\\uDF9Fm() {}\\n\" +", "-\t\t\t\tIFile file = createFile(\"/P/pkg/\ud842\udf9f1.java\", content, \"UTF-8\");", "+\t\t\t\tIFile file = createFile(\"/P/pkg/\\uD842\\uDF9F1.java\", content, \"UTF-8\");", "-\t\t\tsearch(\"\ud842\udf9fm\", METHOD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "-\t\t\tassertSearchResults(\"pkg/\ud842\udf9f1.java void pkg.\ud842\udf9f1.\ud842\udf9fm() [\ud842\udf9fm] EXACT_MATCH\");", "+\t\t\tsearch(\"\\uD842\\uDF9Fm\", METHOD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "+\t\t\tassertSearchResults(\"pkg/\\uD842\\uDF9F1.java void pkg.\\uD842\\uDF9F1.\\uD842\\uDF9Fm() [\\uD842\\uDF9Fm] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18da2178a6a089eb2df47bc0b982b3d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test20() throws JavaModelException", "signatureAfterChange": "  \tpublic void test20() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\",", "+\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a59b42b4aae9a25edd7182a08198c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973a59d9f5dc789f69240919cc9baa2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf77a68065bebbd30b008279c3eb77c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": " \tpublic void test182()", "signatureAfterChange": " \tpublic void test182()", "diff": ["-\t\t\t\"Unnecessary cast to type X<E> for expression of type X<E>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<E> to X<E>\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Object to parameterized type AX<String> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to AX<String> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Object to parameterized type AX<E> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to AX<E> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unnecessary cast to type AX<E> for expression of type null\\n\" + ", "+\t\t\t\"Unnecessary cast from null to AX<E>\\n\" + ", "-\t\t\t\"Unnecessary cast to type X<String> for expression of type BX\\n\" + ", "+\t\t\t\"Unnecessary cast from BX to X<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aea68307e59025c7e05804b2e9f6f19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "-\t\t\tIMethod method = type.getMethod(\"annSearchedMethod\", null);", "+\t\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", null);", "-\t\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedMethod] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH\","]}], "num": 69245}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef287cf59449537b8228425c291ae09d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10333b5e26dee5ea6728da5059215350", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "259752fd2611ae86a8e7deb13311cd77026ab6f4", "commitAfterChange": "4725cc4b92cda70d0724324edfd82ed8a46041bc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate IBinding internalResolveNameForSimpleName(Name name)", "signatureAfterChange": "  \tprivate IBinding internalResolveNameForSimpleName(Name name)", "diff": ["-\t\tif (node instanceof SingleNameReference) {", "+\t\tif (node instanceof CompilationUnitDeclaration) {", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = (CompilationUnitDeclaration) node;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\tif (types == null || types.length == 0) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration type = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) types[0];", "+\t\t\tif (type != null) {", "+\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(type.binding);", "+\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\treturn typeBinding.getPackage();", "+\t\t\t}", "+\t\t} else if (node instanceof AbstractMethodDeclaration) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) node;", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(methodDeclaration.binding);", "+\t\t\t\tif (methodBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, node);", "+\t\t\t\treturn methodBinding;", "+\t\t\t}", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "+\t\t\tif (typeBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.bindingsToAstNodes.put(typeBinding, node);", "+\t\t\treturn typeBinding;", "+\t\t} if (node instanceof SingleNameReference) {", "-\t\t\tif (singleTypeReference.binding == null) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\treturn this.getTypeBinding(singleTypeReference.binding.leafComponentType());", "-\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "-\t\t\treturn this.getVariableBinding(fieldDeclaration.binding);", "-\t\t}", "-\t\treturn null;", "-\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding binding = singleTypeReference.binding;", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\treturn this.getVariableBinding(fieldDeclaration.binding);", "+\t\t} else if (node instanceof MessageSend) {", "+\t\t\tMessageSend messageSend = (MessageSend) node;", "+\t\t\treturn getMethodBinding(messageSend.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d0ce9617140995413c7c48d1be08bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "diff": ["-\t", "+\t */", "+\tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes) {", "+\t\tTypeDeclaration typeDecl = this.ast.newTypeDeclaration();", "+\t\tint nodesLength = nodes.length;", "+\t\tfor (int i = 0; i < nodesLength; i++) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = nodes[i];", "+\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "+\t\t\t\t\tInitializer initializer = this.ast.newInitializer();", "+\t\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "+\t\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "+\t\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "+\t\t\t\t\tsetJavaDocComment(initializer);", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\t\t} else {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\t\t\tif (i > 0", "+\t\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "+\t\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "+\t\t\t\t\t\t// we have a multiple field declaration", "+\t\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "+\t\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "+\t\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// we can create a new FieldDeclaration", "+\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {", "+\t\t\t\tAbstractMethodDeclaration nextMethodDeclaration = (AbstractMethodDeclaration) node;", "+\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMethodDeclaration));", "+\t\t\t\t}", "+\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMemberDeclaration));", "+\t\t\t}", "+\t\t}", "+\t\treturn typeDecl;", "+\t}"]}], "num": 28636}
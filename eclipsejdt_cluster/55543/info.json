{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66bbca2f9fe25695717ef2e05d116945", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "108dad122f7e2e8f9086081d56585dec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 1469, "methodNumberAfterChange": 1469, "signatureBeforeChange": " public void test1434()", "signatureAfterChange": " public void test1434()", "diff": ["-// FIXME javac8 rejects", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t\t: // 1.8 is stricter:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l2 = m2((Class)Foo.class);\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Object to Foo\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l2 = m2((Class)Foo.class);\\n\" + ", "+\t\t\t\"\t             ^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12f6936882b9d787e3087506853d0880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " public void test0061()", "signatureAfterChange": " public void test0061()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tFileSystems.<String, Object>newFileSystem(uri, Collections.emptyMap());\\n\" + ", "-\t\t\"\t                            ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method newFileSystem(URI, Map<String,?>) in the type FileSystems is not applicable for the arguments (URI, Map<Object,Object>)\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tFileSystems.<String, Object>newFileSystem(uri, Collections.emptyMap());\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method newFileSystem(URI, Map<String,?>) in the type FileSystems is not applicable for the arguments (URI, Map<Object,Object>)\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t: // with better inference, method is applicable, but then we have another problem:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tFileSystems.<String, Object>newFileSystem(uri, Collections.emptyMap());\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unhandled exception type IOException\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tFileSystems.<String, Object>newFileSystem(uri, Collections.emptyMap());\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method newFileSystem(URI, Map<String,?>) of type FileSystems; it should not be parameterized with arguments <String, Object>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "213d08f1396aba35875e693a08ddfc40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test0056b()", "signatureAfterChange": " public void test0056b()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tX1<Integer> x1 = new X.X1<Integer>(1);\\n\" + ", "-\t\t\"\t                       ^^\\n\" + ", "-\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "-\t\t\"----------\\n\",", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tX1<Integer> x1 = new X.X1<Integer>(1);\\n\" + ", "+\t\t\t\"\t                       ^^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t: // additional error at line 6 due to better inference:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tX1<Integer> x1 = new X.X1<Integer>(1);\\n\" + ", "+\t\t\t\"\t                       ^^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX1<Number> x2 = new X.X1<Number>(1);\\n\" + ", "+\t\t\t\"\t                      ^^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Number>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2675869cac797f81116267edcd5391c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void test053()", "signatureAfterChange": " public void test053()", "diff": ["+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\"", "+\t\t: // in 1.8 bar(Z) is recognized as being more specific than bar(I<#RAW>)", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tbar(new Z(){});\\n\" + ", "+\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\"Access to enclosing constructor X.Z() is emulated by a synthetic accessor method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tprivate static class Z implements I {\\n\" + ", "+\t\t\t\"\t                                  ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fd22ac7936b5be56055182e312f71cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 904, "methodNumberAfterChange": 904, "signatureBeforeChange": " public void test0883()", "signatureAfterChange": " public void test0883()", "diff": ["+// FAIL ERRMSG", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\"", "+\t\t:", "+\t\t\"----------\\n\" +", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"\tString s = (String)foo(listu);\\n\" +", "+\t\t\"\t                   ^^^\\n\" +", "+\t\t\"Bound mismatch: The generic method foo(U) of type X is not applicable for the arguments (List<U>). The inferred type List<U> is not a valid substitute for the bounded parameter <U extends List<U>>\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 11)\\n\" +", "+\t\t\"\tString s = (String)foo(listv);\\n\" +", "+\t\t\"\t                   ^^^\\n\" +", "+\t\t\"Bound mismatch: The generic method foo(U) of type X is not applicable for the arguments (List<V>). The inferred type List<V> is not a valid substitute for the bounded parameter <U extends List<U>>\\n\" +", "+\t\t\"----------\\n\" ));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac6cd76d28f5b77c9272cab072d09c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 1231, "methodNumberAfterChange": 1232, "signatureBeforeChange": " public void test1200()", "signatureAfterChange": " public void test1200()", "diff": ["+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\"", "+\t\t: // fewer errors in 1.8+:", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 17)\\n\" +", "+\t\t\t\"\treturn (Map<Class<?>, X>) make(type, value);//2\\n\" +", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Cannot cast from X.Map<Class<capture#2-of ?>,X> to X.Map<Class<?>,X>\\n\" + // FIXME: javac8 only reports a warning here", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 25)\\n\" +", "+\t\t\t\"\treturn (Map<Class<?>, X>) make(X.class, value);//4\\n\" +", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Cannot cast from X.Map<Class<X>,X> to X.Map<Class<?>,X>\\n\" +", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0202e3d0167c922057b1d195d65f3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 1160, "methodNumberAfterChange": 1160, "signatureBeforeChange": " public void test1130()", "signatureAfterChange": " public void test1130()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "-\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" +", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Comparable<T> to String\\n\" +", "-\t\t\"----------\\n\");", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "+\t\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" +", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from Comparable<T> to String\\n\" +", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" + ", "+\t\t\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from capture#1-of ? extends T to String\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" + ", "+\t\t\t\t\"\t                           ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from capture#2-of ? extends Comparable<T> to String\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "452981c848c00df0a1280b611c63ebfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 1306, "methodNumberAfterChange": 1306, "signatureBeforeChange": " public void test1271()", "signatureAfterChange": " public void test1271()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t\t\t\"----------\\n\"", "+\t\t\t: // ATM, in 1.8+ we generate an extra error due to inner poly expression resolution after the target type is known.", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method put(Class<E>, X.TO<? super E>) in the type X is not applicable for the arguments (Class<Integer>, X.OO<String,Object>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X.OO<String,Object> to X.TO<? super E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c4b999063c6a2f2e76c65461d1b9ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "75ef57a93e4cb21ceda10f87f94dbbdb5e4d9d80", "commitAfterChange": "09c77a64b988d1b8740f2abeef7353a697d466b3", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_6 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\"----------\\n\" +", "+\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "+\t\t\"\tpublic boolean bar() {\\n\" +", "+\t\t\"\t               ^^^^^\\n\" +", "+\t\t\"The method bar() of type new Foo(){} should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" +", "+\t\t\"\tZork z;\\n\" +", "+\t\t\"\t^^^^\\n\" +", "+\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4b5b4177aae87b56570ba05c62dfa3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 527, "methodNumberAfterChange": 527, "signatureBeforeChange": " \tpublic void test0508()", "signatureAfterChange": " \tpublic void test0508()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tint i = l.get(0).length;\\n\" + ", "+\t\t\t\t\"\t                 ^^^^^^\\n\" + ", "+\t\t\t\t\"length cannot be resolved or is not a field\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tSerializable s2 = b ? l.get(0) : s;\\n\" + ", "+\t\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from capture#3-of ? super int[] to Serializable\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d04d9fa5fb69c7b375faa2f9212020a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": " \tpublic void test0391()", "signatureAfterChange": " \tpublic void test0391()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tString[] s = foo(null, new String[]{ \\\"hello\\\" });\\n\" + ", "+\t\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from String to String[]\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic <F> F foo(F f, F... others) {\\n\" + ", "+\t\t\t\t\"\t                           ^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Potential heap pollution via varargs parameter others\\n\" + ", "+\t\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6398b85cf4fcca9ffa897d29462e4b30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "75ef57a93e4cb21ceda10f87f94dbbdb5e4d9d80", "commitAfterChange": "09c77a64b988d1b8740f2abeef7353a697d466b3", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void test095()", "signatureAfterChange": " public void test095()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_6 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" : \t\t", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic enum X implements I, J { \\n\" +", "+\t\t\t\"\t            ^\\n\" +", "+\t\t\t\"The type X must implement the inherited abstract method I.foo(int)\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic void foo() {}\\n\" +", "+\t\t\t\"\t            ^^^^^\\n\" +", "+\t\t\t\"The method foo() of type X should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6723c3d8615d3c5f1bc43aa1a3c6e392", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " public void test051()", "signatureAfterChange": " public void test051()", "diff": ["+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\"", "+\t\t: // in 1.8 bar(Z) is recognized as being more specific than bar(I<#RAW>)", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tbar(new Z());\\n\" + ", "+\t\t\t\"\t    ^^^^^^^\\n\" + ", "+\t\t\t\"Access to enclosing constructor X.Z() is emulated by a synthetic accessor method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tprivate static final class Z implements I {\\n\" + ", "+\t\t\t\"\t                                        ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82c548b49e8cae222b50d475964ce8b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void test063()", "signatureAfterChange": " \tpublic void test066()", "diff": ["-\tpublic void test063() {", "+\tpublic void test066() {", "+\t\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\t\"Type safety : A generic array of Collection<? extends Number> is created for a varargs parameter\\n\" + ", "+\t\t\t\t\"Type safety: A generic array of Collection<? extends Number> is created for a varargs parameter\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic IteratorChain(Collection<? extends T> a, Collection<? extends T> b, Collection<? extends T> ... collections) {\\n\" + ", "+\t\t\t\t\"\t                                                                                                       ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Potential heap pollution via varargs parameter collections\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"\tnew IteratorChain<Number>(null, null);\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: A generic array of Collection<? extends Number> is created for a varargs parameter\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82ebcac36eee720d609df200aa81568c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 819, "methodNumberAfterChange": 819, "signatureBeforeChange": " public void test0798()", "signatureAfterChange": " public void test0798()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" : ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tprivate static <T extends Comparable<? super T>> T max(T... elems)\\n\" + ", "+\t\t\t\"\t                                                            ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter elems\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tSystem.out.println(max(1, 2.0, new BigDecimal(Math.PI)));\\n\" + ", "+\t\t\t\"\t                   ^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The generic method max(T...) of type X is not applicable for the arguments (Integer, Double, BigDecimal). The inferred type Number&Comparable<?> is not a valid substitute for the bounded parameter <T extends Comparable<? super T>>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8851b53b99238002c7af42987ce05247", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 422, "methodNumberAfterChange": 422, "signatureBeforeChange": " \tpublic void test0412()", "signatureAfterChange": " \tpublic void test0412()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic static <T> T first(T... args) {\\n\" + ", "+\t\t\t\t\"\t                               ^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Potential heap pollution via varargs parameter args\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ccab39c7f4ef7be7681bb90a16d756c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 1360, "methodNumberAfterChange": 1360, "signatureBeforeChange": " public void test1325()", "signatureAfterChange": " public void test1325()", "diff": ["-// FIXME javac8 rejects", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8", "+\t\t\t?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t\t: // 1.8 is stricter:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tvoid bar(X x) {\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String> xs2 = foo(x);\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Object to X<String>\\n\" + ", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9090234543375024b9c37b1a002bc489", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 763, "methodNumberAfterChange": 763, "signatureBeforeChange": " public void test0742()", "signatureAfterChange": " public void test0742()", "diff": ["+// FAIL ERRMSG", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\"", "+\t\t: // ----- JDK1_8 + -----: #4 & #5 infer as argument type: SuperType.", "+\t\t\"----------\\n\" +", "+\t\t\"1. ERROR in X.java (at line 24)\\n\" +", "+\t\t\"\tList<SubType> lsub = makeSingletonList(new SubType()); // #3 - ERROR\\n\" +", "+\t\t\"\t                     ^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 28)\\n\" +", "+\t\t\"\tlsub = makeSingletonList2(new SubType()); // #7 - ERROR\\n\" +", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" +", "+\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92da97b72b5c80a0a6f711b7c62990d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test0056c()", "signatureAfterChange": " public void test0056c()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tX<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\\n\" + ", "-\t\t\"\t                               ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "-\t\t\"----------\\n\",", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\\n\" + ", "+\t\t\t\"\t                               ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t: // additional error (2.) at inner allocation due to better inference:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\\n\" + ", "+\t\t\t\"\t                               ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\\n\" + ", "+\t\t\t\"\t                                                 ^^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Number>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97e9469e85f15410fb356626085ca001", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForClass.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test055()", "signatureAfterChange": " \tpublic void test055()", "diff": ["-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\t* <li> {@link Entry} </li>\\n\" + ", "-\t\t\t\t\"\t              ^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\t\"----------\\n\");", "+\t\t\t\tIS_JRE_8 && this.complianceLevel >= ClassFileConstants.JDK1_5 ? ", "+\t\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\t\t\"\t* <li> {@link Entry} </li>\\n\" + ", "+\t\t\t\t\t\t\"\t              ^^^^^\\n\" + ", "+\t\t\t\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "+\t\t\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\t\t\t\"\t* <li> {@link Entry} </li>\\n\" + ", "+\t\t\t\t\t\t\t\"\t              ^^^^^\\n\" + ", "+\t\t\t\t\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "+\t\t\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\t\t\t\"\tpublic interface X extends Map {\\n\" + ", "+\t\t\t\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\t\t\t\"The return types are incompatible for the inherited methods MapStream.values(), Map.values()\\n\" + ", "+\t\t\t\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d3d94ce184ad17243c7647a768aad8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " public void testBug388281_06()", "signatureAfterChange": " public void testBug388281_06()", "diff": ["+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\",", "+\t\t\"----------\\n\"", "+\t\t: // at 1.8 we show null type annotations:", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in ctest\\\\C.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class C extends c.C2 implements i2.I2A {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The method m2(@NonNull Object) from C2 cannot implement the corresponding method from I2A due to incompatible nullness constraints\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in ctest\\\\C.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class C extends c.C2 implements i2.I2A {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The method m1(@NonNull Object) from C2 cannot implement the corresponding method from I2A due to incompatible nullness constraints\\n\" + ", "+\t\t\"----------\\n\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acb10144b4ca6e6b5b81fe86783a48d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c87a79156f1dc9a83ba58914de459221d3943f61", "commitAfterChange": "1de8e2f6bc728cee690d70795383b83c1f0d652a", "methodNumberBeforeChange": 1327, "methodNumberAfterChange": 1327, "signatureBeforeChange": " public void test1292()", "signatureAfterChange": " public void test1292()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tresult.addAll( (List<?>)list );\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\t\"The method addAll(Collection<? extends E>) in the type List<E> is not applicable for the arguments (List<capture#1-of ?>)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tList<A> a = moreSpecific(b);\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from List<X.B> to List<X.A>\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb0435cb536ebcde49a9aef8c7842511", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t\t: // one fewer ambiguity in 1.8:", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in V.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tv.foo2(null, \\\"\\\");\\n\" + ", "+\t\t\t\t\"\t  ^^^^\\n\" + ", "+\t\t\t\t\"The method foo2(String, Object[]) is ambiguous for the type V\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in V.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tv.foo2(null, \\\"\\\", \\\"\\\");\\n\" + ", "+\t\t\t\t\"\t  ^^^^\\n\" + ", "+\t\t\t\t\"The method foo2(String, Object[]) is ambiguous for the type V\\n\" + ", "+\t\t\t\t\"----------\\n\")", "+\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c350bbb85981ae434dcd95e8e07f0f0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 1161, "methodNumberAfterChange": 1161, "signatureBeforeChange": " public void test1131()", "signatureAfterChange": " public void test1131()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" +", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Comparable<capture#3-of ? extends T> to String\\n\" +", "-\t\t\"----------\\n\");", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" +", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from Comparable<capture#3-of ? extends T> to String\\n\" +", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" + ", "+\t\t\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from capture#1-of ? extends V to String\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tString s = b ? l1.get(0) : l2.get(0);\\n\" + ", "+\t\t\t\t\"\t                           ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from capture#2-of ? extends Comparable<V> to String\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8e281f7052a19bda975a8b5676fb4c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 1172, "methodNumberAfterChange": 1172, "signatureBeforeChange": " public void test1142()", "signatureAfterChange": " public void test1142()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t\t\"----------\\n\"", "+\t\t// 1.8+ ATM, we generate an extra error due to inner poly expression evaluation.", "+\t\t:\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\treturn compound(asList(a, b));\\n\" + ", "+\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\"The method compound(Iterable<? extends Comparator<? super T>>) in the type X is not applicable for the arguments (List<Comparator<? extends Object>>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\treturn compound(asList(a, b));\\n\" + ", "+\t\t\"\t                ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<Comparator<? extends Object>> to Iterable<? extends Comparator<? super T>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c5b5538ba953c0a6f866d77dc95751", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": " public void test124()", "signatureAfterChange": " public void test124()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\"\tboolean x = false ? \\\"\\\" : false;\\n\" +", "-\t\t\"\t            ^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Object&Serializable&Comparable<?> to boolean\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"\tboolean x = false ? \\\"\\\" : false;\\n\" +", "-\t\t\"\t                         ^^^^^\\n\" +", "-\t\t\"The expression of type boolean is boxed into Boolean\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tSystem.out.print(\\\"[4:\\\"+ x + \\\",\\\" + x.getClass().getCanonicalName() + \\\"]\\\");\\n\" +", "-\t\t\"\t                                  ^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot invoke getClass() on the primitive type boolean\\n\" +", "-\t\t\"----------\\n\");", "+\t\tthis.complianceLevel >= ClassFileConstants.JDK1_8 ? ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tboolean x = false ? \\\"\\\" : false;\\n\" + ", "+\t\t\t\t\"\t                    ^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from String to boolean\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tSystem.out.print(\\\"[4:\\\"+ x + \\\",\\\" + x.getClass().getCanonicalName() + \\\"]\\\");\\n\" + ", "+\t\t\t\t\"\t                                  ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Cannot invoke getClass() on the primitive type boolean\\n\" + ", "+\t\t\t\t\"----------\\n\" : ", "+\t\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\t\t\t\"\tboolean x = false ? \\\"\\\" : false;\\n\" +", "+\t\t\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\t\"Type mismatch: cannot convert from Object&Serializable&Comparable<?> to boolean\\n\" +", "+\t\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "+\t\t\t\t\t\t\"\tboolean x = false ? \\\"\\\" : false;\\n\" +", "+\t\t\t\t\t\t\"\t                         ^^^^^\\n\" +", "+\t\t\t\t\t\t\"The expression of type boolean is boxed into Boolean\\n\" +", "+\t\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\t\t\t\"\tSystem.out.print(\\\"[4:\\\"+ x + \\\",\\\" + x.getClass().getCanonicalName() + \\\"]\\\");\\n\" +", "+\t\t\t\t\t\t\"\t                                  ^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\t\"Cannot invoke getClass() on the primitive type boolean\\n\" +", "+\t\t\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df058a42f6472bbd176af0fb9cc07eb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 647, "methodNumberAfterChange": 647, "signatureBeforeChange": " \tpublic void test0628()", "signatureAfterChange": " \tpublic void test0628()", "diff": ["-    \t\t\"----------\\n\" +", "-    \t\t\"1. ERROR in X.java (at line 10)\\n\" +", "-    \t\t\"\tString s = l1 != null ? foo(l1, l2) : l3;\\n\" +", "-    \t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-    \t\t\"Type mismatch: cannot convert from List<capture#4-of ? extends Object> to String\\n\" +", "-    \t\t\"----------\\n\");", "+            this.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t    \t\t\"----------\\n\" +", "+\t    \t\t\"1. ERROR in X.java (at line 10)\\n\" +", "+\t    \t\t\"\tString s = l1 != null ? foo(l1, l2) : l3;\\n\" +", "+\t    \t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t    \t\t\"Type mismatch: cannot convert from List<capture#4-of ? extends Object> to String\\n\" +", "+\t    \t\t\"----------\\n\" : ", "+\t    \t\t\t\"----------\\n\" + ", "+\t    \t\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "+\t    \t\t\t\"\tString s = l1 != null ? foo(l1, l2) : l3;\\n\" + ", "+\t    \t\t\t\"\t                        ^^^^^^^^^^^\\n\" + ", "+\t    \t\t\t\"Type mismatch: cannot convert from List<capture#2-of ? extends Number&Comparable<?>> to String\\n\" + ", "+\t    \t\t\t\"----------\\n\" + ", "+\t    \t\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "+\t    \t\t\t\"\tString s = l1 != null ? foo(l1, l2) : l3;\\n\" + ", "+\t    \t\t\t\"\t                                      ^^\\n\" + ", "+\t    \t\t\t\"Type mismatch: cannot convert from List<capture#3-of ?> to String\\n\" + ", "+\t    \t\t\t\"----------\\n\");"]}], "num": 55543}
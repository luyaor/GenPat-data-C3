{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e2c0a30fe6bf35ae1864f17c1866e08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b6db914bce6ab5e3246cc21d188fd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "c526f10eda122472f5603082aaefe389819e487a", "commitAfterChange": "2978110db99779d239d94c1b0f5bcb0af9289202", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "signatureAfterChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "diff": ["-\t\t\t\tint closingPosition = anonymousType.declarationSourceEnd;", "-\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, closingPosition - declarationSourceStart + 1);", "-\t\t\t\tbuildBodyDeclarations(anonymousType, enumConstantDeclaration);", "+\t\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "+\t\t\t\tint start = retrieveStartBlockPosition(anonymousType.sourceEnd, anonymousType.bodyEnd);", "+\t\t\t\tint end = retrieveRightBrace(anonymousType.bodyEnd, declarationSourceEnd);", "+\t\t\t\tanonymousClassDeclaration.setSourceRange(start, end - start + 1);", "+\t\t\t\tenumConstantDeclaration.setAnonymousClassDeclaration(anonymousClassDeclaration);", "+\t\t\t\tbuildBodyDeclarations(anonymousType, anonymousClassDeclaration);", "+\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\trecordNodes(anonymousClassDeclaration, anonymousType);", "+\t\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\t\t\t}", "+\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, end - declarationSourceStart + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93ec02cda06068c95afe30bb684824d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding capture(Scope scope, int position)", "signatureAfterChange": " \tpublic ParameterizedTypeBinding capture(Scope scope, int position)", "diff": ["-\tpublic TypeBinding capture(Scope scope, int position) {", "+\tpublic ParameterizedTypeBinding capture(Scope scope, int position) {", "+\t\tCompilationUnitScope compilationUnitScope = scope.compilationUnitScope();", "+\t\tASTNode cud = compilationUnitScope.referenceContext;", "+\t\tlong sourceLevel = this.environment.globalOptions.sourceLevel;", "+\t\t// A couple of NTAT tests fail with interned captures. The new messages look better and correct. Stephan to validate. ", "+\t\tfinal boolean needUniqueCapture = sourceLevel >= ClassFileConstants.JDK1_8 && !this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled;", "+\t\t", "-\t\t\t\telse", "-\t\t\t\t\tcapturedArguments[i] = new CaptureBinding(wildcard, contextType, position, scope.compilationUnitScope().nextCaptureID());", "+\t\t\t\telse if (needUniqueCapture)", "+\t\t\t\t\tcapturedArguments[i] = this.environment.createCapturedWildcard(wildcard, contextType, position, cud, compilationUnitScope.nextCaptureID());", "+\t\t\t\telse ", "+\t\t\t\t\tcapturedArguments[i] = new CaptureBinding(wildcard, contextType, position, compilationUnitScope.nextCaptureID());\t"]}], "num": 60389}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0551d1f96d9486a1b29a546e3107cf24", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "086d4774fbbabaddebe102c7973c6d05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "diff": ["-\t", "-\t// See if we must resolve specifically for generics", "-\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) {", "-\t\tint psLength = parameterSimpleNames.length;", "-\t\ttry {", "-\t\t\t// Currently, we need to resolve for generic if one of method type argument", "-\t\t\t// equals to one of declaring type type parameter", "-\t\t\tITypeParameter[] typeParameters = this.declaringType.getTypeParameters();", "-\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "-\t\t\t\tint tpLength = typeParameters.length;", "-\t\t\t\tfor (int i=0; i<psLength && !this.mustResolveGeneric; i++) {", "-\t\t\t\t\tfor (int j=0; j<tpLength && !this.mustResolveGeneric; j++) {", "-\t\t\t\t\t\tif (CharOperation.equals(parameterSimpleNames[i], typeParameters[j].getElementName().toCharArray())) {", "-\t\t\t\t\t\t\tthis.mustResolveGeneric = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6b87a582036cb5df24965fc5ce775c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "645b7bfaa2fa6e51ee8178c0b98a65d610d989c2", "commitAfterChange": "6cb5df5deb874bcd03782569c94840e1aa61cfba", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public TypeDeclarationPattern(\r \tchar[] qualification,\r \tchar[][] enclosingTypeNames,\r \tchar[] simpleName,\r \tchar classOrInterface,\r \tint matchMode, \r \tboolean isCaseSensitive)", "signatureAfterChange": "\r \t\r public TypeDeclarationPattern(int matchMode, boolean isCaseSensitive)", "diff": ["-\tprivate char decodedClassOrInterface;\r", "+\t\r", "+public TypeDeclarationPattern(int matchMode, boolean isCaseSensitive) {\r", "+\tsuper(matchMode, isCaseSensitive);\r", "+}\r", "-\tchar[] qualification,\r", "-\tthis.qualification = isCaseSensitive ? qualification : CharOperation.toLowerCase(qualification);\r", "-\tthis.needsResolve = qualification != null;\r"]}], "num": 25536}
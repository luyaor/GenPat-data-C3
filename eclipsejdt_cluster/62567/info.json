{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d18ca553480f5ce05013b09fa96c43f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "547b2a888f1e36198d3743c725955f9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "6d3e536ecd8e7c91687c7c90569a25a3f6f6eb94", "commitAfterChange": "e97394b80d49fb5dc34a1a6fec8af65d69ccf130", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void addForwardReference(int iPos)", "signatureAfterChange": " void addForwardReference(int pos)", "diff": ["-void addForwardReference(int iPos) {", "-\tint length;", "-\tif (forwardReferenceCount >= (length = forwardReferences.length))", "-\t\tSystem.arraycopy(forwardReferences, 0, (forwardReferences = new int[2*length]), 0, length);", "-\tforwardReferences[forwardReferenceCount++] = iPos;", "+void addForwardReference(int pos) {", "+\tfinal int count = this.forwardReferenceCount;", "+\tif (count >= 1) {", "+\t\tint previousValue = this.forwardReferences[count - 1];", "+\t\tif (previousValue < pos) {", "+\t\t\tint length;", "+\t\t\tif (count >= (length = this.forwardReferences.length))", "+\t\t\t\tSystem.arraycopy(this.forwardReferences, 0, (this.forwardReferences = new int[2*length]), 0, length);", "+\t\t\tthis.forwardReferences[this.forwardReferenceCount++] = pos;\t\t\t", "+\t\t} else if (previousValue > pos) {", "+\t\t\tint[] refs = this.forwardReferences;", "+\t\t\t// check for duplicates", "+\t\t\tfor (int i = 0, max = this.forwardReferenceCount; i < max; i++) {", "+\t\t\t\tif (refs[i] == pos) return; // already recorded", "+\t\t\t}", "+\t\t\tint length;", "+\t\t\tif (count >= (length = refs.length))", "+\t\t\t\tSystem.arraycopy(refs, 0, (this.forwardReferences = new int[2*length]), 0, length);", "+\t\t\tthis.forwardReferences[this.forwardReferenceCount++] = pos;", "+\t\t\tArrays.sort(this.forwardReferences, 0, this.forwardReferenceCount);", "+\t\t}", "+\t} else {", "+\t\tint length;", "+\t\tif (count >= (length = this.forwardReferences.length))", "+\t\t\tSystem.arraycopy(this.forwardReferences, 0, (this.forwardReferences = new int[2*length]), 0, length);", "+\t\tthis.forwardReferences[this.forwardReferenceCount++] = pos;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad4fa62eb20ce8705024efd743bee59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "6d3e536ecd8e7c91687c7c90569a25a3f6f6eb94", "commitAfterChange": "e97394b80d49fb5dc34a1a6fec8af65d69ccf130", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void appendForwardReferencesFrom(Label otherLabel)", "signatureAfterChange": " public void appendForwardReferencesFrom(Label otherLabel)", "diff": ["-\tint otherCount = otherLabel.forwardReferenceCount;", "+\tfinal int otherCount = otherLabel.forwardReferenceCount;", "-\tint length = forwardReferences.length;", "-\tint neededSpace = otherCount + forwardReferenceCount;", "-\tif (neededSpace >= length){", "-\t\tSystem.arraycopy(forwardReferences, 0, (forwardReferences = new int[neededSpace]), 0, forwardReferenceCount);", "+\t// need to merge the two sorted arrays of forward references", "+\tint[] mergedForwardReferences = new int[this.forwardReferenceCount + otherCount];", "+\tint indexInMerge = 0;", "+\tint j = 0;", "+\tint i = 0;", "+\tint max = this.forwardReferenceCount;", "+\tint max2 = otherLabel.forwardReferenceCount;", "+\tloop1 : for (; i < max; i++) {", "+\t\tfinal int value1 = this.forwardReferences[i];", "+\t\tfor (; j < max2; j++) {", "+\t\t\tfinal int value2 = otherLabel.forwardReferences[j];", "+\t\t\tif (value1 < value2) {", "+\t\t\t\tmergedForwardReferences[indexInMerge++] = value1;", "+\t\t\t\tcontinue loop1;", "+\t\t\t} else if (value1 == value2) {", "+\t\t\t\tmergedForwardReferences[indexInMerge++] = value1;", "+\t\t\t\tj++;", "+\t\t\t\tcontinue loop1;", "+\t\t\t} else {", "+\t\t\t\tmergedForwardReferences[indexInMerge++] = value2;", "+\t\t\t}", "+\t\t}", "-\t// append other forward references at the end, so they will get updated as well", "-\tSystem.arraycopy(otherLabel.forwardReferences, 0, forwardReferences, forwardReferenceCount, otherCount);", "-\tforwardReferenceCount = neededSpace;", "+\tfor (; j < max2; j++) {", "+\t\tmergedForwardReferences[indexInMerge++] = otherLabel.forwardReferences[j];", "+\t}", "+\tthis.forwardReferences = mergedForwardReferences;", "+\tthis.forwardReferenceCount = indexInMerge;"]}], "num": 62567}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd9570b1fd4dd33e0541efb1251343c6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11c72c2d5de1af67cc161186164350d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "dab793aa10c3d3fab59be1d684889d384fadf8c3", "commitAfterChange": "e429be43fd78fe13561bb309f14681f9e3b740d4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\t\t\tif (expr instanceof NameReference) {", "-\t\t\t\t\t\tFieldBinding field = ((NameReference) expr).fieldBinding();", "+\t\t\t\t\tif ((expr.bits & Binding.VARIABLE) == Binding.FIELD) {", "+\t\t\t\t\t\tFieldBinding field = ((Reference)expr).fieldBinding();", "-\t\t\t\t\t\t\t\tif (initExpr instanceof NameReference) {", "-\t\t\t\t\t\t\t\t\tFieldBinding field = ((NameReference) initExpr).fieldBinding();", "+\t\t\t\t\t\t\t\tif ((initExpr.bits & Binding.VARIABLE) == Binding.FIELD) {", "+\t\t\t\t\t\t\t\t\tFieldBinding field = ((Reference) initExpr).fieldBinding();", "-\t\t\t\t\t} else if (expr instanceof NameReference) {", "-\t\t\t\t\t\tFieldBinding field = ((NameReference) expr).fieldBinding();", "+\t\t\t\t\t} else if ((expr.bits & Binding.VARIABLE) == Binding.FIELD) {", "+\t\t\t\t\t\tFieldBinding field = ((Reference) expr).fieldBinding();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db5befabc5b0940c0b73be1051353552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "646aa5ecb536b7e9ff4fed634622c7786b50bf41", "commitAfterChange": "25e24dc0b5df8ee9c07cfac971fa5e561f586699", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic Expression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(BinaryExpression expression)", "diff": ["-\t\tif (expression.left instanceof BinaryExpression && !checkForParenthesis(expression.left)) {", "+\t\tif (expression.left instanceof BinaryExpression && ((expression.left.bits & AstNode.ParenthesizedMASK) == 0)) {", "-\t\t\t\tif ((((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID && !checkForParenthesis(leftOperand))", "-\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) && !checkForParenthesis(rightOperand))) {", "+\t\t\t\tif ((((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0))", "+\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & AstNode.ParenthesizedMASK) == 0))) {", "-\t\t\t} while (leftOperand instanceof BinaryExpression && !(checkForParenthesis(leftOperand)));", "+\t\t\t} while (leftOperand instanceof BinaryExpression && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0));"]}], "num": 57236}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdd34accda2b68c312107c3fe24d3b3f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e8d45cb8b0190881308f3c8639fd433", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "649631b834e755f12bf40b9c916ce9dfc765a8d0", "commitAfterChange": "19a679a95bc1c8afc10cb50ce5a617f6914888ae", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static char[][] getSignatures(Binding[] bindings)", "signatureAfterChange": " \t \tpublic static char[] getSignature(TypeBinding typeBinding)", "diff": ["-", "-\tpublic static char[][] getSignatures(Binding[] bindings) {", "-\t\tint length = bindings == null ? 0 : bindings.length;", "-\t\tchar[][] signatures = new char[length][];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tsignatures[i] = getSignature(bindings[i]);", "+\t", "+\tpublic static char[] getSignature(TypeBinding typeBinding) {", "+\t\tchar[] result = null;", "+\t\t", "+\t\tresult = typeBinding.genericTypeSignature();", "+\t\t", "+\t\tif (result != null) {", "+\t\t\tresult = CharOperation.replaceOnCopy(result, '/', '.');", "-\t\treturn signatures;", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae8c38aa4194b6cb913dae852562763f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "38819b0397930dbfdcf4973c1bb1a5b3cfbe15eb", "commitAfterChange": "c991055b4d31746c6b7c68a7d2dd8c0450078a55", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tprotected void updateProjectReferences(String[] oldRequired, String[] newRequired)", "signatureAfterChange": "\r \tprotected void updateProjectReferences(String[] oldRequired, String[] newRequired)", "diff": ["-\t\t\tcheckIdentical : {\r", "-\t\t\t\tint oldLength = oldRequired.length;\r", "-\t\t\t\tif (oldLength == newRequired.length){\r", "-\t\t\t\t\tfor (int i = 0; i < oldLength; i++){\r", "-\t\t\t\t\t\tif (!oldRequired[i].equals(newRequired[i])){\r", "-\t\t\t\t\t\t\tbreak checkIdentical;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tIProject[] requiredProjectArray = new IProject[newReferences.size()];\r", "+\t\t\tIterator iter;\r", "+\t\t\tint newSize = newReferences.size();\r", "+\t\t\t\r", "+\t\t\tcheckIdentity: {\r", "+\t\t\t\tif (oldReferences.size() == newSize){\r", "+\t\t\t\t\titer = newReferences.iterator();\r", "+\t\t\t\t\twhile (iter.hasNext()){\r", "+\t\t\t\t\t\tif (!oldReferences.contains(iter.next())){\r", "+\t\t\t\t\t\t\tbreak checkIdentity;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tIProject[] requiredProjectArray = new IProject[newSize];\r", "-\t\t\tIterator iter = newReferences.iterator();\r", "+\t\t\titer = newReferences.iterator();\r"]}], "num": 31548}
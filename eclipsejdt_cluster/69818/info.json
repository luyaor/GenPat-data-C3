{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b149c1fcfcdf144a98f1d4c4459f225", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b730eb13b0a262d9527cb80e76909d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration)", "signatureAfterChange": "  \tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration)", "diff": ["-\tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration) {", "-\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference importReference = compilationUnitDeclaration.currentPackage;", "-\t\tPackageDeclaration packageDeclaration = this.ast.newPackageDeclaration();", "-\t\tchar[][] tokens = importReference.tokens;", "-\t\tint length = importReference.tokens.length;", "-\t\tlong[] positions = importReference.sourcePositions;", "-\t\tint start = (int)(positions[0]>>>32);", "-\t\tint end = (int)(positions[length - 1] & 0xFFFFFFFF);", "-\t\tName name = null;", "-\t\tif (length > 1) {", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "-\t\t} else {", "-\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "-\t\t\tname.setSourceRange(start, end - start + 1);", "-\t\t}", "-\t\tpackageDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "-\t\tpackageDeclaration.setName(name);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(packageDeclaration, importReference);", "-\t\t\trecordNodes(name, compilationUnitDeclaration);", "-\t\t}", "-\t\treturn packageDeclaration;", "-\t}", "+", "+\tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration) {", "+\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference importReference = compilationUnitDeclaration.currentPackage;", "+\t\tPackageDeclaration packageDeclaration = this.ast.newPackageDeclaration();", "+\t\tchar[][] tokens = importReference.tokens;", "+\t\tint length = importReference.tokens.length;", "+\t\tlong[] positions = importReference.sourcePositions;", "+\t\tint start = (int)(positions[0]>>>32);", "+\t\tint end = (int)(positions[length - 1] & 0xFFFFFFFF);", "+\t\tName name = null;", "+\t\tif (length > 1) {", "+\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "+\t\t} else {", "+\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "+\t\t\tname.setSourceRange(start, end - start + 1);", "+\t\t}", "+\t\tpackageDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "+\t\tpackageDeclaration.setName(name);", "+\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = importReference.annotations;", "+\t\tif (annotations != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tpackageDeclaration.setFlags(packageDeclaration.getFlags() & ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int i = 0, max = annotations.length; i < max; i++) {", "+\t\t\t\t\t\tpackageDeclaration.annotations().add(convert(annotations[i]));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(packageDeclaration, importReference);", "+\t\t\trecordNodes(name, compilationUnitDeclaration);", "+\t\t}", "+\t\treturn packageDeclaration;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac2ea53a14d97ada6d48044154db75dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 89, "signatureBeforeChange": " \t \tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference)", "signatureAfterChange": " \t \tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference)", "diff": ["-\t", "-\tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference) {", "-\t\tImportDeclaration importDeclaration = this.ast.newImportDeclaration();", "-\t\tboolean onDemand = importReference.onDemand;", "-\t\tchar[][] tokens = importReference.tokens;", "-\t\tint length = importReference.tokens.length;", "-\t\tlong[] positions = importReference.sourcePositions;", "-\t\tName name = null;", "-\t\tif (length > 1) {", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "-\t\t} else {", "-\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "-\t\t\tint start = (int)(positions[0]>>>32);", "-\t\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "-\t\t\tname.setSourceRange(start, end - start + 1);", "-\t\t}", "-\t\timportDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "-\t\timportDeclaration.setName(name);", "-\t\timportDeclaration.setOnDemand(onDemand);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(importDeclaration, importReference);", "-\t\t}", "-\t\treturn importDeclaration;", "-\t}", "+\tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference) {", "+\t\tImportDeclaration importDeclaration = this.ast.newImportDeclaration();", "+\t\tboolean onDemand = importReference.onDemand;", "+\t\tchar[][] tokens = importReference.tokens;", "+\t\tint length = importReference.tokens.length;", "+\t\tlong[] positions = importReference.sourcePositions;", "+\t\tName name = null;", "+\t\tif (length > 1) {", "+\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "+\t\t} else {", "+\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "+\t\t\tint start = (int)(positions[0]>>>32);", "+\t\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "+\t\t\tname.setSourceRange(start, end - start + 1);", "+\t\t}", "+\t\timportDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "+\t\timportDeclaration.setName(name);", "+\t\timportDeclaration.setOnDemand(onDemand);", "+\t\tint modifiers = importReference.modifiers;", "+\t\tif (modifiers != IConstants.AccDefault) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\timportDeclaration.setFlags(importDeclaration.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tif (modifiers == IConstants.AccStatic) {", "+\t\t\t\t\t\timportDeclaration.setStatic(true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\timportDeclaration.setFlags(importDeclaration.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(importDeclaration, importReference);", "+\t\t}", "+\t\treturn importDeclaration;", "+\t}"]}], "num": 69818}
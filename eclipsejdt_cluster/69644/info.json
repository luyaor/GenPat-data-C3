{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "899344fa81624ac92d16180e1015a939", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62efbb740a3325e16b4d0e786bf730f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "54636126e97a957a9925b609910f59ea39210fc8", "commitAfterChange": "917603919e9d38772fd63709feb3bbda7696f523", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic TextEdit format(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator)", "signatureAfterChange": " \tpublic TextEdit format(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator)", "diff": ["-\t\t\t\tif (ENABLE_NEW_JAVADOC_FORMAT) {", "-\t                return formatJavadoc(source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});", "-\t\t\t\t} else if (FORCE_NEW_COMMENT_FORMAT) {", "+\t\t\t\tif (ENABLE_NEW_COMMENTS_FORMAT) {", "+\t                return formatComment(kind & K_MASK, source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});", "+\t\t\t\t}", "+\t\t\t\tif (FORCE_NEW_COMMENTS_FORMAT) {", "-\t\t\t\tif (!PRINTED_OLD_JAVA_DOC_WARNING) {", "-\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING, WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\tSystem.out.println(WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\tPRINTED_OLD_JAVA_DOC_WARNING = true;", "+\t\t\t\tif (!PRINTED_FORMAT_COMMENTS_WARNING) {", "+\t\t\t\t\tif (DEBUG) System.out.println(WARNING_FORMAT_COMMENTS);", "+\t\t\t\t\tPRINTED_FORMAT_COMMENTS_WARNING = true;", "-\t\t\t\tif (FORCE_NEW_COMMENT_FORMAT) {", "+\t\t\t\tif (ENABLE_NEW_COMMENTS_FORMAT) {", "+\t                return formatComment(kind & K_MASK, source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});", "+\t\t\t\t}", "+\t\t\t\tif (FORCE_NEW_COMMENTS_FORMAT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f55804b67ef1f21bedc310e482733d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["-\t\t\tthis.typeExpected = targetType;", "-\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(scope);", "-\t\t\tif (inferredTypes == null)", "-\t\t\t\treturn false;", "-\t\t\tallocationType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, this.resolvedType.enclosingType());", "+\t\t\tMethodBinding method = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(targetType) : null;", "+\t\t\tif (method == null) {", "+\t\t\t\tthis.typeExpected = targetType;", "+\t\t\t\tmethod = inferConstructorOfElidedParameterizedType(scope); // caches result already.", "+\t\t\t\tif (method == null || !method.isValidBinding())", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tallocationType = method.declaringClass;"]}], "num": 69644}
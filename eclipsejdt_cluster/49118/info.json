{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42f558a80b9a8563e76a0cffd05bb5fc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d759a80fb8a6b52ae0a715abd408ec3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 42, "signatureBeforeChange": " public static char[] toCharArray( \t\tchar[] methodSignature, \t\tchar[] methodName, \t\tchar[][] parameterNames, \t\tboolean fullyQualifyTypeNames, \t\tboolean includeReturnType, \t\tboolean includeFormalTypeParameters, \t\tboolean includeThrownExceptions)", "signatureAfterChange": " private static int appendTypeArgumentSignatures(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "diff": ["- */", "-public static char[] toCharArray(", "-\t\tchar[] methodSignature,", "-\t\tchar[] methodName,", "-\t\tchar[][] parameterNames,", "-\t\tboolean fullyQualifyTypeNames,", "-\t\tboolean includeReturnType,", "-\t\tboolean includeFormalTypeParameters,", "-\t\tboolean includeThrownExceptions) {", "-\t// TODO (jeem) - needs to handle includeFormalTypeParameters and includeThrownExceptions", "-\ttry {", "-\t\tint firstParen = CharOperation.indexOf(C_PARAM_START, methodSignature);", "-\t\tif (firstParen == -1) throw new IllegalArgumentException();", "-\t\t", "-\t\tint sigLength = methodSignature.length;", "-\t\t", "-\t\t// compute result length", "-\t\t", "-\t\t// method signature", "-\t\tint paramCount = 0;", "-\t\tint lastParen = -1;", "-\t\tint resultLength = 0;", "-\t\tsignature: for (int i = firstParen; i < sigLength; i++) {", "-\t\t\tswitch (methodSignature[i]) {", "-\t\t\t\tcase C_ARRAY :", "-\t\t\t\t\tresultLength += 2; // []", "-\t\t\t\t\tcontinue signature;", "-\t\t\t\tcase C_BOOLEAN :", "-\t\t\t\t\tresultLength += BOOLEAN.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_BYTE :", "-\t\t\t\t\tresultLength += BYTE.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_CHAR :", "-\t\t\t\t\tresultLength += CHAR.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_DOUBLE :", "-\t\t\t\t\tresultLength += DOUBLE.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_FLOAT :", "-\t\t\t\t\tresultLength += FLOAT.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_INT :", "-\t\t\t\t\tresultLength += INT.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_LONG :", "-\t\t\t\t\tresultLength += LONG.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_SHORT :", "-\t\t\t\t\tresultLength += SHORT.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_VOID :", "-\t\t\t\t\tresultLength += VOID.length;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_RESOLVED :", "-\t\t\t\tcase C_UNRESOLVED :", "-\t\t\t\t\tint end = CharOperation.indexOf(C_SEMICOLON, methodSignature, i);", "-\t\t\t\t\tif (end == -1) throw new IllegalArgumentException();", "-\t\t\t\t\tint start;", "-\t\t\t\t\tif (fullyQualifyTypeNames) {", "-\t\t\t\t\t\tstart = i+1;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tstart = CharOperation.lastIndexOf(C_DOT, methodSignature, i, end) + 1;", "-\t\t\t\t\t\tif (start == 0) start = i+1;", "-\t\t\t\t\t} ", "-\t\t\t\t\tresultLength += end-start;", "-\t\t\t\t\ti = end;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_PARAM_START :", "-\t\t\t\t\t// add space for \"(\"", "-\t\t\t\t\tresultLength++;", "-\t\t\t\t\tcontinue signature;", "-\t\t\t\tcase C_PARAM_END :", "-\t\t\t\t\tlastParen = i;", "-\t\t\t\t\tif (includeReturnType) {", "-\t\t\t\t\t\tif (paramCount > 0) {", "-\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and remove space that is going to be added for \", \" after return type ", "-\t\t\t\t\t\t\t// and add space for \") \"", "-\t\t\t\t\t\t\tresultLength -= 2;", "-\t\t\t\t\t\t} //else", "-\t\t\t\t\t\t\t// remove space that is going to be added for \", \" after return type ", "-\t\t\t\t\t\t\t// and add space for \") \"", "-\t\t\t\t\t\t\t// -> noop", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// decrement param count because it is going to be added for return type", "-\t\t\t\t\t\tparamCount--;", "-\t\t\t\t\t\tcontinue signature;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (paramCount > 0) {", "-\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and add space for \")\"", "-\t\t\t\t\t\t\tresultLength--;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// add space for \")\"", "-\t\t\t\t\t\t\tresultLength++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak signature;", "-\t\t\t\t\t}", "-\t\t\t\tdefault :", "-\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t\tresultLength += 2; // add space for \", \"", "-\t\t\tparamCount++;", "-\t\t}", "-\t\t", "-\t\t// parameter names", "-\t\tint parameterNamesLength = parameterNames == null ? 0 : parameterNames.length;", "-\t\tfor (int i = 0; i <parameterNamesLength; i++) {", "-\t\t\tresultLength += parameterNames[i].length + 1; // parameter name + space", "-\t\t}", "-\t\t", "-\t\t// selector", "-\t\tint selectorLength = methodName == null ? 0 : methodName.length;", "-\t\tresultLength += selectorLength;", "-\t\t", "-\t\t// create resulting char array", "-\t\tchar[] result = new char[resultLength];", "-\t\t", "-\t\t// returned type", "-\t\tint index = 0;", "-\t\tif (includeReturnType) {", "-\t\t\tlong pos = copyType(methodSignature, lastParen+1, result, index, fullyQualifyTypeNames);", "-\t\t\tindex = (int) (pos >>> 32);", "-\t\t\tresult[index++] = ' ';", "-\t\t}", "-\t\t", "-\t\t// selector", "-\t\tif (methodName != null) {", "-\t\t\tSystem.arraycopy(methodName, 0, result, index, selectorLength);", "-\t\t\tindex += selectorLength;", "-\t\t}", "-\t\t", "-\t\t// parameters", "-\t\tresult[index++] = C_PARAM_START;", "-\t\tint sigPos = firstParen+1;", "-\t\tfor (int i = 0; i < paramCount; i++) {", "-\t\t\tlong pos = copyType(methodSignature, sigPos, result, index, fullyQualifyTypeNames);", "-\t\t\tindex = (int) (pos >>> 32);", "-\t\t\tsigPos = (int)pos;", "-\t\t\tif (parameterNames != null) {", "-\t\t\t\tresult[index++] = ' ';", "-\t\t\t\tchar[] parameterName = parameterNames[i];", "-\t\t\t\tint paramLength = parameterName.length;", "-\t\t\t\tSystem.arraycopy(parameterName, 0, result, index, paramLength);", "-\t\t\t\tindex += paramLength;", "-\t\t\t}", "-\t\t\tif (i != paramCount-1) {", "-\t\t\t\tresult[index++] = ',';", "-\t\t\t\tresult[index++] = ' ';", "-\t\t\t}", "-\t\t}", "-\t\tif (sigPos >= sigLength) {", "-\t\t\tthrow new IllegalArgumentException(); // should be on last paren", "-\t\t}", "-\t\tresult[index++] = C_PARAM_END;", "-\t\t", "-\t\treturn result;", "-\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t}\t\t", "+ */", "+private static int appendTypeArgumentSignatures(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer) {", "+\t// need a minimum 2 char \"<>\"", "+\tif (start >= string.length - 1) {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+\tchar c = string[start];", "+\tif (c != C_GENERIC_START) {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+\tbuffer.append('<');", "+\tint p = start + 1;", "+\tint count = 0;", "+\twhile (true) {", "+\t\tif (p >= string.length) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tc = string[p];", "+\t\tif (c == C_GENERIC_END) {", "+\t\t\tbuffer.append('>');", "+\t\t\treturn p;", "+\t\t}", "+\t\tif (count != 0) {", "+\t\t\tbuffer.append(',');", "+\t\t}", "+\t\tint e = appendTypeArgumentSignature(string, p, fullyQualifyTypeNames, buffer);", "+\t\tcount++;", "+\t\tp = e + 1;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de92b64f1b08a4351355b9a4447246ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "dc897dd3e4818ca2b15bd3d143de606b0ce0335f", "commitAfterChange": "8536e94c328f058d5f377b8328af7061c65f8af1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tITypeBinding resolveType(Type type)", "signatureAfterChange": " \tITypeBinding resolveType(Type type)", "diff": ["-\t\tint index = 0;", "-\t\tif (node == null) {", "-\t\t\tType arrayType = null;", "-\t\t\tASTNode parentType = type.getParent();", "-\t\t\tif (parentType instanceof ArrayCreation) {", "-\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(parentType);", "-\t\t\t} else {", "-\t\t\t\t// we try to retrieve the type as an element type of an array type", "-\t\t\t\twhile ((parentType instanceof Type) && ((Type) parentType).isArrayType()) {", "-\t\t\t\t\tarrayType = (Type) parentType;", "-\t\t\t\t\tparentType = parentType.getParent();", "-\t\t\t\t\tindex++;", "-\t\t\t\t}", "-\t\t\t\tif (index != 0) {", "-\t\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(arrayType);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding binding = null;", "-\t\t\t\tif (typeReference.binding == null || !typeReference.binding.isValidBinding()) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeReference.binding);", "-\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (index != 0) {", "-\t\t\t\t\tif (typeBinding.isArray()) {", "-\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)typeReference.binding;", "-\t\t\t\t\t\tif (index == arrayBinding.dimensions) {", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding.leafComponentType);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfor (int i = 0; i < index; i++) {", "-\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (type.isArrayType()) {", "-\t\t\t\t\t\tArrayType array = (ArrayType) type;", "-\t\t\t\t\t\tif (typeBinding.getDimensions() != array.getDimensions()) {", "-\t\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)typeReference.binding;", "-\t\t\t\t\t\t\tfor (int i = 0, max = typeBinding.getDimensions() - array.getDimensions(); i < max; i++) {", "-\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (typeBinding.isArray() && type.isSimpleType()) {", "-\t\t\t\t\t\treturn this.getTypeBinding(((ArrayBinding)typeReference.binding).leafComponentType());", "-\t\t\t\t\t}", "-\t\t\t\t\treturn typeBinding;", "-\t\t\t\t}", "-\t\t\t} else if (node instanceof SingleNameReference) {", "-\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;", "-\t\t\t\tif (singleNameReference.binding == null || !singleNameReference.binding.isValidBinding()) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (singleNameReference.isTypeReference()) {", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((ReferenceBinding)singleNameReference.binding);", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (index != 0) {", "-\t\t\t\t\t\tif (typeBinding.isArray()) {", "-\t\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)singleNameReference.binding;", "-\t\t\t\t\t\t\tif (index == arrayBinding.dimensions) {", "-\t\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding.leafComponentType);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < index; i++) {", "-\t\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// it should be a type reference", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t} else if (node instanceof QualifiedNameReference) {", "-\t\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;", "-\t\t\t\tif (qualifiedNameReference.isTypeReference()) {", "-\t\t\t\t\tif (qualifiedNameReference.binding == null || !qualifiedNameReference.binding.isValidBinding()) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t} ", "-\t\t\t\t\tif (index != 0) {", "-\t\t\t\t\t\tif (typeBinding.isArray()) {", "-\t\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)qualifiedNameReference.binding;", "-\t\t\t\t\t\t\tif (index == arrayBinding.dimensions) {", "-\t\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding.leafComponentType);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < index; i++) {", "-\t\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// it should be a type reference", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "+\t\t\t\tbinding = typeReference.binding;", "+\t\t\t} else if (node instanceof SingleNameReference && ((SingleNameReference)node).isTypeReference()) {", "+\t\t\t\tbinding = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding) (((SingleNameReference)node).binding);", "+\t\t\t} else if (node instanceof QualifiedNameReference && ((QualifiedNameReference)node).isTypeReference()) {", "+\t\t\t\tbinding = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding) (((QualifiedNameReference)node).binding);", "-\t\t\t\tArrayAllocationExpression arrayAllocationExpression = (ArrayAllocationExpression) node;", "-\t\t\t\tArrayBinding arrayBinding = arrayAllocationExpression.arrayTb;", "-\t\t\t\tif (arrayBinding == null || !arrayBinding.isValidBinding()) {", "-\t\t\t\t\treturn null;", "+\t\t\t\tbinding = ((ArrayAllocationExpression) node).arrayTb;", "+\t\t\t}", "+\t\t\tif (binding == null || !binding.isValidBinding()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tif (binding.isArrayType()) {", "+\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding) binding;", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArray(arrayBinding.leafComponentType, arrayType.getDimensions()));", "+\t\t\t\t} else {", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArray(binding, arrayType.getDimensions()));", "-\t\t\t\tif (index != 0) {", "-\t\t\t\t\treturn this.getTypeBinding(this.scope.createArray(arrayBinding.leafComponentType, arrayBinding.dimensions - index));", "-\t\t\t\t} ", "-\t\t\t\treturn this.getTypeBinding(arrayBinding);", "+\t\t\t} else {", "+\t\t\t\tif (binding.isArrayType()) {", "+\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding) binding;", "+\t\t\t\t\treturn getTypeBinding(arrayBinding.leafComponentType);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn getTypeBinding(binding);", "+\t\t\t\t}"]}], "num": 49118}
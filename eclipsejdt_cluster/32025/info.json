{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c255eed6f008dea957e98818b2c3028", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0683cf0d735d09500a8458659e9af1b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "8a1e311af393ccdbbaab4d3836c703deb332d624", "commitAfterChange": "c0735951a055fba3f0be3b86f55a77d744b6fbe2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type, type.getFlags()));", "+\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, type.getFlags()));", "-\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type, typeDeclaration.modifiers));", "+\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, typeDeclaration.modifiers));", "-\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type, 0));", "+\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, 0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57622c044743d1ed9f9305bbfe9d12a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "a118736b4df6d2c2d76c2e8540c6ee6242953cb2", "commitAfterChange": "d90e3df9ed4198288c27321fc19ea2323118c013", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName, \t\tfinal int packageMatchRule, \t\tfinal char[] typeName, \t\tfinal int typeMatchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName, \t\tfinal int packageMatchRule, \t\tfinal char[] typeName, \t\tfinal int typeMatchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, validatedTypeMatchRule, kind, packageDeclaration, simpleName)) {", "+\t\t\t\t\t\t\tif (match(typeSuffix, packageName, packageMatchRule, typeName, validatedTypeMatchRule, kind, packageDeclaration, simpleName)) {", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, validatedTypeMatchRule, TypeDeclaration.kind(typeDeclaration.modifiers), packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, packageMatchRule, typeName, validatedTypeMatchRule, TypeDeclaration.kind(typeDeclaration.modifiers), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, validatedTypeMatchRule, TypeDeclaration.kind(memberTypeDeclaration.modifiers), packageDeclaration, memberTypeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, packageMatchRule, typeName, validatedTypeMatchRule, TypeDeclaration.kind(memberTypeDeclaration.modifiers), packageDeclaration, memberTypeDeclaration.name)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "630bc3fcfa75269f0a1b860a2c655fc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "a118736b4df6d2c2d76c2e8540c6ee6242953cb2", "commitAfterChange": "d90e3df9ed4198288c27321fc19ea2323118c013", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tpublic void searchAllConstructorDeclarations( \t\tfinal char[] packageName, \t\tfinal char[] typeName, \t\tfinal int typeMatchRule, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessConstructorRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \t \tpublic void searchAllConstructorDeclarations( \t\tfinal char[] packageName, \t\tfinal char[] typeName, \t\tfinal int typeMatchRule, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessConstructorRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["+\t\tfinal char NoSuffix = IIndexConstants.TYPE_SUFFIX; // Used as TYPE_SUFFIX has no effect in method #match(char, char[] , int, char[], int , int, char[], char[])", "-\t\t\t\t\t\t\tif (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, simpleName) && !type.isMember()) {", "+\t\t\t\t\t\t\tif (match(NoSuffix, packageName, pkgMatchRule, typeName, validatedTypeMatchRule, 0/*no kind*/, packageDeclaration, simpleName) && !type.isMember()) {", "-\t\t\t\t\t\t\t\t\t\tif (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\t\tif (match(NoSuffix, packageName, pkgMatchRule, typeName, validatedTypeMatchRule, 0/*no kind*/, packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\tif (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(NoSuffix, packageName, pkgMatchRule, typeName, validatedTypeMatchRule, 0/*no kind*/, packageDeclaration, typeDeclaration.name)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f57523e77e059eb1e1ef195984820885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "ad99e8346223888eb2f8e2613d918829f95fd2b2", "commitAfterChange": "7c65ba31905e387e2902b13fe71f33b55f069273", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tpublic void searchAllConstructorDeclarations( \t\tfinal char[] packageName, \t\tfinal char[] typeName, \t\tfinal int typeMatchRule, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessConstructorRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \t \tpublic void searchAllConstructorDeclarations( \t\tfinal char[] packageName, \t\tfinal char[] typeName, \t\tfinal int typeMatchRule, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessConstructorRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["+\t\t", "+\t\tfinal int pkgMatchRule = SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE;", "-\t\t\t\t\t\t\tif (match(packageName, typeName, validatedTypeMatchRule, packageDeclaration, simpleName) && !type.isMember()) {", "+\t\t\t\t\t\t\tif (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, simpleName) && !type.isMember()) {", "-\t\t\t\t\t\t\t\t\t\tif (match(packageName, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\t\tif (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\tif (match(packageName, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {"]}], "num": 32025}
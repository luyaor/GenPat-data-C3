{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fbfd19823d02633038a5a00f709584c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5130ae6b2f1716683ebcf6baa4de93fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "signatureAfterChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "diff": ["-\tConstructorDeclaration cd = new ConstructorDeclaration(this.compilationResult);", "-\tcd.selector = new char[] { 'x' }; //no maining", "-\tcd.sourceStart = this.sourceStart;", "-\tcd.sourceEnd = this.sourceEnd;", "+\tConstructorDeclaration constructor = new ConstructorDeclaration(this.compilationResult);", "+\tconstructor.selector = new char[] { 'x' }; //no maining", "+\tconstructor.sourceStart = this.sourceStart;", "+\tconstructor.sourceEnd = this.sourceEnd;", "-\tcd.modifiers = newModifiers;", "-\tcd.isDefaultConstructor = true;", "+\tconstructor.modifiers = newModifiers;", "+\tconstructor.isDefaultConstructor = true;", "-\t\tArgument[] arguments = (cd.arguments = new Argument[argumentsLength]);", "+\t\tArgument[] arguments = (constructor.arguments = new Argument[argumentsLength]);", "-\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "-\tcd.constructorCall.sourceStart = this.sourceStart;", "-\tcd.constructorCall.sourceEnd = this.sourceEnd;", "+\tconstructor.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\tconstructor.constructorCall.sourceStart = this.sourceStart;", "+\tconstructor.constructorCall.sourceEnd = this.sourceEnd;", "-\t\targs = cd.constructorCall.arguments = new Expression[argumentsLength];", "+\t\targs = constructor.constructorCall.arguments = new Expression[argumentsLength];", "-\t\tthis.methods = new AbstractMethodDeclaration[] { cd };", "+\t\tthis.methods = new AbstractMethodDeclaration[] { constructor };", "-\t\tnewMethods[0] = cd;", "+\t\tnewMethods[0] = constructor;", "-\tcd.binding = new MethodBinding(", "-\t\t\tcd.modifiers, //methodDeclaration", "+\tconstructor.binding = new MethodBinding(", "+\t\t\tconstructor.modifiers, //methodDeclaration", "-\tcd.scope = new MethodScope(this.scope, cd, true);", "-\tcd.bindArguments();", "-\tcd.constructorCall.resolve(cd.scope);", "+\tconstructor.scope = new MethodScope(this.scope, constructor, true);", "+\tconstructor.bindArguments();", "+\tconstructor.constructorCall.resolve(constructor.scope);", "-\tif (this.binding.methods == null) {", "-\t\tthis.binding.methods = new MethodBinding[] { cd.binding };", "-\t} else {", "-\t\tMethodBinding[] newMethods;", "-\t\tSystem.arraycopy(", "-\t\t\tthis.binding.methods,", "-\t\t\t0,", "-\t\t\tnewMethods = new MethodBinding[this.binding.methods.length + 1],", "-\t\t\t1,", "-\t\t\tthis.binding.methods.length);", "-\t\tnewMethods[0] = cd.binding;", "-\t\tthis.binding.methods = newMethods;", "-\t}", "+\tMethodBinding[] oldMethods = this.binding.methods(); // trigger sorting", "+\tMethodBinding[] newMethods;", "+\tSystem.arraycopy(", "+\t\tthis.binding.methods(),", "+\t\t0,", "+\t\tnewMethods = new MethodBinding[oldMethods.length + 1],", "+\t\t1,", "+\t\toldMethods.length);", "+\tnewMethods[0] = constructor.binding; // position 0 is important, since if sorted, constructor will still be ahead", "+\tthis.binding.setMethods(newMethods);", "-\treturn cd.binding;", "+\treturn constructor.binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c567b8476bb14f9739ae3212c891f11e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic ConstructorDeclaration createDefaultConstructor( \t\tboolean needExplicitConstructorCall, \t\tboolean needToInsert)", "signatureAfterChange": "  public ConstructorDeclaration createDefaultConstructor(\tboolean needExplicitConstructorCall, boolean needToInsert)", "diff": ["+", "+public ConstructorDeclaration createDefaultConstructor(\tboolean needExplicitConstructorCall, boolean needToInsert) {", "+\t//Add to method'set, the default constuctor that just recall the", "+\t//super constructor with no arguments", "+\t//The arguments' type will be positionned by the TC so just use", "+\t//the default int instead of just null (consistency purpose)", "+", "+\t//the constructor", "+\tConstructorDeclaration constructor = new ConstructorDeclaration(this.compilationResult);", "+\tconstructor.isDefaultConstructor = true;", "+\tconstructor.selector = this.name;", "+\tconstructor.modifiers = this.modifiers & ExtraCompilerModifiers.AccVisibilityMASK;", "+", "+\t//if you change this setting, please update the ", "+\t//SourceIndexer2.buildTypeDeclaration(TypeDeclaration,char[]) method", "+\tconstructor.declarationSourceStart = constructor.sourceStart = this.sourceStart;", "+\tconstructor.declarationSourceEnd =", "+\t\tconstructor.sourceEnd = constructor.bodyEnd = this.sourceEnd;", "+", "+\t//the super call inside the constructor", "+\tif (needExplicitConstructorCall) {", "+\t\tconstructor.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tconstructor.constructorCall.sourceStart = this.sourceStart;", "+\t\tconstructor.constructorCall.sourceEnd = this.sourceEnd;", "-\t", "-\tpublic ConstructorDeclaration createDefaultConstructor(", "-\t\tboolean needExplicitConstructorCall,", "-\t\tboolean needToInsert) {", "-", "-\t\t//Add to method'set, the default constuctor that just recall the", "-\t\t//super constructor with no arguments", "-\t\t//The arguments' type will be positionned by the TC so just use", "-\t\t//the default int instead of just null (consistency purpose)", "-", "-\t\t//the constructor", "-\t\tConstructorDeclaration constructor = new ConstructorDeclaration(this.compilationResult);", "-\t\tconstructor.isDefaultConstructor = true;", "-\t\tconstructor.selector = this.name;", "-\t\tif (modifiers != ClassFileConstants.AccDefault) {", "-\t\t\tconstructor.modifiers =", "-\t\t\t\t(((this.bits & ASTNode.IsMemberType) != 0) && (modifiers & ClassFileConstants.AccPrivate) != 0)", "-\t\t\t\t\t? ClassFileConstants.AccDefault", "-\t\t\t\t\t: modifiers & ExtraCompilerModifiers.AccVisibilityMASK;", "-\t\t}", "-", "-\t\t//if you change this setting, please update the ", "-\t\t//SourceIndexer2.buildTypeDeclaration(TypeDeclaration,char[]) method", "-\t\tconstructor.declarationSourceStart = constructor.sourceStart = sourceStart;", "-\t\tconstructor.declarationSourceEnd =", "-\t\t\tconstructor.sourceEnd = constructor.bodyEnd = sourceEnd;", "-", "-\t\t//the super call inside the constructor", "-\t\tif (needExplicitConstructorCall) {", "-\t\t\tconstructor.constructorCall = SuperReference.implicitSuperConstructorCall();", "-\t\t\tconstructor.constructorCall.sourceStart = sourceStart;", "-\t\t\tconstructor.constructorCall.sourceEnd = sourceEnd;", "-\t\t}", "-", "-\t\t//adding the constructor in the methods list", "-\t\tif (needToInsert) {", "-\t\t\tif (methods == null) {", "-\t\t\t\tmethods = new AbstractMethodDeclaration[] { constructor };", "-\t\t\t} else {", "-\t\t\t\tAbstractMethodDeclaration[] newMethods;", "-\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\tmethods,", "-\t\t\t\t\t0,", "-\t\t\t\t\tnewMethods = new AbstractMethodDeclaration[methods.length + 1],", "-\t\t\t\t\t1,", "-\t\t\t\t\tmethods.length);", "-\t\t\t\tnewMethods[0] = constructor;", "-\t\t\t\tmethods = newMethods;", "-\t\t\t}", "-\t\t}", "-\t\treturn constructor;", "-\t}", "+\t//adding the constructor in the methods list", "+\tif (needToInsert) {", "+\t\tif (this.methods == null) {", "+\t\t\tthis.methods = new AbstractMethodDeclaration[] { constructor };", "+\t\t\t\tthis.methods,", "+\t\t\t\tnewMethods = new AbstractMethodDeclaration[this.methods.length + 1],", "+\t\t\t\tthis.methods.length);", "+\t\t\tnewMethods[0] = constructor;", "+\t\t\tthis.methods = newMethods;", "+\t}", "+\treturn constructor;", "+}"]}], "num": 51945}
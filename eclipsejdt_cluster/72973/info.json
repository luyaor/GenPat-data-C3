{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3423b5d499924fa3462c9e435e7dc07", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b44bbd18004a8656808d0033f69b1162", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["-\t\tif (options == null) {", "-\t\t\toptions = JavaCore.getOptions();", "-\t\t}", "-\t\tASTConverter converter = new ASTConverter(options, false, null);", "-\t\tconverter.compilationUnitSource = source;", "-\t\tconverter.scanner.setSource(source);", "-\t\t", "-\t\tAST ast = new AST();", "-\t\tast.setBindingResolver(new BindingResolver());", "-\t\tconverter.setAST(ast);", "-\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\tCompilationUnit compilationUnit = ast.newCompilationUnit();", "-\t\tswitch(kind) {", "-\t\t\tcase K_STATEMENTS :", "-\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "-\t\t\t\tRecordedParsingInformation recordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\t\tint[][] comments = recordedParsingInformation.commentPositions;", "-\t\t\t\tif (comments != null) {", "-\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "-\t\t\t\t}", "-\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\tif (constructorDeclaration != null) {", "-\t\t\t\t\tBlock block = ast.newBlock();", "-\t\t\t\t\tStatement[] statements = constructorDeclaration.statements;", "-\t\t\t\t\tif (statements != null) {", "-\t\t\t\t\t\tint statementsLength = statements.length;", "-\t\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\t\t\t\t\tblock.statements().add(converter.convert(statements[i]));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, block, recordedParsingInformation);", "-\t\t\t\t\treturn block;", "-\t\t\t\t} else {", "-\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "-\t\t\tcase K_EXPRESSION :", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "-\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "-\t\t\t\tif (comments != null) {", "-\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "-\t\t\t\t}", "-\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\tif (expression != null) {", "-\t\t\t\t\tExpression expression2 = converter.convert(expression);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn expression2;", "-\t\t\t\t} else {", "-\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "-\t\t\tcase K_CLASS_BODY_DECLARATIONS :", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "-\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "-\t\t\t\tif (comments != null) {", "-\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "-\t\t\t\t}", "-\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\tif (nodes != null) {", "-\t\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn typeDeclaration;", "-\t\t\t\t} else {", "-\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "-\t\t}", "-\t\tthrow new IllegalArgumentException();", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setKind(kind);", "+\t\tc.setSource(source);", "+\t\tc.setSourceRange(offset, length);", "+\t\tc.setCompilerOptions(options);", "+\t\treturn c.createAST(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb29cfc7f11fe24332d688155303e706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "commitAfterChange": "b3c71360bc95e8921739b4788b7eb24580a75ac4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "diff": ["-", "+\t\tfindTypes(prefix, findMembers, camelCaseMatch, searchFor, storage, null);", "+\t}", "-\t\t\ttry {", "-\t\t\t\tint matchRule = SearchPattern.R_PREFIX_MATCH;", "-\t\t\t\tif (camelCaseMatch) matchRule |= SearchPattern.R_CAMELCASE_MATCH;", "-\t\t\t\tnew BasicSearchEngine(this.workingCopies).searchAllTypeNames(", "-\t\t\t\t\tqualification,", "-\t\t\t\t\tSearchPattern.R_EXACT_MATCH,", "-\t\t\t\t\tsimpleName,", "-\t\t\t\t\tmatchRule, // not case sensitive", "-\t\t\t\t\tsearchFor,", "-\t\t\t\t\tgetSearchScope(),", "-\t\t\t\t\ttypeRequestor,", "-\t\t\t\t\tCANCEL_IF_NOT_READY_TO_SEARCH,", "-\t\t\t\t\tprogressMonitor);", "-\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\tfindTypes(", "-\t\t\t\t\tnew String(prefix),", "-\t\t\t\t\tstorage,", "-\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c99604a89efc7fc2a87631c8a5e2ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "e6db618a9b62756ea5188d8fdad9bb0c157f5516", "commitAfterChange": "265fce71e12d88a397c49e9793a330fd01dcb78a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "diff": ["-\t\treturn mapSource(mapper);", "-\t} else if (!this.checkAutomaticSourceMapping) {", "-\t\t/*", "-\t\t * We try to see if we can automatically attach a source", "-\t\t * source files located inside the same folder than its .class file", "-\t\t * See bug 36510.", "-\t\t */", "-\t\tPackageFragmentRoot root = getPackageFragmentRoot();", "-\t\tif (root.isArchive()) {", "-\t\t\t// root is a jar file or a zip file", "-\t\t\tString elementName = getElementName();", "-\t\t\tString sourceFileWithoutExtension = elementName.substring(0, elementName.lastIndexOf('.'));", "-\t\t\tJarPackageFragmentRoot jarPackageFragmentRoot = (JarPackageFragmentRoot) root;", "-\t\t\tZipFile jar = null;", "-\t\t\ttry {", "-\t\t\t\tjar = jarPackageFragmentRoot.getJar();", "-\t\t\t\tString[] pkgName = ((PackageFragment) getParent()).names;", "-\t\t\t\tchar[][] javaLikeExtensions = Util.getJavaLikeExtensions();", "-\t\t\t\tfor (int i = 0, length = javaLikeExtensions.length; i < length; i++) {", "-\t\t\t\t\tStringBuffer entryName = new StringBuffer();", "-\t\t\t\t\tfor (int j = 0, pkgNameLength = pkgName.length; j < pkgNameLength; j++) {", "-\t\t\t\t\t\tentryName.append(pkgName[j]);", "-\t\t\t\t\t\tentryName.append('/');", "-\t\t\t\t\t}", "-\t\t\t\t\tentryName.append(sourceFileWithoutExtension);", "-\t\t\t\t\tentryName.append('.');", "-\t\t\t\t\tentryName.append(javaLikeExtensions[i]);", "-\t\t\t\t\tZipEntry zipEntry = jar.getEntry(entryName.toString());", "-\t\t\t\t\tif (zipEntry != null) {", "-\t\t\t\t\t\t// found a source file", "-\t\t\t\t\t\tthis.checkAutomaticSourceMapping = true;", "-\t\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "-\t\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "-\t\t\t\t\t\tif (sourceMapper != null) {", "-\t\t\t\t\t\t\treturn mapSource(sourceMapper);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tif (e instanceof JavaModelException) throw (JavaModelException)e;", "-\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t} finally {", "-\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// Attempts to find the corresponding java file", "-\t\t\tString qualifiedName = getType().getFullyQualifiedName();", "-\t\t\tNameLookup lookup = ((JavaProject) getJavaProject()).newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\tICompilationUnit cu = lookup.findCompilationUnit(qualifiedName);", "-\t\t\tif (cu != null) {", "-\t\t\t\treturn cu.getBuffer();", "-\t\t\t} else\t{", "-\t\t\t\t// root is a class folder", "-\t\t\t\t", "-\t\t\t\tIContainer pkgFolder = (IContainer) getParent().getResource();", "-\t\t\t\tIResource[] files = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tfiles = pkgFolder.members();", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t}", "-\t\t\t\tIResource sourceFile = null;", "-\t\t\t\tString classFileName = getElementName();", "-\t\t\t\tString simpleName = classFileName.substring(0, classFileName.lastIndexOf('.'));", "-\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "-\t\t\t\t\tIResource resource = files[i];", "-\t\t\t\t\tif (resource.getType() == IResource.FILE ", "-\t\t\t\t\t\t\t&& Util.equalsIgnoreJavaLikeExtension(resource.getName(), simpleName)) {", "-\t\t\t\t\t\tsourceFile = resource;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (sourceFile != null) {", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t// found a source file", "-\t\t\t\t\t // we don't need to check again. The source will be attached.", "-\t\t\t\t\tthis.checkAutomaticSourceMapping = true;", "-\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "-\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "-\t\t\t\t\tif (sourceMapper != null) {", "-\t\t\t\t\t\treturn mapSource(sourceMapper);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\treturn mapSource(mapper, info instanceof IBinaryType ? (IBinaryType) info : null);"]}], "num": 72973}
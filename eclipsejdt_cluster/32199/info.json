{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70650151b740106605d236e30426f53c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69fdfa79dba7a0f018384e63efe47fe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMType.java", "commitBeforeChange": "0e5ccea62c4a156cded8b69c3d23ada9782b2b7b", "commitAfterChange": "45f363221504243f87ba612b5fa2787cfaa05c75", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r void normalize(ILineStartFinder finder)", "signatureAfterChange": "\r void normalize(ILineStartFinder finder)", "diff": ["-\tint openBodyEnd, closeBodyStart;\r", "+\tint openBodyEnd, openBodyStart, closeBodyStart, closeBodyEnd;\r", "-\tcloseBodyStart = fCloseBodyRange[1];\r", "-\tif (isDetailed()) {\r", "-\t\tif (first == null) {\r", "-\t\t\topenBodyEnd = fCloseBodyRange[0] - 1;\r", "+\tDOMNode lastNode = null;\r", "+\t// look for the open body\r", "+\tScanner scanner = new Scanner();\r", "+\tscanner.setSourceBuffer(fDocument);\r", "+\tscanner.resetTo(fNameRange[1] + 1, fDocument.length);\r", "+\t\r", "+\ttry {\r", "+\t\tint currentToken = scanner.getNextToken();\r", "+\t\twhile(currentToken != TerminalSymbols.TokenNameLBRACE &&\r", "+\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\tcurrentToken = scanner.getNextToken();\r", "+\t\t}\r", "+\t\tif(currentToken == TerminalSymbols.TokenNameLBRACE) {\t\t\r", "+\t\t\topenBodyEnd = scanner.currentPosition - 1;\r", "+\t\t\topenBodyStart = scanner.startPosition;\r", "-\t\t\topenBodyEnd = first.getStartPosition();\r", "-\t\t\tint lineStart = finder.getLineStart(openBodyEnd);\r", "-\t\t\topenBodyEnd--;\r", "-\t\t\tif (lineStart > fOpenBodyRange[0])\r", "-\t\t\t\topenBodyEnd = lineStart - 1;\r", "+\t\t\topenBodyEnd = fDocument.length;\r", "+\t\t\topenBodyStart = fDocument.length;\r", "+\t\t}\r", "+\t} catch(InvalidInputException e) {\r", "+\t\topenBodyEnd = fDocument.length;\r", "+\t\topenBodyStart = fDocument.length;\r", "+\t}\r", "+\tif (first != null) {\r", "+\t\tint lineStart = finder.getLineStart(first.getStartPosition());\r", "+\t\tif (lineStart > openBodyEnd) {\r", "+\t\t\topenBodyEnd = lineStart - 1;\r", "+\t\t} else {\r", "+\t\t\topenBodyEnd = first.getStartPosition() - 1;\r", "+\t\t}\t\t\r", "+\t\tlastNode = (DOMNode) first.getNextNode();\r", "+\t\tif (lastNode == null) {\r", "+\t\t\tlastNode = first;\r", "+\t\t} else {\r", "+\t\t\twhile (lastNode.getNextNode() != null) {\r", "+\t\t\t\tlastNode = (DOMNode) lastNode.getNextNode();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tscanner.setSourceBuffer(fDocument);\r", "+\t\tscanner.resetTo(lastNode.getEndPosition() + 1, fDocument.length);\r", "+\t\ttry {\r", "+\t\t\tint currentToken = scanner.getNextToken();\r", "+\t\t\twhile(currentToken != TerminalSymbols.TokenNameRBRACE &&\r", "+\t\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tcurrentToken = scanner.getNextToken();\r", "+\t\t\t}\r", "+\t\t\tif(currentToken == TerminalSymbols.TokenNameRBRACE) {\t\t\r", "+\t\t\t\tcloseBodyStart = scanner.startPosition;\r", "+\t\t\t\tcloseBodyEnd = scanner.currentPosition - 1;\r", "+\t\t\t} else {\r", "+\t\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\t\tcloseBodyEnd = fDocument.length;\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r", "+\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\tcloseBodyEnd = fDocument.length;\r", "-\t\tif (first != null) {\r", "-\t\t\t// look for the open body\r", "-\t\t\topenBodyEnd= CharArrayOps.indexOf('{', fDocument, fNameRange[1] + 1);\r", "-\t\t\tif (openBodyEnd < 0 || openBodyEnd >= first.getStartPosition()) {\r", "-\t\t\t\topenBodyEnd= first.getStartPosition() - 1;\r", "+\t\tscanner.resetTo(openBodyEnd, fDocument.length);\r", "+\t\ttry {\r", "+\t\t\tint currentToken = scanner.getNextToken();\r", "+\t\t\twhile(currentToken != TerminalSymbols.TokenNameRBRACE &&\r", "+\t\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tcurrentToken = scanner.getNextToken();\r", "+\t\t\t}\r", "+\t\t\tif(currentToken == TerminalSymbols.TokenNameRBRACE) {\t\t\r", "+\t\t\t\tcloseBodyStart = scanner.startPosition;\r", "+\t\t\t\tcloseBodyEnd = scanner.currentPosition - 1;\r", "-\t\t\t\tint lineStart = finder.getLineStart(first.getStartPosition());\r", "-\t\t\t\tif (lineStart > openBodyEnd) {\r", "-\t\t\t\t\topenBodyEnd = lineStart - 1;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\topenBodyEnd = first.getStartPosition() - 1;\r", "-\t\t\t\t}\r", "+\t\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\t\tcloseBodyEnd = fDocument.length;\r", "-\t\t\tif (fDocument[closeBodyStart] != '}') {\r", "-\t\t\t\t// look for the body end\r", "-\t\t\t\tScanner scanner = new Scanner();\r", "-\t\t\t\tscanner.setSourceBuffer(CharArrayOps.subarray(fDocument, fLastChild.getEndPosition() + 1, closeBodyStart - fLastChild.getEndPosition() + 1));\r", "-\t\t\t\t\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tint currentToken = scanner.getNextToken();\r", "-\t\t\t\t\twhile(currentToken != TerminalSymbols.TokenNameRBRACE &&\r", "-\t\t\t\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "-\t\t\t\t\t\tcurrentToken = scanner.getNextToken();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif(currentToken == TerminalSymbols.TokenNameRBRACE) {\t\t\r", "-\t\t\t\t\t\tcloseBodyStart = fLastChild.getEndPosition() + scanner.currentPosition;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tcatch(InvalidInputException e) {\r", "-\t\t\t\t\t// leave closeBodyStart as is\r", "-\t\t\t\t}\r", "-\t\t\t\t\t\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\topenBodyEnd = fCloseBodyRange[0] - 1;\r", "+\t\t} catch(InvalidInputException e) {\r", "+\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\tcloseBodyEnd = fDocument.length;\r", "+\t\topenBodyEnd = closeBodyEnd - 1;\r", "+\tsetOpenBodyRangeStart(openBodyStart);\r", "+\tsetCloseBodyRangeEnd(closeBodyEnd);\r", "+\tif (lastNode != null && fInsertionPosition < lastNode.getEndPosition()) {\r", "+\t\tfInsertionPosition = getCloseBodyPosition();\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce611a7dc7819c63a855c4ebf653f8e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "b3a3e56706625d1059f4804a9598e799971e01c0", "commitAfterChange": "43d9a8218ade784ba7108302e1f9223a0cd8fa04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r \tprivate boolean checkSelection(\r \t\tchar[] source,\r \t\tint selectionStart,\r \t\tint selectionEnd)", "signatureAfterChange": "\r \r \tprivate boolean checkSelection(\r \t\tchar[] source,\r \t\tint selectionStart,\r \t\tint selectionEnd)", "diff": ["-\t\tscanner.resetTo(selectionStart, selectionEnd);\r", "-\r", "+\t\t\r", "-\t\tint token, identCount = 0;\r", "-\t\tboolean expectingIdentifier = true;\r", "-\t\tStringBuffer entireSelection =\r", "-\t\t\tnew StringBuffer(selectionEnd - selectionStart + 1);\r", "-\t\tdo {\r", "+\t\tint token, identCount = 0;\r", "+\t\tStringBuffer entireSelection = new StringBuffer(selectionEnd - selectionStart + 1);\r", "+\t\t\r", "+\t\tif(selectionStart > selectionEnd){\r", "+\t\t\t\r", "+\t\t\t// compute start position of current line\r", "+\t\t\tint currentPosition = selectionStart - 1;\r", "+\t\t\tint nextCharacterPosition = selectionStart;\r", "+\t\t\tchar currentCharacter = ' ';\r", "-\t\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\twhile(currentPosition > 0 || currentCharacter == '\\r' || currentCharacter == '\\n'){\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif(source[currentPosition] == '\\\\' && source[currentPosition+1] == 'u') {\r", "+\t\t\t\t\t\tint pos = currentPosition + 2;\r", "+\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\t\t\twhile (source[pos] == 'u') {\r", "+\t\t\t\t\t\t\tpos++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif ((c1 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(source[pos++])) > 15\r", "+\t\t\t\t\t\t\t|| c4 < 0) {\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "+\t\t\t\t\t\t\tnextCharacterPosition = pos;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tcurrentCharacter = source[currentPosition];\r", "+\t\t\t\t\t\tnextCharacterPosition = currentPosition+1;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif(currentCharacter == '\\r' || currentCharacter == '\\n') {\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tcurrentPosition--;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tcatch (ArrayIndexOutOfBoundsException e) {\r", "-\t\t\tswitch (token) {\r", "-\t\t\t\tcase TerminalSymbols.TokenNamethis :\r", "-\t\t\t\tcase TerminalSymbols.TokenNamesuper :\r", "-\t\t\t\tcase TerminalSymbols.TokenNameIdentifier :\r", "-\t\t\t\t\tif (!expectingIdentifier)\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();\r", "-\t\t\t\t\tlastIdentifierStart = scanner.startPosition;\r", "-\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;\r", "-\t\t\t\t\tif(lastIdentifierEnd > selectionEnd) {\r", "-\t\t\t\t\t\tlastIdentifierEnd = selectionEnd;\r", "-\t\t\t\t\t\tlastIdentifier = CharOperation.subarray(lastIdentifier, 0,lastIdentifierEnd - lastIdentifierStart + 1);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tentireSelection.append(lastIdentifier);\r", "-\t\t\t\t\t\t\r", "-\t\t\t\t\tidentCount++;\r", "-\t\t\t\t\texpectingIdentifier = false;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TerminalSymbols.TokenNameDOT :\r", "-\t\t\t\t\tif (expectingIdentifier)\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\tentireSelection.append('.');\r", "-\t\t\t\t\texpectingIdentifier = true;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TerminalSymbols.TokenNameEOF :\r", "-\t\t\t\t\tif (expectingIdentifier)\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tdefault :\r", "+\t\t\t\r", "+\t\t\t// compute start and end of the last token\r", "+\t\t\tscanner.resetTo(nextCharacterPosition, selectionEnd);\r", "+\t\t\tdo {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "-\t\t\t}\r", "-\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t\t\t}\r", "+\t\t\t\tif((token == TerminalSymbols.TokenNamethis ||\r", "+\t\t\t\t\ttoken == TerminalSymbols.TokenNamesuper ||\r", "+\t\t\t\t\ttoken == TerminalSymbols.TokenNameIdentifier) &&\r", "+\t\t\t\t\tscanner.startPosition < selectionStart &&\r", "+\t\t\t\t\tselectionStart < scanner.currentPosition) {\r", "+\t\t\t\t\tlastIdentifierStart = scanner.startPosition;\r", "+\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition;\r", "+\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();\r", "+\t\t\t\t}\r", "+\t\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t} else {\r", "+\t\t\tscanner.resetTo(selectionStart, selectionEnd);\r", "+\t\r", "+\t\t\tboolean expectingIdentifier = true;\r", "+\t\t\t\r", "+\t\t\tdo {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamethis :\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamesuper :\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier :\r", "+\t\t\t\t\t\tif (!expectingIdentifier)\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();\r", "+\t\t\t\t\t\tlastIdentifierStart = scanner.startPosition;\r", "+\t\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;\r", "+\t\t\t\t\t\tif(lastIdentifierEnd > selectionEnd) {\r", "+\t\t\t\t\t\t\tlastIdentifierEnd = selectionEnd;\r", "+\t\t\t\t\t\t\tlastIdentifier = CharOperation.subarray(lastIdentifier, 0,lastIdentifierEnd - lastIdentifierStart + 1);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tentireSelection.append(lastIdentifier);\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tidentCount++;\r", "+\t\t\t\t\t\texpectingIdentifier = false;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT :\r", "+\t\t\t\t\t\tif (expectingIdentifier)\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\tentireSelection.append('.');\r", "+\t\t\t\t\t\texpectingIdentifier = true;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameEOF :\r", "+\t\t\t\t\t\tif (expectingIdentifier)\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault :\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t}\r"]}], "num": 32199}
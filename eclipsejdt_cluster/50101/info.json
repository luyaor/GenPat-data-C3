{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f1b9e6708df5a978c1b7060db6ab34d", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84b37b713f7e7d1ced6a652c05f12fc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "-\t\t\targumentTypes = new TypeBinding[length];", "+\t\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\t\t\targumentTypes[i] = argument.resolveType((ClassScope)scope);", "+\t\t\t\t\tthis.argumentTypes[i] = argument.resolveType((ClassScope)scope);", "-\t\t\t\t\targumentTypes[i] = argument.resolveType((BlockScope)scope);", "+\t\t\t\t\tthis.argumentTypes[i] = argument.resolveType((BlockScope)scope);", "-\t\t\t\tif (argumentTypes[i] == null) {", "+\t\t\t\tif (this.argumentTypes[i] == null) {", "-\t\t\t\t\thasArgsTypeVar = argumentTypes[i].isTypeVariable();", "+\t\t\t\t\thasArgsTypeVar = this.argumentTypes[i].isTypeVariable();", "-\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.actualReceiverType, argumentTypes, scope.getDeclarationModifiers());", "+\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.actualReceiverType, this.argumentTypes, scope.getDeclarationModifiers());", "-\t\tthis.binding = scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "+\t\tthis.binding = scope.getMethod(this.actualReceiverType, this.selector, this.argumentTypes, this);", "-\t\t\t\tmethodBinding = scope.getMethod(enclosingTypeBinding, this.selector, argumentTypes, this);", "+\t\t\t\tmethodBinding = scope.getMethod(enclosingTypeBinding, this.selector, this.argumentTypes, this);", "-\t\t\t\t\tcontructorBinding = scope.getConstructor((ReferenceBinding)enclosingTypeBinding, argumentTypes, this);", "+\t\t\t\t\tcontructorBinding = scope.getConstructor((ReferenceBinding)enclosingTypeBinding, this.argumentTypes, this);", "-\t\t\t\t\t\tcontructorBinding = scope.getConstructor((ReferenceBinding)enclosingTypeBinding, argumentTypes, this);", "+\t\t\t\t\t\tcontructorBinding = scope.getConstructor((ReferenceBinding)enclosingTypeBinding, this.argumentTypes, this);", "-\t\t\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.actualReceiverType, argumentTypes, scope.getDeclarationModifiers());", "+\t\t\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.actualReceiverType, this.argumentTypes, scope.getDeclarationModifiers());", "-\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, this.argumentTypes, ProblemReasons.NotFound);", "-\t\t\tint length = argumentTypes.length;", "-\t\t\tif (!(this.binding.parameters.length == length && argumentTypes[length-1].isArrayType())) {", "-\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tint length = this.argumentTypes.length;", "+\t\t\tif (!(this.binding.parameters.length == length && this.argumentTypes[length-1].isArrayType())) {", "+\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, this.argumentTypes, ProblemReasons.NotFound);", "-\t\t\tint length = argumentTypes.length;", "+\t\t\tint length = this.argumentTypes.length;", "-\t\t\t\tif (TypeBinding.notEquals(this.binding.parameters[i].erasure(), argumentTypes[i].erasure())) {", "-\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\tif (TypeBinding.notEquals(this.binding.parameters[i].erasure(), this.argumentTypes[i].erasure())) {", "+\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, this.argumentTypes, ProblemReasons.NotFound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf6cac821eb17feabeaaf27f5fa60504", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "+\t\tthis.argumentTypes = Binding.NO_PARAMETERS;", "-\t\t\targumentTypes = new TypeBinding[length];", "+\t\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\t\t\targumentTypes[i] = argument.resolveType((ClassScope)scope);", "+\t\t\t\t\tthis.argumentTypes[i] = argument.resolveType((ClassScope)scope);", "-\t\t\t\t\targumentTypes[i] = argument.resolveType((BlockScope)scope);", "+\t\t\t\t\tthis.argumentTypes[i] = argument.resolveType((BlockScope)scope);", "-\t\t\t\tif (argumentTypes[i] == null) {", "+\t\t\t\tif (this.argumentTypes[i] == null) {", "-\t\t\t\t\thasTypeVarArgs = argumentTypes[i].isTypeVariable();", "+\t\t\t\t\thasTypeVarArgs = this.argumentTypes[i].isTypeVariable();", "-\t\tthis.binding = scope.getConstructor(allocationType, argumentTypes, this);", "+\t\tthis.binding = scope.getConstructor(allocationType, this.argumentTypes, this);", "-\t\t\t\tcontructorBinding = scope.getConstructor(enclosingTypeBinding, argumentTypes, this);", "+\t\t\t\tcontructorBinding = scope.getConstructor(enclosingTypeBinding, this.argumentTypes, this);", "-\t\t\tMethodBinding methodBinding = scope.getMethod(this.resolvedType, this.resolvedType.sourceName(), argumentTypes, this);", "+\t\t\tMethodBinding methodBinding = scope.getMethod(this.resolvedType, this.resolvedType.sourceName(), this.argumentTypes, this);", "-\t\t\tint length = argumentTypes.length;", "-\t\t\tif (!(this.binding.parameters.length == length && argumentTypes[length-1].isArrayType())) {", "-\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tint length = this.argumentTypes.length;", "+\t\t\tif (!(this.binding.parameters.length == length && this.argumentTypes[length-1].isArrayType())) {", "+\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, this.argumentTypes, ProblemReasons.NotFound);", "-\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, this.argumentTypes, ProblemReasons.NotFound);", "-\t\t\t\tint length = argumentTypes.length;", "+\t\t\t\tint length = this.argumentTypes.length;", "-\t\t\t\t\tif (TypeBinding.notEquals(paramMethodBinding.parameters[i], argumentTypes[i]) &&", "-\t\t\t\t\t\t\tTypeBinding.notEquals(paramMethodBinding.parameters[i].erasure(), argumentTypes[i].erasure())) {", "-\t\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\tif (TypeBinding.notEquals(paramMethodBinding.parameters[i], this.argumentTypes[i]) &&", "+\t\t\t\t\t\t\tTypeBinding.notEquals(paramMethodBinding.parameters[i].erasure(), this.argumentTypes[i].erasure())) {", "+\t\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, this.argumentTypes, ProblemReasons.NotFound);"]}], "num": 50101}
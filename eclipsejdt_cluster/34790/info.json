{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37dbfcecf182f5f2e647f0f2b5c0927a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e84ed42d34d2cc8a8c9b6bc84503b79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "91f52bd5be936f7bbe4c16807f2507407ccf8fc5", "commitAfterChange": "3c8f4fd83120cfd23adf6f542540eda7647350ed", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\tnextMethod: for (int i = 0, length = this.methods.length; i < length; i++) {", "+\t\tfor (int i = 0, length = this.methods.length; i < length; i++) {", "-\t\t\t\tcontinue nextMethod;", "+\t\t\t\tcontinue;", "-\t\t\t\t\tcontinue nextMethod; // methods with same selector are contiguous", "+\t\t\t\t\tbreak nextSibling; // methods with same selector are contiguous"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c0cad18e879335c4fe4b0d6721952e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8d86c45b7dbc1d8316194b358e7234e4491fa695", "commitAfterChange": "0305482ace5c5443f44c914a225574b12096815b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["-\t            for (int i = 0, length = this.arguments.length; i < length; i++) {", "+\t            for (int i = 0, length = parameterizedType.arguments.length; i < length; i++) {", "+\t        } else if (equivalent.isParameterizedType() && otherEquivalent.isRawType()) {", "+\t        \tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a831473b2be3140f223750b7131b7a77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexer.java", "commitBeforeChange": "f940793ad6a8d5d0b9d6787ffa3657f56433791f", "commitAfterChange": "62f4198121495ae184573e68231f47c9011b5815", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void purgeMethodStatements(TypeDeclaration type)", "signatureAfterChange": "  \tprivate void purgeMethodStatements(TypeDeclaration type)", "diff": ["-\t\tfor (int j = 0, length = methods.length; j < length; j++) {", "+\t\tfor (int j = 0, length = methods == null ? 0 : methods.length; j < length; j++) {", "-\t\t\tif ((method.bits & ASTNode.HasFunctionalInterfaceTypes) == 0) {", "+\t\t\tif (method != null && (method.bits & ASTNode.HasFunctionalInterfaceTypes) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd55b88f6c356f791c017bb3c0890d42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "commitAfterChange": "323d52f789e646d704223fd3ac5d22c4e4efec25", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "signatureAfterChange": "  \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "diff": ["-\t\t\tfor (int i = 0, l = arguments.length; i < l; i++)", "+\t\t\tfor (int i = 0, l = arguments.length; i < l; i++) {", "+\t\t\t\tif (arguments[i].hasNullTypeAnnotations())", "+\t\t\t\t\tthis.tagBits |= TagBits.HasNullTypeAnnotation;", "+\t\t\t}", "+\t\tif (enclosingType != null && enclosingType.hasNullTypeAnnotations())", "+\t\t\tthis.tagBits |= TagBits.HasNullTypeAnnotation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe60749cd894711ab7249cdafd16aaa3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "14609503efe4c7d28a69750ca6853c468e091676", "commitAfterChange": "60778824f4bf80e0d58926de2175a29d947efbe8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations, boolean annotatingEnumerator)", "signatureAfterChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations, boolean annotatingEnumerator)", "diff": ["+\t\t\t\t\t\tif(scope.environment().usesNullTypeAnnotations()) {", "+\t\t\t\t\t\t\tlocal.tagBits &= ~(se8nullBits);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif(scope.environment().usesNullTypeAnnotations()) {", "+\t\t\t\t\t\t\tfield.tagBits &= ~(se8nullBits);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif(scope.environment().usesNullTypeAnnotations()) {", "+\t\t\t\t\t\t\t\tmethod.tagBits &= ~(se8nullBits);", "+\t\t\t\t\t\t\t}"]}], "num": 34790}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eac8a69624aa13bd09e87c67abaf04a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "677dba6b7163fba92bcac5bbfd5a2fa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public OrPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "signatureAfterChange": "  public OrPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "diff": ["-\tpublic SearchPattern rightPattern;", "-public OrPattern(SearchPattern leftPattern, SearchPattern rightPattern) {", "-\tsuper(-1, false); // values ignored for a OrPattern", "-\t\t", "-\tthis.leftPattern = leftPattern;", "-\tthis.rightPattern = rightPattern;", "-\tthis.matchMode = Math.min(leftPattern.matchMode, rightPattern.matchMode);", "-\tthis.isCaseSensitive = leftPattern.isCaseSensitive || rightPattern.isCaseSensitive;", "-\tthis.needsResolve = leftPattern.needsResolve || rightPattern.needsResolve;", "+public OrPattern(SearchPattern leftPattern, SearchPattern rightPattern) {", "+\tsuper(", "+\t\tMath.max(leftPattern.matchMode, rightPattern.matchMode),", "+\t\tfalse); // not used", "+", "+\tthis.mustResolve = leftPattern.mustResolve || rightPattern.mustResolve;", "+", "+\tSearchPattern[] leftPatterns = leftPattern instanceof OrPattern ? ((OrPattern) leftPattern).patterns : null;", "+\tSearchPattern[] rightPatterns = rightPattern instanceof OrPattern ? ((OrPattern) rightPattern).patterns : null;", "+\tint leftSize = leftPatterns == null ? 1 : leftPatterns.length;", "+\tint rightSize = rightPatterns == null ? 1 : rightPatterns.length;", "+\tthis.patterns = new SearchPattern[leftSize + rightSize];", "+", "+\tif (leftPatterns == null)", "+\t\tthis.patterns[0] = leftPattern;", "+\telse", "+\t\tSystem.arraycopy(leftPatterns, 0, this.patterns, 0, leftSize);", "+\tif (rightPatterns == null)", "+\t\tthis.patterns[leftSize] = rightPattern;", "+\telse", "+\t\tSystem.arraycopy(rightPatterns, 0, this.patterns, leftSize, rightSize);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c150152e34ac0146d95e16b97f02108", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "fb92cfb822669ddb00db1cf41e3bdb1057d4d00d", "commitAfterChange": "00c13f2feec2211d8da2f8282a37167ca349b1b8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t public AndPattern(int patternKind, int matchRule)", "signatureAfterChange": "  public AndPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "diff": ["-\t", "-public AndPattern(int patternKind, int matchRule) {", "-\tsuper(patternKind, matchRule);", "-}", "+", "+public AndPattern(SearchPattern leftPattern, SearchPattern rightPattern) {", "+\tsuper(AND_PATTERN, combinedMatchRule(leftPattern.getMatchRule(), rightPattern.getMatchRule()));", "+\t((InternalSearchPattern) this).mustResolve = ((InternalSearchPattern) leftPattern).mustResolve || ((InternalSearchPattern) rightPattern).mustResolve;", "+", "+\tSearchPattern[] leftPatterns = leftPattern instanceof AndPattern ? ((AndPattern) leftPattern).patterns : null;", "+\tSearchPattern[] rightPatterns = rightPattern instanceof AndPattern ? ((AndPattern) rightPattern).patterns : null;", "+\tint leftSize = leftPatterns == null ? 1 : leftPatterns.length;", "+\tint rightSize = rightPatterns == null ? 1 : rightPatterns.length;", "+\tthis.patterns = new SearchPattern[leftSize + rightSize];", "+", "+\tif (leftPatterns == null)", "+\t\tthis.patterns[0] = leftPattern;", "+\telse", "+\t\tSystem.arraycopy(leftPatterns, 0, this.patterns, 0, leftSize);", "+\tif (rightPatterns == null)", "+\t\tthis.patterns[leftSize] = rightPattern;", "+\telse", "+\t\tSystem.arraycopy(rightPatterns, 0, this.patterns, leftSize, rightSize);", "+", "+\t// Store erasure match", "+\tmatchCompatibility = getMatchRule() & MATCH_COMPATIBILITY_MASK;", "+", "+\tthis.current = 0;", "+}"]}], "num": 46083}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5929d487d7934669128fbe69cb2e840", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "851d9bad45958ec05e3ad2138fd4466e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "e719dd5a3586c01e5265dc68f8e6023c180424cf", "commitAfterChange": "4e66475f9a73014d666c99c51fe059857a4663fa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "signatureAfterChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "diff": ["-\t\t\tIProject projectRsc = (IProject) this.project.getUnderlyingResource();\r", "-\t\t\tIJavaSearchScope scope =\r", "-\t\t\t\tsearchEngine.createJavaSearchScope(new IResource[] { projectRsc });\r", "-\r", "+\t\t\t// Collect the project and its prerequisites (ie. referenced projects and jars)\r", "+\t\t\tJavaSearchScope scope = new JavaSearchScope();\r", "+\t\t\tIWorkspaceRoot root = this.project.getUnderlyingResource().getWorkspace().getRoot();\r", "+\t\t\tIClasspathEntry[] entries = this.project.getExpandedClasspath(true);\r", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "+\t\t\t\t\t\tscope.add(root.getFile(entry.getPath()), false);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "+\t\t\t\t\t\tscope.add(root.getProject(entry.getPath().lastSegment()), false);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\t\t\tIPath path = entry.getPath();\r", "+\t\t\t\t\t\tif (path.segmentCount() == 1) {\r", "+\t\t\t\t\t\t\t// project is source\r", "+\t\t\t\t\t\t\tscope.add(root.getProject(path.lastSegment()), false);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// regular source folder\r", "+\t\t\t\t\t\t\tscope.add(root.getFolder(path), false);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\t\r", "-\t\t\t\t\tprojectRsc.getWorkspace(),\r", "+\t\t\t\t\tthis.project.getUnderlyingResource().getWorkspace(),\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1e813aaeda94375cdc05ad34c5a74b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c0a0c19db3e1c410023eabce30626d520ce59204", "commitAfterChange": "b522a66d284b0239a056370560676a12fc9ec458", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r \tprotected IClasspathEntry[] readPaths(String xmlClasspath) throws IOException", "signatureAfterChange": "\r \tprotected IClasspathEntry[] readPaths(String xmlClasspath) throws IOException", "diff": ["-\t\tIPath projectPath= getProject().getFullPath();\r", "+\r", "+\t\tIPath projectPath = getProject().getFullPath();\r", "+\r", "-\t\t\tDocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();\r", "+\t\t\tDocumentBuilder parser =\r", "+\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();\r", "-\t\t} catch(SAXException e) {\r", "+\t\t} catch (SAXException e) {\r", "-\t\t} catch(ParserConfigurationException e){\r", "+\t\t} catch (ParserConfigurationException e) {\r", "+\r", "-\t\tNodeList list= cpElement.getChildNodes();\r", "-\t\tVector paths= new Vector();\r", "-\t\tint length= list.getLength();\r", "-\t\tfor (int i= 0; i < length; ++i) {\r", "-\t\t\tNode node= list.item(i);\r", "-\t\t\tshort type= node.getNodeType();\r", "+\t\tNodeList list = cpElement.getChildNodes();\r", "+\t\tVector paths = new Vector();\r", "+\t\tint length = list.getLength();\r", "+\r", "+\t\tfor (int i = 0; i < length; ++i) {\r", "+\t\t\tNode node = list.item(i);\r", "+\t\t\tshort type = node.getNodeType();\r", "-\t\t\t\tElement cpeElement= (Element) node;\r", "-\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) { //$NON-NLS-1$\r", "+\t\t\t\tElement cpeElement = (Element) node;\r", "+\r", "+\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) {\r", "+\t\t\t\t\t//$NON-NLS-1$\r", "-\t\t\t\t\tIPath path= new Path(pathStr);\r", "-\t\t\t\t\tint kind= kindFromString(cpeElementKind);\r", "+\t\t\t\t\tIPath path = new Path(pathStr);\r", "+\t\t\t\t\tint kind = kindFromString(cpeElementKind);\r", "-\t\t\t\t\t\tpath= projectPath.append(path);\r", "+\t\t\t\t\t\tpath = projectPath.append(path);\r", "-\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\"); //$NON-NLS-1$\r", "-\t\t\t\t\tIPath sourceAttachmentPath = sourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$\r", "+\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$\r", "+\t\t\t\t\tIPath sourceAttachmentPath =\r", "+\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$\r", "-\t\t\t\t\tIPath sourceAttachmentRootPath = sourceAttachmentRootPathStr.equals(\"\") ? null : new Path(sourceAttachmentRootPathStr); //$NON-NLS-1$\r", "+\t\t\t\t\tIPath sourceAttachmentRootPath =\r", "+\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t? null\r", "+\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);\r", "-\t\t\t\t\tIClasspathEntry entry= createClasspathEntry(path, kind, sourceAttachmentPath, sourceAttachmentRootPath);\r", "-\t\t\t\t\tif (entry == null) return null;\r", "-\t\t\t\t\tpaths.addElement(entry);\r", "+\t\t\t\t\t// exported flag\r", "+\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "+\r", "+\t\t\t\t\t// recreate the CP entry\r", "+\t\t\t\t\tswitch (kind) {\r", "+\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\tpaths.addElement(JavaCore.newProjectEntry(path, isExported));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\tpaths.addElement(JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\t// must be an entry in this project or specify another project\r", "+\t\t\t\t\t\t\tString projSegment = path.segment(0);\r", "+\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {\r", "+\t\t\t\t\t\t\t\t// this project\r", "+\t\t\t\t\t\t\t\tpaths.addElement(JavaCore.newSourceEntry(path));\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t// another project\r", "+\t\t\t\t\t\t\t\tpaths.addElement(JavaCore.newProjectEntry(path, isExported));\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :\r", "+\t\t\t\t\t\t\tpaths.addElement(JavaCore.newVariableEntry(\r", "+\t\t\t\t\t\t\t\t\tpath,\r", "+\t\t\t\t\t\t\t\t\tsourceAttachmentPath,\r", "+\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, \r", "+\t\t\t\t\t\t\t\t\tisExported));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\tpaths.addElement(new ClasspathEntry(\r", "+\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,\r", "+\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,\r", "+\t\t\t\t\t\t\t\t\tpath,\r", "+\t\t\t\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\t\t\t\tfalse));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "-\t\t\tIClasspathEntry[] ips= new IClasspathEntry[paths.size()];\r", "+\t\t\tIClasspathEntry[] ips = new IClasspathEntry[paths.size()];\r"]}], "num": 38151}
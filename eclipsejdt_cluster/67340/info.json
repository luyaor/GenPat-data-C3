{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2403835e105c64a736f14f0a19c1b671", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1abb9a8ecf00b2639834bd7086e74739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "5cc4b8c969b380e215352115b7cc4d2697d8011e", "commitAfterChange": "fef767ead34860def5c5969bff47bc76e721609d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "signatureAfterChange": "\r public TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "diff": ["-\r", "-\tTypeBinding elementTb = (expressions == null) ? scope.getJavaLangObject() : expressions[0].resolveType(scope);\r", "-\tif (elementTb != null) {\r", "-\t\tTypeBinding probableTb = scope.createArray(elementTb, 1);\r", "+\t\r", "+\t// infer initializer type for error reporting based on first element\r", "+\tTypeBinding leafElementType = null;\r", "+\tint dim = 1;\r", "+\tif (expressions == null) {\r", "+\t\tleafElementType = scope.getJavaLangObject();\r", "+\t} else {\r", "+\t\tExpression currentExpression = expressions[0];\r", "+\t\twhile(currentExpression != null && currentExpression instanceof ArrayInitializer) {\r", "+\t\t\tdim++;\r", "+\t\t\tcurrentExpression = ((ArrayInitializer) currentExpression).expressions[0];\r", "+\t\t}\r", "+\t\tleafElementType = currentExpression.resolveType(scope);\r", "+\t}\r", "+\tif (leafElementType != null) {\r", "+\t\tTypeBinding probableTb = scope.createArray(leafElementType, dim);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f009594e305b91a1b8497f4587c5879", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tTypeBinding castTypeBinding = type.resolveType(scope);", "-\t\t\tif(castTypeBinding == null)", "-\t\t\t\treturn null;", "-\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\t\tif (expressionTb == null)", "-\t\t\t\treturn null;", "-\t\t\tareTypesCastCompatible(scope, castTypeBinding, expressionTb);", "-\t\t\treturn this.expressionType = castTb = castTypeBinding;", "+\t\t\tthis.resolvedType = type.resolveType(scope);", "+\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "+\t\t\tif (this.resolvedType != null && castedExpressionType != null) {", "+\t\t\t\tareTypesCastCompatible(scope, this.resolvedType, castedExpressionType);", "+\t\t\t}", "+\t\t\treturn this.resolvedType;", "-\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\t\tif (expressionTb == null)", "-\t\t\t\treturn null;", "+\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "+\t\t\tif (castedExpressionType == null) return null;"]}], "num": 67340}
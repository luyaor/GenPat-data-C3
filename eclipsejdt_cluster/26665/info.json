{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4bf51b03009ba3cd9b7b558c760c0c2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277bb5a8b5085310e13a64a61752cfd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "b7295bb19a68269f09e5fdceeecf4f4c701e7063", "commitAfterChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test001e()", "signatureAfterChange": " public void test001e()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"import java.util.ArrayList;\\n\" +", "-\t\t\t\"public class X<T> {\" +", "-\t\t\t\"\tpublic void ab(ArrayList<T> al){\\n\" + ", "-\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\"\t\tX<String> x = new X<>();\\n\" + ", "-\t\t\t\"\t\tx.ab(new ArrayList<>());\\n\" + ", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tx.ab(new ArrayList<>());\\n\" + ", "-\t\t\"\t  ^^\\n\" + ", "-\t\t\"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\\n\" + ", "-\t\t\"----------\\n\");", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"public class X<T> {\" +", "+\t\t\t\t\"\tpublic void ab(ArrayList<T> al){\\n\" + ", "+\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tX<String> x = new X<>();\\n\" + ", "+\t\t\t\t\"\t\tx.ab(new ArrayList<>());\\n\" + ", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tx.ab(new ArrayList<>());\\n\" + ", "+\t\t\t\"\t  ^^\\n\" + ", "+\t\t\t\"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\t\"public class X<T> {\" +", "+\t\t\t\t\t\"\tpublic void ab(ArrayList<T> al){\\n\" + ", "+\t\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"\t\tX<String> x = new X<>();\\n\" + ", "+\t\t\t\t\t\"\t\tx.ab(new ArrayList<>());\\n\" + ", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\",", "+\t\t\t\t},", "+\t\t\t\t\"SUCCESS\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c74e98f4b793a397818268f256faad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "b7295bb19a68269f09e5fdceeecf4f4c701e7063", "commitAfterChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test007a()", "signatureAfterChange": " public void test007a()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\"\tpublic X(){\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\tpublic X(T param){\\n\" +", "-\t\t\t\"\t\tSystem.out.println(param);\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\tpublic static void testFunction(X<String> param){\\n\" +", "-\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\"\t\tX.testFunction(new X<>());\\n\" + ", "-\t\t\t\"\t\tX.testFunction(new X(\\\"hello\\\"));\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tX.testFunction(new X<>());\\n\" + ", "-\t\t\"\t  ^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method testFunction(X<String>) in the type X is not applicable for the arguments (X<Object>)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "-\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The constructor X(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "-\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<String>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "-\t\t\"\t                   ^\\n\" + ", "-\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\");", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\t\"\tpublic X(){\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic X(T param){\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(param);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void testFunction(X<String> param){\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tX.testFunction(new X<>());\\n\" + ", "+\t\t\t\t\"\t\tX.testFunction(new X(\\\"hello\\\"));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X<>());\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method testFunction(X<String>) in the type X is not applicable for the arguments (X<Object>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The constructor X(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\t\t\"\tpublic X(){\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"\tpublic X(T param){\\n\" +", "+\t\t\t\t\t\"\t\tSystem.out.println(param);\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"\tpublic static void testFunction(X<String> param){\\n\" +", "+\t\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"\t\tX.testFunction(new X<>());\\n\" + ", "+\t\t\t\t\t\"\t\tX.testFunction(new X(\\\"hello\\\"));\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\",", "+\t\t\t\t},", "+\t\t\t\t\"SUCCESS\\n\" + ", "+\t\t\t\t\"hello\\n\" + ", "+\t\t\t\t\"SUCCESS\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68c79f21d07c73a3e5b361a5de674066", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "b7295bb19a68269f09e5fdceeecf4f4c701e7063", "commitAfterChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test001d()", "signatureAfterChange": " public void test001d()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"import java.util.ArrayList;\\n\" +", "-\t\t\t\"public class X<T> {\" +", "-\t\t\t\"\tpublic void ab(ArrayList<String> al){\\n\" + ", "-\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\"\t\tX<String> x = new X<>();\\n\" + ", "-\t\t\t\"\t\tx.ab(new ArrayList<>());\\n\" + ", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tx.ab(new ArrayList<>());\\n\" + ", "-\t\t\"\t  ^^\\n\" + ", "-\t\t\"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\\n\" + ", "-\t\t\"----------\\n\");", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"public class X<T> {\" +", "+\t\t\t\t\"\tpublic void ab(ArrayList<String> al){\\n\" + ", "+\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tX<String> x = new X<>();\\n\" + ", "+\t\t\t\t\"\t\tx.ab(new ArrayList<>());\\n\" + ", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tx.ab(new ArrayList<>());\\n\" + ", "+\t\t\t\"\t  ^^\\n\" + ", "+\t\t\t\"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\t\"public class X<T> {\" +", "+\t\t\t\t\t\"\tpublic void ab(ArrayList<String> al){\\n\" + ", "+\t\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"\t\tX<String> x = new X<>();\\n\" + ", "+\t\t\t\t\t\"\t\tx.ab(new ArrayList<>());\\n\" + ", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\",", "+\t\t\t\t},", "+\t\t\t\t\"SUCCESS\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68cc02cc627cefb7258c603c99902fbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "commitAfterChange": "0bcd341ea781d3ca9f30d724e6161bfab2161b14", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void _test0021()", "signatureAfterChange": " public void test0021()", "diff": ["-public void _test0021() {", "-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"import java.util.List;\\n\" +", "-\t\t\t\"import java.util.ArrayList;\\n\" +", "-\t\t\t\"class X<T> {\\n\" +", "-\t\t\t\"  public X(T t) {}\\n\" +", "-\t\t\t\"  int f(List<String> p) {return 0;}\\n\" +", "-\t\t\t\"  int x = f(new ArrayList<>());\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tint x = f(new ArrayList<>());\\n\" + ", "-\t\t\"\t        ^\\n\" + ", "-\t\t\"The method f(List<String>) in the type X<T> is not applicable for the arguments (ArrayList<Object>)\\n\" + ", "-\t\t\"----------\\n\");", "+public void test0021() {", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"class X<T> {\\n\" +", "+\t\t\t\t\"  public X(T t) {}\\n\" +", "+\t\t\t\t\"  int f(List<String> p) {return 0;}\\n\" +", "+\t\t\t\t\"  int x = f(new ArrayList<>());\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tint x = f(new ArrayList<>());\\n\" + ", "+\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\"The method f(List<String>) in the type X<T> is not applicable for the arguments (ArrayList<Object>)\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\t\"class X<T> {\\n\" +", "+\t\t\t\t\t\"  public X(T t) {}\\n\" +", "+\t\t\t\t\t\"  int f(List<String> p) {return 0;}\\n\" +", "+\t\t\t\t\t\"  int x = f(new ArrayList<>());\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t},", "+\t\t\t\t\"\");", "+\t}"]}], "num": 26665}
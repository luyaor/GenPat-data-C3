{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fa1e58c8d20e163a186e7408faf6fb1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4be807bf1ced9299ade3fab0d4162315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "aba5db418de65ea21899bfdf893833cd0fc3f586", "commitAfterChange": "7aba284c4ea53048ed9ad4ccc85fef0f7294903a", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " private IBinaryType[] processClassNames(FileSystem environment) throws InvalidInputException", "signatureAfterChange": " private ReferenceBinding[] processClassNames(LookupEnvironment environment) throws InvalidInputException", "diff": ["-private IBinaryType[] processClassNames(FileSystem environment) throws InvalidInputException {", "+private ReferenceBinding[] processClassNames(LookupEnvironment environment) throws InvalidInputException {", "-\tIBinaryType[] binaryTypes = new IBinaryType[length];", "+\tReferenceBinding[] referenceBindings = new ReferenceBinding[length];", "-\t\tNameEnvironmentAnswer type = environment.findType(compoundName, true);", "-\t\tif (type != null) {", "-\t\t\tbinaryTypes[i] = type.getBinaryType();", "+\t\tReferenceBinding type = environment.getType(compoundName);", "+\t\tif (type != null && type.isValidBinding()) {", "+\t\t\tif (type.isBinaryBinding()) {", "+\t\t\t\treferenceBindings[i] = type;", "+\t\t\t}", "-\t\t\t\tthis.bind(\"configure.invalidClassName\", currentName));//$NON-NLS-1$", "+\t\t\t\t\tthis.bind(\"configure.invalidClassName\", currentName));//$NON-NLS-1$", "-\treturn binaryTypes;", "+\treturn referenceBindings;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e189f4ae227368a130574a9da7eb52de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/PackageElementImpl.java", "commitBeforeChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "commitAfterChange": "c06cfa4791f8eb98381a7dd55dd6950dbcddf37c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic List<? extends Element> getEnclosedElements()", "signatureAfterChange": "  \t@Override \tpublic List<? extends Element> getEnclosedElements()", "diff": ["-\t\t//PackageBinding binding = (PackageBinding)_binding;", "-\t\tthrow new UnsupportedOperationException(\"NYI\"); //$NON-NLS-1$", "+\t\tPackageBinding binding = (PackageBinding)_binding;", "+\t\tLookupEnvironment environment = binding.environment;", "+\t\tchar[][][] typeNames = null;", "+\t\tINameEnvironment nameEnvironment = binding.environment.nameEnvironment;", "+\t\tif (nameEnvironment instanceof FileSystem) {", "+\t\t\ttypeNames = ((FileSystem) nameEnvironment).findTypeNames(binding.compoundName);", "+\t\t}", "+\t\tHashSet<Element> set = new HashSet<Element>(); ", "+\t\tif (typeNames != null) {", "+\t\t\tfor (char[][] typeName : typeNames) {", "+\t\t\t\tReferenceBinding type = environment.getType(typeName);", "+\t\t\t\tif (type != null && type.isValidBinding()) {", "+\t\t\t\t\tset.add(Factory.newElement(type));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tArrayList<Element> list = new ArrayList<Element>(set.size());", "+\t\tlist.addAll(set);", "+\t\treturn Collections.unmodifiableList(list);"]}], "num": 26442}
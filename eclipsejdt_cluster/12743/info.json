{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e4a1dc984b1aee0370aa9fad0a7d88b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c96f90d842bfa34ca48345be48827b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b62a0575eabeb814900afcc3426a14b0da5fd6ad", "commitAfterChange": "fa4debd5be46821e4afe7fa2082f7a976e89007c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "signatureAfterChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "diff": ["-\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\tif (existingType instanceof TypeVariableBinding) {", "+\t\t\t\t// let type-use annotations override annotations on the type parameter declaration", "+\t\t\t\texistingType = existingType.unannotated(true);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d40bada81fe7faaf74558e194f131b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "ace108615263b01931242378e06fb0fb6d2dd631", "commitAfterChange": "b0c7a53ad3892a1d7f6f5f34fe1644b3c994a679", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate TextEdit formatNode(ASTNode node, String str, int indentationLevel)", "signatureAfterChange": " \tprivate TextEdit formatNode(ASTNode node, String str, int indentationLevel)", "diff": ["-\t\t\tcode= CodeFormatter.K_EXPRESSION;", "+\t\t\tif (node instanceof Annotation) {", "+\t\t\t\tsuffix= \"\\nclass A {}\"; //$NON-NLS-1$", "+\t\t\t\tcode= CodeFormatter.K_COMPILATION_UNIT;", "+\t\t\t} else {", "+\t\t\t\tcode= CodeFormatter.K_EXPRESSION;", "+\t\t\t}"]}], "num": 12743}
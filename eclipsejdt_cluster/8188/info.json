{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1020528fe7038f31000318317a0bfedf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f2a5b6a149a4126abd5406facdb2988", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "3d9dfcf2d4683f81f20b400a02d628c05183bbef", "commitAfterChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void finalizeProblems()", "signatureAfterChange": "  public void finalizeProblems()", "diff": ["+\t\tint irritant = ProblemReporter.getIrritant(problemID);", "-\t\t\t// tolerate unused warning tokens which were promoted as errors", "+\t\t\t\t// tolerate unused warning tokens which were promoted as errors", "-\t\t\tcontinue;", "+\t\t\tif (irritant == 0 || !options.suppressOptionalErrors) {", "+\t\t\t\tcontinue;", "+\t\t\t}", "-\t\tint irritant = ProblemReporter.getIrritant(problemID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d68604554f63821efcba034f1d7fb248", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void finalizeProblems()", "signatureAfterChange": "  public void finalizeProblems()", "diff": ["-\tboolean hasErrors = false;", "+\tboolean hasMandatoryErrors = false;", "-\t\t\tif (problemID != IProblem.UnusedWarningToken) {", "-\t\t\t\t// tolerate unused warning tokens which were promoted as errors", "-\t\t\t\thasErrors = true;", "+\t\t\tif (irritant == 0) {", "+\t\t\t\t// tolerate unused warning tokens when mandatory errors", "+\t\t\t\thasMandatoryErrors = true;", "+\t\t\t\tcontinue;", "-\t\t\tif (irritant == 0 || !options.suppressOptionalErrors) {", "+\t\t\tif (!options.suppressOptionalErrors) {", "-\tif (!hasErrors) {", "+\tif (!hasMandatoryErrors) {"]}], "num": 8188}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f349a23af4596e8d906b841db5489dc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fedc147cb620d6c044336d7cb85b727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "11ac720cf12c89391a32ed5e56750070174f7f3f", "commitAfterChange": "c35f48a470f9475e0b73c6c14c2a26ca2378ab58", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "diff": ["-\t\tLambdaExpression copy = copy();", "-\t\tcopy.setExpressionContext(this.expressionContext);", "-\t\tcopy.setExpectedType(left);", "-\t\tcopy.resolveType(this.enclosingScope);", "-\t\t", "-\t\tif (!argumentsTypeElided()) {", "-\t\t\tfor (int i = 0, length = sam.parameters.length; i < length; i++) {", "-\t\t\t\tTypeBinding argumentType = copy.arguments[i].binding.type;", "-\t\t\t\tif (sam.parameters[i] != argumentType)", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-", "+\t\tIErrorHandlingPolicy oldPolicy = this.scope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);", "-\t\t\tfinal TypeBinding returnType = sam.returnType;", "-\t\t\tif (this.body instanceof Block) {", "-\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "+\t\t\tLambdaExpression copy = copy();", "+\t\t\tcopy.setExpressionContext(this.expressionContext);", "+\t\t\tcopy.setExpectedType(left);", "+\t\t\tcopy.resolveType(this.enclosingScope);", "+", "+\t\t\tif (!argumentsTypeElided()) {", "+\t\t\t\tfor (int i = 0, length = sam.parameters.length; i < length; i++) {", "+\t\t\t\t\tTypeBinding argumentType = copy.arguments[i].binding.type;", "+\t\t\t\t\tif (sam.parameters[i] != argumentType)", "-\t\t\t\t\t}", "-\t\t\t\t};", "-\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "-\t\t\t} else {", "-\t\t\t\tExpression expression = (Expression) copy.body;", "-\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "-\t\t\t\t\tthrow new NoncongruentLambdaException();", "+\t\t\t\t}", "-\t\t} catch (NoncongruentLambdaException e) {", "-\t\t\treturn false;", "+", "+\t\t\ttry {", "+\t\t\t\tfinal TypeBinding returnType = sam.returnType;", "+\t\t\t\tif (this.body instanceof Block) {", "+\t\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "+\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "+\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "+\t\t\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t};", "+\t\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "+\t\t\t\t} else {", "+\t\t\t\t\tExpression expression = (Expression) copy.body;", "+\t\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "+\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "+\t\t\t\t}", "+\t\t\t} catch (NoncongruentLambdaException e) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.scope.problemReporter().switchErrorHandlingPolicy(oldPolicy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a96683a3e3755b1a84d644b1597e88e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "diff": ["+\t", "-\t\tif (this.shapeAnalysisComplete && squarePegInRoundHole(sam))", "-\t\t\treturn false;", "-\t\t", "+", "+\t\t\tif (this.shapeAnalysisComplete) {", "+\t\t\t\tif (squarePegInRoundHole(sam))", "+\t\t\t\t\treturn false;", "+\t\t\t} else {", "+\t\t\t\tLambdaExpression copy = copy();", "+\t\t\t\tcopy.setExpressionContext(this.expressionContext);", "+\t\t\t\tcopy.setExpectedType(left);", "+\t\t\t\tcopy.resolveType(this.enclosingScope);", "+\t\t\t\tthis.valueCompatible = copy.valueCompatible = copy.doesNotCompleteNormally();", "+\t\t\t\tthis.shapeAnalysisComplete = copy.shapeAnalysisComplete = true;", "+\t\t\t\tif (squarePegInRoundHole(sam))", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t", "-\t\t\tif (!this.shapeAnalysisComplete) {", "-\t\t\t\tthis.valueCompatible = copy.doesNotCompleteNormally();", "-\t\t\t\tthis.shapeAnalysisComplete = true;", "-\t\t\t\tif (squarePegInRoundHole(sam))", "-\t\t\t\t\treturn false;", "-\t\t\t}", "+\t\t\t", "-\t\t\ttry {", "-\t\t\t\tfinal TypeBinding returnType = sam.returnType;", "-\t\t\t\tif (this.body instanceof Block) {", "-\t\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t};", "-\t\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "-\t\t\t\t} else {", "-\t\t\t\t\tExpression expression = (Expression) copy.body;", "-\t\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "-\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "-\t\t\t\t}", "-\t\t\t} catch (NoncongruentLambdaException e) {", "-\t\t\t\treturn false;", "+\t\t\tfinal TypeBinding returnType = sam.returnType;", "+\t\t\tif (this.body instanceof Block) {", "+\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "+\t\t\t\t\t\tExpression expression = returnStatement.expression;", "+\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "+\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t};", "+\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "+\t\t\t} else {", "+\t\t\t\tExpression expression = (Expression) copy.body;", "+\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "+\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t ", "+\t\t} catch (IncongruentLambdaException e) {", "+\t\t\treturn false;"]}], "num": 29370}
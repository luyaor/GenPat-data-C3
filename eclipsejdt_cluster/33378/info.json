{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dccb2ce7ebd26edc58fa8843d8472c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21b56e12c9c22543e9fe1890de3cf386", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "ace2b01a750ae327ae916d483eb40818f9a677bc", "commitAfterChange": "9c4b0a6288e6d880b6e314a0c477538374a92e62", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "diff": ["-\t\t\tif (coverageTestFlag && coverageTestId == 15) {", "-\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\tif (COVERAGE_TEST_FLAG) {", "+\t\t\t\tif (CoverageTestId == 15) {", "+\t\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\t\t}", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 16) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 16\"); //$NON-NLS-1$", "+\t\t\t\tif (COVERAGE_TEST_FLAG) {", "+\t\t\t\t\tif (CoverageTestId == 16) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 16\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 17) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 17\"); //$NON-NLS-1$", "+\t\t\t\t\tif (COVERAGE_TEST_FLAG) {", "+\t\t\t\t\t\tif (CoverageTestId == 17) {", "+\t\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 17\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "-\t\t\tif (coverageTestFlag && coverageTestId == 18) {", "-\t\t\t  \tthis.extra[5][vectorIndex] = ~0;", "+\t\t\tif (COVERAGE_TEST_FLAG) {", "+\t\t\t\tif (CoverageTestId == 18) {", "+\t\t\t\t  \tthis.extra[5][vectorIndex] = ~0;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4482f596273cc0762cd649888e6d7895", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "509b5d0893b6487ed9d9f869674ce451a529a2e9", "commitAfterChange": "fe90b8dc2ad912f6469c4bf76947d5468c18045b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729bdd3ff6cdd464141a5b135ae0550b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "ace2b01a750ae327ae916d483eb40818f9a677bc", "commitAfterChange": "9c4b0a6288e6d880b6e314a0c477538374a92e62", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  public void markAsComparedEqualToNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNull(LocalVariableBinding local)", "diff": ["-\t\t\tif (coverageTestFlag && coverageTestId == 19) {", "-\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\tif (COVERAGE_TEST_FLAG) {", "+\t\t\t\tif (CoverageTestId == 19) {", "+\t\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\t\t}", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 20) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 20\"); //$NON-NLS-1$", "+\t\t\t\tif (COVERAGE_TEST_FLAG) {", "+\t\t\t\t\tif(CoverageTestId == 20) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 20\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 21) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "+\t\t\t\t\tif (COVERAGE_TEST_FLAG) {", "+\t\t\t\t\t\tif(CoverageTestId == 21) {", "+\t\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}"]}], "num": 33378}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "190cd0e28ca3e0a9af306d74d9e153b5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d42df040a30a46affc358d8981cabc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["+\t\tfinal boolean isDiamond = (this.bits & ASTNode.IsDiamond) != 0;", "-\t\t} else if (argLength != typeVariables.length) { // check arity", "-\t\t\tscope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes);", "-\t\t\treturn null;", "+\t\t} else if (argLength != typeVariables.length) {", "+\t\t\tif (!isDiamond) { // check arity, IsDiamond never set for 1.6-", "+\t\t\t\tscope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes);", "+\t\t\t\treturn null;", "+\t\t\t} ", "-\t\t// check argument type compatibility", "-\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-\t\t\tparameterizedType.boundCheck(scope, this.typeArguments);", "-\t\telse", "-\t\t\tscope.deferBoundCheck(this);", "+\t\t// check argument type compatibility for non <> cases - <> case needs no bounds check, we will scream foul if needed during inference.", "+    \tif (!isDiamond) {", "+    \t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "+    \t\t\tparameterizedType.boundCheck(scope, this.typeArguments);", "+    \t\telse", "+    \t\t\tscope.deferBoundCheck(this);", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37310be9a769ff47193e6368a1c8cc66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, boolean checkBounds)", "diff": ["+\t\t\t\tboolean isDiamond = argLength == 0 && (i == (max -1)) && ((this.bits & ASTNode.IsDiamond) != 0);", "-\t\t\t\t} else if (argLength != typeVariables.length) { // check arity", "-\t\t\t\t\tscope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes, i);", "-\t\t\t\t\treturn null;", "+\t\t\t\t} else if (argLength != typeVariables.length) {", "+\t\t\t\t\tif (!isDiamond) { // check arity", "+\t\t\t\t\t\tscope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes, i);", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "-\t\t\t\t// check argument type compatibility", "-\t\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-\t\t\t\t\tparameterizedType.boundCheck(scope, args);", "-\t\t\t\telse", "-\t\t\t\t\tscope.deferBoundCheck(this);", "+\t\t\t\t// check argument type compatibility for non <> cases - <> case needs no bounds check, we will scream foul if needed during inference.", "+\t\t\t\tif (!isDiamond) {", "+\t\t\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "+\t\t\t\t\t\tparameterizedType.boundCheck(scope, args);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tscope.deferBoundCheck(this);", "+\t\t\t\t}"]}], "num": 462}
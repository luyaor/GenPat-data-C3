{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ab9da26e7cf77577bf55de7e7750880", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8b60f4119c1dae7cd457966a346f0ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "72398fb1bfc9de8f8d1c235c08849e28d61cb9f4", "commitAfterChange": "a52f17f8883dd812875c341ff752527a9011d961", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t\t/* At this point, shape analysis is complete for ((see returnsExpression(...))", "+\t\t       - a lambda with an expression body,", "+\t\t\t   - a lambda with a block body in which we saw a return statement naked or otherwise.", "+\t\t    */", "+\t\t\tif (!this.returnsVoid && !this.returnsValue)", "+\t\t\t\tthis.valueCompatible = this.body.doesNotCompleteNormally();", "-\t\treturn this.resolvedType;", "+\t\treturn argumentsHaveErrors ? this.resolvedType = null : this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab5a5cfb0d5265188ffc543c18a6be8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Block.java", "commitBeforeChange": "593b7c498e35f1adb3620eff493d0f4b5e771b68", "commitAfterChange": "3b34d278ba258a10a58d188a2047da908229b941", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " @Override public boolean doesNotCompleteNormally()", "signatureAfterChange": " @Override public boolean doesNotCompleteNormally()", "diff": ["+// A block does not complete normally if the last statement which we presume is reachable does not complete normally.", "-\treturn this.statements != null && this.statements.length > 0 && this.statements[this.statements.length - 1].doesNotCompleteNormally();", "+\tint length = this.statements == null ? 0 : this.statements.length;", "+\treturn length > 0 && this.statements[length - 1].doesNotCompleteNormally();", "+}"]}], "num": 67862}
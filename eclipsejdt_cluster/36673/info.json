{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46e3350a4917d212b62881b4d15c15c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f79e7368e4099a52fa322a2e5ccde7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "b0ed9775bd672a6cdd2a9755c91f2e8d8e0a488b", "commitAfterChange": "9abb40494c6d8c30a6d0001b8234cdbd90e8e943", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate void checkAndSetModifiers()", "signatureAfterChange": " \t \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\tif (enclosingType.isDeprecated())", "+\t\t\tif (enclosingType.isViewedAsDeprecated() && !sourceType.isDeprecated())", "-\t\t\tif (sourceType.isAnonymousType())", "-\t\t\t\tmodifiers |= AccFinal;", "-\t\t\tReferenceContext refContext = methodScope().referenceContext;", "+\t\t\tif (sourceType.isAnonymousType()) ", "+\t\t\t    modifiers |= AccFinal;", "+\t\t\tMethodScope methodScope = methodScope();", "+\t\t\tReferenceContext refContext = methodScope.referenceContext;", "-\t\t\t\tReferenceBinding type = ((TypeDeclaration) refContext).binding;", "-\t\t\t\tif (type.isStrictfp())", "-\t\t\t\t\tmodifiers |= AccStrictfp;", "-\t\t\t\tif (type.isDeprecated())", "-\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\t\t    ", "+\t\t\t\tSourceTypeBinding type = ((TypeDeclaration) refContext).binding;", "+", "+\t\t\t\t// inside field declaration ? check field modifier to see if deprecated", "+\t\t\t\tif (methodScope.fieldDeclarationIndex != MethodScope.NotInFieldDecl) {", "+\t\t\t\t\tfor (int i = 0; i < type.fields.length; i++){", "+\t\t\t\t\t    FieldBinding field = type.fields[i];", "+\t\t\t\t\t\tif (field.id == methodScope.fieldDeclarationIndex) {", "+\t\t\t\t\t\t\t// currently inside this field initialization", "+\t\t\t\t\t\t\tif (field.isViewedAsDeprecated() && !sourceType.isDeprecated()){", "+\t\t\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (type.isStrictfp())", "+\t\t\t\t\t\tmodifiers |= AccStrictfp;", "+\t\t\t\t\tif (type.isViewedAsDeprecated() && !sourceType.isDeprecated()) ", "+\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\tif (method.isDeprecated())", "+\t\t\t\t\tif (method.isViewedAsDeprecated() && !sourceType.isDeprecated())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cda237cbb2cfaa25b4dde5d2dd200b2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a53da0027d2af09b928dca6fa330419b46afa0ca", "commitAfterChange": "792caf681810140ce615d98d3abfdde62639719c", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "signatureAfterChange": "  \tpublic boolean validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "diff": ["-\tpublic void validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations) {", "+\tpublic boolean validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations) {", "-\t\t\t\tproblemReporter().illegalAnnotationForBaseType(typeRef, annotations, nullAnnotationTagBit);", "+\t\t\t\t// type annotations are *always* illegal for 'void' (already reported)", "+\t\t\t\tif (!(typeRef.resolvedType.id == TypeIds.T_void && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8))", "+\t\t\t\t\tproblemReporter().illegalAnnotationForBaseType(typeRef, annotations, nullAnnotationTagBit);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (annotations != null && typeRef instanceof QualifiedTypeReference) {", "+\t\t\t\t// illegal @NonNull Outer.Inner:", "+\t\t\t\tfor (int i = 0; i < annotations.length; i++) {", "+\t\t\t\t\tint id = annotations[i].resolvedType.id;", "+\t\t\t\t\tif (id == TypeIds.T_ConfiguredAnnotationNonNull || id == TypeIds.T_ConfiguredAnnotationNullable) {", "+\t\t\t\t\t\tproblemReporter().nullAnnotationUnsupportedLocation(annotations[i]);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80e7ceee11ea445c50a3c986ecca642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes)", "signatureAfterChange": " private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes)", "diff": ["-\tif (includeLocalTypes && parsedUnit.localTypes != null) {", "-\t\tHandleFactory factory = new HandleFactory();", "-\t\tHashSet existingElements = new HashSet(parsedUnit.localTypeCount);", "-\t\tHashMap knownScopes = new HashMap(parsedUnit.localTypeCount);", "+\tif (!includeLocalTypes || (parsedUnit.localTypes == null && parsedUnit.functionalExpressions == null))", "+\t\treturn;", "+\t", "+\tHandleFactory factory = new HandleFactory();", "+\tHashSet existingElements = new HashSet(parsedUnit.localTypeCount + parsedUnit.functionalExpressionsCount);", "+\tHashMap knownScopes = new HashMap(parsedUnit.localTypeCount + parsedUnit.functionalExpressionsCount);", "+\t", "+\tif (parsedUnit.localTypes != null) {", "+\t\t}", "+\t}", "+\tif (parsedUnit.functionalExpressions != null) {", "+\t\tfor (int i = 0; i < parsedUnit.functionalExpressionsCount; i++) {", "+\t\t\tif (parsedUnit.functionalExpressions[i] instanceof LambdaExpression) {", "+\t\t\t\tfinal LambdaExpression expression = (LambdaExpression) parsedUnit.functionalExpressions[i];", "+\t\t\t\tIType typeHandle = (IType)factory.createLambdaTypeElement(expression, cu, existingElements, knownScopes);", "+\t\t\t\tremember(typeHandle, expression.getTypeBinding());", "+\t\t\t}"]}], "num": 36673}
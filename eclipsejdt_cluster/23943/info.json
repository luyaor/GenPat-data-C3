{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff51b35ec3d3816ad5b69329b94b55c5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7194702123257f2e89b53e0524e420fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "diff": ["-\t\t\t\t\t\tif (capturedWildcardBound.isArrayType() || capturedWildcardBound == this) {", "+\t\t\t\t\t\tif (capturedWildcardBound.isArrayType() || TypeBinding.equalsEquals(capturedWildcardBound, this)) {", "-\t\tif (substitutedVariableSuperclass == this) substitutedVariableSuperclass = originalVariableSuperclass;", "+\t\tif (TypeBinding.equalsEquals(substitutedVariableSuperclass, this)) substitutedVariableSuperclass = originalVariableSuperclass;", "-\t\t\t\tif (substitutedVariableInterfaces[i] == this) substitutedVariableInterfaces[i] = originalVariableInterfaces[i];", "+\t\t\t\tif (TypeBinding.equalsEquals(substitutedVariableInterfaces[i], this)) substitutedVariableInterfaces[i] = originalVariableInterfaces[i];", "-\t\t\t\t\tif (capturedWildcardBound.isArrayType() || capturedWildcardBound == this) {", "+\t\t\t\t\tif (capturedWildcardBound.isArrayType() || TypeBinding.equalsEquals(capturedWildcardBound, this)) {", "-\t\t\t\tif (wildcardVariable.firstBound == substitutedVariableSuperclass || originalWildcardBound == substitutedVariableSuperclass) {", "+\t\t\t\tif (TypeBinding.equalsEquals(wildcardVariable.firstBound, substitutedVariableSuperclass) || TypeBinding.equalsEquals(originalWildcardBound, substitutedVariableSuperclass)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a217cc55d3854f9fdad82a2eb40bc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "e0224da700606ee4894293f10b71bd4b6b9d30f5", "commitAfterChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int position)", "signatureAfterChange": " \t \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int position)", "diff": ["-\t\tTypeVariableBinding wildcardVariable = wildcard.typeVariable();", "-\t\tswitch (wildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\tthis.superclass = wildcard.superclass();", "-\t\t\t\tthis.firstBound = wildcard.bound;", "-\t\t\t\tReferenceBinding[] wildcardInterfaces = wildcard.superInterfaces();", "-\t\t\t\tif (wildcardInterfaces == NoSuperInterfaces) {", "-\t\t\t\t\tthis.superInterfaces = NoSuperInterfaces;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.superInterfaces = Scope.greaterLowerBound(wildcardInterfaces);", "-\t\t\t\t}", "-\t\t\t\tif ((wildcard.bound.tagBits & HasTypeVariable) == 0)", "-\t\t\t\t\tthis.tagBits &= ~HasTypeVariable;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\tthis.superclass = wildcardVariable.superclass();", "-\t\t\t\tthis.superInterfaces = wildcardVariable.superInterfaces();", "-\t\t\t\tthis.tagBits &= ~HasTypeVariable;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.SUPER :", "-\t\t\t\tthis.superclass = wildcardVariable.superclass();", "-\t\t\t\tif (wildcardVariable.firstBound == this.superclass || wildcard.bound == this.superclass) {", "-\t\t\t\t\tthis.firstBound = this.superclass;", "-\t\t\t\t}", "-\t\t\t\tthis.superInterfaces = wildcardVariable.superInterfaces();", "-\t\t\t\tthis.lowerBound = wildcard.bound;", "-\t\t\t\tif ((wildcard.bound.tagBits & HasTypeVariable) == 0)", "-\t\t\t\t\tthis.tagBits &= ~HasTypeVariable;", "-\t\t\t\tbreak;", "-\t\t}"]}], "num": 23943}
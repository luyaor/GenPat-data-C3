{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6639c4d1e488081832b64aaa128f1e93", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35f76c8cefebe321a8ca68b11651efdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f8e9cc8d760d40e7aca97ebb627c5ab02392d804", "commitAfterChange": "78ca28be54dd37f4936afd7f9f84bc9cf69d2754", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "signatureAfterChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "diff": ["-\t\t\t\t\t\tparameters.clear();", "-\t\t\t\t\t\tparameters.put(COMPILER_NAME, Main.bind(\"compiler.name\")); //$NON-NLS-1$", "-\t\t\t\t\t\tparameters.put(COMPILER_VERSION, Main.bind(\"compiler.version\")); //$NON-NLS-1$", "-\t\t\t\t\t\tparameters.put(COMPILER_COPYRIGHT, Main.bind(\"compiler.copyright\")); //$NON-NLS-1$", "-\t\t\t\t\t\tthis.printTag(COMPILER, parameters, true, false);", "+\t\t\t\t\t\tthis.parameters.clear();", "+\t\t\t\t\t\tthis.parameters.put(COMPILER_NAME, Main.bind(\"compiler.name\")); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.parameters.put(COMPILER_VERSION, Main.bind(\"compiler.version\")); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.parameters.put(COMPILER_COPYRIGHT, Main.bind(\"compiler.copyright\")); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.printTag(COMPILER, this.parameters, true, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e48ee006c44cbb7e11a1d0dc750f5db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "36ef129881167aaca524bd32a5aa2c4e26ffd187", "commitAfterChange": "19b7207c9f9b8245eee7ba353b5eb784e8fb1b81", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void acceptQualifiedTypes()", "signatureAfterChange": "  \tprivate void acceptQualifiedTypes()", "diff": ["-\t\t\tacceptedAnswer = true;", "+\t\t\tthis.acceptedAnswer = true;", "-\t\t\t\trequestor.acceptClass(", "+\t\t\t\tthis.requestor.acceptClass(", "-\t\t\tacceptedAnswer = true;", "+\t\t\tthis.acceptedAnswer = true;", "-\t\t\t\trequestor.acceptInterface(", "+\t\t\t\tthis.requestor.acceptInterface("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6619272e2f7f6f58e4ad135513d31dfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tif (this.codegenBinding.canBeSeenBy(receiverType, this, currentScope)) {", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aacc67c9b4f811e1801cea0273c87f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["+", "+public void resolve(BlockScope scope) {", "+\tTypeBinding type = this.condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);", "+\tthis.condition.computeConversion(scope, type, type);", "+\tif (this.action != null)", "+\t\tthis.action.resolve(scope);", "+}", "-\tpublic void resolve(BlockScope scope) {", "-", "-\t\tTypeBinding type = condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);", "-\t\tcondition.computeConversion(scope, type, type);", "-\t\tif (action != null)", "-\t\t\taction.resolve(scope);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77f06ed614007e4eb75cac4657d416d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void preVisit(ASTNode node)", "signatureAfterChange": " \tpublic void preVisit(ASTNode node)", "diff": ["-\t\tCopySourceInfo[] infos= fEventStore.getNodeCopySources(node);", "-\t\tdoCopySourcePreVisit(infos, fSourceCopyEndNodes);", "+\t\tCopySourceInfo[] infos= this.eventStore.getNodeCopySources(node);", "+\t\tdoCopySourcePreVisit(infos, this.sourceCopyEndNodes);", "-\t\tTextEditGroup editGroup= fEventStore.getTrackedNodeData(node);", "+\t\tTextEditGroup editGroup= this.eventStore.getTrackedNodeData(node);", "-\t\t\tfCurrentEdit= edit;", "+\t\t\tthis.currentEdit= edit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a678d18095c0370cce11b0bf64ece7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\tif (statements != null) {", "-\t\t\tfor (int i = 0, length = statements.length; i < length; i++) {", "-\t\t\t\tstatements[i].resolve(scope);", "+\t\tif (this.statements != null) {", "+\t\t\tfor (int i = 0, length = this.statements.length; i < length; i++) {", "+\t\t\t\tthis.statements[i].resolve(this.scope);", "-\t\t\tscope.problemReporter().undocumentedEmptyBlock(this.bodyStart-1, this.bodyEnd+1);", "+\t\t\tthis.scope.problemReporter().undocumentedEmptyBlock(this.bodyStart-1, this.bodyEnd+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90a0596f5536e1480f42beddc621603f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "f4fc58ef48a6d9d6c398d56576d18d3e70e62c86", "commitAfterChange": "6537a24c88f25f9b49763273df663f64d4b48580", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public boolean isPackage(char[][] compoundName, char[] packageName)", "signatureAfterChange": " public boolean isPackage(char[][] compoundName, char[] packageName)", "diff": ["-\t\tfor (int i = 0, length = classpaths.length; i < length; i++)", "-\t\t\tif (classpaths[i].isPackage(qualifiedPackageName))", "+\t\tfor (int i = 0, length = this.classpaths.length; i < length; i++)", "+\t\t\tif (this.classpaths[i].isPackage(qualifiedPackageName))", "-\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {", "-\t\t\tClasspath p = classpaths[i];", "+\t\tfor (int i = 0, length = this.classpaths.length; i < length; i++) {", "+\t\t\tClasspath p = this.classpaths[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a29dd0c88aec383656c9ae916a6bdc53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \t\tpublic void elementChanged(ElementChangedEvent ev)", "signatureAfterChange": " \t \t\tpublic void elementChanged(ElementChangedEvent ev)", "diff": ["-\t\t\tIJavaElementDelta[] copy= new IJavaElementDelta[deltas.length + 1];", "-\t\t\tSystem.arraycopy(deltas, 0, copy, 0, deltas.length);", "-\t\t\tcopy[deltas.length]= ev.getDelta();", "-\t\t\tdeltas= copy;", "+\t\t\tIJavaElementDelta[] copy= new IJavaElementDelta[this.deltas.length + 1];", "+\t\t\tSystem.arraycopy(this.deltas, 0, copy, 0, this.deltas.length);", "+\t\t\tcopy[this.deltas.length]= ev.getDelta();", "+\t\t\tthis.deltas= copy;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1d27632d5f3fd1f0e7130ad99980f64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "7daf62bc284b30571754ce8d7fd5c3a7c9740dcb", "commitAfterChange": "b8c9923212bd9598e5d2ca68e0dc316b81a3eccb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void reset()", "signatureAfterChange": " \tpublic void reset()", "diff": ["-\t\t\tprocessingThread = new Thread(this, this.processName());", "-\t\t\tprocessingThread.setDaemon(true);", "+\t\t\tthis.processingThread = new Thread(this, this.processName());", "+\t\t\tthis.processingThread.setDaemon(true);", "-\t\t\tprocessingThread.setPriority(Thread.NORM_PRIORITY-1); ", "-\t\t\tprocessingThread.start();", "+\t\t\tthis.processingThread.setPriority(Thread.NORM_PRIORITY-1); ", "+\t\t\tthis.processingThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5a77aab503ac541aad4d42dfa691f55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "b0acd443a36e322f7afa5778ad381a3437727af2", "commitAfterChange": "342a0847eab95d8ca2e8608616a2c691828b55df", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " protected void removeAffectedChild(JavaElementDelta child)", "signatureAfterChange": " protected void removeAffectedChild(JavaElementDelta child)", "diff": ["-\tif (fAffectedChildren != null) {", "-\t\tfor (int i = 0; i < fAffectedChildren.length; i++) {", "-\t\t\tif (this.equalsAndSameParent(fAffectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project", "+\tif (this.affectedChildren != null) {", "+\t\tfor (int i = 0; i < this.affectedChildren.length; i++) {", "+\t\t\tif (this.equalsAndSameParent(this.affectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project", "-\t\tfAffectedChildren= removeAndShrinkArray(fAffectedChildren, index);", "+\t\tthis.affectedChildren= removeAndShrinkArray(this.affectedChildren, index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da515d74929e74ecc5dff65e87704e77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f8e9cc8d760d40e7aca97ebb627c5ab02392d804", "commitAfterChange": "78ca28be54dd37f4936afd7f9f84bc9cf69d2754", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t\tpublic void logException(Exception e)", "signatureAfterChange": " \t\tpublic void logException(Exception e)", "diff": ["-\t\t\t\tparameters.clear();", "-\t\t\t\tparameters.put(MESSAGE, message);", "-\t\t\t\tparameters.put(CLASS, e.getClass());", "-\t\t\t\tthis.printTag(EXCEPTION, parameters, true, true);", "+\t\t\t\tthis.parameters.clear();", "+\t\t\t\tthis.parameters.put(MESSAGE, message);", "+\t\t\t\tthis.parameters.put(CLASS, e.getClass());", "+\t\t\t\tthis.printTag(EXCEPTION, this.parameters, true, true);"]}], "num": 40229}
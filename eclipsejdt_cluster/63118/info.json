{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af426b9e41f05bc3580253edb709dfce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da68e99e289483ee1a414f9d9056baf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "006d0d2bcd46f9eeb26a0d3ca2d5e66e5408265f", "commitAfterChange": "974c16da6f3c62d8f216865177d38ac0f89806ec", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tisWhiteSpace = ", "-\t\t\t\t\t\t(this.currentCharacter == ' ') || CharOperation.isWhitespace(this.currentCharacter); ", "+\t\t\t\t\t// inline version of:", "+\t\t\t\t\t//isWhiteSpace = ", "+\t\t\t\t\t//\t(this.currentCharacter == ' ') || CharOperation.isWhitespace(this.currentCharacter); ", "+\t\t\t\t\tswitch (this.currentCharacter) {", "+\t\t\t\t\t\tcase 10 : /* \\ u000a: LINE FEED               */", "+\t\t\t\t\t\tcase 12 : /* \\ u000c: FORM FEED               */", "+\t\t\t\t\t\tcase 13 : /* \\ u000d: CARRIAGE RETURN         */", "+\t\t\t\t\t\tcase 32 : /* \\ u0020: SPACE                   */", "+\t\t\t\t\t\tcase 9 : /* \\ u0009: HORIZONTAL TABULATION   */", "+\t\t\t\t\t\t\tisWhiteSpace = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tisWhiteSpace = false;", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.withoutUnicodePtr = 1;", "-\t\t\t\t\tunicodeStoreAt(this.withoutUnicodePtr);", "+\t\t\t\t\tthis.withoutUnicodePtr = 0;", "+\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\t    unicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t    unicodeStoreAt(this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--; // unicode store will increment", "+\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\tboolean isJavaIdStart = false;", "-\t\t\t\t\tif (this.currentCharacter >= HIGH_SURROGATE_MIN_VALUE && this.currentCharacter <= HIGH_SURROGATE_MAX_VALUE) {", "+\t\t\t\t\tchar c = this.currentCharacter;", "+\t\t\t\t\tif (c < MAX_OBVIOUS) {", "+\t\t\t\t\t\tswitch (ObviousIdentCharNatures[c]) {", "+\t\t\t\t\t\t\tcase C_LETTER :", "+\t\t\t\t\t\t\t\treturn scanIdentifierOrKeyword();", "+\t\t\t\t\t\t\tcase C_DIGIT :", "+\t\t\t\t\t\t\t\treturn scanNumber(false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean isJavaIdStart;", "+\t\t\t\t\tif (c >= HIGH_SURROGATE_MIN_VALUE && c <= HIGH_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\tchar high = this.currentCharacter;", "-\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(high, low);", "+\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(c, low);", "-\t\t\t\t\telse if (this.currentCharacter >= LOW_SURROGATE_MIN_VALUE && this.currentCharacter <= LOW_SURROGATE_MAX_VALUE) {", "+\t\t\t\t\telse if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\tisJavaIdStart = Character.isJavaIdentifierStart(this.currentCharacter);", "+\t\t\t\t\t\tisJavaIdStart = Character.isJavaIdentifierStart(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f0795eec934e9df14687c7e5e98264", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "13b501923d975b39fcf9769686302cfbbf5a49d6", "commitAfterChange": "006d0d2bcd46f9eeb26a0d3ca2d5e66e5408265f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tisWhiteSpace = ", "-\t\t\t\t\t\t(this.currentCharacter == ' ') || CharOperation.isWhitespace(this.currentCharacter); ", "+\t\t\t\t\t// inline version of:", "+\t\t\t\t\t//isWhiteSpace = ", "+\t\t\t\t\t//\t(this.currentCharacter == ' ') || CharOperation.isWhitespace(this.currentCharacter); ", "+\t\t\t\t\tswitch (this.currentCharacter) {", "+\t\t\t\t\t\tcase 10 : /* \\ u000a: LINE FEED               */", "+\t\t\t\t\t\tcase 12 : /* \\ u000c: FORM FEED               */", "+\t\t\t\t\t\tcase 13 : /* \\ u000d: CARRIAGE RETURN         */", "+\t\t\t\t\t\tcase 32 : /* \\ u0020: SPACE                   */", "+\t\t\t\t\t\tcase 9 : /* \\ u0009: HORIZONTAL TABULATION   */", "+\t\t\t\t\t\t\tisWhiteSpace = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tisWhiteSpace = false;", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.withoutUnicodePtr = 1;", "-\t\t\t\t\tunicodeStoreAt(this.withoutUnicodePtr);", "+\t\t\t\t\tthis.withoutUnicodePtr = 0;", "+\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\t    unicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t    unicodeStoreAt(this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--; // unicode store will increment", "+\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t\t\tunicodeStore();", "-\t\t\t\t\tboolean isJavaIdStart = false;", "-\t\t\t\t\tif (this.currentCharacter >= HIGH_SURROGATE_MIN_VALUE && this.currentCharacter <= HIGH_SURROGATE_MAX_VALUE) {", "+\t\t\t\t\tchar c = this.currentCharacter;", "+\t\t\t\t\tif (c < MAX_OBVIOUS) {", "+\t\t\t\t\t\tswitch (ObviousIdentCharNatures[c]) {", "+\t\t\t\t\t\t\tcase C_LETTER :", "+\t\t\t\t\t\t\t\treturn scanIdentifierOrKeyword();", "+\t\t\t\t\t\t\tcase C_DIGIT :", "+\t\t\t\t\t\t\t\treturn scanNumber(false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean isJavaIdStart;", "+\t\t\t\t\tif (c >= HIGH_SURROGATE_MIN_VALUE && c <= HIGH_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\tchar high = this.currentCharacter;", "-\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(high, low);", "+\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(c, low);", "-\t\t\t\t\telse if (this.currentCharacter >= LOW_SURROGATE_MIN_VALUE && this.currentCharacter <= LOW_SURROGATE_MAX_VALUE) {", "+\t\t\t\t\telse if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\tisJavaIdStart = Character.isJavaIdentifierStart(this.currentCharacter);", "+\t\t\t\t\t\tisJavaIdStart = Character.isJavaIdentifierStart(c);"]}], "num": 63118}
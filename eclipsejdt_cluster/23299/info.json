{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "023145a22e794ca44a6828c2b218b837", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18429dc0c87be6fedb52367817c03a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "1d91bb6095cf925ea7ef511c76b46befc586fea4", "commitAfterChange": "11e4e14c87ae9f5d3c387265b339332ab33728bd", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprotected void assertResourceNamesEqual(String message, String expected, Object[] resources)", "signatureAfterChange": " \tprotected void assertResourceNamesEqual(String message, String expected, Object[] resources)", "diff": ["-\t\tfor (int i = 0, length = resources.length; i < length; i++){", "-\t\t\tIResource resource = (IResource)resources[i];", "-\t\t\tbuffer.append(resource == null ? \"<null>\" : resource.getName());", "+\t\tfor (int i = 0, length = resources.length; i < length; i++) {", "+\t\t\tif (resources[i] instanceof IResource) {", "+\t\t\t\tbuffer.append(((IResource)resources[i]).getName());", "+\t\t\t} else if (resources[i] instanceof IStorage) {", "+\t\t\t\tbuffer.append(((IStorage) resources[i]).getName());", "+\t\t\t} else if (resources[i] == null) {", "+\t\t\t\tbuffer.append(\"<null>\");", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18af02420e3c06a4b84f7aecad2625be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "f7d1bb5ee90e0a0f57325e9e031435c92eedb8fb", "commitAfterChange": "a72edc01c485c4064e3d57e37fb2a83dee49bcbb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \t \tprotected void assertResourcesEqual(String message, String expected, Object[] resources)", "signatureAfterChange": " \t \t \tprotected void assertResourcesEqual(String message, String expected, Object[] resources)", "diff": ["-\t\tfor (int i = 0, length = resources.length; i < length; i++){", "-\t\t\tIResource resource = (IResource)resources[i];", "-\t\t\tbuffer.append(resource == null ? \"<null>\" : resource.getFullPath().toString());", "+\t\tfor (int i = 0, length = resources.length; i < length; i++) {", "+\t\t\tif (resources[i] instanceof IResource) {", "+\t\t\t\tbuffer.append(((IResource) resources[i]).getFullPath().toString());", "+\t\t\t} else if (resources[i] instanceof IStorage) {", "+\t\t\t\tbuffer.append(((IStorage) resources[i]).getFullPath().toString());", "+\t\t\t} else if (resources[i] == null) {", "+\t\t\t\tbuffer.append(\"<null>\");", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84bad70b3d4d88e4d24a40b39cef3929", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "7ce2f84b26c4f2c886cbbe2de7481057d4c242a9", "commitAfterChange": "be0584cfc38c5bd772c8361f3c8f7bf000916f66", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \t \tprotected void assertResourcesEqual(String message, String expected, Object[] resources)", "signatureAfterChange": " \t \t \tprotected void assertResourcesEqual(String message, String expected, Object[] resources)", "diff": ["-\t\tthis.sortResources(resources);", "+\t\tsortResources(resources);", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tfor (int i = 0, length = resources.length; i < length; i++){", "+\t\t\tIResource resource = (IResource)resources[i];", "+\t\t\tbuffer.append(resource == null ? \"<null>\" : resource.getFullPath().toString());", "+\t\t\tif (i != length-1)buffer.append(\"\\n\");", "+\t\t}", "+\t\tif (!expected.equals(buffer.toString())) {", "+\t\t\tSystem.out.print(org.eclipse.jdt.core.tests.util.Util.displayString(buffer.toString(), 2));", "+\t\t\tSystem.out.println(this.endChar);", "+\t\t}", "+\t\tassertEquals(", "+\t\t\tmessage,", "+\t\t\texpected,", "+\t\t\tbuffer.toString()", "+\t\t);", "+\t}"]}], "num": 23299}
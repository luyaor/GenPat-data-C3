{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9d73d1f4749b7b62203d8ea7d47034c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85af441e9ee5b87342d83fc5e027ef56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseDiagnostic.java", "commitBeforeChange": "9db26c7bea8b081f74e04400ef73e415034114ae", "commitAfterChange": "3ee5245339c28c9f118b2d56a8158cb4aa75c312", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private static Kind getKind(CategorizedProblem problem)", "signatureAfterChange": "      private static Kind getKind(CategorizedProblem problem)", "diff": ["-        }", "-        if(problem.isWarning()) {", "+        } else if(problem.isWarning()) {", "+        } else if (problem instanceof DefaultProblem && ((DefaultProblem) problem).isInfo()) {", "+        \tkind = Kind.NOTE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cce4770cf6ac7c485049a13a0c0f4b54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "585f1dbbb77e7785c7d5038484b4201e48c234d1", "commitAfterChange": "ec68a2802d1a9b6a386c799a34c90b2feb605375", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["+\t\t", "+\t\tif(node instanceof ForeachStatement && ((ForeachStatement)node).action == null) {", "+\t\t\tnode = ((ForeachStatement)node).elementVariable;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffc82cdce6314d7be36f19d6681e7dd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "diff": ["-\t\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "+\t\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "+\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\t\troot = getPackageFragmentRoot((IResource) target);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// external target - only JARs allowed", "+\t\t\t\t\t\troot = getPackageFragmentRoot((IResource) target, entryPath);", "+\t\t\t\t\t} else if (target instanceof File) {", "+\t\t\t\t\t\t// external target", "+\t\t\t\t\t\t} else if (((File) target).isDirectory()) {", "+\t\t\t\t\t\t\troot = new ExternalPackageFragmentRoot(entryPath, this);"]}], "num": 59174}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d1dd4b4e8b3f74ef3de22ee148fb035", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ef92e9d85c5c003d3413c12be76a9d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tMethodBinding matchingMethod, \t\tObjectVector found)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found)", "diff": ["-\tpublic MethodBinding findDefaultAbstractMethod(", "+\tprotected MethodBinding findDefaultAbstractMethod(", "-\t\tMethodBinding matchingMethod,", "-\t\t\tmatchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);", "+\t\t\tfindMethodInSuperInterfaces(currentType, selector, found);", "-\t\tif (foundSize == startFoundSize) {", "-\t\t\tif (matchingMethod != null)", "-\t\t\t\tunitScope.recordTypeReferences(matchingMethod.thrownExceptions);", "-\t\t\treturn matchingMethod; // maybe null", "-\t\t}", "-\t\tMethodBinding[] candidates = new MethodBinding[foundSize - startFoundSize];", "+\t\tif (foundSize == startFoundSize)", "+\t\t\treturn null;", "+\t\tMethodBinding[] candidates = null;", "-\t\t\t\tif (compatibleMethod.isValidBinding())", "+\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\tif (candidatesCount == 0)", "+\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize];", "-\t\t\t\telse if (problemMethod == null)", "+\t\t\t\t} else if (problemMethod == null) {", "+\t\t\t\t}", "-\t\tif (candidatesCount == 0) { // try to find a close match when the parameter order is wrong or missing some parameters", "-\t\t\tif (problemMethod != null) return problemMethod;", "-\t\t\tint argLength = argumentTypes.length;", "-\t\t\tnextMethod : for (int i = 0; i < foundSize; i++) {", "-\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "-\t\t\t\tTypeBinding[] params = methodBinding.parameters;", "-\t\t\t\tint paramLength = params.length;", "-\t\t\t\tnextArg: for (int a = 0; a < argLength; a++) {", "-\t\t\t\t\tTypeBinding arg = argumentTypes[a];", "-\t\t\t\t\tfor (int p = 0; p < paramLength; p++)", "-\t\t\t\t\t\tif (params[p] == arg)", "-\t\t\t\t\t\t\tcontinue nextArg;", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t}", "-\t\t\t\treturn methodBinding;", "-\t\t\t}", "-\t\t\treturn (MethodBinding) found.elementAt(0); // no good match so just use the first one found", "-\t\t}", "+\t\tif (candidatesCount == 0)", "+\t\t\treturn problemMethod; // can be null", "-\t\tboolean isCompliant14 = compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\tif (isCompliant14)", "+\t\tif (compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d2948166bdaf81844ffca4085824e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d2f1cef7b0e84ef19aab589d93965b305b118ad6", "commitAfterChange": "9905630f974d01d005c27e87c48cb6bc796e934c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\tCompilationUnitScope unitScope = compilationUnitScope();", "-\t\tint foundSize = found.size;", "-\t\tif (foundSize == startFoundSize) {", "-\t\t\tif (concreteMatch != null) {", "-\t\t\t\tunitScope.recordTypeReferences(concreteMatch.thrownExceptions);", "-\t\t\t\treturn concreteMatch;", "-\t\t\t}", "-\t\t\treturn null;", "-\t\t}", "-\t\t// argument type compatibility check", "-\t\tfor (int i = startFoundSize; i < foundSize; i++) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "-\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "-\t\t\tif (compatibleMethod != null) {", "-\t\t\t\tif (compatibleMethod.isValidBinding()) {", "-\t\t\t\t\tif (candidatesCount == 0) {", "-\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize + 1];", "-\t\t\t\t\t\tif (concreteMatch != null)", "-\t\t\t\t\t\t\tcandidates[candidatesCount++] = concreteMatch;", "+\t\tint foundSize = found.size;", "+\t\tif (foundSize > startFoundSize) {", "+\t\t\t// argument type compatibility check", "+\t\t\tfor (int i = startFoundSize; i < foundSize; i++) {", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\tif (candidatesCount == 0) {", "+\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize + 1];", "+\t\t\t\t\t\t\tif (concreteMatch != null)", "+\t\t\t\t\t\t\t\tcandidates[candidatesCount++] = concreteMatch;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "+\t\t\t\t\t} else if (problemMethod == null) {", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "-\t\t\t\t} else if (problemMethod == null) {", "-\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\tif (candidatesCount == 0) {", "-\t\t\tif (concreteMatch != null) {", "-\t\t\t\tunitScope.recordTypeReferences(concreteMatch.thrownExceptions);", "-\t\t\t\treturn concreteMatch;", "+\t\tif (candidatesCount < 2) {", "+\t\t\tif (concreteMatch == null) {", "+\t\t\t\tif (candidatesCount == 0)", "+\t\t\t\t\treturn problemMethod; // can be null", "+\t\t\t\tconcreteMatch = candidates[0];", "-\t\t\treturn problemMethod; // can be null", "-\t\t}", "-\t\tif (candidatesCount == 1) {", "-\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\treturn candidates[0]; ", "+\t\t\tcompilationUnitScope().recordTypeReferences(concreteMatch.thrownExceptions);", "+\t\t\treturn concreteMatch;"]}], "num": 69858}
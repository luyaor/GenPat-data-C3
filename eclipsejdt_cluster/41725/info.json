{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72e74f90ad9adec5c5c82bc610f39c26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "946ff6c6bc90c90ff2b72808371e45c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "948661c4cb198af70b598b9954e5159cb73d7234", "commitAfterChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tchar[][] splitName = CharOperation.splitOn('.', \r", "-\t\tthis.pkgName == null ? \r", "-\t\t\tnew char[0] :\r", "-\t\t\tthis.pkgName);\r", "-\tlocator.reportAccurateReference(reference.sourceStart, reference.sourceEnd, splitName, element, accuracy);\r", "+\tchar[][] tokens = null;\r", "+\tif (reference instanceof ImportReference) {\r", "+\t\tImportReference importRef = (ImportReference)reference;\r", "+\t\tif (importRef.onDemand) {\r", "+\t\t\ttokens = importRef.tokens;\r", "+\t\t} else {\r", "+\t\t\tint length = importRef.tokens.length - 1;\r", "+\t\t\ttokens = new char[length][];\r", "+\t\t\tSystem.arraycopy(importRef.tokens, 0, tokens, 0, length);\r", "+\t\t}\r", "+\t} else if (reference instanceof QualifiedNameReference) {\r", "+\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)reference;\r", "+\t\tBinding binding = qNameRef.binding;\r", "+\t\tTypeBinding typeBinding = null;\r", "+\t\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {\r", "+\t\t\tcase BindingIds.FIELD : // reading a field\r", "+\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "+\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "+\t\t}\r", "+\t\tif (typeBinding instanceof ReferenceBinding) {\r", "+\t\t\tPackageBinding pkgBinding = ((ReferenceBinding)typeBinding).fPackage;\r", "+\t\t\tif (pkgBinding != null) {\r", "+\t\t\t\ttokens = pkgBinding.compoundName;\r", "+\t\t\t}\r", "+\t\t} \r", "+\t\tif (tokens == null) {\r", "+\t\t\ttokens = qNameRef.tokens;\r", "+\t\t}\r", "+\t} else if (reference instanceof QualifiedTypeReference) {\r", "+\t\tQualifiedTypeReference qTypeRef = (QualifiedTypeReference)reference;\r", "+\t\tTypeBinding typeBinding = qTypeRef.binding;\r", "+\t\tif (typeBinding instanceof ArrayBinding) {\r", "+\t\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;\r", "+\t\t}\r", "+\t\tif (typeBinding instanceof ReferenceBinding) {\r", "+\t\t\tPackageBinding pkgBinding = ((ReferenceBinding)typeBinding).fPackage;\r", "+\t\t\tif (pkgBinding != null) {\r", "+\t\t\t\ttokens = pkgBinding.compoundName;\r", "+\t\t\t}\r", "+\t\t} \r", "+\t\tif (tokens == null) {\r", "+\t\t\ttokens = qTypeRef.tokens;\r", "+\t\t}\r", "+\t}\r", "+\tif (tokens == null) tokens = NO_CHAR_CHAR;\r", "+\tlocator.reportAccurateReference(reference.sourceStart, reference.sourceEnd, tokens, element, accuracy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6f5018355fffb6954ab20bb5da1323", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f27100c9a03d1ad4af3d49219ed6a35545e3cfed", "commitAfterChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\t\t\t\tisEnabling = false; // mentionned warnings are disabled", "+\t\t\t\t\t\t\tisEnabling = false; // specified warnings are disabled", "-\t\t\t\t\tnextToken: while (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "-\t\t\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfPlusOption\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "-\t\t\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfMinusOption\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-error\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tString errorOption = currentArg;", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length <= 7) {", "+\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidErrorConfiguration\", errorOption)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tint errorTokenStart;", "+\t\t\t\t\tboolean isEnabling, allowPlusOrMinus;", "+\t\t\t\t\tswitch (errorOption.charAt(7)) {", "+\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\terrorTokenStart = 8;", "+\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\tallowPlusOrMinus = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\terrorTokenStart = 8;", "+\t\t\t\t\t\t\tisEnabling = false; // specified errors are disabled", "+\t\t\t\t\t\t\tallowPlusOrMinus = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tdisableErrors();", "+\t\t\t\t\t\t\terrorTokenStart = 7;", "+\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\tallowPlusOrMinus = false;", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tStringTokenizer tokenizer =", "+\t\t\t\t\t\tnew StringTokenizer(errorOption.substring(errorTokenStart, errorOption.length()), \",\"); //$NON-NLS-1$", "+\t\t\t\t\tint tokenCounter = 0;", "+", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\t\t\ttokenCounter++;", "+\t\t\t\t\t\tswitch(token.charAt(0)) {", "+\t\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "+\t\t\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfPlusOption\", token)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "+\t\t\t\t\t\t\t\t\tisEnabling = false;", "+\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfMinusOption\", token)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\thandleErrorToken(token, isEnabling);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (tokenCounter == 0) {", "+\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidErrorOption\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tmode = DEFAULT;", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadoc,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tthis.options.put(", "-\t}", "-\tif (this.warnAllJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocComments,", "-\t\t\tCompilerOptions.WARNING);"]}], "num": 41725}
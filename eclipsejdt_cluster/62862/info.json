{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da003af9066775e8aecb92f8ac9105f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c24cad7c0c4d727a1f00e0eb20f4eae0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\tprivate static ASTNode parse(int kind, char[] source, int offset, int length, Map options) {", "-\t\tif (kind != K_CLASS_BODY_DECLARATIONS", "-\t\t\t\t&& kind != K_EXPRESSION", "-\t\t\t\t&& kind != K_STATEMENTS) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (source == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (length < 0 || offset < 0 || offset > source.length - length) {", "-\t\t    throw new IndexOutOfBoundsException();", "-\t\t}", "-\t\tif (options == null) {", "-\t\t\toptions = JavaCore.getOptions();", "-\t\t}", "-\t\tASTConverter converter = new ASTConverter(options, false, null);", "-\t\tconverter.compilationUnitSource = source;", "-\t\tconverter.scanner.setSource(source);", "+\tprivate ASTNode internalCreateASTForKind() {", "+\t\tASTConverter converter = new ASTConverter(this.compilerOptions, false, null);", "+\t\tconverter.compilationUnitSource = this.rawSource;", "+\t\tconverter.scanner.setSource(this.rawSource);", "-\t\tAST ast = AST.newAST(AST.LEVEL_2_0);", "+\t\tAST ast = AST.newAST(this.apiLevel);", "-\t\tswitch(kind) {", "+\t\tswitch(this.astKind) {", "-\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, block, recordedParsingInformation);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, compilationUnit, block, recordedParsingInformation);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "+\t\t\t\t\trootNodeToCompilationUnit(expression2.getAST(), compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "+\t\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\tthrow new IllegalArgumentException();", "+\t\tthrow new IllegalStateException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dceb4b9ac33222b7f47164bf5e401524", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0af096b2d34684a162b7a195205699b7a15a3c32", "commitAfterChange": "55eb63b50ad4a934502bfb435a017ff21ebaf8d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\t\tConstructorDeclaration constructorDeclaration = CodeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = CodeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = CodeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);"]}], "num": 62862}
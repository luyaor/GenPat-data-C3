{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75e12a2bcf0ace8d220ea8894bdb7991", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f03788bb2e62c75c3f1aa86fbed2a27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "e0259efe596fb3e88871acf616821dc2f984a25a", "commitAfterChange": "6ccbe6e7a1eb8a287ad2e183536fbec86fa90b93", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test0040() throws JavaModelException", "signatureAfterChange": " \tpublic void test0040() throws JavaModelException", "diff": ["+\t\tASTNode node = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\tList typeParameters = methodDeclaration.typeParameters();", "+\t\tassertEquals(\"wrong size\", 1, typeParameters.size());", "+\t\tTypeParameter parameter = (TypeParameter) typeParameters.get(0);", "+\t\tIBinding binding = parameter.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tassertEquals(\"wrong type\", IBinding.TYPE, binding.getKind());", "+\t\tassertEquals(\"wrong key\", \"T:test0040/A/test0040.Tfoo()\", binding.getKey());", "+\t\tType returnType = methodDeclaration.getReturnType2();", "+\t\tIBinding binding2 = returnType.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding2);", "+\t\tassertEquals(\"wrong type\", IBinding.TYPE, binding2.getKind());", "+\t\tassertEquals(\"wrong key\", \"T:test0040/A/test0040.Tfoo()\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b49f835633740bb9d942542e5d087af1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["-\t\t\tchar[][] parameterTypeNames = new char[length][];", "+\t\t\tchar[][] parameterFullTypeNames = new char[length][];", "-\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();", "+\t\t\t\tparameterFullTypeNames[i] = type.qualifiedSourceName();", "-\t\t\tchar[][] parameterNames = findMethodParameterNames(method,parameterTypeNames);", "+\t\t\tchar[][] parameterNames = findMethodParameterNames(method,parameterFullTypeNames);", "-\t\t\t\tchar[] returnTypeName = method.returnType.qualifiedSourceName();", "-\t\t\t\tif(mustQualifyType(returnPackageName, returnTypeName)) {", "-\t\t\t\t\tcompletion.append(CharOperation.concat(returnPackageName, returnTypeName,'.'));", "+\t\t\t\tchar[] returnFullTypeName = method.returnType.qualifiedSourceName();", "+\t\t\t\t", "+\t\t\t\tTypeBinding returnLeafType = method.returnType.leafComponentType();", "+\t\t\t\tif(!returnLeafType.isBaseType() && mustQualifyType(", "+\t\t\t\t\t\treturnPackageName,", "+\t\t\t\t\t\treturnLeafType.sourceName(),", "+\t\t\t\t\t\treturnLeafType.isMemberType() ? returnLeafType.enclosingType().qualifiedSourceName() : null,", "+\t\t\t\t\t\t((ReferenceBinding)returnLeafType).modifiers)) {", "+\t\t\t\t\tcompletion.append(CharOperation.concat(returnPackageName, returnFullTypeName,'.'));", "-\t\t\t\t\tif(mustQualifyType(parameterPackageNames[i], parameterTypeNames[i])){", "-\t\t\t\t\t\tcompletion.append(CharOperation.concat(parameterPackageNames[i], parameterTypeNames[i], '.'));", "+\t\t\t\t\tTypeBinding type = method.parameters[i];", "+\t\t\t\t\tTypeBinding leafType = type.leafComponentType();", "+\t\t\t\t\tif(!leafType.isBaseType() && mustQualifyType(", "+\t\t\t\t\t\t\tparameterPackageNames[i],", "+\t\t\t\t\t\t\tleafType.sourceName(),", "+\t\t\t\t\t\t\tleafType.isMemberType() ? leafType.enclosingType().qualifiedSourceName() : null,", "+\t\t\t\t\t\t\t((ReferenceBinding)leafType).modifiers)){", "+\t\t\t\t\t\tcompletion.append(CharOperation.concat(parameterPackageNames[i], parameterFullTypeNames[i], '.'));", "-\t\t\t\t\t\tcompletion.append(parameterTypeNames[i]);", "+\t\t\t\t\t\tcompletion.append(parameterFullTypeNames[i]);", "-\t\t\t\t\t\tchar[] exceptionTypeName = exception.qualifiedSourceName();", "+\t\t\t\t\t\tchar[] exceptionFullTypeName = exception.qualifiedSourceName();", "-\t\t\t\t\t\tif(mustQualifyType(exceptionPackageName, exceptionTypeName)){", "-\t\t\t\t\t\t\tcompletion.append(CharOperation.concat(exceptionPackageName, exceptionTypeName, '.'));", "+\t\t\t\t\t\tif(mustQualifyType(", "+\t\t\t\t\t\t\t\texceptionPackageName,", "+\t\t\t\t\t\t\t\texception.sourceName,", "+\t\t\t\t\t\t\t\texception.isMemberType() ? exception.enclosingType().qualifiedSourceName() : null,", "+\t\t\t\t\t\t\t\texception.modifiers)){", "+\t\t\t\t\t\t\tcompletion.append(CharOperation.concat(exceptionPackageName, exceptionFullTypeName, '.'));", "-\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\tproposal.setParameterTypeNames(parameterFullTypeNames);"]}], "num": 66558}
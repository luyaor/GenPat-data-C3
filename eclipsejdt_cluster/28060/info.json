{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f3bae1fc94d5f4fa8c3f2c0e0b642f9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7174f482ae27155ace9518f48714d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f6e646cfd67462923a3ee7e8121ae224b9177415", "commitAfterChange": "c2914e56411382198ea8ccc84da3c9283a570f77", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tint DEFAULT_SIZE_CLASSPATH = 4;", "+\t\tfinal int DEFAULT_SIZE_CLASSPATH = 4;", "-\t\tString currentClasspathName = null;", "-\t\tArrayList currentRuleSpecs = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t", "+\t\t\t\t\tclasspaths.add(currentArg);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t\tbootclasspaths.add(currentArg);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "-\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,", "-\t\t\t\t\t\t\tFile.pathSeparator + \"[]\", true); //$NON-NLS-1$", "-\t\t\t\t\t// state machine", "-\t\t\t\t\tfinal int start = 0; ", "-\t\t\t\t\tfinal int readyToClose = 1;", "-\t\t\t\t\t// 'path' 'path1[rule];path2'", "-\t\t\t\t\tfinal int readyToCloseEndingWithRules = 2;", "-\t\t\t\t\t// 'path[rule]' 'path1;path2[rule]'", "-\t\t\t\t\tfinal int readyToCloseOrOtherEntry = 3;", "-\t\t\t\t\t// 'path[rule];' 'path;' 'path1;path2;'", "-\t\t\t\t\tfinal int rulesNeedAnotherRule = 4;", "-\t\t\t\t\t// 'path[rule1;'", "-\t\t\t\t\tfinal int rulesStart = 5;", "-\t\t\t\t\t// 'path[' 'path1;path2['", "-\t\t\t\t\tfinal int rulesReadyToClose = 6;", "-\t\t\t\t\t// 'path[rule' 'path[rule1;rule2'", "-\t\t\t\t\tfinal int error = 99;", "-\t\t\t\t\tint state = start;", "-\t\t\t\t\tString token = null;", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\t\t\tif (token.equals(File.pathSeparator)) {", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase start:", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase readyToClose:", "-\t\t\t\t\t\t\tcase readyToCloseEndingWithRules:", "-\t\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "-\t\t\t\t\t\t\t\tstate = readyToCloseOrOtherEntry;", "-\t\t\t\t\t\t\t\taddNewEntry(INSIDE_CLASSPATH, INSIDE_SOURCE_PATH, bootclasspaths, classpaths, sourcepathClasspaths, currentClasspathName, currentRuleSpecs, mode, customEncoding);", "-\t\t\t\t\t\t\t\tcurrentRuleSpecs.clear();", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase rulesReadyToClose:", "-\t\t\t\t\t\t\t\tstate = rulesNeedAnotherRule;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (token.equals(\"[\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase readyToClose:", "-\t\t\t\t\t\t\t\tstate = rulesStart;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (token.equals(\"]\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase rulesReadyToClose:", "-\t\t\t\t\t\t\t\tstate = readyToCloseEndingWithRules;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// regular word", "-\t\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\t\tcase start:", "-\t\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "-\t\t\t\t\t\t\t\tstate = readyToClose;", "-\t\t\t\t\t\t\t\tcurrentClasspathName = token;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase rulesNeedAnotherRule:", "-\t\t\t\t\t\t\tcase rulesStart:", "-\t\t\t\t\t\t\t\tstate = rulesReadyToClose;", "-\t\t\t\t\t\t\t\tcurrentRuleSpecs.add(token);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tstate = error;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tswitch(state) {", "-\t\t\t\t\t\tcase readyToClose :", "-\t\t\t\t\t\tcase readyToCloseEndingWithRules :", "-\t\t\t\t\t\tcase readyToCloseOrOtherEntry :", "-\t\t\t\t\t\t\taddNewEntry(INSIDE_CLASSPATH, INSIDE_SOURCE_PATH, bootclasspaths, classpaths, sourcepathClasspaths, currentClasspathName, currentRuleSpecs, mode, customEncoding);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t// we go on anyway", "-\t\t\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "-\t\t\t\t\t}", "+\t\t\t\t\tsourcepathClasspaths.add(currentArg);", "-\t\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "-\t\t", "-\t\tif (filesCount != 0)", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.filenames,", "-\t\t\t\t0,", "-\t\t\t\t(this.filenames = new String[filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\tif (classpaths.size() == 0) {", "-\t\t\t// no user classpath specified.", "-\t\t\tString classProp = System.getProperty(\"java.class.path\"); //$NON-NLS-1$", "-\t\t\tif ((classProp == null) || (classProp.length() == 0)) {", "-\t\t\t\tthis.logger.logNoClasspath();", "-\t\t\t\tclasspaths.add(FileSystem.getClasspath(System.getProperty(\"user.dir\"), customEncoding, 0, null));//$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "-\t\t\t\tString token;", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "-\t\t\t\t\t\t\t.getClasspath(token, customEncoding, 0, null);", "-\t\t\t\t\tif (currentClasspath != null) {", "-\t\t\t\t\t\tclasspaths.add(currentClasspath);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "-\t\t\t\t\t\t// should not happen - we go on anyway", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "+\t\t// process bootclasspath, classpath and sourcepaths", "-\t\tif (bootclasspaths.size() == 0) {", "+\t \tfinal int bootclasspathsSize = bootclasspaths.size();", "+\t\tif (bootclasspathsSize != 0) {", "+\t\t\tString[] paths = new String[bootclasspathsSize];", "+\t\t\tbootclasspaths.toArray(paths);", "+\t\t\tbootclasspaths.clear();", "+\t\t\tfor (int i = 0; i < bootclasspathsSize; i++) {", "+\t\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths, paths[i], customEncoding, false);", "+\t\t\t}", "+\t\t} else {", "-\t \t }", "+\t\t}", "+\t\tfinal int classpathsSize = classpaths.size();", "+\t\tif (classpaths.size() != 0) {", "+\t\t\tString[] paths = new String[classpathsSize];", "+\t\t\tclasspaths.toArray(paths);", "+\t\t\tclasspaths.clear();", "+\t\t\tfor (int i = 0; i < classpathsSize; i++) {", "+\t\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i], customEncoding, false);", "+\t\t\t}\t\t\t", "+\t\t} else {", "+\t\t\t// no user classpath specified.", "+\t\t\tString classProp = System.getProperty(\"java.class.path\"); //$NON-NLS-1$", "+\t\t\tif ((classProp == null) || (classProp.length() == 0)) {", "+\t\t\t\tthis.logger.logNoClasspath();", "+\t\t\t\tclasspaths.add(FileSystem.getClasspath(System.getProperty(\"user.dir\"), customEncoding, 0, null));//$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "+\t\t\t\tString token;", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t\t\t.getClasspath(token, customEncoding, 0, null);", "+\t\t\t\t\tif (currentClasspath != null) {", "+\t\t\t\t\t\tclasspaths.add(currentClasspath);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "+\t\t\t\t\t\t// should not happen - we go on anyway", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinal int sourcepathClasspathsSize = sourcepathClasspaths.size();", "+\t\tif (sourcepathClasspathsSize != 0) {", "+\t\t\tString[] paths = new String[sourcepathClasspathsSize];", "+\t\t\tsourcepathClasspaths.toArray(paths);", "+\t\t\tsourcepathClasspaths.clear();", "+\t\t\tfor (int i = 0; i < sourcepathClasspathsSize; i++) {", "+\t\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepathClasspaths, paths[i], customEncoding, true);", "+\t\t\t}\t\t\t", "+\t\t}", "+\t\tif (filesCount != 0)", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.filenames,", "+\t\t\t\t0,", "+\t\t\t\t(this.filenames = new String[filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "546765ae1f5f20e77b6e2a6948e5e286", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "68ccb4031ed08b4fe5c4be466185d9f98028d52b", "commitAfterChange": "b97b84a6370469b0432a4c45b3f13c4f7bb62ce7", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tString[] bootclasspaths = null;", "-\t\tint pathCount = 0;", "-\t\tint bootclasspathCount = 0;", "+\t\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\tString currentClasspathName = null;", "+\t\tArrayList currentRuleSpecs = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$ ", "+\t\t\tif (currentArg.endsWith(\"]\") && !(mode == InsideBootClasspath || mode == InsideClasspath) ) { //$NON-NLS-1$ ", "-\t\t\t\tif (pathCount == 0) {", "-\t\t\t\t\tthis.classpaths = new String[DEFAULT_SIZE_CLASSPATH];", "-\t\t\t\t}", "-\t\t\t\tif (bootclasspathCount > 0)", "+\t\t\t\tif (bootclasspaths.size() > 0)", "-\t\t\t\tbootclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "-\t\t\tif (mode == InsideClasspath) {", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);", "+\t\t\tif (mode == InsideClasspath || mode == InsideBootClasspath) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,", "+\t\t\t\t\t\tFile.pathSeparator + \"[]\", true); //$NON-NLS-1$", "+\t\t\t\t// state machine", "+\t\t\t\tfinal int start = 0; ", "+\t\t\t\tfinal int readyToClose = 1;", "+\t\t\t\t// 'path' 'path1[rule];path2'", "+\t\t\t\tfinal int readyToCloseEndingWithRules = 2;", "+\t\t\t\t// 'path[rule]' 'path1;path2[rule]'", "+\t\t\t\tfinal int readyToCloseOrOtherEntry = 3;", "+\t\t\t\t// 'path[rule];' 'path;' 'path1;path2;'", "+\t\t\t\tfinal int rulesNeedAnotherRule = 4;", "+\t\t\t\t// 'path[rule1;'", "+\t\t\t\tfinal int rulesStart = 5;", "+\t\t\t\t// 'path[' 'path1;path2['", "+\t\t\t\tfinal int rulesReadyToClose = 6;", "+\t\t\t\t// 'path[rule' 'path[rule1;rule2'", "+\t\t\t\tfinal int error = 99;", "+\t\t\t\tint state = start;", "+\t\t\t\tString token = null;", "-\t\t\t\t\tint length;", "-\t\t\t\t\tif ((length = this.classpaths.length) <= pathCount) {", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.classpaths,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.classpaths = new String[length * 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tif (token.equals(File.pathSeparator)) {", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase readyToClose:", "+\t\t\t\t\t\tcase readyToCloseEndingWithRules:", "+\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "+\t\t\t\t\t\t\tstate = readyToCloseOrOtherEntry;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase rulesReadyToClose:", "+\t\t\t\t\t\t\tstate = rulesNeedAnotherRule;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (token.equals(\"[\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase readyToClose:", "+\t\t\t\t\t\t\tstate = rulesStart;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (token.equals(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase rulesReadyToClose:", "+\t\t\t\t\t\t\tstate = readyToCloseEndingWithRules;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t} else // regular word", "+\t\t\t\t\t{", "+\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\tcase start:", "+\t\t\t\t\t\tcase readyToCloseOrOtherEntry:", "+\t\t\t\t\t\t\tstate = readyToClose;", "+\t\t\t\t\t\t\tcurrentClasspathName = token;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase rulesNeedAnotherRule:", "+\t\t\t\t\t\tcase rulesStart:", "+\t\t\t\t\t\t\tstate = rulesReadyToClose;", "+\t\t\t\t\t\t\tcurrentRuleSpecs.add(token);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tstate = error;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tthis.classpaths[pathCount++] = tokenizer.nextToken();", "+\t\t\t\t}", "+\t\t\t\tif (state == readyToClose", "+\t\t\t\t\t\t|| state == readyToCloseEndingWithRules ", "+\t\t\t\t\t\t|| state == readyToCloseOrOtherEntry) {", "+\t\t\t\t\tAccessRule[] accessRules = new AccessRule[currentRuleSpecs", "+\t\t\t\t\t\t\t.size()];", "+\t\t\t\t\tboolean rulesOK = true;", "+\t\t\t\t\tIterator i = currentRuleSpecs.iterator();", "+\t\t\t\t\tint j = 0;", "+\t\t\t\t\twhile (i.hasNext()) {", "+\t\t\t\t\t\tString ruleSpec = (String) i.next();", "+\t\t\t\t\t\tchar key = ruleSpec.charAt(0);", "+\t\t\t\t\t\tString pattern = ruleSpec.substring(1);", "+\t\t\t\t\t\tif (pattern.length() > 0) {", "+\t\t\t\t\t\t\tswitch (key) {", "+\t\t\t\t\t\t\tcase '+':", "+\t\t\t\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t\t\t\t.toCharArray(), -1);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '~':", "+\t\t\t\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t\t\t\t.toCharArray(),", "+\t\t\t\t\t\t\t\t\t\tIProblem.DiscouragedReference);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '-':", "+\t\t\t\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t\t\t\t.toCharArray(),", "+\t\t\t\t\t\t\t\t\t\tIProblem.ForbiddenReference);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\trulesOK = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\trulesOK = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (rulesOK) {", "+\t\t\t\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(", "+\t\t\t\t\t\t\t\taccessRules, \"{0}\"); //$NON-NLS-1$", "+\t\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t\t\t\t.getClasspath(currentClasspathName,", "+\t\t\t\t\t\t\t\t\t\tcustomEncoding, 0, accessRuleSet);", "+\t\t\t\t\t\tif (currentClasspath != null) {", "+\t\t\t\t\t\t\tif (mode == InsideClasspath) {", "+\t\t\t\t\t\t\t\tclasspaths.add(currentClasspath);", "+\t\t\t\t\t\t\t} else { // inside bootclasspath", "+\t\t\t\t\t\t\t\tbootclasspaths.add(currentClasspath);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "+\t\t\t\t\t\t\t// we go on anyway", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "+\t\t\t\t\t\t// we go on anyway", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.logger.logIncorrectClasspath(currentArg);", "+\t\t\t\t\t// we go on anyway", "-\t\t\tif (mode == InsideBootClasspath) {", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\tint length;", "-\t\t\t\t\tif ((length = bootclasspaths.length) <= bootclasspathCount) {", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tbootclasspaths,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(bootclasspaths = new String[length * 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t}", "-\t\t\t\t\tbootclasspaths[bootclasspathCount++] = tokenizer.nextToken();", "-\t\t\t\t}", "-\t\t\t\tmode = Default;", "-\t\t\t\tcontinue;", "-\t\t\t}\t\t\t", "-\t\tif (pathCount == 0) {", "+\t\tif (classpaths.size() == 0) {", "-\t\t\t\tclassProp = System.getProperty(\"user.dir\"); //$NON-NLS-1$", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "-\t\t\tthis.classpaths = new String[tokenizer.countTokens() + 1];", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tthis.classpaths[pathCount++] = tokenizer.nextToken();", "+\t\t\telse {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "+\t\t\t\tString token;", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t\t\t.getClasspath(token, customEncoding, 0, null);", "+\t\t\t\t\tif (currentClasspath != null) {", "+\t\t\t\t\t\tclasspaths.add(currentClasspath);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "+\t\t\t\t\t\t// should not happen - we go on anyway", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tthis.classpaths[pathCount++] = System.getProperty(\"user.dir\");//$NON-NLS-1$", "-\t\tif (bootclasspathCount == 0) {", "+\t\tif (bootclasspaths.size() == 0) {", "-\t\t\t\t\t\t\tint length = getLength(systemLibrariesJars);", "-\t\t\t\t\t\t\tbootclasspaths = new String[length];", "-\t\t\t\t\t\t\t\t\t\tbootclasspaths[bootclasspathCount++] = current[j].getAbsolutePath();", "+\t\t\t\t\t\t\t\t\t\tFileSystem.Classpath classpath = ", "+\t\t\t\t\t\t\t\t\t\t\tFileSystem.getClasspath(", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\tnull, 0, null); ", "+\t\t\t\t\t\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\tif (this.classpaths == null) {", "-\t\t\tthis.classpaths = new String[0];", "-\t\t}", "-\t\tString[] newclasspaths = null;", "-\t\tif ((pathCount + bootclasspathCount) != this.classpaths.length) {", "-\t\t\tnewclasspaths = new String[pathCount + bootclasspathCount];", "-\t\t} else {", "-\t\t\tnewclasspaths = this.classpaths;", "-\t\t}", "-\t\tSystem.arraycopy(", "-\t\t\tthis.classpaths,", "-\t\t\t0,", "-\t\t\tnewclasspaths,", "-\t\t\tbootclasspathCount,", "-\t\t\tpathCount);", "-", "-\t\tif (bootclasspathCount != 0) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tbootclasspaths,", "-\t\t\t\t0,", "-\t\t\t\tnewclasspaths,", "-\t\t\t\t0,", "-\t\t\t\tbootclasspathCount);", "-\t\t}", "-\t\tthis.classpaths = newclasspaths;", "-\t\tfor (int i = 0, max = this.classpaths.length; i < max; i++) {", "-\t\t\tFile file = new File(this.classpaths[i]);", "-\t\t\tif (!file.exists()) { // signal missing classpath entry file", "-\t\t\t\tthis.logger.logIncorrectClasspath(this.classpaths[i]); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "+\t\tbootclasspaths.addAll(classpaths);", "+\t\tclasspaths = bootclasspaths;", "+\t\tthis.checkedClasspaths = new FileSystem.Classpath[classpaths.size()];", "+\t\tclasspaths.toArray(this.checkedClasspaths);", "-\t\tthis.logger.logClasspath(this.classpaths);", "+\t\tthis.logger.logClasspath(this.checkedClasspaths);"]}], "num": 28060}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "958351379cc0ca492cfaac0258645f1b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "041cb86a399a70c9367c7e735af762f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "7806a28af49b091c5019a3f6cc2c2153a422eff3", "commitAfterChange": "b6eb3741928f7f60040cd62cb39c2031ea7f1375", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public GlobalVariable newVariable(char[] typeName, char[] name, char[] initializer)", "signatureAfterChange": " public GlobalVariable newVariable(char[] typeName, char[] name, char[] initializer)", "diff": ["-\ttry {", "-\t\tthis.variables[this.variableCount++] = var;", "-\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\tint index = this.variableCount - 1;", "-\t\tGlobalVariable[] oldVars = this.variables;", "-\t\tGlobalVariable[] newVars = new GlobalVariable[index * 2];", "-\t\tSystem.arraycopy(oldVars, 0, newVars, 0, index);", "-\t\tnewVars[index] = var;", "-\t\tthis.variables = newVars;", "-\t}", "+\tif (this.variableCount >= this.variables.length) // assume variables is never empty", "+\t\tSystem.arraycopy(this.variables, 0, this.variables = new GlobalVariable[this.variableCount * 2], 0, this.variableCount);", "+\tthis.variables[this.variableCount++] = var;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "805fcf48fa42b67657d81a4af987d944", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "154eb5a35bc8871be423c76826aa951bbdf84001", "commitAfterChange": "9174770081243ee00ec5ba9a53055a2ca337e226", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws RewriteException", "signatureAfterChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException", "diff": ["-\tpublic TextEdit rewriteAST(IDocument document, Map options) throws RewriteException {", "-\t\t// TODO (martin/david) - check arguments on entry to API methods", "-//\t\tif (document == null) {", "-//\t\t\tthrow new IllegalArgumentException();", "-//\t\t}", "+\tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException {", "+\t\tif (document == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "-\t\t\tfEventStore.markMovedNodesRemoved();", "-\t\t\ttry {", "-\t\t\t\tCompilationUnit astRoot= (CompilationUnit) rootNode.getRoot();", "-\t\t\t\tASTRewriteAnalyzer visitor= new ASTRewriteAnalyzer(document, astRoot, result, fEventStore, fNodeStore, options);", "-\t\t\t\trootNode.accept(visitor);", "-\t\t\t} catch (RewriteRuntimeException e) {", "-\t\t\t\tthrow new RewriteException(e.getCause());", "-\t\t\t}", "+\t\t\tvalidateASTNotModified(rootNode);", "+\t\t\t", "+\t\t\tgetRewriteEventStore().markMovedNodesRemoved();", "+", "+\t\t\tCompilationUnit astRoot= (CompilationUnit) rootNode.getRoot();", "+\t\t\tASTRewriteAnalyzer visitor= new ASTRewriteAnalyzer(document, astRoot, result, this.eventStore, this.nodeStore, options);", "+\t\t\trootNode.accept(visitor); // throws IllegalArgumentException"]}], "num": 16161}
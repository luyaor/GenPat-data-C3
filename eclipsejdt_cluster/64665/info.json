{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a30bc1407c6c8de529aa3c6389b9940c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c577f5ea2a58348e5de2034d0db3be8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "signatureAfterChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "diff": ["-\t\tif (this.descriptor.parameterNonNullness == null)", "-\t\t\treturn;", "-\t\tif (this.binding.parameterNonNullness == null) {", "-\t\t\tthis.binding.parameterNonNullness = this.descriptor.parameterNonNullness;", "-\t\t\treturn;", "-\t\t}", "-\t\tBoolean[] ourNonNullness = this.binding.parameterNonNullness;", "-\t\tBoolean[] descNonNullness = this.descriptor.parameterNonNullness;", "-\t\tint len = Math.min(ourNonNullness.length, descNonNullness.length);", "+\t\tTypeBinding[] ourParameters = this.binding.parameters;", "+\t\tTypeBinding[] descParameters = this.descriptor.parameters;", "+\t\tint len = Math.min(ourParameters.length, descParameters.length);", "-\t\t\tif (ourNonNullness[i] == null) {", "-\t\t\t\tourNonNullness[i] = descNonNullness[i];", "-\t\t\t} else if (ourNonNullness[i] != descNonNullness[i]) {", "-\t\t\t\tif (ourNonNullness[i] == Boolean.TRUE) { // requested @NonNull not provided", "+\t\t\tlong ourTagBits = ourParameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tlong descTagBits = descParameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (ourTagBits == 0L) {", "+\t\t\t\tif (descTagBits != 0L && !ourParameters[i].isBaseType())", "+\t\t\t\t\tourParameters[i] = env.createAnnotatedType(ourParameters[i], descTagBits);", "+\t\t\t} else if (ourTagBits != descTagBits) {", "+\t\t\t\tif (ourTagBits == TagBits.AnnotationNonNull) { // requested @NonNull not provided", "-\t\t\t\t\tif (descNonNullness[i] == Boolean.FALSE)", "+\t\t\t\t\tif (descTagBits == TagBits.AnnotationNullable)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a7034db1d12387d340e3ff49df15e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9dbcebbcaf11825267cb12e7ee6eb7bd73431114", "commitAfterChange": "f7b0e495847f4cba5d393348688e14a6dd333c0e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic int boxing(int id)", "signatureAfterChange": "  \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env)", "diff": ["-\tpublic int boxing(int id) {", "-\t\tswitch (id) {", "-\t\t\tcase T_int :", "-\t\t\t\treturn T_JavaLangInteger;", "-\t\t\tcase T_byte :", "-\t\t\t\treturn T_JavaLangByte;", "-\t\t\tcase T_short :", "-\t\t\t\treturn T_JavaLangShort;", "-\t\t\tcase T_char :", "-\t\t\t\treturn T_JavaLangCharacter;", "-\t\t\tcase T_long :", "-\t\t\t\treturn T_JavaLangLong;", "-\t\t\tcase T_float :", "-\t\t\t\treturn T_JavaLangFloat;", "-\t\t\tcase T_double :", "-\t\t\t\treturn T_JavaLangDouble;", "-\t\t\tcase T_boolean :", "-\t\t\t\treturn T_JavaLangBoolean;", "-\t\t\tcase T_void :", "-\t\t\t\treturn T_JavaLangVoid;", "-\t\t}", "-\t\treturn id;", "-\t}", "+", "+\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env) {", "+\t\t// only called if env.options.sourceLevel >= ClassFileConstants.JDK1_5", "+\t\tif (arg.isCompatibleWith(param))", "+\t\t\treturn COMPATIBLE;", "+\t\tif (arg.isBaseType() != param.isBaseType()) {", "+\t\t\tTypeBinding convertedType = env.computeBoxingType(arg);", "+\t\t\tif (convertedType == param)", "+\t\t\t\treturn AUTOBOX_EXACT_MATCH;", "+\t\t\tif (convertedType.isCompatibleWith(param))", "+\t\t\t\treturn AUTOBOX_COMPATIBLE;", "+\t\t}", "+\t\treturn NOT_COMPATIBLE;"]}], "num": 64665}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adecc82cad3046c067d8f2b6ce240efd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cdb9cb57fa3bb2c49c440b897444b57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "93a1400f497607a4d20ba91cb800384ef4814545", "commitAfterChange": "4c8a979be85a53a687ab4e874bed870bf08df5ef", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic ITypeBinding[] getParameterTypes()", "signatureAfterChange": " \tpublic ITypeBinding[] getParameterTypes()", "diff": ["-\t\t\t\tthis.parameterTypes[i] = this.resolver.getTypeBinding(parameters[i]);", "+\t\t\t\tfinal TypeBinding parameterBinding = parameters[i];", "+\t\t\t\tif (parameterBinding != null) {", "+\t\t\t\t\tthis.parameterTypes[i] = this.resolver.getTypeBinding(parameterBinding);", "+\t\t\t\t} else {", "+\t\t\t\t\t// log error", "+\t\t\t\t\tStringBuffer message = new StringBuffer(\"Report method binding where a parameter is null:\\n\");  //$NON-NLS-1$", "+\t\t\t\t\tmessage.append(this.toString());", "+\t\t\t\t\tUtil.log(new IllegalArgumentException(), message.toString());", "+\t\t\t\t\t// report no binding since one or more parameter has no binding", "+\t\t\t\t\treturn this.parameterTypes = NO_TYPE_BINDINGS;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38909b289b49138a66c0a513dc3812ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "ec8697c65ab295bcea2d232a64ce4cee1ee12142", "commitAfterChange": "380f51fb07b01d50fdf783879a49310c31bf8dde", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding method, TypeBinding[] argumentTypes, BlockScope scope)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding method, TypeBinding[] argumentTypes, BlockScope scope)", "diff": ["-\t\t\t\tTypeBinding updatedArgumentType = argument.resolveType(scope); ", "+\t\t\t\tTypeBinding updatedArgumentType; ", "-\t\t\t\t\t// LE.resolveType may return a valid binding because resolve does not detect structural errors at this point.", "+\t\t\t\t\t// avoid complaining about non-kosher descriptor as secondary problem", "+\t\t\t\t\tboolean skipKosherCheck = method.problemId() == ProblemReasons.Ambiguous;", "+\t\t\t\t\tupdatedArgumentType = lambda.resolveType(scope, skipKosherCheck);", "+\t\t\t\t\t// additional checks, because LE.resolveType may return a valid binding even in the presence of structural errors", "+\t\t\t\t} else {", "+\t\t\t\t\tupdatedArgumentType = argument.resolveType(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "900c0b8aae87ac4a39cbb6e54405c20f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-\t} else if (requiredType instanceof ParameterizedTypeBinding) {", "+\t} else if (requiredType.hasNullTypeAnnotations() || providedType.hasNullTypeAnnotations()) {", "-\t\tif (severity < 3) {", "-\t\t\tif (providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()", "+\t\tif (severity < 2) {", "+\t\t\tif (requiredType.isParameterizedType()  && providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()", "+\t\t\t} else \tif (requiredType instanceof WildcardBinding) {", "+\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(((WildcardBinding) requiredType).bound, providedType, nullStatus));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01d596395b86572cb7bb5fadc522743", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void checkBounds(Scope scope)", "signatureAfterChange": " \tpublic void checkBounds(Scope scope)", "diff": ["-\t\tParameterizedTypeBinding parameterizedType = null;", "-\t\tif (this.resolvedType instanceof ParameterizedTypeBinding)", "-\t\t\tparameterizedType = (ParameterizedTypeBinding) this.resolvedType;", "-\t\telse if (this.resolvedType.isArrayType() && this.resolvedType.leafComponentType() instanceof ParameterizedTypeBinding)", "-\t\t\tparameterizedType = (ParameterizedTypeBinding) this.resolvedType.leafComponentType();", "-", "-\t\tif (parameterizedType != null) {", "+\t\tif (this.resolvedType.leafComponentType() instanceof ParameterizedTypeBinding) {", "+\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) this.resolvedType.leafComponentType();"]}], "num": 329}
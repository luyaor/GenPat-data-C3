{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2356dfc6c2bd91650408a2359c58ad88", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03034754506d043dd70a70467619948e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a875873381b5c93516e927c7a0f03c3097fc26b5", "commitAfterChange": "05ecd79653c57bf231b3199c70ed57222451b62a", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "diff": ["-\t\t// 'pos' can be before brace", "-\t\tRewriteEvent bodyEvent= getEvent(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\tif (bodyEvent != null && bodyEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "-\t\t\tRewriteEvent[] children= bodyEvent.getChildren();", "-\t\t\ttry {", "-\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "-\t\t\t\tif (nextTok == ITerminalSymbols.TokenNameRPAREN) { // ", "-\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "-\t\t\t\t\tnextTok= getScanner().readNext(pos, true);", "+\t\tif (isChanged(node, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY)) {", "+\t\t\tint kind= getChangeKind(node, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY);", "+\t\t\tif (kind == RewriteEvent.REMOVED) {", "+\t\t\t\ttry {", "+\t\t\t\t\t// 'pos' can be before brace", "+\t\t\t\t\tpos= getScanner().getPreviousTokenEndOffset(ITerminalSymbols.TokenNameLBRACE, pos);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\thandleException(e);", "-\t\t\t\tboolean hasBraces= (nextTok == ITerminalSymbols.TokenNameLBRACE);", "-\t\t\t\tboolean isAllRemoved= hasBraces && isAllOfKind(children, RewriteEvent.REMOVED);", "-\t\t\t\tint startIndent= getIndent(node.getStartPosition()) + 1;", "-\t\t\t\tif (!hasBraces) {", "-\t\t\t\t\tString prefix= this.formatter.ENUM_BODY_START.getPrefix(startIndent, getLineDelimiter());", "-\t\t\t\t\tdoTextInsert(pos, prefix, getEditGroup(children[0])); //$NON-NLS-1$", "-\t\t\t\t} else if (!isAllRemoved) {", "-\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "-\t\t\t\t}", "-", "-\t\t\t\tpos= rewriteParagraphList(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, pos, startIndent, 0, 0);", "-\t\t\t\t", "-\t\t\t\tif (!hasBraces) {", "-\t\t\t\t\tString suffix= this.formatter.ENUM_BODY_END.getPrefix(startIndent, getLineDelimiter());", "-\t\t\t\t\tdoTextInsert(pos, suffix, getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "-\t\t\t\t\tif (isAllRemoved) {", "-\t\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "+\t\t\t} else {", "+\t\t\t\tpos= node.getStartPosition() + node.getLength(); // insert pos", "-\t\t} else {", "-\t\t\tdoVisit(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, 0);", "+\t\t\trewriteNode(node, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, pos, ASTRewriteFormatter.SPACE); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523aad4a1977095a8ecf2eed81722f5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "167c362a4ac2baf619eec088a660153ec713b502", "commitAfterChange": "203954a19427f44b197aa09593f6f49177e09606", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "diff": ["-\t\tAssert.isTrue(false, \"Modifications in nodes of type \" + node.getClass().getName() + \" not supported yet\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\tint pos= rewriteJavadoc(node, EnumConstantDeclaration.JAVADOC_PROPERTY);", "+\t\trewriteModifiers2(node, EnumConstantDeclaration.MODIFIERS2_PROPERTY, pos);", "+\t\tpos= rewriteRequiredNode(node, EnumConstantDeclaration.NAME_PROPERTY);", "+\t\tRewriteEvent argsEvent= getEvent(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY);", "+\t\tif (argsEvent != null && argsEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\tRewriteEvent[] children= argsEvent.getChildren();", "+\t\t\ttry {", "+\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "+\t\t\t\tboolean hasParents= (nextTok == ITerminalSymbols.TokenNameLPAREN);", "+\t\t\t\tboolean isAllRemoved= hasParents && isAllOfKind(children, RewriteEvent.REMOVED);", "+\t\t\t\tString prefix= \"\"; //$NON-NLS-1$", "+\t\t\t\tif (!hasParents) {", "+\t\t\t\t\tprefix= \"(\"; //$NON-NLS-1$", "+\t\t\t\t} else if (!isAllRemoved) {", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t}", "+\t\t\t\tpos= rewriteNodeList(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, pos, prefix, \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t", "+\t\t\t\tif (!hasParents) {", "+\t\t\t\t\tdoTextInsert(pos, \")\", getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "+\t\t\t\t} else if (isAllRemoved) {", "+\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "+\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "+\t\t\t\t\tpos= afterClosing;", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tpos= doVisit(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, 0);", "+\t\t}", "+\t\t// 'pos' can be before brace", "+\t\t", "+\t\tRewriteEvent bodyEvent= getEvent(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\tif (bodyEvent != null && bodyEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\tRewriteEvent[] children= bodyEvent.getChildren();", "+\t\t\ttry {", "+\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "+\t\t\t\tif (nextTok == ITerminalSymbols.TokenNameRPAREN) { // ", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t\tnextTok= getScanner().readNext(pos, true);", "+\t\t\t\t}", "+\t\t\t\tboolean hasBraces= (nextTok == ITerminalSymbols.TokenNameLBRACE);", "+\t\t\t\tboolean isAllRemoved= hasBraces && isAllOfKind(children, RewriteEvent.REMOVED);", "+\t\t\t\tint startIndent= getIndent(node.getStartPosition()) + 1;", "+\t\t\t\tif (!hasBraces) {", "+\t\t\t\t\tString prefix= this.formatter.ENUM_BODY_START.getPrefix(startIndent, getLineDelimiter());", "+\t\t\t\t\tdoTextInsert(pos, prefix, getEditGroup(children[0])); //$NON-NLS-1$", "+\t\t\t\t} else if (!isAllRemoved) {", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t}", "+", "+\t\t\t\tpos= rewriteParagraphList(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, pos, startIndent, 0, 0);", "+\t\t\t\t", "+\t\t\t\tif (!hasBraces) {", "+\t\t\t\t\tString suffix= this.formatter.ENUM_BODY_END.getPrefix(startIndent, getLineDelimiter());", "+\t\t\t\t\tdoTextInsert(pos, suffix, getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "+\t\t\t\t\tif (isAllRemoved) {", "+\t\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdoVisit(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, 0);", "+\t\t}"]}], "num": 50326}
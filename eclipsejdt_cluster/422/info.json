{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "742c177ff850e7ec863a8303301ce31e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f14076b8490fc578d592536c6af497d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "10a59ab8fb6256e59e155c071a356402964eb736", "commitAfterChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "signatureAfterChange": " \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["+\t\treturn true;", "+\t\t", "-\t\tExpression resultExpression = (Expression) this.resultExpressions.get(s); // should be same as for s", "+\t//\tExpression resultExpression = (Expression) this.resultExpressions.get(s); // should be same as for s", "-\t\ts = s.capture(this.enclosingScope, this.sourceEnd);", "-\t\tsSam = s.getSingleAbstractMethod(this.enclosingScope);", "-\t\treturn resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType);", "+//\t\ts = s.capture(this.enclosingScope, this.sourceEnd);", "+//\t\tsSam = s.getSingleAbstractMethod(this.enclosingScope);", "+//\t\treturn resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd9161453d74a4d909089c1d9e2b396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "commitAfterChange": "e097bd9e8b95f2f5601006e28238301c69bf5baf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding)", "signatureAfterChange": "  \tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding)", "diff": ["-\t\t\tReferenceBinding previousType = null;", "-\t\t\t\tif (this.resolvedType instanceof ReferenceBinding)", "-\t\t\t\t\tpreviousType = (ReferenceBinding) this.resolvedType;", "-\t\t\t}", "-\t\t\tif (this.annotations != null && this.annotations[tokenIndex] != null) {", "-\t\t\t\tthis.resolvedType = captureTypeAnnotations(scope, previousType, this.resolvedType, this.annotations[tokenIndex]);"]}], "num": 422}
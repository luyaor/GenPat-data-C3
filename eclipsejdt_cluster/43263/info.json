{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2c8cd986d7fc69f910ad163dfbe9188", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef3207be83e1a40c37cebeb98c9ec91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/StringLiteral.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic StringLiteral(char[] token, int s, int e)", "signatureAfterChange": "  \tpublic StringLiteral(char[] token, int start, int end, int lineNumber)", "diff": ["-\tpublic StringLiteral(char[] token, int s, int e) {", "+\tpublic StringLiteral(char[] token, int start, int end, int lineNumber) {", "-\t\tthis(s,e);", "-\t\tsource = token;", "+\t\tthis(start,end);", "+\t\tthis.source = token;", "+\t\tthis.lineNumber = lineNumber - 1; // line number is 1 based "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b1eaa1189d10738c8c392116e2bfe82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredInitializer.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void updateSourceEndIfNecessary(int sourceEnd)", "signatureAfterChange": " public void updateSourceEndIfNecessary(int bodyStart, int bodyEnd)", "diff": ["-public void updateSourceEndIfNecessary(int sourceEnd){", "+public void updateSourceEndIfNecessary(int bodyStart, int bodyEnd){", "-\t\tthis.fieldDeclaration.sourceEnd = sourceEnd;", "-\t\tthis.fieldDeclaration.declarationSourceEnd = sourceEnd;", "-\t\tthis.fieldDeclaration.declarationEnd = sourceEnd;", "+\t\tthis.fieldDeclaration.sourceEnd = bodyEnd;", "+\t\tthis.fieldDeclaration.declarationSourceEnd = bodyEnd;", "+\t\tthis.fieldDeclaration.declarationEnd = bodyEnd;", "+\t\t((Initializer)this.fieldDeclaration).bodyEnd = bodyStart - 1;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7296738704bde361e184a149edf53f08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "302f1877ad74fd63c3cd5c56aacc5cc510a8d88b", "commitAfterChange": "240c118718aa210b0d9c1362ebe7843e41fba8b4", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws CoreException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet, int expected) throws CoreException", "diff": ["-protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws CoreException {", "+protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet, int expected) throws CoreException {", "-\tfor (int index = 0, length = possibleMatches.length; index < length;) {", "+\tint length = possibleMatches.length;", "+\t// increase progress from duplicate matches not stored in matchSet while adding...", "+\tif (this.progressMonitor != null) {", "+\t\tthis.progressWorked += expected-length;", "+\t\tthis.progressMonitor.worked( expected-length);", "+\t}", "+\t// locate matches (processed matches are limited to avoid problem while using VM default memory heap size)", "+\tfor (int index = 0; index < length;) {", "-\t\tif (this.progressMonitor != null)", "-\t\t\tthis.progressMonitor.worked(max);"]}], "num": 43263}
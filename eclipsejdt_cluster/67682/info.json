{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4f136e73200710f2365a7d05a80a969", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05361082e699a663a0e4e5b905f59567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void resolve(ClassScope classScope)", "signatureAfterChange": " \tpublic void resolve(ClassScope classScope)", "diff": ["+\t\tinternalResolve(classScope);", "+\t}", "-\t\t\tclassScope.problemReporter().javadocUnexpectedTag(param.tagSourceStart, param.tagSourceEnd);", "-\t\tresolveTypeParameterTags(classScope, true);", "-\t\t\tclassScope.problemReporter().javadocUnexpectedTag(this.returnStatement.sourceStart, this.returnStatement.sourceEnd);", "-\t\t\tclassScope.problemReporter().javadocUnexpectedTag(start, end);", "-\t\t\tresolveReference(this.seeReferences[i], classScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cd6a5eeb01ff7b88afd12e4f2f9d3d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "b86c62c9276301f4293d579436f1016659c6742c", "commitAfterChange": "9816d147cfcd9317931332a2edf2549b9a55fa79", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void adaptRegions()", "signatureAfterChange": " \tprivate void adaptRegions()", "diff": ["-\t\t\t\tif (adaptedOffset < 0) adaptedOffset = -adaptedOffset;", "-\t\t\t\tadaptedLength = length + offset - adaptedOffset;", "-\t\t\t\tcommentIndex = index;", "-\t\t\t\t// include also the indentation edit just before the comment if any", "-\t\t\t\tfor (int j=0; j<this.editsIndex; j++) {", "-\t\t\t\t\tint editOffset = this.edits[j].offset;", "-\t\t\t\t\tint editEnd = editOffset + this.edits[j].length;", "-\t\t\t\t\tif (editEnd == adaptedOffset) {", "-\t\t\t\t\t\tif (j > 0 && this.edits[j].replacement.trim().length() == 0) {", "-\t\t\t\t\t\t\tadaptedLength += adaptedOffset - this.edits[j].offset;", "-\t\t\t\t\t\t\tadaptedOffset = editOffset;", "+\t\t\t\tif (adaptedOffset >= 0) {", "+\t\t\t\t\t// adapt only javadoc or block commments. Since fix for bug", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=238210", "+\t\t\t\t\t// edits in line comments only concerns whitespaces hence can be", "+\t\t\t\t\t// treated as edits in code", "+\t\t\t\t\tadaptedLength = length + offset - adaptedOffset;", "+\t\t\t\t\tcommentIndex = index;", "+\t\t\t\t\t// include also the indentation edit just before the comment if any", "+\t\t\t\t\tfor (int j=0; j<this.editsIndex; j++) {", "+\t\t\t\t\t\tint editOffset = this.edits[j].offset;", "+\t\t\t\t\t\tint editEnd = editOffset + this.edits[j].length;", "+\t\t\t\t\t\tif (editEnd == adaptedOffset) {", "+\t\t\t\t\t\t\tif (j > 0 && this.edits[j].replacement.trim().length() == 0) {", "+\t\t\t\t\t\t\t\tadaptedLength += adaptedOffset - this.edits[j].offset;", "+\t\t\t\t\t\t\t\tadaptedOffset = editOffset;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (editEnd > adaptedOffset) {", "-\t\t\t\t\t} else if (editEnd > adaptedOffset) {", "-\t\t\t\t\t\tbreak;", "-\t\t\tif (index >= 0) {", "+\t\t\tif (index >= 0 && this.commentPositions[index][0] >= 0) { // only javadoc or block comment", "-\t\t\t\tcontinue;", "-\t\t\t}", "-", "-\t\t\tif (offset > 0) {", "-\t\t\t\tif (isAdaptableRegion(offset, length)) {", "-\t\t\t\t\t// if we have a selection, search for overlapping edits", "-\t\t\t\t\tint upperBound = offset;", "-\t\t\t\t\tint lowerBound = 0;", "-\t\t\t\t\tboolean upperFound = false;", "-\t\t\t\t\tint regionEnd = offset + length;", "-\t\t\t\t\tfor (int j = 0, max2 = this.editsIndex - 1; j <= max2; j++) {", "-\t\t\t\t\t\t// search for lower bound", "-\t\t\t\t\t\tint editOffset = this.edits[j].offset;", "-\t\t\t\t\t\tif (upperFound && lowerBound == 0) {", "-\t\t\t\t\t\t\tint editLength = this.edits[j].length;", "-\t\t\t\t\t\t\tif (editOffset == regionEnd) { // matching edit found", "-\t\t\t\t\t\t\t\tlowerBound = regionEnd;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t} else if (editOffset + editLength < regionEnd) {", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tlowerBound = editOffset + editLength; // upper and lower bounds found", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// search for upper bound", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tint next = j+1;", "-\t\t\t\t\t\t\tif (next == max2) {", "-\t\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=213284", "-\t\t\t\t\t\t\t\t// checked all edits, no upper bound found: leave the loop", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.edits[next].offset < offset) {", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tupperBound = editOffset;", "-\t\t\t\t\t\t\t\tupperFound = true;", "-\t\t\t\t\t\t\t\t// verify if region end is at EOF", "-\t\t\t\t\t\t\t\tif (this.scannerEndPosition == regionEnd) {", "-\t\t\t\t\t\t\t\t\tlowerBound = this.scannerEndPosition - 1;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (lowerBound != 0) {", "-\t\t\t\t\t\tif (offset != upperBound || regionEnd != lowerBound) { // ensure we found a different region", "-\t\t\t\t\t\t\tthis.adaptedRegions[i] = new Region(upperBound,", "-\t\t\t\t\t\t\t\t\tlowerBound - upperBound);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// keep other unadaptable region", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.adaptedRegions[i] = this.regions[i];", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.adaptedRegions[i] = this.regions[i];", "-\t\t\t\t}", "-\t\t\t\tthis.adaptedRegions[i] = this.regions[i];", "+\t\t\t\tthis.adaptedRegions[i] = aRegion;"]}], "num": 67682}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83a9ec8918d4e5f0f003fc9665be3934", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b56bc8629bb675ffa2e2ddbe486f229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "6654820265cfe7764e384e0eaabd31ce71d5edd3", "commitAfterChange": "4eaab794bf6dc1418675f45525d0cd74715d55ef", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\t\t\t\tIRegion rangeBefore = currDecl.getPrecedingCommentRange();", "+\t\t\t\t\t\tif (rangeBefore != null && currPos > rangeBefore.getOffset()) {", "+\t\t\t\t\t\t\t// moved ahead of the leading comments, bring the currPos back", "+\t\t\t\t\t\t\tcurrPos = rangeBefore.getOffset();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\t\tstringsToInsert.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (rangeBefore != null && currPos > rangeBefore.getOffset()) {", "+\t\t\t\t\t\t\t\t// moved ahead of the leading comments, bring the currPos back", "+\t\t\t\t\t\t\t\tcurrPos = rangeBefore.getOffset();", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae802d15113a81924eb9d3476a627847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7499dd3309f66badc0b9a54f55f1bb48d32b67b2", "commitAfterChange": "7fcce8c57c783f249352148215037cdd2cb340b1", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, name)) {", "-\t\t\t\t\t\t\tif (foundType != null && foundType != sourceType)", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\treturn sourceType;", "-\t\t\t\t\t\t}", "-", "+\t\t\t\t\t\t// 6.5.5.1 - simple name favors member type over top-level type in same unit", "+\t\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, name)) {", "+\t\t\t\t\t\t\tif (foundType != null && foundType != sourceType)", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\treturn sourceType;", "+\t\t\t\t\t\t}"]}], "num": 16781}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b3504841537bf06ac1da09afdd4e0b4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32aa3200b3b8d2bfafb1d55635c57bea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "64be0e1955b0627416c496a964aba7a1211321fc", "commitAfterChange": "1b6125b922b604588bed2b5782d039674eb294dc", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void testBug118823b() throws CoreException, InterruptedException", "signatureAfterChange": " public void testBug118823b() throws CoreException, InterruptedException", "diff": ["-", "-\t\t// Get working copies and reconcile", "-\t\tthis.wcOwner = new WorkingCopyOwner() {};", "-\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get first working copy and verify that there's no error", "-\t\tthis.workingCopies[0].getBuffer().setContents(source1);", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get second working copy and verify that there's one error (missing secondary type)", "-\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\t// Add secondary and verify that there's no longer any error", "+\t\t// Modify first working copy and verify that there's still no error", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);", "+", "+\t\t// Get second working copy and verify that there's any longer error", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "+\t\tthis.workingCopies[1].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "662ec5b7207bdcd6bc42de6ef40889c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "64be0e1955b0627416c496a964aba7a1211321fc", "commitAfterChange": "1b6125b922b604588bed2b5782d039674eb294dc", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void testBug118823c() throws CoreException, InterruptedException", "signatureAfterChange": " public void testBug118823c() throws CoreException, InterruptedException", "diff": ["-", "-\t\t// Get working copies and reconcile", "-\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get first working copy and verify that there's no error", "-\t\tthis.workingCopies[0].getBuffer().setContents(source1);", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get second working copy and verify that there's one error (missing secondary type)", "-\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+", "+\t\t// Get first working copy and verify that there's still no error", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);", "+\t\tthis.workingCopies[0].commitWorkingCopy(true, null);", "+", "+\t\t// Get second working copy and verify that there's any longer error", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "+\t\tthis.workingCopies[1].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);"]}], "num": 41861}
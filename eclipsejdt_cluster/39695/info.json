{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bd849e55b8bd60ed0d9583a191c0990", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05034d272c88c81493b905c263fe86c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "4aa9bc6aa2cb666fb0721f9b95f7c7e969829a0c", "commitAfterChange": "39745a85705361f7e5b8ca890f80a07d85799adc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "signatureAfterChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "diff": ["-\tfor (int i = 0, a = simpleNames.length; i < a; i++) {\r", "-\t\tchar[] simpleName = simpleNames[i];\r", "-\t\tfor (int j = 0, b = simpleNameReferences.length; j < b; j++) {\r", "-\t\t\tif (simpleName == simpleNameReferences[j]) {\r", "-\t\t\t\tfor (int k = 0, c = qualifiedNames.length; k < c; k++) {\r", "-\t\t\t\t\tchar[][] qualifiedName = qualifiedNames[k];\r", "-\t\t\t\t\tfor (int l = 0, d = qualifiedReferences.length; l < d; l++) {\r", "-\t\t\t\t\t\tif (qualifiedName == qualifiedReferences[l]) {\r", "-\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\t\t\tSystem.out.println(\"  found match with \" //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\t\t+ new String(simpleName) + \" in \" + CharOperation.toString(qualifiedName)); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\treturn false;\r", "+\t// if either collection of names is null, it means it contained a well known name so we know it already has a match\r", "+\tif (simpleNames == null) {\r", "+\t\tif (JavaBuilder.DEBUG) System.out.println(\"  found well known match\"); //$NON-NLS-1$\r", "+\t\treturn true;\r", "+\t}\r", "+\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "+\t\tif (includes(simpleNames[i])) {\r", "+\t\t\tif (qualifiedNames == null) {\r", "+\t\t\t\tif (JavaBuilder.DEBUG) System.out.println(\"  found match in well known package to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "+\t\t\t\treturn true;\r", "+\t\t\tfor (int j = 0, m = qualifiedNames.length; j < m; j++) {\r", "+\t\t\t\tchar[][] qualifiedName = qualifiedNames[j];\r", "+\t\t\t\tif (qualifiedName.length == 1 ? includes(qualifiedName[0]) : includes(qualifiedName)) {\r", "+\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"  found match in \" + CharOperation.toString(qualifiedName) //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t+ \" to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc72b59b58242b79b00cac9de568396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "2fdac50d0a994a41e3b73d3202a0de983b014e1d", "commitAfterChange": "5291cd66203d5d42725b1c4b5cba50a5232bc244", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static void setUserLibraries(String[] newNames, UserLibrary[] newLibs, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \t \tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\t */", "-\tpublic static void setUserLibraries(String[] newNames, UserLibrary[] newLibs, IProgressMonitor monitor) throws JavaModelException {", "-\t\tAssert.isTrue(newNames.length == newLibs.length, \"names and libraries should have the same length\"); //$NON-NLS-1$", "-\t\t", "-\t\tif (monitor == null) {", "-\t\t\tmonitor= new NullProgressMonitor();", "-\t\t}", "-\t\t", "-\t\ttry {", "-\t\t\tmonitor.beginTask(\"\", newNames.length);\t//$NON-NLS-1$", "-\t\t\tint last= newNames.length - 1;", "-\t\t\tfor (int i= 0; i < newLibs.length; i++) {", "-\t\t\t\tinternalSetUserLibrary(newNames[i], newLibs[i], i == last, true, new SubProgressMonitor(monitor, 1));", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tmonitor.done();", "-\t\t}", "-\t}", "+\t", "+\tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\ttry {", "+\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\treturn;", "+\t\t}", "+\t\ttry {", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t}", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "926ba12e4bc4f390fb307e293c56bd39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "ee88edc6852ca240266a0a82beb39fc6a3f8a578", "commitAfterChange": "321d0d2c500c247f0447784febbb6a14ba5499be", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, int length, MatchLocator locator)", "signatureAfterChange": " public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, int length, MatchLocator locator)", "diff": ["-\t\t// Redo arguments verif as in this case previous filter may accept different ones", "-\t\tboolean equals = true;", "-\t\tif (this.pattern.parameterSimpleNames != null) {", "-\t\t\tint paramLength = this.pattern.parameterSimpleNames.length;", "-\t\t\tfor (int i=0; equals && i<paramLength; i++) {", "-\t\t\t\tint level = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], methodBinding.parameters[i]);", "-\t\t\t\tif (level == IMPOSSIBLE_MATCH) equals = false;", "+\t\t// If method parameters verification was not valid, then try to see if method arguments can match a method in hierarchy", "+\t\tif (this.methodDeclarationsWithInvalidParam.containsKey(reference)) {", "+\t\t\t// First see if this reference has already been resolved => report match if validated", "+\t\t\tBoolean report = (Boolean) this.methodDeclarationsWithInvalidParam.get(reference);", "+\t\t\tif (report != null) {", "+\t\t\t\tif (report.booleanValue()) {", "+\t\t\t\t\treturn super.newDeclarationMatch(reference, element, elementBinding, accuracy, length, locator);", "+\t\t\t\t}", "+\t\t\t\treturn null;", "-\t\t}", "-\t\t// If arguments are not equals then try to see if method arguments can match erasures in hierarchy", "-\t\tif (!equals && this.pattern.findDeclarations && this.mayBeGeneric) {", "-\t\t\tif (isErasureMethodOverride(methodBinding.declaringClass, methodBinding)) {", "+\t\t\tif (matchOverriddenMethod(methodBinding.declaringClass, methodBinding, null)) {", "+\t\t\t\tthis.methodDeclarationsWithInvalidParam.put(reference, Boolean.TRUE);", "-\t\t\t\t\tpatternBinding = patternBinding.original();", "-\t\t\t\t\tif (!isErasureMethodOverride(patternBinding.declaringClass, patternBinding)) {", "+\t\t\t\t\tif (!matchOverriddenMethod(patternBinding.declaringClass, patternBinding, methodBinding)) {", "+\t\t\t\t\t\tthis.methodDeclarationsWithInvalidParam.put(reference, Boolean.FALSE);", "+\t\t\t\tthis.methodDeclarationsWithInvalidParam.put(reference, Boolean.TRUE);", "+\t\t\tthis.methodDeclarationsWithInvalidParam.put(reference, Boolean.FALSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcddc1dd5824e0e86aeb380aae7bc545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java", "commitBeforeChange": "c1f8b23725dd7ea4b476b40485a277dac1e772a8", "commitAfterChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t \tpublic static boolean hasAnnotationInstance( char[] source )", "signatureAfterChange": " \tpublic static AnnotationProcessorFactory getFactoryForAnnotation( \t\t\tfinal String fullyQualifiedAnnotation, \t\t\tfinal IProject project)", "diff": ["+\tpublic static AnnotationProcessorFactory getFactoryForAnnotation(", "+\t\t\tfinal String fullyQualifiedAnnotation,", "+\t\t\tfinal IProject project) {", "-\t", "-\tpublic static boolean hasAnnotationInstance( char[] source ) {", "-\t\ttry {\t\t", "-\t\t\tif ( source == null )", "-\t\t\t\treturn false;", "-\t\t\tIScanner scanner = ToolFactory.createScanner( ", "-\t\t\t\tfalse, false, false, JavaCore.VERSION_1_5 );", "-\t\t\tscanner.setSource( source );", "-\t\t\tint token = scanner.getNextToken();", "-\t\t\twhile ( token != ITerminalSymbols.TokenNameEOF ) {", "-\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\tif ( token == ITerminalSymbols.TokenNameAT )", "-\t\t\t\t{", "-\t\t\t\t\t//", "-\t\t\t\t\t// found an @ sign, see if next token is \"interface\"", "-\t\t\t\t\t// @interface is an annotation decl and not an annotation", "-\t\t\t\t\t// instance.  ", "-\t\t\t\t\t//", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t\tif ( token != ITerminalSymbols.TokenNameinterface )", "-\t\t\t\t\t\treturn true;", "+\t\t// TODO: go to config for project to pull out factories", "+\t\tList<AnnotationProcessorFactory> allFactories = ", "+\t\t\tAptCompilationParticipant.getInstance().getAllFactories();", "+\t\t", "+\t\tfor (AnnotationProcessorFactory factory : allFactories) {", "+\t\t\tCollection<String> supportedAnnos = factory.supportedAnnotationTypes();", "+\t\t\tfor (String anno : supportedAnnos) {", "+\t\t\t\tif (anno.equals(fullyQualifiedAnnotation)) {", "+\t\t\t\t\treturn factory;", "+\t\t\t\t}", "+\t\t\t\telse if (\"*\".equals(anno)) {", "+\t\t\t\t\t\treturn factory;", "+\t\t\t\t}", "+\t\t\t\telse if (anno.endsWith(\"*\")) {", "+\t\t\t\t\tfinal String prefix = anno.substring(0,", "+\t\t\t\t\t\t\tanno.length() - 2);", "+\t\t\t\t\tif (fullyQualifiedAnnotation.startsWith(prefix)) {", "+\t\t\t\t\t\treturn factory;", "+\t\t\t\t\t}", "-\t\t\treturn false;", "-\t\tcatch( InvalidInputException iie )", "-\t\t{", "-\t\t\t// lex error, so report false", "-\t\t\treturn false;", "-\t\t}", "-\t\tcatch( Exception e )", "-\t\t{", "-\t\t\t// TODO:  deal with this exception", "-\t\t\te.printStackTrace();", "-\t\t\treturn false;", "-\t\t}", "-\t}", "+\t\treturn null;"]}], "num": 39695}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54925e8e71c271ac10c8ed0c8e4aad6b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b73c442fd7fff21daf4916fe8251d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b5a77485d9f402d8e9320bc140c7dcd6fc18b9c8", "commitAfterChange": "168f2cd311cda9055baec08babe652e5b9c3fb27", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\tif (level != null) { // ensure that the reference has not been already reported while visiting", "+\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);", "-\t\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e60b037cf1bf08320bf2de449e0fc38a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "6660c11fbd338cdace0b80e024a9e47f8c34c2d5", "commitAfterChange": "64151d299c94cd994364e344797612fa2bd1a461", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tprotected IJavaElement getSourceElementAt(int position) throws JavaModelException", "signatureAfterChange": " \tprotected IJavaElement getSourceElementAt(int position) throws JavaModelException", "diff": ["-\t\t\tint i;", "-\t\t\tfor (i = 0; i < children.length; i++) {", "+\t\t\tfor (int i = children.length-1; i >= 0; i--) {", "-\t\t\t\t\tif (position < range.getOffset() + range.getLength() && position >= range.getOffset()) {", "-\t\t\t\t\t\tif (child instanceof IParent) {", "+\t\t\t\t\tint start = range.getOffset();", "+\t\t\t\t\tint end = start + range.getLength();", "+\t\t\t\t\tif (start <= position && position <= end) {", "+\t\t\t\t\t\tif (child instanceof IField) {", "+\t\t\t\t\t\t\t// check muti-declaration case (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=39943)", "+\t\t\t\t\t\t\tint declarationStart = start;", "+\t\t\t\t\t\t\tSourceRefElement candidate = null;", "+\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\t// check name range", "+\t\t\t\t\t\t\t\trange = ((IField)child).getNameRange();", "+\t\t\t\t\t\t\t\tif (position <= range.getOffset() + range.getLength()) {", "+\t\t\t\t\t\t\t\t\tcandidate = child;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\treturn candidate == null ? child.getSourceElementAt(position) : candidate.getSourceElementAt(position);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tchild = --i>=0 ? (SourceRefElement) children[i] : null;", "+\t\t\t\t\t\t\t} while (child != null && child.getSourceRange().getOffset() == declarationStart);", "+\t\t\t\t\t\t\t// position in field's type: use first field", "+\t\t\t\t\t\t\treturn candidate.getSourceElementAt(position);", "+\t\t\t\t\t\t} else if (child instanceof IParent) {"]}], "num": 63495}
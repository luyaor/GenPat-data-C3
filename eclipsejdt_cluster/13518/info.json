{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fb1d9519807df908d2b567940698314", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f9b6c001e04577b7cf29c01317c9be0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void test037b()", "signatureAfterChange": " \tpublic void test037b()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in XX.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t             ^^\\n\" +", "-\t\t\t\"The type XX must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in XX.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                              ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type XX has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in XX.java (at line 2)\\n\" +", "-\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t      ^^\\n\" +", "-\t\t\t\"The type YY must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in XX.java (at line 2)\\n\" +", "-\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type YY has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in XX.java (at line 3)\\n\" +", "-\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t      ^^\\n\" +", "-\t\t\t\"The type ZZ must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in XX.java (at line 3)\\n\" +", "-\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type ZZ has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in XX.java (at line 4)\\n\" +", "-\t\t\t\"\tinterface I { void foo(A a); }\\n\" +", "-\t\t\t\"\t                       ^\\n\" +", "-\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in XX.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"The type XX must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in XX.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type XX has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in XX.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The type YY must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in XX.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type YY has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in XX.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The type ZZ must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in XX.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type ZZ has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in XX.java (at line 4)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in XX.java (at line 6)\\n\" + ", "+\t\t\t\"\tinterface K extends I { void foo(A<String> a); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\\n\" + ", "-\t\t\t// XX/YY/ZZ is not abstract and does not override abstract method foo(A) in I"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c128dfa4c8da98b9a959acfbd4e84044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public void test111()", "signatureAfterChange": "     public void test111()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tinterface Iface extends Ann {\\n\" + ", "-\t\t\t\"\t                        ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for Iface\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tabstract class Klass implements Ann {\\n\" + ", "-\t\t\t\"\t                                ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for Klass\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tclass SubKlass extends Klass {\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^\\n\" + ", "-\t\t\t\"The type SubKlass must implement the inherited abstract method Ann.foo()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tclass AnnImpl implements Ann {\\n\" + ", "-\t\t\t\"\t                         ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for AnnImpl\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\t\"\tpublic boolean equals(Object obj) { return false; }\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method equals(Object) of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 22)\\n\" + ", "-\t\t\t\"\tpublic int hashCode() { return 0; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method hashCode() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 23)\\n\" + ", "-\t\t\t\"\tpublic String toString() { return null; }\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method toString() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+    \t\t\"\tinterface Iface extends Ann {\\n\" + ", "+    \t\t\"\t                        ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for Iface\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+    \t\t\"\tabstract class Klass implements Ann {\\n\" + ", "+    \t\t\"\t                                ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for Klass\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+    \t\t\"\tclass SubKlass extends Klass {\\n\" + ", "+    \t\t\"\t      ^^^^^^^^\\n\" + ", "+    \t\t\"The type SubKlass must implement the inherited abstract method Ann.foo()\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+    \t\t\"\tclass AnnImpl implements Ann {\\n\" + ", "+    \t\t\"\t                         ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for AnnImpl\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "+    \t\t\"\tpublic boolean equals(Object obj) { return false; }\\n\" + ", "+    \t\t\"\t               ^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"The method equals(Object) of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"6. WARNING in X.java (at line 22)\\n\" + ", "+    \t\t\"\tpublic int hashCode() { return 0; }\\n\" + ", "+    \t\t\"\t           ^^^^^^^^^^\\n\" + ", "+    \t\t\"The method hashCode() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"7. WARNING in X.java (at line 23)\\n\" + ", "+    \t\t\"\tpublic String toString() { return null; }\\n\" + ", "+    \t\t\"\t              ^^^^^^^^^^\\n\" + ", "+    \t\t\"The method toString() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"8. WARNING in X.java (at line 30)\\n\" + ", "+    \t\t\"\tClass c = SubKlass.class;\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}], "num": 13518}
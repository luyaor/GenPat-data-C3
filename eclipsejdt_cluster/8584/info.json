{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caa23c76e2a69e7ce756e6eb1274c751", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0081b63dbdf7d4c4504b8aefbcbafc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "ca2d3ce8265fe41695ca043d40ccc35d5ce77b25", "commitAfterChange": "8fd47ede750ba6005aab3e86ceccb03a6e16dba8", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "signatureAfterChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "diff": ["-\t\tHashSet containerPaths = (HashSet) allContainerPaths.get(javaProjectToInit);", "-\t\tif (containerPaths == null) {", "-\t\t\tcontainerPaths = new HashSet();", "-\t\t\tallContainerPaths.put(javaProjectToInit, containerPaths);", "+\t\tif (javaProjectToInit != null) {", "+\t\t\tHashSet containerPaths = (HashSet) allContainerPaths.get(javaProjectToInit);", "+\t\t\tif (containerPaths == null) {", "+\t\t\t\tcontainerPaths = new HashSet();", "+\t\t\t\tallContainerPaths.put(javaProjectToInit, containerPaths);", "+\t\t\t}", "+\t\t\tcontainerPaths.add(containerToInit);", "+\t\t\t// mark container as being initialized", "+\t\t\tcontainerAddInitializationInProgress(javaProjectToInit, containerToInit);", "-\t\tcontainerPaths.add(containerToInit);", "-\t\t// mark container as being initialized", "-\t\tcontainerAddInitializationInProgress(javaProjectToInit, containerToInit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d49d3a08e6fe3ef22e3e6cda7b14038", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "70d26734867455ac1b14a226bd371e6f98a4d2ae", "commitAfterChange": "e72c40632f386c18405c37cebd5b66e2533b6c7e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\t\tString[] registeredContainerIDs = getRegisteredContainerIDs();", "-\t\tfor (int i = 0; i < registeredContainerIDs.length; i++) {", "-\t\t\tString containerID = registeredContainerIDs[i];", "-\t\t\tIterator projectIterator = this.containers.keySet().iterator();", "-\t\t\twhile (projectIterator.hasNext()){", "-\t\t\t\tIJavaProject project = (IJavaProject)projectIterator.next();", "-\t\t\t\tMap projectContainers = (Map)this.containers.get(project);", "-\t\t\t\tif (projectContainers != null){", "-\t\t\t\t\tIterator containerIterator = projectContainers.keySet().iterator();", "-\t\t\t\t\twhile (containerIterator.hasNext()){", "-\t\t\t\t\t\tIPath containerPath = (IPath)containerIterator.next();", "-\t\t\t\t\t\tif (containerPath.segment(0).equals(containerID)) { // registered container", "-\t\t\t\t\t\t\tprojectContainers.put(containerPath, null); // reset container value, but leave entry in Map", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tcontainersReset(getRegisteredContainerIDs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88e80059ec588084006438be74e9d6e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void loadVariables() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\tpublic void loadVariables() throws CoreException {", "+\tpublic void loadVariablesAndContainers() throws CoreException {", "-\t\t// load variables from preferences into cache", "+\t\t// load variables and containers from preferences into cache", "-\t\tint prefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "+\t\tint variablePrefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "-\t\t\t\tString varName = propertyName.substring(prefixLength);", "+\t\t\t\tString varName = propertyName.substring(variablePrefixLength);", "+\t\t\t\tPreviousSessionVariables.put(varName, varPath);", "-\t\t}\t\t", "+\t\t\tif (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "+\t\t\t\trecreatePersistedContainer(propertyName, preferences.getString(propertyName).trim(), true/*add to previous session values*/);", "+\t\t\t}", "+\t\t}", "+\t\t}", "+\t\t// override persisted values for containers which have a registered initializer", "+\t\tString[] registeredContainerIDs = getRegisteredContainerIDs();", "+\t\tfor (int i = 0; i < registeredContainerIDs.length; i++) {", "+\t\t\tString containerID = registeredContainerIDs[i];", "+\t\t\tIterator projectIterator = Containers.keySet().iterator();", "+\t\t\twhile (projectIterator.hasNext()){", "+\t\t\t\tIJavaProject project = (IJavaProject)projectIterator.next();", "+\t\t\t\tMap projectContainers = (Map)Containers.get(project);", "+\t\t\t\tif (projectContainers != null){", "+\t\t\t\t\tIterator containerIterator = projectContainers.keySet().iterator();", "+\t\t\t\t\twhile (containerIterator.hasNext()){", "+\t\t\t\t\t\tIPath containerPath = (IPath)containerIterator.next();", "+\t\t\t\t\t\tif (containerPath.segment(0).equals(containerID)) { // registered container", "+\t\t\t\t\t\t\tprojectContainers.put(containerPath, null); // reset container value, but leave entry in Map", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 8584}
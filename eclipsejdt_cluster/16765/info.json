{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e520c06178cf4eb0e093c5d19dbce56", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c99b0eaa8f9579e166b6f68be673bfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeErasureTests.java", "commitBeforeChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "commitAfterChange": "1ab7b833f2e8fe1eaa17a4c72f8b9580f4ae1592", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprotected void search(String patternString, int searchFor, int limitTo, boolean rawMatch, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "signatureAfterChange": " \tprotected void search(String patternString, int searchFor, int limitTo, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "diff": ["-", "-\tprotected void search(String patternString, int searchFor, int limitTo, boolean rawMatch, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException {", "-\t\tint matchMode = patternString.indexOf('*') != -1 || patternString.indexOf('?') != -1", "-\t\t\t? SearchPattern.R_PATTERN_MATCH", "-\t\t\t: SearchPattern.R_EXACT_MATCH;", "-\t\tint matchRule = matchMode | SearchPattern.R_CASE_SENSITIVE;", "-\t\tmatchRule |= SearchPattern.R_ERASURE_MATCH; // force rule to match erasure", "-\t\tthis.searchPattern = (JavaSearchPattern) SearchPattern.createPattern(", "-\t\t\tpatternString, ", "-\t\t\tsearchFor,", "-\t\t\tlimitTo, ", "-\t\t\tmatchRule);", "-\t\tnew SearchEngine().search(", "-\t\t\tthis.searchPattern,", "-\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "-\t\t\tscope,", "-\t\t\trequestor,", "-\t\t\tnull);", "+\t */", "+\tprotected void search(String patternString, int searchFor, int limitTo, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException {", "+\t\tsearch(patternString, searchFor, limitTo, SearchPattern.R_EXACT_MATCH|SearchPattern.R_CASE_SENSITIVE|SearchPattern.R_ERASURE_MATCH, scope, requestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d776630b28ff5b1bbd4defdeb549d0b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeErasureTests.java", "commitBeforeChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "commitAfterChange": "1ab7b833f2e8fe1eaa17a4c72f8b9580f4ae1592", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprotected void search(IJavaElement element, int limitTo, boolean rawMatch, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "signatureAfterChange": " \tprotected void search(IJavaElement element, int limitTo, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "diff": ["-\tprotected void search(IJavaElement element, int limitTo, boolean rawMatch, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException {", "-\t\tint matchRule = SearchPattern.R_EXACT_MATCH|SearchPattern.R_CASE_SENSITIVE;", "-\t\tmatchRule |= SearchPattern.R_ERASURE_MATCH; // force rule to match erasure", "-\t\tthis.searchPattern = (JavaSearchPattern) SearchPattern.createPattern(element, limitTo, matchRule);", "-\t\tnew SearchEngine().search(", "-\t\t\tthis.searchPattern,", "-\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "-\t\t\tscope,", "-\t\t\trequestor,", "-\t\t\tnull", "-\t\t);", "+\t */", "+\tprotected void search(IJavaElement element, int limitTo, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException {", "+\t\tsearch(element, limitTo, SearchPattern.R_EXACT_MATCH|SearchPattern.R_CASE_SENSITIVE|SearchPattern.R_ERASURE_MATCH, scope, requestor);"]}], "num": 16765}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06f45da3aad9a8454b947c1f61c55bc1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7275985a216721ee4f012a143a207b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 10, "signatureBeforeChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs)", "signatureAfterChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs)", "diff": ["+ */", "+private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs) {", "+\t// need a minimum 1 char", "+\tif (start >= string.length) {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+\tchar c = string[start];", "+\tif (isVarArgs) {", "+\t\tswitch (c) {", "+\t\t\tcase C_ARRAY :", "+\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer, true);", "+\t\t\tcase C_RESOLVED :", "+\t\t\tcase C_UNRESOLVED :", "+\t\t\tcase C_TYPE_VARIABLE :", "+\t\t\tcase C_BOOLEAN :", "+\t\t\tcase C_BYTE :", "+\t\t\tcase C_CHAR :", "+\t\t\tcase C_DOUBLE :", "+\t\t\tcase C_FLOAT :", "+\t\t\tcase C_INT :", "+\t\t\tcase C_LONG :", "+\t\t\tcase C_SHORT :", "+\t\t\tcase C_VOID :", "+\t\t\tcase C_STAR:", "+\t\t\tcase C_EXTENDS:", "+\t\t\tcase C_SUPER:", "+\t\t\tcase C_CAPTURE:", "+\t\t\tcase C_INTERSECTION :", "+\t\t\tdefault:", "+\t\t\t\tthrow new IllegalArgumentException(); // a var args is an array type", "+\t\t}", "+\t} else {", "+\t\tswitch (c) {", "+\t\t\tcase C_ARRAY :", "+\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_RESOLVED :", "+\t\t\tcase C_UNRESOLVED :", "+\t\t\t\treturn appendClassTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_TYPE_VARIABLE :", "+\t\t\t\tint e = Util.scanTypeVariableSignature(string, start);", "+\t\t\t\tbuffer.append(string, start + 1, e - start - 1);", "+\t\t\t\treturn e;", "+\t\t\tcase C_BOOLEAN :", "+\t\t\t\tbuffer.append(BOOLEAN);", "+\t\t\t\treturn start;", "+\t\t\tcase C_BYTE :", "+\t\t\t\tbuffer.append(BYTE);", "+\t\t\t\treturn start;", "+\t\t\tcase C_CHAR :", "+\t\t\t\tbuffer.append(CHAR);", "+\t\t\t\treturn start;", "+\t\t\tcase C_DOUBLE :", "+\t\t\t\tbuffer.append(DOUBLE);", "+\t\t\t\treturn start;", "+\t\t\tcase C_FLOAT :", "+\t\t\t\tbuffer.append(FLOAT);", "+\t\t\t\treturn start;", "+\t\t\tcase C_INT :", "+\t\t\t\tbuffer.append(INT);", "+\t\t\t\treturn start;", "+\t\t\tcase C_LONG :", "+\t\t\t\tbuffer.append(LONG);", "+\t\t\t\treturn start;", "+\t\t\tcase C_SHORT :", "+\t\t\t\tbuffer.append(SHORT);", "+\t\t\t\treturn start;", "+\t\t\tcase C_VOID :", "+\t\t\t\tbuffer.append(VOID);", "+\t\t\t\treturn start;", "+\t\t\tcase C_CAPTURE :", "+\t\t\t\treturn appendCaptureTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_INTERSECTION :", "+\t\t\t\treturn appendIntersectionTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_STAR:", "+\t\t\tcase C_EXTENDS:", "+\t\t\tcase C_SUPER:", "+\t\t\t\treturn appendTypeArgumentSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tdefault :", "+\t\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t}", "+}", "- */", "-private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs) {", "-\t// need a minimum 1 char", "-\tif (start >= string.length) {", "-\t\tthrow new IllegalArgumentException();", "-\t}", "-\tchar c = string[start];", "-\tif (isVarArgs) {", "-\t\tswitch (c) {", "-\t\t\tcase C_ARRAY :", "-\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer, true);", "-\t\t\tcase C_RESOLVED :", "-\t\t\tcase C_UNRESOLVED :", "-\t\t\tcase C_TYPE_VARIABLE :", "-\t\t\tcase C_BOOLEAN :", "-\t\t\tcase C_BYTE :", "-\t\t\tcase C_CHAR :", "-\t\t\tcase C_DOUBLE :", "-\t\t\tcase C_FLOAT :", "-\t\t\tcase C_INT :", "-\t\t\tcase C_LONG :", "-\t\t\tcase C_SHORT :", "-\t\t\tcase C_VOID :", "-\t\t\tcase C_STAR:", "-\t\t\tcase C_EXTENDS:", "-\t\t\tcase C_SUPER:", "-\t\t\tcase C_CAPTURE:", "-\t\t\tdefault:", "-\t\t\t\tthrow new IllegalArgumentException(); // a var args is an array type", "-\t\t}", "-\t} else {", "-\t\tswitch (c) {", "-\t\t\tcase C_ARRAY :", "-\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tcase C_RESOLVED :", "-\t\t\tcase C_UNRESOLVED :", "-\t\t\t\treturn appendClassTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tcase C_TYPE_VARIABLE :", "-\t\t\t\tint e = Util.scanTypeVariableSignature(string, start);", "-\t\t\t\tbuffer.append(string, start + 1, e - start - 1);", "-\t\t\t\treturn e;", "-\t\t\tcase C_BOOLEAN :", "-\t\t\t\tbuffer.append(BOOLEAN);", "-\t\t\t\treturn start;", "-\t\t\tcase C_BYTE :", "-\t\t\t\tbuffer.append(BYTE);", "-\t\t\t\treturn start;", "-\t\t\tcase C_CHAR :", "-\t\t\t\tbuffer.append(CHAR);", "-\t\t\t\treturn start;", "-\t\t\tcase C_DOUBLE :", "-\t\t\t\tbuffer.append(DOUBLE);", "-\t\t\t\treturn start;", "-\t\t\tcase C_FLOAT :", "-\t\t\t\tbuffer.append(FLOAT);", "-\t\t\t\treturn start;", "-\t\t\tcase C_INT :", "-\t\t\t\tbuffer.append(INT);", "-\t\t\t\treturn start;", "-\t\t\tcase C_LONG :", "-\t\t\t\tbuffer.append(LONG);", "-\t\t\t\treturn start;", "-\t\t\tcase C_SHORT :", "-\t\t\t\tbuffer.append(SHORT);", "-\t\t\t\treturn start;", "-\t\t\tcase C_VOID :", "-\t\t\t\tbuffer.append(VOID);", "-\t\t\t\treturn start;", "-\t\t\tcase C_CAPTURE :", "-\t\t\t\treturn appendCaptureTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tcase C_STAR:", "-\t\t\tcase C_EXTENDS:", "-\t\t\tcase C_SUPER:", "-\t\t\t\treturn appendTypeArgumentSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tdefault :", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "400d668e220cf2cc279256bd67a0d5c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "commitAfterChange": "78fb30efd0199bf293193efc0adbb492172aafcc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static String warningTokenFromIrritant(long irritant)", "signatureAfterChange": " \tpublic static String warningTokenFromIrritant(int irritant)", "diff": ["+\t */", "+\tpublic static String warningTokenFromIrritant(int irritant) {", "+\t\t// keep in sync with warningTokens and warningTokenToIrritant", "+\t\tswitch (irritant) {", "+\t\t\tcase (InvalidJavadoc | UsingDeprecatedAPI) :", "+\t\t\tcase UsingDeprecatedAPI :", "+\t\t\t\treturn \"deprecation\"; //$NON-NLS-1$", "+\t\t\tcase FinallyBlockNotCompleting :", "+\t\t\t\treturn \"finally\"; //$NON-NLS-1$", "+\t\t\tcase FieldHiding :", "+\t\t\tcase LocalVariableHiding :", "+\t\t\tcase MaskedCatchBlock :", "+\t\t\t\treturn \"hiding\"; //$NON-NLS-1$", "+\t\t\tcase NonExternalizedString :", "+\t\t\t\treturn \"nls\"; //$NON-NLS-1$", "+\t\t\tcase UnnecessaryTypeCheck :", "+\t\t\t\treturn \"cast\"; //$NON-NLS-1$", "+\t\t\tcase UnusedLocalVariable :", "+\t\t\tcase UnusedArgument :", "+\t\t\tcase UnusedImport :", "+\t\t\tcase UnusedPrivateMember :", "+\t\t\tcase UnusedDeclaredThrownException :", "+\t\t\t\treturn \"unused\"; //$NON-NLS-1$", "+\t\t\tcase IndirectStaticAccess :", "+\t\t\tcase NonStaticAccessToStatic :", "+\t\t\t\treturn \"static-access\"; //$NON-NLS-1$", "+\t\t\tcase AccessEmulation :", "+\t\t\t\treturn \"synthetic-access\"; //$NON-NLS-1$", "+\t\t\tcase UnqualifiedFieldAccess :", "+\t\t\t\treturn \"unqualified-field-access\"; //$NON-NLS-1$", "+\t\t\tcase UncheckedTypeOperation :", "+\t\t\t\treturn \"unchecked\"; //$NON-NLS-1$", "+\t\t\tcase MissingSerialVersion :", "+\t\t\t\treturn \"serial\"; //$NON-NLS-1$", "+\t\t\tcase AutoBoxing :", "+\t\t\t\treturn \"boxing\"; //$NON-NLS-1$", "+\t\t\tcase TypeHiding :", "+\t\t\t\treturn \"hiding\"; //$NON-NLS-1$", "+\t\t\tcase IncompleteEnumSwitch :", "+\t\t\t\treturn \"incomplete-switch\"; //$NON-NLS-1$", "+\t\t\tcase MissingDeprecatedAnnotation :", "+\t\t\t\treturn \"dep-ann\"; //$NON-NLS-1$", "+\t\t\tcase RawTypeReference :", "+\t\t\t\treturn \"unchecked\"; //$NON-NLS-1$", "+\t\t\tcase UnusedLabel :", "+\t\t\tcase UnusedTypeArguments :", "+\t\t\tcase RedundantSuperinterface :", "+\t\t\t\treturn \"unused\"; //$NON-NLS-1$", "+\t\t\tcase DiscouragedReference :", "+\t\t\tcase ForbiddenReference :", "+\t\t\t\treturn \"restriction\"; //$NON-NLS-1$", "+\t\t\tcase NullReference :", "+\t\t\tcase PotentialNullReference :", "+\t\t\tcase RedundantNullCheck :", "+\t\t\t\treturn \"null\"; //$NON-NLS-1$", "+\t\t\tcase FallthroughCase :", "+\t\t\t\treturn \"fallthrough\"; //$NON-NLS-1$", "+\t\t\tcase OverridingMethodWithoutSuperInvocation :", "+\t\t\t\treturn \"super\"; //$NON-NLS-1$", "+\t\t}", "+\t\treturn null;", "+\t}", "-\t */", "-\tpublic static String warningTokenFromIrritant(long irritant) {", "-\t\t// keep in sync with warningTokens and warningTokenToIrritant", "-\t\tint irritantInt = (int) irritant;", "-\t\tif (irritantInt == irritant) {", "-\t\t\tswitch (irritantInt) {", "-\t\t\t\tcase (int) (InvalidJavadoc | UsingDeprecatedAPI) :", "-\t\t\t\tcase (int) UsingDeprecatedAPI :", "-\t\t\t\t\treturn \"deprecation\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) FinallyBlockNotCompleting :", "-\t\t\t\t\treturn \"finally\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) FieldHiding :", "-\t\t\t\tcase (int) LocalVariableHiding :", "-\t\t\t\tcase (int) MaskedCatchBlock :", "-\t\t\t\t\treturn \"hiding\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) NonExternalizedString :", "-\t\t\t\t\treturn \"nls\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) UnnecessaryTypeCheck :", "-\t\t\t\t\treturn \"cast\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) UnusedLocalVariable :", "-\t\t\t\tcase (int) UnusedArgument :", "-\t\t\t\tcase (int) UnusedImport :", "-\t\t\t\tcase (int) UnusedPrivateMember:", "-\t\t\t\tcase (int) UnusedDeclaredThrownException:", "-\t\t\t\t\treturn \"unused\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) IndirectStaticAccess :", "-\t\t\t\tcase (int) NonStaticAccessToStatic :", "-\t\t\t\t\treturn \"static-access\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) AccessEmulation :", "-\t\t\t\t\treturn \"synthetic-access\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) UnqualifiedFieldAccess :", "-\t\t\t\t\treturn \"unqualified-field-access\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) UncheckedTypeOperation :", "-\t\t\t\t\treturn \"unchecked\"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tirritantInt = (int)(irritant >>> 32);", "-\t\t\tswitch (irritantInt) {", "-\t\t\t\tcase (int)(MissingSerialVersion >>> 32) :", "-\t\t\t\t\treturn \"serial\"; //$NON-NLS-1$", "-\t\t\t\tcase (int)(AutoBoxing >>> 32) :", "-\t\t\t\t\treturn \"boxing\"; //$NON-NLS-1$", "-\t\t\t\tcase (int)(TypeHiding >>> 32) :", "-\t\t\t\t\treturn \"hiding\"; //$NON-NLS-1$", "-\t\t\t\tcase (int)(IncompleteEnumSwitch >>> 32) :", "-\t\t\t\t\treturn \"incomplete-switch\"; //$NON-NLS-1$", "-\t\t\t\tcase (int)(MissingDeprecatedAnnotation >>> 32) :", "-\t\t\t\t\treturn \"dep-ann\"; //$NON-NLS-1$", "-\t\t\t\tcase (int)(RawTypeReference >>> 32):", "-\t\t\t\t\treturn \"unchecked\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) (UnusedLabel >>> 32):", "-\t\t\t\tcase (int) (UnusedTypeArguments >>> 32) :", "-\t\t\t\tcase (int) (RedundantSuperinterface >>> 32) :", "-\t\t\t\t\treturn \"unused\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) (DiscouragedReference >>> 32) :", "-\t\t\t\tcase (int) (ForbiddenReference >>> 32) :", "-\t\t\t\t\treturn \"restriction\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) (NullReference >>> 32) :", "-\t\t\t\tcase (int) (PotentialNullReference >>> 32) :", "-\t\t\t\tcase (int) (RedundantNullCheck >>> 32) :", "-\t\t\t\t\treturn \"null\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) (FallthroughCase >>> 32) :", "-\t\t\t\t\treturn \"fallthrough\"; //$NON-NLS-1$", "-\t\t\t\tcase (int) (OverridingMethodWithoutSuperInvocation >>> 32) :", "-\t\t\t\t\treturn \"super\"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "-\t}"]}], "num": 10226}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e883148914d965edb77ded8d365ad5ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39f3ae2a8901e3408878bf865308ee05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "commitAfterChange": "4c6ae9dae1fc96f9fd302751a25b14b4f972fb0f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkComment()", "diff": ["-public void checkAnnotation() {", "+public void checkComment() {", "-\t\tflushAnnotationsDefinedPriorTo(endStatementPosition); // discard obsolete comments during recovery", "+\t\tflushCommentsDefinedPriorTo(endStatementPosition); // discard obsolete comments during recovery", "-\t\t\tif (this.annotationParser.checkDeprecation(", "+\t\t\tif (this.javadocParser.checkDeprecation(", "-\t\t\tthis.annotation = this.annotationParser.annotation;\t// null if check annotation is not activated ", "+\t\t\tthis.javadoc = this.javadocParser.javadoc;\t// null if check javadoc is not activated "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7292340f2be09dc101f22d285f87ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\tflushCommentsDefinedPriorTo(endStatementPosition); // discard obsolete comments during recovery", "+\t\tflushCommentsDefinedPriorTo(this.endStatementPosition); // discard obsolete comments during recovery", "-\t\twhile (lastComment >= 0 && this.scanner.commentStarts[lastComment] > modifiersSourceStart) lastComment--;", "+\t\twhile (lastComment >= 0 && this.scanner.commentStarts[lastComment] > this.modifiersSourceStart) lastComment--;", "-\t\tthis.modifiersSourceStart = scanner.commentStarts[0]; ", "+\t\tthis.modifiersSourceStart = this.scanner.commentStarts[0]; "]}], "num": 50868}
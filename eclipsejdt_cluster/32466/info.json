{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9dae0fcf2131f2ae3ee5caa9d8897154", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb93d63fa5b4654a37a59c154b32f4c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "1a542c460a449efbae14d1057ba233825602248d", "commitAfterChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "signatureAfterChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "diff": ["+\t\t\tTypeBinding thetaF = substitute(parameters[i]);", "-\t\t\t\tTypeBinding thetaF = substitute(parameters[i]);", "+\t\t\t} else {", "+\t\t\t\tif (parameters[i].isPertinentToApplicability(this.invocationArguments[i].resolvedType, method))", "+\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t\t// else we know it is potentially compatible, no need to assert.", "+\t\t\t\t} else {", "+\t\t\t\t\tif (varArgsType.isPertinentToApplicability(this.invocationArguments[i].resolvedType, method))", "+\t\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t\t\t// else we know it is potentially compatible, no need to assert."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f7f2e606c50763261f025f8975b99d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void buildFields()", "signatureAfterChange": " \t \tprivate void buildFields()", "diff": ["+\t\tboolean hierarchyIsInconsistent = referenceContext.binding.isHierarchyInconsistent();", "-\t\t\treferenceContext.binding.fields = NoFields;", "+\t\t\tif (hierarchyIsInconsistent) { // 72468", "+\t\t\t\treferenceContext.binding.fields = new FieldBinding[1];", "+\t\t\t\treferenceContext.binding.fields[0] =", "+\t\t\t\t\tnew FieldBinding(IncompleteHierarchy, VoidBinding, AccPrivate, referenceContext.binding, null);", "+\t\t\t} else {", "+\t\t\t\treferenceContext.binding.fields = NoFields;", "+\t\t\t}", "+\t\tif (hierarchyIsInconsistent)", "+\t\t\tcount++;", "+\t\tif (hierarchyIsInconsistent)", "+\t\t\tfieldBindings[count++] = new FieldBinding(IncompleteHierarchy, VoidBinding, AccPrivate, referenceContext.binding, null);"]}], "num": 32466}
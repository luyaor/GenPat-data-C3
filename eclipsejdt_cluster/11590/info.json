{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4390ded9cbe0ba57396af73b0ec87f69", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0220ad4631f926dc85f6b4cdc7cacf53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void run(IProgressMonitor monitor)", "signatureAfterChange": " \t \tpublic void run(IProgressMonitor monitor)", "diff": ["-\t\t//", "-\t\t//  bail-out early if there aren't factories, or if there aren't any annotation instances", "-\t\t// ", "-\t\t\t\tif ( _factories == null || _factories.size() == 0 )", "+\t\t\t\tif ( (_factories == null || _factories.size() == 0) && _dispatchedBatchFactories.isEmpty() )", "-\t\t\t\t\tmsg = \"no annotation instances in file.\"; //$NON-NLS-1$", "+\t\t\t\t\tmsg = \"no files to dispatch to.\"; //$NON-NLS-1$", "-\t\t\t\tfor( int i=0, len = _originalFiles.length; i<len; i++ ){", "-\t\t\t\t\tIFile f = _originalFiles[i];", "+\t\t\t\tfor( int i=0, len = _allFilesRequireProcessing.length; i<len; i++ ){", "+\t\t\t\t\tIFile f = _allFilesRequireProcessing[i];", "+\t\t\t\t\tfinal Set<IFile> deletedFiles = ", "+\t\t\t\t\t\tcleanupAllGeneratedFilesForParent( f, _compilationUnit, null );", "+\t\t\t\t\tif( deletedFiles != null )", "+\t\t\t\t\t\tallDeletedFiles.addAll(deletedFiles);", "+\t\t\t\t}", "+\t\t\t\tfor( int i=0, len=_remainingFiles.length; i<len; i++ ){", "+\t\t\t\t\tIFile f = _remainingFiles[i];", "-\t\t\t\t\t\t\t\t\t\t allDeletedFiles, ", "+\t\t\t\t\t\t\t\t\t\t allDeletedFiles,", "+\t\t\t\t\t\t\t\t\t\t Collections.<AnnotationProcessorFactory>emptySet(),", "-\t\t\t\t\t.newProcessorEnvironmentForReconcile(_compilationUnit, _javaProject);", "+\t\t\t\t\t.newReconcileEnv(_compilationUnit, _javaProject);", "-\t\t\t\t\t.newProcessorEnvironmentForBuild( _allFilesRequireProcessing, _javaProject);", "+\t\t\t\t\t.newBuildEnv( _allFilesRequireProcessing, _remainingFiles, _javaProject);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4a0713ea6bbc9cdce9e0da539ecea0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "4da5a9a150c1a47a773a4fd9e96abe9171b5562d", "commitAfterChange": "33b8e652534880a44865eb30d6ce68dd0b1d0126", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t", "-\t\t\tString unqualifiedName= name;", "-\t\t\tint index= name.lastIndexOf('$');", "-\t\t\tif (index != -1) {", "-\t\t\t\t//the type name of the inner type", "-\t\t\t\tunqualifiedName= Util.localTypeName(name, index, name.length());", "-\t\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "-\t\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "-\t\t\t}", "-\t\t\tString matchName= partialMatch ? name.toLowerCase() : name;", "-\t\t\tfor (int i= 0; i < length; i++) {", "-\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\treturn;", "-\t\t\t\tIClassFile classFile= classFiles[i];", "-\t\t\t\tString elementName = classFile.getElementName();", "-\t\t\t\tif (partialMatch) elementName = elementName.toLowerCase();", "-\t", "-\t\t\t\t/**", "-\t\t\t\t * Must use startWith because matchName will never have the ", "-\t\t\t\t * extension \".class\" and the elementName always will.", "-\t\t\t\t */", "-\t\t\t\tif (elementName.startsWith(matchName)) {", "-\t\t\t\t\tIType type= null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\ttype= classFile.getType();", "-\t\t\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\t\t\tcontinue; // the classFile is not present", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!partialMatch || (type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "-\t\t\t\t\t\tif (nameMatches(unqualifiedName, type, partialMatch) && acceptType(type, acceptFlags, false/*not a source type*/))", "+\t\t\tif (!partialMatch) {", "+\t\t\t\t// exact match", "+\t\t\t\tfor (int i= 0; i < length; i++) {", "+\t\t\t\t\tif (requestor.isCanceled()) return;", "+\t\t\t\t\tClassFile classFile= (ClassFile) classFiles[i];", "+\t\t\t\t\tif (name.equals(classFile.name)) { // ClassFile#name contains the name of the .class file without the .class extension", "+\t\t\t\t\t\tIType type = classFile.getType();", "+\t\t\t\t\t\tif (acceptType(type, acceptFlags, false/*not a source type*/)) {", "+\t\t\t\t\t\t\tbreak;  // since an exact match was requested, no other matching type can exist", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tString unqualifiedName = name;", "+\t\t\t\tint index = name.lastIndexOf('$');", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\t//the type name of the inner type", "+\t\t\t\t\tunqualifiedName = Util.localTypeName(name, index, name.length());", "+\t\t\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "+\t\t\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "+\t\t\t\t}", "+\t\t\t\tString matchName = name.toLowerCase();", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tIClassFile classFile= classFiles[i];", "+\t\t\t\t\tString elementName = classFile.getElementName();", "+\t\t\t\t\telementName = elementName.toLowerCase();", "+\t\t", "+\t\t\t\t\t/**", "+\t\t\t\t\t * Must use startWith because matchName will never have the ", "+\t\t\t\t\t * extension \".class\" and the elementName always will.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (elementName.startsWith(matchName)) {", "+\t\t\t\t\t\tIType type= null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ttype = classFile.getType();", "+\t\t\t\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\t\t\t\tcontinue; // the classFile is not present", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif ((type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "+\t\t\t\t\t\t\tif (nameMatches(unqualifiedName, type, true/*partial match*/) && acceptType(type, acceptFlags, false/*not a source type*/))", "+\t\t\t\t\t\t\t\trequestor.acceptType(type);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2bf8991b22208e48627b01af636eaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "b4c2326bdb14a7f730ed9986567b454f5f0cd0c5", "commitAfterChange": "7e1c1ec5b1f6c711f6c7308f04d5e852eb81c57a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "signatureAfterChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "diff": ["-\tif (simpleNames == null) {\r", "-\t\tif (JavaBuilder.DEBUG) System.out.println(\"  found well known match\"); //$NON-NLS-1$\r", "-\t\treturn true;\r", "-\t} else if (qualifiedNames == null) {\r", "-\t\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "-\t\t\tif (includes(simpleNames[i])) {\r", "-\t\t\t\tif (JavaBuilder.DEBUG) System.out.println(\"  found match in well known package to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "-\t\t\t\treturn true;\r", "+\tif (simpleNames == null || qualifiedNames == null) {\r", "+\t\tif (simpleNames == null && qualifiedNames == null) {\r", "+\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\tSystem.out.println(\"  found well known match\"); //$NON-NLS-1$\r", "+\t\t\treturn true;\r", "+\t\t} else if (qualifiedNames == null) {\r", "+\t\t\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "+\t\t\t\tif (includes(simpleNames[i])) {\r", "+\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"  found match in well known package to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tfor (int i = 0, l = qualifiedNames.length; i < l; i++) {\r", "+\t\t\t\tchar[][] qualifiedName = qualifiedNames[i];\r", "+\t\t\t\tif (qualifiedName.length == 1 ? includes(qualifiedName[0]) : includes(qualifiedName)) {\r", "+\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"  found well known match in \" + CharOperation.toString(qualifiedName)); //$NON-NLS-1$\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a893f93fbfcd10ad8b225a2d3912b52f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "dad4bcb84907c50a28cd05a6778724183876bb84", "commitAfterChange": "2383278ec3bebb3e2677851c12a5c6653f7680e9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tIClasspathEntry[] entries = JavaCore.create(this.project).getRawClasspath();", "+\t\t\tIJavaProject javaProject = JavaCore.create(this.project);", "+\t\t\tIClasspathEntry[] entries = javaProject.getRawClasspath();", "+\t\t\t", "+\t\t\t// collect output locations", "+\t\t\tfinal HashSet outputs = new HashSet();", "+\t\t\toutputs.add(javaProject.getOutputLocation());", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "+\t\t\t\tIPath output = entries[i].getOutputLocation();", "+\t\t\t\tif (output != null) {", "+\t\t\t\t\toutputs.add(output);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\tif (outputs.contains(proxy.requestFullPath())) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5fdd10392b0eb925af748630e64bf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b05fdc0766ce1f089450816aa5eb0912ffdae4d5", "commitAfterChange": "faea515ca49430200259c66030d0a505f729ebda", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t\tdecodeModifiersForType(buffer, classFileReader.getAccessFlags());", "+\t\t", "+\t\tIInnerClassesAttribute innerClassesAttribute = classFileReader.getInnerClassesAttribute();", "+\t\t", "+\t\tif (innerClassesAttribute != null) {", "+\t\t\t// search the right entry", "+\t\t\tIInnerClassesAttributeEntry[] entries = innerClassesAttribute.getInnerClassAttributesEntries();", "+\t\t\tfor (int i = 0, max = entries.length; i < max ; i++) {", "+\t\t\t\tIInnerClassesAttributeEntry entry = entries[i];", "+\t\t\t\tchar[] innerClassName = entry.getInnerClassName();", "+\t\t\t\tif (innerClassName != null) {", "+\t\t\t\t\tif (CharOperation.equals(classFileReader.getClassName(), innerClassName)) {", "+\t\t\t\t\t\tdecodeModifiersForInnerClasses(buffer, entry.getAccessFlags());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdecodeModifiersForType(buffer, classFileReader.getAccessFlags());", "+\t\t}", "-\t\t\tIInnerClassesAttribute innerClassesAttribute = classFileReader.getInnerClassesAttribute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcdb5000db6eec526dee4e8ce3a4bbae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "commitAfterChange": "81fe472327b51c234112233c89df88e95ab01675", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static boolean conflictsWithOutputLocation(IPath folderPath, JavaProject project)", "signatureAfterChange": " \tpublic static boolean conflictsWithOutputLocation(IPath folderPath, JavaProject project)", "diff": ["-\t\t\t\t// only allow nesting in outputlocation if there is a corresponding source folder", "-\t\t\t\treturn project.getClasspathEntryFor(outputLocation) == null;", "+\t\t\t\t// only allow nesting in project's output if there is a corresponding source folder", "+\t\t\t\t// or if the project's output is not used (i.e. all source folders have a custom output)", "+\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "+\t\t\t\tboolean isOutputUsed = false;", "+\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {", "+\t\t\t\t\t\tif (entry.getPath().equals(outputLocation)) {", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (entry.getOutputLocation() == null) {", "+\t\t\t\t\t\t\tisOutputUsed = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn isOutputUsed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f743ce6d7b19f6ffe7cdde7aeaa0681c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5dde5c5122b6fd8476cd65e0c9985a4c2fa7aaf1", "commitAfterChange": "8cc940e0f7737c5f198b9632e86ecfcd6479e105", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(\r \t\tIResourceDelta delta, \r \t\tint elementType, \r \t\tIJavaProject currentProject,\r \t\tIPath currentOutput,\r \t\tboolean currentProjIsOutput)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(\r \t\tIResourceDelta delta, \r \t\tint elementType, \r \t\tIJavaProject currentProject,\r \t\tIPath currentOutput,\r \t\tint outputTraverseMode)", "diff": ["-\t\tboolean currentProjIsOutput) {\r", "+\t\tint outputTraverseMode) {\r", "-\t\t\t\t\tcurrentProjIsOutput = proj.getProject().getFullPath().equals(currentOutput);\r", "+\t\t\t\t\tif (proj.getProject().getFullPath().equals(currentOutput)){ // case of proj==bin==src\r", "+\t\t\t\t\t\toutputTraverseMode = SOURCE;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// check case of src==bin\r", "+\t\t\t\t\t\tIClasspathEntry[] classpath = proj.getResolvedClasspath(true);\r", "+\t\t\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {\r", "+\t\t\t\t\t\t\tIClasspathEntry entry = classpath[i];\r", "+\t\t\t\t\t\t\tif (entry.getPath().equals(currentOutput)) {\r", "+\t\t\t\t\t\t\t\toutputTraverseMode = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\t\tif (currentProjIsOutput) {\r", "-\t\t\t\t\t// case of proj=src\r", "-\t\t\t\t\tif (childType == IJavaElement.CLASS_FILE) {\r", "+\t\t\t\tif (currentOutput != null && currentOutput.isPrefixOf(childPath)) {\r", "+\t\t\t\t\tif (outputTraverseMode != IGNORE) {\r", "+\t\t\t\t\t\t// case of bin=src\r", "+\t\t\t\t\t\tif (outputTraverseMode == SOURCE && childType == IJavaElement.CLASS_FILE) {\r", "+\t\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// case of .class file under project and no source folder\r", "+\t\t\t\t\t\t// proj=bin\r", "+\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT \r", "+\t\t\t\t\t\t\t&& childRes instanceof IFile \r", "+\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {\r", "+\t\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "-\t\t\t\t\t// case of .class file under project and no source folder\r", "-\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT \r", "-\t\t\t\t\t\t&& childRes instanceof IFile \r", "-\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {\r", "-\t\t\t\t\t\tcontinue;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else if (currentOutput != null && currentOutput.isPrefixOf(childPath)) {\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, currentProjIsOutput)) {\r", "+\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {\r", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, false);\r", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, IGNORE); // binary output of projectOfRoot cannot be this root\r"]}], "num": 11590}
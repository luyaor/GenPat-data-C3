{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "501b62de8f6ceb13b5b33f1439839cff", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23177a3e028d68bfa6082b63ffb99121", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 443, "signatureBeforeChange": " \tpublic void test439()", "signatureAfterChange": " \tpublic void test439()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tclass Concrete extends Composite {\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Composite is a raw type. References to generic type Composite<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40e7eff2715a6c9a5e429c2bcf5b9400", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1351, "methodNumberAfterChange": 1351, "signatureBeforeChange": " public void test1317()", "signatureAfterChange": " public void test1317()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\t<T extends N<T>> T foo3(String name, T value) {}\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"This method must return a result of type T\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 15)\\n\" +", "-\t\t\t\"\tnew X().foo(\\\"HI\\\", null); // correctly report error\\n\" +", "-\t\t\t\"\t        ^^^\\n\" +", "-\t\t\t\"The method foo(String, String) is ambiguous for the type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 18)\\n\" +", "-\t\t\t\"\tThread t1 = foo3(\\\"HI\\\", null);\\n\" +", "-\t\t\t\"\t            ^^^^\\n\" +", "-\t\t\t\"The method foo3(String, null) is undefined for the type Test\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 19)\\n\" +", "-\t\t\t\"\tThread t2 = (Thread)foo3(\\\"HI\\\", null);\\n\" +", "-\t\t\t\"\t                    ^^^^\\n\" +", "-\t\t\t\"The method foo3(String, null) is undefined for the type Test\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\t<T extends N<T>> T foo3(String name, T value) {}\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"This method must return a result of type T\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tnew X().foo(\\\"HI\\\", null); // correctly report error\\n\" + ", "+\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\"The method foo(String, String) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tnew X().foo2(\\\"HI\\\", null); // miss ambiguous error\\n\" + ", "+\t\t\t\"\t        ^^^^\\n\" + ", "+\t\t\t\"The method foo2(String, String) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tThread t1 = foo3(\\\"HI\\\", null);\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"The method foo3(String, null) is undefined for the type Test\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tThread t2 = (Thread)foo3(\\\"HI\\\", null);\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"The method foo3(String, null) is undefined for the type Test\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4b39886b47af7fd451e16a7b4e27580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ae58cbb90a0e72a8dd69c0cd98dc1505a8668bf", "commitAfterChange": "4a1a6051dae9d70af8f16177f47bcc456f4eca12", "methodNumberBeforeChange": 854, "methodNumberAfterChange": 854, "signatureBeforeChange": " public void test848()", "signatureAfterChange": " public void test0848()", "diff": ["-public void test848() {", "+public void test0848() {", "-\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tCollection<? extends Number> asList= Arrays.asList(1, 2.2);\\n\" + ", "+\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety : A generic array of Number&Comparable<?> is created for a varargs parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e356f54016e1fb3d208cbaa53c3c0a6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "commitAfterChange": "142c1803cd69a49b32423044506cd57c4ca51a87", "methodNumberBeforeChange": 682, "methodNumberAfterChange": 682, "signatureBeforeChange": "\t public void test678()", "signatureAfterChange": "\t public void test678()", "diff": ["-\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tpublic class X<T, T2 extends T & Serializable > {\\n\" + ", "+\t\t\"\t                                 ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot specify any additional bound Serializable when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72223fdbe06963a9e209993a0ef4a1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "     public void test128()", "signatureAfterChange": "     public void test128()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tList<String> ls1 = list;\\n\" + ", "-\t\t\t\"\t                   ^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+    \t\t\"\tvoid foo(List list) {\\n\" + ", "+    \t\t\"\t         ^^^^\\n\" + ", "+    \t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+    \t\t\"\tList<String> ls1 = list;\\n\" + ", "+    \t\t\"\t                   ^^^^\\n\" + ", "+    \t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+    \t\t\"\tZork z;\\n\" + ", "+    \t\t\"\t^^^^\\n\" + ", "+    \t\t\"Zork cannot be resolved to a type\\n\" + ", "+    \t\t\"----------\\n\");"]}], "num": 17213}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bab3da472905e70d27c6d09a847f1f9a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a50de5a0b7ee9976244cab5912e6bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "d43bd70d5c6c4fa98b6c25564f2818572a108eac", "commitAfterChange": "3655fb3ae21ac46b5060eb9e240a41cd2462bac2", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test422134()", "signatureAfterChange": " \tpublic void test422134()", "diff": ["-\t\t\t\"Type safety: Unchecked invocation sort(ArrayList, (<no type> o1, <no type> o2) -> {\\n\" + ", "-\t\t\t\"  return o1.compareToIgnoreCase(o1);\\n\" + ", "-\t\t\t\"}) of the generic method sort(List<T>, Comparator<? super T>) of type Collections\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation sort(ArrayList, (<no type> o1, <no type> o2) -> {})\" + ", "+\t\t\t\" of the generic method sort(List<T>, Comparator<? super T>) of type Collections\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb036f9a7c445b5be6d974777325717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "d43bd70d5c6c4fa98b6c25564f2818572a108eac", "commitAfterChange": "3655fb3ae21ac46b5060eb9e240a41cd2462bac2", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void testBug428811()", "signatureAfterChange": " public void testBug428811()", "diff": ["-\t\t\"The method of(ArrayList<T>::new, List<T>::add, (<no type> left, <no type> right) -> {\\n\" + ", "-\t\t\"  left.addAll(right);\\n\" + ", "-\t\t\"  return left;\\n\" + ", "-\t\t\"}, ImmutableList::copyOf) is undefined for the type Collector\\n\" + ", "+\t\t\"The method of(ArrayList<T>::new, List<T>::add, (<no type> left, <no type> right) -> {}\" + ", "+\t\t\", ImmutableList::copyOf) is undefined for the type Collector\\n\" + "]}], "num": 30745}
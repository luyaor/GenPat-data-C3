{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1ee2131b4bd1ef150118e5a59e7ff32", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b770eafbebd75beba12e779fb91e384d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MemberDeclarationVisitor.java", "commitBeforeChange": "d3b637377447f913b7000084f8fd9e55ccfded7f", "commitAfterChange": "cb427a264844cc5a28a0c6c1272631ddfca57b2a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " public boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "signatureAfterChange": " public boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "diff": ["+}", "+\t\toccurrenceCount = getInTypeOccurrenceCountForBinaryAnonymousType(typeDeclaration, simpleName, this.enclosingElement, occurrenceCount);", "+\t\tHashtableOfIntValues oldOccurencesCount = this.inTypeOccurrencesCounts;", "+\t\tthis.locator.inTypeOccurrencesCounts = new HashtableOfIntValues();", "+\t\tthis.locator.inTypeOccurrencesCounts = oldOccurencesCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7630ac696773e8c61533fe737c2d0d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b20adaa54a1f0442c43a2cc76eca5492041fd65f", "commitAfterChange": "bbfd6abe2f4d57b10264c574b936bd7028ec5f17", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": "  \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=253008, flag boolean as the expected", "+\t\t// type if we are completing inside if(), for (; ;), while() and do while()", "+\t\t} else if (parent instanceof WhileStatement) {  // covers both while and do-while loops", "+\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);", "+\t\t} else if (parent instanceof IfStatement) {  ", "+\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);", "+\t\t} else if (parent instanceof ForStatement) {   // astNodeParent set to ForStatement only for the condition  ", "+\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);"]}], "num": 22073}
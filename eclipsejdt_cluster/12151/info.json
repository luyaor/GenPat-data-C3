{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46633c8d7086d682198fec4fb786cc5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3728d69d89c00fabf553c8b77fd0dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "c99d716fa975f313809c9a758c093b0027fd52fe", "commitAfterChange": "cb63167d7ae8e51f68c8f4ae8680682adf1ffd54", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "signatureAfterChange": " protected int matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "diff": ["-\t} else if (node instanceof NameReference) {", "-\t\tif (this.pattern.name == null) {", "-\t\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t} else if (node instanceof SingleNameReference) {", "-\t\t\tif (matchesName(this.pattern.name, ((SingleNameReference) node).token))", "-\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t} else {", "-\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference) node;", "-\t\t\tchar[][] tokens = qNameRef.tokens;", "-\t\t\tif (writeOnlyAccess) {", "-\t\t\t\t// in the case of the assigment of a qualified name reference, the match must be on the last token", "-\t\t\t\tif (matchesName(this.pattern.name, tokens[tokens.length-1]))", "-\t\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++)", "-\t\t\t\t\tif (matchesName(this.pattern.name, tokens[i]))", "-\t\t\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t\t}", "-\t\t}", "+\t} else {", "+\t\treturn super.matchReference(node, nodeSet, writeOnlyAccess);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d764677a0f3cb7030b3cc13f3a6d8ea8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnParameterizedQualifiedTypeReference.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": " \t \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["-\t\tint length = tokens.length - 1;", "-\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\tint length = tokens.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif(i != 0) {", "+\t\t\t\toutput.append('.');", "+\t\t\t}", "-\t\t\toutput.append('.');", "+\t\t\t", "-\t\toutput.append(tokens[length - 1]);", "-\t\tTypeReference[] typeArgument = typeArguments[length - 1];", "-\t\tif (typeArgument != null) {", "-\t\t\toutput.append('<');//$NON-NLS-1$", "-\t\t\tint max = typeArgument.length - 1;", "-\t\t\tfor (int j = 0; j < max; j++) {", "-\t\t\t\ttypeArgument[j].print(0, output);", "-\t\t\t\toutput.append(\", \");//$NON-NLS-1$", "-\t\t\t}", "-\t\t\ttypeArgument[max].print(0, output);", "-\t\t\toutput.append('>');", "-\t\t}", "-\t\toutput.append('.').append(tokens[length]).append('>'); ", "+\t\toutput.append('>'); "]}], "num": 12151}
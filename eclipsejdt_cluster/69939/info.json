{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15773868c96c7d0153f888268f18d619", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c46ded619efc8a1c8f452cc08d7258b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject());", "+\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject(), ((ClasspathEntry)entries[j]).getLibraryIndexLocation());", "+\t\t\t\t\t\t\t\t\tURL indexLocation = ((ClasspathEntry)entries[j]).getLibraryIndexLocation();", "+\t\t\t\t\t\t\t\t\tif (indexLocation != null) { // force reindexing, this could be faster rather than maintaining the list", "+\t\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject(), indexLocation);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject());", "+\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject(), ((ClasspathEntry)entries[j]).getLibraryIndexLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316b56b7b92cd69230bbe1fe31ac5dfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "signatureAfterChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "diff": ["-\t\t\t\t\tif (glb != null) mostSpecificSubstitute = glb[0]; // TODO (philippe) need to improve", "-\t\t\t\t\t\t//TypeBinding mostSpecificSubstitute = scope.greaterLowerBound(bounds);", "-\t\t\t\t\t\tif (mostSpecificSubstitute != null) {", "-\t\t\t\t\t\t\tsubstitutes[i] = mostSpecificSubstitute;", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=341795 - Per 15.12.2.8, we should fully apply glb", "+\t\t\t\t\tif (glb != null) {", "+\t\t\t\t\t\tif (glb.length == 1) {", "+\t\t\t\t\t\t\tmostSpecificSubstitute = glb[0];", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tTypeBinding [] otherBounds = new TypeBinding[glb.length - 1];", "+\t\t\t\t\t\t\tSystem.arraycopy(glb, 1, otherBounds, 0, glb.length - 1);", "+\t\t\t\t\t\t\tmostSpecificSubstitute = scope.environment().createWildcard(null, 0, glb[0], otherBounds, Wildcard.EXTENDS);", "+\t\t\t\t\tif (mostSpecificSubstitute != null) {", "+\t\t\t\t\t\tsubstitutes[i] = mostSpecificSubstitute;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 69939}
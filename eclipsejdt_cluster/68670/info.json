{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9234ae87bc2c82cf129905c82584f06a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f06a31563713078695542de583ba0af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "f974621a419c66d8827ce49e878f1ca626c0f5c2", "commitAfterChange": "9954abd4d176567719d3b52f38fdec66f578f045", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void generateCode(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tboolean valueRequired)", "signatureAfterChange": "\r \tpublic void generateCode(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\tif (falseLabel.hasForwardReferences()) {\r", "-\t\t\t\t\t\t\tif (valueRequired) {\r", "-\t\t\t\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\t\tif (valueRequired) {\r", "+\t\t\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\t\t\tif (falseLabel.hasForwardReferences()) {\r", "-\t\t\t\t\t\t\t\tif (valueRequired)\r", "-\t\t\t\t\t\t\t\t\tcodeStream.iconst_1();\r", "+\t\t\t\t\t\t\t\tcodeStream.iconst_1();\r", "-\t\t\t\t\t\t\t} else { // 6596: if (!(a && b)){} - must still place falseLabel\r", "-\t\t\t\t\t\t\t\tfalseLabel.place();\r", "-\t\t\t\t\t\t\t}\t\t\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else { // 6596: if (!(a && b)){} - must still place falseLabel\r", "+\t\t\t\t\t\t\tfalseLabel.place();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd8c0f32fa30c55842f7fcbc0997d2b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b25ed407ef1d09375524d9c9e824c1c1084b119b", "commitAfterChange": "0bd9f6472768db6e5f0062ffcfd17bd3adede039", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "signatureAfterChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "diff": ["-\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "-\t\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "-\t\t\t\t\tInitializer initializer = this.ast.newInitializer();", "-\t\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "-\t\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "-\t\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "-\t\t\t\t\tsetJavaDocComment(initializer);", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "+\t\t\t\tInitializer initializer = this.ast.newInitializer();", "+\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "+\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "+\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "+\t\t\t\tsetJavaDocComment(initializer);", "+\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\t\tif (i > 0", "+\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "+\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "+\t\t\t\t\t// we have a multiple field declaration", "+\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "+\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "+\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "-\t\t\t\t\tif (i > 0", "-\t\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "-\t\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "-\t\t\t\t\t\t// we have a multiple field declaration", "-\t\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "-\t\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "-\t\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// we can create a new FieldDeclaration", "-\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));", "-\t\t\t\t\t}", "+\t\t\t\t\t// we can create a new FieldDeclaration", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));"]}], "num": 68670}
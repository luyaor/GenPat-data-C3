{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d169b681632e92b29448ad6bf47a822", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1291517c569fae1ac79d8fdafcf07375", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "ad2166cdb4061bd08d277e145a390369585ad35a", "commitAfterChange": "3ecd15451330956435ccef213a5775052d6006c5", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 139, "signatureBeforeChange": "  \t\tprotected int getNodeIndent(int nodeIndex)", "signatureAfterChange": "  \t\tprotected int getNodeIndent(int nodeIndex)", "diff": ["-\t\t\tASTNode node= (ASTNode) this.list[nodeIndex].getOriginalValue();", "-\t\t\tif (node == null) {", "-\t\t\t\tnode= (ASTNode) this.list[nodeIndex].getNewValue();", "-\t\t\t}", "-\t\t\tif (node.getNodeType() != ASTNode.SWITCH_CASE) {", "-\t\t\t\tindent++;", "+\t\t\t", "+\t\t\tif (this.indentSwitchStatementsCompareToCases) {", "+\t\t\t\tRewriteEvent event = this.list[nodeIndex];", "+\t\t\t\tint changeKind = event.getChangeKind();", "+\t\t\t\t", "+\t\t\t\tASTNode node;", "+\t\t\t\tif (changeKind == RewriteEvent.INSERTED || changeKind == RewriteEvent.REPLACED) {", "+\t\t\t\t\tnode= (ASTNode)event.getNewValue();", "+\t\t\t\t} else {", "+\t\t\t\t\tnode= (ASTNode)event.getOriginalValue();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (node.getNodeType() != ASTNode.SWITCH_CASE) {", "+\t\t\t\t\tindent++;", "+\t\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f651b7662ca5b499a80fea163e64443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "be247eb150a4ae64408d691fa5f52cc64cf01665", "commitAfterChange": "560772312173d5112198fae503105dd04e5536f2", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\tif (rootInfo != null || res instanceof IProject) {", "+\t\tif (res instanceof IProject) {", "+\t\t\tprocessChildren = ", "+\t\t\t\tthis.updateCurrentDeltaAndIndex(", "+\t\t\t\t\tdelta, ", "+\t\t\t\t\telementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ? ", "+\t\t\t\t\t\tIJavaElement.JAVA_PROJECT : // case of prj=src", "+\t\t\t\t\t\telementType, ", "+\t\t\t\t\trootInfo);", "+\t\t} else if (rootInfo != null) {", "-\t\t\t\t\tif (childType == NON_JAVA_RESOURCE", "-\t\t\t\t\t\t\t|| !this.traverseDelta(child, childType, rootInfo == null ? childRootInfo : rootInfo, outputsInfo)) { // traverse delta for child in the same project", "-\t\t\t\t\t\t", "+\t\t\t\t\tif (!this.traverseDelta(child, childType, rootInfo == null ? childRootInfo : rootInfo, outputsInfo)) { // traverse delta for child in the same project", "+\t\t\t\t} else {", "+\t\t\t\t\toneChildOnClasspath = true; // to avoid reporting child delta as non-java resource delta", "-\t\t\treturn isValidParent && (rootInfo != null || oneChildOnClasspath);", "+\t\t\treturn elementType != NON_JAVA_RESOURCE || oneChildOnClasspath;", "-\t\t\t// if not on classpath or if the element type is NON_JAVA_RESOURCE, ", "-\t\t\t// it's a non-java resource", "-\t\t\treturn rootInfo != null && elementType != NON_JAVA_RESOURCE;", "+\t\t\treturn elementType != NON_JAVA_RESOURCE;"]}], "num": 35196}
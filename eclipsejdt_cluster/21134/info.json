{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd55dfd623adbefea6a27b64a9095e1f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76527b87306a34efabfa87a8f5984756", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "diff": ["-\t\t\t\t\t\t\tparamCount++;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\t\t\t\tparamCount--;", "-\t\t\t\t\t\t\tparamCount--;", "+\t\t\t\t\t\t\tparamCount++;", "-\t\tchar[] typeSignature = null;", "+\t\tString typeSignature = null;", "-\t\t\t\tString signature = Signature.createTypeSignature(type, false);", "-\t\t\t\tif (signature.indexOf(Signature.C_GENERIC_START) < 0) {", "+\t\t\t\ttypeSignature = Signature.createTypeSignature(type, false);", "+\t\t\t\tif (typeSignature.indexOf(Signature.C_GENERIC_START) < 0) {", "+\t\t\t\t\ttypeSignature = null;", "-\t\t\t\t\ttypeSignature = signature.toCharArray();", "-\t\t\t\t\ttypePart = Signature.toCharArray(Signature.getTypeErasure(typeSignature));", "+\t\t\t\t\ttypePart = Signature.toCharArray(Signature.getTypeErasure(typeSignature.toCharArray()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b62c0bacb31e12e5e24ae103df66a04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t    if (!typeVariable.boundCheck(methodSubstitute, substitute))", "-\t\t\t        // incompatible due to bound check", "-\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, new TypeBinding[]{substitute, typeVariables[i] }, ParameterBoundMismatch);", "+\t\t\t\tswitch (typeVariable.boundCheck(methodSubstitute, substitute)) {", "+\t\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\t\t        // incompatible due to bound check", "+\t\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, new TypeBinding[]{substitute, typeVariables[i] }, ParameterBoundMismatch);", "+\t\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\t\t\t// tolerate unchecked bounds", "+\t\t\t\t\t\tmethodSubstitute.isUnchecked = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}"]}], "num": 21134}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c98af57fcac39d971d197ce44d29a8a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dfe8f66511b74a1338494c8eed2b6cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6008c17a45808fceabf1cda9453174f5e15f7a54", "commitAfterChange": "66f0e8b8112bb13bbbf568db765302c9834a0001", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["-\t\t\tcreateFoldersForPackage(pkgName, genFolder);", "+\t\t\t", "+\t\t\t// NOTE: Do NOT ever create any type of resource (files, folders) through the", "+\t\t\t// resource API. The resource change event will not go out until the build", "+\t\t\t// is completed. Instead always go through the JavaModel. -theodora", "+\t\t\tfinal Set<IContainer> newFolders = getNewPackageFolders(pkgName, genFolder);", "+\t\t\t// mark all newly create folders as derived.\t\t\t", "+\t\t\tmarkNewFoldersAsDerived((IContainer)pkgFrag.getResource(), newFolders);", "+\t\t\t", "-\t\t\tAptPlugin.log(e, \"(2)failed to generate type \" + typeName); //$NON-NLS-1$", "-\t\t\te.printStackTrace();", "+\t\t\tAptPlugin.log(e, \"failed to generate type \" + typeName); //$NON-NLS-1$\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f8e29435dd68c60162b2e4708e6cac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileMap.java", "commitBeforeChange": "f673a1d9c7172b796dd31cfa78dd0dad32318c9f", "commitAfterChange": "bd2b202132c8d4bb0e104bd05827a1b9231c9dc5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic synchronized void writeState()", "signatureAfterChange": " \tpublic synchronized void writeState()", "diff": ["+\t\t\t", "+\t\t\t// Number of generated files with attributes", "+\t\t\tout.writeInt(_flags.size());", "+\t\t\t", "+\t\t\t// for each generated file that has attributes...", "+\t\t\tfor (Entry<IFile, Set<Flags>> entry : _flags.entrySet()) {", "+\t\t\t\t// ...generated file name", "+\t\t\t\tout.writeUTF(convertIFileToPath(entry.getKey()));", "+\t\t\t\t", "+\t\t\t\tSet<Flags> flags = entry.getValue();", "+\t\t\t\t// ...number of attributes", "+\t\t\t\tout.writeInt(flags.size());", "+\t\t\t\tfor (Flags f : flags) {", "+\t\t\t\t\t// ...attribute name", "+\t\t\t\t\tout.writeUTF(f.name());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "-\t\t\tAptPlugin.log(ioe, \"Could not serialize APT dependencies\"); //$NON-NLS-1$", "+\t\t\tAptPlugin.logWarning(ioe, \"Could not serialize APT dependencies\"); //$NON-NLS-1$"]}], "num": 7745}
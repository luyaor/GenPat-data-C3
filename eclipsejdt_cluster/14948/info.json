{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "985e2011c2b2fe9d8fb1e1837e565374", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "125aef0d86d184ec0fd7de5ee0ae7251", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "1181734000bc58166717f28b96a50ec09d7eb3ed", "commitAfterChange": "c51e77393b67f111789d948569acd2e5924511c0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \tpublic synchronized void flushZipFiles()", "signatureAfterChange": "\r \tpublic synchronized void flushZipFiles()", "diff": ["-\t\tif (this.zipFilesClientCount == 0) return;\r", "-\t\tthis.zipFilesClientCount--;\r", "-\t\tif (this.zipFilesClientCount > 0) return;\r", "-\t\tIterator iterator = this.zipFiles.values().iterator();\r", "+\t\tThread currentThread = Thread.currentThread();\r", "+\t\tHashMap map = (HashMap)this.zipFiles.remove(currentThread);\r", "+\t\tif (map == null) return;\r", "+\t\tIterator iterator = map.values().iterator();\r", "-\t\t\t\t((ZipFile)iterator.next()).close();\r", "+\t\t\t\tZipFile zipFile = (ZipFile)iterator.next();\r", "+\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {\r", "+\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.flushZipFiles()] Closing ZipFile on \" +zipFile.getName()); //$NON-NLS-1$ //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tzipFile.close();\r", "-\t\tthis.zipFiles = null;\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3f9277553ecc2cfb51bf0f3fc94ba26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "08504ba476b411d63330d4820dcef9b3032013d3", "commitAfterChange": "c2c9899514741103674136b061d37380904756e0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public void setUnitsToLookInside(IWorkingCopy[] unitsToLookInside)", "signatureAfterChange": "\r public void setUnitsToLookInside(IWorkingCopy[] unitsToLookInside)", "diff": ["+\t\r", "+\tThread currentThread = Thread.currentThread();\r", "-\t\tthis.unitsToLookInside = null;\r", "+\t\tthis.unitsToLookInside.put(currentThread, null);\r", "-\t\tthis.unitsToLookInside = new HashMap();\r", "+\t\tMap workingCopies = (Map)this.unitsToLookInside.get(currentThread);\r", "+\t\tif (workingCopies == null){\r", "+\t\t\tthis.unitsToLookInside.put(currentThread, workingCopies = new HashMap());\r", "+\t\t}\r", "-\t\t\t\tthis.unitsToLookInside.put(original, unitToLookInside);\r", "+\t\t\t\tworkingCopies.put(original, unitToLookInside);\r", "-\t\t\t\tthis.unitsToLookInside.put(unitToLookInside, unitToLookInside);\r", "+\t\t\t\tworkingCopies.put(unitToLookInside, unitToLookInside);\r"]}], "num": 14948}
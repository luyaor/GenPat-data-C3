{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "862a3bd3c551dac439cc67bd1c0db75c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ce09720491b1240332f5535da25b5fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "3aa835135283a2acadb61b0aae182c129f17ffab", "commitAfterChange": "a9c15bae1087a65c1bc60140ceb7a5a5416fd8a8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration)", "signatureAfterChange": "\r public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration)", "diff": ["+\t\r", "+\t// range check\r", "+\tboolean isInRange = \r", "+\t\t\t\tscanner.initialPosition <= fieldDeclaration.declarationSourceStart\r", "+\t\t\t\t&& scanner.eofPosition >= fieldDeclaration.declarationSourceEnd;\r", "+\r", "-\t\trequestor.enterField(\r", "-\t\t\tfieldDeclaration.declarationSourceStart, \r", "-\t\t\tfieldDeclaration.modifiers & AccJustFlag, \r", "-\t\t\treturnTypeName(fieldDeclaration.type), \r", "-\t\t\tfieldDeclaration.name, \r", "-\t\t\tfieldDeclaration.sourceStart, \r", "-\t\t\tfieldDeclaration.sourceEnd); \r", "+\t\tif (isInRange) {\r", "+\t\t\trequestor.enterField(\r", "+\t\t\t\tfieldDeclaration.declarationSourceStart, \r", "+\t\t\t\tfieldDeclaration.modifiers & AccJustFlag, \r", "+\t\t\t\treturnTypeName(fieldDeclaration.type), \r", "+\t\t\t\tfieldDeclaration.name, \r", "+\t\t\t\tfieldDeclaration.sourceStart, \r", "+\t\t\t\tfieldDeclaration.sourceEnd); \r", "+\t\t}\r", "-\t\trequestor.exitField(fieldEndPosition);\r", "+\t\tif (isInRange){\r", "+\t\t\trequestor.exitField(fieldEndPosition);\r", "+\t\t}\r", "-\t\trequestor.enterInitializer(\r", "-\t\t\tfieldDeclaration.declarationSourceStart,\r", "-\t\t\tfieldDeclaration.modifiers); \r", "+\t\tif (isInRange){\r", "+\t\t\trequestor.enterInitializer(\r", "+\t\t\t\tfieldDeclaration.declarationSourceStart,\r", "+\t\t\t\tfieldDeclaration.modifiers); \r", "+\t\t}\r", "-\t\trequestor.exitInitializer(fieldDeclaration.declarationSourceEnd);\r", "+\t\tif (isInRange){\r", "+\t\t\trequestor.exitInitializer(fieldDeclaration.declarationSourceEnd);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a52873de5e65f9337f606f99b724cdc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "3aa835135283a2acadb61b0aae182c129f17ffab", "commitAfterChange": "a9c15bae1087a65c1bc60140ceb7a5a5416fd8a8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence)", "signatureAfterChange": "\r public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence)", "diff": ["+\t\r", "+\t// range check\r", "+\tboolean isInRange = \r", "+\t\t\t\tscanner.initialPosition <= typeDeclaration.declarationSourceStart\r", "+\t\t\t\t&& scanner.eofPosition >= typeDeclaration.declarationSourceEnd;\r", "+\t\r", "-\t\t\trequestor.enterInterface(\r", "-\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "-\t\t\t\ttypeDeclaration.modifiers & AccJustFlag, \r", "-\t\t\t\ttypeDeclaration.name, \r", "-\t\t\t\ttypeDeclaration.sourceStart, \r", "-\t\t\t\ttypeDeclaration.sourceEnd, \r", "-\t\t\t\tinterfaceNames);\r", "+\t\t\tif (isInRange){\r", "+\t\t\t\trequestor.enterInterface(\r", "+\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "+\t\t\t\t\ttypeDeclaration.modifiers & AccJustFlag, \r", "+\t\t\t\t\ttypeDeclaration.name, \r", "+\t\t\t\t\ttypeDeclaration.sourceStart, \r", "+\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "+\t\t\t\t\tinterfaceNames);\r", "+\t\t\t}\r", "-\t\t\t\trequestor.enterClass(\r", "-\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "-\t\t\t\t\ttypeDeclaration.modifiers, \r", "-\t\t\t\t\ttypeDeclaration.name, \r", "-\t\t\t\t\ttypeDeclaration.sourceStart, \r", "-\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "-\t\t\t\t\tnull, \r", "-\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\tif (isInRange){\r", "+\t\t\t\t\trequestor.enterClass(\r", "+\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.modifiers, \r", "+\t\t\t\t\t\ttypeDeclaration.name, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "+\t\t\t\t\t\tnull, \r", "+\t\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\t}\r", "-\t\t\t\trequestor.enterClass(\r", "-\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "-\t\t\t\t\ttypeDeclaration.modifiers, \r", "-\t\t\t\t\ttypeDeclaration.name, \r", "-\t\t\t\t\ttypeDeclaration.sourceStart, \r", "-\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "-\t\t\t\t\tCharOperation.concatWith(superclass.getTypeName(), '.'), \r", "-\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\tif (isInRange){\r", "+\t\t\t\t\trequestor.enterClass(\r", "+\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.modifiers, \r", "+\t\t\t\t\t\ttypeDeclaration.name, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "+\t\t\t\t\t\tCharOperation.concatWith(superclass.getTypeName(), '.'), \r", "+\t\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\t}\r", "-\t\tif (isInterface) {\r", "-\t\t\trequestor.exitInterface(typeDeclaration.declarationSourceEnd);\r", "-\t\t} else {\r", "-\t\t\trequestor.exitClass(typeDeclaration.declarationSourceEnd);\r", "+\t\tif (isInRange){\r", "+\t\t\tif (isInterface) {\r", "+\t\t\t\trequestor.exitInterface(typeDeclaration.declarationSourceEnd);\r", "+\t\t\t} else {\r", "+\t\t\t\trequestor.exitClass(typeDeclaration.declarationSourceEnd);\r", "+\t\t\t}\r"]}], "num": 71227}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc5521dba11875f3c60db9865dad2950", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d1caa5130182a013b7b16a983cbf30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void reportReference( \t\tAstNode reference, \t\tTypeDeclaration typeDeclaration, \t\tFieldDeclaration fieldDeclaration, \t\tIJavaElement parent, \t\tint accuracy) \t\tthrows CoreException", "signatureAfterChange": " public void reportReference( \tAstNode reference, \tTypeDeclaration typeDeclaration, \tFieldDeclaration fieldDeclaration, \tIJavaElement parent, \tint accuracy) \tthrows CoreException", "diff": ["-\t */", "-\tpublic void reportReference(", "-\t\tAstNode reference,", "-\t\tTypeDeclaration typeDeclaration,", "-\t\tFieldDeclaration fieldDeclaration,", "-\t\tIJavaElement parent,", "-\t\tint accuracy)", "-\t\tthrows CoreException {", "-", "-\t\tIJavaElement enclosingElement;", "-\t\tif (fieldDeclaration.isField()) {", "-\t\t\tif (parent instanceof IType) {", "-\t\t\t\t// create defining field handle", "-\t\t\t\tenclosingElement = this.createFieldHandle(fieldDeclaration, (IType)parent);", "-\t\t\t\tif (enclosingElement == null) return;", "-\t\t\t} else {", "-\t\t\t\tenclosingElement = parent;", "-\t\t\t}", "-", "-\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "-\t\t} else { // initializer", "-\t\t\tif (parent instanceof IType) {", "-\t\t\t\t// create defining initializer", "-\t\t\t\tenclosingElement =", "-\t\t\t\t\tthis.createInitializerHandle(", "-\t\t\t\t\t\ttypeDeclaration,", "-\t\t\t\t\t\tfieldDeclaration,", "-\t\t\t\t\t\t(IType)parent);", "-\t\t\t\tif (enclosingElement == null) return;", "-\t\t\t\tenclosingElement = parent;", "-\t\t\t// accept reference", "-\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "+ */", "+public void reportReference(", "+\tAstNode reference,", "+\tTypeDeclaration typeDeclaration,", "+\tFieldDeclaration fieldDeclaration,", "+\tIJavaElement parent,", "+\tint accuracy)", "+\tthrows CoreException {", "+", "+\tIJavaElement enclosingElement;", "+\tif (parent instanceof IType) {", "+\t\tenclosingElement = fieldDeclaration.isField()", "+\t\t\t? (IJavaElement) createFieldHandle(fieldDeclaration, (IType) parent)", "+\t\t\t: (IJavaElement) createInitializerHandle(typeDeclaration, fieldDeclaration, (IType) parent);", "+\t\tif (enclosingElement == null) return;", "+\t} else {", "+\t\tenclosingElement = parent;", "+\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed6711f1bb04f1c150f3657db338983", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException", "signatureAfterChange": " public void initialize(JavaProject project, int potentialMatchSize) throws JavaModelException", "diff": ["-\t */", "-\tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException {", "-\t\t// create name environment", "-\t\tif (this.nameEnvironment != null) { // cleanup", "-\t\t\tthis.nameEnvironment.cleanup();", "-\t\t}", "-\t\tif (potentialMatches.length == 1) {", "-\t\t\t// if only one potential match, a file name environment costs too much,", "-\t\t\t// so use the existing searchable  environment which will populate the java model", "-\t\t\t// only for this potential match and its required types.", "-\t\t\tthis.nameEnvironment = project.getSearchableNameEnvironment();", "-\t\t} else {", "-\t\t\tthis.nameEnvironment = new JavaSearchNameEnvironment(project);", "-\t\t}", "-", "-\t\t// create lookup environment", "-\t\tthis.options = new CompilerOptions(project.getOptions(true));", "-\t\tthis.lookupEnvironment =", "-\t\t\tnew LookupEnvironment(this, this.options, problemReporter, this.nameEnvironment);", "-\t\t\t", "-\t\t// create parser", "-\t\tthis.parser = new MatchLocatorParser(problemReporter);", "-\t\t\t\t", "-\t\t// remember project's name lookup", "-\t\tthis.nameLookup = project.getNameLookup();", "-\t\t", "-\t\t// initialize queue of units", "-\t\tthis.totalUnits = 0;", "-\t\tint maxUnits = potentialMatches.length;", "-\t\tthis.unitsToProcess = new CompilationUnitDeclaration[maxUnits];", "-\t\tthis.matchesToProcess = new PotentialMatch[maxUnits];", "-\t}", "+ */", "+public void initialize(JavaProject project, int potentialMatchSize) throws JavaModelException {", "+\tif (this.nameEnvironment != null)", "+\t\tthis.nameEnvironment.cleanup();", "+", "+\t// if only one potential match, a file name environment costs too much,", "+\t// so use the existing searchable  environment which will populate the java model", "+\t// only for this potential match and its required types.", "+\tthis.nameEnvironment = potentialMatchSize == 1", "+\t\t? (INameEnvironment) project.getSearchableNameEnvironment()", "+\t\t: (INameEnvironment) new JavaSearchNameEnvironment(project);", "+", "+\t// create lookup environment", "+\tthis.options = new CompilerOptions(project.getOptions(true));", "+\tProblemReporter problemReporter =", "+\t\tnew ProblemReporter(", "+\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(),", "+\t\t\tthis.options,", "+\t\t\tnew DefaultProblemFactory());", "+\tthis.lookupEnvironment = new LookupEnvironment(this, this.options, problemReporter, this.nameEnvironment);", "+", "+\tthis.parser = new MatchLocatorParser(problemReporter);", "+", "+\t// remember project's name lookup", "+\tthis.nameLookup = project.getNameLookup();", "+", "+\t// initialize queue of units", "+\tthis.numberOfMatches = 0;", "+\tthis.matchesToProcess = new PotentialMatch[potentialMatchSize];", "+}"]}], "num": 69325}
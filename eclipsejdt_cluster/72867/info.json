{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9729a7b7e4b9125d0754f874c9e42bfb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd837762a617364ec5f21fa8af91fcb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (binding != null) { // is a shared type reference which was already resolved", "-\t\tif (!binding.isValidBinding())", "+\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\tif (!this.resolvedType.isValidBinding())", "-\t\tbinding = getTypeBinding(scope);", "-\t\tif (!binding.isValidBinding()) {", "-\t\t\tscope.problemReporter().invalidType(this, binding);", "+\t\tthis.resolvedType = getTypeBinding(scope);", "+\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t\tscope.problemReporter().invalidType(this, this.resolvedType);", "-\t\tif (isTypeUseDeprecated(binding, scope))", "-\t\t\tscope.problemReporter().deprecatedType(binding, this);", "+\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "+\t\t\tscope.problemReporter().deprecatedType(this.resolvedType, this);", "-\treturn this.expressionType = binding;", "+\treturn this.resolvedType = this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb95a8621200193b4ea9fe97415d171", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "\r public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tboolean isStatic = binding.isStatic();\r", "-\t\treceiver.generateCode(currentScope, codeStream, valueRequired && (!isStatic) && (binding.constant == NotAConstant));\r", "+\t\tboolean isStatic = this.codegenBinding.isStatic();\r", "+\t\treceiver.generateCode(currentScope, codeStream, valueRequired && (!isStatic) && (this.codegenBinding.constant == NotAConstant));\r", "-\t\t\tif (binding.constant == NotAConstant) {\r", "-\t\t\t\tif (binding.declaringClass == null) { // array length\r", "+\t\t\tif (this.codegenBinding.constant == NotAConstant) {\r", "+\t\t\t\tif (this.codegenBinding.declaringClass == null) { // array length\r", "-\t\t\t\t\t\t\tcodeStream.getstatic(binding);\r", "+\t\t\t\t\t\t\tcodeStream.getstatic(this.codegenBinding);\r", "-\t\t\t\t\t\t\tcodeStream.getfield(binding);\r", "+\t\t\t\t\t\t\tcodeStream.getfield(this.codegenBinding);\r", "-\t\t\t\tcodeStream.generateConstant(binding.constant, implicitConversion);\r", "+\t\t\t\tcodeStream.generateConstant(this.codegenBinding.constant, implicitConversion);\r"]}], "num": 72867}
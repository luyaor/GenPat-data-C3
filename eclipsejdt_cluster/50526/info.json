{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfe12f15f0b8e94599aa9ec4a10ccd2a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "099090e2122e7dc02d71754674610e50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "commitAfterChange": "1b4ae3c306349bc12b5bd14c0b0208197346f4fe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static char[] createDeclarationIndexKey( \t\t\tchar[] typeName, \t\t\tchar[] declaringQualification, \t\t\tchar[] methodName, \t\t\tint argCount, \t\t\tchar[] signature, \t\t\tchar[][] parameterTypes, \t\t\tchar[][] parameterNames, \t\t\tchar[] returnType, \t\t\tint modifiers, \t\t\tchar[] packageName, \t\t\tint typeModifiers, \t\t\tint extraFlags)", "signatureAfterChange": " \tpublic static char[] createDeclarationIndexKey( \t\t\tchar[] typeName, \t\t\tchar[] declaringQualification, \t\t\tchar[] methodName, \t\t\tint argCount, \t\t\tchar[] signature, \t\t\tchar[][] parameterTypes, \t\t\tchar[][] parameterNames, \t\t\tchar[] returnType, \t\t\tint modifiers, \t\t\tchar[] packageName, \t\t\tint typeModifiers, \t\t\tint extraFlags)", "diff": ["-\t\t\t\t\tchar[][] parameterTypeErasures = new char[argCount][];", "-\t\t\t\t\tfor (int i = 0; i < parameterTypes.length; i++) {", "-\t\t\t\t\t\tparameterTypeErasures[i] = getTypeErasure(parameterTypes[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tparameterTypesChars = CharOperation.concatWith(parameterTypeErasures, PARAMETER_SEPARATOR);", "+\t\t\t\t\tparameterTypesChars = CharOperation.concatWith(parameterTypes, PARAMETER_SEPARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3991cb60ee99e41bbba0adcefeac201", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/MethodNameMatchRequestorWrapper.java", "commitBeforeChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "commitAfterChange": "1b4ae3c306349bc12b5bd14c0b0208197346f4fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "signatureAfterChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "diff": ["-\t\tif (parameterTypes.length > 0) {", "+\t\tif (signature != null) {", "+\t\t\tchar[][] parTypes = Signature.getParameterTypes(signature);", "+\t\t\tif (parTypes.length > 0) {", "+\t\t\t\tfor (int i = 0, l = parTypes.length; i < l; ++i) {", "+\t\t\t\t\tCharOperation.replace(parTypes[i], '/', '.');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tparamTypeSigs = CharOperation.toStrings(parTypes);", "+\t\t} else if (parameterTypes.length > 0) {"]}], "num": 50526}
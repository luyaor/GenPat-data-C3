{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a75a32d26537d1f69f8f7e19a97a4d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38c4c3ee4a25d131207a83c1484e2ed8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "f78e4675edd2e8b24e6d49d405330196881697a0", "commitAfterChange": "aaea056b63df0d51dde45ba7280dde54d23c0cca", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void test075_Bug155003() throws CoreException", "signatureAfterChange": " public void test075_Bug155003() throws CoreException", "diff": ["-\tassertBindingCreated(", "-\t\tnew String[] {", "-\t\t\t\"/P/X.java\",", "-\t\t\t\"public class X<T> {\\n\" + ", "-\t\t\t\"\t<U extends Exception> X<T> foo(X<T> x) throws RuntimeException, U {\\n\" + ", "-\t\t\t\"\t\treturn null;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tvoid test() throws Exception {\\n\" + ", "-\t\t\t\"\t\t/*start*/foo(this)/*end*/;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\"", "-\t\t},", "-\t\t\"LX<LX;:TT;>;.foo<U:Ljava/lang/Exception;>(LX<TT;>;)LX<TT;>;^Ljava/lang/RuntimeException;^TU;%<Ljava/lang/Exception;>\"", "+\tString content = \"public class X<T> {\\n\" + ", "+\t\t\"\t<U extends Exception> X<T> foo(X<T> x) throws RuntimeException, U {\\n\" + ", "+\t\t\"\t\treturn null;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tvoid test() throws Exception {\\n\" + ", "+\t\t\"\t\t/*start*/foo(this)/*end*/;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\";", "+\tthis.workingCopies = createWorkingCopies(new String[] { \"/P/X.java\", content }, true /*resolve*/);", "+\tASTNode node = buildAST(content, this.workingCopies[0]);", "+\tassertEquals(\"Invalid node type!\", ASTNode.METHOD_INVOCATION, node.getNodeType());", "+\tIBinding binding = resolveBinding(node);", "+\tBindingKey bindingKey = new BindingKey(binding.getKey());", "+\tassertStringsEqual(\"Unexpected thrown exceptions\",", "+\t\t\"Ljava.lang.RuntimeException;\\n\" + ", "+\t\t\"TU;\\n\",", "+\t\tbindingKey.getThrownExceptions()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea50aaf8be2b0f1337c0f9d02a49d6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "22c227d686d26416b5bac8312b280d00559f2a1f", "commitAfterChange": "5d72659fefa872e5d517acd0d145d5320aaef46b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate static Map getOptions(IJavaProject jproject)", "signatureAfterChange": " \tprivate static Map getOptions(IJavaProject jproject)", "diff": ["-\t\tMap options = _optionsMaps.get(jproject);", "+\t\tIProject project = jproject.getProject();", "+\t\tassert(null != project);", "+\t\tMap options = _optionsMaps.get(project);", "-\t\t\tIScopeContext projContext = new ProjectScope(jproject.getProject());", "-\t\t\tIScopeContext[] contexts = new IScopeContext[] { projContext };", "+\t\t\t_optionsMaps.put(project, options);", "+\t\t\t// Load project values into the map", "+\t\t\tProjectScope projScope = new ProjectScope(project);", "+\t\t\tIScopeContext[] contexts = new IScopeContext[] { projScope };", "-\t\t}", "-\t\telse {", "-\t\t\t// TODO: do we need to handle this case?", "-\t\t\treturn null;", "+\t\t\t// Add change listener for this project, so we can update the map later on", "+\t\t\tIEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);", "+\t\t\tChangeListener listener = new ChangeListener(project);", "+\t\t\tprojPrefs.addPreferenceChangeListener(listener);", "+\t\t\t((IEclipsePreferences)projPrefs.parent()).addNodeChangeListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9484a1f49f15d230cc3cfb4cd04c437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "f26218f3521c8454774f76998a1d9edc04562b51", "commitAfterChange": "6bfd04bff95399f4eb302a926e97c5356b6b08f8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \tpublic ISourceRange mapSource(\r \t\tIType type,\r \t\tchar[] contents,\r \t\tIJavaElement searchedElement)", "signatureAfterChange": "\r \tpublic ISourceRange mapSource(\r \t\tIType type,\r \t\tchar[] contents,\r \t\tIJavaElement searchedElement)", "diff": ["+\t\t\tchar[] fullName = null;\r", "+\t\t\tthis.anonymousClassName = 0;\r", "-\t\t\t\tisAnonymousClass = ((IBinaryType) fType.getRawInfo()).isAnonymous();\r", "+\t\t\t\tIBinaryType binType = (IBinaryType) fType.getRawInfo();\r", "+\t\t\t\tisAnonymousClass = binType.isAnonymous();\r", "+\t\t\t\tfullName = binType.getName();\r", "+\t\t\t\tString eltName = fType.getElementName();\r", "+\t\t\t\teltName = eltName.substring(eltName.lastIndexOf('$') + 1, eltName.length());\r", "-\t\t\t\t\tthis.anonymousClassName = Integer.parseInt(fType.getElementName());\r", "+\t\t\t\t\tthis.anonymousClassName = Integer.parseInt(eltName);\r", "-\t\t\t\tparser = new SourceElementParser(this, factory, new CompilerOptions(JavaCore.getOptions()), true);\r", "-\t\t\t} else {\r", "-\t\t\t\tparser = new SourceElementParser(this, factory, new CompilerOptions(JavaCore.getOptions()));\r", "+\t\t\tboolean doFullParse = hasToRetrieveSourceRangesForLocalClass(fullName);\r", "+\t\t\tparser = new SourceElementParser(this, factory, new CompilerOptions(JavaCore.getOptions()), doFullParse);\r", "-\t\t\t\tisAnonymousClass);\r", "+\t\t\t\tdoFullParse);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f628d97513c1c4707de6c60998d971ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "3973964fa15a8c49d459282ce0d949753f7e2224", "commitAfterChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate GeneratedFileManager(final IProject project)", "signatureAfterChange": " \tprivate GeneratedFileManager(final IProject project)", "diff": ["+\t\t// register a preference listener so that we can watch for changes to the gen src dir", "+\t\tProjectScope projScope = new ProjectScope(project);", "+\t\tIEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);", "+\t\tIPreferenceChangeListener listener = new IPreferenceChangeListener() {", "+\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "+\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "+\t\t\t\t\tsetGeneratedSourceFolderName( (String)event.getNewValue() );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\tprojPrefs.addPreferenceChangeListener(listener);", "+\t\t"]}], "num": 44747}
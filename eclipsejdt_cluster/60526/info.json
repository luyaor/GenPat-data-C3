{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "605d262fa813f1e950236221bd825751", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b684559cf4e929ba320e9a650c9da92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "1924cfa5e4209a8742be0104afe1beaad86d0922", "commitAfterChange": "dfe897878a3115c90160783084107f96dcd301be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\tClassScope recipientScope = sourceType.scope;", "-\t\t\t\t\t\t\t// construct custom compiler options with suppressed warnings", "-\t\t\t\t\t\t\tCompilerOptions customOptions = getCustomCompilerOptions(recipientScope);", "-\t\t\t\t\t\t\tif (customOptions != null) {", "-\t\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = recipientScope.referenceContext;", "-\t\t\t\t\t\t\t\trecipientScope.options = customOptions;", "-\t\t\t\t\t\t\t\t// discard already generated warnings which got suppressed", "-\t\t\t\t\t\t\t\ttypeDeclaration.compilationResult().suppressRecordedWarnings(", "-\t\t\t\t\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, ", "-\t\t\t\t\t\t\t\t\t\ttypeDeclaration.declarationSourceEnd, ", "-\t\t\t\t\t\t\t\t\t\trecipientScope.problemReporter());", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tTypeDeclaration typeDeclaration =  sourceType.scope.referenceContext;", "+\t\t\t\t\t\t\trecordSuppressWarnings(typeDeclaration.compilationResult(), typeDeclaration.declarationSourceStart, typeDeclaration.declarationSourceEnd);", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tAbstractMethodDeclaration methodDeclaration = ((SourceTypeBinding)sourceMethod.declaringClass).scope.referenceContext.declarationOf(sourceMethod);", "-\t\t\t\t\t\t\tMethodScope recipientScope = methodDeclaration.scope;", "-\t\t\t\t\t\t\t// construct custom compiler options with suppressed warnings", "-\t\t\t\t\t\t\tCompilerOptions customOptions = getCustomCompilerOptions(recipientScope);", "-\t\t\t\t\t\t\tif (customOptions != null) {", "-\t\t\t\t\t\t\t\trecipientScope.options = customOptions;", "-\t\t\t\t\t\t\t\t// discard already generated warnings which got suppressed", "-\t\t\t\t\t\t\t\tmethodDeclaration.compilationResult().suppressRecordedWarnings(", "-\t\t\t\t\t\t\t\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\t\t\t\t\t\t\t\tmethodDeclaration.declarationSourceEnd, ", "-\t\t\t\t\t\t\t\t\t\trecipientScope.problemReporter());", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tsourceType = (SourceTypeBinding) sourceMethod.declaringClass;", "+\t\t\t\t\t\t\tAbstractMethodDeclaration methodDeclaration = sourceType.scope.referenceContext.declarationOf(sourceMethod);", "+\t\t\t\t\t\t\trecordSuppressWarnings(methodDeclaration.compilationResult(), methodDeclaration.declarationSourceStart, methodDeclaration.declarationSourceEnd);", "-\t\t\t\t\t\t((FieldBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tFieldBinding sourceField = (FieldBinding) this.recipient;", "+\t\t\t\t\t\tsourceField.tagBits |= tagBits;", "+\t\t\t\t\t\tif ((tagBits & TagBits.AnnotationSuppressWarnings) != 0) {", "+\t\t\t\t\t\t\tsourceType = (SourceTypeBinding) sourceField.declaringClass;", "+\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "+\t\t\t\t\t\t\trecordSuppressWarnings(sourceType.scope.referenceContext.compilationResult(), fieldDeclaration.declarationSourceStart, fieldDeclaration.declarationSourceEnd);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t\t((LocalVariableBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tLocalVariableBinding variable = (LocalVariableBinding) this.recipient;", "+\t\t\t\t\t\tvariable.tagBits |= tagBits;", "+\t\t\t\t\t\tif ((tagBits & TagBits.AnnotationSuppressWarnings) != 0) {", "+\t\t\t\t\t\t\t LocalDeclaration localDeclaration = variable.declaration;", "+\t\t\t\t\t\t\trecordSuppressWarnings(scope.referenceContext().compilationResult(), localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd);", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e034bd948e21ec8abc1c42b7a8563ae2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5af3ec11c73ebd5f465c42ddba07188d87fc00f1", "commitAfterChange": "b246de6fdcd5a901a16dcaeba98ae727a49eb635", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["+\t\tIPath[] scopeProjectsAndJars = this.scope.enclosingProjectsAndJars();", "+\t\tint scopeLength = scopeProjectsAndJars.length;", "-\t\t\tIPackageFragmentRoot[] roots = null;", "-\t\t\ttry {", "-\t\t\t\troots = javaProject.getPackageFragmentRoots();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// java project doesn't exist -> continue with next project (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {", "-\t\t\t\tIJavaElement[] pkgs = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tpkgs = roots[j].getChildren();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// pkg fragment root doesn't exist -> continue with next root (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "-\t\t\t\t\tcontinue;", "+\t\t\t// Verify that project belongs to the scope", "+\t\t\tboolean found = false;", "+\t\t\tfor (int j=0; j<scopeLength; j++) {", "+\t\t\t\tif (projects[i].getPath().equals(scopeProjectsAndJars[j])) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\tbreak;", "-\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {", "-\t\t\t\t\tIPackageFragment pkg = (IPackageFragment) pkgs[k];", "-\t\t\t\t\tif (!pkg.exists()) continue; // package doesn't exist -> continue with next package (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "-\t\t\t\t\tif (pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {", "-\t\t\t\t\t\tIResource resource = pkg.getResource();", "-\t\t\t\t\t\tif (resource == null) // case of a file in an external jar", "-\t\t\t\t\t\t\tresource = javaProject.getProject();", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (encloses(pkg)) {", "-\t\t\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(pkg, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "-\t\t\t\t\t\t\t\treport(match);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!found) continue;", "+\t\t\tthis.nameLookup = ((JavaProject) projects[i]).newNameLookup(this.workingCopies);", "+\t\t\tIPackageFragment[] packageFragments = this.nameLookup.findPackageFragments(new String(pkgPattern.pkgName), true, true);", "+\t\t\tint pLength = packageFragments == null ? 0 : packageFragments.length;", "+\t\t\tfor (int p=0; p<pLength; p++) {", "+\t\t\t\tIPackageFragment fragment = packageFragments[p];", "+\t\t\t\tIResource resource = fragment.getResource();", "+\t\t\t\tif (resource == null) // case of a file in an external jar", "+\t\t\t\t\tresource = javaProject.getProject();", "+\t\t\t\ttry {", "+\t\t\t\t\tif (encloses(fragment)) {", "+\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(fragment, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "+\t\t\t\t\t\treport(match);", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9946209860736ba6460992cd0b0a51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "9d055452465eca773099f6ddbd176c8ac4e63d52", "commitAfterChange": "b579f24643c72147abdb76f77077723f48a330f4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "signatureAfterChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "diff": ["-\tif (blockIndex != -1 && controlIndex < blockIndex) {", "-\t\tif (this.elementInfoStack[blockIndex] == IF && this.elementObjectInfoStack[blockIndex] != null) {", "-\t\t\tExpression condition = (Expression)this.elementObjectInfoStack[blockIndex];", "-\t\t\tIfStatement ifStatement =", "-\t\t\t\tnew IfStatement(", "+\tint index = blockIndex != -1 && controlIndex < blockIndex ? blockIndex : controlIndex;", "+\t", "+\tif (index != -1 && this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] != null) {", "+\t\tExpression condition = (Expression)this.elementObjectInfoStack[index];", "+\t\t", "+\t\t// If currentElement is a RecoveredLocalVariable then it can be contained in the if statement", "+\t\tif (this.currentElement instanceof RecoveredLocalVariable &&", "+\t\t\t\tthis.currentElement.parent instanceof RecoveredBlock) {", "+\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) this.currentElement;", "+\t\t\tif (recoveredLocalVariable.localDeclaration.initialization == null &&", "+\t\t\t\t\tstatement instanceof Expression &&", "+\t\t\t\t\tcondition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {", "+\t\t\t\tthis.currentElement.add(statement, 0);", "+\t\t\t\t", "+\t\t\t\tstatement = recoveredLocalVariable.updatedStatement();", "+\t\t\t\t", "+\t\t\t\t// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead", "+\t\t\t\tRecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;", "+\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "+\t\t\t\t", "+\t\t\t\tthis.currentElement = recoveredBlock;", "+\t\t\t\t", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tIfStatement ifStatement = ", "+\t\t\tnew IfStatement(", "-\t\t\tthis.enclosingNode = ifStatement;", "-\t\t\treturn ifStatement;", "-\t\t}", "-\t} else if (controlIndex != -1) {", "-\t\tif (this.elementInfoStack[controlIndex] == IF && this.elementObjectInfoStack[controlIndex] != null) {", "-\t\t\tExpression condition = (Expression)this.elementObjectInfoStack[controlIndex];", "-\t\t\tIfStatement ifStatement =", "-\t\t\t\tnew IfStatement(", "-\t\t\t\t\tcondition, ", "-\t\t\t\t\tstatement, ", "-\t\t\t\t\tcondition.sourceStart, ", "-\t\t\t\t\tstatement.sourceEnd);", "-\t\t\tthis.enclosingNode = ifStatement;", "-\t\t\treturn ifStatement;", "-\t\t}", "+\t\tthis.enclosingNode = ifStatement;", "+\t\treturn ifStatement;"]}], "num": 60526}
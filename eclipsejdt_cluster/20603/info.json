{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "004a65f57f2b41fe423b1a15b91d4f7e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23b287a07ea6a1946aa3b91201c09195", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tint wFailures = this.whitespacesFailures.size();", "-\tint lwFailures = this.leadingWhitespacesFailures.size();", "+\tint sFailures = this.failures.size();", "+\tint seFailures = this.expectedFailures.size();", "+\tint swFailures = this.whitespacesFailures.size();", "+\tint slwFailures = this.leadingWhitespacesFailures.size();", "-\tif (this.failures > 0) {", "-\t\tSystem.out.println(this.failures+\" files has still different output while reformatting!\");", "+\tSystem.out.println();", "+\tif (sFailures > 0) {", "+\t\tSystem.out.println(sFailures+\" files has still different output while reformatting!\");", "-\tif (lwFailures == 0) {", "+\tif (seFailures > 0) {", "+\t\tSystem.out.println(seFailures+\" files has still different output while reformatting due to old formatter bugs!\");", "+\t}", "+\tif (slwFailures == 0) {", "-\t\tSystem.out.println(lwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "+\t\tSystem.out.println(slwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "-\tif (wFailures > 0) {", "-\t\tSystem.out.println(wFailures+\" files have different spaces \"+failuresType+\"!\");", "+\tif (swFailures > 0) {", "+\t\tSystem.out.println(swFailures+\" files have different spaces \"+failuresType+\"!\");", "-\tif (lwFailures > 0) {", "+\tSystem.out.println();", "+\tif (sFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different output \"+failuresType+\":\");", "+\t\tfor (int i=0; i<sFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "+\t\t}", "+\t}", "+\tif (seFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different output \"+failuresType+\" (due to old formatter bugs):\");", "+\t\tfor (int i=0; i<sFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "+\t\t}", "+\t}", "+\tif (slwFailures > 0) {", "-\t\tfor (int i=0; i<lwFailures; i++) {", "+\t\tfor (int i=0; i<slwFailures; i++) {", "-\tif (wFailures > 0) {", "+\tif (swFailures > 0) {", "-\t\tfor (int i=0; i<wFailures; i++) {", "+\t\tfor (int i=0; i<swFailures; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b0c3365349a130af78d22cfa50bcb99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "commitAfterChange": "bbd2ac48b173a123c7419ce013244d878b152c22", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["+\tif (OUTPUT_DIR != null) {", "+\t\tif (COMPARE) {", "+\t\t\tSystem.out.println(\"Comparison done with output files located in \"+OUTPUT_DIR);", "+\t\t}", "+\t}", "-\tint sFailures = this.failures.size();", "-\tint seFailures = this.expectedFailures.size();", "-\tint swFailures = this.whitespacesFailures.size();", "-\tint slwFailures = this.leadingWhitespacesFailures.size();", "-\tString failuresType = COMPARE != null ? \"than old formatter\" : \"when reformatting\";", "-\tif (sFailures > 0) {", "-\t\tSystem.out.println(sFailures+\" files has still different output while reformatting!\");", "-\t}", "-\tif (seFailures > 0) {", "-\t\tSystem.out.println(seFailures+\" files has still different output while reformatting due to old formatter bugs!\");", "-\t}", "-\tif (slwFailures == 0) {", "-\t\tSystem.out.println(\"No file has different line leading spaces \"+failuresType+\" :-)\");", "-\t} else {", "-\t\tSystem.out.println(slwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "-\t}", "-\tif (swFailures > 0) {", "-\t\tSystem.out.println(swFailures+\" files have different spaces \"+failuresType+\"!\");", "-\t}", "-\tif (this.changedHeaderFooter >0) {", "-\t\tSystem.out.println(this.changedHeaderFooter+\" differences in header/footer have been found\");", "-\t}", "-\tif (this.changedPreTags >0) {", "-\t\tSystem.out.println(this.changedPreTags+\" differences in <pre> tags (blank lines) have been found\");", "+\tint max = FAILURES.length;", "+\tfor (int i=0; i<max; i++) {", "+\t\tList failures = FAILURES[i].failures;", "+\t\tint size = failures.size();", "+\t\tif (size > 0) {", "+\t\t\tSystem.out.print(size);", "+\t\t\tSystem.out.print(\" file\");", "+\t\t\tif (size == 1) {", "+\t\t\t\tSystem.out.print(\" has \");", "+\t\t\t} else {", "+\t\t\t\tSystem.out.print(\"s have \");", "+\t\t\t}", "+\t\t\tSystem.out.print(FAILURES[i]);", "+\t\t\tSystem.out.println('!');", "+\t\t}", "-\tif (sFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different output \"+failuresType+\":\");", "-\t\tfor (int i=0; i<sFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "-\t\t}", "-\t}", "-\tif (seFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different output \"+failuresType+\" (due to old formatter bugs):\");", "-\t\tfor (int i=0; i<seFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.expectedFailures.get(i));", "-\t\t}", "-\t}", "-\tif (slwFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different line leading spaces \"+failuresType+\":\");", "-\t\tfor (int i=0; i<slwFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.leadingWhitespacesFailures.get(i));", "-\t\t}", "-\t}", "-\tif (swFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different spaces \"+failuresType+\":\");", "-\t\tfor (int i=0; i<swFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.whitespacesFailures.get(i));", "+\tfor (int i=0; i<max; i++) {", "+\t\tList failures = FAILURES[i].failures;", "+\t\tint size = failures.size();", "+\t\tif (size > 0) {", "+\t\t\tSystem.out.println(\"List of file(s) with \"+FAILURES[i]+\":\");", "+\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\tSystem.out.println(\"\t- \"+failures.get(j));", "+\t\t\t}"]}], "num": 20603}
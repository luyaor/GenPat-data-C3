{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84e4f41069a4551514c548117bf6be33", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60a1aa9290b3dc4900b459fc98e7b217", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "9579e3add6a99053acfe6faec70c877feca5e8d3", "commitAfterChange": "542e863753b063e393ffd7f35e08fe8fe2f0bb63", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void buildForProject(JavaProject project, Vector infos, Vector units) throws JavaModelException", "signatureAfterChange": "\r private void buildForProject(JavaProject project, Vector infos, Vector units) throws JavaModelException", "diff": ["-\t\tif (focusType != null && focusType.getJavaProject().equals(project)) {\r", "+\t\tboolean inProjectOfFocusType = focusType != null && focusType.getJavaProject().equals(project);\r", "+\t\tif (inProjectOfFocusType) {\r", "-\t\t\tthis.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));\r", "+\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));\r", "+\t\t\tif (focusTypeBinding == null \r", "+\t\t\t\t|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {\r", "+\t\t\t\t// focus type is not visible in this project: no need to go further\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "-\t\tif (focusType != null && focusType.getJavaProject().equals(project)) {\r", "+\t\tif (inProjectOfFocusType) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a818c2081a5a3560847551aa662c0fa1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "7daed772befc71241cd5718015cdd1d8faa642ca", "commitAfterChange": "bf0f3c0ee6c28cc3716705a3315c5622fc576ce2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": " private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["-\t\t\tif (this.matchSet.needsResolve()) {", "-\t\t\t\tif (this.parsedUnit.types != null) {", "-\t\t\t\t\tif (this.shouldResolve) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (this.parsedUnit.scope == null) {", "-\t\t\t\t\t\t\t\t// bindings were not created (case of a FieldReferencePattern that doesn't need resolve, ", "-\t\t\t\t\t\t\t\t// but we need to resolve because of a SingleNameReference being a potential match)", "-\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);", "-\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.completeTypeBindings(this.parsedUnit, true);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.parsedUnit.scope != null) {", "-\t\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();", "-\t\t\t\t\t\t\t\tthis.parsedUnit.resolve();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// report matches that needed resolve", "-\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "-\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);", "-\t\t\t\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t\t\t\t// could not resolve: report innacurate matches", "-\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "-\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);", "-\t\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {", "-\t\t\t\t\t\t\t\t// problem with class path", "-\t\t\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t\t\t}", "+\t\t\tif (this.matchSet.needsResolve() && this.parsedUnit.types != null) {", "+\t\t\t\tif (!this.locator.compilationAborted) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (this.parsedUnit.scope == null) {", "+\t\t\t\t\t\t\t// bindings were not created (case of a FieldReferencePattern that doesn't need resolve, ", "+\t\t\t\t\t\t\t// but we need to resolve because of a SingleNameReference being a potential match)", "+\t\t\t\t\t\t\tMatchingOpenable[] openables = this.locator.matchingOpenables.getMatchingOpenables(this.openable.getJavaProject().getPackageFragmentRoots());", "+\t\t\t\t\t\t\tthis.locator.createAndResolveBindings(openables);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// problem ocured while completing the bindings for the base classes", "-\t\t\t\t\t\t// -> report innacurate matches", "+\t\t\t\t\t\tif (this.parsedUnit.scope != null) {", "+\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();", "+\t\t\t\t\t\t\tthis.parsedUnit.resolve();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// report matches that needed resolve", "+\t\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\t\t// could not resolve: report innacurate matches", "+\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "+\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);", "+\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {", "+\t\t\t\t\t\t\t// problem with class path", "+\t\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// problem ocured while completing the bindings for the base classes", "+\t\t\t\t\t// -> report innacurate matches", "+\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "+\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);"]}], "num": 69938}
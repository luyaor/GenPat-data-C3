{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2503b943dc6e891152b4a91ba19112e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d0b197fb299ecd6e413ed24584a970f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "832582ab03c6787601e5dcd7ee3195c60884aafd", "commitAfterChange": "228d97c266175eb4ef857a062c0317e3f2ae187e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\t\t\tfor (int i = 0; i < size; i++)", "+\t\t\t\tfor (int i = 0; i < size; i++) {", "-\t\t\t\tthis.tagBits |= \tTagBits.HasUnresolvedMemberTypes;", "+\t\t\t\t}", "+\t\t\t\tthis.tagBits |= TagBits.HasUnresolvedMemberTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7af93e880275ed215ae420e769334296", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/align/Alignment.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void checkColumn()", "signatureAfterChange": "  \tpublic void checkColumn()", "diff": ["-\t\t\t\t\tfor (int i = this.fragmentIndex+1; i < this.fragmentCount; i++) this.fragmentIndentations[i] = 0;", "+\t\t\t\t\tfor (int i = this.fragmentIndex+1; i < this.fragmentCount; i++) {", "+\t\t\t\t\t\tthis.fragmentIndentations[i] = 0;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "939139e20b661b690fd2dd62d8579e66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "06f23e3e171e1532838272ad3cfed1dbf476c295", "commitAfterChange": "fd83708e4f6c48e5f68b55d90ce222d8723ca6ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void cleanup()", "signatureAfterChange": "\r \r public void cleanup()", "diff": ["-public void cleanup() {\r", "-\tfor (int i = 0, max = classpaths.length; i < max; i++)\r", "-\t\tclasspaths[i].reset();\r", "+\r", "+public void cleanup() {\r", "+\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "+\t\tclasspaths[i].reset();\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d5af2f223c2a9283ee902b1ce2e1e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "8bb6b9481b79f29da1fc965f1ebeeb888e97d205", "commitAfterChange": "4e81456d91d85b9a795956ecc38cb1d7061bd32d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite)", "diff": ["+\r", "+\r", "+\r", "+\r", "+\r", "+\r", "+\r", "+\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\r", "+\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++){\r", "+\t\t\t\t\t}\r", "+\r", "+\r", "+\r", "+\r", "-\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf7ba5dbd2730d5c8a604a2ba93fcbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "1a523523632cd1a64bce4e193fddecc091f0a09b", "commitAfterChange": "2da53a14245271c999bfef856e9b2ece46065198", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\twhile ((--index > 0) && (returnType == methods[index].returnType));", "-\tif (index > 0) {\t\t// All inherited methods do NOT have the same vmSignature", "+\twhile (--index > 0 && returnType == methods[index].returnType);", "+\tif (index > 0) {  // All inherited methods do NOT have the same vmSignature", "-\tif (!type.isInterface()){ // ignore concrete methods for interfaces", "-\t\tfor (int i = length; --i >= 0;)\t\t// Remember that only one of the methods can be non-abstract", "+\tif (!type.isInterface()) {  // ignore concrete methods for interfaces", "+\t\tfor (int i = length; --i >= 0;) {  // Remember that only one of the methods can be non-abstract", "+\t\t}", "-\t\t\t\tif (!mustImplementAbstractMethod(methods[i]))", "-\t\t\t\t\treturn;\t\t// in this case, we have already reported problem against the concrete superclass", "+\t\t\t\tif (!mustImplementAbstractMethod(methods[i])) return;  // have already reported problem against the concrete superclass", "-\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "-\t\t\t\tif (typeDeclaration != null) {", "-\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(methods[0]);", "-\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "-\t\t\t\t}", "+\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "+\t\t\tif (typeDeclaration != null) {", "+\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(methods[0]);", "+\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t} else {", "+\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t}"]}], "num": 32074}
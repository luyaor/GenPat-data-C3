{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "496853012e4d7c6baee1f21d3f6ca6c5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28edf008fd911bffd19fcd085fb7fd67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "commitAfterChange": "193042cfcc3e974ade1d4da172a703fabd891361", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " private void writeStreamChars(FileOutputStream stream, char[] array) throws IOException", "signatureAfterChange": " private void writeStreamChars(FileOutputStream stream, char[] array) throws IOException", "diff": ["-\tint length= array.length;", "+\tif ((this.bufferIndex + 2) >= BUFFER_WRITE_SIZE)  {", "+\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\tthis.bufferIndex = 0;", "+\t}", "+\tint length = array.length;", "-\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\tthis.bufferIndex = 0;", "-\t}", "-\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\tthis.bufferIndex = 0;", "-\t}", "-\tint idx = this.bufferIndex;", "-\tfor (int i=0; i<length; i++) {", "-\t\tint ch = array[i];", "-\t\tif ((ch & 0x007F) == ch) {", "-\t\t\tthis.streamBuffer[idx++] = (byte) ch;", "+\tthis.streamEnd += 2;", "+", "+\t// we're assuming that very few char[] are so large that we need to flush the buffer more than once, if at all", "+\tint totalBytesNeeded = length * 3;", "+\tif (totalBytesNeeded <= BUFFER_WRITE_SIZE) {", "+\t\tif (this.bufferIndex + totalBytesNeeded > BUFFER_WRITE_SIZE) {", "+\t\t\t// flush the buffer now to make sure there is room for the array", "+\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\tthis.bufferIndex = 0;", "-\t\telse if ((ch & 0x07FF) == ch) {", "+\t\twriteStreamChars(stream, array, 0, length);", "+\t} else {", "+\t\tint charsPerWrite = BUFFER_WRITE_SIZE / 3;", "+\t\tint start = 0;", "+\t\twhile (start < length) {", "+\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tint charsLeftToWrite = length - start;", "+\t\t\tint end = start + (charsPerWrite < charsLeftToWrite ? charsPerWrite : charsLeftToWrite);", "+\t\t\twriteStreamChars(stream, array, start, end);", "+\t\t\tstart = end;", "+\t\t}", "+\t}", "+}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t}", "-\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\tidx = 0;", "-\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\tthis.streamEnd += idx - this.bufferIndex + 2;", "-\tthis.bufferIndex = idx;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5efb119a084ad07fc7b650efb9d71c0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " private int readStreamInt(FileInputStream stream) throws IOException", "signatureAfterChange": " private int readStreamInt(FileInputStream stream) throws IOException", "diff": ["-\tint idx = this.bufferIndex;", "-\tthis.bufferIndex += 4;", "-\tint bufferSize = BUFFER_READ_SIZE;", "-\tif (this.bufferIndex >= bufferSize) {", "-\t\tthis.bufferIndex -= bufferSize;", "-\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\tval += (streamBuffer[idx++]&0xFF);", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\treturn val;", "+\tif (this.bufferIndex + 4 >= this.bufferEnd) {", "+\t\treadStreamBuffer(stream);", "-\tint val = (streamBuffer[idx]&0xFF)<<24;", "-\tval += (streamBuffer[idx+1]&0xFF)<<16;", "-\tval += (streamBuffer[idx+2]&0xFF)<<8;", "-\treturn val + (streamBuffer[idx+3]&0xFF);", "+\tint val = (streamBuffer[this.bufferIndex++] & 0xFF) << 24;", "+\tval += (streamBuffer[this.bufferIndex++] & 0xFF) << 16;", "+\tval += (streamBuffer[this.bufferIndex++] & 0xFF) << 8;", "+\treturn val + (streamBuffer[this.bufferIndex++] & 0xFF);"]}], "num": 35076}
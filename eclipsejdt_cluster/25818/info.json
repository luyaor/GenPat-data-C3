{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffe236a4e04a6ab99d40a41de15c48c2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a110ff7e29fecf9fef993c47386f8b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding binding)", "signatureAfterChange": " protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding binding)", "diff": ["-\tif ((this.matchMode & SearchPattern.R_PREFIX_MATCH) != 0) {", "-\t\tif (CharOperation.prefixEquals(qualifiedPattern, sourceName, this.isCaseSensitive)) {", "-\t\t\treturn ACCURATE_MATCH;", "-\t\t}", "-\t}", "-\tif (this.isCamelCase) {", "-\t\tif ((qualifiedPattern.length>0 && sourceName.length>0 && qualifiedPattern[0] == sourceName[0])) {", "-\t\t\tif (CharOperation.camelCaseMatch(qualifiedPattern, sourceName, (this.matchMode & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\tswitch (this.matchMode) {", "+\t\tcase SearchPattern.R_PREFIX_MATCH:", "+\t\t\tif (CharOperation.prefixEquals(qualifiedPattern, sourceName, this.isCaseSensitive)) {", "-\t\t}", "-\t\tif (!this.isCaseSensitive && this.matchMode == SearchPattern.R_EXACT_MATCH) {", "-\t\t\tboolean matchPattern = CharOperation.equals(qualifiedPattern, sourceName, false);", "-\t\t\treturn matchPattern ? ACCURATE_MATCH : IMPOSSIBLE_MATCH;", "-\t\t}", "+\t\t\tbreak;", "+\t\tcase SearchPattern.R_CAMELCASE_MATCH:", "+\t\t\tif ((qualifiedPattern.length>0 && sourceName.length>0 && qualifiedPattern[0] == sourceName[0])) {", "+\t\t\t\tif (CharOperation.camelCaseMatch(qualifiedPattern, sourceName, false)) {", "+\t\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t\t}", "+\t\t\t\tif (!this.isCaseSensitive && CharOperation.prefixEquals(qualifiedPattern, sourceName, false)) {", "+\t\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH:", "+\t\t\tif ((qualifiedPattern.length>0 && sourceName.length>0 && qualifiedPattern[0] == sourceName[0])) {", "+\t\t\t\tif (CharOperation.camelCaseMatch(qualifiedPattern, sourceName, true)) {", "+\t\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tif (CharOperation.match(qualifiedPattern, sourceName, this.isCaseSensitive)) {", "+\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t}", "-\tboolean matchPattern = CharOperation.match(qualifiedPattern, sourceName, this.isCaseSensitive);", "-\treturn matchPattern ? ACCURATE_MATCH : IMPOSSIBLE_MATCH;", "-", "+\treturn IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e67816e1f9e39f658ccb6c0178634566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  private static boolean checkPrimitiveType(char[] primitiveTypeName, char[] typeName)", "signatureAfterChange": "  private static int checkName(char[] name, char[] typeName, int pos, int length)", "diff": ["-private static boolean checkPrimitiveType(char[] primitiveTypeName, char[] typeName) {", "-\treturn CharOperation.fragmentEquals(primitiveTypeName, typeName, 0, true) &&", "-\t\t(typeName.length == primitiveTypeName.length", "-\t\t || Character.isWhitespace(typeName[primitiveTypeName.length])", "-\t\t || typeName[primitiveTypeName.length] == C_ARRAY", "-\t\t || typeName[primitiveTypeName.length] == C_DOT);", "+private static int checkName(char[] name, char[] typeName, int pos, int length) {", "+    if (CharOperation.fragmentEquals(name, typeName, pos, true)) {", "+        pos += name.length;", "+        if (pos == length) return pos;", "+        char currentChar = typeName[pos];", "+        switch (currentChar) {", "+            case ' ' :", "+            case '.' :", "+            case '<' :", "+            case '>' :", "+            case '[' :", "+            case ',' :", "+                return pos;", "+\t\t\tdefault:", "+\t\t\t    if (Character.isWhitespace(currentChar))", "+\t\t\t    \treturn pos;", "+\t\t\t    ", "+        }", "+    }", "+    return -1;"]}], "num": 25818}
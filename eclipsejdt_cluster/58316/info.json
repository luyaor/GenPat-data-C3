{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "392b4f966389595e967022c710a0623f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c6174c3f09f29d9d943125bc4e9cf97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "709a7ffdab3a47190685515954dea357e978ebb9", "commitAfterChange": "a42b7b6acad0bc9f8a604727c5e1286d05f029f7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean checkAnnotations()", "signatureAfterChange": " \tprivate boolean checkAnnotations()", "diff": ["-\t\tif (_testFailingCases && null == am3) {", "+\t\tif (_reportFailingCases && null == am3) {", "+\t\tboolean foundM1 = false; // do we find an element of unresolved type?", "+\t\t\t\tfoundM1 = true;", "+\t\t\t\tTypeKind tk = element.asType().getKind();", "+\t\t\t\tif (tk != TypeKind.ERROR && tk != TypeKind.DECLARED) {", "+\t\t\t\t\treportError(\"Field Negative1.m1 has a type of unexpected kind \" + tk);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "-\t\t\t\tif (_testFailingCases && null == am4) {", "+\t\t\t\tif (_reportFailingCases && null == am4) {", "-\t\t\t\tif (_testFailingCases && null == am5) {", "+\t\t\t\tif (_reportFailingCases && null == am5) {", "-\t\t\t\tif (_testFailingCases && null == am8) {", "+\t\t\t\tif (_reportFailingCases && null == am8) {", "+\t\tif (_reportFailingCases && !foundM1) {", "+\t\t\treportError(\"Couldn't find field Negative1.m1, presumably because its type is missing\");", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47f94529fb268343485cef543b9562e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "e91110df42d468297a7f0f4f917c63937b06463a", "commitAfterChange": "347a15ddb09354fd82312f43e8a959f68c39e906", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["+\t\t", "+\t\t// Selectively enable just one of the test routines", "-\t\t", "-\t\tif (!collectElements()) {", "-\t\t\treturn false;", "+\t\tString oneTest = options.get(CLASSNAME);", "+\t\tif (oneTest != null && oneTest.length() > 0) {", "+\t\t\tint enable = 0;", "+\t\t\ttry {", "+\t\t\t\tenable = Integer.parseInt(oneTest);", "+\t\t\t}", "+\t\t\tcatch (NumberFormatException e) {", "+\t\t\t\treportError(\"Option value '\" + oneTest + \"' must be an integer indicating what test to enable\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (enable > 4) {", "+\t\t\t\treportError(\"Option value must be an integer 1 to 4\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (enable >= 1) {", "+\t\t\t\ttestNegative1 = enable == 1;", "+\t\t\t\ttestNegative2 = enable == 2;", "+\t\t\t\ttestNegative3 = enable == 3;", "+\t\t\t\ttestNegative4 = enable == 4;", "+\t\t\t}", "+\t\tif (testNegative4 && !checkNegative4()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}], "num": 58316}
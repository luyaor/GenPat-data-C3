{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62afe8b9c69d384804ef5aa1aedf5417", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d06082e6479f5d10a01edf4cf32146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "b308074bc5b31f3a5857e47f87565296fbba4a15", "commitAfterChange": "d36a5b020e7b8fc57d912810db0ffb9dd045eb9a", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": "  public void testBug103304b()", "signatureAfterChange": "  public void testBug103304b()", "diff": ["-\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "-\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +", "-\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "-\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74764a4fbf1a68d492e87f633893b0d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "d13b416373f0706b9f6c096fa50a9c7742cd01fb", "commitAfterChange": "67703159b6e692911d4366f9193bf075599a0db1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "signatureAfterChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "diff": ["-\t\t\tSystem.out.println(\"-> performing concurrent job : START - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\tSystem.out.println(\"-> performing concurrent job (\"+ Thread.currentThread()+\"): START - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - ForceImmediate - \" + searchJob);//$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - ForceImmediate - \" + searchJob);//$NON-NLS-1$\r", "-\t\t\t\t\t\t\tSystem.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tSystem.out.println(\"-> performing concurrent job (\"+ Thread.currentThread()+\"): END - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - CancelIfNotReady - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - CancelIfNotReady - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - WaitUntilReady - \" + searchJob);//$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - WaitUntilReady - \" + searchJob);//$NON-NLS-1$\r", "-\t\t\tSystem.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\tSystem.out.println(\"-> performing concurrent job (\"+ Thread.currentThread()+\"): END - \" + searchJob); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff7f8cc1bcbe7c6b07a457148df32d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "dfb3637702f1e682e6ee6d2d1c5b6ed54a2efc28", "commitAfterChange": "40fae5391d4f13359de5727f38342f6b018e40a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-\t\t\t\"3. ERROR in ALL.java (at line 8)\\n\" + ", "+\t\t\t\"3. ERROR in ALL.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass L<T> implements I { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type L<T> has the same erasure as foo(U) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in ALL.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"5. ERROR in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\" + ", "+\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in ALL.java (at line 10)\\n\" + ", "+\t\t\t */", "+\t\t);", "+\t\t// and just to show that name clash errors are NOT generated when another error is detected", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"ALL.java\",", "+\t\t\t\t\"class A {}\\n\" +", "+\t\t\t\t\"class B {}\\n\" +", "+\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\" +", "+", "+\t\t\t\t\"class W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in ALL.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\r\\n\" + ", "+\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in ALL.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\r\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t/*", "+\t\t\t ALL.java:4: warning: [unchecked] unchecked call to foo(U) as a member of the raw type X", "+\t\t\t ALL.java:4: name clash: foo(T) in W<T> and foo(U) in X have the same erasure, yet neither overrides the other"]}], "num": 829}
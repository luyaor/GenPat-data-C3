{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "833af898a82d1d31f26f401fea9ca17a", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4437b25b127627035607b41e69f62b03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\tLocalTypeBinding localType = (LocalTypeBinding) binding;", "+\t\t\t", "-\t\t\tcurrentScope.referenceCompilationUnit().record((LocalTypeBinding) binding);", "+\t\t\tcurrentScope.referenceCompilationUnit().record(localType);", "+\t\t\tlocalType.setConstantPoolName(currentScope.compilationUnitScope().computeConstantPoolName(localType));", "+\t\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope);", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4967090274142bb1124b2098a5ee28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\tLocalTypeBinding localType = (LocalTypeBinding) binding;", "+", "-\t\t\tcurrentScope.referenceCompilationUnit().record((LocalTypeBinding) binding);", "+\t\t\tcurrentScope.referenceCompilationUnit().record(localType);", "-\t\t\t/* force to emulation of access to direct enclosing instance: only for local members.", "-\t\t\t * By using the initializer scope, we actually only request an argument emulation, the", "-\t\t\t * field is not added until actually used. However we will force allocations to be qualified", "-\t\t\t * with an enclosing instance.", "-\t\t\t */", "-\t\t\tinitializerScope.emulateOuterAccess(", "-\t\t\t\t(SourceTypeBinding) binding.enclosingType(),", "-\t\t\t\tfalse);", "-", "+\t\t\tlocalType.setConstantPoolName(currentScope.compilationUnitScope().computeConstantPoolName(localType));", "+\t\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope);", "+\t\t\t", "-\t\t};", "+\t\t}"]}], "num": 17267}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eefee4ec1a17682d998610ec1e8f736c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c5693770e9d75f882b3a58b5fc602c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "0174bc81f7d2de8d27eebb7df04fb04a776d1f62", "commitAfterChange": "02ca7d63ca30b6951ead9edfd62cb5ea00ae7204", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "   private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "signatureAfterChange": "   private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "diff": ["+\t", "+\t// -- the following are used for early termination.", "+\t// ---", "-\tfor (int i = 0, length = methods == null ? 0 : methods.length; i < length; i++) {", "-\t\tfinal MethodBinding method = methods[i];", "-\t\tif (!method.isAbstract() || method.redeclaresPublicObjectMethod(scope)) continue; // skips statics, defaults, public object methods ...", "-\t\tfinal boolean validBinding = method.isValidBinding();", "-\t\tif (aContract == null && validBinding) {", "-\t\t\taContract = method;", "-\t\t\tcontractParameterLength = aContract.parameters.length;", "-\t\t\tcontractSelector = aContract.selector;", "-\t\t} else {", "-\t\t\tif (!validBinding || method.parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, method.selector)) {", "-\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif (contractsCount == contractsLength) {", "-\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength += 16], 0, contractsCount);", "-\t\t}", "-\t\tcontracts[contractsCount++] = method;", "-\t}", "+\tfor (int i = 0, length = methods == null ? 0 : methods.length; i < length; i++) {", "+\t\tfinal MethodBinding method = methods[i];", "+\t\tif (method.isStatic() || method.redeclaresPublicObjectMethod(scope)) continue;", "+\t\tif (method.isDefaultMethod()) {", "+\t\t\tfor (int j = 0; j < contractsCount; j++) {", "+\t\t\t\tif (contracts[j] == null)", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (MethodVerifier.doesMethodOverride(method, contracts[j], scope.environment())) {", "+\t\t\t\t\tif (aContract == contracts[j]) {", "+\t\t\t\t\t\taContract = null;", "+\t\t\t\t\t\tcontractParameterLength = 0;", "+\t\t\t\t\t\tcontractSelector = null;", "+\t\t\t\t\t}", "+\t\t\t\t\tcontractsCount--;", "+\t\t\t\t\t// abstract method from super type rendered default by present interface ==> contracts[j] = null;", "+\t\t\t\t\tif (j < contractsCount)", "+\t\t\t\t\t\tSystem.arraycopy(contracts, j+1, contracts, j, contractsCount - j);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcontinue; // skip default method itself", "+\t\t}", "+\t\tfinal boolean validBinding = method.isValidBinding();", "+\t\tif (aContract == null && validBinding) {", "+\t\t\taContract = method;", "+\t\t\tcontractParameterLength = aContract.parameters.length;", "+\t\t\tcontractSelector = aContract.selector;", "+\t\t} else {", "+\t\t\tif (!validBinding || method.parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, method.selector)) {", "+\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tif (contractsCount == contractsLength) {", "+\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength += 16], 0, contractsCount);", "+\t\t}", "+\t\tcontracts[contractsCount++] = method;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba46075593f3d62492a0d4c30a604cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "73100562c653e9756405c4478f78d4c46826e31a", "commitAfterChange": "b17c7970aa52528427b488a1895b516cefe9f2a2", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "signatureAfterChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "diff": ["-\t// -- the following are used for early termination.", "-\tMethodBinding aContract = null;", "-\tint contractParameterLength = 0;", "-\tchar [] contractSelector = null;", "-\t// ---", "-\t", "-\t\t", "-\t\tif (aContract == null) {", "-\t\t\taContract = superInterfaceContracts[0];", "-\t\t\tcontractParameterLength = aContract.parameters.length;", "-\t\t\tcontractSelector = aContract.selector;", "-\t\t\tcontracts = superInterfaceContracts;", "-\t\t\tcontractsCount = contractsLength = superInterfaceContractsLength;", "-\t\t} else {", "-\t\t\tif (superInterfaceContracts[0].parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, superInterfaceContracts[0].selector)) {", "-\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tif (contractsLength < contractsCount + superInterfaceContractsLength) {", "-\t\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength = contractsCount + superInterfaceContractsLength], 0, contractsCount);", "-\t\t\t}", "-\t\t\tSystem.arraycopy(superInterfaceContracts, 0, contracts, contractsCount,\tsuperInterfaceContractsLength);", "-\t\t\tcontractsCount += superInterfaceContractsLength;", "+\t\tif (contractsLength < contractsCount + superInterfaceContractsLength) {", "+\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength = contractsCount + superInterfaceContractsLength], 0, contractsCount);", "+\t\tSystem.arraycopy(superInterfaceContracts, 0, contracts, contractsCount,\tsuperInterfaceContractsLength);", "+\t\tcontractsCount += superInterfaceContractsLength;", "+", "-\t\tif (method.isStatic() || method.redeclaresPublicObjectMethod(scope)) continue;", "+\t\tif (method == null || method.isStatic() || method.redeclaresPublicObjectMethod(scope)) ", "+\t\t\tcontinue;", "+\t\tif (!method.isValidBinding()) ", "+\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t\t\tif (aContract == contracts[j]) {", "-\t\t\t\t\t\taContract = null;", "-\t\t\t\t\t\tcontractParameterLength = 0;", "-\t\t\t\t\t\tcontractSelector = null;", "-\t\t\t\t\t}", "-\t\t}", "-\t\tfinal boolean validBinding = method.isValidBinding();", "-\t\tif (aContract == null && validBinding) {", "-\t\t\taContract = method;", "-\t\t\tcontractParameterLength = aContract.parameters.length;", "-\t\t\tcontractSelector = aContract.selector;", "-\t\t} else {", "-\t\t\tif (!validBinding || method.parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, method.selector)) {", "-\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t}"]}], "num": 52972}
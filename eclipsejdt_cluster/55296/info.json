{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf3c21bb1e1fcf9b85cfa55b67aa62a9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fa00b7d4ae5156eac53fa0e3194fadc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void findMethodBinding(BlockScope scope)", "signatureAfterChange": "  protected TypeBinding findMethodBinding(BlockScope scope)", "diff": ["- */", "-protected void findMethodBinding(BlockScope scope) {", "-\tthis.binding = this.receiver.isImplicitThis()", "-\t\t\t? scope.getImplicitMethod(this.selector, this.argumentTypes, this)", "+", "+protected TypeBinding findMethodBinding(BlockScope scope) {", "+\t", "+\t", "+\tthis.binding = this.receiver.isImplicitThis() ? ", "+\t\t\tscope.getImplicitMethod(this.selector, this.argumentTypes, this) ", "+", "+\tif (this.binding == null) // can't happen ? I think we always get a problem binding, anyways.", "+\t\treturn null;", "+\t", "+\tif (this.binding instanceof PolyParameterizedGenericMethodBinding)", "+\t\treturn new PolyTypeBinding(this);", "+\t", "-\t\t\treturn;", "+\t\t\treturn this.binding.returnType;", "-\t\tInferenceContext18 ctx = getInferenceContext(pgmb);", "-\t\tif (ctx == null || ctx.stepCompleted < InferenceContext18.BINDINGS_UPDATED)", "-\t\t\treturn;", "-\t\t\t\treturn;", "+\t\t\t\treturn this.binding.returnType;", "-\t\t\treturn;", "+\t\t\treturn this.binding.returnType;", "-\t\t\treturn;", "+\t\t\treturn this.binding.returnType;", "-\t\t\t\treturn;", "+\t\t\t\treturn this.binding.returnType;", "-\t\tif (scope.parameterCompatibilityLevel(this.binding, finalArgumentTypes, false, false) == Scope.NOT_COMPATIBLE)", "+\t\tif (scope.parameterCompatibilityLevel(this.binding, finalArgumentTypes, false) == Scope.NOT_COMPATIBLE)", "-}", "+\treturn this.binding.returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5dbc5b3150a96bd9db5e5c6fe1450ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  protected TypeBinding findMethodBinding(BlockScope scope)", "signatureAfterChange": "  protected TypeBinding findMethodBinding(BlockScope scope)", "diff": ["-\t", "-\tthis.binding = this.receiver.isImplicitThis() ? ", "-\t\t\tscope.getImplicitMethod(this.selector, this.argumentTypes, this) ", "-\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, this.argumentTypes, this);", "+\tif (this.expectedType != null && this.binding instanceof PolyParameterizedGenericMethodBinding) {", "+\t\tthis.binding = this.solutionsPerTargetType.get(this.expectedType);", "+\t}", "+\tif (this.binding == null) { // first look up or a \"cache miss\" somehow.", "+\t\tthis.binding = this.receiver.isImplicitThis() ? ", "+\t\t\t\tscope.getImplicitMethod(this.selector, this.argumentTypes, this) ", "+\t\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, this.argumentTypes, this);", "-\tif (this.binding == null) // can't happen ? I think we always get a problem binding, anyways.", "-\t\treturn null;", "-\t", "-\tif (this.binding instanceof PolyParameterizedGenericMethodBinding)", "-\t\treturn new PolyTypeBinding(this);", "-\t", "+\t    if (this.binding instanceof PolyParameterizedGenericMethodBinding) {", "+\t\t    this.solutionsPerTargetType = new HashMap<TypeBinding, MethodBinding>();", "+\t\t    return new PolyTypeBinding(this);", "+\t    }", "+\t}", "-\t"]}], "num": 55296}
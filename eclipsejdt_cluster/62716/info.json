{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8974e64212a682dc7cb6bad6350f2271", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45932ddcd7925c4d92ed6b7fd6dfbfa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/NodeInfoStore.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic final ASTNode newPlaceholderNode(int nodeType)", "signatureAfterChange": " \tpublic final ASTNode newPlaceholderNode(int nodeType)", "diff": ["-\t\t// TODO (david) - use new AST.createInstance(int nodeType) method (the fact that try has no finally should not be an issue for placeholders)", "-\t\tAST ast= fAst;", "-\t\tswitch (nodeType) {", "-\t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION :", "-\t\t\t\treturn ast.newAnnotationTypeDeclaration();", "-\t\t\tcase ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION :", "-\t\t\t\treturn ast.newAnnotationTypeMemberDeclaration();", "-\t\t\tcase ASTNode.ANONYMOUS_CLASS_DECLARATION :", "-\t\t\t\treturn ast.newAnonymousClassDeclaration();", "-\t\t\tcase ASTNode.ARRAY_ACCESS :", "-\t\t\t\treturn ast.newArrayAccess();", "-\t\t\tcase ASTNode.ARRAY_CREATION :", "-\t\t\t\treturn ast.newArrayCreation();", "-\t\t\tcase ASTNode.ARRAY_INITIALIZER :", "-\t\t\t\treturn ast.newArrayInitializer();", "-\t\t\tcase ASTNode.ARRAY_TYPE :", "-\t\t\t\treturn ast.newArrayType(ast.newPrimitiveType(PrimitiveType.INT));", "-\t\t\tcase ASTNode.ASSERT_STATEMENT :", "-\t\t\t\treturn ast.newAssertStatement();", "-\t\t\tcase ASTNode.ASSIGNMENT :", "-\t\t\t\treturn ast.newAssignment();", "-\t\t\tcase ASTNode.BLOCK :", "-\t\t\t\treturn ast.newBlock();", "-\t\t\tcase ASTNode.BLOCK_COMMENT :", "-\t\t\t\treturn ast.newBlockComment();", "-\t\t\tcase ASTNode.BOOLEAN_LITERAL :", "-\t\t\t\treturn ast.newBooleanLiteral(false);", "-\t\t\tcase ASTNode.BREAK_STATEMENT :", "-\t\t\t\treturn ast.newBreakStatement();", "-\t\t\tcase ASTNode.CAST_EXPRESSION :", "-\t\t\t\treturn ast.newCastExpression();", "-\t\t\tcase ASTNode.CATCH_CLAUSE :", "-\t\t\t\treturn ast.newCatchClause();", "-\t\t\tcase ASTNode.CHARACTER_LITERAL :", "-\t\t\t\treturn ast.newCharacterLiteral();", "-\t\t\tcase ASTNode.CLASS_INSTANCE_CREATION :", "-\t\t\t\treturn ast.newClassInstanceCreation();", "-\t\t\tcase ASTNode.COMPILATION_UNIT :", "-\t\t\t\treturn ast.newCompilationUnit();", "-\t\t\tcase ASTNode.CONDITIONAL_EXPRESSION :", "-\t\t\t\treturn ast.newConditionalExpression();", "-\t\t\tcase ASTNode.CONSTRUCTOR_INVOCATION :", "-\t\t\t\treturn ast.newConstructorInvocation();", "-\t\t\tcase ASTNode.CONTINUE_STATEMENT :", "-\t\t\t\treturn ast.newContinueStatement();", "-\t\t\tcase ASTNode.DO_STATEMENT :", "-\t\t\t\treturn ast.newDoStatement();", "-\t\t\tcase ASTNode.EMPTY_STATEMENT :", "-\t\t\t\treturn ast.newEmptyStatement();", "-\t\t\tcase ASTNode.ENHANCED_FOR_STATEMENT :", "-\t\t\t\treturn ast.newEnhancedForStatement();", "-\t\t\tcase ASTNode.ENUM_CONSTANT_DECLARATION :", "-\t\t\t\treturn ast.newEnumConstantDeclaration();", "-\t\t\tcase ASTNode.ENUM_DECLARATION :", "-\t\t\t\treturn ast.newEnumDeclaration();", "-\t\t\tcase ASTNode.EXPRESSION_STATEMENT :", "-\t\t\t\treturn ast.newExpressionStatement(ast.newMethodInvocation());", "-\t\t\tcase ASTNode.FIELD_ACCESS :", "-\t\t\t\treturn ast.newFieldAccess();", "-\t\t\tcase ASTNode.FIELD_DECLARATION :", "-\t\t\t\treturn ast.newFieldDeclaration(ast.newVariableDeclarationFragment());", "-\t\t\tcase ASTNode.FOR_STATEMENT :", "-\t\t\t\treturn ast.newForStatement();", "-\t\t\tcase ASTNode.IF_STATEMENT :", "-\t\t\t\treturn ast.newIfStatement();", "-\t\t\tcase ASTNode.IMPORT_DECLARATION :", "-\t\t\t\treturn ast.newImportDeclaration();", "-\t\t\tcase ASTNode.INFIX_EXPRESSION :", "-\t\t\t\treturn ast.newInfixExpression();", "-\t\t\tcase ASTNode.INITIALIZER :", "-\t\t\t\treturn ast.newInitializer();", "-\t\t\tcase ASTNode.INSTANCEOF_EXPRESSION :", "-\t\t\t\treturn ast.newInstanceofExpression();", "-\t\t\tcase ASTNode.JAVADOC :", "-\t\t\t\treturn ast.newJavadoc();", "-\t\t\tcase ASTNode.LABELED_STATEMENT :", "-\t\t\t\treturn ast.newLabeledStatement();", "-\t\t\tcase ASTNode.LINE_COMMENT :", "-\t\t\t\treturn ast.newLineComment();", "-\t\t\tcase ASTNode.MARKER_ANNOTATION :", "-\t\t\t\treturn ast.newMarkerAnnotation();", "-\t\t\tcase ASTNode.MEMBER_REF :", "-\t\t\t\treturn ast.newMemberRef();", "-\t\t\tcase ASTNode.MEMBER_VALUE_PAIR :", "-\t\t\t\treturn ast.newMemberValuePair();", "-\t\t\tcase ASTNode.METHOD_DECLARATION :", "-\t\t\t\treturn ast.newMethodDeclaration();", "-\t\t\tcase ASTNode.METHOD_INVOCATION :", "-\t\t\t\treturn ast.newMethodInvocation();", "-\t\t\tcase ASTNode.METHOD_REF :", "-\t\t\t\treturn ast.newMethodRef();", "-\t\t\tcase ASTNode.METHOD_REF_PARAMETER :", "-\t\t\t\treturn ast.newMethodRefParameter();", "-\t\t\tcase ASTNode.MODIFIER :", "-\t\t\t\treturn ast.newModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "-\t\t\tcase ASTNode.NORMAL_ANNOTATION :", "-\t\t\t\treturn ast.newNormalAnnotation();", "-\t\t\tcase ASTNode.NULL_LITERAL :", "-\t\t\t\treturn ast.newNullLiteral();", "-\t\t\tcase ASTNode.NUMBER_LITERAL :", "-\t\t\t\treturn ast.newNumberLiteral();", "-\t\t\tcase ASTNode.PACKAGE_DECLARATION :", "-\t\t\t\treturn ast.newPackageDeclaration();", "-\t\t\tcase ASTNode.PARAMETERIZED_TYPE :", "-\t\t\t\treturn ast.newParameterizedType(ast.newSimpleType(ast.newSimpleName(\"id\"))); //$NON-NLS-1$", "-\t\t\tcase ASTNode.PARENTHESIZED_EXPRESSION :", "-\t\t\t\treturn ast.newParenthesizedExpression();", "-\t\t\tcase ASTNode.POSTFIX_EXPRESSION :", "-\t\t\t\treturn ast.newPostfixExpression();", "-\t\t\tcase ASTNode.PREFIX_EXPRESSION :", "-\t\t\t\treturn ast.newPrefixExpression();", "-\t\t\tcase ASTNode.PRIMITIVE_TYPE :", "-\t\t\t\treturn ast.newPrimitiveType(PrimitiveType.INT);", "-\t\t\tcase ASTNode.QUALIFIED_NAME :", "-\t\t\t\treturn ast.newQualifiedName(ast.newSimpleName(\"id\"), ast.newSimpleName(\"id\"));  //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\tcase ASTNode.QUALIFIED_TYPE :", "-\t\t\t\treturn ast.newQualifiedType(ast.newSimpleType(ast.newSimpleName(\"id\")), ast.newSimpleName(\"id\")); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tcase ASTNode.RETURN_STATEMENT :", "-\t\t\t\treturn ast.newReturnStatement();", "-\t\t\tcase ASTNode.SIMPLE_NAME :", "-\t\t\t\treturn ast.newSimpleName(\"id\"); //$NON-NLS-1$", "-\t\t\tcase ASTNode.SIMPLE_TYPE :", "-\t\t\t\treturn ast.newSimpleType(ast.newSimpleName(\"id\")); //$NON-NLS-1$", "-\t\t\tcase ASTNode.SINGLE_MEMBER_ANNOTATION :", "-\t\t\t\treturn ast.newSingleMemberAnnotation();", "-\t\t\tcase ASTNode.SINGLE_VARIABLE_DECLARATION :", "-\t\t\t\treturn ast.newSingleVariableDeclaration();", "-\t\t\tcase ASTNode.STRING_LITERAL :", "-\t\t\t\treturn ast.newStringLiteral();", "-\t\t\tcase ASTNode.SUPER_CONSTRUCTOR_INVOCATION :", "-\t\t\t\treturn ast.newSuperConstructorInvocation();", "-\t\t\tcase ASTNode.SUPER_FIELD_ACCESS :", "-\t\t\t\treturn ast.newFieldAccess();", "-\t\t\tcase ASTNode.SUPER_METHOD_INVOCATION :", "-\t\t\t\treturn ast.newSuperMethodInvocation();", "-\t\t\tcase ASTNode.SWITCH_CASE:", "-\t\t\t\treturn ast.newSwitchCase();", "-\t\t\tcase ASTNode.SWITCH_STATEMENT :", "-\t\t\t\treturn ast.newSwitchStatement();", "-\t\t\tcase ASTNode.SYNCHRONIZED_STATEMENT :", "-\t\t\t\treturn ast.newSynchronizedStatement();", "-\t\t\tcase ASTNode.TAG_ELEMENT :", "-\t\t\t\treturn ast.newTagElement();", "-\t\t\tcase ASTNode.TEXT_ELEMENT :", "-\t\t\t\treturn ast.newTextElement();", "-\t\t\tcase ASTNode.THIS_EXPRESSION :", "-\t\t\t\treturn ast.newThisExpression();", "-\t\t\tcase ASTNode.THROW_STATEMENT :", "-\t\t\t\treturn ast.newThrowStatement();", "-\t\t\tcase ASTNode.TRY_STATEMENT :", "-\t\t\t\tTryStatement tryStatement= ast.newTryStatement();", "-\t\t\t\ttryStatement.setFinally(ast.newBlock()); // have to set at least a finally clock to be legal code", "-\t\t\t\treturn tryStatement;", "-\t\t\tcase ASTNode.TYPE_DECLARATION :", "-\t\t\t\treturn ast.newTypeDeclaration();", "-\t\t\tcase ASTNode.TYPE_DECLARATION_STATEMENT :", "-\t\t\t\treturn ast.newTypeDeclarationStatement(ast.newTypeDeclaration());", "-\t\t\tcase ASTNode.TYPE_LITERAL :", "-\t\t\t\treturn ast.newTypeLiteral();", "-\t\t\tcase ASTNode.TYPE_PARAMETER :", "-\t\t\t\treturn ast.newTypeParameter();", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "-\t\t\t\treturn ast.newVariableDeclarationExpression(ast.newVariableDeclarationFragment());", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_FRAGMENT :", "-\t\t\t\treturn ast.newVariableDeclarationFragment();", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT :", "-\t\t\t\treturn ast.newVariableDeclarationStatement(ast.newVariableDeclarationFragment());", "-\t\t\tcase ASTNode.WHILE_STATEMENT :", "-\t\t\t\treturn ast.newWhileStatement();", "-\t\t\tcase ASTNode.WILDCARD_TYPE :", "-\t\t\t\treturn ast.newWildcardType();", "-\t\t}", "-\t\tthrow new IllegalArgumentException();", "-\t}", "+\t    try {", "+\t\t    ASTNode node= this.ast.createInstance(nodeType);", "+\t\t    switch (node.getNodeType()) {", "+\t\t\t\tcase ASTNode.FIELD_DECLARATION:", "+\t\t\t\t    ((FieldDeclaration) node).fragments().add(this.ast.newVariableDeclarationFragment());", "+\t\t\t\t    break;", "+\t\t\t\tcase ASTNode.MODIFIER:", "+\t\t\t\t    ((Modifier) node).setKeyword(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.TRY_STATEMENT :", "+\t\t\t\t\t((TryStatement) node).setFinally(this.ast.newBlock()); // have to set at least a finally block to be legal code", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "+\t\t\t\t    ((VariableDeclarationExpression) node).fragments().add(this.ast.newVariableDeclarationFragment());", "+\t\t\t    \tbreak;", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT :", "+\t\t\t\t    ((VariableDeclarationStatement) node).fragments().add(this.ast.newVariableDeclarationFragment());", "+\t\t    \t\tbreak;", "+\t\t\t}", "+\t\t    return node;", "+\t    } catch (IllegalArgumentException e) {", "+\t        return null;", "+\t    }", "+ \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec2c8045b88665738d476ce0b770e3e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1924cfa5e4209a8742be0104afe1beaad86d0922", "commitAfterChange": "dfe897878a3115c90160783084107f96dcd301be", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemID)", "diff": ["-public int computeSeverity(int problemId){", "+public int computeSeverity(int problemID){", "-// severity can have been preset on the problem", "-//\tif ((problem.severity & Fatal) != 0){", "-//\t\treturn Error;", "-//\t}", "-", "-\t// if not then check whether it is a configurable problem", "-\tswitch(problemId){", "-", "-\t\tcase IProblem.MaskedCatch : ", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.MaskedCatchBlock);", "-", "-\t\tcase IProblem.UnusedImport :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnusedImport);", "-\t\t\t", "-\t\tcase IProblem.MethodButWithConstructorName :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.MethodWithConstructorName);", "-\t\t", "-\t\tcase IProblem.OverridingNonVisibleMethod :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.OverriddenPackageDefaultMethod);", "-", "-\t\tcase IProblem.IncompatibleReturnTypeForNonInheritedInterfaceMethod :", "-\t\tcase IProblem.IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.IncompatibleNonInheritedInterfaceMethod);", "-", "-\t\tcase IProblem.OverridingDeprecatedMethod :\t\t\t\t", "-\t\tcase IProblem.UsingDeprecatedType :\t\t\t\t", "-\t\tcase IProblem.UsingDeprecatedMethod :", "-\t\tcase IProblem.UsingDeprecatedConstructor :", "-\t\tcase IProblem.UsingDeprecatedField :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UsingDeprecatedAPI);", "-\t\t", "-\t\tcase IProblem.LocalVariableIsNeverUsed :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnusedLocalVariable);", "-\t\t", "-\t\tcase IProblem.ArgumentIsNeverUsed :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnusedArgument);", "-", "-\t\tcase IProblem.NoImplicitStringConversionForCharArrayExpression :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.NoImplicitStringConversion);", "-", "-\t\tcase IProblem.NeedToEmulateFieldReadAccess :", "-\t\tcase IProblem.NeedToEmulateFieldWriteAccess :", "-\t\tcase IProblem.NeedToEmulateMethodAccess :", "-\t\tcase IProblem.NeedToEmulateConstructorAccess :\t\t\t", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.AccessEmulation);", "-", "-\t\tcase IProblem.NonExternalizedStringLiteral :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.NonExternalizedString);", "-", "-\t\tcase IProblem.UseAssertAsAnIdentifier :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.AssertUsedAsAnIdentifier);", "-\t\tcase IProblem.UseEnumAsAnIdentifier :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.EnumUsedAsAnIdentifier);", "-", "-\t\tcase IProblem.NonStaticAccessToStaticMethod :", "-\t\tcase IProblem.NonStaticAccessToStaticField :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.NonStaticAccessToStatic);", "-", "-\t\tcase IProblem.IndirectAccessToStaticMethod :", "-\t\tcase IProblem.IndirectAccessToStaticField :", "-\t\tcase IProblem.IndirectAccessToStaticType :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.IndirectStaticAccess);", "-", "-\t\tcase IProblem.AssignmentHasNoEffect:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.NoEffectAssignment);", "-", "-\t\tcase IProblem.UnusedPrivateConstructor:", "-\t\tcase IProblem.UnusedPrivateMethod:", "-\t\tcase IProblem.UnusedPrivateField:", "-\t\tcase IProblem.UnusedPrivateType:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnusedPrivateMember);", "-", "+\tswitch (problemID) {", "-\t\t\treturn Warning;\t\t\t", "-", "-\t\tcase IProblem.LocalVariableHidingLocalVariable:", "-\t\tcase IProblem.LocalVariableHidingField:", "-\t\tcase IProblem.ArgumentHidingLocalVariable:", "-\t\tcase IProblem.ArgumentHidingField:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.LocalVariableHiding);", "-", "-\t\tcase IProblem.FieldHidingLocalVariable:", "-\t\tcase IProblem.FieldHidingField:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.FieldHiding);", "-", "-\t\tcase IProblem.TypeParameterHidingType:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.TypeParameterHiding);", "+ \t\tcase IProblem.VarargsConflict :", "+\t\t\treturn ProblemSeverities.Warning;", "-\t\tcase IProblem.PossibleAccidentalBooleanAssignment:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.AccidentalBooleanAssign);", "-", "-\t\tcase IProblem.SuperfluousSemicolon:", "-\t\tcase IProblem.EmptyControlFlowStatement:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.EmptyStatement);", "-", "-\t\tcase IProblem.UndocumentedEmptyBlock:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UndocumentedEmptyBlock);", "-\t\t\t", "-\t\tcase IProblem.UnnecessaryCast:", "-\t\tcase IProblem.UnnecessaryInstanceof:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck);", "-\t\t\t", "-\t\tcase IProblem.FinallyMustCompleteNormally:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.FinallyBlockNotCompleting);", "-\t\t\t", "-\t\tcase IProblem.UnusedMethodDeclaredThrownException:", "-\t\tcase IProblem.UnusedConstructorDeclaredThrownException:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnusedDeclaredThrownException);", "-", "-\t\tcase IProblem.UnqualifiedFieldAccess:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess);", "-\t\t", "-\t\tcase IProblem.UnnecessaryElse:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UnnecessaryElse);", "-", "-\t\tcase IProblem.UnsafeRawConstructorInvocation:", "-\t\tcase IProblem.UnsafeRawMethodInvocation:", "-\t\tcase IProblem.UnsafeTypeConversion:", "-\t\tcase IProblem.UnsafeRawFieldAssignment:", "-\t\tcase IProblem.UnsafeGenericCast:", "-\t\tcase IProblem.UnsafeReturnTypeOverride:", "-\t\tcase IProblem.UnsafeRawGenericMethodInvocation:", "-\t\tcase IProblem.UnsafeRawGenericConstructorInvocation:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.UncheckedTypeOperation);", "-", "-\t\tcase IProblem.MissingOverrideAnnotation:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.MissingOverrideAnnotation);", "-\t\t\t", "-\t\tcase IProblem.FieldMissingDeprecatedAnnotation:", "-\t\tcase IProblem.MethodMissingDeprecatedAnnotation:", "-\t\tcase IProblem.TypeMissingDeprecatedAnnotation:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.MissingDeprecatedAnnotation);", "-\t\t\t", "-\t\tcase IProblem.FinalBoundForTypeVariable:", "-\t\t    return customOptions().getSeverity(CompilerOptions.FinalParameterBound);", "-", "-\t\tcase IProblem.MissingSerialVersion:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.MissingSerialVersion);", "-\t\t", "-\t\tcase IProblem.ForbiddenReference:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.ForbiddenReference);", "-", "-\t\tcase IProblem.DiscouragedReference:", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.DiscouragedReference);", "-", "-\t\tcase IProblem.MethodVarargsArgumentNeedCast :", "-\t\tcase IProblem.ConstructorVarargsArgumentNeedCast :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.VarargsArgumentNeedCast);", "-", "-\t\tcase IProblem.LocalVariableCannotBeNull :", "-\t\tcase IProblem.LocalVariableCanOnlyBeNull :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.NullReference);", "-\t\t\t", "-\t\tcase IProblem.BoxingConversion :", "-\t\tcase IProblem.UnboxingConversion :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.Autoboxing);", "-", "-\t\tcase IProblem.MissingEnumConstantCase :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.IncompleteEnumSwitch);", "-\t\t\t", "-\t\tcase IProblem.VarargsConflict :", "-\t\t\treturn Warning;", "-\t\t\t", "-\t\tcase IProblem.AnnotationTypeUsedAsSuperInterface :", "-\t\t\treturn customOptions().getSeverity(CompilerOptions.AnnotationSuperInterface);", "-\t\t\t", "-\t\t/*", "-\t\t * Javadoc syntax errors", "-\t\t */", "-\t\tcase IProblem.JavadocUnexpectedTag:", "-\t\tcase IProblem.JavadocDuplicateReturnTag:", "-\t\tcase IProblem.JavadocInvalidThrowsClass:", "-\t\tcase IProblem.JavadocInvalidSeeReference:", "-\t\tcase IProblem.JavadocInvalidParamTagName:", "-\t\tcase IProblem.JavadocInvalidParamTagTypeParameter:", "-\t\tcase IProblem.JavadocMalformedSeeReference:", "-\t\tcase IProblem.JavadocInvalidSeeHref:", "-\t\tcase IProblem.JavadocInvalidSeeArgs:", "-\t\tcase IProblem.JavadocInvalidTag:", "-\t\tcase IProblem.JavadocUnterminatedInlineTag:", "-\t\tcase IProblem.JavadocMissingHashCharacter:", "-\t\tcase IProblem.JavadocEmptyReturnTag:", "-\t\tcase IProblem.JavadocUnexpectedText:", "-\t\t\tCompilerOptions cOptions = customOptions();", "-\t\t\tif (cOptions.docCommentSupport) {", "-\t\t\t\treturn cOptions.getSeverity(CompilerOptions.InvalidJavadoc);", "-\t\t\t} else {", "-\t\t\t\treturn ProblemSeverities.Ignore;", "-\t\t\t}", "-", "-\t\t\tcOptions = customOptions();", "-\t\t\tif (cOptions.docCommentSupport && cOptions.reportInvalidJavadocTags) {", "-\t\t\t\treturn cOptions.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\tif (!this.options.reportInvalidJavadocTags) {", "+\t\t\t\treturn ProblemSeverities.Ignore;\t\t", "-\t\t\treturn ProblemSeverities.Ignore;", "-", "+\t\t\tbreak;", "-\t\t\tcOptions = customOptions();", "-\t\t\tif (cOptions.docCommentSupport && cOptions.reportInvalidJavadocTags && cOptions.reportInvalidJavadocTagsDeprecatedRef) {", "-\t\t\t\treturn cOptions.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\tif (!(this.options.reportInvalidJavadocTags && this.options.reportInvalidJavadocTagsDeprecatedRef)) {", "+\t\t\t\treturn ProblemSeverities.Ignore;", "-\t\t\treturn ProblemSeverities.Ignore;", "-", "+\t\t\tbreak;", "-\t\t\tcOptions = customOptions();", "-\t\t\tif (cOptions.docCommentSupport && cOptions.reportInvalidJavadocTags && cOptions.reportInvalidJavadocTagsNotVisibleRef) {", "-\t\t\t\treturn cOptions.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\tif (!(this.options.reportInvalidJavadocTags && this.options.reportInvalidJavadocTagsNotVisibleRef)) {", "+\t\t\t\treturn ProblemSeverities.Ignore;\t\t\t", "-\t\t\treturn ProblemSeverities.Ignore;", "-", "-\t\t/*", "-\t\t * Javadoc missing tags errors", "-\t\t */", "-\t\tcase IProblem.JavadocMissingParamTag:", "-\t\tcase IProblem.JavadocMissingReturnTag:", "-\t\tcase IProblem.JavadocMissingThrowsTag:", "-\t\t\tcOptions = customOptions();", "-\t\t\tif (cOptions.docCommentSupport) {", "-\t\t\t\treturn cOptions.getSeverity(CompilerOptions.MissingJavadocTags);", "-\t\t\t} else {", "-\t\t\t\treturn ProblemSeverities.Ignore;", "-\t\t\t}", "-", "-\t\t/*", "-\t\t * Missing Javadoc errors", "-\t\t */", "-\t\tcase IProblem.JavadocMissing:", "-\t\t\tcOptions = customOptions();", "-\t\t\tif (cOptions.docCommentSupport) {", "-\t\t\t\treturn cOptions.getSeverity(CompilerOptions.MissingJavadocComments);", "-\t\t\t} else {", "-\t\t\t\treturn ProblemSeverities.Ignore;", "-\t\t\t}", "-\t\t\t", "-\t\t// by default problems are errors.", "-\t\tdefault:", "-\t\t\treturn Error;", "+\t\t\tbreak;", "+\tlong irritant = getIrritant(problemID);", "+\tif (irritant != 0) {", "+\t\tif ((problemID & IProblem.Javadoc) != 0 && !this.options.docCommentSupport) ", "+\t\t\treturn ProblemSeverities.Ignore;", "+\t\treturn this.options.getSeverity(irritant);", "+\t}", "+\treturn Error;"]}], "num": 62716}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "589d7925958cc17bf9500aee74d571d9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1260ee13820f9fb691ddb9a91b392bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java", "commitBeforeChange": "7c0be3631ccaa5ae2d50fbe318ed50c01164d856", "commitAfterChange": "c8fa56c625729a2c5aff4c492dea2eebe9fdcef6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\tif (invocationType == this.declaringClass && invocationType == receiverType) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass) && TypeBinding.equalsEquals(invocationType, receiverType)) return true;", "-\t\tif (invocationType == this.declaringClass) return true;", "+\t\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass)) return true;", "-\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "+\t\t\t\tif (TypeBinding.equalsEquals(currentType, receiverErasure) || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "-\t\t\tif (receiverType != this.declaringClass) {", "+\t\t\tif (TypeBinding.notEquals(receiverType, this.declaringClass)) {", "-\t\tif (invocationType != this.declaringClass) {", "+\t\tif (TypeBinding.notEquals(invocationType, this.declaringClass)) {", "-\t\t\tif (outerInvocationType != outerDeclaringClass) return false;", "+\t\t\tif (TypeBinding.notEquals(outerInvocationType, outerDeclaringClass)) return false;", "-\t\t\tif (originalDeclaringClass == currentType.erasure().original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.erasure().original())) return true;", "-\t\t\tif (originalDeclaringClass == currentType.original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.original())) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be877514df3ddd8871cebf43a2362637", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "7c0be3631ccaa5ae2d50fbe318ed50c01164d856", "commitAfterChange": "c8fa56c625729a2c5aff4c492dea2eebe9fdcef6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\t\tif (invocationSite.isTypeAccess() && receiverType == this.declaringClass)", "+\t\tif (invocationSite.isTypeAccess() && TypeBinding.equalsEquals(receiverType, this.declaringClass))", "-\t\tif (invocationSite.receiverIsImplicitThis() && invocationType == this.declaringClass)", "+\t\tif (invocationSite.receiverIsImplicitThis() && TypeBinding.equalsEquals(invocationType, this.declaringClass))", "-\tif (invocationType == this.declaringClass && invocationType == receiverType) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass) && TypeBinding.equalsEquals(invocationType, receiverType)) return true;", "-\t\tif (invocationType == this.declaringClass) return true;", "+\t\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass)) return true;", "-\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "+\t\t\t\tif (TypeBinding.equalsEquals(currentType, receiverErasure) || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "-\t\t\tif (receiverType != this.declaringClass) {", "+\t\t\tif (TypeBinding.notEquals(receiverType, this.declaringClass)) {", "-\t\tif (invocationType != this.declaringClass) {", "+\t\tif (TypeBinding.notEquals(invocationType, this.declaringClass)) {", "-\t\t\tif (outerInvocationType != outerDeclaringClass) return false;", "+\t\t\tif (TypeBinding.notEquals(outerInvocationType, outerDeclaringClass)) return false;", "-\t\t\tif (originalDeclaringClass == currentType.erasure().original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.erasure().original())) return true;", "-\t\t\tif (originalDeclaringClass == currentType.original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.original())) return true;"]}], "num": 51480}
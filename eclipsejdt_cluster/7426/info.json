{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a31e54e2ca9db77cddd837a0697f3b30", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e505521d5c4d94bd9e6ec13522ffb24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "23d1f03b5721ce2de9c0b6bda12e344c2ac468ba", "commitAfterChange": "966ae4bbaf97367f3fc38a9b2c2261f477021842", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "-\t\t\tchar[][] typeParameterNames = null;", "-\t\t\tchar[][][] typeParameterBounds = null;", "-\t\t\tif (typeParameters != null) {", "-\t\t\t\tint typeParametersLength = typeParameters.length;", "-\t\t\t\ttypeParameterNames = new char[typeParametersLength][];", "-\t\t\t\ttypeParameterBounds = new char[typeParametersLength][][];", "-\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\t\ttypeParameterNames[i] = typeParameters[i].name;", "-\t\t\t\t\tTypeReference[] bounds = typeParameters[i].bounds;", "-\t\t\t\t\tif (bounds != null) {", "-\t\t\t\t\t\tint boundLength = bounds.length;", "-\t\t\t\t\t\tchar[][] boundNames = new char[boundLength][];", "-\t\t\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "-\t\t\t\t\t\t\tboundNames[j] = ", "-\t\t\t\t\t\t\t\tCharOperation.concatWith(bounds[j].getParameterizedTypeName(), '.'); ", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttypeParameterBounds[i] = boundNames;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}\t\t\t", "-\t\t\t\tthrownExceptionTypes,", "-\t\t\t\ttypeParameterNames,", "-\t\t\t\ttypeParameterBounds);", "+\t\t\t\tthrownExceptionTypes);", "+\t\t\tnotifySourceElementRequestor(methodDeclaration.typeParameters());\t\t\t", "-\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "-\t\tchar[][] typeParameterNames = null;", "-\t\tchar[][][] typeParameterBounds = null;", "-\t\tif (typeParameters != null) {", "-\t\t\tint typeParametersLength = typeParameters.length;", "-\t\t\ttypeParameterNames = new char[typeParametersLength][];", "-\t\t\ttypeParameterBounds = new char[typeParametersLength][][];", "-\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\ttypeParameterNames[i] = typeParameters[i].name;", "-\t\t\t\tTypeReference[] bounds = typeParameters[i].bounds;", "-\t\t\t\tif (bounds != null) {", "-\t\t\t\t\tint boundLength = bounds.length;", "-\t\t\t\t\tchar[][] boundNames = new char[boundLength][];", "-\t\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "-\t\t\t\t\t\tboundNames[j] = ", "-\t\t\t\t\t\t\tCharOperation.concatWith(bounds[j].getParameterizedTypeName(), '.'); ", "-\t\t\t\t\t}", "-\t\t\t\t\ttypeParameterBounds[i] = boundNames;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t\t\tthrownExceptionTypes,", "-\t\t\t\ttypeParameterNames,", "-\t\t\t\ttypeParameterBounds);", "+\t\t\t\tthrownExceptionTypes);", "-\t\t\t\tthrownExceptionTypes,", "-\t\t\t\ttypeParameterNames,", "-\t\t\t\ttypeParameterBounds);", "+\t\t\t\tthrownExceptionTypes);", "+\t\tnotifySourceElementRequestor(methodDeclaration.typeParameters());\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d484e257eee5c9e9b9eccac87b6c556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " private void notifySourceElementRequestor(TypeParameter[] typeParameters)", "signatureAfterChange": " private ISourceElementRequestor.TypeParameterInfo[] getTypeParameterInfos(TypeParameter[] typeParameters)", "diff": ["-private void notifySourceElementRequestor(TypeParameter[] typeParameters) {", "-\tif (typeParameters != null) {", "-\t\tint typeParametersLength = typeParameters.length;", "-\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\tTypeParameter typeParameter = typeParameters[i];", "-\t\t\tTypeReference firstBound = typeParameter.type;", "-\t\t\tTypeReference[] otherBounds = typeParameter.bounds;", "-\t\t\tchar[][] typeParameterBounds = null;", "-\t\t\tif (firstBound != null) {", "-\t\t\t\tif (otherBounds != null) {", "-\t\t\t\t\tint otherBoundsLength = otherBounds.length;", "-\t\t\t\t\tchar[][] boundNames = new char[otherBoundsLength+1][];", "-\t\t\t\t\tboundNames[0] = CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.');", "-\t\t\t\t\tfor (int j = 0; j < otherBoundsLength; j++) {", "-\t\t\t\t\t\tboundNames[j+1] = ", "-\t\t\t\t\t\t\tCharOperation.concatWith(otherBounds[j].getParameterizedTypeName(), '.'); ", "-\t\t\t\t\t}", "-\t\t\t\t\ttypeParameterBounds = boundNames;", "-\t\t\t\t} else {", "-\t\t\t\t\ttypeParameterBounds = new char[][] { CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.')};", "+private ISourceElementRequestor.TypeParameterInfo[] getTypeParameterInfos(TypeParameter[] typeParameters) {", "+\tif (typeParameters == null) return null;", "+\tint typeParametersLength = typeParameters.length;", "+\tISourceElementRequestor.TypeParameterInfo[] result = new ISourceElementRequestor.TypeParameterInfo[typeParametersLength];", "+\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\tTypeReference firstBound = typeParameter.type;", "+\t\tTypeReference[] otherBounds = typeParameter.bounds;", "+\t\tchar[][] typeParameterBounds = null;", "+\t\tif (firstBound != null) {", "+\t\t\tif (otherBounds != null) {", "+\t\t\t\tint otherBoundsLength = otherBounds.length;", "+\t\t\t\tchar[][] boundNames = new char[otherBoundsLength+1][];", "+\t\t\t\tboundNames[0] = CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.');", "+\t\t\t\tfor (int j = 0; j < otherBoundsLength; j++) {", "+\t\t\t\t\tboundNames[j+1] = ", "+\t\t\t\t\t\tCharOperation.concatWith(otherBounds[j].getParameterizedTypeName(), '.'); ", "+\t\t\t\ttypeParameterBounds = boundNames;", "+\t\t\t} else {", "+\t\t\t\ttypeParameterBounds = new char[][] { CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.')};", "-\t\t\trequestor.enterTypeParameter(", "-\t\t\t\ttypeParameter.declarationSourceStart, ", "-\t\t\t\ttypeParameter.name, ", "-\t\t\t\ttypeParameter.sourceStart, ", "-\t\t\t\ttypeParameter.sourceEnd,", "-\t\t\t\ttypeParameterBounds);", "-\t\t\trequestor.exitTypeParameter(typeParameter.declarationSourceEnd);", "+\t\tISourceElementRequestor.TypeParameterInfo typeParameterInfo = new ISourceElementRequestor.TypeParameterInfo();", "+\t\ttypeParameterInfo.declarationStart = typeParameter.declarationSourceStart;", "+\t\ttypeParameterInfo.declarationEnd = typeParameter.declarationSourceEnd;", "+\t\ttypeParameterInfo.name = typeParameter.name;", "+\t\ttypeParameterInfo.nameSourceStart = typeParameter.sourceStart;", "+\t\ttypeParameterInfo.nameSourceEnd = typeParameter.sourceEnd;", "+\t\ttypeParameterInfo.typeParameterBounds = typeParameterBounds;", "+\t\tresult[i] = typeParameterInfo;", "+\treturn result;"]}], "num": 7426}
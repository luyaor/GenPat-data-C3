{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "666f781317ab98e6180a9e9c80b4f564", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b758f9e1b046f5e4a0d9aa850f4a34d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " protected void consumeStatementTry(boolean withFinally)", "signatureAfterChange": " protected void consumeStatementTry(boolean withFinally)", "diff": ["-\t\tastLengthPtr--;", "-\t\ttryStmt.finallyBlock = (Block) astStack[astPtr--];", "+\t\tthis.astLengthPtr--;", "+\t\ttryStmt.finallyBlock = (Block) this.astStack[this.astPtr--];", "-\tif ((length = astLengthStack[astLengthPtr--]) != 0) {", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\t\ttryStmt.catchBlocks = new Block[] {(Block) astStack[astPtr--]};", "-\t\t\ttryStmt.catchArguments = new Argument[] {(Argument) astStack[astPtr--]};", "+\t\t\ttryStmt.catchBlocks = new Block[] {(Block) this.astStack[this.astPtr--]};", "+\t\t\ttryStmt.catchArguments = new Argument[] {(Argument) this.astStack[this.astPtr--]};", "-\t\t\t\tbks[length] = (Block) astStack[astPtr--];", "-\t\t\t\targs[length] = (Argument) astStack[astPtr--];", "+\t\t\t\tbks[length] = (Block) this.astStack[this.astPtr--];", "+\t\t\t\targs[length] = (Argument) this.astStack[this.astPtr--];", "-\tastLengthPtr--;", "-\ttryStmt.tryBlock = (Block) astStack[astPtr--];", "+\tthis.astLengthPtr--;", "+\ttryStmt.tryBlock = (Block) this.astStack[this.astPtr--];", "-\ttryStmt.sourceEnd = endStatementPosition;", "-\ttryStmt.sourceStart = intStack[intPtr--];", "+\ttryStmt.sourceEnd = this.endStatementPosition;", "+\ttryStmt.sourceStart = this.intStack[this.intPtr--];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494b229ca85d0d475dd768f7c34477bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  protected void consumeAssignment()", "signatureAfterChange": "  protected void consumeAssignment()", "diff": ["-\tint op = intStack[intPtr--] ; //<--the encoded operator", "+\tint op = this.intStack[this.intPtr--] ; //<--the encoded operator", "-\texpressionPtr -- ; expressionLengthPtr -- ;", "-\texpressionStack[expressionPtr] =", "+\tthis.expressionPtr -- ; this.expressionLengthPtr -- ;", "+\tthis.expressionStack[this.expressionPtr] =", "-\t\t\t\texpressionStack[expressionPtr] ,", "-\t\t\t\texpressionStack[expressionPtr+1], ", "+\t\t\t\tthis.expressionStack[this.expressionPtr] ,", "+\t\t\t\tthis.expressionStack[this.expressionPtr+1], ", "-\t\t\t\tscanner.startPosition - 1)\t:", "+\t\t\t\tthis.scanner.startPosition - 1)\t:", "-\t\t\t\texpressionStack[expressionPtr] ,", "-\t\t\t\texpressionStack[expressionPtr+1],", "-\t\t\t\tscanner.startPosition - 1);", "+\t\t\t\tthis.expressionStack[this.expressionPtr] ,", "+\t\t\t\tthis.expressionStack[this.expressionPtr+1],", "+\t\t\t\tthis.scanner.startPosition - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a593200a2a57ba32641eeaebceac90a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 174, "signatureBeforeChange": " protected void consumeStaticInitializer()", "signatureAfterChange": " protected void consumeStaticInitializer()", "diff": ["-\tBlock block = (Block) astStack[astPtr];", "-\tif (diet) block.bits &= ~ASTNode.UndocumentedEmptyBlockMASK; // clear bit set since was diet", "+\tBlock block = (Block) this.astStack[this.astPtr];", "+\tif (this.diet) block.bits &= ~ASTNode.UndocumentedEmptyBlockMASK; // clear bit set since was diet", "-\tastStack[astPtr] = initializer;", "-\tinitializer.sourceEnd = endStatementPosition;\t", "-\tinitializer.declarationSourceEnd = flushCommentsDefinedPriorTo(endStatementPosition);", "-\tnestedMethod[nestedType] --;", "-\tinitializer.declarationSourceStart = intStack[intPtr--];", "-\tinitializer.bodyStart = intStack[intPtr--];", "-\tinitializer.bodyEnd = endPosition;", "+\tthis.astStack[this.astPtr] = initializer;", "+\tinitializer.sourceEnd = this.endStatementPosition;\t", "+\tinitializer.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition);", "+\tthis.nestedMethod[this.nestedType] --;", "+\tinitializer.declarationSourceStart = this.intStack[this.intPtr--];", "+\tinitializer.bodyStart = this.intStack[this.intPtr--];", "+\tinitializer.bodyEnd = this.endPosition;", "-\tif (currentElement != null){", "-\t\tlastCheckPoint = initializer.declarationSourceEnd;", "-\t\tcurrentElement = currentElement.add(initializer, 0);", "-\t\tlastIgnoredToken = -1;", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = initializer.declarationSourceEnd;", "+\t\tthis.currentElement = this.currentElement.add(initializer, 0);", "+\t\tthis.lastIgnoredToken = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0711e0ee83cf7a63ddf593af8b34ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["-\tconstant = Constant.NotAConstant;", "-\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){", "+\tthis.constant = Constant.NotAConstant;", "+\tif (this.binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) this.binding).problemId() == NotFound){", "-\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\tif (delegateThis != null){  // if not found then internal error, field should have been found", "+\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\tif (this.delegateThis != null){  // if not found then internal error, field should have been found", "-\t\t\t\tthis.codegenBinding = binding = scope.getField(delegateThis.type, this.token, this);", "-\t\t\t\tif (!binding.isValidBinding()) {", "+\t\t\t\tthis.codegenBinding = this.binding = scope.getField(this.delegateThis.type, this.token, this);", "+\t\t\t\tif (!this.binding.isValidBinding()) {", "-\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){", "+\tif (this.binding instanceof ProblemBinding && ((ProblemBinding) this.binding).problemId() == NotFound){", "-\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\tif (delegateThis != null){  // if not found then internal error, field should have been found", "+\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\tif (this.delegateThis != null){  // if not found then internal error, field should have been found", "-\t\t\t\tFieldBinding fieldBinding = scope.getField(delegateThis.type, this.token, this);", "+\t\t\t\tFieldBinding fieldBinding = scope.getField(this.delegateThis.type, this.token, this);", "-\t\t\t\t\t\tthis.codegenBinding = binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.token, this);", "+\t\t\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.token, this);", "-\t\t\t\tthis.codegenBinding = binding = fieldBinding;", "+\t\t\t\tthis.codegenBinding = this.binding = fieldBinding;"]}], "num": 38197}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8179f749422e9c8648a2526cf8f9076e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15ffb2ac1787084430e6b764d9b581fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "067d4c602423adaae99e87247cc8cdbc112437d7", "commitAfterChange": "57396a418c2c0c112a60b670e887da389156bc9b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["+\t\tfinal CompilerOptions compilerOptions = this.scope.compilerOptions();", "-\t\t\tif (this.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "+\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "-\t\t\t\t", "+\t\t", "-\t\tsuper.resolveStatements(); ", "+\t\tsuper.resolveStatements();", "+\t\t", "+\t\t// TagBits.OverridingMethodWithSupercall is set during the resolveStatements() call", "+\t\tif (compilerOptions.getSeverity(CompilerOptions.OverridingMethodWithoutSuperInvocation) != ProblemSeverities.Ignore) {", "+\t\t\tif (this.binding != null) {", "+        \t\tint bindingModifiers = this.binding.modifiers;", "+        \t\tif ((bindingModifiers & (ExtraCompilerModifiers.AccOverriding|ExtraCompilerModifiers.AccImplementing)) == ExtraCompilerModifiers.AccOverriding", "+        \t\t\t\t&& (this.bits & ASTNode.OverridingMethodWithSupercall) == 0) {", "+        \t\t\tthis.scope.problemReporter().overridesMethodWithoutSuperInvocation(this.binding);", "+        \t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c3f0599d2c51e82e37f5577c8a1508f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "5a4a2929d0aaba1a7f6b87488d0054e129a55977", "commitAfterChange": "363f295181efb5d08470dfb8bacfcdd493852030", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void analyseCode(ClassScope classScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void analyseCode(ClassScope classScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-", "+\t\t\t", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=385780", "+\t\t\tif (this.typeParameters != null &&", "+\t\t\t\t\t!this.scope.referenceCompilationUnit().compilationResult.hasSyntaxError) {", "+\t\t\t\tfor (int i = 0, length = this.typeParameters.length; i < length; ++i) {", "+\t\t\t\t\tTypeParameter typeParameter = this.typeParameters[i];", "+\t\t\t\t\tif ((typeParameter.binding.modifiers  & ExtraCompilerModifiers.AccLocallyUsed) == 0) {", "+\t\t\t\t\t\tthis.scope.problemReporter().unusedTypeParameter(typeParameter);\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 27380}
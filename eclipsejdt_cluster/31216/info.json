{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17d201b48ab74d1812534c7f3c005ca5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e789b61add0915b7bf7aba16b4816480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(ForeachStatement forStatement, BlockScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(ForeachStatement forStatement, BlockScope scope) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamefor);", "+\t    final int line = this.scribe.line;", "+\t    this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_for);", "+\t\t", "+\t\tif (this.preferences.insert_space_after_opening_paren_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tformatLocalDeclaration(forStatement.elementVariable, scope, false, false);", "+", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_for);", "+\t\tif (this.preferences.insert_space_after_colon_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tforStatement.collection.traverse(this, scope);", "+", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_for);", "+\t\t", "+\t\tfinal Statement action = forStatement.action;", "+\t\tif (action != null) {", "+\t\t\tif (action instanceof Block) {", "+\t            formatLeftCurlyBrace(line, this.preferences.brace_position_for_block);", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t} else if (action instanceof EmptyStatement) {", "+\t\t\t\t/*", "+\t\t\t\t * This is an empty statement", "+\t\t\t\t */", "+\t\t\t\tformatNecessaryEmptyStatement();", "+\t\t\t} else {", "+\t\t\t\tthis.scribe.indent();", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\tif (action instanceof Expression) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t}", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t * This is an empty statement", "+\t\t\t */", "+\t\t\tformatNecessaryEmptyStatement(); ", "-        this.scribe.printModifiers();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f370262cbbfa8f01d17e95d4907acc28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "5103cbbe93dc06e237ba05a89fd826d834ad4e54", "commitAfterChange": "36f7c1e916ce794f19c8c7bfc5e63afd70aa3df0", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic boolean visit( \t\tImportReference importRef, \t\tCompilationUnitScope scope)", "signatureAfterChange": " \t \tprivate void format(ImportReference importRef, boolean isLast)", "diff": ["+\tprivate void format(ImportReference importRef, boolean isLast) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimport);", "+\t\tthis.preferences.number_of_empty_lines_to_preserve = this.preferences.blank_lines_between_import_groups;", "+\t\tthis.scribe.space();", "+\t\tif (importRef.isStatic()) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamestatic);", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tif (importRef.onDemand) {", "+\t\t\tthis.scribe.printQualifiedReference(importRef.sourceEnd);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMULTIPLY);\t\t\t", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t} else {", "+\t\t\tthis.scribe.printQualifiedReference(importRef.sourceEnd);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t}", "+\t\tif (isLast) {", "+\t\t\tthis.scribe.printTrailingComment();", "+\t\t} else {", "+\t\t\tthis.scribe.printTrailingComment(this.preferences.blank_lines_between_import_groups);", "+\t\t}", "+\t\tthis.scribe.printNewLine();\t\t\t", "+\t}", "-\t */", "-\tpublic boolean visit(", "-\t\tImportReference importRef,", "-\t\tCompilationUnitScope scope) {", "-\t\t", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimport);", "-\t\tthis.scribe.space();", "-\t\tif (importRef.isStatic()) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamestatic);", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\tif (importRef.onDemand) {", "-\t\t\tthis.scribe.printQualifiedReference(importRef.sourceEnd);", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMULTIPLY);\t\t\t", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t} else {", "-\t\t\tthis.scribe.printQualifiedReference(importRef.sourceEnd);", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t}", "-\t\tthis.scribe.printTrailingComment();", "-\t\tthis.scribe.printNewLine();"]}], "num": 31216}
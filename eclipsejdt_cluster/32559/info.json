{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0465f5c906bd32b282daad3c153525b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a87489b5b46223297607e17de44c936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void evaluateNullAnnotations(Annotation[] annotations)", "signatureAfterChange": "  \tpublic void evaluateNullAnnotations(Scope scope, TypeParameter parameter)", "diff": ["-\tpublic void evaluateNullAnnotations(Annotation[] annotations) {", "+\tpublic void evaluateNullAnnotations(Scope scope, TypeParameter parameter) {", "+\t\tAnnotation[] annotations = parameter.annotations;", "-//\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict TypeVariable vs. first bound\");", "+\t\t\t\t\t// not finding either bound or ann should be considered a compiler bug", "+\t\t\t\t\tTypeReference bound = findBound(this.firstBound, parameter);", "+\t\t\t\t\tAnnotation ann = bound.findAnnotation(superNullTagBits);", "+\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(ann, nullTagBits);", "+\t\t\t\t\tthis.tagBits &= ~TagBits.AnnotationNullMASK;", "-//\t\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict TypeVariable vs. bound \"+i);", "+\t\t\t\t\t\t// not finding either bound or ann should be considered a compiler bug", "+\t\t\t\t\t\tTypeReference bound = findBound(this.firstBound, parameter);", "+\t\t\t\t\t\tAnnotation ann = bound.findAnnotation(superNullTagBits);", "+\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(ann, nullTagBits);", "+\t\t\t\t\t\tthis.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f32002f5fffee2756282f3101680edb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "68b132a771077222c8a489923225ada23ba86a6a", "commitAfterChange": "403deed13ad4115ce80e0449d5be70cb085b39a1", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tpublic void evaluateNullAnnotations(Scope scope, TypeParameter parameter)", "signatureAfterChange": "  \tpublic void evaluateNullAnnotations(Scope scope, TypeParameter parameter)", "diff": ["-\t\t\t\t\t// not finding either bound or ann should be considered a compiler bug", "-\t\t\t\t\tTypeReference bound = findBound(this.firstBound, parameter);", "-\t\t\t\t\tAnnotation ann = bound.findAnnotation(superNullTagBits);", "-\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(ann, nullTagBits);", "-\t\t\t\t\tthis.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t\t\tthis.firstBound = nullMismatchOnBound(parameter, this.firstBound, superNullTagBits, nullTagBits, scope);", "-\t\t\t\t\t\t// not finding either bound or ann should be considered a compiler bug", "-\t\t\t\t\t\tTypeReference bound = findBound(this.firstBound, parameter);", "-\t\t\t\t\t\tAnnotation ann = bound.findAnnotation(superNullTagBits);", "-\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(ann, nullTagBits);", "-\t\t\t\t\t\tthis.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\tinterfaces[i] = (ReferenceBinding) nullMismatchOnBound(parameter, resolveType, superNullTagBits, nullTagBits, scope);"]}], "num": 32559}
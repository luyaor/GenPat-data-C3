{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3cb3fe8888e639fc86e98dd2274ca42", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a65e369763126b07787cc563309e5c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " public synchronized void removeIndex(IPath containerPath)", "signatureAfterChange": " public synchronized void removeIndex(IPath containerPath)", "diff": ["-\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndexLocation indexLocation = computeIndexLocation(containerPath);", "-\t\tindexFile = new File(indexLocation.toOSString()); // index is not cached yet, but still want to delete the file", "-\tif (indexFile.exists()) {", "+\t\tindexFile = indexLocation.getIndexFile(); // index is not cached yet, but still want to delete the file", "+\tif (this.indexStates.get(indexLocation) == REUSE_STATE) {", "+\t\tindexLocation.close();", "+\t\tthis.indexLocations.put(containerPath, null);", "+\t} else if (indexFile != null && indexFile.exists()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a37038cd3db5c1fbcad88a3c96d2d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "3aabc067e22084d59ef0ea59b0d58e1085dede4c", "commitAfterChange": "b7295bb19a68269f09e5fdceeecf4f4c701e7063", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+    \t\tif (isConstructorReference()) {", "+    \t\t\tthis.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "+    \t\t}", "-        \tif (!lhsType.isCompatibleWith(this.descriptor.returnType)) {", "+        \tif (!lhsType.isCompatibleWith(this.descriptor.returnType) && this.descriptor.returnType.id != TypeIds.T_void) {", "-        \treturn this.resolvedType; // No binding construction possible right now. Code generator will have to conjure up a rabbit.", "+        \tthis.binding = this.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "+        \treturn this.resolvedType;"]}], "num": 52543}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4823df723f75bd3150f19dec160503e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "927124f5f804fc28a419b9d1ff80721f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "377267c7b8a2a28bb5624532c958378e4aa9d9fb", "commitAfterChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tif (this.haveReceiver) {", "-\t\t\tthis.lhs.generateCode(currentScope, codeStream, true);", "-\t\t}", "+\t\tint argumentsSize = 0;", "+\t\t\tthis.lhs.generateCode(currentScope, codeStream, true);", "+\t\t\targumentsSize = 1;", "+\t\t} else {", "+\t\t\tif (this.isConstructorReference() && this.receiverType.isNestedType()) {", "+\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "+\t\t\t\tReferenceBinding[] syntheticArgumentTypes;", "+\t\t\t\tif ((syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "+\t\t\t\t\tint length = syntheticArgumentTypes.length;", "+\t\t\t\t\targumentsSize = length;", "+\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "+\t\t\t\t\t\tReferenceBinding syntheticArgumentType = syntheticArgumentTypes[i];", "+\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "+\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "+\t\t\t\t\t\t\t\tsyntheticArgumentType,", "+\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "+\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\tcodeStream.invokeDynamic(invokeDynamicNumber, this.haveReceiver ? 1 : 0, 1, LAMBDA, buffer.toString().toCharArray());", "+\t\tcodeStream.invokeDynamic(invokeDynamicNumber, argumentsSize, 1, LAMBDA, buffer.toString().toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c4fe9ccef5e7114720d86b0d4856fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "84ae743840b7f8b6bc94fdc63b21247cc7cb378b", "commitAfterChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-//\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "-//\t\t\tif (allocationType.isGenericType() || allocationType.isRawType() || allocationType.isParameterizedType()) {", "-//\t\t\t\tMethodBinding exactMethod = scope.getConstructor(allocationType, argumentTypes, this);", "-//\t\t\t\tif (exactMethod == null) {", "-//\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "-//\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "-//\t\t\t\t}", "-//\t\t\t}", "+\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "+\t\t\tParameterizedMethodBinding paramMethodBinding = (ParameterizedMethodBinding) this.binding;", "+\t\t\tif (paramMethodBinding.hasSubstitutedParameters()) {", "+\t\t\t\tint length = argumentTypes.length;", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tif (paramMethodBinding.parameters[i] != argumentTypes[i] &&", "+\t\t\t\t\t\t\tparamMethodBinding.parameters[i].erasure() != argumentTypes[i].erasure()) {", "+\t\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 42645}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8e02e621e55540b7983d16ae4b55564", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c69f86fa9dd332d47a7a511eb3fd515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "c5aec3a765a7b3a6b1146e9e3a6a440f3522c2eb", "commitAfterChange": "868bb663e324da2f9402a117feeb046defe94741", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents, \t\t\tIProgressMonitor progressMonitor)", "signatureAfterChange": " \tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents, \t\t\tIProgressMonitor progressMonitor)", "diff": ["-\t\tif (isWorkingCopy && !AptConfig.shouldProcessDuringReconcile(_jProject)) {", "-\t\t\t// Cover the case where the user turned off reconcile-time processing after some working", "-\t\t\t// copies were already created - else they'll get null timestamps and the commit will fail.", "-\t\t\t// There's probably a better way to do this but it's a corner case anyway. - WSH 3/07", "-\t\t\t_CUHELPER.discardWorkingCopy(unit);", "-\t\t\tisWorkingCopy = false;", "-\t\t}", "-\t\t\t// If we have a working copy, all we", "-\t\t\t// need to do is update its contents and commit it.", "-\t\t\t_CUHELPER.commitNewContents(unit, contents, progressMonitor);", "-\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "-\t\t\t\t\t\"Committed existing working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\ttry {", "+\t\t\t\t// If we have a working copy, all we", "+\t\t\t\t// need to do is update its contents and commit it...", "+\t\t\t\t_CUHELPER.commitNewContents(unit, contents, progressMonitor);", "+\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\"Committed existing working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tcatch (JavaModelException e) {", "+\t\t\t\t// ...unless, that is, the resource has been deleted behind our back", "+\t\t\t\t// due to a clean.  In that case, discard the working copy and try again.", "+\t\t\t\tif (e.getJavaModelStatus().getCode() == IJavaModelStatusConstants.INVALID_RESOURCE) {", "+\t\t\t\t\t_CUHELPER.discardWorkingCopy(unit);", "+\t\t\t\t\tisWorkingCopy = false;", "+\t\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\t\"Discarded invalid existing working copy in order to try again: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tAptPlugin.log(e, \"Unable to commit working copy to disk: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "-\t\telse {", "+\t\tif (!isWorkingCopy) {", "+\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\"Created compilation unit during build: \" + unit.getElementName()); //$NON-NLS-1$", "-\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "-\t\t\t\t\t\"Created compilation unit during build: \" + unit.getElementName()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e70faaf7796a3c816cdcb139b26e29e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "234e6fc68a4dbdeda6e1afdc966808ff0b4f2216", "commitAfterChange": "7462ca5aabdc673d41eeee493b5aab83cbe328d1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity)", "signatureAfterChange": "  protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity)", "diff": ["-\t\tISourceRange range = javaElement == null ? null : javaElement.getNameRange();", "+\t\tISourceRange range = null;", "+\t\tif (javaElement != null) {", "+\t\t\ttry {", "+\t\t\t\trange = javaElement.getNameRange();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\tif (e.getJavaModelStatus().getCode() != IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t}", "+\t\t\t\tif (!CharOperation.equals(javaElement.getElementName().toCharArray(), TypeConstants.PACKAGE_INFO_NAME)) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t}", "+\t\t\t\t// else silently swallow the exception as the synthetic interface type package-info has no", "+\t\t\t\t// source range really. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=258145", "+\t\t\t}", "+\t\t}"]}], "num": 52359}
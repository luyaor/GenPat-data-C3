{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e38d281e0fcb250c165fc954fdde0518", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3143480a5af61527e0f77148fa849899", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9ff98119ebbaca600880d978030549fe60ab70c6", "commitAfterChange": "235c5ccb088a8eae6b66fa79b1757fdfc0bfd335", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "signatureAfterChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "diff": ["-\t\t\t\tint complement = 0;", "-\t\t\t\t\t\tif (indentationsAsTab < numberOfLeadingIndents) {", "+\t\t\t\t\t\tif (this.tabLength > 0 && indentationsAsTab < numberOfLeadingIndents) {", "-\t\t\t\t\t\t\tif(this.tabLength != 0) {", "-\t\t\t\t\t\t\t\tcomplement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "-\t\t\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "+\t\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t\tthis.needSpace = false;", "-\t\t\t\t} else {", "+\t\t\t\t} else if (this.tabLength > 0) {", "-\t\t\t\t\t\tif(this.tabLength != 0) {", "-\t\t\t\t\t\t\tcomplement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "-\t\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "+\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t\tif ((this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\t\tif (this.tabLength > 0 && (this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\t\t\t// note that this.indentationSize > 0 when entering in the following loop", "+\t\t\t\t\t\t\t\t// hence this.column will be incremented and then avoid endless loop (see bug 290905)", "-\t\t\t\t\t\tif ((this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\tif (this.tabLength > 0 && (this.column - 1 + this.tabLength) <= this.indentationLevel) {", "-\t\t\t\t\t\t} else if ((this.column - 1 + this.indentationSize) <= this.indentationLevel) {", "+\t\t\t\t\t\t} else if (this.indentationSize > 0 && (this.column - 1 + this.indentationSize) <= this.indentationLevel) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652f9b597c9d02eb45a9f264eac8afd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "1924cfa5e4209a8742be0104afe1beaad86d0922", "commitAfterChange": "dfe897878a3115c90160783084107f96dcd301be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic CompilerOptions getCustomCompilerOptions(Scope scope)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress)", "diff": ["-\t", "-\tpublic CompilerOptions getCustomCompilerOptions(Scope scope) {", "-\t\tCompilerOptions options = scope.compilerOptions();", "-\t\tlong warningLevel = options.warningThreshold;", "-\t\tlong originalWarningLevel = warningLevel;", "-\t\tMemberValuePair[] pairs = this.memberValuePairs();", "-\t\tpairLoop: for (int i = 0, length = pairs.length; i < length; i++) {", "-\t\t\tMemberValuePair pair = pairs[i];", "-\t\t\tif (CharOperation.equals(pair.name, TypeConstants.VALUE)) {", "-\t\t\t\tExpression value = pair.value;", "-\t\t\t\tif (value instanceof ArrayInitializer) {", "-\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) value;", "-\t\t\t\t\tExpression[] inits = initializer.expressions;", "-\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "-\t\t\t\t\t\tConstant cst = inits[j].constant;", "-\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\t\twarningLevel &= ~getSuppressedWarningLevel(cst.stringValue());", "-\t\t\t\t\t\t\tif (warningLevel == 0) break pairLoop;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tConstant cst = value.constant;", "-\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\twarningLevel &= ~getSuppressedWarningLevel(cst.stringValue());", "-\t\t\t\t\t\tif (warningLevel == 0) break pairLoop;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak pairLoop;", "-\t\t\t}", "-\t\t}", "-\t\tif (originalWarningLevel != warningLevel) {", "-\t\t\toptions = new CompilerOptions(options);", "-\t\t\toptions.warningThreshold = warningLevel;", "-\t\t}", "-\t\treturn options;", "-\t}", "+\t", "+\tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress) {", "+\t\tlong suppressWarningIrritants = 0;", "+\t\tMemberValuePair[] pairs = this.memberValuePairs();", "+\t\tpairLoop: for (int i = 0, length = pairs.length; i < length; i++) {", "+\t\t\tMemberValuePair pair = pairs[i];", "+\t\t\tif (CharOperation.equals(pair.name, TypeConstants.VALUE)) {", "+\t\t\t\tExpression value = pair.value;", "+\t\t\t\tif (value instanceof ArrayInitializer) {", "+\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) value;", "+\t\t\t\t\tExpression[] inits = initializer.expressions;", "+\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "+\t\t\t\t\t\tConstant cst = inits[j].constant;", "+\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tConstant cst = value.constant;", "+\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak pairLoop;", "+\t\t\t}", "+\t\t}", "+\t\tif (suppressWarningIrritants != 0) {", "+\t\t\tcompilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);", "+\t\t}"]}], "num": 49799}
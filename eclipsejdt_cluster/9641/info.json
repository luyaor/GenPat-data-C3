{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "433226c6010559a35e12109d84d1592f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288e9d9c4d839e580f359b2109c1d4f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "3c24f3c5868942545b866a06aea7ff0e6d501ace", "commitAfterChange": "c52bf9c9641831c37e7ba4fe251dcc6debca74a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report possible accidental boolean assignment", "+\t\t\tif(optionID.equals(OPTION_ReportSuperfluousSemicolon)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= SuperfluousSemicolon;", "+\t\t\t\t\tthis.warningThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t\tthis.warningThreshold |= SuperfluousSemicolon;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t\tthis.warningThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5544606e1d758056a83948f5a95f310e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "commitAfterChange": "5e8c3183792bb167a28b31bd623b66ded11f658d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t// Report unnecessary receiver for static access", "+\t\t\t// Report interface method incompatible with non-inherited Object method", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report unused private members", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedPrivateMember)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= UnusedPrivateMember;", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedPrivateMember;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedPrivateMember;", "+\t\t\t\t\tthis.warningThreshold |= UnusedPrivateMember;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedPrivateMember;", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedPrivateMember;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55be75f9f79a870d5e4cdaa95cbe35c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "2102b467360a15c8cee175a15e0e8b3a9bf530a3", "commitAfterChange": "2f99bede247620c1c16748fe7b02dd925afcf7a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report unnecessary receiver for static access", "+\t\t\tif(optionID.equals(OPTION_ReportIncompatibleNonInheritedInterfaceMethod)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t\tthis.warningThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t\tthis.warningThreshold |= IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t\tthis.warningThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} "]}], "num": 9641}
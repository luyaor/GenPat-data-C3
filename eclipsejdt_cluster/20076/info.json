{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fda61addede4cc68018ae4d8dbab4748", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07b1730d5a6b66699c226356e2de3d44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "64048b0f093f9425eaa40658b41da232045fddbb", "commitAfterChange": "aec82daf3a949438484a5a183bdf5f3fca44d3fc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " boolean areParametersEqual(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areParametersEqual(MethodBinding one, MethodBinding two)", "diff": ["-\tfor (int i = 0; i < length; i++) {", "-\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i])) {", "-\t\t\t// methods with raw parameters are considered equal to inherited methods with parameterized parameters for backwards compatibility", "-\t\t\tif (!one.declaringClass.isInterface() && oneArgs[i].leafComponentType().isRawType())", "-\t\t\t\tif (oneArgs[i].dimensions() == twoArgs[i].dimensions() && oneArgs[i].leafComponentType().isEquivalentTo(twoArgs[i].leafComponentType()))", "-\t\t\t\t\tcontinue;", "-\t\t\treturn false;", "+\tif (one.declaringClass.isInterface()) {", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i]))", "+\t\t\t\treturn false;", "+\t} else {", "+\t\t// methods with raw parameters are considered equal to inherited methods", "+\t\t// with parameterized parameters for backwards compatibility, need a more complex check", "+\t\tint i;", "+\t\tfoundRAW: for (i = 0; i < length; i++) {", "+\t\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i])) {", "+\t\t\t\tif (oneArgs[i].leafComponentType().isRawType()) {", "+\t\t\t\t\tif (oneArgs[i].dimensions() == twoArgs[i].dimensions() && oneArgs[i].leafComponentType().isEquivalentTo(twoArgs[i].leafComponentType())) {", "+\t\t\t\t\t\t// one parameter type is raw, hence all parameters types must be raw or non generic", "+\t\t\t\t\t\t// otherwise we have a mismatch check backwards", "+\t\t\t\t\t\tfor (int j = 0; j < i; j++)", "+\t\t\t\t\t\t\tif (oneArgs[j].leafComponentType().isParameterizedType())", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t// switch to all raw mode", "+\t\t\t\t\t\tbreak foundRAW;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\t// all raw mode for remaining parameters (if any)", "+\t\tfor (i++; i < length; i++) {", "+\t\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i])) {", "+\t\t\t\tif (oneArgs[i].leafComponentType().isRawType())", "+\t\t\t\t\tif (oneArgs[i].dimensions() == twoArgs[i].dimensions() && oneArgs[i].leafComponentType().isEquivalentTo(twoArgs[i].leafComponentType()))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\treturn false;", "+\t\t\t} else if (oneArgs[i].leafComponentType().isParameterizedType()) {", "+\t\t\t\treturn false; // no remaining parameter can be a Parameterized type (if one has been converted then all RAW types must be converted)", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cdfb691d81e6a194abb212ae1cd228a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBinaryType.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public char[] getGenericSignature()", "signatureAfterChange": " public char[] getGenericSignature()", "diff": ["-\treturn null;", "+\tif (this.typeParameterSignatures != null && this.genericSignature == null) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tbuffer.append('<');", "+\t\tfor (int i = 0, length = this.typeParameterSignatures.length; i < length; i++) {", "+\t\t\tbuffer.append(this.typeParameterSignatures[i]);", "+\t\t\tif (i != length-1)", "+\t\t\t\tbuffer.append(',');", "+\t\t}", "+\t\tbuffer.append('>');", "+\t\tif (this.superclass == null)", "+\t\t\tbuffer.append(Signature.createTypeSignature(\"java.lang.Object\", true/*resolved*/)); //$NON-NLS-1$", "+\t\telse", "+\t\t\tbuffer.append(Signature.createTypeSignature(this.superclass, true/*resolved*/));", "+\t\tif (this.superInterfaces != null) ", "+\t\t\tfor (int i = 0, length = this.superInterfaces.length; i < length; i++)", "+\t\t\t\tbuffer.append(Signature.createTypeSignature(this.superInterfaces[i], true/*resolved*/));", "+\t\tthis.genericSignature = buffer.toString().toCharArray();", "+\t\tCharOperation.replace(this.genericSignature, '.', '/');", "+\t}", "+\treturn this.genericSignature;"]}], "num": 20076}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac4f276ec52e2c62f9bfe41ad65d512f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb3661d1fa7c621ea2710a30e0ea0a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, TypeBinding lastReceiverType, \tint index, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo)", "diff": ["-public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, TypeBinding lastReceiverType, \tint index, FlowInfo flowInfo) {", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo) {", "-\t// if field from parameterized type got found, use the original field at codegen time", "-\tFieldBinding originalField = fieldBinding.original();", "-\tif (originalField != fieldBinding) {", "-\t\tsetCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index, originalField);", "-\t}", "-", "-\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\tif (someCodegenBinding.declaringClass != currentScope.enclosingSourceType()) {", "-\t\t    setSyntheticAccessor(fieldBinding, index,", "-\t\t            ((SourceTypeBinding) someCodegenBinding.declaringClass).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "+\t    FieldBinding codegenField = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "+\t    ReferenceBinding declaringClass = codegenField.declaringClass;", "+\t\tif (declaringClass != currentScope.enclosingSourceType()) {", "+\t\t    setSyntheticAccessor(fieldBinding, index, ((SourceTypeBinding) declaringClass).addSyntheticMethod(codegenField, index >= 0 /*read-access?*/));", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, index >= 0 /*read-access?*/);", "-\t\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "+\t\t    FieldBinding codegenField = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\t            ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "+\t\t            ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(codegenField, index >= 0 /*read-access?*/));", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, index >= 0 /*read-access?*/);", "-\t\t}", "-\t}", "-\t// if the binding declaring class is not visible, need special action", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t// and not from Object or implicit static field access.", "-\tif (fieldBinding.declaringClass != lastReceiverType", "-\t\t\t&& !lastReceiverType.isArrayType()", "-\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(index <= 1 &&  this.indexOfFirstFieldBinding == 1 && fieldBinding.isStatic()))", "-\t\t\t\t&& fieldBinding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t    setCodegenBinding(", "-\t\t            index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index,", "-\t\t            currentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t                    getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index),", "-\t\t                    (ReferenceBinding)lastReceiverType.erasure()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fddafce143ae4e7df02d77c341ce60c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-", "-\t// if field from parameterized type got found, use the original field at codegen time", "-\tif (this.binding instanceof ParameterizedFieldBinding) {", "-\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "-\t    this.codegenBinding = parameterizedField.originalField;", "-\t    // extra cast needed if field type was type variable", "-\t    if (this.codegenBinding.type.isTypeVariable()) {", "-\t        TypeVariableBinding variableReturnType = (TypeVariableBinding) this.codegenBinding.type;", "-\t        if (variableReturnType.firstBound != parameterizedField.type) { // no need for extra cast if same as first bound anyway", "-\t\t\t    this.genericCast = parameterizedField.type.erasure();", "-\t        }", "-\t    }", "-\t} else {", "-\t    this.codegenBinding = this.binding;", "-\t}", "-", "-\t// if the binding declaring class is not visible, need special action", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\tTypeBinding someReceiverType = this.delegateThis != null ? this.delegateThis.type : this.receiverType;", "-\tif (this.binding.declaringClass != someReceiverType", "-\t\t\t&& !someReceiverType.isArrayType()", "-\t\t\t&& this.binding.declaringClass != null // array.length", "-\t\t\t&& this.binding.constant() == Constant.NotAConstant) {", "-", "-\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !this.receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "-\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t\tthis.codegenBinding =", "-\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\tthis.codegenBinding,", "-\t\t\t\t\t(ReferenceBinding) someReceiverType.erasure());", "-\t\t}", "-\t}"]}], "num": 53119}
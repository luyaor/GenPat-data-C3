{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2861e54977717c2d6edd5ebe11871a66", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45fee79a2778a88bd9ec46cfa312aa76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tprotected Comment createComment(int[] positions)", "signatureAfterChange": "  \tprotected Comment createComment(int[] positions)", "diff": ["-\t\t\tif (positions[0]>0) { // Block comment have positive start position", "+\t\t\tif (positions[0] == 0) { // we cannot know without testing chars again", "+\t\t\t\tif (this.docParser.scanner.source[1] == '/') {", "+\t\t\t\t\tcomment = new LineComment(this.ast);", "+\t\t\t\t} else {", "+\t\t\t\t\tcomment = new BlockComment(this.ast);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (positions[0]>0) { // Block comment have positive start position"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f45aefc3a286dbb5a6a4e55224b665b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d3355217f09cf0c529a4ad1e58999d8dac0ee318", "commitAfterChange": "cde18c9ebe2e7f75615c5208e3a92c8a80764a80", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "\r protected void consumeEmptyStatement()", "signatureAfterChange": "\r protected void consumeEmptyStatement()", "diff": ["-\tpushOnAstLengthStack(0);\r", "+\tif (this.scanner.source[endStatementPosition] == ';') {\r", "+\t\tpushOnAstStack(new EmptyStatement(endStatementPosition, endStatementPosition));\r", "+\t} else {\r", "+\t\t// we have a Unicode for the ';' (/u003B)\r", "+\t\tpushOnAstStack(new EmptyStatement(endStatementPosition - 5, endStatementPosition));\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b41d464d6912075c1fad4a2e2f4b1bf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 174, "signatureBeforeChange": "\t public void invalidConstructor(Statement statement, MethodBinding targetConstructor)", "signatureAfterChange": " public void invalidConstructor(Statement statement, MethodBinding targetConstructor)", "diff": ["-}\t", "+}", "+\t\t\tProblemMethodBinding problemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tif (problemConstructor.closestMatch != null) {", "+\t\t    \tif ((problemConstructor.closestMatch.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.missingTypeInConstructor(statement, problemConstructor.closestMatch);", "+\t\t\t\t\treturn;", "+\t\t    \t}", "+\t\t    }\t\t\t\t", "+\t\t\t", "-\t\t\tProblemMethodBinding problemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;"]}], "num": 23976}
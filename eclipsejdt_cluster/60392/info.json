{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "175d4c5dc80a7612700e979ef82d7e1a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fe5fd9363dc6c8c9612388c237b9a4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void add(JavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException", "signatureAfterChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException", "diff": ["-public void add(JavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException {", "+ */", "+void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException {", "+\tJavaModelManager.PerProjectInfo perProjectInfo = javaProject.getPerProjectInfo();", "+\t\tIClasspathEntry rawEntry = null;", "+\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "+\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "+\t\t}", "+\t\tif (rawEntry == null) continue;", "+\t\tAccessRestriction access = null;", "+\t\tClasspathEntry cpEntry = null;", "+\t\tif (rawEntry instanceof ClasspathEntry) {", "+\t\t\tcpEntry = (ClasspathEntry) rawEntry;", "+\t\t\tif (referringEntry != null) {", "+\t\t\t\tcpEntry = cpEntry.combineWith(referringEntry);", "+//\t\t\t\tcpEntry = ((ClasspathEntry)referringEntry).combineWith(cpEntry);", "+\t\t\t}", "+\t\t\taccess = cpEntry.getImportRestriction();", "+\t\t}", "-\t\t\t\tIClasspathEntry rawEntry = null;", "-\t\t\t\tJavaModelManager.PerProjectInfo perProjectInfo = javaProject.getPerProjectInfo();", "-\t\t\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "-\t\t\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "-\t\t\t\t}", "-\t\t\t\tif (rawEntry == null) break;", "-\t\t\t\t\t\t\tadd(path, true);", "-\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\t\t\tadd(path, true, access);", "+\t\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tadd(path, true);", "-\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\t\t\tadd(path, true, access);", "+\t\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tadd((JavaProject) model.getJavaProject(entry.getPath().lastSegment()), includeMask, visitedProjects);", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\tadd((JavaProject) model.getJavaProject(entry.getPath().lastSegment()), null, includeMask, visitedProjects, cpEntry);", "+\t\t\t\t\t}", "-\t\t\t\t\tadd(entry.getPath(), true);", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\tadd(entry.getPath(), true, access);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32825be88604eefd31afda5094107e79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "fe46c42d584fc9df798276778c11a2ce2f79d8c4", "commitAfterChange": "8904ea4393baa4ec97ffdacde82d6f35bb8add7c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void add(IJavaProject javaProject, boolean includesPrereqProjects, HashSet visitedProjects) throws JavaModelException", "signatureAfterChange": "  public void add(IJavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException", "diff": ["-public void add(IJavaProject javaProject, boolean includesPrereqProjects, HashSet visitedProjects) throws JavaModelException {", "+public void add(IJavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException {", "-\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\tthis.add(path, true);", "-\t\t\t\tthis.addEnclosingProjectOrJar(path);", "+\t\t\t\tIClasspathEntry rawEntry = null;", "+\t\t\t\tJavaModelManager.PerProjectInfo perProjectInfo = ((JavaProject)javaProject).getPerProjectInfo();", "+\t\t\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "+\t\t\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "+\t\t\t\t}", "+\t\t\t\tif (rawEntry == null) break;", "+\t\t\t\tswitch (rawEntry.getEntryKind()) {", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "+\t\t\t\t\t\tif ((includeMask & APPLICATION_LIBRARIES) != 0) {", "+\t\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\t\tadd(path, true);", "+\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "+\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), javaProject);", "+\t\t\t\t\t\tif (container == null) break;", "+\t\t\t\t\t\tif ((container.getKind() == IClasspathContainer.K_APPLICATION && (includeMask & APPLICATION_LIBRARIES) != 0)", "+\t\t\t\t\t\t\t\t|| (includeMask & SYSTEM_LIBRARIES) != 0) {", "+\t\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\t\tadd(path, true);", "+\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tif (includesPrereqProjects) {", "-\t\t\t\t\tthis.add(model.getJavaProject(entry.getPath().lastSegment()), true, visitedProjects);", "+\t\t\t\tif ((includeMask & REFERENCED_PROJECTS) != 0) {", "+\t\t\t\t\tadd(model.getJavaProject(entry.getPath().lastSegment()), includeMask, visitedProjects);", "-\t\t\t\tthis.add(entry.getPath(), true);", "+\t\t\t\tif ((includeMask & SOURCES) != 0) {", "+\t\t\t\t\tadd(entry.getPath(), true);", "+\t\t\t\t}"]}], "num": 60392}
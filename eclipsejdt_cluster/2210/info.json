{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "729ab81830afd0e17faf171050de4a9b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86aba0f89c31cdfdf3f6f9d5c7626fc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "ed25425f5de4194a0f32ce4c1315af886ca42c42", "commitAfterChange": "821b6028ffbd0ba8edfd1a0534c32e817f4e830d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected boolean computeChildren(OpenableElementInfo info, ArrayList entryNames)", "signatureAfterChange": " private IJavaElement[] computeChildren(ArrayList namesWithoutExtension)", "diff": ["-protected boolean computeChildren(OpenableElementInfo info, ArrayList entryNames) {", "-\tif (entryNames != null && entryNames.size() > 0) {", "-\t\tArrayList vChildren = new ArrayList();", "-\t\tfor (Iterator iter = entryNames.iterator(); iter.hasNext();) {", "-\t\t\tString child = (String) iter.next();", "-\t\t\tIClassFile classFile = getClassFile(child);", "-\t\t\tvChildren.add(classFile);", "-\t\t}", "-\t\tIJavaElement[] children= new IJavaElement[vChildren.size()];", "-\t\tvChildren.toArray(children);", "-\t\tinfo.setChildren(children);", "-\t} else {", "-\t\tinfo.setChildren(NO_ELEMENTS);", "-\t}", "+private IJavaElement[] computeChildren(ArrayList namesWithoutExtension) {", "+\tint size = namesWithoutExtension.size();", "+\tif (size == 0)", "+\t\treturn NO_ELEMENTS;", "+\tIJavaElement[] children = new IJavaElement[size];", "+\tfor (int i = 0; i < size; i++) {", "+\t\tString nameWithoutExtension = (String) namesWithoutExtension.get(i);", "+\t\tchildren[i] = new ClassFile(this, nameWithoutExtension);", "+\treturn children;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf0bb4f52009ec9d8ac826bc0bfbd965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "commitAfterChange": "0768a01c46bf55c1ad1aefdbfa14c12019b43872", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\tpublic MarkerInfo(String path, String source, int markerIndex)", "signatureAfterChange": " \t\t \t\tprivate void setStartAndEnd(int markerIndex)", "diff": ["-\t\t}", "-\t\tpublic MarkerInfo(String path, String source, int markerIndex) {", "-\t\t\tString markerNumber = markerIndex == -1 ? \"\" : Integer.toString(markerIndex);", "+\t\t", "+\t\tprivate void setStartAndEnd(int markerIndex) {", "+\t\t\tString markerNumber; ", "+\t\t\tif (markerIndex == -1) {", "+\t\t\t\tmarkerNumber = \"\";", "+\t\t\t\tmarkerIndex = this.astStarts.length; // *start* is always last", "+\t\t\t} else", "+\t\t\t\tmarkerNumber = Integer.toString(markerIndex);", "+\t\t\t", "-\t\t\tthis.astStart = source.indexOf(markerStart); // start of AST inclusive", "-\t\t\tthis.source = new String(CharOperation.replace(this.source.toCharArray(), markerStart.toCharArray(), CharOperation.NO_CHAR));", "-\t\t\tthis.astEnd = this.source.indexOf(markerEnd); // end of AST exclusive", "-\t\t\tthis.source = new String(CharOperation.replace(this.source.toCharArray(), markerEnd.toCharArray(), CharOperation.NO_CHAR));\t", "+\t\t\tint astStart = source.indexOf(markerStart); // start of AST inclusive", "+\t\t\tthis.astStarts[markerIndex-1] = astStart;", "+\t\t\tremoveMarkerFromSource(markerStart, astStart, markerIndex-1);", "+\t\t\tint astEnd = this.source.indexOf(markerEnd); // end of AST exclusive", "+\t\t\tthis.astEnds[markerIndex-1] = astEnd;", "+\t\t\tremoveMarkerFromSource(markerEnd, astEnd, markerIndex-1);"]}], "num": 2210}
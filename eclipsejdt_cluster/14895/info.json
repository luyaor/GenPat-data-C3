{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b767420c05ee14d76d17730049bb8994", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5446fa9b17b12821418ab65a165449", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "418d08685e8bc0508d05dda65dd277f56261854f", "commitAfterChange": "2d42c7f71ce65658f51f1f08922e1c6e3b9d54f4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 74, "signatureBeforeChange": " private final boolean atReferenceExpression()", "signatureAfterChange": " private final boolean atReferenceExpression()", "diff": ["-}", "-private final boolean atReferenceExpression() {", "-", "-\t/* The cursor is at a '<' that figures just past the non terminal symbol `Name' and the parser is parsing a primary expression.", "-\t   Look ahead and answer true if we are at a method or constructor reference expression and false otherwise.", "-", "-\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '.' ClassOrInterfaceType Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t   ", "-\t    Note: At this point, we don't handle annotations on dimensions, I think it is illegal, but needs to be verified.", "-\t*/ ", "-\t", "-\tint savedCurrentPosition = this.currentPosition;", "-\tint savedStartPosition = this.startPosition;", "-\tchar savedCurrentCharacter = this.currentCharacter;", "-\tchar[] savedWithoutUnicodeBuffer = null;", "-\tint savedWithoutUnicodePtr = this.withoutUnicodePtr;", "-\tif (savedWithoutUnicodePtr != 0) {", "-\t\tint length = this.withoutUnicodeBuffer.length;", "-\t\tSystem.arraycopy(this.withoutUnicodeBuffer, 0, savedWithoutUnicodeBuffer = new char [length], 0, length);", "-\t}", "-", "-\tboolean atReferenceExpression = false;", "-\tboolean whiteSpace;", "-\t", "-\tboolean justPastIdentifier = true, justPastDot = false, justPastTypeArguments = false;", "-\tchar c = '<';", "-\t", "-\ttry {", "-\t\tdone:", "-\t\t\twhile (true) {", "-\t\t\t\tNextToken: switch (c) {", "-\t\t\t\t\tcase '[' :", "-\t\t\t\t\tcase ']' :", "-\t\t\t\t\t\tbreak NextToken; // good enough for now.", "-\t\t\t\t\tcase '<' :", "-\t\t\t\t\t\tif (justPastIdentifier) {", "-\t\t\t\t\t\t\tjumpOver('<' , '>', blackListedTokens);", "-\t\t\t\t\t\t\tif (this.currentCharacter != '>')", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t\tjustPastIdentifier = false;", "-\t\t\t\t\t\t\tjustPastTypeArguments = true;", "-\t\t\t\t\t\t\tjustPastDot = false;", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\tcase '.' :", "-\t\t\t\t\t\tif (justPastIdentifier || justPastTypeArguments) {", "-\t\t\t\t\t\t\tjustPastIdentifier = false;", "-\t\t\t\t\t\t\tjustPastTypeArguments = false;", "-\t\t\t\t\t\t\tjustPastDot = true;", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\tcase ':' :", "-\t\t\t\t\t\tif (justPastIdentifier || justPastTypeArguments) {", "-\t\t\t\t\t\t\tif (getNextChar(':')) {", "-\t\t\t\t\t\t\t\tatReferenceExpression = true;", "-\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tif (!justPastDot) {", "-\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (c < ScannerHelper.MAX_OBVIOUS) {", "-\t\t\t\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_IDENT_START) != 0) {", "-\t\t\t\t\t\t\t\tscanIdentifierOrKeyword();", "-\t\t\t\t\t\t\t\tjustPastDot = false;", "-\t\t\t\t\t\t\t\tjustPastIdentifier = true;", "-\t\t\t\t\t\t\t\tjustPastTypeArguments = false;", "-\t\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean isJavaIdStart;", "-\t\t\t\t\t\tif (c >= HIGH_SURROGATE_MIN_VALUE && c <= HIGH_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\t// Unicode 4 detection", "-\t\t\t\t\t\t\tchar low = (char) getNextChar();", "-\t\t\t\t\t\t\tif (low < LOW_SURROGATE_MIN_VALUE || low > LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\t\t// illegal low surrogate", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(this.complianceLevel, c, low);", "-\t\t\t\t\t\t} else if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// optimized case already checked", "-\t\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(this.complianceLevel, c);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (isJavaIdStart) {", "-\t\t\t\t\t\t\tscanIdentifierOrKeyword();", "-\t\t\t\t\t\t\tjustPastDot = false;", "-\t\t\t\t\t\t\tjustPastIdentifier = true;", "-\t\t\t\t\t\t\tjustPastTypeArguments = false;", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t}", "-\t\t\t\tdo { // skip past white space", "-\t\t\t\t\tthis.startPosition = this.currentPosition;", "-\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\twhiteSpace = jumpOverUnicodeWhiteSpace();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\twhiteSpace = CharOperation.isWhitespace(this.currentCharacter);", "-\t\t\t\t\t}", "-\t\t\t\t} while (whiteSpace);", "-\t\t\t\tc = this.currentCharacter;  //next non-white character, loop back to decide what to do.", "-\t\t\t}\t", "-\t} catch (Exception e) {", "-\t\t// ignore", "-\t} finally {", "-\t\t// Restore status quo ante and return suitable value.", "-\t\tthis.currentPosition = savedCurrentPosition;", "-\t\tthis.startPosition = savedStartPosition;", "-\t\tthis.currentCharacter = savedCurrentCharacter;", "-\t\tthis.withoutUnicodePtr = savedWithoutUnicodePtr;", "-\t\tif (savedWithoutUnicodePtr != 0) {", "-\t\t\tSystem.arraycopy(savedWithoutUnicodeBuffer, 0, this.withoutUnicodeBuffer, 0, savedWithoutUnicodeBuffer.length);", "-\t\t}", "-\t}", "-\treturn atReferenceExpression;", "-}", "+}", "+private final boolean atReferenceExpression() { // Did the '<' we saw just now herald a reference expression ?", "+\treturn getVanguardParser().parse(TokenNameCOLON_COLON);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "759e021d0a2d998c1fd68768665b1e31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "diff": ["-\t\tboolean foundDeprecated = false;", "-\t\t\tint endComment = javadocEnd - 2;", "+\t\t\tthis.endComment = javadocEnd - 2;", "-\t\t\t\tthis.astLengthPtr = -1;", "-\t\t\t\tthis.astPtr = -1;", "-\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\tthis.scanner.startPosition = this.index;", "-\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\tthis.lineStarted = false;", "-\t\t\t\tint lineNumber = this.sourceParser.scanner.getLineNumber(javadocStart);", "-\t\t\t\tint lastLineNumber = this.sourceParser.scanner.getLineNumber(javadocEnd);", "-\t\t\t\tthis.lineEnd = lineNumber == lastLineNumber ? javadocEnd - 2 : javadocStart + 3;", "-\t\t\t\tchar nextCharacter= 0, previousChar;", "-\t\t\t\tint charPosition = -1, inlineStartPosition = 0;", "-\t\t\t\t", "-\t\t\t\t// Loop on each comment character", "-\t\t\t\twhile (this.index < endComment) {", "-\t\t\t\t\tint previousPosition = this.index;", "-\t\t\t\t\tpreviousChar = nextCharacter;", "-\t\t\t\t\t", "-\t\t\t\t\t// Calculate line end (cannot use this.scanner.linePtr as scanner does not parse line ends again)", "-\t\t\t\t\tif (this.index > this.lineEnd) {", "-\t\t\t\t\t\tif (lineNumber < lastLineNumber) {", "-\t\t\t\t\t\t\tthis.lineEnd = this.sourceParser.scanner.getLineEnd(++lineNumber) - 1;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.lineEnd = javadocEnd - 2;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.lineStarted = false;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// Read next char only if token was consumed", "-\t\t\t\t\tif (this.currentTokenType < 0) {", "-\t\t\t\t\t\tnextCharacter = readChar(); // consider unicodes", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tswitch (this.currentTokenType) {", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\t\t\t\t\t\tnextCharacter = '}';", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "-\t\t\t\t\t\t\t\tnextCharacter = '*';", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tnextCharacter = this.scanner.currentCharacter;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tswitch (nextCharacter) {", "-\t\t\t\t\t\tcase '@' :", "-\t\t\t\t\t\t\tboolean valid = false;", "-\t\t\t\t\t\t\t// Start tag parsing only if we are on line beginning or at inline tag beginning", "-\t\t\t\t\t\t\tif (!this.lineStarted || previousChar == '{') {", "-\t\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\tint start = this.astStack[this.astPtr].sourceStart;", "-\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(start, charPosition);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (previousChar == '{') {", "-\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = true;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, endComment);", "-\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.javadoc.inherited = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseReturn();", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (!valid && this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\r':", "-\t\t\t\t\t\tcase '\\n':", "-\t\t\t\t\t\t\tthis.lineStarted = false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '}' :", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) this.inlineTagStarted = false;", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '{' :", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(inlineStartPosition, this.index);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tinlineStartPosition = previousPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '*' :", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tif (!this.lineStarted && !CharOperation.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tsuper.checkDeprecation(javadocStart, javadocEnd);", "-\t\t\tif (this.checkJavadoc) {", "-\t\t\t\tupdateJavadoc();", "-\t\t\t}", "-\t\treturn foundDeprecated;", "+\t\treturn this.deprecated;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5190495328fb0beb7d4f7c554403f56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "diff": ["-\t", "+", "-\t\t\t//this.problemReporter = sourceParser.problemReporter();", "-\t\t\t\t//if (this.scanner.source == null) {", "-\t\t\t\t//\tthis.scanner.setSource(this.source);", "-\t\t\t\t//}", "-\t\t\t\t//this.scanner.setSource(CharOperation.subarray(this.source, annotationStart, annotationEnd+1));", "-\t\t\t\t//this.source = this.scanner.source;", "-\t\t\t} ", "-\t\t", "+\t\t\t}", "+", "-\t\t\t\t\t", "+", "-\t\t\tnextLine: for (int line = firstLineNumber; line <= lastLineNumber; line++) {", "-\t\t\t\tint lineStart = line == firstLineNumber ", "-\t\t\t\t\t\t? annotationStart + 3 \t\t// skip leading /**", "-\t\t\t\t\t\t:  this.sourceParser.scanner.getLineStart(line);", "-\t\t\t\t//lineStart -= annotationStart;", "+\t\t\tnextLine : for (int line = firstLineNumber; line <= lastLineNumber; line++) {", "+\t\t\t\tint lineStart = line == firstLineNumber", "+\t\t\t\t\t\t? annotationStart + 3 // skip leading /**", "+\t\t\t\t\t\t: this.sourceParser.scanner.getLineStart(line);", "-\t\t\t\t\t\t? annotationEnd - 2 \t\t// remove trailing */", "-\t\t\t\t\t\t:  this.sourceParser.scanner.getLineEnd(line);", "-\t\t\t\t//this.lineEnd -= annotationStart;", "+\t\t\t\t\t\t? annotationEnd - 2 // remove trailing */", "+\t\t\t\t\t\t: this.sourceParser.scanner.getLineEnd(line);", "-\t\t\t\t\tswitch(nextCharacter) {", "+\t\t\t\t\tswitch (nextCharacter) {", "-\t\t\t\t\t\t\t\tif ((readChar() == 'd')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'e')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'p')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'r')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'e')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'c')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'a')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 't')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'e')", "-\t\t\t\t\t\t\t\t\t&& (readChar() == 'd')) {", "+\t\t\t\t\t\t\t\tif ((readChar() == 'd') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'p') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'r') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'c') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'a') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 't') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t\t(readChar() == 'd')) {", "-\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "-\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tint tk = readConsumeToken();", "-\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\t\tcase  TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\tparseParam();", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\t\t\t\t\tparseSee();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\tparseReturn();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t \t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\tcontinue nextLine;", "+\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "+\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "+\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\t\tswitch (tk) {", "+\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "+\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\t\t\tparseParam();", "+\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\t\t\tparseThrows();", "+\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\t\t\tparseSee();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\t\t\t\t\t\tparseReturn();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\t\t\t\t\t\tparseThrows();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue nextLine;", "-\t\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) continue nextLine;", "+\t\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) {", "+\t\t\t\t\t\t\t\tcontinue nextLine;", "+\t\t\t\t\t\t\t}", "-\t\t}\t\t", "+\t\t}"]}], "num": 14895}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3430341933e68aa05a210b4cb28d7a15", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5e398864d90fee8a0dfcb6b96782fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "73a3572f1ed828d7a770d67850f907fae70bd464", "commitAfterChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tboolean versionIDRequired = false;", "-", "+\t\tboolean printVersionRequired = false;", "+\t\t", "-\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tversionIDRequired = true;", "-\t\t\t\tcontinue;", "+\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$", "+\t\t\t\tprintVersionRequired = true;", "+\t\t\t\tproceed = false;", "+\t\t\t\treturn;", "+\t\t\tif (currentArg.equals(\"-showversion\")) { //$NON-NLS-1$", "+\t\t\t\tprintVersionRequired = true;", "+\t\t\t\tcontinue;", "+\t\t\t}\t\t\t", "-\t\t\tif (currentArg.equals(\"-help\")) { //$NON-NLS-1$", "+\t\t\tif (currentArg.equals(\"-help\") || currentArg.equals(\"-?\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"packageDefaultMethod\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"pkgDefaultMethod\") || token.equals(\"packageDefaultMethod\")/*backward compatible*/ ) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"interfaceNonInherited\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"intfNonInherited\") || token.equals(\"interfaceNonInherited\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"noImplicitStringConversion\")) {//$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"charConcat\") || token.equals(\"noImplicitStringConversion\")/*backward compatible*/) {//$NON-NLS-1$", "-", "-\t\t/*", "-\t\t * Standalone options", "-\t\t */", "-\t\tif (versionIDRequired) {", "-\t\t\tout.println(Main.bind(\"misc.version\",  //$NON-NLS-1$", "-\t\t\t\tnew String[]{", "-\t\t\t\t\tMain.bind(\"compiler.name\"), //$NON-NLS-1$", "-\t\t\t\t\tMain.bind(\"compiler.version\"), //$NON-NLS-1$", "-\t\t\t\t\tMain.bind(\"compiler.copyright\") })); //$NON-NLS-1$", "-\t\t\tproceed = false;", "-\t\t\treturn;", "-\t\t}", "-", "-\t\tif (printUsageRequired) {", "+\t\tif (printUsageRequired || filesCount == 0) {", "+\t\t} else {", "+\t\t\tif (printVersionRequired) {", "+\t\t\t\tprintVersion();", "+\t\t\t\tif (!proceed) return;", "+\t\t\t}", "-\t\tif (filenames == null) {", "-\t\t\tprintUsage();", "-\t\t\treturn;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e14853a6af66c504db0ed1ce040ba39e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void createGeneratedSourceFolder()", "signatureAfterChange": " \tpublic void ensureFolderExists()", "diff": ["-\tpublic void createGeneratedSourceFolder(){", "-\t\tIFolder srcFolder = getFolder();", "-\t\t// This most likely means the preference change event hasn't occured yet", "-\t\t// and we don't know about the name of the generated source directory.", "-\t\tif( srcFolder == null )", "+\tpublic void ensureFolderExists(){", "+\t\t// If APT is disabled, do nothing.", "+\t\tif (!AptConfig.isEnabled(_aptProject.getJavaProject())) {", "-\t\ttry{", "-\t\t\tsrcFolder.refreshLocal( IResource.DEPTH_INFINITE, null );", "-\t\t\tif (!srcFolder.exists()) {", "-\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\tAptPlugin.trace(\"creating \" + srcFolder.getProjectRelativePath()); //$NON-NLS-1$", "-\t\t\t\t\t", "-\t\t\t\tFileSystemUtil.makeDerivedParentFolders(srcFolder);", "+\t\t}", "+\t\t", "+\t\t// In principle we could bail out here, if (_generatedSourceFolder != null).", "+\t\t// However, this method is an opportunity to detect and fix problems such ", "+\t\t// as the folder getting deleted without generatedSourceFolderDeleted() ", "+\t\t// getting called (e.g., without user having done a refresh).", "+\t\tIFolder srcFolder = getFolder();", "+\t\tif (srcFolder == null) {", "+\t\t\tIStatus status = AptPlugin.createStatus(null, \"Could not create generated source folder (\" + //$NON-NLS-1$", "+\t\t\t\t\tAptConfig.getGenSrcDir(_aptProject.getJavaProject()) + \")\"); //$NON-NLS-1$", "+\t\t\tAptPlugin.log(status);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (createOnDisk(srcFolder)) {", "+\t\t\tif (isOnClasspath(srcFolder)) {", "+\t\t\t\tsynchronized (this) {", "+\t\t\t\t\t// Only set _generatedSourceFolder if folder is on disk and on classpath.", "+\t\t\t\t\t_generatedSourceFolder = srcFolder;", "+\t\t\t\t}", "-\t\tcatch(CoreException ce){", "-\t\t\tAptPlugin.log(ce, \"Failure during refreshLocal on \" + srcFolder.getProjectRelativePath()); //$NON-NLS-1$", "-\t\t}", "-\t\tsynchronized (this) {", "-\t\t\t_generatedSourceFolder = srcFolder;", "-\t\t}"]}], "num": 2856}
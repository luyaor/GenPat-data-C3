{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ce3bc36a3730aa021352042b052d2f4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e8e175ca0f92868d6623b779e5a12f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "e1b169e81e77457e606284ca99eb647f32044188", "commitAfterChange": "3aabc067e22084d59ef0ea59b0d58e1085dede4c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["-\t\t\tif (!returnExpressions[i].resolvedType.isCompatibleWith(sam.returnType))", "-\t\t\t\tif (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)", "+\t\t\tif (returnExpressions[i] instanceof FunctionalExpression) { // don't want to use the resolvedType - polluted from some other overload resolution candidate", "+\t\t\t\tif (!returnExpressions[i].isCompatibleWith(sam.returnType, this.enclosingScope))", "+\t\t\t} else {", "+\t\t\t\tif (this.enclosingScope.parameterCompatibilityLevel(returnExpressions[i].resolvedType, sam.returnType) == Scope.NOT_COMPATIBLE) {", "+\t\t\t\t\tif (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dfa1cf2b3fbcffc7f80ee27326ffb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ed80be792854aeaafe85328a8925218265caeac6", "commitAfterChange": "87c02024c35caa7b296fc7c28fa066d1219c7ebd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate int compatibilityLevel18FromInner(MethodBinding method, InnerInferenceHelper innerInferenceHelper, Expression invocArg, int argLen, int i, boolean[] isVarArgs)", "signatureAfterChange": "  \tprivate int compatibilityLevel18FromInner(MethodBinding method, InnerInferenceHelper innerInferenceHelper, Expression invocArg, int argLen, int i, boolean[] isVarArgs)", "diff": ["-\t\t\tif (resolvedType.isCompatibleWith(targetType, this)) {", "-\t\t\t\treturn compatible;", "+\t\t\tint level = parameterCompatibilityLevel(resolvedType, targetType);", "+\t\t\tif (level != NOT_COMPATIBLE) {", "+\t\t\t\treturn Math.max(compatible, level);", "-\t\t\t\t\t\t\tif (solution.returnType != null && solution.returnType.isCompatibleWith(targetType, this))", "-\t\t\t\t\t\t\t\treturn compatible;", "+\t\t\t\t\t\t\tif (solution.returnType != null) {", "+\t\t\t\t\t\t\t\tlevel = parameterCompatibilityLevel(solution.returnType, targetType);", "+\t\t\t\t\t\t\t\tif (level != NOT_COMPATIBLE)", "+\t\t\t\t\t\t\t\t\treturn Math.max(compatible, level);", "+\t\t\t\t\t\t\t}"]}], "num": 71146}
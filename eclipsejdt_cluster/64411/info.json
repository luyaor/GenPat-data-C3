{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8781864cb0c5705fed859b54fb854e84", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8fe50b36640840126b1c9f765ae0d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 70, "signatureBeforeChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["+\t\tboolean proposeAllMemberTypes = !this.assistNodeIsConstructor && PROPOSE_MEMBER_TYPES;", "+\t\t", "-\t\t\tfindNestedTypes(token, scope.enclosingSourceType(), scope, typesFound);", "+\t\t\tfindNestedTypes(token, scope.enclosingSourceType(), scope, proposeAllMemberTypes, typesFound);", "+\t\t\tReferenceBinding outerInvocationType = scope.enclosingSourceType();", "+\t\t\tif(outerInvocationType != null) {", "+\t\t\t\tReferenceBinding temp = outerInvocationType.enclosingType();", "+\t\t\t\twhile(temp != null) {", "+\t\t\t\t\touterInvocationType = temp;", "+\t\t\t\t\ttemp = temp.enclosingType();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t\t", "+\t\t\t\tif(isForbidden(sourceType)) continue;", "+\t\t\t\t", "+\t\t\t\tif(proposeAllMemberTypes &&", "+\t\t\t\t\tsourceType != outerInvocationType &&", "+\t\t\t\t\tPROPOSE_MEMBER_TYPES) {", "+\t\t\t\t\tfindSubMemberTypes(", "+\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\tsourceType,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\ttypesFound);", "+\t\t\t\t}", "-", "-\t\t\t\tif(isForbidden(sourceType)) continue;", "-\t\t\t\t\t", "+\t\t\t\t", "+\t\t\t\tif(PROPOSE_MEMBER_TYPES) {", "+\t\t\t\t\tif(this.assistNodeIsClass) {", "+\t\t\t\t\t\tif(!sourceType.isClass()) continue;", "+\t\t\t\t\t} else if(this.assistNodeIsInterface) {", "+\t\t\t\t\t\tif(!sourceType.isInterface() && !sourceType.isAnnotationType()) continue;", "+\t\t\t\t\t} else if (this.assistNodeIsAnnotation) {", "+\t\t\t\t\t\tif(!sourceType.isAnnotationType()) continue;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\t} else {", "+\t\t\t\t} else if(sourceType.isClass()){", "-\t\t\tthis.findTypesFromStaticImports(token, scope, typesFound);", "+\t\t\tthis.findTypesFromStaticImports(token, scope, proposeAllMemberTypes, typesFound);", "-\t\t\t\t\t\t\t\t\t\t\t\tif(this.forbiddenReferenceIsError) return;", "+\t\t\t\t\t\t\t\t\t\t\t\tif(this.forbiddenReferenceIsError) continue next;", "-\t\t\t\t\t\t\t\t\t\t\t\tif(this.discouragedReferenceIsError) return;", "+\t\t\t\t\t\t\t\t\t\t\t\tif(this.discouragedReferenceIsError) continue next;", "-\t\t\t\t\t\t\t\tif (mustQualifyType(packageName, typeName)) {", "+\t\t\t\t\t\t\t\tif (mustQualifyType(packageName, typeName, null, refBinding.modifiers)) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif(PROPOSE_MEMBER_TYPES) {", "+\t\t\t\t\t\t\t\tif(this.assistNodeIsClass) {", "+\t\t\t\t\t\t\t\t\tif(!refBinding.isClass()) continue next;", "+\t\t\t\t\t\t\t\t} else if(this.assistNodeIsInterface) {", "+\t\t\t\t\t\t\t\t\tif(!refBinding.isInterface() && !refBinding.isAnnotationType()) continue next;", "+\t\t\t\t\t\t\t\t} else if (this.assistNodeIsAnnotation) {", "+\t\t\t\t\t\t\t\t\tif(!refBinding.isAnnotationType()) continue next;", "-\t\t\t\tthis.nameEnvironment.findTypes(token, this);", "+\t\t\t\tint l = typesFound.size();", "+\t\t\t\tfor (int i = 0; i < l; i++) {", "+\t\t\t\t\tReferenceBinding typeFound = (ReferenceBinding) typesFound.elementAt(i);", "+\t\t\t\t\tchar[] fullyQualifiedTypeName =", "+\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\ttypeFound.qualifiedPackageName(),", "+\t\t\t\t\t\t\t\ttypeFound.qualifiedSourceName(), ", "+\t\t\t\t\t\t\t\t'.');", "+\t\t\t\t\tthis.knownTypes.put(fullyQualifiedTypeName, this);", "+\t\t\t\t}", "+\t\t\t\tthis.nameEnvironment.findTypes(token, proposeAllMemberTypes, this);", "+\t\t\t\tacceptTypes();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ace4cecc7654cc5639607c770aa1ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "6e2621b16cebac618a0b920fb0898b360d0eb4c5", "commitAfterChange": "080a42c1d10403c7486b8cde9973df6dc09a8d9d", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "signatureAfterChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "diff": ["-\t\t\t\twhile (this.column <= this.indentationLevel) {", "-\t\t\t\t\tbuffer.append('\\t');", "-\t\t\t\t\tthis.lastNumberOfNewLines = 0;", "-\t\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "-\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\tboolean useTabsForLeadingIndents = this.useTabsOnlyForLeadingIndents;", "+\t\t\t\tint numberOfLeadingIndents = this.numberOfIndentations;", "+\t\t\t\tint indentationsAsTab = 0;", "+\t\t\t\tif (useTabsForLeadingIndents) {", "+\t\t\t\t\twhile (this.column <= this.indentationLevel) {", "+\t\t\t\t\t\tif (indentationsAsTab < numberOfLeadingIndents) {", "+\t\t\t\t\t\t\tbuffer.append('\\t');", "+\t\t\t\t\t\t\tindentationsAsTab++;", "+\t\t\t\t\t\t\tthis.lastNumberOfNewLines = 0;", "+\t\t\t\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "+\t\t\t\t\t\t\tthis.column += complement;", "+\t\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\twhile (this.column <= this.indentationLevel) {", "+\t\t\t\t\t\tbuffer.append('\\t');", "+\t\t\t\t\t\tthis.lastNumberOfNewLines = 0;", "+\t\t\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "+\t\t\t\t\t\tthis.column += complement;", "+\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t}", "-\t\t\t\twhile (this.column <= this.indentationLevel) {", "-\t\t\t\t\tif ((this.column - 1 + this.tabLength) <= this.indentationLevel) {", "-\t\t\t\t\t\tbuffer.append('\\t');", "-\t\t\t\t\t\tthis.column += this.tabLength;", "-\t\t\t\t\t} else if ((this.column - 1 + this.indentationSize) <= this.indentationLevel) {", "-\t\t\t\t\t\t// print one indentation", "-\t\t\t\t\t\tfor (int i = 0, max = this.indentationSize; i < max; i++) {", "+\t\t\t\tuseTabsForLeadingIndents = this.useTabsOnlyForLeadingIndents;", "+\t\t\t\tnumberOfLeadingIndents = this.numberOfIndentations;", "+\t\t\t\tindentationsAsTab = 0;", "+\t\t\t\tif (useTabsForLeadingIndents) {", "+\t\t\t\t\tfinal int columnForLeadingIndents = numberOfLeadingIndents * this.indentationSize;", "+\t\t\t\t\twhile (this.column <= this.indentationLevel) {", "+\t\t\t\t\t\tif (this.column <= columnForLeadingIndents) {", "+\t\t\t\t\t\t\tif ((this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\t\t\tbuffer.append('\\t');", "+\t\t\t\t\t\t\t\tthis.column += this.tabLength;", "+\t\t\t\t\t\t\t} else if ((this.column - 1 + this.indentationSize) <= this.indentationLevel) {", "+\t\t\t\t\t\t\t\t// print one indentation", "+\t\t\t\t\t\t\t\tfor (int i = 0, max = this.indentationSize; i < max; i++) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfor (int i = this.column, max = this.indentationLevel; i <= max; i++) {", "+\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\twhile (this.column <= this.indentationLevel) {", "+\t\t\t\t\t\tif ((this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\t\tbuffer.append('\\t');", "+\t\t\t\t\t\t\tthis.column += this.tabLength;", "+\t\t\t\t\t\t} else if ((this.column - 1 + this.indentationSize) <= this.indentationLevel) {", "+\t\t\t\t\t\t\t// print one indentation", "+\t\t\t\t\t\t\tfor (int i = 0, max = this.indentationSize; i < max; i++) {", "+\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\tthis.needSpace = false;", "-\t\t\t\t\tthis.needSpace = false;"]}], "num": 64411}
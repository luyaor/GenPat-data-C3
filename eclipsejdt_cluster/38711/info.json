{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ced38572679a6dcc375ddbd9b4c03719", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63b153109ce3e57360d807bb0473c301", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tFlowInfo preInitInfo = null;", "+\tboolean shouldAnalyseResource = this.binding != null ", "+\t\t\t&& flowInfo.reachMode() == FlowInfo.REACHABLE ", "+\t\t\t&& FakedTrackingVariable.isAnyCloseable(this.initialization.resolvedType);", "+\tif (shouldAnalyseResource) {", "+\t\tpreInitInfo = flowInfo.unconditionalCopy();", "+\t\t// analysis of resource leaks needs additional context while analyzing the RHS:", "+\t\tFakedTrackingVariable.preConnectTrackerAcrossAssignment(this, this.binding, this.initialization);", "+\t}", "+", "-\tFakedTrackingVariable.handleResourceAssignment(flowInfo, this, this.initialization, this.binding, null);", "+", "+\tif (shouldAnalyseResource)", "+\t\tFakedTrackingVariable.handleResourceAssignment(currentScope, preInitInfo, flowInfo, this, this.initialization, this.binding);", "+\telse", "+\t\tFakedTrackingVariable.cleanUpAfterAssignment(currentScope, Binding.LOCAL, this.initialization);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77b7f903cc170cbfebcee70108589b02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "82208f61237e714f45fa0ec35023823563f997ac", "commitAfterChange": "c36806bf795aa69e23f027117b2ebc1cb99bee93", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tthis.binding = scope.getField(this.receiverType, this.token, this);", "-\t\tif (!this.binding.isValidBinding()) {", "+\t\tBinding fieldBinding = (this.receiver != null && this.receiver.isThis())", "+\t\t\t? scope.getBinding(this.token, this.bits & RestrictiveFlagMASK, this, true /*resolve*/)", "+\t\t\t: scope.getField(this.receiverType, this.token, this);", "+\t\tif (!fieldBinding.isValidBinding() || !(fieldBinding instanceof FieldBinding)) {", "-\t\t\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "-\t\t\t\t\treturn null;", "-\t\t\t\t} ", "-\t\t\t\tswitch (bindings.length) {", "-\t\t\t\t\tcase 0:", "-\t\t\t\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\tcase 1:", "-\t\t\t\t\t\tthis.binding = null;", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tscope.problemReporter().javadocAmbiguousMethodReference(this, scope.getDeclarationModifiers());", "-\t\t\t\t\t\treturn null;", "+\t\t\t\t\tscope.problemReporter().javadocInvalidField(this.sourceStart, this.sourceEnd, fieldBinding, this.receiverType, scope.getDeclarationModifiers());", "+\t\t\t\t} else {", "+\t\t\t\t\tswitch (bindings.length) {", "+\t\t\t\t\t\tcase 0:", "+\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidField(this.sourceStart, this.sourceEnd, fieldBinding, this.receiverType, scope.getDeclarationModifiers());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\tthis.binding = null;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tscope.problemReporter().javadocAmbiguousMethodReference(this.sourceStart, this.sourceEnd, fieldBinding, scope.getDeclarationModifiers());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\treturn null;", "+\t\tthis.binding = (FieldBinding) fieldBinding;"]}], "num": 38711}
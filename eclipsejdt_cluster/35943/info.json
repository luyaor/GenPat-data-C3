{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd19763ba966f950414725d15034af84", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004ef7e1c4404218fa129922aa76d693", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "14a4ce740e51b0d8505a35bf0508f7e51e888977", "commitAfterChange": "f62fc9bd4adc94855b1129f538fa2510e9047295", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tpublic void readVariables(String xmlString) throws IOException", "signatureAfterChange": "\r \tpublic void readVariables(String xmlString) throws IOException", "diff": ["-\t\t\t\t\tvariableNamesList.add(element.getAttribute(\"name\")); //$NON-NLS-1$\r", "-\t\t\t\t\tvariablePathsList.add(new Path(element.getAttribute(\"path\"))); //$NON-NLS-1$\r", "+\t\t\t\t\tVariables.put( \r", "+\t\t\t\t\t\telement.getAttribute(\"name\"), //$NON-NLS-1$\r", "+\t\t\t\t\t\tnew Path(element.getAttribute(\"path\"))); //$NON-NLS-1$\r", "-\t\t}\r", "-\t\t// set all variables at once\r", "-\t\ttry {\r", "-\t\t\tString[] variableNames = new String[variableNamesList.size()];\r", "-\t\t\tvariableNamesList.toArray(variableNames);\r", "-\t\t\tIPath[] variablePaths = new IPath[variablePathsList.size()];\r", "-\t\t\tvariablePathsList.toArray(variablePaths);\r", "-\t\t\tJavaCore.setClasspathVariables(variableNames, variablePaths, null);\r", "-\t\t} catch(JavaModelException e){\r", "-\t\t} catch(RuntimeException e){\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57fa4db28e1a07ddd021d554ee113244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d2eb21aa89935901dbdadab7e4f2ef196739750b", "commitAfterChange": "32876c0bd309ef116b634cd21181153eca601c1f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected void elementRemoved(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r \tprotected void elementRemoved(Openable element, IResourceDelta delta)", "diff": ["- */\r", "-protected void elementRemoved(Openable element, IResourceDelta delta) {\r", "-\tclose(element);\r", "-\tremoveFromParentInfo(element);\r", "-\tfCurrentDelta.removed(element);\r", "-\tswitch(element.getElementType()){\r", "-\t\tcase IJavaElement.JAVA_PROJECT :\r", "-\t\t\tJavaModelManager.getJavaModelManager().removePerProjectInfo((JavaProject) element);\r", "-\t\t\tbreak;\r", "-\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :\r", "-\t\t\t// when a root on the classpath is removed, the classpath must be updated\r", "-\t\t\tif (isOnClasspath(element)) {\r", "-\t\t\t\trootRemoved((IPackageFragmentRoot)element);\r", "-\t\t\t\tJavaElementDelta rootDelta = fCurrentDelta.find(element);\r", "-\t\t\t\trootDelta.setFlags(rootDelta.getFlags() | IJavaElementDelta.F_REMOVED_FROM_CLASSPATH);\r", "-\t\t\t\t//1G1TW2T - get rid of namelookup since it holds onto obsolete cached info \r", "-\t\t\t\tJavaProject project = (JavaProject)element.getJavaProject();\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tproject.getJavaProjectElementInfo().setNameLookup(null);\r", "-\t\t\t\t} catch(JavaModelException e){\r", "-\t\t\t\t}\t\t\t\t\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t\tcase IJavaElement.PACKAGE_FRAGMENT :\r", "-\t\t\t//1G1TW2T - get rid of namelookup since it holds onto obsolete cached info \r", "-\t\t\tif (isOnClasspath(element)) {\r", "-\t\t\t\tJavaProject project = (JavaProject)element.getJavaProject();\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tproject.getJavaProjectElementInfo().setNameLookup(null);\r", "-\t\t\t\t} catch(JavaModelException e){\r", "-\t\t\tbreak;\r", "-\t\tcase IJavaElement.JAVA_MODEL:\r", "-\t\t\telement.getJavaModelManager().getIndexManager().reset();\r", "-\t\t\telement.getJavaModelManager().fModelInfo = null;\r", "-\t\t\tbreak;\r", "-\t}\r", "-}\r", "+\t */\r", "+\tprotected void elementRemoved(Openable element, IResourceDelta delta) {\r", "+\r", "+\t\tclose(element);\r", "+\t\tremoveFromParentInfo(element);\r", "+\t\tfCurrentDelta.removed(element);\r", "+\r", "+\t\tswitch (element.getElementType()) {\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT :\r", "+\t\t\t\tJavaModelManager.getJavaModelManager().removePerProjectInfo(\r", "+\t\t\t\t\t(JavaProject) element);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :\r", "+\t\t\t\t// get rid of namelookup since it holds onto obsolete cached info \r", "+\t\t\t\tif (isOnClasspath(element)) {\r", "+\t\t\t\t\tJavaProject project = (JavaProject) element.getJavaProject();\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tproject.getJavaProjectElementInfo().setNameLookup(null);\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.JAVA_MODEL :\r", "+\t\t\t\telement.getJavaModelManager().getIndexManager().reset();\r", "+\t\t\t\telement.getJavaModelManager().fModelInfo = null;\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa0db40dec33d532614542550af483a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2a6fc21e132c7337a2ad9e75a03356551f0e9060", "commitAfterChange": "2f8f6c0c9552d7ebf46ec13ce513e098823a7a4e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate String disassembleInsideZipFile(String fileName, String zipEntryName)", "signatureAfterChange": " \t \tprivate String disassembleInsideZipFile(String fileName, String zipEntryName)", "diff": ["-\t\tIClassFileReader classFileReader = null;", "-\t\ttry {", "-\t\t\tZipFile zipFile = new ZipFile(fileName);", "-\t\t\tZipEntry zipEntry = zipFile.getEntry(zipEntryName);", "-\t\t\tif (zipEntry == null) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\tif (!zipEntryName.toLowerCase().endsWith(\".class\")) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\tbyte classFileBytes[] = Util.getZipEntryByteContent(zipEntry, zipFile);", "-\t\t\tclassFileReader = new ClassFileReader(classFileBytes, DecodingFlag.ALL);", "-\t\t} catch(ClassFormatException e) {", "-\t\t\treturn null;", "-\t\t} catch(IOException e) {", "-\t\t\treturn null;", "-\t\t}", "+\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(fileName, zipEntryName, DecodingFlag.ALL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aef824c3ab95c9bbaece64a3175a262a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "24ecdaaa88a3d3df53c6657b56b1c35a02f254d7", "commitAfterChange": "b77d2ea3108de5650fdc8f1f0c9f51bf7203159f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic char[] findSource(IType type)", "signatureAfterChange": " \tpublic char[] findSource(IType type)", "diff": ["-\t\tBinaryType parent = (BinaryType) type.getDeclaringType();", "-\t\tBinaryType declType = (BinaryType) type;", "-\t\twhile (parent != null) {", "-\t\t\tdeclType = parent;", "-\t\t\tparent = (BinaryType) declType.getDeclaringType();", "-\t\t}", "-\t\tIBinaryType info = null;", "-\t\ttry {", "-\t\t\tinfo = (IBinaryType) declType.getElementInfo();", "-\t\t} catch (JavaModelException e) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tString simpleSourceFileName = declType.sourceFileName(info);", "+\t\tString simpleSourceFileName = ((BinaryType) type).getSourceFileName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad902351d1027ec7ef67802cb81f88e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "68e3f5a0117daa8b48e901ad002544900745ebec", "commitAfterChange": "c8a4dfe61867281668d74378b928130cf2069288", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["+\t\t", "+\t\tClass javacClass = Javac.class;", "+\t\t", "+\t\t/*", "+\t\t * Read in the compiler arguments first since we might need to modify", "+\t\t * the classpath if any access rules were specified", "+\t\t */", "+\t\tString [] compilerArgs = processCompilerArguments(javacClass);", "-        Class javacClass = Javac.class;", "-\t\tcmd.createArgument().setPath(classpath);", "+\t\tcreateClasspathArgument(cmd, classpath);", "-        ", "-       // retrieve the method getCurrentCompilerArgs() using reflect", "-        // This is done to improve the compatibility to ant 1.5", "-        Method getCurrentCompilerArgsMethod = null;", "-        try {", "-\t        getCurrentCompilerArgsMethod = javacClass.getMethod(\"getCurrentCompilerArgs\", null); //$NON-NLS-1$", "-        } catch(NoSuchMethodException e) {", "-        \t// if not found, then we cannot use this method (ant 1.5)", "-        \t// debug level is only available with ant 1.5.x", "-        }", "- \t    String[] compilerArgs = null;", "-        if (getCurrentCompilerArgsMethod != null) {", "-\t\t\ttry {", "-\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(this.attributes, null);", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\t// should never happen", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\t// should never happen", "-\t\t\t}", "-    \t}"]}], "num": 35943}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69522261e869d4a7a1216c648f0b2b02", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b1467d9eded54551339fec7180f9ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "signatureAfterChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "diff": ["+\t\t\t\tcase Opcodes.OPC_invokedynamic:", "+\t\t\t\t\tindex = u2At(bytecodes, 1, pc);", "+\t\t\t\t\tnameAndTypeIndex = u2At(poolContents, 3,", "+\t\t\t\t\t\t\tconstantPoolOffsets[index]);", "+\t\t\t\t\tutf8index = u2At(poolContents, 3,", "+\t\t\t\t\t\t\tconstantPoolOffsets[nameAndTypeIndex]);", "+\t\t\t\t\tdescriptor = utf8At(poolContents,", "+\t\t\t\t\t\t\tconstantPoolOffsets[utf8index] + 3, u2At(", "+\t\t\t\t\t\t\t\t\tpoolContents, 1,", "+\t\t\t\t\t\t\t\t\tconstantPoolOffsets[utf8index]));", "+\t\t\t\t\tframe.numberOfStackItems -= getParametersCount(descriptor);", "+\t\t\t\t\treturnType = getReturnType(descriptor);", "+\t\t\t\t\tif (returnType.length == 1) {", "+\t\t\t\t\t\t// base type", "+\t\t\t\t\t\tswitch(returnType[0]) {", "+\t\t\t\t\t\t\tcase 'Z':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.BOOLEAN);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'B':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.BYTE);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'C':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.CHAR);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'D':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.DOUBLE);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'F':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.FLOAT);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'I':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.INT);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'J':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.LONG);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'S':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.SHORT);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (returnType[0] == '[') {", "+\t\t\t\t\t\t\tframe.addStackItem(new VerificationTypeInfo(0, returnType));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tframe.addStackItem(new VerificationTypeInfo(0, CharOperation.subarray(returnType, 1, returnType.length - 1)));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tpc += 5;", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tthis.codeStream.methodDeclaration.scope.problemReporter().abortDueToInternalError(", "-\t\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\t\t\tMessages.abort_invalidOpcode,", "-\t\t\t\t\t\t\t\t\tnew Object[] {", "-\t\t\t\t\t\t\t\t\t\tnew Byte(opcode),", "-\t\t\t\t\t\t\t\t\t\tnew Integer(pc),", "-\t\t\t\t\t\t\t\t\t\tnew String(methodBinding.shortReadableName()),", "-\t\t\t\t\t\t\t\t\t}),", "-\t\t\t\t\t\t\tthis.codeStream.methodDeclaration);", "+\t\t\t\t\tif (this.codeStream.methodDeclaration != null) {", "+\t\t\t\t\t\tthis.codeStream.methodDeclaration.scope.problemReporter().abortDueToInternalError(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\t\tMessages.abort_invalidOpcode,", "+\t\t\t\t\t\t\t\t\t\tnew Object[] {", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Byte(opcode),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Integer(pc),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew String(methodBinding.shortReadableName()),", "+\t\t\t\t\t\t\t\t\t\t}),", "+\t\t\t\t\t\t\t\t\t\tthis.codeStream.methodDeclaration);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.codeStream.lambdaExpression.scope.problemReporter().abortDueToInternalError(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\t\tMessages.abort_invalidOpcode,", "+\t\t\t\t\t\t\t\t\t\tnew Object[] {", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Byte(opcode),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Integer(pc),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew String(methodBinding.shortReadableName()),", "+\t\t\t\t\t\t\t\t\t\t}),", "+\t\t\t\t\t\t\t\t\t\tthis.codeStream.lambdaExpression);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61c7d2b96d10be0a69a957e3c28fec5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java", "commitBeforeChange": "0874cfb2ef67a79a49d909a248c81f1f23dd713a", "commitAfterChange": "c45642653b63db018daa5628a39e66d2c31eb53d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \r \tpublic char charValue()", "signatureAfterChange": " \r \tpublic char charValue()", "diff": ["-\t\t\t// legal: b, t, n, f, r, \", ', \\, 0, 1, 2, 3, 4, 5, 6, or 7\r", "-\t\t\t// FIXME\r", "-\t\t\tthrow new RuntimeException(\"not implemented yet\");//$NON-NLS-1$\r", "+\t\t\tif (len == 3) {\r", "+\t\t\t\tchar nextChar = s.charAt(2);\r", "+\t\t\t\tswitch(nextChar) {\r", "+\t\t\t\t\tcase 'b' :\r", "+\t\t\t\t\t\treturn '\\b';\r", "+\t\t\t\t\tcase 't' :\r", "+\t\t\t\t\t\treturn '\\t';\r", "+\t\t\t\t\tcase 'n' :\r", "+\t\t\t\t\t\treturn '\\n';\r", "+\t\t\t\t\tcase 'f' :\r", "+\t\t\t\t\t\treturn '\\f';\r", "+\t\t\t\t\tcase 'r' :\r", "+\t\t\t\t\t\treturn '\\r';\r", "+\t\t\t\t\tcase '\\\"':\r", "+\t\t\t\t\t\treturn '\\\"';\r", "+\t\t\t\t\tcase '\\'':\r", "+\t\t\t\t\t\treturn '\\'';\r", "+\t\t\t\t\tcase '\\\\':\r", "+\t\t\t\t\t\treturn '\\\\';\r", "+\t\t\t\t\tcase '0' :\r", "+\t\t\t\t\t\treturn '\\0';\r", "+\t\t\t\t\tcase '1' :\r", "+\t\t\t\t\t\treturn '\\1';\r", "+\t\t\t\t\tcase '2' :\r", "+\t\t\t\t\t\treturn '\\2';\r", "+\t\t\t\t\tcase '3' :\r", "+\t\t\t\t\t\treturn '\\3';\r", "+\t\t\t\t\tcase '4' :\r", "+\t\t\t\t\t\treturn '\\4';\r", "+\t\t\t\t\tcase '5' :\r", "+\t\t\t\t\t\treturn '\\5';\r", "+\t\t\t\t\tcase '6' :\r", "+\t\t\t\t\t\treturn '\\6';\r", "+\t\t\t\t\tcase '7' :\r", "+\t\t\t\t\t\treturn '\\7';\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t}\r", "+\t\t\t} else if (len == 8) {\r", "+\t\t\t\t//handle the case of unicode.\r", "+\t\t\t\tint currentPosition = 2;\r", "+\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\tif (s.charAt(currentPosition++) == 'u') {\r", "+\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c4 < 0){\r", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81aca92c6fe964b97fba64e1f37d1b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java", "commitBeforeChange": "61c4f34a99fac56b19ac1994f5a7274231102e0c", "commitAfterChange": "51338ea2c291fc027c3057bd509f9115f23d8914", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic String getLiteralValue()", "signatureAfterChange": "  \tpublic String getLiteralValue()", "diff": ["-\t\tStringBuffer b = new StringBuffer(len - 2);", "-\t\tfor (int i = 1; i< len - 1; i++) {", "-\t\t\tchar c = s.charAt(i);", "-\t\t\tif (c == '\\\"') {", "-\t\t\t\tthrow new IllegalArgumentException();", "+\t\t", "+\t\tScanner scanner = getAST().scanner;", "+\t\tchar[] source = s.toCharArray();", "+\t\tscanner.setSource(source);", "+\t\tscanner.resetTo(0, source.length);", "+\t\ttry {", "+\t\t\tint tokenType = scanner.getNextToken();", "+\t\t\tswitch(tokenType) {", "+\t\t\t\tcase Scanner.TokenNameStringLiteral:", "+\t\t\t\t\treturn new String(scanner.getCurrentTokenSourceString());", "+\t\t\t\tdefault:", "+\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\tif (c == '\\\\') {", "-\t\t\t\t// legal: b, t, n, f, r, \", ', \\, 0, 1, 2, 3, 4, 5, 6, or 7", "-\t\t\t\tchar nextChar;", "-\t\t\t\tif ((i + 1) < len - 1) {", "-\t\t\t\t\tnextChar = s.charAt(i + 1);", "-\t\t\t\t\ti++;", "-\t\t\t\t\tswitch(nextChar) {", "-\t\t\t\t\t\tcase 'b' :", "-\t\t\t\t\t\t\tb.append('\\b');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 't' :", "-\t\t\t\t\t\t\tb.append('\\t');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'n' :", "-\t\t\t\t\t\t\tb.append('\\n');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'f' :", "-\t\t\t\t\t\t\tb.append('\\f');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'r' :", "-\t\t\t\t\t\t\tb.append('\\r');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\\"':", "-\t\t\t\t\t\t\tb.append('\\\"');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\t\tb.append('\\'');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\\\':", "-\t\t\t\t\t\t\tb.append('\\\\');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '0' :", "-\t\t\t\t\t\t\tb.append('\\0');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '1' :", "-\t\t\t\t\t\t\tb.append('\\1');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '2' :", "-\t\t\t\t\t\t\tb.append('\\2');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '3' :", "-\t\t\t\t\t\t\tb.append('\\3');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '4' :", "-\t\t\t\t\t\t\tb.append('\\4');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '5' :", "-\t\t\t\t\t\t\tb.append('\\5');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '6' :", "-\t\t\t\t\t\t\tb.append('\\6');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '7' :", "-\t\t\t\t\t\t\tb.append('\\7');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'u' :", "-\t\t\t\t\t\t\t//handle the case of unicode.", "-\t\t\t\t\t\t\tint currentPosition = i + 1;", "-\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "-\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c1 < 0", "-\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c2 < 0", "-\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c3 < 0", "-\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c4 < 0){", "-\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tb.append((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4));", "-\t\t\t\t\t\t\t\ti = currentPosition - 1;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\");//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tb.append(c);", "-\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\tthrow new IllegalArgumentException();", "-\t\treturn b.toString();\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf31105ce2546557bb8c3703cb1f0c9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java", "commitBeforeChange": "cb73a34d3fbf60bb435ba470954bcb213328d377", "commitAfterChange": "521aa9edc795bda5aa1a4708f3c2bdc417b307c1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic char charValue()", "signatureAfterChange": "  \tpublic char charValue()", "diff": ["-\t\tString s = getEscapedValue();", "-\t\tint len = s.length();", "-\t\tif (len < 2 || s.charAt(0) != '\\'' || s.charAt(len-1) != '\\'' ) {", "-\t\t\tthrow new IllegalArgumentException();", "+\t\tScanner scanner = this.ast.scanner;", "+\t\tchar[] source = escapedValue.toCharArray();", "+\t\tscanner.setSource(source);", "+\t\tscanner.resetTo(0, source.length);", "+\t\tint firstChar = scanner.getNextChar();", "+\t\tint secondChar = scanner.getNextChar();", "+", "+\t\tif (firstChar == -1 || firstChar != '\\'') {", "+\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\tchar c = s.charAt(1);", "-\t\tif (c == '\\'') {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (c == '\\\\') {", "-\t\t\tif (len == 4) {", "-\t\t\t\tchar nextChar = s.charAt(2);", "-\t\t\t\tswitch(nextChar) {", "-\t\t\t\t\tcase 'b' :", "-\t\t\t\t\t\treturn '\\b';", "-\t\t\t\t\tcase 't' :", "-\t\t\t\t\t\treturn '\\t';", "-\t\t\t\t\tcase 'n' :", "-\t\t\t\t\t\treturn '\\n';", "-\t\t\t\t\tcase 'f' :", "-\t\t\t\t\t\treturn '\\f';", "-\t\t\t\t\tcase 'r' :", "-\t\t\t\t\t\treturn '\\r';", "-\t\t\t\t\tcase '\\\"':", "-\t\t\t\t\t\treturn '\\\"';", "-\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\treturn '\\'';", "-\t\t\t\t\tcase '\\\\':", "-\t\t\t\t\t\treturn '\\\\';", "-\t\t\t\t\tcase '0' :", "-\t\t\t\t\t\treturn '\\0';", "-\t\t\t\t\tcase '1' :", "-\t\t\t\t\t\treturn '\\1';", "-\t\t\t\t\tcase '2' :", "-\t\t\t\t\t\treturn '\\2';", "-\t\t\t\t\tcase '3' :", "-\t\t\t\t\t\treturn '\\3';", "-\t\t\t\t\tcase '4' :", "-\t\t\t\t\t\treturn '\\4';", "-\t\t\t\t\tcase '5' :", "-\t\t\t\t\t\treturn '\\5';", "-\t\t\t\t\tcase '6' :", "-\t\t\t\t\t\treturn '\\6';", "-\t\t\t\t\tcase '7' :", "-\t\t\t\t\t\treturn '\\7';", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else if (len == 8) {", "-\t\t\t\t//handle the case of unicode.", "-\t\t\t\tint currentPosition = 2;", "-\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "-\t\t\t\tif (s.charAt(currentPosition++) == 'u') {", "-\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c1 < 0", "-\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c2 < 0", "-\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c3 < 0", "-\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t|| c4 < 0){", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\tchar value = (char) secondChar;", "+\t\tchar nextChar = (char) scanner.getNextChar();", "+\t\tif (secondChar == '\\\\') {", "+\t\t\tif (nextChar == -1) {", "+\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t}", "+\t\t\tswitch(nextChar) {", "+\t\t\t\tcase 'b' :", "+\t\t\t\t\tvalue = '\\b';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 't' :", "+\t\t\t\t\tvalue = '\\t';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'n' :", "+\t\t\t\t\tvalue = '\\n';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'f' :", "+\t\t\t\t\tvalue = '\\f';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'r' :", "+\t\t\t\t\tvalue = '\\r';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\\"':", "+\t\t\t\t\tvalue = '\\\"';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\'':", "+\t\t\t\t\tvalue = '\\'';", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\\\':", "+\t\t\t\t\tvalue = '\\\\';", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault : //octal (well-formed: ended by a ' )", "+\t\t\t\t\tif (Character.isDigit(nextChar)) {", "+\t\t\t\t\t\tint number = Character.getNumericValue(nextChar);", "+\t\t\t\t\t\tnextChar = (char) scanner.getNextChar();", "+\t\t\t\t\t\tif (nextChar == -1) {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nextChar != '\\'') {", "+\t\t\t\t\t\t\tif (!Character.isDigit(nextChar)) {", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnumber = (number * 8) + Character.getNumericValue(nextChar);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnextChar = (char) scanner.getNextChar();", "+\t\t\t\t\t\tif (nextChar == -1) {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nextChar != '\\'') {", "+\t\t\t\t\t\t\tif (!Character.isDigit(nextChar)) {", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnumber = (number * 8) + Character.getNumericValue(nextChar);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tvalue = (char) number;", "-\t\t\t\t\t\treturn (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else {", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tnextChar = (char) scanner.getNextChar();", "+\t\t\tif (nextChar == -1) {", "-\t\treturn c;", "+\t\tif (nextChar == -1 || nextChar != '\\'') {", "+\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t}", "+\t\treturn value;"]}], "num": 2640}
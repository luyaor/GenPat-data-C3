{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfe12f7664840c7e197443bb04529de3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e5dee9cd776d55dd9a89c448495c65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\tif (field.binding != null && this.scope.compilerOptions().includeFieldsInNullAnalysis", "+\t\t\t\t\t\t&& ((field.binding.modifiers & ClassFileConstants.AccFinal) != 0)) {", "+\t\t\t\t\t// we won't reset null Info for constant fields", "+\t\t\t\t\tstaticFieldInfo.updateConstantFieldsMask(field.binding);", "+\t\t\t\t}", "-\t\tFlowInfo constructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "+\t\tUnconditionalFlowInfo staticFieldUnconditionalInfo = staticFieldInfo.unconditionalInits();", "+\t\tFlowInfo constructorInfo;", "+\t\tif (this.scope.compilerOptions().includeFieldsInNullAnalysis) {", "+\t\t\tflowInfo.addNullInfoFrom(staticFieldUnconditionalInfo.discardNonFieldInitializations());", "+\t\t\tflowInfo.addConstantFieldsMask(staticFieldUnconditionalInfo);\t// prevent resetting null info for constant fields inside methods", "+\t\t\tflowInfo.resetNullInfoForFields();\t// only preserve null info for constant fields", "+\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(flowInfo);", "+\t\t\tconstructorInfo.addConstantFieldsMask(staticFieldUnconditionalInfo); // prevent resetting null info for constant fields inside c'tor too", "+\t\t} else {", "+\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "+\t\t}", "+\t\t", "-\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "+\t\t\t\t\t\tstaticFieldUnconditionalInfo.addInitializationsFrom(outerInfo));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e84d5564055d967312d21212a39f40a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatterApplication.java", "commitBeforeChange": "49e1eda92f1ac58df4cb0d60c255a35d2dce04ba", "commitAfterChange": "e90ef260a14686abccfc48006caf4e4749a92ca5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic Object start(IApplicationContext context) throws Exception", "signatureAfterChange": " \tpublic Object start(IApplicationContext context) throws Exception", "diff": ["-\t\t// format the list of files and/or directories", "+\t\t// preserve existing default behavior", "+\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=20793", "+\t\tif (this.options == null) {", "+\t\t\tthis.options = JavaCore.getOptions();", "+\t\t\tthis.options.put(", "+\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN,", "+\t\t\t\tDefaultCodeFormatterConstants.FALSE);", "+\t\t\tthis.options.put(", "+\t\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN,", "+\t\t\t\t\tDefaultCodeFormatterConstants.FALSE);", "+\t\t} else {", "+\t\t\tObject option = this.options.get(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN);", "+\t\t\tif (option == null) {", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN,", "+\t\t\t\t\t\tDefaultCodeFormatterConstants.FALSE);", "+\t\t\t}", "+\t\t\toption = this.options.get(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN);", "+\t\t\tif (option == null) {", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tDefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN,", "+\t\t\t\t\t\tDefaultCodeFormatterConstants.FALSE);", "+\t\t\t}", "+\t\t}", "+\t\t// format the list of files and/or directories"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a2fd1afc24f15d128f3c2d97fc8c78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "913c08568caa0adfd1165460a3e2394884803092", "commitAfterChange": "e85b48027c0c3aebf3b1385576eb671cefee5a77", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \t\tpublic void startLoggingSource(CompilationResult compilationResult)", "signatureAfterChange": " \t\tpublic void startLoggingSource(CompilationResult compilationResult)", "diff": ["-\t\t\t\tchar[] fileName = compilationUnit.getFileName();", "-\t\t\t\tFile f = new File(new String(fileName));", "-\t\t\t\tif (fileName != null) {", "-\t\t\t\t\tif (compilationUnit != null) {", "-\t\t\t\t\t\tthis.parameters.put(Logger.PATH, f.getAbsolutePath());", "+\t\t\t\tif (compilationUnit != null) {", "+    \t\t\t\tchar[] fileName = compilationUnit.getFileName();", "+    \t\t\t\tFile f = new File(new String(fileName));", "+    \t\t\t\tif (fileName != null) {", "+    \t\t\t\t\tthis.parameters.put(Logger.PATH, f.getAbsolutePath());", "+    \t\t\t\t}", "+    \t\t\t\tchar[][] packageName = compilationResult.packageName;", "+    \t\t\t\tif (packageName != null) {", "+    \t\t\t\t\tthis.parameters.put(", "+    \t\t\t\t\t\t\tLogger.PACKAGE,", "+    \t\t\t\t\t\t\tnew String(CharOperation.concatWith(packageName, File.separatorChar)));", "+    \t\t\t\t}", "+    \t\t\t\tCompilationUnit unit = (CompilationUnit) compilationUnit;", "+    \t\t\t\tString destinationPath = unit.destinationPath;", "+\t\t\t\t\tif (destinationPath == null) {", "+\t\t\t\t\t\tdestinationPath = this.main.destinationPath;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (destinationPath != null && destinationPath != NONE) {", "+\t\t\t\t\t\tif (File.separatorChar == '/') {", "+\t\t\t\t\t\t\tthis.parameters.put(Logger.OUTPUT, destinationPath);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.parameters.put(Logger.OUTPUT, destinationPath.replace('/', File.separatorChar));", "+\t\t\t\t\t\t}"]}], "num": 29642}
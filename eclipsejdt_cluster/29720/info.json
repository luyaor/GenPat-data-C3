{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6264602ac840484921c614032b017d08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "064efa237d761f65404a790e8fe3e1f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "55566d5f364ac8008cbbbd5a928a8dcfd0a1b87f", "commitAfterChange": "030294305389e5486e7f63658830617d44acd9c2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected Object parseQualifiedName(boolean reset) throws InvalidInputException", "signatureAfterChange": " \tprotected Object parseQualifiedName(boolean reset) throws InvalidInputException", "diff": ["+\t\t\t\t\t\tif (this.identifierPtr>=0) {", "+\t\t\t\t\t\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.identifierPtr>=0) {", "+\t\t\t\t\t\t\t\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t\t\t\t\t\t\t}", "-\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\tif (this.identifierPtr>=0) {", "+\t\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4f28309e9ba280040627effdeb63ac3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "da9e0d747989149b2294ed35e495d24e9b87d1b6", "commitAfterChange": "af6229e1f4eaf7439cdd509f508e69eff4ec6844", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic int getNextToken() throws InvalidInputException", "signatureAfterChange": " \t \tpublic int getNextToken() throws InvalidInputException", "diff": ["-\t\tint token = getNextToken0();", "+\t\tint token;", "+\t\tif (this.nextToken != TokenNameNotAToken) {", "+\t\t\ttoken = this.nextToken;", "+\t\t\tthis.nextToken = TokenNameNotAToken;", "+\t\t\treturn token; // presumed to be unambiguous.", "+\t\t}", "+\t\ttoken = getNextToken0();", "-\t\t\ttoken = TokenNameAT308;", "+\t\t\tif (((VanguardParser) this.activeParser).currentGoal == Goal.LambdaParameterListGoal) {", "+\t\t\t\ttoken = disambiguatedToken(token);", "+\t\t\t} else {", "+\t\t\t\ttoken = TokenNameAT308;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd84c68d3a05d14b4191073a247ee678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate boolean dumpEqualityExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "signatureAfterChange": "  \tprivate boolean dumpEqualityExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "diff": ["-\t\tbinaryExpression.left.traverse(this, scope);", "-\t\tthis.scribe.printNextToken(operator, this.preferences.insert_space_before_binary_operator);", "-\t\tif (this.preferences.insert_space_after_binary_operator) {", "-\t\t\tthis.scribe.space();", "+\t\tif (this.expressionsDepth < 0) {", "+\t\t\tthis.expressionsDepth = 0;", "+\t\t} else {", "+\t\t\tthis.expressionsDepth++;", "+\t\t\tthis.expressionsPos <<= 2;", "-\t\tbinaryExpression.right.traverse(this, scope);", "-", "+\t\ttry {", "+\t\t\tthis.expressionsPos |= EXPRESSIONS_POS_ENTER_EQUALITY;", "+\t\t\tbinaryExpression.left.traverse(this, scope);", "+\t\t\tthis.scribe.printNextToken(operator, this.preferences.insert_space_before_binary_operator, Scribe.PRESERVE_EMPTY_LINES_IN_EQUALITY_EXPRESSION);", "+\t\t\tif (this.preferences.insert_space_after_binary_operator) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t}", "+\t\tfinally {", "+\t\t\tthis.expressionsDepth--;", "+\t\t\tthis.expressionsPos >>= 2;", "+\t\t}"]}], "num": 29720}
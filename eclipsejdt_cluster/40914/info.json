{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba172dc4ee884e60261cd9dd9116a7d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b33ed6595daf96d201d0079f7efcd89a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate void connectTypeHierarchyWithoutMembers()", "signatureAfterChange": " \t \tprivate void connectTypeHierarchyWithoutMembers()", "diff": ["-\t\tif (parent instanceof CompilationUnitScope) {", "-\t\t\tif (((CompilationUnitScope) parent).imports == null)", "-\t\t\t\t ((CompilationUnitScope) parent).checkAndSetImports();", "-\t\t} else if (parent instanceof ClassScope) {", "+\t\tif (this.parent instanceof CompilationUnitScope) {", "+\t\t\tif (((CompilationUnitScope) this.parent).imports == null)", "+\t\t\t\t ((CompilationUnitScope) this.parent).checkAndSetImports();", "+\t\t} else if (this.parent instanceof ClassScope) {", "-\t\t\t ((ClassScope) parent).connectTypeHierarchyWithoutMembers();", "+\t\t\t ((ClassScope) this.parent).connectTypeHierarchyWithoutMembers();", "-\t\tSourceTypeBinding sourceType = referenceContext.binding;", "+\t\tSourceTypeBinding sourceType = this.referenceContext.binding;", "-\t\tnoProblems &= connectTypeVariables(referenceContext.typeParameters, false);", "+\t\tnoProblems &= connectTypeVariables(this.referenceContext.typeParameters, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b7326750019fd17c7e73d453a89d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "14f89ca9b18a3480429e3f25bc68dd79b7e9f0db", "commitAfterChange": "eb21ce31e87e64ed6c3b487b0fe31d2556ab8015", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected IType resolveType(char[] packageName, char[] typeName, int acceptFlags)", "signatureAfterChange": " protected IType resolveType(char[] packageName, char[] typeName, int acceptFlags)", "diff": ["-\tif (fCodeResolve instanceof CompilationUnit && ((CompilationUnit)fCodeResolve).isWorkingCopy()) {", "-\t\tCompilationUnit wc = (CompilationUnit) fCodeResolve;", "+\tif (this.openable instanceof CompilationUnit && ((CompilationUnit)this.openable).isWorkingCopy()) {", "+\t\tCompilationUnit wc = (CompilationUnit) this.openable;", "-\t\tIPackageFragment[] pkgs = fNameLookup.findPackageFragments(", "+\t\tIPackageFragment[] pkgs = this.nameLookup.findPackageFragments(", "-\t\t\ttype= fNameLookup.findType(new String(typeName), pkgs[i], false, acceptFlags);", "+\t\t\ttype= this.nameLookup.findType(new String(typeName), pkgs[i], false, acceptFlags);", "-\t\t\tif (fCodeResolve != null && fCodeResolve.getParent().getElementName().equals(pName)) {", "+\t\t\tif (this.openable != null && this.openable.getParent().getElementName().equals(pName)) {", "-\t\t\t\t\tArrayList list = ((JavaElement)fCodeResolve).getChildrenOfType(IJavaElement.TYPE);", "+\t\t\t\t\tArrayList list = this.openable.getChildrenOfType(IJavaElement.TYPE);"]}], "num": 40914}
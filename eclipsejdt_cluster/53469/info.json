{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a38ef4d8815647010907cc19c1d151c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13b0c06108b86800e48c45a502d25a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "66645ff7b2e7900a6e51de489fc3a747bdbf1458", "commitAfterChange": "a24bdada3de440570b8b103bca0325b799f298f1", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprotected void checkCompilerLog(String[] testFiles, Requestor requestor,  \t\t\tString platformIndependantExpectedLog, Throwable exception)", "signatureAfterChange": " \tprotected void checkCompilerLog(String[] testFiles, Requestor requestor,  \t\t\tString platformIndependantExpectedLog, Throwable exception)", "diff": ["-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\tlogTestTitle();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t}", "+\t\t\tlogTestFiles(false, testFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "689236acfb2b085c50be5435ae684be2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testPerfAllTypes() throws CoreException", "signatureAfterChange": "  \tpublic void testPerfAllTypes() throws CoreException", "diff": ["-\t\tIType[] types = unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses();", "-\t\tint length = types.length;", "+\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "+\t\t\tIType[] types = unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses();", "+\t\t\tif (i==0) {", "+\t\t\t\tSystem.out.println(\"  - \"+INT_FORMAT.format(types.length)+\" all classes found in hierarchy.\");", "+\t\t\t}", "+\t\t}", "+\t\t\trunGc();", "-\t\t\tassertEquals(\"Unexpected classes number in hierarchy!\", length, unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses().length);", "+\t\t\tunit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses();", "-", "-\t\t// Print statistics", "-\t\tif (TESTS_COUNT == 0) {", "-\t\t\t// Print statistics", "-\t\t\tSystem.out.println(\"-------------------------------------\");", "-\t\t\tSystem.out.println(\"Type Hierarchy test statistics:\");", "-\t\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "-\t\t\tSystem.out.println(\"  - \"+intFormat.format(length)+\" all types found.\");", "-\t\t\tSystem.out.println(\"-------------------------------------\\n\");", "-\t\t}", "-\t\t"]}], "num": 53469}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af80bda30f959b144c06b5cf20708727", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca62e7ab06ac1859d17775e28468bd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "9660c735cff4b315bd70793323783a0cac61cb62", "commitAfterChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration parse(char[] source, NodeSearcher nodeSearcher, Map settings)", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration parse(char[] source, NodeSearcher nodeSearcher, Map settings)", "diff": ["-\t\t\t\t", "+\t\t", "+\t\tint searchPosition = nodeSearcher.position;", "+\t\tif (searchPosition < 0 || searchPosition > source.length) {", "+\t\t\t// the position is out of range. There is no need to search for a node.", "+ \t\t\treturn compilationUnitDeclaration;", "+\t\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd7d121b955dc6399eb3aab4015d26cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "9660c735cff4b315bd70793323783a0cac61cb62", "commitAfterChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t", "-\t\t\tunit.traverse(nodeSearcher, unit.scope);", "-\t\t\t", "-\t\t\tAstNode node = nodeSearcher.found;", "-\t\t\t", "- \t\t\tif (node != null) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration enclosingTypeDeclaration = nodeSearcher.enclosingType;", "-  \t\t\t\tif (node instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\t((AbstractMethodDeclaration)node).parseStatements(parser, unit);", "- \t\t\t\t} else if (enclosingTypeDeclaration != null) {", "-\t\t\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "-\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(parser, enclosingTypeDeclaration, unit);", "- \t\t\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {  \t\t\t\t\t", "-\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)node).parseMethod(parser, unit);", "-\t\t\t\t\t} \t\t\t\t", "- \t\t\t\t}", "- \t\t\t}", "+", "+\t\t\tint searchPosition = nodeSearcher.position;", "+\t\t\tif (searchPosition >= 0 && searchPosition <= compilationUnit.getContents().length) {", "+\t\t\t\tunit.traverse(nodeSearcher, unit.scope);", "+\t\t\t\t", "+\t\t\t\tAstNode node = nodeSearcher.found;", "+\t\t\t\t", "+\t \t\t\tif (node != null) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration enclosingTypeDeclaration = nodeSearcher.enclosingType;", "+\t  \t\t\t\tif (node instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\t\t((AbstractMethodDeclaration)node).parseStatements(parser, unit);", "+\t \t\t\t\t} else if (enclosingTypeDeclaration != null) {", "+\t\t\t\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(parser, enclosingTypeDeclaration, unit);", "+\t \t\t\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {  \t\t\t\t\t", "+\t\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)node).parseMethod(parser, unit);", "+\t\t\t\t\t\t} \t\t\t\t", "+\t \t\t\t\t}", "+\t \t\t\t}", "+\t\t\t}"]}], "num": 48563}
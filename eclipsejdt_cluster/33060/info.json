{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6db31fb181fd24d2e4377c43f943c1ec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70e54f11faa1939487ebf8bb9c0069e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void createParser(JavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic void initialize(JavaProject project) throws JavaModelException", "diff": ["+\t */", "+\tpublic void initialize(JavaProject project) throws JavaModelException {", "+\t\t// create lookup environment", "+\t\tCompilerOptions options = new CompilerOptions(project.getOptions(true));", "+\t\tProblemReporter problemReporter =", "+\t\t\tnew ProblemReporter(", "+\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(),", "+\t\t\t\toptions,", "+\t\t\t\tnew DefaultProblemFactory());", "+\t\tthis.lookupEnvironment =", "+\t\t\tnew LookupEnvironment(this, options, problemReporter, this.nameEnvironment);", "+\t\t\t", "+\t\t// create parser", "+\t\tthis.parser = new MatchLocatorParser(problemReporter, options.sourceLevel >= CompilerOptions.JDK1_4);", "+\t\t", "+\t\t// reset parsed units (they could hold onto obsolete bindings: see bug 16052)", "+\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(project.getPackageFragmentRoots());", "+\t\tfor (int i = 0, length = openables.length; i < length; i++) {", "+\t\t\tMatchingOpenable matchingOpenable = openables[i];", "+\t\t\tmatchingOpenable.reset();", "+\t\t}", "+\t\tthis.parsedUnits = new HashtableOfObject(10);", "+\t\t", "+\t\t// remember project's name lookup", "+\t\tthis.nameLookup = project.getNameLookup();", "+\t}", "-\t */", "-\tpublic void createParser(JavaProject project) throws JavaModelException {", "-\t\t// cleaup and recreate file name environment", "-\t\tif (this.nameEnvironment != null) {", "-\t\t\tthis.nameEnvironment.cleanup();", "-\t\t}", "-\t\tthis.nameEnvironment = this.getNameEnvironment(project);", "-\t\t", "-\t\t// create lookup environment", "-\t\tCompilerOptions options = new CompilerOptions(project.getOptions(true));", "-\t\tProblemReporter problemReporter =", "-\t\t\tnew ProblemReporter(", "-\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(),", "-\t\t\t\toptions,", "-\t\t\t\tnew DefaultProblemFactory());", "-\t\tthis.lookupEnvironment =", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, this.nameEnvironment);", "-\t\t\t", "-\t\t// create parser", "-\t\tthis.parser = new MatchLocatorParser(problemReporter, options.sourceLevel >= CompilerOptions.JDK1_4);", "-\t\t", "-\t\t// reset parsed units (they could hold onto obsolete bindings: see bug 16052)", "-\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(project.getPackageFragmentRoots());", "-\t\tfor (int i = 0, length = openables.length; i < length; i++) {", "-\t\t\tMatchingOpenable matchingOpenable = openables[i];", "-\t\t\tmatchingOpenable.reset();", "-\t\t}", "-\t\tthis.parsedUnits = new HashtableOfObject(10);", "-\t\t", "-\t\t// remember project's name lookup", "-\t\tthis.nameLookup = project.getNameLookup();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a01d354a07d3c54f47bd10cfdca455e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void initializeNameEnvironment(JavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic void initialize(JavaProject project) throws JavaModelException", "diff": ["+\t\tinitialize(project, NO_POTENTIAL_MATH);", "+\t}", "-\tpublic void initializeNameEnvironment(JavaProject project) throws JavaModelException {", "-\t\t// cleanup and recreate file name environment", "-\t\tif (this.nameEnvironment != null) {", "-\t\t\tthis.nameEnvironment.cleanup();", "-\t\tthis.nameEnvironment = this.getNameEnvironment(project);"]}], "num": 33060}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6ce56d7a282dad6f0332fa5539e2e1c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "161149c71d1ced9166876fb2122e0c11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "71a275481ee791156c9c6fec0b9bd06093f493de", "commitAfterChange": "8dc010bba69ed9b99b565d084a48a987fc988a23", "methodNumberBeforeChange": 786, "methodNumberAfterChange": 786, "signatureBeforeChange": "  \tpublic void testNodeTypeConstants()", "signatureAfterChange": "  \tpublic void testNodeTypeConstants()", "diff": ["-\t\tassertTrue(ASTNode.ANONYMOUS_CLASS_DECLARATION == 1);", "-\t\tassertTrue(ASTNode.ARRAY_ACCESS == 2);", "-\t\tassertTrue(ASTNode.ARRAY_CREATION == 3);", "-\t\tassertTrue(ASTNode.ARRAY_INITIALIZER == 4);", "-\t\tassertTrue(ASTNode.ARRAY_TYPE == 5);", "-\t\tassertTrue(ASTNode.ASSERT_STATEMENT == 6);", "-\t\tassertTrue(ASTNode.ASSIGNMENT == 7);", "-\t\tassertTrue(ASTNode.BLOCK == 8);", "-\t\tassertTrue(ASTNode.BOOLEAN_LITERAL == 9);", "-\t\tassertTrue(ASTNode.BREAK_STATEMENT == 10);", "-\t\tassertTrue(ASTNode.CAST_EXPRESSION == 11);", "-\t\tassertTrue(ASTNode.CATCH_CLAUSE == 12);", "-\t\tassertTrue(ASTNode.CHARACTER_LITERAL == 13);", "-\t\tassertTrue(ASTNode.CLASS_INSTANCE_CREATION == 14);", "-\t\tassertTrue(ASTNode.COMPILATION_UNIT == 15);", "-\t\tassertTrue(ASTNode.CONDITIONAL_EXPRESSION == 16);", "-\t\tassertTrue(ASTNode.CONSTRUCTOR_INVOCATION == 17);", "-\t\tassertTrue(ASTNode.CONTINUE_STATEMENT == 18);", "-\t\tassertTrue(ASTNode.DO_STATEMENT == 19);", "-\t\tassertTrue(ASTNode.EMPTY_STATEMENT == 20);", "-\t\tassertTrue(ASTNode.EXPRESSION_STATEMENT == 21);", "-\t\tassertTrue(ASTNode.FIELD_ACCESS == 22);", "-\t\tassertTrue(ASTNode.FIELD_DECLARATION == 23);", "-\t\tassertTrue(ASTNode.FOR_STATEMENT == 24);", "-\t\tassertTrue(ASTNode.IF_STATEMENT == 25);", "-\t\tassertTrue(ASTNode.IMPORT_DECLARATION == 26);", "-\t\tassertTrue(ASTNode.INFIX_EXPRESSION == 27);", "-\t\tassertTrue(ASTNode.INITIALIZER == 28);", "-\t\tassertTrue(ASTNode.JAVADOC == 29);", "-\t\tassertTrue(ASTNode.LABELED_STATEMENT == 30);", "-\t\tassertTrue(ASTNode.METHOD_DECLARATION == 31);", "-\t\tassertTrue(ASTNode.METHOD_INVOCATION == 32);", "-\t\tassertTrue(ASTNode.NULL_LITERAL == 33);", "-\t\tassertTrue(ASTNode.NUMBER_LITERAL == 34);", "-\t\tassertTrue(ASTNode.PACKAGE_DECLARATION == 35);", "-\t\tassertTrue(ASTNode.PARENTHESIZED_EXPRESSION == 36);", "-\t\tassertTrue(ASTNode.POSTFIX_EXPRESSION == 37);", "-\t\tassertTrue(ASTNode.PREFIX_EXPRESSION == 38);", "-\t\tassertTrue(ASTNode.PRIMITIVE_TYPE == 39);", "-\t\tassertTrue(ASTNode.QUALIFIED_NAME == 40);", "-\t\tassertTrue(ASTNode.RETURN_STATEMENT == 41);", "-\t\tassertTrue(ASTNode.SIMPLE_NAME == 42);", "-\t\tassertTrue(ASTNode.SIMPLE_TYPE == 43);", "-\t\tassertTrue(ASTNode.SINGLE_VARIABLE_DECLARATION == 44);", "-\t\tassertTrue(ASTNode.STRING_LITERAL == 45);", "-\t\tassertTrue(ASTNode.SUPER_CONSTRUCTOR_INVOCATION == 46);", "-\t\tassertTrue(ASTNode.SUPER_FIELD_ACCESS == 47);", "-\t\tassertTrue(ASTNode.SUPER_METHOD_INVOCATION == 48);", "-\t\tassertTrue(ASTNode.SWITCH_CASE == 49);", "-\t\tassertTrue(ASTNode.SWITCH_STATEMENT == 50);", "-\t\tassertTrue(ASTNode.SYNCHRONIZED_STATEMENT == 51);", "-\t\tassertTrue(ASTNode.THIS_EXPRESSION == 52);", "-\t\tassertTrue(ASTNode.THROW_STATEMENT == 53);", "-\t\tassertTrue(ASTNode.TRY_STATEMENT == 54);", "-\t\tassertTrue(ASTNode.TYPE_DECLARATION == 55);", "-\t\tassertTrue(ASTNode.TYPE_DECLARATION_STATEMENT == 56);", "-\t\tassertTrue(ASTNode.TYPE_LITERAL == 57);", "-\t\tassertTrue(ASTNode.VARIABLE_DECLARATION_EXPRESSION == 58);", "-\t\tassertTrue(ASTNode.VARIABLE_DECLARATION_FRAGMENT == 59);", "-\t\tassertTrue(ASTNode.VARIABLE_DECLARATION_STATEMENT == 60);", "-\t\tassertTrue(ASTNode.WHILE_STATEMENT == 61);", "-\t\tassertTrue(ASTNode.INSTANCEOF_EXPRESSION == 62);", "-\t\tassertTrue(ASTNode.LINE_COMMENT == 63);", "-\t\tassertTrue(ASTNode.BLOCK_COMMENT == 64);", "-\t\tassertTrue(ASTNode.TAG_ELEMENT == 65);", "-\t\tassertTrue(ASTNode.TEXT_ELEMENT == 66);", "-\t\tassertTrue(ASTNode.MEMBER_REF == 67);", "-\t\tassertTrue(ASTNode.METHOD_REF == 68);", "-\t\tassertTrue(ASTNode.METHOD_REF_PARAMETER == 69);", "-\t\tassertTrue(ASTNode.ENHANCED_FOR_STATEMENT == 70);", "-\t\tassertTrue(ASTNode.ENUM_DECLARATION == 71);", "-\t\tassertTrue(ASTNode.ENUM_CONSTANT_DECLARATION == 72);", "-\t\tassertTrue(ASTNode.TYPE_PARAMETER == 73);", "-\t\tassertTrue(ASTNode.PARAMETERIZED_TYPE == 74);", "-\t\tassertTrue(ASTNode.QUALIFIED_TYPE == 75);", "-\t\tassertTrue(ASTNode.WILDCARD_TYPE == 76);", "-\t\tassertTrue(ASTNode.NORMAL_ANNOTATION == 77);", "-\t\tassertTrue(ASTNode.MARKER_ANNOTATION == 78);", "-\t\tassertTrue(ASTNode.SINGLE_MEMBER_ANNOTATION == 79);", "-\t\tassertTrue(ASTNode.MEMBER_VALUE_PAIR == 80);", "-\t\tassertTrue(ASTNode.ANNOTATION_TYPE_DECLARATION == 81);", "-\t\tassertTrue(ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION == 82);", "-\t\tassertTrue(ASTNode.MODIFIER == 83);", "+\t\tassertSame(ASTNode.ANONYMOUS_CLASS_DECLARATION, 1);", "+\t\tassertSame(ASTNode.ARRAY_ACCESS, 2);", "+\t\tassertSame(ASTNode.ARRAY_CREATION, 3);", "+\t\tassertSame(ASTNode.ARRAY_INITIALIZER, 4);", "+\t\tassertSame(ASTNode.ARRAY_TYPE, 5);", "+\t\tassertSame(ASTNode.ASSERT_STATEMENT, 6);", "+\t\tassertSame(ASTNode.ASSIGNMENT, 7);", "+\t\tassertSame(ASTNode.BLOCK, 8);", "+\t\tassertSame(ASTNode.BOOLEAN_LITERAL, 9);", "+\t\tassertSame(ASTNode.BREAK_STATEMENT, 10);", "+\t\tassertSame(ASTNode.CAST_EXPRESSION, 11);", "+\t\tassertSame(ASTNode.CATCH_CLAUSE, 12);", "+\t\tassertSame(ASTNode.CHARACTER_LITERAL, 13);", "+\t\tassertSame(ASTNode.CLASS_INSTANCE_CREATION, 14);", "+\t\tassertSame(ASTNode.COMPILATION_UNIT, 15);", "+\t\tassertSame(ASTNode.CONDITIONAL_EXPRESSION, 16);", "+\t\tassertSame(ASTNode.CONSTRUCTOR_INVOCATION, 17);", "+\t\tassertSame(ASTNode.CONTINUE_STATEMENT, 18);", "+\t\tassertSame(ASTNode.DO_STATEMENT, 19);", "+\t\tassertSame(ASTNode.EMPTY_STATEMENT, 20);", "+\t\tassertSame(ASTNode.EXPRESSION_STATEMENT, 21);", "+\t\tassertSame(ASTNode.FIELD_ACCESS, 22);", "+\t\tassertSame(ASTNode.FIELD_DECLARATION, 23);", "+\t\tassertSame(ASTNode.FOR_STATEMENT, 24);", "+\t\tassertSame(ASTNode.IF_STATEMENT, 25);", "+\t\tassertSame(ASTNode.IMPORT_DECLARATION, 26);", "+\t\tassertSame(ASTNode.INFIX_EXPRESSION, 27);", "+\t\tassertSame(ASTNode.INITIALIZER, 28);", "+\t\tassertSame(ASTNode.JAVADOC, 29);", "+\t\tassertSame(ASTNode.LABELED_STATEMENT, 30);", "+\t\tassertSame(ASTNode.METHOD_DECLARATION, 31);", "+\t\tassertSame(ASTNode.METHOD_INVOCATION, 32);", "+\t\tassertSame(ASTNode.NULL_LITERAL, 33);", "+\t\tassertSame(ASTNode.NUMBER_LITERAL, 34);", "+\t\tassertSame(ASTNode.PACKAGE_DECLARATION, 35);", "+\t\tassertSame(ASTNode.PARENTHESIZED_EXPRESSION, 36);", "+\t\tassertSame(ASTNode.POSTFIX_EXPRESSION, 37);", "+\t\tassertSame(ASTNode.PREFIX_EXPRESSION, 38);", "+\t\tassertSame(ASTNode.PRIMITIVE_TYPE, 39);", "+\t\tassertSame(ASTNode.QUALIFIED_NAME, 40);", "+\t\tassertSame(ASTNode.RETURN_STATEMENT, 41);", "+\t\tassertSame(ASTNode.SIMPLE_NAME, 42);", "+\t\tassertSame(ASTNode.SIMPLE_TYPE, 43);", "+\t\tassertSame(ASTNode.SINGLE_VARIABLE_DECLARATION, 44);", "+\t\tassertSame(ASTNode.STRING_LITERAL, 45);", "+\t\tassertSame(ASTNode.SUPER_CONSTRUCTOR_INVOCATION, 46);", "+\t\tassertSame(ASTNode.SUPER_FIELD_ACCESS, 47);", "+\t\tassertSame(ASTNode.SUPER_METHOD_INVOCATION, 48);", "+\t\tassertSame(ASTNode.SWITCH_CASE, 49);", "+\t\tassertSame(ASTNode.SWITCH_STATEMENT, 50);", "+\t\tassertSame(ASTNode.SYNCHRONIZED_STATEMENT, 51);", "+\t\tassertSame(ASTNode.THIS_EXPRESSION, 52);", "+\t\tassertSame(ASTNode.THROW_STATEMENT, 53);", "+\t\tassertSame(ASTNode.TRY_STATEMENT, 54);", "+\t\tassertSame(ASTNode.TYPE_DECLARATION, 55);", "+\t\tassertSame(ASTNode.TYPE_DECLARATION_STATEMENT, 56);", "+\t\tassertSame(ASTNode.TYPE_LITERAL, 57);", "+\t\tassertSame(ASTNode.VARIABLE_DECLARATION_EXPRESSION, 58);", "+\t\tassertSame(ASTNode.VARIABLE_DECLARATION_FRAGMENT, 59);", "+\t\tassertSame(ASTNode.VARIABLE_DECLARATION_STATEMENT, 60);", "+\t\tassertSame(ASTNode.WHILE_STATEMENT, 61);", "+\t\tassertSame(ASTNode.INSTANCEOF_EXPRESSION, 62);", "+\t\tassertSame(ASTNode.LINE_COMMENT, 63);", "+\t\tassertSame(ASTNode.BLOCK_COMMENT, 64);", "+\t\tassertSame(ASTNode.TAG_ELEMENT, 65);", "+\t\tassertSame(ASTNode.TEXT_ELEMENT, 66);", "+\t\tassertSame(ASTNode.MEMBER_REF, 67);", "+\t\tassertSame(ASTNode.METHOD_REF, 68);", "+\t\tassertSame(ASTNode.METHOD_REF_PARAMETER, 69);", "+\t\tassertSame(ASTNode.ENHANCED_FOR_STATEMENT, 70);", "+\t\tassertSame(ASTNode.ENUM_DECLARATION, 71);", "+\t\tassertSame(ASTNode.ENUM_CONSTANT_DECLARATION, 72);", "+\t\tassertSame(ASTNode.TYPE_PARAMETER, 73);", "+\t\tassertSame(ASTNode.PARAMETERIZED_TYPE, 74);", "+\t\tassertSame(ASTNode.QUALIFIED_TYPE, 75);", "+\t\tassertSame(ASTNode.WILDCARD_TYPE, 76);", "+\t\tassertSame(ASTNode.NORMAL_ANNOTATION, 77);", "+\t\tassertSame(ASTNode.MARKER_ANNOTATION, 78);", "+\t\tassertSame(ASTNode.SINGLE_MEMBER_ANNOTATION, 79);", "+\t\tassertSame(ASTNode.MEMBER_VALUE_PAIR, 80);", "+\t\tassertSame(ASTNode.ANNOTATION_TYPE_DECLARATION, 81);", "+\t\tassertSame(ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION, 82);", "+\t\tassertSame(ASTNode.MODIFIER, 83);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad9bb3caa9766be2836375e44d0bd1b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, Scope scope, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "diff": ["- */", "-protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, Scope scope, int accuracy, MatchLocator locator) throws CoreException {", "-\tif (scope == null || (scope.kind != Scope.BLOCK_SCOPE && scope.kind != Scope.METHOD_SCOPE)) {", "-\t\tmatchReportReference(reference, element, elementBinding, accuracy, locator);", "-\t\treturn;", "-\t}", "-\t", "-\t// Look if some block scope local variable declarations include reference start position", "-\tBlockScope blockScope = (BlockScope) scope;", "-\tLocalDeclaration[] localDeclarations = blockScope.findLocalVariableDeclarations(reference.sourceStart);", "-\tIJavaElement localElement = null;", "-\tIJavaElement[] otherElements = null;", "-", "-\t// Some local variable declaration are matching", "-\tif (localDeclarations != null) {", "-\t\tint length = localDeclarations.length;", "-", "-\t\t// Set local element to first matching local declaration", "-\t\tint idx = 0;", "-\t\tfor (; idx<length; idx++) {", "-\t\t\tif (localDeclarations[idx] == null) break;", "-\t\t\tif (reference.sourceStart == localDeclarations[idx].declarationSourceStart) {", "-\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx], element);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (idx>0 && localDeclarations[idx].sourceStart > reference.sourceStart) {", "-\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx-1], element);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\tif (localElement == null && idx > 0) {", "-\t\t\tif (reference.sourceEnd < localDeclarations[idx-1].declarationEnd) {", "-\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx-1], element);", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// Store other local variable declarations in other elements", "-\t\tint size = 0;", "-\t\tfor (int j=1; j<length; j++) {", "-\t\t\tif (localDeclarations[j] == null) break;", "-\t\t\tif (reference.sourceStart == localDeclarations[j].declarationSourceStart) {", "-\t\t\t\tif (otherElements == null) {", "-\t\t\t\t\totherElements = new IJavaElement[length-j];", "-\t\t\t\t}", "-\t\t\t\totherElements[size++] = locator.createHandle(localDeclarations[j], element);", "-\t\t\t}", "-\t\t}", "-\t\tif (size > 0 && size != (length-1)) {", "-\t\t\tSystem.arraycopy(otherElements, 0, otherElements = new IJavaElement[size], 0, size);", "-\t\t}", "-\t}", "-\t", "-\t// Report match with local and other elements if any", "-\tmatchReportReference(reference, element, localElement, otherElements, elementBinding, accuracy, locator);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e45f4e3332074e92a9c5ff6ba5059270", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8bd987839355c299213c95f3874a2e3574283d9c", "commitAfterChange": "76b6723dbe61d0b9874754d0d6572d1a4d8c0cbc", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isInDescription();", "-\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isInParamTag();", "-\t\tif (headerLine) firstColumn++;", "-\t\tStringBuffer indentationBuffer = null;", "-\t\tif (indentRootTags) {", "-\t\t\tint indentLevel = this.indentationLevel;", "-\t\t\tint indentations = this.numberOfIndentations;", "-\t\t\tthis.numberOfIndentations += (BLOCK_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "-\t\t\tthis.indentationLevel = this.numberOfIndentations * this.indentationSize;", "-\t\t\tint currentColumn = this.column;", "-\t\t\tthis.column = firstColumn;", "-\t\t\tif (indentParamTag) {", "-\t\t\t\tthis.indentationLevel += this.indentationSize;", "-\t\t\t\tthis.numberOfIndentations++;", "-\t\t\t}", "-\t\t\tprintIndentationIfNecessary(indentationBuffer = new StringBuffer());", "-\t\t\tif (needIndentation) {", "-\t\t\t\tthis.column = firstColumn;", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t}", "-\t\t\tfirstColumn = this.indentationLevel + 1;", "-\t\t\tthis.column = currentColumn < firstColumn ? firstColumn : currentColumn;", "-\t\t\tthis.indentationLevel = indentLevel;", "-\t\t\tthis.numberOfIndentations = indentations;", "-\t\t} else if (this.column < firstColumn) {", "+\t\tint maxColumn = this.formatter.preferences.comment_line_length + 1;", "+\t\tif (headerLine) {", "+\t\t\tfirstColumn++;", "+\t\t\tmaxColumn++;", "+\t\t}", "+\t\tif (needIndentation && this.commentIndentation != null) {", "+\t\t\tbuffer.append(this.commentIndentation);", "+\t    \tthis.column += this.commentIndentation.length();", "+\t\t}", "+\t\tif (this.column < firstColumn) {", "-\t\tint maxColumn = this.formatter.preferences.comment_line_length + 1;", "+\t\tString newLineString = null;", "-\t\t\tboolean openedString  =false;", "-\t\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || (this.scanner.startPosition == textStart && this.column > firstColumn && !firstText)) && !isHtmlTag;", "-\t\t\t\t\tString msg = iie.getMessage();", "-\t\t\t\t\tif (msg == Scanner.INVALID_CHARACTER_CONSTANT) {", "-\t\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\t\ttokensBuffer.append(' ');", "+\t\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || this.needSpace) && !isHtmlTag && !textOnNewLine;", "+\t\t    \t\tif (insertSpace) {", "+\t\t    \t\t\ttokensBuffer.append(' ');", "+\t\t    \t\t}", "+\t\t\t\t\tint restart = this.scanner.startPosition;", "+\t\t\t\t\tthis.scanner.resetTo(restart, textEnd);", "+\t\t    \t\tchar ch = (char) this.scanner.getNextChar();", "+\t\t\t\t\twhile (!this.scanner.atEnd() && !ScannerHelper.isWhitespace(ch)) {", "+\t\t\t\t\t\ttokensBuffer.append(ch);", "+\t\t\t\t\t\tif (this.scanner.atEnd()) {", "+\t\t\t\t\t\t\tpreviousToken = TerminalTokens.TokenNameEOF;", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\ttokensBuffer.append('\\'');", "-\t\t\t\t\t} else if (msg == Scanner.INVALID_CHAR_IN_STRING) {", "-\t\t\t\t\t\tif (openedString) {", "-\t\t\t\t\t\t\topenedString = false;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\topenedString = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttokensBuffer.append('\"');", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// skip failure", "+\t\t\t\t\t\trestart = this.scanner.currentPosition;", "+\t\t\t\t\t\tch = (char) this.scanner.getNextChar();", "-\t\t\t\t\t// Need to retrieve correct position", "-\t\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, textEnd);", "-\t\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t\t\tpreviousToken = 1;", "+\t\t\t\t\t// restart at the beginning of the whitespace", "+\t\t\t\t\tif (this.scanner.atEnd()) {", "+\t\t\t\t\t\ttokensBuffer.append(ch);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.scanner.resetTo(restart, textEnd);", "+\t\t\t\t\t}", "-\t    \t\tboolean insertSpace = previousToken == TerminalTokens.TokenNameWHITESPACE || (tokenStart == textStart && this.column > firstColumn && !(firstText || isHtmlTag));", "+\t    \t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - tokenStart;", "+\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || this.needSpace) && !textOnNewLine;", "+\t\t\t\tString tokensBufferString = tokensBuffer.toString().trim();", "-\t\t\t\t\t\tpreviousToken = token;", "-\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\t\tboolean shouldSplit = (this.column+tokensBufferLength) > maxColumn // the max length is reached", "+\t\t\t\t\t\t\t\t&& !isHtmlTag", "+\t\t\t\t\t\t\t\t&& (insertSpace || tokensBufferLength > 1) // allow to split at the beginning only when starting with an identifier or a token with a length > 1", "+\t\t\t\t\t\t\t\t&& tokensBufferString.charAt(0) != '@'; // avoid to split just before a '@'", "+\t\t\t\t\t\t\tif (shouldSplit) {", "+\t\t\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\t    \tthis.column = 1;", "+\t\t\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "+\t\t\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\t\t\t\t\t\tif (this.commentIndentation != null) {", "+\t\t\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t\t    \tthis.column += this.commentIndentation.length();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t    \t\tfirstColumn = this.column;", "+\t\t\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.column = firstColumn;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbuffer.append(newLineString);", "+\t\t\t\t\t\t\t\tbuffer.append(tokensBufferString);", "+\t\t\t\t\t\t\t\tthis.column += tokensBufferString.length();", "+\t\t\t\t\t\t\t\tif (headerLine) {", "+\t\t\t\t\t\t\t\t\tfirstColumn--;", "+\t\t\t\t\t\t\t\t\tmaxColumn--;", "+\t\t\t\t\t\t\t\t\theaderLine = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tpreviousToken = token;", "-\t    \t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - tokenStart;", "-\t    \t\tif (headerLine) {", "-\t    \t\t\t// special case when text is on the same line of the javadoc's header", "-\t    \t\t\tif (lastColumn > maxColumn)  {", "-\t    \t\t\t\tlastColumn--; // new line gives an extra character", "-\t    \t\t\t\tthis.lastNumberOfNewLines++; // the javadoc will become multi lines", "-\t    \t\t\t\tthis.line++;", "-\t    \t\t\t}", "-\t    \t\t}", "-\t\t\t\tif (lastColumn > maxColumn && token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@')) {", "+\t\t\t\tboolean shouldSplit = lastColumn > maxColumn // the max length is reached", "+\t\t\t\t\t&& (!isHtmlTag || previousToken == -1) // not an html tag or just at the beginning of it", "+\t\t\t\t\t&& token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@'); // avoid to split just before a '@'", "+\t\t\t\tif (shouldSplit) {", "-\t\t\t\t\tif (!isHtmlTag && tokensBufferLength > 0 && (firstColumn+tokensBufferLength+tokenLength) >= maxColumn) {", "+\t\t\t\t\tif ((tokensBufferLength > 0 || tokenLength < maxColumn) && !isHtmlTag && tokensBufferLength > 0 && (firstColumn+tokensBufferLength+tokenLength) >= maxColumn) {", "-\t\t\t\t\tif (!textOnNewLine) {", "-\t\t\t\t\t\tif (headerLine && lastColumn == this.column) {", "-\t\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "-\t\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\tif ((tokensBufferLength > 0 || tokenLength < maxColumn) && (!textOnNewLine || !firstText)) {", "+\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t    \tthis.column = 1;", "+\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "+\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\t\t\t\tif (this.commentIndentation != null) {", "+\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t    \tthis.column += this.commentIndentation.length();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t    \t\tfirstColumn = this.column;", "+\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.column = firstColumn;", "-\t\t\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t\t\t    \tthis.column = 1;", "-\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t    \tthis.column = headerLine ? firstColumn-1 : firstColumn;", "-\t\t\t\t    \tif (indentationBuffer != null) {", "-\t\t\t\t    \t\tbuffer.append(indentationBuffer);", "-\t\t\t\t    \t}", "+\t\t\t\t\t\tbuffer.append(newLineString);", "-\t\t\t    \t\tString tokensString = tokensBuffer.toString().trim();", "+\t\t\t    \t\tString tokensString = tokensBufferString;", "+\t\t\t\t\t\tmaxColumn--;", "+    \t\t\tthis.needSpace = false;", "+    \t\t\tif (headerLine && lastColumn == maxColumn && this.scanner.atEnd()) {", "+\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\tthis.line++;", "+    \t\t\t}"]}], "num": 25205}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e4d205e199ccf2e0a928bbf1bcddfc6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ce634f0d2ead669e5ef144c4e7ed038", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": " synchronized int[] readDocumentNumbers(Object arrayOffset) throws IOException", "signatureAfterChange": " synchronized int[] readDocumentNumbers(Object arrayOffset) throws IOException", "diff": ["-\tDataInputStream stream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.indexFile), 2048));", "+\tFileInputStream stream = new FileInputStream(this.indexFile);", "-\t\tstream.skip(((Integer) arrayOffset).intValue());", "-\t\treturn readDocumentArray(stream, stream.readInt());", "+\t\tint offset = ((Integer) arrayOffset).intValue();", "+\t\tstream.skip(offset);", "+\t\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "+\t\tthis.bufferIndex = 0;", "+\t\tthis.streamEnd = -1; // unknown", "+\t\tthis.streamPos = stream.read(this.streamBuffer, 0, BUFFER_READ_SIZE) + offset;", "+\t\treturn readStreamDocumentArray(stream, readStreamInt(stream));", "+\t\tthis.streamBuffer = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e6cd9fdf7c1ad887f59faa1b8449808", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void cacheDocumentNames() throws IOException", "signatureAfterChange": " private void cacheDocumentNames() throws IOException", "diff": ["-\tDataInputStream stream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.indexFile), this.numberOfChunks > 5 ? 4096 : 2048));", "+\tif (this.numberOfChunks > 5) BUFFER_READ_SIZE <<= 1;", "+", "+\tFileInputStream stream = new FileInputStream(this.indexFile);", "-\t\tstream.skip(this.chunkOffsets[0]);", "+\t\tint offset = this.chunkOffsets[0];", "+\t\tstream.skip(offset);", "+\t\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "+\t\tthis.streamEnd = this.startOfCategoryTables;", "+\t\tint readSize = this.streamEnd - offset;", "+\t\tthis.bufferIndex = 0;", "+\t\tthis.streamPos = stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE) + offset;", "-\t} finally {", "+\t}", "+\tfinally {", "+\t\tthis.streamBuffer = null;", "+\t\tBUFFER_READ_SIZE = DEFAULT_BUFFER_SIZE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553a2786ac56f16b689b91270ac6fabe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " private synchronized String[] readAllDocumentNames() throws IOException", "signatureAfterChange": " private synchronized String[] readAllDocumentNames() throws IOException", "diff": ["-\tDataInputStream stream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.indexFile), this.numberOfChunks > 5 ? 4096 : 2048));", "+\tFileInputStream stream = new FileInputStream(this.indexFile);", "-\t\tstream.skip(this.chunkOffsets[0]);", "+\t\tint offset = this.chunkOffsets[0];", "+\t\tstream.skip(offset);", "+\t\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "+\t\tthis.streamEnd = this.startOfCategoryTables;", "+\t\tint readSize = this.streamEnd - offset;", "+\t\tthis.bufferIndex = 0;", "+\t\tthis.streamPos = stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE) + offset;", "+\t\tthis.streamBuffer = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2501184390758c09f989b926ddf9dff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "diff": ["-\t\tDataOutputStream stream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(newDiskIndex.indexFile, false), 2048));", "+\t\tFileOutputStream stream = new FileOutputStream(newDiskIndex.indexFile, false);", "+\t\t\tnewDiskIndex.streamBuffer = new byte[BUFFER_WRITE_SIZE];", "+\t\t\tnewDiskIndex.bufferIndex = 0;", "+\t\t\tnewDiskIndex.streamEnd = 0;", "-\t\t\toffsetToHeader = stream.size();", "+\t\t\toffsetToHeader = newDiskIndex.streamEnd;", "+\t\t\tif (newDiskIndex.bufferIndex > 0) {", "+\t\t\t\tstream.write(newDiskIndex.streamBuffer, 0, newDiskIndex.bufferIndex);", "+\t\t\t}", "+\t\t\tthis.streamBuffer = null;"]}], "num": 63989}
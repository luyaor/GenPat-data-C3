{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3667a4b0bec9092b2c811a74d5fd9b84", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0fa5b8d0045dc90da4c3034d352171", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "5a5d0f43790375863ed059f546377b6a1dca079c", "commitAfterChange": "c8af5e76f44ad60b89fcc109db821631c8461cdd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void outputClassFiles(CompilationResult unitResult)", "signatureAfterChange": " \tpublic void outputClassFiles(CompilationResult unitResult)", "diff": ["-    \t\t\t\tif (generateClasspathStructure) {", "-    \t\t\t\t\tif (currentDestinationPath != null) {", "-    \t\t\t\t\t\tint index = CharOperation.lastIndexOf(File.separatorChar, relativeName);", "-    \t\t\t\t\t\tFile currentFolder = new File(currentDestinationPath, relativeStringName.substring(0, index));", "-    \t\t\t\t\t\tcurrentFolder.mkdirs();", "-    \t\t\t\t\t} else {", "-        \t\t\t\t\t// create the subfolfers is necessary", "-    \t\t\t\t\t\t// need a way to retrieve the folders to create", "-        \t\t\t\t\tString path = javaFileForOutput.toUri().getPath();", "-        \t\t\t\t\tint index = path.lastIndexOf('/');", "-        \t\t\t\t\tif (index != -1) {", "-        \t\t\t\t\t\tFile file = new File(path.substring(0, index));", "-        \t\t\t\t\t\tfile.mkdirs();", "-        \t\t\t\t\t}", "-    \t\t\t\t\t}", "-    \t\t\t\t}", "+\t\t\t\t\tif (generateClasspathStructure) {", "+\t\t\t\t\t\tif (currentDestinationPath != null) {", "+\t\t\t\t\t\t\tint index = CharOperation.lastIndexOf(File.separatorChar, relativeName);", "+\t\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\t\tFile currentFolder = new File(currentDestinationPath, relativeStringName.substring(0, index));", "+\t\t\t\t\t\t\t\tcurrentFolder.mkdirs();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// create the subfolfers is necessary", "+\t\t\t\t\t\t\t// need a way to retrieve the folders to create", "+\t\t\t\t\t\t\tString path = javaFileForOutput.toUri().getPath();", "+\t\t\t\t\t\t\tint index = path.lastIndexOf('/');", "+\t\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\t\tFile file = new File(path.substring(0, index));", "+\t\t\t\t\t\t\t\tfile.mkdirs();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b6161903cbe7df230ca46177bc7b07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/compiler/tool/EclipseFileManager.java", "commitBeforeChange": "05ca87fa79cdcdbf8adddd11b0044e5bbc381076", "commitAfterChange": "1a08d829c1b17811d102043c26cfbba0a6765570", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic JavaFileObject getJavaFileForOutput(Location location, String className, Kind kind, FileObject sibling) \t\t\tthrows IOException", "signatureAfterChange": " \tpublic JavaFileObject getJavaFileForOutput(Location location, String className, Kind kind, FileObject sibling) \t\t\tthrows IOException", "diff": ["-\t\t\tthrow new IllegalArgumentException(\"Unknown location : \" + location);//$NON-NLS-1$", "+\t\t\tif (!location.equals(StandardLocation.CLASS_OUTPUT))", "+\t\t\t\tthrow new IllegalArgumentException(\"Unknown location : \" + location);//$NON-NLS-1$", "+\t\t\t// we will use either the sibling or user.dir", "+\t\t\tif (sibling != null) {", "+\t\t\t\tString normalizedFileName = normalized(className);", "+\t\t\t\tint index = normalizedFileName.lastIndexOf('/');", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tnormalizedFileName = normalizedFileName.substring(index + 1);", "+\t\t\t\t}", "+\t\t\t\tnormalizedFileName += kind.extension;", "+\t\t\t\tURI uri = sibling.toUri();", "+\t\t\t\tURI uri2 = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tString path = uri.getPath();", "+\t\t\t\t\tindex = path.lastIndexOf('/');", "+\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\tpath = path.substring(0, index + 1);", "+\t\t\t\t\t\tpath += normalizedFileName;", "+\t\t\t\t\t}", "+\t\t\t\t\turi2 = new URI(uri.getScheme(), uri.getHost(), path, uri.getFragment());", "+\t\t\t\t} catch (URISyntaxException e) {", "+\t\t\t\t\tthrow new IllegalArgumentException(\"invalid sibling\");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\treturn new EclipseFileObject(className, uri2, kind, this.charset);", "+\t\t\t} else {", "+\t\t\t\tString normalizedFileName = normalized(className);", "+\t\t\t\tint index = normalizedFileName.lastIndexOf('/');", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tnormalizedFileName = normalizedFileName.substring(index + 1);", "+\t\t\t\t}", "+\t\t\t\tnormalizedFileName += kind.extension;", "+\t\t\t\tFile f = new File(System.getProperty(\"user.dir\"), normalizedFileName);//$NON-NLS-1$", "+\t\t\t\treturn new EclipseFileObject(className, f.toURI(), kind, this.charset);", "+\t\t\t}"]}], "num": 32421}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7aa5107d928b4d4f7b9d2eb4930f1bf2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27700c5552d29e9f052fa3c237add48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void recordContinueFrom(FlowInfo flowInfo)", "signatureAfterChange": "  public void recordContinueFrom(FlowContext innerFlowContext, FlowInfo flowInfo)", "diff": ["-\tpublic void recordContinueFrom(FlowInfo flowInfo) {", "-", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\tif (initsOnContinue == FlowInfo.DEAD_END) {", "-\t\t\tinitsOnContinue = flowInfo.copy().unconditionalInits();", "-\t\t} else {", "-\t\t\tinitsOnContinue = initsOnContinue.mergedWith(flowInfo.copy().unconditionalInits());", "-\t\t}", "+public void recordContinueFrom(FlowContext innerFlowContext, FlowInfo flowInfo) {", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "+\tif ((initsOnContinue.tagBits & FlowInfo.UNREACHABLE) == 0) {", "+\t\tinitsOnContinue = initsOnContinue.", "+\t\t\tmergedWith(flowInfo.unconditionalInitsWithoutSideEffect());", "+\t} ", "+\telse {", "+\t\tinitsOnContinue = flowInfo.unconditionalCopy();", "+\tFlowContext inner = innerFlowContext;", "+\twhile (inner != this && !(inner instanceof LoopingFlowContext)) {", "+\t\tinner = inner.parent;", "+\t}", "+\tif (inner == this) {", "+\t\tthis.upstreamNullFlowInfo.", "+\t\t\taddPotentialNullInfoFrom(", "+\t\t\t\tflowInfo.unconditionalInitsWithoutSideEffect());", "+\t}", "+\telse {", "+\t\tint length = 0;", "+\t\tif (this.innerFlowContexts == null) {", "+\t\t\tthis.innerFlowContexts = new LoopingFlowContext[5];", "+\t\t\tthis.innerFlowInfos = new UnconditionalFlowInfo[5];", "+\t\t}", "+\t\telse if (this.innerFlowContextsNb == ", "+\t\t\t\t(length = this.innerFlowContexts.length) - 1) {", "+\t\t\tSystem.arraycopy(this.innerFlowContexts, 0, ", "+\t\t\t\t(this.innerFlowContexts = new LoopingFlowContext[length + 5]), ", "+\t\t\t\t0, length);", "+\t\t\tSystem.arraycopy(this.innerFlowInfos, 0, ", "+\t\t\t\t(this.innerFlowInfos= new UnconditionalFlowInfo[length + 5]), ", "+\t\t\t\t0, length);", "+\t\t}", "+\t\tthis.innerFlowContexts[this.innerFlowContextsNb] = (LoopingFlowContext) inner;", "+\t\tthis.innerFlowInfos[this.innerFlowContextsNb++] = ", "+\t\t\tflowInfo.unconditionalInitsWithoutSideEffect();", "+\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d9faa7e6fa0385bfb302971644c807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "da5e3044bf1aa602314b19a69e01c7d30d0c61d0", "commitAfterChange": "d2a7051ad6f971a1319fef017042d09bcae83b4b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic void addElementChangedListener(IElementChangedListener listener)", "signatureAfterChange": "\r \tpublic void addElementChangedListener(IElementChangedListener listener, int eventMask)", "diff": ["-\tpublic void addElementChangedListener(IElementChangedListener listener) {\r", "-\t\tif (fElementChangedListeners.indexOf(listener) < 0) {\r", "-\t\t\tfElementChangedListeners.add(listener);\r", "+\tpublic void addElementChangedListener(IElementChangedListener listener, int eventMask) {\r", "+\t\tfor (int i = 0; i < this.elementChangedListenerCount; i++){\r", "+\t\t\tif (this.elementChangedListeners[i].equals(listener)){\r", "+\t\t\t\t\r", "+\t\t\t\t// only clone the masks, since we could be in the middle of notifications and one listener decide to change\r", "+\t\t\t\t// any event mask of another listeners (yet not notified).\r", "+\t\t\t\tint cloneLength = this.elementChangedListenerMasks.length;\r", "+\t\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, 0, this.elementChangedListenerMasks = new int[cloneLength], 0, cloneLength);\r", "+\t\t\t\tthis.elementChangedListenerMasks[i] = eventMask; // could be different\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t// may need to grow, no need to clone, since iterators will have cached original arrays and max boundary and we only add to the end.\r", "+\t\tint length;\r", "+\t\tif ((length = this.elementChangedListeners.length) == this.elementChangedListenerCount){\r", "+\t\t\tSystem.arraycopy(this.elementChangedListeners, 0, this.elementChangedListeners = new IElementChangedListener[length*2], 0, length);\r", "+\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, 0, this.elementChangedListenerMasks = new int[length*2], 0, length);\r", "+\t\t}\r", "+\t\tthis.elementChangedListeners[this.elementChangedListenerCount] = listener;\r", "+\t\tthis.elementChangedListenerMasks[this.elementChangedListenerCount] = eventMask;\r", "+\t\tthis.elementChangedListenerCount++;\r"]}], "num": 16413}
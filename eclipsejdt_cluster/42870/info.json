{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3349bcbd3346519362cb9c370f1714e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e34fcaf495ba1b5137efd07fef2f0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "5b1a9dba806424416a6f5ec8efc329e5fdace03c", "commitAfterChange": "6f37c2ba7b93e48dfb1ea5d77d4a2519799074c6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate synchronized ArrayList getFoldersToCleanUp(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  \tprivate ArrayList getFoldersToCleanUp(IProgressMonitor monitor) throws CoreException", "diff": ["-\tprivate synchronized ArrayList getFoldersToCleanUp(IProgressMonitor monitor) throws CoreException {", "+\tprivate ArrayList getFoldersToCleanUp(IProgressMonitor monitor) throws CoreException {", "-\t\tHashMap knownFolders = getFolders();", "-\t\tIterator iterator = knownFolders.entrySet().iterator();", "+\t\tMap knownFolders = getFolders();", "-\t\twhile (iterator.hasNext()) {", "-\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "-\t\t\tIPath path = (IPath) entry.getKey();", "-\t\t\tif ((roots != null && !roots.containsKey(path))", "-\t\t\t\t\t&& (sourceAttachments != null && !sourceAttachments.containsKey(path))) {", "-\t\t\t\tIFolder folder = (IFolder) entry.getValue();", "-\t\t\t\tif (folder != null) {", "-\t\t\t\t\tif (result == null)", "-\t\t\t\t\t\tresult = new ArrayList();", "-\t\t\t\t\tresult.add(folder);", "+\t\tsynchronized (knownFolders) {", "+\t\t\tIterator iterator = knownFolders.entrySet().iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "+\t\t\t\tIPath path = (IPath) entry.getKey();", "+\t\t\t\tif ((roots != null && !roots.containsKey(path))", "+\t\t\t\t\t\t&& (sourceAttachments != null && !sourceAttachments.containsKey(path))) {", "+\t\t\t\t\tIFolder folder = (IFolder) entry.getValue();", "+\t\t\t\t\tif (folder != null) {", "+\t\t\t\t\t\tif (result == null)", "+\t\t\t\t\t\t\tresult = new ArrayList();", "+\t\t\t\t\t\tresult.add(folder);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb4a3f88ce825b9a4e19b2e7569041b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "49a932a4071f1fa961e8d0ff39b16afa0b45e7a1", "commitAfterChange": "d715f393369e6cd3b0a0bcef4cf7687e9b2a89d2", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": "  \tprivate void saveNonChainingJarsCache() throws CoreException", "signatureAfterChange": "  \tprivate void saveNonChainingJarsCache() throws CoreException", "diff": ["-\t\t\tHashSet nonChainingJarsCache = getNonChainingJarsCache();", "-\t\t\tout.writeInt(nonChainingJarsCache.size());", "-\t\t\tIterator entries = nonChainingJarsCache.iterator();", "-\t\t\twhile (entries.hasNext()) {", "-\t\t\t\tIPath path = (IPath) entries.next();", "-\t\t\t\tout.writeUTF(path.toPortableString());", "+\t\t\tSet nonChainingJarsCache = getNonChainingJarsCache();", "+\t\t\tsynchronized (nonChainingJarsCache) {", "+\t\t\t\tout.writeInt(nonChainingJarsCache.size());", "+\t\t\t\tIterator entries = nonChainingJarsCache.iterator();", "+\t\t\t\twhile (entries.hasNext()) {", "+\t\t\t\t\tIPath path = (IPath) entries.next();", "+\t\t\t\t\tout.writeUTF(path.toPortableString());", "+\t\t\t\t}"]}], "num": 42870}
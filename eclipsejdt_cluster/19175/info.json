{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "235b4bbfd80cd500a868c604b3268153", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "369bc77f63cf5eac8ffdec5db4deaf66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "07f2a3d76611d11852367ea136a6272990449122", "commitAfterChange": "b51487a3e769c1faf54930e906289a243b81936a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException", "diff": ["-", "-\tif (this.useCount == 0) throw newNotPresentException(); //was destroyed", "-\t", "-\tif (monitor != null){", "-\t\tif (monitor.isCanceled()) return;", "-\t\tmonitor.beginTask(Util.bind(\"element.reconciling\"), 10); //$NON-NLS-1$", "-\t}", "-", "-\tboolean wasConsistent = isConsistent();", "-\tJavaElementDeltaBuilder deltaBuilder = null;", "-", "-\ttry {", "-\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\tif (!wasConsistent){", "-\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(this);", "-\t\t\t", "-\t\t\t// update the element infos with the content of the working copy", "-\t\t\tthis.makeConsistent(monitor);", "-\t\t\tdeltaBuilder.buildDeltas();", "-\t", "-\t\t}", "-", "-\t\tif (monitor != null) monitor.worked(2);", "-\t\t", "-\t\t// force problem detection? - if structure was consistent", "-\t\tif (forceProblemDetection && wasConsistent){", "-\t\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t", "-\t\t\tIProblemRequestor problemRequestor = this.getProblemRequestor();", "-\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "-\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\tCompilationUnitProblemFinder.process(this, problemRequestor, monitor);", "-\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// fire the deltas", "-\t\tif (deltaBuilder != null){", "-\t\t\tif ((deltaBuilder.delta != null) && (deltaBuilder.delta.getAffectedChildren().length > 0)) {", "-\t\t\t\tJavaModelManager.getJavaModelManager().", "-\t\t\t\t\tfire(deltaBuilder.delta, ElementChangedEvent.POST_RECONCILE);", "-\t\t\t}", "-\t\t}", "-\t} finally {", "-\t\tif (monitor != null) monitor.done();", "-\t}", "+\tReconcileWorkingCopyOperation op = new ReconcileWorkingCopyOperation(this, forceProblemDetection);", "+\trunOperation(op, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5068c87a38603c10838168921db0336", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java", "commitBeforeChange": "b6b8c5d56c52da04a602fb9a065023d943b4e7a7", "commitAfterChange": "f8cf1cf93993a2a964d587ccb545506c0c4fdc0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\" \t@Override \tpublic <A extends Annotation> A getAnnotation(Class<A> annotationClass)", "signatureAfterChange": "  \t@Override \tpublic <A extends Annotation> A getAnnotation(Class<A> annotationClass)", "diff": ["-\t@SuppressWarnings(\"unchecked\") // for cast of newProxyInstance() to A", "-\t\tAnnotationBinding[] annoInstances = getAnnotationBindings();", "-\t\tif( annoInstances == null || annoInstances.length == 0 || annotationClass == null ) ", "-\t\t\treturn null;", "-", "-\t\tString annoTypeName = annotationClass.getName();", "-\t\tif( annoTypeName == null ) return null;", "-\t\tannoTypeName = annoTypeName.replace('$', '.');", "-\t\tfor( AnnotationBinding annoInstance : annoInstances) {", "-\t\t\tif (annoInstance == null)", "-\t\t\t\tcontinue;", "-\t\t\tReferenceBinding binding = annoInstance.getAnnotationType();", "-\t\t\tif ( binding != null && binding.isAnnotationType() ) {", "-\t\t\t\tchar[] qName;", "-\t\t\t\tif (binding.isMemberType()) {", "-\t\t\t\t\tqName = CharOperation.concatWith(binding.enclosingType().compoundName, binding.sourceName, '.');", "-\t\t\t\t\tCharOperation.replace(qName, '$', '.');", "-\t\t\t\t} else {", "-\t\t\t\t\tqName = CharOperation.concatWith(binding.compoundName, '.');", "-\t\t\t\t}", "-\t\t\t\tif( annoTypeName.equals(new String(qName)) ){", "-\t\t\t\t\tAnnotationMirrorImpl annoMirror =", "-\t\t\t\t\t\t(AnnotationMirrorImpl)_env.getFactory().newAnnotationMirror(annoInstance);", "-\t\t\t\t\treturn (A)Proxy.newProxyInstance(annotationClass.getClassLoader(),", "-\t\t\t\t\t\t\tnew Class[]{ annotationClass }, annoMirror );", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn null; ", "+\t\treturn _env.getFactory().getAnnotation(getAnnotationBindings(), annotationClass);"]}], "num": 19175}
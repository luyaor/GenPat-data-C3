{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36f509555c438c148aa534d51d1da666", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8012997880ad313be05b2eeeb61d1bfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedTypeHierarchy.java", "commitBeforeChange": "64b2400918fa9c980503c07d6eedfc52178c580c", "commitAfterChange": "8f40b18693d984d1b3346925dd24dfb773855585", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void pruneDeadBranches(IType[] types, boolean superInRegion)", "signatureAfterChange": " private void pruneDeadBranches(IType[] types)", "diff": ["-private void pruneDeadBranches(IType[] types, boolean superInRegion) {", "+}", "+private void pruneDeadBranches(IType[] types) {", "-\t\tif (this.region.contains(type)) {", "-\t\t\tTypeVector subtypes = (TypeVector)this.typeToSubtypes.get(type);", "-\t\t\tif (subtypes != null) {", "-\t\t\t\tthis.pruneDeadBranches(subtypes.copy().elements(), true);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (superInRegion) {", "-\t\t\t\tthis.removeType(type);", "-\t\t\t} else {", "-\t\t\t\tTypeVector subtypes = (TypeVector)this.typeToSubtypes.get(type);", "-\t\t\t\tif (subtypes != null) {", "-\t\t\t\t\tthis.pruneDeadBranches(subtypes.copy().elements(), false);", "-\t\t\t\t}", "-\t\t\t\tsubtypes = (TypeVector)this.typeToSubtypes.get(type);", "-\t\t\t\tif (subtypes == null || subtypes.size == 0) {", "-\t\t\t\t\tthis.removeType(type);", "-\t\t\t\t} ", "-\t\t\t}", "+\t\tif (pruneDeadBranches(type) && !this.region.contains(type)) {", "+\t\t\tremoveType(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2057c6c8cd7dbf761e75f62f6e8972f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedTypeHierarchy.java", "commitBeforeChange": "64b2400918fa9c980503c07d6eedfc52178c580c", "commitAfterChange": "8f40b18693d984d1b3346925dd24dfb773855585", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void pruneDeadBranches(IType[] types, boolean superInRegion)", "signatureAfterChange": " private boolean pruneDeadBranches(IType type)", "diff": ["-private void pruneDeadBranches(IType[] types, boolean superInRegion) {", "+ */", "+private boolean pruneDeadBranches(IType type) {", "+\tTypeVector subtypes = (TypeVector)this.typeToSubtypes.get(type);", "+\tif (subtypes == null) return true;", "+\tpruneDeadBranches(subtypes.copy().elements());", "+\tsubtypes = (TypeVector)this.typeToSubtypes.get(type);", "+\treturn (subtypes == null || subtypes.size == 0);", "+}", "-\t\tif (this.region.contains(type)) {", "-\t\t\tTypeVector subtypes = (TypeVector)this.typeToSubtypes.get(type);", "-\t\t\tif (subtypes != null) {", "-\t\t\t\tthis.pruneDeadBranches(subtypes.copy().elements(), true);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (superInRegion) {", "-\t\t\t\tthis.removeType(type);", "-\t\t\t} else {", "-\t\t\t\tTypeVector subtypes = (TypeVector)this.typeToSubtypes.get(type);", "-\t\t\t\tif (subtypes != null) {", "-\t\t\t\t\tthis.pruneDeadBranches(subtypes.copy().elements(), false);", "-\t\t\t\t}", "-\t\t\t\tsubtypes = (TypeVector)this.typeToSubtypes.get(type);", "-\t\t\t\tif (subtypes == null || subtypes.size == 0) {", "-\t\t\t\t\tthis.removeType(type);", "-\t\t\t\t} ", "-\t\t\t}"]}], "num": 34401}
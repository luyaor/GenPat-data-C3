{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dd05857b5d2b81c048ce5751555c842", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa86acd8c4ce9b9a99844cef275f704", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "commitAfterChange": "e4a2d2b531fec7e8dfebadf46195d19caa4fd924", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["+", "+\t\t   if (method.parameters.length == argumentTypes.length) { // 70056", "+\t\t\t\tint varargIndex = method.parameters.length - 1;", "+\t\t\t\tArrayBinding varargType = (ArrayBinding) method.parameters[varargIndex];", "+\t\t\t\tTypeBinding lastArgType = argumentTypes[varargIndex];", "+\t\t\t\tif (lastArgType == NullBinding) {", "+\t\t\t\t\tif (!(varargType.leafComponentType().isBaseType() && varargType.dimensions() == 1))", "+\t\t\t\t\t\tscope.problemReporter().inexactParameterToVarargsMethod(method, invocationSite);", "+\t\t\t\t} else if (varargType.dimensions <= lastArgType.dimensions()) {", "+\t\t\t\t\tint dimensions = lastArgType.dimensions();", "+\t\t\t\t\tif (lastArgType.leafComponentType().isBaseType())", "+\t\t\t\t\t\tdimensions--;", "+\t\t\t\t\tif (varargType.dimensions < dimensions)", "+\t\t\t\t\t\tscope.problemReporter().inexactParameterToVarargsMethod(method, invocationSite);", "+\t\t\t\t\telse if (varargType.dimensions == dimensions && varargType.leafComponentType != lastArgType.leafComponentType())", "+\t\t\t\t\t\tscope.problemReporter().inexactParameterToVarargsMethod(method, invocationSite);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0014947a6e4edafc2ab72a9e54a6b6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "3e0b35975d99c7fbc1802301d4e573e4cebc360d", "commitAfterChange": "19cb53354023f68ae04bcccb8466b1b3cfbaac2b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\tint varargIndex = paramLength - 1;", "-\t\t\t\t\tArrayBinding varargType = (ArrayBinding) params[varargIndex];", "-\t\t\t\t\tTypeBinding lastArgType = argumentTypes[varargIndex];", "+\t\t\t\t\tint varargsIndex = paramLength - 1;", "+\t\t\t\t\tArrayBinding varargsType = (ArrayBinding) params[varargsIndex];", "+\t\t\t\t\tTypeBinding lastArgType = argumentTypes[varargsIndex];", "+\t\t\t\t\tint dimensions;", "-\t\t\t\t\t\tif (!(varargType.leafComponentType().isBaseType() && varargType.dimensions() == 1))", "+\t\t\t\t\t\tif (!(varargsType.leafComponentType().isBaseType() && varargsType.dimensions() == 1))", "-\t\t\t\t\t} else if (varargType.dimensions <= lastArgType.dimensions()) {", "-\t\t\t\t\t\tint dimensions = lastArgType.dimensions();", "-\t\t\t\t\t\tif (lastArgType.leafComponentType().isBaseType())", "+\t\t\t\t\t} else if (varargsType.dimensions <= (dimensions = lastArgType.dimensions())) {", "+\t\t\t\t\t\tif (lastArgType.leafComponentType().isBaseType()) {", "-\t\t\t\t\t\tif (varargType.dimensions < dimensions)", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (varargsType.dimensions < dimensions) {", "-\t\t\t\t\t\telse if (varargType.dimensions == dimensions && varargType.leafComponentType != lastArgType.leafComponentType())", "+\t\t\t\t\t\t} else if (varargsType.dimensions == dimensions ", "+\t\t\t\t\t\t\t\t\t\t&& varargsType.leafComponentType != lastArgType.leafComponentType()", "+\t\t\t\t\t\t\t\t\t\t&& lastArgType.isCompatibleWith(varargsType)) {", "+\t\t\t\t\t\t}"]}], "num": 45827}
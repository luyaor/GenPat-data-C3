{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a34606564f173016e94e955fdc6dca1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "160b0e5231bd9b3d3213cecd19f41b97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java", "commitBeforeChange": "48a2d2499344bebca223a2f8c964ed5900cd0012", "commitAfterChange": "6c085192f8ca1a30dcc3f8eecf0c1b2085d19f7e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test2() throws CoreException, InterruptedException", "signatureAfterChange": " \tpublic void test2() throws Exception", "diff": ["-\t/** Reconcile an individual CU. */ // FIXME: needs more capability in SearchableNameEnvironment", "-\tpublic void test2() throws CoreException, InterruptedException {", "-\t\tassertEquals(\"Number of problems\", 0, problems.length);", "+\t/** Project with real JRE8. */", "+\tpublic void test2() throws Exception {", "+\t\tHashtable options = JavaCore.getOptions();", "+\t\ttry {", "+\t\t\tsetupJavaProject(\"Test2\");", "+\t\t\tthis.project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);", "+\t\t\tIMarker[] markers = this.project.getProject().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\t\tassertNoMarkers(markers);", "+\t\t} finally {", "+\t\t\t// project using a full JRE container initializes global options to 1.8 -- must reset now:", "+\t\t\tJavaCore.setOptions(options);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276c5cd43c7efe35e26692588e1f113d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "6a5c512cff72c8d122f75160d7a3ca9f79b312ee", "commitAfterChange": "2b626d6b99c12d614e4c1d8f27d369b3ddf2a137", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void addAffectedChild(JavaElementDelta child)", "signatureAfterChange": " protected void addAffectedChild(JavaElementDelta child)", "diff": ["-\tIJavaElementDelta existingChild = null;", "+\tJavaElementDelta existingChild = null;", "-\t\t\t\texistingChild = fAffectedChildren[i];", "+\t\t\t\texistingChild = (JavaElementDelta)fAffectedChildren[i];", "-\t\t\t\t\t\t\t((JavaElementDelta) existingChild).addAffectedChild(childsChild);", "+\t\t\t\t\t\t\texistingChild.addAffectedChild(childsChild);", "-\t\t\t\t\t\t// update flags if needed", "-\t\t\t\t\t\tswitch (((JavaElementDelta) existingChild).fChangeFlags) {", "-\t\t\t\t\t\t\tcase F_ADDED_TO_CLASSPATH:", "-\t\t\t\t\t\t\tcase F_REMOVED_FROM_CLASSPATH:", "-\t\t\t\t\t\t\tcase F_SOURCEATTACHED:", "-\t\t\t\t\t\t\tcase F_SOURCEDETACHED:", "-\t\t\t\t\t\t\t\t((JavaElementDelta) existingChild).fChangeFlags |= child.fChangeFlags;", "-\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// update flags", "+\t\t\t\t\t\tboolean childHadContentFlag = (child.fChangeFlags & F_CONTENT) != 0;", "+\t\t\t\t\t\tboolean existingChildHadChildrenFlag = (existingChild.fChangeFlags & F_CHILDREN) != 0;", "+\t\t\t\t\t\texistingChild.fChangeFlags |= child.fChangeFlags;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// remove F_CONTENT flag if existing child had F_CHILDREN flag set ", "+\t\t\t\t\t\t// (case of fine grained delta (existing child) and delta coming from ", "+\t\t\t\t\t\t// DeltaProcessor (child))", "+\t\t\t\t\t\tif (childHadContentFlag && existingChildHadChildrenFlag) {", "+\t\t\t\t\t\t\texistingChild.fChangeFlags &= ~F_CONTENT;", "-\t\t\t\t\t\t\t((JavaElementDelta)existingChild).resourceDeltas = resDeltas;", "-\t\t\t\t\t\t\t((JavaElementDelta)existingChild).resourceDeltasCounter = child.resourceDeltasCounter;", "+\t\t\t\t\t\t\texistingChild.resourceDeltas = resDeltas;", "+\t\t\t\t\t\t\texistingChild.resourceDeltasCounter = child.resourceDeltasCounter;"]}], "num": 14924}
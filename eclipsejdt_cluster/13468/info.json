{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db3c8310bc6e5aeb8c3a463cb5549af8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0775ddf7d49ceb725d4556ba3e7895bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createFieldReference(Object receiver) throws InvalidInputException", "diff": ["-\t */", "-\tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException {", "-\t\t// Init", "-\t\tthis.identifierPtr = -1;", "-\t\tthis.identifierLengthPtr = -1;", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\t", "-\t\t// Get type ref", "-\t\tTypeReference typeRef = receiver;", "-\t\tif (typeRef == null) {", "-\t\t\tchar[] name = this.sourceParser.compilationUnit.compilationResult.compilationUnit.getMainTypeName();", "-\t\t\tif (name == null) {", "-\t\t\t}", "-\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "-\t\t", "-\t\t// Get member identifier", "-\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tconsumeToken();", "-\t\t\tpushIdentifier(true);", "-\t\t\tif (readToken() == TerminalTokens.TokenNameLPAREN) {", "-\t\t\t\tconsumeToken();", "-\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\ttry {", "-\t\t\t\t\treturn parseArguments(typeRef);", "-\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\tint end = this.scanner.getCurrentTokenEndPosition() < this.lineEnd ?", "-\t\t\t\t\t\t\tthis.scanner.getCurrentTokenEndPosition() :", "-\t\t\t\t\t\t\tthis.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\tend = end < this.lineEnd ? end : this.lineEnd;", "-\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReferenceArgs(start, end);", "+\t */", "+\tprotected Object createFieldReference(Object receiver) throws InvalidInputException {", "+\t\ttry {", "+\t\t\t// Get receiver type", "+\t\t\tTypeReference typeRef = (TypeReference) receiver;", "+\t\t\tif (typeRef == null) {", "+\t\t\t\tchar[] name = this.sourceParser.compilationUnit.compilationResult.compilationUnit.getMainTypeName();", "+\t\t\t\tif (name == null) {", "+\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\treturn null;", "+\t\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "+\t\t\t// Create field", "-\t\tint end = getEndPosition() - 1;", "-\t\tend = start > end ? getEndPosition() : end;", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, end);", "-\t\treturn null;", "+\t\tcatch (ClassCastException ex) {", "+\t\t\t\tthrow new InvalidInputException();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "925d9a0ffef2bcbd019e72e4565759ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1784048e951cac8e5c6590cc5827817757e6384e", "commitAfterChange": "4a48abb3b4027036bdeac61104059b6c83710144", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Expression parseReference() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseReference() throws InvalidInputException", "diff": ["-\tprivate Expression parseReference() throws InvalidInputException {", "+\tprivate boolean parseReference() throws InvalidInputException {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t// Do nothing as we want to underline from the beginning of the string", "+\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "+\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);", "-\t\t\t\t\treturn null;", "+\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);", "+\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t\t// Do nothing as we want to underline from the beginning of the href", "+\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "+\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);", "-\t\t\t\t\treturn null;", "+\t\t\t\t\treturn false;", "-\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tif (reference == null) {", "-\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\tif (reference != null) {", "+\t\t\t\t\t\t\tpushSeeRef(reference);", "+\t\t\t\t\t\treturn false;", "-\t\t\treturn null;", "+\t\t\treturn false;", "-\t\t", "-\t\t// Verify that we're at line end", "+", "+\t\t// Verify that line end does not start with an open parenthese (which could be a constructor reference wrongly written...)", "+\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=47215", "-\t\t\tint token = readTokenAndConsume();", "+\t\t\tint token = readToken();", "-\t\t\t\treturn reference;", "+\t\t\t\treturn pushSeeRef(reference);", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);", "-\t\treturn null;", "+\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);", "+\t\treturn false;"]}], "num": 13468}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2400c11fbd9b345409d1042a95c7207b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35f2996320b7d71d6a0a7f961fb20f58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["-}\r", "-public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {\r", "-\tConstant inlinedCondition = condition.constant;\r", "-\tif (inlinedCondition == NotAConstant) inlinedCondition = condition.conditionalConstant();\r", "-\tif (inlinedCondition != NotAConstant) {\r", "-\t\tif (inlinedCondition.booleanValue() == true) {\r", "-\t\t\tFlowInfo resultInfo = valueIfTrue.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t\t\t// analyse valueIfFalse, but do not take into account any of its infos\r", "-\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r", "-\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(resultInfo);\r", "-\t\t\treturn resultInfo;\r", "-\t\t} else {\r", "-\t\t\t// analyse valueIfTrue, but do not take into account any of its infos\t\t\t\r", "-\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r", "-\t\t\tFlowInfo mergeInfo = valueIfFalse.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergeInfo);\r", "-\t\t\treturn mergeInfo;\r", "-\t\t}\r", "-\t}\r", "-\t// notice that the receiver investigation is not performed in the previous case, since there is\r", "-\t// not a chance it is worth trying to check anything on a constant expression.\r", "-\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r", "-\r", "-\t// store a copy of the merged info, so as to compute the local variable attributes afterwards\r", "-\tFlowInfo trueInfo = flowInfo.initsWhenTrue();\r", "-\tthenInitStateIndex = currentScope.methodScope().recordInitializationStates(trueInfo);\r", "-\tFlowInfo falseInfo = flowInfo.initsWhenFalse();\r", "-\telseInitStateIndex = currentScope.methodScope().recordInitializationStates(falseInfo);\r", "-\t// propagate analysis\r", "-\ttrueInfo = valueIfTrue.analyseCode(currentScope, flowContext, trueInfo.copy());\r", "-\tfalseInfo = valueIfFalse.analyseCode(currentScope, flowContext, falseInfo.copy());\r", "-\t\r", "-\t// merge back using a conditional info -  1GK2BLM\r", "-\t// if ((t && (v = t)) ? t : t && (v = f)) r = v;  -- ok\r", "-\tFlowInfo mergedInfo = FlowInfo.conditional(\r", "-\t\ttrueInfo.initsWhenTrue().unconditionalInits().mergedWith(\r", "-\t\t\tfalseInfo.initsWhenTrue().unconditionalInits()),\r", "-\t\tfalseInfo.initsWhenFalse().unconditionalInits().mergedWith(\r", "-\t\t\tfalseInfo.initsWhenFalse().unconditionalInits()));\r", "-/*\t\t\t\r", "-\tFlowInfo mergedInfo = valueIfTrue.analyseCode(\r", "-\t\tcurrentScope,\r", "-\t\tflowContext,\r", "-\t\tflowInfo.initsWhenTrue().copy()).\r", "-\t\t\tunconditionalInits().\r", "-\t\t\t\tmergedWith(\r", "-\t\t\t\t\tvalueIfFalse.analyseCode(\r", "-\t\t\t\t\t\tcurrentScope,\r", "-\t\t\t\t\t\tflowContext,\r", "-\t\t\t\t\t\tflowInfo.initsWhenFalse().copy()).\r", "-\t\t\t\t\t\t\tunconditionalInits());\r", "-*/\t\t\t\t\t\t\t\r", "-\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "-\treturn mergedInfo;\r", "-}\r", "+\tpublic FlowInfo analyseCode(\r", "+\t\tBlockScope currentScope,\r", "+\t\tFlowContext flowContext,\r", "+\t\tFlowInfo flowInfo) {\r", "+\t\tConstant conditionConstant = condition.conditionalConstant();\r", "+\t\tif (conditionConstant != NotAConstant) {\r", "+\t\t\tif (conditionConstant.booleanValue() == true) {\r", "+\t\t\t\t// TRUE ? left : right\r", "+\t\t\t\tFlowInfo resultInfo =\r", "+\t\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\t\t// analyse valueIfFalse, but do not take into account any of its infos\r", "+\t\t\t\tvalueIfFalse.analyseCode(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tflowContext,\r", "+\t\t\t\t\tflowInfo.copy().markAsFakeReachable(true));\r", "+\t\t\t\tmergedInitStateIndex =\r", "+\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(resultInfo);\r", "+\t\t\t\treturn resultInfo;\r", "+\t\t\t} else {\r", "+\t\t\t\t// FALSE ? left : right\r", "+\t\t\t\t// analyse valueIfTrue, but do not take into account any of its infos\t\t\t\r", "+\t\t\t\tvalueIfTrue.analyseCode(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tflowContext,\r", "+\t\t\t\t\tflowInfo.copy().markAsFakeReachable(true));\r", "+\t\t\t\tFlowInfo mergeInfo =\r", "+\t\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\t\tmergedInitStateIndex =\r", "+\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergeInfo);\r", "+\t\t\t\treturn mergeInfo;\r", "+\t\t// notice that the receiver investigation is not performed in the previous case, since there is\r", "+\t\t// not a chance it is worth trying to check anything on a constant expression.\r", "+\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t// store a copy of the merged info, so as to compute the local variable attributes afterwards\r", "+\t\tFlowInfo trueInfo = flowInfo.initsWhenTrue();\r", "+\t\tthenInitStateIndex =\r", "+\t\t\tcurrentScope.methodScope().recordInitializationStates(trueInfo);\r", "+\t\tFlowInfo falseInfo = flowInfo.initsWhenFalse();\r", "+\t\telseInitStateIndex =\r", "+\t\t\tcurrentScope.methodScope().recordInitializationStates(falseInfo);\r", "+\r", "+\t\t// propagate analysis\r", "+\t\ttrueInfo = valueIfTrue.analyseCode(currentScope, flowContext, trueInfo.copy());\r", "+\t\tfalseInfo =\r", "+\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, falseInfo.copy());\r", "+\r", "+\t\t// merge back using a conditional info -  1GK2BLM\r", "+\t\t// if ((t && (v = t)) ? t : t && (v = f)) r = v;  -- ok\r", "+\t\tFlowInfo mergedInfo =\r", "+\t\t\tFlowInfo.conditional(\r", "+\t\t\t\ttrueInfo.initsWhenTrue().copy().unconditionalInits().mergedWith( // must copy, since could be shared with trueInfo.initsWhenFalse()...\r", "+\t\t\t\t\tfalseInfo.initsWhenTrue().copy().unconditionalInits()),\r", "+\t\t\t\ttrueInfo.initsWhenFalse().unconditionalInits().mergedWith(\r", "+\t\t\t\t\tfalseInfo.initsWhenFalse().unconditionalInits()));\r", "+\t\t/*\t\t\t\r", "+\t\t\tFlowInfo mergedInfo = valueIfTrue.analyseCode(\r", "+\t\t\t\tcurrentScope,\r", "+\t\t\t\tflowContext,\r", "+\t\t\t\tflowInfo.initsWhenTrue().copy()).\r", "+\t\t\t\t\tunconditionalInits().\r", "+\t\t\t\t\t\tmergedWith(\r", "+\t\t\t\t\t\t\tvalueIfFalse.analyseCode(\r", "+\t\t\t\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\t\t\t\tflowContext,\r", "+\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().copy()).\r", "+\t\t\t\t\t\t\t\t\tunconditionalInits());\r", "+\t\t*/\r", "+\t\tmergedInitStateIndex =\r", "+\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);\r", "+\t\treturn mergedInfo;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eec2f9f72729624fcb9b0ea144911b96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant conditionConstant = condition.constant;", "+\t\tConstant cst = this.condition.constant;", "+\t\tboolean isConditionTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionFalse = cst != NotAConstant && cst.booleanValue() == false;", "-\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo, conditionConstant == NotAConstant);", "+\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo, cst == NotAConstant);", "-\t\tif (conditionConstant != NotAConstant) {", "-\t\t\tif (conditionConstant.booleanValue() == true) {", "-\t\t\t\t// TRUE ? left : right", "-\t\t\t\tFlowInfo resultInfo =", "-\t\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.initsWhenTrue().unconditionalInits());", "-\t\t\t\t// analyse valueIfFalse, but do not take into account any of its infos", "-\t\t\t\tvalueIfFalse.analyseCode(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tflowContext,", "-\t\t\t\t\tflowInfo.initsWhenFalse().copy().unconditionalInits().markAsFakeReachable(true));", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(resultInfo);", "-\t\t\t\treturn resultInfo;", "-\t\t\t} else {", "-\t\t\t\t// FALSE ? left : right", "-\t\t\t\t// analyse valueIfTrue, but do not take into account any of its infos\t\t\t", "-\t\t\t\tvalueIfTrue.analyseCode(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tflowContext,", "-\t\t\t\t\tflowInfo.initsWhenTrue().copy().unconditionalInits().markAsFakeReachable(true));", "-\t\t\t\tFlowInfo mergeInfo =", "-\t\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.initsWhenFalse().unconditionalInits());", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergeInfo);", "-\t\t\t\treturn mergeInfo;", "-\t\t\t}", "+\t\tif (isConditionTrue) {", "+\t\t\t// TRUE ? left : right", "+\t\t\tFlowInfo resultInfo =", "+\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.initsWhenTrue().unconditionalInits());", "+\t\t\t// analyse valueIfFalse, but do not take into account any of its infos", "+\t\t\tvalueIfFalse.analyseCode(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tflowContext,", "+\t\t\t\tflowInfo.initsWhenFalse().copy().unconditionalInits().setReachMode(FlowInfo.SILENT_FAKE_REACHABLE));", "+\t\t\tmergedInitStateIndex =", "+\t\t\t\tcurrentScope.methodScope().recordInitializationStates(resultInfo);", "+\t\t\treturn resultInfo;", "+\t\t} else if (isConditionFalse) {", "+\t\t\t// FALSE ? left : right", "+\t\t\t// analyse valueIfTrue, but do not take into account any of its infos\t\t\t", "+\t\t\tvalueIfTrue.analyseCode(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tflowContext,", "+\t\t\t\tflowInfo.initsWhenTrue().copy().unconditionalInits().setReachMode(FlowInfo.SILENT_FAKE_REACHABLE));", "+\t\t\tFlowInfo mergeInfo =", "+\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.initsWhenFalse().unconditionalInits());", "+\t\t\tmergedInitStateIndex =", "+\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergeInfo);", "+\t\t\treturn mergeInfo;", "-\t\tFlowInfo trueInfo = flowInfo.initsWhenTrue();", "-\t\tthenInitStateIndex =", "-\t\t\tcurrentScope.methodScope().recordInitializationStates(trueInfo);", "-\t\tFlowInfo falseInfo = flowInfo.initsWhenFalse();", "-\t\telseInitStateIndex =", "-\t\t\tcurrentScope.methodScope().recordInitializationStates(falseInfo);", "+\t\tFlowInfo trueInfo = flowInfo.initsWhenTrue().copy();", "+\t\tthenInitStateIndex = currentScope.methodScope().recordInitializationStates(trueInfo);", "+\t\tFlowInfo falseInfo = flowInfo.initsWhenFalse().copy();", "+\t\telseInitStateIndex = currentScope.methodScope().recordInitializationStates(falseInfo);", "-\t\ttrueInfo = valueIfTrue.analyseCode(currentScope, flowContext, trueInfo.copy());", "-\t\tfalseInfo =", "-\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, falseInfo.copy());", "+\t\ttrueInfo = valueIfTrue.analyseCode(currentScope, flowContext, trueInfo);", "+\t\tfalseInfo = valueIfFalse.analyseCode(currentScope, flowContext, falseInfo);", "-\t\t// merge back using a conditional info -  1GK2BLM", "+\t\t// merge using a conditional info -  1GK2BLM", "-\t\t/*\t\t\t", "-\t\t\tFlowInfo mergedInfo = valueIfTrue.analyseCode(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tflowContext,", "-\t\t\t\tflowInfo.initsWhenTrue().copy()).", "-\t\t\t\t\tunconditionalInits().", "-\t\t\t\t\t\tmergedWith(", "-\t\t\t\t\t\t\tvalueIfFalse.analyseCode(", "-\t\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\t\tflowContext,", "-\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().copy()).", "-\t\t\t\t\t\t\t\t\tunconditionalInits());", "-\t\t*/", "+"]}], "num": 45455}
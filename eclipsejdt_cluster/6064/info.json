{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "997f06d9820230b3432b8cc73582fc12", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b680734fe51462c583ad62c12f9b0121", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "6742a17d1caafc5993ac9b9729f35ed214601070", "commitAfterChange": "62e4b78bb9ee6e7ba05f701d984b5c8f51c919e3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      \tpublic PackageDeclaration getPackage(String name)", "signatureAfterChange": "      \tpublic PackageDeclaration getPackage(String name)", "diff": ["-\t\t\tif (pkgInfoUnit != null) {", "-\t\t\t\tIPackageDeclaration[] decls = pkgInfoUnit.getPackageDeclarations();", "-\t\t\t\tif (decls.length > 0) {", "-\t\t\t\t\t// TODO: here we would like to return a PackageDeclarationImpl based on package-info.java.", "+\t\t\tif (pkgInfoUnit != null || pkgInfoClassFile != null) {", "+\t\t\t\tString key = getPackageBindingKey(name);", "+\t\t\t\tIPackageBinding packageBinding = (IPackageBinding)getBindingFromKey(key, compUnit);", "+\t\t\t\tif (null != packageBinding) {", "+\t\t\t\t\treturn new PackageDeclarationImpl(packageBinding, null, this, true, pkgFrags);", "-\t\t\t}", "-\t\t\tif (pkgInfoClassFile != null) {", "-\t\t\t\t// TODO: how can we access the annotations on a package-info.class?", "-\t\t\t\t// Hopefully this will be a rare situation: a binary package containing only a package-info."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0b10e7bdc86a20976c45aae39f66f9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "93444b7671b763598022452cafbe29143ff8c004", "commitAfterChange": "b9dd40f151f099ea02bdb585a636b0e4d30a3aca", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveType(AnonymousClassDeclaration type)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveType(AnonymousClassDeclaration type)", "diff": ["-\t\t\tif (anonymousLocalTypeDeclaration != null) {", "-\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(anonymousLocalTypeDeclaration.binding);", "-\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tthis.bindingsToAstNodes.put(typeBinding, type);", "-\t\t\t\tString key = typeBinding.getKey();", "-\t\t\t\tif (key != null) {", "-\t\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, typeBinding);\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\treturn typeBinding;", "+\t\t\tITypeBinding typeBinding = this.getTypeBinding(anonymousLocalTypeDeclaration.binding);", "+\t\t\tif (typeBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\tthis.bindingsToAstNodes.put(typeBinding, type);", "+\t\t\tString key = typeBinding.getKey();", "+\t\t\tif (key != null) {", "+\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, typeBinding);", "+\t\t\t}", "+\t\t\treturn typeBinding;"]}], "num": 6064}
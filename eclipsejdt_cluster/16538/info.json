{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b7022cb11d627368dbde3149569392b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed94d0ea68e10972cdfc667ee710f18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "988b834a35e1571af05adddd8db1ce5aaa1f0ff0", "commitAfterChange": "c90773ded969a955dbf869e7d3cd599898423a64", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprotected static TestSuite addMethodsToSuite(Class testClass)", "signatureAfterChange": " \tprotected static TestSuite createSuite(Class testClass)", "diff": ["-\tprotected static TestSuite addMethodsToSuite(Class testClass) {", "+\t */", "+\tprotected static TestSuite createSuite(Class testClass) {", "-\t\t\t\t\tint levels = getASTLevelsForTest(name);", "-\t\t\t\t\tif ( (levels & LEVEL_2) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS2_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_3) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS3_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_4) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS4_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_8) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(AST.JLS8)}));", "-\t\t\t\t\t// In future when adding support for new levels, make sure you update the getASTLevelsForTest() method too", "-\t\t\t\t\t// and create a new SINCE_* constant and update the value of SINCE_8", "+\t\t\t\t\t", "+\t\t\t\t\tint index = name.indexOf(ONLY_AST_STRING);", "+\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\tString suffix = name.substring(index + ONLY_AST_STRING.length() + 1);", "+\t\t\t\t\t\tString[] levels = suffix.split(STRING_);", "+\t\t\t\t\t\tfor (int l= 0; l < levels.length; l++) {", "+\t\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  Integer.valueOf(levels[l])}));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint since = -1;", "+\t\t\t\t\t\tindex = name.indexOf(SINCE_AST_STRING);", "+\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\tString suffix = name.substring(index + SINCE_AST_STRING.length() + 1);", "+\t\t\t\t\t\t\tsince = Integer.parseInt(suffix);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int j= 0; j < JLS_LEVELS.length; j++) {", "+\t\t\t\t\t\t\tint level = JLS_LEVELS[j];", "+\t\t\t\t\t\t\tif (level >= since) {", "+\t\t\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(level)}));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e96c7a723a185010b786fe16b85904f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "309cc52115820f9c0f1ca2e2829a2befbed6d295", "commitAfterChange": "9fa0a487f3691f345e804a37bed163a5e6c7a73b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static String getClasspathVariableDeprecationMessage(String variableName)", "signatureAfterChange": " \tpublic static String getClasspathVariableDeprecationMessage(String variableName)", "diff": ["-\t    return (String) JavaModelManager.getJavaModelManager().deprecatedVariables.get(variableName);", "+\t    JavaModelManager manager = JavaModelManager.getJavaModelManager();", "+", "+\t\t// Returns the stored deprecation message", "+\t\tString message = (String) manager.deprecatedVariables.get(variableName);", "+\t\tif (message != null) {", "+\t\t    return message;", "+\t\t}", "+\t    ", "+\t    // If the variable has been already initialized, then there's no deprecation message", "+\t\tIPath variablePath = manager.variableGet(variableName);", "+\t\tif (variablePath != null && variablePath != JavaModelManager.VARIABLE_INITIALIZATION_IN_PROGRESS) {", "+\t\t\treturn null;", "+\t\t}", "+", "+\t\t// Search for extension point to get the possible deprecation message", "+\t\tPlugin jdtCorePlugin = JavaCore.getPlugin();", "+\t\tif (jdtCorePlugin == null) return null;", "+", "+\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID, JavaModelManager.CPVARIABLE_INITIALIZER_EXTPOINT_ID);", "+\t\tif (extension != null) {", "+\t\t\tIExtension[] extensions =  extension.getExtensions();", "+\t\t\tfor(int i = 0; i < extensions.length; i++){", "+\t\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\tfor(int j = 0; j < configElements.length; j++){", "+\t\t\t\t\tIConfigurationElement configElement = configElements[j];", "+\t\t\t\t\tString varAttribute = configElement.getAttribute(\"variable\"); //$NON-NLS-1$", "+\t\t\t\t\tif (variableName.equals(varAttribute)) {", "+\t\t\t\t\t\tString deprecatedAttribute = configElement.getAttribute(\"deprecated\"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (deprecatedAttribute != null) {", "+\t\t\t\t\t\t\treturn deprecatedAttribute;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn null;"]}], "num": 16538}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60cf329f70301ac315e49aad572c795b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "037993fffd6d52023d60d8f0b2eada05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "7dd8cc67681fb88e7736dfbb73821e5e5138853c", "commitAfterChange": "c8d3c4ac56333345ab3b304f1c10283b7f7ae237", "methodNumberBeforeChange": 392, "methodNumberAfterChange": 392, "signatureBeforeChange": " public void variableTypeCannotBeVoidArray(AbstractVariableDeclaration varDecl)", "signatureAfterChange": " public void variableTypeCannotBeVoidArray(AbstractVariableDeclaration varDecl)", "diff": ["-\tString[] arguments = new String[] {new String(varDecl.name)};", "-\t\tIProblem.VariableTypeCannotBeVoidArray,", "-\t\targuments,", "-\t\targuments,", "-\t\tvarDecl.sourceStart,", "-\t\tvarDecl.sourceEnd);", "+\t\tIProblem.CannotAllocateVoidArray,", "+\t\tNoArgument,", "+\t\tNoArgument,", "+\t\tvarDecl.type.sourceStart,", "+\t\tvarDecl.type.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749114131e554dd779e6cb3f8f4936ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void complainIfUnusedExceptionHandlers( \t\tAstNode[] exceptionHandlers, \t\tBlockScope scope, \t\tTryStatement tryStatement)", "signatureAfterChange": " \t \tpublic void complainIfUnusedExceptionHandlers( \t\tBlockScope scope, \t\tTryStatement tryStatement)", "diff": ["+\t", "-\t\tAstNode[] exceptionHandlers,", "-\t\t\t\tscope.problemReporter().unreachableExceptionHandler(", "+\t\t\t\tscope.problemReporter().unreachableCatchBlock(", "-\t\t\t\t\texceptionHandlers[index]);", "+\t\t\t\t\ttryStatement.catchArguments[index].type);", "-\t\t\t\t\tscope.problemReporter().maskedExceptionHandler(", "+\t\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "-\t\t\t\t\t\texceptionHandlers[index]);", "+\t\t\t\t\t\ttryStatement.catchArguments[index].type);", "-\t\t// will optimized out unnecessary catch block during code gen", "-\t\ttryStatement.preserveExceptionHandler = isNeeded;"]}], "num": 53880}
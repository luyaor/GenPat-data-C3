{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbeeb34821708e3cb8e371392e2cf6d3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c7c88a1384940cada15d74631c9162a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate synchronized void readState()", "signatureAfterChange": " \tprivate boolean compareFileContents(String contents, IFile file)", "diff": ["+\t */", "+\tprivate boolean compareFileContents(String contents, IFile file)", "+\t{", "+\t\tboolean contentsDiffer = true;", "+\t\tif (file.exists()) {", "+\t\t\tInputStream oldData = null;", "+\t\t\tInputStream is = null;", "+\t\t\ttry {", "+\t\t\t\tis = new ByteArrayInputStream(contents.getBytes());", "+\t\t\t\toldData = new BufferedInputStream(file.getContents());", "+\t\t\t\tcontentsDiffer = !FileSystemUtil.compareStreams(oldData, is);", "+\t\t\t} catch (CoreException ce) {", "+\t\t\t\t// Do nothing. Assume the new content is different", "+\t\t\t} finally {", "+\t\t\t\tif (oldData != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\toldData.close();", "+\t\t\t\t\t} catch (IOException ioe) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (is != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tis.close();", "+\t\t\t\t\t} catch (IOException ioe) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn contentsDiffer;", "+\t}", "-\tprivate synchronized void readState() {", "-\t\tFile file = getSerializationFile(_jProject.getProject());", "-\t\tif (file == null || !file.exists()) {", "-\t\t\t// We'll just start with no dependencies", "-\t\t\treturn;", "-\t\t}", "-\t\tDataInputStream in = null;", "-\t\ttry {", "-\t\t\tin= new DataInputStream(new BufferedInputStream(new FileInputStream(file)));", "-\t\t\tint version = in.readInt();", "-\t\t\tif (version != SERIALIZATION_VERSION) {", "-\t\t\t\tthrow new IOException(\"Dependency map file version does not match. Expected \"  //$NON-NLS-1$", "-\t\t\t\t\t\t+ SERIALIZATION_VERSION + \", but found \" + version); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tint sizeOfMap = in.readInt();", "-\t\t\t", "-\t\t\t// For each entry, we'll have a parent and a set of children, ", "-\t\t\t// which we can drop into the parent -> child map.", "-\t\t\tfor (int parentIndex=0; parentIndex<sizeOfMap; parentIndex++) {", "-\t\t\t\tString parentPath = in.readUTF();", "-\t\t\t\tIFile parent = convertPathToIFile(parentPath);", "-\t\t\t\tSet<IFile> children = new HashSet<IFile>();", "-\t\t\t\t_parentFile2GeneratedFiles.put(parent, children);", "-\t\t\t\t", "-\t\t\t\tint numChildren = in.readInt();", "-\t\t\t\tfor (int childIndex = 0; childIndex<numChildren; childIndex++) {", "-\t\t\t\t\tString childPath = in.readUTF();", "-\t\t\t\t\tIFile child = convertPathToIFile(childPath);", "-\t\t\t\t\t// add the child to the parent->child map", "-\t\t\t\t\tchildren.add(child);", "-\t\t\t\t\t", "-\t\t\t\t\t// Now we need to update the child -> parents map", "-\t\t\t\t\tSet<IFile> parentSet = _generatedFile2ParentFiles.get(child);", "-\t\t\t\t\tif (parentSet == null) {", "-\t\t\t\t\t\tparentSet = new HashSet<IFile>();", "-\t\t\t\t\t\t_generatedFile2ParentFiles.put(child, parentSet);", "-\t\t\t\t\t}", "-\t\t\t\t\tparentSet.add(parent);", "-\t\t\t\t}", "-\t\tcatch (IOException ioe) {", "-\t\t\t// We can safely continue without having read our dependencies.", "-\t\t\tAptPlugin.log(ioe, \"Could not deserialize APT dependencies\"); //$NON-NLS-1$", "-\t\tfinally {", "-\t\t\tif (in != null) {", "-\t\t\t\ttry {in.close();} catch (IOException ioe) {}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5f78964771973bcbc2ec70dd217e40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic void executeWraps()", "signatureAfterChange": "  \tpublic void executeWraps()", "diff": ["-\t\tmainLoop: while (index < this.tm.size()) {", "+\t\twhile (index < this.tm.size()) {", "-\t\t\thandleOnColumnIndent(index, token.getWrapPolicy());", "-\t\t\t// this might be a pre-existing wrap that should trigger other top priority wraps", "-\t\t\tint jumpToIndex = handleTopPriorityWraps(index);", "-\t\t\tif (jumpToIndex >= 0) {", "-\t\t\t\tindex = jumpToIndex;", "-\t\t\t\tcontinue mainLoop;", "+\t\t\twhile (true) {", "+\t\t\t\ttry {", "+\t\t\t\t\tint currentIndent = getWrapIndent(token);", "+\t\t\t\t\tthis.wrapSearchResults.clear();", "+\t\t\t\t\tindex = applyWraps(index, currentIndent);", "+\t\t\t\t\tbreak;", "+\t\t\t\t} catch (WrapRestartException e) {", "+\t\t\t\t\thandleTopPriorityWraps(e);", "+\t\t\t\t}", "-", "-\t\t\t// determine wraps for incoming line", "-\t\t\tint currentIndent = getWrapIndent(token);", "-\t\t\tboolean isLineWrapped = token.isWrappable();", "-\t\t\tWrapResult wrapResult = findWraps(index, currentIndent);", "-\t\t\tif (wrapResult == WrapResult.TOP_PRIORITY_WRAP_MET) {", "-\t\t\t\tjumpToIndex = handleTopPriorityWraps(this.topPriorityWrapIndex);", "-\t\t\t\tassert jumpToIndex >= 0;", "-\t\t\t\tindex = Math.min(index, jumpToIndex);", "-\t\t\t\tcontinue mainLoop;", "-\t\t\t}", "-", "-\t\t\t// apply wraps and indents", "-\t\t\tWrapInfo wrapInfo = wrapResult.nextWrap;", "-\t\t\twhile (wrapInfo != null) {", "-\t\t\t\tisLineWrapped = true;", "-\t\t\t\tfor (; index < wrapInfo.wrapTokenIndex; index++) {", "-\t\t\t\t\ttoken = this.tm.get(index);", "-\t\t\t\t\tif (shouldForceWrap(token, currentIndent)) {", "-\t\t\t\t\t\tcurrentIndent = token.getIndent();", "-\t\t\t\t\t\twrapInfo = new WrapInfo(index, currentIndent);", "-\t\t\t\t\t\tfindWrapsCached(index, currentIndent);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tcurrentIndent = Math.max(currentIndent, token.getAlign());", "-\t\t\t\t\ttoken.setIndent(currentIndent);", "-\t\t\t\t}", "-\t\t\t\ttoken = this.tm.get(index);", "-\t\t\t\ttoken.breakBefore();", "-\t\t\t\ttoken.setIndent(currentIndent = wrapInfo.indent);", "-\t\t\t\thandleOnColumnIndent(index, token.getWrapPolicy());", "-\t\t\t\tjumpToIndex = handleTopPriorityWraps(index);", "-\t\t\t\tif (jumpToIndex >= 0) {", "-\t\t\t\t\tindex = jumpToIndex;", "-\t\t\t\t\tcontinue mainLoop;", "-\t\t\t\t}", "-\t\t\t\twrapInfo = this.wrapSearchResults.get(wrapInfo).nextWrap;", "-\t\t\t}", "-", "-\t\t\t// apply indent until the beginning of the next line", "-\t\t\ttoken.setIndent(currentIndent);", "-\t\t\tfor (index++; index < this.tm.size(); index++) {", "-\t\t\t\tif (token.getLineBreaksAfter() > 0)", "-\t\t\t\t\tbreak;", "-\t\t\t\ttoken = this.tm.get(index);", "-\t\t\t\tif (token.isNextLineOnWrap() && isLineWrapped)", "-\t\t\t\t\ttoken.breakBefore();", "-\t\t\t\tif (token.getLineBreaksBefore() > 0)", "-\t\t\t\t\tbreak;", "-\t\t\t\tif (shouldForceWrap(token, currentIndent))", "-\t\t\t\t\tcurrentIndent = token.getIndent();", "-\t\t\t\tcurrentIndent = Math.max(currentIndent, token.getAlign());", "-\t\t\t\ttoken.setIndent(currentIndent);", "-\t\t\t}", "+\t\t\tthis.usedTopPriorityWraps.clear();", "-\t\tthis.wrapSearchResults.clear();", "-\t\tthis.usedTopPriorityWraps.clear();"]}], "num": 52474}
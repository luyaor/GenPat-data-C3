{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42faedd6fe6b41ad66dc4622c066c419", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7d964f0d6395642cc56ff6204d2bb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e3dd2b05ac8f41c0dca5c47353959d33b3013e99", "commitAfterChange": "f2616d9c66b0302f054a7d87b47e25d04c9332b7", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition)", "signatureAfterChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition)", "diff": ["-\t\t// 3 - process snippet (@see JavaDocRegion#formatCodeSnippet)", "+\t\t// 3 - format snippet (@see JavaDocRegion#formatCodeSnippet)", "-\t\tif (edit != null) {", "-\t\t\tformattedSnippet= CommentFormatterUtil.evaluateFormatterEdit(convertedSnippet, edit, null);", "+\t\tif (edit == null) {", "+\t\t\t// 3.a - not a valid code to format, keep initial buffer", "+\t\t\tformattedSnippet = inputBuffer.toString();", "+\t\t} else {", "+\t\t\t// 3.b - valid code formatted", "+\t\t\t// 3.b.i - get the result", "+\t\t\tformattedSnippet = CommentFormatterUtil.evaluateFormatterEdit(convertedSnippet, edit, null);", "+", "+\t\t\t// 3.b.ii- convert back to HTML (@see JavaDocRegion#convertJava2Html)", "+\t\t\tJava2HTMLEntityReader javaReader= new Java2HTMLEntityReader(new StringReader(formattedSnippet));", "+\t\t\tbuf= new char[256];", "+\t\t\tStringBuffer conversionBuffer= new StringBuffer();", "+\t\t\tint l;", "+\t\t\ttry {", "+\t\t\t\tdo {", "+\t\t\t\t\tl= javaReader.read(buf);", "+\t\t\t\t\tif (l != -1)", "+\t\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "+\t\t\t\t} while (l > 0);", "+\t\t\t\tformattedSnippet = conversionBuffer.toString();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// should not happen", "+\t\t\t\tCommentFormatterUtil.log(e);", "+\t\t\t\treturn;", "+\t\t\t}", "-\t\tStringBuffer outputBuffer= new StringBuffer();", "-\t\ttracker= new DefaultLineTracker();", "+\t\tStringBuffer outputBuffer = new StringBuffer();", "+\t\ttracker = new DefaultLineTracker();", "-", "-\t\t// 5 - convert back to HTML (@see JavaDocRegion#convertJava2Html)", "-\t\tJava2HTMLEntityReader javaReader= new Java2HTMLEntityReader(new StringReader(formattedSnippet));", "-\t\tbuf= new char[256];", "-\t\tStringBuffer conversionBuffer= new StringBuffer();", "-\t\tint l;", "-\t\ttry {", "-\t\t\tdo {", "-\t\t\t\tl= javaReader.read(buf);", "-\t\t\t\tif (l != -1)", "-\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "-\t\t\t} while (l > 0);", "-\t\t\tformattedSnippet = conversionBuffer.toString();", "-\t\t} catch (IOException e) {", "-\t\t\t// should not happen", "-\t\t\tCommentFormatterUtil.log(e);", "-\t\t\treturn;", "-\t\t}", "-", "-", "-", "-\t\tfor (int lines= tracker.getNumberOfLines() - 1; lines > 0; lines--) {", "+\t\tfor (int lines=tracker.getNumberOfLines() - 1; lines > 0; lines--) {", "-\t\t// replace old text with the formatted snippet", "+", "+\t\t// 5 - replace old text with the formatted snippet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8eae444a0e4e9ef812329436e43e53f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "58e1f97a6c11cbf99287f2cc95bb245d2faf2bd1", "commitAfterChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tif ((argv == null) || (argv.length == 0))", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\")); //$NON-NLS-1$", "+\t\tif ((argv == null) || (argv.length == 0)) {", "+\t\t\tprintUsage();", "+\t\t\treturn;", "+\t\t}", "+\t\t// expand the command line if necessary", "+\t\tboolean needExpansion = false;", "+\t\tloop: for (int i = 0; i < argCount; i++) {", "+\t\t\t\tif (argv[i].startsWith(\"@\")) {", "+\t\t\t\t\tneedExpansion = true;", "+\t\t\t\t\tbreak loop;", "+\t\t\t\t}", "+\t\t}", "+", "+\t\tString[] newCommandLineArgs = null;", "+\t\tif (needExpansion) {", "+\t\t\tnewCommandLineArgs = new String[argCount];", "+\t\t\tindex = 0;", "+\t\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\t\tString[] newArgs = null;", "+\t\t\t\tString arg = argv[i].trim();", "+\t\t\t\tif (arg.startsWith(\"@\")) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(new String(Util.getFileCharContent(new File(arg.substring(1)), null))));", "+\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\tString line;", "+\t\t\t\t\t\twhile((line = reader.readLine()) != null) {", "+\t\t\t\t\t\t\tbuffer.append(line).append(\" \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewArgs = tokenize(buffer.toString());", "+\t\t\t\t\t} catch(IOException e) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tMain.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (newArgs != null) {", "+\t\t\t\t\tint newCommandLineArgsLength = newCommandLineArgs.length;", "+\t\t\t\t\tint newArgsLength = newArgs.length;", "+\t\t\t\t\tSystem.arraycopy(newCommandLineArgs, 0, (newCommandLineArgs = new String[newCommandLineArgsLength + newArgsLength - 1]), 0, index);", "+\t\t\t\t\tSystem.arraycopy(newArgs, 0, newCommandLineArgs, index, newArgsLength);", "+\t\t\t\t\tindex += newArgsLength;", "+\t\t\t\t} else {", "+\t\t\t\t\tnewCommandLineArgs[index++] = arg;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tindex = -1;", "+\t\t} else {", "+\t\t\tnewCommandLineArgs = argv;", "+\t\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\t\tnewCommandLineArgs[i] = newCommandLineArgs[i].trim();", "+\t\t\t}", "+\t\t}", "+\t\targCount = newCommandLineArgs.length;", "-\t\t\tcurrentArg = argv[index].trim();", "+\t\t\tcurrentArg = newCommandLineArgs[index];", "-\t\tif (filenames == null)", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\")); //$NON-NLS-1$", "+\t\tif (filenames == null) {", "+\t\t\tprintUsage();", "+\t\t\treturn;", "+\t\t}"]}], "num": 36728}
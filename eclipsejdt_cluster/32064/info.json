{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80b99e3fcb6ac45a9cc6efbe63475843", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7cd7c730c4acc04b77e135b7a8ec48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceImplTests.java", "commitBeforeChange": "a892813e8b7a5d041e5d0d3d868b173ea1f47ce5", "commitAfterChange": "b077f1ec27f6f9c95317db4e5e225319a96f87d5", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 77, "signatureBeforeChange": "  private static void reinitializeFromComputedValues(String source, String target)", "signatureAfterChange": "  private static void reinitializeFromComputedValues(String source, String target)", "diff": ["-\tNullReferenceImplTests.State[] transitiveClosure = computeTransitiveClosure();", "+\tNullReferenceImplTests.State[] transitiveClosure = computeTransitiveClosure(); // need for initialization?", "+\ttransitiveClosure = addSymbolicStates(transitiveClosure); // don't rely on reachibility alone, since we don't cover all operations in these tests.", "+\tArrays.sort(transitiveClosure, new Comparator() {", "+\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\treturn new Integer(((State)o1).value).compareTo(new Integer(((State)o2).value));", "+\t\t}", "+\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "becaed581273fc1a14ae0684365550ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "066f1fe71d5d139e5a681c9aeece89fa867b71b7", "commitAfterChange": "39951c3ce9f26380d44e65dd4f0a9c708c89c0d1", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic static Object[] sortCopy(Object[] objects, Comparer comparer)", "signatureAfterChange": " \tpublic static IJavaElement[] sortCopy(IJavaElement[] elements)", "diff": ["+\t */", "+\tpublic static IJavaElement[] sortCopy(IJavaElement[] elements) {", "+\t\tint len = elements.length;", "+\t\tIJavaElement[] copy = new IJavaElement[len];", "+\t\tSystem.arraycopy(elements, 0, copy, 0, len);", "+\t\tsort(copy, new Comparer() {", "+\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\treturn ((JavaElement) a).toStringWithAncestors().compareTo(((JavaElement) b).toStringWithAncestors());", "+\t\t\t}", "+\t\t});", "+\t\treturn copy;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2a18c83d07e8ef305d9f1f8ee22a027", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "2d5bf798c418b8695f77d20c6c74012fdb9b40b0", "commitAfterChange": "e3d875263ee12404bb21dc7fcef95c903c7f1b24", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic Problem[] getProblemsFor(IPath path, String additionalMarkerType)", "signatureAfterChange": " \tpublic Problem[] getProblemsFor(IPath path, String additionalMarkerType)", "diff": ["+\t\t\tArrays.sort(result, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\treturn o1.toString().compareTo(o2.toString());", "+\t\t\t\t}", "+\t\t\t});"]}], "num": 32064}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95f7cc6231eb0b7d7ead8d0a93fc686a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63b153109ce3e57360d807bb0473c301", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tFlowInfo preInitInfo = null;", "+\tboolean shouldAnalyseResource = this.binding != null ", "+\t\t\t&& flowInfo.reachMode() == FlowInfo.REACHABLE ", "+\t\t\t&& FakedTrackingVariable.isAnyCloseable(this.initialization.resolvedType);", "+\tif (shouldAnalyseResource) {", "+\t\tpreInitInfo = flowInfo.unconditionalCopy();", "+\t\t// analysis of resource leaks needs additional context while analyzing the RHS:", "+\t\tFakedTrackingVariable.preConnectTrackerAcrossAssignment(this, this.binding, this.initialization);", "+\t}", "+", "-\tFakedTrackingVariable.handleResourceAssignment(flowInfo, this, this.initialization, this.binding, null);", "+", "+\tif (shouldAnalyseResource)", "+\t\tFakedTrackingVariable.handleResourceAssignment(currentScope, preInitInfo, flowInfo, this, this.initialization, this.binding);", "+\telse", "+\t\tFakedTrackingVariable.cleanUpAfterAssignment(currentScope, Binding.LOCAL, this.initialization);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c012ad145c7cbb8fd59198e7206f2c68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t", "+\tFlowInfo preInitInfo = null;", "+\tboolean shouldAnalyseResource = local != null ", "+\t\t\t&& flowInfo.reachMode() == FlowInfo.REACHABLE ", "+\t\t\t&& (FakedTrackingVariable.isAnyCloseable(this.expression.resolvedType)", "+\t\t\t\t\t|| this.expression.resolvedType == TypeBinding.NULL);", "+\tif (shouldAnalyseResource) {", "+\t\tpreInitInfo = flowInfo.unconditionalCopy();", "+\t\t// analysis of resource leaks needs additional context while analyzing the RHS:", "+\t\tFakedTrackingVariable.preConnectTrackerAcrossAssignment(this, local, this.expression);", "+\t}", "+\t", "-\tif (local != null) {", "-\t\tLocalVariableBinding previousTrackerBinding = null;", "-\t\tif (local.closeTracker != null) {", "-\t\t\t// Assigning to a variable already holding an AutoCloseable, has it been closed before?", "-\t\t\tpreviousTrackerBinding = local.closeTracker.binding;", "-\t\t\tif (!flowInfo.isDefinitelyNull(local)) // only if previous value may be non-null", "-\t\t\t\tlocal.closeTracker.recordErrorLocation(this, flowInfo.nullStatus(previousTrackerBinding));", "-\t\t}", "-\t\tFakedTrackingVariable.handleResourceAssignment(flowInfo, this, this.expression, local, previousTrackerBinding);", "-\t}", "+", "+\tif (shouldAnalyseResource)", "+\t\tFakedTrackingVariable.handleResourceAssignment(currentScope, preInitInfo, flowInfo, this, this.expression, local);", "+\telse", "+\t\tFakedTrackingVariable.cleanUpAfterAssignment(currentScope, this.lhs.bits, this.expression);", "+"]}], "num": 22772}
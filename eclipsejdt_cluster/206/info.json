{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7da4053fc0ded80e00ed326b27178952", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85494d1acae900b1501f2ffc31aee98c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "8eebb11e46f28beaadc740a4b76f1cf698acf7a1", "commitAfterChange": "77d7a71c34d1f984564aceab6a75ee9e680a55a5", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void test051()", "signatureAfterChange": " \tpublic void test051()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\t\"\tvoid foo(A<Integer> a) {}\\n\" +", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class A<T> {}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tvoid foo(A<String> a) {}\\r\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(A<String>) in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tvoid foo(A<Integer> a) {}\\r\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(A<Integer>) in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: foo(A<java.lang.String>) and foo(A<java.lang.Integer>) have the same erasure", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e682aa313a8c8780b2f3b03c9b6cd56a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "8afeb60d84d0d78caa38869e22c86e8ec44f1e1a", "commitAfterChange": "7448554fa33480f89acc6d99ed13a0f48d1aacc6", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["+\t\t\t\t\"interface I {}\\n\" +", "+\t\t\t\t\"interface J extends I { @Override void clone(); }\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in I.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\r\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type J must override a superclass method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in I.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\r\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with Object.clone(), thus this interface cannot be implemented\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"I.java\","]}], "num": 206}
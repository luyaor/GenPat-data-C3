{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f9b3201d75c6da63221febd0a77b9e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "033f34487f31a500148d4e8e939ae77c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ab1674a0873a6f0955401f0b440fd6a56c6beb1d", "commitAfterChange": "8f5a102c2b8b887f30503ced9c831e6e4e83fdd3", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, List lubStack)", "signatureAfterChange": "  \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, ArrayList lubStack)", "diff": ["-\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, List lubStack) {", "+\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, ArrayList lubStack) {", "-\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocationVariables[j], (ReferenceBinding) mec, j, lubStack);", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocationVariables[j], (ReferenceBinding) mec, j, (ArrayList)lubStack.clone());", "-\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], parameterizedType.arguments[j], (ReferenceBinding) mec, j, lubStack);", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], parameterizedType.arguments[j], (ReferenceBinding) mec, j, (ArrayList)lubStack.clone());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c29c720ff71e83de2e914c29440bec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9c5f11eddd07d2a8299046a3df03585e022db6e", "commitAfterChange": "f9e9347d6997c4c27eb7e36ed44c76f0701d7ce2", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, List lubStack)", "signatureAfterChange": "  \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, ArrayList lubStack)", "diff": ["-\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, List lubStack) {", "+\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, ArrayList lubStack) {", "-\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocationVariables[j], (ReferenceBinding) mec, j, lubStack);", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocationVariables[j], (ReferenceBinding) mec, j, (ArrayList)lubStack.clone());", "-\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], parameterizedType.arguments[j], (ReferenceBinding) mec, j, lubStack);", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], parameterizedType.arguments[j], (ReferenceBinding) mec, j, (ArrayList)lubStack.clone());"]}], "num": 41237}
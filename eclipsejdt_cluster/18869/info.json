{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "062919003efcbf4c87bf400c5835f4be", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b78af64077e21816adb45292f79b2bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "76b6aef868544c4d2f6d21575e84412f247472ae", "commitAfterChange": "406d61c9a16be8f709e407a59600ccbf947335dd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public AbstractMethodDeclaration updatedMethodDeclaration()", "signatureAfterChange": "\r public AbstractMethodDeclaration updatedMethodDeclaration()", "diff": ["-\t\t\tif (methodDeclaration.isConstructor()\r", "-\t\t\t\t&& methodDeclaration.statements != null\r", "-\t\t\t\t&& methodDeclaration.statements[0] instanceof ExplicitConstructorCall){\r", "-\t\t\t\t((ConstructorDeclaration)methodDeclaration).constructorCall = (ExplicitConstructorCall)methodDeclaration.statements[0];\r", "-\t\t\t\tint length = methodDeclaration.statements.length;\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tmethodDeclaration.statements, \r", "-\t\t\t\t\t1, \r", "-\t\t\t\t\t(methodDeclaration.statements = new Statement[length-1]),\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tlength-1);\r", "+\t\t\tif (methodDeclaration.isConstructor()) {\r", "+\t\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration)methodDeclaration;\r", "+\t\t\t\tif (methodDeclaration.statements != null\r", "+\t\t\t\t\t&& methodDeclaration.statements[0] instanceof ExplicitConstructorCall){\r", "+\t\t\t\t\tconstructor.constructorCall = (ExplicitConstructorCall)methodDeclaration.statements[0];\r", "+\t\t\t\t\tint length = methodDeclaration.statements.length;\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tmethodDeclaration.statements, \r", "+\t\t\t\t\t\t1, \r", "+\t\t\t\t\t\t(methodDeclaration.statements = new Statement[length-1]),\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlength-1);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (constructor.constructorCall == null){ // add implicit constructor call\r", "+\t\t\t\t\t\tconstructor.constructorCall = SuperReference.implicitSuperConstructorCall();\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "492b606b1decb64075765f3c2c0803db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\t\tBlock block = this.ast.newBlock();", "-\t\t\t\tblock.setSourceRange(start, end - start + 1);", "-\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != ExplicitConstructorCall.ImplicitSuper) {", "-\t\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "-\t\t\t\t}", "-\t\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "-\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\t\t\tif (statements[i] instanceof LocalDeclaration) {", "-\t\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tblock.statements().add(convert(statements[i]));", "+\t\t\t\tif (start != -1 && end != -1) {", "+\t\t\t\t\tBlock block = this.ast.newBlock();", "+\t\t\t\t\tblock.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != ExplicitConstructorCall.ImplicitSuper) {", "+\t\t\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "+\t\t\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "+\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "+\t\t\t\t\t\tif (statements[i] instanceof LocalDeclaration) {", "+\t\t\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tblock.statements().add(convert(statements[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmethodDecl.setBody(block);", "-\t\t\t\tmethodDecl.setBody(block);"]}], "num": 18869}
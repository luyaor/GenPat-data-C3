{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "760b4462df8076c112e210372f61509a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66afd6b46e77732c57b1c61639036853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tprivate void findNestedTypes(\r \t\tchar[] typeName,\r \t\tSourceTypeBinding currentType,\r \t\tScope scope)", "signatureAfterChange": "\r private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope)", "diff": ["+}\r", "+private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope) {\r", "+\tif (typeName == null) return;\r", "+\r", "+\tint typeLength = typeName.length;\r", "+\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\tswitch (scope.kind) {\r", "+\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "+\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "+\t\t\t\t\t\tSourceTypeBinding localType = ((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "+\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "+\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length) continue next;\r", "+\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false /* ignore case */)) continue next;\r", "+\r", "+\t\t\t\t\t\t\trequestor.acceptClass(\r", "+\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "+\t\t\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\t\t\tendPosition);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope);\r", "+\t\t\t\tif (typeLength == 0) return; // do not search outside the class scope if no prefix was provided\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\treturn;\r", "+\t\t}\r", "+\t\tscope = scope.parent;\r", "+\t}\r", "+}\r", "-\t}\r", "-\tprivate void findNestedTypes(\r", "-\t\tchar[] typeName,\r", "-\t\tSourceTypeBinding currentType,\r", "-\t\tScope scope) {\r", "-\t\tif (typeName == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\tint typeLength = typeName.length;\r", "-\t\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (scope.kind) {\r", "-\t\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "-\t\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "-\t\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "-\t\t\t\t\t\t\tSourceTypeBinding localType =\r", "-\t\t\t\t\t\t\t\t((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "-\t\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "-\t\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length)\r", "-\t\t\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false\r", "-\t\t\t\t\t\t\t\t\t/* ignore case */\r", "-\t\t\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\t\t\t\t\trequestor.acceptClass(\r", "-\t\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "-\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "-\t\t\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope, currentType);\r", "-\t\t\t\t\tif (typeLength == 0)\r", "-\t\t\t\t\t\treturn; // do not search outside the class scope if no prefix was provided\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\t\treturn;\r", "-\t\t\t}\r", "-\t\t\tscope = scope.parent;\r", "-\t\t}\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef09f83f41aa01fd32b069224a60b52f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tprivate void findNestedTypes(\r \t\tchar[] typeName,\r \t\tSourceTypeBinding currentType,\r \t\tScope scope)", "signatureAfterChange": "\r private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope)", "diff": ["+}\r", "+private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope) {\r", "+\tif (typeName == null) return;\r", "+\r", "+\tint typeLength = typeName.length;\r", "+\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\tswitch (scope.kind) {\r", "+\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "+\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "+\t\t\t\t\t\tSourceTypeBinding localType = ((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "+\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "+\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length) continue next;\r", "+\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false /* ignore case */)) continue next;\r", "+\r", "+\t\t\t\t\t\t\trequestor.acceptClass(\r", "+\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "+\t\t\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\t\t\tendPosition);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope);\r", "+\t\t\t\tif (typeLength == 0) return; // do not search outside the class scope if no prefix was provided\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\treturn;\r", "+\t\t}\r", "+\t\tscope = scope.parent;\r", "+\t}\r", "+}\r", "-\t}\r", "-\tprivate void findNestedTypes(\r", "-\t\tchar[] typeName,\r", "-\t\tSourceTypeBinding currentType,\r", "-\t\tScope scope) {\r", "-\t\tif (typeName == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\tint typeLength = typeName.length;\r", "-\t\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (scope.kind) {\r", "-\t\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "-\t\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "-\t\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "-\t\t\t\t\t\t\tSourceTypeBinding localType =\r", "-\t\t\t\t\t\t\t\t((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "-\t\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "-\t\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length)\r", "-\t\t\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false\r", "-\t\t\t\t\t\t\t\t\t/* ignore case */\r", "-\t\t\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\t\t\t\t\trequestor.acceptClass(\r", "-\t\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "-\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "-\t\t\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope, currentType);\r", "-\t\t\t\t\tif (typeLength == 0)\r", "-\t\t\t\t\t\treturn; // do not search outside the class scope if no prefix was provided\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\t\treturn;\r", "-\t\t\t}\r", "-\t\t\tscope = scope.parent;\r", "-\t\t}\r", "-\t}\r"]}], "num": 63913}
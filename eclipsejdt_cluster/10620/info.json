{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d66f62f7d7bd432fa0e89d6f3a1c0d59", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2031d926e0436133b13736e7320680f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "0371188bae8847b23acded54b847b2e6acb55e2f", "commitAfterChange": "70388ba5a3272ffd8da7da345ffb96bb25e84f31", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t} else if (scope.isBoxingCompatibleWith(rhsType, lhsType)", "-\t\t\t\t\t\t|| (rhsType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t\t&& !lhsType.isBaseType()", "-\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(rhsType, scope.environment().computeBoxingType(lhsType)))) {", "+\t} else if (isBoxingCompatible(rhsType, lhsType, this.expression, scope)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d08276bb8a40e5f9c9ef8784cd2d741", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "0371188bae8847b23acded54b847b2e6acb55e2f", "commitAfterChange": "70388ba5a3272ffd8da7da345ffb96bb25e84f31", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "signatureAfterChange": " public Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "diff": ["-\t} else if (scope.isBoxingCompatibleWith(caseType, switchExpressionType)", "-\t\t\t\t\t|| (caseType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t&& !switchExpressionType.isBaseType()", "-\t\t\t\t\t\t\t&& this.constantExpression.isConstantValueOfTypeAssignableToType(caseType, scope.environment().computeBoxingType(switchExpressionType)))) {", "+\t} else if (isBoxingCompatible(caseType, switchExpressionType, this.constantExpression, scope)) {"]}], "num": 10620}
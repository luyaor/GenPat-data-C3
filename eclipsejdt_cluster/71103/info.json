{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67d70fc825118251b3947e49ad264b6e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9fea86e0a3e4b3fefeab5ae774f5451", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "9312ac10572f12d694d64522443ca4a06d1e99e3", "commitAfterChange": "4d4c077960caad3dac6f1440a1eec3349b581bc3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tif (numJobs > 0) {", "-\t\tbuffer.append(\"First job: \").append(awaitingJobs[jobStart]).append('\\n'); //$NON-NLS-1$ ", "+\tfor (int i = 0; i < numJobs && i < 15; i++) {", "+\t\tbuffer.append(i).append(\" - job[\"+i+\"]: \").append(awaitingJobs[jobStart+i]).append('\\n'); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee19369a281fc93914798b6e127afd82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "5a64717913d84cfb4164c8c518f717f18f92060c", "commitAfterChange": "39c618471b3ea47080d3f5012ddba5a7f73be788", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["+\tint commentPtr = scanner.commentPtr;", "-\tfound : {", "-\t\tif ((lastAnnotationIndex = scanner.commentPtr) >= 0) { //look for @deprecated", "-\t\t\tscanner.commentPtr = -1;", "-\t\t\t// reset the comment stack, since not necessary after having checked", "-\t\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "-\t\t\t// javadoc only (non javadoc comment have negative end positions.)", "-\t\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "-\t\t\t\tbreak found;", "-\t\t\t}", "-\t\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1;", "-\t\t\t//stop is one over", "-\t\t\tchar[] comment = scanner.source;", "-\t\t\tdeprecated =", "-\t\t\t\tcheckDeprecation(", "-\t\t\t\t\tcommentSourceStart,", "-\t\t\t\t\tcommentSourceEnd,", "-\t\t\t\t\tcomment);", "-\t\t\tbreak found;", "+\tnextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){", "+\t\t//look for @deprecated into the first javadoc comment preceeding the declaration", "+\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "+\t\t// javadoc only (non javadoc comment have negative end positions.)", "+\t\tif (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {", "+\t\t\tcontinue nextComment;", "+\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "+\t\t\tcontinue nextComment;", "+\t\t}", "+\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over", "+\t\tchar[] comment = scanner.source;", "+", "+\t\tdeprecated =", "+\t\t\tcheckDeprecation(", "+\t\t\t\tcommentSourceStart,", "+\t\t\t\tcommentSourceEnd,", "+\t\t\t\tcomment);", "+\t\tbreak nextComment;", "-\tif (lastAnnotationIndex >= 0) {", "+\tif (commentPtr >= 0) {"]}], "num": 71103}
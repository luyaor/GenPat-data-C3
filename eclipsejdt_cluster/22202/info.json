{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c9e553ec05fc0dcc755757625a0c67c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f04d73da675589f15134a5dfad34fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "ded90d967b480e6d7d22b3283d60f4ed44ccc489", "commitAfterChange": "18c83b91d182e52feafdad6b2c46eb79ffb0e002", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected Hashtable warningOptions(boolean all)", "signatureAfterChange": " \tprotected Hashtable warningOptions(int kind)", "diff": ["-\tprotected Hashtable warningOptions(boolean all) {", "+\tprotected Hashtable warningOptions(int kind) {", "-\t\tHashtable optionsMap = new Hashtable(30);", "-\t\tString generate = all ? CompilerOptions.GENERATE : CompilerOptions.DO_NOT_GENERATE;", "-\t\tString warning = all ? CompilerOptions.WARNING : CompilerOptions.IGNORE;", "-\t\tString enabled = all ? CompilerOptions.ENABLED : CompilerOptions.DISABLED;", "-\t\tString preserve = all ? CompilerOptions.OPTIMIZE_OUT : CompilerOptions.PRESERVE;", "+\t\tHashtable optionsMap = null;", "+\t\tswitch (kind) {", "+\t\t\tcase 0:", "+\t\t\t\toptionsMap = JavaCore.getDefaultOptions();", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\toptionsMap = new Hashtable(350);", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (kind == 0) {", "+\t\t\t// Default set since 3.1", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE); ", "+\t\t} else {", "+\t\t\tboolean all = kind == 1;", "+\t\t\tString generate = all ? CompilerOptions.GENERATE : CompilerOptions.DO_NOT_GENERATE;", "+\t\t\tString warning = all ? CompilerOptions.WARNING : CompilerOptions.IGNORE;", "+\t\t\tString enabled = all ? CompilerOptions.ENABLED : CompilerOptions.DISABLED;", "+\t\t\tString preserve = all ? CompilerOptions.OPTIMIZE_OUT : CompilerOptions.PRESERVE;", "+\t\t\t", "+\t\t\t// Set options values", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, generate); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, generate);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, generate);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, preserve);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryElse, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, all ? JavaCore.DEFAULT_TASK_TAGS : \"\");", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, all ? JavaCore.DEFAULT_TASK_PRIORITIES : \"\");", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, enabled);", "+\t\t}", "-\t\t// Set options values", "-\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, generate); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, generate);", "-\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, generate);", "-\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, preserve);", "-\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryElse, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, all ? JavaCore.DEFAULT_TASK_TAGS : \"\");", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, all ? JavaCore.DEFAULT_TASK_PRIORITIES : \"\");", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, enabled);", "-\t\t", "-\t\t// Since 3.1 options", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingSerialVersion, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, warning); ", "+\t\t// Ignore 3.1 options", "+\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingSerialVersion, CompilerOptions.IGNORE); ", "+\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e85b7944137eb567abe295e872cbf6f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4bfbcab36fb89b16cf210b2b9fb5423da164ca27", "commitAfterChange": "f8d11ef45ee47eccac4f4a1fef52a70287187d6c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void setDeprecatedOptions(Map settings)", "signatureAfterChange": " \tprivate void setDeprecatedOptions(Map settings)", "diff": ["+\t\t", "-\t\tif (insertNewLineAfterAnnotationOption != null) { // check if deprecated 3.1 option was used", "-\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "-\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_parameter = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_local_variable = insert;", "-\t\t} else {", "-\t\t\tfinal Object insertNewLineAfterAnnotationOnMemberOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER);", "-\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) { // check if deprecated 3.4 option was used", "+\t\t", "+\t\tfinal Object insertNewLineAfterAnnotationOnMemberOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER);", "+\t\tfinal Object insertNewLineAfterAnnotationOnTypeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE);", "+\t\tfinal Object insertNewLineAfterAnnotationOnFieldOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD);", "+\t\tfinal Object insertNewLineAfterAnnotationOnMethodOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD);", "+\t\tfinal Object insertNewLineAfterAnnotationOnPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE);", "+\t\t", "+\t\tfinal Object insertNewLineAfterAnnotationOnParameterOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER);", "+\t\tfinal Object insertNewLineAfterAnnotationOnLocalVariableOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE);", "+", "+\t\tif (insertNewLineAfterAnnotationOnTypeOption == null", "+\t\t\t\t&& insertNewLineAfterAnnotationOnFieldOption == null", "+\t\t\t\t&& insertNewLineAfterAnnotationOnMethodOption == null", "+\t\t\t\t&& insertNewLineAfterAnnotationOnPackageOption == null) {", "+\t\t\t// if none of the new 3.7 options is used, fall back to the deprecated 3.4 option", "+\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) {", "-\t\t\t} else { // otherwise use new options", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnTypeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnTypeOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_type = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnTypeOption);", "+\t\t\t\t", "+\t\t\t\t// and use the other 3.4 options if available", "+\t\t\t\tif (insertNewLineAfterAnnotationOnParameterOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_parameter = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnParameterOption);", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnFieldOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnFieldOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_field = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnFieldOption);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnLocalVariableOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_local_variable = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnLocalVariableOption);", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnMethodOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnMethodOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_method = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMethodOption);", "-\t\t\t\t}", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnPackageOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_package = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnPackageOption);", "+\t\t\t\t", "+\t\t\t} else if (insertNewLineAfterAnnotationOnParameterOption == null", "+\t\t\t\t\t&& insertNewLineAfterAnnotationOnLocalVariableOption == null) {", "+\t\t\t\t// if none of the new 3.4 options is used, fall back to the deprecated 3.1 option", "+\t\t\t\tif (insertNewLineAfterAnnotationOption != null) {", "+\t\t\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_parameter = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_local_variable = insert;", "-\t\t\tfinal Object insertNewLineAfterAnnotationOnParameterOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER);", "+\t\t} else { // otherwise use new 3.7 options if available", "+\t\t\tif (insertNewLineAfterAnnotationOnTypeOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_type = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnTypeOption);", "+\t\t\t}", "+\t\t\tif (insertNewLineAfterAnnotationOnFieldOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_field = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnFieldOption);", "+\t\t\t}", "+\t\t\tif (insertNewLineAfterAnnotationOnMethodOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_method = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMethodOption);", "+\t\t\t}", "+\t\t\tif (insertNewLineAfterAnnotationOnPackageOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_package = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnPackageOption);", "+\t\t\t}", "+\t\t\t// and the other 3.4 options if available", "-\t\t\tfinal Object insertNewLineAfterAnnotationOnLocalVariableOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE);"]}], "num": 22202}
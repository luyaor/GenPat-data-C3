{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ede64a566afadc4631efaf0fc6d6dccc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015220671cf639a7f67c9354aa27e8e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "65e1f9794af1b0b3028b4c4ccf6c8c82d9c2fa61", "commitAfterChange": "a443bde4ac794ade15630c52c634e854501ba28b", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || this.needSpace) && !isHtmlTag && !textOnNewLine;", "-\t\t    \t\tif (insertSpace) {", "-\t\t    \t\t\ttokensBuffer.append(' ');", "-\t\t    \t\t}", "-\t\t\t\t\tint restart = this.scanner.startPosition;", "-\t\t\t\t\tthis.scanner.resetTo(restart, textEnd);", "-\t\t    \t\tchar ch = (char) this.scanner.getNextChar();", "-\t\t\t\t\twhile (!this.scanner.atEnd() && !ScannerHelper.isWhitespace(ch)) {", "-\t\t\t\t\t\ttokensBuffer.append(ch);", "-\t\t\t\t\t\tif (this.scanner.atEnd()) {", "-\t\t\t\t\t\t\tpreviousToken = TerminalTokens.TokenNameEOF;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\trestart = this.scanner.currentPosition;", "-\t\t\t\t\t\tch = (char) this.scanner.getNextChar();", "-\t\t\t\t\t}", "-\t\t\t\t\t// restart at the beginning of the whitespace", "-\t\t\t\t\tif (this.scanner.atEnd()) {", "-\t\t\t\t\t\ttokensBuffer.append(ch);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.scanner.resetTo(restart, textEnd);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontinue;", "+\t\t\t\t\ttoken = consumeInvalidToken(textEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcf52459fb70cef7eb83c2e33b9870d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "65e1f9794af1b0b3028b4c4ccf6c8c82d9c2fa61", "commitAfterChange": "a443bde4ac794ade15630c52c634e854501ba28b", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["-\t    \t\tif (previousToken == -1 || previousToken == TerminalTokens.TokenNameWHITESPACE) {", "-\t    \t\t\ttokensBuffer.append(' ');", "-\t    \t\t}", "-\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, commentEnd);", "-\t    \t\tchar ch = (char) this.scanner.getNextChar();", "-\t\t\t\tpreviousToken = TerminalTokens.TokenNameWHITESPACE;", "-\t\t\t\twhile (!ScannerHelper.isWhitespace(ch)) {", "-\t\t\t\t\ttokensBuffer.append(ch);", "-\t\t\t\t\tif (this.scanner.atEnd()) {", "-\t\t\t\t\t\tpreviousToken = TerminalTokens.TokenNameEOF;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tch = (char) this.scanner.getNextChar();", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "+\t    \t\ttoken = consumeInvalidToken(commentEnd);"]}], "num": 6824}
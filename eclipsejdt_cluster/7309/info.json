{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc77eb6d1f37309c0c3342d9a3782b21", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a9f64f83c3668b34578b3bf26d0302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "1438111baa39ba1a30117b19ff4ad6ece4a69fe1", "commitAfterChange": "a40625e8b71686fab9f6c8b263e48ade1ab498db", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "signatureAfterChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "diff": ["-\t\t\t\t// in this case we don't yet have the solution, compute it now:", "+\t\t\t\t// in this case we may not yet have the solution(?, get or compute it now:", "+\t\t\t\tSolution solution = (Solution) this.solutionsPerTargetType.get(targetType);", "-\t\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method);", "+\t\t\t\t\tif (solution != null && solution.bounds != null)", "+\t\t\t\t\t\tbounds = solution.bounds;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method.shallowOriginal());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36730795e160b75fb44e5094c0b6c893", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "19f32631b872a84a41dc65721cfbc0bd2ac8a5b6", "commitAfterChange": "0a7e159e5583b9d90c024b9f588fa970acb3427f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\tpublic boolean addBound(TypeBound bound)", "signatureAfterChange": " \t\tpublic boolean addBound(TypeBound bound)", "diff": ["-\t\t\t\t\tif (this.superBounds == null) this.superBounds = new HashSet<TypeBound>();", "+\t\t\t\t\tif (this.superBounds == null) this.superBounds = new HashSet<>();", "-\t\t\t\t\tif (this.sameBounds == null) this.sameBounds = new HashSet<TypeBound>();", "+\t\t\t\t\tif (this.sameBounds == null) this.sameBounds = new HashSet<>();", "-\t\t\t\t\tif (this.subBounds == null) this.subBounds = new HashSet<TypeBound>();", "+\t\t\t\t\tif (this.subBounds == null) this.subBounds = new HashSet<>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8546a7d3bf382dcc4f3d21e3e7111e68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "a8ae4c61c3fd8e7af5944aa40683b300c7cbf9e8", "commitAfterChange": "06d5ad0c6e4971f283c2f47bfc7f9df941ae34e8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\tpublic void addBound(TypeBound bound)", "signatureAfterChange": " \t\tpublic void addBound(TypeBound bound)", "diff": ["-\t\t\t\t\tif (this.superBounds == null) this.superBounds = new HashSet();", "+\t\t\t\t\tif (this.superBounds == null) this.superBounds = new HashSet<TypeBound>();", "-\t\t\t\t\tif (this.sameBounds == null) this.sameBounds = new HashSet();", "+\t\t\t\t\tif (this.sameBounds == null) this.sameBounds = new HashSet<TypeBound>();", "-\t\t\t\t\tif (this.subBounds == null) this.subBounds = new HashSet();", "+\t\t\t\t\tif (this.subBounds == null) this.subBounds = new HashSet<TypeBound>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a59d70faebac78f9e460b38e02cd43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "57e8dd41219d846363c918d62edb5007994c5c79", "commitAfterChange": "a6d23e686845a8f3a37751a7b350298fb34c87e5", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "diff": ["-    \t\t\t\t\tint len = 2 + (otherUBounds != null ? otherUBounds.length : 0) + otherBBounds.length;", "+    \t\t\t\t\tint len = 1 + (otherUBounds != null ? otherUBounds.length : 0) + otherBBounds.length;", "+    \t\t\t\t\tif (typeParameters[i].firstBound != null)", "+    \t\t\t\t\t\tlen++;", "-\t    \t\t\t\t\tallBounds[idx++] = (ReferenceBinding) typeParameters[i].firstBound;", "+\t    \t\t\t\t\tif (typeParameters[i].firstBound != null)", "+\t    \t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) typeParameters[i].firstBound;"]}], "num": 7309}
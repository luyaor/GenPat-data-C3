{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9b60f71a7a787397f95c4bb835aa343", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21463e6aa7e3b2187b7100964f2c26c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "9fb010ce7afa327f224b8f5c358d67cd81a71eb3", "commitAfterChange": "06b5c10c4e48c5c78350c25c25116efbbb7c209c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public TypeHierarchy(IType type, IJavaSearchScope scope, boolean computeSubtypes) throws JavaModelException", "signatureAfterChange": " public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes) throws JavaModelException", "diff": ["+ */", "+public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes) throws JavaModelException {", "+\tthis(type, SearchEngine.createJavaSearchScope(new IJavaElement[] {project}), computeSubtypes);", "+\tthis.project = project;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc08425612871c3edc798d3ecc60175", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " void initialize(boolean reuseExistingFile) throws IOException", "signatureAfterChange": " void initialize(boolean reuseExistingFile) throws IOException", "diff": ["-\tif (this.indexFile.exists()) {", "+\tif (this.indexLocation.exists()) {", "-\t\t\tFileInputStream stream = new FileInputStream(this.indexFile);", "+\t\t\tInputStream stream = this.indexLocation.getInputStream();", "-\t\tif (!this.indexFile.delete()) {", "+\t\tif (!this.indexLocation.delete()) {", "-\t\t\t\tSystem.out.println(\"initialize - Failed to delete index \" + this.indexFile); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to delete index \" + this.indexFile); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"initialize - Failed to delete index \" + this.indexLocation); //$NON-NLS-1$", "+\t\t\tthrow new IOException(\"Failed to delete index \" + this.indexLocation); //$NON-NLS-1$", "-\tif (this.indexFile.createNewFile()) {", "-\t\tFileOutputStream stream = new FileOutputStream(this.indexFile, false);", "+\tif (this.indexLocation.createNewFile()) {", "+\t\tFileOutputStream stream = new FileOutputStream(this.indexLocation.getIndexFile(), false);", "-\t\t\tSystem.out.println(\"initialize - Failed to create new index \" + this.indexFile); //$NON-NLS-1$", "-\t\tthrow new IOException(\"Failed to create new index \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"initialize - Failed to create new index \" + this.indexLocation); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Failed to create new index \" + this.indexLocation); //$NON-NLS-1$"]}], "num": 51084}
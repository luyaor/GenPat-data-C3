{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3bae25ebd845416c629b2fc85bdaa18", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa3e07b130cec847870572595cad914", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "abd333621a0cbd2492673b0e887a888245d2d663", "commitAfterChange": "0adf7a4e0894d18d3979e493aafe00dfa5c14f8d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void setClasspath(IPath projectPath, IPath[] packageFragmentRootsPath)", "signatureAfterChange": "  \tpublic void setClasspath(IPath projectPath, IClasspathEntry[] entries)", "diff": ["-\tpublic void setClasspath(IPath projectPath, IPath[] packageFragmentRootsPath) {", "+", "+\tpublic void setClasspath(IPath projectPath, IClasspathEntry[] entries) {", "-\t\t\tIJavaProject javaProject =", "-\t\t\t\t(IJavaProject) getProject(projectPath).getNature(JavaCore.NATURE_ID);", "-\t\t\tIClasspathEntry[] entries =", "-\t\t\t\tnew IClasspathEntry[packageFragmentRootsPath.length];", "-\t\t\tfor (int i = 0; i < packageFragmentRootsPath.length; ++i) {", "-\t\t\t\tIPath path = packageFragmentRootsPath[i];", "-\t\t\t\tif (\"jar\".equals(path.getFileExtension()) //$NON-NLS-1$", "-\t\t\t\t\t|| \"zip\".equals(path.getFileExtension())) { //$NON-NLS-1$", "-\t\t\t\t\tentries[i] = JavaCore.newLibraryEntry(path, null, null, false);", "-\t\t\t\t} else if (projectPath.isPrefixOf(packageFragmentRootsPath[i])) {", "-\t\t\t\t\tentries[i] = JavaCore.newSourceEntry(path);", "-\t\t\t\t} else {", "-\t\t\t\t\tentries[i] = JavaCore.newProjectEntry(path);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tIJavaProject javaProject = JavaCore.create(getProject(projectPath));", "-\t\t} catch (CoreException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tcheckAssertion(\"CoreException\", false); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdf3f31c5ee98106b26b49879c48df56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8d1d658761d5e634e1f9986cdb54c46ecd8cbc2e", "commitAfterChange": "f4d9deb41a71301595419326392826169e31b674", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["-\t\tif (this.tiebreakMethod == null) {", "-\t\t\tTypeVariableBinding[] originalVariables = this.originalMethod.typeVariables;", "-\t\t\tint length = originalVariables.length;", "-\t\t\tTypeBinding[] newArguments = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "-\t\t\t\tif (originalVariable.boundsCount() <= 1) {", "-\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(originalVariable.upperBound(), false /*do not force conversion of enclosing types*/);", "-\t\t\t\t} else {", "-\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(", "-\t\t\t\t\t\t\t// use an intersection type to retain full bound information", "-\t\t\t\t\t\t\tthis.environment.createWildcard(null, 0, originalVariable.superclass(), originalVariable.superInterfaces(), Wildcard.EXTENDS), false /*do not force conversion of enclosing types*/);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.tiebreakMethod = this.environment.createParameterizedGenericMethod(this.originalMethod, newArguments);", "-\t\t}", "+\t\tif (this.tiebreakMethod == null)", "+\t\t\tthis.tiebreakMethod = this.originalMethod.asRawMethod(this.environment);"]}], "num": 16732}
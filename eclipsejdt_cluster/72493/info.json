{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79ed91425abb3327168c7867c5c14033", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44cc0da8b73bfc69c792d1f61514e0e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t// nothing to do. The private access will be managed through the code generation\r", "+\t// The private access will be managed through the code generation\r", "+\r", "+\t// if the binding declaring class is not visible, need special action\r", "+\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\tif (binding.declaringClass != this.receiverType\r", "+\t\t&& !this.receiverType.isArrayType()\r", "+\t\t&& binding.declaringClass != null // array.length\r", "+\t\t&& binding.constant == NotAConstant\r", "+\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t&& binding.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "+\t\t\t|| !binding.declaringClass.canBeSeenBy(currentScope))){\r", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(binding, (ReferenceBinding) this.receiverType);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d325688b75aa7141cd32b8b457ae1f1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t// nothing to do. The private access will be managed through the code generation\r", "+\t// The private access will be managed through the code generation\r", "+\r", "+\t// if the binding declaring class is not visible, need special action\r", "+\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\tif (binding.declaringClass != this.receiverType\r", "+\t\t&& !this.receiverType.isArrayType()\r", "+\t\t&& binding.declaringClass != null // array.length\r", "+\t\t&& binding.constant == NotAConstant\r", "+\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t&& binding.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "+\t\t\t|| !binding.declaringClass.canBeSeenBy(currentScope))){\r", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(binding, (ReferenceBinding) this.receiverType);\r", "+\t}\r"]}], "num": 72493}
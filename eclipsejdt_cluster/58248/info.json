{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da63887b2a677380c10434f7fad23737", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d5b5d5553cc518755fbe09812fb537", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["-\tif (severity == ProblemSeverities.Ignore || this.policy.ignoreAllErrors())", "+\tif (severity == ProblemSeverities.Ignore)", "+", "+\t boolean mandatory = (severity & (ProblemSeverities.Error | ProblemSeverities.Optional)) == ProblemSeverities.Error;", "+\t if (this.policy.ignoreAllErrors()) { ", "+\t\t // Error is not to be exposed, but clients may need still notification as to whether there are silently-ignored-errors.", "+\t\t if (mandatory)", "+\t\t\t referenceContext.tagAsHavingIgnoredMandatoryErrors(problemId);", "+\t\t return;", "+\t }", "-\t\t\tboolean mandatory = ((severity & ProblemSeverities.Optional) == 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643511e87c564261c42e50dec1db5669", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["-\tif (severity == ProblemSeverities.Ignore || this.policy.ignoreAllErrors())", "+\tif (severity == ProblemSeverities.Ignore)", "+", "+\t boolean mandatory = (severity & (ProblemSeverities.Error | ProblemSeverities.Optional)) == ProblemSeverities.Error;", "+\t if (this.policy.ignoreAllErrors()) { ", "+\t\t // Error is not to be exposed, but clients may need still notification as to whether there are silently-ignored-errors.", "+\t\t if (mandatory)", "+\t\t\t referenceContext.tagAsHavingIgnoredMandatoryErrors(problemId);", "+\t\t return;", "+\t }", "-\t\t\tboolean mandatory = ((severity & ProblemSeverities.Optional) == 0);"]}], "num": 58248}
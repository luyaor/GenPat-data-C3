{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e222ab013b73a62974ede07c4134ee6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1332ed340bd70d17543242425ca10b16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "fb92cfb822669ddb00db1cf41e3bdb1057d4d00d", "commitAfterChange": "00c13f2feec2211d8da2f8282a37167ca349b1b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " SearchPattern currentPattern()", "diff": ["-}", "-public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\tthis.resetQuery();", "-\tSimpleSet intersectedNames = null;", "-\ttry {", "-\t\tindex.startQuery();", "-\t\tdo {", "-\t\t\tSearchPattern pattern = ((InternalSearchPattern) this).currentPattern();", "-\t\t\tEntryResult[] entries = ((InternalSearchPattern)pattern).queryIn(index);", "-\t\t\tif (entries == null) return;", "-", "-\t\t\tSearchPattern decodedResult = pattern.getBlankPattern();", "-\t\t\tSimpleSet newIntersectedNames = new SimpleSet(3);", "-\t\t\tfor (int i = 0, l = entries.length; i < l; i++) {", "-\t\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\t\t\t\tEntryResult entry = entries[i];", "-\t\t\t\tdecodedResult.decodeIndexKey(entry.getWord());", "-\t\t\t\tif (pattern.matchesDecodedKey(decodedResult)) {", "-\t\t\t\t\tString[] names = entry.getDocumentNames(index);", "-\t\t\t\t\tif (intersectedNames != null) {", "-\t\t\t\t\t\tfor (int j = 0, n = names.length; j < n; j++)", "-\t\t\t\t\t\t\tif (intersectedNames.includes(names[j]))", "-\t\t\t\t\t\t\t\tnewIntersectedNames.add(names[j]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfor (int j = 0, n = names.length; j < n; j++)", "-\t\t\t\t\t\t\tnewIntersectedNames.add(names[j]);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tif (newIntersectedNames.elementSize == 0) return;", "-\t\t\tintersectedNames = newIntersectedNames;", "-\t\t} while (this.hasNextQuery());", "-\t} finally {", "-\t\tindex.stopQuery();", "-", "-\tString containerPath = index.containerPath;", "-\tObject[] names = intersectedNames.values;", "-\tfor (int i = 0, l = names.length; i < l; i++)", "-\t\tif (names[i] != null)", "-\t\t\t((InternalSearchPattern) this).acceptMatch((String) names[i], containerPath, null/*no pattern*/, requestor, participant, scope); // AndPatterns cannot provide the decoded result", "+SearchPattern currentPattern() {", "+\treturn this.patterns[this.current++];", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da3feb6811496c30049d03112a1b601", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/pattern/InternalSearchPattern.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor monitor) throws IOException", "diff": ["-\t */", "-\tpublic void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\tIndexInput input = new BlocksIndexInput(index.getIndexFile());", "-\t\ttry {", "-\t\t\tinput.open();", "-\t\t\tfindIndexMatches(input, requestor, participant, scope, progressMonitor);", "-\t\t} finally {", "-\t\t\tinput.close();", "-\t\t}", "-\t}", "+ */", "+public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor monitor) throws IOException {", "+\tif (monitor != null && monitor.isCanceled()) throw new OperationCanceledException();", "+\ttry {", "+\t\tindex.startQuery();", "+\t\tSearchPattern pattern = currentPattern();", "+\t\tEntryResult[] entries = pattern.queryIn(index);", "+\t", "+\t\tSearchPattern decodedResult = pattern.getBlankPattern();", "+\t\tfor (int i = 0, l = entries.length; i < l; i++) {", "+\t\t\tif (monitor != null && monitor.isCanceled()) throw new OperationCanceledException();", "+\t", "+\t\t\tEntryResult entry = entries[i];", "+\t\t\tdecodedResult.decodeIndexKey(entry.getWord());", "+\t\t\tif (pattern.matchesDecodedKey(decodedResult)) {", "+\t\t\t\tString[] names = entry.getDocumentNames(index);", "+\t\t\t\tfor (int j = 0, n = names.length; j < n; j++)", "+\t\t\t\t\tacceptMatch(names[j], decodedResult, requestor, participant, scope);", "+\t} finally {", "+\t\tindex.stopQuery();", "+}"]}], "num": 18383}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb9871e9919c5c50a5f57d86ca00e9ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5290a4e252b4e1d9fc50e9e1c23d7c95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "bf51a4aa47223fadb7f3b17b32863e3b3b80475e", "commitAfterChange": "8319f0253498a6982b033633a715ec109582ac03", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "diff": ["-//\t\twhile (sourceTypes[0].getEnclosingType() != null)", "-//\t\t\tsourceTypes[0] = sourceTypes[0].getEnclosingType();", "+\t\twhile (sourceTypes[0].getEnclosingType() != null) {", "+\t\t\tsourceTypes[0] = sourceTypes[0].getEnclosingType();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d1fb3fb25e3cf574e6d3865531a7ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateOptimizedStringBufferCreation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "signatureAfterChange": " \tpublic void generateOptimizedStringBufferCreation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "diff": ["-\t\t\t\tcodeStream.ldc(constant.stringValue());", "+\t\t\t\tString stringValue = constant.stringValue();", "+\t\t\t\tif (stringValue.length() == 0) {  // optimize \"\"+<str> ", "+\t\t\t\t\tcodeStream.invokeStringBufferDefaultConstructor();", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tcodeStream.ldc(stringValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87db92143ce9f3b525df860a17eadcde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tpublic MethodBinding getStaticFactory (ReferenceBinding allocationType, ReferenceBinding originalEnclosingType, TypeBinding[] argumentTypes, final InvocationSite allocationSite)", "signatureAfterChange": " \tpublic MethodBinding getStaticFactory (ReferenceBinding allocationType, ReferenceBinding originalEnclosingType, TypeBinding[] argumentTypes, final Invocation allocationSite)", "diff": ["-\tpublic MethodBinding getStaticFactory (ReferenceBinding allocationType, ReferenceBinding originalEnclosingType, TypeBinding[] argumentTypes, final InvocationSite allocationSite) {", "+\tpublic MethodBinding getStaticFactory (ReferenceBinding allocationType, ReferenceBinding originalEnclosingType, TypeBinding[] argumentTypes, final Invocation allocationSite) {", "-\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(staticFactories[i], argumentTypes, allocationSite);", "+\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(staticFactories[i], argumentTypes, allocationSite, APPLICABILITY);", "+\t\t}", "+\t\tif (visibleIndex == 1) {", "+\t\t\t// 1.8: Give inference a chance to perform outstanding tasks (18.5.2):", "+\t\t\tvisible[0] = inferInvocationType(allocationSite, visible[0], argumentTypes);"]}], "num": 51248}
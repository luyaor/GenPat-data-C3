{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1193cb36f6bbf2d89e1d62dc32e938c3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03f7d40eefbbb0e111d7dbe78ff71640", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test056y()", "signatureAfterChange": " public void test056y()", "diff": ["-\t\t\t\"                return reader23;\\n\" +", "+\t\t\t\"                return reader23;\\n\" + // responsibility now lies at the caller of this method", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 17)\\n\" +", "-\t\t\"\tfinal FileReader reader23 = new FileReader(\\\"file\\\");\\n\" +", "-\t\t\"\t                 ^^^^^^^^\\n\" +", "-\t\t\"Potential resource leak: 'reader23' may not be closed\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f213db4d1eac9203d132386e083bab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "ee44380e8d52a97dffe90bb61e33a1e5ccfb30e8", "commitAfterChange": "6f17c126ff89ea2e3c03f832be8ed25d26113551", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " public void test384750z7()", "signatureAfterChange": " public void test384750z7()", "diff": ["-\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\t\"\tI i = X::foo;\\n\" + ", "-\t\t\t\t\"\t      ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09f336ef1f4b944233392d6404e03a47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 721, "methodNumberAfterChange": 721, "signatureBeforeChange": " public void test715()", "signatureAfterChange": " public void test715()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\"\tComparable<String> c = (java.util.List)bar(5, 5.0);\\n\" + ", "-\t\t\"\t                        ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bc0c94949899e24564c7a6f6d824d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "332e6bf80afa0c9205b8423548382e869a9bd2ee", "commitAfterChange": "33bc34a3821853585e57fb8a6558511c786d3cdf", "methodNumberBeforeChange": 337, "methodNumberAfterChange": 337, "signatureBeforeChange": " public void test0955_assert_combined()", "signatureAfterChange": " public void test0955_assert_combined()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"\tif (o == null) { };\\n\" + ", "-\t\t\"\t               ^^^\\n\" + ", "-\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e8c1df90d5a4bd7b87771fea3a8e11b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "44b2ae0b9ea2797846c8f36e5cf3be1acaab875d", "commitAfterChange": "0492d8e41c1aba4d81d43f5d644f4506ed10c8ab", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": " public void test443467() throws Exception", "signatureAfterChange": " public void test443467() throws Exception", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in BuildIdeMain.java (at line 9)\\n\" + ", "-\t\t\"\tfilter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + ", "-\t\t\"\t                                                 ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The target type of this expression must be a functional interface\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14317c6f8f6ceb2a345e4cfc8281ffae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d0b9fa49059380aa33c580ecd386773dc780db14", "commitAfterChange": "297d21321fa4e0f1df8ca75fc42ba95a96cc17a8", "methodNumberBeforeChange": 693, "methodNumberAfterChange": 693, "signatureBeforeChange": " public void test0675()", "signatureAfterChange": " public void test0675()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tStore<? extends Key<? extends T>> store2;\\n\" + ", "-\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends T is not a valid substitute for the bounded parameter <E extends Key<E>> of the type Key<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d9ec82250ffc6051154d6cc46f8db59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "332e6bf80afa0c9205b8423548382e869a9bd2ee", "commitAfterChange": "33bc34a3821853585e57fb8a6558511c786d3cdf", "methodNumberBeforeChange": 338, "methodNumberAfterChange": 338, "signatureBeforeChange": " public void test0956_assert_combined()", "signatureAfterChange": " public void test0956_assert_combined()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tif (o == null) { };\\n\" +", "-\t\t\"\t               ^^^\\n\" +", "-\t\t\"Dead code\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ecfdcd504b0a13f97fdde770f0fd12e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16dca0cdbe17832dfb29f0072e09feca8f8a7af6", "commitAfterChange": "eb9694e0519c131ba8708de11ae2ad1c0157552f", "methodNumberBeforeChange": 736, "methodNumberAfterChange": 736, "signatureBeforeChange": " public void test0730()", "signatureAfterChange": " public void test0730()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\"\t((SubInterface) this.x).getString();\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The cast from X.SuperInterface<capture-of ? extends X.SuperInterface> to X.SubInterface is actually checking against the erased type X.SubInterface\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2023ab824f01dce9bead47ce47539761", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 902, "methodNumberAfterChange": 902, "signatureBeforeChange": " public void test0881()", "signatureAfterChange": " public void test0881()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "-\t\t\"\tString s = (String) Foo.foo();\\n\" +", "-\t\t\"\t                        ^^^\\n\" +", "-\t\t\"Bound mismatch: The generic method foo() of type Foo is not applicable for the arguments (). The inferred type List<List<U>> is not a valid substitute for the bounded parameter <U extends List<U>>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "319fab8639dfd8212963fa6bdc02069a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "commitAfterChange": "d40b3c41bcebac07f42f1f11c9b679087cfd1515", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug456487b()", "signatureAfterChange": " public void testBug456487b()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"7. ERROR in OTest.java (at line 11)\\n\" + ", "-\t\t\"\t@NonNull String s = os.orElse(null);\\n\" + ", "-\t\t\"\t                    ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35c49472b064bd9112620395edae8396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 1279, "methodNumberAfterChange": 1279, "signatureBeforeChange": " public void test1245()", "signatureAfterChange": " public void test1245()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"\tstatic private class Private {}\\n\" + ", "-\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\"The type Secondary.Private is never used locally\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c2da6a7d27edd8c7c8987da68d9266", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void test178()", "signatureAfterChange": " \tpublic void test178()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\t} else if (t instanceof X) {\\n\" + ", "-\t\t\t\"\t                        ^\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aea8b6b3bc3fcfcf377fce5a7dc1c6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 749, "methodNumberAfterChange": 749, "signatureBeforeChange": " public void test743()", "signatureAfterChange": " public void test743()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\"\t@Override public Nested<B> getNested3() { // sub\\n\" + ", "-\t\t\"\t                           ^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method getNested3() of type TestGeneric3<A>.Nested<B> must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c26ab2c3d625a70ceb211b72c6fa264", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestMixed.java", "commitBeforeChange": "9e86c25c450b0124f857c2c627328481b85f445c", "commitAfterChange": "2c3ad81991d5b873d094259b6960d57a22dd0f08", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tpublic void test031()", "signatureAfterChange": " \t \tpublic void test031()", "diff": ["-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in test\\\\X.java (at line 12)\\n\"", "-\t\t\t\t+ \"\tpublic int x\\n\"", "-\t\t\t\t+ \"\t           ^\\n\"", "-\t\t\t\t+ \"Annotation: Missing javadoc comment for public declaration\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c9f475102e2fa941d4342bcf562f2da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "-\t\t\t\"\t         ^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "-\t\t\t\"\t         ^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "-\t\t\t\"\t         ^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "-\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "+\t\t\t\t\"\t         ^^^\\n\" +", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "+\t\t\t\t\"\t         ^^^\\n\" +", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "+\t\t\t\t\"\t         ^^^\\n\" +", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "+\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "558c880af651d48c6c353152496febe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "commitAfterChange": "6422cf28e195cf583d84cd9a0d044425ae0a797f", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test054()", "signatureAfterChange": " \tpublic void test054()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tprint(X.this.t);\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf64a9147ae82e7d396f13d22ca4aae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5cd6d58769a50d0c17684a6868642380a176871e", "commitAfterChange": "c2673608acb4322092a3f06755b8abd4c15cab30", "methodNumberBeforeChange": 430, "methodNumberAfterChange": 430, "signatureBeforeChange": " \tpublic void test428()", "signatureAfterChange": " \tpublic void test428()", "diff": ["-\t\t\t\t\"\t\t\tLong get() {\\n\" + // TODO (kent) should not issue warning for unchecked conversion", "+\t\t\t\t\"\t\t\tLong get() {\\n\" +", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tLong get() {\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Type safety: The return type Long of the method get() of type new A<Long>(){} needs unchecked conversion to conform to the return type T of inherited method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622a1edf327d22189ac9c7684310796d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6d9cd9b246f8b8740f4a501085a32633b2b6c2af", "commitAfterChange": "470afdfff602b441f9a45a7d903230534423c9ca", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " \tpublic void test559()", "signatureAfterChange": " \tpublic void test559()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\t\"\tboolean b1= (Boolean) c.getT();\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getT() belongs to the raw type Cell. References to generic type Cell<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66d6239309dcaf6d3c798ed6e167003d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1b6654cd80f53a2bb9b675efa0032a1013c4e291", "commitAfterChange": "0ab412e84edca675e938008720ddbff9326e27ed", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 306, "signatureBeforeChange": " public void test157()", "signatureAfterChange": " public void test157()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\"\tpublic abstract class X extends Root implements A, B {\\n\" + ", "-\t\t\"\t                      ^\\n\" + ", "-\t\t\"The return type is incompatible with B.foo(), A.foo()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68fa3acb8e686e339989455e02ce5b62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test017()", "signatureAfterChange": " public void test017()", "diff": ["-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\t\"\tI i5 = () -> {};\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type Integer\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69adfddd6c46f0aad302d4b2779ad03c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 315, "signatureBeforeChange": " \tpublic void test311()", "signatureAfterChange": " \tpublic void test311()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tthis.foo((List)null);\\n\" + ", "-\t\t\t\"\t          ^^^^\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70e46917115b971b32a8302ff23dc94f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 340, "methodNumberAfterChange": 340, "signatureBeforeChange": " \tpublic void test336()", "signatureAfterChange": " \tpublic void test336()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 17)\\n\" + ", "-\t\t\t\"\treturn MyClass.myStaticMethod(this, IMyInterface.class);\\n\" + ", "-\t\t\t\"\t       ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: MyClass is a raw type. References to generic type MyClass<Type> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7116523b86fd6e4dc1b152719610422f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 631, "methodNumberAfterChange": 631, "signatureBeforeChange": " \tpublic void test0612()", "signatureAfterChange": " \tpublic void test0612()", "diff": ["-    \t\t\"----------\\n\" +", "-    \t\t\"3. WARNING in X.java (at line 7)\\n\" +", "-    \t\t\"\tprivate Bucket[] buckets = new X.Bucket[100];\\n\" +", "-    \t\t\"\t                 ^^^^^^^\\n\" +", "-    \t\t\"The field X<K,V>.buckets is never read locally\\n\" +", "-    \t\t\"----------\\n\");", "+\t    \t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7243e0a21221fba8c7c8972d7e830c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "9fd5428ce736a6251b7049cd29424ae48e74034b", "commitAfterChange": "462fdbe66c95fe469d26ca4c9a495870e5915168", "methodNumberBeforeChange": 516, "methodNumberAfterChange": 517, "signatureBeforeChange": " public void testBug336428e()", "signatureAfterChange": " public void testBug336428e()", "diff": ["+/* In general it's safer *not* to assume that o1 is null on every iteration:", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ad5ce3af084a3736921845059f4aae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "442cfec5b0ec5f78f613dac66413d02e26889f22", "commitAfterChange": "d42d74dc89c043581d93318957eb6b633b137649", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": " \tpublic void test178()", "signatureAfterChange": " \tpublic void test178()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"\t} else if (t instanceof X) {\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Incompatible conditional operand types T and X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf5ca736f6ee362670fb00c7724fcb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test044()", "signatureAfterChange": " \tpublic void test044()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tclass XS extends X { @Override int foo() {} }\\n\" + ", "-\t\t\t\"\t                                   ^^^^^\\n\" + ", "-\t\t\t\"The method foo() of type XS must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0e4433ac88c19d142c04dcd15b8492c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "6c3b6971f88c7f6d5be3c70fdaf936700dc7f94b", "commitAfterChange": "dfd4f51ecdd2928f82bb07183b33c60122015348", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "\r \tpublic void test067() throws Exception", "signatureAfterChange": "\r \tpublic void test067() throws Exception", "diff": ["-\t\t\t\t\"----------\\n\" + \r", "-\t\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + \r", "-\t\t\t\t\"\tObject o = x.new <String> @Marker X() {};\\n\" + \r", "-\t\t\t\t\"\t                          ^^^^^^^\\n\" + \r", "-\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a358f52dcfb1420376bdb46b048499da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "0a99f9e5758f5532911cc703fed29608d31e0690", "commitAfterChange": "6b1f52d06754e9410aa789dbd826f9d303675356", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 132, "signatureBeforeChange": " public void test0423_while()", "signatureAfterChange": " public void test0423_while()", "diff": ["-// the second message looks a bit strange", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\"\to = null;\\n\" + ", "-\t\t\"\t^\\n\" + ", "-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3688e92b81604a9f6106030c8ec6e26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\t\"\tI i5 = () -> {};\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa26c8256fc09bca0def3cd2a2ea1b71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "commitAfterChange": "6422cf28e195cf583d84cd9a0d044425ae0a797f", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 272, "signatureBeforeChange": "\t\t \tpublic void test268()", "signatureAfterChange": "\t\t \tpublic void test268()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"\treturn list.toArray(new X[list.size()]);\\n\" + ", "-\t\t\t\"\t                        ^\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adcb2da4cbb02e8259f63506e925d48c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void test018()", "signatureAfterChange": "  \tpublic void test018()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tSystem.out.println((int)f);\\n\" + ", "-\t\t\t\"\t                        ^\\n\" + ", "-\t\t\t\"The expression of type Float is unboxed into int\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2e3ac200e468780618b9145b95819f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "abe74916372d719b72419b47087d6b9f61b3cd7b", "commitAfterChange": "dc113ad044e12f76b3238e4c08bccb6a22c6845b", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " \tpublic void test0178()", "signatureAfterChange": " \tpublic void test0178()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\t} else if (t instanceof X) {\\n\" + ", "-\t\t\t\"\t                        ^\\n\" + ", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afc1b1e896040175b3db36fa3943d958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "9fd5428ce736a6251b7049cd29424ae48e74034b", "commitAfterChange": "462fdbe66c95fe469d26ca4c9a495870e5915168", "methodNumberBeforeChange": 515, "methodNumberAfterChange": 515, "signatureBeforeChange": " public void testBug336428d()", "signatureAfterChange": " public void testBug336428d()", "diff": ["+/* In general it's safer *not* to assume that o1 is null on every iteration (see also testBug336428d2):", "-\t\t\"----------\\n\");", "+ */", "+\t\t\"----------\\n\"", "+\t\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1da7ceebdd75acf095f1775c7b7441c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 293, "methodNumberAfterChange": 293, "signatureBeforeChange": " public void test144()", "signatureAfterChange": " public void test144()", "diff": ["-\t\t\"Type safety: The return type List<Pet> for getPets() from the type CatShopImpl needs unchecked conversion to conform to List<? extends Cat> from the type CatShop\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in PurebredCatShopImpl.java (at line 12)\\n\" +", "-\t\t\"\tclass PurebredCatShopImpl extends CatShopImpl implements PurebredCatShop {}\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^^^^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b49ec4141294e99831377df33cce786c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "5dba2fb9ff4a65e2ec3c984b606cb269bb911a06", "commitAfterChange": "de6638c19ddd648da6cdf9ca6437e426c1cc8e15", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void test116()", "signatureAfterChange": " public void test116()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tBLEU = null;\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"The final field X.BLEU cannot be assigned\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c249f69008a4a909b53de40c1a28570e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": " public void test443467() throws Exception", "signatureAfterChange": " public void test443467() throws Exception", "diff": ["+\t\t// Note: we used to emit a duplicate message of 2. Fixed.", "-\t\t\"\tfilter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + ", "-\t\t\"\t                                                 ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The target type of this expression must be a functional interface\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in BuildIdeMain.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a820c5ff11fabf26ea81e21164d020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "aa89ff1ef436fca731febc3292e2e8d8ed8e98c1", "commitAfterChange": "87588697042c1dee29ce3c0fc4e8fd0e078fa8cb", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 254, "signatureBeforeChange": " \tpublic void test242()", "signatureAfterChange": " \tpublic void test242()", "diff": ["-\t// 69776 - variation: TODO (philippe) no unsafe type operation warning ?", "+\t// 69776 - variation", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\"\tfinal Class<? extends Object> clazz = (Class<? extends Object>) classes.get(\\\"test\\\");\\n\" + ", "-\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unnecessary cast to type Class<? extends Object> for expression of type Class\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\"\tfinal Class<? extends Object> clazz = (Class<? extends Object>) classes.get(\\\"test\\\");\\n\" + ", "-\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unsafe type operation: The cast from Class to parameterized type Class<? extends Object> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends Object> clazz = (Class<? extends Object>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast to type Class<? extends Object> for expression of type Class\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85b1ec953ad71933d574e3d3708dbda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 115, "signatureBeforeChange": "  public void test118()", "signatureAfterChange": "  public void test118()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 22)\\n\" +", "-\t\t\"\tvoid baz() {\\n\" +", "-\t\t\"\t     ^^^^^\\n\" +", "-\t\t\"The method baz() from the type new Object(){} is never used locally\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf0c80485c64d906b068489eba8200aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "f8e06af2d64912de617f742baa744d8cff14ca39", "commitAfterChange": "799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void testReferenceExpressionInference3b()", "signatureAfterChange": " public void testReferenceExpressionInference3b()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tI<X,String> x2s = compose(this::bar, this::i2s);\\n\" + ", "-\t\t\"\t                                     ^^^^^^^^^\\n\" + ", "-\t\t\"The type X does not define i2s(Object) that is applicable here\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1992d19da11badd1038e1506754d19a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7d36cd74d7dfc1f56f940c426e98d6c489655858", "commitAfterChange": "f95e58c822d23fa71cf6c6e2ac3adce80f07a42f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void test0050a()", "signatureAfterChange": " \tpublic void test0050a()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass Y <T extends Y.M> extends Super {}\\n\" + ", "-\t\t\t\"\t                   ^^^\\n\" + ", "-\t\t\t\"Y.M is a raw type. References to generic type Super.M should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcfdca66108bddcb10d9c4eac5f523b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "commitAfterChange": "6422cf28e195cf583d84cd9a0d044425ae0a797f", "methodNumberBeforeChange": 468, "methodNumberAfterChange": 468, "signatureBeforeChange": " \tpublic void test464()", "signatureAfterChange": " \tpublic void test464()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tList<Integer>[] nums = new List[] {Collections.singletonList(\\\"Uh oh\\\")};\\n\" + ", "-\t\t\t\"\t                           ^^^^\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e980c23755c427d360f5dfc9ea838889", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test088()", "signatureAfterChange": " public void test088()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in p\\\\X.java (at line 25)\\n\" +", "-\t\t\"\tprivate void a() { System.out.println(\\\"A\\\");} \\n\" +", "-\t\t\"\t             ^^^\\n\" +", "-\t\t\"The method a() from the type X is never used locally\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec300f54eba28c0592204e8ebd2ed050", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void test019()", "signatureAfterChange": "  \tpublic void test019()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tSystem.out.println((Integer) 0);\\n\" + ", "-\t\t\t\"\t                             ^\\n\" + ", "-\t\t\t\"The expression of type int is boxed into Integer\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tSystem.out.println((Float) 0);\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^\\n\" + ", "-\t\t\t\"Cannot cast from int to Float\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tSystem.out.println((Float) 0);\\n\" + ", "-\t\t\t\"\t                           ^\\n\" + ", "-\t\t\t\"The expression of type int is boxed into Float\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tSystem.out.println((Integer) 0);\\n\" + ", "+\t\t\"\t                             ^\\n\" + ", "+\t\t\"The expression of type int is boxed into Integer\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tSystem.out.println((Float) 0);\\n\" + ", "+\t\t\"\t                   ^^^^^^^^^\\n\" + ", "+\t\t\"Cannot cast from int to Float\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecfce96a1791a820eaef43bfb4b5f4aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "-\t\t\t\"\t         ^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "-\t\t\t\"\t         ^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "-\t\t\t\"\t         ^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "-\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "+\t\t\t\t\"\t         ^^^\\n\" +", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "+\t\t\t\t\"\t         ^^^\\n\" +", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "+\t\t\t\t\"\t         ^^^\\n\" +", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "+\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efc57f4daa7592d311fffe8e508a315e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "commitAfterChange": "6422cf28e195cf583d84cd9a0d044425ae0a797f", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": " \tpublic void test226()", "signatureAfterChange": " \tpublic void test226()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tObject x4= new X[0];\t \\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c00e38c5b511fd062c429db128bd31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 1275, "methodNumberAfterChange": 1275, "signatureBeforeChange": " public void test1245()", "signatureAfterChange": " public void test1245()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"\tstatic private class Private {}\\n\" + ", "-\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\"The type Secondary.Private is never used locally\\n\" + "]}], "num": 9990}
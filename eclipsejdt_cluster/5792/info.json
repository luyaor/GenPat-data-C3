{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1eb79c419138d42fc62c7e47fa2fa73b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "053170992c3df7a8726bf4aa2386f92b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "72ac6cbecbda631e09e5ff29bcd95cc93135ab26", "commitAfterChange": "6d52256c55c9f29964f3b18a2228341485a94518", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate static Test buildComplianceTestSuite(List testClasses, Class setupClass, long complianceLevel)", "signatureAfterChange": " \tprivate static Test buildComplianceTestSuite(List testClasses, Class setupClass, long complianceLevel)", "diff": ["-\t\tTestSuite complianceSuite = new TestSuite();", "-\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "-\t\t\tClass testClass = (Class)testClasses.get(i);", "-\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "-\t\t\tList tests = buildTestsList(testClass);", "-\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "-\t\t\t\tsuite.addTest((Test)tests.get(index));", "-\t\t\t}", "-\t\t\tcomplianceSuite.addTest(suite);", "-\t\t}", "-\t", "-\t\t// call the setup constructor with the suite and compliance level", "+\t\t// call the setup constructor with the compliance level", "+\t\tTestSuite complianceSuite = null;", "-\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{Test.class, long.class});", "-\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{complianceSuite, new Long(complianceLevel)});", "-\t\t\treturn setUp;", "+\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{long.class});", "+\t\t\tcomplianceSuite = (TestSuite)constructor.newInstance(new Object[]{new Long(complianceLevel)});", "-\t", "-\t\treturn null;", "+\t\tif (complianceSuite == null)", "+\t\t\treturn null;", "+", "+\t\t// add tests", "+\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "+\t\t\tClass testClass = (Class)testClasses.get(i);", "+\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "+\t\t\tList tests = buildTestsList(testClass);", "+\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\t\tsuite.addTest((Test)tests.get(index));", "+\t\t\t}", "+\t\t\tcomplianceSuite.addTest(suite);", "+\t\t}", "+\t\treturn complianceSuite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ca9b22f697fd886a04f5354238c8957", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "14aaae6e589afc08756540e2b0c7b0b83003376b", "commitAfterChange": "0f2fe4c87f2d34f3b54dd9231d53f8675d730578", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static Test buildComplianceSetupTestSuite(List testClasses, Class setupClass, String complianceLevel)", "signatureAfterChange": " \tprivate static Test buildComplianceTestSuite(List testClasses, Class setupClass, String complianceLevel)", "diff": ["+\t */", "+\tprivate static Test buildComplianceTestSuite(List testClasses, Class setupClass, String complianceLevel) {", "+\t\tTestSuite complianceSuite = new TestSuite(complianceLevel);", "+\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "+\t\t\tClass testClass = (Class)testClasses.get(i);", "+\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "+\t\t\tList tests = buildTestsList(testClass);", "+\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\t\tsuite.addTest((Test)tests.get(index));", "+\t\t\t}", "+\t\t\tcomplianceSuite.addTest(suite);", "+\t\t}", "+\t", "+\t\t// call the setup constructor with the suite and compliance level", "+\t\ttry {", "+\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{Test.class, String.class});", "+\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{complianceSuite, complianceLevel});", "+\t\t\treturn setUp;", "+\t\t} catch (IllegalAccessException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (InstantiationException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\te.getTargetException().printStackTrace();", "+\t\t} catch (NoSuchMethodException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t", "+\t\treturn null;", "+\t}", "-\t */", "-\tprivate static Test buildComplianceSetupTestSuite(List testClasses, Class setupClass, String complianceLevel) {", "-\t\tTestSuite complianceSuite = new TestSuite(complianceLevel);", "-\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "-\t\t\tClass testClass = (Class)testClasses.get(i);", "-\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "-\t\t\tList tests = buildTestsList(testClass);", "-\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "-\t\t\t\tsuite.addTest((Test)tests.get(index));", "-\t\t\t}", "-\t\t\tcomplianceSuite.addTest(suite);", "-\t\t}", "-\t", "-\t\t// call the setup constructor with the suite and compliance level", "-\t\ttry {", "-\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{Test.class, String.class});", "-\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{complianceSuite, complianceLevel});", "-\t\t\treturn setUp;", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InstantiationException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\te.getTargetException().printStackTrace();", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t", "-\t\treturn null;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c33426c0eeee332fb7a035c726b42b95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "beddf7ea3209e604e7dd085747cac8c41b2dfbd0", "commitAfterChange": "cafda46507ac63768e17397affc84b63092c7e46", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected static Test buildSuite(Class testClass)", "signatureAfterChange": " \tstatic Test buildSuite(Class testClass)", "diff": ["-\t */", "-\tprotected static Test buildSuite(Class testClass) {", "-", "-\t\t// Create tests", "-\t\tTestSuite suite = new TestSuite(testClass.getName());", "-\t\tList tests = buildTestsList(testClass);", "-\t\tint size = tests.size();", "-\t\tTESTS_NAME_LIST = new ArrayList(size);", "-\t\tfor (int i=0; i<size; i++) {", "-\t\t\tFullSourceWorkspaceTests test = (FullSourceWorkspaceTests)tests.get(i);", "-\t\t\tsuite.addTest(test);", "-\t\t\tTESTS_NAME_LIST.add(test.getName());", "-\t\t}", "-\t\tALL_TESTS_COUNT += suite.testCount();", "-", "-\t\t// Init log dir", "-\t\tinitLogDir();", "-\t\t", "-\t\t// Return created tests", "-\t\treturn suite;", "-\t}", "+\t */", "+\tstatic Test buildSuite(Class testClass) {", "+", "+\t\t// Create tests", "+\t\tString className = testClass.getName();", "+\t\tTestSuite suite = new TestSuite(className);", "+\t\tList tests = buildTestsList(testClass);", "+\t\tint size = tests.size();", "+\t\tTESTS_NAME_LIST = new ArrayList(size);", "+\t\tfor (int i=0; i<size; i++) {", "+\t\t\tFullSourceWorkspaceTests test = (FullSourceWorkspaceTests)tests.get(i);", "+\t\t\tsuite.addTest(test);", "+\t\t\tTESTS_NAME_LIST.add(test.getName());", "+\t\t}", "+\t\tALL_TESTS_COUNT += suite.testCount();", "+\t\t", "+\t\t// Init log dir if necessary", "+\t\tif (LOG_DIR == null) {", "+\t\t\tif (RUN_ID == null) {", "+\t\t\t\tRUN_ID = suiteTypeShortName(testClass);", "+\t\t\t}", "+\t\t\tinitLogDir();", "+\t\t}", "+\t\t", "+\t\t// Return created tests", "+\t\treturn suite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5856fad4cc1aa2df69fa616f4ea8f26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "2452619bb5034f0a0ba9b6e9747cd6db77b2eb53", "commitAfterChange": "8d4f2ebabb0e50507cab6ea5f17acab787cfb10b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static Test suiteForComplianceLevel(String complianceLevel, Class setupClass, ArrayList testClasses)", "signatureAfterChange": " \tprivate static Test buildComplianceSetupTestSuite(List testClasses, Class setupClass, String complianceLevel)", "diff": ["-\tpublic static Test suiteForComplianceLevel(String complianceLevel, Class setupClass, ArrayList testClasses) {", "-\t\tTestSuite suite;", "-\t\tif (testClasses.size() == 1) {", "-\t\t\tsuite = new TestSuite((Class)testClasses.get(0), complianceLevel);", "-\t\t} else {", "-\t\t\tsuite = new TestSuite(complianceLevel);", "-\t\t\tfor (int i = 0, length = testClasses.size(); i < length; i++) {", "-\t\t\t\tClass testClass = (Class)testClasses.get(i);", "-\t\t\t\tTestSuite innerSuite = new TestSuite(testClass);", "-\t\t\t\tsuite.addTest(innerSuite);", "-\t\t\t}", "-\t\t}", "+\t */", "+\tprivate static Test buildComplianceSetupTestSuite(List testClasses, Class setupClass, String complianceLevel) {", "+\t\tTestSuite complianceSuite = new TestSuite(complianceLevel);", "+\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "+\t\t\tClass testClass = (Class)testClasses.get(i);", "+\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "+\t\t\tList tests = buildTestsList(testClass);", "+\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\t\tsuite.addTest((Test)tests.get(index));", "+\t\t\t}", "+\t\t\tcomplianceSuite.addTest(suite);", "+\t\t}", "+\t", "-\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{suite, complianceLevel});", "+\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{complianceSuite, complianceLevel});", "-", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db364fe90a87cc2fd011b1634eb3e11e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "72ac6cbecbda631e09e5ff29bcd95cc93135ab26", "commitAfterChange": "6d52256c55c9f29964f3b18a2228341485a94518", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static Test suiteForComplianceLevel(long complianceLevel, Class setupClass, ArrayList testClasses)", "signatureAfterChange": " \tpublic static Test suiteForComplianceLevel(long complianceLevel, Class setupClass, ArrayList testClasses)", "diff": ["-\t\tTestSuite suite;", "+\t\t// call the setup constructor with the compliance level", "+\t\tTestSuite suite = null;", "+\t\ttry {", "+\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{String.class});", "+\t\t\tsuite = (TestSuite)constructor.newInstance(new Object[]{CompilerOptions.versionFromJdkLevel(complianceLevel)});", "+\t\t} catch (IllegalAccessException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (InstantiationException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\te.getTargetException().printStackTrace();", "+\t\t} catch (NoSuchMethodException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\tif (suite == null)", "+\t\t\treturn null;", "+\t\t", "+\t\t// add tests", "-", "-\t\t// call the setup constructor with the suite and compliance level", "-\t\ttry {", "-\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{Test.class, String.class});", "-\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{suite, CompilerOptions.versionFromJdkLevel(complianceLevel)});", "-\t\t\treturn setUp;", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InstantiationException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\te.getTargetException().printStackTrace();", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-", "-\t\treturn null;", "+\t\treturn suite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd163a58142a11e49dc9d61b909ee81a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["-}", "-public static Test suite() {", "-\tTestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());", "-\t// Get all classes", "-\tAbstractJavaSearchTests.TEST_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));", "-\tList allClasses = new ArrayList(AbstractJavaSearchTests.TEST_SUITES);", "-\tallClasses.add(JavaSearchBugsTests.class);", "-\tallClasses.add(JavaSearchMultipleProjectsTests.class);", "-\tallClasses.add(SearchTests.class);", "-\tallClasses.add(JavaSearchScopeTests.class);", "-", "-\t// Reset forgotten subsets of tests", "-\tTestCase.TESTS_PREFIX = null;", "-\tTestCase.TESTS_NAMES = null;", "-\tTestCase.TESTS_NUMBERS = null;", "-\tTestCase.TESTS_RANGE = null;", "-", "-\t// Add all tests suite of tests", "-\tfor (int i = 0, size=allClasses.size(); i < size; i++) {", "-\t\tClass testClass = (Class) allClasses.get(i);", "-", "-\t\t// call the suite() method and add the resulting suite to the suite", "-\t\ttry {", "-\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "-\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "-\t\t\tts.addTest(suite);", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\te.getTargetException().printStackTrace();", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-\treturn ts;", "-}", "+", "+\tpublic static Test suite() {", "+\t\tTestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());", "+", "+\t\t// Store test classes with same \"JavaSearch\"project", "+\t\tAbstractJavaSearchTests.JAVA_SEARCH_SUITES = new ArrayList(TEST_CLASSES);", "+", "+\t\t// Get all classes", "+\t\tList allClasses = new ArrayList(TEST_CLASSES);", "+\t\tallClasses.add(JavaSearchBugsTests.class);", "+\t\tallClasses.add(JavaSearchMultipleProjectsTests.class);", "+\t\tallClasses.add(SearchTests.class);", "+\t\tallClasses.add(JavaSearchScopeTests.class);", "+", "+\t\t// Reset forgotten subsets of tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS = null;", "+\t\tTestCase.TESTS_RANGE = null;", "+", "+\t\t// Add all tests suite of tests", "+\t\tfor (int i = 0, size = allClasses.size(); i < size; i++) {", "+\t\t\tClass testClass = (Class) allClasses.get(i);", "+", "+\t\t\t// call the suite() method and add the resulting suite to the suite", "+\t\t\ttry {", "+\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tTest suite = (Test) suiteMethod.invoke(null, new Object[0]);", "+\t\t\t\tts.addTest(suite);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\te.getTargetException().printStackTrace();", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn ts;", "+\t}"]}], "num": 5792}
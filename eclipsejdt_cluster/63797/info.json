{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72a3ddc883517e188222dcedd82e15ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09a12cf0c4e249af0cc64ba6daf4609b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java", "commitBeforeChange": "c1f8b23725dd7ea4b476b40485a277dac1e772a8", "commitAfterChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static boolean hasAnnotationInstance( IFile f )", "signatureAfterChange": " \tprivate AptUtil()", "diff": ["+\t// Private c-tor to prevent construction", "+\tprivate AptUtil() {}", "-\tpublic static boolean hasAnnotationInstance( IFile f ) {", "-\t\tInputStreamReader reader = null;", "-\t\tInputStream input = null;", "-\t\ttry {", "-\t\t\tAnnotationScanner scanner;", "-\t\t\t// If this is a single byte encoding, we can deal directly ", "-\t\t\t// with the bytes, which is *much* faster", "-\t\t\tif (SINGLE_BYTE_ENCODINGS.contains(f.getCharset())) {", "-\t\t\t\tinput = ProcessorEnvImpl.getInputStream(f);", "-\t\t\t\tscanner = new InputStreamAnnotationScanner(input);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\treader = ProcessorEnvImpl.getFileReader( f );", "-\t\t\t\tscanner = new ReaderAnnotationScanner(reader);", "-\t\t\t}", "-\t\t\treturn scanner.containsAnnotations();", "-\t\t}", "-\t\tcatch( Exception ioe ) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (reader != null) { try {reader.close();} catch (IOException ioe) {} }", "-\t\t\tif (input != null) { try {input.close();} catch (IOException ioe) {} }", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26a95788d0f7b463145b2911488652b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "9378f12e46617b3c47a50827083b7b76b76aaf96", "commitAfterChange": "ecc05f0ca2665c6c46b18bc8153f342d2808fcb6", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic static char[] getFileContents( IFile file ) \t\tthrows CoreException, IOException", "signatureAfterChange": " \tpublic static char[] getFileContents( IFile file ) \t\tthrows CoreException, IOException", "diff": ["-\t\tchar[]              rtrn  = null;", "-\t\tInputStream         is    = null;", "-\t\tBufferedInputStream bis   = null;", "-\t\tInputStreamReader   isr   = null;", "+\t\tReader   reader   = null;", "-\t\t\tis = file.getContents();", "-\t\t\tbis = new BufferedInputStream( is );", "-\t\t\tisr = new InputStreamReader( bis, file.getCharset() );", "+\t\t\treader = getFileReader( file );", "-\t\t\twhile ( ( c = isr.read() ) > -1 )", "+\t\t\twhile ( ( c = reader.read() ) > -1 )", "-\t\t\trtrn = w.toCharArray();\t\t", "+\t\t\treturn w.toCharArray();", "-\t\t\ttry { if ( isr != null ) isr.close(); } catch ( IOException ioe ) {};", "-\t\t\ttry { if ( bis != null ) bis.close(); } catch ( IOException ioe ) {};", "-\t\t\ttry { if ( is != null ) is.close(); } catch ( IOException ioe ) {};", "-\t\t\tif ( w != null ) w.close(); ", "+\t\t\ttry { if ( reader != null ) reader.close(); } catch ( IOException ioe ) {};", "+\t\t\tif ( w != null ) w.close();", "-\t\treturn rtrn;"]}], "num": 63797}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a80738b8b06d0835083c0ce66d04945a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f454c8cdece4e0da6039ee5c4002ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\tif (argLength > 0 && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "-\t\tif (argTypes[--argLength].isVarArgs())", "+\tlong sourceLevel = compilerOptions().sourceLevel;", "+\tif (argLength > 0 && sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\tArgument argument = argTypes[--argLength];", "+\t\tif (argument.isVarArgs())", "+\t\tif (CharOperation.equals(argument.name, ConstantPool.This)) {", "+\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "+\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "+\t\t\t}", "+\t\t\tif (argument.annotations != null) {", "+\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "+\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t}", "+\t\t}", "-\t\t\tif (argTypes[argLength].isVarArgs())", "-\t\t\t\tproblemReporter().illegalVararg(argTypes[argLength], method);", "+\t\t\targument = argTypes[argLength];", "+\t\t\tif (argument.isVarArgs())", "+\t\t\t\tproblemReporter().illegalVararg(argument, method);", "+\t\t\tif (CharOperation.equals(argument.name, ConstantPool.This)) {", "+\t\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "+\t\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "+\t\t\t\t}", "+\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "+\t\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t}", "+\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b25554efe9accc0cb1ef98fbb79236e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "8b2f544bc2c01b972e8c0734076c17a325ac4120", "commitAfterChange": "cedc325f2a935c759cba1f1e5e6c7415bee87a4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "-\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "-\t\t\t}", "-\t\t\tif (argument.annotations != null) {", "-\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "-\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t}", "+\t\t\tproblemReporter().illegalThisDeclaration(argument);", "-\t\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "-\t\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "-\t\t\t\t}", "-\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "-\t\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t\t}", "-\t\t\t}\t", "+\t\t\t\tproblemReporter().illegalThisDeclaration(argument);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (method.receiver != null) {", "+\t\tif (sourceLevel <= ClassFileConstants.JDK1_7) {", "+\t\t\tproblemReporter().illegalSourceLevelForThis(method.receiver);", "+\t\t}", "+\t\tif (method.receiver.annotations != null) {", "+\t\t\tmethod.receiverAnnotations = method.receiver.annotations;", "+\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;"]}], "num": 65261}
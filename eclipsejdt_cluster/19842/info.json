{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "534e8862b6cc8051ca0b760d7e4b28e4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bbdc44851b594296a2afce9a4bd8b2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tboolean insideOriginalProject, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "diff": ["-\t\tboolean insideOriginalProject,", "+\t\tIClasspathEntry referringEntry,", "-\t\tboolean retrieveExportedRoots) throws JavaModelException {", "+\t\tboolean retrieveExportedRoots,", "+\t\tMap rootToResolvedEntries) throws JavaModelException {", "+\t\tIPackageFragmentRoot root = null;", "-\t\t\t\t\t\t\taccumulatedRoots.add(", "-\t\t\t\t\t\t\t\tgetPackageFragmentRoot((IResource)target));", "-\t\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\t\t\troot = getPackageFragmentRoot((IResource)target);", "-\t\t\t\t\t\tIPackageFragmentRoot root = getFolderPackageFragmentRoot(entryPath);", "-\t\t\t\t\t\tif (root != null) {", "-\t\t\t\t\t\t\taccumulatedRoots.add(root);", "-\t\t\t\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\troot = getFolderPackageFragmentRoot(entryPath);", "-\t\t\t\tif (!insideOriginalProject && !resolvedEntry.isExported()) return;", "+\t\t\t\tif (referringEntry != null  && !resolvedEntry.isExported()) return;", "-\t\t\t\t\t\tIResource resource = (IResource) target;", "-\t\t\t\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(resource);", "-\t\t\t\t\t\tif (root != null) {", "-\t\t\t\t\t\t\taccumulatedRoots.add(root);", "-\t\t\t\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\troot = getPackageFragmentRoot((IResource) target);", "-\t\t\t\t\t\t\taccumulatedRoots.add(", "-\t\t\t\t\t\t\t\tnew JarPackageFragmentRoot(entryPath, this));", "-\t\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\t\t\troot = new JarPackageFragmentRoot(entryPath, this);", "-\t\t\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(entryPath);", "-\t\t\t\t\tif (root != null) {", "-\t\t\t\t\t\taccumulatedRoots.add(root);", "-\t\t\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\t}", "+\t\t\t\t\troot = getPackageFragmentRoot(entryPath);", "-\t\t\t\tif (!insideOriginalProject && !resolvedEntry.isExported()) return;", "+\t\t\t\tif (referringEntry != null && !resolvedEntry.isExported()) return;", "-\t\t\t\t\t\t\tfalse, ", "+\t\t\t\t\t\t\trootToResolvedEntries == null ? resolvedEntry : ((ClasspathEntry)resolvedEntry).combineWith(referringEntry), // only combine if need to build the reverse map ", "-\t\t\t\t\t\t\tretrieveExportedRoots);", "+\t\t\t\t\t\t\tretrieveExportedRoots,", "+\t\t\t\t\t\t\trootToResolvedEntries);", "+\t\t}", "+\t\tif (root != null) {", "+\t\t\taccumulatedRoots.add(root);", "+\t\t\trootIDs.add(rootID);", "+\t\t\tif (rootToResolvedEntries != null) rootToResolvedEntries.put(root, ((ClasspathEntry)resolvedEntry).combineWith(referringEntry));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77454fe277131d1397256aaab7cc8ca5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c333ceff8dd520a0590ee780b2fe8c5efcd4c013", "commitAfterChange": "c77b24714f3e6f9d0a1f77d86a434cfb1d3d7793", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tboolean insideOriginalProject, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tboolean insideOriginalProject, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots) throws JavaModelException", "diff": ["-\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "-\t\t\t\t\tif (target == null) return;", "-", "-\t\t\t\t\tif (target instanceof IFolder || target instanceof IProject){", "-\t\t\t\t\t\taccumulatedRoots.add(", "-\t\t\t\t\t\t\tgetPackageFragmentRoot((IResource)target));", "-\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\tif (checkExistency) {", "+\t\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "+\t\t\t\t\t\tif (target == null) return;", "+\t", "+\t\t\t\t\t\tif (target instanceof IFolder || target instanceof IProject){", "+\t\t\t\t\t\t\taccumulatedRoots.add(", "+\t\t\t\t\t\t\t\tgetPackageFragmentRoot((IResource)target));", "+\t\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(entryPath);", "+\t\t\t\t\t\tif (root != null) {", "+\t\t\t\t\t\t\taccumulatedRoots.add(root);", "+\t\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\t\t}", "-", "-\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "-\t\t\t\tif (target == null) return;", "-", "-\t\t\t\tif (target instanceof IResource){", "-\t\t\t\t\t", "-\t\t\t\t\t// internal target", "-\t\t\t\t\tIResource resource = (IResource) target;", "-\t\t\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(resource);", "-\t\t\t\t\tif (root != null) {", "-\t\t\t\t\t\taccumulatedRoots.add(root);", "-\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t", "+\t\t\t\tif (checkExistency) {", "+\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "+\t\t\t\t\tif (target == null) return;", "+\t", "+\t\t\t\t\tif (target instanceof IResource){", "+\t\t\t\t\t\t// internal target", "+\t\t\t\t\t\tIResource resource = (IResource) target;", "+\t\t\t\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(resource);", "+\t\t\t\t\t\tif (root != null) {", "+\t\t\t\t\t\t\taccumulatedRoots.add(root);", "+\t\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// external target - only JARs allowed", "+\t\t\t\t\t\tif (((java.io.File)target).isFile() && (Util.isArchiveFileName(entryPath.lastSegment()))) {", "+\t\t\t\t\t\t\taccumulatedRoots.add(", "+\t\t\t\t\t\t\t\tnew JarPackageFragmentRoot(entryPath, this));", "+\t\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t// external target - only JARs allowed", "-\t\t\t\t\tif (((java.io.File)target).isFile() && (Util.isArchiveFileName(entryPath.lastSegment()))) {", "-\t\t\t\t\t\taccumulatedRoots.add(", "-\t\t\t\t\t\t\tnew JarPackageFragmentRoot(entryPath, this));", "+\t\t\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(entryPath);", "+\t\t\t\t\tif (root != null) {", "+\t\t\t\t\t\taccumulatedRoots.add(root);"]}], "num": 19842}
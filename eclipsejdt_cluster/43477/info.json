{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76d2a0a027cf146db5ea4afb05786946", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829c90e60eb1a8ff4bfb3ca3fc1d260d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "da5e3044bf1aa602314b19a69e01c7d30d0c61d0", "commitAfterChange": "d2a7051ad6f971a1319fef017042d09bcae83b4b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \tpublic void fire()", "signatureAfterChange": "\r \tpublic void fire(JavaElementDelta customDelta, int originalEventType)", "diff": ["-\tpublic void fire() {\r", "+\tpublic void fire(JavaElementDelta customDelta, int originalEventType) {\r", "+\r", "-\t\t\tthis.mergeDeltas();\r", "-\t\t\ttry {\r", "-\t\t\t\tIterator iterator = fJavaModelDeltas.iterator();\r", "-\t\t\t\twhile (iterator.hasNext()) {\r", "-\t\t\t\t\tIJavaElementDelta delta= (IJavaElementDelta) iterator.next();\r", "-\t\t\t\t\tif (DeltaProcessor.VERBOSE){\r", "-\t\t\t\t\t\tSystem.out.println(\"FIRING Delta [\"+Thread.currentThread()+\"]:\\n\" + delta);//$NON-NLS-1$//$NON-NLS-2$\r", "+\r", "+\t\t\tint eventType;\r", "+\t\t\t\r", "+\t\t\t/* DEFAULT event type is used when operation doesn't know actual event type and needed to fire immediately:\r", "+\t\t\t * e.g. non-resource modifying operation, create/destroy shared working copies\r", "+\t\t\t *\r", "+\t\t\t * this is mapped to a POST-change + PRE-build change for all interested listeners\r", "+\t\t\t */\r", "+\t\t\tif (originalEventType == DEFAULT_CHANGE_EVENT){\r", "+\t\t\t\teventType = ElementChangedEvent.POST_CHANGE;\r", "+\t\t\t} else {\r", "+\t\t\t\teventType = originalEventType;\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tJavaElementDelta deltaToNotify;\r", "+\t\t\tif (customDelta == null){\r", "+\t\t\t\tthis.mergeDeltas();\r", "+\t\t\t\tif (fJavaModelDeltas.size() > 0){ \r", "+\r", "+\t\t\t\t\t// cannot be more than 1 after merge\r", "+\t\t\t\t\tdeltaToNotify = (JavaElementDelta)fJavaModelDeltas.get(0);\r", "+\r", "+\t\t\t\t\t// empty the queue only after having fired final volley of deltas and no custom deltas was superposed\r", "+\t\t\t\t\tif (eventType == ElementChangedEvent.POST_CHANGE){\r", "+\t\t\t\t\t\t// flush now so as to keep listener reactions to post their own deltas for subsequent iteration\r", "+\t\t\t\t\t\tthis.flush();\r", "-\t\t\t\t\t\r", "-\t\t\t\t\t// Refresh internal scopes\r", "-\t\t\t\t\tIterator scopes = this.scopes.keySet().iterator();\r", "-\t\t\t\t\twhile (scopes.hasNext()) {\r", "-\t\t\t\t\t\tAbstractSearchScope scope = (AbstractSearchScope)scopes.next();\r", "-\t\t\t\t\t\tscope.processDelta(delta);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tElementChangedEvent event= new ElementChangedEvent(delta);\r", "-\t\t\t\t\t// Clone the listeners since they could remove themselves when told about the event \r", "-\t\t\t\t\t// (eg. a type hierarchy becomes invalid (and thus it removes itself) when the type is removed\r", "-\t\t\t\t\tArrayList listeners= (ArrayList) fElementChangedListeners.clone();\r", "-\t\t\t\t\tfor (int i= 0; i < listeners.size(); i++) {\r", "-\t\t\t\t\t\tIElementChangedListener listener= (IElementChangedListener) listeners.get(i);\r", "-\t\t\t\t\t\tlistener.elementChanged(event);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tdeltaToNotify = customDelta;\r", "+\t\t\t}\r", "+\t\t\tif (DeltaProcessor.VERBOSE){\r", "+\t\t\t\tSystem.out.println(\"FIRING Delta [\"+Thread.currentThread()+\"]:\\n\" + deltaToNotify);//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t// Refresh internal scopes\r", "+\t\t\tIterator scopes = this.scopes.keySet().iterator();\r", "+\t\t\twhile (scopes.hasNext()) {\r", "+\t\t\t\tAbstractSearchScope scope = (AbstractSearchScope)scopes.next();\r", "+\t\t\t\tscope.processDelta(deltaToNotify);\r", "+\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t// Notification\r", "+\r", "+\t\t\t// Important: if any listener reacts to notification by updating the listeners list or mask, these lists will\r", "+\t\t\t// be duplicated, so it is necessary to remember original lists in a variable (since field values may change under us)\r", "+\t\t\tIElementChangedListener[] listeners = this.elementChangedListeners;\r", "+\t\t\tint[] listenerMask = this.elementChangedListenerMasks;\r", "+\t\t\tint listenerCount = this.elementChangedListenerCount;\r", "+\r", "+\t\t\t// in case using a DEFAULT change event, will notify also all listeners also interested in PRE-build events\r", "+\t\t\tif (originalEventType == DEFAULT_CHANGE_EVENT){\r", "+\t\t\t\tElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, ElementChangedEvent.PRE_AUTO_BUILD);\r", "+\t\t\t\tfor (int i= 0; i < listenerCount; i++) {\r", "+\t\t\t\t\tif ((listenerMask[i] & ElementChangedEvent.PRE_AUTO_BUILD) != 0){\r", "+\t\t\t\t\t\tlisteners[i].elementChanged(extraEvent);\r", "-\t\t\t} finally {\r", "-\t\t\t\t// empty the queue\r", "-\t\t\t\tthis.flush();\r", "+\t\t\t}\r", "+\r", "+\t\t\t// regular notification\r", "+\t\t\tElementChangedEvent event = new ElementChangedEvent(deltaToNotify, eventType);\r", "+\t\t\tfor (int i= 0; i < listenerCount; i++) {\r", "+\t\t\t\tif ((listenerMask[i] & eventType) != 0){\r", "+\t\t\t\t\tlisteners[i].elementChanged(event);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff88851f00c6f8b42dc2a3186bf61fff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "07f2a3d76611d11852367ea136a6272990449122", "commitAfterChange": "b51487a3e769c1faf54930e906289a243b81936a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void fire(JavaElementDelta customDelta, int originalEventType)", "signatureAfterChange": " \tpublic void fire(IJavaElementDelta customDelta, int eventType)", "diff": ["-\tpublic void fire(JavaElementDelta customDelta, int originalEventType) {", "+\tpublic void fire(IJavaElementDelta customDelta, int eventType) {", "-\t\tif (this.isFiring) {", "+\t\tif (!this.isFiring) return;", "+\t\t", "+\t\tif (DeltaProcessor.VERBOSE && (eventType == DEFAULT_CHANGE_EVENT || eventType == ElementChangedEvent.PRE_AUTO_BUILD)) {", "+\t\t\tSystem.out.println(\"-----------------------------------------------------------------------------------------------------------------------\");//$NON-NLS-1$", "+\t\t}", "-\t\t\tint eventType;", "+\t\tIJavaElementDelta deltaToNotify;", "+\t\tif (customDelta == null){", "+\t\t\tdeltaToNotify = this.mergeDeltas(this.javaModelDeltas);", "+\t\t} else {", "+\t\t\tdeltaToNotify = customDelta;", "+\t\t}", "-\t\t\t/* DEFAULT event type is used when operation doesn't know actual event type and needed to fire immediately:", "-\t\t\t * e.g. non-resource modifying operation, create/destroy shared working copies", "-\t\t\t *", "-\t\t\t * this is mapped to a POST-change + PRE-build change for all interested listeners", "-\t\t\t */", "-\t\t\tif (originalEventType == DEFAULT_CHANGE_EVENT){", "-\t\t\t\teventType = ElementChangedEvent.POST_CHANGE;", "-\t\t\t} else {", "-\t\t\t\teventType = originalEventType;", "-\t\t\t}", "-\t\t\t", "-\t\t\tJavaElementDelta deltaToNotify;", "-\t\t\tif (customDelta == null){", "-\t\t\t\tthis.mergeDeltas();", "-\t\t\t\tif (this.javaModelDeltas.size() > 0){ ", "-", "-\t\t\t\t\t// cannot be more than 1 after merge", "-\t\t\t\t\tdeltaToNotify = (JavaElementDelta)this.javaModelDeltas.get(0);", "-", "-\t\t\t\t\t// empty the queue only after having fired final volley of deltas and no custom deltas was superposed", "-\t\t\t\t\tif (eventType == ElementChangedEvent.POST_CHANGE){", "-\t\t\t\t\t\t// flush now so as to keep listener reactions to post their own deltas for subsequent iteration", "-\t\t\t\t\t\tthis.flush();", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tdeltaToNotify = customDelta;", "-\t\t\t}", "-\t\t\t\t", "-\t\t\t// Refresh internal scopes", "+\t\t// Refresh internal scopes", "+\t\tif (deltaToNotify != null) {", "-\t\t\t\t", "-\t\t\t// Notification", "+\t\t}", "+\t\t\t", "+\t\t// Notification", "+\t", "+\t\t// Important: if any listener reacts to notification by updating the listeners list or mask, these lists will", "+\t\t// be duplicated, so it is necessary to remember original lists in a variable (since field values may change under us)", "+\t\tIElementChangedListener[] listeners = this.elementChangedListeners;", "+\t\tint[] listenerMask = this.elementChangedListenerMasks;", "+\t\tint listenerCount = this.elementChangedListenerCount;", "-\t\t\t// Important: if any listener reacts to notification by updating the listeners list or mask, these lists will", "-\t\t\t// be duplicated, so it is necessary to remember original lists in a variable (since field values may change under us)", "-\t\t\tIElementChangedListener[] listeners = this.elementChangedListeners;", "-\t\t\tint[] listenerMask = this.elementChangedListenerMasks;", "-\t\t\tint listenerCount = this.elementChangedListenerCount;", "+\t\tswitch (eventType) {", "+\t\t\tcase DEFAULT_CHANGE_EVENT:", "+\t\t\t\tfirePreAutoBuildDelta(deltaToNotify, listeners, listenerMask, listenerCount);", "+\t\t\t\tfirePostChangeDelta(deltaToNotify, listeners, listenerMask, listenerCount);", "+\t\t\t\tfireReconcileDelta(listeners, listenerMask, listenerCount);", "+\t\t\t\tbreak;", "+\t\t\tcase ElementChangedEvent.PRE_AUTO_BUILD:", "+\t\t\t\tfirePreAutoBuildDelta(deltaToNotify, listeners, listenerMask, listenerCount);", "+\t\t\t\tbreak;", "+\t\t\tcase ElementChangedEvent.POST_CHANGE:", "+\t\t\t\tfirePostChangeDelta(deltaToNotify, listeners, listenerMask, listenerCount);", "+\t\t\t\tfireReconcileDelta(listeners, listenerMask, listenerCount);", "+\t\t\t\tbreak;", "+\t\t}", "-\t\t\t// in case using a DEFAULT change event, will notify also all listeners also interested in PRE-build events", "-\t\t\tif (originalEventType == DEFAULT_CHANGE_EVENT){", "-\t\t\t\tif (DeltaProcessor.VERBOSE){", "-\t\t\t\t\tSystem.out.println(\"FIRING PRE_AUTO_BUILD Delta [\"+Thread.currentThread()+\"]:\\n\" + deltaToNotify);//$NON-NLS-1$//$NON-NLS-2$", "+\t}", "-\t\t\t\tfinal ElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, ElementChangedEvent.PRE_AUTO_BUILD);", "-\t\t\t\tfor (int i= 0; i < listenerCount; i++) {", "-\t\t\t\t\tif ((listenerMask[i] & ElementChangedEvent.PRE_AUTO_BUILD) != 0){", "-\t\t\t\t\t\tfinal IElementChangedListener listener = listeners[i];", "-\t\t\t\t\t\tif (DeltaProcessor.VERBOSE) {", "-\t\t\t\t\t\t\tSystem.out.println(\"Listener #\" + (i+1) + \"=\" + listener.toString());//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "-\t\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\t\t\tlistener.elementChanged(extraEvent);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t});", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// regular notification", "-\t\t\tif (DeltaProcessor.VERBOSE){", "-\t\t\t\tString type = \"\";//$NON-NLS-1$", "-\t\t\t\tswitch (eventType) {", "-\t\t\t\t\tcase ElementChangedEvent.POST_CHANGE:", "-\t\t\t\t\t\ttype = \"POST_CHANGE\"; //$NON-NLS-1$", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ElementChangedEvent.PRE_AUTO_BUILD:", "-\t\t\t\t\t\ttype = \"PRE_AUTO_BUILD\"; //$NON-NLS-1$", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ElementChangedEvent.POST_RECONCILE:", "-\t\t\t\t\t\ttype = \"POST_RECONCILE\"; //$NON-NLS-1$", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tSystem.out.println(\"FIRING \" + type + \" Delta [\"+Thread.currentThread()+\"]:\\n\" + deltaToNotify);//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t}", "-\t\t\tfinal ElementChangedEvent event = new ElementChangedEvent(deltaToNotify, eventType);", "-\t\t\tfor (int i= 0; i < listenerCount; i++) {", "-\t\t\t\tif ((listenerMask[i] & eventType) != 0){", "-\t\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "-\t\t\t\t\tfinal IElementChangedListener listener = listeners[i];", "-\t\t\t\t\tif (DeltaProcessor.VERBOSE) {", "-\t\t\t\t\t\tSystem.out.println(\"Listener #\" + (i+1) + \"=\" + listener.toString());//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\t\tlistener.elementChanged(event);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t});", "-\t\t\t\t}"]}], "num": 43477}
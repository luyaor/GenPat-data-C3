{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "325cb02f4e1526a7259666f516a49b20", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a49969d2478f52f8506a8ea8b89e1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public IPath[] enclosingProjectsAndJars()", "signatureAfterChange": "\r public IPath[] enclosingProjectsAndJars()", "diff": ["-\ttry {\r", "-\t\tVector paths = new Vector();\r", "-\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(ResourcesPlugin.getWorkspace());\r", "-\t\tIWorkspaceRoot root = javaModel.getWorkspace().getRoot();\r", "-\t\tfor (int i = 0; i < this.elementCount; i++){\r", "-\t\t\tIResource element = this.elements[i];\r", "-\t\t\tIPath path = element.getProject().getFullPath();\r", "-\t\t\tIProject project = element.getProject();\r", "-\t\t\tif (project.exists() && project.isOpen()) {\r", "-\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "-\t\t\t\tif (this.includesClasspaths) {\r", "-\t\t\t\t\tIJavaProject javaProject = javaModel.getJavaProject(project.getName());\r", "-\t\t\t\t\tIClasspathEntry[] entries = ((JavaProject)javaProject).getExpandedClasspath(true);\r", "-\t\t\t\t\tfor (int j = 0; j < entries.length; j++) {\r", "-\t\t\t\t\t\tIClasspathEntry entry = entries[j];\r", "-\t\t\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "-\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "-\t\t\t\t\t\t\t\tif (!paths.contains(path) && root.getProject(path.lastSegment()).isAccessible()) {\r", "-\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\t\t\tif (this.includesBinaries) {\r", "-\t\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "-\t\t\t\t\t\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tIPath[] result = new IPath[paths.size()];\r", "-\t\tpaths.copyInto(result);\r", "-\t\treturn result;\r", "-\t} catch (JavaModelException e) {\r", "-\t\treturn new IPath[0];\r", "-\t}\r", "+\treturn this.enclosingProjectsAndJars;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efb5a014f169c40ac154ad195dbfdb3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic IPath[] enclosingProjectsAndJars()", "signatureAfterChange": "\r public IPath[] enclosingProjectsAndJars()", "diff": ["-\t */\r", "-\tpublic IPath[] enclosingProjectsAndJars() {\r", "-\t\ttry {\r", "-\t\t\tVector paths = new Vector();\r", "-\t\t\tIJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\t\tIWorkspaceRoot root = javaModel.getWorkspace().getRoot();\r", "-\t\t\tfor (int i = 0; i < this.elementCount; i++) {\r", "-\t\t\t\tIResource element = this.elements[i];\r", "-\t\t\t\tIPath path = element.getProject().getFullPath();\r", "-\t\t\t\tIProject project = element.getProject();\r", "-\t\t\t\tif (project.exists() && project.isOpen()) {\r", "-\t\t\t\t\tif (!paths.contains(path))\r", "-\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\tif (this.includesClasspaths) {\r", "-\t\t\t\t\t\tIJavaProject javaProject = javaModel.getJavaProject(project.getName());\r", "-\t\t\t\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\t\t\t\tfor (int j = 0; j < entries.length; j++) {\r", "-\t\t\t\t\t\t\tIClasspathEntry entry = entries[j];\r", "-\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :\r", "+ */\r", "+public IPath[] enclosingProjectsAndJars() {\r", "+\ttry {\r", "+\t\tVector paths = new Vector();\r", "+\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(ResourcesPlugin.getWorkspace());\r", "+\t\tIWorkspaceRoot root = javaModel.getWorkspace().getRoot();\r", "+\t\tfor (int i = 0; i < this.elementCount; i++){\r", "+\t\t\tIResource element = this.elements[i];\r", "+\t\t\tIPath path = element.getProject().getFullPath();\r", "+\t\t\tIProject project = element.getProject();\r", "+\t\t\tif (project.exists() && project.isOpen()) {\r", "+\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "+\t\t\t\tif (this.includesClasspaths) {\r", "+\t\t\t\t\tIJavaProject javaProject = javaModel.getJavaProject(project.getName());\r", "+\t\t\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "+\t\t\t\t\tfor (int j = 0; j < entries.length; j++) {\r", "+\t\t\t\t\t\tIClasspathEntry entry = entries[j];\r", "+\t\t\t\t\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "+\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "+\t\t\t\t\t\t\t\tif (!paths.contains(path) && root.getProject(path.lastSegment()).isAccessible()) {\r", "+\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "+\t\t\t\t\t\t\t\tif (this.includesBinaries) {\r", "-\t\t\t\t\t\t\t\t\tif (!paths.contains(path)\r", "-\t\t\t\t\t\t\t\t\t\t&& root.getProject(path.lastSegment()).isAccessible()) {\r", "-\t\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :\r", "-\t\t\t\t\t\t\t\t\tif (this.includesBinaries) {\r", "-\t\t\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "-\t\t\t\t\t\t\t\t\t\tif (!paths.contains(path))\r", "-\t\t\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\tIPath[] result = new IPath[paths.size()];\r", "-\t\t\tpaths.copyInto(result);\r", "-\t\t\treturn result;\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\treturn new IPath[0];\r", "+\t\tIPath[] result = new IPath[paths.size()];\r", "+\t\tpaths.copyInto(result);\r", "+\t\treturn result;\r", "+\t} catch (JavaModelException e) {\r", "+\t\treturn new IPath[0];\r", "+}\r"]}], "num": 22676}
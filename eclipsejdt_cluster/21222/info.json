{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7546becd81055771a7c9abf4ba0a1de", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04cf0289e3746c3fd09ee89c99eccb43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "81760d211469bf12100fd76e7231799f80190c5f", "commitAfterChange": "d3721d56cc1a3428241d332af8c31ddc07515e58", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "signatureAfterChange": " public void acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor monitor)", "diff": ["+ */", "+public void acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor monitor) {", "-\t\tif (scope.encloses(documentPath))", "+\t\tboolean encloses = (scope instanceof HierarchyScope) ? ((HierarchyScope)scope).encloses(documentPath, monitor)", "+\t\t\t\t\t\t\t: scope.encloses(documentPath);", "+\t\tif (encloses) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db33bcbc92232355738f8dd4e364c8f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments)", "signatureAfterChange": " \t \tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments, InvocationSite site)", "diff": ["-\tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments) {", "+\tMethodBinding boundCheck18(Scope scope, TypeBinding[] arguments, InvocationSite site) {", "-\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope)) {", "-\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\tASTNode location = site instanceof ASTNode ? (ASTNode) site : null;", "+\t\t\tswitch (typeVariable.boundCheck(substitution, substituteForChecks, scope, location)) {", "+\t\t\t\tcase MISMATCH :", "-\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\tcase UNCHECKED :", "+\t\t\t\tdefault:", "+\t\t\t\t\tbreak;"]}], "num": 21222}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f20feffdcff974752d200987778700c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a6fdf9575979f42c39fd827e6e44a2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MemberDeclarationVisitor.java", "commitBeforeChange": "cefc7f3f8677282aa49e610700500999ffcaffcb", "commitAfterChange": "89e8879d5dd978e5f2535f9d8b7bac080dd4f73b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public boolean visit(LocalDeclaration declaration, BlockScope scope)", "signatureAfterChange": " public boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "diff": ["+public boolean visit(LambdaExpression lambdaExpression, BlockScope scope) {", "+\tInteger level = (Integer) this.nodeSet.matchingNodes.removeKey(lambdaExpression);", "+\ttry {", "+\t\tthis.locator.reportMatching(lambdaExpression, this.enclosingElement, level != null ? level.intValue() : -1, this.nodeSet);", "+\t} catch (CoreException e) {", "+\t\tthrow new WrappedCoreException(e);", "+\t}", "+\treturn true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41a648c5d43f231c591a379ac41e45a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t\t\t\t\t\tpublic boolean visit(LambdaExpression lambda, BlockScope dontCare)", "signatureAfterChange": "  \tpublic void throwsException(TypeBinding exceptionType)", "diff": ["-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic boolean visit(LambdaExpression lambda, BlockScope dontCare) {", "-\t\t\t\t\t\t\treturn LambdaExpression.this == lambda;  // do not analyze any inner lambdas so as not to confuse returns from there.", "-\t\t\t\t\t\t}", "+", "+\tpublic void throwsException(TypeBinding exceptionType) {", "+\t\tif (this.expressionContext != INVOCATION_CONTEXT)", "+\t\t\treturn;", "+\t\tthis.original.throwsException = true;", "+\t}"]}], "num": 65429}
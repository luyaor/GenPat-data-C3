{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66b8f413a38b5704e9bc5c8cc77be0ad", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2440a80284bf9106fa1e0e712af0fc1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "fb79acb2f88020666334c353888dcdeb37abd070", "commitAfterChange": "4a7d6bdefb8cc07325fb8a5c7d2a751e2d99c2eb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tHashMap externalArchivesStatus = new HashMap();", "-\t\t\tJavaModel model = manager.getJavaModel();\t\t\t", "+\t\t\tthis.refreshedElements = refreshedElements;", "+\t\t\tthis.refreshedElementsSize = refreshedElements.length;", "+\t\t\tboolean hasDelta = this.createExternalArchiveDelta(monitor);", "+\t\t\tif (monitor != null && monitor.isCanceled()) return; ", "+\t\t\tif (hasDelta){", "+\t\t\t\t// force classpath marker refresh of affected projects", "+\t\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\t\tIJavaElementDelta[] projectDeltas = this.currentDelta.getAffectedChildren();", "+\t\t\t\tfor (int i = 0, length = projectDeltas.length; i < length; i++) {", "+\t\t\t\t\tIJavaElementDelta delta = projectDeltas[i];", "+\t\t\t\t\t((JavaProject)delta.getElement()).getResolvedClasspath(", "+\t\t\t\t\t\ttrue, // ignoreUnresolvedEntry", "+\t\t\t\t\t\ttrue); // generateMarkerOnError", "+\t\t\t\t}\t\t", "+\t\t\t\tif (this.currentDelta != null) { // if delta has not been fired while creating markers", "+\t\t\t\t\tthis.manager.fire(this.currentDelta, JavaModelManager.DEFAULT_CHANGE_EVENT);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.currentDelta = null;", "+\t\t\tif (monitor != null) monitor.done();", "+\t\t}", "+\t}", "-\t\t\t// find JARs to refresh", "-\t\t\tHashSet archivePathsToRefresh = new HashSet();", "-\t\t\tfor (int i = 0, elementsLength = refreshedElements.length; i < elementsLength; i++){", "-\t\t\t\tIJavaElement element = refreshedElements[i];", "-\t\t\t// perform refresh", "-\t\t\tfCurrentDelta = new JavaElementDelta(model);", "-\t\t\tboolean hasDelta = false;", "-\t", "-\t\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();", "-\t\t\tIWorkspaceRoot wksRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t", "-\t\t\t\tif (monitor != null && monitor.isCanceled()) return; ", "-\t\t\t\t", "-\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\tIClasspathEntry[] entries = project.getResolvedClasspath(true);", "-\t\t\t\tfor (int j = 0; j < entries.length; j++){", "-\t\t\t\t\tif (entries[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "-\t\t\t\t\t\tIPath entryPath = entries[j].getPath();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (!archivePathsToRefresh.contains(entryPath)) continue; // not supposed to be refreshed", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tString status = (String)externalArchivesStatus.get(entryPath); ", "-\t\t\t\t\t\tif (status == null){", "-\t\t\t\t\t\t\t// compute shared status", "-\t\t\t\t\t\t\tObject targetLibrary = JavaModel.getTarget(wksRoot, entryPath, true);", "-\t", "-\t\t\t\t\t\t\tif (targetLibrary == null){ // missing JAR", "-\t\t\t\t\t\t\t\tif (this.externalTimeStamps.containsKey(entryPath)){", "-\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);", "-\t\t\t\t\t\t\t\t\t// the jar was physically removed: remove the index", "-\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t} else if (targetLibrary instanceof File){ // external JAR", "-\t", "-\t\t\t\t\t\t\t\tFile externalFile = (File)targetLibrary;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// check timestamp to figure if JAR has changed in some way", "-\t\t\t\t\t\t\t\tLong oldTimestamp =(Long) this.externalTimeStamps.get(entryPath);", "-\t\t\t\t\t\t\t\tlong newTimeStamp = getTimeStamp(externalFile);", "-\t\t\t\t\t\t\t\tif (oldTimestamp != null){", "-\t", "-\t\t\t\t\t\t\t\t\tif (newTimeStamp == 0){ // file doesn't exist", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_REMOVED);", "-\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);", "-\t\t\t\t\t\t\t\t\t\t// remove the index", "-\t\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);", "-\t", "-\t\t\t\t\t\t\t\t\t} else if (oldTimestamp.longValue() != newTimeStamp){", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_CHANGED);", "-\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "-\t\t\t\t\t\t\t\t\t\t// first remove the index so that it is forced to be re-indexed", "-\t\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);", "-\t\t\t\t\t\t\t\t\t\t// then index the jar", "-\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (newTimeStamp == 0){ // jar still doesn't exist", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_ADDED);", "-\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "-\t\t\t\t\t\t\t\t\t\t// index the new jar", "-\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else { // internal JAR", "-\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, INTERNAL_JAR_IGNORE);", "-\t\t\t\t\t\t// according to computed status, generate a delta", "-\t\t\t\t\t\tstatus = (String)externalArchivesStatus.get(entryPath); ", "-\t\t\t\t\t\tif (status != null){", "-\t\t\t\t\t\t\tif (status == EXTERNAL_JAR_ADDED){", "-\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\t\tif (VERBOSE){", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR ADDED, affecting root: \"+root.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t\t\telementAdded(root, null, null);", "-\t\t\t\t\t\t\t\thasDelta = true;", "-\t\t\t\t\t\t\t} else if (status == EXTERNAL_JAR_CHANGED) {", "-\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\t\tif (VERBOSE){", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR CHANGED, affecting root: \"+root.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// reset the corresponding project built state, since the builder would miss this change", "-\t\t\t\t\t\t\t\tthis.manager.setLastBuiltState(project.getProject(), null /*no state*/);", "-\t\t\t\t\t\t\t\tcontentChanged(root, null);", "-\t\t\t\t\t\t\t\thasDelta = true;", "-\t\t\t\t\t\t\t} else if (status == EXTERNAL_JAR_REMOVED) {", "-\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\t\tif (VERBOSE){", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR REMOVED, affecting root: \"+root.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\telementRemoved(root, null, null);", "-\t\t\t\t\t\t\t\thasDelta = true;", "-\t\t\tif (hasDelta){", "-\t\t\t\tthis.manager.fire(fCurrentDelta, JavaModelManager.DEFAULT_CHANGE_EVENT);\t\t\t", "-\t\t\t\t", "-\t\t\t\t// force classpath marker refresh of affected projects", "-\t\t\t\tJavaModel.flushExternalFileCache();", "-\t\t\t\tIJavaElementDelta[] projectDeltas = fCurrentDelta.getAffectedChildren();", "-\t\t\t\tfor (int i = 0, length = projectDeltas.length; i < length; i++) {", "-\t\t\t\t\tIJavaElementDelta delta = projectDeltas[i];", "-\t\t\t\t\t((JavaProject)delta.getElement()).getResolvedClasspath(", "-\t\t\t\t\t\ttrue, // ignoreUnresolvedEntry", "-\t\t\t\t\t\ttrue); // generateMarkerOnError", "-\t\t\t\t}\t\t", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tfCurrentDelta = null;", "-\t\t\tif (monitor != null) monitor.done();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98c8fabc415b85b9fde2cc0e49507e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t", "-\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\t\t", "-\t\tfinal char typeSuffix;", "-\t\tswitch(searchFor){", "-\t\t\tcase IJavaSearchConstants.CLASS :", "-\t\t\t\ttypeSuffix = IIndexConstants.CLASS_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaSearchConstants.INTERFACE :", "-\t\t\t\ttypeSuffix = IIndexConstants.INTERFACE_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaSearchConstants.ENUM :", "-\t\t\t\ttypeSuffix = IIndexConstants.ENUM_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaSearchConstants.ANNOTATION_TYPE :", "-\t\t\t\ttypeSuffix = IIndexConstants.ANNOTATION_TYPE_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tdefault : ", "-\t\t\t\ttypeSuffix = IIndexConstants.TYPE_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tfinal TypeDeclarationPattern pattern = new TypeDeclarationPattern(", "-\t\t\tpackageName,", "-\t\t\tnull, // do find member types", "-\t\t\ttypeName,", "-\t\t\ttypeSuffix,", "-\t\t\tmatchRule);", "-\t\tfinal HashSet workingCopyPaths = new HashSet();", "-\t\tICompilationUnit[] copies = getWorkingCopies();", "-\t\tif (copies != null) {", "-\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "-\t\t\t}", "-\t\t}", "-\t", "-\t\tIndexQueryRequestor searchRequestor = new IndexQueryRequestor(){", "-\t\t\tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant) {", "-\t\t\t\tTypeDeclarationPattern record = (TypeDeclarationPattern)indexRecord;", "-\t\t\t\tif (record.enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "-\t\t\t\t\t\t&& !workingCopyPaths.contains(documentPath)) { // filter out working copies", "-\t\t\t\t\tswitch (record.typeSuffix) {", "-\t\t\t\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "-\t\t\t\t\t\tnameRequestor.acceptInterface(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) need support", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) need support", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t};", "-\t", "-\t\ttry {", "-\t\t\tif (progressMonitor != null) {", "-\t\t\t\tprogressMonitor.beginTask(Util.bind(\"engine.searching\"), 100); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\t// add type names from indexes", "-\t\t\tindexManager.performConcurrentJob(", "-\t\t\t\tnew PatternSearchJob(", "-\t\t\t\t\tpattern, ", "-\t\t\t\t\tgetDefaultSearchParticipant(), // Java search only", "-\t\t\t\t\tscope, ", "-\t\t\t\t\tsearchRequestor),", "-\t\t\t\twaitingPolicy,", "-\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 100));\t", "-\t\t\t\t", "-\t\t\t// add type names from working copies", "-\t\t\tif (copies != null) {", "-\t\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\t\tfinal String path = workingCopy.getPath().toString();", "-\t\t\t\t\tif (workingCopy.isConsistent()) {", "-\t\t\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "-\t\t\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "-\t\t\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "-\t\t\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "-\t\t\t\t\t\t\tIType type = allTypes[j];", "-\t\t\t\t\t\t\tIJavaElement parent = type.getParent();", "-\t\t\t\t\t\t\tchar[][] enclosingTypeNames;", "-\t\t\t\t\t\t\tif (parent instanceof IType) {", "-\t\t\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "-\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tchar[] simpleName = type.getElementName().toCharArray();", "-\t\t\t\t\t\t\tint kind;", "-\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.CLASS;", "-\t\t\t\t\t\t\t} else if (type.isInterface()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE;", "-\t\t\t\t\t\t\t} else if (type.isEnum()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.ENUM;", "-\t\t\t\t\t\t\t} else /*if (type.isAnnotation())*/ {", "-\t\t\t\t\t\t\t\tkind = IGenericType.ANNOTATION_TYPE;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, kind, packageDeclaration, simpleName)) {", "-\t\t\t\t\t\t\t\tswitch(kind) {", "-\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tParser basicParser = getParser();", "-\t\t\t\t\t\tfinal char[] contents = workingCopy.getBuffer().getCharacters();", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit unit = new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\t\t\t\t\tpublic char[] getContents() {", "-\t\t\t\t\t\t\t\treturn contents;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic char[] getMainTypeName() {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic char[][] getPackageName() {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic char[] getFileName() {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t\tCompilationResult compilationUnitResult = new CompilationResult(unit, 0, 0, this.compilerOptions.maxProblemsPerUnit);", "-\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = basicParser.dietParse(unit, compilationUnitResult);", "-\t\t\t\t\t\tif (parsedUnit != null) {", "-\t\t\t\t\t\t\tfinal char[] packageDeclaration = parsedUnit.currentPackage == null ? CharOperation.NO_CHAR : CharOperation.concatWith(parsedUnit.currentPackage.getImportName(), '.');", "-\t\t\t\t\t\t\tclass AllTypeDeclarationsVisitor extends ASTVisitor {", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope blockScope) {", "-\t\t\t\t\t\t\t\t\treturn false; // no local/anonymous type", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope compilationUnitScope) {", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, typeDeclaration.getKind(), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\tswitch(typeDeclaration.getKind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope classScope) {", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, memberTypeDeclaration.getKind(), packageDeclaration, memberTypeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\t// compute encloising type names", "-\t\t\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "-\t\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t\t\t\twhile (enclosing != null) {", "-\t\t\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "-\t\t\t\t\t\t\t\t\t\t\tif ((enclosing.bits & ASTNode.IsMemberTypeMASK) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tenclosing = enclosing.enclosingType;", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tenclosing = null;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t// report", "-\t\t\t\t\t\t\t\t\t\tswitch(memberTypeDeclaration.getKind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tparsedUnit.traverse(new AllTypeDeclarationsVisitor(), parsedUnit.scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}\t", "-\t\t} finally {", "-\t\t\tif (progressMonitor != null) {", "-\t\t\t\tprogressMonitor.done();", "-\t\t\t}", "-\t\t}", "+\t\tTypeNameRequestorWrapper requestorWrapper = new TypeNameRequestorWrapper(nameRequestor);", "+\t\tthis.basicEngine.searchAllTypeNames(packageName, typeName, matchRule, searchFor, scope, requestorWrapper, waitingPolicy, progressMonitor);"]}], "num": 27011}
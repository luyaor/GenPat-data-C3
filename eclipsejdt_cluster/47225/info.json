{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1e715cf4b5d18587271af89c022c253", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c609cfe5f5be7f13ae5d25f269ac9ea5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6ab8a052a7d8ac7a830c6733e19e9b30c380dad7", "commitAfterChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic BoundSet solve() throws InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet solve(boolean inferringApplicability) throws InferenceFailureException", "diff": ["-\tpublic /*@Nullable*/ BoundSet solve() throws InferenceFailureException {", "+\tpublic /*@Nullable*/ BoundSet solve(boolean inferringApplicability) throws InferenceFailureException {", "+\t\tif (inferringApplicability)", "+\t\t\tthis.b2 = this.currentBounds.copy(); // Preserve the result after reduction, without effects of resolve() for later use in invocation type inference.", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca34b59a14ff61a3e6604f1eedd50c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "15119daf817db1018e77a6fda243b1a0915bea1f", "commitAfterChange": "46f57536ed8e2bfbe5a9484e153647c7c5b9cb5d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate void findImports(CompletionOnImportReference importReference)", "signatureAfterChange": "  \tprivate void findImports(CompletionOnImportReference importReference, boolean findMembers)", "diff": ["-\tprivate void findImports(CompletionOnImportReference importReference) {", "+\tprivate void findImports(CompletionOnImportReference importReference, boolean findMembers) {", "+\t\tthis.resolvingStaticImports = importReference.isStatic();", "-\t\t\tthis.nameEnvironment.findTypes(importName, PROPOSE_MEMBER_TYPES, this);", "+\t\t\tthis.nameEnvironment.findTypes(importName, findMembers && PROPOSE_MEMBER_TYPES, this);"]}], "num": 47225}
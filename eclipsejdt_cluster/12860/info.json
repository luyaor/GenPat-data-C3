{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ff12ea4e389e264efdb870b3a8a5a35", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a53c41e4c8ecc2727101cb9b9b0db143", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationDietRecoveryTest.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void checkParse( \tchar[] source,  \tString expectedDietUnitToString, \tString expectedDietPlusBodyUnitToString,\t \tString expectedFullUnitToString, \tString expectedCompletionDietUnitToString,  \tString testName)", "signatureAfterChange": "  public void checkParse( \tchar[] source,  \tString expectedDietUnitToString, \tString expectedDietPlusBodyUnitToString,\t \tString expectedFullUnitToString, \tString expectedCompletionDietUnitToString,  \tString testName)", "diff": ["-\t{", "+\tif (CHECK_ALL_PARSE){", "-\t{", "+\tif (CHECK_ALL_PARSE){", "-\t{", "+\tif (CHECK_ALL_PARSE){", "-\t{", "+\tif (CHECK_ALL_PARSE){", "-\t{", "+\tif (CHECK_ALL_PARSE){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de3ba290aeceb2553dc661aa79012b43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "8bb6b9481b79f29da1fc965f1ebeeb888e97d205", "commitAfterChange": "4e81456d91d85b9a795956ecc38cb1d7061bd32d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "\r \r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "diff": ["+\r", "+\r", "+\r", "-\t\t\tif (astNode instanceof CompletionOnFieldType) {\r", "-\t\t\t\tCompletionOnFieldType field = (CompletionOnFieldType) astNode;\r", "-\t\t\t\tCompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) field.type;\r", "-\t\t\t\tchar[] token = type.token;\r", "-\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);\r", "-\t\t\t\t//\t\tfindKeywords(token, modifiers, scope); // could be the start of a field, method or member type\r", "+\t\tif (astNode instanceof CompletionOnFieldType) {\r", "+\r", "+\t\t\tCompletionOnFieldType field = (CompletionOnFieldType) astNode;\r", "+\t\t\tCompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) field.type;\r", "+\t\t\tchar[] token = type.token;\r", "+\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);\r", "+\t\t\t//\t\tfindKeywords(token, modifiers, scope); // could be the start of a field, method or member type\r", "+\t\t\tfindTypesAndPackages(token, scope);\r", "+\t\t\t\r", "+\t\t\tif(field.modifiers == CompilerModifiers.AccDefault) {\r", "+\t\t\t\tfindMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null);\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\r", "+\t\t\tif (astNode instanceof CompletionOnSingleNameReference) {\r", "+\r", "+\t\t\t\tchar[] token = ((CompletionOnSingleNameReference) astNode).token;\r", "+\t\t\t\tfindVariablesAndMethods(\r", "+\t\t\t\t\ttoken,\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\t(CompletionOnSingleNameReference) astNode,\r", "+\t\t\t\t\tscope);\r", "+\t\t\t\t// can be the start of a qualified type name\r", "-\t\t\t\t\r", "-\t\t\t\tif(field.modifiers == CompilerModifiers.AccDefault)\r", "-\t\t\t\t\tfindMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null);\r", "-\t\t\t} else\r", "-\t\t\t\tif (astNode instanceof CompletionOnSingleNameReference) {\r", "-\t\t\t\t\tchar[] token = ((CompletionOnSingleNameReference) astNode).token;\r", "-\t\t\t\t\tfindVariablesAndMethods(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,\r", "-\t\t\t\t\t\tscope);\r", "-\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "+\r", "+\t\t\t} else {\r", "+\r", "+\t\t\t\tif (astNode instanceof CompletionOnSingleTypeReference) {\r", "+\r", "+\t\t\t\t\tchar[] token = ((CompletionOnSingleTypeReference) astNode).token;\r", "+\r", "-\t\t\t\t} else\r", "-\t\t\t\t\tif (astNode instanceof CompletionOnSingleTypeReference) {\r", "-\t\t\t\t\t\tchar[] token = ((CompletionOnSingleTypeReference) astNode).token;\r", "-\t\t\t\t\t\tif (qualifiedBinding == null)\r", "-\t\t\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "-\t\t\t\t\t\t// can be the start of a qualified type name\r", "-\t\t\t\t\t\telse\r", "+\t\t\t\t\tif (qualifiedBinding == null) {\r", "+\t\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "+\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "-\t\t\t\t\t} else\r", "-\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedNameReference) {\r", "-\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "-\t\t\t\t\t\t\tCompletionOnQualifiedNameReference ref =\r", "-\t\t\t\t\t\t\t\t(CompletionOnQualifiedNameReference) astNode;\r", "-\t\t\t\t\t\t\tchar[] token = ref.completionIdentifier;\r", "-\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];\r", "-\t\t\t\t\t\t\tif (qualifiedBinding instanceof VariableBinding) {\r", "+\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedNameReference) {\r", "+\r", "+\t\t\t\t\t\tinsideQualifiedReference = true;\r", "+\t\t\t\t\t\tCompletionOnQualifiedNameReference ref =\r", "+\t\t\t\t\t\t\t(CompletionOnQualifiedNameReference) astNode;\r", "+\t\t\t\t\t\tchar[] token = ref.completionIdentifier;\r", "+\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];\r", "+\r", "+\t\t\t\t\t\tif (qualifiedBinding instanceof VariableBinding) {\r", "+\r", "+\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;\r", "+\t\t\t\t\t\t\tif (receiverType != null) {\r", "+\t\t\t\t\t\t\t\tfindFieldsAndMethods(token, receiverType, scope, ref, scope);\r", "+\t\t\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "+\r", "+\t\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;\r", "-\t\t\t\t\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;\r", "-\t\t\t\t\t\t\t\tif (receiverType != null)\r", "-\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(token, receiverType, scope, ref, scope);\r", "-\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "-\t\t\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;\r", "-\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(token, receiverType, scope, scope.enclosingSourceType());\r", "-\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding);\r", "-\t\t\t\t\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\t\tref,\r", "-\t\t\t\t\t\t\t\t\t\tscope);\r", "-\t\t\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t\tnull,\r", "-\t\t\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\tref);\r", "-\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "-\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t} else\r", "+\r", "+\t\t\t\t\t\t\t\tfindMemberTypes(token, receiverType, scope, scope.enclosingSourceType());\r", "+\r", "+\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding);\r", "+\r", "+\t\t\t\t\t\t\t\tfindFields(\r", "+\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\tref,\r", "+\t\t\t\t\t\t\t\t\tscope);\r", "+\r", "+\t\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\tref);\r", "+\r", "+\t\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "+\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "+\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\t} else {\r", "+\r", "-\t\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "-\t\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference ref =\r", "-\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;\r", "-\t\t\t\t\t\t\t\tchar[] token = ref.completionIdentifier;\r", "-\t\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];\r", "-\t\t\t\t\t\t\t\t// get the source positions of the completion identifier\r", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "-\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(\r", "-\t\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "-\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "-\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "+\r", "+\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "+\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference ref =\r", "+\t\t\t\t\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;\r", "+\t\t\t\t\t\t\tchar[] token = ref.completionIdentifier;\r", "+\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];\r", "+\r", "+\t\t\t\t\t\t\t// get the source positions of the completion identifier\r", "+\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "+\r", "+\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\t\t\tfindMemberTypes(\r", "+\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "+\r", "+\t\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "+\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "+\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMemberAccess) {\r", "+\r", "+\t\t\t\t\t\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;\r", "+\t\t\t\t\t\t\t\tlong completionPosition = access.nameSourcePosition;\r", "+\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\r", "+\t\t\t\t\t\t\t\tfindFieldsAndMethods(\r", "+\t\t\t\t\t\t\t\t\taccess.token,\r", "+\t\t\t\t\t\t\t\t\t(TypeBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\taccess,\r", "+\t\t\t\t\t\t\t\t\tscope);\r", "+\r", "+\t\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMessageSend) {\r", "+\r", "+\t\t\t\t\t\t\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;\r", "+\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "+\t\t\t\t\t\t\t\t\t\tcomputeTypes(messageSend.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\tif (qualifiedBinding == null) {\r", "+\r", "+\t\t\t\t\t\t\t\t\t\tfindMessageSends(messageSend.selector, argTypes, scope, messageSend);\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\t\t\t\tmessageSend.selector,\r", "+\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\t\tmessageSend);\r", "-\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMemberAccess) {\r", "-\t\t\t\t\t\t\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;\r", "-\t\t\t\t\t\t\t\t\tlong completionPosition = access.nameSourcePosition;\r", "-\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(\r", "-\t\t\t\t\t\t\t\t\t\taccess.token,\r", "-\t\t\t\t\t\t\t\t\t\t(TypeBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\taccess,\r", "-\t\t\t\t\t\t\t\t\t\tscope);\r", "-\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMessageSend) {\r", "-\t\t\t\t\t\t\t\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;\r", "+\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnExplicitConstructorCall) {\r", "+\r", "+\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =\r", "+\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(messageSend.arguments, (BlockScope) scope);\r", "-\t\t\t\t\t\t\t\t\t\tif (qualifiedBinding == null)\r", "-\t\t\t\t\t\t\t\t\t\t\tfindMessageSends(messageSend.selector, argTypes, scope, messageSend);\r", "-\t\t\t\t\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\t\t\t\t\tmessageSend.selector,\r", "-\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\t\t\tmessageSend);\r", "-\t\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnExplicitConstructorCall) {\r", "-\t\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =\r", "-\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "+\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\tconstructorCall);\r", "+\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedAllocationExpression) {\r", "+\r", "+\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =\r", "+\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(allocExpression.arguments, (BlockScope) scope);\r", "-\t\t\t\t\t\t\t\t\t\t\t\tconstructorCall);\r", "-\t\t\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedAllocationExpression) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(allocExpression.arguments, (BlockScope) scope);\r", "-\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression);\r", "-\t\t\t\t\t\t\t\t\t\t\t} else\r", "-\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnClassLiteralAccess) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tchar[] token = ((CompletionOnClassLiteralAccess) astNode).completionIdentifier;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\tallocExpression);\r", "+\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\r", "+\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnClassLiteralAccess) {\r", "+\r", "+\t\t\t\t\t\t\t\t\t\t\t\tchar[] token = ((CompletionOnClassLiteralAccess) astNode).completionIdentifier;\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding);\r", "+\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df57be583875a3b9aa8e2d839128f552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "9b263ca74abd4722306ade1fedc11526a5ecbfdb", "commitAfterChange": "73a5ef02b06d1735d208b5c3da074f189eab0418", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void _testCompilerOneClassWithSystemCompiler2()", "signatureAfterChange": " \tpublic void _testCompilerOneClassWithSystemCompiler2()", "diff": ["-\t\t\t\tSystem.out.println(\"Create file for input : \" + packageName + \" \" + relativeName + \" in location \" + location);", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create file for input : \" + packageName + \" \" + relativeName + \" in location \" + location);", "+\t\t\t\t}", "-\t\t\t\tSystem.out.println(\"Create java file for input : \" + className + \" in location \" + location);", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create java file for input : \" + className + \" in location \" + location);", "+\t\t\t\t}", "-\t\t\t\tSystem.out.println(\"Create .class file for \" + className + \" in location \" + location + \" with sibling \" + sibling.toUri());", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create .class file for \" + className + \" in location \" + location + \" with sibling \" + sibling.toUri());", "+\t\t\t\t}", "-\t\t\t\tSystem.out.println(javaFileForOutput.toUri());", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(javaFileForOutput.toUri());", "+\t\t\t\t}", "- \t\tCompilationTask task = systemCompiler.getTask(printWriter, manager, null, options, null, units);", "+\t\tCompilationTask task = systemCompiler.getTask(printWriter, manager, null, options, null, units);", "- \t\tSystem.out.println(\"Has location CLASS_OUPUT : \" + forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "+\t\tif (DEBUG) {", "+\t\t\tSystem.out.println(\"Has location CLASS_OUPUT : \" + forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "+\t\t}", "- \t\tdisplayLocation(manager, StandardLocation.CLASS_PATH);", "- \t\tdisplayLocation(manager, StandardLocation.PLATFORM_CLASS_PATH);", "+\t\tdisplayLocation(manager, StandardLocation.CLASS_PATH);", "+\t\tdisplayLocation(manager, StandardLocation.PLATFORM_CLASS_PATH);", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t\tif (!result.booleanValue()) {", "+\t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t\t\tassertTrue(\"Compilation failed \", false);", "+\t\t}"]}], "num": 12860}
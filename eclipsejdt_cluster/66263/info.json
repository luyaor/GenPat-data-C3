{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4ec5e8048cc844b47ae5976f26f579a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3b077e56308870b16bf17299844c614", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 125, "signatureBeforeChange": " public void test1001() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void test1001() throws CoreException, InterruptedException, IOException", "diff": ["-\t\t\t\"/P1/X.java\", ", "+\t\t\t\"/P1/X.java\",", "-\t\tsources[1] = ", "+\t\tsources[1] =", "-\t\tsources[2] = ", "+\t\tsources[2] =", "-\t\tthis.wcOwner = new WorkingCopyOwner() {};", "-\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/X.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/X.java\").getWorkingCopy(this.wcOwner, null);", "-\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/I.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/I.java\").getWorkingCopy(this.wcOwner, null);", "-\t\tthis.workingCopies[2] = getCompilationUnit(\"/P3/Y.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopies[2] = getCompilationUnit(\"/P3/Y.java\").getWorkingCopy(this.wcOwner, null);", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in /P3/Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y implements I {\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in /P3/Y.java (at line 1)\\n\" +", "+\t\t\t\"\tclass Y implements I {\\n\" +", "-//\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" + ", "-//\t\t\t\"----------\\n\" + ", "-//\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" + ", "-//\t\t\t\"\tclass Y implements I {\\n\" + ", "-//\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type Y must implement the inherited abstract method I.foo()\\n\" + ", "+//\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" +", "+//\t\t\t\"----------\\n\" +", "+//\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" +", "+//\t\t\t\"\tclass Y implements I {\\n\" +", "+//\t\t\t\"\t      ^\\n\" +", "+\t\t\t\"The type Y must implement the inherited abstract method I.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0a8ebbccdf8678feeafc942d5e2915", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 126, "signatureBeforeChange": " public void test1002() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void test1002() throws CoreException, InterruptedException, IOException", "diff": ["-\t\t\t\"/P1/X.java\", ", "+\t\t\t\"/P1/X.java\",", "-\t\tsources[1] = ", "+\t\tsources[1] =", "-\t\tsources[2] = ", "+\t\tsources[2] =", "-\t\tthis.wcOwner = new WorkingCopyOwner() {};", "-\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/X.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/X.java\").getWorkingCopy(this.wcOwner, null);", "-\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/I.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/I.java\").getWorkingCopy(this.wcOwner, null);", "-\t\tthis.workingCopies[2] = getCompilationUnit(\"/P3/Y.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopies[2] = getCompilationUnit(\"/P3/Y.java\").getWorkingCopy(this.wcOwner, null);", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in /P3/Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type Y must implement the inherited abstract method I.foo()\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in /P3/Y.java (at line 1)\\n\" +", "+\t\t\t\"\tclass Y implements I {\\n\" +", "+\t\t\t\"\t      ^\\n\" +", "+\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" +", "+\t\t\t\"\tclass Y implements I {\\n\" +", "+\t\t\t\"\t      ^\\n\" +", "+\t\t\t\"The type Y must implement the inherited abstract method I.foo()\\n\" +"]}], "num": 66263}
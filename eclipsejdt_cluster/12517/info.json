{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6fe8e4e611bea1e8697d10e6cff3c26", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b85337ccbaaa932349f7ea644b8a016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "9a76fb8f9434ae4b71dc267e686b050759ff3536", "commitAfterChange": "e5d54da7cf77d6614acfbbcede23df9b9dad68f9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkToDoTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-// chech presence of TODO: tags", "-public void checkToDoTag(int commentStart, int commentEnd) {", "+// chech presence of task: tags", "+public void checkTaskTag(int commentStart, int commentEnd) {", "-\t// only look for newer TODO: tags", "-\tif (this.todoCount > 0 && this.todoPositions[this.todoCount-1][0] >= commentStart) {", "+\t// only look for newer task: tags", "+\tif (this.taskCount > 0 && this.taskPositions[this.taskCount-1][0] >= commentStart) {", "-\tint tagLength = this.toDoTag.length;", "-\tfor (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+\tnextChar: for (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+\t\tint nextPos = -1;", "+\t\t", "-\t\tboolean foundTag = true;", "-\t\tfor (int t = 0; t < tagLength; t++){", "-\t\t\tif (this.source[i+t] != this.toDoTag[t]){", "-\t\t\t\tfoundTag = false;", "+\t\tnextTag: for (int itag = 0; itag < this.taskTags.length; itag++){", "+\t\t\tchar[] tag = this.taskTags[itag];", "+\t\t\tint tagLength = tag.length;", "+\t\t\tfor (int t = 0; t < tagLength; t++){", "+\t\t\t\tif (this.source[i+t] != tag[t]) continue nextTag;", "+\t\t\t}", "+\t\t\tnextPos = i + tagLength;", "+\t\t\tbreak;", "+\t\t}", "+\t\tif (nextPos < 0) continue nextChar;", "+", "+\t\t// extract message", "+\t\tchar c = this.source[nextPos];", "+\t\tint start = i; ", "+\t\tint msgStart = nextPos;", "+\t\tint end = -1;", "+\t\tfor (int j = nextPos; j < commentEnd; j++){", "+\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "+\t\t\t\tend = j - 1;", "+\t\t\t\ti = j+1;", "-\t\tif (foundTag){", "-", "-\t\t\tint nextPos = i+5;", "-\t\t\tchar c = this.source[nextPos];", "-", "-\t\t\tint start = i; ", "-\t\t\tint end = -1;", "-\t\t\tfor (int j = nextPos; j < commentEnd; j++){", "-\t\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "+\t\tif (end < 0){", "+\t\t\tfor (int j = commentEnd; j >= nextPos; j--){", "+\t\t\t\tif ((c = this.source[j]) == '*') {", "-\t\t\t\t\ti = j+1;", "-\t\t\tif (end < 0){", "-\t\t\t\tfor (int j = commentEnd; j >= nextPos; j--){", "-\t\t\t\t\tif ((c = this.source[j]) == '*') {", "-\t\t\t\t\t\tend = j - 1;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (end < 0) end = nextPos+1;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// trim message", "-\t\t\twhile (source[end] == ' ' && start <= end) end--;", "-\t\t\t", "-\t\t\tchar[] message = new char[end-start+1];", "-\t\t\tSystem.arraycopy(source, start, message, 0, end-start+1);", "-\t\t\t\t\t", "-\t\t\tif (this.todoMessages == null){", "-\t\t\t\tthis.todoMessages = new char[5][];", "-\t\t\t\tthis.todoPositions = new int[5][];", "-\t\t\t} else if (this.todoCount == this.todoMessages.length) {", "-\t\t\t\tSystem.arraycopy(this.todoMessages, 0, this.todoMessages = new char[this.todoCount*2][], 0, this.todoCount);", "-\t\t\t\tSystem.arraycopy(this.todoPositions, 0, this.todoPositions = new int[this.todoCount*2][], 0, this.todoCount);", "-\t\t\t}", "-\t\t\tthis.todoMessages[this.todoCount] = message;", "-\t\t\tthis.todoPositions[this.todoCount] = new int[]{ start, end };", "-\t\t\tthis.todoCount++;", "+\t\t\tif (end < 0) end = nextPos+1;", "+\t\t", "+\t\t// trim message", "+\t\twhile (source[msgStart] == ' ' && msgStart <= end) msgStart++;", "+\t\twhile (source[end] == ' ' && start <= end) end--;", "+\t\t", "+\t\tchar[] message = new char[end-msgStart+1];", "+\t\tSystem.arraycopy(source, msgStart, message, 0, end-msgStart+1);", "+\t\t\t\t", "+\t\tif (this.taskMessages == null){", "+\t\t\tthis.taskMessages = new char[5][];", "+\t\t\tthis.taskPositions = new int[5][];", "+\t\t} else if (this.taskCount == this.taskMessages.length) {", "+\t\t\tSystem.arraycopy(this.taskMessages, 0, this.taskMessages = new char[this.taskCount*2][], 0, this.taskCount);", "+\t\t\tSystem.arraycopy(this.taskPositions, 0, this.taskPositions = new int[this.taskCount*2][], 0, this.taskCount);", "+\t\t}", "+\t\tthis.taskMessages[this.taskCount] = message;", "+\t\tthis.taskPositions[this.taskCount] = new int[]{ start, end };", "+\t\tthis.taskCount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69e1912f871137b7bc114de7f6186fa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "6dad91e4f298fff813aeb65b0b459a8698c68fdb", "commitAfterChange": "74ba53ab0437265c5342ec723f72d2aea81fd661", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Scanner(boolean tokenizeComments, boolean tokenizeWhiteSpace)", "signatureAfterChange": " public void checkToDoTag(int commentStart, int commentEnd)", "diff": ["-public Scanner(boolean tokenizeComments, boolean tokenizeWhiteSpace) {", "-\tthis(tokenizeComments, tokenizeWhiteSpace, false);\t", "+// chech presence of TODO: tags", "+public void checkToDoTag(int commentStart, int commentEnd) {", "+", "+\t// only look for newer TODO: tags", "+\tif (this.todoCount > 0 && this.todoPositions[this.todoCount-1][0] >= commentStart) {", "+\t\treturn;", "+\t}", "+\tint tagLength = this.toDoTag.length;", "+\tfor (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+", "+\t\t// check for tag occurrence", "+\t\tboolean foundTag = true;", "+\t\tfor (int t = 0; t < tagLength; t++){", "+\t\t\tif (this.source[i+t] != this.toDoTag[t]){", "+\t\t\t\tfoundTag = false;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (foundTag){", "+", "+\t\t\tint nextPos = i+5;", "+\t\t\tchar c = this.source[nextPos];", "+", "+\t\t\tint start = i; ", "+\t\t\tint end = -1;", "+\t\t\tfor (int j = nextPos; j < commentEnd; j++){", "+\t\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "+\t\t\t\t\tend = j - 1;", "+\t\t\t\t\ti = j+1;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (end < 0){", "+\t\t\t\tfor (int j = commentEnd; j >= nextPos; j--){", "+\t\t\t\t\tif ((c = this.source[j]) == '*') {", "+\t\t\t\t\t\tend = j - 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (end < 0) end = nextPos+1;", "+\t\t\t}", "+\t\t\t", "+\t\t\t// trim message", "+\t\t\tint msgStart = nextPos;", "+\t\t\twhile (source[msgStart] == ' ' && msgStart < end) msgStart++;", "+\t\t\twhile (source[end] == ' ' && msgStart <= end) end--;", "+\t\t\t", "+\t\t\tchar[] message = new char[end-msgStart+1];", "+\t\t\tSystem.arraycopy(source, msgStart, message, 0, end-msgStart+1);", "+\t\t\t\t\t", "+\t\t\tif (this.todoMessages == null){", "+\t\t\t\tthis.todoMessages = new char[5][];", "+\t\t\t\tthis.todoPositions = new int[5][];", "+\t\t\t} else if (this.todoCount == this.todoMessages.length) {", "+\t\t\t\tSystem.arraycopy(this.todoMessages, 0, this.todoMessages = new char[this.todoCount*2][], 0, this.todoCount);", "+\t\t\t\tSystem.arraycopy(this.todoPositions, 0, this.todoPositions = new int[this.todoCount*2][], 0, this.todoCount);", "+\t\t\t}", "+\t\t\tthis.todoMessages[this.todoCount] = message;", "+\t\t\tthis.todoPositions[this.todoCount] = new int[]{ start, end };", "+\t\t\tthis.todoCount++;", "+\t\t}", "+\t}", "+}"]}], "num": 12517}
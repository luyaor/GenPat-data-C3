{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cd87f1d2fcf31a5f2256e877442350c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06847e2a39d05f9f37d1f1bc4e498c17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "a34df737b5102c35af6a4e4a81e1b17f0f972c06", "commitAfterChange": "503b10826319a8f0c6051f7e6004c5665ff89de5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void save(IProgressMonitor progress, boolean force) throws JavaModelException", "signatureAfterChange": " public void save(IProgressMonitor progress, boolean force) throws JavaModelException", "diff": ["-\tsynchronized (this.lock) {", "-\t\tif (!hasUnsavedChanges())", "-\t\t\treturn;", "-\t\t\t", "-\t\t// use a platform operation to update the resource contents", "-\t\ttry {", "-\t\t\tString encoding = ((IJavaElement)this.owner).getJavaProject().getOption(JavaCore.CORE_ENCODING, true);", "-\t\t\tString stringContents = this.getContents();", "-\t\t\tif (stringContents == null) return;", "-\t\t\tbyte[] bytes = encoding == null ", "-\t\t\t\t? stringContents.getBytes() ", "-\t\t\t\t: stringContents.getBytes(encoding);", "-\t\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "+\tif (!hasUnsavedChanges())", "+\t\treturn;", "+\t\t", "+\t// use a platform operation to update the resource contents", "+\ttry {", "+\t\tString encoding = ((IJavaElement)this.owner).getJavaProject().getOption(JavaCore.CORE_ENCODING, true);", "+\t\tString stringContents = this.getContents();", "+\t\tif (stringContents == null) return;", "+\t\tbyte[] bytes = encoding == null ", "+\t\t\t? stringContents.getBytes() ", "+\t\t\t: stringContents.getBytes(encoding);", "+\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "-\t\t\tif (this.file.exists()) {", "-\t\t\t\tthis.file.setContents(", "-\t\t\t\t\tstream, ", "-\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\t\t\tnull);", "-\t\t\t} else {", "-\t\t\t\tthis.file.create(stream, force, null);", "-\t\t\t}\t", "-\t\t} catch (IOException e) {", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new JavaModelException(e);", "-\t\t}", "-", "-\t\t// the resource no longer has unsaved changes", "-\t\tthis.flags &= ~ (F_HAS_UNSAVED_CHANGES);", "+\t\tif (this.file.exists()) {", "+\t\t\tthis.file.setContents(", "+\t\t\t\tstream, ", "+\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\tnull);", "+\t\t} else {", "+\t\t\tthis.file.create(stream, force, null);", "+\t\t}\t", "+\t} catch (IOException e) {", "+\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t} catch (CoreException e) {", "+\t\tthrow new JavaModelException(e);", "+", "+\t// the resource no longer has unsaved changes", "+\tthis.flags &= ~ (F_HAS_UNSAVED_CHANGES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cdec1d855df661a04d8a76e71355d76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "92ff37d9e6ed58e7d36e82817b405bcadb5692ad", "commitAfterChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void createPendingFolders(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic void createPendingFolders(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tsynchronized (this.pendingFolders) {", "-\t\t\tIterator iterator = this.pendingFolders.iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tObject folderPath = iterator.next();", "-\t\t\t\ttry {", "-\t\t\t\t\tcreateLinkFolder((IPath) folderPath, false, externalFoldersProject, monitor);", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tUtil.log(e, \"Error while creating a link for external folder :\" + folderPath); //$NON-NLS-1$", "-\t\t\t\t}", "+\t\tIterator iterator = this.pendingFolders.iterator();", "+\t\twhile (iterator.hasNext()) {", "+\t\t\tObject folderPath = iterator.next();", "+\t\t\ttry {", "+\t\t\t\tcreateLinkFolder((IPath) folderPath, false, externalFoldersProject, monitor);", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tUtil.log(e, \"Error while creating a link for external folder :\" + folderPath); //$NON-NLS-1$"]}], "num": 59342}
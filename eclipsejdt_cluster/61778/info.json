{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "409c28a5d39ef6a7239bee5f4849a4e7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a95da285b5cef85b5519458d8ba827", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "bbab5540f6141654f88ccf247a378547f83d5cdb", "commitAfterChange": "46e269010b20dd18e9137cea742d17a67cd0d720", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "diff": ["+\t\tBoundSet previous = this.currentBounds.copy();", "-\t\t\tif (solution == null || !isResolved(solution))", "+\t\t\tif (solution == null || !isResolved(solution)) {", "+\t\t\t\tthis.currentBounds = previous; // don't let bounds from unsuccessful attempt leak into subsequent attempts", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d26c14f02e2f20db75580d7ae4518fe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t\t@Override \t\tprotected boolean token(Token token, int index)", "signatureAfterChange": "  \t\t@Override \t\tprotected boolean token(Token token, int index)", "diff": ["-\t\t\t\tif (wrapPolicy.isTopPriority() && getLineBreaksBefore() == 0", "+\t\t\t\tif (wrapPolicy.wrapMode == WrapMode.TOP_PRIORITY && getLineBreaksBefore() == 0", "-\t\t\t\t\tthis.currentTopPriorityGroupEnd = wrapPolicy.topPriorityGroupEnd;", "+\t\t\t\t\tthis.currentTopPriorityGroupEnd = wrapPolicy.groupEndIndex;"]}], "num": 61778}
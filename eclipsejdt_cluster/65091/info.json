{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bad34584ecf0a7281f52580cb7c9dccf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e7744039f3cc09b0a16569eb0e8998a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "98c08ded096494364ca74f948e8f494b3f447e89", "commitAfterChange": "423cede7ef9cde15030dc54ef2266be4ddcc9112", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding) throws InvalidInputException", "signatureAfterChange": " protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding) throws InvalidInputException", "diff": ["-\treturn classpaths;", "+\tArrayList result = new ArrayList();", "+\tHashMap knownNames = new HashMap();", "+\tFileSystem.ClasspathSectionProblemReporter problemReporter =", "+\t\tnew FileSystem.ClasspathSectionProblemReporter() {", "+\t\t\tpublic void invalidClasspathSection(String jarFilePath) {", "+\t\t\t\taddPendingErrors(bind(\"configure.invalidClasspathSection\", jarFilePath)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tpublic void multipleClasspathSections(String jarFilePath) {", "+\t\t\t\taddPendingErrors(bind(\"configure.multipleClasspathSections\", jarFilePath)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t};", "+\twhile (! classpaths.isEmpty()) {", "+\t\tClasspath current = (Classpath) classpaths.remove(0);", "+\t\tString currentPath = current.getPath();", "+\t\tif (knownNames.get(currentPath) == null) {", "+\t\t\tknownNames.put(currentPath, current);", "+\t\t\tresult.add(current);", "+\t\t\tList linkedJars = current.fetchLinkedJars(problemReporter);", "+\t\t\tif (linkedJars != null) {", "+\t\t\t\tclasspaths.addAll(0, linkedJars);", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f79c4f2ca54953a183798ba423dcd2f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "3916c67b0128c74e08a07f109332d68e11705964", "commitAfterChange": "db24d1d0025b319685ad3bf80253e7a07fb708a2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void setUpBigProject() throws CoreException", "signatureAfterChange": " private void setUpBigProject() throws CoreException, IOException", "diff": ["-private void setUpBigProject() throws CoreException {", "+private void setUpBigProject() throws CoreException, IOException {", "+\t\tString targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-\t\tSystem.out.println(\"Create project \"+BIG_PROJECT_NAME+\" in \"+workspaceRoot.getLocation()+\":\");", "-", "-\t\t// setup projects with several source folders and several packages per source folder", "-\t\tSystem.out.println(\"\t- create \"+FOLDERS_COUNT+\" folders x \"+PACKAGES_COUNT+\" packages...\");", "-\t\tfinal String[] sourceFolders = new String[FOLDERS_COUNT];", "-\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "-\t\t\tsourceFolders[i] = \"src\" + i;", "-\t\t}", "-\t\tString path = workspaceRoot.getLocation().toString() + \"/BigProject/src\";", "-\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "-\t\t\tif (PRINT && i>0 && i%10==0) System.out.print(\"\t\t+ folder src\"+i+\"...\");", "-\t\t\tlong top = System.currentTimeMillis();", "-\t\t\tfor (int j = 0; j < PACKAGES_COUNT; j++) {", "-\t\t\t\tnew java.io.File(path + i + \"/org/eclipse/jdt/core/tests\" + i + \"/performance\" + j).mkdirs();", "+\t\tFile wkspDir = new File(targetWorkspacePath);", "+\t\tFile projectDir = new File(wkspDir, BIG_PROJECT_NAME);", "+\t\tif (projectDir.exists()) {", "+\t\t\tSystem.out.print(\"Add existing project \"+BIG_PROJECT_NAME+\" in \"+workspaceRoot.getLocation()+\" to workspace...\");", "+\t\t\tIProject bigProject = workspaceRoot.getProject(BIG_PROJECT_NAME);", "+\t\t\tif (bigProject.exists()) {", "+\t\t\t\tENV.addProject(bigProject);", "+\t\t\t} else {", "+\t\t\t\tENV.addProject(BIG_PROJECT_NAME);", "-\t\t\tif (PRINT && i>0 && i%10==0) System.out.println(\"(\"+(System.currentTimeMillis()-top)+\"ms)\");", "+\t\t\tBIG_PROJECT = (JavaProject) ENV.getJavaProject(BIG_PROJECT_NAME);", "+\t\t\tBIG_PROJECT.setRawClasspath(BIG_PROJECT.getRawClasspath(), null);", "+\t\t} else {", "+\t\t\tSystem.out.println(\"Create project \"+BIG_PROJECT_NAME+\" in \"+workspaceRoot.getLocation()+\":\");", "+\t", "+\t\t\t// setup projects with several source folders and several packages per source folder", "+\t\t\tSystem.out.println(\"\t- create \"+FOLDERS_COUNT+\" folders x \"+PACKAGES_COUNT+\" packages...\");", "+\t\t\tfinal String[] sourceFolders = new String[FOLDERS_COUNT];", "+\t\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\t\t\tsourceFolders[i] = \"src\" + i;", "+\t\t\t}", "+\t\t\tString path = workspaceRoot.getLocation().toString() + \"/BigProject/src\";", "+\t\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\t\t\tif (PRINT && i>0 && i%10==0) System.out.print(\"\t\t+ folder src\"+i+\"...\");", "+\t\t\t\tlong top = System.currentTimeMillis();", "+\t\t\t\tfor (int j = 0; j < PACKAGES_COUNT; j++) {", "+\t\t\t\t\tnew java.io.File(path + i + \"/org/eclipse/jdt/core/tests\" + i + \"/performance\" + j).mkdirs();", "+\t\t\t\t}", "+\t\t\t\tif (PRINT && i>0 && i%10==0) System.out.println(\"(\"+(System.currentTimeMillis()-top)+\"ms)\");", "+\t\t\t}", "+\t\t\tSystem.out.println(\"\t\t=> global time = \"+(System.currentTimeMillis()-start)/1000.0+\" seconds)\");", "+", "+\t\t\t// Add project to workspace", "+\t\t\tstart = System.currentTimeMillis();", "+\t\t\tSystem.out.print(\"\t- add project to full source workspace...\");", "+\t\t\tENV.addProject(BIG_PROJECT_NAME);", "+\t\t\tBIG_PROJECT = (JavaProject) createJavaProject(BIG_PROJECT_NAME, sourceFolders, \"bin\", \"1.4\");", "+\t\t\tBIG_PROJECT.setRawClasspath(BIG_PROJECT.getRawClasspath(), null);", "-", "-\t\t// Print for log in case of project creation troubles...", "-\t\tSystem.out.println(\"\t\t=> global time = \"+(System.currentTimeMillis()-start)/1000.0+\" seconds)\");", "-\t\tstart = System.currentTimeMillis();", "-\t\tSystem.out.print(\"\t- add project to full source workspace...\");", "-", "-\t\t// Add project to workspace", "-\t\tENV.addProject(BIG_PROJECT_NAME);", "-\t\tBIG_PROJECT = (JavaProject) createJavaProject(BIG_PROJECT_NAME, sourceFolders, \"bin\", \"1.4\");", "-\t\tBIG_PROJECT.setRawClasspath(BIG_PROJECT.getRawClasspath(), null);", "+\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t\tString content = \"package org.eclipse.jdt.core.tests\" + (FOLDERS_COUNT-1) + \".performance\" + (PACKAGES_COUNT-1) + \";\\n\" +", "-\t\t\t\"public class TestBigProject {\\n\" +", "-\t\t\t\"\tclass Level1 {\\n\" +", "-\t\t\t\"\t\tclass Level2 {\\n\" +", "-\t\t\t\"\t\t\tclass Level3 {\\n\" +", "-\t\t\t\"\t\t\t\tclass Level4 {\\n\" +", "-\t\t\t\"\t\t\t\t\tclass Level5 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\tclass Level6 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\tclass Level7 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\tclass Level8 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t\tclass Level9 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t\t\tclass Level10 {}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\"\t\t}\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class TestSecondary {}\\n\";", "-\t\tfile.create(new ByteArrayInputStream(content.getBytes()), true, null);", "+\t\tif (!file.exists()) {", "+\t\t\tString content = \"package org.eclipse.jdt.core.tests\" + (FOLDERS_COUNT-1) + \".performance\" + (PACKAGES_COUNT-1) + \";\\n\" +", "+\t\t\t\t\"public class TestBigProject {\\n\" +", "+\t\t\t\t\"\tclass Level1 {\\n\" +", "+\t\t\t\t\"\t\tclass Level2 {\\n\" +", "+\t\t\t\t\"\t\t\tclass Level3 {\\n\" +", "+\t\t\t\t\"\t\t\t\tclass Level4 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\tclass Level5 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\tclass Level6 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\tclass Level7 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\tclass Level8 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t\tclass Level9 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t\t\tclass Level10 {}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class TestSecondary {}\\n\";", "+\t\t\tfile.create(new ByteArrayInputStream(content.getBytes()), true, null);", "+\t\t}"]}], "num": 65091}
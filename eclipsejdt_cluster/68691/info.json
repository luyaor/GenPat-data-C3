{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37ec2f4832905dd8082302aac8c82c2f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a402efd9eca741b5255047579ffaf3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "1b6e530846bd3016ce4d9f23e0a1a2bddd09dba4", "commitAfterChange": "63e1f1decc43a525e62efd06af41afe94624af82", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tHashtableOfArrayToObject getAllPackageFragments(JavaProject project)", "signatureAfterChange": " \t \tProjectCache getProjectCache(JavaProject project)", "diff": ["-\tHashtableOfArrayToObject getAllPackageFragments(JavaProject project) {", "-\t\tif (this.allPkgFragmentsCache == null) {", "-\t\t\tHashtableOfArrayToObject cache = new HashtableOfArrayToObject();", "-\t\t\tIPackageFragmentRoot[] roots = getAllPackageFragmentRoots(project);", "+\tProjectCache getProjectCache(JavaProject project) {", "+\t\tProjectCache cache = this.projectCache;", "+\t\tif (cache == null) {", "+\t\t\tIPackageFragmentRoot[] roots;", "+\t\t\tMap reverseMap = new HashMap(3);", "+\t\t\ttry {", "+\t\t\t\troots = project.getAllPackageFragmentRoots(reverseMap);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project does not exist: cannot happen since this is the info of the project", "+\t\t\t\troots = new IPackageFragmentRoot[0];", "+\t\t\t\treverseMap.clear();", "+\t\t\t}", "+\t\t\tHashtableOfArrayToObject fragmentsCache = new HashtableOfArrayToObject();", "-\t\t\t\t\tObject existing = cache.get(pkgName);", "+\t\t\t\t\tObject existing = fragmentsCache.get(pkgName);", "-\t\t\t\t\t\tcache.put(pkgName, root);", "+\t\t\t\t\t\tfragmentsCache.put(pkgName, root);", "-\t\t\t\t\t\t\tcache.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t\t\tfragmentsCache.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "-\t\t\t\t\t\t\tcache.put(pkgName, copy);", "+\t\t\t\t\t\t\tfragmentsCache.put(pkgName, copy);", "-\t\t\tthis.allPkgFragmentsCache = cache;", "+\t\t\tcache = new ProjectCache(roots, fragmentsCache, reverseMap);", "+\t\t\tthis.projectCache = cache;", "-\t\treturn this.allPkgFragmentsCache;", "+\t\treturn cache;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b0c26944c89e25a046098b785552ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "76b281521e0c88d7bc9fbeb2c963d7e6c8914ee3", "commitAfterChange": "e4873234bb7d47f3f866e994a2466da3b0ee585f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "signatureAfterChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "diff": ["-\tpublic /*@NonNull*/ MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method) {", "+\t/*@NonNull*/ MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method) {", "-\t\tParameterizedGenericMethodBinding finalMethod = method;", "+\t\tParameterizedGenericMethodBinding finalMethod = null;", "-\t\t\tfinalMethod = getInvocationTypeInferenceSolution(method.originalMethod, invocation, targetType);", "+\t\t\tMethodBinding original = method.originalMethod;", "+\t\t\t// start over from a previous candidate but discard its type variable instantiations", "+\t\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "+\t\t\tBoundSet result = null;", "+\t\t\ttry {", "+\t\t\t\tresult = inferInvocationType(this.currentBounds, targetType, invocation, original);", "+\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t// no solution, but do more checks below", "+\t\t\t}", "+\t\t\tif (result != null) {", "+\t\t\t\tTypeBinding[] solutions = getSolutions(original.typeVariables(), invocation, result);", "+\t\t\t\tif (solutions != null) {", "+\t\t\t\t\tfinalMethod = this.environment.createParameterizedGenericMethod(original, solutions);", "+\t\t\t\t\tinvocation.registerInferenceContext(finalMethod, this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfinalMethod = method;"]}], "num": 68691}
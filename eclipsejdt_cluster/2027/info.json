{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e614c0b125e5f7435684e755724c598", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e21aa6d15591aac142a918087f8d472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "a5f6d4638626e6b63445e0dcc2d7df23ecb18614", "commitAfterChange": "7f7a05ae0877375c4e6f1763bbaeecff5ba0d990", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "diff": ["+\r", "+\t\r", "+\t// In order to be shared, working copies have to denote the same compilation unit \r", "+\t// AND use the same buffer factory.\r", "+\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.\r", "-\tWorkingCopy workingCopy = (WorkingCopy)sharedWorkingCopies.get(this);\r", "+\t\r", "+\tMap perFactoryWorkingCopies = \r", "+\t\tfactory == null \r", "+\t\t\t?(Map) sharedWorkingCopies.get(CompilationUnit.DEFAULT_FACTORY) \r", "+\t\t\t: (Map) sharedWorkingCopies.get(factory);\r", "+\tif (perFactoryWorkingCopies == null){\r", "+\t\tperFactoryWorkingCopies = new HashMap();\r", "+\t\tif (factory == null){\r", "+\t\t\tsharedWorkingCopies.put(CompilationUnit.DEFAULT_FACTORY, perFactoryWorkingCopies); \r", "+\t\t} else {\r", "+\t\t\tsharedWorkingCopies.put(factory, perFactoryWorkingCopies);\r", "+\t\t}\r", "+\t}\r", "+\tWorkingCopy workingCopy = (WorkingCopy)perFactoryWorkingCopies.get(this);\r", "-\t\tsharedWorkingCopies.put(this, workingCopy);\r", "+\t\tperFactoryWorkingCopies.put(this, workingCopy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f81857e36026ae883d843bd25e365965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "a5f6d4638626e6b63445e0dcc2d7df23ecb18614", "commitAfterChange": "7f7a05ae0877375c4e6f1763bbaeecff5ba0d990", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IJavaElement findSharedWorkingCopy()", "signatureAfterChange": "\r public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["-public IJavaElement findSharedWorkingCopy() {\r", "-\treturn (IJavaElement)JavaModelManager.getJavaModelManager().sharedWorkingCopies.get(this);\r", "+public IJavaElement findSharedWorkingCopy(IBufferFactory factory) {\r", "+\r", "+\t// In order to be shared, working copies have to denote the same compilation unit \r", "+\t// AND use the same buffer factory.\r", "+\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.\r", "+\tMap sharedWorkingCopies = JavaModelManager.getJavaModelManager().sharedWorkingCopies;\r", "+\t\r", "+\tMap perFactoryWorkingCopies = \r", "+\t\tfactory == null \r", "+\t\t\t?(Map) sharedWorkingCopies.get(CompilationUnit.DEFAULT_FACTORY) \r", "+\t\t\t: (Map) sharedWorkingCopies.get(factory);\r", "+\tif (perFactoryWorkingCopies == null) return null;\r", "+\treturn (WorkingCopy)perFactoryWorkingCopies.get(this);\r"]}], "num": 2027}
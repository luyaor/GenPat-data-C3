{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12d4b09c77bd68a60ddce7c37d9666ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "031ca3a9ffb9c623817ac035ee311132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "commitAfterChange": "051572f99b6a73010e844cbf76e196d479c1689d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 29, "signatureBeforeChange": " public static synchronized File getFile(Object target)", "signatureAfterChange": " public static File getFile(Object target)", "diff": ["-public static synchronized File getFile(Object target) {", "-\tif (existingExternalConfirmedFiles.contains(target))", "-\t\treturn (File) target;", "-\tif (target instanceof File) {", "-\t\tFile f = (File) target;", "-\t\tif (f.isFile()) {", "-\t\t\texistingExternalConfirmedFiles.add(f);", "-\t\t\treturn f;", "-\t\t}", "-\treturn null;", "+ */", "+public static File getFile(Object target) {", "+\treturn isFile(target) ? (File) target : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5616a988c87ea1c420b55679c166d65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "7cf8a68136e90cda676cf99c112914a22eaf96cd", "commitAfterChange": "b6bc90c50286b74cfcc0b4c67c3ded3be552505d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\t\tif (subCandidate instanceof ReferenceBinding) {", "-\t\t\t\t\t\tif (hasSuperType((ReferenceBinding) subCandidate, (ReferenceBinding) superCandidate))", "-\t\t\t\t\t\t\treturn TRUE;", "-\t\t\t\t\t} else if (subCandidate.isArrayType()) { // arrays have exactly one super type that is a class or interface:", "-\t\t\t\t\t\tif (TypeBinding.equalsEquals(superCandidate, scope.getJavaLangObject())) // java.lang.Object", "-\t\t\t\t\t\t\treturn TRUE;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (subCandidate.isSubtypeOf(superCandidate))", "+\t\t\t\t\t\treturn TRUE;"]}], "num": 9130}
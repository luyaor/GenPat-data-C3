{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19fcfceff516cb54fb60a8a2d9be8699", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62452abc36ec38f35bf8a7cd6317277f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": " private int matchLevel(QualifiedTypeReference typeRef, boolean resolve)", "signatureAfterChange": " protected int matchLevel(QualifiedTypeReference typeRef, boolean resolve)", "diff": ["+ */", "+protected int matchLevel(QualifiedTypeReference typeRef, boolean resolve) {", "+\treturn resolve", "+\t\t? matchLevel(typeRef.resolvedType)", "+\t\t: matchTokens(typeRef.tokens);", "+}", "- */", "-private int matchLevel(QualifiedTypeReference typeRef, boolean resolve) {", "-\tif (!resolve) {", "-\t\tif (this.pkgName == null) {", "-\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tswitch (this.matchMode) {", "-\t\t\t\tcase EXACT_MATCH:", "-\t\t\t\tcase PREFIX_MATCH:", "-\t\t\t\t\tif (CharOperation.prefixEquals(this.pkgName, CharOperation.concatWith(typeRef.tokens, '.'), this.isCaseSensitive)) {", "-\t\t\t\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\tcase PATTERN_MATCH:", "-\t\t\t\t\tchar[] pattern = this.pkgName[this.pkgName.length-1] == '*' ? this.pkgName : CharOperation.concat(this.pkgName, \".*\".toCharArray()); //$NON-NLS-1$", "-\t\t\t\t\tif (CharOperation.match(pattern, CharOperation.concatWith(typeRef.tokens, '.'), this.isCaseSensitive)) {", "-\t\t\t\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\tdefault:", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\treturn this.matchLevel(typeRef.resolvedType);", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c1fd916e6ebd6b185171595e8084f94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 10, "signatureBeforeChange": " private int matchLevel(QualifiedNameReference qNameRef, boolean resolve)", "signatureAfterChange": " protected int matchLevel(QualifiedNameReference qNameRef, boolean resolve)", "diff": ["+ */", "+protected int matchLevel(QualifiedNameReference qNameRef, boolean resolve) {", "+\tif (!resolve)", "+\t\treturn matchTokens(qNameRef.tokens);", "+", "+\tBinding binding = qNameRef.binding;", "+\tif (binding == null) return INACCURATE_MATCH;", "+", "+\tTypeBinding typeBinding = null;", "+\tchar[][] tokens = qNameRef.tokens;", "+\tint lastIndex = tokens.length - 1;", "+\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {", "+\t\tcase BindingIds.FIELD : // reading a field", "+\t\t\ttypeBinding = qNameRef.actualReceiverType;", "+\t\t\t// no valid match amongst fields", "+\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t", "+\t\t\tlastIndex -= otherBindingsCount + 1;", "+\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;", "+\t\t\tbreak;", "+\t\tcase BindingIds.LOCAL : // reading a local variable", "+\t\t\treturn IMPOSSIBLE_MATCH; // no package match in it", "+\t\tcase BindingIds.TYPE : //=============only type ==============", "+\t\t\ttypeBinding = (TypeBinding)binding;", "+\t\t\tbreak;", "+\t\t/*", "+\t\t * Handling of unbound qualified name references. The match may reside in the resolved fragment,", "+\t\t * which is recorded inside the problem binding, along with the portion of the name until it became a problem.", "+\t\t */", "+\t\tcase BindingIds.VARIABLE : //============unbound cases===========", "+\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :\t\t\t\t\t\t", "+\t\t\tif (binding instanceof ProblemBinding) {", "+\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;", "+\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far", "+\t\t\t\tchar[] partialQualifiedName = pbBinding.name;", "+\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token", "+\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;", "+\t\t\t}", "+\t\t\tbreak;\t\t\t\t\t", "+\t}", "+\treturn matchLevel(typeBinding);", "+}", "- */", "-private int matchLevel(QualifiedNameReference qNameRef, boolean resolve) {", "-\tif (!resolve) {", "-\t\tif (this.pkgName == null) {", "-\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tswitch (this.matchMode) {", "-\t\t\t\tcase EXACT_MATCH:", "-\t\t\t\tcase PREFIX_MATCH:", "-\t\t\t\t\tif (CharOperation.prefixEquals(this.pkgName, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive)) {", "-\t\t\t\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\tcase PATTERN_MATCH:", "-\t\t\t\t\tchar[] pattern = this.pkgName[this.pkgName.length-1] == '*' ? this.pkgName : CharOperation.concat(this.pkgName, \".*\".toCharArray()); //$NON-NLS-1$", "-\t\t\t\t\tif (CharOperation.match(pattern, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive)) {", "-\t\t\t\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\tdefault:", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tBinding binding = qNameRef.binding;", "-\t\tif (binding == null) {", "-\t\t\treturn INACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tTypeBinding typeBinding = null;", "-\t\t\tchar[][] tokens = qNameRef.tokens;", "-\t\t\tint lastIndex = tokens.length-1;", "-\t\t\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {", "-\t\t\t\tcase BindingIds.FIELD : // reading a field", "-\t\t\t\t\ttypeBinding = qNameRef.actualReceiverType;", "-\t\t\t\t\t// no valid match amongst fields", "-\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t", "-\t\t\t\t\tlastIndex -= otherBindingsCount + 1;", "-\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase BindingIds.LOCAL : // reading a local variable", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no package match in it", "-\t\t\t\tcase BindingIds.TYPE : //=============only type ==============", "-\t\t\t\t\ttypeBinding = (TypeBinding)binding;", "-\t\t\t\t\tbreak;", "-\t\t\t\t/*", "-\t\t\t\t * Handling of unbound qualified name references. The match may reside in the resolved fragment,", "-\t\t\t\t * which is recorded inside the problem binding, along with the portion of the name until it became a problem.", "-\t\t\t\t */", "-\t\t\t\tcase BindingIds.VARIABLE : //============unbound cases===========", "-\t\t\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :\t\t\t\t\t\t", "-\t\t\t\t\tif (binding instanceof ProblemBinding) {", "-\t\t\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;", "-\t\t\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far", "-\t\t\t\t\t\tchar[] partialQualifiedName = pbBinding.name;", "-\t\t\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token", "-\t\t\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;\t\t\t\t\t", "-\t\t\t}", "-\t\t\tif (typeBinding instanceof ArrayBinding) {", "-\t\t\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;", "-\t\t\t}", "-\t\t\tif (typeBinding == null) {", "-\t\t\t\treturn INACCURATE_MATCH;", "-\t\t\t} else {", "-\t\t\t\tif (typeBinding instanceof ReferenceBinding) {", "-\t\t\t\t\tPackageBinding pkgBinding = ((ReferenceBinding)typeBinding).fPackage;", "-\t\t\t\t\tif (pkgBinding == null) {", "-\t\t\t\t\t\treturn INACCURATE_MATCH;", "-\t\t\t\t\t} else if (this.matches(pkgBinding.compoundName)) {", "-\t\t\t\t\t\treturn ACCURATE_MATCH;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-}"]}], "num": 21135}
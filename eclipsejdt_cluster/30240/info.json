{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46f821b3414d1a79f4a38f1fc402fc60", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40a90e618762cfe87ddc2b5b69f22ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tvoid computeSignature(String signature)", "signatureAfterChange": " \tpublic final boolean hasTypeParameters()", "diff": ["-\t */", "-\tvoid computeSignature(String signature) {", "-\t\t// In case of IJavaElement signature, replace '/' by '.'", "-\t\tchar[] source = signature.replace('/','.').replace('$','.').toCharArray();", "-", "-\t\t// Init counters and arrays", "-\t\tchar[][] signatures = new char[10][];", "-\t\tint signaturesCount = 0;", "-\t\tint[] lengthes = new int [10];", "-\t\tint typeArgsCount = 0;", "-\t\tint paramOpening = 0;", "-\t\tboolean parameterized = false;", "-\t\t", "-\t\t// Scan each signature character", "-\t\tfor (int idx=0, ln = source.length; idx < ln; idx++) {", "-\t\t\tswitch (source[idx]) {", "-\t\t\t\tcase '>':", "-\t\t\t\t\tparamOpening--;", "-\t\t\t\t\tif (paramOpening == 0)  {", "-\t\t\t\t\t\tif (signaturesCount == lengthes.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(signatures, 0, signatures = new char[signaturesCount+10][], 0, signaturesCount);", "-\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tlengthes[signaturesCount] = typeArgsCount;", "-\t\t\t\t\t\ttypeArgsCount = 0;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '<':", "-\t\t\t\t\tparamOpening++;", "-\t\t\t\t\tif (paramOpening == 1) {", "-\t\t\t\t\t\ttypeArgsCount = 0;", "-\t\t\t\t\t\tparameterized = true;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '*':", "-\t\t\t\tcase ';':", "-\t\t\t\t\tif (paramOpening == 1) typeArgsCount++;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '.':", "-\t\t\t\t\tif (paramOpening == 0)  {", "-\t\t\t\t\t\tif (signaturesCount == lengthes.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(signatures, 0, signatures = new char[signaturesCount+10][], 0, signaturesCount);", "-\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsignatures[signaturesCount] = new char[idx+1];", "-\t\t\t\t\t\tSystem.arraycopy(source, 0, signatures[signaturesCount], 0, idx);", "-\t\t\t\t\t\tsignatures[signaturesCount][idx] = Signature.C_SEMICOLON;", "-\t\t\t\t\t\tsignaturesCount++;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// Store signatures and type arguments", "-\t\tthis.typeSignatures = new char[signaturesCount+1][];", "-\t\tif (parameterized)", "-\t\t\tthis.typeArguments = new char[signaturesCount+1][][];", "-\t\tthis.typeSignatures[0] = source;", "-\t\tif (parameterized) {", "-\t\t\tthis.typeArguments[0] = Signature.getTypeArguments(source);", "-\t\t\tif (lengthes[signaturesCount] != this.typeArguments[0].length) {", "-\t\t\t\t// TODO (frederic) abnormal signature => should raise an error", "-\t\t\t}", "-\t\t}", "-\t\tfor (int i=1, j=signaturesCount-1; i<=signaturesCount; i++, j--){", "-\t\t\tthis.typeSignatures[i] = signatures[j];", "-\t\t\tif (parameterized) {", "-\t\t\t\tthis.typeArguments[i] = Signature.getTypeArguments(signatures[j]);", "-\t\t\t\tif (lengthes[j] != this.typeArguments[i].length) {", "-\t\t\t\t\t// TODO (frederic) abnormal signature => should raise an error", "+\t */", "+\tpublic final boolean hasTypeParameters() {", "+\t\treturn !hasSignatures() && hasTypeArguments();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe05d244e29505f0ee4880382af417c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "324863400f4389e9f875d1a388b059a798fc9b0e", "commitAfterChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate char[][][] typeParameterNames(IType type)", "signatureAfterChange": " private char[][][] typeParameterNames(IType type)", "diff": ["-\t */", "-\tprivate char[][][] typeParameterNames(IType type) {", "-\t\tchar[][][] typeParameters = new char[10][][];", "-\t\tint ptr = -1;", "-\t\ttry {", "-\t\t\tIJavaElement parent = type;", "-\t\t\tITypeParameter[] parameters = null;", "-\t\t\twhile (parent != null) {", "-\t\t\t\tswitch(parent.getElementType()) {", "-\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tparameters = ((BinaryType) parent).getTypeParameters();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.TYPE:", "-\t\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tparameters = ((SourceType) parent).getTypeParameters();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tif (ptr <0) return null;", "-\t\t\t\t\t\tif (++ptr < typeParameters.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "-\t\t\t\t\t\treturn typeParameters;", "-\t\t\t\t}", "-\t\t\t\tint length = parameters==null ? 0 : parameters.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "-\t\t\t\t\tfor (int i=0; i<length; i++)", "-\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t}", "-\t\t\t\tparent = parent.getParent();", "+ */", "+private char[][][] typeParameterNames(IType type) {", "+\tchar[][][] typeParameters = new char[10][][];", "+\tint ptr = -1;", "+\ttry {", "+\t\tIJavaElement parent = type;", "+\t\tITypeParameter[] parameters = null;", "+\t\tboolean hasParameters = false;", "+\t\twhile (parent != null) {", "+\t\t\tif (parent.getElementType() != IJavaElement.TYPE) {", "+\t\t\t\tif (!hasParameters) return null;", "+\t\t\t\tif (++ptr < typeParameters.length)", "+\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "+\t\t\t\treturn typeParameters;", "+\t\t\tif (++ptr > typeParameters.length) {", "+\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "+\t\t\t}", "+\t\t\tIType parentType = (IType) parent;", "+\t\t\tif (parentType.isBinary()) {", "+\t\t\t\tparameters = ((BinaryType) parent).getTypeParameters();", "+\t\t\t} else {", "+\t\t\t\tparameters = ((SourceType) parent).getTypeParameters();", "+\t\t\t}", "+\t\t\tint length = parameters==null ? 0 : parameters.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\thasParameters = true;", "+\t\t\t\ttypeParameters[ptr] = new char[length][];", "+\t\t\t\tfor (int i=0; i<length; i++)", "+\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t}", "+\t\t\tparent = parent.getParent();", "-\t\tcatch (JavaModelException jme) {", "-\t\t\treturn null;", "-\t\t}", "-\t\treturn typeParameters;", "+\tcatch (JavaModelException jme) {", "+\t\treturn null;", "+\t}", "+\treturn typeParameters;", "+}"]}], "num": 30240}
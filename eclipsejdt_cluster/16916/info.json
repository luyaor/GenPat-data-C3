{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e858f81f77379c74dcae52863c4618e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b479921bb8b5e6edafb7ec11597b8b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "4f0e2d1dce5fad13089e3fb4fcd43ccba005c83c", "commitAfterChange": "698c26d613731d0111dbddcb370ca40364ac7e62", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 137, "signatureBeforeChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "signatureAfterChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "diff": ["+\t\t\t\t", "+\t\t\t\tif (tb.isParameterizedType() &&", "+\t\t\t\t\t\ttb.findSuperTypeOriginatingFrom(TypeIds.T_JavaUtilCollection, false) != null) {", "+\t\t\t\t\tParameterizedTypeBinding ptb = ((ParameterizedTypeBinding) tb);", "+\t\t\t\t\tTypeBinding[] arguments = ptb.arguments;", "+\t\t\t\t\tif (arguments != null && arguments.length == 1) {", "+\t\t\t\t\t\tTypeBinding argument = arguments[0];", "+\t\t\t\t\t\tfindVariableNameForCollection(", "+\t\t\t\t\t\t\tname,", "+\t\t\t\t\t\t\targument.leafComponentType().qualifiedPackageName(),", "+\t\t\t\t\t\t\targument.leafComponentType().qualifiedSourceName(),", "+\t\t\t\t\t\t\targument.leafComponentType().sourceName(),", "+\t\t\t\t\t\t\ttb,", "+\t\t\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\t\t\tforbiddenNames,", "+\t\t\t\t\t\t\tkind,", "+\t\t\t\t\t\t\tmodifiers);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f0dbfac56c9966e306c81455098ad84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "diff": ["+ */", "+public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose) {", "+\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7 && location instanceof ThrowStatement) {", "+\t\tExpression throwExpression = ((ThrowStatement)location).exception;", "+\t\tLocalVariableBinding throwArgBinding = throwExpression.localVariableBinding();", "+\t\tif (throwExpression instanceof SingleNameReference // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350361 ", "+\t\t\t\t&& throwArgBinding instanceof CatchParameterBinding && throwArgBinding.isEffectivelyFinal()) {", "+\t\t\tCatchParameterBinding parameter = (CatchParameterBinding) throwArgBinding;", "+\t\t\tcheckExceptionHandlers(parameter.getPreciseTypes(), location, flowInfo, scope);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t\t\t\t\t\t\t\traisedException, // precise exception that will be caught", "+\t\t\t\t\t\t\t\tcaughtException,", "-\tscope.problemReporter().unhandledException(raisedException, location);", "+\tif (isExceptionOnAutoClose) {", "+\t\tscope.problemReporter().unhandledExceptionFromAutoClose(raisedException, location);", "+\t} else {", "+\t\tscope.problemReporter().unhandledException(raisedException, location);", "+\t}"]}], "num": 16916}
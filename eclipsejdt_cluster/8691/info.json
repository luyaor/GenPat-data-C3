{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d47f77bbb166b9cb1f2b9c1a3314275", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1576cf2666ca4aed3f2a9d28f1e105a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "359491f54e3ca885feab917a3aebfe3326bcb185", "commitAfterChange": "f756d2d03155bc3d579dba2d865f9a5c53026d3d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["+\t\tif (parent instanceof MethodDeclaration) {\r", "+\t\t\treturn this.resolveMethod((MethodDeclaration)parent);\r", "+\t\t}\r", "+\t\tif (parent instanceof TypeDeclaration) {\r", "+\t\t\treturn this.resolveType((TypeDeclaration)parent);\r", "+\t\t}\r", "-\t\t\treturn internalResolveNameForMethodInvocation(name);\r", "+\t\t\treturn this.internalResolveNameForMethodInvocation(name);\r", "-\t\t\treturn internalResolveNameForFieldAccess(name);\r", "+\t\t\treturn this.internalResolveNameForFieldAccess(name);\r", "-\t\t\treturn internalResolveNameForPackageDeclaration(name);\r", "+\t\t\treturn this.internalResolveNameForPackageDeclaration(name);\r", "-\t\t\treturn internalResolveNameForSimpleType(name);\r", "+\t\t\treturn this.internalResolveNameForSimpleType(name);\r", "-\t\t\treturn internalResolveNameForThisExpression(name);\r", "+\t\t\treturn this.internalResolveNameForThisExpression(name);\r", "-\t\t\treturn internalResolveNameForQualifiedName(name);\r", "+\t\t\treturn this.internalResolveNameForQualifiedName(name);\r", "-\t\t\treturn internalResolveNameForSimpleName(name);\r", "+\t\t\treturn this.internalResolveNameForSimpleName(name);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da406881b0d9f3e8e50236520bffb10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "847811aba616fe8ef974c21595a3a8f5a0b4a4ab", "commitAfterChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void testMoveReadOnlyPackageFragment() throws CoreException", "signatureAfterChange": " public void testMoveReadOnlyPackageFragment() throws CoreException", "diff": ["+\tif (!Util.isReadOnlySupported()) {", "+\t\t// Do not test if file system does not support read-only attribute", "+\t\treturn;", "+\t}", "-\t\tsetReadOnly(getFile(\"/P/src/p1/p2/p3/X.java\"), true);", "+\t\tUtil.setReadOnly(getFile(\"/P/src/p1/p2/p3/X.java\"), true);", "-\t\tsetReadOnly(pkgSource.getResource(), true);", "+\t\tUtil.setReadOnly(pkgSource.getResource(), true);", "-\t\tsetReadOnly(pkg2.getResource(), true);", "+\t\tUtil.setReadOnly(pkg2.getResource(), true);", "-\t\tassertTrue(\"Not readOnly\", isReadOnly(getPackage(\"/P/src2/p1\").getResource()));", "-\t\tassertTrue(\"Is readOnly\", !isReadOnly(getPackage(\"/P/src2/p1/p2\").getResource()));", "-\t\tassertTrue(\"Not readOnly\", isReadOnly(getPackage(\"/P/src2/p1/p2/p3\").getResource()));", "-\t\tassertTrue(\"Is readOnly\", isReadOnly(getFile(\"/P/src2/p1/p2/p3/X.java\")));", "+\t\tassertTrue(\"Not readOnly\", Util.isReadOnly(getPackage(\"/P/src2/p1\").getResource()));", "+\t\tassertTrue(\"Is readOnly\", !Util.isReadOnly(getPackage(\"/P/src2/p1/p2\").getResource()));", "+\t\tassertTrue(\"Not readOnly\", Util.isReadOnly(getPackage(\"/P/src2/p1/p2/p3\").getResource()));", "+\t\tassertTrue(\"Is readOnly\", Util.isReadOnly(getFile(\"/P/src2/p1/p2/p3/X.java\")));", "-\t\t\tsetReadOnly(xSrcFile, false);", "+\t\t\tUtil.setReadOnly(xSrcFile, false);", "-\t\t\tsetReadOnly(pkg2.getResource(), false);", "+\t\t\tUtil.setReadOnly(pkg2.getResource(), false);", "-\t\t\tsetReadOnly(pkgSource.getResource(), false);", "+\t\t\tUtil.setReadOnly(pkgSource.getResource(), false);", "-\t\t\tsetReadOnly(p1Fragment.getResource(), false);", "+\t\t\tUtil.setReadOnly(p1Fragment.getResource(), false);", "-\t\t\tsetReadOnly(p3Fragment.getResource(), false);", "+\t\t\tUtil.setReadOnly(p3Fragment.getResource(), false);", "-\t\t\tsetReadOnly(xFile, false);", "+\t\t\tUtil.setReadOnly(xFile, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cdd4716e6d4dfe6e032e0d3aec84bf0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "847811aba616fe8ef974c21595a3a8f5a0b4a4ab", "commitAfterChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void testCopyReadOnlyPackageFragment() throws CoreException", "signatureAfterChange": " public void testCopyReadOnlyPackageFragment() throws CoreException", "diff": ["+\tif (!Util.isReadOnlySupported()) {", "+\t\t// Do not test if file system does not support read-only attribute", "+\t\treturn;", "+\t}", "-\t\tsetReadOnly(getFile(\"/P/src/p1/p2/p3/X.java\"), true);", "+\t\tUtil.setReadOnly(getFile(\"/P/src/p1/p2/p3/X.java\"), true);", "-\t\tsetReadOnly(pkgSource.getResource(), true);", "+\t\tUtil.setReadOnly(pkgSource.getResource(), true);", "-\t\tsetReadOnly(pkg2.getResource(), true);", "+\t\tUtil.setReadOnly(pkg2.getResource(), true);", "-\t\tassertTrue(\"Not readOnly\", isReadOnly(getPackage(\"/P/src2/p1\").getResource()));", "-\t\tassertTrue(\"Is readOnly\", !isReadOnly(getPackage(\"/P/src2/p1/p2\").getResource()));", "-\t\tassertTrue(\"Not readOnly\", isReadOnly(getPackage(\"/P/src2/p1/p2/p3\").getResource()));", "-\t\tassertTrue(\"Is readOnly\", isReadOnly(getFile(\"/P/src2/p1/p2/p3/X.java\")));", "+\t\tassertTrue(\"Not readOnly\", Util.isReadOnly(getPackage(\"/P/src2/p1\").getResource()));", "+\t\tassertTrue(\"Is readOnly\", !Util.isReadOnly(getPackage(\"/P/src2/p1/p2\").getResource()));", "+\t\tassertTrue(\"Not readOnly\", Util.isReadOnly(getPackage(\"/P/src2/p1/p2/p3\").getResource()));", "+\t\tassertTrue(\"Is readOnly\", Util.isReadOnly(getFile(\"/P/src2/p1/p2/p3/X.java\")));", "-\t\t\tsetReadOnly(xSrcFile, false);", "+\t\t\tUtil.setReadOnly(xSrcFile, false);", "-\t\t\tsetReadOnly(pkg2.getResource(), false);", "+\t\t\tUtil.setReadOnly(pkg2.getResource(), false);", "-\t\t\tsetReadOnly(pkgSource.getResource(), false);", "+\t\t\tUtil.setReadOnly(pkgSource.getResource(), false);", "-\t\t\tsetReadOnly(p1Fragment.getResource(), false);", "+\t\t\tUtil.setReadOnly(p1Fragment.getResource(), false);", "-\t\t\tsetReadOnly(p3Fragment.getResource(), false);", "+\t\t\tUtil.setReadOnly(p3Fragment.getResource(), false);", "-\t\t\tsetReadOnly(xFile, false);", "+\t\t\tUtil.setReadOnly(xFile, false);"]}], "num": 8691}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69ffc29d131cfce750526f5e6a745ffb", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7c5a7e6b8a905c5867484793527d9bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof ConstructorDeclaration)) return false;\r", "+\r", "+\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "+\r", "+\t// constructor name is stored in selector field\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = constructor.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// argument types\r", "+\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (argumentCount > -1) {\r", "+\t\tint parameterCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof ConstructorDeclaration)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(constructor.binding);\r", "-\t} else {\r", "-\t\t// constructor name is stored in selector field\r", "-\t\tif (this.declaringSimpleName != null \r", "-\t\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t\r", "-\t\t// parameter types\r", "-\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (parameterCount > -1) {\r", "-\t\t\tint argumentCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdf234c4a9c34cddfb354712837d1648", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof ConstructorDeclaration)) return false;\r", "+\r", "+\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "+\r", "+\t// constructor name is stored in selector field\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = constructor.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// argument types\r", "+\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (argumentCount > -1) {\r", "+\t\tint parameterCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof ConstructorDeclaration)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(constructor.binding);\r", "-\t} else {\r", "-\t\t// constructor name is stored in selector field\r", "-\t\tif (this.declaringSimpleName != null \r", "-\t\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t\r", "-\t\t// parameter types\r", "-\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (parameterCount > -1) {\r", "-\t\t\tint argumentCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}], "num": 72222}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ade3c1b57b6db7cfe4835f43470cb7f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5986a5e0a5f74296dad42aea8480778f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "14842eb62da3e660c575d5193079230a000aa781", "commitAfterChange": "0874cfb2ef67a79a49d909a248c81f1f23dd713a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \r \tpublic SingleVariableDeclaration convert(Argument argument)", "signatureAfterChange": "\r \r \tpublic SingleVariableDeclaration convert(Argument argument)", "diff": ["+\t\t/**\r", "+\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=13233\r", "+\t\t * This handles cases where the parser built nodes with invalid modifiers.\r", "+\t\t */\r", "+\t\ttry {\r", "+\t\t\tvariableDecl.setModifiers(argument.modifiers);\r", "+\t\t} catch(IllegalArgumentException e) {\r", "+\t\t\tint legalModifiers =\r", "+\t\t\t\tModifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED\r", "+\t\t\t\t| Modifier.STATIC | Modifier.FINAL | Modifier.VOLATILE\r", "+\t\t\t\t| Modifier.TRANSIENT;\r", "+\t\t\tvariableDecl.setModifiers(argument.modifiers & legalModifiers);\r", "+\t\t\tvariableDecl.setFlags(ASTNode.MALFORMED);\r", "+\t\t}\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de9e6932df4bfd18792b3c3627548d2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "14842eb62da3e660c575d5193079230a000aa781", "commitAfterChange": "0874cfb2ef67a79a49d909a248c81f1f23dd713a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \t\t\r \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "\r \t\t\r \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);\r", "+\t\t/**\r", "+\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=13233\r", "+\t\t * This handles cases where the parser built nodes with invalid modifiers.\r", "+\t\t */\r", "+\t\ttry {\r", "+\t\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);\r", "+\t\t} catch(IllegalArgumentException e) {\r", "+\t\t\tint legalModifiers =\r", "+\t\t\t\tModifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED\r", "+\t\t\t\t| Modifier.STATIC | Modifier.FINAL | Modifier.SYNCHRONIZED\r", "+\t\t\t\t| Modifier.NATIVE | Modifier.ABSTRACT | Modifier.STRICTFP;\r", "+\t\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & legalModifiers);\r", "+\t\t\tmethodDecl.setFlags(ASTNode.MALFORMED);\r", "+\t\t}\r"]}], "num": 46086}
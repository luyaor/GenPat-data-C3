{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b505181d9fcff5200e7b6f01f81123a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74596ded191f069160b551834721dbf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["+", "-\t\tif (selector == null)", "+", "+\t\tboolean notInJavadoc = this.assistNodeInJavadoc == 0;", "+\t\tif (selector == null && notInJavadoc) {", "+\t\t}", "-\t\tif (receiverType.isInterface()) {", "-\t\t\tif(isCompletingDeclaration) {", "-\t\t\t\tfindIntefacesMethods(", "-\t\t\t\t\tselector,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmethodsFound,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed);", "-\t\t\t} else {", "-\t\t\t\tfindIntefacesMethods(", "-\t\t\t\t\tselector,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tnew ReferenceBinding[]{currentType},", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmethodsFound,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed);", "-\t\t\t}", "-\t\t\t", "-\t\t\tcurrentType = scope.getJavaLangObject();", "-\t\t} else {", "-\t\t\tif(isCompletingDeclaration){", "-\t\t\t\tfindIntefacesMethods(", "-\t\t\t\t\tselector,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmethodsFound,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed);", "+\t\tif (notInJavadoc) {", "+\t\t\tif (receiverType.isInterface()) {", "+\t\t\t\tif (isCompletingDeclaration) {", "+\t\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\t\tselector,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tcurrentType.superInterfaces(),", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\tisCompletingDeclaration,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\tsuperCall,", "+\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t} else {", "+\t\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\t\tselector,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tnew ReferenceBinding[]{currentType},", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\tisCompletingDeclaration,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\tsuperCall,", "+\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t}", "-\t\t\t\tcurrentType = receiverType.superclass();", "+\t\t\t\tcurrentType = scope.getJavaLangObject();", "+\t\t\t} else {", "+\t\t\t\tif (isCompletingDeclaration){", "+\t\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\t\tselector,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tcurrentType.superInterfaces(),", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\tisCompletingDeclaration,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\tsuperCall,", "+\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t\t", "+\t\t\t\t\tcurrentType = receiverType.superclass();", "+\t\t\t\t}", "-\t\t\tif(methods != null) {", "-\t\t\t\tif(isCompletingDeclaration){", "+\t\t\tif (methods != null) {", "+\t\t\t\tif (isCompletingDeclaration){", "-\t\t\tif(hasPotentialDefaultAbstractMethods && currentType.isAbstract()){", "-\t\t\t\tfindIntefacesMethods(", "+\t\t\tif (notInJavadoc && hasPotentialDefaultAbstractMethods && currentType.isAbstract()){", "+\t\t\t\tfindInterfacesMethods(", "-\t\t\tcurrentType = currentType.superclass();", "+\t\t\tcurrentType = notInJavadoc ? currentType.superclass() : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b93784cc0f17df25efd50b8d27f630a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate void findFields( \t\tchar[] fieldName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "signatureAfterChange": "  \tprivate void findFields( \t\tchar[] fieldName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "diff": ["-\t\tif (fieldName == null)", "+\t\tboolean notInJavadoc = this.assistNodeInJavadoc == 0;", "+\t\tif (fieldName == null && notInJavadoc)", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {", "+\t\t\tif (notInJavadoc && itsInterfaces != NoSuperInterfaces) {", "-\t\t\tif(fields != null) {", "+\t\t\tif(fields != null && fields.length > 0) {", "-\t\t} while (currentType != null);", "+\t\t} while (notInJavadoc && currentType != null);", "-\t\tif (interfacesToVisit != null) {", "+\t\tif (notInJavadoc && interfacesToVisit != null) {"]}], "num": 45896}
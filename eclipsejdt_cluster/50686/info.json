{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc1cc7e92d904242ddbdf7c12867e967", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02e4d0e374d3da150df51f70fd9821c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "c56d8289161a1b2e501ace042a7085f33bafd661", "commitAfterChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "diff": ["-\tif (matchRule == SearchPattern.R_EXACT_MATCH + SearchPattern.R_CASE_SENSITIVE) {", "+\tif (key == null) {", "+\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "+\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], true); // cache if key is null since its a definite match", "+\t\t\tif (wordsToDocNumbers != null) {", "+\t\t\t\tchar[][] words = wordsToDocNumbers.keyTable;", "+\t\t\t\tif (results == null)", "+\t\t\t\t\tresults = new HashtableOfObject(wordsToDocNumbers.elementSize);", "+\t\t\t\tfor (int j = 0, m = words.length; j < m; j++)", "+\t\t\t\t\tif (words[j] != null)", "+\t\t\t\t\t\tresults = addQueryResult(results, words[j], wordsToDocNumbers, memoryIndex);", "+\t\t\t}", "+\t\t}", "+\t\tif (results != null && this.cachedChunks == null)", "+\t\t\tcacheDocumentNames();", "+\t} else if (matchRule == SearchPattern.R_EXACT_MATCH + SearchPattern.R_CASE_SENSITIVE) {", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74c2622b99c5f627763a8d28808a0bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "5ca6ee5fca8063f3ae4c037e5721f50897b59fe4", "commitAfterChange": "4d4b7498948247746461ed52cdc63a141986de38", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "diff": ["-\t} else if (matchRule == (SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE)) {", "-\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "-\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "-\t\t\tif (wordsToDocNumbers != null && wordsToDocNumbers.containsKey(key))", "-\t\t\t\tresults = addQueryResult(results, key, wordsToDocNumbers, memoryIndex);", "-\t\t}", "-\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "-\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "-\t\t\tif (wordsToDocNumbers != null) {", "-\t\t\t\tchar[][] words = wordsToDocNumbers.keyTable;", "-\t\t\t\tfor (int j = 0, m = words.length; j < m; j++) {", "-\t\t\t\t\tchar[] word = words[j];", "-\t\t\t\t\tif (word != null && Index.isMatch(key, word, matchRule))", "-\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex);", "+\t\tswitch (matchRule) {", "+\t\t\tcase SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE:", "+\t\t\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tif (wordsToDocNumbers != null && wordsToDocNumbers.containsKey(key))", "+\t\t\t\t\t\tresults = addQueryResult(results, key, wordsToDocNumbers, memoryIndex);", "-\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase SearchPattern.R_PREFIX_MATCH | SearchPattern.R_CASE_SENSITIVE:", "+\t\t\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tif (wordsToDocNumbers != null) {", "+\t\t\t\t\t\tchar[][] words = wordsToDocNumbers.keyTable;", "+\t\t\t\t\t\tfor (int j = 0, m = words.length; j < m; j++) {", "+\t\t\t\t\t\t\tchar[] word = words[j];", "+\t\t\t\t\t\t\tif (word != null && key[0] == word[0] && CharOperation.prefixEquals(key, word))", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tfor (int i = 0, l = categories.length; i < l; i++) {", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tif (wordsToDocNumbers != null) {", "+\t\t\t\t\t\tchar[][] words = wordsToDocNumbers.keyTable;", "+\t\t\t\t\t\tfor (int j = 0, m = words.length; j < m; j++) {", "+\t\t\t\t\t\t\tchar[] word = words[j];", "+\t\t\t\t\t\t\tif (word != null && Index.isMatch(key, word, matchRule))", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 50686}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1f429c1a40d3e90a25cb1388c370227", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97ba8c148fe830346a8109fd08dc6b0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "2a40159dff47fb0e9026a9eb6e050f6d14cc5873", "commitAfterChange": "16d59225e6af39e0fab503daf43d023ad86472cf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void evaluateCodeSnippet(String codeSnippet, ICodeSnippetRequestor requestor, IProgressMonitor progressMonitor) throws JavaModelException", "signatureAfterChange": "\r public void evaluateCodeSnippet(String codeSnippet, ICodeSnippetRequestor requestor, IProgressMonitor progressMonitor) throws JavaModelException", "diff": ["+\r", "+\tINameEnvironment environment = null;\r", "-\t\tthis.context.evaluate(codeSnippet.toCharArray(), getBuildNameEnvironment(), JavaCore.getOptions(), getInfrastructureEvaluationRequestor(requestor), getProblemFactory());\r", "+\t\tthis.context.evaluate(\r", "+\t\t\tcodeSnippet.toCharArray(), \r", "+\t\t\tenvironment = getBuildNameEnvironment(), \r", "+\t\t\tJavaCore.getOptions(), \r", "+\t\t\tgetInfrastructureEvaluationRequestor(requestor), \r", "+\t\t\tgetProblemFactory());\r", "+\t} finally {\r", "+\t\tif (environment != null) environment.cleanup();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7775725dd868119df6eb6a6de0d4082", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "4c091ce71f1c6a2472a4afd7104c5d8f3424456d", "commitAfterChange": "756e1981ccaf3561b93bab71937951ef14b72eb6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\tif (computeProblems){", "-\t\tperWorkingCopyInfo.beginReporting();", "-\t\tCompilationUnitProblemFinder.process(unit, this, parser, this.owner, perWorkingCopyInfo, problemFactory, pm);", "-\t\tperWorkingCopyInfo.endReporting();", "-\t}", "-\t", "-\tif (info instanceof ASTHolderCUInfo) {", "-\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(unit, contents, options, pm);", "-\t\t((ASTHolderCUInfo) info).ast = cu;", "+\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "+\ttry {", "+\t\tif (computeProblems){", "+\t\t\tperWorkingCopyInfo.beginReporting();", "+\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, parser, this.owner, perWorkingCopyInfo, problemFactory, false/*don't cleanup cu*/, pm);", "+\t\t\tperWorkingCopyInfo.endReporting();", "+\t\t}", "+\t\t", "+\t\tif (info instanceof ASTHolderCUInfo) {", "+\t\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(unit, contents, options, pm);", "+\t\t\t((ASTHolderCUInfo) info).ast = cu;", "+\t\t}", "+\t} finally {", "+\t    if (compilationUnitDeclaration != null) {", "+\t        compilationUnitDeclaration.cleanUp();", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d629a2e59061764187c1cede3dcedab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "2a40159dff47fb0e9026a9eb6e050f6d14cc5873", "commitAfterChange": "16d59225e6af39e0fab503daf43d023ad86472cf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "signatureAfterChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "diff": ["+\tINameEnvironment environment = null;\r", "-\t\t\tgetBuildNameEnvironment(), \r", "+\t\t\tenvironment = getBuildNameEnvironment(), \r", "+\t} finally {\r", "+\t\tif (environment != null) environment.cleanup();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c882c8b7623ac33d59f7c44c224055", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "2a40159dff47fb0e9026a9eb6e050f6d14cc5873", "commitAfterChange": "16d59225e6af39e0fab503daf43d023ad86472cf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void evaluateVariable(IGlobalVariable variable, ICodeSnippetRequestor requestor, IProgressMonitor progressMonitor) throws JavaModelException", "signatureAfterChange": "\r public void evaluateVariable(IGlobalVariable variable, ICodeSnippetRequestor requestor, IProgressMonitor progressMonitor) throws JavaModelException", "diff": ["+\r", "+\tINameEnvironment environment = null;\r", "-\t\t\tgetBuildNameEnvironment(), \r", "+\t\t\tenvironment = getBuildNameEnvironment(), \r", "+\t} finally {\r", "+\t\tif (environment != null) environment.cleanup();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b8a5372fdc1608ab95724ec5634d49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "2a40159dff47fb0e9026a9eb6e050f6d14cc5873", "commitAfterChange": "16d59225e6af39e0fab503daf43d023ad86472cf", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public void validateImports(ICodeSnippetRequestor requestor) throws JavaModelException", "signatureAfterChange": "\r public void validateImports(ICodeSnippetRequestor requestor) throws JavaModelException", "diff": ["+\t\r", "-\tthis.context.evaluateImports(getBuildNameEnvironment(), getInfrastructureEvaluationRequestor(requestor), getProblemFactory());\r", "+\tINameEnvironment environment = null;\r", "+\ttry {\r", "+\t\tthis.context.evaluateImports(\r", "+\t\t\tenvironment = getBuildNameEnvironment(), \r", "+\t\t\tgetInfrastructureEvaluationRequestor(requestor), \r", "+\t\t\tgetProblemFactory());\r", "+\t} finally {\r", "+\t\tif (environment != null) environment.cleanup();\r", "+\t}\r"]}], "num": 42948}
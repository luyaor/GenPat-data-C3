{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e117c3bdaff721ccdc8c1ae1ac02f37", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402e749dbd4ff8f37a156057383d63b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6632fac0c771203cc103a56018cc2f91e75619c9", "commitAfterChange": "f8a259eeb25169743c68697d7031864dfd97118c", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void startup() throws CoreException", "signatureAfterChange": " \tpublic void startup() throws CoreException", "diff": ["-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tfinal JavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\tfinal IWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\t// process deltas since last activated", "-\t\t\tISavedState savedState = workspace.addSaveParticipant(this, manager);", "-\t\t\tif (savedState != null) {", "-\t\t\t\t// the event type coming from the saved state is always POST_AUTO_BUILD", "-\t\t\t\t// force it to be POST_CHANGE so that the delta processor can handle it", "-\t\t\t\tmanager.deltaState.eventType = IResourceChangeEvent.POST_CHANGE;", "-\t\t\t\tsavedState.processResourceChangeEvents(manager.deltaState);", "-\t\t\t}", "+\t\t\t// process deltas since last activated in indexer thread so that indexes are up-to-date.", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=38658", "+\t\t\tmanager.getIndexManager().request(", "+\t\t\t\tnew IJob() {", "+\t\t\t\t\tpublic boolean belongsTo(String jobFamily) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void cancel() {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void ensureReadyToRun() {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic boolean execute(IProgressMonitor progress) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// add save participant and process delta atomically", "+\t\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=59937", "+\t\t\t\t\t\t\tworkspace.run(", "+\t\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\t\t\t\t\t\tISavedState savedState = workspace.addSaveParticipant(JavaCore.this, manager);", "+\t\t\t\t\t\t\t\t\t\tif (savedState != null) {", "+\t\t\t\t\t\t\t\t\t\t\t// the event type coming from the saved state is always POST_AUTO_BUILD", "+\t\t\t\t\t\t\t\t\t\t\t// force it to be POST_CHANGE so that the delta processor can handle it", "+\t\t\t\t\t\t\t\t\t\t\tmanager.deltaState.getDeltaProcessor().overridenEventType = IResourceChangeEvent.POST_CHANGE;", "+\t\t\t\t\t\t\t\t\t\t\tsavedState.processResourceChangeEvents(manager.deltaState);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\t\tnull); // no progress monitor", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\tUtil.log(e, \"Could not process saved state delta\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9247232ae573eaa2578a93373af9e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "a216b7a3c34bd18a3c5423aaf9bc759d76b8f068", "commitAfterChange": "7bfaf51af3984cd537f4166827c50facf345b0dc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tpublic void fire(JavaElementDelta customDelta, int originalEventType)", "signatureAfterChange": "\r \tpublic void fire(JavaElementDelta customDelta, int originalEventType)", "diff": ["-\t\t\t\tElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, ElementChangedEvent.PRE_AUTO_BUILD);\r", "+\t\t\t\tfinal ElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, ElementChangedEvent.PRE_AUTO_BUILD);\r", "-\t\t\t\t\t\tlisteners[i].elementChanged(extraEvent);\r", "+\t\t\t\t\t\tfinal IElementChangedListener listener = listeners[i];\r", "+\t\t\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief\r", "+\t\t\t\t\t\tPlatform.run(new ISafeRunnable() {\r", "+\t\t\t\t\t\t\tpublic void handleException(Throwable exception) {\r", "+\t\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tpublic void run() throws Exception {\r", "+\t\t\t\t\t\t\t\tlistener.elementChanged(extraEvent);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t});\r", "-\t\t\tElementChangedEvent event = new ElementChangedEvent(deltaToNotify, eventType);\r", "+\t\t\tfinal ElementChangedEvent event = new ElementChangedEvent(deltaToNotify, eventType);\r", "-\t\t\t\t\tlisteners[i].elementChanged(event);\r", "+\t\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief\r", "+\t\t\t\t\tfinal IElementChangedListener listener = listeners[i];\r", "+\t\t\t\t\tPlatform.run(new ISafeRunnable() {\r", "+\t\t\t\t\t\tpublic void handleException(Throwable exception) {\r", "+\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tpublic void run() throws Exception {\r", "+\t\t\t\t\t\t\tlistener.elementChanged(event);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t});\r"]}], "num": 70591}
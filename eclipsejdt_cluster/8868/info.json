{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12e866cac74a0856c8b043f5d98cd36b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a3975bd7280e98f3c55901b0963e24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "1b6125b922b604588bed2b5782d039674eb294dc", "commitAfterChange": "66d9e86b4ff0c6095949f938b3e13495d2816b6d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "signatureAfterChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "diff": ["-\t\tremoveFolder(srcFolder);", "+\t\t// delete the generated source folder as well as", "+\t\t// all of its derived ancestors that are containers only to the ", "+\t\t// generated source folder", "+\t\tif( srcFolder != null ){", "+\t\t\tIFolder folderToDelete = srcFolder;\t\t", "+\t\t\tfor( IContainer c = srcFolder.getParent(); ", "+\t\t\t \t c != null && (c instanceof IFolder); ", "+\t\t\t \t c = c.getParent() ){", "+\t\t\t\t", "+\t\t\t\ttry{", "+\t\t\t\t\t// members can't be empty, there has to be at least 1.", "+\t\t\t\t\t// will only delete the parent if it contains only the ", "+\t\t\t\t\t// folder that we want to delete.", "+\t\t\t\t\tif( c.isDerived() && c.members().length == 1 ){", "+\t\t\t\t\t\tfolderToDelete = (IFolder)c;", "+\t\t\t\t\t}", "+\t\t\t\t\telse", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}catch(CoreException e){", "+\t\t\t\t\tAptPlugin.log(e, \"failure while accessing member of \" + c.getName() ); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tremoveFolder(folderToDelete);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b571316d564bae48249b0e9206ba15ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "390e166678e0fa49ec55a0c44a3dd31625f6e21a", "commitAfterChange": "9ea60639cd404b75c69d97f9c48097cabdf417fc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tsynchronized IBinding resolveName(Name name)", "signatureAfterChange": " \tsynchronized IBinding resolveName(Name name)", "diff": ["-\t\t\t\ttry {", "-\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), true, importReference.isStatic());", "-\t\t\t\t} catch (RuntimeException e) {", "-\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\tif (importReferenceLength == indexInImportReference) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), importReference.onDemand, importReference.isStatic());", "+\t\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), true, importReference.isStatic());", "+\t\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\t\t}", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.FieldBinding) {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.FieldBinding)binding);\t\t\t\t\t\t", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding) {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding)binding);\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eccfff6b353bd5cda014e7384502e302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedResourceChangeListener.java", "commitBeforeChange": "458dca4c2b9da6278d150eba84339274fccc6057", "commitAfterChange": "01d995488d5e309c6b243da146c63894a6df881d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \t \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\tif ( event.getType() == IResourceChangeEvent.PRE_BUILD )", "-\t\t{", "-\t\t\ttry", "-\t\t\t{ ", "-\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\tAptPlugin.trace(\"---- generated resource change listener got a pre-build event\"); //$NON-NLS-1$", "-\t\t\t\tfinal PreBuildVisitor visitor = new PreBuildVisitor();", "-\t\t\t\tevent.getDelta().accept( visitor );", "-\t\t\t\taddGeneratedSrcFolderTo(visitor.getProjectsThatNeedGenSrcFolder());", "-\t\t\t}", "-\t\t\tcatch ( CoreException ce )", "-\t\t\t{", "-\t\t\t\tAptPlugin.log(ce, \"Error during resource change for \" + event); //$NON-NLS-1$", "-\t\t\t\t// TODO:  handle exception here.", "-\t\t\t}", "-\t\t}", "-\t\telse if ( event.getType() == IResourceChangeEvent.PRE_CLOSE )", "+\t\tif ( event.getType() == IResourceChangeEvent.PRE_CLOSE )", "+\t\telse if ( event.getType() == IResourceChangeEvent.PRE_BUILD )", "+\t\t{", "+\t\t\ttry", "+\t\t\t{ ", "+\t\t\t\tif( AptPlugin.DEBUG )", "+\t\t\t\t\tAptPlugin.trace(\"---- generated resource change listener got a pre-build event\"); //$NON-NLS-1$", "+\t\t\t\t", "+\t\t\t\tfinal PreBuildVisitor pbv = new PreBuildVisitor();", "+\t\t\t\t", "+\t\t\t\t// First we need to handle previously deleted resources (from the post-change event),", "+\t\t\t\t// because we could not perform file i/o during that event", "+\t\t\t\tfor (IResource resource : deletedResources) {", "+\t\t\t\t\tpbv.handleDeletion(resource);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tevent.getDelta().accept( pbv );", "+\t\t\t\taddGeneratedSrcFolderTo(pbv.getProjectsThatNeedGenSrcFolder());", "+\t\t\t\t", "+\t\t\t\t// Now clear the set of deleted resources,", "+\t\t\t\t// as we don't want to re-handle them", "+\t\t\t\tdeletedResources.clear();", "+\t\t\t}", "+\t\t\tcatch ( CoreException ce )", "+\t\t\t{", "+\t\t\t\tAptPlugin.log(ce, \"Error during pre-build resource change\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\telse if (event.getType() == IResourceChangeEvent.POST_CHANGE) {", "+\t\t\tPostChangeVisitor pcv = new PostChangeVisitor();", "+\t\t\ttry {", "+\t\t\t\tevent.getDelta().accept(pcv);", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\tAptPlugin.log(ce, \"Error during post-change resource event\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}], "num": 8868}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07b65c783b5302994c659ec45244a581", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d4c2fe87f7b07dc8ff3b138e1bf44d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "39787fb323b3f06bf37a085118b28347f6a17b39", "commitAfterChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 244, "signatureBeforeChange": " public void removeNotDefinitelyAssignedVariables(Scope scope, int initStateIndex)", "signatureAfterChange": " public void removeNotDefinitelyAssignedVariables(Scope scope, int initStateIndex)", "diff": ["-\tfor (int i = 0; i < index; i++) {", "+\tloop : for (int i = 0; i < index; i++) {", "-\t\tif (localBinding != null && !isDefinitelyAssigned(scope, initStateIndex, localBinding)", "-\t\t\t\t&& localBinding.initializationCount > 0) {", "-\t\t\tthis.currentFrame.removeLocals(localBinding.resolvedPosition);", "+\t\tif (localBinding != null && localBinding.initializationCount > 0) {", "+\t\t\tboolean isDefinitelyAssigned = isDefinitelyAssigned(scope, initStateIndex, localBinding);", "+\t\t\tif (!isDefinitelyAssigned) {", "+\t\t\t\tif (this.stateIndexes != null) {", "+\t\t\t\t\tfor (int j = 0, max = this.stateIndexesCounter; j < max; j++) {", "+\t\t\t\t\t\tif (isDefinitelyAssigned(scope, this.stateIndexes[j], localBinding)) {", "+\t\t\t\t\t\t\tcontinue loop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.currentFrame.removeLocals(localBinding.resolvedPosition);", "+\t\t\t\tlocalBinding.recordInitializationEndPC(position);", "+\t\t\t}", "-\tsuper.removeNotDefinitelyAssignedVariables(scope, initStateIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3991cb60ee99e41bbba0adcefeac201", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/MethodNameMatchRequestorWrapper.java", "commitBeforeChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "commitAfterChange": "1b4ae3c306349bc12b5bd14c0b0208197346f4fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "signatureAfterChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "diff": ["-\t\tif (parameterTypes.length > 0) {", "+\t\tif (signature != null) {", "+\t\t\tchar[][] parTypes = Signature.getParameterTypes(signature);", "+\t\t\tif (parTypes.length > 0) {", "+\t\t\t\tfor (int i = 0, l = parTypes.length; i < l; ++i) {", "+\t\t\t\t\tCharOperation.replace(parTypes[i], '/', '.');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tparamTypeSigs = CharOperation.toStrings(parTypes);", "+\t\t} else if (parameterTypes.length > 0) {"]}], "num": 72053}
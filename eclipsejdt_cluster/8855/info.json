{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9d97d11acae00f7c04cef3cc3342f84", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9ba333a9a85d9559b760c7021485a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "2e3b506bd16c2dfca1b01615ff44e6bfc5c42dab", "commitAfterChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 39, "signatureBeforeChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\tif ((!dotPrefix) && (currentCharacter == '0')) {", "+\tif ((!dotPrefix) && (this.currentCharacter == '0')) {", "-\t\t\tunicodeAsBackSlash = false;", "-\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\tif (Character.digit(currentCharacter, 16) == -1)", "+\t\t\tif (Character.digit(this.currentCharacter, 16) == -1)", "-\t\t\t\t\tunicodeAsBackSlash = false;", "-\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\t\t\tif ((currentCharacter == '-')", "-\t\t\t\t\t\t|| (currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\tunicodeAsBackSlash = false;", "-\t\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\tif ((this.currentCharacter == '-')", "+\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\t\t\tif (!Character.isDigit(currentCharacter))", "+\t\t\t\t\tif (!Character.isDigit(this.currentCharacter))", "-\t\tunicodeAsBackSlash = false;", "-\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\tthis.unicodeAsBackSlash = false;", "+\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\tif ((currentCharacter == '-')", "-\t\t\t|| (currentCharacter == '+')) { // consume next character", "-\t\t\tunicodeAsBackSlash = false;", "-\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\tif ((this.currentCharacter == '-')", "+\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\tif (!Character.isDigit(currentCharacter))", "+\t\tif (!Character.isDigit(this.currentCharacter))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6236bcf818a3c2f0a38ac86cdf8a8516", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "69622d139cf7be8059928288f19c2f5b2d55bdc5", "commitAfterChange": "bd0b42da240c9e3160dab0f23f741fededbd0813", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\tif ((!dotPrefix) && (currentCharacter == '0')) {", "+\tif ((!dotPrefix) && (this.currentCharacter == '0')) {", "-\t\t\tunicodeAsBackSlash = false;", "-\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\tif (Character.digit(currentCharacter, 16) == -1)", "+\t\t\tif (Character.digit(this.currentCharacter, 16) == -1)", "-\t\t\t\t\tunicodeAsBackSlash = false;", "-\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\t\t\tif ((currentCharacter == '-')", "-\t\t\t\t\t\t|| (currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\tunicodeAsBackSlash = false;", "-\t\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\tif ((this.currentCharacter == '-')", "+\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\t\t\tif (!Character.isDigit(currentCharacter))", "+\t\t\t\t\tif (!Character.isDigit(this.currentCharacter))", "-\t\tunicodeAsBackSlash = false;", "-\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\tthis.unicodeAsBackSlash = false;", "+\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\tif ((currentCharacter == '-')", "-\t\t\t|| (currentCharacter == '+')) { // consume next character", "-\t\t\tunicodeAsBackSlash = false;", "-\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\tif ((this.currentCharacter == '-')", "+\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\tif (!Character.isDigit(currentCharacter))", "+\t\tif (!Character.isDigit(this.currentCharacter))"]}], "num": 8855}
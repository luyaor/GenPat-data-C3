{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bac5bb5c4632828d7bcea7145e2561d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f093597dcd1e6381978468b1cf0c30b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 374, "methodNumberAfterChange": 421, "signatureBeforeChange": " public void testBug137087f() throws CoreException", "signatureAfterChange": " public void testBug137087f() throws CoreException", "diff": ["+/** @deprecated As using a depreciated constant */", "-\t// Search CamelCase", "-\t// Search like UI does (ie. replace it with prefix if it's not a valid CamelCase)", "-\tint validatedRule = SearchPattern.validateMatchRule(pattern, matchRule);", "-\tif (validatedRule != matchRule) {", "-\t\tmatchRule = SearchPattern.R_PREFIX_MATCH;", "-\t}", "-\tsearch(pattern, TYPE, DECLARATIONS, matchRule);", "-\tassertSearchResults(", "-\t\t\"\" // expected no result as uppercase characters in pattern do not match any camelcase ones in existing types", "-\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9304e5261aadd4ea774cdbb17acd4723", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 372, "methodNumberAfterChange": 419, "signatureBeforeChange": " public void testBug137087d() throws CoreException", "signatureAfterChange": " public void testBug137087d() throws CoreException", "diff": ["+/** @deprecated As using a depreciated constant */", "-\t// Search CamelCase", "-\t// Search like UI does (ie. replace it with prefix if it's not a valid CamelCase)", "-\tint validatedRule = SearchPattern.validateMatchRule(pattern, matchRule);", "-\tif (validatedRule != matchRule) {", "-\t\tmatchRule = SearchPattern.R_PREFIX_MATCH;", "-\t}", "-\tsearch(pattern, TYPE, DECLARATIONS, matchRule);", "-\tassertSearchResults(", "-\t\t\"\" // no match expected as pattern is missing a 'e'", "-\t);"]}], "num": 39717}
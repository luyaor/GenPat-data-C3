{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "768c666c684b3d83cfc9251e32f0bd9e", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d59159974225aa78250d83108ea0efe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private boolean matches(AllocationExpression allocation, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(AllocationExpression allocation, boolean resolve)", "diff": ["- */\r", "-private boolean matches(AllocationExpression allocation, boolean resolve) {\r", "-\r", "-\t// constructor name is simple type name\r", "-\tchar[][] typeName = allocation.type.getTypeName();\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = allocation.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(AllocationExpression allocation, boolean resolve) {\r", "+\r", "+\t// constructor name is simple type name\r", "+\tchar[][] typeName = allocation.type.getTypeName();\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(allocation.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f428b4c4755a921c51267c9e42904fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private boolean matches(AllocationExpression allocation, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(AllocationExpression allocation, boolean resolve)", "diff": ["- */\r", "-private boolean matches(AllocationExpression allocation, boolean resolve) {\r", "-\r", "-\t// constructor name is simple type name\r", "-\tchar[][] typeName = allocation.type.getTypeName();\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = allocation.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(AllocationExpression allocation, boolean resolve) {\r", "+\r", "+\t// constructor name is simple type name\r", "+\tchar[][] typeName = allocation.type.getTypeName();\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(allocation.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "883a44a47912087f6ca4d1a6ecdce049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private boolean matches(AllocationExpression allocation, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(AllocationExpression allocation, boolean resolve)", "diff": ["- */\r", "-private boolean matches(AllocationExpression allocation, boolean resolve) {\r", "-\r", "-\t// constructor name is simple type name\r", "-\tchar[][] typeName = allocation.type.getTypeName();\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = allocation.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(AllocationExpression allocation, boolean resolve) {\r", "+\r", "+\t// constructor name is simple type name\r", "+\tchar[][] typeName = allocation.type.getTypeName();\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(allocation.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}], "num": 70614}
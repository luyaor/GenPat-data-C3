{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "419cdd884b24994b17ff05c60c1175f2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3479ba2469ad43b613156a36077155ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "5c6cb8db910a517d56a630d54a58e799b87e5f3d", "commitAfterChange": "5ec0d4f852b715851ad782798e616c99fb28d2e1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r private int matchLevel(QualifiedNameReference qNameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(QualifiedNameReference qNameRef, boolean resolve)", "diff": ["+\t\t\t\t\tbreak;\r", "+\t\t\t\t/*\r", "+\t\t\t\t * Handling of unbound qualified name references. The match may reside in the resolved fragment,\r", "+\t\t\t\t * which is recorded inside the problem binding, along with the portion of the name until it became a problem.\r", "+\t\t\t\t */\r", "+\t\t\t\tcase BindingIds.VARIABLE : //============unbound cases===========\r", "+\t\t\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :\t\t\t\t\t\t\r", "+\t\t\t\t\tif (binding instanceof ProblemBinding) {\r", "+\t\t\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;\r", "+\t\t\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far\r", "+\t\t\t\t\t\tchar[] partialQualifiedName = pbBinding.name;\r", "+\t\t\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token\r", "+\t\t\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\t\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deaecce99b16a1544a411f498d03271b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "5c6cb8db910a517d56a630d54a58e799b87e5f3d", "commitAfterChange": "5ec0d4f852b715851ad782798e616c99fb28d2e1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "diff": ["-\t\tif (binding == null || binding instanceof ProblemBinding) {\r", "-\t\t\treturn INACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tif (binding instanceof TypeBinding) {\r", "-\t\t\t\t\treturn this.matchLevelForType(this.simpleName, this.qualification, (TypeBinding) binding);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH; // must be a type binding\r", "-\t\t\t\t}\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tTypeBinding typeBinding = null;\r", "-\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "-\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\t\tint lastIndex = tokens.length-1;\r", "-\t\t\t\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {\r", "-\t\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "-\t\t\t\t\t\ttypeBinding = nameRef.actualReceiverType;\r", "-\t\t\t\t\t\t// no valid match amongst fields\r", "-\t\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "-\t\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "-\t\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no type match in it\r", "-\t\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "-\t\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "-\t\t\t\t}\r", "-\t\t\t\t// try to match all enclosing types for which the token matches as well.\r", "-\t\t\t\twhile (typeBinding != null && lastIndex >= 0){\r", "-\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[lastIndex--])) {\r", "-\t\t\t\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);\r", "-\t\t\t\t\t\tif (level != IMPOSSIBLE_MATCH) {\r", "-\t\t\t\t\t\t\treturn level;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (typeBinding instanceof ReferenceBinding){\r", "-\t\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\ttypeBinding = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\tif (binding == null || binding instanceof ProblemBinding){\r", "+\t\t\t\treturn INACCURATE_MATCH;\r", "+\t\t\t} else if (binding instanceof TypeBinding) {\r", "+\t\t\t\treturn this.matchLevelForType(this.simpleName, this.qualification, (TypeBinding) binding);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH; // must be a type binding\r", "+\t\t} else { // QualifiedNameReference\r", "+\t\t\tTypeBinding typeBinding = null;\r", "+\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\tint lastIndex = tokens.length-1;\r", "+\t\t\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {\r", "+\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "+\t\t\t\t\ttypeBinding = nameRef.actualReceiverType;\r", "+\t\t\t\t\t// no valid match amongst fields\r", "+\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "+\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "+\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no type match in it\r", "+\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "+\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t/*\r", "+\t\t\t\t * Handling of unbound qualified name references. The match may reside in the resolved fragment,\r", "+\t\t\t\t * which is recorded inside the problem binding, along with the portion of the name until it became a problem.\r", "+\t\t\t\t */\r", "+\t\t\t\tcase BindingIds.VARIABLE : //============unbound cases===========\r", "+\t\t\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :\t\t\t\t\t\t\r", "+\t\t\t\t\tif (binding instanceof ProblemBinding) {\r", "+\t\t\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;\r", "+\t\t\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far\r", "+\t\t\t\t\t\tchar[] partialQualifiedName = pbBinding.name;\r", "+\t\t\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token\r", "+\t\t\t\t\t\tif (typeBinding == null || lastIndex < 0) return INACCURATE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\t// try to match all enclosing types for which the token matches as well.\r", "+\t\t\twhile (typeBinding != null && lastIndex >= 0){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[lastIndex--])) {\r", "+\t\t\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);\r", "+\t\t\t\t\tif (level != IMPOSSIBLE_MATCH) {\r", "+\t\t\t\t\t\treturn level;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tif (typeBinding instanceof ReferenceBinding){\r", "+\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ttypeBinding = null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r"]}], "num": 25462}
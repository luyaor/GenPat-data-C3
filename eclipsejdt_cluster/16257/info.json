{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "839e257a258f5174fb8eba78cd612a64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095751bba28c155f6cad99eacab42ab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["+}\r", "+public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\tif (visitor.visit(this, blockScope)) {\r", "+\t\texception.traverse(visitor, blockScope);\r", "-\r", "-\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\t\tif (visitor.visit(this, blockScope))\r", "-\t\t\texception.traverse(visitor, blockScope);\r", "-\t\tvisitor.endVisit(this, blockScope);\r", "-\t}\r", "+\tvisitor.endVisit(this, blockScope);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0fea0d39438ccb17f64b40f42c3042e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "38590129939501d58d89738289276afaa02e2706", "commitAfterChange": "0a902f02dbe85869aef1b7ecd659a6f0a0c2a6cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb)", "signatureAfterChange": "\r public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb)", "diff": ["-public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb){\r", "-\r", "-\tif ( (left.constant != NotAConstant) && (right.constant != NotAConstant) )\r", "-\t{\tconstant = Constant.computeConstantOperationEQUAL_EQUAL(left.constant,rightTb.id,EQUAL_EQUAL,right.constant,rightTb.id);\r", "+public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb) {\r", "+\tif ((left.constant != NotAConstant) && (right.constant != NotAConstant)) {\r", "+\t\tconstant =\r", "+\t\t\tConstant.computeConstantOperationEQUAL_EQUAL(\r", "+\t\t\t\tleft.constant,\r", "+\t\t\t\trightTb.id,\r", "+\t\t\t\tEQUAL_EQUAL,\r", "+\t\t\t\tright.constant,\r", "+\t\t\t\trightTb.id);\r", "-\t\t\tconstant = Constant.fromValue(! constant.booleanValue()) ;}\r", "-\telse\r", "-\t\tconstant = NotAConstant ;\r", "+\t\t\tconstant = Constant.fromValue(!constant.booleanValue());\r", "+\t} else {\r", "+\t\tconstant = NotAConstant;\r", "+\t}\r"]}], "num": 16257}
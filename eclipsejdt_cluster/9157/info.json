{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccec3fa0773a6483252ac686f1707d53", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b33d67d8eb2a471f8df0b99045b2e28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3ff7b81bced83cc6ffeee9cd4ddf361110eeeb98", "commitAfterChange": "25f2a2d3f2ea6a2ed84c0af6dba49f7f2a42eab8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\t\t\tif(isCompletingDeclaration){\r", "-\t\t\t\tfindLocalMethodDeclarations(\r", "-\t\t\t\t\tselector,\r", "-\t\t\t\t\tcurrentType.availableMethods(),\r", "-\t\t\t\t\tscope,\r", "-\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\texactMatch,\r", "-\t\t\t\t\treceiverType);\r", "-\t\t\t} else{\r", "-\t\t\t\tfindLocalMethods(\r", "-\t\t\t\t\tselector,\r", "-\t\t\t\t\targTypes,\r", "-\t\t\t\t\tcurrentType.availableMethods(),\r", "-\t\t\t\t\tscope,\r", "-\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\texactMatch,\r", "-\t\t\t\t\treceiverType,\r", "-\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\tinvocationScope,\r", "-\t\t\t\t\timplicitCall);\r", "+\t\t\t\r", "+\t\t\tMethodBinding[] methods = currentType.availableMethods();\r", "+\t\t\tif(methods != null) {\r", "+\t\t\t\tif(isCompletingDeclaration){\r", "+\t\t\t\t\tfindLocalMethodDeclarations(\r", "+\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\tmethods,\r", "+\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\treceiverType);\r", "+\t\t\t\t} else{\r", "+\t\t\t\t\tfindLocalMethods(\r", "+\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\tmethods,\r", "+\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\t\tinvocationScope,\r", "+\t\t\t\t\t\timplicitCall);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999eca8976c57cc5c0c350288fb81a83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3ff7b81bced83cc6ffeee9cd4ddf361110eeeb98", "commitAfterChange": "25f2a2d3f2ea6a2ed84c0af6dba49f7f2a42eab8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r \r \tprivate void findIntefacesMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tReferenceBinding[] itsInterfaces,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \r \tprivate void findIntefacesMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tReferenceBinding[] itsInterfaces,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\t\t\t\t\t\tif(isCompletingDeclaration){\r", "-\r", "-\t\t\t\t\t\t\tfindLocalMethodDeclarations(\r", "-\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\tcurrentType.availableMethods(),\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\treceiverType);\r", "-\r", "-\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\tfindLocalMethods(\r", "-\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\tcurrentType.availableMethods(),\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\t\t\t\tinvocationScope,\r", "-\t\t\t\t\t\t\t\timplicitCall);\r", "+\t\t\t\t\t\tMethodBinding[] methods = currentType.availableMethods();\r", "+\t\t\t\t\t\tif(methods != null) {\r", "+\t\t\t\t\t\t\tif(isCompletingDeclaration){\r", "+\t\r", "+\t\t\t\t\t\t\t\tfindLocalMethodDeclarations(\r", "+\t\t\t\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\t\t\t\tmethods,\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\t\t\t\treceiverType);\r", "+\t\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\tfindLocalMethods(\r", "+\t\t\t\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\tmethods,\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\t\t\t\t\tinvocationScope,\r", "+\t\t\t\t\t\t\t\t\timplicitCall);\r", "+\t\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e46db18cc782332e5b14fd86bf26dbb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "b8ff4f523edb67ccd09002204d57adbfde37cc9f", "commitAfterChange": "efb80a4deb3af0f6142e1fce258effdd26fb6f64", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\t\t\t\tfor (int i = 0, length = initializer.expressions.length; i < length; i++) {", "-\t\t\t\t\t\t\tExpression initExpr = initializer.expressions[i];", "-\t\t\t\t\t\t\tif (initExpr instanceof NameReference) {", "-\t\t\t\t\t\t\t\tFieldBinding field = ((NameReference) initExpr).fieldBinding();", "-\t\t\t\t\t\t\t\tif (field != null && field.declaringClass.id == T_JavaLangAnnotationElementType) {", "-\t\t\t\t\t\t\t\t\tlong element = getTargetElementType(field.name);", "-\t\t\t\t\t\t\t\t\tif ((tagBits & element) != 0) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateTargetInTargetAnnotation(annotationType, (NameReference)initExpr);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\ttagBits |= element;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\t\tfor (int i = 0, length = expressions.length; i < length; i++) {", "+\t\t\t\t\t\t\t\tExpression initExpr = expressions[i];", "+\t\t\t\t\t\t\t\tif (initExpr instanceof NameReference) {", "+\t\t\t\t\t\t\t\t\tFieldBinding field = ((NameReference) initExpr).fieldBinding();", "+\t\t\t\t\t\t\t\t\tif (field != null && field.declaringClass.id == T_JavaLangAnnotationElementType) {", "+\t\t\t\t\t\t\t\t\t\tlong element = getTargetElementType(field.name);", "+\t\t\t\t\t\t\t\t\t\tif ((tagBits & element) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateTargetInTargetAnnotation(annotationType, (NameReference)initExpr);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\ttagBits |= element;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t}"]}], "num": 9157}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03d6f128fe970b80b21fee7cb9c50e86", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68b58de16b95315c19249d05139051d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "eb98db8467dab9b499bde6848602a31af6a605b6", "commitAfterChange": "62542d77179e2d9d9eae2d205be3f0fefe8aabb4", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations, boolean isLegalLocation)", "signatureAfterChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations, boolean annotatingEnumerator)", "diff": ["-\tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations, boolean isLegalLocation) {", "+\tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations, boolean annotatingEnumerator) {", "-\t\tint firstSE8 = -1, lastSE8 = 0;", "+\t\tint firstSE8 = -1;", "+\t\t\t\tif (annotatingEnumerator) {", "+\t\t\t\t\tif ((metaTagBits & recipientTargetMask) == 0) {", "+\t\t\t\t\t\tscope.problemReporter().misplacedTypeAnnotations(annotations[i], annotations[i]);", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "-\t\t\t\tlastSE8 = i;", "-\t\t\tif (!isLegalLocation) {", "-\t\t\t\tscope.problemReporter().misplacedTypeAnnotations(annotations[firstSE8], annotations[lastSE8]);", "-\t\t\t\treturn;", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7529386f6fec9bcdc7f4f50b48d67997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tstatic void checkNewChild(ASTNode node, ASTNode newChild, \t\t\tboolean cycleCheck, Class nodeType)", "signatureAfterChange": "  \tstatic void checkNewChild(ASTNode node, ASTNode newChild, \t\t\tboolean cycleCheck, Class nodeType)", "diff": ["-\t\tAST ast = node.getAST();", "-\t\tif (newChild.getAST() != ast) {", "+\t\tif (newChild.ast != node.ast) {", "-\t\t}", "-\t\t", "+\t\t}\t\t", "-\t\t\tthrow new IllegalArgumentException();", "+\t\t\tthrow new ClassCastException();", "+\t\tif ((newChild.flags & PROTECT) != 0) {", "+\t\t\t// new child node is protected => cannot be parented", "+\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t}", "+\t}"]}], "num": 20882}
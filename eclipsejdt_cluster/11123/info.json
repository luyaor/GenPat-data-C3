{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba7eab8cd7eb374b1b6ec5d01458ede0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a3daca7e11cea8f7f33e44a997ccc65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "146009e38675deb85b2aa23f66e92f2f13172cf7", "commitAfterChange": "08b9d40dde0b005b87b207f8d02b5899cde7b397", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "diff": ["-\t\tMethodBinding theAbstractMethod = genericType().getSingleAbstractMethod(scope);", "+\t\tfinal ReferenceBinding genericType = genericType();", "+\t\tMethodBinding theAbstractMethod = genericType.getSingleAbstractMethod(scope);", "-\t\tTypeVariableBinding [] typeParameters = genericType().typeVariables(); // P1 ... Pn", "+\t\tTypeVariableBinding [] typeParameters = genericType.typeVariables(); // P1 ... Pn", "-\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType(), types, this.enclosingType);", "+\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType, types, genericType.enclosingType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5cc56dfb7cd881c06bbe102365c730f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ClassLiteralAccess.java", "commitBeforeChange": "3e0c5ac9aa92d53701e5df6b2f9163aef4500b8d", "commitAfterChange": "5499d7ab628f0d031c84d349d565b52915f502cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.targetType = scope.environment().convertToRawType(this.targetType, true /* force conversion of enclosing types*/);", "+\t\tLookupEnvironment environment = scope.environment();", "+\t\tthis.targetType = environment.convertToRawType(this.targetType, true /* force conversion of enclosing types*/);", "-\t\t\t\tboxedType = scope.environment().getResolvedType(JAVA_LANG_VOID, scope);", "+\t\t\t\tboxedType = environment.getResolvedType(JAVA_LANG_VOID, scope);", "-\t\t\tthis.resolvedType = scope.environment().createParameterizedType(classType, new TypeBinding[]{ boxedType }, null/*not a member*/);", "+\t\t\tif (environment.usesNullTypeAnnotations())", "+\t\t\t\tboxedType = environment.createAnnotatedType(boxedType, new AnnotationBinding[] { environment.getNonNullAnnotation() });", "+\t\t\tthis.resolvedType = environment.createParameterizedType(classType, new TypeBinding[]{ boxedType }, null/*not a member*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e23dfdc3711a6b198166f7879dc1d07a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-", "+\tfinal boolean isDiamond = this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;", "+\t\t}", "+\t\tif (isDiamond) {", "+\t\t\tscope.problemReporter().diamondNotWithExplicitTypeArguments(this.typeArguments);", "+\t\t\treturn null;", "+\tif (isDiamond) {", "+\t\tTypeBinding [] inferredTypes = inferElidedTypes(((ParameterizedTypeBinding) this.resolvedType).genericType(), null, argumentTypes, scope);", "+\t\tif (inferredTypes == null) {", "+\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "+\t\t\treturn this.resolvedType = null;", "+\t\t}", "+\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "+ \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb5f3b55640454c394b9d88632934b12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "332f2b4bbc61519d48f9e1634468f589fe6ec357", "commitAfterChange": "1dac44e6f5251febeac5322fb143c153ef780c6a", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "diff": ["+", "+\t\t// if mec is an array type, intersect invocation leaf component types, then promote back to array", "+\t\tint dim = mec.dimensions();", "+\t\tmec = mec.leafComponentType();", "+\t\t", "-\t\t\tTypeBinding invocation = (TypeBinding)iter.next();", "+\t\t\tTypeBinding invocation = ((TypeBinding)iter.next()).leafComponentType();", "-\t\t\t\t\treturn invocation; // raw type is taking precedence", "+\t\t\t\t\treturn dim == 0 ? invocation : environment().createArrayType(invocation, dim); // raw type is taking precedence", "-\t\treturn environment().createParameterizedType((ReferenceBinding) mec.erasure(), bestArguments, mec.enclosingType());", "+\t\tTypeBinding least = environment().createParameterizedType((ReferenceBinding) mec.erasure(), bestArguments, mec.enclosingType());", "+\t\treturn dim == 0 ? least : environment().createArrayType(least, dim);"]}], "num": 11123}
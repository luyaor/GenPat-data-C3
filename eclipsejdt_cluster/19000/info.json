{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ede6a204917df6d7b26b44165103d024", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01fa726e261511fc21682da8b3e22443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "signatureAfterChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "diff": ["-private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "-\tAnnotationBinding [] annotations;", "-\tAnnotationBinding [][] annotationsOnDimensions = null;", "-\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "-\t\tfor (int i = 0; i < dimension; i++) {", "-\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "-\t\t\t\tif (annotationsOnDimensions == null)", "-\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "-\t\t\t\tannotationsOnDimensions[i] = annotations;", "-\t\t\t}", "-\t\t\twalker = walker.toNextArrayDimension();", "-\t\t}", "-\t}", "-\t", "-\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "+\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09469356141c4fb5f08da66c158fce96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "a3a00115caa9dfd2b9b6d5b9fcf61ba0f8479cd9", "commitAfterChange": "c5d3e87bb720e91660c058962146e02390cfc415", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic String[] getSuperInterfaceTypeSignatures() throws JavaModelException", "signatureAfterChange": "  \tpublic String[] getSuperInterfaceTypeSignatures() throws JavaModelException", "diff": ["-\t\tSourceTypeElementInfo info = (SourceTypeElementInfo) getElementInfo();", "-\t\tchar[][] names = info.getInterfaceNames();", "-\t\tif (names == null) {", "-\t\t\treturn CharOperation.NO_STRINGS;", "-\t\t}", "-\t\tString[] strings = new String[names.length];", "-\t\tfor (int i= 0; i < names.length; i++) {", "-\t\t\tstrings[i] = new String(Signature.createTypeSignature(names[i], true));", "-\t\t}", "-\t\treturn strings;", "+\t\treturn new String[] { this.interphase };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09b9c21b0d11b9472831bcbb0aa383c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "91b3ef4365537e98d5044d4777c3bb7d5dfb005a", "commitAfterChange": "190d9879f2bead2bc707cc291e46021dcf68fe91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\tpublic String toString() {", "-\t\tString[] strings = new String[index+1];", "-\t\tSystem.arraycopy(results, 0, strings, 0, index+1);", "-\t\tfor (int i=0; i<=index; i++) {", "+\t}", "+\tpublic String toString() {", "+\t\treturn toString(0);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a03564e88147265aed52de32fcd86d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6f8a1f468102cc95fa52d9b7fdbd93df1eea7638", "commitAfterChange": "e4d4ff5013f9df9fd57cdef7bafc039c1cd3f062", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tHashSet externalPaths = new HashSet();", "-\t\t\t\t\t\t\t\texternalPaths.add(entryPath);", "+\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(entryPath, true);", "-\t\t\t", "-\t\t\tISchedulingRule rule = null;", "-\t\t\t\t// Use a schedule rule to avoid a race condition (https://bugs.eclipse.org/bugs/show_bug.cgi?id=369251)", "-\t\t\t\trule = ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(externalFoldersManager.getExternalFoldersProject());", "-\t\t\t\tJob.getJobManager().beginRule(rule, monitor);", "-\t\t\t\t", "-\t\t\t\tIterator externalPathIter = externalPaths.iterator();", "-\t\t\t\twhile (externalPathIter.hasNext()) {", "-\t\t\t\t\texternalFoldersManager.addFolder((IPath) externalPathIter.next(), true);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t} catch (JavaModelException jme) {", "+\t\t\t}", "+\t\t\tcatch(JavaModelException jme) {", "-\t\t\t} finally {", "-\t\t\t\tJob.getJobManager().endRule(rule);", "-\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bfdec2f184ac44756c2654aa9add57f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  public void checkcast(TypeBinding typeBinding)", "signatureAfterChange": " public void checkcast(TypeBinding typeBinding)", "diff": ["-", "+\tthis.checkcast(null, typeBinding);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "235ab5692480f30867cb61c6bfdcf37e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "78d640f6bd5ff8e757b4b457bee3d92d7c8352e1", "commitAfterChange": "abfcb7bb2bf20458fc372ec46b98225419a0c876", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 169, "signatureBeforeChange": " public void inheritedMethodReducesVisibility(SourceTypeBinding type, MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " public void inheritedMethodReducesVisibility(SourceTypeBinding type, MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-public void inheritedMethodReducesVisibility(SourceTypeBinding type, MethodBinding concreteMethod, MethodBinding[] abstractMethods) {", "-\t\ttype.sourceStart(),", "-\t\ttype.sourceEnd());", "+}", "+public void inheritedMethodReducesVisibility(SourceTypeBinding type, MethodBinding concreteMethod, MethodBinding[] abstractMethods) {", "+\tinheritedMethodReducesVisibility(type.sourceStart(), type.sourceEnd(), concreteMethod, abstractMethods);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e448c73574e724c9fdd632a8412d70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathInitializerTests.java", "commitBeforeChange": "f595c3df6cbb40a33fa3de2980da6860a9a3730f", "commitAfterChange": "665fa70c145e3460af8c3efab89c50489feb17d0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void testContainerInitializer6() throws CoreException", "signatureAfterChange": " public void testContainerInitializer6() throws CoreException", "diff": ["-\t\tIJavaProject p2 = createJavaProject(", "+\t\tcreateJavaProject(", "-\t\tworkingCopy = getCompilationUnit(\"/P2/src/X.java\");", "-\t\t// simulate state on startup (flush containers, and preserve their previous values)", "-\t\tsetContainerStartupState(p2);", "-\t\t", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tResourcesPlugin.getWorkspace().removeResourceChangeListener(manager.deltaState);", "-\t\tmanager.deltaState = new DeltaProcessingState();", "-\t\tResourcesPlugin.getWorkspace().addResourceChangeListener(", "-\t\t\tmanager.deltaState,", "-\t\t\tIResourceChangeEvent.PRE_BUILD", "-\t\t\t\t\t| IResourceChangeEvent.POST_BUILD", "-\t\t\t\t\t| IResourceChangeEvent.POST_CHANGE", "-\t\t\t\t\t| IResourceChangeEvent.PRE_DELETE", "-\t\t\t\t\t| IResourceChangeEvent.PRE_CLOSE);", "+\t\t// simulate state on startup", "+\t\tsimulateExitRestart();", "+\t\tworkingCopy = getCompilationUnit(\"/P2/src/X.java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402712d860adabb65afd1819b5a067cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods)", "signatureAfterChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "diff": ["-public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods) {", "+public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl) {", "+\tif (type.isEnum() && type.isLocalType()) {", "+\t\tFieldBinding field = type.scope.enclosingMethodScope().initializedField;", "+\t\tFieldDeclaration decl = field.sourceField();", "+\t\tString[] arguments = new String[] {new String(decl.name), new String(methodDecl.selector)};", "+\t\tthis.handle(", "+\t\t\tIProblem.AbstractMethodInEnum,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+\t} else {", "+\t\tString[] arguments = new String[] {new String(type.sourceName()), new String(methodDecl.selector)};", "+\t\tthis.handle(", "+\t\t\tIProblem.AbstractMethodInAbstractClass,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+\t}", "+}", "-\t\tStringBuffer selectorsString = new StringBuffer();", "-\t\tfor (int i = 0, l = abstractMethods.length; i < l;) {", "-\t\t\tMethodBinding abstractMethod = abstractMethods[i++];", "-\t\t\tselectorsString.append(abstractMethod.selector);", "-\t\t\tselectorsString.append(\"()\"); //$NON-NLS-1$", "-\t\t\tif (i < l)", "-\t\t\t\tselectorsString.append(\", \"); //$NON-NLS-1$", "-\t\t}", "-\t\tString[] arguments = new String[] {new String(type.sourceName()), selectorsString.toString()};", "-\t\t\tIProblem.AbstractMethodInAbstractClass,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7f125e0ad379bf724cc0cb354281e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "f46836fc0182d6558b7db806545181e1bf6b7622", "commitAfterChange": "f48f3dd594832bdee5afb2423353d275b5827bd1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void appendQualifiedTypeParameters(StringBuffer buffer, ITypeBinding[] typeParameters)", "signatureAfterChange": " \t \tpublic void appendQualifiedTypeParameters(StringBuffer buffer, ITypeBinding[] typeParameters)", "diff": ["-\t\t\t\tTypeBinding typeParameter = (TypeBinding) typeParameters[i];", "-\t\t\t\tbuffer.append(typeParameter.getQualifiedName());", "-\t\t\t\tITypeBinding[] bounds = typeParameter.getTypeBounds();", "-\t\t\t\tint length = bounds.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(bounds[0].getQualifiedName());", "-\t\t\t\t\tfor (int j = 1; j < length; j++) {", "-\t\t\t\t\t\tbuffer.append('&');", "-\t\t\t\t\t\tbuffer.append(bounds[j].getQualifiedName());", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tbuffer.append(typeParameters[i].getQualifiedName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4e777b294733f406a55fc358e5ce284", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/AccessRuleSet.java", "commitBeforeChange": "55369835f4de509d18e116254a7a5ee5fbfb9076", "commitAfterChange": "f05031de41d597efaafe7979f6d5919cb0b41f1c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic String toString()", "signatureAfterChange": " \t \tpublic String toString()", "diff": ["+\t\treturn toString(true/*wrap lines*/);", "+\t}", "-\t\tbuffer.append(\"AccessRuleSet {\\n\"); //$NON-NLS-1$", "-\t\t\tbuffer.append('\\t');", "-\t\t\tbuffer.append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b129ce4ef5b3e2daa01d2bb7431d4c5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "38cb224047de4121a0ae69054f2ef8e6cd34249a", "commitAfterChange": "053392445b1e4386796a9119a1bee84b8fe1860f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected void storeProblemsFor(SourceFile sourceFile, IProblem[] problems) throws CoreException", "signatureAfterChange": " protected void storeProblemsFor(SourceFile sourceFile, IProblem[] problems) throws CoreException", "diff": ["-\t\tIMarker marker;", "-\t\t\tmarker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\t\t\t});", "-\t\t} else {", "-\t\t\tmarker = resource.createMarker(IJavaModelMarker.TASK_MARKER);", "-\t\t\tint priority = IMarker.PRIORITY_NORMAL;", "-\t\t\tString compilerPriority = problem.getArguments()[2];", "-\t\t\tif (JavaCore.COMPILER_TASK_PRIORITY_HIGH.equals(compilerPriority))", "-\t\t\t\tpriority = IMarker.PRIORITY_HIGH;", "-\t\t\telse if (JavaCore.COMPILER_TASK_PRIORITY_LOW.equals(compilerPriority))", "-\t\t\t\tpriority = IMarker.PRIORITY_LOW;", "-\t\t\tmarker.setAttributes(", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tIMarker.MESSAGE, ", "-\t\t\t\t\tIMarker.PRIORITY, ", "-\t\t\t\t\tIMarker.DONE, ", "-\t\t\t\t\tIMarker.CHAR_START, ", "-\t\t\t\t\tIMarker.CHAR_END, ", "-\t\t\t\t\tIMarker.LINE_NUMBER},", "-\t\t\t\tnew Object[] { ", "-\t\t\t\t\tproblem.getMessage(),", "-\t\t\t\t\tnew Integer(priority),", "-\t\t\t\t\tnew Boolean(false),", "-\t\t\t\t\tnew Integer(problem.getSourceStart()),", "-\t\t\t\t\tnew Integer(problem.getSourceEnd() + 1),", "-\t\t\t\t\tnew Integer(problem.getSourceLineNumber()),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4a17d4ec659bc6d38338facba47648e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "dd0d8de41ff9634977089468dd69785577ba4097", "commitAfterChange": "802c7ac625f347675c393d0da79bae0fe10a00fd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void getHandleMemento(StringBuffer buff)", "signatureAfterChange": " \tprotected void getHandleMemento(StringBuffer buff)", "diff": ["-\t\t((JavaElement)getParent()).getHandleMemento(buff);", "+\t\tgetHandleMemento(buff, true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8b70b55f4c66e109b909bf50ed9fe4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "f1f93a7d91e89cdeb0fa2ce3bdaa99ce3dc6f98d", "commitAfterChange": "ba9a2de3815926454983a937a48457fb91305171", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tSearchPattern closestPattern = null;", "-\tint level = IMPOSSIBLE_MATCH;", "-\tfor (int i = 0, length = this.patterns.length; i < length; i++) {", "-\t\tint newLevel = this.patterns[i].matchLevel(reference, true);", "-\t\tif (newLevel > level) {", "-\t\t\tif (newLevel == ACCURATE_MATCH) {", "-\t\t\t\tthis.patterns[i].matchReportReference(reference, element, accuracy, locator);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tlevel = newLevel;", "-\t\t\tclosestPattern = this.patterns[i];", "-\t\t}", "-\t}", "+\tSearchPattern closestPattern = findClosestPattern(reference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de215be70b448d5cac9e95b7bea38736", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "9d4deb39cd596c4aac108a1983a0ab5432be976e", "commitAfterChange": "56a8cd73a948ae71b76868e1cd754e391e5a1fb2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "signatureAfterChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "diff": ["-\t*/", "-\t\tTypeVariableBinding prototype = (TypeVariableBinding) this.environment.getUnannotatedType(this); // also exposes original TVB/capture to type system for id stamping purposes.", "-\t\tif (prototype != this && !this.isCapture()) { //$IDENTITY-COMPARISON$", "-\t\t\tAnnotationBinding [] declarationAnnotations = prototype.getTypeAnnotations();", "-\t\t\tfinal int declarationAnnotationsLength = declarationAnnotations == null ? 0 : declarationAnnotations.length;", "-\t\t\tif (declarationAnnotationsLength > 0) {", "-\t\t\t\tfinal int annotationsLength = annotations.length;", "-\t\t\t\tSystem.arraycopy(annotations, 0, annotations = new AnnotationBinding[annotationsLength + declarationAnnotationsLength], 0, annotationsLength);", "-\t\t\t\tSystem.arraycopy(declarationAnnotations, 0, annotations, annotationsLength, declarationAnnotationsLength);", "-\t\t\t}", "-\t\t}", "+\t\tthis.environment.getUnannotatedType(this); // exposes original TVB/capture to type system for id stamping purposes."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de385e5d87171e2972a2f4fa3c6b6402", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods)", "signatureAfterChange": " public void abstractMethodInConcreteClass(SourceTypeBinding type)", "diff": ["-public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods) {", "+}", "+public void abstractMethodInConcreteClass(SourceTypeBinding type) {", "-\t\tStringBuffer selectorsString = new StringBuffer();", "-\t\tfor (int i = 0, l = abstractMethods.length; i < l;) {", "-\t\t\tMethodBinding abstractMethod = abstractMethods[i++];", "-\t\t\tselectorsString.append(abstractMethod.selector);", "-\t\t\tselectorsString.append(\"()\"); //$NON-NLS-1$", "-\t\t\tif (i < l)", "-\t\t\t\tselectorsString.append(\", \"); //$NON-NLS-1$", "-\t\t}", "-\t\tString[] arguments = new String[] {new String(type.sourceName()), selectorsString.toString()};", "+\t\tString[] arguments = new String[] {new String(type.sourceName())};", "-\t\t\tIProblem.AbstractMethodInAbstractClass,", "+\t\t\tIProblem.AbstractMethodsInConcreteClass,"]}], "num": 19000}
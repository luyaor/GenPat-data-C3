{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "935841fc12aaecd6b062be71e0a15bb7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be3bac0d722e809b87e8aeab66d3df9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-", "-", "+\t\tTypeBinding[] uncheckedArguments = null;", "-", "-", "+\t\t\t", "-", "+\t\t\t\tif (inferenceContext.isUnchecked) { // only remember unchecked status post 15.12.2.7", "+\t\t\t\t\tint length = inferenceContext.substitutes.length;", "+\t\t\t\t\tSystem.arraycopy(inferenceContext.substitutes, 0, uncheckedArguments = new TypeBinding[length], 0, length);", "+\t\t\t\t}", "-\t\tif (!methodSubstitute.isRaw) {", "-\t\t\tfor (int i = 0, length = typeVariables.length; i < length; i++) {", "-\t\t\t    TypeVariableBinding typeVariable = typeVariables[i];", "-\t\t\t    TypeBinding substitute = methodSubstitute.typeArguments[i];", "-\t\t\t\tswitch (typeVariable.boundCheck(methodSubstitute, substitute)) {", "-\t\t\t\t\tcase TypeConstants.MISMATCH :", "-\t\t\t\t        // incompatible due to bound check", "-\t\t\t\t\t\tint argLength = arguments.length;", "-\t\t\t\t\t\tTypeBinding[] augmentedArguments = new TypeBinding[argLength + 2]; // append offending substitute and typeVariable", "-\t\t\t\t\t\tSystem.arraycopy(arguments, 0, augmentedArguments, 0, argLength);", "-\t\t\t\t\t\taugmentedArguments[argLength] = substitute;", "-\t\t\t\t\t\taugmentedArguments[argLength+1] = typeVariable;", "-\t\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, augmentedArguments, ProblemReasons.ParameterBoundMismatch);", "-\t\t\t\t\tcase TypeConstants.UNCHECKED :", "-\t\t\t\t\t\t// tolerate unchecked bounds", "-\t\t\t\t\t\tmethodSubstitute.isUnchecked = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\tfor (int i = 0, length = typeVariables.length; i < length; i++) {", "+\t\t    TypeVariableBinding typeVariable = typeVariables[i];", "+\t\t    TypeBinding substitute = methodSubstitute.typeArguments[i];", "+\t\t    if (uncheckedArguments != null && uncheckedArguments[i] == null) continue; // only bound check if inferred through 15.12.2.6", "+\t\t\tswitch (typeVariable.boundCheck(methodSubstitute, substitute)) {", "+\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\t        // incompatible due to bound check", "+\t\t\t\t\tint argLength = arguments.length;", "+\t\t\t\t\tTypeBinding[] augmentedArguments = new TypeBinding[argLength + 2]; // append offending substitute and typeVariable", "+\t\t\t\t\tSystem.arraycopy(arguments, 0, augmentedArguments, 0, argLength);", "+\t\t\t\t\taugmentedArguments[argLength] = substitute;", "+\t\t\t\t\taugmentedArguments[argLength+1] = typeVariable;", "+\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, augmentedArguments, ProblemReasons.ParameterBoundMismatch);", "+\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\t\t// tolerate unchecked bounds", "+\t\t\t\t\tinvocationSite.setUnchecked(true);", "+\t\t\t\t\tbreak;", "+\t\t// check presence of unchecked argument conversion a posteriori (15.12.2.6)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79331ebfc87177a56893efb312178021", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\tif (substitutedEnclosing != null) {", "-\t\t\t\t\t\t\t//if (!(substitutedEnclosing instanceof SourceTypeBinding)) break identicalVariables;", "-\t\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (originalParameterizedType.type.isBinaryBinding()) break identicalVariables; // generic binary is never used as is, see 85262", "-\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t}", "+//\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+//\t\t\t\t\t\tif (substitutedEnclosing != null) {", "+//\t\t\t\t\t\t\t//if (!(substitutedEnclosing instanceof SourceTypeBinding)) break identicalVariables;", "+//\t\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;\t\t\t\t\t\t", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tif (originalParameterizedType.type.isBinaryBinding()) break identicalVariables; // generic binary is never used as is, see 85262", "+//\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+//\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "+//\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\treturn originalParameterizedType.type;", "+//\t\t\t\t\t}", "-\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "-\t\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+//\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "+\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);", "+//\t\t\t\t}", "+//\t\t\t\tbreak;"]}], "num": 33342}
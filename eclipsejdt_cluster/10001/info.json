{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "900eab292dfd4667d72c83847930c4c1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e89cc9eb0d41c2b24f883d87cf4ac6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected int matchMethod(MethodBinding method)", "signatureAfterChange": " protected int matchMethod(MethodBinding method)", "diff": ["-\t// Try to bind pattern", "-\tMethodBinding patternMethodBinding = this.pattern.getMethodBinding();", "-\tboolean boundPattern = patternMethodBinding != null && patternMethodBinding.isValidBinding();", "-", "-\t// verify closest match if pattern was bound", "-\t// (see bug 70827)", "-\tif (boundPattern) {", "-\t\tif (patternMethodBinding.isPrivate() && patternMethodBinding.declaringClass != method.declaringClass) {", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ef3d93978bf146e1c3e07b5d990370", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "9ba8652d2cebf2117416af5e39a70e172556117b", "commitAfterChange": "5e5b42592bef6fdd64e1e290eec08f6437050079", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tConstant cst = this.assertExpression.optimizedBooleanConstant();\t\t", "-\t\t\tboolean isOptimizedTrueAssertion = cst != NotAConstant && cst.booleanValue() == true;", "-\t\t\tif (isOptimizedTrueAssertion) {", "-\t\t\t\tthis.assertExpression.generateCode(currentScope, codeStream, false);", "+\t\t\tLabel falseLabel = new Label(codeStream);", "+\t\t\tthis.assertExpression.generateOptimizedBoolean(currentScope, codeStream, (falseLabel = new Label(codeStream)), null , true);", "+\t\t\tcodeStream.newJavaLangAssertionError();", "+\t\t\tcodeStream.dup();", "+\t\t\tif (exceptionArgument != null) {", "+\t\t\t\texceptionArgument.generateCode(currentScope, codeStream, true);", "+\t\t\t\tcodeStream.invokeJavaLangAssertionErrorConstructor(exceptionArgument.implicitConversion & 0xF);", "-\t\t\t\tLabel falseLabel = new Label(codeStream);", "-\t\t\t\tthis.assertExpression.generateOptimizedBoolean(currentScope, codeStream, (falseLabel = new Label(codeStream)), null , true);", "-\t\t\t\tcodeStream.newJavaLangAssertionError();", "-\t\t\t\tcodeStream.dup();", "-\t\t\t\tif (exceptionArgument != null) {", "-\t\t\t\t\texceptionArgument.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\tcodeStream.invokeJavaLangAssertionErrorConstructor(exceptionArgument.implicitConversion & 0xF);", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.invokeJavaLangAssertionErrorDefaultConstructor();", "-\t\t\t\t}", "-\t\t\t\tcodeStream.athrow();", "-\t\t\t\tfalseLabel.place();", "-\t\t\t}\t\t\t", "+\t\t\t\tcodeStream.invokeJavaLangAssertionErrorDefaultConstructor();", "+\t\t\t}", "+\t\t\tcodeStream.athrow();", "+\t\t\tfalseLabel.place();"]}], "num": 10001}
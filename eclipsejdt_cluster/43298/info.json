{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3385a73328024633fb0b4040235c545c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ec353f90a133a400516ab286de2ebd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " public MethodBinding[] getMethods(char[] selector)", "diff": ["-\tint selectorLength = selector.length;", "-\tboolean methodsAreResolved = (tagBits & TagBits.AreMethodsComplete) != 0; // have resolved all arg types & return type of the methods", "-\tjava.util.ArrayList matchingMethods = null;", "-\tfor (int i = 0, length = methods.length; i < length; i++) {", "-\t\tMethodBinding method = methods[i];", "-\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\tif (!methodsAreResolved && resolveTypesFor(method) == null || method.returnType == null) {", "+\tif ((this.tagBits & TagBits.AreMethodsComplete) != 0) {", "+\t\tlong range;", "+\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\tint start = (int) range, end = (int) (range >> 32);", "+\t\t\tint length = end - start + 1;", "+\t\t\tMethodBinding[] result;", "+\t\t\tSystem.arraycopy(this.methods, start, result = new MethodBinding[length], 0, length);", "+\t\t\treturn result;", "+\t\t} else {", "+\t\t\treturn Binding.NO_METHODS;\t\t\t", "+\t\t}", "+\t}", "+\t// lazily sort methods", "+\tif ((this.tagBits & TagBits.AreMethodsSorted) == 0) {", "+\t\tint length = this.methods.length;", "+\t\tif (length > 1) \tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreMethodsSorted;", "+\t}", "+\tMethodBinding[] result;\t", "+\tlong range;", "+\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\tint start = (int) range, end = (int) (range >> 32);", "+\t\tfor (int i = start; i <= end; i++) {", "+\t\t\tMethodBinding method = this.methods[i];", "+\t\t\tif (resolveTypesFor(method) == null || method.returnType == null) {", "-\t\t\tif (matchingMethods == null)", "-\t\t\t\tmatchingMethods = new java.util.ArrayList(2);", "-\t\t\tmatchingMethods.add(method);", "-\t}", "-\tif (matchingMethods == null)", "+\t\tint length = end - start + 1;", "+\t\tSystem.arraycopy(this.methods, start, result = new MethodBinding[length], 0, length);", "+\t} else {", "-", "-\tMethodBinding[] result = new MethodBinding[matchingMethods.size()];", "-\tmatchingMethods.toArray(result);", "-\tif (!methodsAreResolved) {", "-\t\tboolean isSource15 = this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "-\t\tfor (int i = 0, length = result.length - 1; i < length; i++) {", "-\t\t\tMethodBinding method = result[i];", "-\t\t\tfor (int j = length; j > i; j--) {", "-\t\t\t\tboolean paramsMatch = isSource15", "-\t\t\t\t\t? method.areParameterErasuresEqual(result[j])", "-\t\t\t\t\t: method.areParametersEqual(result[j]);", "-\t\t\t\tif (paramsMatch) {", "-\t\t\t\t\tmethods();", "-\t\t\t\t\treturn getMethods(selector); // try again since the duplicate methods have been removed", "-\t\t\t\t}", "+\t}", "+\tboolean isSource15 = this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "+\tfor (int i = 0, length = result.length - 1; i < length; i++) {", "+\t\tMethodBinding method = result[i];", "+\t\tfor (int j = length; j > i; j--) {", "+\t\t\tboolean paramsMatch = isSource15", "+\t\t\t\t? method.areParameterErasuresEqual(result[j])", "+\t\t\t\t: method.areParametersEqual(result[j]);", "+\t\t\tif (paramsMatch) {", "+\t\t\t\tmethods();", "+\t\t\t\treturn getMethods(selector); // try again since the duplicate methods have been removed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b524096589fe6232880de034771f0e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " public MethodBinding[] getMethods(char[] selector)", "diff": ["-\tint count = 0;", "-\tint lastIndex = -1;", "-\tint selectorLength = selector.length;", "-\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\tMethodBinding method = methods[m];", "-\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\tresolveTypesFor(method);", "-\t\t\tcount++;", "-\t\t\tlastIndex = m;", "+\tif ((this.tagBits & TagBits.AreMethodsComplete) != 0) {", "+\t\tlong range;", "+\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\tint start = (int) range, end = (int) (range >> 32);", "+\t\t\tint length = end - start + 1;", "+\t\t\tif ((this.tagBits & TagBits.AreMethodsComplete) != 0) {", "+\t\t\t\t// simply clone method subset", "+\t\t\t\tMethodBinding[] result;\t\t\t\t", "+\t\t\t\tSystem.arraycopy(this.methods, start, result = new MethodBinding[length], 0, length);", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\treturn Binding.NO_METHODS;", "-\tif (count == 1)", "-\t\treturn new MethodBinding[] {methods[lastIndex]};", "-\tif (count > 0) {", "-\t\tMethodBinding[] result = new MethodBinding[count];", "-\t\tcount = 0;", "-\t\tfor (int m = 0; m <= lastIndex; m++) {", "-\t\t\tMethodBinding method = methods[m];", "-\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector))", "-\t\t\t\tresult[count++] = method;", "+\t// lazily sort methods", "+\tif ((this.tagBits & TagBits.AreMethodsSorted) == 0) {", "+\t\tint length = this.methods.length;", "+\t\tif (length > 1) \tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreMethodsSorted;", "+\t}\t", "+\tlong range;", "+\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\tint start = (int) range, end = (int) (range >> 32);", "+\t\tint length = end - start + 1;", "+\t\tMethodBinding[] result = new MethodBinding[length];", "+\t\t// iterate methods to resolve them", "+\t\tfor (int i = start, index = 0; i <= end; i++, index++) {\t", "+\t\t\tresolveTypesFor(result[index] = methods[i]);"]}], "num": 43298}
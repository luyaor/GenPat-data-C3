{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa579cd2f1f0f49acc590e324cb47e59", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03babc343ec8a6ae31f97f472e6631e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d6269129563f98355327b1ab05b64efc1651a96c", "commitAfterChange": "3a42960d70f16619a40a10161fc61740ab2695a4", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tsourceEnd = returnType.sourceEnd;", "+\t\tif (returnType instanceof ParameterizedSingleTypeReference) {", "+\t\t\tParameterizedSingleTypeReference typeReference = (ParameterizedSingleTypeReference) returnType;", "+\t\t\tTypeReference[] typeArguments = typeReference.typeArguments;", "+\t\t\tif (typeArguments[typeArguments.length - 1].sourceEnd > typeReference.sourceEnd) {", "+\t\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t\t} else {", "+\t\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t\t}", "+\t\t} else if (returnType instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference typeReference = (ParameterizedQualifiedTypeReference) returnType;", "+\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t} else {", "+\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298347c5bc0bbbcbb8dc5186afd623ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "335495c4b7ade5813b8838c341ffd66ce851b44c", "commitAfterChange": "c374466b639cefc117e60812e1d9f16701d104ca", "methodNumberBeforeChange": 374, "methodNumberAfterChange": 376, "signatureBeforeChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "signatureAfterChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "diff": ["+\tint sourceStart = reference.sourceStart;", "+\tint sourceEnd = reference.sourceEnd;", "+\tif (reference instanceof SingleNameReference) {", "+\t\tint numberOfParens = (reference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens != 0) {", "+\t\t\tsourceStart = retrieveStartingPositionAfterOpeningParenthesis(sourceStart, sourceEnd, numberOfParens);", "+\t\t\tsourceEnd = retrieveEndingPositionAfterOpeningParenthesis(sourceStart, sourceEnd, numberOfParens);", "+\t\t} else {", "+\t\t\tsourceStart = nodeSourceStart(field, reference);", "+\t\t\tsourceEnd = nodeSourceEnd(field, reference);", "+\t\t}", "+\t} else {", "+\t\tsourceStart = nodeSourceStart(field, reference);", "+\t\tsourceEnd = nodeSourceEnd(field, reference);", "+\t}", "-\t\tnodeSourceStart(field, reference),", "-\t\tnodeSourceEnd(field, reference));", "+\t\tsourceStart,", "+\t\tsourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "702beaed6da340aba89d81fa0276aff7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\tif (currentMethod.declaringClass.isInterface() ", "+\tfinal ReferenceBinding declaringClass = currentMethod.declaringClass;", "+\tif (declaringClass.isInterface() ", "+\tAbstractMethodDeclaration method = currentMethod.sourceMethod();", "+\tint sourceStart = 0;", "+\tint sourceEnd = 0;", "+\tif (method == null) {", "+\t\tif (declaringClass instanceof SourceTypeBinding) {", "+\t\t\tSourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringClass;", "+\t\t\tsourceStart = sourceTypeBinding.sourceStart();", "+\t\t\tsourceEnd = sourceTypeBinding.sourceEnd();", "+\t\t}", "+\t} else if (method.isConstructor()){", "+\t\tsourceStart = method.sourceStart;", "+\t\tsourceEnd = method.sourceEnd;", "+\t} else {", "+\t\tTypeReference returnType = ((MethodDeclaration) method).returnType;", "+\t\tsourceStart = returnType.sourceStart;", "+\t\tsourceEnd = returnType.sourceEnd;", "+\t}", "-\t\tcurrentMethod.sourceStart(),", "-\t\tcurrentMethod.sourceEnd());", "+\t\tsourceStart,", "+\t\tsourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d85169f9ab514c95135ed7bb813fe78c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "474372dbf9d38a254203e2d757bca92077ca8cab", "commitAfterChange": "3f8a2a5b580ed62b2fa1d860943fc7e800d835b5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["-\t\t\tif (reference instanceof JavadocSingleTypeReference) {", "-\t\t\t\tJavadocSingleTypeReference singleRef = (JavadocSingleTypeReference) reference;", "-\t\t\t\tthis.requestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "-\t\t\t} else if (reference instanceof JavadocQualifiedTypeReference) {", "-\t\t\t\tJavadocQualifiedTypeReference qualifiedRef = (JavadocQualifiedTypeReference) reference;", "-\t\t\t\tthis.requestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "-\t\t\t} else if (reference instanceof JavadocFieldReference) {", "+\t\t\tacceptJavadocTypeReference(reference);", "+\t\t\tif (reference instanceof JavadocFieldReference) {", "+\t\t\t\tacceptJavadocTypeReference(fieldRef.receiver);", "+\t\t\t\tacceptJavadocTypeReference(messageSend.receiver);", "+\t\t\t\tacceptJavadocTypeReference(constructor.type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e497f7ff87b27c80d9ec64fbb006866f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["+\t\t\t\tif (fieldRef.receiver instanceof TypeReference) {", "+\t\t\t\t\tTypeReference typeRef = (TypeReference) fieldRef.receiver;", "+\t\t\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t\t\t}", "+\t\t\t\tif (messageSend.receiver instanceof TypeReference) {", "+\t\t\t\t\tTypeReference typeRef = (TypeReference) messageSend.receiver;", "+\t\t\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t\t\t}", "+\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\tpatternLocator.match(constructor, nodeSet);", "+\t\t\t\tif (constructor.type != null) {", "+\t\t\t\t\tpatternLocator.match(constructor.type, nodeSet);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7ea8270fa337b97f34c951f3ff55fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "78e8a5c1a2e383b6d515ba3aab0d674e5548befa", "commitAfterChange": "4cb6b481d6e3c4ba44985d7b9c454fbe1bc42a7d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tITypeBinding resolveType(Type type)", "signatureAfterChange": "\r \tITypeBinding resolveType(Type type)", "diff": ["-\t\tTypeReference typeReference = (TypeReference) this.newAstToOldAst.get(type);\r", "-\t\tif (typeReference == null) {\r", "-\t\t\treturn super.resolveType(type);\r", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\tif (node != null) {\r", "+\t\t\tif (node instanceof TypeReference) {\r", "+\t\t\t\tTypeReference typeReference = (TypeReference) node;\r", "+\t\t\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\t\t} else if (node instanceof SingleNameReference) {\r", "+\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "+\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// it should be a type reference\r", "+\t\t\t\t\treturn null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\treturn null;\r"]}], "num": 51459}
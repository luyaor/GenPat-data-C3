{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f944117cb603188eb34286f6fcf88aed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b4d87f6855d16a2e9d9f5cdcf5dbb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testBug79803() throws CoreException", "signatureAfterChange": " \tpublic void testBug79803() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b79803/A.java\",", "-\t\t\t\t\"package b79803;\\n\" + ", "-\t\t\t\t\"class A<A> {\\n\" + ", "-\t\t\t\t\"    A a;\\n\" + ", "-\t\t\t\t\"    b79803.A pa= new b79803.A();\\n\" + ", "-\t\t\t\t\"}\\n\"\t);", "-\t\t\t// search for first and second method should both return 2 inaccurate matches", "-\t\t\tIType type = workingCopy.getType(\"A\");", "-\t\t\tsearch(type,", "-\t\t\t\tREFERENCES,", "-\t\t\t\tSearchPattern.R_CASE_SENSITIVE|SearchPattern.R_ERASURE_MATCH,", "-\t\t\t\tgetJavaSearchScopeBugs(\"b79803\", false),", "-\t\t\t\tthis.resultCollector);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\"", "-\t\t\t);", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[1];", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b79803/A.java\",", "+\t\t\t\"package b79803;\\n\" + ", "+\t\t\t\"class A<A> {\\n\" + ", "+\t\t\t\"    A a;\\n\" + ", "+\t\t\t\"    b79803.A pa= new b79803.A();\\n\" + ", "+\t\t\t\"}\\n\"\t);", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\tsearch(type, REFERENCES, ERASURE_RULE);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\"", "+\t\t);", "+\t\t// keep working copies for next test", "+\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be3d48c3cd9b4113cea88d19bd216fce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "0106f28c24dc45effaea6c15d2fd93b3b22539d8", "commitAfterChange": "b7cb1f5ede11fb6e27dd568ceeb96e4eba267c2f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-    \tString contents = _sw.toString();", "-        super.close();", "-        GeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager(_env.getProject());", "-        Phase phase = _env.getPhase();", "-\t", "-        if ( phase == Phase.RECONCILE )", "-        {", "-        \tICompilationUnit parentCompilationUnit = _env.getCompilationUnit();", "-            FileGenerationResult result  = gfm.generateFileDuringReconcile( ", "-                parentCompilationUnit, _typeName, contents, parentCompilationUnit.getOwner(), null, null );", "-\t\t\tif ( result != null )", "-\t\t\t\t_env.addGeneratedFile(result.getFile(), result.isModified());", "-        }", "-        else if ( phase == Phase.BUILD)\t", "-        {", "-        \ttry {", "-\t\t\t\tFileGenerationResult result = gfm.generateFileDuringBuild( ", "+    \t", "+    \ttry {", "+\t    \tString contents = _sw.toString();", "+\t        super.close();", "+\t        GeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager(_env.getProject());", "+\t        Phase phase = _env.getPhase();", "+\t\t", "+\t        FileGenerationResult result = null;", "+\t        if ( phase == Phase.RECONCILE )", "+\t        {", "+\t        \tICompilationUnit parentCompilationUnit = _env.getCompilationUnit();", "+\t            result  = gfm.generateFileDuringReconcile( ", "+\t                parentCompilationUnit, _typeName, contents, parentCompilationUnit.getOwner(), null, null );", "+\t        }", "+\t        else if ( phase == Phase.BUILD)\t", "+\t        {", "+\t\t\t\tresult = gfm.generateFileDuringBuild( ", "-\t\t\t\tif( result != null ){\t\t", "-\t\t\t\t\t_env.addGeneratedFile( result.getFile(), result.isModified());", "-\t\t\t\t}", "-        \t}", "-        \tcatch (CoreException ce) {", "-        \t\tAptPlugin.log(ce, \"Failure generating file\"); //$NON-NLS-1$", "-        \t}", "-        }", "-        else", "-        {", "-            assert false : \"Unexpected phase value: \" + phase ; //$NON-NLS-1$", "-        }", "+\t        }", "+\t        else", "+\t        {", "+\t            throw new IllegalStateException( \"Unexpected phase value: \" + phase ); //$NON-NLS-1$", "+\t        }", "+\t        if (result != null) {", "+\t        \t_env.addGeneratedFile(result.getFile(), result.isModified());", "+\t        \tif (result.hasSourcepathChanged()) {", "+\t        \t\t_env.setSourcePathChanged(true);", "+\t        \t}", "+\t        }", "+    \t}", "+    \tcatch (CoreException ce) {", "+    \t\tAptPlugin.log(ce, \"Unable to generate type when JavaSourceFilePrintWriter was closed\"); //$NON-NLS-1$", "+    \t}"]}], "num": 43221}
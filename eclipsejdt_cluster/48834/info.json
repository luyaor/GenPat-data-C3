{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd9a6535c84d5c0d61cacf1180b7acf6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325ae77f0d3bbdae63d3f780644de87e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "4ec8463782f86806757a76ab2d360d5012825932", "commitAfterChange": "f7bc2ee5d62baf64b6f044f322b40cdaa75e5dcc", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "\t \t \tpublic void testEnumDeclaration()", "signatureAfterChange": " \tpublic void testEnumDeclaration()", "diff": ["+\t */", "+\t\tassertTrue(x.enumConstants().size()== 0);", "+\t\tgenericPropertyListTest(x, x.enumConstants(),", "+\t\t\t\t  new Property(\"EnumConstants\", true, EnumConstantDeclaration.class) { //$NON-NLS-1$", "+\t\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\t\tEnumConstantDeclaration result = targetAst.newEnumConstantDeclaration();", "+\t\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\t\t// use fact that EnumConstantDeclaration is also a BodyDeclaration", "+\t\t\t\t\t\t\tTypeDeclaration d = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\t\td.bodyDeclarations().add(result);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn result;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\t\tEnumConstantDeclaration s1 = x.getAST().newEnumConstantDeclaration();", "+\t\t\t\t\t\ts1.bodyDeclarations().add(x);", "+\t\t\t\t\t\treturn s1;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\t\tEnumConstantDeclaration s1 = (EnumConstantDeclaration) x.getParent();", "+\t\t\t\t\t\ts1.bodyDeclarations().remove(x);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\t", "-\t\tx.bodyDeclarations().add(c1);", "-\t\tx.bodyDeclarations().add(c2);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "+\t\tx.enumConstants().add(c1);", "+\t\tx.enumConstants().add(c2);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(t1);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "+\t\tx.bodyDeclarations().add(t1);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tList es = Arrays.asList(x.getEnumConstants());", "-\t\tassertTrue(es.size() == 2);", "-\t\tassertTrue(es.contains(c1));", "-\t\tassertTrue(es.contains(c2));", "+\t\t// getEnumConstants() is deprecated - this test will be removed after 3.1M3", "+\t\tEnumConstantDeclaration[] cs = x.getEnumConstants();", "+\t\tassertTrue(cs.length == 2);", "+\t\tassertEquals(c1, cs[0]);", "+\t\tassertEquals(c2, cs[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9fcd28813f1c5894c6f971474fe146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "aa6aecd1e85bc088f78aefc939f3035d29fdf2f7", "commitAfterChange": "caead2c6488f232c99b522820aa80d0eed7f2116", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tpublic void testEnumConstantDeclaration2() throws Exception", "signatureAfterChange": "  \tpublic void testEnumConstantDeclaration2() throws Exception", "diff": ["-\t", "+", "-\t\t", "+", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(0);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(0);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(1);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(1);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(2);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(2);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(3);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(3);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(4);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(4);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(5);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(5);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(6);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(6);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(7);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(7);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(8);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(8);"]}], "num": 48834}
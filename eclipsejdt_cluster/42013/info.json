{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac013763ecd31378aaaf9d2685591de3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a4187f64899c46934a6c05812aa772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r \tpublic static Set<IFile> runAPTDuringBuild(\r \t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file,\r \t\t\tIJavaProject javaProj)", "signatureAfterChange": "  \tpublic static APTBuildResult runAPTDuringBuild( \t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file, \t\t\tIJavaProject javaProj)", "diff": ["-\r", "-\tpublic static Set<IFile> runAPTDuringBuild(\r", "-\t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file,\r", "-\t\t\tIJavaProject javaProj) {\r", "-\t\tProcessorEnvImpl processorEnv = ProcessorEnvImpl\r", "-\t\t\t\t.newProcessorEnvironmentForBuild( file, javaProj);\r", "-\t\treturn runAPT(factories, processorEnv);\r", "-\t}\r", "+", "+\tpublic static APTBuildResult runAPTDuringBuild(", "+\t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file,", "+\t\t\tIJavaProject javaProj) {", "+\t\t", "+\t\t//", "+\t\t//  bail-out early if there aren't factories.", "+\t\t// ", "+\t\tif ( factories == null || factories.size() == 0 )", "+\t\t\treturn EMPTY_BUILD_RESULT;", "+\t\t", "+\t\t//", "+\t\t// scan file for annotation instances, and bail early if none.", "+\t\t// do this before construction ProcessorEnvImpl to avoid ", "+\t\t// unnecessary creation of AST.", "+\t\t//", "+\t\tif ( ! hasAnnotationInstance( file ) )", "+\t\t\treturn EMPTY_BUILD_RESULT;", "+\t\t\t\t\t", "+\t\tProcessorEnvImpl processorEnv = ProcessorEnvImpl", "+\t\t\t\t.newProcessorEnvironmentForBuild( file, javaProj);", "+\t\tSet newFiles = runAPT(factories, processorEnv);", "+\t\tSet<String> newDependencies = processorEnv.getTypeDependencies();", "+\t\tAPTBuildResult result = new APTBuildResult( newFiles, newDependencies );", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9194b9171a73b76c5cfea78baeedd96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "6d2932a6aeb509ef1ad4876d04513e51cb902c43", "commitAfterChange": "97c5ba1e2ab0811616d91adfc749054394adc907", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final boolean deletedAll) throws CoreException", "signatureAfterChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final SimpleLookupTable duplicates) throws CoreException", "diff": ["-protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final boolean deletedAll) throws CoreException {", "+protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final SimpleLookupTable duplicates) throws CoreException {", "+\tfinal boolean deletedAll = duplicates != null;", "-\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIPath p = (IPath) duplicates.get(copiedResource.getFullPath());", "+\t\t\t\t\t\t\t\tString id = p.removeFirstSegments(1).toString();", "+\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\", id)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tif (deletedAll)", "+\t\t\t\t\t\t\tduplicates.put(copiedResource.getFullPath(), resource.getFullPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72f6db764c2fe18ed762a48df116dd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r void record(String location, char[][][] qualifiedRefs, char[][] simpleRefs, char[][] typeNames)", "signatureAfterChange": "\r \r void record(String location, char[][][] qualifiedRefs, char[][] simpleRefs, char[] mainTypeName, ArrayList typeNames)", "diff": ["-void record(String location, char[][][] qualifiedRefs, char[][] simpleRefs, char[][] typeNames) {\r", "-\treferences.put(location,\r", "-\t\t(typeNames != null && typeNames.length > 0)\r", "-\t\t\t? new AdditionalTypeCollection(typeNames, qualifiedRefs, simpleRefs)\r", "-\t\t\t: new ReferenceCollection(qualifiedRefs, simpleRefs));\r", "+void record(String location, char[][][] qualifiedRefs, char[][] simpleRefs, char[] mainTypeName, ArrayList typeNames) {\r", "+\tif (typeNames.size() == 1 && CharOperation.equals(mainTypeName, (char[]) typeNames.get(0))) {\r", "+\t\treferences.put(location, new ReferenceCollection(qualifiedRefs, simpleRefs));\r", "+\t} else {\r", "+\t\tchar[][] definedTypeNames = new char[typeNames.size()][];\r", "+\t\ttypeNames.toArray(definedTypeNames);\r", "+\t\treferences.put(location, new AdditionalTypeCollection(definedTypeNames, qualifiedRefs, simpleRefs));\r", "+\t}\r"]}], "num": 42013}
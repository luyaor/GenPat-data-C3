{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43aa14a387ec71e643527ee9b0ee1b79", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "018be990e50564bc7a28d2d6c01e20cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected int startBuild(Hashtable options) throws IOException, CoreException", "signatureAfterChange": " \tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException", "diff": ["-\tprotected int startBuild(Hashtable options) throws IOException, CoreException {", "+\tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException {", "+\t\t", "+\t\t// Clean memory", "+\t\trunGc();", "+\t\t", "+\t\t// Measure", "+\t\t", "+\t\t// Verify markers", "+\t\tList resources = new ArrayList();", "+\t\tList messages = new ArrayList();", "-\t\t\t\t\tassertTrue(\"Unexpected marker: \" + marker.getAttribute(IMarker.MESSAGE), false);", "+\t\t\t\t\tresources.add(marker.getResource().getName());", "+\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "+\t\t\t\t\tif (noWarning) {", "+\t\t\t\t\t\tresources.add(marker.getResource().getName());", "+\t\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "+\t\t\t\t\t}", "-\t\tif (DEBUG) System.out.println(\"done\");", "-\t\t{", "-\t\t\tcommitMeasurements();", "-\t\t\tassertPerformance();", "+\t\t", "+\t\t// Assert result", "+\t\tint size = messages.size();", "+\t\tif (size > 0) {", "+\t\t\t/*", "+\t\t\tif (LOG_DIR == null) {", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tint max = size > 10 ? 10 : size;", "+\t\t\t\tfor (int i=0; i<max; i++) {", "+\t\t\t\t\tbuffer.append(resources.get(i));", "+\t\t\t\t\tbuffer.append(\":\\n\\t\");", "+\t\t\t\t\tbuffer.append(messages.get(i));", "+\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tif (size > max)", "+\t\t\t\t\tbuffer.append(\"...\\n\");", "+\t\t\t\tassertTrue(\"Unexpected marker(s):\\n\" + buffer.toString(), size==0);", "+\t\t\t}", "+\t\t\t*/", "+//\t\t\tif (LOG_DIR != null || DEBUG) {", "+\t\t\t\tStringBuffer debugBuffer = new StringBuffer();", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tdebugBuffer.append(resources.get(i));", "+\t\t\t\t\tdebugBuffer.append(\":\\n\\t\");", "+\t\t\t\t\tdebugBuffer.append(messages.get(i));", "+\t\t\t\t\tdebugBuffer.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tSystem.out.println(\"ERROR: Unexpected marker(s):\\n\" + debugBuffer.toString());", "+//\t\t\t}", "-\t\treturn warnings;", "+\t\tif (DEBUG) System.out.println(\"done\");", "+\t\t", "+\t\t// Commit measure", "+\t\tcommitMeasurements();", "+\t\tassertPerformance();", "+", "+\t\t// Store warning", "+\t\tif (warnings>0) {", "+\t\t\tSystem.out.println(\"\\t- \"+warnings+\" warnings found while performing build.\");", "+\t\t}", "+\t\tif (this.scenarioComment == null) {", "+\t\t\tthis.scenarioComment = new StringBuffer(\"[\"+TEST_POSITION+\"]\");", "+\t\t} else {", "+\t\t\tthis.scenarioComment.append(' ');", "+\t\t}", "+\t\tthis.scenarioComment.append(\"warn=\");", "+\t\tthis.scenarioComment.append(warnings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb32f005f0cfbf3c51b9e9d79d963c9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException", "signatureAfterChange": " \tprotected void build(final IJavaProject javaProject, Hashtable options, boolean noWarning) throws IOException, CoreException", "diff": ["+\tprotected void build(final IJavaProject javaProject, Hashtable options, boolean noWarning) throws IOException, CoreException {", "+\t\tif (DEBUG) System.out.print(\"\\tstart build...\");", "+\t\tJavaCore.setOptions(options);", "+\t\tif (PRINT) System.out.println(\"Options: \"+options);", "+\t\t// Build workspace if no project", "+\t\tif (javaProject == null) {", "+\t\t\t// single measure", "+\t\t\trunGc();", "+\t\t\tENV.fullBuild();", "+\t\t} else {", "+\t\t\t// warm-up", "+\t\t\tENV.fullBuild(javaProject.getProject().getName());", "+\t\t\t", "+\t\t\t// measures", "+\t\t\tint max = MEASURES_COUNT / 2;", "+\t\t\tfor (int i=0; i<max; i++) {", "+\t\t\t\trunGc();", "+\t\t\t\tstartMeasuring();", "+\t\t\t\tIWorkspaceRunnable compilation = new IWorkspaceRunnable() {", "+\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\t\tENV.fullBuild(javaProject.getPath());", "+\t\t\t\t\t}", "+\t\t\t\t};", "+\t\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\t\tif (workspace.isTreeLocked()) {", "+\t\t\t\t\tcompilation.run(null/*no progress available*/);", "+\t\t\t\t} else {", "+\t\t\t\t\tworkspace.run(", "+\t\t\t\t\t\tcompilation,", "+\t\t\t\t\t\tnull/*don't take any lock*/,", "+\t\t\t\t\t\tIWorkspace.AVOID_UPDATE,", "+\t\t\t\t\t\tnull/*no progress available here*/);", "+\t\t\t\tstopMeasuring();", "+\t\t// Verify markers", "+\t\tIMarker[] markers = ResourcesPlugin.getWorkspace().getRoot().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "+\t\tList resources = new ArrayList();", "+\t\tList messages = new ArrayList();", "+\t\tint warnings = 0;", "+\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\tIMarker marker = markers[i];", "+\t\t\tswitch (((Integer) marker.getAttribute(IMarker.SEVERITY)).intValue()) {", "+\t\t\t\tcase IMarker.SEVERITY_ERROR:", "+\t\t\t\t\tresources.add(marker.getResource().getName());", "+\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IMarker.SEVERITY_WARNING:", "+\t\t\t\t\twarnings++;", "+\t\t\t\t\tif (noWarning) {", "+\t\t\t\t\t\tresources.add(marker.getResource().getName());", "+\t\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Assert result", "+\t\tint size = messages.size();", "+\t\tif (size > 0) {", "+\t\t\tStringBuffer debugBuffer = new StringBuffer();", "+\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\tdebugBuffer.append(resources.get(i));", "+\t\t\t\tdebugBuffer.append(\":\\n\\t\");", "+\t\t\t\tdebugBuffer.append(messages.get(i));", "+\t\t\t\tdebugBuffer.append('\\n');", "+\t\t\t}", "+\t\t\tSystem.out.println(this.scenarioShortName+\": Unexpected ERROR marker(s):\\n\" + debugBuffer.toString());", "+\t\t\tSystem.out.println(\"--------------------\");", "+\t\t}", "+\t\tif (DEBUG) System.out.println(\"done\");", "+\t\t", "+\t\t// Commit measure", "+\t", "+\t\t\tSystem.out.println(\"\\t- \"+warnings+\" warnings found while performing build.\");", "-\t */", "-\tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException {", "-\t\tif (DEBUG) System.out.print(\"\\tstart build...\");", "-\t\tJavaCore.setOptions(options);", "-\t\t", "-\t\t// Clean memory", "-\t\trunGc();", "-\t\t", "-\t\t// Measure", "-\t\tstartMeasuring();", "-\t\tENV.fullBuild();", "-\t\tstopMeasuring();", "-\t\t", "-\t\t// Verify markers", "-\t\tIMarker[] markers = ResourcesPlugin.getWorkspace().getRoot().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "-\t\tList resources = new ArrayList();", "-\t\tList messages = new ArrayList();", "-\t\tint warnings = 0;", "-\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "-\t\t\tIMarker marker = markers[i];", "-\t\t\tswitch (((Integer) marker.getAttribute(IMarker.SEVERITY)).intValue()) {", "-\t\t\t\tcase IMarker.SEVERITY_ERROR:", "-\t\t\t\t\tresources.add(marker.getResource().getName());", "-\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IMarker.SEVERITY_WARNING:", "-\t\t\t\t\twarnings++;", "-\t\t\t\t\tif (noWarning) {", "-\t\t\t\t\t\tresources.add(marker.getResource().getName());", "-\t\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// Assert result", "-\t\tint size = messages.size();", "-\t\tif (size > 0) {", "-\t\t\tStringBuffer debugBuffer = new StringBuffer();", "-\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\tdebugBuffer.append(resources.get(i));", "-\t\t\t\tdebugBuffer.append(\":\\n\\t\");", "-\t\t\t\tdebugBuffer.append(messages.get(i));", "-\t\t\t\tdebugBuffer.append('\\n');", "-\t\t\t}", "-\t\t\tSystem.out.println(this.scenarioShortName+\": Unexpected ERROR marker(s):\\n\" + debugBuffer.toString());", "-\t\t\tSystem.out.println(\"--------------------\");", "-\t\t}", "-\t\tif (DEBUG) System.out.println(\"done\");", "-\t\t", "-\t\t// Commit measure", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-", "-\t\t// Store warning", "-\t\tif (warnings>0) {", "-\t\t\tSystem.out.println(\"\\t- \"+warnings+\" warnings found while performing build.\");", "-\t\t}", "-\t\tif (this.scenarioComment == null) {", "-\t\t\tthis.scenarioComment = new StringBuffer(\"[\"+TEST_POSITION+\"]\");", "-\t\t} else {", "-\t\t\tthis.scenarioComment.append(' ');", "-\t\t}", "-\t\tthis.scenarioComment.append(\"warn=\");", "-\t\tthis.scenarioComment.append(warnings);"]}], "num": 14397}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76f7ce25c9eab2fb0ff769b366df1d4d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6782945fef330b7a59768d500cc283f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "18811c004d543a3728cc5dfc4e05503a79b434ee", "commitAfterChange": "96cbe57b16442df110d3b0ecde11c12b456820b8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "diff": ["-\tif (((bits & DepthMASK) != 0) \r", "-\t\t|| currentScope.enclosingSourceType() != binding.declaringClass){ // implicit only have a depth set\r", "-\r", "-\t\tif (binding.isPrivate()){ // private access \r", "+\tif (binding.isPrivate()){\r", "+\t\t\r", "+\t\tif (((bits & DepthMASK) != 0) \r", "+\t\t\t|| currentScope.enclosingSourceType() != binding.declaringClass){\r", "+\t\t\r", "-\t\t\treturn;\r", "+\t\t}\r", "-\t\t} else if (receiver == ThisReference.ThisImplicit  \r", "-\t\t\t&& binding.isProtected()\r", "-\t\t\t&& (bits & DepthMASK) != 0 // only if outer access\t\t\t\r", "-\t\t\t&& binding.declaringClass.getPackage() \r", "-\t\t\t\t!= currentScope.enclosingSourceType().getPackage()){ // protected access (implicit access only)\r", "-\t\t\tsyntheticAccessor = ((SourceTypeBinding)currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).addSyntheticMethod(binding);\r", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);\r", "+\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super\r", "-\t\t} else if (receiver instanceof QualifiedThisReference){ // qualified this\r", "-\t\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedThisReference)receiver).currentCompatibleType);\r", "-\t\t\tsyntheticAccessor = destinationType.addSyntheticMethod(binding);\r", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);\r", "+\t\t// need emulation always\r", "+\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);\r", "+\t\tsyntheticAccessor = destinationType.addSyntheticMethod(binding);\r", "+\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);\r", "-\t\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super\r", "-\t\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);\r", "-\t\t\tsyntheticAccessor = destinationType.addSyntheticMethod(binding);\r", "+\t} else if (binding.isProtected()){\r", "+\r", "+\t\tSourceTypeBinding enclosingSourceType;\r", "+\t\tif (((bits & DepthMASK) != 0) \r", "+\t\t\t\t&& binding.declaringClass.getPackage() \r", "+\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()){\r", "+\r", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);\r", "+\t\t\tsyntheticAccessor = currentCompatibleType.addSyntheticMethod(binding);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f644297378d9186b45ca880e24522312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "commitAfterChange": "44363e0012bf09a8a44565479ae5740426ed378a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0) return;", "-\t\tif (this.binding == null || !this.binding.isValidBinding()) return;", "+\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0 || this.binding == null || !this.binding.isValidBinding()) ", "+\t\t\treturn;", "+\t\t", "+\t\tMethodBinding codegenBinding = this.binding.original();", "+\t\tSourceTypeBinding enclosingSourceType = currentScope.enclosingSourceType();", "-\t\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "-\t\t\tMethodBinding codegenBinding = this.binding.original();", "-", "-\t\t\tif (codegenBinding.isPrivate() && currentScope.enclosingSourceType() != (allocatedType = codegenBinding.declaringClass)) {", "+\t\t\tif (codegenBinding.isPrivate() && enclosingSourceType != (allocatedType = codegenBinding.declaringClass)) {", "+\t\t\treturn;", "+\t\t}", "+\t", "+\t\t// -----------------------------------   Only method references from now on -----------", "+\t\tif (this.binding.isPrivate()) {", "+\t\t\tif (enclosingSourceType != codegenBinding.declaringClass){", "+\t\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)codegenBinding.declaringClass).addSyntheticMethod(codegenBinding, false /* not super access */);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (this.lhs.isSuper()) {", "+\t\t\tSourceTypeBinding destinationType = enclosingSourceType;", "+\t\t\tif (this.lhs instanceof QualifiedSuperReference) { \t// qualified super", "+\t\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) this.lhs;", "+\t\t\t\tTypeReference qualification = qualifiedSuperReference.qualification;", "+\t\t\t\tif (!qualification.resolvedType.isInterface()) // we can't drop the bridge in I, it may not even be a source type.", "+\t\t\t\t\tdestinationType = (SourceTypeBinding) (qualifiedSuperReference.currentCompatibleType);", "+\t\t\t}", "+\t\t\t", "+\t\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(codegenBinding, true);", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (this.binding.isProtected() && (this.bits & ASTNode.DepthMASK) != 0 && codegenBinding.declaringClass.getPackage() != enclosingSourceType.getPackage()) {", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding) enclosingSourceType.enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);", "+\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "+\t\t\treturn;"]}], "num": 64143}
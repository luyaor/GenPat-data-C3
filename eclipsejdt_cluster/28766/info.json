{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc5b5cb9c01102e67b27b6bbb8deda3a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0b0ff00d01075a3693dd63bcbf10369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "fdf8a7c625823b4365f60e2b73aad682cd437b32", "commitAfterChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\tStringTokenizer tokenizer = new StringTokenizer(patternString, \" .(,)\", true); //$NON-NLS-1$\r", "+\tScanner scanner = new Scanner(false, true); // tokenize white spaces\r", "+\tscanner.setSourceBuffer(patternString.toCharArray());\r", "-\tString lastToken = null;\r", "+\tint lastToken = -1;\r", "-\twhile (tokenizer.hasMoreTokens()){\r", "-\t\tString token = tokenizer.nextToken();\r", "+\tint token;\r", "+\ttry {\r", "+\t\ttoken = scanner.getNextToken();\r", "+\t} catch (InvalidInputException e) {\r", "+\t\treturn null;\r", "+\t}\r", "+\twhile (token != TerminalSymbols.TokenNameEOF){\r", "-\t\t\t\tif (token.equals(\".\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (declaringType == null){\r", "-\t\t\t\t\t\tif (selector == null) return null;\r", "-\t\t\t\t\t\tdeclaringType = selector;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdeclaringType += token + selector;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tselector = null;\r", "-\t\t\t\t} else if (token.equals(\"(\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tparameterTypes = new String[5];\r", "-\t\t\t\t\tparameterCount = 0;\r", "-\t\t\t\t\tmode = InsideParameter;\r", "-\t\t\t\t} else if (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (!(\" \".equals(lastToken) || \".\".equals(lastToken))){ //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t\t\tmode = InsideReturnType;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else { // name\r", "-\t\t\t\t\tif (selector != null) return null;\r", "-\t\t\t\t\tselector = token;\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\t\tif (declaringType == null){\r", "+\t\t\t\t\t\t\tif (selector == null) return null;\r", "+\t\t\t\t\t\t\tdeclaringType = selector;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t\tdeclaringType += tokenSource + selector;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tselector = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLPAREN:\r", "+\t\t\t\t\t\tparameterTypes = new String[5];\r", "+\t\t\t\t\t\tparameterCount = 0;\r", "+\t\t\t\t\t\tmode = InsideParameter;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tif (!(Scanner.TokenNameWHITESPACE == lastToken \r", "+\t\t\t\t\t\t\t|| TerminalSymbols.TokenNameDOT == lastToken)){\r", "+\t\t\t\t\t\t\tmode = InsideReturnType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\t\tif (selector == null) {\r", "+\t\t\t\t\t\t\tselector = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tselector += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t} else if (token.equals(\",\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "-\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "-\t\t\t\t\tparameterType = null;\r", "-\t\t\t\t} else if (token.equals (\")\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tfoundClosingParenthesis = true;\r", "-\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameCOMMA:\r", "+\t\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tmode = InsideReturnType;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tif (parameterType == null){\r", "-\t\t\t\t\t\tparameterType = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\tparameterType += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\t\tparameterType = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRPAREN:\r", "+\t\t\t\t\t\tfoundClosingParenthesis = true;\r", "+\t\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tmode = InsideReturnType;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (parameterType == null){\r", "+\t\t\t\t\t\t\tparameterType = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tparameterType += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (!token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (returnType == null){\r", "-\t\t\t\t\t\treturnType = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token)))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\treturnType += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (returnType == null){\r", "+\t\t\t\t\t\t\treturnType = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\treturnType += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "+\t\t\t\tbreak;\r", "+\t\ttry {\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ad9bd81dcb95248f0cf9976434f4b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "fdf8a7c625823b4365f60e2b73aad682cd437b32", "commitAfterChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\tStringTokenizer tokenizer = new StringTokenizer(patternString, \" .(,)\", true); //$NON-NLS-1$\r", "+\tScanner scanner = new Scanner(false, true); // tokenize white spaces\r", "+\tscanner.setSourceBuffer(patternString.toCharArray());\r", "-\tString lastToken = null;\r", "+\tint lastToken = -1;\r", "-\tString declaringType = null, fieldName = null, parameterType = null;\r", "+\tString declaringType = null, fieldName = null;\r", "-\twhile (tokenizer.hasMoreTokens()){\r", "-\t\tString token = tokenizer.nextToken();\r", "+\tint token;\r", "+\ttry {\r", "+\t\ttoken = scanner.getNextToken();\r", "+\t} catch (InvalidInputException e) {\r", "+\t\treturn null;\r", "+\t}\r", "+\twhile (token != TerminalSymbols.TokenNameEOF){\r", "-\t\t\t\tif (token.equals(\".\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (declaringType == null){\r", "-\t\t\t\t\t\tif (fieldName == null) return null;\r", "-\t\t\t\t\t\tdeclaringType = fieldName;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdeclaringType += token + fieldName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tfieldName = null;\r", "-\t\t\t\t} else if (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (!(\" \".equals(lastToken) || \".\".equals(lastToken))){ //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t\t\tmode = InsideType;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else { // name\r", "-\t\t\t\t\tif (fieldName != null) return null;\r", "-\t\t\t\t\tfieldName = token;\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\t\tif (declaringType == null){\r", "+\t\t\t\t\t\t\tif (fieldName == null) return null;\r", "+\t\t\t\t\t\t\tdeclaringType = fieldName;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t\tdeclaringType += tokenSource + fieldName;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tfieldName = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tif (!(Scanner.TokenNameWHITESPACE == lastToken \r", "+\t\t\t\t\t\t\t|| TerminalSymbols.TokenNameDOT == lastToken)){\r", "+\t\t\t\t\t\t\tmode = InsideType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\t\tif (fieldName == null) {\r", "+\t\t\t\t\t\t\tfieldName = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tfieldName += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (!token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (type == null){\r", "-\t\t\t\t\t\ttype = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token)))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\ttype += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (type == null){\r", "+\t\t\t\t\t\t\ttype = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\ttype += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "+\t\t\t\tbreak;\r", "+\t\ttry {\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5551131861a7112b533e4eb9aac318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "fdf8a7c625823b4365f60e2b73aad682cd437b32", "commitAfterChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private static SearchPattern createConstructorPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createConstructorPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\tStringTokenizer tokenizer = new StringTokenizer(patternString, \" .(,)\", true); //$NON-NLS-1$\r", "+\tScanner scanner = new Scanner(false, true); // tokenize white spaces\r", "+\tscanner.setSourceBuffer(patternString.toCharArray());\r", "-\tString lastToken = null;\r", "-\twhile (tokenizer.hasMoreTokens()){\r", "-\t\tString token = tokenizer.nextToken();\r", "+\tint token;\r", "+\ttry {\r", "+\t\ttoken = scanner.getNextToken();\r", "+\t} catch (InvalidInputException e) {\r", "+\t\treturn null;\r", "+\t}\r", "+\twhile (token != TerminalSymbols.TokenNameEOF){\r", "-\t\t\t\tif (token.equals(\".\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (declaringQualification == null){\r", "-\t\t\t\t\t\tif (typeName == null) return null;\r", "-\t\t\t\t\t\tdeclaringQualification = typeName;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdeclaringQualification += token + typeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttypeName = null;\r", "-\t\t\t\t} else if (token.equals(\"(\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tparameterTypes = new String[5];\r", "-\t\t\t\t\tparameterCount = 0;\r", "-\t\t\t\t\tmode = InsideParameter;\r", "-\t\t\t\t} else if (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (!(\" \".equals(lastToken) || \".\".equals(lastToken))){ //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\t\tif (declaringQualification == null){\r", "+\t\t\t\t\t\t\tif (typeName == null) return null;\r", "+\t\t\t\t\t\t\tdeclaringQualification = typeName;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t\tdeclaringQualification += tokenSource + typeName;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\ttypeName = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else { // name\r", "-\t\t\t\t\tif (typeName != null) return null;\r", "-\t\t\t\t\ttypeName = token;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLPAREN:\r", "+\t\t\t\t\t\tparameterTypes = new String[5];\r", "+\t\t\t\t\t\tparameterCount = 0;\r", "+\t\t\t\t\t\tmode = InsideParameter;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\t\tif (typeName == null) {\r", "+\t\t\t\t\t\t\ttypeName = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\ttypeName += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t} else if (token.equals(\",\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "-\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "-\t\t\t\t\tparameterType = null;\r", "-\t\t\t\t} else if (token.equals (\")\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tfoundClosingParenthesis = true;\r", "-\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameCOMMA:\r", "+\t\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tif (parameterType == null){\r", "-\t\t\t\t\t\tparameterType = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\tparameterType += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\t\tparameterType = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRPAREN:\r", "+\t\t\t\t\t\tfoundClosingParenthesis = true;\r", "+\t\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (parameterType == null){\r", "+\t\t\t\t\t\t\tparameterType = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tparameterType += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\tlastToken = token;\r", "+\t\ttry {\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}], "num": 28766}
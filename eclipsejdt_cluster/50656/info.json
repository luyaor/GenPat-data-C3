{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fa3aafd98cc5bb663b21f44ea877781", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04aa633352967d12ab3f6eea5f139b59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "0a52fc66fb4db2fd9981d577d974e91228093601", "commitAfterChange": "76d395ddd90431ef7cb4486078cb51e978a5ad63", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "diff": ["+\t\t\t\tif (htmlPtr >= 0) {", "+\t\t    \t\tint lastHtmlTagIndex = getHtmlTagIndex(this.htmlTags[htmlPtr]);", "+\t\t\t\t\tif ((lastHtmlTagIndex & JAVADOC_TAGS_ID_MASK) == JAVADOC_IMMUTABLE_TAGS_ID) {", "+\t\t\t\t\t\t// Do not accept tags inside immutable tags except the <pre> tag", "+\t\t\t\t\t\tif ((htmlIndex & JAVADOC_TAGS_ID_MASK) == JAVADOC_CODE_TAGS_ID) {", "+\t\t\t\t\t\t\tFormatJavadocBlock previousBlock = (FormatJavadocBlock) this.astStack[this.astPtr];", "+\t\t\t\t\t\t\tFormatJavadocNode parentNode = previousBlock;", "+\t\t\t\t\t\t\tFormatJavadocNode lastNode = parentNode;", "+\t\t\t\t\t\t\twhile (lastNode.getLastNode() != null) {", "+\t\t\t\t\t\t\t\tparentNode = lastNode;", "+\t\t\t\t\t\t\t\tlastNode = lastNode.getLastNode();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (lastNode.isText()) {", "+\t\t\t\t\t\t\t\tFormatJavadocText text = (FormatJavadocText) lastNode;", "+\t\t\t\t\t\t\t\tif (text.separatorsPtr == -1) {", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t    \t\t\treturn false;", "+\t\t\t\t\t}", "+\t    \t\t}", "+", "+\t    // Push texts"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab139e0761affcdc7402f54d89c5bfac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "db331d5badcb0b35069c87387ccad89f9c226a52", "commitAfterChange": "30b862416cba759ca39b029e0f535018291e11dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject)", "signatureAfterChange": " private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, char[][] focusQualifiedName)", "diff": ["-private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject) {", "+private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, char[][] focusQualifiedName) {", "-\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && entry.getPath().equals(focusPath))", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && entry.getPath().equals(focusPath)) {", "+\t\t\t\tif (focusQualifiedName != null) { // builder state is usable, hence use it to try to reduce project which can see the focus...", "+\t\t\t\t\tState projectState = (State) JavaModelManager.getJavaModelManager().getLastBuiltState(javaProject.getProject(), null);", "+\t\t\t\t\tif (projectState != null) {", "+\t\t\t\t\t\tObject[] values = projectState.getReferences().valueTable;", "+\t\t\t\t\t\tint vLength = values.length;", "+\t\t\t\t\t\tfor (int j=0; j<vLength; j++)  {", "+\t\t\t\t\t\t\tif (values[j] == null) continue;", "+\t\t\t\t\t\t\tReferenceCollection references = (ReferenceCollection) values[j];", "+\t\t\t\t\t\t\tif (references.includes(focusQualifiedName)) {", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 50656}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2906099a114a6b60ff9168c62ed6adf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b1f5992e7f148ec7065f0ef61ec0533", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuilderTests.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void expectingProblemsFor(IPath[] expected)", "signatureAfterChange": " \tprotected void expectingProblemsFor(IPath[] roots, String expected)", "diff": ["-\tprotected void expectingProblemsFor(IPath[] expected) {", "-\t\tif (DEBUG)", "-\t\t\tprintProblemsFor(expected);", "-", "-\t\tfor (int i = 0; i < expected.length; i++) {", "-\t\t\t/* get the leaf problems for this type */", "-\t\t\tProblem[] problems = env.getProblemsFor(expected[i]);", "-\t\t\tassertTrue(\"missing expected problem with \" + expected[i].toString(), problems.length > 0); //$NON-NLS-1$", "+\tprotected void expectingProblemsFor(IPath[] roots, String expected) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tProblem[] allProblems = allSortedProblems(roots);", "+\t\tif (allProblems != null) {", "+\t\t\tfor (int i=0, length=allProblems.length; i<length; i++) {", "+\t\t\t\tif (i>0) buffer.append('\\n');", "+\t\t\t\tbuffer.append(allProblems[i]);", "+\t\t\t}", "+\t\tString actual = buffer.toString();", "+\t\tassumeEquals(\"Invalid problem(s)!!!\", expected, actual); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4970fb384d63c56dc659a3a9103cd4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuilderTests.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected void expectingNoProblemsFor(IPath[] roots)", "signatureAfterChange": " \tprotected void expectingNoProblemsFor(IPath[] roots)", "diff": ["-\t\tif (DEBUG)", "-\t\t\tprintProblemsFor(roots);", "-", "-\t\tfor (int i = 0; i < roots.length; i++) {", "-\t\t\tProblem[] problems = env.getProblemsFor(roots[i]);", "-\t\t\tif (problems.length != 0)", "-\t\t\t\tassertTrue(\"unexpected problem(s) : \" + problems[0], false); //$NON-NLS-1$", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tProblem[] allProblems = allSortedProblems(roots);", "+\t\tif (allProblems != null) {", "+\t\t\tfor (int i=0, length=allProblems.length; i<length; i++) {", "+\t\t\t\tbuffer.append(allProblems[i]+\"\\n\");", "+\t\t\t}", "+\t\tString actual = buffer.toString();", "+\t\tassumeEquals(\"Unexpected problem(s)!!!\", \"\", actual); //$NON-NLS-1$"]}], "num": 805}
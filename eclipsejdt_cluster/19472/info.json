{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b6dd4f93e51b35d75c1238e147e7b58", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40af21fb8a6c2c3025be01b88df50d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tboolean isStatic = codegenBinding.isStatic();", "+\tboolean isStatic = this.codegenBinding.isStatic();", "-\t\t\tcodeStream.invokestatic(codegenBinding);", "+\t\t\tcodeStream.invokestatic(this.codegenBinding);", "-\t\t\tif( (receiver.isSuper()) || codegenBinding.isPrivate()){", "-\t\t\t\tcodeStream.invokespecial(codegenBinding);", "+\t\t\tif( (receiver.isSuper()) || this.codegenBinding.isPrivate()){", "+\t\t\t\tcodeStream.invokespecial(this.codegenBinding);", "-\t\t\t\tif (codegenBinding.declaringClass.isInterface()){", "-\t\t\t\t\tcodeStream.invokeinterface(codegenBinding);", "+\t\t\t\tif (this.codegenBinding.declaringClass.isInterface()){", "+\t\t\t\t\tcodeStream.invokeinterface(this.codegenBinding);", "-\t\t\t\t\tcodeStream.invokevirtual(codegenBinding);", "+\t\t\t\t\tcodeStream.invokevirtual(this.codegenBinding);", "+\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d337d8adf505b7b3718bec32be30eb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\tif (!this.hasBeenResolved && binding != null && this.binding.isValidBinding()) {", "+\t\tif (!this.hasBeenResolved && this.binding != null && this.binding.isValidBinding()) {", "-\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, name, this, true /*resolve*/);", "+\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this, true /*resolve*/);", "-\t\t\t\t\tBinding existingVariable = outerScope.getBinding(name, BindingIds.VARIABLE, this, false /*do not resolve hidden field*/);", "+\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, BindingIds.VARIABLE, this, false /*do not resolve hidden field*/);", "-\t\t\t\t\tif (initialization instanceof ArrayInitializer) {", "+\t\t\t\t\tif (this.initialization instanceof ArrayInitializer) {", "-\t\t\t\t\t} else if ((initializationTypeBinding = initialization.resolveType(initializationScope)) != null) {", "+\t\t\t\t\t} else if ((initializationTypeBinding = this.initialization.resolveType(initializationScope)) != null) {", "+\t\t\t\t\t/*", "-\t\t\t\t} else if ((this.binding != null) && this.binding.isPublic()) {", "-\t\t\t\t\tinitializationScope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd);", "+\t\t\t\t\t*/", "+\t\t\t\t\tthis.javadoc.resolve(initializationScope);", "+\t\t\t\t} else if (this.binding != null && this.binding.declaringClass != null && !this.binding.declaringClass.isLocalType()) {", "+\t\t\t\t\tinitializationScope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd, this.binding.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dac31a17602f5f4f4579fe05dbe53f56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BranchStatement.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-", "-\tif ((bits & IsReachable) == 0) {", "+\tif ((this.bits & ASTNode.IsReachable) == 0) {", "-\tif (subroutines != null){", "-\t\tfor (int i = 0, max = subroutines.length; i < max; i++){", "-\t\t\tSubRoutineStatement sub = subroutines[i];", "-\t\t\tsub.generateSubRoutineInvocation(currentScope, codeStream);", "-\t\t\tif (sub.isSubRoutineEscaping()) {", "+\tif (this.subroutines != null){", "+\t\tfor (int i = 0, max = this.subroutines.length; i < max; i++){", "+\t\t\tSubRoutineStatement sub = this.subroutines[i];", "+\t\t\tboolean didEscape = sub.generateSubRoutineInvocation(currentScope, codeStream, this.targetLabel);", "+\t\t\tif (didEscape) {", "-\t\t\t\t\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, i, codeStream);", "+\t\t\t\t\tSubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, i, codeStream);", "-\t\t\tsub.exitAnyExceptionHandler();", "-\tcodeStream.goto_(targetLabel);", "+\tcodeStream.goto_(this.targetLabel);", "-\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, -1, codeStream);", "+\tSubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, -1, codeStream);"]}], "num": 19472}
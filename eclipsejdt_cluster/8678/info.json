{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c70455b1b72322d2f5135168ddf5be7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a87489b5b46223297607e17de44c936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void evaluateNullAnnotations(Annotation[] annotations)", "signatureAfterChange": "  \tpublic void evaluateNullAnnotations(Scope scope, TypeParameter parameter)", "diff": ["-\tpublic void evaluateNullAnnotations(Annotation[] annotations) {", "+\tpublic void evaluateNullAnnotations(Scope scope, TypeParameter parameter) {", "+\t\tAnnotation[] annotations = parameter.annotations;", "-//\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict TypeVariable vs. first bound\");", "+\t\t\t\t\t// not finding either bound or ann should be considered a compiler bug", "+\t\t\t\t\tTypeReference bound = findBound(this.firstBound, parameter);", "+\t\t\t\t\tAnnotation ann = bound.findAnnotation(superNullTagBits);", "+\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(ann, nullTagBits);", "+\t\t\t\t\tthis.tagBits &= ~TagBits.AnnotationNullMASK;", "-//\t\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict TypeVariable vs. bound \"+i);", "+\t\t\t\t\t\t// not finding either bound or ann should be considered a compiler bug", "+\t\t\t\t\t\tTypeReference bound = findBound(this.firstBound, parameter);", "+\t\t\t\t\t\tAnnotation ann = bound.findAnnotation(superNullTagBits);", "+\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(ann, nullTagBits);", "+\t\t\t\t\t\tthis.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b58318d69fac116bea9baae732871bfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "9a002308afd4fa88fcf783c9675d5e0ce74b8153", "commitAfterChange": "e8cc0ae635ad89b28bebca1f5385768f9625249f", "methodNumberBeforeChange": 249, "methodNumberAfterChange": 249, "signatureBeforeChange": " public void test0245() throws JavaModelException", "signatureAfterChange": " public void test0245() throws JavaModelException", "diff": ["-// https://bugs.eclipse.org/bugs/show_bug.cgi?id=83005", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=101456", "+    this.wc = getWorkingCopy(", "+            \"/Completion/src/test/SnapshotImpl.java\",", "+            \"class SnapshotImpl extends AbstractSnapshot<SnapshotImpl, ProviderImpl> {}\");", "+    getWorkingCopy(", "+            \"/Completion/src/test/Snapshot.java\",", "+            \"public interface Snapshot<S extends Snapshot> {}\");", "+    getWorkingCopy(", "+            \"/Completion/src/test/SnapshotProvider.java\",", "+            \"interface SnapshotProvider<S extends Snapshot> {}\");", "+    getWorkingCopy(", "+            \"/Completion/src/test/AbstractSnapshot.java\",", "+            \"abstract class AbstractSnapshot<S extends Snapshot, P extends SnapshotProvider<S>> implements Snapshot<S> {}\");", "+    getWorkingCopy(", "+            \"/Completion/src/test/ProviderImpl.java\",", "+            \"class ProviderImpl implements SnapshotProvider<SnapshotImpl> {}\");", "+", "+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+    String str = this.wc.getSource();", "+    String completeBehind = \"ProviderImp\";", "+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+", "+\tassertResults(\"\", requestor.getResults());", "+}"]}], "num": 8678}
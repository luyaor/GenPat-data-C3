{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95bf1d51dcbf12e77d7a85d3df847bf9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019f95e4d59ddead3d7bc6050573b518", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Type safety: The cast from List to List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to List<X> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type List is converted to List<X>. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type List is converted to List<X> using a raw conversion. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type Iterator is converted to Iterator<X>. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator is converted to Iterator<X> using a raw conversion. References to generic type Iterator<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The cast from Collection to List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Collection to List<X> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type safety: The cast from List to Collection<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to Collection<X> is actually checking against the erased type Collection\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0690c99db5b050b04e864e0008785ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 421, "signatureBeforeChange": " public boolean atConflictScenario(int token)", "signatureAfterChange": " public boolean atConflictScenario(int token)", "diff": ["-\t   start of <type argument> and (b) the use of '(' in '(' expression ')' and '( type ')' and '(' lambda formal parameters ')'. When requested thus,", "-\t   the scanner helps by fabricating synthetic tokens and injecting them into the stream ahead of the tokens that trigger conflicts in the absence", "-\t   of these artificial tokens. These manufactured token help transform the grammar into LALR(1) by splitting the states so that they have unambigious", "-\t   prefixes.", "+\t   start of <type argument> and (b) the use of '(' in '(' expression ')' and '( type ')' and '(' lambda formal parameters ')'. (c) whether the token @", "+\t   begins a Java SE5 style declaration annotation or if it begins a SE8 style type annotation. When requested thus, the scanner helps by fabricating ", "+\t   synthetic tokens and injecting them into the stream ahead of the tokens that trigger conflicts in the absence of these artificial tokens. These ", "+\t   manufactured token help transform the grammar into LALR(1) by splitting the states so that they have unambigious prefixes.", "-\ttoken = token == TokenNameLPAREN ? TokenNameBeginLambda : TokenNameBeginTypeArguments;", "+\tif (token != TokenNameAT) {", "+\t\ttoken = token == TokenNameLPAREN ? TokenNameBeginLambda : TokenNameBeginTypeArguments;", "+\t}"]}], "num": 14706}
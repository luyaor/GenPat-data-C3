{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a58e0d79a3160da2b29d4f2a3eef600a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43facb386aefa3cb0193b7333608e291", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  public boolean isBoxingCompatibleWith(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  public boolean isBoxingCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-\t\tthis.expectedType = targetType;", "-\t\t// No need to tunnel through overload resolution. this.binding is the MSMB.", "-\t\tMethodBinding method = isPolyExpression() ? ParameterizedGenericMethodBinding.computeCompatibleMethod18(this.binding.shallowOriginal(), this.argumentTypes, scope, this) : this.binding;", "+\t\tMethodBinding method = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(targetType) : null;", "+\t\tif (method == null) {", "+\t\t\tthis.expectedType = targetType;", "+\t\t\t// No need to tunnel through overload resolution. this.binding is the MSMB.", "+\t\t\tmethod = isPolyExpression() ? ParameterizedGenericMethodBinding.computeCompatibleMethod18(this.binding.shallowOriginal(), this.argumentTypes, scope, this) : this.binding;", "+\t\t\tregisterResult(targetType, method);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79e7088b726cef162cc292f1a4c48419", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["-\t\tthis.expectedType = targetType;", "-\t\t// No need to tunnel through overload resolution. this.binding is the MSMB.", "-\t\tMethodBinding method = isPolyExpression() ? ParameterizedGenericMethodBinding.computeCompatibleMethod18(this.binding.shallowOriginal(), this.argumentTypes, scope, this) : this.binding;", "+\t\tMethodBinding method = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(targetType) : null;", "+\t\tif (method == null) {", "+\t\t\tthis.expectedType = targetType;", "+\t\t\t// No need to tunnel through overload resolution. this.binding is the MSMB.", "+\t\t\tmethod = isPolyExpression() ? ParameterizedGenericMethodBinding.computeCompatibleMethod18(this.binding.shallowOriginal(), this.argumentTypes, scope, this) : this.binding;", "+\t\t\tregisterResult(targetType, method);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86df87be95d3395a532daca053b72cd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "signatureAfterChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "diff": ["-\t", "+\tif (this.typeExpected != null && this.binding != null) {", "+\t\tMethodBinding cached = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(this.typeExpected) : null;", "+\t\tif (cached != null)", "+\t\t\treturn cached;", "+\t}", "-\t\t\t// force an inference context to be established, but avoid tunneling through overload resolution. We know this is the MSMB.", "-\t\t\treturn ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\t\t// force an inference context to be established for nested poly allocations (to be able to transfer b2), but avoid tunneling through overload resolution. We know this is the MSMB.", "+\t\t\tif (this.expressionContext == INVOCATION_CONTEXT && this.typeExpected == null)", "+\t\t\t\tconstructor = ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\tif (this.typeExpected != null)", "+\t\t\tregisterResult(this.typeExpected, constructor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f55804b67ef1f21bedc310e482733d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["-\t\t\tthis.typeExpected = targetType;", "-\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(scope);", "-\t\t\tif (inferredTypes == null)", "-\t\t\t\treturn false;", "-\t\t\tallocationType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, this.resolvedType.enclosingType());", "+\t\t\tMethodBinding method = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(targetType) : null;", "+\t\t\tif (method == null) {", "+\t\t\t\tthis.typeExpected = targetType;", "+\t\t\t\tmethod = inferConstructorOfElidedParameterizedType(scope); // caches result already.", "+\t\t\t\tif (method == null || !method.isValidBinding())", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tallocationType = method.declaringClass;"]}], "num": 26058}
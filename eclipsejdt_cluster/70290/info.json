{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb7e4899f1082819f649a6f7a867ad6a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fb7944a3242f3e6a816383bc1f45cb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "bd3ce95a5dcea002f2bbc3281560d8a414021729", "commitAfterChange": "b3f667007c544b9cc506476bfd1fe264f3a97ec5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-", "-public static Test suite() {", "-\tTestSuite suite = new Suite(JavaConventionTests.class.getName());", "-", "-\tsuite.addTest(new JavaConventionTests(\"testInvalidImportDeclaration1\"));", "-\tsuite.addTest(new JavaConventionTests(\"testInvalidImportDeclaration2\"));", "-\tsuite.addTest(new JavaConventionTests(\"testInvalidImportDeclaration3\"));", "-\tsuite.addTest(new JavaConventionTests(\"testPackageFragmentRootOverlap\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidCompilationUnitName\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidIdentifier\"));", "-\tsuite.addTest(new JavaConventionTests(\"testInvalidIdentifier\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidFieldName\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidImportDeclaration\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidMethodName\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidPackageName\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidTypeName\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidUnicodeImportDeclaration\"));", "-\tsuite.addTest(new JavaConventionTests(\"testValidUnicodePackageName\"));", "-\t", "-\treturn suite;", "-}", "+\t}", "+\tpublic static Test suite() {", "+\t\treturn buildTestSuite(JavaConventionTests.class);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9606639dd89f3e1191967757e46a15fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static TestSuite suite()", "signatureAfterChange": " \t\t\t@Override \t\t\tpublic Iterable<JavaFileObject> list(Location location, String packageName, Set<Kind> kinds, boolean recurse) \t\t\t\t\tthrows IOException", "diff": ["-\tpublic static TestSuite suite() {", "-\t\tTestSuite suite = new TestSuite();", "-\t\tsuite.addTest(new CompilerToolTests(\"testInitializeJavaCompiler\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testFileManager\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testFileManager2\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testInferBinaryName\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCheckOptions\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithSystemCompiler\"));", "-//\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithSystemCompiler2\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithEclipseCompiler\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithEclipseCompiler2\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithEclipseCompiler3\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithEclipseCompiler4\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithEclipseCompiler5\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithEclipseCompiler6\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCompilerOneClassWithEclipseCompiler7\"));", "-\t\tsuite.addTest(new CompilerToolTests(\"testCleanUp\"));", "-\t\treturn suite;", "-\t}", "+\t\t\t}", "+\t\t\t@Override", "+\t\t\tpublic Iterable<JavaFileObject> list(Location location, String packageName, Set<Kind> kinds, boolean recurse)", "+\t\t\t\t\tthrows IOException {", "+\t\t\t\tIterable<JavaFileObject> list = super.list(location, packageName, kinds, recurse);", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"start list: \");", "+\t\t\t\t\tfor (JavaFileObject fileObject : list) {", "+\t\t\t\t\t\tSystem.out.println(fileObject.getName());", "+\t\t\t\t\t}", "+\t\t\t\t\tSystem.out.println(\"end   list: \");", "+\t\t\t\t}", "+\t\t\t\treturn list;", "+\t\t\t}"]}], "num": 70290}
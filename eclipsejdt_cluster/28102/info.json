{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47a78b398caf8dcfa45ac70476b1db44", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66421fe2303e4e156b59e53dd8419036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6309a9b2aeb767c0183db42672308082688897e5", "commitAfterChange": "9d3443d9ed27d5bf1a9ba003a556b60eecb97c38", "methodNumberBeforeChange": 1163, "methodNumberAfterChange": 1163, "signatureBeforeChange": " public void test1135()", "signatureAfterChange": " public void test1135()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[] {", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "-\t\t\"Baz\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"Baz\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.EclipseJustification.EclipseBug185422 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c176ca3c440e07aa787957b065c2e874", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6309a9b2aeb767c0183db42672308082688897e5", "commitAfterChange": "9d3443d9ed27d5bf1a9ba003a556b60eecb97c38", "methodNumberBeforeChange": 1274, "methodNumberAfterChange": 1275, "signatureBeforeChange": " public void test1244()", "signatureAfterChange": " public void test1244()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"  static class MyEntry extends Pool.AbstractEntry<MyEntry> { }  \\n\" + ", "-\t\t\t\t\"  static final Pool<MyEntry> pool=new Pool<MyEntry>() {\\n\" + ", "-\t\t\t\t\"    @Override\\n\" + ", "-\t\t\t\t\"    protected MyEntry delegate() {\\n\" + ", "-\t\t\t\t\"      return new MyEntry();\\n\" + ", "-\t\t\t\t\"    }  \\n\" + ", "-\t\t\t\t\"  };\\n\" + ", "-\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"    MyEntry entry=pool.m();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"abstract class Pool<E extends Pool.Entry<E>> {\\n\" + ", "-\t\t\t\t\"    private static abstract class Entry<E extends Entry<E>> {\\n\" + ", "-\t\t\t\t\"        E next;\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    static public class AbstractEntry<E extends AbstractEntry<E>> extends Entry<E> {\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    public E m() {\\n\" + ", "-\t\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"      return delegate();\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    protected abstract E delegate();\\n\" + ", "-\t\t\t\t\"}\\n\", // =================", "-", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  static class MyEntry extends Pool.AbstractEntry<MyEntry> { }  \\n\" + ", "+\t\t\t\"  static final Pool<MyEntry> pool=new Pool<MyEntry>() {\\n\" + ", "+\t\t\t\"    @Override\\n\" + ", "+\t\t\t\"    protected MyEntry delegate() {\\n\" + ", "+\t\t\t\"      return new MyEntry();\\n\" + ", "+\t\t\t\"    }  \\n\" + ", "+\t\t\t\"  };\\n\" + ", "+\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\"    MyEntry entry=pool.m();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"abstract class Pool<E extends Pool.Entry<E>> {\\n\" + ", "+\t\t\t\"    private static abstract class Entry<E extends Entry<E>> {\\n\" + ", "+\t\t\t\"        E next;\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    static public class AbstractEntry<E extends AbstractEntry<E>> extends Entry<E> {\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    public E m() {\\n\" + ", "+\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"      return delegate();\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    protected abstract E delegate();\\n\" + ", "+\t\t\t\"}\\n\", // =================", "-\t\t\"SUCCESS\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"SUCCESS\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.EclipseJustification.EclipseBug185422 /* javac test options */);"]}], "num": 28102}
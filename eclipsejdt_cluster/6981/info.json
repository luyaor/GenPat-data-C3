{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2a2b8862c69aff30d4ccb4ac16d13e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d337d8adf505b7b3718bec32be30eb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\tif (!this.hasBeenResolved && binding != null && this.binding.isValidBinding()) {", "+\t\tif (!this.hasBeenResolved && this.binding != null && this.binding.isValidBinding()) {", "-\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, name, this, true /*resolve*/);", "+\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this, true /*resolve*/);", "-\t\t\t\t\tBinding existingVariable = outerScope.getBinding(name, BindingIds.VARIABLE, this, false /*do not resolve hidden field*/);", "+\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, BindingIds.VARIABLE, this, false /*do not resolve hidden field*/);", "-\t\t\t\t\tif (initialization instanceof ArrayInitializer) {", "+\t\t\t\t\tif (this.initialization instanceof ArrayInitializer) {", "-\t\t\t\t\t} else if ((initializationTypeBinding = initialization.resolveType(initializationScope)) != null) {", "+\t\t\t\t\t} else if ((initializationTypeBinding = this.initialization.resolveType(initializationScope)) != null) {", "+\t\t\t\t\t/*", "-\t\t\t\t} else if ((this.binding != null) && this.binding.isPublic()) {", "-\t\t\t\t\tinitializationScope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd);", "+\t\t\t\t\t*/", "+\t\t\t\t\tthis.javadoc.resolve(initializationScope);", "+\t\t\t\t} else if (this.binding != null && this.binding.declaringClass != null && !this.binding.declaringClass.isLocalType()) {", "+\t\t\t\t\tinitializationScope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd, this.binding.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b12f3f3d8937d42a05acbbc6b5386459", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "7d898512e1bb0007daa25445f9b5590a5f50d1fc", "commitAfterChange": "da14e26f291fa445014e6a8835cdba505ee3dd29", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\tif (isTypeUseDeprecated(this.binding.type, initializationScope))", "-\t\t\t\tinitializationScope.problemReporter().deprecatedType(this.binding.type, this.type);", "-", "-\t\t\t// the resolution of the initialization hasn't been done", "-\t\t\tif (this.initialization == null) {", "-\t\t\t\tthis.binding.constant = Constant.NotAConstant;", "-\t\t\t} else {", "-\t\t\t\tint previous = initializationScope.fieldDeclarationIndex;", "-\t\t\t\ttry {", "-\t\t\t\t\tinitializationScope.fieldDeclarationIndex = this.binding.id;", "+\t\t\tint previous = initializationScope.fieldDeclarationIndex;", "+\t\t\ttry {", "+\t\t\t\tinitializationScope.fieldDeclarationIndex = this.binding.id;", "+\t\t\t\tif (isTypeUseDeprecated(this.binding.type, initializationScope)) {", "+\t\t\t\t\tinitializationScope.problemReporter().deprecatedType(this.binding.type, this.type);", "+\t\t\t\t}", "+\t\t\t\t// the resolution of the initialization hasn't been done", "+\t\t\t\tif (this.initialization == null) {", "+\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;", "+\t\t\t\t} else {", "-\t\t\t\t} finally {", "-\t\t\t\t\tinitializationScope.fieldDeclarationIndex = previous;", "-\t\t\t\t\tif (this.binding.constant == null)", "-\t\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// Resolve Javadoc comment if one is present", "-\t\t\tif (this.javadoc != null) {", "-\t\t\t\tif (classScope != null) {", "-\t\t\t\t\tthis.javadoc.resolve(classScope);", "+\t\t\t\t// Resolve Javadoc comment if one is present", "+\t\t\t\tif (this.javadoc != null) {", "+\t\t\t\t\tif (classScope != null) {", "+\t\t\t\t\t\tthis.javadoc.resolve(classScope);", "+\t\t\t\t\t}", "+\t\t\t\t} else if ((this.binding != null) && this.binding.isPublic()) {", "+\t\t\t\t\tinitializationScope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd);", "-\t\t\t} else if ((this.binding != null) && this.binding.isPublic()) {", "-\t\t\t\tinitializationScope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd);", "+\t\t\t} finally {", "+\t\t\t\tinitializationScope.fieldDeclarationIndex = previous;", "+\t\t\t\tif (this.binding.constant == null)", "+\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;"]}], "num": 6981}
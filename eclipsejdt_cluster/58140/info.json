{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60a1e31deb683f38373155d56156901c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fe4233ef5f57ba654d3ae68f888feec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "da518c52dcbfe044bb9f162f86d0c3f3de2bc467", "commitAfterChange": "1bc1a66dee8786645fc203b9ded688e657fbf446", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " \tpublic void _test325()", "signatureAfterChange": " \tpublic void test325()", "diff": ["-\t// TODO (philippe) reenable once fixed", "-\tpublic void _test325() {", "-\t\tthis.runConformTest(", "+\t}", "+\tpublic void test325() {", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\"\t\t\\n\" + ", "+\t\t\t\t\"\tvoid foo1() {\\n\" + ", "-\t\t\t\t\"\t\tX<Exception>.Item<Thread> j = new X<Exception>.Item<Thread>();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid foo2() {\\n\" + ", "+\t\t\t\t\"\t\tX<Exception>.Item<Thread> j = new X<Exception>.Item<Thread>();\\n\" + // allowed per grammar", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid foo3() {\\n\" + ", "+\t\t\t\t\"\t\tX.Item k = new X.Item();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tstatic void foo4() {\\n\" + ", "+\t\t\t\t\"\t\tX.Item k = new X.Item();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f7a92c5c76bc3003bffc8ba71e0b833", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "387b2eaf3ce0e720e6825fac06c84c2963551791", "commitAfterChange": "c848c526397205050ce74f2846e59bdbf8b870a1", "methodNumberBeforeChange": 340, "methodNumberAfterChange": 347, "signatureBeforeChange": " public void _test190()", "signatureAfterChange": " public void test197()", "diff": ["-public void _test190() {", "-\t\t\t\"\tpublic int foo() {\\n\" + ", "-\t\t\t\"\t\treturn 0;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic int foo() {\\n\" + ", "-\t\t\t\"\t\treturn 1;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\"TBD\"", "+public void test197() {", "+\t\t\t\"\tpublic static int foo() { return 0; }\\n\" + ", "+\t\t\t\"\tpublic int foo() { return 1; }\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p1\\\\B.java (at line 3)\\n\" + ", "+\t\t\"\tpublic static int foo() { return 0; }\\n\" + ", "+\t\t\"\t                  ^^^^^\\n\" + ", "+\t\t\"This static method cannot hide the instance method from A\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p1\\\\B.java (at line 3)\\n\" + ", "+\t\t\"\tpublic static int foo() { return 0; }\\n\" + ", "+\t\t\"\t                  ^^^^^\\n\" + ", "+\t\t\"This static method cannot hide the instance method from C\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p2\\\\C.java (at line 3)\\n\" + ", "+\t\t\"\tpublic int foo() { return 1; }\\n\" + ", "+\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\"The method C.foo() does not override the inherited method from A since it is private to a different package\\n\" + ", "+\t\t\"----------\\n\""]}], "num": 58140}
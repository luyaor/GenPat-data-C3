{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24b347b65a9a3f136e7cca1127dd6158", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b420d5d628257996584efee27c9b362", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "9318beb1001c9d1a97d62cd25a1df5140d1d4221", "commitAfterChange": "fbb5cd8172f148996d50fb2879a48666d0d58444", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprivate void updateProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "signatureAfterChange": " \t \tprivate void updateProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "diff": ["-\t\tIClasspathEntry generatedSourceClasspathEntry = ", "-\t\t\tJavaCore.newSourceEntry(folder.getFullPath());", "+\t\tIPath path = folder.getFullPath();", "-\t\t\tif (cp[i].getPath().equals(generatedSourceClasspathEntry.getPath())) ", "+\t\t\tif (cp[i].getPath().equals( path )) ", "+\t\t", "+\t\t\t// update exclusion patterns", "+\t\t\tArrayList<IPath> exclusions = new ArrayList<IPath>();", "+\t\t\tfor ( int i = 0; i< cp.length; i++ )", "+\t\t\t{", "+\t\t\t\tif ( cp[i].getPath().isPrefixOf( path ) )", "+\t\t\t\t{", "+\t\t\t\t\t// exclusion patterns must be project-relative paths, and must end with a \"/\"", "+\t\t\t\t\tIPath projectRelativePath = folder.getProjectRelativePath().addTrailingSeparator();", "+\t\t\t\t\t", "+\t\t\t\t\t// path is contained in an existing source path, so update existing paths's exclusion patterns\t\t\t\t", "+\t\t\t\t\tIPath[] oldExclusions = cp[i].getExclusionPatterns();", "+", "+\t\t\t\t\t// don't add if exclusion pattern already contains src dir", "+\t\t\t\t\tboolean add = true;", "+\t\t\t\t\tfor ( int j = 0; j < oldExclusions.length; j++ )", "+\t\t\t\t\t\tif ( oldExclusions[j].equals( projectRelativePath ) )", "+\t\t\t\t\t\t\tadd = false;", "+\t\t\t\t\t", "+\t\t\t\t\tif ( add )", "+\t\t\t\t\t{", "+\t\t\t\t\t\tIPath[] newExclusions;", "+\t\t\t\t\t\tif ( cp[i].getExclusionPatterns() == null )", "+\t\t\t\t\t\t\tnewExclusions = new IPath[1];", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tnewExclusions = new IPath[ oldExclusions.length + 1 ];", "+\t\t\t\t\t\t\tSystem.arraycopy( oldExclusions, 0, newExclusions, 0, oldExclusions.length );", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewExclusions[ newExclusions.length - 1 ] = projectRelativePath;", "+\t\t\t\t\t\tcp[i] = JavaCore.newSourceEntry(cp[i].getPath(), cp[i].getInclusionPatterns(), newExclusions, cp[i].getOutputLocation(), cp[i].getExtraAttributes());", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\telse if ( path.isPrefixOf( cp[i].getPath() ))", "+\t\t\t\t{", "+\t\t\t\t\t// new source path contains an existing source path, so add an exclusion pattern for it", "+\t\t\t\t\texclusions.add( cp[i].getPath().addTrailingSeparator() );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tIPath[] exclusionPatterns = exclusions.toArray( new IPath[exclusions.size()] );", "+\t\t\tIClasspathEntry generatedSourceClasspathEntry = ", "+\t\t\t\tJavaCore.newSourceEntry(folder.getFullPath(), exclusionPatterns );", "+\t\t\t", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71822a25c191f0e229b0f46bf54aabd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testGetTypes() throws JavaModelException", "signatureAfterChange": " public void testGetTypes() throws JavaModelException", "diff": ["+\tboolean[] isClass = new boolean[] {true, false};", "+\tboolean[] isInterface = new boolean[] {false, true};", "+\tboolean[] isAnnotation = new boolean[] {false, false};", "+\tboolean[] isEnum = new boolean[] {false, false};", "+\tString[] superclassName = new String[] {null, null};", "+\tString[] superclassType = new String[] {null, null};", "+\tString[][] superInterfaceNames = new String[][] {", "+\t\t\tnew String[] {\"Runnable\"}, new String[0]", "+\t};", "+\tString[][] superInterfaceTypes = new String[][] {", "+\t\t\tnew String[] {\"QRunnable;\"}, new String[0]", "+\t};", "+\tString[][] formalTypeParameters = new String[][] {", "+\t\tnew String[0], new String[0]};", "+\t", "+\t\tassertEquals(\"Incorrect isClass for the \" + i + \" type\", isClass[i], types[i].isClass());", "+\t\tassertEquals(\"Incorrect isInterface for the \" + i + \" type\", isInterface[i], types[i].isInterface());", "+\t\tassertEquals(\"Incorrect isAnnotation for the \" + i + \" type\", isAnnotation[i], types[i].isAnnotation());", "+\t\tassertEquals(\"Incorrect isEnum for the \" + i + \" type\", isEnum[i], types[i].isEnum());", "+\t\tassertEquals(\"Incorrect superclassName for the \" + i + \" type\", superclassName[i], types[i].getSuperclassName());", "+\t\tassertEquals(\"Incorrect superclassType for the \" + i + \" type\", superclassType[i], types[i].getSuperclassType());", "+\t\tassertEquals(\"Incorrect superInterfaceNames for the \" + i + \" type\", superInterfaceNames[i].length, types[i].getSuperInterfaceNames().length);", "+\t\tassertEquals(\"Incorrect superInterfaceTypes for the \" + i + \" type\", superInterfaceTypes[i].length, types[i].getSuperInterfaceTypes().length);", "+\t\tassertEquals(\"Incorrect formalTypeParameters for the \" + i + \" type\", formalTypeParameters[i].length, types[i].getTypeParameters().length);"]}], "num": 45422}
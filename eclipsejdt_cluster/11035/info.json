{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3536240c4ffd36a556eef8b5e4a01a3d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "149312685f4caed7d903311933f91db2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-//public void match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "-public void match(TypeReference node, MatchingNodeSet nodeSet) { // interested in QualifiedTypeReference only", "-\tif (!(node instanceof QualifiedTypeReference)) return;", "+//public int match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "+public int match(TypeReference node, MatchingNodeSet nodeSet) { // interested in QualifiedTypeReference only", "+\tif (!(node instanceof QualifiedTypeReference)) return IMPOSSIBLE_MATCH;", "-\tint level = matchLevelForTokens(((QualifiedTypeReference) node).tokens);", "-\tif (level >= POSSIBLE_MATCH)", "-\t\tnodeSet.addMatch(node, level);", "+\treturn nodeSet.addMatch(node, matchLevelForTokens(((QualifiedTypeReference) node).tokens));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914a9d528b21c82b8758e2f37a487d0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void match(Reference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(Reference node, MatchingNodeSet nodeSet)", "diff": ["-//public void match(MessageSend node, MatchingNodeSet nodeSet) - SKIP IT", "-public void match(Reference node, MatchingNodeSet nodeSet) { // interested in QualifiedNameReference", "-\tif (!(node instanceof QualifiedNameReference)) return;", "+//public int match(MessageSend node, MatchingNodeSet nodeSet) - SKIP IT", "+public int match(Reference node, MatchingNodeSet nodeSet) { // interested in QualifiedNameReference", "+\tif (!(node instanceof QualifiedNameReference)) return IMPOSSIBLE_MATCH;", "-\tint level = matchLevelForTokens(((QualifiedNameReference) node).tokens);", "-\tif (level >= POSSIBLE_MATCH)", "-\t\tnodeSet.addMatch(node, level);", "+\treturn nodeSet.addMatch(node, matchLevelForTokens(((QualifiedNameReference) node).tokens));"]}], "num": 11035}
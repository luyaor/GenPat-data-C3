{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ea924a5251bf03d84ec977a7891c9c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "623ea911fd1d436f9aad4d6987379ac2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "46b62da526fe2a6ffd79b0ba880e83b9b19218e9", "commitAfterChange": "b86d8384eaf8c819d0430387f9f109e2adf4cb49", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic char[] genericTypeSignature()", "signatureAfterChange": " \tpublic char[] genericTypeSignature()", "diff": ["-\t\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbeb4b0a50df0d194fc04e37a4e1a1d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8cc940e0f7737c5f198b9632e86ecfcd6479e105", "commitAfterChange": "cb998bf2848dbe13467716ab126d457f7b87a36f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t} else if (currentLength > 1) {\r", "-\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "-\t\t\t\t\tfound.add(currentMethods[f]);\r", "+\t\t\t} else if (currentLength > 0) {\r", "+\t\t\t\tfound.addAll(currentMethods);\r", "-\t\t\r", "-\t\t\t\tif (found.size == 0 && matchingMethod != null)\r", "+\t\t\t\tif (found.size == 0 && matchingMethod != null) {\r", "-\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "-\t\t\t\t\tfound.add(currentMethods[f]);\r", "+\t\t\t\t\tmatchingMethod = null;\r", "+\t\t\t\t}\r", "+\t\t\t\tfound.addAll(currentMethods);\r", "-\t\t\tif (matchingMethod == null){\r", "-\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (matchingMethod == null) {\r", "+\t\t\t\tMethodBinding interfaceMethod =\r", "+\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tMethodBinding interfaceMethod =\r", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tMethodBinding interfaceMethod =\r", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\treturn new ProblemMethodBinding(\r", "-\t\t\t\tcandidates[0].selector,\r", "-\t\t\t\targumentTypes,\r", "-\t\t\t\tcandidates[0].declaringClass,\r", "-\t\t\t\tNotVisible);\r", "+\t\t\treturn new ProblemMethodBinding(candidates[0].selector, argumentTypes, candidates[0].declaringClass, NotVisible);\r"]}], "num": 43555}
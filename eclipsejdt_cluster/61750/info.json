{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47c6692d10058cf0ac8ebd60bccfefb8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14993048c1bedf5fd838f40668348539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "cb9297d0b2c1bdcf8963e89b9c822b2bdceb54dc", "commitAfterChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\tthis.tagValue = NO_TAG_VALUE;", "+\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\tcase 'a':", "+\t\t\t\t\t\tif (length == TAG_AUTHOR_LENGTH && CharOperation.equals(TAG_AUTHOR, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_AUTHOR_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t} else if (length == TAG_CODE_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_CODE, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_CODE_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_LITERAL_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_LITERAL, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LITERAL_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SERIAL_LENGTH && CharOperation.equals(TAG_SERIAL, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SERIAL_DATA_LENGTH && CharOperation.equals(TAG_SERIAL_DATA, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_DATA_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SERIAL_FIELD_LENGTH && CharOperation.equals(TAG_SERIAL_FIELD, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_FIELD_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SINCE_LENGTH && CharOperation.equals(TAG_SINCE, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SINCE_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_VERSION_LENGTH && CharOperation.equals(TAG_VERSION, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_VERSION_VALUE;", "-\t\tif (! alreadyParsedTag && this.reportProblems && verifyEndLine(this.scanner.currentPosition)) {", "+\t\tif (this.tagValue != TAG_OTHERS_VALUE && ! alreadyParsedTag && this.reportProblems && verifyEndLine(this.scanner.currentPosition)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85bc8a4e9f8e26bd613554831829ddb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "c68bc9934e48a34d453d6810fef3f4032fb88b14", "commitAfterChange": "7389e11979cd050788c8fca32e602540d323e3bc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\tchar[] tag = new char[length];", "-\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "+\t\tif (length == 0) return false; // may happen for some parser (completion for example)", "+\t\tchar firstChar = this.source[this.tagSourceStart];", "-\t\t\t\tif (length == 0) break; // may happen for some parser (completion for example)", "-\t\t\t\tswitch (tag[0]) {", "+\t\t\t\tswitch (firstChar) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_CATEGORY)) {", "+\t\t\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\tif (length == TAG_SEE_LENGTH && this.source[this.tagSourceStart+1] == TAG_SEE[1] &&  this.source[this.tagSourceEnd] == TAG_SEE[2]) {", "-\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && CharOperation.equals(tag, TAG_VALUE)) {", "+\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {"]}], "num": 61750}
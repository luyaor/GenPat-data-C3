{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "289a9746b50a85bf9c9a96d31e91d6f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e947d2d6c56edd87fae0fc891b07d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "3c5f4a72fa40d161c5df0c986d4c60e32d52f863", "commitAfterChange": "98204916425a6241634af08472ba583f090f0116", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String createIndentString(int indent)", "signatureAfterChange": "     public String createIndentString(int indentationUnits)", "diff": ["-    public String createIndentString(int indent) {", "-        StringBuffer buf= new StringBuffer(indent * this.singleIndentString.length());", "-        for (int i = 0; i < indent; i++) {", "-            buf.append(this.singleIndentString);", "-        }", "-        return buf.toString();", "+    public String createIndentString(int indentationUnits) {", "+\t\tfinal String tabChar= (String) options.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "+\t\tfinal int tabs, spaces;", "+\t\tif (JavaCore.SPACE.equals(tabChar)) {", "+\t\t\ttabs= 0;", "+\t\t\tspaces= indentationUnits * this.indentWidth;", "+\t\t} else if (JavaCore.TAB.equals(tabChar)) {", "+\t\t\t// indentWidth == tabWidth", "+\t\t\ttabs= indentationUnits;", "+\t\t\tspaces= 0;", "+\t\t} else if (DefaultCodeFormatterConstants.MIXED.equals(tabChar)){", "+\t\t\tint spaceEquivalents= indentationUnits * this.indentWidth;", "+\t\t\tif (this.tabWidth > 0) {", "+\t\t\t\ttabs= spaceEquivalents / this.tabWidth;", "+\t\t\t\tspaces= spaceEquivalents % this.tabWidth;", "+\t\t\t} else {", "+\t\t\t\ttabs= 0;", "+\t\t\t\tspaces= spaceEquivalents;", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// new indent type not yet handled", "+\t\t\tAssert.isTrue(false);", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "+\t\tStringBuffer buffer= new StringBuffer(tabs + spaces);", "+\t\tfor(int i= 0; i < tabs; i++)", "+\t\t\tbuffer.append('\\t');", "+\t\tfor(int i= 0; i < spaces; i++)", "+\t\t\tbuffer.append(' ');", "+\t\treturn buffer.toString();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec2b99254be429590b7223caa87cdf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "1f25db82a90d7dfb41e186c23361a31470988684", "commitAfterChange": "9cd1ab49783c2213611dcbe2939a387e78b83c79", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String createIndentString(int indent)", "signatureAfterChange": "     public String createIndentString(int indentationUnits)", "diff": ["-    public String createIndentString(int indent) {", "-        StringBuffer buf= new StringBuffer(indent * this.singleIndentString.length());", "-        for (int i = 0; i < indent; i++) {", "-            buf.append(this.singleIndentString);", "-        }", "-        return buf.toString();", "+    public String createIndentString(int indentationUnits) {", "+\t\tfinal String tabChar= (String) options.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "+\t\tfinal int tabs, spaces;", "+\t\tif (JavaCore.SPACE.equals(tabChar)) {", "+\t\t\ttabs= 0;", "+\t\t\tspaces= indentationUnits * this.indentWidth;", "+\t\t} else if (JavaCore.TAB.equals(tabChar)) {", "+\t\t\t// indentWidth == tabWidth", "+\t\t\ttabs= indentationUnits;", "+\t\t\tspaces= 0;", "+\t\t} else if (DefaultCodeFormatterConstants.MIXED.equals(tabChar)){", "+\t\t\tint spaceEquivalents= indentationUnits * this.indentWidth;", "+\t\t\tif (this.tabWidth > 0) {", "+\t\t\t\ttabs= spaceEquivalents / this.tabWidth;", "+\t\t\t\tspaces= spaceEquivalents % this.tabWidth;", "+\t\t\t} else {", "+\t\t\t\ttabs= 0;", "+\t\t\t\tspaces= spaceEquivalents;", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// new indent type not yet handled", "+\t\t\t//Assert.isTrue(false); bug 90580", "+\t\t\ttabs= 0;", "+\t\t\tspaces= indentationUnits * this.indentWidth;", "+\t\t}", "+\t\t", "+\t\tStringBuffer buffer= new StringBuffer(tabs + spaces);", "+\t\tfor(int i= 0; i < tabs; i++)", "+\t\t\tbuffer.append('\\t');", "+\t\tfor(int i= 0; i < spaces; i++)", "+\t\t\tbuffer.append(' ');", "+\t\treturn buffer.toString();", "+"]}], "num": 43950}
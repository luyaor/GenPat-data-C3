{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ccbd4501c7a13f506152094f386459d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520847a4ec511409f056ab7aa5a2c272", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\targumentTypes[i] = returnTypeName(arguments[i].type);", "+\t\t\targumentTypes[i] = CharOperation.concatWith(arguments[i].type.getParameterizedTypeName(), '.');", "-\t\t\t\tCharOperation.concatWith(thrownExceptions[i].getTypeName(), '.'); ", "+\t\t\t\tCharOperation.concatWith(thrownExceptions[i].getParameterizedTypeName(), '.'); ", "+\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\t\tchar[][] typeParameterNames = null;", "+\t\t\tchar[][][] typeParameterBounds = null;", "+\t\t\tif (typeParameters != null) {", "+\t\t\t\tint typeParametersLength = typeParameters.length;", "+\t\t\t\ttypeParameterNames = new char[typeParametersLength][];", "+\t\t\t\ttypeParameterBounds = new char[typeParametersLength][][];", "+\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\t\ttypeParameterNames[i] = typeParameters[i].name;", "+\t\t\t\t\tTypeReference[] bounds = typeParameters[i].bounds;", "+\t\t\t\t\tif (bounds != null) {", "+\t\t\t\t\t\tint boundLength = bounds.length;", "+\t\t\t\t\t\tchar[][] boundNames = new char[boundLength][];", "+\t\t\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "+\t\t\t\t\t\t\tboundNames[j] = ", "+\t\t\t\t\t\t\t\tCharOperation.concatWith(bounds[i].getParameterizedTypeName(), '.'); ", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttypeParameterBounds[i] = boundNames;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "-\t\t\t\tthrownExceptionTypes);", "+\t\t\t\tthrownExceptionTypes,", "+\t\t\t\ttypeParameterNames,", "+\t\t\t\ttypeParameterBounds);", "+\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\tchar[][] typeParameterNames = null;", "+\t\tchar[][][] typeParameterBounds = null;", "+\t\tif (typeParameters != null) {", "+\t\t\tint typeParametersLength = typeParameters.length;", "+\t\t\ttypeParameterNames = new char[typeParametersLength][];", "+\t\t\ttypeParameterBounds = new char[typeParametersLength][][];", "+\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\ttypeParameterNames[i] = typeParameters[i].name;", "+\t\t\t\tTypeReference[] bounds = typeParameters[i].bounds;", "+\t\t\t\tif (bounds != null) {", "+\t\t\t\t\tint boundLength = bounds.length;", "+\t\t\t\t\tchar[][] boundNames = new char[boundLength][];", "+\t\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "+\t\t\t\t\t\tboundNames[j] = ", "+\t\t\t\t\t\t\tCharOperation.concatWith(bounds[i].getParameterizedTypeName(), '.'); ", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeParameterBounds[i] = boundNames;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\trequestor.enterMethod(", "-\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-\t\t\treturnTypeName(((MethodDeclaration) methodDeclaration).returnType), ", "-\t\t\tmethodDeclaration.selector, ", "-\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\tselectorSourceEnd, ", "-\t\t\targumentTypes, ", "-\t\t\targumentNames, ", "-\t\t\tthrownExceptionTypes); ", "+\t\tif (methodDeclaration instanceof MethodDeclaration) {", "+\t\t\tTypeReference returnType = ((MethodDeclaration) methodDeclaration).returnType;", "+\t\t\trequestor.enterMethod(", "+\t\t\t\tmethodDeclaration.declarationSourceStart, ", "+\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "+\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "+\t\t\t\tmethodDeclaration.selector, ", "+\t\t\t\tmethodDeclaration.sourceStart, ", "+\t\t\t\tselectorSourceEnd, ", "+\t\t\t\targumentTypes, ", "+\t\t\t\targumentNames, ", "+\t\t\t\tthrownExceptionTypes,", "+\t\t\t\ttypeParameterNames,", "+\t\t\t\ttypeParameterBounds);", "+\t\t} else {", "+\t\t\tTypeReference returnType = ((AnnotationTypeMemberDeclaration) methodDeclaration).returnType;", "+\t\t\trequestor.enterMethod(", "+\t\t\t\tmethodDeclaration.declarationSourceStart, ", "+\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "+\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "+\t\t\t\tmethodDeclaration.selector, ", "+\t\t\t\tmethodDeclaration.sourceStart, ", "+\t\t\t\tselectorSourceEnd, ", "+\t\t\t\targumentTypes, ", "+\t\t\t\targumentNames, ", "+\t\t\t\tthrownExceptionTypes,", "+\t\t\t\ttypeParameterNames,", "+\t\t\t\ttypeParameterBounds);", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78156fb9303710ddaa4cc9c75a57d6f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "5f3b6ac7e5dc164337a0c0b8a1d4f4f78e6d48c8", "commitAfterChange": "fbfdac6d7ce3e57d87b2a41c24ca19b307df27cb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected void reportDeclaration(MethodBinding methodBinding, MatchLocator locator, SimpleSet knownMethods) throws CoreException", "signatureAfterChange": " protected void reportDeclaration(MethodBinding methodBinding, MatchLocator locator, SimpleSet knownMethods) throws CoreException", "diff": ["-\tchar[] bindingSelector = methodBinding.selector;", "-\tboolean isBinary = type.isBinary();", "-\tIMethod method = null;", "-\tTypeBinding[] parameters = methodBinding.original().parameters;", "-\tint parameterLength = parameters.length;", "-\tif (isBinary) {", "+\t// Report match for binary", "+\tif (type.isBinary()) {", "+\t\tIMethod method = null;", "+\t\tTypeBinding[] parameters = methodBinding.original().parameters;", "+\t\tint parameterLength = parameters.length;", "-\t} else {", "-\t\tString[] parameterTypes = new String[parameterLength];", "-\t\tfor (int i = 0; i  < parameterLength; i++) {", "-\t\t\tchar[] typeName = parameters[i].shortReadableName();", "-\t\t\tif (parameters[i].isMemberType()) {", "-\t\t\t\ttypeName = CharOperation.subarray(typeName, CharOperation.indexOf('.', typeName)+1, typeName.length);", "-\t\t\t}", "-\t\t\tparameterTypes[i] = Signature.createTypeSignature(typeName, false);", "-\t\t}", "-\t\tmethod = type.getMethod(new String(bindingSelector), parameterTypes);", "-\t}", "-\tif (method == null || knownMethods.addIfNotIncluded(method) == null) return;", "-", "-\tIResource resource = type.getResource();", "-\tIBinaryType info = null;", "-\tif (isBinary) {", "+\t\tif (method == null || knownMethods.addIfNotIncluded(method) == null) return;", "+\t", "+\t\tIResource resource = type.getResource();", "-\t\tinfo = locator.getBinaryInfo((org.eclipse.jdt.internal.core.ClassFile)type.getClassFile(), resource);", "+\t\tIBinaryType info = locator.getBinaryInfo((org.eclipse.jdt.internal.core.ClassFile)type.getClassFile(), resource);", "-\t} else {", "-\t\tif (declaringClass instanceof ParameterizedTypeBinding)", "-\t\t\tdeclaringClass = ((ParameterizedTypeBinding) declaringClass).genericType();", "-\t\tClassScope scope = ((SourceTypeBinding) declaringClass).scope;", "-\t\tif (scope != null) {", "-\t\t\tTypeDeclaration typeDecl = scope.referenceContext;", "-\t\t\tAbstractMethodDeclaration methodDecl = null;", "-\t\t\tAbstractMethodDeclaration[] methodDecls = typeDecl.methods;", "-\t\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "-\t\t\t\tif (CharOperation.equals(bindingSelector, methodDecls[i].selector)) {", "-\t\t\t\t\tmethodDecl = methodDecls[i];", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\treturn;", "+\t}", "+", "+\t// When source is available, report match if method is found in the declaring type", "+\tIResource resource = type.getResource();", "+\tif (declaringClass instanceof ParameterizedTypeBinding)", "+\t\tdeclaringClass = ((ParameterizedTypeBinding) declaringClass).genericType();", "+\tClassScope scope = ((SourceTypeBinding) declaringClass).scope;", "+\tif (scope != null) {", "+\t\tTypeDeclaration typeDecl = scope.referenceContext;", "+\t\tAbstractMethodDeclaration methodDecl = typeDecl.declarationOf(methodBinding.original());", "+\t\tif (methodDecl != null) {", "+\t\t\t// Create method handle from method declaration", "+\t\t\tString methodName = new String(methodBinding.selector);", "+\t\t\tArgument[] arguments = methodDecl.arguments;", "+\t\t\tint length = arguments == null ? 0 : arguments.length;", "+\t\t\tString[] parameterTypes = new String[length];", "+\t\t\tfor (int i = 0; i  < length; i++) {", "+\t\t\t\tchar[][] typeName = arguments[i].type.getParameterizedTypeName();", "+\t\t\t\tparameterTypes[i] = Signature.createTypeSignature(CharOperation.concatWith(typeName, '.'), false);", "-\t\t\tif (methodDecl != null) {", "-\t\t\t\tint offset = methodDecl.sourceStart;", "-\t\t\t\tBinding binding = methodDecl.binding;", "-\t\t\t\tif (binding != null)", "-\t\t\t\t\tmethod = (IMethod) ((JavaElement) method).resolved(binding);", "-\t\t\t\tthis.match = new MethodDeclarationMatch(method, SearchMatch.A_ACCURATE, offset, methodDecl.sourceEnd-offset+1, locator.getParticipant(), resource);", "-\t\t\t\tlocator.report(this.match);", "-\t\t\t}", "+\t\t\tIMethod method = type.getMethod(methodName, parameterTypes);", "+\t\t\tif (method == null || knownMethods.addIfNotIncluded(method) == null) return;", "+", "+\t\t\t// Create and report corresponding match", "+\t\t\tint offset = methodDecl.sourceStart;", "+\t\t\tthis.match = new MethodDeclarationMatch(method, SearchMatch.A_ACCURATE, offset, methodDecl.sourceEnd-offset+1, locator.getParticipant(), resource);", "+\t\t\tlocator.report(this.match);"]}], "num": 36660}
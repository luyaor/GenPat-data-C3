{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a3a57d4d572f303992ddc06b89af64c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ce2a23712996c3100aaf36ebb60bfac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/IntegerCache.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void clear()", "signatureAfterChange": " public void clear()", "diff": ["-\tfor (int i = keyTable.length; --i >= 0;) {", "-\t\tkeyTable[i] = 0;", "-\t\tvalueTable[i] = 0;", "+\tfor (int i = this.keyTable.length; --i >= 0;) {", "+\t\tthis.keyTable[i] = 0;", "+\t\tthis.valueTable[i] = 0;", "-\telementSize = 0;", "+\tthis.elementSize = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c47a70d4dc3102f110dc4ac391cc544a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {", "+\t\tif ((this.constant != Constant.NotAConstant) && (this.constant.typeID() == T_boolean)) {", "-\t\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {", "-\t\t\texpression.generateOptimizedBoolean(", "+\t\tif (((this.bits & OperatorMASK) >> OperatorSHIFT) == NOT) {", "+\t\t\tthis.expression.generateOptimizedBoolean("]}], "num": 60361}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b284a36544deae7749616cc5de15f56", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2773d101c78eabf13b6a9b8c4ad97016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "1b94558fa757b767854d14340a754f8fb18540c3", "commitAfterChange": "c0f8220101d45cc95e0339b31adfd53c34571071", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\t\tthis.parameterNames = new String[paramNames.length];", "+\t\t\tString[] names = new String[paramNames.length];", "-\t\t\t\tthis.parameterNames[i] = new String(paramNames[i]);", "+\t\t\t\tnames[i] = new String(paramNames[i]);", "-\t\t\treturn this.parameterNames;", "+\t\t\treturn this.parameterNames = names;", "-\t\t\t\t\tthis.parameterNames = new String[paramsLength];", "+\t\t\t\t\tString[] names = new String[paramsLength];", "-\t\t\t\t\t\t\tthis.parameterNames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "+\t\t\t\t\t\t\tnames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "-\t\t\t\t\t\t\tthis.parameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "+\t\t\t\t\t\t\tnames[i] = \"arg\" + i; //$NON-NLS-1$", "-\t\t\t\t\treturn this.parameterNames;", "+\t\t\t\t\treturn this.parameterNames = names;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d14cac9f91730d563fcccb665fed59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 59, "signatureBeforeChange": " \t \tprivate void doMarkMovedAsRemoved(CopySourceInfo curr)", "signatureAfterChange": " \t \tprivate void doMarkMovedAsRemoved(CopySourceInfo curr, ASTNode parent, StructuralPropertyDescriptor childProperty)", "diff": ["-\tprivate void doMarkMovedAsRemoved(CopySourceInfo curr) {", "-\t\tif (curr.childProperty.isChildListProperty()) {", "-\t\t\tListRewriteEvent event= getListEvent(curr.parent, curr.childProperty, true);", "-\t\t\tint index= event.getIndex(curr.getStartNode(), ListRewriteEvent.OLD);", "+\tprivate void doMarkMovedAsRemoved(CopySourceInfo curr, ASTNode parent, StructuralPropertyDescriptor childProperty) {", "+\t\tif (childProperty.isChildListProperty()) {", "+\t\t\tListRewriteEvent event= getListEvent(parent, childProperty, true);", "+\t\t\tint index= event.getIndex(curr.getNode(), ListRewriteEvent.OLD);", "-\t\t\tNodeRewriteEvent event= getNodeEvent(curr.parent, curr.childProperty, true);", "+\t\t\tNodeRewriteEvent event= getNodeEvent(parent, childProperty, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6488e1d954598c9371f112a6320d7f3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "bbf01bd45c20dcf892a1672b9d9c504b05790a01", "commitAfterChange": "64f2a5b8a78095fa170a97cceb8e661d31b0ae71", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "\r \tpublic boolean saveClasspath(boolean force) throws JavaModelException", "signatureAfterChange": "\r \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "diff": ["-\tpublic boolean saveClasspath(boolean force) throws JavaModelException {\r", "+\tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException {\r", "-\t\tif (!getProject().exists())\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (!isOpen())\r", "-\t\t\treturn false; // no update for closed projects\r", "+\t\tif (!getProject().exists()) return false;\r", "-\t\t\t\tif (!force && isClasspathEqualsTo(fileEntries)) {\r", "+\t\t\t\tif (isClasspathEqualsTo(newClasspath, newOutputLocation, fileEntries)) {\r", "-\t\t\t\tgetClasspathAsXMLString(getRawClasspath(), getOutputLocation()));\r", "+\t\t\t\tgetClasspathAsXMLString(newClasspath, newOutputLocation));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7db92647ce40c4d5d1e46e13caaf6120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "c99d716fa975f313809c9a758c093b0027fd52fe", "commitAfterChange": "cb63167d7ae8e51f68c8f4ae8680682adf1ffd54", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int matchField(FieldBinding field, boolean matchName)", "signatureAfterChange": " protected int matchField(FieldBinding field, boolean matchName)", "diff": ["+\tFieldPattern fieldPattern = (FieldPattern)this.pattern;", "-\t\t\treturn this.pattern.declaringQualification == null && this.pattern.declaringSimpleName == null", "+\t\t\treturn fieldPattern.declaringQualification == null && fieldPattern.declaringSimpleName == null", "-\tint declaringLevel = resolveLevelForType(this.pattern.declaringSimpleName, this.pattern.declaringQualification, receiverBinding);", "+\tint declaringLevel = resolveLevelForType(fieldPattern.declaringSimpleName, fieldPattern.declaringQualification, receiverBinding);", "-\tif (this.pattern.declaringSimpleName == null) return declaringLevel;", "+\tif (fieldPattern.declaringSimpleName == null) return declaringLevel;", "-\tint typeLevel = resolveLevelForType(this.pattern.typeSimpleName, this.pattern.typeQualification, field.type);", "+\tint typeLevel = resolveLevelForType(fieldPattern.typeSimpleName, fieldPattern.typeQualification, field.type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85263b5c99040b024726c9848b301af0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "e4380347a32522b42fc20d0a13b9f152b3de5ec5", "commitAfterChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid analyseArguments(FlowInfo flowInfo)", "signatureAfterChange": " \tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding)", "diff": ["-\tvoid analyseArguments(FlowInfo flowInfo) {", "-\t\tif (this.arguments != null) {", "-\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "-\t\t\t\tif (this.binding.parameterNonNullness != null) {", "+\tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding) {", "+\t\tif (methodArguments != null) {", "+\t\t\tfor (int i = 0, count = methodArguments.length; i < count; i++) {", "+\t\t\t\tif (methodBinding.parameterNonNullness != null) {", "-\t\t\t\t\tBoolean nonNullNess = this.binding.parameterNonNullness[i];", "+\t\t\t\t\tBoolean nonNullNess = methodBinding.parameterNonNullness[i];", "-\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(this.arguments[i].binding);", "+\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "-\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(this.arguments[i].binding);", "+\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "-\t\t\t\tflowInfo.markAsDefinitelyAssigned(this.arguments[i].binding);", "+\t\t\t\tflowInfo.markAsDefinitelyAssigned(methodArguments[i].binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd4d90b8e741f99c04c994a08d45113", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "7457bea53db55dfd5dcff532a14a048723e8aca7", "commitAfterChange": "dd725abebfec1a7ab4e43e5b15844f0dfffaa8da", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tthis.resolvedType = type.resolveType(scope);", "+\t\t\tTypeBinding castType = this.resolvedType = type.resolveType(scope);", "-\t\t\tif (this.resolvedType != null && expressionType != null) {", "-\t\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, this.resolvedType, expressionType, this.expression);", "-\t\t\t\tif (isLegal) {", "-\t\t\t\t\tthis.expression.computeConversion(scope, this.resolvedType, expressionType);", "-\t\t\t\t\tif ((this.bits & UnsafeCastMask) != 0) { // unsafe cast", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this, scope);", "-\t\t\t\t\t} else if ((this.bits & (UnnecessaryCastMASK|IgnoreNeedForCastCheckMASK)) == UnnecessaryCastMASK) { // unnecessary cast ", "-\t\t\t\t\t\tif (!isIndirectlyUsed()) // used for generic type inference or boxing ?", "-\t\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\tif (castType != null) {", "+\t\t\t\tif (expressionType != null) {", "+\t\t\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, castType, expressionType, this.expression);", "+\t\t\t\t\tif (isLegal) {", "+\t\t\t\t\t\tthis.expression.computeConversion(scope, castType, expressionType);", "+\t\t\t\t\t\tif ((this.bits & UnsafeCastMask) != 0) { // unsafe cast", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this, scope);", "+\t\t\t\t\t\t} else {", "+//\t\t\t\t\t\t\tif (castType.isRawType() && scope.compilerOptions().reportRawTypeReference){", "+//\t\t\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, castType);\t\t\t", "+//\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((this.bits & (UnnecessaryCastMASK|IgnoreNeedForCastCheckMASK)) == UnnecessaryCastMASK) { // unnecessary cast ", "+\t\t\t\t\t\t\t\tif (!isIndirectlyUsed()) // used for generic type inference or boxing ?", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else { // illegal cast", "+\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\tthis.resolvedType = this.resolvedType.capture(scope, this.sourceEnd);", "-\t\t\t\t} else { // illegal cast", "-\t\t\t\t\tscope.problemReporter().typeCastError(this,  this.resolvedType, expressionType);", "+\t\t\t\tthis.resolvedType = castType.capture(scope, this.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b53df3eca80d843109e3d61979a160eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void jobWasCancelled(IPath containerPath)", "signatureAfterChange": " public synchronized void jobWasCancelled(IPath containerPath)", "diff": ["-public void jobWasCancelled(IPath containerPath) {", "-\tString indexLocation = computeIndexLocation(containerPath);", "-\tObject o = this.indexes.get(indexLocation);", "-\tif (o instanceof Index) {", "-\t\t((Index) o).monitor = null;", "-\t\tthis.indexes.remove(indexLocation);", "+public synchronized void jobWasCancelled(IPath containerPath) {", "+\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndex index = getIndex(indexLocation);", "+\tif (index != null) {", "+\t\tindex.monitor = null;", "+\t\tthis.indexes.removeKey(indexLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2d04412ba06e0fba701ecd642690759", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 23, "signatureBeforeChange": "  TypeBinding getTypeFromSignature(char[] signature, int start, int end)", "signatureAfterChange": "  TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType)", "diff": ["-TypeBinding getTypeFromSignature(char[] signature, int start, int end) {", "+TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType) {", "-\t\t\t\tthrow new Error(Util.bind(\"error.undefinedBaseType\",String.valueOf(signature[start]))); //$NON-NLS-1$", "+\t\t\t\tproblemReporter.corruptedSignature(enclosingType, signature, start);", "+\t\t\t\t// will never reach here, since error will cause abort", "-\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end);", "+\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6c202930c996f58fda9cb0c28ae71c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": " public synchronized void removeIndex(IPath containerPath)", "signatureAfterChange": " public synchronized void removeIndex(IPath containerPath)", "diff": ["-\tString indexLocation = computeIndexLocation(containerPath);", "-\tFile indexFile = new File(indexLocation);", "+\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndex index = getIndex(indexLocation);", "+\tFile indexFile = null;", "+\tif (index != null) {", "+\t\tindex.monitor = null;", "+\t\tindexFile = index.getIndexFile();", "+\t}", "+\tif (indexFile == null)", "+\t\tindexFile = new File(indexLocation.toOSString()); // index is not cached yet, but still want to delete the file", "-\tObject o = this.indexes.get(indexLocation);", "-\tif (o instanceof Index)", "-\t\t((Index) o).monitor = null;", "-\tthis.indexes.remove(indexLocation);", "+\tthis.indexes.removeKey(indexLocation);"]}], "num": 52437}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d124eae93f8781664d8e9047643c8f9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f1a6f26ab0f5f22a532bc8df04f199e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/TypeAnnotationCodeStream.java", "commitBeforeChange": "6c7de59cc4e8b7d3ff952cb73eea6ba69e83b190", "commitAfterChange": "8eda346eb2b6784c607071f6828a328415623f59", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "signatureAfterChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "diff": ["-\t\tif (typeReference != null && (typeReference.bits & ASTNode.HasTypeAnnotations) != 0) {", "-\t\t\taddAnnotationContext(typeReference, this.position, AnnotationTargetTypeConstants.CAST);", "+\t\t/* We use a slightly sub-optimal generation for intersection casts by resorting to a runtime cast for every intersecting type, but in", "+\t\t   reality this should not matter. In its intended use form such as (I & Serializable) () -> {}, no cast is emitted at all. Also note", "+\t\t   intersection cast type references cannot nest i.e ((X & I) & J) is not valid syntax.", "+\t\t*/", "+\t\tif (typeReference != null) {", "+\t\t\tTypeReference [] typeReferences = typeReference.getTypeReferences();", "+\t\t\tfor (int i = typeReferences.length - 1; i >= 0; i--) {  // need to emit right to left.", "+\t\t\t\ttypeReference = typeReferences[i];", "+\t\t\t\tif (typeReference != null) {", "+\t\t\t\t\tif ((typeReference.bits & ASTNode.HasTypeAnnotations) != 0)", "+\t\t\t\t\t\taddAnnotationContext(typeReference, this.position, i, AnnotationTargetTypeConstants.CAST);", "+\t\t\t\t\tsuper.checkcast(typeReference, typeReference.resolvedType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tsuper.checkcast(null, typeBinding);", "-\t\tsuper.checkcast(typeReference, typeBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8633344ee2083da707a08bfe6d328176", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/TypeAnnotationCodeStream.java", "commitBeforeChange": "963ad4c5e113eba29c599e5fefea6c28cb728772", "commitAfterChange": "cf4d63b8cb3eb4d0964e155767da7aeaa9651363", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "signatureAfterChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding, int currentPosition)", "diff": ["-\tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding) {", "+\tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding, int currentPosition) {", "-\t\t\t\t\tif ((typeReference.bits & ASTNode.HasTypeAnnotations) != 0)", "-\t\t\t\t\t\taddAnnotationContext(typeReference, this.position, i, AnnotationTargetTypeConstants.CAST);", "-\t\t\t\t\tsuper.checkcast(typeReference, typeReference.resolvedType);", "+\t\t\t\t\tif ((typeReference.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\tif (!typeReference.resolvedType.isBaseType()) {", "+\t\t\t\t\t\t\taddAnnotationContext(typeReference, this.position, i, AnnotationTargetTypeConstants.CAST);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// for base type record it against the start position of the expression", "+\t\t\t\t\t\t\taddAnnotationContext(typeReference, currentPosition, i, AnnotationTargetTypeConstants.CAST);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!typeReference.resolvedType.isBaseType()) {", "+\t\t\t\t\t\tsuper.checkcast(typeReference, typeReference.resolvedType, currentPosition);", "+\t\t\t\t\t}", "-\t\t\tsuper.checkcast(null, typeBinding);", "+\t\t\tsuper.checkcast(null, typeBinding, currentPosition);"]}], "num": 48027}
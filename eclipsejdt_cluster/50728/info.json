{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "839912162466a5b7525cbc7d8bd8aa13", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1929c37357618ae93584c872d700856e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "b0e4bc3e5157dbec051001d4b36efba6d30a5b39", "commitAfterChange": "5a1b6ed1ac22ef15e82cc14b2b59be4383e1ddc7", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void test076()", "signatureAfterChange": " public void test076()", "diff": ["-\tif (options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\tif (options.sourceLevel <= ClassFileConstants.JDK1_3) {", "+\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}", "+\tif (options.sourceLevel <= ClassFileConstants.JDK1_4) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\t\\n\"+", "+\t\t\t\t\"\tX(Object o){\t\\n\"+", "+\t\t\t\t\"\t\tclass A { \t\\n\"+", "+\t\t\t\t\"\t\t\tprivate A() {\t\\n\"+ // implicit enclosing instance in non-static context", "+\t\t\t\t\"\t\t\t}\t\\n\"+", "+\t\t\t\t\"\t\t}\t\\n\"+", "+\t\t\t\t\"\t\tclass B extends X {\t\\n\"+", "+\t\t\t\t\"\t\t\tB() {\t\\n\"+", "+\t\t\t\t\"\t\t\t\tsuper(new A(){\t\\n\"+", "+\t\t\t\t\"\t\t\t\t});\t\\n\"+", "+\t\t\t\t\"\t\t\t}\t\\n\"+", "+\t\t\t\t\"\t\t}\t\\n\"+", "+\t\t\t\t\"\t}\t\\n\"+", "+\t\t\t\t\"} \t\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tsuper(new A(){\t\\n\" + ", "+\t\t\t\"\t\t\t\t});\t\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"No enclosing instance of type X is available due to some intermediate constructor invocation\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb89a353b5ebb87cbf2551f05d9f4ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e62c45ebe5881b0e2838be4fcb8a4a48c85b9c0c", "commitAfterChange": "c36a6a2b662267e56067d121b7f34ae48cbcb692", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void test036d()", "signatureAfterChange": " \tpublic void test036d()", "diff": ["-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"Y.java\",", "-\t\t\t\t\"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" +", "-\t\t\t\t\"\tpublic abstract boolean equalTo(Number other);\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"interface Equivalent<T> { boolean equalTo(T other); }\\n\" +", "-\t\t\t\t\"interface EqualityComparable<T> { boolean equalTo(T other); }\\n\"", "-\t\t\t},", "-\t\t\t\"\"", "-\t\t\t// no bridge methods are created here since Y does not define an equalTo(?) method which equals an inherited equalTo method", "-\t\t);", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runConformTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\"Y.java\",", "+\t\t\t\t\t\t\t\"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" +", "+\t\t\t\t\t\t\t\t\t\"\tpublic abstract boolean equalTo(Number other);\\n\" +", "+\t\t\t\t\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface Equivalent<T> { boolean equalTo(T other); }\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface EqualityComparable<T> { boolean equalTo(T other); }\\n\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"\"", "+\t\t\t\t\t// no bridge methods are created here since Y does not define an equalTo(?) method which equals an inherited equalTo method", "+\t\t\t\t\t);", "+\t\t} else {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\"Y.java\",", "+\t\t\t\t\t\t\t\"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" +", "+\t\t\t\t\t\t\t\t\t\"\tpublic abstract boolean equalTo(Number other);\\n\" +", "+\t\t\t\t\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface Equivalent<T> { boolean equalTo(T other); }\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface EqualityComparable<T> { boolean equalTo(T other); }\\n\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\t\t\"\tabstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" + ", "+\t\t\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method equalTo(T) of type Equivalent<T> has the same erasure as equalTo(T) of type EqualityComparable<T> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\");", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53ed1938748909035f83505f34a17034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "285d9f55145724991833663a691553a09e2c72de", "commitAfterChange": "b36a137cc1f0fb3b34ff097a37fce4ecbf12fde7", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 724, "signatureBeforeChange": " public void test0706()", "signatureAfterChange": " public void test0706()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\"\t\tBB bb = new BB();\\n\" + ", "-\t\t\t\"\t\tbb.<Object>test();\\n\" + ", "-\t\t\t\"\t\t((AA<CC>) bb).test();\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class AA<T> { AA<Object> test() {return null;} }\\n\" + ", "-\t\t\t\"class BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "-\t\t\t\"class CC {}\\n\",", "-\t\t},", "-\t\t\"\"", "-\t);", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\t\"\t\tBB bb = new BB();\\n\" + ", "+\t\t\t\t\"\t\tbb.<Object>test();\\n\" + ", "+\t\t\t\t\"\t\t((AA<CC>) bb).test();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class AA<T> { AA<Object> test() {return null;} }\\n\" + ", "+\t\t\t\t\"class BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\t\"class CC {}\\n\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\treturn;", "+\t}", "+\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\t\"\t\tBB bb = new BB();\\n\" + ", "+\t\t\t\t\"\t\tbb.<Object>test();\\n\" + ", "+\t\t\t\t\"\t\t((AA<CC>) bb).test();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class AA<T> { AA<Object> test() {return null;} }\\n\" + ", "+\t\t\t\t\"class BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\t\"class CC {}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\tbb.<Object>test();\\r\\n\" + ", "+\t\t\t\"\t           ^^^^\\n\" + ", "+\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61cf11814629ee3f131beb16158532a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "e62c45ebe5881b0e2838be4fcb8a4a48c85b9c0c", "commitAfterChange": "c36a6a2b662267e56067d121b7f34ae48cbcb692", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\"works\"", "-\t\t);", "+\t\t\t\"works\");", "+\t\t} else {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\t\t\"\tstatic interface I1<E1> { void method(E1 o); }\\n\" +", "+\t\t\t\t\t\t\"\tstatic interface I2<E2> { void method(E2 o); }\\n\" +", "+\t\t\t\t\t\t\"\tstatic interface I3<E3, E4> extends I1<E3>, I2<E4> {}\\n\" +", "+\t\t\t\t\t\t\"\tstatic class Class1 implements I3<String, String> {\\n\" +", "+\t\t\t\t\t\t\"\t\tpublic void method(String o) { System.out.println(o); }\\n\" +", "+\t\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\t\t\t\"\t\tI3<String, String> i = new Class1();\\n\" +", "+\t\t\t\t\t\t\"\t\ti.method(\\\"works\\\");\\n\" +", "+\t\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\t\"}\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tstatic interface I3<E3, E4> extends I1<E3>, I2<E4> {}\\n\" + ", "+\t\t\t\t\t\"\t                 ^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method method(E1) of type X.I1<E1> has the same erasure as method(E2) of type X.I2<E2> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\");", "+\t\t}"]}], "num": 50728}
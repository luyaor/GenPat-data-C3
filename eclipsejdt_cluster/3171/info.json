{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82ec8cd05520d8288feb829cae37b5a2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68c787023d1bdb7edb747a4897e3a9c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "d32899eb4e5db96c386fe27007db09842d368980", "commitAfterChange": "454c09645419e42e424c8ed7d147ba861f3f0f93", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException {", "+\tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException {", "-\t\tint projectLength = affectedProjects.length;", "+\t\tfinal int projectLength = affectedProjects.length;", "-\t\tIClasspathEntry[][] oldResolvedPaths = new IClasspathEntry[projectLength][];", "+\t\tfinal IClasspathEntry[][] oldResolvedPaths = new IClasspathEntry[projectLength][];", "-\t\tboolean wasFiring = manager.isFiring();", "-\t\t\tif (wasFiring)", "-\t\t\t\tmanager.stopDeltas();", "-\t\t\t\t", "-\t\t\tfor(int i = 0; i < projectLength; i++){", "-", "-\t\t\t\tif (monitor != null && monitor.isCanceled()) return;", "-", "-\t\t\t\tJavaProject affectedProject = (JavaProject)affectedProjects[i];", "-\t\t\t\tif (affectedProject == null) continue; // was filtered out", "-\t\t\t\t", "-\t\t\t\tif (++count == remaining) { // re-enable firing for the last operation", "-\t\t\t\t\tif (wasFiring) {", "-\t\t\t\t\t\twasFiring = false;", "-\t\t\t\t\t\tmanager.startDeltas();", "+\t\t\tJavaCore.run(new IWorkspaceRunnable() {", "+\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\tfor(int i = 0; i < projectLength; i++){", "+\t\t", "+\t\t\t\t\t\tif (monitor != null && monitor.isCanceled()) return;", "+\t\t", "+\t\t\t\t\t\tJavaProject affectedProject = (JavaProject)affectedProjects[i];", "+\t\t\t\t\t\tif (affectedProject == null) continue; // was filtered out", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// force a refresh of the affected project (will compute deltas)", "+\t\t\t\t\t\taffectedProject.setRawClasspath(", "+\t\t\t\t\t\t\t\taffectedProject.getRawClasspath(),", "+\t\t\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation,", "+\t\t\t\t\t\t\t\tmonitor,", "+\t\t\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked, // can save resources", "+\t\t\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked && affectedProject.getWorkspace().isAutoBuilding(), // force save?", "+\t\t\t\t\t\t\t\toldResolvedPaths[i],", "+\t\t\t\t\t\t\t\tfalse); // updating - no validation", "-\t\t\t", "-\t\t\t\t// force a refresh of the affected project (will compute deltas)", "-\t\t\t\taffectedProject.setRawClasspath(", "-\t\t\t\t\t\taffectedProject.getRawClasspath(),", "-\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation,", "-\t\t\t\t\t\tmonitor,", "-\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked, // can save resources", "-\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked && affectedProject.getWorkspace().isAutoBuilding(), // force save?", "-\t\t\t\t\t\toldResolvedPaths[i],", "-\t\t\t\t\t\tremaining == 1, // no individual cycle check if more than 1 project", "-\t\t\t\t\t\tfalse); // updating - no validation", "-\t\t\t}", "-\t\t\tif (remaining > 1){", "-\t\t\t\t// use workspace runnable so as to allow marker creation - workaround bug 14733", "-//\t\t\t\tResourcesPlugin.getWorkspace().run(", "-//\t\t\t\t\tnew IWorkspaceRunnable() {", "-//\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\t\tJavaProject.updateAllCycleMarkers(); // update them all at once", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}, ", "-//\t\t\t\t\tmonitor);\t\t\t\t\t", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tif (wasFiring) {", "-\t\t\t\tmanager.startDeltas();", "-\t\t\t\t// in case of exception traversing, deltas may be fired only in the next #fire() iteration", "+\t\t\t},", "+\t\t\tmonitor);", "+\t\t} catch(CoreException e) {", "+\t\t\tif (e instanceof JavaModelException) {", "+\t\t\t\tthrow (JavaModelException)e;", "+\t\t\t} else {", "+\t\t\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f16d6a86e623b147e7d478645829f26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "d32899eb4e5db96c386fe27007db09842d368980", "commitAfterChange": "454c09645419e42e424c8ed7d147ba861f3f0f93", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprivate static void updateVariableValues( \t\tString[] variableNames, \t\tIPath[] variablePaths, \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tprivate static void updateVariableValues( \t\tString[] variableNames, \t\tIPath[] variablePaths, \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tboolean needCycleCheck = false;", "-\t\tHashMap affectedProjects = new HashMap(5);", "+\t\tfinal HashMap affectedProjects = new HashMap(5);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// also check whether it will be necessary to update proj references and cycle markers", "-\t\t\t\t\t\t\t\tif (!needCycleCheck && entry.getPath().segmentCount() ==  1){", "-\t\t\t\t\t\t\t\t\tIPath oldPath = (IPath)JavaModelManager.variableGet(variableName);", "-\t\t\t\t\t\t\t\t\tif (oldPath == JavaModelManager.VariableInitializationInProgress) oldPath = null;", "-\t\t\t\t\t\t\t\t\tif (oldPath != null && oldPath.segmentCount() == 1) {", "-\t\t\t\t\t\t\t\t\t\tneedCycleCheck = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tIPath newPath = variablePaths[k];", "-\t\t\t\t\t\t\t\t\t\tif (newPath != null && newPath.segmentCount() == 1) {", "-\t\t\t\t\t\t\t\t\t\t\tneedCycleCheck = true;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\tboolean wasFiring = manager.isFiring();", "-\t\t\t\tif (wasFiring)", "-\t\t\t\t\tmanager.stopDeltas();", "-\t\t\t\t// propagate classpath change", "-\t\t\t\tIterator projectsToUpdate = affectedProjects.keySet().iterator();", "-\t\t\t\twhile (projectsToUpdate.hasNext()) {", "-", "-\t\t\t\t\tif (monitor != null && monitor.isCanceled()) return;", "-", "-\t\t\t\t\tJavaProject project = (JavaProject) projectsToUpdate.next();", "-\t\t\t\t\t", "-\t\t\t\t\tif (!projectsToUpdate.hasNext()) {", "-\t\t\t\t\t\t// re-enable firing for the last operation", "-\t\t\t\t\t\tif (wasFiring) {", "-\t\t\t\t\t\t\twasFiring = false;", "-\t\t\t\t\t\t\tmanager.startDeltas();", "+\t\t\t\tJavaCore.run(", "+\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\t\t\t// propagate classpath change", "+\t\t\t\t\t\t\tIterator projectsToUpdate = affectedProjects.keySet().iterator();", "+\t\t\t\t\t\t\twhile (projectsToUpdate.hasNext()) {", "+\t\t\t", "+\t\t\t\t\t\t\t\tif (monitor != null && monitor.isCanceled()) return;", "+\t\t\t", "+\t\t\t\t\t\t\t\tJavaProject project = (JavaProject) projectsToUpdate.next();", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tproject", "+\t\t\t\t\t\t\t\t\t.setRawClasspath(", "+\t\t\t\t\t\t\t\t\t\tproject.getRawClasspath(),", "+\t\t\t\t\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation,", "+\t\t\t\t\t\t\t\t\t\tmonitor,", "+\t\t\t\t\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked, // can change resources", "+\t\t\t\t\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked && project.getWorkspace().isAutoBuilding(),// force build if in auto build mode", "+\t\t\t\t\t\t\t\t\t\t(IClasspathEntry[]) affectedProjects.get(project),", "+\t\t\t\t\t\t\t\t\t\tfalse); // updating - no validation", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tproject", "-\t\t\t\t\t\t.setRawClasspath(", "-\t\t\t\t\t\t\tproject.getRawClasspath(),", "-\t\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation,", "-\t\t\t\t\t\t\tmonitor,", "-\t\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked, // can change resources", "-\t\t\t\t\t\t\t!JavaModelManager.IsResourceTreeLocked && project.getWorkspace().isAutoBuilding(),// force build if in auto build mode", "-\t\t\t\t\t\t\t(IClasspathEntry[]) affectedProjects.get(project),", "-\t\t\t\t\t\t\tsize == 1 && needCycleCheck, // no individual check if more than 1 project to update", "-\t\t\t\t\t\t\tfalse); // updating - no validation", "-\t\t\t\t}", "-\t\t\t\tif (size > 1 && needCycleCheck){", "-\t\t\t\t\t// use workspace runnable for protecting marker manipulation", "-//\t\t\t\t\tResourcesPlugin.getWorkspace().run(", "-//\t\t\t\t\t\tnew IWorkspaceRunnable() {", "-//\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\t\t\tJavaProject.updateAllCycleMarkers(); // update them all at once", "-//\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t}, ", "-//\t\t\t\t\t\tmonitor);\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tif (wasFiring) {", "-\t\t\t\t\tmanager.startDeltas();", "-\t\t\t\t\t// in case of exception traversing, deltas may be fired only in the next #fire() iteration", "+\t\t\t\t\t},", "+\t\t\t\t\tmonitor);", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tif (e instanceof JavaModelException) {", "+\t\t\t\t\tthrow (JavaModelException)e;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new JavaModelException(e);"]}], "num": 3171}
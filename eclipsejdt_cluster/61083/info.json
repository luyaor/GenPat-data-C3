{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a1b52f41597cf02908209e0eb39215c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399b58aa32595d1c24084d10d6d55868", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "266ddb07da0dd2618bcfbec3256d70ddf353d13c", "commitAfterChange": "0f0f6cf807937b95cd594ad18f819e710f9be563", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length) throws JavaModelException", "signatureAfterChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["- */", "-protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length) throws JavaModelException {", "-\tSelectionRequestor requestor= new SelectionRequestor(((JavaProject)getJavaProject()).getNameLookup(), this);", "-\tthis.codeSelect(cu, offset, length, requestor);", "-\treturn requestor.getElements();", "-}", "+}", "+protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException {", "+\tNameLookup nameLookup = null;", "+\ttry {", "+\t\t// set the units to look inside", "+\t\tnameLookup = ((JavaProject)getJavaProject()).getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tnameLookup.setUnitsToLookInside(workingCopies);", "+", "+\t\t// code select", "+\t\tSelectionRequestor requestor= new SelectionRequestor(nameLookup, this);", "+\t\tIBuffer buffer = getBuffer();", "+\t\tif (buffer == null) {", "+\t\t\treturn requestor.getElements();", "+\t\t}", "+\t\tint end= buffer.getLength();", "+\t\tif (offset < 0 || length < 0 || offset + length > end ) {", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INDEX_OUT_OF_BOUNDS));", "+\t\t}", "+\t", "+\t\t// fix for 1FVGGKF", "+\t\tJavaProject project = (JavaProject)getJavaProject();", "+\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "+\t\t", "+\t\t// fix for 1FVXGDK", "+\t\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "+\t\tengine.select(cu, offset, offset + length - 1);", "+\t\treturn requestor.getElements();", "+\t} finally {", "+\t\tif (nameLookup != null) {", "+\t\t\tnameLookup.setUnitsToLookInside(null);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c010373dd2500d0642b46a20845fc708", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "1d585a86b41557da7732adc7097fe435bf2e2fd4", "commitAfterChange": "14b3e86b5867a089b4ad9b08915fe83244467ee0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \tpublic IJavaElement getJavaElement()", "diff": ["+\t\t\t// field", "-\t\treturn null;", "+\t\t// local variable", "+\t\tIMethodBinding declaringMethod = getDeclaringMethod();", "+\t\tif (declaringMethod == null) return null;", "+\t\tJavaElement method = (JavaElement) declaringMethod.getJavaElement();", "+\t\tif (!(this.resolver instanceof DefaultBindingResolver)) return null;", "+\t\tVariableDeclaration localVar = (VariableDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "+\t\tif (localVar == null) return null;", "+\t\tint nameStart =  localVar.getStartPosition();", "+\t\tint nameLength = localVar.getLength();", "+\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) localVar.getParent();", "+\t\tint sourceStart = statement.getStartPosition();", "+\t\tint sourceLength = statement.getLength();", "+\t\tchar[] typeSig = this.binding.type.genericTypeSignature();", "+\t\treturn new LocalVariable(method, localVar.getName().getIdentifier(), sourceStart, sourceStart+sourceLength-1, nameStart, nameStart+nameLength-1, new String(typeSig));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe457c125d6da3556c6b4ebe654b247f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "c7e96d986053614747f035da8c0e25c52c212a4c", "commitAfterChange": "d90d9bd95abe34cc0cfe3b06356eb1c26ea7d5bf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": "\r public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\tIBinaryMethod info = (IBinaryMethod) getRawInfo();\r", "-\t\tint paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));\r", "-\t\tfParameterNames = new String[paramCount];\r", "-\t\tfor (int i = 0; i < paramCount; i++) {\r", "-\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$\r", "+\t\tISourceRange sourceRange = getSourceRange();\r", "+\t\tif (sourceRange != null && sourceRange != SourceMapper.fgUnknownRange) {\r", "+\t\t\tIProblemFactory factory = new DefaultProblemFactory();\r", "+\t\t\tDecodeParametersNames decoder = new DecodeParametersNames();\r", "+\t\t\tSourceElementParser parser = new SourceElementParser(decoder, factory);\r", "+\t\t\tint start = sourceRange.getOffset();\r", "+\t\t\tint end = start + sourceRange.getLength();\r", "+\t\t\tparser.parseTypeMemberDeclarations(getSourceMapper().findSource((IType) getParent()), start, end);\r", "+\t\t\tfParameterNames = decoder.getParametersNames();\r", "+\t\t\tif (fParameterNames == null) {\r", "+\t\t\t\tIBinaryMethod info = (IBinaryMethod) getRawInfo();\r", "+\t\t\t\tint paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));\r", "+\t\t\t\tfParameterNames = new String[paramCount];\r", "+\t\t\t\tfor (int i = 0; i < paramCount; i++) {\r", "+\t\t\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tIBinaryMethod info = (IBinaryMethod) getRawInfo();\r", "+\t\t\tint paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));\r", "+\t\t\tfParameterNames = new String[paramCount];\r", "+\t\t\tfor (int i = 0; i < paramCount; i++) {\r", "+\t\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$\r", "+\t\t\t}\r"]}], "num": 61083}
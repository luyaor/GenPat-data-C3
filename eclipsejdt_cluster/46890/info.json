{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bc47b462cac3f9b685573d6ed31b068", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "516e1502be6edad7a2011d16350ecbc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntersectionCastTypeReference.java", "commitBeforeChange": "45ebc844082bfed2acc4b8a65a63db4a1c683431", "commitAfterChange": "718192aaf9b0c9c98eabd9c303872394bcd107d2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "diff": ["-\t\t", "+\t\tTypeBinding primaryType = null;", "+\t\t\t\tprimaryType = type;", "-\t\t\t\tif (type.isArrayType()) { // javac rejects the pedantic cast: (X[] & Serializable & Cloneable) new X[0], what is good for the goose ...", "-\t\t\t\t\tscope.problemReporter().illegalArrayTypeInIntersectionCast(typeReference);", "-\t\t\t\t\thasError = true;", "+\t\t\t\tif (type.isArrayType())", "-\t\t\t\t}", "+\t\t\t\thasError = true;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tif (i > 0 && primaryType.isArrayType()) {", "+\t\t\t\tif (type.id == TypeIds.T_JavaIoSerializable || type.id == TypeIds.T_JavaLangCloneable)", "+\t\t\t\t\tcontinue;", "+\t\t\t\tscope.problemReporter().illegalArrayTypeInIntersectionCast(typeReference);", "+\t\t\tif (typeCount == 0 && primaryType.isArrayType()) {", "+\t\t\t\treturn this.resolvedType = primaryType;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54e3864368a571b1b9ebc8fd2adfe8d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntersectionCastTypeReference.java", "commitBeforeChange": "68f185fc63132d7b106a1c7ca52ed6d004b96329", "commitAfterChange": "4a85a8ee613913420acf3dde5af380e91d3bad2c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "diff": ["-\t\tTypeBinding primaryType = null;", "+\t\t", "-\t\t\t\tprimaryType = type;", "-\t\t\t\tif (type.isArrayType())", "+\t\t\t\tif (type.isArrayType()) { // javac rejects the pedantic cast: (X[] & Serializable & Cloneable) new X[0], what is good for the goose ...", "+\t\t\t\t\tscope.problemReporter().illegalArrayTypeInIntersectionCast(typeReference);", "+\t\t\t\t\thasError = true;", "+\t\t\t\t}", "-\t\t\t\thasError = true;", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tif (i > 0 && primaryType.isArrayType()) {", "-\t\t\t\tif (type.id == TypeIds.T_JavaIoSerializable || type.id == TypeIds.T_JavaLangCloneable)", "-\t\t\t\t\tcontinue;", "-\t\t\t\tscope.problemReporter().illegalArrayTypeInIntersectionCast(typeReference);", "-\t\t\tif (typeCount == 0 && primaryType.isArrayType()) {", "-\t\t\t\treturn this.resolvedType = primaryType;", "-\t\t\t}"]}], "num": 46890}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10f4646df99a26485086dd3c040d1a86", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e1f5ef8cd9669f16ae745eaea8f8560", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b42787861f816a2d5e1ca0d96a18df1cf4233d07", "commitAfterChange": "4e662c88b43a06e20d9e48b2e15e47b3369e62a5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["+\t\t// if found several candidates, then eliminate those not matching argument types", "-\t\tif (foundSize == 0) {", "-\t\t\tif (matchingMethod != null && areParametersAssignable(matchingMethod.parameters, argumentTypes)) {", "+\t\tMethodBinding[] candidates = null;", "+\t\tint candidatesCount = 0;", "+\t\tboolean checkedMatchingMethod = false; // is matchingMethod meeting argument expectation ?", "+\t\tif (foundSize > 0) {", "+\t\t\t// argument type compatibility check", "+\t\t\tfor (int i = 0; i < foundSize; i++) {", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "+\t\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes)) {", "+\t\t\t\t\tswitch (candidatesCount) {", "+\t\t\t\t\t\tcase 0: ", "+\t\t\t\t\t\t\tmatchingMethod = methodBinding; // if only one match, reuse matchingMethod", "+\t\t\t\t\t\t\tcheckedMatchingMethod = true; // matchingMethod is known to exist and match params here", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize]; // only lazily created if more than one match", "+\t\t\t\t\t\t\tcandidates[0] = matchingMethod; // copy back", "+\t\t\t\t\t\t\tmatchingMethod = null;", "+\t\t\t\t\t\t\t// fall through", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tcandidates[candidatesCount] = methodBinding;", "+\t\t\t\t\t}", "+\t\t\t\t\tcandidatesCount++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// if only one matching method left (either from start or due to elimination of rivals), then match is in matchingMethod", "+\t\tif (matchingMethod != null) {", "+\t\t\tif (checkedMatchingMethod || areParametersAssignable(matchingMethod.parameters, argumentTypes)) {", "-\t\tMethodBinding[] candidates = new MethodBinding[foundSize];", "-\t\tint candidatesCount = 0;", "-\t\t// argument type compatibility check", "-\t\tfor (int i = 0; i < foundSize; i++) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "-\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes))", "-\t\t\t\tcandidates[candidatesCount++] = methodBinding;", "-\t\t}", "-\t\tif (candidatesCount == 1) {", "-\t\t\t\t// (if no default abstract) must explicitly look for one instead, which could be a better match", "-\t\t\t\tif (!candidates[0].canBeSeenBy(receiverType, invocationSite, this)) {", "-\t\t\t\t\t// ignore matching method (to be consistent with multiple matches, none visible (matching method is then null)", "-\t\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, null, found);\t\t\t\t\t\t", "-\t\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "-\t\t\t\t\tcompilationUnitScope().recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\t\t\treturn candidates[0];", "-\t\t\t\t}", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, candidates[0], found); // have not checked visibility", "-\t\t}", "-\t\tif (candidatesCount == 0) { // try to find a close match when the parameter order is wrong or missing some parameters", "+\t\t// no match was found, try to find a close match when the parameter order is wrong or missing some parameters", "+\t\tif (candidatesCount == 0) {", "-\t\t// visibility check", "+\t\t// tiebreak using visibility check"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "902cbfaabf7d0cf6350dfa42ee00a3ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "a08b4c389632f0f20a50182ded68880addc0de18", "commitAfterChange": "5cb40e1ad24651b50221770b935dfa647cb41f4d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void buttonPressed(int index)", "signatureAfterChange": " \tpublic void customButtonPressed(int index)", "diff": ["-\tpublic void buttonPressed(int index) {", "-\t\tif (index == IDX_ADDEXTJAR) { // add new", "-\t\t\tFactoryContainer[] newEntries= openExtJarFileDialog(null);", "-\t\t\tif (null == newEntries) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tint insertAt;", "-\t\t\tList selectedElements= fFactoryPathList.getSelectedElements();", "-\t\t\tif (selectedElements.size() == 1) {", "-\t\t\t\tinsertAt= fFactoryPathList.getIndexOfElement(selectedElements.get(0)) + 1;", "-\t\t\t} else {", "-\t\t\t\tinsertAt= fFactoryPathList.getSize();", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < newEntries.length; ++i) {", "-\t\t\t\tfFactoryPathList.addElement(newEntries[i], insertAt + i);", "-\t\t\t\tfFactoryPathList.setChecked(newEntries[i], true);", "-\t\t\t}", "+\tpublic void customButtonPressed(int index) {", "+\t\tFactoryContainer[] newEntries = null;", "+\t\tswitch (index) {", "+\t\tcase IDX_ADDJAR: // add jars in project", "+\t\t\tnewEntries= openJarFileDialog(null);", "+\t\t\taddEntries(newEntries);", "+\t\t\tbreak;", "+\t\t\t", "+\t\tcase IDX_ADDEXTJAR: // add external jars", "+\t\t\tnewEntries= openExtJarFileDialog(null);", "+\t\t\taddEntries(newEntries);", "+\t\t\tbreak;", "+\t\t\t", "+\t\tcase IDX_ADDVAR: // add jar from classpath variable", "+\t\t\tnewEntries= openVariableSelectionDialog(null);", "+\t\t\taddEntries(newEntries);", "+\t\t\tbreak;", "+\t\t}", "+\t\t", "+\t}"]}], "num": 3515}
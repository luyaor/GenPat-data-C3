{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91d24250228cd3304f775403d7f410c7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bad55ab0cf538568c6037eee019469c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "signatureAfterChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "diff": ["+\t\tif (this.currentInvocation instanceof ReferenceExpression)", "+\t\t\treturn; // no inner expressions", "-\t\t\tif (inner instanceof Invocation) {", "+\t\t\tif (inner instanceof ReferenceExpression) {", "+\t\t\t\tReferenceExpression referenceExpression = (ReferenceExpression) inner;", "+\t\t\t\tMethodBinding compileTimeDecl = referenceExpression.prepareForInferenceResult(this.scope);", "+\t\t\t\tif\t(compileTimeDecl != null) {", "+\t  \t\t\t\tTypeVariableBinding[] variables = compileTimeDecl.typeVariables;", "+\t\t\t\t\tif (variables != Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\t\t\tTypeBinding[] arguments = getSolutions(variables, (InvocationSite) inner, bounds);", "+\t\t\t\t\t\treferenceExpression.binding = this.environment.createParameterizedGenericMethod(compileTimeDecl, arguments);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (inner instanceof Invocation) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce28934a25f8938130f1e5e2133ebe12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9122b48400c1b7bbd5f34248ba27601e8c1f8c81", "commitAfterChange": "b7727722e1a93459ec6844ad6bb94bb1a32aeb2c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tif (resolvedImport instanceof MethodBinding && !importBinding.onDemand) {", "-\t\t\t\t\t\t\tMethodBinding staticMethod = (MethodBinding) resolvedImport;", "-\t\t\t\t\t\t\tif (CharOperation.equals(staticMethod.selector, selector))", "-\t\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "-\t\t\t\t\t\t\t\tpossible = findMethod(staticMethod.declaringClass, staticMethod.selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\tif (!importBinding.onDemand && importBinding.isStatic()) {", "+\t\t\t\t\t\t\tif (resolvedImport instanceof MethodBinding) {", "+\t\t\t\t\t\t\t\tMethodBinding staticMethod = (MethodBinding) resolvedImport;", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(staticMethod.selector, selector))", "+\t\t\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "+\t\t\t\t\t\t\t\t\tpossible = findMethod(staticMethod.declaringClass, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t} else if (resolvedImport instanceof FieldBinding) {", "+\t\t\t\t\t\t\t\t// check to see if there are also methods with the same name", "+\t\t\t\t\t\t\t\tFieldBinding staticField = (FieldBinding) resolvedImport;", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(staticField.name, selector)) {", "+\t\t\t\t\t\t\t\t\t// must find the importRef's type again since the field can be from an inherited type", "+\t\t\t\t\t\t\t\t\tchar[][] importName = importBinding.reference.tokens;", "+\t\t\t\t\t\t\t\t\tTypeBinding referencedType = getType(importName, importName.length - 1);", "+\t\t\t\t\t\t\t\t\tif (referencedType != null)", "+\t\t\t\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "+\t\t\t\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) referencedType, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}"]}], "num": 58669}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d26cbfbcd8046f8816d6435973041105", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20497a6310529b88ac3494fce15bc935", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprotected String getKey(IType type)", "signatureAfterChange": " \t \tprotected String getKey(IType type)", "diff": ["-\t\t// TODO (jerome) handle secondary types", "-\t\tkey.append(type.getTypeQualifiedName('$'));", "+\t\tString typeQualifiedName = type.getTypeQualifiedName('$');", "+\t\tICompilationUnit cu = (ICompilationUnit) type.getAncestor(IJavaElement.COMPILATION_UNIT);", "+\t\tif (cu != null) {", "+\t\t\tString cuName = cu.getElementName();", "+\t\t\tString mainTypeName = cuName.substring(0, cuName.lastIndexOf('.'));", "+\t\t\tint end = typeQualifiedName.indexOf('$');", "+\t\t\tif (end == -1)", "+\t\t\t\tend = typeQualifiedName.length();", "+\t\t\tString topLevelTypeName = typeQualifiedName.substring(0, end);", "+\t\t\tif (!mainTypeName.equals(topLevelTypeName)) {", "+\t\t\t\tkey.append(mainTypeName);", "+\t\t\t\tkey.append('~');", "+\t\t\t}", "+\t\t}", "+\t\tkey.append(typeQualifiedName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7042a46a8500425efd23abab614d32ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " private IBinaryType getJarBinaryTypeInfo(PackageFragment pkg, boolean fullyInitialize) throws CoreException, IOException, ClassFormatException", "signatureAfterChange": " private IBinaryType getJarBinaryTypeInfo(PackageFragment pkg, boolean fullyInitialize) throws CoreException, IOException, ClassFormatException", "diff": ["+\tZipFile annotationZip = null;", "-\t\t\treturn new ClassFileReader(contents, fileName.toCharArray(), fullyInitialize);", "+\t\t\tClassFileReader reader = new ClassFileReader(contents, fileName.toCharArray(), fullyInitialize);", "+\t\t\tif (root.getKind() == IPackageFragmentRoot.K_BINARY) {", "+\t\t\t\tJavaProject javaProject = (JavaProject) getAncestor(IJavaElement.JAVA_PROJECT);", "+\t\t\t\tIClasspathEntry entry = javaProject.getClasspathEntryFor(getPath());", "+\t\t\t\tif (entry != null) {", "+\t\t\t\t\tIProject project = javaProject.getProject();", "+\t\t\t\t\tIPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false);", "+\t\t\t\t\tif (externalAnnotationPath != null)", "+\t\t\t\t\t\tsetupExternalAnnotationProvider(project, externalAnnotationPath, annotationZip, reader, ", "+\t\t\t\t\t\t\t\tentryName.substring(0, entryName.length() - SuffixConstants.SUFFIX_CLASS.length));", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\treturn reader;", "+\t\tJavaModelManager.getJavaModelManager().closeZipFile(annotationZip);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f46939156ac60d074b64780640ce8de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "87c50fb2021a87bd8a7e850d4f8d8664d740e464", "commitAfterChange": "a6fd772365f64057a96db7d3c02cb2f36452002f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, ASTRewrite rewriter) throws JavaModelException", "signatureAfterChange": " \tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, ASTRewrite rewriter, ICompilationUnit cu) throws JavaModelException", "diff": ["-\tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, ASTRewrite rewriter) throws JavaModelException {", "+\tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, ASTRewrite rewriter, ICompilationUnit cu) throws JavaModelException {", "-\t\t\tif (astCU.getPackage() != null)", "-\t\t\t\trewriter.set(astCU, CompilationUnit.PACKAGE_PROPERTY, null, null);", "+\t\t\tPackageDeclaration pkg = astCU.getPackage();", "+\t\t\tif (pkg != null) {", "+\t\t\t\tint pkgStart;", "+\t\t\t\tJavadoc javadoc = pkg.getJavadoc();", "+\t\t\t\tif (javadoc != null) {", "+\t\t\t\t\tpkgStart = javadoc.getStartPosition() + javadoc.getLength() + 1;", "+\t\t\t\t} else {", "+\t\t\t\t\tpkgStart = pkg.getStartPosition();", "+\t\t\t\t}", "+\t\t\t\tint extendedStart = astCU.getExtendedStartPosition(pkg);", "+\t\t\t\tif (pkgStart != extendedStart) {", "+\t\t\t\t\t// keep the comments associated with package declaration", "+\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=247757", "+\t\t\t\t\tString commentSource = cu.getSource().substring(extendedStart, pkgStart);", "+\t\t\t\t\tASTNode comment = rewriter.createStringPlaceholder(commentSource, ASTNode.PACKAGE_DECLARATION);", "+\t\t\t\t\trewriter.set(astCU, CompilationUnit.PACKAGE_PROPERTY, comment, null);", "+\t\t\t\t} else {", "+\t\t\t\t\trewriter.set(astCU, CompilationUnit.PACKAGE_PROPERTY, null, null);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f728066fd251a471632e778fa59c5aa4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic void accept(ICompilationUnit sourceUnit)", "signatureAfterChange": "\r \tpublic void accept(ICompilationUnit sourceUnit)", "diff": ["-\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "-\t\tCompilationUnitDeclaration parsedUnit =\r", "-\t\t\tthis.parser.dietParse(sourceUnit, result);\r", "+\t\t// diet parse\r", "+\t\tIFile file = ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(new String(sourceUnit.getFileName())));\r", "+\t\tCompilationUnit compilationUnit = (CompilationUnit)JavaCore.create(file);\r", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(sourceUnit, this, file, compilationUnit);\r", "+\t\t// build bindings\r", "+\t\t\r", "+\t\t// remember parsed unit\r", "+\t\tImportReference pkg = parsedUnit.currentPackage;\r", "+\t\tchar[][] packageName = pkg == null ? null : pkg.tokens;\r", "+\t\tchar[] mainTypeName = sourceUnit.getMainTypeName();\r", "+\t\tchar[] qualifiedName = packageName == null ? mainTypeName : CharOperation.concatWith(packageName, mainTypeName, '.');\r", "+\t\tthis.parsedUnits.put(qualifiedName, parsedUnit);\r"]}], "num": 18726}
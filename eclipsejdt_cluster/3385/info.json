{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab0e16ef5cb54d785c9e93000501f36c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "311bf0bcc95c67d3ed3dc55b8cfb8c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tstatic Map getLibraryMap()", "signatureAfterChange": " \t \tstatic Map getLibraryMap()", "diff": ["-\t\t\tPreferences preferences = JavaCore.getPlugin().getPluginPreferences();", "-\t\t\tpreferences.addPropertyChangeListener(listener);", "+\t\t\tIEclipsePreferences instancePreferences = JavaCore.getInstancePreferences();", "+\t\t\tinstancePreferences.addPreferenceChangeListener(listener);", "-\t\t\tString[] propertyNames = preferences.propertyNames();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++) {", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tif (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\trecreatePersistedUserLibraryEntry(propertyName, preferences.getString(propertyName), false, false);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// won't happen: no rebinding", "+\t\t\ttry {", "+\t\t\t\tString[] propertyNames = instancePreferences.keys();", "+\t\t\t\tfor (int i = 0; i < propertyNames.length; i++) {", "+\t\t\t\t\tString propertyName = propertyNames[i];", "+\t\t\t\t\tif (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tString propertyValue = instancePreferences.get(propertyName, null);", "+\t\t\t\t\t\t\tif (propertyValue != null)", "+\t\t\t\t\t\t\t\trecreatePersistedUserLibraryEntry(propertyName,propertyValue, false, false);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// won't happen: no rebinding", "+\t\t\t\t\t\t}", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\t// TODO (frederic) see if it's necessary to report this exception"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "916469e684a23b83c32ba4e8e2c0b047", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "e90ef260a14686abccfc48006caf4e4749a92ca5", "commitAfterChange": "2881115df3db39d2fe7ea74c50c55027d1324a16", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tstatic Map getLibraryMap()", "signatureAfterChange": " \t \tstatic Map getLibraryMap()", "diff": ["-\t\tif (userLibraries == null) {", "-\t\t\tuserLibraries= new HashMap();", "-\t\t\t// load variables and containers from preferences into cache", "-\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\t\tinstancePreferences.addPreferenceChangeListener(listener);", "-", "-\t\t\t// only get variable from preferences not set to their default", "+\t\tif (UserLibraries == null) {", "+\t\t\tHashMap libraries = (HashMap) InitializingLibraries.get();", "+\t\t\tif (libraries != null)", "+\t\t\t\treturn libraries;", "-\t\t\t\tString[] propertyNames = instancePreferences.keys();", "-\t\t\t\tfor (int i = 0; i < propertyNames.length; i++) {", "-\t\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\t\tif (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tString propertyValue = instancePreferences.get(propertyName, null);", "-\t\t\t\t\t\t\tif (propertyValue != null)", "-\t\t\t\t\t\t\t\trecreatePersistedUserLibraryEntry(propertyName,propertyValue, false, false);", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// won't happen: no rebinding", "+\t\t\t\tInitializingLibraries.set(libraries = new HashMap());", "+\t\t\t\t// load variables and containers from preferences into cache", "+\t\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\t\tinstancePreferences.addPreferenceChangeListener(listener);", "+\t", "+\t\t\t\t// only get variable from preferences not set to their default", "+\t\t\t\ttry {", "+\t\t\t\t\tString[] propertyNames = instancePreferences.keys();", "+\t\t\t\t\tfor (int i = 0; i < propertyNames.length; i++) {", "+\t\t\t\t\t\tString propertyName = propertyNames[i];", "+\t\t\t\t\t\tif (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tString propertyValue = instancePreferences.get(propertyName, null);", "+\t\t\t\t\t\t\t\tif (propertyValue != null)", "+\t\t\t\t\t\t\t\t\trecreatePersistedUserLibraryEntry(propertyName,propertyValue, false, false);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t// won't happen: no rebinding", "+\t\t\t\t\t\t\t}", "+\t\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\t\t// nothing to do in this case", "-\t\t\t} catch (BackingStoreException e) {", "-\t\t\t\t// nothing to do in this case", "+\t\t\t\tUserLibraries = libraries;", "+\t\t\t} finally {", "+\t\t\t\tInitializingLibraries.set(null);", "-\t\treturn userLibraries;", "+\t\treturn UserLibraries;"]}], "num": 3385}
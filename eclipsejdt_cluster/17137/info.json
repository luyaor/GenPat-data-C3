{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31639781de9724111b167748ced26fe9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a6836276f837851e2aa899cf839883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "86397dfc80023f615cc88c0705b2ada916e6efb2", "commitAfterChange": "24624a25f60573230ed7652730faedca15fd4d8b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException", "diff": ["+\t\treturn addPackageFragmentRoot(projectPath, sourceFolderName, exclusionPatterns, true/*exclusion patterns*/, specificOutputLocation);", "+\t}", "-\t\tIClasspathEntry entry = JavaCore.newSourceEntry(path, exclusionPatterns == null ? new Path[0] : exclusionPatterns, outputPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c9bec823089fac406405e00e745392b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "4224ed338b096a221dba6dc1bfeabf46bad0c43f", "commitAfterChange": "4f3e6e808c3352288b20b9a17621a861ee976387", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public ICompilationUnit getCompilationUnit(String name)", "signatureAfterChange": " public ICompilationUnit getCompilationUnit(String name)", "diff": ["-\tICompilationUnit primaryCU =  new CompilationUnit(this, name, DefaultWorkingCopyOwner.PRIMARY);", "-\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\tMap sharedWorkingCopies = manager.sharedWorkingCopies;", "-\tMap perOwnerWorkingCopies = (Map) sharedWorkingCopies.get(DefaultWorkingCopyOwner.PRIMARY);", "-\tif (perOwnerWorkingCopies == null) return primaryCU;", "-\tICompilationUnit sharedWC = (ICompilationUnit)perOwnerWorkingCopies.get(primaryCU);", "-\tif (sharedWC == null) {", "-\t\treturn primaryCU;", "-\t} else {", "-\t\treturn sharedWC;", "-\t}", "+\treturn  new CompilationUnit(this, name, DefaultWorkingCopyOwner.PRIMARY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1e40f2b907852dba62e81d80b18d1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "1ffd93ec138fc38a22c082921b3ee25a9e75ba37", "commitAfterChange": "cef21f9db5e181946eac0a0d175b10763094848c", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProgressMonitor monitor) throws JavaModelException", "diff": ["+ */", "+public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProgressMonitor monitor) throws JavaModelException {", "+\treturn getWorkingCopy(workingCopyOwner, null, monitor);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5918e7949aeb70e09bfe043358996a13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "0ce8ad5b0d44dc70bab93f6f64c0b898ece7748d", "commitAfterChange": "42f83db749431568a0412462e46b75fee51080ac", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "signatureAfterChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["-", "-\tJavaModelManager manager= JavaModelManager.getJavaModelManager();", "-\tWorkingCopyOwner workingCopyOwner = BufferFactoryWrapper.create(factory);", "-\tIPath path = getPath();", "-\tCompilationUnit workingCopy = new CompilationUnit(null/*not needed since don't create*/, path.lastSegment(), workingCopyOwner);", "-\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "-\t\tmanager.getPerWorkingCopyInfo(workingCopy, path, false/*don't create*/, false/*don't record usage*/, null/*not need since don't create*/);", "-\tif (perWorkingCopyInfo == null) return null;", "-\treturn perWorkingCopyInfo.getWorkingCopy();", "+\treturn findWorkingCopy(BufferFactoryWrapper.create(factory));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81c4eba7b4eadefe9164c640165e7ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t// AND use the same owner.", "-\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\tMap sharedWorkingCopies = manager.sharedWorkingCopies;", "-\t", "-\tMap perOwnerWorkingCopies = (Map) sharedWorkingCopies.get(workingCopyOwner);", "-\tif (perOwnerWorkingCopies == null){", "-\t\tperOwnerWorkingCopies = new HashMap();", "-\t\tsharedWorkingCopies.put(workingCopyOwner, perOwnerWorkingCopies);", "+\tCompilationUnit workingCopy = new CompilationUnit((PackageFragment)getParent(), getElementName(), workingCopyOwner);", "+\tIPath path = getPath();", "+\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "+\t\tmanager.getPerWorkingCopyInfo(workingCopy, path, false/*don't create*/, true/*record usage*/, null/*not used since don't create*/);", "+\tif (perWorkingCopyInfo != null) {", "+\t\treturn perWorkingCopyInfo.getWorkingCopy(); // return existing handle instead of the one created above", "-\tCompilationUnit workingCopy = (CompilationUnit)perOwnerWorkingCopies.get(this);", "-\tif (workingCopy != null) {", "-\t\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "-\t\t\tmanager.getPerWorkingCopyInfo(workingCopy, false/*don't create*/, true/*record usage*/, null/*not used since don't create*/);", "-\t\tif (perWorkingCopyInfo != null) {", "-", "-\t\t\tif (SHARED_WC_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"Incrementing use count of shared working copy \" + workingCopy.toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t}", "-", "-\t\t\treturn workingCopy;", "-\t\t}", "-\t} ", "-\tworkingCopy = new CompilationUnit((PackageFragment)getParent(), getElementName(), workingCopyOwner);", "-\tBecomeWorkingCopyOperation op = new BecomeWorkingCopyOperation(workingCopy, perOwnerWorkingCopies, problemRequestor);", "+\tBecomeWorkingCopyOperation op = new BecomeWorkingCopyOperation(workingCopy, path, problemRequestor);"]}], "num": 17137}
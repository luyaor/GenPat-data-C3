{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a2f2ea6ece1be17eb8237a2e3d98b9e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dca1529677a04b6ffc0590722bd4962", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tLocalTypeDeclaration localTypeDeclaration, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LocalTypeDeclaration localTypeDeclaration, BlockScope scope)", "diff": ["-\tpublic boolean visit(", "-\t\t\tLocalTypeDeclaration localTypeDeclaration,", "-\t\t\tBlockScope scope) {", "-\t\tif ((matchSet.matchContainer & SearchPattern.METHOD) != 0) {", "-\t\t\tmatchSet.checkMatching(localTypeDeclaration);", "-\t\t}", "+\t}", "+\tpublic boolean visit(LocalTypeDeclaration localTypeDeclaration, BlockScope scope) {", "+\t\tmatchSet.checkMatching(localTypeDeclaration);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d13eeb45538effc92247db0233031945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope scope)", "diff": ["-public class LocalDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "-\tpublic boolean visit(", "-\t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration,", "-\t\t\tBlockScope scope) {", "-\t\tif ((matchSet.matchContainer & SearchPattern.METHOD) != 0) {", "-\t\t\tmatchSet.checkMatching(anonymousTypeDeclaration);", "-\t\t}", "-\t\treturn true; ", "-\t}", "+public class MethodButNoClassDeclarationVisitor extends NoClassNoMethodDeclarationVisitor {", "+\tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope scope) {", "+\t\tmatchSet.checkMatching(anonymousTypeDeclaration);", "+\t\treturn true; ", "+\t}"]}], "num": 21377}
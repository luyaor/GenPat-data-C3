{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ec09d1a1a33892e3f103a585c813992", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "876f3b1f7aa6b64659b6aa8eab97824e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \t \tpublic LabeledStatement convert(org.eclipse.jdt.internal.compiler.ast.LabeledStatement statement)", "signatureAfterChange": " \t \tpublic SingleMemberAnnotation convert(org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation annotation)", "diff": ["+\t", "+\tpublic SingleMemberAnnotation convert(org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation annotation) {", "+\t\tSingleMemberAnnotation singleMemberAnnotation = this.ast.newSingleMemberAnnotation();", "+\t\tsetTypeNameForAnnotation(annotation, singleMemberAnnotation);", "+\t\tsingleMemberAnnotation.setValue(convert(annotation.memberValue));", "+\t\tint start = annotation.sourceStart;", "+\t\tint end = annotation.declarationSourceEnd;", "+\t\tsingleMemberAnnotation.setSourceRange(start, end - start + 1);", "+\t\treturn singleMemberAnnotation;", "+\t}", "-\t", "-\tpublic LabeledStatement convert(org.eclipse.jdt.internal.compiler.ast.LabeledStatement statement) {", "-\t\tLabeledStatement labeledStatement = this.ast.newLabeledStatement();", "-\t\tlabeledStatement.setSourceRange(statement.sourceStart, statement.sourceEnd - statement.sourceStart + 1);\t", "-\t\torg.eclipse.jdt.internal.compiler.ast.Statement body = statement.statement;", "-\t\tlabeledStatement.setBody(convert(body));", "-\t\tSimpleName name = this.ast.newSimpleName(new String(statement.label));", "-\t\tretrieveIdentifierAndSetPositions(statement.sourceStart, statement.sourceEnd, name);", "-\t\tlabeledStatement.setLabel(name);", "-\t\treturn labeledStatement;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eddb18e723bec8ce69ec806daf694253", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement)", "signatureAfterChange": " \t \tpublic NormalAnnotation convert(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation annotation)", "diff": ["+\tpublic NormalAnnotation convert(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation annotation) {", "+\t\tNormalAnnotation normalAnnotation = this.ast.newNormalAnnotation();", "+\t\tsetTypeNameForAnnotation(annotation, normalAnnotation);", "+\t\torg.eclipse.jdt.internal.compiler.ast.MemberValuePair[] memberValuePairs = annotation.memberValuePairs;", "+\t\tif (memberValuePairs != null) {", "+\t\t\tfor (int i = 0, max = memberValuePairs.length; i < max; i++) {", "+\t\t\t\tnormalAnnotation.values().add(convert(memberValuePairs[i]));", "+\t\t\t}", "+\t\t}", "+\t\tint start = annotation.sourceStart;", "+\t\tint end = annotation.declarationSourceEnd;", "+\t\tnormalAnnotation.setSourceRange(start, end - start + 1);", "+\t\treturn normalAnnotation;", "+\t}", "-\tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement) {", "-\t\tAssertStatement assertStatement = this.ast.newAssertStatement();", "-\t\tint end = statement.assertExpression.sourceEnd + 1;", "-\t\tassertStatement.setExpression(convert(statement.assertExpression));", "-\t\torg.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument = statement.exceptionArgument;", "-\t\tif (exceptionArgument != null) {", "-\t\t\tassertStatement.setMessage(convert(exceptionArgument));", "-\t\t\tend = exceptionArgument.sourceEnd + 1;", "-\t\t}", "-\t\tint start = statement.sourceStart;", "-\t\tint sourceEnd = retrieveEndingSemiColonPosition(end, this.compilationUnitSource.length);", "-\t\tassertStatement.setSourceRange(start, sourceEnd - start + 1);", "-\t\treturn assertStatement;", "-\t}"]}], "num": 51259}
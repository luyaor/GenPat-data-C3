{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c105b5fa3eb673f14cbb1149c04540e6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "108dad122f7e2e8f9086081d56585dec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 1469, "methodNumberAfterChange": 1469, "signatureBeforeChange": " public void test1434()", "signatureAfterChange": " public void test1434()", "diff": ["-// FIXME javac8 rejects", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t\t: // 1.8 is stricter:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l2 = m2((Class)Foo.class);\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Object to Foo\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l2 = m2((Class)Foo.class);\\n\" + ", "+\t\t\t\"\t             ^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac6cd76d28f5b77c9272cab072d09c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 1231, "methodNumberAfterChange": 1232, "signatureBeforeChange": " public void test1200()", "signatureAfterChange": " public void test1200()", "diff": ["+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\"", "+\t\t: // fewer errors in 1.8+:", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 17)\\n\" +", "+\t\t\t\"\treturn (Map<Class<?>, X>) make(type, value);//2\\n\" +", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Cannot cast from X.Map<Class<capture#2-of ?>,X> to X.Map<Class<?>,X>\\n\" + // FIXME: javac8 only reports a warning here", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 25)\\n\" +", "+\t\t\t\"\treturn (Map<Class<?>, X>) make(X.class, value);//4\\n\" +", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Cannot cast from X.Map<Class<X>,X> to X.Map<Class<?>,X>\\n\" +", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4b5b4177aae87b56570ba05c62dfa3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 527, "methodNumberAfterChange": 527, "signatureBeforeChange": " \tpublic void test0508()", "signatureAfterChange": " \tpublic void test0508()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tint i = l.get(0).length;\\n\" + ", "+\t\t\t\t\"\t                 ^^^^^^\\n\" + ", "+\t\t\t\t\"length cannot be resolved or is not a field\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tSerializable s2 = b ? l.get(0) : s;\\n\" + ", "+\t\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from capture#3-of ? super int[] to Serializable\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d04d9fa5fb69c7b375faa2f9212020a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": " \tpublic void test0391()", "signatureAfterChange": " \tpublic void test0391()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tString[] s = foo(null, new String[]{ \\\"hello\\\" });\\n\" + ", "+\t\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from String to String[]\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic <F> F foo(F f, F... others) {\\n\" + ", "+\t\t\t\t\"\t                           ^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Potential heap pollution via varargs parameter others\\n\" + ", "+\t\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "781ca51d95b0f14d8c788ca688944c17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "commitAfterChange": "f0ad677ecfc3fb2aae0264f20715771e958071e0", "methodNumberBeforeChange": 1361, "methodNumberAfterChange": 1361, "signatureBeforeChange": " public void test1326()", "signatureAfterChange": " public void test1326()", "diff": ["-// FAIL ERRMSG", "-\tif (this.complianceLevel >= ClassFileConstants.JDK1_8)", "-\t\treturn;", "+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tvoid bar(X x, X<String> xs) {\\n\" + ", "+\t\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tX<String> xs2 = foo(xs, x).identity();\\n\" + ", "+\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\"The method foo(X<T>, X<U>) in the type X<E> is not applicable for the arguments (X<String>, X)\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ccab39c7f4ef7be7681bb90a16d756c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 1360, "methodNumberAfterChange": 1360, "signatureBeforeChange": " public void test1325()", "signatureAfterChange": " public void test1325()", "diff": ["-// FIXME javac8 rejects", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8", "+\t\t\t?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t\t: // 1.8 is stricter:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tvoid bar(X x) {\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String> xs2 = foo(x);\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Object to X<String>\\n\" + ", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92cec086761bfc0c3a0f11a01a37d853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "commitAfterChange": "f0ad677ecfc3fb2aae0264f20715771e958071e0", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " \tpublic void test0151()", "signatureAfterChange": " \tpublic void test0151()", "diff": ["-\t// FAIL ERRMSG", "-\t\tif (this.complianceLevel >= ClassFileConstants.JDK1_8)", "-\t\t\treturn;", "+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<T extends X> X(T[] ta, List<T> lt) {\\n\" + ", "+\t\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tnew X<Object>(args, new ArrayList<String>());\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The constructor X<Object>(String[], ArrayList<String>) is undefined\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a34a4b7a7fdf4223cd9b64cbcee36e72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 544, "methodNumberAfterChange": 544, "signatureBeforeChange": " \tpublic void test540()", "signatureAfterChange": " \tpublic void test540()", "diff": ["-\t// javac incorrectly rejects it", "+\t// test paramtype argument compatibility", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Baz.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tinterface Bar extends Foo {\\r\\n\" + ", "+\t\t\t\"\t                      ^^^\\n\" + ", "+\t\t\t\"Foo is a raw type. References to generic type Foo<X> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Baz.java (at line 10)\\r\\n\" + ", "+\t\t\t\"\treturn visit(c, d);\\r\\n\" + ", "+\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"The method visit(Collection<? extends Foo<?>>, D) in the type Baz<R,D> is not applicable for the arguments (Collection<Bar>, D)\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acb10144b4ca6e6b5b81fe86783a48d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c87a79156f1dc9a83ba58914de459221d3943f61", "commitAfterChange": "1de8e2f6bc728cee690d70795383b83c1f0d652a", "methodNumberBeforeChange": 1327, "methodNumberAfterChange": 1327, "signatureBeforeChange": " public void test1292()", "signatureAfterChange": " public void test1292()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tresult.addAll( (List<?>)list );\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\t\"The method addAll(Collection<? extends E>) in the type List<E> is not applicable for the arguments (List<capture#1-of ?>)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tList<A> a = moreSpecific(b);\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from List<X.B> to List<X.A>\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}], "num": 64477}
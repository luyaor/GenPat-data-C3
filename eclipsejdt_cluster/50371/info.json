{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e160a43c2da4f3aa17a627bc2d951ed", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a9711419e3d4c2c197c1e7568ee459e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tif (reference instanceof QualifiedNameReference) {", "-\t\tthis.matchReportReference((QualifiedNameReference)reference, element, accuracy, locator);", "-\t} else if (reference instanceof QualifiedTypeReference) {", "-\t\tthis.matchReportReference((QualifiedTypeReference)reference, element, accuracy, locator);", "-\t} else if (reference instanceof ArrayTypeReference) {", "-\t\tthis.matchReportReference((ArrayTypeReference)reference, element, accuracy, locator);", "-\t} else {", "+\tif (reference instanceof QualifiedNameReference)", "+\t\tmatchReportReference((QualifiedNameReference) reference, element, accuracy, locator);", "+\telse if (reference instanceof QualifiedTypeReference)", "+\t\tmatchReportReference((QualifiedTypeReference) reference, element, accuracy, locator);", "+\telse if (reference instanceof ArrayTypeReference)", "+\t\tmatchReportReference((ArrayTypeReference) reference, element, accuracy, locator);", "+\telse", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c65086304672346bb7737fcf0af3b344", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 137, "signatureBeforeChange": " public void invalidType(ASTNode location, TypeBinding type)", "signatureAfterChange": " public void invalidType(ASTNode location, TypeBinding type)", "diff": ["-}", "+\t\tcase NonStaticReferenceInStaticContext :", "+\t\t\tid = IProblem.TypeVariableReferenceFromStaticContext;", "+\t\t    break;", "+\t\tcase IllegalSuperTypeVariable : ", "+\t\t    id = IProblem.IllegalTypeVariableSuperReference;", "+\t\t    break;", "+\t} else if (location instanceof QualifiedTypeReference) {", "+\t\tQualifiedTypeReference ref = (QualifiedTypeReference) location;", "+\t\tif (type instanceof ReferenceBinding) {", "+\t\t\tchar[][] name = ((ReferenceBinding) type).compoundName;", "+\t\t\tend = (int) ref.sourcePositions[name.length - 1];", "+\t\t}", "+\t} else if (location instanceof ImportReference) {", "+\t\tImportReference ref = (ImportReference) location;", "+\t\tif (type instanceof ReferenceBinding) {", "+\t\t\tchar[][] name = ((ReferenceBinding) type).compoundName;", "+\t\t\tend = (int) ref.sourcePositions[name.length - 1];", "+\t\t}", "-\t\tnew String[] {new String(type.readableName())},", "+\t\tnew String[] {new String(type.readableName()) },\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59366d07ead035c8972a71f3330aeb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tint leftLevel = this.leftPattern.matchLevel(reference, true);", "-\tif (leftLevel == ACCURATE_MATCH || leftLevel == INACCURATE_MATCH) {", "-\t\tthis.leftPattern.matchReportReference(reference, element, accuracy, locator);", "-\t} else {", "-\t\tthis.rightPattern.matchReportReference(reference, element, accuracy, locator);", "+\tif (this.bestMatch != null) {", "+\t\tthis.bestMatch.matchReportReference(reference, element, accuracy, locator);", "+\t\treturn;", "+", "+\tSearchPattern closestPattern = null;", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++) {", "+\t\tint newLevel = this.patterns[i].matchLevel(reference, true);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) {", "+\t\t\t\tthis.patterns[i].matchReportReference(reference, element, accuracy, locator);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tlevel = newLevel;", "+\t\t\tclosestPattern = this.patterns[i];", "+\t\t}", "+\t}", "+\tif (closestPattern != null)", "+\t\tclosestPattern.matchReportReference(reference, element, accuracy, locator);"]}], "num": 50371}
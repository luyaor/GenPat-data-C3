{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "103d53c496c484d22c8d9ce7a0d54047", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b626bbbb359cdd1b1d2e4b0d54c4f2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java", "commitBeforeChange": "88e5aa006a98c27f378a9ba9656ac196342e257f", "commitAfterChange": "80c078ddcf769ceb84a30bdd1354fc49a196e760", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r void buildDirectoryStructure()", "signatureAfterChange": "\r \r boolean isPackage(String qualifiedPackageName)", "diff": ["-\r", "-void buildDirectoryStructure() {\r", "-\tthis.directoryCache = new SimpleLookupTable(101);\r", "-\r", "-\ttry {\r", "-\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {\r", "-\t\t\tSystem.out.println(\"[ClasspathJar.buildDirectoryStructure()] Creating ZipFile on \" + zipFilename); //$NON-NLS-1$\r", "-\t\t}\r", "-\t\tthis.zipFile = new ZipFile(zipFilename);\r", "-\t} catch(IOException e) {\r", "-\t\treturn;\r", "-\t}\r", "-\tfor (Enumeration e = zipFile.entries(); e.hasMoreElements(); ) {\r", "-\t\tString fileName = ((ZipEntry) e.nextElement()).getName();\r", "-\r", "-\t\t// extract the package name\r", "-\t\tint last = fileName.lastIndexOf('/');\r", "-\t\tif (last > 0 && directoryCache.get(fileName.substring(0, last)) == null) {\r", "-\t\t\t// add the package name & all of its parent packages\r", "-\t\t\tfor (int i = 0; i <= last; i++) {\r", "-\t\t\t\ti = fileName.indexOf('/', i);\r", "-\t\t\t\tString packageName = fileName.substring(0, i);\r", "-\t\t\t\tif (directoryCache.get(packageName) == null)\r", "-\t\t\t\t\tdirectoryCache.put(packageName, packageName);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+boolean isPackage(String qualifiedPackageName) {\r", "+\tif (packageCache != null)\r", "+\t\treturn packageCache.containsKey(qualifiedPackageName);\r", "+\r", "+\tthis.packageCache = new SimpleLookupTable(41);\r", "+\tpackageCache.put(\"\", \"\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "+\ttry {\r", "+\t\tthis.zipFile = new ZipFile(zipFilename);\r", "+\t} catch(IOException e) {\r", "+\t\treturn false;\r", "+\t}\r", "+\r", "+\tnextEntry : for (Enumeration e = zipFile.entries(); e.hasMoreElements(); ) {\r", "+\t\tString fileName = ((ZipEntry) e.nextElement()).getName();\r", "+\r", "+\t\t// add the package name & all of its parent packages\r", "+\t\tint last = fileName.lastIndexOf('/');\r", "+\t\twhile (last > 0) {\r", "+\t\t\t// extract the package name\r", "+\t\t\tString packageName = fileName.substring(0, last);\r", "+\t\t\tif (packageCache.containsKey(packageName))\r", "+\t\t\t\tcontinue nextEntry;\r", "+\t\t\tpackageCache.put(packageName, packageName);\r", "+\t\t\tlast = packageName.lastIndexOf('/');\r", "+\t\t}\r", "+\t}\r", "+\treturn packageCache.containsKey(qualifiedPackageName);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "558f89bb5ea07c4167a2d01d8ee25b04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 323, "signatureBeforeChange": " protected void consumeUnaryExpression(int op)", "signatureAfterChange": " protected void consumeUnaryExpression(int op)", "diff": ["-\t\tif ((exp instanceof IntLiteral) && (((IntLiteral) exp).mayRepresentMIN_VALUE())) {", "-\t\t\tr = this.expressionStack[this.expressionPtr] = new IntLiteralMinValue();", "-\t\t} else {", "-\t\t\tif ((exp instanceof LongLiteral) && (((LongLiteral) exp).mayRepresentMIN_VALUE())) {", "-\t\t\t\tr = this.expressionStack[this.expressionPtr] = new LongLiteralMinValue();", "+\t\tif (exp instanceof IntLiteral) {", "+\t\t\tIntLiteral intLiteral = (IntLiteral) exp;", "+\t\t\tIntLiteral convertToMinValue = intLiteral.convertToMinValue();", "+\t\t\tif (convertToMinValue ==  intLiteral) {", "+\t\t\t\t// not a min value literal so we convert it to an unary expression", "+\t\t\t\tr = new UnaryExpression(exp, op);", "-\t\t\t\tr = this.expressionStack[this.expressionPtr] = new UnaryExpression(exp, op);", "+\t\t\t\tr = convertToMinValue;", "+\t\t} else if (exp instanceof LongLiteral) {", "+\t\t\tLongLiteral longLiteral = (LongLiteral) exp;", "+\t\t\tLongLiteral convertToMinValue = longLiteral.convertToMinValue();", "+\t\t\tif (convertToMinValue ==  longLiteral) {", "+\t\t\t\t// not a min value literal so we convert it to an unary expression", "+\t\t\t\tr = new UnaryExpression(exp, op);", "+\t\t\t} else {", "+\t\t\t\tr = convertToMinValue;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tr = new UnaryExpression(exp, op);", "-\t\tr = this.expressionStack[this.expressionPtr] = new UnaryExpression(exp, op);", "+\t\tr = new UnaryExpression(exp, op);", "+\tthis.expressionStack[this.expressionPtr] = r;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "617f4cae96b544982b09b1d821dd2ced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "5cb7a8282e40bea7ee7271bbdb7d8b845c76f5b3", "commitAfterChange": "2aa78105ee4089b7ff1a9a2c35425f71b0b156d5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r private void parseBodies(TypeDeclaration type, CompilationUnitDeclaration unit)", "signatureAfterChange": "\r private void parseBodies(TypeDeclaration type, CompilationUnitDeclaration unit)", "diff": ["-\t\t\tif ((this.matchSet.matchContainer & SearchPattern.CLASS) != 0) {\r", "-\t\t\t\tthis.matchSet.checkMatching(field);\r", "-\t\t\t}\r", "+\t\t\tfield.traverse(localDeclarationVisitor, null);\r", "-\t\t\tif ((this.matchSet.matchContainer & SearchPattern.CLASS) != 0) {\r", "-\t\t\t\tthis.matchSet.checkMatching(method);\r", "-\t\t\t}\r", "-\t\t\t\t\tthis.parse((MethodDeclaration)method, unit);\r", "+\t\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration)method;\r", "+\t\t\t\t\tthis.parse(methodDeclaration, unit);\r", "+\t\t\t\t\tmethodDeclaration.traverse(localDeclarationVisitor, (ClassScope)null);\r", "-\t\t\t\t\tthis.parse((ConstructorDeclaration)method, unit);\r", "+\t\t\t\t\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration)method;\r", "+\t\t\t\t\tthis.parse(constructorDeclaration, unit);\r", "+\t\t\t\t\tconstructorDeclaration.traverse(localDeclarationVisitor, (ClassScope)null);\r", "-\t\t\tif ((this.matchSet.matchContainer & SearchPattern.CLASS) != 0) {\r", "-\t\t\t\tthis.matchSet.checkMatching(memberType);\r", "-\t\t\t}\r", "+\t\t\tmemberType.traverse(localDeclarationVisitor, (ClassScope)null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a68c9c1b4626651d7ba3a2ed0bc0161a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e94247ea6ac5ec863496bda9d3658e2dc349e6ab", "commitAfterChange": "9448736fbeb476ae8eacb15d6ea8788cf2db77a1", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 68, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\t    boolean isBreak = htmlTagID == JAVADOC_SINGLE_BREAK_TAG_ID;", "-\t\tif (!isBreak) {", "+\t    boolean isHtmlBreakTag = htmlTagID == JAVADOC_SINGLE_BREAK_TAG_ID;", "+\t\tboolean isHtmlSeparatorTag = htmlTagID == JAVADOC_SEPARATOR_TAGS_ID;", "+\t\tif (!isHtmlBreakTag) {", "-\t", "+", "-\t\t\t\t\t\toverEndLine = (this.column + htmlTag.getLength()) > this.formatter.preferences.comment_line_length;", "+\t\t\t\t\t\toverEndLine = (this.column + getTextLength(block, htmlTag)) > (this.formatter.preferences.comment_line_length+1);", "-\t\t\t\t\tprintJavadocGapLines(previousEnd+1, node.sourceStart-1, newLines, clearBlankLines, false, null);", "+\t\t\t\t\tif (newLines > 0 || (idx > 1 && (previousEnd+1) <= (nextStart-1))) {", "+\t\t\t\t\t\tprintJavadocGapLines(previousEnd+1, node.sourceStart-1, newLines, clearBlankLines, false, null);", "+\t\t\t\t\t}", "-\t\t\t\t\t\tif (!needIndentation && (text.htmlIndexes[idx-1] & JAVADOC_TAGS_ID_MASK) == JAVADOC_SEPARATOR_TAGS_ID) {", "+\t\t\t\t\t\tif (!needIndentation && text.isTextAfterHtmlSeparatorTag(idx-1)) {", "-\t\t\t\t\tprintJavadocTextLine(buffer, nextStart, end, block, idx==1/*first text?*/, needIndentation, idx==0/* opening html tag?*/ || text.htmlIndexes[idx-1] != -1);", "+\t\t\t\t\tboolean firstText = idx==1;", "+\t\t\t\t\tif (idx > 1 && (previousEnd+1) > (nextStart-1)) {", "+\t\t\t\t\t\tfirstText = true;", "+\t\t\t\t\t}", "+\t\t\t\t\tprintJavadocTextLine(buffer, nextStart, end, block, firstText, needIndentation, idx==0/* opening html tag?*/ || text.htmlIndexes[idx-1] != -1);", "-\t\t\t\t    \tif (htmlTagID == JAVADOC_SEPARATOR_TAGS_ID) {", "+\t\t\t\t    \tif (isHtmlSeparatorTag) {", "-    \t\t\t\treturn 1;", "+\t\t\t\t\treturn 1;", "-\t\t\t\t", "+", "-\t\t", "+", "-\t    boolean closingTag = isBreak || (text.htmlIndexes != null && (text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID);", "+\t    boolean closingTag = isHtmlBreakTag || (text.htmlIndexes != null && (text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID);", "-\t\t    if (max > 0 && htmlTagID == JAVADOC_SEPARATOR_TAGS_ID && closingTag) {", "+\t\t    if (max > 0 && isHtmlSeparatorTag && closingTag) {", "-\t    ", "+", "-\t\tif (!needIndentation && !isBreak && text.htmlIndexes != null && (text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == JAVADOC_SEPARATOR_TAGS_ID) {", "+\t\tif (!needIndentation && !isHtmlBreakTag && text.htmlIndexes != null && text.isTextAfterHtmlSeparatorTag(max)) {", "-\t\t", "+", "-\t    if (max > 0 && htmlTagID == JAVADOC_SEPARATOR_TAGS_ID) {", "+\t    if (max > 0 && isHtmlSeparatorTag) {", "-\t}", "+    }"]}], "num": 26533}
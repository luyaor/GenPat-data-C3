{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b195a3949f46ebffb13a8244f5181968", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4735300938ef527be09213749f9f2229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] typeName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["+\tpublic void acceptType(", "+\t\tchar[] typeName,", "+\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "+\t\t\tif (mustQualifyType(packageName, typeName)) {", "+\t\t\t\tcompletionName = typeName;", "+\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, typeName);", "+\t\t\trelevance += computeRelevanceForExpectingType(packageName, typeName);", "+\t\t\t", "+\t\t\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\t\t\tswitch (kind) {", "+\t\t\t\tcase IConstants.AccAnnotation:", "+\t\t\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccEnum:", "+\t\t\t\t\trelevance += computeRelevanceForEnum();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\trelevance += computeRelevanceForException(typeName);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, typeName));", "+\t\t\tproposal.setTypeName(typeName);", "-\t */", "-\tpublic void acceptInterface(", "-\t\tchar[] packageName,", "-\t\tchar[] interfaceName,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, interfaceName, '.');", "-\t\tchar[] completionName = fullyQualifiedName;", "-", "-\t\tif (this.knownTypes.containsKey(completionName)) return;", "-", "-\t\tthis.knownTypes.put(completionName, this);", "-", "-\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "-\t\tif(accessRestriction != null) {", "-\t\t\tswitch (accessRestriction.getProblemId()) {", "-\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tif(this.options.checkForbiddenReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\tif(this.options.checkDiscouragedReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tboolean isQualified = true;", "-\t\tint relevance = computeBaseRelevance();", "-\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\trelevance += computeRelevanceForRestrictions(accessibility);", "-\t\tif (this.resolvingImports) {", "-\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);", "-\t\t} else {", "-\t\t\tif (mustQualifyType(packageName, interfaceName)) {", "-\t\t\t\tif (packageName == null || packageName.length == 0)", "-\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "-\t\t\t\t\t\treturn; // ignore types from the default package from outside it", "-\t\t\t} else {", "-\t\t\t\tcompletionName = interfaceName;", "-\t\t\t\tisQualified = false;", "-\t\t\t}", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, interfaceName);", "-\t\t\trelevance += computeRelevanceForExpectingType(packageName, interfaceName);", "-\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\trelevance += computeRelevanceForQualification(isQualified);", "-\t\t}", "-\t\t", "-\t\tthis.noProposal = false;", "-\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, interfaceName));", "-\t\t\tproposal.setPackageName(packageName);", "-\t\t\tproposal.setTypeName(interfaceName);", "-\t\t\tproposal.setCompletion(completionName);", "-\t\t\tproposal.setFlags(modifiers | Flags.AccInterface);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b70e7e3d0e2607b4e697753a01944e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "7074c59308dc8c330e55b938db8ab604500cf9cc", "commitAfterChange": "969ab36cc555c2b725d4ca76526de3c9dab44ded", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags)", "signatureAfterChange": " \tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags)", "diff": ["-\t\t\tITypeNameRequestor nameRequestor = new ITypeNameRequestor() {", "-\t\t\t\tpublic void acceptClass(char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path) {", "-\t\t\t\t\tif ((acceptFlags & ACCEPT_CLASSES) != 0)", "-\t\t\t\t\t\tif (enclosingTypeNames == null || enclosingTypeNames.length == 0) // accept only top level types", "-\t\t\t\t\t\t\tpaths.add(path);", "-\t\t\t\t}", "-\t\t\t\tpublic void acceptInterface(char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path) {", "-\t\t\t\t\tif ((acceptFlags & ACCEPT_INTERFACES) != 0)", "-\t\t\t\t\t\tif (enclosingTypeNames == null || enclosingTypeNames.length == 0) // accept only top level types", "-\t\t\t\t\t\t\tpaths.add(path);", "+\t\t\tTypeNameRequestor nameRequestor = new TypeNameRequestor() {", "+\t\t\t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path) {", "+\t\t\t\t\tif (enclosingTypeNames == null || enclosingTypeNames.length == 0) { // accept only top level types", "+\t\t\t\t\t\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\t\t\t\t\t\tswitch (kind) {", "+\t\t\t\t\t\t\tcase IConstants.AccAnnotation:", "+\t\t\t\t\t\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_ANNOTATIONS) != 0) paths.add(path);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IConstants.AccEnum:", "+\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_ENUMS) != 0) paths.add(path);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IConstants.AccInterface:", "+\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_INTERFACES) != 0) paths.add(path);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_CLASSES) != 0) paths.add(path);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 37035}
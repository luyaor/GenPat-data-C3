{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9274854680830c5d30f8e2156a3f4656", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ebc827d8455bc48283a3641260e75be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-\t        FileGenerationResult result = gfm.generateFileDuringBuild( ", "-\t\t\t\t\t_env.getFile(),  _typeName, contents, null /* progress monitor */ );", "+\t        Phase phase = _env.getPhase();", "+\t\t\t", "+\t        FileGenerationResult result = null;", "+\t        if ( phase == Phase.RECONCILE )", "+\t        {", "+\t        \tReconcileEnv reconcileEnv = (ReconcileEnv)_env;", "+\t        \tICompilationUnit parentCompilationUnit = reconcileEnv.getCompilationUnit();", "+\t            result  = gfm.generateFileDuringReconcile( ", "+\t                parentCompilationUnit, _typeName, contents );", "+\t            // Need to call ReconcileContext.resetAst() for this to be effective;", "+\t            // that will happen in ReconcileEnv.close().", "+\t        }", "+\t        else if ( phase == Phase.BUILD)\t{", "+\t\t        result = gfm.generateFileDuringBuild( ", "+\t\t\t\t\t\t_env.getFile(),  _typeName, contents, null /* progress monitor */ );", "+\t        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90b2df9e6e33efe0ad3c5a3aa896d451", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "commitAfterChange": "2bb908fe4c4bec3f1e5a84b7bbc8c64b4eaa7704", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-\t\t\t\tFileGenerationResult result = gfm.generateFileDuringBuild( _env.getFile(),  _typeName, contents, null /* progress monitor */ );", "-\t\t\t\t_env.addGeneratedFile( result.getFile(), result.isModified());", "-\t\t\t\t", "-\t\t\t\t// don't set to false, we don't want to overwrite a previous iteration setting it to true", "-\t\t\t\tif ( result.getSourcePathChanged() )", "-\t\t\t\t\t_env.setSourcePathChanged( true );", "+\t\t\t\tFileGenerationResult result = gfm.generateFileDuringBuild( ", "+\t\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );", "+\t\t\t\tif( result != null ){\t\t", "+\t\t\t\t\t_env.addGeneratedFile( result.getFile(), result.isModified());", "+\t\t\t\t\t// don't set to false, we don't want to overwrite a previous iteration setting it to true", "+\t\t\t\t\tif ( result.getSourcePathChanged() )", "+\t\t\t\t\t\t_env.setSourcePathChanged( true );", "+\t\t\t\t}"]}], "num": 3575}
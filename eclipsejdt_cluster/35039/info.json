{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1093dee34094bd5f7bcf13a8aa32320c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ddb5ebc3a9828e202671f8eae68ddb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "a18206e07e2e218fc3320a0f07416f69bac6e953", "commitAfterChange": "7c6642a335defef1aac8977578c7fe30ab52a141", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static char[][] getJavaLikeExtensions()", "signatureAfterChange": " \tpublic static char[][] getJavaLikeExtensions()", "diff": ["-\t\t\t\t", "-\t\t\tPlugin jdtCorePlugin = JavaCore.getPlugin();", "-\t\t\tif (jdtCorePlugin == null) return null;", "-\t", "-\t\t\tArrayList fileExtensionsList = new ArrayList(5);", "-\t\t\tfileExtensionsList.add(SuffixConstants.SUFFIX_java);", "-\t\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID, JavaModelManager.EXTRA_JAVA_LIKE_FILE_EXTENSIONS_EXTPOINT_ID);", "-\t\t\tif (extension != null) {", "-\t\t\t\tIExtension[] extensions =  extension.getExtensions();", "-\t\t\t\tfor(int i = 0; i < extensions.length; i++){", "-\t\t\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "-\t\t\t\t\tfor(int j = 0; j < configElements.length; j++){", "-\t\t\t\t\t\tString fileExtensionAttribute = configElements[j].getAttribute(\"extension\"); //$NON-NLS-1$", "-\t\t\t\t\t\tif (fileExtensionAttribute != null) fileExtensionsList.add(('.' + fileExtensionAttribute).toCharArray());", "-\t\t\t\t\t}", "-\t\t\t\t}\t", "+\t\t\tIContentType javaContentType = Platform.getContentTypeManager().getContentType(JavaModelManager.JAVA_SOURCE_CONTENT_TYPE);", "+\t\t\tString[] fileExtensions = javaContentType == null ? null : javaContentType.getFileSpecs(IContentType.FILE_EXTENSION_SPEC);", "+\t\t\t// note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml", "+\t\t\tint length = fileExtensions == null ? 0 : fileExtensions.length;", "+\t\t\tchar[][] extensions = new char[length][];", "+\t\t\tSimpleWordSet knownExtensions = new SimpleWordSet(length); // used to ensure no duplicate extensions", "+\t\t\textensions[0] = SuffixConstants.SUFFIX_java; // ensure that \".java\" is first", "+\t\t\tknownExtensions.add(SuffixConstants.SUFFIX_java);", "+\t\t\tint index = 1;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tString fileExtension = fileExtensions[i];", "+\t\t\t\tint extensionLength = fileExtension.length() + 1;", "+\t\t\t\tchar[] extension = new char[extensionLength];", "+\t\t\t\textension[0] = '.';", "+\t\t\t\tfileExtension.getChars(0, extensionLength-1, extension, 1);", "+\t\t\t\tif (!knownExtensions.includes(extension)) {", "+\t\t\t\t\textensions[index++] = extension;", "+\t\t\t\t\tknownExtensions.add(extension);", "+\t\t\t\t}", "-\t\t\tJAVA_LIKE_EXTENSIONS = new char[fileExtensionsList.size()][];", "-\t\t\tfileExtensionsList.toArray(JAVA_LIKE_EXTENSIONS);", "-\t", "+\t\t\tif (index != length)", "+\t\t\t\tSystem.arraycopy(extensions, 0, extensions = new char[index][], 0, index);", "+\t\t\tJAVA_LIKE_EXTENSIONS = extensions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab2810af3ecf54d38675c7a7d02e4502", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "a69cfafeaadceb9c8106ca88406e6cb060f7f1c0", "commitAfterChange": "e889cbbb44111541d95b5ebcebb1535fa5b00ad8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static char[][] getJavaLikeExtensions()", "signatureAfterChange": " \tpublic static char[][] getJavaLikeExtensions()", "diff": ["-\t\t\tIContentType javaContentType = Platform.getContentTypeManager().getContentType(JavaModelManager.JAVA_SOURCE_CONTENT_TYPE);", "-\t\t\tString[] fileExtensions = javaContentType == null ? null : javaContentType.getFileSpecs(IContentType.FILE_EXTENSION_SPEC);", "-\t\t\t// note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml", "-\t\t\tint length = fileExtensions == null ? 0 : fileExtensions.length;", "-\t\t\tchar[][] extensions = new char[length][];", "-\t\t\tSimpleWordSet knownExtensions = new SimpleWordSet(length); // used to ensure no duplicate extensions", "-\t\t\textensions[0] = SuffixConstants.SUFFIX_java; // ensure that \".java\" is first", "-\t\t\tknownExtensions.add(SuffixConstants.SUFFIX_java);", "-\t\t\tint index = 1;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tString fileExtension = fileExtensions[i];", "-\t\t\t\tint extensionLength = fileExtension.length() + 1;", "-\t\t\t\tchar[] extension = new char[extensionLength];", "-\t\t\t\textension[0] = '.';", "-\t\t\t\tfileExtension.getChars(0, extensionLength-1, extension, 1);", "-\t\t\t\tif (!knownExtensions.includes(extension)) {", "-\t\t\t\t\textensions[index++] = extension;", "-\t\t\t\t\tknownExtensions.add(extension);", "+\t\t\t// TODO (jerome) reenable once JDT UI supports other file extensions (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=71460)", "+\t\t\tif (true)", "+\t\t\t\tJAVA_LIKE_EXTENSIONS = new char[][] {SuffixConstants.SUFFIX_java};", "+\t\t\telse {", "+\t\t\t\tIContentType javaContentType = Platform.getContentTypeManager().getContentType(JavaModelManager.JAVA_SOURCE_CONTENT_TYPE);", "+\t\t\t\tString[] fileExtensions = javaContentType == null ? null : javaContentType.getFileSpecs(IContentType.FILE_EXTENSION_SPEC);", "+\t\t\t\t// note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml", "+\t\t\t\tint length = fileExtensions == null ? 0 : fileExtensions.length;", "+\t\t\t\tchar[][] extensions = new char[length][];", "+\t\t\t\tSimpleWordSet knownExtensions = new SimpleWordSet(length); // used to ensure no duplicate extensions", "+\t\t\t\textensions[0] = SuffixConstants.SUFFIX_java; // ensure that \".java\" is first", "+\t\t\t\tknownExtensions.add(SuffixConstants.SUFFIX_java);", "+\t\t\t\tint index = 1;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tString fileExtension = fileExtensions[i];", "+\t\t\t\t\tint extensionLength = fileExtension.length() + 1;", "+\t\t\t\t\tchar[] extension = new char[extensionLength];", "+\t\t\t\t\textension[0] = '.';", "+\t\t\t\t\tfileExtension.getChars(0, extensionLength-1, extension, 1);", "+\t\t\t\t\tif (!knownExtensions.includes(extension)) {", "+\t\t\t\t\t\textensions[index++] = extension;", "+\t\t\t\t\t\tknownExtensions.add(extension);", "+\t\t\t\t\t}", "+\t\t\t\tif (index != length)", "+\t\t\t\t\tSystem.arraycopy(extensions, 0, extensions = new char[index][], 0, index);", "+\t\t\t\tJAVA_LIKE_EXTENSIONS = extensions;", "-\t\t\tif (index != length)", "-\t\t\t\tSystem.arraycopy(extensions, 0, extensions = new char[index][], 0, index);", "-\t\t\tJAVA_LIKE_EXTENSIONS = extensions;"]}], "num": 35039}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d458dfbc398e083d4b41acef1c5f4b50", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b3da494dd61c73278949359cb1f80f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f01f87743cf608d26c7b7eb30e6a4638fa162dfc", "commitAfterChange": "ab90d16bd1c89fdc80a15ee5244e295e2979188b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["+\t\t\t\tint kind;", "+\t\t\t\tif (variable instanceof CompletionOnLocalName){", "+\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\tkind = LOCAL;", "+\t\t\t\t} else {", "+\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "+\t\t\t\t\tthis.completionToken = arg.realName;", "+\t\t\t\t\tkind = arg.isCatchArgument ? LOCAL : ARGUMENT;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tchar[][] alreadyDefinedName = computeAlreadyDefinedName((BlockScope)scope, variable);", "+\t\t\t\t", "+\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, alreadyDefinedName);", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t\tif (variable instanceof CompletionOnLocalName){", "-\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, LOCAL, variable.modifiers);", "-\t\t\t\t} else {", "-\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "-\t\t\t\t\tthis.completionToken = arg.realName;", "-\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "-\t\t\t\t}", "+\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, kind, variable.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a940d03b69da3665fefdea55c87159ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "commitAfterChange": "a49b0379fae683770f815e7e32d76b4ebea892ec", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "+\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, null, FIELD, method.modifiers);", "-\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, FIELD, field.modifiers);", "+\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, null, FIELD, field.modifiers);", "-\t\t\t\tchar[][] excludeNames = new char[locals.length][];", "+\t\t\t\tchar[][] discouragedNames = new char[locals.length][];", "-\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;", "+\t\t\t\t\t\tdiscouragedNames[localCount++] = locals[i].name;", "-\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);", "+\t\t\t\tSystem.arraycopy(discouragedNames, 0, discouragedNames = new char[localCount][], 0, localCount);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "+\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "+\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, LOCAL, variable.modifiers);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "+\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);"]}], "num": 24449}
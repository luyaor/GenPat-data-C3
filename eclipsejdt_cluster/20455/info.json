{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "050546d37a7f8b6b12ecab990842d08b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c88a1646665ae49a384cc5c194d62b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic abstract String[] queryDocumentNames(String substring) throws IOException;", "signatureAfterChange": " public String[] queryDocumentNames(String substring) throws IOException", "diff": ["-\t */", "-\tpublic abstract String[] queryDocumentNames(String substring) throws IOException;", "+ */", "+public String[] queryDocumentNames(String substring) throws IOException {", "+\tSimpleSet results;", "+\tif (this.memoryIndex.hasChanged()) {", "+\t\tresults = this.diskIndex.addDocumentNames(substring, this.memoryIndex);", "+\t\tthis.memoryIndex.addDocumentNames(substring, results);", "+\t} else {", "+\t\tresults = this.diskIndex.addDocumentNames(substring, null);", "+\t}", "+\tif (results.elementSize == 0) return null;", "+", "+\tString[] documentNames = new String[results.elementSize];", "+\tint count = 0;", "+\tObject[] paths = results.values;", "+\tfor (int i = 0, l = paths.length; i < l; i++)", "+\t\tif (paths[i] != null)", "+\t\t\tdocumentNames[count++] = (String) paths[i];", "+\treturn documentNames;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2eb0a935ccac1815e5a5c0bf36b75f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic abstract void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType);", "signatureAfterChange": " \t \tpublic void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "diff": ["-", "-\tpublic abstract void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType);", "+\t", "+\tpublic void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType) {", "+\t\tfinal int unresolvedTypeId = unresolvedType.id;", "+\t\tif (unresolvedTypeId != TypeIds.NoId) {", "+\t\t\tif (this.types[unresolvedTypeId] != null && this.types[unresolvedTypeId][0] == unresolvedType) {", "+\t\t\t\tresolvedType.id = unresolvedTypeId;", "+\t\t\t\tthis.types[unresolvedTypeId][0] = resolvedType;", "+\t\t\t}", "+\t\t}", "+\t\tif (this.annotationTypes.get(unresolvedType) != null) { // update the key", "+\t\t\tObject[] keys = this.annotationTypes.keyTable;", "+\t\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "+\t\t\t\tif (keys[i] == unresolvedType) {", "+\t\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works.", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 20455}
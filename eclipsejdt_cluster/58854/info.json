{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b27fb6c5062b6100b704269e806cf69e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3feda64f8fd9fbf1cc4f8cbe47de3bfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "3b5e3bffb50578beec025e97315d017361527518", "commitAfterChange": "5c86bd5e83cfca7ff5f98996f0b172644cacbee7", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "signatureAfterChange": "\r public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "diff": ["-\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and remove space that is going to be added for \", \" after return type \r", "-\t\t\t\t\t\t// and add space for \") \"\r", "-\t\t\t\t\t\tresultLength -= 2;\r", "+\t\t\t\t\t\tif (paramCount > 0) {\r", "+\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and remove space that is going to be added for \", \" after return type \r", "+\t\t\t\t\t\t\t// and add space for \") \"\r", "+\t\t\t\t\t\t\tresultLength -= 2;\r", "+\t\t\t\t\t\t} //else\r", "+\t\t\t\t\t\t\t// remove space that is going to be added for \", \" after return type \r", "+\t\t\t\t\t\t\t// and add space for \") \"\r", "+\t\t\t\t\t\t\t// -> noop\r", "-\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and add space for \")\"\r", "-\t\t\t\t\t\tresultLength--;\r", "+\t\t\t\t\t\tif (paramCount > 0) {\r", "+\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and add space for \")\"\r", "+\t\t\t\t\t\t\tresultLength--;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// add space for \")\"\r", "+\t\t\t\t\t\t\tresultLength++;\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a69fd6d73f58e859776c74cba0ca03b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "6d26e89371291b0e31c04fda43f7d9e8d5d62845", "commitAfterChange": "f4fa1b5b78e764cbc99a897dc3a1af35ead150e3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "signatureAfterChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "diff": ["+\t\t} else if (astNode instanceof CompletionOnReferenceExpressionName) {", "+\t\t\tcompletionOnReferenceExpressionName(astNode, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7cbfb6ee0bce4535a87303a8369f2fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "e8c9a8ad63c042540bdf2089eae8eda8857cd19d", "commitAfterChange": "44ff943ce2a18d1de59c739946fda0722d1ad727", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 381, "signatureBeforeChange": " public boolean hasLeadingTagComment(char[] commentPrefixTag, int rangeEnd)", "signatureAfterChange": " public boolean hasLeadingTagComment(char[] commentPrefixTag, int rangeEnd)", "diff": ["-\t\t\tif (charPos >= rangeEnd) return false; // comment is too small to host tag", "-\t\t\tif (source[charPos] != commentPrefixTag[iTag]) return false;", "+\t\t\tif (charPos >= rangeEnd // comment is too small to host tag", "+\t\t\t\t\t|| source[charPos] != commentPrefixTag[iTag]) {", "+\t\t\t\tif (iTag == 0) {", "+\t\t\t\t\treturn false; // didn't even match leading '$' -> not a tag comment", "+\t\t\t\t} else {", "+\t\t\t\t\tcontinue previousComment; // accept as tag comment -> skip it and keep searching backwards", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4cdc20ad7e58dbaddc10c25953e5e6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "8477130b01f048bfc1fd1f484a88902aeefb2f38", "commitAfterChange": "ecd385ce2c6acd660d8fd4527c963683ed4e3124", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tboolean addConstraintsFromTypeParameters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List<ConstraintFormula> constraints)", "signatureAfterChange": "  \tboolean addConstraintsFromTypeParameters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List<ConstraintFormula> constraints)", "diff": ["+\t\tif (!(cb instanceof ParameterizedTypeBinding)) {", "+\t\t\t// if C is parameterized with its own type variables, there're no more constraints to be created here, otherwise let's fail", "+\t\t\treturn isInsignificantParameterized(ca);", "+\t\t}"]}], "num": 58854}
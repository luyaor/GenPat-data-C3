{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abc0d7be3de399f8da01802872d22d9c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1664dc66121d765477b8cbc0ff51a641", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "8913fe5c78a14de5e97c4d6b801f5ed8424bf8a8", "commitAfterChange": "1a3b48d65ad279de125b447111e271aa71010c38", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int position, int captureID)", "signatureAfterChange": "  \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int position, int captureID)", "diff": ["-\t\t\tsetTypeAnnotations(wildcard.getTypeAnnotations(), wildcard.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "+\t\t\t// register an unannoted version before adding the annotated wildcard:", "+\t\t\tCaptureBinding unannotated = (CaptureBinding) clone(null);", "+\t\t\tunannotated.wildcard = (WildcardBinding) this.wildcard.unannotated();", "+\t\t\tthis.environment.getUnannotatedType(unannotated);", "+\t\t\tthis.id = unannotated.id; // transfer fresh id", "+\t\t\t// now register this annotated type:", "+\t\t\tthis.environment.typeSystem.cacheDerivedType(this, unannotated, this);", "+\t\t\t// propagate from wildcard to capture - use super version, because our own method propagates type annotations in the opposite direction:", "+\t\t\tsuper.setTypeAnnotations(wildcard.getTypeAnnotations(), wildcard.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de215be70b448d5cac9e95b7bea38736", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "9d4deb39cd596c4aac108a1983a0ab5432be976e", "commitAfterChange": "56a8cd73a948ae71b76868e1cd754e391e5a1fb2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "signatureAfterChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "diff": ["-\t*/", "-\t\tTypeVariableBinding prototype = (TypeVariableBinding) this.environment.getUnannotatedType(this); // also exposes original TVB/capture to type system for id stamping purposes.", "-\t\tif (prototype != this && !this.isCapture()) { //$IDENTITY-COMPARISON$", "-\t\t\tAnnotationBinding [] declarationAnnotations = prototype.getTypeAnnotations();", "-\t\t\tfinal int declarationAnnotationsLength = declarationAnnotations == null ? 0 : declarationAnnotations.length;", "-\t\t\tif (declarationAnnotationsLength > 0) {", "-\t\t\t\tfinal int annotationsLength = annotations.length;", "-\t\t\t\tSystem.arraycopy(annotations, 0, annotations = new AnnotationBinding[annotationsLength + declarationAnnotationsLength], 0, annotationsLength);", "-\t\t\t\tSystem.arraycopy(declarationAnnotations, 0, annotations, annotationsLength, declarationAnnotationsLength);", "-\t\t\t}", "-\t\t}", "+\t\tthis.environment.getUnannotatedType(this); // exposes original TVB/capture to type system for id stamping purposes."]}], "num": 46479}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74ccf3c550ca8347fd49f2f3eefe1e8e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "596e9b8170893821e3f4694c234fdbb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d82ae848a9c4d7b35f614d484418e3b413534446", "commitAfterChange": "c4725a925ff03cde3fc0735f1b7bd65f4e96815b", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic void test109636_4()", "signatureAfterChange": "  \tpublic void test109636_4()", "diff": ["-\t\tif (DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT) {", "-\t\t\tMap options = DefaultCodeFormatterConstants.getEclipseDefaultSettings();", "+\t\tMap options = DefaultCodeFormatterConstants.getEclipseDefaultSettings();", "-\t\t\tString input =", "-\t\t\t\t\t\"/**\" + DELIMITER +", "-\t\t\t\t\t\" * <pre>\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\");  // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\");  // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\");  // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * </pre>\" + DELIMITER +", "-\t\t\t\t\t\" */\";", "+\t\tString input =", "+\t\t\t\t\"/**\" + DELIMITER +", "+\t\t\t\t\" * <pre>\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\");  // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\");  // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\");  // wrong\" + DELIMITER +", "+\t\t\t\t\" * </pre>\" + DELIMITER +", "+\t\t\t\t\" */\";", "-\t\t\tString expected =", "-\t\t\t\t\t\"/**\" + DELIMITER +", "-\t\t\t\t\t\" * <pre>\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * </pre>\" + DELIMITER +", "-\t\t\t\t\t\" */\";", "-\t\t\tString result=testFormat(input, options);", "-\t\t\tassertEquals(expected, result);", "-\t\t}", "+\t\tString expected =", "+\t\t\t\t\"/**\" + DELIMITER +", "+\t\t\t\t\" * <pre>\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * </pre>\" + DELIMITER +", "+\t\t\t\t\" */\";", "+\t\tString result=testFormat(input, options);", "+\t\tassertEquals(expected, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf3f7a7b45d0b69e8049afbc7c0c984a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "6fb2c9430c0440a4e2f750bfda1fd9ba0f2c24f0", "commitAfterChange": "13cf3e2d96e2930e3ab67ebe6fb94e89a4503d26", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["-\tif (access == null) { // accept only if there's no access violation", "-\t\ttry {", "-\t\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "-\t\t\tIType type = separatorIndex == -1", "-\t\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "-\t\t\t\t: createTypeFromJar(path, separatorIndex);", "-\t\t\tif (type != null) {", "-\t\t\t\tthis.requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, modifiers));", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// skip", "+\ttry {", "+\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "+\t\tIType type = separatorIndex == -1", "+\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "+\t\t\t: createTypeFromJar(path, separatorIndex);", "+\t\tif (type != null) {", "+\t\t\tthis.requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, modifiers));", "+\t} catch (JavaModelException e) {", "+\t\t// skip"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e67b0c16514c030c19a4fb0cf73ab0a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "e88d2968b2af5bd5b054afbfa887ee31519acc4d", "commitAfterChange": "23d1bc466b4877bf5eceb83f88acf63af19c0d70", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void visitAnnotationsList(List annotations)", "signatureAfterChange": "  \tprivate void visitAnnotationsList(List annotations)", "diff": ["+", "+\tprivate void visitAnnotationsList(List annotations) {", "+\t\tfor (Iterator it = annotations.iterator(); it.hasNext(); ) {", "+\t\t\tAnnotation annotation = (Annotation) it.next();", "+\t\t\tannotation.accept(this);", "+\t\t\tthis.buffer.append(' ');", "+\t\t}", "+\t}", "-\tprivate void visitAnnotationsList(List annotations) {", "-\t\tif (annotations != null) {", "-\t\t\tfor (Iterator it = annotations.iterator(); it.hasNext(); ) {", "-\t\t\t\tAnnotation annotation = (Annotation) it.next();", "-\t\t\t\tannotation.accept(this);", "-\t\t\t\tthis.buffer.append(' ');", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa9a66d9a91b5dc13d25f957757cdca0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "e76aac7839c710342eb125fb33a1610150763030", "commitAfterChange": "beec9199e54e318e3f5145a71a7cfd4a297957a1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic TextEdit format(String string, AstNode[] nodes)", "signatureAfterChange": " \tpublic TextEdit format(String string, AstNode[] nodes)", "diff": ["-\t\t\tif (nodes != null) {", "-\t\t\t\tformatClassBodyDeclarations(nodes);", "-\t\t\t}", "+\t\t\tformatClassBodyDeclarations(nodes);"]}], "num": 45327}
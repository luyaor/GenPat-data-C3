{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "147b44b274bb3b920068c0a651115e79", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "804e868594f47ec2c0fff6a28502c7b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap rawReverseMap) \t\tthrows JavaModelException", "diff": ["-\t\tMap reverseMap) // can be null if not interested in reverse mapping", "+\t\tMap rawReverseMap) // can be null if not interested in reverse mapping", "-\t\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) reverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tIClasspathEntry cEntry = containerEntries[j];", "+\t\t\t\t\t\tClasspathEntry cEntry = (ClasspathEntry)containerEntries[j];", "-\t\t\t\t\t\t// if container is exported, then its nested entries must in turn be exported  (21749)", "-\t\t\t\t\t\tif (rawEntry.isExported()){", "-\t\t\t\t\t\t\tcEntry = new ClasspathEntry(cEntry.getContentKind(),", "-\t\t\t\t\t\t\t\tcEntry.getEntryKind(), cEntry.getPath(),", "-\t\t\t\t\t\t\t\tcEntry.getInclusionPatterns(), cEntry.getExclusionPatterns(), ", "-\t\t\t\t\t\t\t\tcEntry.getSourceAttachmentPath(), cEntry.getSourceAttachmentRootPath(), ", "-\t\t\t\t\t\t\t\tcEntry.getOutputLocation(), true); // duplicate container entry for tagging it as exported", "+\t\t\t\t\t\t// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions", "+\t\t\t\t\t\tcEntry = cEntry.combineWith(rawEntry);", "+\t\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "-\t\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = cEntry.getPath()) == null) reverseMap.put(resolvedPath, rawEntry);", "-\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = rawEntry.getPath()) == null) reverseMap.put(resolvedPath, rawEntry);", "+\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21e6209039c723e398189b98eec8f81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "3995ce68a52c60c01c40bfcd8efe0de9a7393fef", "commitAfterChange": "dc9db9c22a51b01cfbe75b8acac7c7a000432f1b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tbuffer1.append(\"Time measures:\").append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t- first format:\").append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[0])).append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[0]).append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[0]).append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t- repeated format:\").append(LINE_SEPARATOR);", "-\tfor (int i=1; i<FORMAT_REPEAT; i++) {", "-\t\tbuffer1.append(\"\t   n\ufffd \"+(i+1)).append(LINE_SEPARATOR);", "-\t\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[i])).append(LINE_SEPARATOR);", "-\t\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[i]).append(LINE_SEPARATOR);", "-\t\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[i]).append(LINE_SEPARATOR);", "+\tbuffer1.append(\"Time measures:\");", "+\tif (CLEAN) {", "+\t\tbuffer1.append(\" cannot be done as the directory was cleaned!\");", "+\t\tbuffer1.append(LINE_SEPARATOR);", "+\t} else {", "+\t\tbuffer1.append(LINE_SEPARATOR);", "+\t\tfor (int i=0; i<FORMAT_REPEAT; i++) {", "+\t\t\tbuffer1.append(\"\t- \"+counterToString(i+1)).append(\" format:\").append(LINE_SEPARATOR);", "+\t\t\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[i])).append(LINE_SEPARATOR);", "+\t\t\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[i]).append(LINE_SEPARATOR);", "+\t\t\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[i]).append(LINE_SEPARATOR);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e170f592ee56537f89bf7c64caaca9de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "89c02f523f65c89809fb264fe79e53a85533954d", "commitAfterChange": "56b6a38e6a1d1e5e3885772174f09cd30c719b47", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator)", "diff": ["-\t\tbuffer.append(' ');", "-\t\tbuffer.append(' ');", "-\t\tbuffer.append(' ');", "-\t\t\tbuffer.append(' ');", "-\t\tbuffer.append(' ');", "-\t\tbuffer.append(classFileReader.getClassName());", "-\t\tbuffer.append(' ');", "+\t\tCharOperation.replace(className, '/', '.');", "+\t\tbuffer.append(className);", "+\t\t", "-\t\t\tbuffer.append(' ');", "-\t\t\tbuffer.append(' ');", "-\t\t\tbuffer.append(' ');", "-\t\t\t\t\t.append(',')", "-\t\t\t\t\t.append(' ');", "+\t\t\t\t\t.append(Util.bind(\"disassembler.comma\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(' ');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebafee8e277b08419a5ce57e340c1382", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "8fb88598900ff0c1072aa7669424703dbc139194", "commitAfterChange": "4c091ce71f1c6a2472a4afd7104c5d8f3424456d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void testBug55221d() throws JavaModelException", "signatureAfterChange": " \tpublic void _testBug54xxx() throws JavaModelException", "diff": ["+\tpublic void _testBug54xxx() throws JavaModelException {", "+\t\tthis.sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug54xxx\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t}", "-\tpublic void testBug55221d() throws JavaModelException {", "-\t\tthis.sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug55221.d\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tASTNode result = runConversion(this.sourceUnit, false);", "-\t\tfinal CompilationUnit compilUnit = (CompilationUnit) result;", "-\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "-\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 2, compilUnit.getCommentList().size());", "-\t\t// get first method", "-\t\tASTNode node = getASTNode(compilUnit, 0, 0);", "-\t\tassumeNotNull(\"We should get a non-null ast node\", node);", "-\t\tassumeTrue(\"Not a method declaration\", node.getNodeType() == ASTNode.METHOD_DECLARATION); //$NON-NLS-1$", "-\t\tMethodDeclaration method = (MethodDeclaration) node;", "-\t\t// verify that first method includes comment", "-\t\tint methodStart = compilUnit.getExtendedStartPosition(method);", "-\t\tassumeEquals(\"Method \"+method+\" does not start at the right position\", method.getStartPosition(), methodStart);", "-\t\tint methodLength = compilUnit.getExtendedLength(method);", "-\t\tassumeEquals(\"Method \"+method+\" does not have the right length\", methodLength, method.getLength());", "-\t\t// get return type", "-\t\tnode = method.getReturnType();", "-\t\tassumeNotNull(\"We should get a non-null ast node\", node);", "-\t\tassumeTrue(\"Not return type\", node.getNodeType() == ASTNode.PRIMITIVE_TYPE); //$NON-NLS-1$", "-\t\tPrimitiveType returnType = (PrimitiveType) node;", "-\t\t// verify that body includes following comment", "-\t\tint returnStart = compilUnit.getExtendedStartPosition(returnType);", "-\t\tassumeEquals(\"Return type \"+returnType+\" does not start at the right position\", returnType.getStartPosition(), returnStart);", "-\t\tint returnLength = compilUnit.getExtendedLength(returnType);", "-\t\tassumeEquals(\"Return type \"+returnType+\" does not have the right length\", returnType.getLength(), returnLength);"]}], "num": 53236}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a98b7ece3ecafde9ee229eafdd402da", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c999035481597a1c4366ec478ccd15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java", "commitBeforeChange": "928aa699a216cf69978cb24af1fa6f7f4cba1f20", "commitAfterChange": "9221731a3d20320a45d9e6a6337379d8a431c366", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \t@Override \tpublic SourceVersion getSourceVersion()", "signatureAfterChange": "  \t@Override \tpublic SourceVersion getSourceVersion()", "diff": ["-\t\t// As of this writing, RELEASE_6 is the highest level available.", "-\t\t// It is also the lowest level for which this code can possibly", "-\t\t// be called.  When Java 7 is released, this method will need to", "-\t\t// return a value based on _compiler.options.sourceLevel.", "-\t\treturn SourceVersion.RELEASE_6;", "+\t\tif (this._compiler.options.sourceLevel <= ClassFileConstants.JDK1_5) {", "+\t\t\treturn SourceVersion.RELEASE_5;", "+\t\t}", "+\t\tif (this._compiler.options.sourceLevel == ClassFileConstants.JDK1_6) {", "+\t\t\treturn SourceVersion.RELEASE_6;", "+\t\t}", "+\t\ttry {", "+\t\t\treturn SourceVersion.valueOf(\"RELEASE_7\"); //$NON-NLS-1$", "+\t\t} catch(IllegalArgumentException e) {", "+\t\t\t// handle call on a JDK 6", "+\t\t\treturn SourceVersion.RELEASE_6;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "454c78951792d31975272e5aade87bad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 92, "signatureBeforeChange": " private VerificationTypeInfo getLocal(int resolvedPosition, StackMapFrame frame)", "signatureAfterChange": " private VerificationTypeInfo getLocal(int resolvedPosition, StackMapFrame frame)", "diff": ["-\treturn frame.locals[resolvedPosition];", "+\tfinal VerificationTypeInfo verificationTypeInfo = frame.locals[resolvedPosition];", "+\tif (verificationTypeInfo == null) {", "+\t\treturn null;", "+\t}", "+\ttry {", "+\t\tif (verificationTypeInfo.tag == VerificationTypeInfo.ITEM_UNINITIALIZED_THIS", "+\t\t\t\t|| verificationTypeInfo.tag == VerificationTypeInfo.ITEM_UNINITIALIZED) {", "+\t\t\treturn verificationTypeInfo;", "+\t\t}", "+\t\treturn (VerificationTypeInfo) verificationTypeInfo.clone();", "+\t} catch (CloneNotSupportedException e) {", "+\t\treturn verificationTypeInfo;", "+\t}"]}], "num": 55165}
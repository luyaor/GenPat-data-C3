{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f04e64ed8deecdf4f6a320c8619cbde4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31423591d85bfb9e2df56f959d16bd78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "c50e76d90729d4f3e0cdd7cf5591d15afd8429b3", "commitAfterChange": "a44f85b2f1ceea345211e0233ce1a337f2608f27", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "diff": ["+\t\t\t\t} catch (CoreException e){\r", "+\t\t\t\t\tthrow new JavaModelException(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48103515f7000a262d53564d2cfaf548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "commitAfterChange": "e2360e075300bd271e5e3fd90537b7dce7bdaa00", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r \tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath)", "signatureAfterChange": "\r \r \tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath) throws JavaModelException", "diff": ["-\tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath){\r", "+\tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath) throws JavaModelException {\r", "-\t\t\t\tentries = resolver.resolve(containerPath, this);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tentries = resolver.resolve(containerPath, this);\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a86459a58667a8b39315c2ab017ce3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "43f95446ac14a8fdfe95af27d5d4d3e72461218b", "commitAfterChange": "c2203522496b5a0818a75c7d49d2924bc1086f70", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static char[] getInputStreamAsCharArray(InputStream stream, int length, String encoding) \t\tthrows IOException", "signatureAfterChange": " \tpublic static char[] getInputStreamAsCharArray(InputStream stream, int length, String encoding) \t\tthrows IOException", "diff": ["-\t\treader = encoding == null", "-\t\t\t\t\t? new InputStreamReader(stream)", "-\t\t\t\t\t: new InputStreamReader(stream, encoding);", "+\t\ttry {", "+\t\t\treader = encoding == null", "+\t\t\t\t\t\t? new InputStreamReader(stream)", "+\t\t\t\t\t\t: new InputStreamReader(stream, encoding);", "+\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t// encoding is not supported", "+\t\t\treader =  new InputStreamReader(stream);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a792faef3b32d9d3bd217004a4ae0cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public final boolean jumpOverUnicodeWhiteSpace()\r \tthrows InvalidInputException", "signatureAfterChange": "\r public final boolean jumpOverUnicodeWhiteSpace()\r \tthrows InvalidInputException", "diff": ["-\tint c1, c2, c3, c4;\r", "-\tint unicodeSize = 6;\r", "-\tcurrentPosition++;\r", "-\twhile (source[currentPosition] == 'u') {\r", "+\ttry {\r", "+\t\tint c1, c2, c3, c4;\r", "+\t\tint unicodeSize = 6;\r", "-\t\tunicodeSize++;\r", "-\t}\r", "+\t\twhile (source[currentPosition] == 'u') {\r", "+\t\t\tcurrentPosition++;\r", "+\t\t\tunicodeSize++;\r", "+\t\t}\r", "-\tif (((c1 = Character.getNumericValue(source[currentPosition++])) > 15\r", "-\t\t|| c1 < 0)\r", "-\t\t|| ((c2 = Character.getNumericValue(source[currentPosition++])) > 15 || c2 < 0)\r", "-\t\t|| ((c3 = Character.getNumericValue(source[currentPosition++])) > 15 || c3 < 0)\r", "-\t\t|| ((c4 = Character.getNumericValue(source[currentPosition++])) > 15 || c4 < 0)) {\r", "+\t\tif (((c1 = Character.getNumericValue(source[currentPosition++])) > 15\r", "+\t\t\t|| c1 < 0)\r", "+\t\t\t|| ((c2 = Character.getNumericValue(source[currentPosition++])) > 15 || c2 < 0)\r", "+\t\t\t|| ((c3 = Character.getNumericValue(source[currentPosition++])) > 15 || c3 < 0)\r", "+\t\t\t|| ((c4 = Character.getNumericValue(source[currentPosition++])) > 15 || c4 < 0)) {\r", "+\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);\r", "+\t\t}\r", "+\r", "+\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "+\t\tif (recordLineSeparator\r", "+\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\tpushLineSeparator();\r", "+\t\tif (Character.isWhitespace(currentCharacter))\r", "+\t\t\treturn true;\r", "+\r", "+\t\t//buffer the new char which is not a white space\r", "+\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;\r", "+\t\t//withoutUnicodePtr == 1 is true here\r", "+\t\treturn false;\r", "+\t} catch (IndexOutOfBoundsException e){\r", "-\r", "-\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "-\tif (recordLineSeparator\r", "-\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\tpushLineSeparator();\r", "-\tif (Character.isWhitespace(currentCharacter))\r", "-\t\treturn true;\r", "-\r", "-\t//buffer the new char which is not a white space\r", "-\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;\r", "-\t//withoutUnicodePtr == 1 is true here\r", "-\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ea7cf81a3ff2ed2d1e14c1e8075398", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tprivate void locateMatches() throws JavaModelException", "signatureAfterChange": "\r \tprivate void locateMatches() throws JavaModelException", "diff": ["-\t\tthis.lookupEnvironment.completeTypeBindings();\r", "+\t\ttry {\r", "+\t\t\tthis.lookupEnvironment.completeTypeBindings();\r", "+\t\t} catch (AbortCompilation e) {\r", "+\t\t\t// problem with class path: it could not find base classes\r", "+\t\t\tthrow new JavaModelException(\r", "+\t\t\t\te,\r", "+\t\t\t\tIJavaModelStatusConstants.BUILDER_INITIALIZATION_ERROR);\r", "+\t\t}\r"]}], "num": 59854}
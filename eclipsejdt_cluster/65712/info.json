{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29ea07d430d51fea105b44a55a7e0318", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1332ed340bd70d17543242425ca10b16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "fb92cfb822669ddb00db1cf41e3bdb1057d4d00d", "commitAfterChange": "00c13f2feec2211d8da2f8282a37167ca349b1b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " SearchPattern currentPattern()", "diff": ["-}", "-public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\tthis.resetQuery();", "-\tSimpleSet intersectedNames = null;", "-\ttry {", "-\t\tindex.startQuery();", "-\t\tdo {", "-\t\t\tSearchPattern pattern = ((InternalSearchPattern) this).currentPattern();", "-\t\t\tEntryResult[] entries = ((InternalSearchPattern)pattern).queryIn(index);", "-\t\t\tif (entries == null) return;", "-", "-\t\t\tSearchPattern decodedResult = pattern.getBlankPattern();", "-\t\t\tSimpleSet newIntersectedNames = new SimpleSet(3);", "-\t\t\tfor (int i = 0, l = entries.length; i < l; i++) {", "-\t\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\t\t\t\tEntryResult entry = entries[i];", "-\t\t\t\tdecodedResult.decodeIndexKey(entry.getWord());", "-\t\t\t\tif (pattern.matchesDecodedKey(decodedResult)) {", "-\t\t\t\t\tString[] names = entry.getDocumentNames(index);", "-\t\t\t\t\tif (intersectedNames != null) {", "-\t\t\t\t\t\tfor (int j = 0, n = names.length; j < n; j++)", "-\t\t\t\t\t\t\tif (intersectedNames.includes(names[j]))", "-\t\t\t\t\t\t\t\tnewIntersectedNames.add(names[j]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfor (int j = 0, n = names.length; j < n; j++)", "-\t\t\t\t\t\t\tnewIntersectedNames.add(names[j]);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tif (newIntersectedNames.elementSize == 0) return;", "-\t\t\tintersectedNames = newIntersectedNames;", "-\t\t} while (this.hasNextQuery());", "-\t} finally {", "-\t\tindex.stopQuery();", "-", "-\tString containerPath = index.containerPath;", "-\tObject[] names = intersectedNames.values;", "-\tfor (int i = 0, l = names.length; i < l; i++)", "-\t\tif (names[i] != null)", "-\t\t\t((InternalSearchPattern) this).acceptMatch((String) names[i], containerPath, null/*no pattern*/, requestor, participant, scope); // AndPatterns cannot provide the decoded result", "+SearchPattern currentPattern() {", "+\treturn this.patterns[this.current++];", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ce4e31fd376d351c3d8e9c6544db5bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "3a5fcda14833c30c433021580cbaac3b7d8e9113", "commitAfterChange": "493886e55be15953b837fd1face3355603b485b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private boolean canSeeFocus(IPath projectOrJarPath)", "signatureAfterChange": " private boolean canSeeFocus(IPath projectOrJarPath)", "diff": ["-\tif (this.searchScope instanceof JavaWorkspaceScope) return true;", "+\t// if (this.searchScope instanceof JavaWorkspaceScope) return true;", "+\treturn canSeeFocus(getProjectOrJar(this.focus), projectOrJarPath);", "+}", "-\t\twhile (!(this.focus instanceof IJavaProject) && !(this.focus instanceof JarPackageFragmentRoot)) {", "-\t\t\tthis.focus = this.focus.getParent();", "-\t\t}", "-\t\tIJavaModel model = this.focus.getJavaModel();", "-\t\tIJavaProject project = this.getJavaProject(projectOrJarPath, model);", "-\t\tif (this.focus instanceof JarPackageFragmentRoot) {", "-\t\t\tJarPackageFragmentRoot jar = (JarPackageFragmentRoot)this.focus;", "-\t\t\t\treturn this.haveSameParent(projectOrJarPath, jarPath, model); ", "-\t\t\tIJavaProject focusProject = (IJavaProject)this.focus;"]}], "num": 65712}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b559204762f51fed5fdb14f423823d86", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7704697f674a237bcced1a36379d1d8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "b2a1a7d064fd5695fce4ad30f84d3e52d57db8d6", "commitAfterChange": "58d495f741112fe1313f49af60925198c18bb8e1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t\tpublic void logTiming(long time, long lineCount)", "signatureAfterChange": " \t\tpublic void logTiming(CompilerStats compilerStats)", "diff": ["-\t\tpublic void logTiming(long time, long lineCount) {", "+\t\tpublic void logTiming(CompilerStats compilerStats) {", "+\t\t\tlong time = compilerStats.elapsedTime();", "+\t\t\tlong lineCount = compilerStats.lineCount;", "-\t\t\t\tthis.printlnOut(this.main.bind(", "-\t\t\t\t\t\"compile.instantTime\", //$NON-NLS-1$", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tString.valueOf(lineCount),", "-\t\t\t\t\t\tString.valueOf(time),", "-\t\t\t\t\t\tString.valueOf(((int) (lineCount * 10000.0 / time)) / 10.0) }));", "+\t\t\t\tthis.printlnOut(", "+\t\t\t\t\tthis.main.bind(\"compile.instantTime\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tString.valueOf(lineCount),", "+\t\t\t\t\t\t\tString.valueOf(time),", "+\t\t\t\t\t\t\tString.valueOf(((int) (lineCount * 10000.0 / time)) / 10.0),", "+\t\t\t\t\t\t}));", "-\t\t\t\tthis.printlnOut(this.main.bind(\"compile.totalTime\", String.valueOf(time))); //$NON-NLS-1$", "+\t\t\t\tthis.printlnOut(", "+\t\t\t\t\tthis.main.bind(\"compile.totalTime\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tString.valueOf(time),", "+\t\t\t\t\t\t})); ", "+\t\t\t}", "+\t\t\tif ((this.main.timing & Main.TIMING_DETAILED) != 0) {", "+\t\t\t\tlong readTime = compilerStats.sourceInputTime + compilerStats.binaryInputTime;", "+\t\t\t\tthis.printlnOut(", "+\t\t\t\t\t\tthis.main.bind(\"compile.detailedTime\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tString.valueOf(compilerStats.parseTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (compilerStats.parseTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(compilerStats.resolveTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (compilerStats.resolveTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(compilerStats.analyzeTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (compilerStats.analyzeTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(compilerStats.generateTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (compilerStats.generateTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t}));", "+\t\t\t\tthis.printlnOut(", "+\t\t\t\t\t\tthis.main.bind(\"compile.ioTime\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tString.valueOf(readTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (readTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(compilerStats.outputTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (compilerStats.outputTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d71226fb20d2090e196b004212143092", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "b2a1a7d064fd5695fce4ad30f84d3e52d57db8d6", "commitAfterChange": "58d495f741112fe1313f49af60925198c18bb8e1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t\tpublic void logAverage(long[] times, long lineCount)", "signatureAfterChange": "  \t\tpublic void logAverage()", "diff": ["-\t\tpublic void logAverage(long[] times, long lineCount) {", "-\t\t\tArrays.sort(times);", "-\t\t\tfinal int length = times.length;", "-\t\t\tlong sum = 0;", "+\t\tpublic void logAverage() {", "+\t\t\tArrays.sort(this.main.compilerStats);", "+\t\t\tlong lineCount = this.main.compilerStats[0].lineCount;", "+\t\t\tfinal int length = this.main.maxRepetition;", "+\t\t\tlong sum = 0, readSum = 0, writeSum = 0;", "+\t\t\tlong parseSum = 0, resolveSum = 0, analyzeSum = 0, generateSum = 0;", "-\t\t\t\tsum += times[i];", "+\t\t\t\tCompilerStats stats = this.main.compilerStats[i];", "+\t\t\t\tsum += stats.elapsedTime();", "+\t\t\t\treadSum += stats.sourceInputTime + stats.binaryInputTime;", "+\t\t\t\twriteSum += stats.outputTime;", "+\t\t\t\tparseSum += stats.parseTime;", "+\t\t\t\tresolveSum += stats.resolveTime;", "+\t\t\t\tanalyzeSum += stats.analyzeTime;", "+\t\t\t\tgenerateSum += stats.generateTime;", "+\t\t\tlong readTime = readSum/(length - 2);", "+\t\t\tlong writeTime = writeSum/(length - 2);", "+\t\t\tlong parseTime = parseSum/(length - 2);", "+\t\t\tlong resolveTime = resolveSum/(length - 2);", "+\t\t\tlong analyzeTime = analyzeSum/(length - 2);", "+\t\t\tlong generateTime = generateSum/(length - 2);", "-\t\t\t\t\tString.valueOf(((int) (lineCount * 10000.0 / time)) / 10.0) }));", "+\t\t\t\t\tString.valueOf(((int) (lineCount * 10000.0 / time)) / 10.0),", "+\t\t\t\t}));", "+\t\t\tif ((this.main.timing & Main.TIMING_DETAILED) != 0) {", "+\t\t\t\tthis.printlnOut(", "+\t\t\t\t\t\tthis.main.bind(\"compile.detailedTime\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tString.valueOf(parseTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (parseTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(resolveTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (resolveTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(analyzeTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (analyzeTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(generateTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (generateTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t}));", "+\t\t\t\tthis.printlnOut(", "+\t\t\t\t\t\tthis.main.bind(\"compile.ioTime\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tString.valueOf(readTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (readTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t\tString.valueOf(writeTime),", "+\t\t\t\t\t\t\t\tString.valueOf(((int) (writeTime * 1000.0 / time)) / 10.0),", "+\t\t\t\t\t\t\t}));", "+\t\t\t}\t\t\t"]}], "num": 5765}
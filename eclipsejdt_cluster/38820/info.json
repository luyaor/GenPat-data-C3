{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "415542e33a07f351e312435bc9decab1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241b85b7af4f7cbd327aa028630d1019", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "7315a9946428ac17ed2f3c53c5f292f76322b904", "commitAfterChange": "62f8132aa6e66bc79d2cfcc69b7efa69d325d62b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\t\tif (block.isInlined()) \t{", "-\t\t\t\tthis.column++; // Add extra character for inline tag", "-\t\t\t}", "-\t                    buffer.append(this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition-this.scanner.startPosition);", "+\t                    if (token == TerminalTokens.TokenNameRBRACE) {", "+\t\t                    buffer.append(this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition-this.scanner.startPosition);", "+\t\t\t\t\t    \tthis.column += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t                    }", "-//\t\tif (block.isHeaderLine()) maxColumn++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68a2c57e4c760e8cce34a81f7676897", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 66, "signatureBeforeChange": "  \tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text)", "signatureAfterChange": "  \tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text)", "diff": ["+", "+\t\t// Special case for immutable tags", "+\t\tif (text.isImmutableHtmlTag()) {", "+\t\t\tthis.scanner.resetTo(text.sourceStart , text.sourceEnd);", "+\t\t\tint textLength = 0;", "+\t\t\twhile (!this.scanner.atEnd()) {", "+\t\t\t\ttry {", "+\t                int token = this.scanner.getNextToken();", "+\t    \t\t\tif (token == TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.getCurrentTokenEndPosition()) >= 0) {", "+\t\t\t\t\t\t\treturn textLength;", "+\t\t\t\t\t\t}", "+\t    \t\t\t}", "+                } catch (InvalidInputException e) {", "+\t                return textLength;", "+                }", "+    \t\t\ttextLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t}", "+\t\t\treturn textLength;", "+\t\t}"]}], "num": 38820}
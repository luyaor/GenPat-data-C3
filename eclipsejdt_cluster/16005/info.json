{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b207cdac23a2d05e86be9de001751684", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280b5da0d1598725f1c953c0010f4de9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "2d6dd32ebdeb3cb0db4aae1fd68101be25bf888e", "commitAfterChange": "f8ceffc6d1e175591b286c476ddc0470a165aef9", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tLambdaExpression copy()", "signatureAfterChange": "  \tLambdaExpression copy()", "diff": ["-\t\tfinal char[] source = this.compilationResult.getCompilationUnit().getContents();", "-\t\tLambdaExpression copy =  (LambdaExpression) parser.parseLambdaExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\tfinal ICompilationUnit compilationUnit = this.compilationResult.getCompilationUnit();", "+\t\tchar[] source = compilationUnit != null ? compilationUnit.getContents() : this.text;", "+\t\tLambdaExpression copy =  (LambdaExpression) parser.parseLambdaExpression(source, compilationUnit != null ? this.sourceStart : 0, this.sourceEnd - this.sourceStart + 1, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9d9743d067ad44c3f415ff3fdaf6c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tfinal Parser parser = new Parser(this.enclosingScope.problemReporter(), false);", "-\t\tfinal char[] source = this.compilationResult.getCompilationUnit().getContents();", "-\t\tReferenceExpression copy =  (ReferenceExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "-\t\t\t\t\t\t\t\t\t\tthis.enclosingScope.referenceCompilationUnit(), false /* record line separators */);", "+\t\tReferenceExpression copy = copy();"]}], "num": 16005}
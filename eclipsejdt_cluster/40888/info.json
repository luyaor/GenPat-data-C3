{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "933068fa5c19af38c0c865c5b1377517", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66448aa3bab0a9c864ad8dc50321a83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private String expectedFormattedSource(String source)", "signatureAfterChange": "  private String expectedFormattedSource(String source)", "diff": ["+\t\tfinal TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\tint headerEndPosition = types == null ? compilationUnitDeclaration.sourceEnd : types[0].declarationSourceStart;", "-\t\t\tint indentationLevel = getIndentationLevel(scanner, commentStart);", "-\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, LINE_SEPARATOR);", "+\t\t\tif (commentStart >= headerEndPosition) {", "+\t\t\t\tint indentationLevel = getIndentationLevel(scanner, commentStart);", "+\t\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, LINE_SEPARATOR);", "+\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f09ea6145047d69c5adc5141b45a486b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic boolean visit( \t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\tCompilationUnitScope scope)", "diff": ["+", "+\t\t// Set header end position", "+\t\tfinal TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\tint headerEndPosition = types == null ? compilationUnitDeclaration.sourceEnd : types[0].declarationSourceStart;", "+\t\tthis.scribe.setHeaderComment(headerEndPosition);", "+", "-\t\t\tprintComment(true);", "+\t\t\tprintComment();", "-\t\t\tthis.scribe.printQualifiedReference(compilationUnitDeclaration.currentPackage.sourceEnd);", "+\t\t\tthis.scribe.printQualifiedReference(compilationUnitDeclaration.currentPackage.sourceEnd, false/*do not expect parenthesis*/);", "-\t\tfinal TypeDeclaration[] types = compilationUnitDeclaration.types;"]}], "num": 40888}
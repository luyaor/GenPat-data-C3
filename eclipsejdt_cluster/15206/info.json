{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "141b47482b247ab3d62f032b403a5fa0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732dd225bbe877b2ba74157c51047aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic boolean visit( \t\tImportReference importRef, \t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit(EnumConstant enumConstant, ClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(EnumConstant enumConstant, ClassScope scope) {", "+        /*", "+         * Print comments to get proper line number", "+         */", "+        this.scribe.printComment();", "+        final int line = this.scribe.line; ", "+        ", "+        this.scribe.printModifiers(enumConstant.annotations, this);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "+", "+\t\tExpression[] arguments = enumConstant.arguments;", "+\t\tif (arguments != null) {", "+\t\t\tformatEnumConstantArguments(", "+\t\t\t\tenumConstant,", "+\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_before_comma_in_enum_constant_arguments,", "+\t\t\t\tthis.preferences.insert_space_after_comma_in_enum_constant_arguments,", "+\t\t\t\tthis.preferences.alignment_for_arguments_in_enum_constant);\t\t\t", "+\t\t}", "+\t\t", "+\t\tint fieldsCount = enumConstant.fields == null ? 0 : enumConstant.fields.length;", "+\t\tint methodsCount = enumConstant.methods == null ? 0 : enumConstant.methods.length;", "+\t\tint enumsCount = enumConstant.enums == null ? 0 : enumConstant.enums.length;", "+\t\tint membersCount = enumConstant.memberTypes == null ? 0 : enumConstant.memberTypes.length;", "+\t\t", "+\t\tif (fieldsCount != 0 || methodsCount != 0 || membersCount != 0 || enumsCount != 0) {", "+\t\t\t/*", "+\t\t\t * Type body", "+\t\t\t */", "+\t\t\tString enum_constant_brace = this.preferences.brace_position_for_enum_constant;", "+\t", "+\t        formatLeftCurlyBrace(line, enum_constant_brace);", "+\t\t\tformatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, enumConstant);", "+\t\t\t", "+\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\tthis.scribe.indent();", "+\t\t\t}", "+\t", "+\t\t\tformatTypeMembers(enumConstant);", "+\t", "+\t\t\tthis.scribe.printComment();", "+\t\t\t", "+\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (this.preferences.insert_new_line_in_empty_enum_constant) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "+\t\t\tthis.scribe.printTrailingComment();", "+\t\t\tif (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\tif (hasComments()) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afc247feec575aa42b4e5ec9718597a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TextEditsBuilder.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void flushBuffer(int currentPosition)", "signatureAfterChange": "  \tprivate void flushBuffer(int currentPosition)", "diff": ["-\t\tif (!sourceMatch && checkRegions(this.counter, currentPosition)) {", "-\t\t\tTextEdit edit = getReplaceEdit(this.counter, currentPosition, buffered);", "-\t\t\tthis.edits.add(edit);", "+\t\twhile (!sourceMatch && this.currentRegion < this.regions.size()) {", "+\t\t\tIRegion region = this.regions.get(this.currentRegion);", "+\t\t\tif (currentPosition < region.getOffset())", "+\t\t\t\tbreak;", "+\t\t\tint regionEnd = region.getOffset() + region.getLength();", "+\t\t\tif (this.counter >= regionEnd) {", "+\t\t\t\tthis.currentRegion++;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tif (this.currentRegion == this.regions.size() - 1", "+\t\t\t\t\t|| this.regions.get(this.currentRegion + 1).getOffset() > currentPosition) {", "+\t\t\t\tthis.edits.add(getReplaceEdit(this.counter, currentPosition, buffered, region));", "+\t\t\t\tbreak;", "+\t\t\t}", "+", "+\t\t\t// this edit will span more than one region, split it", "+\t\t\tIRegion nextRegion = this.regions.get(this.currentRegion + 1);", "+\t\t\tint bestSplit = 0;", "+\t\t\tint bestSplitScore = Integer.MAX_VALUE;", "+\t\t\tfor (int i = 0; i < buffered.length(); i++) {", "+\t\t\t\tReplaceEdit edit1 = getReplaceEdit(this.counter, regionEnd, buffered.substring(0, i), region);", "+\t\t\t\tReplaceEdit edit2 = getReplaceEdit(regionEnd, currentPosition, buffered.substring(i), nextRegion);", "+\t\t\t\tint score = edit1.getLength() + edit1.getText().length() + edit2.getLength() + edit2.getText().length();", "+\t\t\t\tif (score < bestSplitScore) {", "+\t\t\t\t\tbestSplit = i;", "+\t\t\t\t\tbestSplitScore = score;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.edits.add(getReplaceEdit(this.counter, regionEnd, buffered.substring(0, bestSplit), region));", "+\t\t\tbuffered = buffered.substring(bestSplit);", "+\t\t\tthis.counter = regionEnd;"]}], "num": 15206}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bd9ba6e1f55bef1ec43562c87d882f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5402cffd3a0108c35a90610daf535d6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "9b921f99315dbbd37e5ce242cb0efa8c0bd12214", "commitAfterChange": "6b16361a0fd854f68a5a4796074fceea4b12f838", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options)", "signatureAfterChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options, \t\tString[] vmArguments)", "diff": ["-\t\tJavacTestOptions options) {", "+\t\tJavacTestOptions options,", "+\t\tString[] vmArguments) {", "+\t// WORK reorder parameters", "-\t\t\t\t\truntime.execute(javacOutputDirectory, \"\", testFiles[0].substring(0, testFiles[0].length() - 5), stdout, stderr);", "+\t\t\t\t\tString vmOptions = \"\";", "+\t\t\t\t\tif (vmArguments != null) {", "+\t\t\t\t\t\tint l = vmArguments.length;", "+\t\t\t\t\t\tif (l > 0) {", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(vmArguments[0]);", "+\t\t\t\t\t\t\tfor (int i = 1; i < l; i++) {", "+\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tbuffer.append(vmArguments[i]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tvmOptions = buffer.toString();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\truntime.execute(javacOutputDirectory, vmOptions, testFiles[0].substring(0, testFiles[0].length() - 5), stdout, stderr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "868a157ceae12b7cac3bf323984f133f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \t\t \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, boolean considerNewLineAfterComment)", "signatureAfterChange": "  \tpublic void printNextToken(int[] expectedTokenTypes)", "diff": ["-\t\t", "-\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, boolean considerNewLineAfterComment){", "-\t\tprintComment();", "-\t\ttry {", "-\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\tchar[] currentTokenSource = this.scanner.getRawTokenSource();", "-\t\t\tif (expectedTokenType != this.currentToken) {", "-\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t}", "-\t\t\tthis.print(currentTokenSource, considerSpaceIfAny);", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "-\t\t}", "-\t}"]}], "num": 13604}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76b3c349dbbfebdb5951b5c464d5911e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85082247f655269a67c5ebd01170a5da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4", "commitAfterChange": "e92ab0eafbe7472576da485243db5aa49da5df74", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+            checkNullAnnotations(scope);", "-        if (scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {", "-        \tif (this.expectedType == null || !NullAnnotationMatching.hasContradictions(this.expectedType)) { // otherwise assume it has been reported and we can do nothing here", "-\t        \t// TODO: simplify by using this.freeParameters?", "-\t        \tint len;", "-\t        \tint expectedlen = this.binding.parameters.length;", "-\t        \tint providedLen = this.descriptor.parameters.length;", "-\t        \tif (this.receiverPrecedesParameters)", "-\t        \t\tprovidedLen--; // one parameter is 'consumed' as the receiver", "-\t        \tboolean isVarArgs = false;", "-\t        \tif (this.binding.isVarargs()) {", "-\t        \t\tisVarArgs = (providedLen == expectedlen)", "-\t\t\t\t\t\t? !this.descriptor.parameters[expectedlen-1].isCompatibleWith(this.binding.parameters[expectedlen-1])", "-\t\t\t\t\t\t: true;", "-\t        \t\tlen = providedLen; // binding parameters will be padded from InferenceContext18.getParameter()", "-\t        \t} else {", "-\t        \t\tlen = Math.min(expectedlen, providedLen);", "-\t        \t}", "-\t    \t\tfor (int i = 0; i < len; i++) {", "-\t    \t\t\tTypeBinding descriptorParameter = this.descriptor.parameters[i + (this.receiverPrecedesParameters ? 1 : 0)];", "-\t    \t\t\tTypeBinding bindingParameter = InferenceContext18.getParameter(this.binding.parameters, i, isVarArgs);", "-\t    \t\t\tNullAnnotationMatching annotationStatus = NullAnnotationMatching.analyse(bindingParameter, descriptorParameter, FlowInfo.UNKNOWN);", "-\t    \t\t\tif (annotationStatus.isAnyMismatch()) {", "-\t    \t\t\t\t// immediate reporting:", "-\t    \t\t\t\tscope.problemReporter().referenceExpressionArgumentNullityMismatch(this, bindingParameter, descriptorParameter, this.descriptor, i, annotationStatus);", "-\t    \t\t\t}", "-\t    \t\t}", "-\t        \tif (!this.binding.isConstructor() && (this.descriptor.returnType.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t        \t\t// since constructors never return null we don't have to check those anyway.", "-\t        \t\tif ((this.binding.returnType.tagBits & TagBits.AnnotationNonNull) == 0) {", "-\t        \t\t\tchar[][] providedAnnotationName = ((this.binding.returnType.tagBits & TagBits.AnnotationNullable) != 0) ?", "-\t        \t\t\t\t\tscope.environment().getNullableAnnotationName() : null;", "-\t        \t\t\tscope.problemReporter().illegalReturnRedefinition(this, this.descriptor,", "-\t        \t\t\t\t\tscope.environment().getNonNullAnnotationName(),", "-\t        \t\t\t\t\tprovidedAnnotationName, this.binding.returnType);", "-\t        \t\t}", "-\t        \t}", "-        \t}", "-        }", "+        checkNullAnnotations(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6555e186914dc27d31bc3f4ff1a197f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "06338d59e18dd650cacadfb53051f533c530fabf", "commitAfterChange": "07de476492c87dc4eb8797084ffe99575b2b9c74", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-        \t// TODO: simplify by using this.freeParameters?", "-        \tint len;", "-        \tint expectedlen = this.binding.parameters.length;", "-        \tint providedLen = this.descriptor.parameters.length;", "-        \tif (this.receiverPrecedesParameters)", "-        \t\tprovidedLen--; // one parameter is 'consumed' as the receiver", "-        \tboolean isVarArgs = false;", "-        \tif (this.binding.isVarargs()) {", "-        \t\tisVarArgs = (providedLen == expectedlen)", "-\t\t\t\t\t? !this.descriptor.parameters[expectedlen-1].isCompatibleWith(this.binding.parameters[expectedlen-1])", "-\t\t\t\t\t: true;", "-        \t\tlen = providedLen; // binding parameters will be padded from InferenceContext18.getParameter()", "-        \t} else {", "-        \t\tlen = Math.min(expectedlen, providedLen);", "-        \t}", "-    \t\tfor (int i = 0; i < len; i++) {", "-    \t\t\tTypeBinding descriptorParameter = this.descriptor.parameters[i + (this.receiverPrecedesParameters ? 1 : 0)];", "-    \t\t\tTypeBinding bindingParameter = InferenceContext18.getParameter(this.binding.parameters, i, isVarArgs);", "-    \t\t\tNullAnnotationMatching annotationStatus = NullAnnotationMatching.analyse(bindingParameter, descriptorParameter, FlowInfo.UNKNOWN);", "-    \t\t\tif (annotationStatus.isAnyMismatch()) {", "-    \t\t\t\t// immediate reporting:", "-    \t\t\t\tscope.problemReporter().referenceExpressionArgumentNullityMismatch(this, bindingParameter, descriptorParameter, this.descriptor, i, annotationStatus);", "-    \t\t\t}", "-    \t\t}", "-        \tif (!this.binding.isConstructor() && (this.descriptor.returnType.tagBits & TagBits.AnnotationNonNull) != 0) {", "-        \t\t// since constructors never return null we don't have to check those anyway.", "-        \t\tif ((this.binding.returnType.tagBits & TagBits.AnnotationNonNull) == 0) {", "-        \t\t\tchar[][] providedAnnotationName = ((this.binding.returnType.tagBits & TagBits.AnnotationNullable) != 0) ?", "-        \t\t\t\t\tscope.environment().getNullableAnnotationName() : null;", "-        \t\t\tscope.problemReporter().illegalReturnRedefinition(this, this.descriptor,", "-        \t\t\t\t\tscope.environment().getNonNullAnnotationName(),", "-        \t\t\t\t\tprovidedAnnotationName, this.binding.returnType);", "-        \t\t}", "+        \tif (this.expectedType == null || !NullAnnotationMatching.hasContradictions(this.expectedType)) { // otherwise assume it has been reported and we can do nothing here", "+\t        \t// TODO: simplify by using this.freeParameters?", "+\t        \tint len;", "+\t        \tint expectedlen = this.binding.parameters.length;", "+\t        \tint providedLen = this.descriptor.parameters.length;", "+\t        \tif (this.receiverPrecedesParameters)", "+\t        \t\tprovidedLen--; // one parameter is 'consumed' as the receiver", "+\t        \tboolean isVarArgs = false;", "+\t        \tif (this.binding.isVarargs()) {", "+\t        \t\tisVarArgs = (providedLen == expectedlen)", "+\t\t\t\t\t\t? !this.descriptor.parameters[expectedlen-1].isCompatibleWith(this.binding.parameters[expectedlen-1])", "+\t\t\t\t\t\t: true;", "+\t        \t\tlen = providedLen; // binding parameters will be padded from InferenceContext18.getParameter()", "+\t        \t} else {", "+\t        \t\tlen = Math.min(expectedlen, providedLen);", "+\t        \t}", "+\t    \t\tfor (int i = 0; i < len; i++) {", "+\t    \t\t\tTypeBinding descriptorParameter = this.descriptor.parameters[i + (this.receiverPrecedesParameters ? 1 : 0)];", "+\t    \t\t\tTypeBinding bindingParameter = InferenceContext18.getParameter(this.binding.parameters, i, isVarArgs);", "+\t    \t\t\tNullAnnotationMatching annotationStatus = NullAnnotationMatching.analyse(bindingParameter, descriptorParameter, FlowInfo.UNKNOWN);", "+\t    \t\t\tif (annotationStatus.isAnyMismatch()) {", "+\t    \t\t\t\t// immediate reporting:", "+\t    \t\t\t\tscope.problemReporter().referenceExpressionArgumentNullityMismatch(this, bindingParameter, descriptorParameter, this.descriptor, i, annotationStatus);", "+\t    \t\t\t}", "+\t    \t\t}", "+\t        \tif (!this.binding.isConstructor() && (this.descriptor.returnType.tagBits & TagBits.AnnotationNonNull) != 0) {", "+\t        \t\t// since constructors never return null we don't have to check those anyway.", "+\t        \t\tif ((this.binding.returnType.tagBits & TagBits.AnnotationNonNull) == 0) {", "+\t        \t\t\tchar[][] providedAnnotationName = ((this.binding.returnType.tagBits & TagBits.AnnotationNullable) != 0) ?", "+\t        \t\t\t\t\tscope.environment().getNullableAnnotationName() : null;", "+\t        \t\t\tscope.problemReporter().illegalReturnRedefinition(this, this.descriptor,", "+\t        \t\t\t\t\tscope.environment().getNonNullAnnotationName(),", "+\t        \t\t\t\t\tprovidedAnnotationName, this.binding.returnType);", "+\t        \t\t}", "+\t        \t}"]}], "num": 7057}
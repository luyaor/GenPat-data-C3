{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c584929edea6de53010546dc4f744ee", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "739c67c5ad32819e02fd0f71e42c3c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a6d9bda80e868cca3f3164e68cf46fd5fb2642ae", "commitAfterChange": "b91ada4688442ba390f3bab334c211412d8a03f2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "signatureAfterChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "diff": ["-\t\t", "-\t\t", "-\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "-\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "-\t\tTextEditGroup editGroup= getEditGroup(event);", "-\t\t", "-\t\t\tint tok= getScanner().readNext(offset, true);", "-\t\t\tint startPos= getScanner().getCurrentStartOffset();", "-\t\t\tint endPos= startPos;", "+\t\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "+\t\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "+\t\t\tTextEditGroup editGroup= getEditGroup(event);", "+\t\t", "+\t\t\tTokenScanner scanner= getScanner();", "+", "+\t\t\tint tok= scanner.readNext(offset, false);", "+\t\t\tint startPos= scanner.getCurrentStartOffset();", "+\t\t\tint nextStart= startPos;", "+\t\t\t\tif (TokenScanner.isComment(tok)) {", "+\t\t\t\t\ttok= scanner.readNext(true); // next non-comment token", "+\t\t\t\t}", "-\t\t\t\ttok= getScanner().readNext(true);", "-\t\t\t\tint currPos= endPos;", "-\t\t\t\tendPos= getScanner().getCurrentStartOffset();", "+\t\t\t\ttok= getScanner().readNext(false); // include comments", "+\t\t\t\tint currPos= nextStart;", "+\t\t\t\tnextStart= getScanner().getCurrentStartOffset();", "-\t\t\t\t\tdoTextRemove(currPos, endPos - currPos, editGroup);", "+\t\t\t\t\tdoTextRemove(currPos, nextStart - currPos, editGroup);", "-\t\t\t\tif (startPos != endPos) {", "+\t\t\t\tif (startPos != nextStart) {", "-\t\t\t\tdoTextInsert(endPos, buf.toString(), editGroup);", "+\t\t\t\tdoTextInsert(nextStart, buf.toString(), editGroup);", "-\t\t\t// ignore", "-\t\t}\t\t", "+\t\t\thandleException(e);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dd86caa6f1e0b5fb2b976d4acadc343", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a6d9bda80e868cca3f3164e68cf46fd5fb2642ae", "commitAfterChange": "b91ada4688442ba390f3bab334c211412d8a03f2", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tprivate void rewriteReturnType(MethodDeclaration node, boolean isConstructor, boolean isConstructorChange)", "signatureAfterChange": "  \tprivate void rewriteReturnType(MethodDeclaration node, boolean isConstructor, boolean isConstructorChange)", "diff": ["+\t\t// difficult cases: return type insert or remove", "-\t\t\ttry {", "-\t\t\t\tint startPos= node.getStartPosition();", "-\t\t\t\t", "-\t\t\t\tgetScanner().setOffset(startPos);", "-\t\t\t\tint token= getScanner().readNext(true);", "-\t\t\t\twhile (TokenScanner.isModifier(token)) {", "-\t\t\t\t\tstartPos= getScanner().getCurrentEndOffset();", "-\t\t\t\t\ttoken= getScanner().readNext(true);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tTextEditGroup editGroup= getEditGroup(node, property);", "-\t\t\t\tif (isConstructor || !returnTypeExists) { // insert", "-\t\t\t\t\tdoTextInsert(startPos, \" \", editGroup); //$NON-NLS-1$", "-\t\t\t\t\tdoTextInsert(startPos, newReturnType, getIndent(startPos), true, editGroup);", "-\t\t\t\t} else { // remove", "-\t\t\t\t\tint len= getExtendedEnd(originalReturnType) - startPos;", "-\t\t\t\t\tdoTextRemoveAndVisit(startPos, len, originalReturnType, editGroup);", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "+\t\t\t// use the start offset of the method name to insert", "+\t\t\tASTNode originalMethodName= (ASTNode) getOriginalValue(node, MethodDeclaration.NAME_PROPERTY);", "+\t\t\tint nextStart= getExtendedOffset(originalMethodName);", "+\t\t\tTextEditGroup editGroup= getEditGroup(node, property);", "+\t\t\tif (isConstructor || !returnTypeExists) { // insert", "+\t\t\t\tdoTextInsert(nextStart, newReturnType, getIndent(nextStart), true, editGroup);", "+\t\t\t\tdoTextInsert(nextStart, \" \", editGroup); //$NON-NLS-1$", "+\t\t\t} else { // remove up to the method name", "+\t\t\t\tint offset= getExtendedOffset(originalReturnType);", "+\t\t\t\tdoTextRemoveAndVisit(offset, nextStart - offset, originalReturnType, editGroup);"]}], "num": 8286}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6aa1f34e2294821aeb98e47a2c083d87", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6647ad8442d5b7edec57821456e70773", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "a1fa0960e8bf8c2d86b0b4556cf5470457cb514c", "commitAfterChange": "0ea38f06cd1227fc139bddac2eec897cb8fbed35", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void assertRequestedBindingFound(final MarkerInfo[] markerInfos, final String expectedKey) throws JavaModelException", "signatureAfterChange": " \tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException", "diff": ["-\tprivate void assertRequestedBindingFound(final MarkerInfo[] markerInfos, final String expectedKey) throws JavaModelException {", "-\t\tICompilationUnit[] workingCopies;", "-\t\tworkingCopies = createWorkingCopies(markerInfos);", "-\t\tclass Requestor extends TestASTRequestor {", "-\t\t\tString bindingKey;", "-\t\t\tint index = -1;", "-\t\t\tString foundKey;", "-\t\t\tpublic void acceptAST(CompilationUnit cu, ICompilationUnit source) {", "-\t\t\t\tsuper.acceptAST(cu, source);", "-\t\t\t\tASTNode node = findNode(cu, markerInfos[++this.index]);", "-\t\t\t\tif (node != null) {", "-\t\t\t\t\tIBinding binding = null;", "-\t\t\t\t\tif (node instanceof PackageDeclaration) {", "-\t\t\t\t\t\tbinding = ((PackageDeclaration) node).resolveBinding();", "-\t\t\t\t\t} else if (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\tbinding = ((TypeDeclaration) node).resolveBinding();", "-\t\t\t\t\t} else if (node instanceof AnonymousClassDeclaration) {", "-\t\t\t\t\t\tbinding = ((AnonymousClassDeclaration) node).resolveBinding();", "-\t\t\t\t\t} else if (node instanceof TypeDeclarationStatement) {", "-\t\t\t\t\t\tbinding = ((TypeDeclarationStatement) node).resolveBinding();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.bindingKey = binding == null ? null : binding.getKey();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tpublic void acceptBinding(IBinding binding, String key) {", "-\t\t\t\tsuper.acceptBinding(binding, key);", "-\t\t\t\tthis.foundKey = binding.getKey();", "-\t\t\t}", "-\t\t};", "-\t\tRequestor requestor = new Requestor();", "-\t\tresolveASTs(workingCopies, new String[] {expectedKey}, requestor);", "-\t\t", "-\t\tif (!expectedKey.equals(requestor.bindingKey))", "-\t\t\tSystem.out.println(Util.displayString(expectedKey, 3));", "-\t\tassertEquals(\"Unexpected binding for marked node\", expectedKey, requestor.bindingKey);", "-\t\t", "-\t\tif (!expectedKey.equals(requestor.foundKey)) {", "-\t\t\tSystem.out.println(Util.displayString(requestor.foundKey, 3));", "-\t\t}", "-\t\tassertEquals(\"Unexpected binding found by acceptBinding\", expectedKey, requestor.foundKey);", "-\t}", "+\tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException {", "+\t\t\tfinal MarkerInfo[] markerInfos = createMarkerInfos(pathAndSources);", "+\t\t\tworkingCopies = createWorkingCopies(markerInfos);", "+\t\t\tclass Requestor extends TestASTRequestor {", "+\t\t\t\tString bindingKey;", "+\t\t\t\tint index = -1;", "+\t\t\t\tString foundKey;", "+\t\t\t\tpublic void acceptAST(CompilationUnit cu, ICompilationUnit source) {", "+\t\t\t\t\tsuper.acceptAST(cu, source);", "+\t\t\t\t\tASTNode node = findNode(cu, markerInfos[++this.index]);", "+\t\t\t\t\tif (node != null) {", "+\t\t\t\t\t\tIBinding binding = null;", "+\t\t\t\t\t\tif (node instanceof PackageDeclaration) {", "+\t\t\t\t\t\t\tbinding = ((PackageDeclaration) node).resolveBinding();", "+\t\t\t\t\t\t} else if (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\tbinding = ((TypeDeclaration) node).resolveBinding();", "+\t\t\t\t\t\t} else if (node instanceof AnonymousClassDeclaration) {", "+\t\t\t\t\t\t\tbinding = ((AnonymousClassDeclaration) node).resolveBinding();", "+\t\t\t\t\t\t} else if (node instanceof TypeDeclarationStatement) {", "+\t\t\t\t\t\t\tbinding = ((TypeDeclarationStatement) node).resolveBinding();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.bindingKey = binding == null ? null : binding.getKey();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tpublic void acceptBinding(IBinding binding, String key) {", "+\t\t\t\t\tsuper.acceptBinding(binding, key);", "+\t\t\t\t\tthis.foundKey = binding.getKey();", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tRequestor requestor = new Requestor();", "+\t\t\tresolveASTs(workingCopies, new String[] {expectedKey}, requestor);", "+\t\t\t", "+\t\t\tif (!expectedKey.equals(requestor.bindingKey))", "+\t\t\t\tSystem.out.println(Util.displayString(expectedKey, 3));", "+\t\t\tassertEquals(\"Unexpected binding for marked node\", expectedKey, requestor.bindingKey);", "+\t\t\t", "+\t\t\tif (!expectedKey.equals(requestor.foundKey)) {", "+\t\t\t\tSystem.out.println(Util.displayString(requestor.foundKey, 3));", "+\t\t\t}", "+\t\t\tassertEquals(\"Unexpected binding found by acceptBinding\", expectedKey, requestor.foundKey);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be98f6058e8547bf3d5196329e113a4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "77646fe802ce8842c3e468133491915f09e00874", "commitAfterChange": "95ad422ba75a97d9b8c3cb49bc8bd9dcf7d18a77", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException", "signatureAfterChange": " \tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException", "diff": ["-\t\tICompilationUnit[] copies = null;", "-\t\ttry {", "-\t\t\tfinal MarkerInfo[] markerInfos = createMarkerInfos(pathAndSources);", "-\t\t\tcopies = createWorkingCopies(markerInfos, this.owner);", "-\t\t\tclass Requestor extends TestASTRequestor {", "-\t\t\t\tString bindingKey;", "-\t\t\t\tint index = -1;", "-\t\t\t\tString foundKey;", "-\t\t\t\tpublic void acceptAST(ICompilationUnit source, CompilationUnit cu) {", "-\t\t\t\t\tsuper.acceptAST(source, cu);", "-\t\t\t\t\tASTNode node = findNode(cu, markerInfos[++this.index]);", "-\t\t\t\t\tif (node != null && !(node instanceof CompilationUnit)) {", "-\t\t\t\t\t\tIBinding binding = null;", "-\t\t\t\t\t\tif (node instanceof PackageDeclaration) {", "-\t\t\t\t\t\t\tbinding = ((PackageDeclaration) node).resolveBinding();", "-\t\t\t\t\t\t} else if (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\tbinding = ((TypeDeclaration) node).resolveBinding();", "-\t\t\t\t\t\t} else if (node instanceof AnonymousClassDeclaration) {", "-\t\t\t\t\t\t\tbinding = ((AnonymousClassDeclaration) node).resolveBinding();", "-\t\t\t\t\t\t} else if (node instanceof TypeDeclarationStatement) {", "-\t\t\t\t\t\t\tbinding = ((TypeDeclarationStatement) node).resolveBinding();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.bindingKey = binding == null ? null : binding.getKey();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tpublic void acceptBinding(String key, IBinding binding) {", "-\t\t\t\t\tsuper.acceptBinding(key, binding);", "-\t\t\t\t\tthis.foundKey = binding.getKey();", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\tRequestor requestor = new Requestor();", "-\t\t\tresolveASTs(copies, new String[] {expectedKey}, requestor, getJavaProject(\"P\"), this.owner);", "-\t\t\t", "-\t\t\tif (!expectedKey.equals(requestor.bindingKey))", "-\t\t\t\tSystem.out.println(Util.displayString(expectedKey, 3));", "-\t\t\tassertEquals(\"Unexpected binding for marked node\", expectedKey, requestor.bindingKey);", "-\t\t\t", "-\t\t\tif (!expectedKey.equals(requestor.foundKey)) {", "-\t\t\t\tSystem.out.println(Util.displayString(requestor.foundKey, 3));", "-\t\t\t}", "-\t\t\tassertEquals(\"Unexpected binding found by acceptBinding\", expectedKey, requestor.foundKey);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(copies);", "+\t\tBindingResolver resolver = requestBinding(pathAndSources, expectedKey);", "+\t\t", "+\t\tif (!expectedKey.equals(resolver.bindingKey))", "+\t\t\tSystem.out.println(Util.displayString(resolver.bindingKey, 3));", "+\t\tassertEquals(\"Unexpected binding for marked node\", expectedKey, resolver.bindingKey);", "+\t\t", "+\t\tif (!expectedKey.equals(resolver.foundKey)) {", "+\t\t\tSystem.out.println(Util.displayString(resolver.foundKey, 3));", "+\t\tassertEquals(\"Unexpected binding found by acceptBinding\", expectedKey, resolver.foundKey);"]}], "num": 38351}
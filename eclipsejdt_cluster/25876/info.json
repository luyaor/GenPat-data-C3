{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d7f382d67ab39506537df832a06f524", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89b9df135d10cf5423094b90f99b2a50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "signatureAfterChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "diff": ["+\t\tIPath[] inclusionPatterns = entry.getInclusionPatterns();", "+\t\t\t\t\t// check inclusion patterns", "+\t\t\t\t\tIPath[] otherIncludes = other.getInclusionPatterns();", "+\t\t\t\t\tif (inclusionPatterns != otherIncludes) {", "+\t\t\t\t\t    if (inclusionPatterns == null) continue;", "+\t\t\t\t\t\tint includeLength = inclusionPatterns.length;", "+\t\t\t\t\t\tif (otherIncludes == null || otherIncludes.length != includeLength)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tfor (int j = 0; j < includeLength; j++) {", "+\t\t\t\t\t\t\t// compare toStrings instead of IPaths ", "+\t\t\t\t\t\t\t// since IPath.equals is specified to ignore trailing separators", "+\t\t\t\t\t\t\tif (!inclusionPatterns[j].toString().equals(otherIncludes[j].toString()))", "+\t\t\t\t\t\t\t\tcontinue nextEntry;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t    if (exclusionPatterns == null) continue;", "-\t\t\t\t\t\tif (otherExcludes.length != excludeLength)", "+\t\t\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f98972999d9686af08244fc60c925c0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean equals(Object object)", "signatureAfterChange": " \tpublic boolean equals(Object object)", "diff": ["+\t\t\tIPath[] otherIncludes = otherEntry.getInclusionPatterns();", "+\t\t\tif (this.inclusionPatterns != otherIncludes){", "+\t\t\t    if (this.inclusionPatterns == null) return false;", "+\t\t\t\tint includeLength = this.inclusionPatterns.length;", "+\t\t\t\tif (otherIncludes == null || otherIncludes.length != includeLength) ", "+\t\t\t\t\treturn false;", "+\t\t\t\tfor (int i = 0; i < includeLength; i++) {", "+\t\t\t\t\t// compare toStrings instead of IPaths ", "+\t\t\t\t\t// since IPath.equals is specified to ignore trailing separators", "+\t\t\t\t\tif (!this.inclusionPatterns[i].toString().equals(otherIncludes[i].toString()))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t    if (this.exclusionPatterns == null) return false;", "-\t\t\t\tif (otherExcludes.length != excludeLength) ", "+\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength) "]}], "num": 25876}
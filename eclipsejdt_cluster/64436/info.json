{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab8afaf9b8437da1d9b6a2c15557c01a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ed954a4b063c0ebb6c3ced539ff63b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "6c7de59cc4e8b7d3ff952cb73eea6ba69e83b190", "commitAfterChange": "8eda346eb2b6784c607071f6828a328415623f59", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "signatureAfterChange": "  public void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "diff": ["-\t/* We use a slightly sub-optimal generation for intersection casts by resorting to a runtime cast for every intersecting type, but in", "-\t   reality this should not matter. In its intended use form such as (I & Serializable) () -> {}, no cast is emitted at all", "-\t*/", "-\tTypeBinding [] types = typeBinding instanceof IntersectionCastTypeBinding ? typeBinding.getIntersectingTypes() : new TypeBinding [] { typeBinding };", "-\tfor (int i = 0, max = types.length; i < max; i++) {", "-\t\tthis.countLabels = 0;", "-\t\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "-\t\t\tresizeByteArray();", "-\t\t}", "-\t\tthis.position++;", "-\t\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_checkcast;", "-\t\twriteUnsignedShort(this.constantPool.literalIndexForType(types[i]));", "+\tthis.countLabels = 0;", "+\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "+\t\tresizeByteArray();", "+\tthis.position++;", "+\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_checkcast;", "+\twriteUnsignedShort(this.constantPool.literalIndexForType(typeBinding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17d7906c91b3a7c29432440bd2255e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "6d8869e83e824d8000b96c2ed573e9ea9d8e9f2a", "commitAfterChange": "06dea349a5876369dde1ba5c7bc9bc2244a1f242", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  public void checkcast(TypeBinding typeBinding)", "signatureAfterChange": "  public void checkcast(TypeBinding typeBinding)", "diff": ["-\tthis.countLabels = 0;", "-\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "-\t\tresizeByteArray();", "+\t/* We use a slightly sub-optimal generation for intersection casts by resorting to a runtime cast for every intersecting type, but in", "+\t   reality this should not matter. In its intended use form such as (I & Serializable) () -> {}, no cast is emitted at all", "+\t*/", "+\tTypeBinding [] types = typeBinding instanceof IntersectionCastTypeBinding ? typeBinding.getIntersectingTypes() : new TypeBinding [] { typeBinding };", "+\tfor (int i = types.length - 1; i >=0; i--) {", "+\t\tthis.countLabels = 0;", "+\t\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "+\t\t\tresizeByteArray();", "+\t\t}", "+\t\tthis.position++;", "+\t\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_checkcast;", "+\t\twriteUnsignedShort(this.constantPool.literalIndexForType(types[i]));", "-\tthis.position++;", "-\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_checkcast;", "-\twriteUnsignedShort(this.constantPool.literalIndexForType(typeBinding));"]}], "num": 64436}
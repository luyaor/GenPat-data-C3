{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92c04248e36a48faf7fdc64e81526f0f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a65e369763126b07787cc563309e5c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " public synchronized void removeIndex(IPath containerPath)", "signatureAfterChange": " public synchronized void removeIndex(IPath containerPath)", "diff": ["-\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndexLocation indexLocation = computeIndexLocation(containerPath);", "-\t\tindexFile = new File(indexLocation.toOSString()); // index is not cached yet, but still want to delete the file", "-\tif (indexFile.exists()) {", "+\t\tindexFile = indexLocation.getIndexFile(); // index is not cached yet, but still want to delete the file", "+\tif (this.indexStates.get(indexLocation) == REUSE_STATE) {", "+\t\tindexLocation.close();", "+\t\tthis.indexLocations.put(containerPath, null);", "+\t} else if (indexFile != null && indexFile.exists()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6c202930c996f58fda9cb0c28ae71c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": " public synchronized void removeIndex(IPath containerPath)", "signatureAfterChange": " public synchronized void removeIndex(IPath containerPath)", "diff": ["-\tString indexLocation = computeIndexLocation(containerPath);", "-\tFile indexFile = new File(indexLocation);", "+\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndex index = getIndex(indexLocation);", "+\tFile indexFile = null;", "+\tif (index != null) {", "+\t\tindex.monitor = null;", "+\t\tindexFile = index.getIndexFile();", "+\t}", "+\tif (indexFile == null)", "+\t\tindexFile = new File(indexLocation.toOSString()); // index is not cached yet, but still want to delete the file", "-\tObject o = this.indexes.get(indexLocation);", "-\tif (o instanceof Index)", "-\t\t((Index) o).monitor = null;", "-\tthis.indexes.remove(indexLocation);", "+\tthis.indexes.removeKey(indexLocation);"]}], "num": 56956}
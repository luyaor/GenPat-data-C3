{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c7c45a815f9fbcea504eb7deb63a5d0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "527223ba8a2f6cc21b749fb0a4e72c43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "acbefd89869bc2e1636c797e9888a047f0db1e79", "commitAfterChange": "ca6a0d4f3bf98311c20a941f6f61f98507e3122c", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public boolean forcedToBeRaw(ReferenceContext referenceContext)", "signatureAfterChange": " public boolean forcedToBeRaw(ReferenceContext referenceContext)", "diff": ["+\t\t} else if (receiverBinding instanceof FieldBinding) {", "+\t\t\tFieldBinding field = (FieldBinding) receiverBinding;", "+\t\t\tif (field.type.isRawType()) {", "+\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\tAbstractMethodDeclaration methodDecl = (AbstractMethodDeclaration) referenceContext;", "+\t\t\t\t\tif (field.declaringClass != methodDecl.binding.declaringClass) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\t\tTypeDeclaration type = (TypeDeclaration) referenceContext;", "+\t\t\t\t\tif (field.declaringClass != type.binding) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\tif (!CharOperation.equals(((FieldReference) this).binding.declaringClass.getFileName(),", "+\t\tFieldBinding field = ((FieldReference) this).binding;", "+\t\tif (!CharOperation.equals(field.declaringClass.getFileName(),", "+\t\tif (field.type.isRawType()) {", "+\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\tAbstractMethodDeclaration methodDecl = (AbstractMethodDeclaration) referenceContext;", "+\t\t\t\tif (field.declaringClass != methodDecl.binding.declaringClass) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\tTypeDeclaration type = (TypeDeclaration) referenceContext;", "+\t\t\t\tif (field.declaringClass != type.binding) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6081ba1db41926dfcc30cee0e31e10f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 31, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["+\t\t\tif(this.statementRecoveryActivated) {", "+\t\t\t\telement = element.add(new Block(0), 0);", "+\t\t\t}", "+\t\t}", "+\t\tif(this.statementRecoveryActivated) {", "+\t\t\tif(node instanceof Block) {", "+\t\t\t\tBlock block = (Block) node;", "+\t\t\t\telement = element.add(block, 0);", "+\t\t\t\tthis.lastCheckPoint = block.sourceEnd + 1;", "+\t\t\t} else if(node instanceof LocalDeclaration) {", "+\t\t\t\tLocalDeclaration statement = (LocalDeclaration) node;", "+\t\t\t\telement = element.add(statement, 0);", "+\t\t\t\tthis.lastCheckPoint = statement.sourceEnd + 1;", "+\t\t\t} else if(node instanceof Expression) {", "+\t\t\t\tExpression statement = (Expression) node;", "+\t\t\t\telement = element.add(statement, 0);", "+\t\t\t\tif(statement.statementEnd != -1) {", "+\t\t\t\t\tthis.lastCheckPoint = statement.statementEnd + 1;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.lastCheckPoint = statement.sourceEnd + 1;", "+\t\t\t\t}", "+\t\t\t} else if(node instanceof Statement) {", "+\t\t\t\tStatement statement = (Statement) node;", "+\t\t\t\telement = element.add(statement, 0);", "+\t\t\t\tthis.lastCheckPoint = statement.sourceEnd + 1;", "+\t\t\t}"]}], "num": 28592}
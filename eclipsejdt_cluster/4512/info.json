{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b960341360537c158d13d5cab24d8168", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09c9bee0b9164db99bf65d4b0d0bae6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "b90626a8f6e0a122baef19254d7e1d462d97446e", "commitAfterChange": "afb20f30301e2620352c3a6eece24740efc080f3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void completeLocalTypes(TypeBinding binding)", "signatureAfterChange": "  \tprivate void completeLocalTypes(Binding binding)", "diff": ["-\tprivate void completeLocalTypes(TypeBinding binding){", "+\tprivate void completeLocalTypes(Binding binding){", "-\t\t\t\tReferenceBinding enclosingType = binding.enclosingType();", "+\t\t\t\tTypeBinding typeBinding = (TypeBinding) binding;", "+\t\t\t\tReferenceBinding enclosingType = typeBinding.enclosingType();", "+\t\t\tcase Binding.FIELD :", "+\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "+\t\t\t\tthis.completeLocalTypes(fieldBinding.declaringClass);", "+\t\t\t\tthis.completeLocalTypes(fieldBinding.type);", "+\t\t\t\tbreak;\t", "+\t\t\tcase Binding.METHOD :", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) binding;", "+\t\t\t\tthis.completeLocalTypes(methodBinding.returnType);", "+\t\t\t\tTypeBinding[] parameters = methodBinding.parameters;", "+\t\t\t\tfor(int i = 0, max = parameters == null ? 0 : parameters.length; i < max; i++) {", "+\t\t\t\t\tthis.completeLocalTypes(parameters[i]);", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47f94529fb268343485cef543b9562e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "e91110df42d468297a7f0f4f917c63937b06463a", "commitAfterChange": "347a15ddb09354fd82312f43e8a959f68c39e906", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["+\t\t", "+\t\t// Selectively enable just one of the test routines", "-\t\t", "-\t\tif (!collectElements()) {", "-\t\t\treturn false;", "+\t\tString oneTest = options.get(CLASSNAME);", "+\t\tif (oneTest != null && oneTest.length() > 0) {", "+\t\t\tint enable = 0;", "+\t\t\ttry {", "+\t\t\t\tenable = Integer.parseInt(oneTest);", "+\t\t\t}", "+\t\t\tcatch (NumberFormatException e) {", "+\t\t\t\treportError(\"Option value '\" + oneTest + \"' must be an integer indicating what test to enable\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (enable > 4) {", "+\t\t\t\treportError(\"Option value must be an integer 1 to 4\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (enable >= 1) {", "+\t\t\t\ttestNegative1 = enable == 1;", "+\t\t\t\ttestNegative2 = enable == 2;", "+\t\t\t\ttestNegative3 = enable == 3;", "+\t\t\t\ttestNegative4 = enable == 4;", "+\t\t\t}", "+\t\tif (testNegative4 && !checkNegative4()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cb76ac995bdf82eb311aa8dc92b3f34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0c0e9f808d4509f3cefc470c2105f7ba1290fdb7", "commitAfterChange": "87d442c9d1ef66a35b04453c972faa6e201fed9c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic Answer findType( \t\t\tString typeName, \t\t\tString packageName, \t\t\tboolean partialMatch, \t\t\tint acceptFlags, \t\t\tboolean considerSecondaryTypes, \t\t\tboolean waitForIndexes, \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType( \t\t\tString typeName, \t\t\tString packageName, \t\t\tboolean partialMatch, \t\t\tint acceptFlags, \t\t\tboolean considerSecondaryTypes, \t\t\tboolean waitForIndexes, \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "diff": ["+\t\tif (type != null) {", "+\t\t\tICompilationUnit unit = type.getCompilationUnit();", "+\t\t\tif (unit != null && unit.isWorkingCopy()) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=421902", "+\t\t\t\tIType[] types = null;", "+\t\t\t\ttry {", "+\t\t\t\t\ttypes = unit.getTypes();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tboolean typeFound = false;", "+\t\t\t\tfor (int i = 0, typesLength = types == null ? 0 : types.length; i < typesLength; i++) {", "+\t\t\t\t\tif (types[i].getElementName().equals(typeName)) {", "+\t\t\t\t\t\ttypeFound = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!typeFound) type = null;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e039f3a43d9f8c8adb2558d5a1775b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0b147b41fd14622e58b9abe70d023e6b22dcfbf7", "commitAfterChange": "224ac51338df376ffd0a9a55fd7c92d9e76b9040", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": "\r \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\tICompilationUnit[] compilationUnits= null;\r", "+\t\tICompilationUnit[] compilationUnits = null;\r", "-\t\t\tcompilationUnits= pkg.getCompilationUnits();\r", "+\t\t\tcompilationUnits = pkg.getCompilationUnits();\r", "-\t\tString matchName= name;\r", "+\t\tString matchName = name;\r", "-\t\tboolean memberType= false;\r", "+\t\tboolean potentialMemberType = false;\r", "+\t\tString potentialMatchName = null;\r", "-\t\t\tmatchName= name.substring(0, index);\r", "-\t\t\tmemberType= true;\r", "+\t\t\tpotentialMatchName = name.substring(0, index);\r", "+\t\t\tpotentialMemberType = true;\r", "-\t\tString unitName= partialMatch ? matchName.toLowerCase() : matchName + \".java\"; //$NON-NLS-1$\r", "+\t\tString unitName = partialMatch ? matchName.toLowerCase() : matchName + \".java\"; //$NON-NLS-1$\r", "+\t\tString potentialUnitName = null;\r", "+\t\tif (potentialMemberType) {\r", "+\t\t\tpotentialUnitName = partialMatch ? potentialMatchName.toLowerCase() : potentialMatchName + \".java\"; //$NON-NLS-1$\r", "+\t\t}\r", "-\t\t\t\t\tif (nameMatches(matchName, type, partialMatch))\r", "-\t\t\t\t\t\tif (!memberType) {\r", "-\t\t\t\t\t\t\tif (acceptType(type, acceptFlags)) requestor.acceptType(type);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tseekQualifiedMemberTypes(name.substring(index + 1, name.length()), type, partialMatch, requestor, acceptFlags);\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\tif (nameMatches(matchName, type, partialMatch)) {\r", "+\t\t\t\t\t\tif (acceptType(type, acceptFlags)) requestor.acceptType(type);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t} else \tif (potentialMemberType && nameMatches(potentialUnitName, compilationUnit, partialMatch)) {\r", "+\t\t\t\tIType[] types= null;\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttypes= compilationUnit.getTypes();\r", "+\t\t\t\t} catch (JavaModelException npe) {\r", "+\t\t\t\t\tcontinue; // the compilation unit is not present\r", "+\t\t\t\t}\r", "+\t\t\t\tint typeLength= types.length;\r", "+\t\t\t\tfor (int j= 0; j < typeLength; j++) {\r", "+\t\t\t\t\tif (requestor.isCanceled())\r", "+\t\t\t\t\t\treturn;\r", "+\t\t\t\t\tIType type= types[j];\r", "+\t\t\t\t\tif (nameMatches(potentialMatchName, type, partialMatch)) {\r", "+\t\t\t\t\t\tseekQualifiedMemberTypes(name.substring(index + 1, name.length()), type, partialMatch, requestor, acceptFlags);\r", "+\t\t\t\t\t}\r", "+\r"]}], "num": 4512}
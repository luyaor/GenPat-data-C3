{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4be0f1f8c75d386ea1a5d84a3e23cd66", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a23b1998faaede5a4277aa9d1848864c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "diff": ["-\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "+\t\t\t// not interested in type annotations, type will be used for comparison only, and erasure() is used if needed", "+\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac63303aca61ddeae9f3df8bf5f5451d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "diff": ["-\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf1037a242744fd96ae8e451a9adcbf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "diff": ["-\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd72571d5d67e1256be19a2df5a56485", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6e45c3b12d66a6d00320490b98ad7820ecc63934", "commitAfterChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["+\t\t\tshort visibleIdx = 0;", "-\t\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, walker.toMethodParameter((short)i));", "+\t\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, walker.toMethodParameter(visibleIdx++));"]}], "num": 29699}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "441d32c58d6bb7c67a888f7dce8eba82", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "566b4367d1f9f9ac3ab3e2bd67037252", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public String[][] resolveType(String typeName) throws JavaModelException", "signatureAfterChange": " public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-", "- public String[][] resolveType(String typeName) throws JavaModelException {", "-\tISourceType info = (ISourceType) this.getElementInfo();", "-\tISearchableNameEnvironment environment = ((JavaProject)getJavaProject()).getSearchableNameEnvironment();", "-", "-\tclass TypeResolveRequestor implements ISelectionRequestor {", "-\t\tString[][] answers = null;", "-\t\tvoid acceptType(String[] answer){", "-\t\t\tif (answers == null) {", "-\t\t\t\tanswers = new String[][]{ answer };", "-\t\t\t} else {", "-\t\t\t\t// grow", "-\t\t\t\tint length = answers.length;", "-\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "-\t\t\t\tanswers[length] = answer;", "+ */", "+public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException {", "+\tJavaProject project = (JavaProject)getJavaProject();", "+\tNameLookup lookup = null;", "+\ttry {", "+\t\t// set the units to look inside", "+\t\tlookup = ((JavaProject)project).getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t", "+\t\t// resolve", "+\t\tISourceType info = (ISourceType) this.getElementInfo();", "+\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "+\t", "+\t\tclass TypeResolveRequestor implements ISelectionRequestor {", "+\t\t\tString[][] answers = null;", "+\t\t\tvoid acceptType(String[] answer){", "+\t\t\t\tif (answers == null) {", "+\t\t\t\t\tanswers = new String[][]{ answer };", "+\t\t\t\t} else {", "+\t\t\t\t\t// grow", "+\t\t\t\t\tint length = answers.length;", "+\t\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "+\t\t\t\t\tanswers[length] = answer;", "+\t\t\t\t}", "+\t\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "+\t\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "+\t\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "+\t\t\t}", "+\t", "+\t\t\tpublic void acceptError(IProblem error) {}", "+\t\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name) {}", "+\t\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {}", "+\t\t\tpublic void acceptPackage(char[] packageName){}", "+\t", "-\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "-\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "+\t\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "+\t\tSelectionEngine engine = ", "+\t\t\tnew SelectionEngine(environment, requestor, this.getJavaProject().getOptions(true));", "+\t\t\t", "+\t \tIType[] topLevelTypes = this.getCompilationUnit().getTypes();", "+\t \tint length = topLevelTypes.length;", "+\t \tISourceType[] topLevelInfos = new ISourceType[length];", "+\t \tfor (int i = 0; i < length; i++) {", "+\t\t\ttopLevelInfos[i] = (ISourceType)((SourceType)topLevelTypes[i]).getElementInfo();", "-\t\t", "-\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "-\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "+\t\t\t", "+\t\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "+\t\treturn requestor.answers;", "+\t} finally {", "+\t\tif (lookup != null) {", "+\t\t\tlookup.setUnitsToLookInside(null);", "-", "-\t\tpublic void acceptError(IProblem error) {}", "-\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name) {}", "-\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {}", "-\t\tpublic void acceptPackage(char[] packageName){}", "-", "-\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "-\tSelectionEngine engine = ", "-\t\tnew SelectionEngine(environment, requestor, this.getJavaProject().getOptions(true));", "-\t\t", "- \tIType[] topLevelTypes = this.getCompilationUnit().getTypes();", "- \tint length = topLevelTypes.length;", "- \tISourceType[] topLevelInfos = new ISourceType[length];", "- \tfor (int i = 0; i < length; i++) {", "-\t\ttopLevelInfos[i] = (ISourceType)((SourceType)topLevelTypes[i]).getElementInfo();", "-\t}", "-\t\t", "-\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "-\treturn requestor.answers;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7782178804a347640f527ff4e65e80b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "f0bf109b49cb0d1b5ee96570e8403cab9257521b", "commitAfterChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " public IJavaElement[] codeSelect(String codeSnippet, int offset, int length) throws JavaModelException", "signatureAfterChange": " public IJavaElement[] codeSelect(String codeSnippet, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tSelectionRequestor requestor= new SelectionRequestor(this.project.getNameLookup(), null); // null because there is no need to look inside the code snippet itself", "-\tthis.context.select(", "-\t\tcodeSnippet.toCharArray(),", "-\t\toffset,", "-\t\toffset + length - 1,", "-\t\tthis.project.getSearchableNameEnvironment(),", "-\t\trequestor,", "-\t\tthis.project.getOptions(true)", "-\t);", "-\treturn requestor.getElements();", "+ */", "+public IJavaElement[] codeSelect(String codeSnippet, int offset, int length, WorkingCopyOwner owner) throws JavaModelException {", "+\tNameLookup lookup = null;", "+\ttry {", "+\t\t// set the units to look inside", "+\t\tlookup = this.project.getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tlookup.setUnitsToLookInside(workingCopies);", "+", "+\t\t// code select", "+\t\tSelectionRequestor requestor= new SelectionRequestor(lookup, null); // null because there is no need to look inside the code snippet itself", "+\t\tthis.context.select(", "+\t\t\tcodeSnippet.toCharArray(),", "+\t\t\toffset,", "+\t\t\toffset + length - 1,", "+\t\t\tthis.project.getSearchableNameEnvironment(),", "+\t\t\trequestor,", "+\t\t\tthis.project.getOptions(true)", "+\t\t);", "+\t\treturn requestor.getElements();", "+\t} finally {", "+\t\tif (lookup != null) {", "+\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t}", "+\t}"]}], "num": 67942}
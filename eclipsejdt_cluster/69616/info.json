{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d27927eb692e3ebd4b3b75d8197a306d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e5ec5960f0fee732e7151b188b7d1dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "signatureAfterChange": "\r \r \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "diff": ["+\t\t\ttypeDecl.resolveBinding();\r", "-\t\tMemberTypeDeclaration[] members = typeDeclaration.memberTypes;\r", "-\t\tif (members != null) {\r", "-\t\t\tfor (int i = 0, length = members.length; i < length; i++) {\r", "-\t\t\t\ttypeDecl.bodyDeclarations().add(convert(members[i]));\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = typeDeclaration.fields;\r", "-\t\tif (fields != null) {\r", "-\t\t\tint fieldsLength = fields.length;\r", "-\t\t\tfor (int i = 0; i < fieldsLength; i++) {\r", "-\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, i, typeDecl.bodyDeclarations());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;\r", "-\t\tif (methods != null) {\r", "-\t\t\tint methodsLength = methods.length;\r", "-\t\t\tfor (int i = 0; i < methodsLength; i++) {\r", "-\t\t\t\tif (!methods[i].isDefaultConstructor() && !methods[i].isClinit()) {\r", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(methods[i]));\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\t\r", "+\t\tbuildBodyDeclarations(typeDeclaration, typeDecl);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa7ff9b594770a969905502f22440761", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "4168404bef1be66fa92e39948727385e68af408c", "commitAfterChange": "641db1701cbce57a1e73a64de662de098370be6e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "diff": ["-\t\t\tTypeBinding[] fs;", "-\t\t\tExpression[] arguments = this.invocationArguments;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint k = arguments.length;", "-\t\t\t\tint p = method.parameters.length;", "-\t\t\t\tif (k < (method.isVarargs() ? p-1 : p))", "-\t\t\t\t\treturn null; // insufficient arguments for parameters!", "-\t\t\t\tswitch (this.inferenceKind) {", "-\t\t\t\t\tcase CHECK_STRICT:", "-\t\t\t\t\tcase CHECK_LOOSE:", "-\t\t\t\t\t\tfs = method.parameters;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase CHECK_VARARG:", "-\t\t\t\t\t\tfs = varArgTypes(method.parameters, k);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tthrow new IllegalStateException(\"Unexpected checkKind \"+this.inferenceKind); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < k; i++) {", "-\t\t\t\t\tTypeBinding fsi = fs[Math.min(i, p-1)];", "-\t\t\t\t\tTypeBinding substF = substitute(fsi);", "-\t\t\t\t\t// For all i (1 \u2264 i \u2264 k), if ei is not pertinent to applicability, the set contains \u27e8ei \u2192 \u03b8 Fi\u27e9.", "-\t\t\t\t\tExpression argument = arguments[i];", "-\t\t\t\t\tif (!argument.isPertinentToApplicability(fsi, method)) {", "-\t\t\t\t\t\tc.add(new ConstraintExpressionFormula(argument, substF, ReductionResult.COMPATIBLE, ARGUMENT_CONSTRAINTS_ARE_SOFT));", "-\t\t\t\t\t}", "-\t\t\t\t\taddExceptionConstraint(c, argument, substF);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tif (!addConstraintsToC(this.invocationArguments, c, method))", "+\t\t\t\treturn null;"]}], "num": 69616}
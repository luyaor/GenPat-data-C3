{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f804795471f21d9baeca83d41a0f45bd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7de85cdefffc97326b4380d0428cae52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveLocalName.java", "commitBeforeChange": "36ef129881167aaca524bd32a5aa2c4e26ffd187", "commitAfterChange": "19b7207c9f9b8245eee7ba353b5eb784e8fb1b81", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void foo()", "signatureAfterChange": " \tpublic void foo()", "diff": ["-\t\tObject var1;", "-\t\tint var2;", "+\t\tObject var1 = new Object();", "+\t\tint var2 = 1;", "+\t\tvar1.toString();", "+\t\tvar2++;", "+\t\tif (var2 == 3) {", "+\t\t\tObject var3 = var1;", "+\t\t\tvar3.hashCode();", "+\t\t} else {", "+\t\t\tObject var3 = new Object();", "+\t\t\tvar3.toString();", "+\t\t}", "+\t\tfinal int var4 = 1;", "+\t\tnew Object() {", "+\t\t\tpublic String toString() {", "+\t\t\t\treturn \"var4 = \" + var4;", "+\t\t\t}", "+\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece7194217947109be183c74c9c5d6cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "3655fb3ae21ac46b5060eb9e240a41cd2462bac2", "commitAfterChange": "83445beb69e15e5eb2488d8746136cbbd8c4461a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context) throws InferenceFailureException", "diff": ["-\t\t\t\tTypeVariableBinding[] parameters = g.typeVariables();", "+\t\t\t\tfinal TypeVariableBinding[] parameters = g.typeVariables();", "+\t\t\t\t// construct theta = [P1:=alpha1,...]", "+\t\t\t\tfinal InferenceVariable[] alphas = new InferenceVariable[gAlpha.arguments.length];", "+\t\t\t\tSystem.arraycopy(gAlpha.arguments, 0, alphas, 0, alphas.length);", "+\t\t\t\tInferenceSubstitution theta = new InferenceSubstitution(context.environment, alphas) {", "+\t\t\t\t\t@Override", "+\t\t\t\t\tprotected TypeBinding getP(int i) {", "+\t\t\t\t\t\treturn parameters[i];", "+\t\t\t\t\t}", "+\t\t\t\t};", "-\t\t\t\t\taddBounds(pi.getTypeBounds(alpha, context), context.environment);", "+\t\t\t\t\taddBounds(pi.getTypeBounds(alpha, theta), context.environment);", "-\t\t\t\t\t\t\t\t\t\taddTypeBoundsFromWildcardBound(context, wildcardBinding.boundKind, t, r, bi);", "+\t\t\t\t\t\t\t\t\t\taddTypeBoundsFromWildcardBound(context, theta, wildcardBinding.boundKind, t, r, bi);"]}], "num": 65250}
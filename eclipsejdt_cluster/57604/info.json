{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59300c20b3b0769feb2927c882d109f9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dcad2e68b2929e53a4ab52e4b301d12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "80e40b4c60040fa0aa8e1c95f16e2597f3f0acf0", "commitAfterChange": "f9277e3d6f326ff6a770d54a63a8fe0127208bbc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "signatureAfterChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "diff": ["-\t\t\t\tint i = 0;", "-\t\t\t\tfor (TypeBinding typeBinding : binding.parameters) {", "-\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "-\t\t\t\t\tbuilder.append(i);", "-\t\t\t\t\tVariableElement param = new VariableElementImpl(_env, new LocalVariableBinding(String.valueOf(builder).toCharArray(), typeBinding, 0, true));", "-\t\t\t\t\tparams.add(param);", "-\t\t\t\t\ti++;", "+\t\t\t\tboolean isEnumConstructor = binding.isConstructor() && binding.declaringClass.isEnum();", "+\t\t\t\tAnnotationBinding[][] parameterAnnotationBindings = null;", "+\t\t\t\tAnnotationHolder annotationHolder = binding.declaringClass.retrieveAnnotationHolder(binding, false);", "+\t\t\t\tif (annotationHolder != null) {", "+\t\t\t\t\tparameterAnnotationBindings = annotationHolder.getParameterAnnotations();", "+\t\t\t\t}", "+\t\t\t\t// we need to filter the synthetic arguments", "+\t\t\t\tif (isEnumConstructor) {", "+\t\t\t\t\tif (length == 2) {", "+\t\t\t\t\t\t// the two arguments are only the two synthetic arguments", "+\t\t\t\t\t\treturn Collections.emptyList();", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i = 2; i < length; i++) {", "+\t\t\t\t\t\tTypeBinding typeBinding = binding.parameters[i];", "+\t\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "+\t\t\t\t\t\tbuilder.append(i - 2);", "+\t\t\t\t\t\tVariableElement param = new VariableElementImpl(_env,", "+\t\t\t\t\t\t\t\tnew BinaryLocalVariableBinding(", "+\t\t\t\t\t\t\t\t\t\tString.valueOf(builder).toCharArray(),", "+\t\t\t\t\t\t\t\t\t\ttypeBinding,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tnull));", "+\t\t\t\t\t\tparams.add(param);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tint i = 0;", "+\t\t\t\t\tfor (TypeBinding typeBinding : binding.parameters) {", "+\t\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "+\t\t\t\t\t\tbuilder.append(i);", "+\t\t\t\t\t\tVariableElement param = new VariableElementImpl(_env,", "+\t\t\t\t\t\t\t\tnew BinaryLocalVariableBinding(", "+\t\t\t\t\t\t\t\t\t\tString.valueOf(builder).toCharArray(),", "+\t\t\t\t\t\t\t\t\t\ttypeBinding,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tparameterAnnotationBindings != null ? parameterAnnotationBindings[i] : null));", "+\t\t\t\t\t\tparams.add(param);", "+\t\t\t\t\t\ti++;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8a2fb4383157f20b968a02d5664a2f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "14d447e9b3a680ded3744f07910de88768216ea3", "commitAfterChange": "689526016f6ab442680e718d2760fc44e79dd9b5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (compilerOptions.isAnyEnabled(IrritantSet.UNLIKELY_ARGUMENT_TYPE) && this.binding.isValidBinding()) {", "+\t\tTypeBinding[] signatureReplacement = detectAndReplaceDangerousSignature(currentScope);", "+\t\tif (signatureReplacement != null) {", "+\t\t\tint len = this.argumentTypes.length;", "+\t\t\tfor (int i = 0; i < len; i++) {", "+\t\t\t\tTypeBinding expectedArgumentType = signatureReplacement[i];", "+\t\t\t\tTypeBinding argumentType = this.argumentTypes[i];", "+\t\t\t\tif (argumentType.isBaseType())", "+\t\t\t\t\targumentType = currentScope.boxing(argumentType);", "+\t\t\t\tif (!argumentType.isCompatibleWith(expectedArgumentType, currentScope)) {", "+\t\t\t\t\tboolean castable = checkCastTypesCompatibility(currentScope, expectedArgumentType, argumentType, this.arguments[i]);", "+\t\t\t\t\tcurrentScope.problemReporter().discouragedInvocationIncompatibleArgument(this.binding, this.arguments[i],", "+\t\t\t\t\t\t\t\texpectedArgumentType, signatureReplacement[len], castable);"]}], "num": 57604}
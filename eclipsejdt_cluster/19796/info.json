{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "336f97c1d7b17e8f1d830e502a39c024", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "126c6abc26be75c2f18a17112e7db923", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "4f90f7005696a0951a49d2ebe0ca59ea39a6f81e", "commitAfterChange": "c6233ae2c577c6f0263643cd88cdf0be03329c72", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " protected void validateOptions(boolean didSpecifyCompliance) throws InvalidInputException", "signatureAfterChange": " protected void validateOptions(boolean didSpecifyCompliance) throws InvalidInputException", "diff": ["+\t\t} else if (CompilerOptions.VERSION_1_7.equals(version)) {", "+\t\t\tif (!this.didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);", "+\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "+\t\t} else if (CompilerOptions.VERSION_1_7.equals(version)) {", "+\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);", "+\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "-\tif (sourceVersion.equals(CompilerOptions.VERSION_1_6)", "+\tif (sourceVersion.equals(CompilerOptions.VERSION_1_7)", "+\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_7) {", "+\t\t// compliance must be 1.7 if source is 1.7", "+\t\tthrow new InvalidInputException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_6)", "+\t\t\t// target must be 1.7 if source is 1.7", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_7", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_7){ ", "+\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7717d03ca3d13d641bb6cdbfc97e78b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "8314261f38c45d82db5de5aae3122b7f00653bdb", "commitAfterChange": "15609ca5b715c56c97cf6995e327646cb9a6dd97", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " protected void validateOptions(boolean didSpecifyCompliance)", "signatureAfterChange": " protected void validateOptions(boolean didSpecifyCompliance)", "diff": ["+\t\t} else if (CompilerOptions.VERSION_1_8.equals(version)) {", "+\t\t\tif (this.didSpecifySource) {", "+\t\t\t\tObject source = this.options.get(CompilerOptions.OPTION_Source);", "+\t\t\t\tif (CompilerOptions.VERSION_1_3.equals(source)", "+\t\t\t\t\t\t|| CompilerOptions.VERSION_1_4.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(source)", "+\t\t\t\t\t\t|| CompilerOptions.VERSION_1_6.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (CompilerOptions.VERSION_1_7.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "+\t\t\t\t} else if (CompilerOptions.VERSION_1_8.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);", "+\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\t\t}", "+\t\t} else if (CompilerOptions.VERSION_1_8.equals(version)) {", "+\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_8);", "+\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "-\tif (sourceVersion.equals(CompilerOptions.VERSION_1_7)", "+\tif (sourceVersion.equals(CompilerOptions.VERSION_1_8)", "+\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_8) {", "+\t\t// compliance must be 1.8 if source is 1.8", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_7)", "+\t\t\t// target must be 1.8 if source is 1.8", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_8", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_8){", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efac381bd6a3753d2cba804519357404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "59758b3ac964ea48fbbbf5d314c8ed8b19dc60bb", "commitAfterChange": "bf7f7505c8fbaf610dcfc16c3f38ab20112ea07c", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " protected void validateOptions(boolean didSpecifyCompliance)", "signatureAfterChange": " protected void validateOptions(boolean didSpecifyCompliance)", "diff": ["+\t\t} else if (CompilerOptions.VERSION_1_8.equals(version)) {", "+\t\t\tif (this.didSpecifySource) {", "+\t\t\t\tObject source = this.options.get(CompilerOptions.OPTION_Source);", "+\t\t\t\tif (CompilerOptions.VERSION_1_3.equals(source)", "+\t\t\t\t\t\t|| CompilerOptions.VERSION_1_4.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(source)", "+\t\t\t\t\t\t|| CompilerOptions.VERSION_1_6.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (CompilerOptions.VERSION_1_7.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "+\t\t\t\t} else if (CompilerOptions.VERSION_1_8.equals(source)) {", "+\t\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);", "+\t\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\t\t}", "+\t\t} else if (CompilerOptions.VERSION_1_8.equals(version)) {", "+\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_8);", "+\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "-\tif (sourceVersion.equals(CompilerOptions.VERSION_1_7)", "+\tif (sourceVersion.equals(CompilerOptions.VERSION_1_8)", "+\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_8) {", "+\t\t// compliance must be 1.8 if source is 1.8", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_7)", "+\t\t\t// target must be 1.8 if source is 1.8", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_8", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_8){", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t\t\t}"]}], "num": 19796}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "040cb1261ca907b2e656d6538fb31443", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c87cf5c806d4679648e54fc5ee3f6bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/base/XMLComparer.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean compareAnnotationNodes(Element actualAnnot, Element expectedAnnot)", "signatureAfterChange": " \tprivate boolean compareAnnotationNodes(Element actualAnnot, Element expectedAnnot)", "diff": ["-\t\t\tif (SNAME.equals(attrName)) {", "+\t\t\tif (SNAME_TAG.equals(attrName)) {", "-\t\tElement actualValues = null;", "-\t\tfor (Node n = actualAnnot.getFirstChild(); n != null; n = n.getNextSibling()) {", "-\t\t\tif (n.getNodeType() == Node.ELEMENT_NODE && ANNOTATION_VALUES.equals(n.getNodeName())) {", "-\t\t\t\tactualValues = (Element)n;", "-\t\t\t}", "-\t\t}", "-\t\tElement expectedValues = null;", "-\t\tfor (Node n = expectedAnnot.getFirstChild(); n != null; n = n.getNextSibling()) {", "-\t\t\tif (n.getNodeType() == Node.ELEMENT_NODE && ANNOTATION_VALUES.equals(n.getNodeName())) {", "-\t\t\t\texpectedValues = (Element)n;", "-\t\t\t}", "-\t\t}", "+\t\tElement actualValues = findNamedChildElement(actualAnnot, ANNOTATION_VALUES_TAG);", "+\t\tElement expectedValues = findNamedChildElement(expectedAnnot, ANNOTATION_VALUES_TAG);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9137314cbbb23b5be69363eadae2182c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "747530d930cbddbea16198538d3164321f1be0b2", "commitAfterChange": "70000ab48e563f19622aff0c653f3b2bb65b1ad9", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["-\t\t\tSearchDocument document = participant.getDocument(focus.getPath().toString());", "-\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, focus.getResource(), null, document, ((InternalSearchPattern) searchPattern).mustResolve);", "-\t\t\t\tSearchMatch match = newDeclarationMatch(focus.getAncestor(IJavaElement.PACKAGE_FRAGMENT), null/*no binding*/, SearchMatch.A_ACCURATE, -1, -1);", "+\t\t\t\tSearchMatch match = new PackageDeclarationMatch(focus.getAncestor(IJavaElement.PACKAGE_FRAGMENT), SearchMatch.A_ACCURATE, -1, -1, participant, focus.getResource());", "-\t\t\t\t\t\tSearchDocument document = participant.getDocument(resource.getFullPath().toString());", "-\t\t\t\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, resource, null, document, ((InternalSearchPattern) searchPattern).mustResolve);", "-\t\t\t\t\t\t\t\tSearchMatch match = newDeclarationMatch(pkg, null/*no binding*/, SearchMatch.A_ACCURATE, -1, -1);", "+\t\t\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(pkg, SearchMatch.A_ACCURATE, -1, -1, participant, resource);"]}], "num": 48475}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47e82b491f277594b9df1379b1f8bf9e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d62650f09b3d1f02f80b2847c510fe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "cac3a76319e3ea7a465153454d90e0a6e8d9035e", "commitAfterChange": "a3a8860de745314f9db17ad200c9ad0e4e9b06a8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "signatureAfterChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "diff": ["-\t\t\tfor (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {\r", "-\t\t\t\tIBinaryMethod binaryMethod = methods[i];\r", "-\t\t\t\tchar[] selector = binaryMethod.isConstructor() ? type.getElementName().toCharArray() : binaryMethod.getSelector();\r", "-\t\t\t\tif (CharOperation.equals(selector, method.selector)) {\r", "-\t\t\t\t\tString[] parameterTypes = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "-\t\t\t\t\tif (length != parameterTypes.length) continue;\r", "-\t\t\t\t\tboolean sameParameters = true;\r", "-\t\t\t\t\tfor (int j = 0; j < length; j++) {\r", "-\t\t\t\t\t\tTypeReference parameterType = arguments[j].type;\r", "-\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "-\t\t\t\t\t\tfor (int k = 0; k < parameterType.dimensions(); k++) {\r", "-\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\tif (methods != null) {\r", "+\t\t\t\tfor (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {\r", "+\t\t\t\t\tIBinaryMethod binaryMethod = methods[i];\r", "+\t\t\t\t\tchar[] selector = binaryMethod.isConstructor() ? type.getElementName().toCharArray() : binaryMethod.getSelector();\r", "+\t\t\t\t\tif (CharOperation.equals(selector, method.selector)) {\r", "+\t\t\t\t\t\tString[] parameterTypes = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "+\t\t\t\t\t\tif (length != parameterTypes.length) continue;\r", "+\t\t\t\t\t\tboolean sameParameters = true;\r", "+\t\t\t\t\t\tfor (int j = 0; j < length; j++) {\r", "+\t\t\t\t\t\t\tTypeReference parameterType = arguments[j].type;\r", "+\t\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "+\t\t\t\t\t\t\tfor (int k = 0; k < parameterType.dimensions(); k++) {\r", "+\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tString parameterTypeName = parameterTypes[j].replace('/', '.');\r", "+\t\t\t\t\t\t\tif (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {\r", "+\t\t\t\t\t\t\t\tsameParameters = false;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tString parameterTypeName = parameterTypes[j].replace('/', '.');\r", "-\t\t\t\t\t\tif (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {\r", "-\t\t\t\t\t\t\tsameParameters = false;\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;\r", "+\t\t\t\t\t\tif (sameParameters) {\r", "+\t\t\t\t\t\t\treturn type.getMethod(new String(selector), parameterTypes);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (sameParameters) {\r", "-\t\t\t\t\t\treturn type.getMethod(new String(selector), parameterTypes);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2a0281d459b49ed3b370dc8f9e12234", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprivate IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tchar[][] definingTypeNames)", "signatureAfterChange": "\r \tprivate IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tchar[][] definingTypeNames)", "diff": ["+\t\tif (type == null) return null;\r", "-\t\tString[] parameterTypeSignatures = new String[length];\r", "-\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\tTypeReference parameterType = arguments[i].type;\r", "-\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "-\t\t\tfor (int j = 0; j < parameterType.dimensions(); j++) {\r", "-\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\tif (type.isBinary()) {\r", "+\t\t\tString selector = new String(method.selector);\r", "+\t\t\tIMethod[] methods;\r", "+\t\t\ttry {\r", "+\t\t\t\tmethods = type.getMethods();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\treturn null;\r", "-\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);\r", "+\t\t\tfor (int i = 0; i < methods.length; i++) {\r", "+\t\t\t\tIMethod methodHandle = methods[i];\r", "+\t\t\t\tif (methodHandle.getElementName().equals(selector) && length == methodHandle.getNumberOfParameters()) {\r", "+\t\t\t\t\tboolean sameParameters = true;\r", "+\t\t\t\t\tString[] parameterTypes = methodHandle.getParameterTypes();\r", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {\r", "+\t\t\t\t\t\tTypeReference parameterType = arguments[j].type;\r", "+\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "+\t\t\t\t\t\tfor (int k = 0; k < parameterType.dimensions(); k++) {\r", "+\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tString parameterTypeName = parameterTypes[j];\r", "+\t\t\t\t\t\tif (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {\r", "+\t\t\t\t\t\t\tsameParameters = false;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (sameParameters) return methodHandle;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn null;\r", "+\t\t} else {\r", "+\t\t\tString[] parameterTypeSignatures = new String[length];\r", "+\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\tTypeReference parameterType = arguments[i].type;\r", "+\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "+\t\t\t\tfor (int j = 0; j < parameterType.dimensions(); j++) {\r", "+\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);\r", "+\t\t\t}\r", "+\t\t\treturn type.getMethod(new String(method.selector), parameterTypeSignatures);\r", "-\t\treturn type.getMethod(new String(method.selector), parameterTypeSignatures);\r"]}], "num": 53716}
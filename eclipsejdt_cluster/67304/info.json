{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e60c14ce98f227116b3286e4fcacd0d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77e891008daf472f180893870ee22d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "c87413f1c3fa777cce7cb1df06542ffdf2ba70ba", "commitAfterChange": "dbb59802bd05ea277b4706afb85d6b75d5bdff2a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tpublic void setFileProcessing(IFile file)", "signatureAfterChange": " \t \tpublic void setFileProcessing(IFile file)", "diff": ["-\t\t// already in per-file mode.", "-\t\tif( !_batchMode ){", "-\t\t\t// this is a no-op", "-\t\t\tif(  file.equals(_file) )", "-\t\t\t\treturn;", "-\t\t\t", "-\t\t\t_astRoot = null;", "-\t\t\t_file = null;", "-\t\t\t_curSource = null;", "-\t\t\t", "-\t\t\t// need to match up the file with the ast.", "-\t\t\tif( _files != null ){", "-\t\t\t\tfor( int i=0, len=_files.length; i<len; i++ ){", "-\t\t\t\t\tif( file.equals(_files[i]) ){", "-\t\t\t\t\t\t_file = file;", "-\t\t\t\t\t\tif( _astUnits != null ){", "-\t\t\t\t\t\t\t_astRoot = _astUnits[i];\t\t", "-\t\t\t\t\t\t\t_curSource = _sources[i];", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse{", "-\t\t\t\t\t\t\ttry{", "-\t\t\t\t\t\t\t\t_curSource = ProcessorEnvImpl.getFileContents( _files[i] );", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcatch( Exception e ){", "-\t\t\t\t\t\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "-\t\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t_astRoot = (CompilationUnit)createDietAST(_files[i].toString(), _javaProject, null, _curSource );", "-\t\t\t\t\t\t}", "+\t\t_batchMode = false;", "+\t\tif( file.equals(_file) ) // this is a no-op", "+\t\t\treturn;", "+\t\t", "+\t\t_astRoot = null;", "+\t\t_file = null;", "+\t\t_unit = null;", "+\t\t", "+\t\t// need to match up the file with the ast.", "+\t\tif( _files != null ){", "+\t\t\tfor( int i=0, len=_files.length; i<len; i++ ){", "+\t\t\t\tif( file.equals(_files[i]) ){", "+\t\t\t\t\t_file = file;", "+\t\t\t\t\tif( _astUnits != null ){", "+\t\t\t\t\t\t_astRoot = _astUnits[i];\t\t", "+\t\t\t\t\t\t_unit = _units[i];", "+\t\t\t\t\t}", "+\t\t\t\t\telse{", "+\t\t\t\t\t\t_unit = JavaCore.createCompilationUnitFrom(_files[i]);", "+\t\t\t\t\t\t_astRoot = createDietAST(_javaProject, _unit);", "- ", "-\t\t\tif( _file == null )", "-\t\t\t\tthrow new IllegalStateException(", "-\t\t\t\t\t\t\"file \" +  //$NON-NLS-1$", "-\t\t\t\t\t\tfile.getName() + ", "-\t\t\t\t\t\t\" is not in the list to be processed.\"); //$NON-NLS-1$", "-\t\telse{", "-\t\t\t_batchMode = false;", "-\t\t\tif( _files != null ){", "-\t\t\t\tfor( int i=0, len=_files.length; i<len; i++ ){", "-\t\t\t\t\tif( _files[i] == file ){", "-\t\t\t\t\t\ttry{", "-\t\t\t\t\t\t\t_curSource = ProcessorEnvImpl.getFileContents( _files[i] );", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcatch( Exception e ){", "-\t\t\t\t\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t}\t", "-\t\t\t\t\t\t_astRoot = (CompilationUnit)createDietAST(_files[i].toString(), _javaProject, null, _curSource );", "-\t\t\t\t\t\t_file = file;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif( _astRoot == null )", "-\t\t\t\tthrow new IllegalStateException(", "-\t\t\t\t\t\t\"file \" +  //$NON-NLS-1$", "-\t\t\t\t\t\tfile.getName() + ", "-\t\t\t\t\t\t\" is not in the list to be processed.\"); //$NON-NLS-1$", "-\t\t}", "+\t\t", "+\t\tif( _file == null || _astRoot == null)", "+\t\t\tthrow new IllegalStateException(", "+\t\t\t\t\t\"file \" +  //$NON-NLS-1$", "+\t\t\t\t\tfile.getName() + ", "+\t\t\t\t\t\" is not in the list to be processed.\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db31af73a70ca029362d21f0f0736484", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          private ProcessorEnvImpl(final CompilationUnit astCompilationUnit, \t\t\tfinal ICompilationUnit compilationUnit, final char[] source, \t\t\tfinal IFile file, final IJavaProject javaProj, final Phase phase)", "signatureAfterChange": "          private ProcessorEnvImpl(     \t\tfinal CompilationUnit astCompilationUnit,     \t\tfinal ICompilationUnit compilationUnit,     \t\tfinal char[] source,     \t\tfinal IFile file,     \t\tfinal IJavaProject javaProj,     \t\tfinal Phase phase)", "diff": ["-    private ProcessorEnvImpl(final CompilationUnit astCompilationUnit,", "-\t\t\tfinal ICompilationUnit compilationUnit, final char[] source,", "-\t\t\tfinal IFile file, final IJavaProject javaProj, final Phase phase) {", "-\t\tsuper(astCompilationUnit, file, javaProj, phase);", "-\t\t// if we are in reconcile, compilationUnit will be valid", "+    private ProcessorEnvImpl(", "+    \t\tfinal CompilationUnit astCompilationUnit,", "+    \t\tfinal ICompilationUnit compilationUnit,", "+    \t\tfinal char[] source,", "+    \t\tfinal IFile file,", "+    \t\tfinal IJavaProject javaProj,", "+    \t\tfinal Phase phase)", "+    {", "+    \tsuper(  astCompilationUnit, file, javaProj, phase );", "+    \t", "+    \t// if we are in reconcile, compilationUnit will be valid", "-\t\tassert (phase == Phase.RECONCILE && compilationUnit != null) ||", "-\t\t\t\t(phase == Phase.BUILD && compilationUnit == null && file != null) : ", "-\t\t\t\t\"Unexpected phase value \" //$NON-NLS-1$", "-\t\t\t\t+ phase;", "-\t\tassert (source == null && compilationUnit != null) ||", "-\t\t\t\t(source != null && compilationUnit == null) : ", "-\t\t\t\t\"Unexpected values for _compilationUnit and _source!\"; //$NON-NLS-1$", "-\t\t_source = source;", "-\t\t_compilationUnit = compilationUnit;", "-\t\t_allProblems = new HashMap<IFile, List<IProblem>>(4);", "+    \tassert( (phase == Phase.RECONCILE && compilationUnit != null) || ", "+    \t\t\t(phase == Phase.BUILD && compilationUnit == null && file != null ) ) :", "+    \t\t\t\"Unexpected phase value \" + phase ; //$NON-NLS-1$", "+    \t", "+    \tassert (source == null && compilationUnit != null) ||", "+\t\t\t   (source != null && compilationUnit == null) : ", "+\t           \"Unexpected values for _compilationUnit and _source!\"; //$NON-NLS-1$", "+\t\t\t   ", "+\t   _compilationUnit = compilationUnit;", "+\t   _curSource = source;", "+\t   _filer = new FilerImpl(this);", "+\t   _allProblems = new HashMap<IFile, List<IProblem>>();", "+\t   initOptions(javaProj);", "+    }", "-\t\tinitOptions(_javaProject);"]}], "num": 67304}
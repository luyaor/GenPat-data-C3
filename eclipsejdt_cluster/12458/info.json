{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed7e36c9575a9f72fd4b7e3c4cb645b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d93cca1cec7a422c2f6f51bef3b15a08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "183bd75c46b88010e052308e0b5a2ec9acc24639", "commitAfterChange": "70e7dc8284deadd5b37cb25d1eb08df1105ac893", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t\t", "-\t\tif (expectedType.isArrayType()) {", "+\t\tif (expectedType instanceof ArrayBinding) {", "-\t\t\tfor (int i = 0, length = expressions.length; i < length; i++) {", "-\t\t\t\tExpression expression = expressions[i];", "+\t\t\tfor (int i = 0, length = this.expressions.length; i < length; i++) {", "+\t\t\t\tExpression expression = this.expressions[i];", "-\t\t\treturn binding;", "+\t\t\treturn this.binding;", "-\t\tif (expressions == null) {", "+\t\tif (this.expressions == null) {", "-\t\t\tExpression currentExpression = expressions[0];", "-\t\t\twhile(currentExpression != null && currentExpression instanceof ArrayInitializer) {", "+\t\t\tExpression expression = this.expressions[0];", "+\t\t\twhile(expression != null && expression instanceof ArrayInitializer) {", "-\t\t\t\tExpression[] subExprs = ((ArrayInitializer) currentExpression).expressions;", "+\t\t\t\tExpression[] subExprs = ((ArrayInitializer) expression).expressions;", "-\t\t\t\t\tcurrentExpression = null;", "+\t\t\t\t\texpression = null;", "-\t\t\t\tcurrentExpression = ((ArrayInitializer) currentExpression).expressions[0];", "+\t\t\t\texpression = ((ArrayInitializer) expression).expressions[0];", "-\t\t\tif (currentExpression != null) {", "-\t\t\t\tleafElementType = currentExpression.resolveType(scope);", "+\t\t\tif (expression != null) {", "+\t\t\t\tleafElementType = expression.resolveType(scope);", "-\t\t\tTypeBinding probableTb = scope.createArrayType(leafElementType, dim);", "-\t\t\tscope.problemReporter().typeMismatchError(probableTb, expectedType, this);", "+\t\t\tthis.resolvedType = scope.createArrayType(leafElementType, dim);", "+\t\t\tif (expectedType != null)", "+\t\t\t\tscope.problemReporter().typeMismatchError(this.resolvedType, expectedType, this);", "+\t\t}", "+\t\t// fault-tolerance - resolve other expressions as well", "+\t\tfor (int i = 1, length = this.expressions.length; i < length; i++) {", "+\t\t\tExpression expression = this.expressions[i];", "+\t\t\tif (expression != null) {", "+\t\t\t\texpression.resolveType(scope)\t;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de43a9e359ec8d0b922aab7fe7f1c923", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "6e642a34a8b5c85df508f049684a8996f1b8df52", "commitAfterChange": "355460267a070a52738f93cd1e4e0f2039fb0d85", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t\tprotected boolean visitNode(ASTNode node)", "signatureAfterChange": "  \t\tprotected boolean visitNode(ASTNode node)", "diff": ["-", "+\t\t\t", "-\t\t\tASTNode sibling = (ASTNode) this.waitingSiblings.get(parent);", "+ \t\t\tASTNode sibling = parent == this.topSiblingParent ? (ASTNode) this.siblings[this.siblingPtr] : null;", "-\t\t\t\t\tpreviousEnd = storeTrailingComments(sibling, node.getStartPosition(), false);", "+\t\t\t\t\tpreviousEnd = storeTrailingComments(sibling, node.getStartPosition(), false, this.parentLineRange[this.siblingPtr]);", "+\t\t\tint[] previousLineRange = this.siblingPtr > -1 ? this.parentLineRange[this.siblingPtr] : new int[] {1, DefaultCommentMapper.this.scanner.linePtr+1};", "-\t\t\t\tstoreLeadingComments(node, previousEnd);", "+\t\t\t\tstoreLeadingComments(node, previousEnd, previousLineRange);", "-\t\t\tthis.waitingSiblings.put(parent, node);", "+\t\t\tif (this.topSiblingParent != parent) {", "+\t\t\t\tif (this.siblings.length == ++this.siblingPtr) {", "+\t\t\t\t\tSystem.arraycopy(this.siblings, 0, this.siblings = new ASTNode[this.siblingPtr*2], 0, this.siblingPtr);", "+\t\t\t\t\tSystem.arraycopy(this.parentLineRange, 0, this.parentLineRange = new int[this.siblingPtr*2][], 0, this.siblingPtr);", "+\t\t\t\t}", "+\t\t\t\tif (this.topSiblingParent == null) {", "+\t\t\t\t\t// node is a CompilationUnit", "+\t\t\t\t\tthis.parentLineRange[this.siblingPtr] = previousLineRange;", "+\t\t\t\t} else {", "+\t\t\t\t\tint parentStart = parent.getStartPosition();", "+\t\t\t\t\tint firstLine = getLineNumber(parentStart, previousLineRange);", "+\t\t\t\t\tint lastLine = getLineNumber(parentStart + parent.getLength() - 1, previousLineRange);", "+\t\t\t\t\tif (this.parentLineRange[this.siblingPtr] == null) {", "+\t\t\t\t\t\tthis.parentLineRange[this.siblingPtr] = new int[] {firstLine, lastLine};", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint[] lineRange = this.parentLineRange[this.siblingPtr];", "+\t\t\t\t\t\tlineRange[0] = firstLine;", "+\t\t\t\t\t\tlineRange[1] = lastLine;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.topSiblingParent = parent;", "+\t\t\t}", "+\t\t\tthis.siblings[this.siblingPtr] = node;"]}], "num": 12458}
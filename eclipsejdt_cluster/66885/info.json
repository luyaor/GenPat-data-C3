{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d793000cc6f1be1ef56c0094c6c37640", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58fb66dd3225430b85d0e19a3a97c156", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "090fe346c72e2854da50fe3a145f46de3d4f7de0", "commitAfterChange": "a0b059290bf7b15573bfcb14661207df6f99dd45", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void test027()", "signatureAfterChange": " public void test027()", "diff": ["-\tthis.runNegativeTest(", "+\tCompilerOptions options = new CompilerOptions(getCompilerOptions());", "+\tif (options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"    A a = null;\\n\" + ", "+\t\t\t\t\"    boolean b = a instanceof B;\\n\" + ", "+\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface A {\\n\" + ", "+\t\t\t\t\"  void doSomething();\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface B {\\n\" + ", "+\t\t\t\t\"  int doSomething();\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tboolean b = a instanceof B;\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Incompatible conditional operand types A and B\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tboolean b = a instanceof B;\\n\" + ", "-\t\t\"\t            ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Incompatible conditional operand types A and B\\n\" + ", "-\t\t\"----------\\n\",", "-\t\tnull,", "-\t\ttrue);", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6624adefbdb8baa7b240c21b1622ec1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "090fe346c72e2854da50fe3a145f46de3d4f7de0", "commitAfterChange": "a0b059290bf7b15573bfcb14661207df6f99dd45", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void test028()", "signatureAfterChange": " public void test028()", "diff": ["-public void test028() { ", "-\tthis.runNegativeTest(", "+public void test028() {", "+\tCompilerOptions options = new CompilerOptions(getCompilerOptions());", "+\tif (options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"    A a = null;\\n\" + ", "+\t\t\t\t\"    B b = null;\\n\" + ", "+\t\t\t\t\"    boolean c = a == b;\\n\" + ", "+\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface A {\\n\" + ", "+\t\t\t\t\"  void doSomething();\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface B {\\n\" + ", "+\t\t\t\t\"  int doSomething();\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tboolean c = a == b;\\n\" + ", "+\t\t\t\"\t            ^^^^^^\\n\" + ", "+\t\t\t\"Incompatible operand types A and B\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tboolean c = a == b;\\n\" + ", "-\t\t\"\t            ^^^^^^\\n\" + ", "-\t\t\"Incompatible operand types A and B\\n\" + ", "-\t\t\"----------\\n\",", "-\t\tnull,", "-\t\ttrue);", "+\t\t\"\");", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c933265865a55c84e9f3cacde0fe6670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "090fe346c72e2854da50fe3a145f46de3d4f7de0", "commitAfterChange": "a0b059290bf7b15573bfcb14661207df6f99dd45", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test026()", "signatureAfterChange": " public void test026()", "diff": ["-\tthis.runNegativeTest(", "+\t", "+\tCompilerOptions options = new CompilerOptions(getCompilerOptions());", "+\tif (options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"    A a = null;\\n\" + ", "+\t\t\t\t\"    B b = (B) a;\\n\" + ", "+\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface A {\\n\" + ", "+\t\t\t\t\"  void doSomething();\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface B {\\n\" + ", "+\t\t\t\t\"  int doSomething();\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tB b = (B) a;\\n\" + ", "+\t\t\t\"\t      ^^^^^\\n\" + ", "+\t\t\t\"Cannot cast from A to B\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tB b = (B) a;\\n\" + ", "-\t\t\"\t      ^^^^^\\n\" + ", "-\t\t\"Cannot cast from A to B\\n\" + ", "-\t\t\"----------\\n\",", "-\t\tnull,", "-\t\ttrue);", "+\t\t\"\");", "+\t"]}], "num": 66885}
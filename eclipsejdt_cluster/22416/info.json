{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e68e41e34eaffa31f14d1f509f1feff9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ff81df8007f18097ad4747d8f048016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprivate void locatePackageDeclarations(\r \t\tSearchPattern searchPattern,\r \t\tIWorkspace workspace)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "diff": ["-\t */\r", "-\tprivate void locatePackageDeclarations(\r", "-\t\tSearchPattern searchPattern,\r", "-\t\tIWorkspace workspace)\r", "-\t\tthrows JavaModelException {\r", "-\t\tif (searchPattern instanceof OrPattern) {\r", "-\t\t\tOrPattern orPattern = (OrPattern) searchPattern;\r", "-\t\t\tthis.locatePackageDeclarations(orPattern.leftPattern, workspace);\r", "-\t\t\tthis.locatePackageDeclarations(orPattern.rightPattern, workspace);\r", "-\t\t} else\r", "-\t\t\tif (searchPattern instanceof PackageDeclarationPattern) {\r", "-\t\t\t\tPackageDeclarationPattern pkgPattern =\r", "-\t\t\t\t\t(PackageDeclarationPattern) searchPattern;\r", "-\t\t\t\tString pkgName = new String(pkgPattern.pkgName);\r", "-\t\t\t\tIJavaProject[] projects =\r", "-\t\t\t\t\tJavaModelManager.getJavaModel(workspace).getJavaProjects();\r", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "-\t\t\t\t\tIJavaProject javaProject = projects[i];\r", "-\t\t\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();\r", "-\t\t\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {\r", "-\t\t\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();\r", "-\t\t\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {\r", "-\t\t\t\t\t\t\tIJavaElement pkg = pkgs[k];\r", "-\t\t\t\t\t\t\tif (pkgPattern\r", "-\t\t\t\t\t\t\t\t.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {\r", "-\t\t\t\t\t\t\t\tIResource resource = pkg.getUnderlyingResource();\r", "-\t\t\t\t\t\t\t\tif (resource == null) { // case of a file in an external jar\r", "-\t\t\t\t\t\t\t\t\tresource = javaProject.getProject();\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tthis.potentialMatchesIndex = 0;\r", "-\t\t\t\t\t\t\t\tthis.potentialMatches =\r", "-\t\t\t\t\t\t\t\t\tnew PotentialMatch[] { new PotentialMatch(this, resource, null)};\r", "-\t\t\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\t\t\tthis.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);\r", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t\t\t\t\tif (e instanceof JavaModelException) {\r", "-\t\t\t\t\t\t\t\t\t\tthrow (JavaModelException) e;\r", "-\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(e);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t}\r", "+ */\r", "+private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException {\r", "+\tif (searchPattern instanceof OrPattern) {\r", "+\t\tOrPattern orPattern = (OrPattern)searchPattern;\r", "+\t\tthis.locatePackageDeclarations(orPattern.leftPattern, workspace);\r", "+\t\tthis.locatePackageDeclarations(orPattern.rightPattern, workspace);\r", "+\t} else if (searchPattern instanceof PackageDeclarationPattern) {\r", "+\t\tPackageDeclarationPattern pkgPattern = (PackageDeclarationPattern)searchPattern;\r", "+\t\tString pkgName = new String(pkgPattern.pkgName);\r", "+\t\tIJavaProject[] projects = JavaModelManager.getJavaModel(workspace).getJavaProjects();\r", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "+\t\t\tIJavaProject javaProject = projects[i];\r", "+\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();\r", "+\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {\r", "+\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();\r", "+\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {\r", "+\t\t\t\t\tIJavaElement pkg = pkgs[k];\r", "+\t\t\t\t\tif (pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {\r", "+\t\t\t\t\t\tthis.currentResource = pkg.getUnderlyingResource();\r", "+\t\t\t\t\t\tif (this.currentResource == null) { // case of a file in an external jar\r", "+\t\t\t\t\t\t\tthis.currentResource = javaProject.getProject();\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tthis.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);\r", "+\t\t\t\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t\t\t\tif (e instanceof JavaModelException) {\r", "+\t\t\t\t\t\t\t\tthrow (JavaModelException)e;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tthrow new JavaModelException(e);\r", "-\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "416ac76ed7b7f2c1bf6205775ffd44ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprivate void locatePackageDeclarations(\r \t\tSearchPattern searchPattern,\r \t\tIWorkspace workspace)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "diff": ["-\t */\r", "-\tprivate void locatePackageDeclarations(\r", "-\t\tSearchPattern searchPattern,\r", "-\t\tIWorkspace workspace)\r", "-\t\tthrows JavaModelException {\r", "-\t\tif (searchPattern instanceof OrPattern) {\r", "-\t\t\tOrPattern orPattern = (OrPattern) searchPattern;\r", "-\t\t\tthis.locatePackageDeclarations(orPattern.leftPattern, workspace);\r", "-\t\t\tthis.locatePackageDeclarations(orPattern.rightPattern, workspace);\r", "-\t\t} else\r", "-\t\t\tif (searchPattern instanceof PackageDeclarationPattern) {\r", "-\t\t\t\tPackageDeclarationPattern pkgPattern =\r", "-\t\t\t\t\t(PackageDeclarationPattern) searchPattern;\r", "-\t\t\t\tString pkgName = new String(pkgPattern.pkgName);\r", "-\t\t\t\tIJavaProject[] projects =\r", "-\t\t\t\t\tJavaModelManager.getJavaModel(workspace).getJavaProjects();\r", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "-\t\t\t\t\tIJavaProject javaProject = projects[i];\r", "-\t\t\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();\r", "-\t\t\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {\r", "-\t\t\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();\r", "-\t\t\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {\r", "-\t\t\t\t\t\t\tIJavaElement pkg = pkgs[k];\r", "-\t\t\t\t\t\t\tif (pkgPattern\r", "-\t\t\t\t\t\t\t\t.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {\r", "-\t\t\t\t\t\t\t\tIResource resource = pkg.getUnderlyingResource();\r", "-\t\t\t\t\t\t\t\tif (resource == null) { // case of a file in an external jar\r", "-\t\t\t\t\t\t\t\t\tresource = javaProject.getProject();\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tthis.potentialMatchesIndex = 0;\r", "-\t\t\t\t\t\t\t\tthis.potentialMatches =\r", "-\t\t\t\t\t\t\t\t\tnew PotentialMatch[] { new PotentialMatch(this, resource, null)};\r", "-\t\t\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\t\t\tthis.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);\r", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t\t\t\t\tif (e instanceof JavaModelException) {\r", "-\t\t\t\t\t\t\t\t\t\tthrow (JavaModelException) e;\r", "-\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(e);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t}\r", "+ */\r", "+private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException {\r", "+\tif (searchPattern instanceof OrPattern) {\r", "+\t\tOrPattern orPattern = (OrPattern)searchPattern;\r", "+\t\tthis.locatePackageDeclarations(orPattern.leftPattern, workspace);\r", "+\t\tthis.locatePackageDeclarations(orPattern.rightPattern, workspace);\r", "+\t} else if (searchPattern instanceof PackageDeclarationPattern) {\r", "+\t\tPackageDeclarationPattern pkgPattern = (PackageDeclarationPattern)searchPattern;\r", "+\t\tString pkgName = new String(pkgPattern.pkgName);\r", "+\t\tIJavaProject[] projects = JavaModelManager.getJavaModel(workspace).getJavaProjects();\r", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "+\t\t\tIJavaProject javaProject = projects[i];\r", "+\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();\r", "+\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {\r", "+\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();\r", "+\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {\r", "+\t\t\t\t\tIJavaElement pkg = pkgs[k];\r", "+\t\t\t\t\tif (pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {\r", "+\t\t\t\t\t\tthis.currentResource = pkg.getUnderlyingResource();\r", "+\t\t\t\t\t\tif (this.currentResource == null) { // case of a file in an external jar\r", "+\t\t\t\t\t\t\tthis.currentResource = javaProject.getProject();\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tthis.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);\r", "+\t\t\t\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t\t\t\tif (e instanceof JavaModelException) {\r", "+\t\t\t\t\t\t\t\tthrow (JavaModelException)e;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tthrow new JavaModelException(e);\r", "-\t}\r", "+}\r"]}], "num": 22416}
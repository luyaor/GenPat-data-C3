{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3aaee19d16bd30efcfb6b99c87f71725", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49cf09285ff2b46ca4e3fa2b4344b3d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner)", "diff": ["-\t\t\tif (classFile == null) {", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t\tchar[] source = null;", "-\t\t\tString sourceString = null;", "-\t\t\ttry {", "-\t\t\t\tsourceString = classFile.getSource();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t\tif (sourceString == null) {", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t\tsource = sourceString.toCharArray();", "-\t\t\tif (!resolveBindings) {", "-\t\t\t\treturn AST.parseCompilationUnit(source);", "-\t\t\t}", "-\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "-\t\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "-\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "-\t\t\tIJavaProject project = classFile.getJavaProject();", "-\t\t\ttry {", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration =", "-\t\t\t\t\tCompilationUnitResolver.resolve(", "-\t\t\t\t\t\tsource,", "-\t\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "-\t\t\t\t\t\tbuffer.toString(),", "-\t\t\t\t\t\tproject,", "-\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());", "-\t\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true);", "-\t\t\t\tAST ast = new AST();", "-\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\tconverter.setAST(ast);", "+\t */", "+\tpublic static CompilationUnit parseCompilationUnit(", "+\t\tIClassFile classFile,", "+\t\tboolean resolveBindings,", "+\t\tWorkingCopyOwner owner) {", "-\t\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\t\treturn cu;", "-\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t\t */", "-\t\t\t\treturn parseCompilationUnit(source);\t\t\t", "+\t\tif (classFile == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tchar[] source = null;", "+\t\tString sourceString = null;", "+\t\ttry {", "+\t\t\tsourceString = classFile.getSource();", "+\t\t} catch (JavaModelException e) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tif (sourceString == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tsource = sourceString.toCharArray();", "+\t\tif (!resolveBindings) {", "+\t\t\treturn AST.parseCompilationUnit(source);", "+\t\t}", "+\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "+\t\t", "+\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "+\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\tIJavaProject project = classFile.getJavaProject();", "+\t\tNameLookup lookup = null;", "+\t\ttry {", "+\t\t\t// set the units to look inside", "+\t\t\tlookup = ((JavaProject)project).getNameLookup();", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t", "+\t\t\t// parse and resolve", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration =", "+\t\t\t\tCompilationUnitResolver.resolve(", "+\t\t\t\t\tsource,", "+\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "+\t\t\t\t\tbuffer.toString(),", "+\t\t\t\t\tproject,", "+\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());", "+\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true);", "+\t\t\tAST ast = new AST();", "+\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "+\t\t\tast.setBindingResolver(resolver);", "+\t\t\tconverter.setAST(ast);", "+\t\t", "+\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "+\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "+\t\t\tresolver.storeModificationCount(ast.modificationCount());", "+\t\t\treturn cu;", "+\t\t} catch(JavaModelException e) {", "+\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "+\t\t\t * then we simply do a parsing without creating bindings.", "+\t\t\t * Therefore all binding resolution will return null.", "+\t\t\t */", "+\t\t\treturn parseCompilationUnit(source);\t\t\t", "+\t\t} finally {", "+\t\t\tif (lookup != null) {", "+\t\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "871b24b03e8a0baf0901e3e527cd9165", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate ASTNode temporaryCreateASTDispatch(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\tprivate ASTNode temporaryCreateASTDispatch(IProgressMonitor monitor) {", "-\t\t// old AST.parse(...)", "-\t\tif (this.astKind != K_COMPILATION_UNIT) {", "-\t\t\treturn parse(this.astKind, this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions);", "-\t\t}", "-\t\t// old AST.parsePartialCompilationUnit(...)", "-\t\tif (this.partial) {", "-\t\t\tif (this.compilationUnitSource != null) {", "-\t\t\t\treturn parsePartialCompilationUnit(this.compilationUnitSource, this.focalPointPosition, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t\t}", "-\t\t\tif (this.classFileSource != null) {", "-\t\t\t\treturn parsePartialCompilationUnit(this.classFileSource, this.focalPointPosition, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t\t}", "-\t\t\tthrow new RuntimeException(\"partial parses of raw sources not implemented yet\"); //$NON-NLS-1$", "-\t\t}", "-\t\t// old AST.parseCompilationUnit(...)", "-\t\tif (this.rawSource != null) {", "-\t\t\tif (unitName != null || project != null) {", "-\t\t\t\treturn parseCompilationUnit(this.rawSource, this.unitName, this.project, this.workingCopyOwner, monitor);", "-\t\t\t} else {", "-\t\t\t\treturn parseCompilationUnit(this.rawSource, this.compilerOptions);", "-\t\t\t}", "-\t\t}", "-\t\tif (this.compilationUnitSource != null) {", "-\t\t\treturn parseCompilationUnit(this.compilationUnitSource, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t}", "-\t\tif (this.classFileSource != null) {", "-\t\t\treturn parseCompilationUnit(this.classFileSource, this.resolveBindings, this.workingCopyOwner, monitor);", "+\tprivate ASTNode internalCreateAST(IProgressMonitor monitor) {", "+\t\tboolean needToResolveBindings = this.resolveBindings;", "+\t\tswitch(this.astKind) {", "+\t\t\tcase K_CLASS_BODY_DECLARATIONS :", "+\t\t\tcase K_EXPRESSION :", "+\t\t\tcase K_STATEMENTS :", "+\t\t\t\tif (this.rawSource != null) {", "+\t\t\t\t\tif (this.sourceOffset + this.sourceLength > this.rawSource.length) {", "+\t\t\t\t\t    throw new IllegalStateException();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn internalCreateASTForKind();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_COMPILATION_UNIT :", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tchar[] source = null;", "+\t\t\t\t\tNodeSearcher searcher = null;", "+\t\t\t\t\tchar[][] packageName = null;", "+\t\t\t\t\tString fileName = null;", "+\t\t\t\t\tif (this.compilationUnitSource != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tsource = this.compilationUnitSource.getSource().toCharArray();", "+\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t// no source, then we cannot build anything", "+\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment)this.compilationUnitSource.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "+\t\t\t\t\t\tif (packageFragment != null){", "+\t\t\t\t\t\t\tpackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfileName = this.compilationUnitSource.getElementName();", "+\t\t\t\t\t} else if (this.classFileSource != null) {", "+\t\t\t\t\t\tString sourceString = null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tsourceString = this.classFileSource.getSource();", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// nothing to do", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t\tif (sourceString == null) {", "+\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsource = sourceString.toCharArray();", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tpackageName = CharOperation.splitOn('.', this.classFileSource.getType().getPackageFragment().getElementName().toCharArray());", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "+\t\t\t\t\t\t\tString classFileName = this.classFileSource.getElementName(); // this includes the trailing .class", "+\t\t\t\t\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\t\t\t\t\t\tfileName = String.valueOf(buffer);", "+\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (this.rawSource != null) {", "+\t\t\t\t\t\tsource = this.rawSource;", "+\t\t\t\t\t\tif (this.unitName == null || this.project == null) {", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfileName = this.unitName;", "+\t\t\t\t\t\t\tneedToResolveBindings = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (source == null) {", "+\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.partial) {", "+\t\t\t\t\t\tsearcher = new NodeSearcher(this.focalPointPosition);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (needToResolveBindings) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// parse and resolve", "+\t\t\t\t\t\t\tcompilationUnitDeclaration = ", "+\t\t\t\t\t\t\t\tCompilationUnitResolver.resolve(", "+\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\tfileName,", "+\t\t\t\t\t\t\t\t\tthis.project,", "+\t\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\tthis.workingCopyOwner,", "+\t\t\t\t\t\t\t\t\tmonitor);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\t\tthis.compilerOptions);", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\tthis.compilerOptions);", "+\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn convert(monitor, compilationUnitDeclaration, source, needToResolveBindings);", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (compilationUnitDeclaration != null && this.resolveBindings) {", "+\t\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t\t", "+\t}"]}], "num": 31664}
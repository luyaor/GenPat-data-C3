{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fa3bf793a0e7deda38ecb50768fff45", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6228c9053dc34cc1268d094fe6a8d143", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "diff": ["-\t\treturn (", "-\t\t\t(node.getModifiers() == o.getModifiers())", "-\t\t\t\t&& safeSubtreeMatch(node.getType(), o.getType())", "+\t\tint level = node.getAST().API_LEVEL;", "+\t\tif (level == AST.LEVEL_2_0) {", "+\t\t\tif (node.getModifiers() != o.getModifiers()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\tif (level >= AST.LEVEL_3_0) {", "+\t\t\tif (!safeSubtreeListMatch(node.modifiers(), o.modifiers())) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (node.isVariableArity() != o.isVariableArity()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\treturn ", "+\t\t    safeSubtreeMatch(node.getType(), o.getType())", "-\t\t\t\t&& safeSubtreeMatch(node.getInitializer(), o.getInitializer()));", "+\t\t\t\t&& safeSubtreeMatch(node.getInitializer(), o.getInitializer());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932bdd51f00fb2f3b682df644fa6c2ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "fafb2dc68e9656aa163ddd55309d4bcb6df6ee09", "commitAfterChange": "56242f2c4a4e3fdfdcffa7d9541655946a7953f8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "diff": ["+\tlong tagBits;", "+\tMethodBinding methodBinding = null;", "+\tboolean useTypeAnnotations = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "+\ttry {", "+\t\tmethodBinding = scope.methodScope().referenceMethodBinding();", "+\t\ttagBits = (useTypeAnnotations) ? methodBinding.returnType.tagBits : methodBinding.tagBits;", "+\t} catch (NullPointerException npe) {", "+\t\t// chain of references in try-block has several potential nulls;", "+\t\t// any null means we cannot perform the following check", "+\t\treturn;\t\t\t", "+\t}", "+\tif (useTypeAnnotations) {", "+\t\tint severity = findNullTypeAnnotationMismatch(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "+\t\tif (severity == 3) {", "+\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, severity);", "+\t\t\treturn;", "+\t\t} else if (severity == 2) {", "+\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "+\t\t\treturn;", "+\t\t}", "+\t}", "-\t\tlong tagBits;", "-\t\tMethodBinding methodBinding = null;", "-\t\tboolean useTypeAnnotations = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "-\t\ttry {", "-\t\t\tmethodBinding = scope.methodScope().referenceMethodBinding();", "-\t\t\ttagBits = (useTypeAnnotations) ? methodBinding.returnType.tagBits : methodBinding.tagBits;", "-\t\t} catch (NullPointerException npe) {", "-\t\t\t// chain of references in try-block has several potential nulls;", "-\t\t\t// any null means we cannot perform the following check", "-\t\t\treturn;\t\t\t", "-\t\t}", "-\t\t\tif (useTypeAnnotations && (this.expression.resolvedType.tagBits & TagBits.AnnotationNullMASK) != 0) // TODO(stephan) more detailed checking", "-\t\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, 3);", "-\t\t\telse", "-\t\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "+\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86767075149445391f398cc3651bba5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic boolean match(FieldDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(FieldDeclaration node, Object other)", "diff": ["-\t\treturn node.getModifiers() == o.getModifiers()", "-\t\t\t&& safeSubtreeMatch(node.getJavadoc(), o.getJavadoc())", "+\t\tint level = node.getAST().API_LEVEL;", "+\t\tif (level == AST.LEVEL_2_0) {", "+\t\t\tif (node.getModifiers() != o.getModifiers()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\tif (level >= AST.LEVEL_3_0) {", "+\t\t\tif (!safeSubtreeListMatch(node.modifiers(), o.modifiers())) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\treturn ", "+\t\t\tsafeSubtreeMatch(node.getJavadoc(), o.getJavadoc())"]}], "num": 72953}
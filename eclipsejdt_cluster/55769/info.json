{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7440ed145ee1230d490309428cf9a730", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "190d35196f1d5c2820b876dce9de5b03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6bbe631c4aee5403134035d5558f68ceeb91c520", "commitAfterChange": "a387db32f06bcc44b6b47e5aa021853a1cfee33c", "methodNumberBeforeChange": 302, "methodNumberAfterChange": 302, "signatureBeforeChange": "  public void scannerError(Parser parser, String errorTokenName)", "signatureAfterChange": "  public void scannerError(Parser parser, String errorTokenName)", "diff": ["+\tint endPos = scanner.currentPosition - 1;", "+\t} else if (errorTokenName.equals(Scanner.INVALID_LOW_SURROGATE)) {", "+\t\tflag = IProblem.InvalidLowSurrogate;", "+\t} else if (errorTokenName.equals(Scanner.INVALID_HIGH_SURROGATE)) {", "+\t\tflag = IProblem.InvalidHighSurrogate;", "+\t\t// better locate the error message", "+\t\tchar[] source = scanner.source;", "+\t\tint checkPos = scanner.startPosition + 1;", "+\t\twhile (checkPos <= endPos){", "+\t\t\tif (source[checkPos] == '\\\\') break;", "+\t\t\tcheckPos ++;", "+\t\t}", "+\t\tendPos = checkPos - 1;", "-\t\tscanner.currentPosition - 1,", "+\t\tendPos,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f9ff55ebcbf4e04913fab11d1e9d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 362, "methodNumberAfterChange": 367, "signatureBeforeChange": " public void scannerError(Parser parser, String errorTokenName)", "signatureAfterChange": " public void scannerError(Parser parser, String errorTokenName)", "diff": ["+\telse if (errorTokenName.equals(Scanner.ILLEGAL_HEXA_LITERAL))", "+\t\tflag = IProblem.IllegalHexaLiteral;", "+\telse if (errorTokenName.equals(Scanner.INVALID_BINARY))", "+\t\tflag = IProblem.InvalidBinary;", "+\telse if (errorTokenName.equals(Scanner.BINARY_LITERAL_NOT_BELOW_17))", "+\t\tflag = IProblem.BinaryLiteralNotBelow17;", "+\telse if (errorTokenName.equals(Scanner.INVALID_UNDERSCORE))", "+\t\tflag = IProblem.IllegalUnderscorePosition;", "+\telse if (errorTokenName.equals(Scanner.UNDERSCORES_IN_LITERALS_NOT_BELOW_17))", "+\t\tflag = IProblem.UnderscoresInLiteralsNotBelow17;"]}], "num": 55769}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43d2308687fdc1d6281a850684a42e48", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f31d77559766fa3ffc2fe5aeedd7c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1666c32b249d36aa9547f4f66f511c5bb00d3d63", "commitAfterChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "methodNumberBeforeChange": 1480, "methodNumberAfterChange": 1480, "signatureBeforeChange": " public void test1445()", "signatureAfterChange": " public void test1445()", "diff": ["-\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\" + ", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8", "+\t\t\t? \"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\"", "+\t\t\t: \"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" ) +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\" + ", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8", "+\t\t\t? \"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\"", "+\t\t\t: \"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" ) +", "-\t\t\t\"----------\\n\"", "-\t\t\t: // 1.8 infers type parameters in throws clauses to RuntimeException, hence no errors", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tstatic void bar(List l) {\\n\" + ", "-\t\t\t\"\t                ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tstatic void baz(List l) throws IOException {\\n\" + ", "-\t\t\t\"\t                ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                    ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"10. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                                          ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"11. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\t\"\tX(List l, long l2) throws IOException {\\n\" + ", "-\t\t\t\"\t  ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"12. WARNING in X.java (at line 16)\\n\" + ", "-\t\t\t\"\t<IOException> this(l);\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"13. WARNING in X.java (at line 16)\\n\" + ", "-\t\t\t\"\t<IOException> this(l);\\n\" + ", "-\t\t\t\"\t                   ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"14. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\t\"\tstatic void baz2(List l) throws IOException {\\n\" + ", "-\t\t\t\"\t                 ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"15. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"16. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"17. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                    ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"18. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                                            ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t));", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a95e6af191998bb09f1573221dde08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 1480, "methodNumberAfterChange": 1480, "signatureBeforeChange": " public void test1445()", "signatureAfterChange": " public void test1445()", "diff": ["-// FIXME javac8 doesn't find the error", "-\t\t\t\t\"}\\n\",//-----------------------------------------------------------------------", "+\t\t\t\t\"}\\n\",", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t\t: // 1.8 infers type parameters in throws clauses to RuntimeException, hence no errors", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tstatic void bar(List l) {\\n\" + ", "+\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tstatic void baz(List l) throws IOException {\\n\" + ", "+\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t                                          ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tX(List l, long l2) throws IOException {\\n\" + ", "+\t\t\t\"\t  ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\t<IOException> this(l);\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\t<IOException> this(l);\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tstatic void baz2(List l) throws IOException {\\n\" + ", "+\t\t\t\"\t                 ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"16. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"17. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"18. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "+\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t));"]}], "num": 23093}
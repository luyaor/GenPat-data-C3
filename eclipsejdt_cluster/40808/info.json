{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "049620f4295611546916695c5e63cd95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0883742c97bc3020ca4ab8200825ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tvoid validateNullAnnotations()", "signatureAfterChange": "  \tvoid validateNullAnnotations(long sourceLevel)", "diff": ["-\tvoid validateNullAnnotations() {", "+\tvoid validateNullAnnotations(long sourceLevel) {", "+\t\tif (this.binding == null) return;", "-\t\tif (this.binding != null && this.binding.parameterNonNullness != null) {", "-\t\t\tint length = this.binding.parameters.length;", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tif (this.binding.parameterNonNullness[i] != null) {", "-\t\t\t\t\tlong nullAnnotationTagBit =  this.binding.parameterNonNullness[i].booleanValue()", "-\t\t\t\t\t\t\t? TagBits.AnnotationNonNull : TagBits.AnnotationNullable;", "-\t\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "+\t\tif (sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\tif (this.binding.parameterNonNullness != null) {", "+\t\t\t\tint length = this.binding.parameters.length;", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tif (this.binding.parameterNonNullness[i] != null) {", "+\t\t\t\t\t\tlong nullAnnotationTagBit =  this.binding.parameterNonNullness[i].booleanValue()", "+\t\t\t\t\t\t\t\t? TagBits.AnnotationNonNull : TagBits.AnnotationNullable;", "+\t\t\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "+\t\t\t\t\t}", "+\t\t} else {", "+\t\t\tint length = this.binding.parameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tlong nullAnnotationTagBit = this.binding.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "+\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9838826c673966ded1dd7bac210307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "6b66bca84f13c7e210ac53b9682e41436c31dce2", "commitAfterChange": "2073ae07201f3b4750a106d0cadf90473710a63d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding)", "signatureAfterChange": " \tstatic void analyseArguments(LookupEnvironment environment, FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding)", "diff": ["-\tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding) {", "+\tstatic void analyseArguments(LookupEnvironment environment, FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding) {", "-\t\t\tfor (int i = 0, count = methodArguments.length; i < count; i++) {", "-\t\t\t\tif (methodBinding.parameterNonNullness != null) {", "-\t\t\t\t\t// leverage null-info from parameter annotations:", "-\t\t\t\t\tBoolean nonNullNess = methodBinding.parameterNonNullness[i];", "-\t\t\t\t\tif (nonNullNess != null) {", "-\t\t\t\t\t\tif (nonNullNess.booleanValue())", "-\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// tag parameters as being set:", "-\t\t\t\tflowInfo.markAsDefinitelyAssigned(methodArguments[i].binding);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t\tboolean usesNullTypeAnnotations = environment.usesNullTypeAnnotations();", "+\t\t\t\tif (usesNullTypeAnnotations) {", "+\t\t\t\t\t// leverage null type annotations:", "+\t\t\t\t\tlong tagBits = methodBinding.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (tagBits == TagBits.AnnotationNonNull)", "+\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "+\t\t\t\t\telse if (tagBits == TagBits.AnnotationNullable)", "+\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "+\t\t\t\t} else {\t\t\t\t\t", "+\t\t\t\t\tif (methodBinding.parameterNonNullness != null) {", "+\t\t\t\t\t\t// leverage null-info from parameter annotations:", "+\t\t\t\t\t\tBoolean nonNullNess = methodBinding.parameterNonNullness[i];", "+\t\t\t\t\t\tif (nonNullNess != null) {", "+\t\t\t\t\t\t\tif (nonNullNess.booleanValue())", "+\t\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 40808}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57858470d2c27a8e3d8240ca745ebe32", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "651d1676ef9278f44dfcf8fbee81d9f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "af8ddf1224acdd73d35eff5f86a6b2b80c9a4304", "commitAfterChange": "5949526ecc18e0967f54519179f4d69e16617703", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "signatureAfterChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "diff": ["-\t\t\t\t\t\tIPath typePath = type.getPath();", "-\t\t\t\t\t\tIPath rootPath = root.getPath();", "-\t\t\t\t\t\tIPath relativePath = typePath.removeFirstSegments(rootPath.segmentCount());", "-\t\t\t\t\t\tchar[] path;", "-\t\t\t\t\t\tif (relativePath.segmentCount() == 0) {", "-\t\t\t\t\t\t\t// case of a binary type in a jar (see 82542 Internal error during AST creation)", "-\t\t\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName.toCharArray());", "-\t\t\t\t\t\t\tchar[] classFileChars = type.getParent().getElementName().toCharArray();", "-\t\t\t\t\t\t\tpath = CharOperation.concatWith(packageChars, classFileChars, '/');", "-\t\t\t\t\t\t} else", "-\t\t\t\t\t\t\tpath = relativePath.toString().toCharArray();", "-\t\t\t\t\t\taccessRestriction = accessRestriction.getViolatedRestriction(path, null);", "+\t\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName.toCharArray());", "+\t\t\t\t\t\tchar[] classFileChars = type.getParent().getElementName().toCharArray();", "+\t\t\t\t\t\taccessRestriction = accessRestriction.getViolatedRestriction(CharOperation.concatWith(packageChars, classFileChars, '/'), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9181a416e7179b5bcd64dd16b549dfc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java", "commitBeforeChange": "11c24986fc925cfc43f4c88e72e0daee39a1576b", "commitAfterChange": "55350d5af8386833b94a470ab6a0d389ee3fc665", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void acceptType(IType type)", "signatureAfterChange": " public void acceptType(IType type)", "diff": ["-\t\tif (fUnitToSkip != null && fUnitToSkip.equals(type.getCompilationUnit())){", "+\t\tif (this.unitToSkip != null && this.unitToSkip.equals(type.getCompilationUnit())){", "+\t\tString packageName = type.getPackageFragment().getElementName();", "+\t\tString typeName = type.getElementName();", "+\t\tboolean isBinary = type instanceof BinaryType;", "+\t\t", "+\t\t// determine associated access restriction", "+\t\tAccessRestriction accessRestriction = null;", "+\t\t", "+\t\tif (this.checkAccessRestrictions && (isBinary || !type.getJavaProject().equals(this.project))) {", "+\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\tClasspathEntry entry = (ClasspathEntry) this.nameLookup.rootToResolvedEntries.get(root);", "+\t\t\tif (entry != null) { // reverse map always contains resolved CP entry", "+\t\t\t\taccessRestriction = entry.getImportRestriction();", "+\t\t\t\tif (accessRestriction != null) {", "+\t\t\t\t\t// TODO (philippe) improve char[] <-> String conversions to avoid performing them on the fly", "+\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName.toCharArray());", "+\t\t\t\t\tchar[] typeChars = typeName.toCharArray();", "+\t\t\t\t\taccessRestriction = accessRestriction.getViolatedRestriction(CharOperation.concatWith(packageChars, typeChars, '/'), null);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\tfRequestor.acceptClass(type.getPackageFragment().getElementName().toCharArray(), type.getElementName().toCharArray(), type.getFlags());", "+\t\t\tthis.requestor.acceptClass(type.getPackageFragment().getElementName().toCharArray(), type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "-\t\t\tfRequestor.acceptInterface(type.getPackageFragment().getElementName().toCharArray(), type.getElementName().toCharArray(), type.getFlags());", "+\t\t\tthis.requestor.acceptInterface(type.getPackageFragment().getElementName().toCharArray(), type.getElementName().toCharArray(), type.getFlags(), accessRestriction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9a399fd72418f2021f074ce31d1169b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java", "commitBeforeChange": "af8ddf1224acdd73d35eff5f86a6b2b80c9a4304", "commitAfterChange": "5949526ecc18e0967f54519179f4d69e16617703", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void acceptType(IType type)", "signatureAfterChange": " public void acceptType(IType type)", "diff": ["+\t\tchar[] packageName = type.getPackageFragment().getElementName().toCharArray();", "-\t\t\t\t\tIPath typePath = type.getPath();", "-\t\t\t\t\tIPath rootPath = root.getPath();", "-\t\t\t\t\tIPath relativePath = typePath.removeFirstSegments(rootPath.segmentCount());", "-\t\t\t\t\tchar[] path;", "-\t\t\t\t\tif (relativePath.segmentCount() == 0) {", "-\t\t\t\t\t\t// case of a binary type in a jar (see 82542 Internal error during AST creation)", "-\t\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', type.getParent().getElementName().toCharArray());", "-\t\t\t\t\t\tchar[] classFileChars = type.getParent().getElementName().toCharArray();", "-\t\t\t\t\t\tpath = CharOperation.concatWith(packageChars, classFileChars, '/');", "-\t\t\t\t\t} else", "-\t\t\t\t\t\tpath = relativePath.toString().toCharArray();", "-\t\t\t\t\taccessRestriction = accessRestriction.getViolatedRestriction(path, null);", "+\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName);", "+\t\t\t\t\tchar[] classFileChars = type.getParent().getElementName().toCharArray();", "+\t\t\t\t\taccessRestriction = accessRestriction.getViolatedRestriction(CharOperation.concatWith(packageChars, classFileChars, '/'), null);", "-\t\t\tthis.requestor.acceptClass(type.getPackageFragment().getElementName().toCharArray(), type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "+\t\t\tthis.requestor.acceptClass(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "-\t\t\tthis.requestor.acceptInterface(type.getPackageFragment().getElementName().toCharArray(), type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "+\t\t\tthis.requestor.acceptInterface(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcecf0e4eafdd1af6d540ba72e979e91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "de8634c6596eba9d498f21b3f06a4d952c468878", "commitAfterChange": "ed3ff9a36eb2db48659e462eacb164d15ad7a872", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "signatureAfterChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "diff": ["-\t\tIType type =", "+\t\tNameLookup.Answer answer =", "-\t\t\t\tfalse,", "-\t\t\t\tNameLookup.ACCEPT_ALL);", "-\t\tif (type != null) {", "-\t\t\tboolean isBinary = type instanceof BinaryType;", "-\t\t\t", "-\t\t\t// determine associated access restriction", "-\t\t\tAccessRestriction accessRestriction = null;", "-\t\t\t", "-\t\t\tif (this.checkAccessRestrictions && (isBinary || !type.getJavaProject().equals(this.project))) {", "-\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "-\t\t\t\tClasspathEntry entry = (ClasspathEntry) this.nameLookup.rootToResolvedEntries.get(root);", "-\t\t\t\tif (entry != null) { // reverse map always contains resolved CP entry", "-\t\t\t\t\tAccessRuleSet accessRuleSet = entry.getAccessRuleSet();", "-\t\t\t\t\tif (accessRuleSet != null) {", "-\t\t\t\t\t\t// TODO (philippe) improve char[] <-> String conversions to avoid performing them on the fly", "-\t\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName.toCharArray());", "-\t\t\t\t\t\tchar[] classFileChars = type.getElementName().toCharArray();", "-\t\t\t\t\t\taccessRestriction = accessRuleSet.getViolatedRestriction(CharOperation.concatWith(packageChars, classFileChars, '/'));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "+\t\t\t\tfalse/*exact match*/,", "+\t\t\t\tNameLookup.ACCEPT_ALL,", "+\t\t\t\tthis.checkAccessRestrictions);", "+\t\tif (answer != null) {", "-\t\t\tif (isBinary) { // BinaryType", "+\t\t\tif (answer.type instanceof BinaryType) { // BinaryType", "-\t\t\t\t\treturn new NameEnvironmentAnswer((IBinaryType) ((BinaryType) type).getElementInfo(), accessRestriction);", "+\t\t\t\t\treturn new NameEnvironmentAnswer((IBinaryType) ((BinaryType) answer.type).getElementInfo(), answer.restriction);", "-\t\t\t\t\tSourceTypeElementInfo sourceType = (SourceTypeElementInfo)((SourceType)type).getElementInfo();", "+\t\t\t\t\tSourceTypeElementInfo sourceType = (SourceTypeElementInfo)((SourceType) answer.type).getElementInfo();", "-\t\t\t\t\treturn new NameEnvironmentAnswer(sourceTypes, accessRestriction);", "+\t\t\t\t\treturn new NameEnvironmentAnswer(sourceTypes, answer.restriction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbeaa51027569cc9f7fea8b4488591dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "37d67ed9fa27dc85b6112e216c3af6d687e12530", "commitAfterChange": "8924c9453af0fcfcdde960b7165abadc76ad272e", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": " \t \tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, int accessFlags)", "signatureAfterChange": " \t \tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, int accessFlags)", "diff": ["-\t\t\t\tint startingIndex = (accessFlags & IModifierConstants.ACC_STATIC) != 0 ? 0 : 1;", "+\t\t\t\tfinal int startingIndex = (accessFlags & IModifierConstants.ACC_STATIC) != 0 ? 0 : 1;", "-\t\t\t\t\tILocalVariableTableEntry searchedEntry = getEntryFor(startingIndex + i, entries);", "+\t\t\t\t\tILocalVariableTableEntry searchedEntry = getEntryFor(getLocalIndex(startingIndex, i, methodDescriptor), entries);", "-\t\t\t\t\t\tparameterNames[i] = Messages.disassembler_parametername.toCharArray(); ", "+\t\t\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray()); ", "-\t\t\t\t\tparameterNames[i] = Messages.disassembler_parametername.toCharArray(); ", "+\t\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray()); ", "-\t\t\t\tparameterNames[i] = Messages.disassembler_parametername.toCharArray(); ", "+\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray()); "]}], "num": 5857}
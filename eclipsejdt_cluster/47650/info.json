{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3eb15d0458ba4b74a73681dda3d4487", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da8385fd9970b4d1fe95db373d4ee74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModelTestsUtil.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public static String trimLinesLeadingWhitespaces(String input)", "signatureAfterChange": " public static String trimLinesLeadingWhitespaces(String input)", "diff": ["-\t\tString line = tokenizer.nextToken().trim();", "-\t\tint index = line.indexOf('*');", "-\t\tif (index >= 0) {", "-\t\t\tint length = line.length();", "-\t\t\tif (length > 80 && line.charAt(length-1) == '>') { // should not happen:  bug of old formatter", "-\t\t\t\tint idx = line.lastIndexOf('<');", "-\t\t\t\tbuffer.append(line.substring(index+1, idx).trim());", "-\t\t\t\tbuffer.append(Util.LINE_SEPARATOR);", "-\t\t\t\tbuffer.append(line.substring(idx).trim());", "-\t\t\t\tcontinue;", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(line.substring(index+1).trim());", "+\t\tString line = tokenizer.nextToken();", "+\t\tint length = line.length();", "+\t\tint size = 0;", "+\t\tint idx = -1;", "+\t\tif (length > 0) {", "+\t\t\tloop: while ((idx+1) < length) {", "+\t\t\t\tchar ch = line.charAt(++idx);", "+\t\t\t\tswitch (ch) {", "+\t\t\t\t\tcase '\\t':", "+\t\t\t\t\t\tsize += 4;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '*':", "+\t\t\t\t\tcase ' ':", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t}", "+\t\t}", "+\t\tif (length > 0 && idx > 0 && idx < length) {", "+\t\t\tint splitLineIndex = line.indexOf(\"||\", idx);", "+\t\t\tif (splitLineIndex > 0) {", "+\t\t\t\tint commentStart = line.indexOf(\"/*\", splitLineIndex);", "+\t\t\t\tif (commentStart >= 80-((size*3)/4)) {", "+\t\t\t\t\tStringBuffer newLine = new StringBuffer(line.substring(idx-1, splitLineIndex).trim());", "+\t\t\t\t\tnewLine.append('\\n');", "+\t\t\t\t\tnewLine.append(line.substring(splitLineIndex).trim());", "+\t\t\t\t\tnewLine.append('\\n');", "+\t\t\t\t\tbuffer.append(newLine);", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(line.substring(idx).trim());", "-\t\tbuffer.append(Util.LINE_SEPARATOR);", "+\t\tbuffer.append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb9d21e72b619092b4ffe2998448bb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["+\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\tlong nullTagBits = method.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "+\t\t\t\tif (method.returnType.isBaseType()) {", "+\t\t\t\t\tif (method.returnType.id != TypeIds.T_void)  // type annotations are *always* illegal for 'void'", "+\t\t\t\t\t\tthis.scope.problemReporter().illegalAnnotationForBaseType(returnTypeRef, methodDecl.annotations, nullTagBits);", "+\t\t\t\t} else {", "+\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "+\t\t\t\t\tmethod.returnType = this.scope.environment().pushAnnotationIntoType(method.returnType, returnTypeRef, nullTagBits);", "+\t\t\t\t}", "+\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t}", "+\t\t}"]}], "num": 47650}
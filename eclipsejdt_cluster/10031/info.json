{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "110fcc16e65f11b2516344caa7fa9338", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a63bf2e0abb89ac2ba0f88485985c8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "757b057c48bf1f85c5d2234a6a1596019dcbfb51", "commitAfterChange": "35171539b48ed9848c6e1b744996c55db720d290", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void storeDimension(PrintStream[] logStreams, String[] comments, Statistics statistics, int index)", "signatureAfterChange": "  \tprivate void storeDimension(PrintStream[] logStreams, String[] comments, Statistics statistics, int index)", "diff": ["-\t    \tSystem.out.println(\"\tWARNING: \"+DIM_NAMES[index]+\" error is over \"+ERROR_STRING+\"%: \"+d2Format.format(stddev)+\"/sqrt(\"+count+\")=\"+ percentFormat.format(error/average));", "-\t    \tcomments[index] = \"err=\" + percentFormat.format(error/average);", "+\t    \tSystem.out.println(\"\tWARNING: \"+DIM_NAMES[index]+\" error is over \"+ERROR_STRING+\"%: \"+this.d2Format.format(stddev)+\"/sqrt(\"+count+\")=\"+ this.percentFormat.format(error/average));", "+\t    \tcomments[index] = \"err=\" + this.percentFormat.format(error/average);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27d5b4302b16893247a2e164f210007", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tprivate void findImports(CompletionOnImportReference importReference)", "signatureAfterChange": "  \tprivate void findImports(CompletionOnImportReference importReference)", "diff": ["-\t\tresolvingImports = true;", "+\t\tthis.resolvingImports = true;", "-\t\tcompletionToken =  importName;", "+\t\tthis.completionToken =  importName;", "-\t\tnameEnvironment.findPackages(importName, this);", "-\t\tnameEnvironment.findTypes(importName, this);", "+\t\tthis.nameEnvironment.findPackages(importName, this);", "+\t\tthis.nameEnvironment.findTypes(importName, this);"]}], "num": 10031}
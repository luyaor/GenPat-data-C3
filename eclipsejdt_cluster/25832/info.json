{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "070c1e037c3ceacabc9990aeb584c426", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c826848127b30c1ff1d6a6227dee826", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void resolveStatements()", "signatureAfterChange": " \tpublic void resolveStatements()", "diff": ["-\t\tif (!CharOperation.equals(scope.enclosingSourceType().sourceName, selector)){", "-\t\t\tscope.problemReporter().missingReturnType(this);", "+\t\tif (!CharOperation.equals(this.scope.enclosingSourceType().sourceName, selector)){", "+\t\t\tthis.scope.problemReporter().missingReturnType(this);", "+\t\tif (this.typeParameters != null) {", "+\t\t\tfor (int i = 0, length = this.typeParameters.length; i < length; i++) {", "+\t\t\t\tthis.typeParameters[i].resolve(this.scope);", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\t\tscope.problemReporter().annotationTypeDeclarationCannotHaveConstructor(this);", "+\t\t\tthis.scope.problemReporter().annotationTypeDeclarationCannotHaveConstructor(this);", "-\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "+\t\t\t\t\t\tthis.scope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\tscope.problemReporter().methodNeedBody(this);\t\t", "+\t\t\tthis.scope.problemReporter().methodNeedBody(this);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b581ac27947d8be21f01b44982c5678d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateOptimizedLogicalXor(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedLogicalXor(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tBranchLabel trueLabel,", "-\t\tBranchLabel falseLabel,", "-\t\tboolean valueRequired) {", "-\t\t\t", "-\t\tConstant condConst;", "-\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) == T_boolean) {", "-\t\t\tif ((condConst = left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// <something equivalent to true> ^ x", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t} else {", "-\t\t\t\t\t// <something equivalent to false> ^ x", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif ((condConst = right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// x ^ <something equivalent to true>", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t} else {", "-\t\t\t\t\t// x ^ <something equivalent to false>", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t\t// default case", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.ixor();", "-\t\t\tif (falseLabel == null) {", "-\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\tcodeStream.ifne(trueLabel);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t} else {", "-\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// reposition the endPC", "-\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t}", "+ */", "+public void generateOptimizedLogicalXor(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {", "+\tConstant condConst;", "+\tif ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {", "+\t\tif ((condConst = this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// <something equivalent to true> ^ x", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\tfalseLabel, // negating", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t} else {", "+\t\t\t\t// <something equivalent to false> ^ x", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tif ((condConst = this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// x ^ <something equivalent to true>", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\tfalseLabel, // negating", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t} else {", "+\t\t\t\t// x ^ <something equivalent to false>", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default case", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tcodeStream.ixor();", "+\t\tif (falseLabel == null) {", "+\t\t\tif (trueLabel != null) {", "+\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\tcodeStream.ifne(trueLabel);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// implicit falling through the TRUE case", "+\t\t\tif (trueLabel == null) {", "+\t\t\t\tcodeStream.ifeq(falseLabel);", "+\t\t\t} else {", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t}", "+\t\t}", "+\t}", "+\t// reposition the endPC", "+\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f101120eb12feb4c23374b7d7855e0e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {", "-", "-\t\tif ((bits & IsReachable) == 0) {", "-\t\t\treturn;", "-\t\t}", "-\t\tint pc = codeStream.position;", "-", "-\t\t// labels management", "-\t\tBranchLabel actionLabel = new BranchLabel(codeStream);", "-\t\tif (action != null) actionLabel.tagBits |= BranchLabel.USED;", "-\t\tactionLabel.place();", "-\t\tbreakLabel.initialize(codeStream);", "-\t\tif (continueLabel != null) {", "-\t\t\tcontinueLabel.initialize(codeStream);", "-\t\t}", "-", "-\t\t// generate action", "-\t\tif (action != null) {", "-\t\t\taction.generateCode(currentScope, codeStream);", "-\t\t}", "-\t\tConstant cst = condition.optimizedBooleanConstant();", "-\t\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;\t\t", "-\t\tif (isConditionOptimizedFalse){", "-\t\t\tcondition.generateCode(currentScope, codeStream, false);", "-\t\t} else {", "-\t\t\t// generate condition", "-\t\t\tif (continueLabel != null) {", "-\t\t\t\tcontinueLabel.place();", "-\t\t\t\tcondition.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tactionLabel,", "-\t\t\t\t\tnull,", "-\t\t\t\t\ttrue);", "-\t\t\t}", "-\t\t}", "-\t\t// May loose some local variable initializations : affecting the local variable attributes", "-\t\tif (mergedInitStateIndex != -1) {", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t}", "-\t\tif (breakLabel.forwardReferenceCount > 0) {", "-\t\t\tbreakLabel.place();", "-\t\t}", "-", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream) {", "+\tif ((this.bits & ASTNode.IsReachable) == 0) {", "+\t\treturn;", "+\t}", "+\tint pc = codeStream.position;", "+", "+\t// labels management", "+\tBranchLabel actionLabel = new BranchLabel(codeStream);", "+\tif (this.action != null) actionLabel.tagBits |= BranchLabel.USED;", "+\tactionLabel.place();", "+\tthis.breakLabel.initialize(codeStream);", "+\tboolean hasContinueLabel = this.continueLabel != null;", "+\tif (hasContinueLabel) {", "+\t\tthis.continueLabel.initialize(codeStream);", "+\t}", "+", "+\t// generate action", "+\tif (this.action != null) {", "+\t\tthis.action.generateCode(currentScope, codeStream);", "+\t}", "+\t// continue label (135602)", "+\tif (hasContinueLabel) {", "+\t\tthis.continueLabel.place();", "+\t}", "+\t// generate condition", "+\tConstant cst = this.condition.optimizedBooleanConstant();", "+\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;\t\t", "+\tif (isConditionOptimizedFalse){", "+\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t} else if (hasContinueLabel) {", "+\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\tcurrentScope,", "+\t\t\tcodeStream,", "+\t\t\tactionLabel,", "+\t\t\tnull,", "+\t\t\ttrue);", "+\t}", "+\t// May loose some local variable initializations : affecting the local variable attributes", "+\tif (this.mergedInitStateIndex != -1) {", "+\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);", "+\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);", "+\t}", "+\tif (this.breakLabel.forwardReferenceCount > 0) {", "+\t\tthis.breakLabel.place();", "+\t}", "+", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}], "num": 25832}
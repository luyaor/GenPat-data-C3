{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "156bb9cbdd7504dadfe6c49d00184581", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c95be3464a2b845f2e83644099a87903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public boolean complainIfUnreachable(Statement statement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean complainIfUnreachable(Statement statement, BlockScope scope, boolean didAlreadyComplain)", "diff": ["-}", "-public boolean complainIfUnreachable(Statement statement, BlockScope scope) {", "-\t// Report an error if necessary", "-", "-\tboolean isDeadEnd;", "-\tif ((isDeadEnd = (this == DeadEnd)) || isFakeReachable) {", "-\t\tstatement.bits &= ~AstNode.IsReachableMASK;", "-", "-\t\tif (isDeadEnd)", "-\t\t\tscope.problemReporter().unreachableCode(statement);", "-\t\treturn isDeadEnd;", "-\t}", "-\treturn false;", "-}", "+\t// Report an error if necessary", "+\tpublic boolean complainIfUnreachable(Statement statement, BlockScope scope, boolean didAlreadyComplain) {", "+\t", "+\t\tboolean isNotReachable;", "+\t\tif ((isNotReachable = (this == DeadEnd)) || isFakeReachable) {", "+\t\t\tstatement.bits &= ~AstNode.IsReachableMASK;", "+\t", "+\t\t\tif (!didAlreadyComplain && isNotReachable) ", "+\t\t\t\tscope.problemReporter().unreachableCode(statement);", "+\t\t\treturn isNotReachable;", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7ae693338a44067aed31848a3289735", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\tboolean didAlreadyComplain = false;", "-\t\t\t\tif ((caseIndex < caseCount)", "-\t\t\t\t\t&& (statement == cases[caseIndex])) { // statements[i] is a case or a default case", "+\t\t\t\tif ((caseIndex < caseCount) && (statement == cases[caseIndex])) { // statement is a case", "-\t\t\t\t} else {", "-\t\t\t\t\tif (statement == defaultCase) {", "-\t\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "-\t\t\t\t\t}", "+\t\t\t\t\tdidAlreadyComplain = false; // reset complaint", "+\t\t\t\t} else if (statement == defaultCase) { // statement is the default case", "+\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "+\t\t\t\t\tdidAlreadyComplain = false; // reset complaint", "-\t\t\t\tif (!caseInits.complainIfUnreachable(statement, scope)) {", "+\t\t\t\tif (!caseInits.complainIfUnreachable(statement, scope, didAlreadyComplain)) {", "+\t\t\t\t} else {", "+\t\t\t\t\tdidAlreadyComplain = true;"]}], "num": 12587}
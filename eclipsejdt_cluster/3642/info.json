{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "beccb4b2fa7439e73c465aa77d3f82ac", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f91cbbb9dd3c66820ae7b6855de8f4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/LocalVirtualMachine.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public boolean isRunning()", "signatureAfterChange": " public boolean isRunning()", "diff": ["-\tif (this.process == null)", "+\tif (this.process == null) {", "-\telse {", "-\t\tboolean hasExited;", "-\t\ttry {", "-\t\t\tthis.process.exitValue();", "-\t\t\thasExited = true;", "-\t\t} catch (IllegalThreadStateException e) {", "-\t\t\thasExited = false;", "-\t\t}", "-\t\treturn !hasExited;", "+\tboolean hasExited;", "+\ttry {", "+\t\tthis.process.exitValue();", "+\t\thasExited = true;", "+\t} catch (IllegalThreadStateException e) {", "+\t\thasExited = false;", "+\t}", "+\treturn !hasExited;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91bd2a6ff49ec801a2c8dd48001f9de4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/VMInputStream.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private boolean isRunning()", "signatureAfterChange": " private boolean isRunning()", "diff": ["-\tif (this.process == null)", "+\tif (this.process == null) {", "-\telse {", "-\t\tboolean hasExited;", "-\t\ttry {", "-\t\t\tthis.process.exitValue();", "-\t\t\thasExited = true;", "-\t\t} catch (IllegalThreadStateException e) {", "-\t\t\thasExited = false;", "-\t\t}", "-\t\treturn !hasExited;", "+\tboolean hasExited;", "+\ttry {", "+\t\tthis.process.exitValue();", "+\t\thasExited = true;", "+\t} catch (IllegalThreadStateException e) {", "+\t\thasExited = false;", "+\t}", "+\treturn !hasExited;"]}], "num": 3642}
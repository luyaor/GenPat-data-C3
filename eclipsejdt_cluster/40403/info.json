{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc51cd17cd828ee4544eb0e851a28ed5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd163a58142a11e49dc9d61b909ee81a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["-}", "-public static Test suite() {", "-\tTestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());", "-\t// Get all classes", "-\tAbstractJavaSearchTests.TEST_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));", "-\tList allClasses = new ArrayList(AbstractJavaSearchTests.TEST_SUITES);", "-\tallClasses.add(JavaSearchBugsTests.class);", "-\tallClasses.add(JavaSearchMultipleProjectsTests.class);", "-\tallClasses.add(SearchTests.class);", "-\tallClasses.add(JavaSearchScopeTests.class);", "-", "-\t// Reset forgotten subsets of tests", "-\tTestCase.TESTS_PREFIX = null;", "-\tTestCase.TESTS_NAMES = null;", "-\tTestCase.TESTS_NUMBERS = null;", "-\tTestCase.TESTS_RANGE = null;", "-", "-\t// Add all tests suite of tests", "-\tfor (int i = 0, size=allClasses.size(); i < size; i++) {", "-\t\tClass testClass = (Class) allClasses.get(i);", "-", "-\t\t// call the suite() method and add the resulting suite to the suite", "-\t\ttry {", "-\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "-\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "-\t\t\tts.addTest(suite);", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\te.getTargetException().printStackTrace();", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-\treturn ts;", "-}", "+", "+\tpublic static Test suite() {", "+\t\tTestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());", "+", "+\t\t// Store test classes with same \"JavaSearch\"project", "+\t\tAbstractJavaSearchTests.JAVA_SEARCH_SUITES = new ArrayList(TEST_CLASSES);", "+", "+\t\t// Get all classes", "+\t\tList allClasses = new ArrayList(TEST_CLASSES);", "+\t\tallClasses.add(JavaSearchBugsTests.class);", "+\t\tallClasses.add(JavaSearchMultipleProjectsTests.class);", "+\t\tallClasses.add(SearchTests.class);", "+\t\tallClasses.add(JavaSearchScopeTests.class);", "+", "+\t\t// Reset forgotten subsets of tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS = null;", "+\t\tTestCase.TESTS_RANGE = null;", "+", "+\t\t// Add all tests suite of tests", "+\t\tfor (int i = 0, size = allClasses.size(); i < size; i++) {", "+\t\t\tClass testClass = (Class) allClasses.get(i);", "+", "+\t\t\t// call the suite() method and add the resulting suite to the suite", "+\t\t\ttry {", "+\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tTest suite = (Test) suiteMethod.invoke(null, new Object[0]);", "+\t\t\t\tts.addTest(suite);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\te.getTargetException().printStackTrace();", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn ts;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3cb692ed598fc18149d8831043ab1aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8380cd8c9284654558841354f620cb67ad95c78c", "commitAfterChange": "971e2fa24df05f7d9d41f2c3609bd94749f176a3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "signatureAfterChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "diff": ["-\t\t\tif (JavaModelManager.CP_ENTRY_IGNORE.equals(variablePath.toString()))", "+\t\t\tif (variablePath == JavaModelManager.CP_ENTRY_IGNORE_PATH)"]}], "num": 40403}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acce57e7d00addeb3f1156a9bf110aac", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298347c5bc0bbbcbb8dc5186afd623ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "335495c4b7ade5813b8838c341ffd66ce851b44c", "commitAfterChange": "c374466b639cefc117e60812e1d9f16701d104ca", "methodNumberBeforeChange": 374, "methodNumberAfterChange": 376, "signatureBeforeChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "signatureAfterChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "diff": ["+\tint sourceStart = reference.sourceStart;", "+\tint sourceEnd = reference.sourceEnd;", "+\tif (reference instanceof SingleNameReference) {", "+\t\tint numberOfParens = (reference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens != 0) {", "+\t\t\tsourceStart = retrieveStartingPositionAfterOpeningParenthesis(sourceStart, sourceEnd, numberOfParens);", "+\t\t\tsourceEnd = retrieveEndingPositionAfterOpeningParenthesis(sourceStart, sourceEnd, numberOfParens);", "+\t\t} else {", "+\t\t\tsourceStart = nodeSourceStart(field, reference);", "+\t\t\tsourceEnd = nodeSourceEnd(field, reference);", "+\t\t}", "+\t} else {", "+\t\tsourceStart = nodeSourceStart(field, reference);", "+\t\tsourceEnd = nodeSourceEnd(field, reference);", "+\t}", "-\t\tnodeSourceStart(field, reference),", "-\t\tnodeSourceEnd(field, reference));", "+\t\tsourceStart,", "+\t\tsourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "702beaed6da340aba89d81fa0276aff7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\tif (currentMethod.declaringClass.isInterface() ", "+\tfinal ReferenceBinding declaringClass = currentMethod.declaringClass;", "+\tif (declaringClass.isInterface() ", "+\tAbstractMethodDeclaration method = currentMethod.sourceMethod();", "+\tint sourceStart = 0;", "+\tint sourceEnd = 0;", "+\tif (method == null) {", "+\t\tif (declaringClass instanceof SourceTypeBinding) {", "+\t\t\tSourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringClass;", "+\t\t\tsourceStart = sourceTypeBinding.sourceStart();", "+\t\t\tsourceEnd = sourceTypeBinding.sourceEnd();", "+\t\t}", "+\t} else if (method.isConstructor()){", "+\t\tsourceStart = method.sourceStart;", "+\t\tsourceEnd = method.sourceEnd;", "+\t} else {", "+\t\tTypeReference returnType = ((MethodDeclaration) method).returnType;", "+\t\tsourceStart = returnType.sourceStart;", "+\t\tsourceEnd = returnType.sourceEnd;", "+\t}", "-\t\tcurrentMethod.sourceStart(),", "-\t\tcurrentMethod.sourceEnd());", "+\t\tsourceStart,", "+\t\tsourceEnd);"]}], "num": 63556}
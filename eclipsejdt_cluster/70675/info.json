{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dfd9231480203d4e9988b3d29b5a7c6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e60764ef2ad268d40bc4d20fc48279a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "810d2a46e73e304780d3a58f117d6c63103b4e72", "commitAfterChange": "43bf242c384a6b4ad5daf26c5b4617ec68564235", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test0011() throws JavaModelException", "signatureAfterChange": " \tpublic void test0011() throws JavaModelException", "diff": ["-\t\tExtraDimension extraDimension = (ExtraDimension) ((ArrayType) type).dimensions().get(2);", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));", "-\t\textraDimension = (ExtraDimension) ((ArrayType) type).dimensions().get(1);", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "-\t\textraDimension = (ExtraDimension) ((ArrayType) type).dimensions().get(0);", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\tDimension dimension = (Dimension) ((ArrayType) type).dimensions().get(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(dimension.annotations()));", "+\t\tdimension = (Dimension) ((ArrayType) type).dimensions().get(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(dimension.annotations()));", "+\t\tdimension = (Dimension) ((ArrayType) type).dimensions().get(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(dimension.annotations()));", "-\t\textraDimension = (ExtraDimension) ((ArrayType) type).dimensions().get(2);", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "-\t\textraDimension = (ExtraDimension) ((ArrayType) type).dimensions().get(1);", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "-\t\textraDimension = (ExtraDimension) ((ArrayType) type).dimensions().get(0);", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));", "+\t\tdimension = (Dimension) ((ArrayType) type).dimensions().get(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(dimension.annotations()));", "+\t\tdimension = (Dimension) ((ArrayType) type).dimensions().get(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(dimension.annotations()));", "+\t\tdimension = (Dimension) ((ArrayType) type).dimensions().get(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(dimension.annotations()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbaa1d30e2f7e510a2a8c5e53e6205d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test0011() throws JavaModelException", "signatureAfterChange": " \tpublic void test0011() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(((ArrayType) type).annotations()));", "+\t\tExtraDimension extraDimension = ((ArrayType) type).getDimensionAt(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(((ArrayType) type).annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));"]}], "num": 70675}
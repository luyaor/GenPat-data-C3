{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ef3f4b49d62e3da47f708f32a3ca6a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88bddf48cb5da585c003a61a3b159ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "signatureAfterChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "diff": ["-\t\tswitch (segmentCount) {", "-\t\t\tcase 0:", "-\t\t\t\treturn null;", "-\t\t\tcase 1:", "-\t\t\t\tif (path.equals(getPath())) { // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75814", "-\t\t\t\t\t// default root", "-\t\t\t\t\treturn getPackageFragmentRoot(this.project);", "-\t\t\t\t}", "-\t\t\tdefault:", "-\t\t\t\t// a path ending with .jar/.zip is still ambiguous and could still resolve to a source/lib folder ", "-\t\t\t\t// thus will try to guess based on existing resource", "-\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(path.lastSegment())) {", "-\t\t\t\t\tIResource resource = this.project.getWorkspace().getRoot().findMember(path); ", "-\t\t\t\t\tif (resource != null && resource.getType() == IResource.FOLDER){", "-\t\t\t\t\t\treturn getPackageFragmentRoot(resource);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn getPackageFragmentRoot0(path);", "-\t\t\t\t} else if (segmentCount == 1) {", "-\t\t\t\t\t// lib being another project", "-\t\t\t\t\treturn getPackageFragmentRoot(this.project.getWorkspace().getRoot().getProject(path.lastSegment()));", "-\t\t\t\t} else {", "-\t\t\t\t\t// lib being a folder", "-\t\t\t\t\treturn getPackageFragmentRoot(this.project.getWorkspace().getRoot().getFolder(path));", "-\t\t\t\t}", "+\t\tif (segmentCount == 0) {", "+\t\t\treturn null;", "+\t\tif (path.getDevice() != null || JavaModel.getExternalTarget(path, true/*check existence*/) != null) {", "+\t\t\t// external path", "+\t\t\treturn getPackageFragmentRoot0(path);", "+\t\t}", "+\t\tIWorkspaceRoot workspaceRoot = this.project.getWorkspace().getRoot();", "+\t\tif (segmentCount == 1) {", "+\t\t\tString projectName = path.segment(0);", "+\t\t\tif (getElementName().equals(projectName)) { // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75814", "+\t\t\t\t// default root", "+\t\t\t\treturn getPackageFragmentRoot(this.project);", "+\t\t\t} else {", "+\t\t\t\t// lib being another project", "+\t\t\t\treturn getPackageFragmentRoot(workspaceRoot.getProject(projectName));", "+\t\t\t}", "+\t\t}", "+\t\tIResource resource = workspaceRoot.findMember(path); ", "+\t\tif (resource == null) {", "+\t\t\t// resource doesn't exist in workspace", "+\t\t\tif (path.getFileExtension() != null) {", "+\t\t\t\t// assume it is a file", "+\t\t\t\tresource = workspaceRoot.getFile(path);", "+\t\t\t} else {", "+\t\t\t\t// assume it is a folder", "+\t\t\t\tresource = workspaceRoot.getFolder(path);", "+\t\t\t}", "+\t\t}", "+\t\treturn getPackageFragmentRoot(resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3419fd14d426afdb4bfabdf2321dc68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "diff": ["-\t\tboolean checkExistency,", "-\t\t\t\t\tif (checkExistency) {", "-\t\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\t\tif (target == null) return;", "-\t", "-\t\t\t\t\t\tif (target instanceof IFolder || target instanceof IProject){", "-\t\t\t\t\t\t\troot = getPackageFragmentRoot((IResource)target);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\troot = getFolderPackageFragmentRoot(entryPath);", "+\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, true/*check existency*/);", "+\t\t\t\t\tif (target == null) return;", "+", "+\t\t\t\t\tif (target instanceof IFolder || target instanceof IProject){", "+\t\t\t\t\t\troot = getPackageFragmentRoot((IResource)target);", "-\t\t\t", "-\t\t\t\tif (referringEntry != null  && !resolvedEntry.isExported()) return;", "-\t\t\t\t", "-\t\t\t\tif (checkExistency) {", "-\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\tif (target == null) return;", "-\t", "-\t\t\t\t\tif (target instanceof IResource){", "-\t\t\t\t\t\t// internal target", "-\t\t\t\t\t\troot = getPackageFragmentRoot((IResource) target, entryPath);", "-\t\t\t\t\t} else if (target instanceof File) {", "-\t\t\t\t\t\t// external target", "-\t\t\t\t\t\tif (JavaModel.isFile(target) && (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(entryPath.lastSegment()))) {", "-\t\t\t\t\t\t\troot = new JarPackageFragmentRoot(entryPath, this);", "-\t\t\t\t\t\t} else if (((File) target).isDirectory()) {", "-\t\t\t\t\t\t\troot = new ExternalPackageFragmentRoot(entryPath, this);", "-\t\t\t\t\t\t}", "+\t\t\t\tif (referringEntry != null  && !resolvedEntry.isExported()) ", "+\t\t\t\t\treturn;", "+\t\t\t\tObject target = JavaModel.getTarget(entryPath, true/*check existency*/);", "+\t\t\t\tif (target == null) ", "+\t\t\t\t\treturn;", "+", "+\t\t\t\tif (target instanceof IResource){", "+\t\t\t\t\t// internal target", "+\t\t\t\t\troot = getPackageFragmentRoot((IResource) target, entryPath);", "+\t\t\t\t} else if (target instanceof File) {", "+\t\t\t\t\t// external target", "+\t\t\t\t\tif (JavaModel.isFile(target)) {", "+\t\t\t\t\t\troot = new JarPackageFragmentRoot(entryPath, this);", "+\t\t\t\t\t} else if (((File) target).isDirectory()) {", "+\t\t\t\t\t\troot = new ExternalPackageFragmentRoot(entryPath, this);", "-\t\t\t\t} else {", "-\t\t\t\t\troot = getPackageFragmentRoot(entryPath);", "-\t\t\t\t\t\t\tcheckExistency, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3441c3dd9f5300a6ed48537f8019528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void initializeIndexLocations()", "signatureAfterChange": " private void initializeIndexLocations()", "diff": ["-\t\tfor (int i = 0; i < projectsAndJars.length; i++)", "-\t\t\tlocations.add(manager.computeIndexLocation(projectsAndJars[i]));", "+\t\tfor (int i = 0; i < projectsAndJars.length; i++) {", "+\t\t\tIPath path = projectsAndJars[i];", "+\t\t\tObject target = JavaModel.getTarget(path, false/*don't check existence*/);", "+\t\t\tif (target instanceof IFolder) // case of an external folder", "+\t\t\t\tpath = ((IFolder) target).getFullPath();", "+\t\t\tlocations.add(manager.computeIndexLocation(path));", "+\t\t}", "-\t\t\tSimpleSet jarsToCheck = new SimpleSet(length);", "+\t\t\tSimpleSet externalLibsToCheck = new SimpleSet(length);", "-\t\t\t\t\tjarsToCheck.add(path);", "+\t\t\t\t\texternalLibsToCheck.add(path);", "-\t\t\tfor (int i = 0; i < projectIndex && jarsToCheck.elementSize > 0; i++) {", "+\t\t\tfor (int i = 0; i < projectIndex && externalLibsToCheck.elementSize > 0; i++) {", "-\t\t\t\t\t\tif (jarsToCheck.includes(path)) {", "-\t\t\t\t\t\t\tlocations.add(manager.computeIndexLocation(entry.getPath()));", "-\t\t\t\t\t\t\tjarsToCheck.remove(path);", "+\t\t\t\t\t\tif (externalLibsToCheck.remove(path) != null) {", "+\t\t\t\t\t\t\tObject target = JavaModel.getTarget(path, false/*don't check existence*/);", "+\t\t\t\t\t\t\tif (target instanceof IFolder) // case of an external folder", "+\t\t\t\t\t\t\t\tpath = ((IFolder) target).getFullPath();", "+\t\t\t\t\t\t\tlocations.add(manager.computeIndexLocation(path));", "-\t\t\tif (jarsToCheck.elementSize > 0) {", "+\t\t\tif (externalLibsToCheck.elementSize > 0) {", "-\t\t\t\tfor (int i = 0, l = allProjects.length; i < l && jarsToCheck.elementSize > 0; i++) {", "+\t\t\t\tfor (int i = 0, l = allProjects.length; i < l && externalLibsToCheck.elementSize > 0; i++) {", "-\t\t\t\t\t\t\t\tif (jarsToCheck.includes(path)) {", "-\t\t\t\t\t\t\t\t\tlocations.add(manager.computeIndexLocation(entry.getPath()));", "-\t\t\t\t\t\t\t\t\tjarsToCheck.remove(path);", "+\t\t\t\t\t\t\t\tif (externalLibsToCheck.remove(path) != null) {", "+\t\t\t\t\t\t\t\t\tObject target = JavaModel.getTarget(path, false/*don't check existence*/);", "+\t\t\t\t\t\t\t\t\tif (target instanceof IFolder) // case of an external folder", "+\t\t\t\t\t\t\t\t\t\tpath = ((IFolder) target).getFullPath();", "+\t\t\t\t\t\t\t\t\tlocations.add(manager.computeIndexLocation(path));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d616536d853884c5ce58c2c525c9aed3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "ade89e4fcc147d76e26736c6fadf9edebfc6386e", "commitAfterChange": "29f9f7b54f341569f134578b4014b331ae83ea82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public static ClasspathLocation[] computeLocations(\r \tIWorkspaceRoot workspaceRoot,\r \tIJavaProject javaProject,\r \tString outputFolderLocation,\r \tArrayList sourceFolders,\r \tSimpleLookupTable prereqOutputFolders) throws JavaModelException", "signatureAfterChange": "\r public static ClasspathLocation[] computeLocations(\r \tIWorkspaceRoot workspaceRoot,\r \tIJavaProject javaProject,\r \tString outputFolderLocation,\r \tArrayList sourceFolders,\r \tSimpleLookupTable binaryResources) throws JavaModelException", "diff": ["-\tSimpleLookupTable prereqOutputFolders) throws JavaModelException {\r", "+\tSimpleLookupTable binaryResources) throws JavaModelException {\r", "-\t\tObject target = JavaModel.getTarget(workspaceRoot, entry.getPath(), true);\r", "+\t\tIPath path = entry.getPath();\r", "+\t\tObject target = JavaModel.getTarget(workspaceRoot, path, true);\r", "-\t\t\t\t\tif (prereqOutputFolders != null)\r", "-\t\t\t\t\t\tprereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "+\t\t\t\t\tif (binaryResources != null) { // normal builder mode\r", "+\t\t\t\t\t\tIResource[] existingResources = (IResource[]) binaryResources.get(prereqProject);\r", "+\t\t\t\t\t\tif (existingResources == null)\r", "+\t\t\t\t\t\t\tbinaryResources.put(prereqProject, new IResource[] {prereqOutputFolder});\r", "+\t\t\t\t\t\telse\r", "+\t\t\t\t\t\t\texistingResources[0] = prereqOutputFolder; // project's output folder is always first\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (resource.getLocation() == null) // sanity check\r", "+\t\t\t\t\t\tcontinue nextEntry;\r", "-\t\t\t\t\t\tString extension = entry.getPath().getFileExtension();\r", "+\t\t\t\t\t\tString extension = path.getFileExtension();\r", "+\t\t\t\t\tif (binaryResources != null) { // normal builder mode\r", "+\t\t\t\t\t\tIProject p = resource.getProject(); // can be the project being built\r", "+\t\t\t\t\t\tIResource[] existingResources = (IResource[]) binaryResources.get(p);\r", "+\t\t\t\t\t\tif (existingResources == null) {\r", "+\t\t\t\t\t\t\texistingResources = new IResource[] {null, resource}; // project's output folder is always first, null if not included\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tint size = existingResources.length;\r", "+\t\t\t\t\t\t\tSystem.arraycopy(existingResources, 0, existingResources = new IResource[size + 1], 0, size);\r", "+\t\t\t\t\t\t\texistingResources[size] = resource;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbinaryResources.put(p, existingResources);\r", "+\t\t\t\t\t}\r", "-\t\t\tString extension = entry.getPath().getFileExtension();\r", "+\t\t\tString extension = path.getFileExtension();\r", "-\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forLibrary(entry.getPath().toString());\r", "+\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forLibrary(path.toString());\r"]}], "num": 13713}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83d08a3156d2b68c9ab3d6087b9607b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38112abf97cf2b48206de17db0b1e02e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "commitAfterChange": "735916eb06179bed43e056d6ccfc575e428a25bb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic int getExtendedLength(ASTNode node)", "signatureAfterChange": " \tpublic int getExtendedLength(ASTNode node)", "diff": ["-\t\tint end = node.getStartPosition() + node.getLength() - 1;", "+\t\t/* TODO (frederic) - Clients can be expected to make use of this", "+\t\t * new facility a lot. The performance of the implementation would", "+\t\t * be significantly improved by reworking this code so that it", "+\t\t * does not create garbage Comment[].", "+\t\t */", "-\t\tif (trailingComments != null) {", "+\t\tint lastPosition; // exclusive", "+\t\tif (trailingComments == null) {", "+\t\t\tlastPosition = node.getStartPosition() + node.getLength();", "+\t\t} else {", "-\t\t\tend = lastComment.getStartPosition() + lastComment.getLength() - 1;", "+\t\t\tlastPosition = lastComment.getStartPosition() + lastComment.getLength();", "-\t\treturn end - getExtendedStartPosition(node) + 1;", "+\t\treturn lastPosition - getExtendedStartPosition(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7119a8b3db50214101a3a50c262c7966", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "commitAfterChange": "735916eb06179bed43e056d6ccfc575e428a25bb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic int getExtendedStartPosition(ASTNode node)", "signatureAfterChange": " \tpublic int getExtendedStartPosition(ASTNode node)", "diff": ["-\t\tint startPosition= node.getStartPosition();", "+\t\t/* TODO (frederic) - Clients can be expected to make use of this", "+\t\t * new facility a lot. The performance of the implementation would", "+\t\t * be significantly improved by reworking this code so that it", "+\t\t * does not create garbage Comment[].", "+\t\t */", "-\t\tif (leadingComments != null) {", "+\t\tint startPosition;", "+\t\tif (leadingComments == null) {", "+\t\t\tstartPosition = node.getStartPosition();", "+\t\t} else {"]}], "num": 40479}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94ae1929e0396cd54f9d5e87d4663d9f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07b577b3ec6eced25e98232888c70fa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "b3921c5eea6f0c6a7e0f7e9f7a3a4e8e611961a3", "commitAfterChange": "502bad8ce7c832154fb3a7a8f85a868d7d077253", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["+", "+\t\t\t// check is problem requestor is active", "-\t\t\tif (problemRequestor != null) {", "+\t\t\tif (problemRequestor != null) ", "-\t\t\t}", "+\t\t\tboolean defaultRequestorIsActive = problemRequestor != null && problemRequestor.isActive();", "-\t\t\tthis.resolveBindings |= problemRequestor != null && problemRequestor.isActive();", "+\t\t\tboolean ownerRequestorIsActive = ownerProblemRequestor != null && ownerProblemRequestor != problemRequestor && ownerProblemRequestor.isActive();", "+\t\t\tthis.requestorIsActive = defaultRequestorIsActive || ownerRequestorIsActive;", "-\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t\tmakeConsistent(workingCopy);", "-\t\t\tif (!wasConsistent || ((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0))", "-\t\t\tnotifyParticipants(workingCopy);", "+\t\t\tif (!wasConsistent || ((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0)) {", "+\t\t\t\tnotifyParticipants(workingCopy);", "-\t\t\t// recreate ast if needed", "-\t\t\tif (this.ast == null && (this.astLevel > ICompilationUnit.NO_AST || this.resolveBindings))", "-\t\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t\t\t// recreate ast if one participant reset it", "+\t\t\t\tif (this.ast == null)", "+\t\t\t\t\tmakeConsistent(workingCopy);", "+\t\t\t}", "-\t\t\t\tif (problemRequestor != null) {", "+\t\t\t\tif (defaultRequestorIsActive) {", "-\t\t\t\tif (ownerProblemRequestor != null && ownerProblemRequestor != problemRequestor) {", "+\t\t\t\tif (ownerRequestorIsActive) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "831e35a369654086930be6b70d18f843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/proc/genclass/GenClassProc.java", "commitBeforeChange": "70c7b91219f1abe7757608bdb335ee87fa26cb28", "commitAfterChange": "4f113d7aa945e602017e7829c71f3e73f6f0d8c6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, \t\t\tRoundEnvironment roundEnv)", "signatureAfterChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, \t\t\tRoundEnvironment roundEnv)", "diff": ["-\t\t\t\t\t\tif (\"clazz\".equals(entry.getKey().getSimpleName().toString())) {", "-\t\t\t\t\t\t\tclazz = (String)entry.getValue().getValue();", "+\t\t\t\t\t\tExecutableElement key = entry.getKey();", "+\t\t\t\t\t\tAnnotationValue value = entry.getValue();", "+\t\t\t\t\t\tString keyName = key.getSimpleName().toString();", "+\t\t\t\t\t\tif (\"clazz\".equals(keyName)) {", "+\t\t\t\t\t\t\tclazz = (String)(value.getValue());", "-\t\t\t\t\t\tif (\"method\".equals(entry.getKey().getSimpleName().toString())) {", "-\t\t\t\t\t\t\tmethod = (String)entry.getValue().getValue();", "+\t\t\t\t\t\tif (\"method\".equals(keyName)) {", "+\t\t\t\t\t\t\tmethod = (String)(value.getValue());"]}], "num": 38747}
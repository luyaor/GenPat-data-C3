{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "656e4cbea23a3073b35d55b5a852214a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e14e906abd60cce925724959121e025", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 837, "methodNumberAfterChange": 837, "signatureBeforeChange": " public void test0817()", "signatureAfterChange": " public void test0817()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\"\tprivate T t;\\n\" +", "-\t\t\t\"\t          ^\\n\" +", "-\t\t\t\"The field X<T>.t is never read locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type X<?>.Inner is already an instance of type X<?>.Inner\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 14)\\n\" +", "-\t\t\t\"\tvoid foo(List l) {\\n\" +", "-\t\t\t\"\t         ^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 15)\\n\" +", "-\t\t\t\"\tif (l instanceof List<?>) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type List is already an instance of type List<?>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 16)\\n\" +", "-\t\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use instead its raw form List since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in X.java (at line 18)\\n\" +", "-\t\t\t\"\tvoid foo(List[] ls) {\\n\" +", "-\t\t\t\"\t         ^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. WARNING in X.java (at line 19)\\n\" +", "-\t\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"9. ERROR in X.java (at line 20)\\n\" +", "-\t\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tprivate T t;\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"The field X<T>.t is never read locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner is already an instance of type X<?>.Inner\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tvoid foo(List l) {\\n\" + ", "+\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<?>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use the form List<?> instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tvoid foo(List[] ls) {\\n\" + ", "+\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use the form List<?>[] instead since further generic type information will be erased at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec76622860a6ad6f66bb907fa8e3faf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "88090982bc7841972aaf7a02c388b452bc9c09ac", "commitAfterChange": "448130a4fef9b2a813962f7bf740288ca0953d30", "methodNumberBeforeChange": 823, "methodNumberAfterChange": 823, "signatureBeforeChange": " public void test817()", "signatureAfterChange": " public void test817()", "diff": ["-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"import java.util.List;\\n\" + ", "-\t\t\t\"\\n\" + ", "-\t\t\t\"public class X<T> {\\n\" + ", "-\t\t\t\"    private T t;\\n\" + ", "-\t\t\t\"    private X<?>.Inner[] inner;\\n\" + ", "-\t\t\t\"    private X<?>.Inner[] inners;\\n\" + ", "-\t\t\t\"    public X(T t) {\\n\" + ", "-\t\t\t\"        this.t = t;\\n\" + ", "-\t\t\t\"        if (this.inner instanceof X<?>.Inner) {}\\n\" + ", "-\t\t\t\"        if (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"    private class Inner {\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"    void foo(List l) {\\n\" + ", "-\t\t\t\"    \tif (l instanceof List<?>) {}\\n\" + ", "-\t\t\t\"    \tif (l instanceof List<? extends String>) {}\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"    void foo(List[] ls) {\\n\" + ", "-\t\t\t\"    \tif (ls instanceof List<?>[]) {}\\n\" + ", "-\t\t\t\"    \tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"\tprivate T t;\\n\" + ", "-\t\t\"\t          ^\\n\" + ", "-\t\t\"The field X<T>.t is never read locally\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Incompatible conditional operand types X<?>.Inner[] and X<?>.Inner\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\"\tif (l instanceof List<?>) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The expression of type List is already an instance of type List<?>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use instead its raw form List since generic type information will be erased at runtime\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.List;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"public class X<T> {\\n\" + ", "+\t\t\t\t\"    private T t;\\n\" + ", "+\t\t\t\t\"    private X<?>.Inner inner;\\n\" + ", "+\t\t\t\t\"    private X<?>.Inner[] inners;\\n\" + ", "+\t\t\t\t\"    public X(T t) {\\n\" + ", "+\t\t\t\t\"        this.t = t;\\n\" + ", "+\t\t\t\t\"        if (this.inner instanceof X<?>.Inner) {}\\n\" + ", "+\t\t\t\t\"        if (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    private class Inner {\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    void foo(List l) {\\n\" + ", "+\t\t\t\t\"    \tif (l instanceof List<?>) {}\\n\" + ", "+\t\t\t\t\"    \tif (l instanceof List<? extends String>) {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    void foo(List[] ls) {\\n\" + ", "+\t\t\t\t\"    \tif (ls instanceof List<?>[]) {}\\n\" + ", "+\t\t\t\t\"    \tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tprivate T t;\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"The field X<T>.t is never read locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner is already an instance of type X<?>.Inner\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<?>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use instead its raw form List since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 46810}
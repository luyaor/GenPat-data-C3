{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdf01143eb400efac38aa6a8ac86fd96", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce72cc3f2cd4347c8292748b3a5ac0d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString)", "signatureAfterChange": " \tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final CategorizedProblem[] expected, final char[] displayString)", "diff": ["-\tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString) {", "+\tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final CategorizedProblem[] expected, final char[] displayString) {", "-\t\t\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\t\t\tCategorizedProblem[] problems = result.getProblems();", "-\t\t\t\tassertTrue(\"Problem mismatch\" + requestor.collectedProblems.get(i), this.equals(expected[i], (IProblem)requestor.collectedProblems.get(i)));", "+\t\t\t\tassertTrue(\"Problem mismatch\" + requestor.collectedProblems.get(i), this.equals(expected[i], (CategorizedProblem)requestor.collectedProblems.get(i)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19c39d88fe2eb520bc8d45b2f2162cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem expected, final char[] displayString)", "signatureAfterChange": " protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString)", "diff": ["-protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem expected, final char[] displayString) {", "+protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString) {", "-\t\tboolean gotProblem = false;", "+\t\tArrayList collectedProblems = new ArrayList();", "-\t\t\t\t\tif (EvaluationTest.this.equals(expected, problems[i])) {", "-\t\t\t\t\t\tgotProblem = true;", "-\t\t\t\t\t}", "+\t\t\t\t\t\tcollectedProblems.add(problems[i]);", "-\tassertTrue(\"Expected warning\", requestor.gotProblem);", "+\tif (expected.length == requestor.collectedProblems.size()) {", "+\t\tfor (int i = 0; i < expected.length; i++) {", "+\t\t\tassertTrue(\"Problem mismatch\"+ requestor.collectedProblems.get(i), this.equals(expected[i], (IProblem)requestor.collectedProblems.get(i)));", "+\t\t}", "+\t} else {", "+\t\tassertTrue(\"Wrong problem count\", false);", "+\t}"]}], "num": 3957}
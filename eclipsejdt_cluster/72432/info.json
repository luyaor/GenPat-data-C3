{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0806fa1b4ffb9c0373e4382032e0cd54", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "475e75c10d8984401c9e92df687f72c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "daafb287dc48fb6dcee0d71671e3685e81e9b8c7", "commitAfterChange": "38626b9db6f4c23d6e28ba50c8dfcdc942780467", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "diff": ["-\t\tboolean generateMarkerOnError)", "+\t\tboolean generateMarkerOnError,", "+\t\tboolean returnResolutionInProgress)", "-\t\t\t\tif (infoPath != null) return infoPath;", "+\t\t\t\tif (infoPath != null && (returnResolutionInProgress || infoPath != RESOLUTION_IN_PROGRESS)) {", "+\t\t\t\t\treturn infoPath;", "+\t\t\t\t}", "-\t\tIClasspathEntry[] resolvedPath = getResolvedClasspath(", "-\t\t\tgetRawClasspath(generateMarkerOnError, !generateMarkerOnError), ", "-\t\t\tgenerateMarkerOnError ? getOutputLocation() : null, ", "-\t\t\tignoreUnresolvedEntry, ", "-\t\t\tgenerateMarkerOnError,", "-\t\t\treverseMap);", "+\t\tIClasspathEntry[] resolvedPath = null;", "+\t\tboolean nullOldResolvedCP = perProjectInfo != null && perProjectInfo.resolvedClasspath == null;", "+\t\ttry {", "+\t\t\t// protect against misbehaving clients (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=61040)", "+\t\t\tif (nullOldResolvedCP) perProjectInfo.resolvedClasspath = RESOLUTION_IN_PROGRESS;", "+\t\t\tresolvedPath = getResolvedClasspath(", "+\t\t\t\tgetRawClasspath(generateMarkerOnError, !generateMarkerOnError), ", "+\t\t\t\tgenerateMarkerOnError ? getOutputLocation() : null, ", "+\t\t\t\tignoreUnresolvedEntry, ", "+\t\t\t\tgenerateMarkerOnError,", "+\t\t\t\treverseMap);", "+\t\t} finally {", "+\t\t\tif (nullOldResolvedCP) perProjectInfo.resolvedClasspath = null;", "+\t\t}", "-\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9829f9d924f782d0e19b36cd89109f17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tClasspathEntry referringEntry, \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tJavaProject initialProject, ", "+\t\tClasspathEntry referringEntry,", "-\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null)", "+\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null /*no reverse map*/)", "-\t\tboolean isInitialProject = this.equals(initialProject);", "+\t\tboolean isInitialProject = referringEntry == null;", "-\t\t\t\t", "-\t\t\t\taccumulatedEntries.add(entry);", "+\t\t\t\t// combine restrictions along the project chain", "+\t\t\t\tClasspathEntry combinedEntry = entry.combineWith(referringEntry);", "+\t\t\t\taccumulatedEntries.add(combinedEntry);", "-\t\t\t\t\t\tif (JavaProject.hasJavaNature(projRsc)) {\t\t\t\t", "+\t\t\t\t\t\tif (JavaProject.hasJavaNature(projRsc)) {", "-\t\t\t\t\t\t\t\tinitialProject, ", "+\t\t\t\t\t\t\t\tcombinedEntry, "]}], "num": 72432}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf39509f7eeb9e96981ce307fd032ff6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542c3d47144fb2d1ede2a03fa3a448ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "8692d699dc3199a7b827e2c0e2ae0a1614f2d496", "commitAfterChange": "5eb49c06d2ffcd50e3c5be64fa31c65007130b34", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "signatureAfterChange": " \tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "diff": ["-\t\tCompilationUnit unit = cu.reconcile(AST.JLS3, false, null, null);", "+\t\tCompilationUnit unit;", "+\t\tif (cu.isWorkingCopy()) ", "+\t\t\tunit = cu.reconcile(AST.JLS3, false, null, null);", "+\t\telse {", "+\t\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\t\tparser.setSource(cu);", "+\t\t\tparser.setResolveBindings(true);", "+\t\t\tunit = (CompilationUnit) parser.createAST(null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad635ae99a3d8cd425312de60bcac855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "471f53ef0bd83fc3e916031568fa5c5d2d4e985d", "commitAfterChange": "7575387e5ef8dc6a203a4bfcf32e27bf32af2177", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": " public void invalidType(ASTNode location, TypeBinding type)", "signatureAfterChange": " public void invalidType(ASTNode location, TypeBinding type)", "diff": ["+\tif (type.isParameterizedType()) {", "+\t\tList missingTypes = type.collectMissingTypes(null);", "+\t\tif (missingTypes != null) {", "+\t\t\tfor (Iterator iterator = missingTypes.iterator(); iterator.hasNext(); ) {", "+\t\t\t\tinvalidType(location, (TypeBinding) iterator.next());", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b705d7ad98bd5638dac8205801599510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "b4a82654048b0e1a92515a3233eb1c8bdd4b0ce9", "commitAfterChange": "5f62b57c23f20dcf7179ebcba2a671ee289e6e10", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testParseCompilationUnit2() throws CoreException", "signatureAfterChange": " \tpublic void testParseCompilationUnit2() throws CoreException", "diff": ["-\t\t\tCompilationUnit cu = AST.parseCompilationUnit(", "-\t\t\t\t(\"public class Z extends Y {\\n\" +", "-\t\t\t\t\"}\").toCharArray(),", "-\t\t\t\t \"Z.java\",", "-\t\t\t\tgetJavaProject(\"P\"),", "-\t\t\t\towner,", "-\t\t\t\tnull);", "+\t\t\tchar[] source = (", "+\t\t\t\t\"public class Z extends Y {\\n\" +", "+\t\t\t\t\"}\").toCharArray();", "+\t\t\tASTParser parser = ASTParser.newParser(AST.LEVEL_2_0);", "+\t\t\tparser.setSource(source);", "+\t\t\tparser.setUnitName(\"Z.java\");", "+\t\t\tparser.setProject(getJavaProject(\"P\"));", "+\t\t\tparser.setWorkingCopyOwner(owner);", "+\t\t\tCompilationUnit cu = (CompilationUnit) parser.createAST(null);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8c9293338e691ed560e61fe5019e0e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e9369369dba0e10810d40bdf943f83653668255c", "commitAfterChange": "343d4279aa701152313517156fc77bbf7ec9f350", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["+        \t} else if (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "+\t\t\t\tString libName = propertyName.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "+\t\t\t\tUserLibraryManager manager = JavaModelManager.getUserLibraryManager();", "+        \t\tmanager.updateUserLibrary(libName, (String)event.getNewValue());"]}], "num": 37055}
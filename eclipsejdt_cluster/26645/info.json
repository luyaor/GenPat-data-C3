{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f36dd0d1fe125e157c00b1dfe42256dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b341e358379019ff4f536625408d25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "6a618f5105b380b0a9a5dc6bfffb855693be7fab", "commitAfterChange": "93613529f4763965d02155d2aaa1cabf71be7897", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void consumeLocalVar(char[] varName, int occurrenceCount)", "signatureAfterChange": "  \tpublic void consumeLocalVar(char[] varName, int occurrenceCount, int argumentPosition)", "diff": ["-\tpublic void consumeLocalVar(char[] varName, int occurrenceCount) {", "+\tpublic void consumeLocalVar(char[] varName, int occurrenceCount, int argumentPosition) {", "-\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "-\t\t\t\t\tif (CharOperation.equals(parameterNames[i], varName)) {", "-\t\t\t\t\t\t// we don't have a compiler binding for this argument, but we can craft one:", "-\t\t\t\t\t\tthis.compilerBinding = new SyntheticLocalVariableBinding(varName, this.methodBinding.parameters[i], this.methodBinding);", "-\t\t\t\t\t\tthis.methodBinding = null;", "-\t\t\t\t\t\treturn;", "+\t\t\t\tint paramPosition = -1;", "+\t\t\t\tif (parameterNames.length == 0) {", "+\t\t\t\t\tparamPosition = argumentPosition;", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "+\t\t\t\t\t\tif (CharOperation.equals(parameterNames[i], varName)) {", "+\t\t\t\t\t\t\tparamPosition = i;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\tif (paramPosition != -1) {", "+\t\t\t\t\t// we don't have a compiler binding for this argument, but we can craft one:", "+\t\t\t\t\tthis.compilerBinding = new SyntheticLocalVariableBinding(varName, this.methodBinding.parameters[paramPosition], this.methodBinding, paramPosition);", "+\t\t\t\t\tthis.methodBinding = null;", "+\t\t\t\t\treturn;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "114d624041dbb7e1544f84f94f8ec5d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "f1e3af711c9d8fd5b008833312cafbe371e0cfeb", "commitAfterChange": "fd1449d055a6537ff2cc9fdda22529f36f4ae8e5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods)", "diff": ["+\tint iClinit = -1;", "-\t\t\tif ((method.getModifiers() & AccSynthetic) != 0 ||", "-\t\t\t\t((methodName = method.getSelector()).length == 8 && methodName[0] == '<')) {", "-\t\t\t\t\tif (toSkip == null)", "-\t\t\t\t\t\ttoSkip = new int[iMethods.length];", "-\t\t\t\t\ttoSkip[i] = -1;", "-\t\t\t\t\ttotal--;", "+\t\t\tif ((method.getModifiers() & AccSynthetic) != 0) {", "+\t\t\t\tif (toSkip == null) toSkip = new int[iMethods.length];", "+\t\t\t\ttoSkip[i] = -1;", "+\t\t\t\ttotal--;", "+\t\t\t} else if ((methodName = method.getSelector()).length == 8 && methodName[0] == '<') {", "+\t\t\t\tiClinit = i;", "+\t\t\t\ttotal--;", "-\tint next = 0;", "-\tif (toSkip == null) {", "-\t\tfor (int i = 0, length = iMethods.length; i < length; i++)", "-\t\t\tthis.methods[next++] = createMethod(iMethods[i]);", "+\tint index = 0;", "+\tif (iClinit < 0 && toSkip == null) {", "+\t\tfor (int i = 0, length = iMethods.length; i < length; i++) {", "+\t\t\tthis.methods[index++] = createMethod(iMethods[i]);", "+\t\t}", "-\t\tfor (int i = 0, length = iMethods.length; i < length; i++)", "-\t\t\tif (toSkip[i] == 0)", "-\t\t\t\tthis.methods[next++] = createMethod(iMethods[i]);", "+\t\tfor (int i = 0, length = iMethods.length; i < length; i++) {", "+\t\t\tif (iClinit != i && toSkip[i] == 0)", "+\t\t\t\tthis.methods[index++] = createMethod(iMethods[i]);", "+\t\t}"]}], "num": 26645}
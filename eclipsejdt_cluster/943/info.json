{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8d17fa26e71967f51c68b8112b7b20b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e76590ed108e7c02291d77887a8fdeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": " protected void pushIdentifier()", "signatureAfterChange": " protected void pushIdentifier()", "diff": ["-\t\tidentifierStack[++identifierPtr] = scanner.getCurrentIdentifierSource();", "-\t\tidentifierPositionStack[identifierPtr] = ", "-\t\t\t(((long) scanner.startPosition) << 32) + (scanner.currentPosition - 1); ", "+\t\tthis.identifierStack[++this.identifierPtr] = this.scanner.getCurrentIdentifierSource();", "+\t\tthis.identifierPositionStack[this.identifierPtr] = ", "+\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1); ", "-\t\t/*---stack reallaocation (identifierPtr is correct)---*/", "-\t\tint oldStackLength = identifierStack.length;", "-\t\tchar[][] oldStack = identifierStack;", "-\t\tidentifierStack = new char[oldStackLength + 20][];", "-\t\tSystem.arraycopy(oldStack, 0, identifierStack, 0, oldStackLength);", "-\t\tidentifierStack[identifierPtr] = scanner.getCurrentTokenSource();", "+\t\t/*---stack reallaocation (this.identifierPtr is correct)---*/", "+\t\tint oldStackLength = this.identifierStack.length;", "+\t\tchar[][] oldStack = this.identifierStack;", "+\t\tthis.identifierStack = new char[oldStackLength + 20][];", "+\t\tSystem.arraycopy(oldStack, 0, this.identifierStack, 0, oldStackLength);", "+\t\tthis.identifierStack[this.identifierPtr] = this.scanner.getCurrentTokenSource();", "-\t\tlong[] oldPos = identifierPositionStack;", "-\t\tidentifierPositionStack = new long[oldStackLength + 20];", "-\t\tSystem.arraycopy(oldPos, 0, identifierPositionStack, 0, oldStackLength);", "-\t\tidentifierPositionStack[identifierPtr] = ", "-\t\t\t(((long) scanner.startPosition) << 32) + (scanner.currentPosition - 1); ", "+\t\tlong[] oldPos = this.identifierPositionStack;", "+\t\tthis.identifierPositionStack = new long[oldStackLength + 20];", "+\t\tSystem.arraycopy(oldPos, 0, this.identifierPositionStack, 0, oldStackLength);", "+\t\tthis.identifierPositionStack[this.identifierPtr] = ", "+\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1); ", "-\t\tidentifierLengthStack[++identifierLengthPtr] = 1;", "+\t\tthis.identifierLengthStack[++this.identifierLengthPtr] = 1;", "-\t\t/*---stack reallocation (identifierLengthPtr is correct)---*/", "-\t\tint oldStackLength = identifierLengthStack.length;", "-\t\tint oldStack[] = identifierLengthStack;", "-\t\tidentifierLengthStack = new int[oldStackLength + 10];", "-\t\tSystem.arraycopy(oldStack, 0, identifierLengthStack, 0, oldStackLength);", "-\t\tidentifierLengthStack[identifierLengthPtr] = 1;", "+\t\t/*---stack reallocation (this.identifierLengthPtr is correct)---*/", "+\t\tint oldStackLength = this.identifierLengthStack.length;", "+\t\tint oldStack[] = this.identifierLengthStack;", "+\t\tthis.identifierLengthStack = new int[oldStackLength + 10];", "+\t\tSystem.arraycopy(oldStack, 0, this.identifierLengthStack, 0, oldStackLength);", "+\t\tthis.identifierLengthStack[this.identifierLengthPtr] = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f843e616dd61ac6e3776f13133160161", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\tint length = tokens.length;", "-\tif ((bits & FIELD) != 0) {", "-\t\tif (!((FieldBinding) binding).isStatic()) { //must check for the static status....", "-\t\t\tif (indexOfFirstFieldBinding == 1) {", "+\tint length = this.tokens.length;", "+\tif ((this.bits & FIELD) != 0) {", "+\t\tif (!((FieldBinding) this.binding).isStatic()) { //must check for the static status....", "+\t\t\tif (this.indexOfFirstFieldBinding == 1) {", "-\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) binding);", "+\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) this.binding);", "-\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) binding);", "+\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) this.binding);", "-\t\tif (isFieldUseDeprecated((FieldBinding) binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length)) {", "-\t\t\tscope.problemReporter().deprecatedField((FieldBinding) binding, this);", "+\t\tif (isFieldUseDeprecated((FieldBinding) this.binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && this.indexOfFirstFieldBinding == length)) {", "+\t\t\tscope.problemReporter().deprecatedField((FieldBinding) this.binding, this);", "-\tTypeBinding type = ((VariableBinding) binding).type;", "-\tint index = indexOfFirstFieldBinding;", "+\tTypeBinding type = ((VariableBinding) this.binding).type;", "+\tint index = this.indexOfFirstFieldBinding;", "-\t\tconstant = FieldReference.getConstantFor((FieldBinding) binding, this, false, scope);", "+\t\tthis.constant = FieldReference.getConstantFor((FieldBinding) this.binding, this, false, scope);", "-\tconstant =", "-\t\t((bits & FIELD) != 0)", "-\t\t\t? FieldReference.getConstantFor((FieldBinding) binding, this, false, scope)", "-\t\t\t: ((VariableBinding) binding).constant;", "+\tthis.constant =", "+\t\t((this.bits & FIELD) != 0)", "+\t\t\t? FieldReference.getConstantFor((FieldBinding) this.binding, this, false, scope)", "+\t\t\t: ((VariableBinding) this.binding).constant;", "-\t\tchar[] token = tokens[index];", "+\t\tchar[] token = this.tokens[index];", "-\t\tint place = index - indexOfFirstFieldBinding;", "-\t\totherBindings[place] = field;", "+\t\tint place = index - this.indexOfFirstFieldBinding;", "+\t\tthis.otherBindings[place] = field;", "-\t\t\tif (delegateThis == null) {", "+\t\t\tif (this.delegateThis == null) {", "-\t\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "+\t\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "-\t\t\t\t\tconstant = NotAConstant; //don't fill other constants slots...", "+\t\t\t\t\tthis.constant = NotAConstant; //don't fill other constants slots...", "-\t\t\tfield = localScope.getFieldForCodeSnippet(delegateThis.type, token, this);", "-\t\t\totherBindings[place] = field;", "+\t\t\tfield = localScope.getFieldForCodeSnippet(this.delegateThis.type, token, this);", "+\t\t\tthis.otherBindings[place] = field;", "-\t\t\tif (constant != NotAConstant){", "-\t\t\t\tconstant = someConstant;", "+\t\t\tif (this.constant != NotAConstant){", "+\t\t\t\tthis.constant = someConstant;", "-\t\t\tconstant = NotAConstant; //don't fill other constants slots...", "+\t\t\tthis.constant = NotAConstant; //don't fill other constants slots...", "-\treturn (otherBindings[otherBindingsLength - 1]).type;", "+\treturn (this.otherBindings[otherBindingsLength - 1]).type;"]}], "num": 943}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea5f541ef754ee8d1600695c37048063", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e2f50d413607a96b9294a7421daa768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryTypeConverter.java", "commitBeforeChange": "e61f569dbc4aa27cac18a55212d084c74e736bfb", "commitAfterChange": "677a462098c653b539c7de50745a6a31854b50b0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "signatureAfterChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "diff": ["+\t\t// Ignore synthetic arguments (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=212224)", "+\t\tint startIndex = (method.isConstructor() && type.isMember() && !Flags.isStatic(type.getFlags())) ? 1 : 0;", "+\t\targumentCount -= startIndex;", "-\t\t\tString argumentTypeName = argumentTypeNames[i];", "+\t\t\tString argumentTypeName = argumentTypeNames[startIndex+i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d615ad81c882f8288736fe329f151c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 402, "methodNumberAfterChange": 402, "signatureBeforeChange": " public void unresolvableReference(NameReference nameRef, Binding binding)", "signatureAfterChange": " public void unresolvableReference(NameReference nameRef, Binding binding)", "diff": ["+\tint problemId = (nameRef.bits & Binding.VARIABLE) != 0 && (nameRef.bits & Binding.TYPE) == 0", "+\t\t? IProblem.UnresolvedVariable", "+\t\t: IProblem.UndefinedName;", "-\t\tIProblem.UndefinedName,", "+\t\tproblemId,"]}], "num": 33290}
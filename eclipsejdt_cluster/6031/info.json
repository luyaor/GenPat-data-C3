{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ee799c0b1de35ecc7c8f67deafebeac", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1def8e67daba0ab468f34719f8cc28d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "a262b5af4032b43a755aa27634102b39ece22487", "commitAfterChange": "f23b5454f1ff57141b5d3b54b81fb753a1898b7e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "\t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tJavaProject initialProject, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tHashtable visitedProjects, \r \t\tObjectVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tJavaProject initialProject, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tHashtable visitedProjects, \r \t\tObjectVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\tIClasspathEntry[] immediateClasspath = getResolvedClasspath(ignoreUnresolvedVariable, false);\r", "+\t\tIClasspathEntry[] immediateClasspath = getResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);\r", "-\t\t\t\t\t\tIProject projRsc = (IProject) getWorkspace().getRoot().findMember(entry.getPath());\r", "-\t\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t\r", "-\t\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);\r", "-\t\t\t\t\t\t\tproject.computeExpandedClasspath(\r", "-\t\t\t\t\t\t\t\tinitialProject, \r", "-\t\t\t\t\t\t\t\tignoreUnresolvedVariable, \r", "-\t\t\t\t\t\t\t\tgenerateMarkerOnError,\r", "-\t\t\t\t\t\t\t\tvisitedProjects, \r", "-\t\t\t\t\t\t\t\taccumulatedEntries);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tIProject projRsc = (IProject) getWorkspace().getRoot().findMember(entry.getPath());\r", "+\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t\r", "+\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);\r", "+\t\t\t\t\t\tproject.computeExpandedClasspath(\r", "+\t\t\t\t\t\t\tinitialProject, \r", "+\t\t\t\t\t\t\tignoreUnresolvedVariable, \r", "+\t\t\t\t\t\t\tgenerateMarkerOnError,\r", "+\t\t\t\t\t\t\tvisitedProjects, \r", "+\t\t\t\t\t\t\taccumulatedEntries);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae59eb24e0e7be2bdecaa6bd364dac0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "38b7a9cf48e2b7b43c2a92fc5bd92474a255d139", "commitAfterChange": "119fb61720952839453ade6e48fab76b7b943cab", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r \t\r \tprivate void computeBuilderRoots(boolean exportedOnly, IResourceDelta delta, Vector visitedProjects, Vector accumulatedRoots)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tboolean restrainToExportedEntries, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tVector visitedProjects, \r \t\tVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\r", "-\tprivate void computeBuilderRoots(boolean exportedOnly, IResourceDelta delta, Vector visitedProjects, Vector accumulatedRoots)\r", "-\t\t// avoid project cycles\r", "-\t\tif (visitedProjects.contains(this)){\r", "-\t\t\treturn;\r", "-\t\t}\r", "-\t\tvisitedProjects.add(this);\r", "-\r", "-\t\tclasspath = getResolvedClasspath(true);\r", "-\t\t\tif (!exportedOnly || entry.isExported()){\r", "-\t\t\t\tcomputeBuilderRoots(entry, delta, visitedProjects, accumulatedRoots);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+\t\t\t\r", "+\tprivate void computeExpandedClasspath(\r", "+\t\tboolean restrainToExportedEntries, \r", "+\t\tboolean ignoreUnresolvedVariable,\r", "+\t\tboolean generateMarkerOnError,\r", "+\t\tVector visitedProjects, \r", "+\t\tVector accumulatedEntries) throws JavaModelException {\r", "+\t\t\r", "+\t\tif (visitedProjects.contains(this)) return; // break cycles if any\r", "+\t\tvisitedProjects.add(this);\r", "+\t\t\r", "+\t\tIClasspathEntry[] immediateClasspath = getResolvedClasspath(ignoreUnresolvedVariable, false);\r", "+\t\tfor (int i = 0, length = immediateClasspath.length; i < length; i++){\r", "+\t\t\tIClasspathEntry entry = immediateClasspath[i];\r", "+\r", "+\t\t\tif (!restrainToExportedEntries || entry.isExported()){\r", "+\t\t\t\taccumulatedEntries.add(entry);\r", "+\t\t\t\tif (entry.getEntryKind() == ClasspathEntry.CPE_PROJECT) {\r", "+\t\t\t\t\t\tIProject projRsc = (IProject) getWorkspace().getRoot().findMember(entry.getPath());\r", "+\t\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t\r", "+\t\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);\r", "+\t\t\t\t\t\t\t// recurse in project to get all its indirect exports (only consider exported entries from there on)\r", "+\t\t\t\t\t\t\tproject.computeExpandedClasspath(\r", "+\t\t\t\t\t\t\t\ttrue, \r", "+\t\t\t\t\t\t\t\tignoreUnresolvedVariable, \r", "+\t\t\t\t\t\t\t\tgenerateMarkerOnError,\r", "+\t\t\t\t\t\t\t\tvisitedProjects, \r", "+\t\t\t\t\t\t\t\taccumulatedEntries);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\t\t\t\r", "+\t\t}\r", "+\t}\r"]}], "num": 6031}
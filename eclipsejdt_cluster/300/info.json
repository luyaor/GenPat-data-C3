{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25908294aa7235485a20eb649f6587e7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27ec0ab4527252dfd5add3614aed8f43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "3916c67b0128c74e08a07f109332d68e11705964", "commitAfterChange": "db24d1d0025b319685ad3bf80253e7a07fb708a2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\tpublic void run(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \t\tpublic boolean accept(File project)", "diff": ["+\tclass FullSourceProjectsFilter implements FileFilter {", "+\t\tpublic boolean accept(File project) {", "+\t\t\tif (project.isDirectory()) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(project.getName(), \".\");", "+\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\tif (token.equals(\"org\") && tokenizer.hasMoreTokens()) {", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tif (token.equals(\"junit\") && !tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (token.equals(\"apache\")) {", "+\t\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\t\tif (token.equals(\"ant\") || token.equals(\"lucene\")) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (token.equals(\"eclipse\") && tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t}", "-\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\tproject.open(monitor);", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c7e7748b2e66c7f20d695dc91127193", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd, boolean prefixMatch)", "diff": ["+ */", "+public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd, boolean prefixMatch) {", "-\t\tif (iPattern == patternEnd) {", "-\t\t\t// We have exhausted pattern, so it's a match", "-\t\t\treturn true;", "+\t\tif (iPattern == patternEnd) { // we have exhausted pattern...", "+\t\t\t// it's a match if not exact mode or name is also exhausted", "+\t\t\tif (prefixMatch || iName == nameEnd) return true;", "+", "+\t\t\t// it's not a match if last pattern character is a lowercase", "+\t\t\tif ((patternChar = pattern[iPattern-1]) < ScannerHelper.MAX_OBVIOUS) {", "+\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] & (ScannerHelper.C_UPPER_LETTER | ScannerHelper.C_DIGIT)) == 0) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (Character.isJavaIdentifierPart(patternChar) && !Character.isUpperCase(patternChar) && !Character.isDigit(patternChar)) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+", "+\t\t\t// it's a match only if name has no more uppercase characters (exact mode)", "+\t\t\twhile (true) {", "+\t\t\t\tif (iName == nameEnd) {", "+\t\t\t\t\t// we have exhausted name, so it's a match", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tnameChar = name[iName];", "+\t\t\t\tif (nameChar < ScannerHelper.MAX_OBVIOUS) {", "+\t\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & ScannerHelper.C_UPPER_LETTER) != 0) {", "+\t\t\t\t\t\t// nameChar is uppercase, so it's not a match", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse if (!Character.isJavaIdentifierPart(nameChar) || Character.isUpperCase(nameChar)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tiName++;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66264aacafc8b5947e9ebde7266b4258", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "2acf337b771d06ad716c2ae54bdb8443b5b5d1d6", "commitAfterChange": "28f793f875e5d5b5aa1f2b69f1f41ea8e36715ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean visit(IResource resource)", "signatureAfterChange": " \t\t\t\t\t\t\t\tpublic boolean visit(IResource resource)", "diff": ["+\t\t\t\t\t\t\tsourceFolder.accept(new IResourceVisitor() {", "+\t\t\t\t\t\t\t\tpublic boolean visit(IResource resource) {", "+\t\t\t\t\t\t\t\t\tif (isCancelled) return false;", "+\t\t\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(resource.getName())) {", "+\t\t\t\t\t\t\t\t\t\t\tIPath path = resource.getLocation();", "+\t\t\t\t\t\t\t\t\t\t\tif (path != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "+\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.get(name) == null || indexLastModified < path.toFile().lastModified()", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (Object) resource", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "-\t}", "-\tpublic boolean visit(IResource resource) {", "-\t\tif (this.isCancelled) return false;", "-\t\t", "-\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\tif (Util.isJavaFileName(resource.getName()) ", "-\t\t\t\t\t&& !Util.isExcluded(resource, IndexAllProject.this.currentExclusionPatterns)) {", "-\t\t\t\tIPath path = resource.getLocation();", "-\t\t\t\tif (path != null) {", "-\t\t\t\t\tFile resourceFile = path.toFile();", "-\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "-\t\t\t\t\tif (this.indexedFileNames.get(name) == null) {", "-\t\t\t\t\t\tthis.indexedFileNames.put(name, resource);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.indexedFileNames.put(", "-\t\t\t\t\t\t\tname,", "-\t\t\t\t\t\t\tresourceFile.lastModified() > this.indexLastModified", "-\t\t\t\t\t\t\t\t? (Object) resource", "-\t\t\t\t\t\t\t\t: (Object) OK);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b05cb714f38c132fb6fcbe917036c11e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \t\t\t\tpublic boolean visit(IResource resource)", "signatureAfterChange": "\r \tpublic boolean visit(IResource resource)", "diff": ["-\t\t\tproject.accept(new IResourceVisitor() {\r", "-\t\t\t\tpublic boolean visit(IResource resource) {\r", "-\t\t\t\t\tif (resource.getType() == IResource.FILE) {\r", "-\t\t\t\t\t\tString extension = resource.getFileExtension();\r", "-\t\t\t\t\t\tif ((extension != null) && extension.equalsIgnoreCase(\"java\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\tIPath path = resource.getLocation();\r", "-\t\t\t\t\t\t\tif (path != null) {\r", "-\t\t\t\t\t\t\t\tFile resourceFile = path.toFile();\r", "-\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();\r", "-\t\t\t\t\t\t\t\tif (indexedFileNames.get(name) == null) {\r", "-\t\t\t\t\t\t\t\t\tindexedFileNames.put(name, resource);\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tindexedFileNames.put(\r", "-\t\t\t\t\t\t\t\t\t\tname,\r", "-\t\t\t\t\t\t\t\t\t\tresourceFile.lastModified() > indexLastModified\r", "-\t\t\t\t\t\t\t\t\t\t\t? (Object) resource\r", "-\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\treturn true;\r", "+\tpublic boolean visit(IResource resource) {\r", "+\t\tif (resource.getType() == IResource.FILE) {\r", "+\t\t\tString extension = resource.getFileExtension();\r", "+\t\t\tif ((extension != null) && extension.equalsIgnoreCase(\"java\")) { //$NON-NLS-1$\r", "+\t\t\t\tIPath path = resource.getLocation();\r", "+\t\t\t\tif (path != null) {\r", "+\t\t\t\t\tFile resourceFile = path.toFile();\r", "+\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();\r", "+\t\t\t\t\tif (this.indexedFileNames.get(name) == null) {\r", "+\t\t\t\t\t\tthis.indexedFileNames.put(name, resource);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tthis.indexedFileNames.put(\r", "+\t\t\t\t\t\t\tname,\r", "+\t\t\t\t\t\t\tresourceFile.lastModified() > this.indexLastModified\r", "+\t\t\t\t\t\t\t\t? (Object) resource\r", "+\t\t\t\t\t\t\t\t: (Object) OK);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t\treturn true;\r", "+\t}\r"]}], "num": 300}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c22260b49d3266cb4812fe1fceda55bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427b21026507f50bed527b3943395141", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, Even when this type is being constructed", "+\t\t   on behalf of a 1.4 project we must internalize type variables properly in order to be able to", "+\t\t   recognize usages of them in the method signature, to apply substitutions and thus to be able to", "+\t\t   detect overriding in the presence of generics. If we simply drop them, when the method signature", "+\t\t   refers to the type parameter, we won't know it should be bound to the type parameter and perform", "+\t\t   incorrect lookup and may mistakenly end up with missing types", "+\t\t */", "-\t\t// Digest type parameters if compliance level of current project or its prerequisite is >= 1.5", "-\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=323633 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259", "-\t\tif (this.has1_5Compliance || this.problemReporter.options.complianceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\t/* convert type parameters */", "-\t\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "-\t\t\tif (typeParameterNames != null) {", "-\t\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "-\t\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "-\t\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "-\t\t\t\t\t}", "+\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\tif (typeParameterNames != null) {", "+\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "+\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadb17868329c61dc1c655d30fa66d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, Even when this type is being constructed", "+\t\t   on behalf of a 1.4 project we must internalize type variables properly in order to be able to", "+\t\t   recognize usages of them in the method signature, to apply substitutions and thus to be able to", "+\t\t   detect overriding in the presence of generics. If we simply drop them, when the method signature", "+\t\t   refers to the type parameter, we won't know it should be bound to the type parameter and perform", "+\t\t   incorrect lookup and may mistakenly end up with missing types", "+\t\t */", "-\t\t// Digest type parameters if compliance level of current project or its prerequisite is >= 1.5", "-\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=323633 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259", "-\t\tif (this.has1_5Compliance || this.problemReporter.options.complianceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\t/* convert type parameters */", "-\t\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "-\t\t\tif (typeParameterNames != null) {", "-\t\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "-\t\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "-\t\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "-\t\t\t\t\t}", "+\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\tif (typeParameterNames != null) {", "+\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "+\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);"]}], "num": 32132}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b535a7928033bfa397d2d863fbaf88a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14e8c6430ca10e5a05683e385be086e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassFileTests.java", "commitBeforeChange": "24ecdaaa88a3d3df53c6657b56b1c35a02f254d7", "commitAfterChange": "b77d2ea3108de5650fdc8f1f0c9f51bf7203159f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void setUpSuite() throws Exception", "signatureAfterChange": "  public void setUpSuite() throws Exception", "diff": ["-\tpublic void setUpSuite() throws Exception {", "-\t\tsuper.setUpSuite();", "-\t\tIJavaProject javaProject = createJavaProject(\"P\");", "-\t\tString[] pathAndContents = new String[] {", "-\t\t\t\"nongeneric/A.java\", ", "-\t\t\t\"package nongeneric;\\n\" +", "-\t\t\t\"public class A {\\n\" + ", "-\t\t\t\"}\",\t\t\t", "-\t\t\t\"generic/X.java\", ", "-\t\t\t\"package generic;\\n\" +", "-\t\t\t\"public class X<T> {\\n\" + ", "-\t\t\t\"  <U extends Exception> X<T> foo(X<T> x) throws RuntimeException, U {\\n\" +", "-\t\t\t\"    return null;\\n\" +", "+", "+public void setUpSuite() throws Exception {", "+\tsuper.setUpSuite();", "+\tIJavaProject javaProject = createJavaProject(\"P\");", "+\tString[] pathAndContents = new String[] {", "+\t\t\"nongeneric/A.java\", ", "+\t\t\"package nongeneric;\\n\" +", "+\t\t\"public class A {\\n\" + ", "+\t\t\"}\",\t\t\t", "+\t\t\"generic/X.java\", ", "+\t\t\"package generic;\\n\" +", "+\t\t\"public class X<T> {\\n\" + ", "+\t\t\"  <U extends Exception> X<T> foo(X<T> x) throws RuntimeException, U {\\n\" +", "+\t\t\"    return null;\\n\" +", "+\t\t\"  }\\n\" +", "+\t\t\"  <K, V> V foo(K key, V value) throws Exception {\\n\" +", "+\t\t\"    return value;\\n\" +", "+\t\t\"  }\\n\" +", "+\t\t\"}\",", "+\t\t\"generic/Y.java\", ", "+\t\t\"package generic;\\n\" +", "+\t\t\"public class Y<K, L> {\\n\" + ", "+\t\t\"}\",", "+\t\t\"generic/Z.java\", ", "+\t\t\"package generic;\\n\" +", "+\t\t\"public class Z<T extends Object & I<? super T>> {\\n\" + ", "+\t\t\"}\",", "+\t\t\"generic/I.java\", ", "+\t\t\"package generic;\\n\" +", "+\t\t\"public interface I<T> {\\n\" + ", "+\t\t\"}\",", "+\t\t\"generic/W.java\", ", "+\t\t\"package generic;\\n\" +", "+\t\t\"public class W<T extends X<T> , U extends T> {\\n\" + ", "+\t\t\"}\",", "+\t\t\"generic/V.java\", ", "+\t\t\"package generic;\\n\" +", "+\t\t\"public class V extends X<Thread> implements I<String> {\\n\" + ", "+\t\t\"}\",", "+\t\t\"varargs/X.java\", ", "+\t\t\"package varargs;\\n\" +", "+\t\t\"public class X {\\n\" + ", "+\t\t\"  void foo(String s, Object ... others) {\\n\" +", "+\t\t\"  }\\n\" +", "+\t\t\"}\",", "+\t\t\"workingcopy/X.java\", ", "+\t\t\"package workingcopy;\\n\" +", "+\t\t\"public class X {\\n\" + ", "+\t\t\"  void foo() {\\n\" +", "+\t\t\"    System.out.println();\\n\" +", "+\t\t\"  }\\n\" +", "+\t\t\"}\",", "+\t\t\"workingcopy/Y.java\", ", "+\t\t\"package workingcopy;\\n\" +", "+\t\t\"public class Y<W> {\\n\" + ", "+\t\t\"  <T> T foo(T t, String... args) {\\n\" +", "+\t\t\"    return t;\\n\" +", "+\t\t\"  }\\n\" +", "+\t\t\"}\",", "+\t};", "+\taddLibrary(javaProject, \"lib.jar\", \"libsrc.zip\", pathAndContents, JavaCore.VERSION_1_5);", "+\tthis.jarRoot = javaProject.getPackageFragmentRoot(getFile(\"/P/lib.jar\"));", "+}", "-\t\t\t\"  <K, V> V foo(K key, V value) throws Exception {\\n\" +", "-\t\t\t\"    return value;\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"}\",", "-\t\t\t\"generic/Y.java\", ", "-\t\t\t\"package generic;\\n\" +", "-\t\t\t\"public class Y<K, L> {\\n\" + ", "-\t\t\t\"}\",", "-\t\t\t\"generic/Z.java\", ", "-\t\t\t\"package generic;\\n\" +", "-\t\t\t\"public class Z<T extends Object & I<? super T>> {\\n\" + ", "-\t\t\t\"}\",", "-\t\t\t\"generic/I.java\", ", "-\t\t\t\"package generic;\\n\" +", "-\t\t\t\"public interface I<T> {\\n\" + ", "-\t\t\t\"}\",", "-\t\t\t\"generic/W.java\", ", "-\t\t\t\"package generic;\\n\" +", "-\t\t\t\"public class W<T extends X<T> , U extends T> {\\n\" + ", "-\t\t\t\"}\",", "-\t\t\t\"generic/V.java\", ", "-\t\t\t\"package generic;\\n\" +", "-\t\t\t\"public class V extends X<Thread> implements I<String> {\\n\" + ", "-\t\t\t\"}\",", "-\t\t\t\"varargs/X.java\", ", "-\t\t\t\"package varargs;\\n\" +", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"  void foo(String s, Object ... others) {\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"}\",", "-\t\t};", "-\t\taddLibrary(javaProject, \"lib.jar\", \"libsrc.zip\", pathAndContents, JavaCore.VERSION_1_5);", "-\t\tthis.jarRoot = javaProject.getPackageFragmentRoot(getFile(\"/P/lib.jar\"));", "-\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd0ef069d662541958fa3fd6204deea1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "4e8e5a98cf0190fbfa5945ebb361f51b261ba210", "commitAfterChange": "d245300e4e786a6fa7e5da9bef5c249b7208c09a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void _test010()", "signatureAfterChange": "  \tpublic void test010()", "diff": ["-\t// TODO (kent) cannot call computeCompatibleMethod to choose between 2 methods", "-\tpublic void _test010() {", "+\tpublic void test010() {", "+\t\t// according to spec this should find count(Object) since it should not consider count(Object...) until all fixed arity methods are dealt with", "+\t\t// but their current implementation picks the vararg method", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "+\t\t\t\t\"\t\tY.count((Object) new Integer(1));\\n\" +", "+//\t\t\t\t\"\t\tY.count(new Integer(1));\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tpublic static void count(Object values) { System.out.print('1'); }\\n\" +", "+\t\t\t\t\"\tpublic static void count(Object ... values) { System.out.print('2'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"<1>\");", "+\t\t// according to spec this should find count(Object[]) since it should not consider count(Object[]...) until all fixed arity methods are dealt with", "+\t\t// but their current implementation picks the vararg method", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "+\t\t\t\t\"\t\tY.count(new Object[] {new Integer(1)});\\n\" +", "+//\t\t\t\t\"\t\tY.count(new Integer[] {new Integer(1)});\\n\" +", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tpublic static void count(Object[] values) { System.out.print('1'); }\\n\" +", "+\t\t\t\t\"\tpublic static void count(Object[] ... values) { System.out.print('2'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"<1>\");", "+\t\t// according to spec this should find the fixed arity methods since it should not consider the others until all fixed arity methods are dealt with", "+\t\t// but their current implementation thinks they're ambiguous", "-\t\t\t\t\"\t\tY.count(null);\\n\" +", "+\t\t\t\t\"\t\tY.string(null);\\n\" +", "+\t\t\t\t\"\t\tY.string2(null);\\n\" +", "+\t\t\t\t\"\t\tY.int2(null);\\n\" +", "-\t\t\t\t\"\tpublic static void count(int[] values) {}\\n\" +", "-\t\t\t\t\"\tpublic static void count(int[] ... values) {}\\n\" +", "+\t\t\t\t\"\tpublic static void string(String values) { System.out.print('1'); }\\n\" +", "+\t\t\t\t\"\tpublic static void string(String ... values) { System.out.print('2'); }\\n\" +", "+\t\t\t\t\"\tpublic static void string2(String[] values) { System.out.print('1'); }\\n\" +", "+\t\t\t\t\"\tpublic static void string2(String[] ... values) { System.out.print('2'); }\\n\" +", "+\t\t\t\t\"\tpublic static void int2(int[] values) { System.out.print('1'); }\\n\" +", "+\t\t\t\t\"\tpublic static void int2(int[] ... values) { System.out.print('2'); }\\n\" +", "-\t\t\t},\t\t\t\"----------\\n\" + ", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "-\t\t\t\"\tY.count(null);\\n\" + ", "-\t\t\t\"\t  ^^^^^\\n\" + ", "-\t\t\t\"The method count(int[]) is ambiguous for the type Y\\n\" + ", "+\t\t\t\"\tY.string(null);\\n\" + ", "+\t\t\t\"\t  ^^^^^^\\n\" + ", "+\t\t\t\"The method string(String) is ambiguous for the type Y\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tY.string2(null);\\n\" + ", "+\t\t\t\"\t  ^^^^^^^\\n\" + ", "+\t\t\t\"The method string2(String[]) is ambiguous for the type Y\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tY.int2(null);\\n\" + ", "+\t\t\t\"\t  ^^^^\\n\" + ", "+\t\t\t\"The method int2(int[]) is ambiguous for the type Y\\n\" + "]}], "num": 49678}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efec38119ee5e6e1c6a759ac3a6a62b4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "249b66ade26c5c99cab8feaf8a0369f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "\r \tprivate void findFieldsAndMethods(\r \t\tchar[] token,\r \t\tTypeBinding receiverType,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tif (receiverType.isBaseType()) return; // nothing else is possible with base types\r", "-\tif (receiverType.isArrayType()) {\r", "-\t\tif (token.length <= lengthField.length && CharOperation.prefixEquals(token, lengthField, false /* ignore case */))\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tCompilerModifiers.AccPublic,\r", "-\r", "-\t\treceiverType = scope.getJavaLangObject();\r", "-\tfindFields(token, (ReferenceBinding) receiverType, scope, new ObjectVector(), false);\r", "-\tfindMethods(token, null, (ReferenceBinding) receiverType, scope, new ObjectVector(), false, false);\r", "-}\r", "+\tprivate void findFieldsAndMethods(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tif (receiverType.isBaseType())\r", "+\t\t\treturn; // nothing else is possible with base types\r", "+\t\tif (receiverType.isArrayType()) {\r", "+\t\t\tif (token.length <= lengthField.length\r", "+\t\t\t\t&& CharOperation.prefixEquals(token, lengthField, false /* ignore case */\r", "+\t\t\t\t))\r", "+\t\t\t\trequestor.acceptField(\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tCompilerModifiers.AccPublic,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\r", "+\t\t\treceiverType = scope.getJavaLangObject();\r", "+\t\t}\r", "+\r", "+\t\tfindFields(\r", "+\t\t\ttoken,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite,\r", "+\t\t\tinvocationScope);\r", "+\t\tfindMethods(\r", "+\t\t\ttoken,\r", "+\t\t\tnull,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49bee19155a5b0894282e1c4735e13fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "\r \tprivate void findFieldsAndMethods(\r \t\tchar[] token,\r \t\tTypeBinding receiverType,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tif (receiverType.isBaseType()) return; // nothing else is possible with base types\r", "-\tif (receiverType.isArrayType()) {\r", "-\t\tif (token.length <= lengthField.length && CharOperation.prefixEquals(token, lengthField, false /* ignore case */))\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tCompilerModifiers.AccPublic,\r", "-\r", "-\t\treceiverType = scope.getJavaLangObject();\r", "-\tfindFields(token, (ReferenceBinding) receiverType, scope, new ObjectVector(), false);\r", "-\tfindMethods(token, null, (ReferenceBinding) receiverType, scope, new ObjectVector(), false, false);\r", "-}\r", "+\tprivate void findFieldsAndMethods(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tif (receiverType.isBaseType())\r", "+\t\t\treturn; // nothing else is possible with base types\r", "+\t\tif (receiverType.isArrayType()) {\r", "+\t\t\tif (token.length <= lengthField.length\r", "+\t\t\t\t&& CharOperation.prefixEquals(token, lengthField, false /* ignore case */\r", "+\t\t\t\t))\r", "+\t\t\t\trequestor.acceptField(\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tCompilerModifiers.AccPublic,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\r", "+\t\t\treceiverType = scope.getJavaLangObject();\r", "+\t\t}\r", "+\r", "+\t\tfindFields(\r", "+\t\t\ttoken,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite,\r", "+\t\t\tinvocationScope);\r", "+\t\tfindMethods(\r", "+\t\t\ttoken,\r", "+\t\t\tnull,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff4e858d966ad5c88e0cd561430c7f2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "\r \tprivate void findFieldsAndMethods(\r \t\tchar[] token,\r \t\tTypeBinding receiverType,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tif (receiverType.isBaseType()) return; // nothing else is possible with base types\r", "-\tif (receiverType.isArrayType()) {\r", "-\t\tif (token.length <= lengthField.length && CharOperation.prefixEquals(token, lengthField, false /* ignore case */))\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tCompilerModifiers.AccPublic,\r", "-\r", "-\t\treceiverType = scope.getJavaLangObject();\r", "-\tfindFields(token, (ReferenceBinding) receiverType, scope, new ObjectVector(), false);\r", "-\tfindMethods(token, null, (ReferenceBinding) receiverType, scope, new ObjectVector(), false, false);\r", "-}\r", "+\tprivate void findFieldsAndMethods(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tif (receiverType.isBaseType())\r", "+\t\t\treturn; // nothing else is possible with base types\r", "+\t\tif (receiverType.isArrayType()) {\r", "+\t\t\tif (token.length <= lengthField.length\r", "+\t\t\t\t&& CharOperation.prefixEquals(token, lengthField, false /* ignore case */\r", "+\t\t\t\t))\r", "+\t\t\t\trequestor.acceptField(\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tCompilerModifiers.AccPublic,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\r", "+\t\t\treceiverType = scope.getJavaLangObject();\r", "+\t\t}\r", "+\r", "+\t\tfindFields(\r", "+\t\t\ttoken,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite,\r", "+\t\t\tinvocationScope);\r", "+\t\tfindMethods(\r", "+\t\t\ttoken,\r", "+\t\t\tnull,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite);\r"]}], "num": 25697}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d91768569293d11e534d301a12a53d08", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09a5052c42d800fb30a5784fce5d02ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r \tpublic void manageSyntheticReadAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding,\r \t\tint index)", "signatureAfterChange": "\r \tpublic void manageSyntheticReadAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding,\r \t\tTypeBinding lastReceiverType,\r \t\tint index)", "diff": ["-\r", "+\t\tTypeBinding lastReceiverType,\r", "-\r", "+\t\t\t\treturn;\r", "-\t\t\treturn;\r", "-\t\t}\r", "-\t\tif (fieldBinding.isProtected()){\r", "+\t\t} else if (fieldBinding.isProtected()){\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// if the binding declaring class is not visible, need special action\r", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\t\tif (fieldBinding.declaringClass != lastReceiverType\r", "+\t\t\t&& !lastReceiverType.isArrayType()\t\t\t\r", "+\t\t\t&& fieldBinding.declaringClass != null\r", "+\t\t\t&& fieldBinding.constant == NotAConstant\r", "+\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t&& (index > 0 || indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object)\r", "+\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){\r", "+\t\t\tif (index == 0){\r", "+\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r", "+\t\t\t} else {\r", "+\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){\r", "+\t\t\t\t\tint l = this.otherBindings.length;\r", "+\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);\r", "+\t\t\t\t}\r", "+\t\t\t\tthis.otherCodegenBindings[index-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4dacfc8095bd4a373af9422b2c45367", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic void manageSyntheticWriteAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding)", "signatureAfterChange": "\r \tpublic void manageSyntheticWriteAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding,\r \t\tTypeBinding lastReceiverType)", "diff": ["-\t\tFieldBinding fieldBinding) {\r", "-\r", "+\t\tFieldBinding fieldBinding,\r", "+\t\tTypeBinding lastReceiverType) {\r", "+\t\t\t\treturn;\r", "+\t\t\t\treturn;\r", "+\t\t// if the binding declaring class is not visible, need special action\r", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\t\tif (fieldBinding.declaringClass != lastReceiverType\r", "+\t\t\t&& !lastReceiverType.isArrayType()\t\t\t\r", "+\t\t\t&& fieldBinding.declaringClass != null\r", "+\t\t\t&& fieldBinding.constant == NotAConstant\r", "+\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t&& (fieldBinding != binding || indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object)\r", "+\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){\r", "+\t\t\tif (fieldBinding == binding){\r", "+\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r", "+\t\t\t} else {\r", "+\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){\r", "+\t\t\t\t\tint l = this.otherBindings.length;\r", "+\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);\r", "+\t\t\t\t}\r", "+\t\t\t\tthis.otherCodegenBindings[this.otherCodegenBindings.length-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r"]}], "num": 55468}
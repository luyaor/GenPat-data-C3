{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1525f9cc7bc926164f3f4f92a38228f5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "407b891ca6972a25d0250a7200327058", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "71abd877ad821a18101d4f0c04cd015f0a15dbfe", "commitAfterChange": "8245bd73c0aef7bf5f6de5def8941104b56db6f7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\tif (fParameterNames == null) {", "+\tif (this.parameterNames == null) {", "-\t\t\tchar[][] parameterNames = mapper.getMethodParameterNames(this);", "+\t\t\tchar[][] paramNames = mapper.getMethodParameterNames(this);", "-\t\t\tif(parameterNames == null) {", "+\t\t\tif(paramNames == null) {", "-\t\t\t\tparameterNames = mapper.getMethodParameterNames(this);", "+\t\t\t\tparamNames = mapper.getMethodParameterNames(this);", "-\t\t\tif(parameterNames != null) {", "-\t\t\t\tfParameterNames = new String[parameterNames.length];", "-\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "-\t\t\t\t\tfParameterNames[i] = new String(parameterNames[i]);", "+\t\t\tif(paramNames != null) {", "+\t\t\t\tthis.parameterNames = new String[paramNames.length];", "+\t\t\t\tfor (int i = 0; i < paramNames.length; i++) {", "+\t\t\t\t\tthis.parameterNames[i] = new String(paramNames[i]);", "-\t\tif (fParameterNames == null) {", "+\t\tif (this.parameterNames == null) {", "-\t\t\tfParameterNames = new String[paramCount];", "+\t\t\tthis.parameterNames = new String[paramCount];", "-\t\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "+\t\t\t\tthis.parameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "-\treturn fParameterNames;", "+\treturn this.parameterNames;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a184dd7721d159d62110c8e2d270450c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateMethodOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected String[] convertDOMMethodTypesToSignatures()", "signatureAfterChange": " protected String[] convertASTMethodTypesToSignatures()", "diff": ["-// TODO - JDOM - remove once model ported off of JDOM", "-protected String[] convertDOMMethodTypesToSignatures() {", "-\tif (fParameterTypes == null) {", "-\t\tif (isDOMNodeNull()) {", "-\t\t\tString[] domParameterTypes = ((IDOMMethod)fDOMNode).getParameterTypes();", "-\t\t\tif (domParameterTypes != null) {", "-\t\t\t\tfParameterTypes = new String[domParameterTypes.length];", "-\t\t\t\t// convert the DOM types to signatures", "-\t\t\t\tint i;", "-\t\t\t\tfor (i = 0; i < fParameterTypes.length; i++) {", "-\t\t\t\t\tfParameterTypes[i] = Signature.createTypeSignature(domParameterTypes[i].toCharArray(), false);", "-\t\t\t\t}", "+protected String[] convertASTMethodTypesToSignatures() {", "+\tif (this.parameterTypes == null) {", "+\t\tif (this.createdNode != null) {", "+\t\t\tList parameters = ((MethodDeclaration) this.createdNode).parameters();", "+\t\t\tint size = parameters.size();", "+\t\t\tthis.parameterTypes = new String[size];", "+\t\t\tIterator iterator = parameters.iterator();", "+\t\t\t// convert the AST types to signatures", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "+\t\t\t\tthis.parameterTypes[i] = Util.getSignature(parameter.getType());", "-\treturn fParameterTypes;", "+\treturn this.parameterTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b67cc4dca73e53069fce66e7924ca266", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "c6ea2a72647dce31af35c91712fb9d7b45a7c96d", "commitAfterChange": "83b68463dfa78dfe663b2c3a425108deb5494772", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\t\t\t\tfinal StringTokenizer tokenizer = new StringTokenizer(String.valueOf(paramsSource), \", \\n\\r\"); //$NON-NLS-1$", "-\t\t\t\t\tint index = 0;", "-\t\t\t\t\tfinal ArrayList paramNames = new ArrayList(paramCount);", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\tfinal String token = tokenizer.nextToken();", "-\t\t\t\t\t\tif ((index & 1) != 0) {", "-\t\t\t\t\t\t\t// if odd then this is a parameter name", "-\t\t\t\t\t\t\tparamNames.add(token);", "+\t\t\t\t\tfinal char[][] params = CharOperation.splitOn(',', paramsSource);", "+\t\t\t\t\tfinal int paramsLength = params.length;", "+\t\t\t\t\tthis.parameterNames = new String[paramsLength];", "+\t\t\t\t\tfor (int i = 0; i < paramsLength; i++) {", "+\t\t\t\t\t\tfinal char[] param = params[i];", "+\t\t\t\t\t\tint indexOfSpace = CharOperation.lastIndexOf(' ', param);", "+\t\t\t\t\t\tif (indexOfSpace != -1) {", "+\t\t\t\t\t\t\tthis.parameterNames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.parameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\tif (!paramNames.isEmpty()) {", "-\t\t\t\t\t\tthis.parameterNames = new String[paramNames.size()];", "-\t\t\t\t\t\tparamNames.toArray(this.parameterNames);", "-\t\t\t\t\t\treturn this.parameterNames;", "-\t\t\t\t\t}", "+\t\t\t\t\treturn this.parameterNames;"]}], "num": 52959}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2c93677e19b03a580d7502dac7c9eb3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d702739de905c6c1d7bf035a27a33124", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\t\tif (methodDecl == null) \tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost", "-\t\t\t\t\t\t\tAbstractMethodDeclaration method2Decl = method2.sourceMethod();", "-\t\t\t\t\t\t\t// could collide with special methods for enumerations", "+\t\t\t\t\t\t\tboolean isEnumSpecialMethod = isEnum()", "+\t\t\t\t\t\t\t\t&& (method.selector == TypeConstants.VALUEOF || method.selector == TypeConstants.VALUES);", "-\t\t\t\t\t\t\t\tif (method.selector == TypeConstants.VALUEOF", "-\t\t\t\t\t\t\t\t\t\t|| method.selector == TypeConstants.VALUES) {", "-\t\t\t\t\t\t\t\t\tif (method2Decl != null) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateEnumSpecialMethod(this, method2Decl);", "-\t\t\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// leave enum special method to minimize secondary error (further references to it)", "-\t\t\t\t\t\t\t\t\tmethods[j] = null;", "-\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (method2Decl == null) {", "-\t\t\t\t\t\t\t\tif (method2.selector == TypeConstants.VALUEOF", "-\t\t\t\t\t\t\t\t\t\t|| method2.selector == TypeConstants.VALUES) {", "-\t\t\t\t\t\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special", "+\t\t\t\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method", "+\t\t\t\t\t\t\t\t\tif (isEnumSpecialMethod)", "-\t\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// leave enum special method to minimize secondary error (further references to it)", "+\t\t\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "+\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (methodDecl.binding != null) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "-\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (method2Decl != null) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tAbstractMethodDeclaration method2Decl = method2.sourceMethod();", "+\t\t\t\t\t\t\tif (method2Decl != null && method2Decl.binding != null) { // ensure its a valid user defined method", "+\t\t\t\t\t\t\t\tif (isEnumSpecialMethod)", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateEnumSpecialMethod(this, method2Decl);", "+\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tmethods[i] = null;", "+\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t\t\t\tfailed+=2;", "+\t\t\t\t\t\t\t\tfailed++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f943acdcde9c1fa263726eb43cee1b70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "254a144fb8ad02730db7fb5ae51a3f1d563a3301", "commitAfterChange": "e54faf9b6863584db506773e5f99391f62c41c79", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void attachSource(IPath zipPath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void attachSource(IPath zipPath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\tif ((zipPath.isAbsolute() && workspace.getRoot().findMember(zipPath) != null) || !zipPath.isAbsolute()) {", "-\t\t\t\t\t// internal to the workbench", "-\t\t\t\t\t// a resource", "-\t\t\t\t\tIResource zipFile= workspace.getRoot().findMember(zipPath);", "-\t\t\t\t\tif (zipFile == null) {", "-\t\t\t\t\t\tif (monitor != null) {", "-\t\t\t\t\t\t\tmonitor.done();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, zipPath));", "+\t\t\t\t// check if zip path is valid", "+\t\t\t\tObject target = JavaModel.getTarget(workspace.getRoot(), zipPath, false);", "+\t\t\t\tif (!(target instanceof IFile || target instanceof File)) {", "+\t\t\t\t\tif (monitor != null) {", "+\t\t\t\t\t\tmonitor.done();", "-\t\t\t\t\tif (!(zipFile.getType() == IResource.FILE)) {", "-\t\t\t\t\t\tif (monitor != null) {", "-\t\t\t\t\t\t\tmonitor.done();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, zipPath));", "-\t\t\t\t\t}", "+\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, zipPath));"]}], "num": 52511}
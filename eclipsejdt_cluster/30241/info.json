{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1db75b084162fd8e20ece4f252721a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ec0b7ed649655e1adff2243efde7859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "65bc58d731b2b7495611004f31fbf68869bf0c34", "commitAfterChange": "a618dea008dd005a2062d94159d61d7900b021b7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit)", "diff": ["-\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver) {", "+\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit) {", "-\t \t\t\treturn new PackageBinding(this.compoundName, null, resolver.lookupEnvironment);", "+\t \t\t\treturn new PackageBinding(this.compoundName, null, this.environment);", "-\t \t\t\t\t\treturn getArrayBinding(this.dimension, baseTypeBinding, resolver);", "+\t \t\t\t\t\treturn getArrayBinding(this.dimension, baseTypeBinding);", "-\t \t\t\t\treturn getBinaryBinding(resolver);", "+\t \t\t\t\treturn getBinaryBinding();", "-\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);", "+\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName);", "-\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "+\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding);", "-\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "+\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/); ", "- \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "+ \t\t\t\t\ttypeBinding = this.environment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "-\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((ReferenceBinding) typeBinding).methods(), resolver);", "+\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((ReferenceBinding) typeBinding).methods());", "-\t\t \t\t\t\t\t\tmethodBinding = getParameterizedGenericMethodBinding(methodBinding, resolver);", "+\t\t \t\t\t\t\t\tmethodBinding = getParameterizedGenericMethodBinding(methodBinding);", "-\t \t\t\t\treturn getArrayBinding(dim, typeBinding, resolver);", "+\t \t\t\t\treturn getArrayBinding(dim, typeBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d28a309c045a98ffdf3b95158ff4ad83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tBinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException", "signatureAfterChange": " protected BinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException", "diff": ["-\t */", "-\tBinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException {", "-\t\tIType enclosingType = type.getDeclaringType();", "-\t\tif (enclosingType != null) {", "-\t\t\t// force caching of enclosing types first, so that binary type can be found in lookup enviroment", "-\t\t\tthis.cacheBinaryType(enclosingType);", "-\t\t}", "-\t\tIBinaryType binaryType = (IBinaryType)((BinaryType)type).getElementInfo();", "-\t\tBinaryTypeBinding binding = this.lookupEnvironment.cacheBinaryType(binaryType);", "-\t\tif (binding == null) { // it was already cached as a result of a previous query", "-\t\t\tchar[][] compoundName = CharOperation.splitOn('.', type.getFullyQualifiedName().toCharArray());", "-\t\t\tReferenceBinding referenceBinding = this.lookupEnvironment.getCachedType(compoundName);", "-\t\t\tif (referenceBinding != null && (referenceBinding instanceof BinaryTypeBinding)) {", "-\t\t\t\t// if the binding could be found and if it comes from a binary type,", "-\t\t\t\tbinding = (BinaryTypeBinding)referenceBinding;", "-\t\t\t}", "-\t\t}", "-\t\treturn binding;", "-\t}", "+ */", "+protected BinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException {", "+\tIType enclosingType = type.getDeclaringType();", "+\tif (enclosingType != null)", "+\t\tcacheBinaryType(enclosingType); // cache enclosing types first, so that binary type can be found in lookup enviroment", "+\tIBinaryType binaryType = (IBinaryType) ((BinaryType) type).getElementInfo();", "+\tBinaryTypeBinding binding = this.lookupEnvironment.cacheBinaryType(binaryType);", "+\tif (binding == null) { // it was already cached as a result of a previous query", "+\t\tchar[][] compoundName = CharOperation.splitOn('.', type.getFullyQualifiedName().toCharArray());", "+\t\tReferenceBinding referenceBinding = this.lookupEnvironment.getCachedType(compoundName);", "+\t\tif (referenceBinding != null && (referenceBinding instanceof BinaryTypeBinding))", "+\t\t\tbinding = (BinaryTypeBinding) referenceBinding; // if the binding could be found and if it comes from a binary type", "+\t}", "+\treturn binding;", "+}"]}], "num": 30241}
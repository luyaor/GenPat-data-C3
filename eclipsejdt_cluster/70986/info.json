{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "534ebeac1b7ccd43a483910d72cc46b1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1edec265f7f99e931c9b00fef5f4b773", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "211eb968a7e76304f435bc3a2df40421403cc67d", "commitAfterChange": "1604cfae28d7a5fbf135c974f0085e046db607c7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["-\t\t\t\t originalMethod.returnType,", "+\t\t\t\toriginalMethod.returnType,", "-\t\tthis.tagBits = originalMethod.tagBits;", "+\t\t/* missing type bit cannot be copied as is it might come from the return type or a parameter type that", "+\t\t * is substituted by a raw type.", "+\t\t */", "+\t\tthis.tagBits = originalMethod.tagBits & ~TagBits.HasMissingType;", "-\t\t\t        // check this variable can be substituted given copied variables", "-\t\t\t        if (typeVariable.rank < length && originalVariables[typeVariable.rank] == typeVariable) {", "+\t\t\t\t\t// check this variable can be substituted given copied variables", "+\t\t\t\t\tif (typeVariable.rank < length && originalVariables[typeVariable.rank] == typeVariable) {", "-\t\t\t        }", "-\t\t\t        if (!isStatic)", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!isStatic)", "-\t\t\t        return typeVariable;", "+\t\t\t\t\treturn typeVariable;", "-\t\t    // error case where exception type variable would have been substituted by a non-reference type (207573)", "-\t\t    if (this.thrownExceptions == null) this.thrownExceptions = Binding.NO_EXCEPTIONS;", "+\t\t\t// error case where exception type variable would have been substituted by a non-reference type (207573)", "+\t\t\tif (this.thrownExceptions == null) this.thrownExceptions = Binding.NO_EXCEPTIONS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ae519729993d28f49fe188c2eba3b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "211eb968a7e76304f435bc3a2df40421403cc67d", "commitAfterChange": "1604cfae28d7a5fbf135c974f0085e046db607c7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment)", "diff": ["-\t\tthis.tagBits = originalMethod.tagBits;", "+\t\t/* missing type bit cannot be copied as is it might come from the return type or a parameter type that", "+\t\t * is substituted by a raw type.", "+\t\t */", "+\t\tthis.tagBits = originalMethod.tagBits & ~TagBits.HasMissingType;"]}], "num": 70986}
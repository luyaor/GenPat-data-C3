{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9afe2b3338becad4f1432fbcb3c2536", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c8a16a88a58f51d08bda6b12e8816f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic FlowInfo checkNullStatus(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, int nullStatus)", "signatureAfterChange": " public void checkNPE(BlockScope scope, FlowContext flowContext,  \t\tFlowInfo flowInfo, boolean checkString)", "diff": ["-", "-\tpublic FlowInfo checkNullStatus(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, int nullStatus) {", "-", "-\t\tLocalVariableBinding local = this.localVariableBinding();", "-\t\tif (local != null) {", "-\t\t\tswitch(nullStatus) {", "-\t\t\t\tcase FlowInfo.NULL :", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, this, FlowInfo.NULL, flowInfo);", "-\t\t\t\t\tflowInfo.markAsDefinitelyNull(local); // from thereon it is set", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase FlowInfo.NON_NULL :", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, this, FlowInfo.NON_NULL, flowInfo);", "-\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(local); // from thereon it is set", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase FlowInfo.UNKNOWN :", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+ */", "+public void checkNPE(BlockScope scope, FlowContext flowContext, ", "+\t\tFlowInfo flowInfo, boolean checkString) {", "+\tLocalVariableBinding local = this.localVariableBinding();", "+\tif (local != null && ", "+\t\t\t(local.type.tagBits & TagBits.IsBaseType) == 0 &&", "+\t\t\t(checkString || local.type.id != T_JavaLangString)) {", "+\t\tif ((this.bits & IsNonNull) == 0) {", "+\t\t\tflowContext.recordUsingNullReference(scope, local, this, ", "+\t\t\t\t\tFlowContext.MAY_NULL, flowInfo);", "-\t\treturn flowInfo;", "+\t\tflowInfo.markAsComparedEqualToNonNull(local); ", "+\t\t\t// from thereon it is set", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5130ae6b2f1716683ebcf6baa4de93fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "signatureAfterChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "diff": ["-\tConstructorDeclaration cd = new ConstructorDeclaration(this.compilationResult);", "-\tcd.selector = new char[] { 'x' }; //no maining", "-\tcd.sourceStart = this.sourceStart;", "-\tcd.sourceEnd = this.sourceEnd;", "+\tConstructorDeclaration constructor = new ConstructorDeclaration(this.compilationResult);", "+\tconstructor.selector = new char[] { 'x' }; //no maining", "+\tconstructor.sourceStart = this.sourceStart;", "+\tconstructor.sourceEnd = this.sourceEnd;", "-\tcd.modifiers = newModifiers;", "-\tcd.isDefaultConstructor = true;", "+\tconstructor.modifiers = newModifiers;", "+\tconstructor.isDefaultConstructor = true;", "-\t\tArgument[] arguments = (cd.arguments = new Argument[argumentsLength]);", "+\t\tArgument[] arguments = (constructor.arguments = new Argument[argumentsLength]);", "-\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "-\tcd.constructorCall.sourceStart = this.sourceStart;", "-\tcd.constructorCall.sourceEnd = this.sourceEnd;", "+\tconstructor.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\tconstructor.constructorCall.sourceStart = this.sourceStart;", "+\tconstructor.constructorCall.sourceEnd = this.sourceEnd;", "-\t\targs = cd.constructorCall.arguments = new Expression[argumentsLength];", "+\t\targs = constructor.constructorCall.arguments = new Expression[argumentsLength];", "-\t\tthis.methods = new AbstractMethodDeclaration[] { cd };", "+\t\tthis.methods = new AbstractMethodDeclaration[] { constructor };", "-\t\tnewMethods[0] = cd;", "+\t\tnewMethods[0] = constructor;", "-\tcd.binding = new MethodBinding(", "-\t\t\tcd.modifiers, //methodDeclaration", "+\tconstructor.binding = new MethodBinding(", "+\t\t\tconstructor.modifiers, //methodDeclaration", "-\tcd.scope = new MethodScope(this.scope, cd, true);", "-\tcd.bindArguments();", "-\tcd.constructorCall.resolve(cd.scope);", "+\tconstructor.scope = new MethodScope(this.scope, constructor, true);", "+\tconstructor.bindArguments();", "+\tconstructor.constructorCall.resolve(constructor.scope);", "-\tif (this.binding.methods == null) {", "-\t\tthis.binding.methods = new MethodBinding[] { cd.binding };", "-\t} else {", "-\t\tMethodBinding[] newMethods;", "-\t\tSystem.arraycopy(", "-\t\t\tthis.binding.methods,", "-\t\t\t0,", "-\t\t\tnewMethods = new MethodBinding[this.binding.methods.length + 1],", "-\t\t\t1,", "-\t\t\tthis.binding.methods.length);", "-\t\tnewMethods[0] = cd.binding;", "-\t\tthis.binding.methods = newMethods;", "-\t}", "+\tMethodBinding[] oldMethods = this.binding.methods(); // trigger sorting", "+\tMethodBinding[] newMethods;", "+\tSystem.arraycopy(", "+\t\tthis.binding.methods(),", "+\t\t0,", "+\t\tnewMethods = new MethodBinding[oldMethods.length + 1],", "+\t\t1,", "+\t\toldMethods.length);", "+\tnewMethods[0] = constructor.binding; // position 0 is important, since if sorted, constructor will still be ahead", "+\tthis.binding.setMethods(newMethods);", "-\treturn cd.binding;", "+\treturn constructor.binding;"]}], "num": 30368}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0df6af9e735e62d148781311ec8f3cd7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1b590ec3e8e1a75a78626211442f70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "signatureAfterChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "diff": ["-\tif (length == source.length()) {", "+\tif (!COMPARE && length == source.length()) {", "-\t\t\t\tString counterString = counterString(count);", "-\t\t\t\tif (IGNORE_WHITESPACES) {", "-\t\t\t\t\tString trimmedResult = ModelTestsUtil.removeWhiteSpace(result);", "-\t\t\t\t\tString trimmedNewResult = ModelTestsUtil.removeWhiteSpace(newResult);", "-\t\t\t\t\tif (trimmedResult.equals(trimmedNewResult)) {", "-\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\treturn result;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "-\t\t\t\t\tString trimmedResult = ModelTestsUtil.trimLinesLeadingWhitespaces(result);", "-\t\t\t\t\tString trimmedNewResult = ModelTestsUtil.trimLinesLeadingWhitespaces(newResult);", "-\t\t\t\t\tif (trimmedResult.equals(trimmedNewResult)) {", "-\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\treturn result;", "-\t\t\t\t\t}", "-\t\t\t\t\tString compressedResult = ModelTestsUtil.removeWhiteSpace(result);", "-\t\t\t\t\tString compressedNewResult = ModelTestsUtil.removeWhiteSpace(newResult);", "-\t\t\t\t\tif (compressedResult.equals(compressedNewResult)) {", "-\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\treturn result;", "-\t\t\t\t\t}", "+\t\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\t\tcase ALL_SPACES:", "+\t\t\t\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(result);", "+\t\t\t\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(newResult);", "+\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase LINES_LEADING_SPACES:", "+\t\t\t\t\t\ttrimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(result);", "+\t\t\t\t\t\ttrimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(newResult);", "+\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (ModelTestsUtil.removeWhiteSpace(result).equals(ModelTestsUtil.removeWhiteSpace(newResult))) {", "+\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\ttrimmedExpected = filterFormattingInComments(result);", "+\t\t\t\t\t\ttrimmedActual= filterFormattingInComments(newResult);", "+\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tassertSourceEquals(counterString+\" formatting is different from first one!\", Util.convertToIndependantLineDelimiter(result), Util.convertToIndependantLineDelimiter(newResult));", "+\t\t\t\t\tassertSourceEquals(\"2nd formatting is different from first one!\", Util.convertToIndependantLineDelimiter(result), Util.convertToIndependantLineDelimiter(newResult));", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a240f6233d1ac7c4507773d020c7cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void assertSourceEquals(String message, String expected, String actual)", "signatureAfterChange": " protected void assertSourceEquals(String message, String expected, String actual)", "diff": ["-\t\tif (IGNORE_WHITESPACES) {", "-\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "-\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "-\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\treturn;", "+\t\tif (COMPARE) {", "+\t\t\tString trimmedExpected;", "+\t\t\tString trimmedActual;", "+\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\tcase ALL_SPACES:", "+\t\t\t\t\ttrimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "+\t\t\t\t\ttrimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase LINES_LEADING_SPACES:", "+\t\t\t\t\ttrimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "+\t\t\t\t\ttrimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\ttrimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "+\t\t\t\t\ttrimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\ttrimmedExpected = filterFormattingInComments(expected);", "+\t\t\t\t\ttrimmedActual= filterFormattingInComments(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "-\t\t\tString trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "-\t\t\tString trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "-\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "-\t\t\t\treturn;", "+\t\t\tif (DEBUG_TESTS && ASSERT_EQUALS_STRINGS) {", "+\t\t\t\tassertEquals(message, trimmedExpected, trimmedActual);", "-\t\tif (isExpectedFailure()) return;"]}], "num": 31400}
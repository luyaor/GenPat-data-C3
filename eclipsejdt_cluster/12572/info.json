{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be4315e27c8224ee09699b016f7115ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81856f31220b81c81caf82173778a21a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "2090b5298a9eb5bc7687aac3bc306c4718d688bb", "commitAfterChange": "7549708bfbb6541d509ec2f74894b85fedbf2954", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void _loadFromJars (final String factoryClassName, final File[] factoryPaths)", "signatureAfterChange": " \t \tprivate ClassLoader createClassLoader( Collection<FactoryContainer> containers )", "diff": ["+\t", "+\tprivate ClassLoader createClassLoader( Collection<FactoryContainer> containers )", "+\t{", "+\t\tArrayList<URL> urlList = new ArrayList<URL>( containers.size() );", "+\t\tfor ( FactoryContainer fc : containers ) ", "+\t\t{", "+\t\t\tif ( ! fc.isPlugin() )", "+\t\t\t{", "+\t\t\t\tJarFactoryContainer jfc = (JarFactoryContainer) fc;", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tURL u = jfc.getJarFileURL();", "+\t\t\t\t\turlList.add( u );", "+\t\t\t\t}", "+\t\t\t\tcatch ( MalformedURLException mue )", "+\t\t\t\t{", "+\t\t\t\t\t// TODO:  log this exception", "+\t\t\t\t\tmue.printStackTrace();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tClassLoader cl = null;", "+\t\tif ( urlList.size() > 0 )", "+\t\t{", "+\t\t\tURL[] urls = (URL[])urlList.toArray();", "+\t\t\tcl = new URLClassLoader( urls );", "+\t\t}", "+\t\treturn cl;", "+\t}", "-     */", "-    private void _loadFromJars (final String factoryClassName, final File[] factoryPaths)", "-    {", "-        final long start = System.nanoTime();", "-\t\tFile[] jarPath;", "-\t\t// Create an appropriate loader.  If factoryPaths is set, use it; otherwise use classpath.", "-        ClassLoader factoryLoader = null;", "-\t\tif (factoryPaths.length > 0) {", "-\t\t\tfactoryLoader = _getExtensionClassLoader(factoryPaths);", "-\t\t\tjarPath = factoryPaths;", "-\t\t}", "-\t\telse {", "-\t\t\tfactoryLoader = getClass().getClassLoader();", "-\t\t\tjarPath = new File[0]; //TODO: how can I list all jars on compile cmdline classPath?", "-\t\t}", "-", "-\t\t// If factoryClassName is specified, load only that; otherwise search all jars.", "-        if( factoryClassName != null ){", "-\t\t\t_loadFactory(factoryClassName, factoryLoader);", "-\t\t\treturn;", "-        }", "-        else {", "-            final Set<String> classNames = new HashSet<String>();", "-\t\t\tfor (File jar : jarPath) {", "-                classNames.addAll(_getServiceClassnamesFromJar(jar));", "-\t\t\t}", "-            for (String className : classNames) {", "-                final long loadStart = System.nanoTime();", "-                _loadFactory(className, factoryLoader);", "-                if (_verboseLoad) {", "-                    System.err.printf(\"\\tLoading APT factory %s took %.2f seconds.\", ", "-\t\t\t\t\t\t\tclassName, (System.nanoTime() - loadStart) / 1000000000.0);", "-                    System.err.println();", "-                    System.err.println();", "-                }", "-            }", "-        }", "-", "-        if (_verboseLoad) {", "-            System.err.println();", "-            System.err.printf(\"Loading all APT factories took %.2f seconds.\", (System.nanoTime() - start) / 1000000000.0);", "-            System.err.println();", "-            System.err.println();", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d29d9230c76035689003aeec296b567f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "2090b5298a9eb5bc7687aac3bc306c4718d688bb", "commitAfterChange": "7549708bfbb6541d509ec2f74894b85fedbf2954", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void _loadFactory(final String className, final ClassLoader classLoader)", "signatureAfterChange": " \t \tprivate List<AnnotationProcessorFactory> loadFactoryClasses( FactoryContainer fc, ClassLoader classLoader )", "diff": ["+\t", "+\tprivate List<AnnotationProcessorFactory> loadFactoryClasses( FactoryContainer fc, ClassLoader classLoader )", "+\t{", "+\t\tList<String> factoryNames = fc.getFactoryNames();", "+\t\tList<AnnotationProcessorFactory> factories = new ArrayList<AnnotationProcessorFactory>( factoryNames.size() ); ", "+\t\tfor ( String factoryName : factoryNames )", "+\t\t{", "+\t\t\tAnnotationProcessorFactory factory;", "+\t\t\tif ( fc.isPlugin() )", "+\t\t\t\tfactory = loadFactoryFromPlugin( factoryName );", "+\t\t\telse", "+\t\t\t\tfactory = loadFactoryFromClassLoader( factoryName, classLoader );", "+\t\t\t", "+\t\t\tif ( factory != null )", "+\t\t\t\tfactories.add( factory );", "+\t\t}", "+\t\treturn factories;", "+\t}", "-", "-    private void _loadFactory(final String className, final ClassLoader classLoader)", "-    {", "-        try {", "-            if (_verboseLoad) {", "-                System.err.println(\"\\tAttempting to load APT factory class \\\"\" + className + \"\\\"...\");", "-            }", "-            Class c = classLoader.loadClass(className);", "-            Constructor ctor = c.getDeclaredConstructor( new Class[0] );", "-            AnnotationProcessorFactory factory = ( AnnotationProcessorFactory ) ctor.newInstance( new Object[0] );", "-            if (factory != null) {", "-                if(!_factories.contains( factory) )", "-                    _factories.add(factory);", "-            }", "-            if (_verboseLoad) {", "-                System.err.println(\"\\t... succeeded.\");", "-            }", "-        }", "-        catch (Throwable t) {", "-            if (_verboseLoad) {", "-                System.err.println(\"\\t... failed: \" + t);", "-                if (t.getCause() != null) t.getCause().printStackTrace(System.err);", "-            }", "-            // Uncomment this to debug exception throws that are real.", "-            //throw new IllegalStateException(t);", "-        }", "-    }"]}], "num": 12572}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f262734a3350b4066207dd6e1897ae7f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78ca866e86cea58ac232f870932db0ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "d182faf3c9939796c87e77e82df5eea1b2c4bb75", "commitAfterChange": "8ef2e19ed4ad065a565f0c2b4b16065aa807e82f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate void format(MultiFieldDeclaration multiFieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "signatureAfterChange": " \t \tprivate void format(MultiFieldDeclaration multiFieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "diff": ["-\t\t\t\t\t\tif (!(initialization instanceof ArrayInitializer) && this.preferences.insert_space_after_assignment_operator) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\tif (initialization instanceof ArrayInitializer) {", "+\t\t\t\t\t\t\tformatArrayInitializer((ArrayInitializer) initialization, scope, this.preferences.insert_space_after_assignment_operator || this.preferences.insert_space_before_opening_brace_in_array_initializer);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_assignment_operator) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tinitialization.traverse(this, scope);", "-\t\t\t\t\t\tinitialization.traverse(this, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d799ac21f393b67a075be97d5186e11b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f9b051d5e41bd27efd803711c20da8dcd750758f", "commitAfterChange": "30e745fbf3ea6ef7e0fc020627656bfc553d5256", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "diff": ["-\t\t\t\tinitializations[i].traverse(this, scope);", "-\t\t\t\tif (i >= 0 && (i < length - 1) && !(initializations[i] instanceof LocalDeclaration)) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_inits);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_for_inits) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (initializations[i] instanceof LocalDeclaration) {", "+\t\t\t\t\tformatLocalDeclaration((LocalDeclaration) initializations[i], scope, this.preferences.insert_space_before_comma_in_for_inits, this.preferences.insert_space_after_comma_in_for_inits);", "+\t\t\t\t} else {", "+\t\t\t\t\tinitializations[i].traverse(this, scope);", "+\t\t\t\t\tif (i >= 0 && (i < length - 1)) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_inits);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_for_inits) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t}"]}], "num": 37562}
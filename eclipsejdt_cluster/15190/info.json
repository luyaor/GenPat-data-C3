{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73ec338372fb86a59eff160e47d0c763", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22000dd7768149eb110465d139692778", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\tif (expressionType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\tif (match == null) {", "-\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null, true);", "+\t\t\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\tif (castType instanceof ReferenceBinding) {", "-\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\tif (match != null) {", "-\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\tif (castType instanceof ReferenceBinding) {", "-\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\tif (match != null) {", "-\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(interfaceType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(interfaceType);", "-\t\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aae97813cb2cdf98242555fb371be97f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\tParameterizedTypeBinding parameterizedType = InferenceContext18.parameterizedWithWildcard(returnType);", "+\t\t\tif (inferenceContext.usesUncheckedConversion()) {", "+\t\t\t\t// spec says erasure, but we don't really have compatibility rules for erasure, use raw type instead:", "+\t\t\t\tTypeBinding erasure = inferenceContext.environment.convertToRawType(returnType, false);", "+\t\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(erasure, targetType, COMPATIBLE);", "+\t\t\t\treturn inferenceContext.reduceAndIncorporate(newConstraint);", "+\t\t\t}", "+\t\t\tTypeBinding rTheta = inferenceContext.substitute(returnType);", "+\t\t\tParameterizedTypeBinding parameterizedType = InferenceContext18.parameterizedWithWildcard(rTheta);", "-\t\t\t\tif (!inferenceContext.reduceAndIncorporate(newConstraint))", "-\t\t\t\t\treturn false;", "+\t\t\t\treturn inferenceContext.reduceAndIncorporate(newConstraint);", "-", "-\t\t\tif (targetType.isBaseType()) {", "-\t\t\t\tTypeBinding thetaR = inferenceContext.substitute(returnType);", "-\t\t\t\tif (thetaR instanceof InferenceVariable) {", "-\t\t\t\t\tTypeBinding wrapper = inferenceContext.currentBounds.findWrapperTypeBound((InferenceVariable)thetaR);", "-\t\t\t\t\tif (wrapper != null) {", "-\t\t\t\t\t\tif (!inferenceContext.reduceAndIncorporate(new ConstraintTypeFormula(thetaR, wrapper, ReductionResult.SAME))", "-\t\t\t\t\t\t\t|| !inferenceContext.reduceAndIncorporate(new ConstraintTypeFormula(wrapper, targetType, ReductionResult.COMPATIBLE)))", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "+\t\t\tif (rTheta instanceof InferenceVariable) {", "+\t\t\t\tInferenceVariable alpha = (InferenceVariable) rTheta;", "+\t\t\t\tboolean toResolve = false;", "+\t\t\t\tif (inferenceContext.currentBounds.condition18_5_2_bullet_3_3_1(alpha, targetType)) {", "+\t\t\t\t\ttoResolve = true;", "+\t\t\t\t} else if (inferenceContext.currentBounds.condition18_5_2_bullet_3_3_2(alpha, targetType, inferenceContext)) {", "+\t\t\t\t\ttoResolve = true;", "+\t\t\t\t} else if (targetType.isBaseType()) {", "+\t\t\t\t\tTypeBinding wrapper = inferenceContext.currentBounds.findWrapperTypeBound(alpha);", "+\t\t\t\t\tif (wrapper != null)", "+\t\t\t\t\t\ttoResolve = true;", "+\t\t\t\t}", "+\t\t\t\tif (toResolve) {", "+\t\t\t\t\tBoundSet solution = inferenceContext.solve(); // TODO: minimal resolving for only \u03b1", "+\t\t\t\t\tTypeBinding u = solution.getInstantiation(alpha).capture(inferenceContext.scope, invocationSite.sourceStart()); // TODO make position unique?", "+\t\t\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(u, targetType, COMPATIBLE);", "+\t\t\t\t\treturn inferenceContext.reduceAndIncorporate(newConstraint);", "-", "-\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(inferenceContext.substitute(returnType), targetType, COMPATIBLE);", "+\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(rTheta, targetType, COMPATIBLE);"]}], "num": 15190}
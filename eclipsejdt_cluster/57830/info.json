{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8341f1eb97c8717355028bb23fcfcb04", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e76786a73d1e6947b294a5938d1f68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "db9be76de74b56d6d850bf6fc58da2f76b6cafdd", "commitAfterChange": "08d03106dd01075a6d73c7857f8d76a79176b45d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\ttry {", "-\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "-\t\t} catch (IOException e) {", "-\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\treturn;", "-\t\t}", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\ttry {", "+\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eebf82cccdf4d38e7a91baee92fcf099", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "99d9827a13a83fa6bbad43196ec624282b8c65f9", "commitAfterChange": "f73ac72a4252a0f65e763fcd4775e57fa94c512c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "-\t\tsynchronized (this.userLibraries) {", "-\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\t\ttry {", "-\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\tinstancePreferences.flush();", "-\t\t\t} catch (BackingStoreException e) {", "-\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "-\t\t\t}", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary) {", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX + libName;", "+\t\ttry {", "+\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// preferenceChange(...))", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\treturn;", "-\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))", "+\t\ttry {", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t}", "+\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now."]}], "num": 57830}
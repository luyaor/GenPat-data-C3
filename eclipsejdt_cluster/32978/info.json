{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "793974d683f4150be004ad15c0093be1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809a8a20d1e437eccd92970104bcb889", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "commitAfterChange": "ed3a0c0705f2be20be3aaf856f81a3803e4ac341", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected int matchMethod(MethodBinding method, boolean skipImpossibleArg)", "signatureAfterChange": " protected int matchMethod(MethodBinding method, boolean skipImpossibleArg)", "diff": ["+\t\t\tif (argType.isTypeVariable()) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=123836, No point in textually comparing type variables, captures etc with concrete types. ", "+\t\t\t\tMethodBinding focusMethodBinding = this.matchLocator.getMethodBinding(this.pattern);", "+\t\t\t\tif (focusMethodBinding != null) {", "+\t\t\t\t\tif (matchOverriddenMethod(focusMethodBinding.declaringClass, focusMethodBinding, method)) {", "+\t\t\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0fddff80f81f829ea7c09cd33025bc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "commitAfterChange": "07061c09a4baa11ac0a53e425e478493f3662bd4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public VariableBinding[] getEmulationPath(LocalVariableBinding outerLocalVariable)", "signatureAfterChange": " public VariableBinding[] getEmulationPath(LocalVariableBinding outerLocalVariable)", "diff": ["+\tif (currentMethodScope.isLambdaScope()) {", "+\t\tLambdaExpression lambda = (LambdaExpression) currentMethodScope.referenceContext;", "+\t\tSyntheticArgumentBinding syntheticArgument;", "+\t\tif ((syntheticArgument = lambda.getSyntheticArgument(outerLocalVariable)) != null) {", "+\t\t\treturn new VariableBinding[] { syntheticArgument };", "+\t\t}", "+\t}"]}], "num": 32978}
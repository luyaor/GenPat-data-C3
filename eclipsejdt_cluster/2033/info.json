{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f6d96e0f6d1b97dd28123b91cb75911", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97b81c0be5790c3090b3a6c17a9f1843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "b93a217fe6b68aa2016c37812b125d5d097ba1a3", "commitAfterChange": "1beaef02926dace59f07acb73879fd00f7c0b3eb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["+\t\t\tif (expression instanceof ConditionalExpression && expression.isPolyExpression()) {", "+\t\t\t\t// drill into both branches:", "+\t\t\t\tConditionalExpression ce = ((ConditionalExpression) expression);", "+\t\t\t\tint status1 = NullAnnotationMatching.checkAssignment(currentScope, flowContext, var, ce.ifTrueNullStatus, ce.valueIfTrue, ce.valueIfTrue.resolvedType);", "+\t\t\t\tint status2 = NullAnnotationMatching.checkAssignment(currentScope, flowContext, var, ce.ifFalseNullStatus, ce.valueIfFalse, ce.valueIfFalse.resolvedType);", "+\t\t\t\tif (status1 == status2)", "+\t\t\t\t\treturn status1;", "+\t\t\t\treturn nullStatus; // if both branches disagree use the precomputed & merged nullStatus", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7f08b8448f011d4d7e056eb56bfce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "b93a217fe6b68aa2016c37812b125d5d097ba1a3", "commitAfterChange": "1beaef02926dace59f07acb73879fd00f7c0b3eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "signatureAfterChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "diff": ["+\tif (argument instanceof ConditionalExpression && argument.isPolyExpression()) {", "+\t\t// drill into both branches using existing nullStatus per branch:", "+\t\tConditionalExpression ce = (ConditionalExpression) argument;", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfTrue, ce.ifTrueNullStatus, expectedNonNullness, originalExpected);", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfFalse, ce.ifFalseNullStatus, expectedNonNullness, originalExpected);", "+\t\treturn;", "+\t}", "-\t", "+\tinternalAnalyseOneArgument18(currentScope, flowContext, expectedType, argument, nullStatus,", "+\t\t\t\t\t\t\t\t\texpectedNonNullness, originalExpected);", "+}"]}], "num": 2033}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f01e24a0ff9f4f11b2220e922178309b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "216f92472261542ca3f841eefc95f2e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void test001()", "signatureAfterChange": " \tpublic void test001()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA001 =", "-\t\t\t\t\"public class A001 {\\n\" +", "-\t\t\t\t\"\tprivate int i = 6;\\n\" +", "-\t\t\t\t\"\tpublic int foo() {\\n\" +", "-\t\t\t\t\"\t\tclass A {\\n\" +", "-\t\t\t\t\"\t\t\tint get() {\\n\" +", "-\t\t\t\t\"\t\t\t\treturn i;\\n\" +", "-\t\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\"\t\treturn new A().get();\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"};\";", "-\t\t\tcompileAndDeploy(sourceA001, \"A001\");", "-\t\t\ttry {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.classfmt.ClassFileReader classFileReader = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(EVAL_DIRECTORY + File.separator + \"A001.class\");", "-\t\t\t\tIBinaryMethod[] methods = classFileReader.getMethods();", "-\t\t\t\tassertEquals(\"wrong size\", 3, methods.length);", "-\t\t\t\tMethodInfo methodInfo = (MethodInfo) methods[2];", "-\t\t\t\tassertEquals(\"wrong name\", \"access$0\", new String(methodInfo.getSelector()));", "-\t\t\t\tassertTrue(\"Not synthetic\", methodInfo.isSynthetic());", "-\t\t\t} catch (ClassFormatException e) {", "-\t\t\t\tassertTrue(false);", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tassertTrue(false);", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A001\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A001 {\\n\" +", "+\t\t\t\"\tprivate int i = 6;\\n\" +", "+\t\t\t\"\tpublic int foo() {\\n\" +", "+\t\t\t\"\t\tclass A {\\n\" +", "+\t\t\t\"\t\t\tint get() {\\n\" +", "+\t\t\t\"\t\t\t\treturn i;\\n\" +", "+\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\"\t\t}\\n\" +", "+\t\t\t\"\t\treturn new A().get();\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"};\";", "+\t\tString expectedOutput = ", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A001.java\\n\" + ", "+\t\t\t\"class A001 extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  private int i;\\n\" + ", "+\t\t\t\"  /*  Field descriptor #6 I */\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #8 ()V */\\n\" + ", "+\t\t\t\"  public A001();\\n\" + ", "+\t\t\t\"    /* Stack: 2, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  aload_0\\n\" + ", "+\t\t\t\"       1  invokespecial #11 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"       4  aload_0\\n\" + ", "+\t\t\t\"       5  bipush 6\\n\" + ", "+\t\t\t\"       7  putfield #13 <Field A001#i int>\\n\" + ", "+\t\t\t\"      10  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"      [pc: 4, line: 2]\\n\" + ", "+\t\t\t\"      [pc: 10, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 11] local: this index: 0 type: A001\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #19 ()I */\\n\" + ", "+\t\t\t\"  public int foo();\\n\" + ", "+\t\t\t\"    /* Stack: 3, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  new #21 A001$1$A\\n\" + ", "+\t\t\t\"       3  dup\\n\" + ", "+\t\t\t\"       4  aload_0\\n\" + ", "+\t\t\t\"       5  invokespecial #24 <Constructor A001$1$A(A001 arg)>\\n\" + ", "+\t\t\t\"       8  invokevirtual #27 <Method A001$1$A#get() int>\\n\" + ", "+\t\t\t\"      11  ireturn\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 9]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 12] local: this index: 0 type: A001\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #29 (LA001;)I */\\n\" + ", "+\t\t\t\"  static int access$0(A001 arg);\\n\" + ", "+\t\t\t\"    \\n\" + ", "+\t\t\t\"    Attribute:\\n\" + ", "+\t\t\t\"      Name: Synthetic Length: 0\\n\" + ", "+\t\t\t\"  /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  getfield #13 <Field A001#i int>\\n\" + ", "+\t\t\t\"      4  ireturn\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 2]\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  Inner classes attributes:\\n\" + ", "+\t\t\t\"    [\\n\" + ", "+\t\t\t\"      inner class info name: #21 A001$1$A\\n\" + ", "+\t\t\t\"      outer class info name: #0\\n\" + ", "+\t\t\t\"      inner name: #34 A\\n\" + ", "+\t\t\t\"      accessflags: 2 private ]\\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A001\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "244dbcc44989a0e3b658e4727b5bc449", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "ff6bd4a24d4f2cbfd5389b0853cb385001b567ce", "commitAfterChange": "11634663a901186dd4805f3548640bfd7f88d73b", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 297, "signatureBeforeChange": " \tpublic void _test0652() throws JavaModelException", "signatureAfterChange": " \tpublic void test0652() throws CoreException", "diff": ["-\tpublic void _test0652() throws JavaModelException {", "-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "+\tpublic void test0652() throws CoreException {", "+\t\tASTResult result = this.buildMarkedAST(", "+\t\t\t\t\"/Converter/src/TestCharset.java\",", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy,", "-\t\t\t\tfalse,", "-\t\t\t\ttrue);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit unit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(unit, 1);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t\t\t\"}\");", "+\t\t", "+\t\tassertASTResult(", "+\t\t\t\t\"===== AST =====\\n\" + ", "+\t\t\t\t\"import java.nio.ByteBuffer;\\n\" + ", "+\t\t\t\t\"import java.nio.CharBuffer;\\n\" + ", "+\t\t\t\t\"import java.nio.charset.Charset;\\n\" + ", "+\t\t\t\t\"import java.nio.charset.CharsetDecoder;\\n\" + ", "+\t\t\t\t\"import java.nio.charset.CharsetEncoder;\\n\" + ", "+\t\t\t\t\"import java.nio.charset.CoderResult;\\n\" + ", "+\t\t\t\t\"public class TestCharset extends Charset {\\n\" + ", "+\t\t\t\t\"  public CharsetDecoder newDecoder(){\\n\" + ", "+\t\t\t\t\"    return new CharsetDecoder(this,2.0,2.0){\\n\" + ", "+\t\t\t\t\"      void CharsetDecoder(){\\n\" + ", "+\t\t\t\t\"      }\\n\" + ", "+\t\t\t\t\"      protected CoderResult decodeLoop(      ByteBuffer in,      CharBuffer out){\\n\" + ", "+\t\t\t\t\"        return null;\\n\" + ", "+\t\t\t\t\"      }\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\";\\n\" + ", "+\t\t\t\t\"    ;\\n\" + ", "+\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\"  public CharsetEncoder newEncoder(){\\n\" + ", "+\t\t\t\t\"    return null;\\n\" + ", "+\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"===== Details =====\\n\" + ", "+\t\t\t\t\"===== Problems =====\\n\" + ", "+\t\t\t\t\"1. ERROR in /Converter/src/TestCharset.java (at line 1)\\n\" + ", "+\t\t\t\t\"\timport java.nio.ByteBuffer;\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The import java.nio cannot be resolved\\n\" + ", "+\t\t\t\t\"2. ERROR in /Converter/src/TestCharset.java (at line 2)\\n\" + ", "+\t\t\t\t\"\timport java.nio.CharBuffer;\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The import java.nio cannot be resolved\\n\" + ", "+\t\t\t\t\"3. ERROR in /Converter/src/TestCharset.java (at line 3)\\n\" + ", "+\t\t\t\t\"\timport java.nio.charset.Charset;\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The import java.nio cannot be resolved\\n\" + ", "+\t\t\t\t\"4. ERROR in /Converter/src/TestCharset.java (at line 4)\\n\" + ", "+\t\t\t\t\"\timport java.nio.charset.CharsetDecoder;\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The import java.nio cannot be resolved\\n\" + ", "+\t\t\t\t\"5. ERROR in /Converter/src/TestCharset.java (at line 5)\\n\" + ", "+\t\t\t\t\"\timport java.nio.charset.CharsetEncoder;\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The import java.nio cannot be resolved\\n\" + ", "+\t\t\t\t\"6. ERROR in /Converter/src/TestCharset.java (at line 6)\\n\" + ", "+\t\t\t\t\"\timport java.nio.charset.CoderResult;\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The import java.nio cannot be resolved\\n\" + ", "+\t\t\t\t\"7. ERROR in /Converter/src/TestCharset.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic class TestCharset extends Charset {\\n\" + ", "+\t\t\t\t\"\t                                 ^^^^^^^\\n\" + ", "+\t\t\t\t\"Charset cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"8. ERROR in /Converter/src/TestCharset.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic CharsetDecoder newDecoder() {\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"CharsetDecoder cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"9. ERROR in /Converter/src/TestCharset.java (at line 9)\\n\" + ", "+\t\t\t\t\"\treturn new CharsetDecoder(this, 2.0, 2.0) {\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"CharsetDecoder cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"10. ERROR in /Converter/src/TestCharset.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tCharsetDecoder(CharSet\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Syntax error on token(s), misplaced construct(s)\\n\" + ", "+\t\t\t\t\"11. ERROR in /Converter/src/TestCharset.java (at line 17)\\n\" + ", "+\t\t\t\t\"\tpublic CharsetEncoder newEncoder() {\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"CharsetEncoder cannot be resolved to a type\\n\",", "+\t\t\t\tresult);", "-\t}"]}], "num": 14028}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06df92444b3a9aaf75f00035322f6fcd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "714d79b433b1f939b9f3af14543893d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void testTypeRefGeneric01() throws CoreException", "signatureAfterChange": " public void testTypeRefGeneric01() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java [import \ufffd|type.def.Types|\ufffd;@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {@178] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java [import \ufffd|type.def.Types|\ufffd;@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends \ufffd|Types|\ufffd implements Comparable<Types>, Serializable {@345] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic int compareTo(\ufffd|Types|\ufffd o) {@468] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java [import !|type.def.Types|!;@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {@178] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java [import !|type.def.Types|!;@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends !|Types|! implements Comparable<Types>, Serializable {@345] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic int compareTo(!|Types|! o) {@468] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa8df722e2baf8cab5da01ea0066d7c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void testTypeRefGeneric01_AllFlags() throws CoreException", "signatureAfterChange": " public void testTypeRefGeneric01_AllFlags() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java [import \ufffd|type.def.Types|\ufffd;@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {@178] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java [import \ufffd|type.def.Types|\ufffd;@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends \ufffd|Types|\ufffd implements Comparable<Types>, Serializable {@345] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic int compareTo(\ufffd|Types|\ufffd o) {@468] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java [import !|type.def.Types|!;@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {@178] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java [import !|type.def.Types|!;@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends !|Types|! implements Comparable<Types>, Serializable {@345] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java int test01.UClass.compareTo(Types) [\tpublic int compareTo(!|Types|! o) {@468] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}], "num": 34361}
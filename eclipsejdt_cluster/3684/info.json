{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4eb992e984a420c5f664d38280bf7d10", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "023ee822851421bc70fd6bbc9ba3a238", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "55a7556711dc91579fb591d318cd652e79ebf6a7", "commitAfterChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tprotected void assertClasspathEquals(IClasspathEntry[] classpath, String expected)", "signatureAfterChange": " \tprotected void assertClasspathEquals(IClasspathEntry[] classpath, String expected)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tint length = classpath == null ? 0 : classpath.length;", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tbuffer.append(classpath[i]);", "-\t\t\tif (i < length-1)", "-\t\t\t\tbuffer.append('\\n');", "+\t\tString actual;", "+\t\tif (classpath == null) {", "+\t\t\tactual = \"<null>\";", "+\t\t} else {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tint length = classpath.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tbuffer.append(classpath[i]);", "+\t\t\t\tif (i < length-1)", "+\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t}", "+\t\t\tactual = buffer.toString();", "-\t\tString actual = buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2c7d05fcad0e39f6b8963f5a24954d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "999bcda04cb6d6af2ffd5ec4d0e38a056d1cb17e", "commitAfterChange": "e85c64b61dd0fccd3fba59ad01cfd55ac35b4723", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException", "diff": ["-\t\t\t\tHashMap problemMap = this.problems == null ? new HashMap() : this.problems;", "-\t\t\t\tif (this.forceProblemDetection && this.problems == null) ", "-\t\t\t\t\tthis.problems = problemMap;", "+\t\t\t\tHashMap problemMap;", "+\t\t\t\tif (this.problems == null) {", "+\t\t\t\t\tproblemMap = new HashMap();", "+\t\t\t\t\tif (this.forceProblemDetection)", "+\t\t\t\t\t\tthis.problems = problemMap;", "+\t\t\t\t} else", "+\t\t\t\t\tproblemMap = this.problems;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23332d7de1ccbdf81d07fb3b6d4fd9b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "f5ff2046c1dd770af53f5817ae814fe5afa0b321", "commitAfterChange": "910ddfb0a69780d141bc1b44c0e8d3aabb813532", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate boolean addConstraintsToC_OneExpr(Expression expri, Set<ConstraintFormula> c, TypeBinding fsi, TypeBinding substF, MethodBinding method)", "signatureAfterChange": "  \tprivate boolean addConstraintsToC_OneExpr(Expression expri, Set<ConstraintFormula> c, TypeBinding fsi, TypeBinding substF, MethodBinding method)", "diff": ["-\t\t\t\tint innerKind = innerCtx != null ? innerCtx.inferenceKind : this.inferenceKind;", "-\t\t\t\treturn addConstraintsToC(invocation.arguments(), c, innerMethod.genericMethod(), innerKind);", "+\t\t\t\tif (innerCtx != null) { // otherwise innerMethod does not participate in inference", "+\t\t\t\t\treturn addConstraintsToC(invocation.arguments(), c, innerMethod.genericMethod(), innerCtx.inferenceKind);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed3f9a75f489549ce60dc934750a1a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "9c622a725bd1781235642601f30ea554da5b3d83", "commitAfterChange": "03a380bfa1976c7afb0666b83988f9c0efd1b83c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "signatureAfterChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "diff": ["-\t\t\t\tchar[] typeName = ", "-\t\t\t\t\tfieldDeclaration.type == null ? // case of enum", "-\t\t\t\t\t\t\tdeclaringType.name: ", "-\t\t\t\t\t\t\tCharOperation.concatWith(fieldDeclaration.type.getParameterizedTypeName(), '.');", "+\t\t\t\tchar[] typeName = null;", "+\t\t\t\tif (fieldDeclaration.type == null) {", "+\t\t\t\t\t// enum constant", "+\t\t\t\t\ttypeName = declaringType.name;", "+\t\t\t\t\tcurrentModifiers |= AccEnum;", "+\t\t\t\t} else {", "+\t\t\t\t\t// regular field", "+\t\t\t\t\ttypeName = CharOperation.concatWith(fieldDeclaration.type.getParameterizedTypeName(), '.');", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7d3818069fb1d939397f5442f33f7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "859f7f1e14bcaa807f32fbeee774c9ffd3512393", "commitAfterChange": "3ad1026b0827c10e02b527a5b1b393bd809b3628", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element)", "signatureAfterChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element)", "diff": ["-\t\tChangeCollector collector = this.changeCollector == null ? new ChangeCollector(this) : this.changeCollector;", "+\t\tChangeCollector collector = this.changeCollector;", "+\t\tif (collector == null) {", "+\t\t    collector = new ChangeCollector(this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de25d8d9e67464f18b66b50e7c997f08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "de4b7bdd89919457ca271598365f7ba9556cd997", "commitAfterChange": "b26a664ac93cb33d6cf50930ea25f3388ced39d8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t\t\tif (reference instanceof SingleMemberAnnotation) {", "+\t\t\t\treference = ((SingleMemberAnnotation)reference).memberValuePairs()[0];", "+\t\t\t\tmatch.setImplicit(true);", "+\t\t\t}", "+\t\t\tint length =  reference.sourceEnd - offset + 1;", "-\t\t\tint length = (reference instanceof SingleMemberAnnotation) ? 0 : reference.sourceEnd - offset + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f74b5010143cd6f6591743569367b848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "83aa074d1edc1431b30e3bdffeaa5b8dd0bf1353", "commitAfterChange": "10d9ee7d6cd7cd29aebe50986af8fcc7cd9d4e32", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void setupExternalAnnotationProvider(IProject project, final IPath externalAnnotationPath, \t\tZipFile annotationZip, ClassFileReader reader, final String typeName)", "signatureAfterChange": "  private void setupExternalAnnotationProvider(IProject project, final IPath externalAnnotationPath, \t\tZipFile annotationZip, ClassFileReader reader, final String typeName)", "diff": ["-\tIResource resource = externalAnnotationPath.segmentCount() == 1", "-\t\t\t? root.getProject(externalAnnotationPath.lastSegment())", "-\t\t\t: root.getFolder(externalAnnotationPath);", "-\tif (!resource.exists())", "-\t\tresource = root.getFile(externalAnnotationPath);", "+\tIResource resource;", "+\tif (externalAnnotationPath.segmentCount() == 1) {", "+\t\tresource = root.getProject(externalAnnotationPath.lastSegment());", "+\t} else {", "+\t\tresource = root.getFolder(externalAnnotationPath);", "+\t\tif (!resource.exists())", "+\t\t\tresource = root.getFile(externalAnnotationPath);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea8875ffe85845dc5488127ebc77e42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "5914e66771be7da6ef8574c5e81087b9d580e133", "commitAfterChange": "2ba202e3d57870624ad4e83e687c0572d9389a44", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "\t  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\tchar[] typeSignature = sourceLevel >= ClassFileConstants.JDK1_5 ? binaryType.getGenericSignature() : null;", "+\tchar[] typeSignature = null;", "+\tif (sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\ttypeSignature = binaryType.getGenericSignature();", "+\t\tthis.tagBits |= binaryType.getTagBits();", "+\t}"]}], "num": 3684}
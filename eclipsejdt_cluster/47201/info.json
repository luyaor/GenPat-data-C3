{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0feeb2ebeed14baee612aa9d3e30a726", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ba38ae3a2b766549219f425b8a0a2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "7315a9946428ac17ed2f3c53c5f292f76322b904", "commitAfterChange": "62f8132aa6e66bc79d2cfcc69b7efa69d325d62b", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["+\t\tthis.scanner.resetTo(commentStart, commentEnd);", "+\t\tthis.scanner.skipComments = true;", "-\t\t} else if (previousPosition < commentEnd) {", "+\t\t} else {", "-\t\taddReplaceEdit(commentStart, commentEnd-1, buffer.toString());", "+\t\taddReplaceEdit(commentStart, commentEnd, buffer.toString());", "+\t\tthis.scanner.skipComments = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7327934afc33200c6d63910120ac60c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "cb924aa1e344454d0d95de687a37524ed808452e", "commitAfterChange": "7cc08fd6458164ad4911bfd35d3157c5667751d0", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public ReferenceBinding[] superInterfaces()", "signatureAfterChange": " public ReferenceBinding[] superInterfaces()", "diff": ["-\t\t\tthis.superInterfaces[i].superclass();", "-\t\t\tthis.superInterfaces[i].superInterfaces();", "+\t\t\tboolean wasToleratingMissingTypeProcessingAnnotations = this.environment.mayTolerateMissingType;", "+\t\t\tthis.environment.mayTolerateMissingType = true; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=360164", "+\t\t\ttry {", "+\t\t\t\tthis.superInterfaces[i].superclass();", "+\t\t\t\tthis.superInterfaces[i].superInterfaces();", "+\t\t\t} finally {", "+\t\t\t\tthis.environment.mayTolerateMissingType = wasToleratingMissingTypeProcessingAnnotations;", "+\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f4c4ea33ab1652273c28ad4bf004f22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "cb924aa1e344454d0d95de687a37524ed808452e", "commitAfterChange": "7cc08fd6458164ad4911bfd35d3157c5667751d0", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public ReferenceBinding superclass()", "signatureAfterChange": " public ReferenceBinding superclass()", "diff": ["-\t\tthis.superclass.superclass();", "-\t\tthis.superclass.superInterfaces();", "+\t\tboolean wasToleratingMissingTypeProcessingAnnotations = this.environment.mayTolerateMissingType;", "+\t\tthis.environment.mayTolerateMissingType = true; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=360164", "+\t\ttry {", "+\t\t\tthis.superclass.superclass();", "+\t\t\tthis.superclass.superInterfaces();", "+\t\t} finally {", "+\t\t\tthis.environment.mayTolerateMissingType = wasToleratingMissingTypeProcessingAnnotations;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdd46d52a687a40dfc1ea942b85e799f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "86113d82738e778f8e0f07729ab352d227a867ad", "commitAfterChange": "2d89f0516f5e5910bcd18015e8090ed0805dbb4e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public boolean hasTypeBit(int bit)", "signatureAfterChange": " public boolean hasTypeBit(int bit)", "diff": ["-\tsuperclass();", "-\tsuperInterfaces();", "+\tboolean wasToleratingMissingTypeProcessingAnnotations = this.environment.mayTolerateMissingType;", "+\tthis.environment.mayTolerateMissingType = true;", "+\ttry {", "+\t\tsuperclass();", "+\t\tsuperInterfaces();", "+\t} finally {", "+\t\tthis.environment.mayTolerateMissingType = wasToleratingMissingTypeProcessingAnnotations;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4f5d4a776722af5b73526aa35935da9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "9c3c9a68123a2dba6c0a481afee1d6f36fcdd02a", "commitAfterChange": "c00079358eb2e0feded1f86b5088b09215957a9d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "signatureAfterChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "diff": ["-\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0)", "-\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0) {", "+\t\t\tboolean mayTolerateMissingType = this.environment.mayTolerateMissingType;", "+\t\t\tthis.environment.mayTolerateMissingType = true;", "+\t\t\ttry {", "+\t\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\t\t} finally {", "+\t\t\t\tthis.environment.mayTolerateMissingType = mayTolerateMissingType;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d83764acaa49b330b55194903eb2d83a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5f660283883cb036f6f2660e9305988c653cd514", "commitAfterChange": "0a2561a9f4fa2cd8d6a7920515eebbf8940cc034", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "signatureAfterChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "diff": ["-\t\t\t\tif (info != null)", "-\t\t\t\t\tnew ClassFileMatchLocator().locateMatches(this, classFile, info);", "+\t\t\t\tif (info != null) {", "+\t\t\t\t\tboolean mayBeGeneric = this.patternLocator.mayBeGeneric;", "+\t\t\t\t\tthis.patternLocator.mayBeGeneric = false; // there's no longer generics in class files", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tnew ClassFileMatchLocator().locateMatches(this, classFile, info);", "+\t\t\t\t\t}", "+\t\t\t\t\tfinally {", "+\t\t\t\t\t\tthis.patternLocator.mayBeGeneric = mayBeGeneric;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f74c32d8ad9959b9db8a3dc9c6603a0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "41c514d67e1bf2f005d0df7a8e731d17945a9b63", "commitAfterChange": "646c3199ccdcd10932c0b6c854e2ffd3d0892f37", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseHref() throws InvalidInputException", "diff": ["-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\tchar currentChar = readChar();", "-\t\tif (currentChar == 'a' || currentChar == 'A') {", "-\t\t\tthis.scanner.currentPosition = this.index;", "-\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\tconsumeToken();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), HREF_TAG, false) &&", "-\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "+\t\tboolean skipComments = this.scanner.skipComments;", "+\t\tthis.scanner.skipComments = true;", "+\t\ttry {", "+\t\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\t\tchar currentChar = readChar();", "+\t\t\tif (currentChar == 'a' || currentChar == 'A') {", "+\t\t\t\tthis.scanner.currentPosition = this.index;", "+\t\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), HREF_TAG, false) &&", "+\t\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "-\t\t\t\t\t\t\twhile (this.index < this.javadocEnd) { // main loop to search for the </a> pattern", "-\t\t\t\t\t\t\t\t// Skip all characters after string literal until closing '>' (see bug 68726)", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "-\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "-\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "-\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "-\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "+\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\twhile (this.index < this.javadocEnd) { // main loop to search for the </a> pattern", "+\t\t\t\t\t\t\t\t\t// Skip all characters after string literal until closing '>' (see bug 68726)", "+\t\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // consume token without updating line end", "-\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // consume token without updating line end", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tconsumeToken(); // update line end as new lines are allowed in URL description", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "-\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "-\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "-\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "-\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\tconsumeToken(); // update line end as new lines are allowed in URL description", "+\t\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\tcurrentChar = readChar();", "-\t\t\t\t\t\t\t\t// search for the </a> pattern and store last char read", "-\t\t\t\t\t\t\t\tif (currentChar == '/') {", "+\t\t\t\t\t\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\t\tif (currentChar == 'a' || currentChar =='A') {", "+\t\t\t\t\t\t\t\t\t// search for the </a> pattern and store last char read", "+\t\t\t\t\t\t\t\t\tif (currentChar == '/') {", "-\t\t\t\t\t\t\t\t\t\tif (currentChar == '>') {", "-\t\t\t\t\t\t\t\t\t\t\treturn true; // valid href", "+\t\t\t\t\t\t\t\t\t\tif (currentChar == 'a' || currentChar =='A') {", "+\t\t\t\t\t\t\t\t\t\t\tcurrentChar = readChar();", "+\t\t\t\t\t\t\t\t\t\t\tif (currentChar == '>') {", "+\t\t\t\t\t\t\t\t\t\t\t\treturn true; // valid href", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// search for invalid char in tags", "-\t\t\t\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n' || currentChar == '\\t' || currentChar == ' ') {", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t// search for invalid char in tags", "+\t\t\t\t\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n' || currentChar == '\\t' || currentChar == ' ') {", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (InvalidInputException ex) {", "+\t\t\t\t\t\t// Do nothing as we want to keep positions for error message", "-\t\t\t\t} catch (InvalidInputException ex) {", "-\t\t\t\t\t// Do nothing as we want to keep positions for error message", "+\t\t\t// Reset position: we want to rescan last token", "+\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\tthis.currentTokenType = -1;", "+\t\t\t// Signal syntax error", "+\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\t\t}", "-\t\t// Reset position: we want to rescan last token", "-\t\tthis.index = this.tokenPreviousPosition;", "-\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\tthis.currentTokenType = -1;", "-\t\t// Signal syntax error", "-\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "-\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidSeeHref(start, this.lineEnd);", "+\t\tfinally {", "+\t\t\tthis.scanner.skipComments = skipComments;"]}], "num": 47201}
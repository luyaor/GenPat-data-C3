{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b32a42a858894fa2f7c7ad47db6b2821", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3b31ec426430e8e0a8e4e70e4611dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \t \tpublic IJavaElement getJavaElement()", "diff": ["-\t\tITypeBinding annotationType = getAnnotationType();", "-\t\tif (annotationType == null)", "+\t\tif (!(this.bindingResolver instanceof DefaultBindingResolver)) return null;", "+\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.bindingResolver).bindingsToAstNodes.get(this);", "+\t\tif (!(node instanceof Annotation)) return null;", "+\t\tASTNode parent = node.getParent();", "+\t\tIJavaElement parentElement = null;", "+\t\tswitch (parent.getNodeType()) {", "+\t\tcase ASTNode.PACKAGE_DECLARATION:", "+\t\t\tIJavaElement cu = ((CompilationUnit) parent.getParent()).getJavaElement();", "+\t\t\tif (cu instanceof ICompilationUnit) {", "+\t\t\t\tString pkgName = ((PackageDeclaration) parent).getName().getFullyQualifiedName();", "+\t\t\t\tparentElement =  ((ICompilationUnit) cu).getPackageDeclaration(pkgName);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase ASTNode.TYPE_DECLARATION:", "+\t\t\tparentElement = ((TypeDeclaration) parent).resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tcase ASTNode.FIELD_DECLARATION:", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) ((FieldDeclaration) parent).fragments().get(0);", "+\t\t\tparentElement = fragment.resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tcase ASTNode.METHOD_DECLARATION:", "+\t\t\tparentElement = ((MethodDeclaration) parent).resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT:", "+\t\t\tfragment = (VariableDeclarationFragment) ((VariableDeclarationStatement) parent).fragments().get(0);", "+\t\t\tparentElement = fragment.resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tdefault:", "-\t\treturn annotationType.getJavaElement();", "+\t\t}", "+\t\tif (! (parentElement instanceof IAnnotatable)) return null;", "+\t\treturn ((IAnnotatable) parentElement).getAnnotation(getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6a8fad9e5fb533c280ee2a4bee6738", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/CompilationUnitSorter.java", "commitBeforeChange": "f8c62e1959300f5da932cbd33d28a46243b4258b", "commitAfterChange": "29291a00d45f7fc23b6ab4487b131f3aacb400b1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t\tint compareParams( \t\t\tMethodDeclaration method1, \t\t\tMethodDeclaration method2)", "signatureAfterChange": "  \t\tprivate String buildSignature(BodyDeclaration node)", "diff": ["-\t", "-\t\tint compareParams(", "-\t\t\tMethodDeclaration method1,", "-\t\t\tMethodDeclaration method2) {", "-\t\t\tint compare;", "-\t\t\tfinal List parameters1 = method1.parameters();", "-\t\t\tfinal List parameters2 = method2.parameters();", "-\t\t\tint length1 = parameters1.size();", "-\t\t\tint length2 = parameters2.size();", "-\t\t\tint len= Math.min(length1, length2);", "-\t\t\tfor (int i = 0; i < len; i++) {", "-\t\t\t\tcompare = this.collator.compare(((SingleVariableDeclaration) parameters1.get(i)).getName().getIdentifier(), ((SingleVariableDeclaration) parameters2.get(i)).getName().getIdentifier());", "-\t\t\treturn length1 - length2;", "+", "+\t\tprivate String buildSignature(BodyDeclaration node) {", "+\t\t\tswitch(node.getNodeType()) {", "+\t\t\t\tcase ASTNode.METHOD_DECLARATION :", "+\t\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tbuffer.append(methodDeclaration.getName().getIdentifier());", "+\t\t\t\t\tfinal List parameters = methodDeclaration.parameters();", "+\t\t\t\t\tint length1 = parameters.size();", "+\t\t\t\t\tfor (int i = 0; i < length1; i++) {", "+\t\t\t\t\t\tbuffer.append(((SingleVariableDeclaration) parameters.get(i)).getName().getIdentifier());", "+\t\t\t\t\t}", "+\t\t\t\t\treturn buffer.toString();", "+\t\t\t\tcase ASTNode.FIELD_DECLARATION :", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\t\t\t\treturn ((VariableDeclarationFragment) fieldDeclaration.fragments().get(0)).getName().getIdentifier();", "+\t\t\t\tcase ASTNode.INITIALIZER :", "+\t\t\t\t\treturn ((Integer) node.getProperty(CompilationUnitSorter.SOURCE_START)).toString();", "+\t\t\t\tcase ASTNode.TYPE_DECLARATION :", "+\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\t\t\t\treturn typeDeclaration.getName().getIdentifier();", "+\t\t\t}", "+\t\t\treturn null;"]}], "num": 5444}
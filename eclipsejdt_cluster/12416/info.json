{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "296ee71cfd0aaea89faa696398f50508", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a09e71bceca65434800113ba755703", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 196, "methodNumberAfterChange": 196, "signatureBeforeChange": " public void test406614()", "signatureAfterChange": " public void test406614()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> this.f) is undefined\\n\" + ", "+\t\t\t\"\t           ^^^^\\n\" + ", "+\t\t\t\"Cannot refer to \\'this\\' nor \\'super\\' while explicitly invoking a constructor\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> this.g()) is undefined\\n\" + ", "+\t\t\t\"\t           ^^^^\\n\" + ", "+\t\t\t\"Cannot refer to \\'this\\' nor \\'super\\' while explicitly invoking a constructor\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> f) is undefined\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Cannot refer to an instance field f while explicitly invoking a constructor\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> g()) is undefined\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Cannot refer to an instance method while explicitly invoking a constructor\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b12edf179f3ac5508ddf422312d549e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void test033()", "signatureAfterChange": " public void test033()", "diff": ["-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type String for expression of type String\\n\" + ", "+\t\t\"Unnecessary cast from String to String\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type String for expression of type String\\n\" + ", "+\t\t\"Unnecessary cast from String to String\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a215a62c5df0be6eef29cac08ef2d206", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1329, "methodNumberAfterChange": 1329, "signatureBeforeChange": " public void test1295()", "signatureAfterChange": " public void test1295()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 7)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<?>> list1 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<?>> list1 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 8)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<? extends Object>> list2 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<? extends Object>> list2 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 11)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"3. WARNING in X.java (at line 11)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 11)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 11)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0bbacff8f2d6318b7e97d130c6f802d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +"]}], "num": 12416}
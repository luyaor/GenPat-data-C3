{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "237fb8daa990c573bb9c239180e8fe54", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c63e7c8b98c90786e8f6313fe602d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\tType elementType= (Type) getChildNode(arrayType, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\tint dimensions= 1; // always include this array type", "-\t\twhile (elementType.isArrayType()) {", "-\t\t\tdimensions++;", "-\t\t\telementType = (Type) getChildNode(elementType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\tType elementType;", "+\t\tint dimensions;", "+\t\tboolean astLevelGTE8 = node.getAST().apiLevel() >= AST.JLS8 ? true : false;", "+\t\tif (astLevelGTE8) {", "+\t\t\telementType = (Type) getChildNode(arrayType, ArrayType.ELEMENT_TYPE_PROPERTY);", "+\t\t\tdimensions = getChildList(arrayType, ArrayType.DIMENSIONS_PROPERTY).size();", "+\t\t} else {", "+\t\t\telementType = (Type) getChildNode(arrayType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\tdimensions = 1; // always include this array type", "+\t\t\twhile (elementType.isArrayType()) {", "+\t\t\t\tdimensions++;", "+\t\t\t\telementType = (Type) getChildNode(elementType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\t}", "-\t\tType type= arrayType;", "-\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "-\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "-\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\t\t}", "+\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "-\t\t\tdimensions--;", "-\t\tfor (int i= 0; i < dimensions; i++) {", "-\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "-\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "-\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\t\t}", "+\t\tfor (int i= list.size(); i < dimensions; i++) {", "+\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc175dd09c85d288d19420277f9a2aa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "ac894da9b0ea3c039ce6982330527517abe54897", "commitAfterChange": "e3d1a6cf758d351b80734729b068cc97373e684d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["+", "+\t\telementType.accept(this);", "+", "+\t\t// add \"<annotations> [ <dimension> ]\" for each dimension expression", "+\t\tType type= arrayType;", "-\t\tvisitArrayTypeWithExpression(arrayType, list, --dimensions);", "+\t\tfor (int i= 0; i < list.size(); i++) {", "+\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "+\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "+\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\t}", "+\t\t\tthis.result.append('[');", "+\t\t\t((ASTNode) list.get(i)).accept(this);", "+\t\t\tthis.result.append(']');", "+\t\t\tdimensions--;", "+\t\t}", "+", "+\t\t// add \"<annotations> []\" for each extra array dimension", "+\t\tfor (int i= 0; i < dimensions; i++) {", "+\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "+\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "+\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\t}", "+\t\t\tthis.result.append(\"[]\"); //$NON-NLS-1$", "+\t\t}"]}], "num": 64145}
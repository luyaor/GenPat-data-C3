{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30fceb288ddddd9b5ebb2da73145d098", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0839231ffc372afcf05e1cb0325efcc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "740d8a3bbf7d827a9782a8704551b5892c828d42", "commitAfterChange": "37fa53fe1bcd1db81d377f564f101511c07818f5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public ReferenceBinding findSuperTypeErasingTo(ReferenceBinding erasure)", "signatureAfterChange": " public ReferenceBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "diff": ["-public ReferenceBinding findSuperTypeErasingTo(ReferenceBinding erasure) {", "+public ReferenceBinding findSuperTypeWithSameErasure(TypeBinding otherType) {", "-    if (this == erasure || erasure() == erasure) return this;", "+    if (this == otherType) return this;", "+    ", "+    // do not allow type variables to match with erasures for free", "+    if (!otherType.isTypeVariable()) {", "+    \totherType = otherType.erasure();", "+   \t    if (!isTypeVariable() && erasure() == otherType) return this;", "+    }", "+", "+    ", "-    if (!erasure.isInterface()) {", "+    if (!otherType.isInterface()) {", "-\t\t\tif (currentType == erasure || currentType.erasure() == erasure) return currentType;", "+\t\t\tif (currentType == otherType || currentType.erasure() == otherType) return currentType;", "-\t\t\tif ((currentType = interfaces[j]) == erasure || currentType.erasure() == erasure)", "+\t\t\tif ((currentType = interfaces[j]) == otherType || currentType.erasure() == otherType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0afc90ea3ae935b72268785f498d2ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t public boolean isCompatibleWith(TypeBinding right)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType)", "diff": ["-\t", "-public boolean isCompatibleWith(TypeBinding right) {", "-\tif (right == this)", "+public boolean isCompatibleWith(TypeBinding otherType) {", "+    ", "+\tif (otherType == this)", "-\tif (right.id == T_Object)", "+\tif (otherType.id == T_Object)", "-\tif (!(right instanceof ReferenceBinding))", "+\tif (!(otherType instanceof ReferenceBinding))", "-", "-\tReferenceBinding referenceBinding = (ReferenceBinding) right;", "-\tif (referenceBinding.isInterface())", "-\t\treturn implementsInterface(referenceBinding, true);", "+\tReferenceBinding otherReferenceType = (ReferenceBinding) otherType;", "+\tif (this.isEquivalentTo(otherReferenceType)) return true;", "+\tif (otherReferenceType.isWildcard()) {", "+\t    return ((WildcardBinding) otherReferenceType).boundCheck(this);", "+\t}", "+\tif (otherReferenceType.isInterface())", "+\t\treturn implementsInterface(otherReferenceType, true);", "-\treturn referenceBinding.isSuperclassOf(this);", "+\treturn otherReferenceType.isSuperclassOf(this);"]}], "num": 71578}
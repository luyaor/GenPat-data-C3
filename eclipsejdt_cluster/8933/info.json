{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a08622fdcca638558ce476b56224ffe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2785da87814bc1b03b6af5f21d12e9dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java", "commitBeforeChange": "ba3f3515e414cf41bff76ad382644021240dc399", "commitAfterChange": "0fef9e356bfc246dbfd0c9cfea1ba0d8941a3dcb", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t@Override \t@SuppressWarnings(\"unchecked\") \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "signatureAfterChange": "  \t@Override \t@SuppressWarnings(\"unchecked\") \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "diff": ["-\t\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleEndorseddirs(null));", "+\t\t\t\tfileSystemClasspaths.addAll(this.handleEndorseddirs(null));", "-\t\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleExtdirs(null));", "+\t\t\t\tfileSystemClasspaths.addAll(this.handleExtdirs(null));", "-\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleBootclasspath(null, null));", "-\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleClasspath(null, null));", "+\t\t\tfileSystemClasspaths.addAll(this.handleBootclasspath(null, null));", "+\t\t\tfileSystemClasspaths.addAll(this.handleClasspath(null, null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e206069a3049af00068e970aa2416b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(lastFieldBinding);", "+\t\t\tcodeStream.generateEmulationForField(lastFieldBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(lastFieldBinding);", "+\t\t\tcodeStream.generateEmulationForField(lastFieldBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(lastFieldBinding);", "+\t\tcodeStream.generateEmulatedWriteAccessForField(lastFieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58d0ef1eaffcd54f0d4cf0708dcb181a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "f088238ae1fb760b185880930475440a666bf830", "commitAfterChange": "375a0fbb2041e334fa134f32feaf7aa0b3d0bd4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic void complainOnRedundantFinalAssignments(\r \t\tFlowInfo flowInfo,\r \t\tBlockScope scope)", "signatureAfterChange": "\r \tpublic void complainOnRedundantFinalAssignments(\r \t\tFlowInfo flowInfo,\r \t\tBlockScope scope)", "diff": ["-\t\t\tif (((ref = finalAssignments[i]).bits & BindingIds.FIELD) != 0) {\r", "+\t\t\tif ((ref = finalAssignments[i]).isFieldReference()) {\r", "-\t\t\t\tif (flowInfo\r", "-\t\t\t\t\t.isPotentiallyAssigned((FieldBinding) ((NameReference) ref).binding)) {\r", "-\t\t\t\t\tscope.problemReporter().duplicateInitializationOfBlankFinalField(\r", "-\t\t\t\t\t\t(FieldBinding) ((NameReference) ref).binding,\r", "-\t\t\t\t\t\t(NameReference) ref);\r", "+\t\t\t\tif (flowInfo.isPotentiallyAssigned(ref.fieldBinding())) {\r", "+\t\t\t\t\tscope.problemReporter().duplicateInitializationOfBlankFinalField(ref.fieldBinding(), ref);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76c89754b78bf669e819468058474b34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(fieldBinding);", "+\t\t\t\t\tcodeStream.generateEmulationForField(fieldBinding);", "-\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(fieldBinding);", "+\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(fieldBinding);", "-\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(fieldBinding);", "+\t\t\t\t\tcodeStream.generateEmulationForField(fieldBinding);", "-\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(fieldBinding);", "+\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(fieldBinding);", "-\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(fieldBinding);", "+\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(fieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a41491e7c25e483f8de0cfc90730281b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.codegenBinding);", "+\t\t\tcodeStream.generateEmulationForField(this.codegenBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.codegenBinding);", "+\t\t\tcodeStream.generateEmulatedReadAccessForField(this.codegenBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.binding);", "+\t\t\tcodeStream.generateEmulationForField(this.binding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.codegenBinding);", "-\t\t\t\t\t\t\t", "+\t\t\tcodeStream.generateEmulatedReadAccessForField(this.codegenBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulatedWriteAccessForField(this.codegenBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b51eacd2d9a5512cd73a046e447070c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException", "signatureAfterChange": " \tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException", "diff": ["-\t\t\tIPackageFragment newFrag = root.getPackageFragment(newFragName);", "+\t\t\tPackageFragment newFrag = root.getPackageFragment(newFragName);", "-\t\t\tboolean shouldMoveFolder = isMove() && !newFrag.getResource().exists(); // if new pkg fragment exists, it is an override", "-\t\t\tIFolder srcFolder = (IFolder)source.getResource();", "+\t\t\tboolean shouldMoveFolder = isMove() && !newFrag.resource().exists(); // if new pkg fragment exists, it is an override", "+\t\t\tIFolder srcFolder = (IFolder)source.resource();", "-\t\t\tboolean containsReadOnlySubPackageFragments = createNeededPackageFragments((IContainer) source.getParent().getResource(), root, newFragName, shouldMoveFolder);", "+\t\t\tboolean containsReadOnlySubPackageFragments = createNeededPackageFragments((IContainer) source.parent.resource(), root, newFragName, shouldMoveFolder);", "-\t\t\t\tupdateReadOnlyPackageFragmentsForMove((IContainer) source.getParent().getResource(), root, newFragName, sourceIsReadOnly);", "+\t\t\t\tupdateReadOnlyPackageFragmentsForMove((IContainer) source.parent.resource(), root, newFragName, sourceIsReadOnly);", "-\t\t\t\t\t\trootResource = newFrag.getResource();", "+\t\t\t\t\t\trootResource = newFrag.resource();", "-\t\t\t\t\t\trootResource =  source.getParent().getResource();", "+\t\t\t\t\t\trootResource =  source.parent.resource();", "-\t\t\t\tupdateReadOnlyPackageFragmentsForCopy((IContainer) source.getParent().getResource(), root, newFragName);", "+\t\t\t\tupdateReadOnlyPackageFragmentsForCopy((IContainer) source.parent.resource(), root, newFragName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f53c600fe9cd7a0507d41ae6f40baa2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void processPackageFragmentResource(IPackageFragment source, IPackageFragmentRoot root, String newName) throws JavaModelException", "signatureAfterChange": " \tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException", "diff": ["-\tprivate void processPackageFragmentResource(IPackageFragment source, IPackageFragmentRoot root, String newName) throws JavaModelException {", "+\tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException {", "-\t\t\tString newFragName = (newName == null) ? source.getElementName() : newName;", "+\t\t\tString[] newFragName = (newName == null) ? source.names : Util.getTrimmedSimpleNames(newName);", "-\t\t\tif (!newFrag.getElementName().equals(source.getElementName())) { // if package has been renamed, update the compilation units", "-\t\t\t\tchar[][] inclusionPatterns = ((PackageFragmentRoot)root).fullInclusionPatternChars();", "-\t\t\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)root).fullExclusionPatternChars();", "+\t\t\tif (!Util.equalArraysOrNull(newFragName, source.names)) { // if package has been renamed, update the compilation units", "+\t\t\t\tchar[][] inclusionPatterns = root.fullInclusionPatternChars();", "+\t\t\t\tchar[][] exclusionPatterns = root.fullExclusionPatternChars();"]}], "num": 8933}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1aee20f6934d243fe6c4f1c5dde4855", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce7eb50bd6523bf6fc1c6d0bf4d421c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["+\tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "+\t\t// if field from parameterized type got found, use the original field at codegen time", "+\t\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t\t    this.codegenBinding = parameterizedField.originalField;", "+", "+\t\t    // extra cast needed if field type has type variable", "+\t\t    if ((this.codegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t\t        this.genericCast = this.codegenBinding.type.genericCast(parameterizedField.type);", "+\t\t    }\t\t    ", "+\t\t} else {", "+\t\t    this.codegenBinding = this.binding;", "+\t\t}", "+\t\t", "+\t\t\t\tif (syntheticAccessors == null)", "+\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = ", "+\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\tif (syntheticAccessors == null)", "+\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\t\tif (syntheticAccessors == null)", "+\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\tif (this.binding.declaringClass != this.receiverType", "+\t\t\t&& this.binding.declaringClass != null // array.length", "+\t\t\t&& this.binding.constant == NotAConstant", "+\t\t\t\t&& this.binding.declaringClass.id != T_Object)", "+\t\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope))) {", "+\t\t\t\t\tthis.codegenBinding,", "+\t\t\t\t\t(ReferenceBinding) this.receiverType.erasure());", "-\t */", "-\tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "-", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\tif (binding.isPrivate()) {", "-\t\t\tif (currentScope.enclosingSourceType() != binding.declaringClass) {", "-\t\t\t\tsyntheticWriteAccessor =", "-\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, false);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);", "-\t\t\t\treturn;", "-\t\t\t}", "-", "-\t\t} else if (receiver instanceof QualifiedSuperReference) { // qualified super", "-", "-\t\t\t// qualified super need emulation always", "-\t\t\tSourceTypeBinding destinationType =", "-\t\t\t\t(SourceTypeBinding) (((QualifiedSuperReference) receiver)", "-\t\t\t\t\t.currentCompatibleType);", "-\t\t\tsyntheticWriteAccessor = destinationType.addSyntheticMethod(binding, false);", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);", "-\t\t\treturn;", "-", "-\t\t} else if (binding.isProtected()) {", "-", "-\t\t\tSourceTypeBinding enclosingSourceType;", "-\t\t\tif (((bits & DepthMASK) != 0)", "-\t\t\t\t&& binding.declaringClass.getPackage()", "-\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()) {", "-", "-\t\t\t\tSourceTypeBinding currentCompatibleType =", "-\t\t\t\t\t(SourceTypeBinding) enclosingSourceType.enclosingTypeAt(", "-\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\tsyntheticWriteAccessor =", "-\t\t\t\t\tcurrentCompatibleType.addSyntheticMethod(binding, false);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\tif (binding.declaringClass != this.receiverType", "-\t\t\t&& !this.receiverType.isArrayType()", "-\t\t\t&& binding.declaringClass != null // array.length", "-\t\t\t&& binding.constant == NotAConstant", "-\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& binding.declaringClass.id != T_Object)", "-\t\t\t//no change for Object fields (in case there was)", "-\t\t\t\t|| !binding.declaringClass.canBeSeenBy(currentScope))) {", "-\t\t\tthis.codegenBinding =", "-\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\tbinding,", "-\t\t\t\t\t(ReferenceBinding) this.receiverType);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f096f31f7929b0eb9b8007a8c67debc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask, boolean needResolve)", "diff": ["-\tfinal Binding getTypeOrPackage(char[] name, int mask) {", "+\tfinal Binding getTypeOrPackage(char[] name, int mask, boolean needResolve) {", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, memberType, ProblemReasons.NonStaticReferenceInStaticContext);", "+\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, memberType, ProblemReasons.NonStaticReferenceInStaticContext);", "-\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\tBinding binding = (Binding) typeOrPackageCache.get(name);", "-\t\t\tif (binding != null) { // can also include NotFound ProblemReferenceBindings if we already know this name is not found", "-\t\t\t\tif (binding instanceof ImportBinding) { // single type import cached in faultInImports(), replace it in the cache with the type", "-\t\t\t\t\tImportReference importReference = ((ImportBinding) binding).reference;", "+\t\t\tBinding cachedBinding = (Binding) typeOrPackageCache.get(name);", "+\t\t\tif (cachedBinding != null) { // can also include NotFound ProblemReferenceBindings if we already know this name is not found", "+\t\t\t\tif (cachedBinding instanceof ImportBinding) { // single type import cached in faultInImports(), replace it in the cache with the type", "+\t\t\t\t\tImportReference importReference = ((ImportBinding) cachedBinding).reference;", "-\t\t\t\t\tif (binding instanceof ImportConflictBinding)", "-\t\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportConflictBinding) binding).conflictingTypeBinding); // already know its visible", "+\t\t\t\t\tif (cachedBinding instanceof ImportConflictBinding)", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, cachedBinding = ((ImportConflictBinding) cachedBinding).conflictingTypeBinding); // already know its visible", "-\t\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportBinding) binding).resolvedImport); // already know its visible", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, cachedBinding = ((ImportBinding) cachedBinding).resolvedImport); // already know its visible", "-\t\t\t\t\tif (foundType != null && foundType.problemId() != ProblemReasons.NotVisible && binding.problemId() != ProblemReasons.Ambiguous)", "+\t\t\t\t\tif (foundType != null && foundType.problemId() != ProblemReasons.NotVisible && cachedBinding.problemId() != ProblemReasons.Ambiguous)", "-\t\t\t\t\tif (binding instanceof ReferenceBinding)", "-\t\t\t\t\t\treturn binding; // cached type found in previous walk below", "+\t\t\t\t\tif (cachedBinding instanceof ReferenceBinding)", "+\t\t\t\t\t\treturn cachedBinding; // cached type found in previous walk below", "-\t\t\t\tif ((mask & Binding.PACKAGE) != 0 && binding instanceof PackageBinding)", "-\t\t\t\t\treturn binding; // cached package found in previous walk below", "+\t\t\t\tif ((mask & Binding.PACKAGE) != 0 && cachedBinding instanceof PackageBinding)", "+\t\t\t\t\treturn cachedBinding; // cached package found in previous walk below", "-\t\t\t\tif (typeOrPackageCache != null)", "-\t\t\t\t\ttypeOrPackageCache.put(name, binding);", "-\t\t\t\treturn binding; // type is always visible to its own package", "+\t\t\t\tReferenceBinding referenceType = (ReferenceBinding) binding;", "+\t\t\t\tif ((referenceType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, referenceType);", "+\t\t\t\t\treturn referenceType; // type is always visible to its own package", "+\t\t\t\t}", "-\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, type, ProblemReasons.Ambiguous);", "+\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(new char[][]{name}, type, ProblemReasons.Ambiguous);", "-\t\t\tfoundType = new ProblemReferenceBinding(name, null, ProblemReasons.NotFound);", "+\t\t\tchar[][] qName = new char[][] { name };", "+\t\t\tReferenceBinding closestMatch = null;", "+\t\t\tif ((mask & Binding.PACKAGE) != 0 || unitScope.environment.getTopLevelPackage(name) == null) {", "+\t\t\t\tif (needResolve) {", "+\t\t\t\t\tclosestMatch = environment().createMissingType(unitScope.fPackage, qName);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfoundType = new ProblemReferenceBinding(qName, closestMatch, ProblemReasons.NotFound);", "+\t\t\tif (typeOrPackageCache != null && (mask & Binding.PACKAGE) != 0) { // only put NotFound type in cache if you know its not a package", "+\t\t\t\ttypeOrPackageCache.put(name, foundType);", "+\t\t\t}", "+\t\t} else if ((foundType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tchar[][] qName = new char[][] { name };", "+\t\t\tfoundType = new ProblemReferenceBinding(qName, foundType, ProblemReasons.NotFound);"]}], "num": 8016}
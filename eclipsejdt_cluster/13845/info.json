{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaf62d44ea0b74d5a86dd8aae9276fef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2667e89b10d4f41734cbf850f007843b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected static int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " protected static NullAnnotationStatus findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-protected static int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {", "+protected static NullAnnotationStatus findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {", "+\tTypeBinding superTypeHint = null;", "-\t\t\t\t\t\t\treturn severity;", "+\t\t\t\t\t\t\treturn NULL_ANNOTATIONS_MISMATCH;", "-\t\t\t\t\treturn 2;", "+\t\t\t\t\treturn NULL_ANNOTATIONS_MISMATCH;", "-\t\t\tif (requiredType.isParameterizedType()  && providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()", "+\t\t\tTypeBinding providedSuper = providedType.findSuperTypeOriginatingFrom(requiredType);", "+\t\t\tif (providedSuper != providedType)", "+\t\t\t\tsuperTypeHint = providedSuper;", "+\t\t\tif (requiredType.isParameterizedType()  && providedSuper instanceof ParameterizedTypeBinding) { // TODO(stephan): handle providedType.isRaw()", "-\t\t\t\tTypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedType).arguments;", "+\t\t\t\tTypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedSuper).arguments;", "-\t\t\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1));", "+\t\t\t\t\t\tNullAnnotationStatus status = findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1);", "+\t\t\t\t\t\tseverity = Math.max(severity, status.severity);", "-\t\t\t\t\t\t\treturn severity;", "+\t\t\t\t\t\t\treturn new NullAnnotationStatus(severity, superTypeHint);", "-\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(((WildcardBinding) requiredType).bound, providedType, nullStatus));", "+\t\t\t\tNullAnnotationStatus status = findNullTypeAnnotationMismatch(((WildcardBinding) requiredType).bound, providedType, nullStatus);", "+\t\t\t\tseverity = Math.max(severity, status.severity);", "-\t\t\tif (requiredEnclosing != null && providedEnclosing != null)", "-\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredEnclosing, providedEnclosing, -1));", "+\t\t\tif (requiredEnclosing != null && providedEnclosing != null) {", "+\t\t\t\tNullAnnotationStatus status = findNullTypeAnnotationMismatch(requiredEnclosing, providedEnclosing, -1);", "+\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t}", "-\treturn severity;", "+\tif (severity == 0)", "+\t\treturn NULL_ANNOTATIONS_OK;", "+\treturn new NullAnnotationStatus(severity, superTypeHint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c603e1ba213e07d1eba400c71191646", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "dc2b9befa6829d8676bcaaed036d87dc45fd9d36", "commitAfterChange": "1fbca275b2d7b310a4c5055e69f422227cc3afb2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-\t\tif (requiredBits == TagBits.AnnotationNullable && nullStatus != -1) // at detail/recursion even nullable must be matched exactly", "-\t\t\treturn 0; // accepting anything", "-\t\tlong providedBits = providedType.tagBits & TagBits.AnnotationNullMASK;", "-\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);", "-\t\tif (severity < 3 && providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()", "-\t\t\tTypeBinding[] requiredArguments = ((ParameterizedTypeBinding) requiredType).arguments;", "-\t\t\tTypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedType).arguments;", "-\t\t\tif (requiredArguments != null && providedArguments != null && requiredArguments.length == providedArguments.length) {", "-\t\t\t\tfor (int i = 0; i < requiredArguments.length; i++) {", "-\t\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1));", "-\t\t\t\t\tif (severity == 2)", "-\t\t\t\t\t\treturn severity;", "+\t\tif (requiredBits != TagBits.AnnotationNullable // nullable lhs accepts everything, ...", "+\t\t\t\t|| nullStatus == -1) // only at detail/recursion even nullable must be matched exactly", "+\t\t{", "+\t\t\tlong providedBits = providedType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);", "+\t\t}", "+\t\tif (severity < 3) {", "+\t\t\tif (providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()", "+\t\t\t\tTypeBinding[] requiredArguments = ((ParameterizedTypeBinding) requiredType).arguments;", "+\t\t\t\tTypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedType).arguments;", "+\t\t\t\tif (requiredArguments != null && providedArguments != null && requiredArguments.length == providedArguments.length) {", "+\t\t\t\t\tfor (int i = 0; i < requiredArguments.length; i++) {", "+\t\t\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1));", "+\t\t\t\t\t\tif (severity == 2)", "+\t\t\t\t\t\t\treturn severity;", "+\t\t\t\t\t}", "+\t\t\tTypeBinding requiredEnclosing = requiredType.enclosingType();", "+\t\t\tTypeBinding providedEnclosing = providedType.enclosingType();", "+\t\t\tif (requiredEnclosing != null && providedEnclosing != null)", "+\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredEnclosing, providedEnclosing, -1));"]}], "num": 13845}
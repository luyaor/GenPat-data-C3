{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45c738bb7f4b3a38fb877f6d16ab22af", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3185a2b488fa37e5520f8833de294361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "6e68e9cf1522a12f0e985131be99c9578a7def47", "commitAfterChange": "97fd5cbd4b6c9f4969ee36268bca7114f34c711d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t!expressionType.isPrimitiveOrBoxedPrimitiveType() && checkCastTypesCompatibility(scope, scope.boxing(castType), expressionType, expression)) {", "+\t\t\t\t!expressionType.isBoxedPrimitiveType() && checkCastTypesCompatibility(scope, scope.boxing(castType), expressionType, expression)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93bb83b34cc714bbdd618f7b67214e23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "cd140389e1d0cdca9f232f9b33d1b09e90034b22", "commitAfterChange": "8cb3365a924e5869d5c8a5715a80d4cd8189b243", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t} else if (use17specifics && expressionType instanceof ReferenceBinding && !expressionType.isPrimitiveOrBoxedPrimitiveType()) {", "+\t\t} else if (use17specifics && castType.isPrimitiveType() && expressionType instanceof ReferenceBinding && ", "+\t\t\t\t!expressionType.isPrimitiveOrBoxedPrimitiveType() && checkCastTypesCompatibility(scope, scope.boxing(castType), expressionType, expression)) {"]}], "num": 44143}
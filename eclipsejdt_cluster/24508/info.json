{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50a4bfd170e1d84a1c93ae78475dd9bb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb8287198552b4b1d612c4491408dd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCompoundAssignment( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tExpression expression, \t\tint operator, \t\tint assignmentImplicitConversion, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCompoundAssignment( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tExpression expression, \t\tint operator, \t\tint assignmentImplicitConversion, \t\tboolean valueRequired)", "diff": ["-\t\tgenerateReadSequence(currentScope, codeStream);", "+\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a35327d126152362fa0fe438a189dbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t\t\t\tcodeStream.generateStringAppend(currentScope, this, expression);", "+\t\t\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, this, expression);", "-\t\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "+\t\t\t// no need for generic cast on previous #getfield since using Object string buffer methods.\t\t\t", "+\t\t\t\t// no need for generic cast as value got dupped"]}], "num": 24508}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b75903d17b1da2eb53a4d68230b8dfe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc471a860e154318da41534fc107b30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "857538330357565215d6d2e64f21fab912b5ef20", "commitAfterChange": "f9fabd872f39dca4f00ed1200322e9463d41565c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateSyntheticFieldInitializationsIfNecessary( \t\tMethodScope scope, \t\tCodeStream codeStream, \t\tReferenceBinding declaringClass)", "signatureAfterChange": "  \tpublic void generateSyntheticFieldInitializationsIfNecessary( \t\tMethodScope scope, \t\tCodeStream codeStream, \t\tReferenceBinding declaringClass, \t\tboolean addNullCheckForEnclosingInstance)", "diff": ["-\t\tReferenceBinding declaringClass) {", "+\t\tReferenceBinding declaringClass,", "+\t\tboolean addNullCheckForEnclosingInstance) {", "-\t\tSyntheticArgumentBinding[] syntheticArgs =", "-\t\t\tnestedType.syntheticEnclosingInstances();", "-\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;", "-\t\t\ti < max;", "-\t\t\ti++) {", "-\t\t\tif (syntheticArgs[i].matchingField != null) {", "+\t\tSourceTypeBinding enclosingType = nestedType.enclosingType;", "+", "+\t\tSyntheticArgumentBinding[] syntheticArgs = nestedType.syntheticEnclosingInstances();", "+\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length; i < max; i++) {", "+\t\t\tSyntheticArgumentBinding syntheticArg;", "+\t\t\tif ((syntheticArg = syntheticArgs[i]).matchingField != null) {", "-\t\t\t\tcodeStream.load(syntheticArgs[i]);", "-\t\t\t\tcodeStream.putfield(syntheticArgs[i].matchingField);", "+\t\t\t\tcodeStream.load(syntheticArg);", "+\t\t\t\tif (enclosingType == syntheticArg.type && addNullCheckForEnclosingInstance) {", "+\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\tcodeStream.invokeObjectGetClass(); // causes null check", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}", "+\t\t\t\tcodeStream.putfield(syntheticArg.matchingField);", "-\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;", "-\t\t\ti < max;", "-\t\t\ti++) {", "-\t\t\tif (syntheticArgs[i].matchingField != null) {", "+\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length; i < max; i++) {", "+\t\t\tSyntheticArgumentBinding syntheticArg;", "+\t\t\tif ((syntheticArg = syntheticArgs[i]).matchingField != null) {", "-\t\t\t\tcodeStream.load(syntheticArgs[i]);", "-\t\t\t\tcodeStream.putfield(syntheticArgs[i].matchingField);", "+\t\t\t\tcodeStream.load(syntheticArg);", "+\t\t\t\tcodeStream.putfield(syntheticArg.matchingField);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c071de6edd933380cf1335d0f6adc661", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "948661c4cb198af70b598b9954e5159cb73d7234", "commitAfterChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint[] accuracies,\r \t\tboolean accuracyStartsOnFirstToken)\r \t\tthrows CoreException", "diff": ["+\t */\r", "+\tpublic void reportAccurateReference(\r", "+\t\tint sourceStart,\r", "+\t\tint sourceEnd,\r", "+\t\tchar[][] qualifiedName,\r", "+\t\tIJavaElement element,\r", "+\t\tint[] accuracies,\r", "+\t\tboolean accuracyStartsOnFirstToken)\r", "+\t\tint accuracyIndex = 0;\r", "+\t\t\t\tboolean equals = false;\r", "-\t\t\t\t\t&& !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "+\t\t\t\t\t&& !(equals = this.pattern.matchesName(qualifiedName[i++], currentTokenSource))) {\r", "-\t\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i - 1])\r", "-\t\t\t\t\t&& (previousValid == -1 || previousValid == i - 2)) {\r", "+\t\t\t\tif (equals && (previousValid == -1 || previousValid == i - 2)) {\r", "-\t\t}\r", "-\t\twhile (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\t\t\tif (i == tokenNumber) {\r", "+\t\t\t\tif (accuracies[accuracyIndex] != -1) {\r", "+\t\t\t\t\t// accept reference\r", "+\t\t\t\t\tif (refSourceStart != -1) {\r", "+\t\t\t\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracies[accuracyIndex]);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tthis.report(sourceStart, sourceEnd, element, accuracies[accuracyIndex]);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ti = 0;\r", "+\t\t\t\t\trefSourceStart = -1;\r", "+\t\t\t\t\tpreviousValid = -1;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (accuracyStartsOnFirstToken) {\r", "+\t\t\t\taccuracyIndex++;\r", "+\t\t\t}\r", "+\t\t} while (token != TerminalSymbols.TokenNameEOF && accuracyIndex < accuracies.length);\r", "-\t\t// accept reference\r", "-\t\tif (refSourceStart != -1) {\r", "-\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "-\t\t} else {\r", "-\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "-\t\t}\r"]}], "num": 61794}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f74fcacd36e17e2d3691f1c13b1393f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47bb7f667c31861d5786fcf759cee1e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic boolean match(WildcardType node, Object other)", "signatureAfterChange": " \tpublic boolean match(WildcardType node, Object other)", "diff": ["-\t\tswitch(node.getAST().apiLevel) {", "-\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\tcase AST.JLS3_INTERNAL :", "-\t\t\tcase AST.JLS4:", "-\t\t\t\treturn (node.isUpperBound() == o.isUpperBound()", "-\t\t\t\t\t\t&& safeSubtreeMatch(node.getBound(), o.getBound()));", "-\t\t\tdefault:", "-\t\t\t\treturn (node.isUpperBound() == o.isUpperBound()", "-\t\t\t\t\t\t&& safeSubtreeMatch(node.getBound(), o.getBound()) &&", "-\t\t\t\t\t\tsafeSubtreeListMatch(node.annotations(), o.annotations()));", "-\t\t}", "+\t\tint level = node.getAST().apiLevel;", "+\t\treturn (level >= AST.JLS8 ? safeSubtreeListMatch(node.annotations(), o.annotations()) : true)", "+\t\t\t\t&& node.isUpperBound() == o.isUpperBound()", "+\t\t\t\t&& safeSubtreeMatch(node.getBound(), o.getBound());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ba4dd73fc51a5e227a0f3385857bbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\tboolean searchInsideCompilationUnits = (this.matchContainer & PatternLocator.COMPILATION_UNIT_CONTAINER) != 0;", "-\tImportReference pkg = unit.currentPackage;", "-\tif (pkg != null && nodeSet.matchingNodes.removeKey(pkg) != null) {", "+\tboolean matchedUnitContainer = (this.matchContainer & PatternLocator.COMPILATION_UNIT_CONTAINER) != 0;", "+\tif (matchedUnitContainer) {", "-//\t\tif (searchInsideCompilationUnits)", "-//\t\t\treportPackageDeclaration(pkg);", "-\t}", "+//\tImportReference pkg = unit.currentPackage;", "+//\tif (pkg != null && nodeSet.matchingNodes.removeKey(pkg) != null)", "+//\t\treportPackageDeclaration(pkg);", "-\tImportReference[] imports = unit.imports;", "-\tif (imports != null) {", "-\t\tfor (int i = 0, l = imports.length; i < l; i++) {", "-\t\t\tImportReference importRef = imports[i];", "-\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(importRef);", "-\t\t\tif (level != null && searchInsideCompilationUnits)", "-\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, null, createImportHandle(importRef), level.intValue(), this);", "+\t\tImportReference[] imports = unit.imports;", "+\t\tif (imports != null) {", "+\t\t\tfor (int i = 0, l = imports.length; i < l; i++) {", "+\t\t\t\tImportReference importRef = imports[i];", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(importRef);", "+\t\t\t\tif (level != null)", "+\t\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, null, createImportHandle(importRef), level.intValue(), this);", "+\t\t\t}", "-\t\t\tif (level != null && searchInsideCompilationUnits)", "-\t\t\t\treportTypeDeclaration(type, null, level.intValue());", "-\t\t\treportMatching(type, null, nodeSet);", "+\t\t\tint accuracy = (level != null && matchedUnitContainer) ? level.intValue() : -1;", "+\t\t\treportMatching(type, null, accuracy, nodeSet);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc5e3d382f01bb0516e93272b707d85d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic boolean match(PrimitiveType node, Object other)", "signatureAfterChange": " \tpublic boolean match(PrimitiveType node, Object other)", "diff": ["-\t\tswitch(node.getAST().apiLevel) {", "-\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\tcase AST.JLS3_INTERNAL :", "-\t\t\tcase AST.JLS4:", "-\t\t\t\treturn (node.getPrimitiveTypeCode() == o.getPrimitiveTypeCode());", "-\t\t\tdefault:", "-\t\t\t\treturn (node.getPrimitiveTypeCode() == o.getPrimitiveTypeCode()) &&", "-\t\t\t\t\t\tsafeSubtreeListMatch(node.annotations(), o.annotations());", "-\t\t}\t\t", "+\t\tint level = node.getAST().apiLevel;", "+\t\treturn (level >= AST.JLS8 ? safeSubtreeListMatch(node.annotations(), o.annotations()) : true)", "+\t\t\t\t&& node.getPrimitiveTypeCode() == o.getPrimitiveTypeCode();"]}], "num": 10319}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14ac321a697671f2c61664b2394271bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8998beb3d19c6b9453df50dcaff70894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c170f8179cacaa96bd5e7ced1e8d03ed5ea31d41", "commitAfterChange": "e2cf787950c6d582e25b73b2371c68f3fffed436", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "\r \r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "diff": ["-\r", "-\t\t\tif (astNode instanceof CompletionOnSingleNameReference) {\r", "-\r", "-\t\t\t\ttoken = ((CompletionOnSingleNameReference) astNode).token;\r", "-\t\t\t\tfindVariablesAndMethods(\r", "-\t\t\t\t\ttoken,\r", "-\t\t\t\t\tscope,\r", "-\t\t\t\t\t(CompletionOnSingleNameReference) astNode,\r", "-\t\t\t\t\tscope);\r", "-\t\t\t\t// can be the start of a qualified type name\r", "-\t\t\t\tfindTypesAndPackages(token, scope);\r", "-\r", "-\t\t\t} else {\r", "-\r", "-\t\t\t\tif (astNode instanceof CompletionOnSingleTypeReference) {\r", "-\r", "-\t\t\t\t\ttoken = ((CompletionOnSingleTypeReference) astNode).token;\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnClassReference;\r", "-\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnExceptionReference;\r", "-\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;\r", "-\r", "-\t\t\t\t\t// can be the start of a qualified type name\r", "-\t\t\t\t\tif (qualifiedBinding == null) {\r", "-\t\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tfindMemberTypes(\r", "-\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedNameReference) {\r", "-\r", "-\t\t\t\t\t\tinsideQualifiedReference = true;\r", "-\t\t\t\t\t\tCompletionOnQualifiedNameReference ref =\r", "-\t\t\t\t\t\t\t(CompletionOnQualifiedNameReference) astNode;\r", "-\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "-\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];\r", "-\r", "-\t\t\t\t\t\tif (qualifiedBinding instanceof VariableBinding) {\r", "-\r", "-\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\t\t\t\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;\r", "-\t\t\t\t\t\t\tif (receiverType != null) {\r", "-\t\t\t\t\t\t\t\tfindFieldsAndMethods(token, receiverType, scope, ref, scope,false);\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;\r", "-\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\r", "-\t\t\t\t\t\t\t\tfindMemberTypes(token, receiverType, scope, scope.enclosingSourceType());\r", "-\r", "-\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "-\r", "-\t\t\t\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\tref,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "-\t\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\tnull,\r", "-\t\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\tref,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "-\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "-\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedTypeReference) {\r", "-\r", "-\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;\r", "-\t\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;\r", "-\t\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference ref =\r", "-\t\t\t\t\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;\r", "-\t\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "-\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];\r", "-\r", "-\t\t\t\t\t\t\t// get the source positions of the completion identifier\r", "-\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\t\t\t\t\t\t\t\tfindMemberTypes(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "-\r", "-\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "-\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMemberAccess) {\r", "-\r", "-\t\t\t\t\t\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;\r", "-\t\t\t\t\t\t\t\tlong completionPosition = access.nameSourcePosition;\r", "-\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\tif(astNode instanceof CompletionOnMethodReturnType) {\r", "-\t\t\t\t\t\t\t\ttoken = access.token;\r", "-\r", "-\t\t\t\t\t\t\t\tfindFieldsAndMethods(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t(TypeBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\taccess,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "+\t\t\t\tCompletionOnMethodReturnType method = (CompletionOnMethodReturnType) astNode;\r", "+\t\t\t\tSingleTypeReference type = (CompletionOnSingleTypeReference) method.returnType;\r", "+\t\t\t\ttoken = type.token;\r", "+\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);\r", "+\t\t\t\tfindTypesAndPackages(token, scope);\r", "+\t\t\t\t\r", "+\t\t\t\tif(method.modifiers == CompilerModifiers.AccDefault) {\r", "+\t\t\t\t\tfindMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t\r", "+\t\t\t\tif (astNode instanceof CompletionOnSingleNameReference) {\r", "+\t\r", "+\t\t\t\t\ttoken = ((CompletionOnSingleNameReference) astNode).token;\r", "+\t\t\t\t\tfindVariablesAndMethods(\r", "+\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,\r", "+\t\t\t\t\t\tscope);\r", "+\t\t\t\t\t// can be the start of a qualified type name\r", "+\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "+\t\r", "+\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\tif (astNode instanceof CompletionOnSingleTypeReference) {\r", "+\t\r", "+\t\t\t\t\t\ttoken = ((CompletionOnSingleTypeReference) astNode).token;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnClassReference;\r", "+\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnExceptionReference;\r", "+\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;\r", "+\t\r", "+\t\t\t\t\t\t// can be the start of a qualified type name\r", "+\t\t\t\t\t\tif (qualifiedBinding == null) {\r", "+\t\t\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "-\r", "-\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMessageSend) {\r", "-\r", "-\t\t\t\t\t\t\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;\r", "-\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "-\t\t\t\t\t\t\t\t\t\tcomputeTypes(messageSend.arguments, (BlockScope) scope);\r", "-\t\t\t\t\t\t\t\t\ttoken = messageSend.selector;\r", "-\t\t\t\t\t\t\t\t\tif (qualifiedBinding == null) {\r", "-\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(token, argTypes, scope, messageSend, scope);\r", "-\t\t\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\t\tmessageSend,\r", "-\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\r", "+\t\t\t\t\t\t\t\tfindMemberTypes(\r", "+\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedNameReference) {\r", "+\t\r", "+\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "+\t\t\t\t\t\t\tCompletionOnQualifiedNameReference ref =\r", "+\t\t\t\t\t\t\t\t(CompletionOnQualifiedNameReference) astNode;\r", "+\t\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "+\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];\r", "+\t\r", "+\t\t\t\t\t\t\tif (qualifiedBinding instanceof VariableBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;\r", "+\t\t\t\t\t\t\t\tif (receiverType != null) {\r", "+\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(token, receiverType, scope, ref, scope,false);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(token, receiverType, scope, scope.enclosingSourceType());\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindFields(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\t\tref,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\tref,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "-\r", "-\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnExplicitConstructorCall) {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =\r", "-\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedTypeReference) {\r", "+\t\r", "+\t\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "+\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;\r", "+\t\t\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;\r", "+\t\t\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;\r", "+\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference ref =\r", "+\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;\r", "+\t\t\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "+\t\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];\r", "+\t\r", "+\t\t\t\t\t\t\t\t// get the source positions of the completion identifier\r", "+\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "+\t\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMemberAccess) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;\r", "+\t\t\t\t\t\t\t\t\tlong completionPosition = access.nameSourcePosition;\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\ttoken = access.token;\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\t(TypeBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\taccess,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMessageSend) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);\r", "-\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "-\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\tconstructorCall,\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "-\t\t\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedAllocationExpression) {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =\r", "-\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "-\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(allocExpression.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(messageSend.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\ttoken = messageSend.selector;\r", "+\t\t\t\t\t\t\t\t\t\tif (qualifiedBinding == null) {\r", "-\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) qualifiedBinding;\r", "-\t\t\t\t\t\t\t\t\t\t\tif(ref.isClass()) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isAbstract()) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "+\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(token, argTypes, scope, messageSend, scope);\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tmessageSend,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnExplicitConstructorCall) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =\r", "+\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "+\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "+\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tconstructorCall,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedAllocationExpression) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(allocExpression.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) qualifiedBinding;\r", "+\t\t\t\t\t\t\t\t\t\t\t\tif(ref.isClass()) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isAbstract()) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tref,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isFinal()){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindAnonymousType(\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression);\r", "-\t\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\t\tif(!ref.isFinal()){\r", "-\t\t\t\t\t\t\t\t\t\t\t\tfindAnonymousType(\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tref,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression);\r", "-\t\t\t\t\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnClassLiteralAccess) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);\r", "-\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\ttoken = access.completionIdentifier;\r", "-\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "+\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnMethodName) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = method.selector;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, method.returnType, excludeNames);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnClassLiteralAccess) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);\r", "+\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = access.completionIdentifier;\r", "+\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnMethodName) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = field.realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = method.selector;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, method.returnType, excludeNames);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnLocalName ||\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tastNode instanceof CompletionOnArgumentName){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = field.realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnLocalName ||\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tastNode instanceof CompletionOnArgumentName){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(variable instanceof CompletionOnLocalName){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnLocalName) variable).realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnArgumentName) variable).realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, variable.type, excludeNames);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(variable instanceof CompletionOnLocalName){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnLocalName) variable).realName;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnArgumentName) variable).realName;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, variable.type, excludeNames);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f167e8fa7209e9488eb7351a3d72b8ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "65ea78ccf732b2fce9a73969b46bac043c656dfc", "commitAfterChange": "e7d50afd382868f3818623a18647c2543f09bea3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "signatureAfterChange": " \t \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "diff": ["-\t\tCompilationUnitDeclaration compilationUnit = new CompilationUnitDeclaration(this.problemReporter, compilationResult, 0);", "+\t\tCompilationUnitDeclaration compilationUnit = null;", "-\t\t\tTypeDeclaration typeDeclaration = TypeConverter.buildTypeDeclaration(type, compilationUnit, compilationResult);", "+\t\t\tTypeDeclaration typeDeclaration = null;", "+\t\t\tif (type instanceof SourceType) {", "+\t\t\t\tSourceType sourceType = (SourceType) type;", "+\t\t\t\tISourceType info = (ISourceType) sourceType.getElementInfo();", "+\t\t\t\tcompilationUnit = SourceTypeConverter.buildCompilationUnit(", "+\t\t\t\t\tnew ISourceType[] {info},//sourceTypes[0] is always toplevel here", "+\t\t\t\t\tSourceTypeConverter.FIELD_AND_METHOD // need field and methods", "+\t\t\t\t\t| SourceTypeConverter.MEMBER_TYPE, // need member types", "+\t\t\t\t\t// no need for field initialization", "+\t\t\t\t\tthis.problemReporter,", "+\t\t\t\t\tcompilationResult);", "+\t\t\t\tif (compilationUnit.types != null)", "+\t\t\t\t\ttypeDeclaration = compilationUnit.types[0];", "+\t\t\t} else {", "+\t\t\t\tcompilationUnit = new CompilationUnitDeclaration(this.problemReporter, compilationResult, 0);", "+\t\t\t\ttypeDeclaration = BinaryTypeConverter.buildTypeDeclaration(type, compilationUnit, compilationResult);", "+\t\t\t}", "-\t\t\t\tFieldDeclaration[] newFields = new FieldDeclaration[oldFields.length + 1];", "-\t\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);", "-\t\t\t\tnewFields[oldFields.length] = fakeInitializer;", "+\t\t\t\tFieldDeclaration[] newFields = null;", "+\t\t\t\tif (oldFields != null) {", "+\t\t\t\t\tnewFields = new FieldDeclaration[oldFields.length + 1];", "+\t\t\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);", "+\t\t\t\t\tnewFields[oldFields.length] = fakeInitializer;", "+\t\t\t\t} else {", "+\t\t\t\t\tnewFields = new FieldDeclaration[] {fakeInitializer};", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5db9e4a1a732e47d1bce6339ac6f67b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "add2e09bc88bdef923e6e3e79386b09d19b0c6d4", "commitAfterChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if(astNode instanceof CompletionOnMarkerAnnotationName) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMarkerAnnotationName annot = (CompletionOnMarkerAnnotationName) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsAnnotation = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annot.type instanceof CompletionOnSingleTypeReference) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) annot.type;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = type.token;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if(annot.type instanceof CompletionOnQualifiedTypeReference) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference type = (CompletionOnQualifiedTypeReference) annot.type;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = type.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}"]}], "num": 30474}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3efa427bbd3381201fa836668f3ae6d5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b0f1c4d0f6da55d9448742689db1343", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": "\r public char[] findSource(IType type, IBinaryType info)", "diff": ["-\t */\r", "-\tpublic char[] findSource(IType type, IBinaryType info) {\r", "-\t\tchar[] sourceFileName = info.sourceFileName();\r", "+ */\r", "+public char[] findSource(IType type, IBinaryType info) {\r", "+\tString name = null;\r", "+\t// see 1FVVWZT\r", "+\tif (info instanceof ClassFileReader) {\r", "+\t\tchar[] sourceFileName = ((ClassFileReader) info).sourceFileName();\r", "-\t\tString name = new String(sourceFileName);\r", "+\t\tname = new String(sourceFileName);\r", "+\t} else {\r", "+\t\treturn null;\r", "+\t}\r", "-\t\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "-\t\tif (!pkgFrag.isDefaultPackage()) {\r", "-\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');\r", "-\t\t\tname = pkg + '/' + name;\r", "+\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "+\tif (!pkgFrag.isDefaultPackage()) {\r", "+\t\tString pkg= type.getPackageFragment().getElementName().replace('.', '/');\r", "+\t\tname= pkg + '/' + name;\r", "+\t}\r", "+\t// try to get the entry\r", "+\tZipEntry entry= null;\r", "+\tZipFile zip = null;\r", "+\tchar[] source= null;\r", "+\ttry {\r", "+\t\tString fullName;\r", "+\t\t//add the root path if specified\r", "+\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "+\t\t\tfullName= fRootPath + '/' + name;\r", "+\t\t} else {\r", "+\t\t\tfullName= name;\r", "-\t\t// try to get the entry\r", "-\t\tZipEntry entry = null;\r", "-\t\tZipFile zip = null;\r", "-\t\tchar[] source = null;\r", "-\t\ttry {\r", "-\t\t\tString fullName;\r", "-\t\t\t//add the root path if specified\r", "-\t\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "-\t\t\t\tfullName = fRootPath + '/' + name;\r", "-\t\t\t} else {\r", "-\t\t\t\tfullName = name;\r", "-\t\t\t}\r", "-\t\t\tzip = getZip();\r", "-\t\t\tentry = zip.getEntry(fullName);\r", "-\t\t\tif (entry != null) {\r", "-\t\t\t\t// now read the source code\r", "-\t\t\t\tbyte[] bytes = readEntry(zip, entry);\r", "-\t\t\t\tif (bytes != null) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tsource = BufferManager.bytesToChar(bytes);\r", "-\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\tsource = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\treturn null;\r", "-\t\t} finally {\r", "-\t\t\tif (zip != null) {\r", "+\t\tzip = getZip();\r", "+\t\tentry= zip.getEntry(fullName);\r", "+\t\tif (entry != null) {\r", "+\t\t\t// now read the source code\r", "+\t\t\tbyte[] bytes= readEntry(zip, entry);\r", "+\t\t\tif (bytes != null) {\r", "-\t\t\t\t\tzip.close();\r", "-\t\t\t\t} catch (IOException e) {\r", "+\t\t\t\t\tsource= BufferManager.bytesToChar(bytes);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\tsource= null;\r", "-\t\treturn source;\r", "-\t}\r", "+\t} catch (CoreException e) {\r", "+\t\treturn null;\r", "+\t} finally {\r", "+\t\tif (zip != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tzip.close();\r", "+\t\t\t} catch(IOException e) {}\r", "+\treturn source;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ff0e9e92fef96b835232d09f3b3be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": "\r public char[] findSource(IType type, IBinaryType info)", "diff": ["-\t */\r", "-\tpublic char[] findSource(IType type, IBinaryType info) {\r", "-\t\tchar[] sourceFileName = info.sourceFileName();\r", "+ */\r", "+public char[] findSource(IType type, IBinaryType info) {\r", "+\tString name = null;\r", "+\t// see 1FVVWZT\r", "+\tif (info instanceof ClassFileReader) {\r", "+\t\tchar[] sourceFileName = ((ClassFileReader) info).sourceFileName();\r", "-\t\tString name = new String(sourceFileName);\r", "+\t\tname = new String(sourceFileName);\r", "+\t} else {\r", "+\t\treturn null;\r", "+\t}\r", "-\t\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "-\t\tif (!pkgFrag.isDefaultPackage()) {\r", "-\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');\r", "-\t\t\tname = pkg + '/' + name;\r", "+\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "+\tif (!pkgFrag.isDefaultPackage()) {\r", "+\t\tString pkg= type.getPackageFragment().getElementName().replace('.', '/');\r", "+\t\tname= pkg + '/' + name;\r", "+\t}\r", "+\t// try to get the entry\r", "+\tZipEntry entry= null;\r", "+\tZipFile zip = null;\r", "+\tchar[] source= null;\r", "+\ttry {\r", "+\t\tString fullName;\r", "+\t\t//add the root path if specified\r", "+\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "+\t\t\tfullName= fRootPath + '/' + name;\r", "+\t\t} else {\r", "+\t\t\tfullName= name;\r", "-\t\t// try to get the entry\r", "-\t\tZipEntry entry = null;\r", "-\t\tZipFile zip = null;\r", "-\t\tchar[] source = null;\r", "-\t\ttry {\r", "-\t\t\tString fullName;\r", "-\t\t\t//add the root path if specified\r", "-\t\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "-\t\t\t\tfullName = fRootPath + '/' + name;\r", "-\t\t\t} else {\r", "-\t\t\t\tfullName = name;\r", "-\t\t\t}\r", "-\t\t\tzip = getZip();\r", "-\t\t\tentry = zip.getEntry(fullName);\r", "-\t\t\tif (entry != null) {\r", "-\t\t\t\t// now read the source code\r", "-\t\t\t\tbyte[] bytes = readEntry(zip, entry);\r", "-\t\t\t\tif (bytes != null) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tsource = BufferManager.bytesToChar(bytes);\r", "-\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\tsource = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\treturn null;\r", "-\t\t} finally {\r", "-\t\t\tif (zip != null) {\r", "+\t\tzip = getZip();\r", "+\t\tentry= zip.getEntry(fullName);\r", "+\t\tif (entry != null) {\r", "+\t\t\t// now read the source code\r", "+\t\t\tbyte[] bytes= readEntry(zip, entry);\r", "+\t\t\tif (bytes != null) {\r", "-\t\t\t\t\tzip.close();\r", "-\t\t\t\t} catch (IOException e) {\r", "+\t\t\t\t\tsource= BufferManager.bytesToChar(bytes);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\tsource= null;\r", "-\t\treturn source;\r", "-\t}\r", "+\t} catch (CoreException e) {\r", "+\t\treturn null;\r", "+\t} finally {\r", "+\t\tif (zip != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tzip.close();\r", "+\t\t\t} catch(IOException e) {}\r", "+\treturn source;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc29c50097c1b41f438e79ccb6d9138a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": "\r public char[] findSource(IType type, IBinaryType info)", "diff": ["-\t */\r", "-\tpublic char[] findSource(IType type, IBinaryType info) {\r", "-\t\tchar[] sourceFileName = info.sourceFileName();\r", "+ */\r", "+public char[] findSource(IType type, IBinaryType info) {\r", "+\tString name = null;\r", "+\t// see 1FVVWZT\r", "+\tif (info instanceof ClassFileReader) {\r", "+\t\tchar[] sourceFileName = ((ClassFileReader) info).sourceFileName();\r", "-\t\tString name = new String(sourceFileName);\r", "+\t\tname = new String(sourceFileName);\r", "+\t} else {\r", "+\t\treturn null;\r", "+\t}\r", "-\t\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "-\t\tif (!pkgFrag.isDefaultPackage()) {\r", "-\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');\r", "-\t\t\tname = pkg + '/' + name;\r", "+\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "+\tif (!pkgFrag.isDefaultPackage()) {\r", "+\t\tString pkg= type.getPackageFragment().getElementName().replace('.', '/');\r", "+\t\tname= pkg + '/' + name;\r", "+\t}\r", "+\t// try to get the entry\r", "+\tZipEntry entry= null;\r", "+\tZipFile zip = null;\r", "+\tchar[] source= null;\r", "+\ttry {\r", "+\t\tString fullName;\r", "+\t\t//add the root path if specified\r", "+\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "+\t\t\tfullName= fRootPath + '/' + name;\r", "+\t\t} else {\r", "+\t\t\tfullName= name;\r", "-\t\t// try to get the entry\r", "-\t\tZipEntry entry = null;\r", "-\t\tZipFile zip = null;\r", "-\t\tchar[] source = null;\r", "-\t\ttry {\r", "-\t\t\tString fullName;\r", "-\t\t\t//add the root path if specified\r", "-\t\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "-\t\t\t\tfullName = fRootPath + '/' + name;\r", "-\t\t\t} else {\r", "-\t\t\t\tfullName = name;\r", "-\t\t\t}\r", "-\t\t\tzip = getZip();\r", "-\t\t\tentry = zip.getEntry(fullName);\r", "-\t\t\tif (entry != null) {\r", "-\t\t\t\t// now read the source code\r", "-\t\t\t\tbyte[] bytes = readEntry(zip, entry);\r", "-\t\t\t\tif (bytes != null) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tsource = BufferManager.bytesToChar(bytes);\r", "-\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\tsource = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\treturn null;\r", "-\t\t} finally {\r", "-\t\t\tif (zip != null) {\r", "+\t\tzip = getZip();\r", "+\t\tentry= zip.getEntry(fullName);\r", "+\t\tif (entry != null) {\r", "+\t\t\t// now read the source code\r", "+\t\t\tbyte[] bytes= readEntry(zip, entry);\r", "+\t\t\tif (bytes != null) {\r", "-\t\t\t\t\tzip.close();\r", "-\t\t\t\t} catch (IOException e) {\r", "+\t\t\t\t\tsource= BufferManager.bytesToChar(bytes);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\tsource= null;\r", "-\t\treturn source;\r", "-\t}\r", "+\t} catch (CoreException e) {\r", "+\t\treturn null;\r", "+\t} finally {\r", "+\t\tif (zip != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tzip.close();\r", "+\t\t\t} catch(IOException e) {}\r", "+\treturn source;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc92061a8ecadefde8a4b6dd93a5aa0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": "\r public char[] findSource(IType type, IBinaryType info)", "diff": ["-\t */\r", "-\tpublic char[] findSource(IType type, IBinaryType info) {\r", "-\t\tchar[] sourceFileName = info.sourceFileName();\r", "+ */\r", "+public char[] findSource(IType type, IBinaryType info) {\r", "+\tString name = null;\r", "+\t// see 1FVVWZT\r", "+\tif (info instanceof ClassFileReader) {\r", "+\t\tchar[] sourceFileName = ((ClassFileReader) info).sourceFileName();\r", "-\t\tString name = new String(sourceFileName);\r", "+\t\tname = new String(sourceFileName);\r", "+\t} else {\r", "+\t\treturn null;\r", "+\t}\r", "-\t\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "-\t\tif (!pkgFrag.isDefaultPackage()) {\r", "-\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');\r", "-\t\t\tname = pkg + '/' + name;\r", "+\tIPackageFragment pkgFrag = type.getPackageFragment();\r", "+\tif (!pkgFrag.isDefaultPackage()) {\r", "+\t\tString pkg= type.getPackageFragment().getElementName().replace('.', '/');\r", "+\t\tname= pkg + '/' + name;\r", "+\t}\r", "+\t// try to get the entry\r", "+\tZipEntry entry= null;\r", "+\tZipFile zip = null;\r", "+\tchar[] source= null;\r", "+\ttry {\r", "+\t\tString fullName;\r", "+\t\t//add the root path if specified\r", "+\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "+\t\t\tfullName= fRootPath + '/' + name;\r", "+\t\t} else {\r", "+\t\t\tfullName= name;\r", "-\t\t// try to get the entry\r", "-\t\tZipEntry entry = null;\r", "-\t\tZipFile zip = null;\r", "-\t\tchar[] source = null;\r", "-\t\ttry {\r", "-\t\t\tString fullName;\r", "-\t\t\t//add the root path if specified\r", "-\t\t\tif (!fRootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {\r", "-\t\t\t\tfullName = fRootPath + '/' + name;\r", "-\t\t\t} else {\r", "-\t\t\t\tfullName = name;\r", "-\t\t\t}\r", "-\t\t\tzip = getZip();\r", "-\t\t\tentry = zip.getEntry(fullName);\r", "-\t\t\tif (entry != null) {\r", "-\t\t\t\t// now read the source code\r", "-\t\t\t\tbyte[] bytes = readEntry(zip, entry);\r", "-\t\t\t\tif (bytes != null) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tsource = BufferManager.bytesToChar(bytes);\r", "-\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\tsource = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\treturn null;\r", "-\t\t} finally {\r", "-\t\t\tif (zip != null) {\r", "+\t\tzip = getZip();\r", "+\t\tentry= zip.getEntry(fullName);\r", "+\t\tif (entry != null) {\r", "+\t\t\t// now read the source code\r", "+\t\t\tbyte[] bytes= readEntry(zip, entry);\r", "+\t\t\tif (bytes != null) {\r", "-\t\t\t\t\tzip.close();\r", "-\t\t\t\t} catch (IOException e) {\r", "+\t\t\t\t\tsource= BufferManager.bytesToChar(bytes);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\tsource= null;\r", "-\t\treturn source;\r", "-\t}\r", "+\t} catch (CoreException e) {\r", "+\t\treturn null;\r", "+\t} finally {\r", "+\t\tif (zip != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tzip.close();\r", "+\t\t\t} catch(IOException e) {}\r", "+\treturn source;\r", "+}\r"]}], "num": 64271}
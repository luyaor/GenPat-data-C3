{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d093a28599b146a74652be5fabf12f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305c51191bdcfd76bd17ff4ddc7a29f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "fdf8a7c625823b4365f60e2b73aad682cd437b32", "commitAfterChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private static SearchPattern createTypePattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createTypePattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\tStringTokenizer tokenizer = new StringTokenizer(patternString, \" .\", true); //$NON-NLS-1$\r", "+\tScanner scanner = new Scanner(false, true); // tokenize white spaces\r", "+\tscanner.setSourceBuffer(patternString.toCharArray());\r", "-\tString lastToken = null;\r", "-\twhile (tokenizer.hasMoreTokens()){\r", "-\t\tString token = tokenizer.nextToken();\r", "-\t\tif (!token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\tif (type == null){\r", "-\t\t\t\ttype = token;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\ttype += token;\r", "-\t\t\t}\r", "+\tint token;\r", "+\ttry {\r", "+\t\ttoken = scanner.getNextToken();\r", "+\t} catch (InvalidInputException e) {\r", "+\t\treturn null;\r", "+\t}\r", "+\twhile (token != TerminalSymbols.TokenNameEOF){\r", "+\t\tswitch (token) {\r", "+\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\tif (type == null){\r", "+\t\t\t\t\ttype = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ttype += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tdefault:\r", "+\t\t\t\treturn null;\r", "-\t\tlastToken = token;\r", "+\t\ttry {\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fbc24648a0a1c8c6ecbd2efd2893b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "32a99f8c41e7f6505e98564a2fe955f48d80f711", "commitAfterChange": "38819b0397930dbfdcf4973c1bb1a5b3cfbe15eb", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames)", "signatureAfterChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames)", "diff": ["+\t\t\tif(CharOperation.endsWith(sourceName, new char[]{'[' ,']'})) {\r", "+\t\t\t\tsourceName = CharOperation.subarray(sourceName, 0, sourceName.length - 2);\r", "+\t\t\t}\r", "+\r", "+\t\t\tchar[] name = null;\r", "+\t\t\t\r", "+\t\t\t// compute variable name for base type\r", "+\t\t\ttry{\r", "+\t\t\t\tnameScanner.setSourceBuffer(sourceName);\r", "+\t\t\t\tswitch (nameScanner.getNextToken()) {\r", "+\t\t\t\t\tcase TokenNameint :\r", "+\t\t\t\t\tcase TokenNamebyte :\r", "+\t\t\t\t\tcase TokenNameshort :\r", "+\t\t\t\t\tcase TokenNamechar :\r", "+\t\t\t\t\tcase TokenNamelong :\r", "+\t\t\t\t\tcase TokenNamefloat :\r", "+\t\t\t\t\tcase TokenNamedouble :\r", "+\t\t\t\t\t\tif(token != null && token.length != 0)\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\tname = computeBaseNames(sourceName[0], excludeNames);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TokenNameboolean :\r", "+\t\t\t\t\t\tif(token != null && token.length != 0)\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\tname = computeBaseNames('z', excludeNames);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\tif(name != null) {\r", "+\t\t\t\t\t// accept result\r", "+\t\t\t\t\trequestor.acceptVariableName(\r", "+\t\t\t\t\t\tqualifiedPackageName,\r", "+\t\t\t\t\t\tqualifiedSourceName,\r", "+\t\t\t\t\t\tname,\r", "+\t\t\t\t\t\tname,\r", "+\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\tendPosition);\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t} catch(InvalidInputException e){\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t// compute variable name for non base type\r", "-\t\t\t\tchar[] name = names[i];\r", "+\t\t\t\tname = names[i];\r", "-\t\t\t\t\tidentifierScanner.setSourceBuffer(name);\r", "-\t\t\t\t\tif(identifierScanner.getNextToken() != identifierScanner.TokenNameIdentifier)\r", "+\t\t\t\t\tnameScanner.setSourceBuffer(name);\r", "+\t\t\t\t\tif(nameScanner.getNextToken() != TokenNameIdentifier)\r", "+\t\t\t\tint count = 2;\r", "+\t\t\t\tchar[] originalName = name;\r", "-\t\t\t\t\tif(CharOperation.equals(name, excludeNames[j], false))\r", "-\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\tif(CharOperation.equals(name, excludeNames[j], false)) {\r", "+\t\t\t\t\t\tname = CharOperation.concat(originalName, String.valueOf(count++).toCharArray());\r", "+\t\t\t\t\t\ti = 0;\r", "+\t\t\t\t\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7a3eebcc7c4768d7c5c74d51aa3ac64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "b9de5f3466a9b4d6687de837720c445097067b16", "commitAfterChange": "39416e9e4305b172d90b88aed3085d98ded0a86c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\twhile (token != TerminalSymbols.TokenNameEOF){\r", "+\twhile (token != ITerminalSymbols.TokenNameEOF){\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameDOT:\r", "-\t\t\t\t\t\t\t|| TerminalSymbols.TokenNameDOT == lastToken)){\r", "+\t\t\t\t\t\t\t|| ITerminalSymbols.TokenNameDOT == lastToken)){\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameMULTIPLY:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "-\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamevoid:\r"]}], "num": 24681}
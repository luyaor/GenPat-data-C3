{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb0e64db75efecb5b87172b740ec8416", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f53c735e09bed455ddb978e0d5176e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "commitAfterChange": "fe8f03030c996e7f3abaa101bf62fc6c88122090", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "signatureAfterChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "diff": ["+\t\t\t\t\tFlowInfo exceptionFlow = flowInfo;", "-\t\t\t\t\t\t\tloop.recordCatchContextOfEscapingException(exceptionContext, caughtException);", "+\t\t\t\t\t\t\tloop.recordCatchContextOfEscapingException(exceptionContext, caughtException, flowInfo);", "+\t\t\t\t    \texceptionFlow = FlowInfo.DEAD_END; // don't use flow info on first round, flow info will be evaluated during loopback simulation", "-\t\t\t\t\t\t\t\tflowInfo.unconditionalInits(),", "+\t\t\t\t\t\t\t\texceptionFlow.unconditionalInits(),", "-\t\t\t\t\t\t\t\tflowInfo.unconditionalInits(),", "+\t\t\t\t\t\t\t\texceptionFlow.unconditionalInits(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131b5b0373c3891952891be2d8f9206d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "commitAfterChange": "fe8f03030c996e7f3abaa101bf62fc6c88122090", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "diff": ["+\t\t\t\t\t\t\tFlowInfo exceptionFlow = flowInfo;", "-\t\t\t\t\t\t\t\t\tloop.recordCatchContextOfEscapingException(exceptionContext, caughtException);", "+\t\t\t\t\t\t\t\t\tloop.recordCatchContextOfEscapingException(exceptionContext, caughtException, flowInfo);", "+\t\t\t\t\t\t    \texceptionFlow = FlowInfo.DEAD_END; // don't use flow info on first round, flow info will be evaluated during loopback simulation", "-\t\t\t\t\t\t\t\t\t\tflowInfo.unconditionalInits(),", "+\t\t\t\t\t\t\t\t\t\texceptionFlow.unconditionalInits(),", "-\t\t\t\t\t\t\t\t\t\tflowInfo.unconditionalInits(),", "+\t\t\t\t\t\t\t\t\t\texceptionFlow.unconditionalInits(),"]}], "num": 62692}
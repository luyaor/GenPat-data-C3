{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29883ca9c472a0314b63dd00bb75d5e7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "590844b355f60a4eccdb3c49a9638d6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["-\tprivate void computeExpectedTypes(ASTNode parent, Scope scope){", "+\tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope){", "+\t\t\t\tBinaryExpression binaryExpression = (BinaryExpression) parent;", "+\t\t\t\tif(operator == OperatorIds.LESS) {", "+\t\t\t\t\tif(binaryExpression.left instanceof SingleNameReference){", "+\t\t\t\t\t\tSingleNameReference name = (SingleNameReference) binaryExpression.left;", "+\t\t\t\t\t\tBinding b = scope.getBinding(name.token, BindingIds.VARIABLE | BindingIds.TYPE, name, false);", "+\t\t\t\t\t\tif(b instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tTypeVariableBinding[] typeVariableBindings =((ReferenceBinding)b).typeVariables();", "+\t\t\t\t\t\t\tif(typeVariableBindings != null && typeVariableBindings.length > 0) {", "+\t\t\t\t\t\t\t\taddExpectedType(typeVariableBindings[0].firstBound);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t} else if(parent instanceof ParameterizedSingleTypeReference) {", "+\t\t\tParameterizedSingleTypeReference ref = (ParameterizedSingleTypeReference) parent;", "+\t\t\tTypeVariableBinding[] typeVariables = ((ReferenceBinding)ref.resolvedType).typeVariables();", "+\t\t\tint length = ref.typeArguments == null ? 0 : ref.typeArguments.length;", "+\t\t\tif(typeVariables != null && typeVariables.length >= length) {", "+\t\t\t\tint index = length - 1;", "+\t\t\t\twhile(index > -1 && ref.typeArguments[index] != node) index--;", "+\t\t\t\taddExpectedType(typeVariables[index].firstBound);", "+\t\t\t}", "+\t\t} else if(parent instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference ref = (ParameterizedQualifiedTypeReference) parent;", "+\t\t\tTypeVariableBinding[] typeVariables = ((ReferenceBinding)ref.resolvedType).typeVariables();", "+\t\t\tTypeReference[][] arguments = ref.typeArguments;", "+\t\t\tif(typeVariables != null) {", "+\t\t\t\tint iLength = arguments == null ? 0 : arguments.length;", "+\t\t\t\tdone: for (int i = 0; i < iLength; i++) {", "+\t\t\t\t\tint jLength = arguments[i] == null ? 0 : arguments[i].length;", "+\t\t\t\t\tfor (int j = 0; j < jLength; j++) {", "+\t\t\t\t\t\tif(arguments[i][j] == node && typeVariables.length >= j) {", "+\t\t\t\t\t\t\taddExpectedType(typeVariables[j].firstBound);", "+\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9305e05e8ebae91a770802e374aa0c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "73e6c55b6cebcb032c8128286708483f86167b64", "commitAfterChange": "5326f4925981afee39790c88bc133bd18e542033", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void resolve(ClassScope classScope)", "signatureAfterChange": " \tpublic void resolve(ClassScope classScope)", "diff": ["+\t */", "+\tpublic void resolve(ClassScope classScope) {", "+", "+\t\t// @param tags", "+\t\tint paramTagsSize = parameters == null ? 0 : parameters.length;", "+\t\tfor (int i = 0; i < paramTagsSize; i++) {", "+\t\t\tAnnotationSingleNameReference param = parameters[i];", "+\t\t\tclassScope.problemReporter().annotationUnexpectedTag(param.tagSourceStart, param.tagSourceEnd);", "+\t\t}", "+", "+\t\t// @return tags", "+\t\tif (this.returnStatement != null) {", "+\t\t\tclassScope.problemReporter().annotationUnexpectedTag(this.returnStatement.sourceStart, this.returnStatement.sourceEnd);", "+\t\t}", "+", "+\t\t// @throws/@exception tags", "+\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "+\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\tint start, end;", "+\t\t\tif (typeRef instanceof AnnotationSingleTypeReference) {", "+\t\t\t\tAnnotationSingleTypeReference singleRef = (AnnotationSingleTypeReference) typeRef;", "+\t\t\t\tstart = singleRef.tagSourceStart;", "+\t\t\t\tend = singleRef.tagSourceEnd;", "+\t\t\t} else if (typeRef instanceof AnnotationQualifiedTypeReference) {", "+\t\t\t\tAnnotationQualifiedTypeReference qualifiedRef = (AnnotationQualifiedTypeReference) typeRef;", "+\t\t\t\tstart = qualifiedRef.tagSourceStart;", "+\t\t\t\tend = qualifiedRef.tagSourceEnd;", "+\t\t\t} else {", "+\t\t\t\tstart = typeRef.sourceStart;", "+\t\t\t\tend = typeRef.sourceEnd;", "+\t\t\t}", "+\t\t\tclassScope.problemReporter().annotationUnexpectedTag(start, end);", "+\t\t}", "+", "+\t\t// @see tags", "+\t\tint seeTagsNbre = references == null ? 0 : references.length;", "+\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "+\t\t\treferences[i].resolveType(classScope);", "+\t\t}", "+\t}", "-\t */", "-\tpublic void resolve(ClassScope classScope) {", "-", "-\t\t// @param tags", "-\t\tint paramTagsSize = parameters == null ? 0 : parameters.length;", "-\t\tfor (int i = 0; i < paramTagsSize; i++) {", "-\t\t\tAnnotationArgument param = parameters[i];", "-\t\t\tclassScope.problemReporter().annotationUnexpectedTag(param.declarationSourceStart, param.declarationSourceEnd);", "-\t\t}", "-", "-\t\t// @return tags", "-\t\tif (this.returnStatement != null) {", "-\t\t\tclassScope.problemReporter().annotationUnexpectedTag(this.returnStatement.sourceStart, this.returnStatement.sourceEnd);", "-\t\t}", "-", "-\t\t// @throws/@exception tags", "-\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "-\t\t\tTypeReference typeRef = thrownExceptions[i];", "-\t\t\tint start, end;", "-\t\t\tif (typeRef instanceof AnnotationSingleTypeReference) {", "-\t\t\t\tAnnotationSingleTypeReference singleRef = (AnnotationSingleTypeReference) typeRef;", "-\t\t\t\tstart = singleRef.tagSourceStart;", "-\t\t\t\tend = singleRef.tagSourceEnd;", "-\t\t\t} else if (typeRef instanceof AnnotationQualifiedTypeReference) {", "-\t\t\t\tAnnotationQualifiedTypeReference singleRef = (AnnotationQualifiedTypeReference) typeRef;", "-\t\t\t\tstart = singleRef.tagSourceStart;", "-\t\t\t\tend = singleRef.tagSourceEnd;", "-\t\t\t} else {", "-\t\t\t\tstart = typeRef.sourceStart;", "-\t\t\t\tend = typeRef.sourceEnd;", "-\t\t\t}", "-\t\t\tclassScope.problemReporter().annotationUnexpectedTag(start, end);", "-\t\t}", "-", "-\t\t// @see tags", "-\t\tint seeTagsNbre = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "-\t\t\treferences[i].resolveType(classScope);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8639f9facada7c3da608ef5e34b8582", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "4371b6d8f370e30de814aa3f488aa7fff3acceb1", "commitAfterChange": "653406a482474edc2d8737f13239902108d47273", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void checkAnnotation()", "signatureAfterChange": "  public void checkAnnotation()", "diff": ["-\t\tthis.annotation.reportReferenceInfo(requestor);", "+\t\t// Report reference info in annotation @throws/@exception tags", "+\t\tTypeReference[] thrownExceptions = this.annotation.thrownExceptions;", "+\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "+\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\tif (typeRef instanceof AnnotationSingleTypeReference) {", "+\t\t\t\tAnnotationSingleTypeReference singleRef = (AnnotationSingleTypeReference) typeRef;", "+\t\t\t\trequestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t} else if (typeRef instanceof AnnotationQualifiedTypeReference) {", "+\t\t\t\tAnnotationQualifiedTypeReference qualifiedRef = (AnnotationQualifiedTypeReference) typeRef;", "+\t\t\t\trequestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Report reference info in annotation @see tags", "+\t\tExpression[] references = this.annotation.references;", "+\t\tint seeTagsNbre = references == null ? 0 : references.length;", "+\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "+\t\t\tExpression reference = references[i];", "+\t\t\tif (reference instanceof AnnotationSingleTypeReference) {", "+\t\t\t\tAnnotationSingleTypeReference singleRef = (AnnotationSingleTypeReference) reference;", "+\t\t\t\trequestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t} else if (reference instanceof AnnotationQualifiedTypeReference) {", "+\t\t\t\tAnnotationQualifiedTypeReference qualifiedRef = (AnnotationQualifiedTypeReference) reference;", "+\t\t\t\trequestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t} else if (reference instanceof AnnotationFieldReference) {", "+\t\t\t\tAnnotationFieldReference fieldRef = (AnnotationFieldReference) reference;", "+\t\t\t\trequestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "+\t\t\t} else if (reference instanceof AnnotationMessageSend) {", "+\t\t\t\tAnnotationMessageSend messageSend = (AnnotationMessageSend) reference;", "+\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\trequestor.acceptMethodReference(messageSend.selector, messageSend.arguments.length, messageSend.sourceStart);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 48404}
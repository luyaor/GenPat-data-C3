{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c0a894085ba4743de41605b17688832", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "041cb86a399a70c9367c7e735af762f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "7806a28af49b091c5019a3f6cc2c2153a422eff3", "commitAfterChange": "b6eb3741928f7f60040cd62cb39c2031ea7f1375", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public GlobalVariable newVariable(char[] typeName, char[] name, char[] initializer)", "signatureAfterChange": " public GlobalVariable newVariable(char[] typeName, char[] name, char[] initializer)", "diff": ["-\ttry {", "-\t\tthis.variables[this.variableCount++] = var;", "-\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\tint index = this.variableCount - 1;", "-\t\tGlobalVariable[] oldVars = this.variables;", "-\t\tGlobalVariable[] newVars = new GlobalVariable[index * 2];", "-\t\tSystem.arraycopy(oldVars, 0, newVars, 0, index);", "-\t\tnewVars[index] = var;", "-\t\tthis.variables = newVars;", "-\t}", "+\tif (this.variableCount >= this.variables.length) // assume variables is never empty", "+\t\tSystem.arraycopy(this.variables, 0, this.variables = new GlobalVariable[this.variableCount * 2], 0, this.variableCount);", "+\tthis.variables[this.variableCount++] = var;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0472191b19d19e089e7a9b8c0d067cde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 250, "methodNumberAfterChange": 250, "signatureBeforeChange": " protected void pushOnAstLengthStack(int pos)", "signatureAfterChange": " protected void pushOnAstLengthStack(int pos)", "diff": ["-\ttry {", "-\t\tthis.astLengthStack[++this.astLengthPtr] = pos;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.astLengthStack.length;", "-\t\tint[] oldPos = this.astLengthStack;", "-\t\tthis.astLengthStack = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldPos, 0, this.astLengthStack, 0, oldStackLength);", "-\t\tthis.astLengthStack[this.astLengthPtr] = pos;", "+", "+\tint stackLength = this.astLengthStack.length;", "+\tif (++this.astLengthPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.astLengthStack, 0,", "+\t\t\tthis.astLengthStack = new int[stackLength + StackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.astLengthStack[this.astLengthPtr] = pos;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5281ca6e9197c288722fcf3784542b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " protected void pushOnExpressionStackLengthStack(int pos)", "signatureAfterChange": " protected void pushOnExpressionStackLengthStack(int pos)", "diff": ["-\ttry {", "-\t\tthis.expressionLengthStack[++this.expressionLengthPtr] = pos;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.expressionLengthStack.length;", "-\t\tint[] oldPos = this.expressionLengthStack;", "-\t\tthis.expressionLengthStack = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldPos, 0, this.expressionLengthStack, 0, oldStackLength);", "-\t\tthis.expressionLengthStack[this.expressionLengthPtr] = pos;", "+", "+\tint stackLength = this.expressionLengthStack.length;", "+\tif (++this.expressionLengthPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionLengthStack, 0,", "+\t\t\tthis.expressionLengthStack = new int[stackLength + StackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.expressionLengthStack[this.expressionLengthPtr] = pos;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc31d5c64a135e6440b239fbd64d548d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "b60bff4501141ce0e7ed5fab43805b77b52b5e19", "commitAfterChange": "0aa46ff32860f090b1c2b435d909e18926d63ea4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "signatureAfterChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "diff": ["-\t\t\tint variableCount = this.variableCount;", "-\t\t\tGlobalVariable[] variablesCopy = new GlobalVariable[variableCount];", "-\t\t\tSystem.arraycopy(this.variables, 0, variablesCopy, 0, variableCount); ", "-\t\t\tthis.installedVars = new VariablesInfo(evaluator.getPackageName(), evaluator.getClassName(), classes, variablesCopy, variableCount);", "+\t\t\tint count = this.variableCount;", "+\t\t\tGlobalVariable[] variablesCopy = new GlobalVariable[count];", "+\t\t\tSystem.arraycopy(this.variables, 0, variablesCopy, 0, count); ", "+\t\t\tthis.installedVars = new VariablesInfo(evaluator.getPackageName(), evaluator.getClassName(), classes, variablesCopy, count);"]}], "num": 50716}
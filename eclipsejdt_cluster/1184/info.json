{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08a99974a2ecaba11b61672af1e6f075", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5434d118166976fb64bea1de7c256a66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "876d1e29545f3823ab6b6c14229362303cd9cc00", "commitAfterChange": "0de5167791884524f72d9d44c10f0e243af65d00", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\treturn null;", "+\t\tif (fieldBinding instanceof ProblemFieldBinding) {", "+\t\t\tProblemFieldBinding problemFieldBinding = (ProblemFieldBinding) fieldBinding;", "+\t\t\tFieldBinding closestMatch = problemFieldBinding.closestMatch;", "+\t\t\tswitch(problemFieldBinding.problemId()) {", "+\t\t\t\tcase ProblemReasons.InheritedNameHidesEnclosingName :", "+\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation :", "+\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\t\t\tif (closestMatch != null) {", "+\t\t\t\t\t\tfieldBinding = closestMatch;", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!fieldBinding.isValidBinding()) {", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "818da39ec94f15864d051e0083900e4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-\t\t\tSystem.out.println(\"EXACT\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"EXACT\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"EQUIVALENT\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"EQUIVALENT\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"ERASURE\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"ERASURE\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"INVALID RULE\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(\"INVALID RULE\"); //$NON-NLS-1$", "-\t\tSystem.out.println(\"\\tRaw: \"+match.isRaw()); //$NON-NLS-1$", "+\t\tif (match instanceof MethodReferenceMatch) {", "+\t\t\tMethodReferenceMatch methodReferenceMatch = (MethodReferenceMatch) match;", "+\t\t\tif (methodReferenceMatch.isPolymorphic()) {", "+\t\t\t\tSystem.out.print(\"+POLYMORPHIC\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (methodReferenceMatch.isImplicit()) {", "+\t\t\t\tSystem.out.print(\"+IMPLICIT\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (methodReferenceMatch.isSynthetic()) {", "+\t\t\t\tSystem.out.print(\"+SYNTHETIC\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tSystem.out.println(\"\\n\\tRaw: \"+match.isRaw()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84fc620b2663c995e01aa60debbeeac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5194065a29db2efb6ca399235812dc2379a0b639", "commitAfterChange": "64dc9dc143f648f63c2998f7d684fab052c282d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["+\t\t} else if (node instanceof QualifiedNameReference) {\r", "+\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;\r", "+\t\t\tif (qualifiedNameReference.isFieldReference()) {\r", "+\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.fieldBinding());\r", "+\t\t\t} else if (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\tthis.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\t} else {\r", "+\t\t\t\t// this is a variable\r", "+\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);\t\t\t\t\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d05e3308116c286a6feff01a3f66a47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMarkerAnnotationName.java", "commitBeforeChange": "1b98b39107e931dc0893df1da7a410cad5cc4745", "commitAfterChange": "9635fd418f2d5b55fe3d3dc4ccb7797a5daf3a53", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif(type instanceof QualifiedTypeReference) {", "+\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) type;", "+\t\t\tBinding binding = scope.parent.getTypeOrPackage(qualifiedTypeReference.tokens); // step up from the ClassScope", "+\t\t\tif (!binding.isValidBinding()) {", "+\t\t\t\tscope.problemReporter().invalidType(this, (TypeBinding) binding);", "+\t\t\t\tthrow new CompletionNodeFound();", "+\t\t\t}", "+\t\t\tthrow new CompletionNodeFound(this, binding, scope);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "936c64b880ead1cb570800f9ef083071", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["+\t\t\t\tif (match instanceof MethodReferenceMatch) {", "+\t\t\t\t\tMethodReferenceMatch methRef = (MethodReferenceMatch) match;", "+\t\t\t\t\tif (methRef.isPolymorphic()) {", "+\t\t\t\t\t\tif (match.getAccuracy() == SearchMatch.A_ACCURATE) {", "+\t\t\t\t\t\t\tif (this.showPolymorphic > 0) {", "+\t\t\t\t\t\t\t\tline.append(\" POLYMORPHIC\");", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.showPolymorphic <= 1) {", "+\t\t\t\t\t\t\t\tline = null; // do not show potential polymorphic matches", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tline.append(\" POLYMORPHIC\");", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 1184}
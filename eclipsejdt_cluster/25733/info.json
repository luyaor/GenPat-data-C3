{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5feeee1ff051ed3b7493baa6af100ca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b12e7ba3180d142217a8167395d7cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "1af5a4c9db5050a646b966ef94445c5d7d6791d8", "commitAfterChange": "eb4338d8d760c2f9a3b3f7cdfcea612b9c1ab6ca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tif (isStringSwitch) {", "+\t\t\t\t// the secret variable should be created before iterating over the switch's statements that could", "+\t\t\t\t// create more locals. This must be done to prevent overlapping of locals", "+\t\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=356002", "+\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "+\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "+\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "+\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;", "+\t\t\t}", "-\t\t\t}", "-\t\t\tif (isStringSwitch) {", "-\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "-\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "-\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "-\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9a555297984dd00e73c1bb03b9f3277", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final void addLocalVariable(LocalVariableBinding binding)", "signatureAfterChange": " public final void addLocalVariable(LocalVariableBinding binding)", "diff": ["+ */", "+public final void addLocalVariable(LocalVariableBinding binding) {", "+\tcheckAndSetModifiersForVariable(binding);", "+\t// insert local in scope", "+\tif (this.localIndex == this.locals.length)", "+\t\tSystem.arraycopy(", "+\t\t\tthis.locals,", "+\t\t\t0,", "+\t\t\t(this.locals = new LocalVariableBinding[this.localIndex * 2]),", "+\t\t\t0,", "+\t\t\tthis.localIndex);", "+\tthis.locals[this.localIndex++] = binding;", "+\t// update local variable binding ", "+\tbinding.declaringScope = this;", "+\tbinding.id = this.outerMostMethodScope().analysisIndex++;", "+\t// share the outermost method scope analysisIndex", "+}", "-\t */", "-\tpublic final void addLocalVariable(LocalVariableBinding binding) {", "-", "-\t\tcheckAndSetModifiersForVariable(binding);", "-", "-\t\t// insert local in scope", "-\t\tif (localIndex == locals.length)", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tlocals,", "-\t\t\t\t0,", "-\t\t\t\t(locals = new LocalVariableBinding[localIndex * 2]),", "-\t\t\t\t0,", "-\t\t\t\tlocalIndex);", "-\t\tlocals[localIndex++] = binding;", "-", "-\t\t// update local variable binding ", "-\t\tbinding.declaringScope = this;", "-\t\tbinding.id = this.outerMostMethodScope().analysisIndex++;", "-\t\t// share the outermost method scope analysisIndex", "-\t}"]}], "num": 25733}
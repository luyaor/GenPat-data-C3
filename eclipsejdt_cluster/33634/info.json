{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7603f93580fd85ef5ccf6e33c900d0b7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bba890e28600f6e5febd27461363e37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 658, "methodNumberAfterChange": 658, "signatureBeforeChange": "\t\t \tpublic void test654()", "signatureAfterChange": "\t\t \tpublic void test654()", "diff": ["-\t\t\t\"Type safety: Map is a raw type. References to generic type Map<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map is a raw type. References to generic type Map<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\"HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b0aa23a987a0843461282921ce6f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref) [    void doA(\ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>) [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]+[@Tag on ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.dontD(Object) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]+[@Tag on ref]\","]}], "num": 33634}
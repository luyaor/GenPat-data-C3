{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa56918d77ad66bfc9476bd9e772afd2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e12bf54e88b9765053549fcd4e20fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptPlugin.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic static void trace(final String msg)", "signatureAfterChange": " \t \tpublic static void trace(final String msg)", "diff": ["-\t\tif(DEBUG)", "-\t\t\tSystem.err.println(\"[ \" + Thread.currentThread().getName() + \" ] \" + msg );  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tif (DEBUG) {", "+\t\t\tStringBuffer sb = new StringBuffer();", "+\t\t\tsb.append('[');", "+\t\t\t// SimpleDateFormat is not thread-safe, according to javadoc", "+\t\t\tsynchronized(TRACE_DATE_FORMAT) {", "+\t\t\t\tsb.append(TRACE_DATE_FORMAT.format(new Date()));", "+\t\t\t}", "+\t\t\tsb.append('-');", "+\t\t\t// Some threads have qualified type names; too long.", "+\t\t\tString threadName = Thread.currentThread().getName();", "+\t\t\tint dot = threadName.lastIndexOf('.');", "+\t\t\tif (dot < 0) {", "+\t\t\t\tsb.append(threadName);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tsb.append(threadName.substring(dot+1));", "+\t\t\t}", "+\t\t\tsb.append(']');", "+\t\t\tsb.append(msg);", "+\t\t\tSystem.out.println(sb);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9c266786bdd61210d6e4e92a0f465c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/align/Alignment.java", "commitBeforeChange": "68b5b6569d26dfa54df99160c0cc8f591e4f429f", "commitAfterChange": "8bbb06edfffb375054a31ad384a8ec2b75019f30", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["+\t\tString className = getClass().getName();", "+\t\tclassName = className.substring(className.lastIndexOf('.')+1);", "-\t\t\t.append(getClass().getName())", "-\t\t\t.append(':')", "-\t\t\t.append(\"<name: \")\t//$NON-NLS-1$", "+\t\t\t.append(className)", "+\t\t\t.append(\":<name: \")\t//$NON-NLS-1$", "+\t\tint indentLength = className.length()+1;", "+\t\tbuffer.append('\\n');", "+\t\tfor (int i=0; i<indentLength; i++) {", "+\t\t\tbuffer.append(' ');", "+\t\t}", "+\t\tbuffer", "+\t\t\t.append(\"<depth=\")\t//$NON-NLS-1$", "+\t\t\t.append(depth())", "+\t\t\t.append(\"><breakIndent=\")\t//$NON-NLS-1$", "+\t\t\t.append(this.breakIndentationLevel)", "+\t\t\t.append(\"><shiftBreakIndent=\")\t//$NON-NLS-1$", "+\t\t\t.append(this.shiftBreakIndentationLevel)", "+\t\t\t.append('>');"]}], "num": 40030}
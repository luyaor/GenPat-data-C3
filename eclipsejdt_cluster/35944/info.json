{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d29676b5b610c165f639f159d2cfaf33", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53345e38fff3810bfe466f35293d844f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "diff": ["-\t\tif (this.currentElement != null) {\r", "-\t\t\tswitch (elementType) {\r", "-\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "-\t\t\t\t\telement = project;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "-\t\t\t\t\telement = project.getPackageFragmentRoot(resource);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "+\t\tswitch (elementType) {\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\tif (this.currentElement != null) return this.currentElement;\r", "+\t\t\t\tIProject proj = (IProject)resource;\r", "+\t\t\t\tboolean isOpened = proj.isOpen();\r", "+\t\t\t\tif (isOpened && this.hasJavaNature(proj)) {\r", "+\t\t\t\t\telement = project == null ? JavaCore.create(proj) : project;\r", "+\t\t\t\t} else if (!isOpened) {\r", "+\t\t\t\t\tif (project == null) {\r", "+\t\t\t\t\t\tproject = JavaCore.create(proj);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (project.isOpen()) {\r", "+\t\t\t\t\t\telement = project; // java project is being closed or removed\r", "+\t\t\t\t\t} \r", "+\t\t\t\t} // else not a java-project\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\telement = project.getPackageFragmentRoot(resource);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t// find the element that encloses the resource\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\t\r", "+\t\t\t\tif (this.currentElement == null) {\r", "+\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t} else {\r", "-\t\t\t\t\tif (root != null && !JavaModelManager.conflictsWithOutputLocation(path, (JavaProject)project)) {\r", "+\t\t\t\t\tif (root == null) {\r", "+\t\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t\t} else if (!JavaModelManager.conflictsWithOutputLocation(path, (JavaProject)project)) {\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "-\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "+\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t// find the element that encloses the resource\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\t\r", "+\t\t\t\tif (this.currentElement == null) {\r", "+\t\t\t\t\telement = element = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t} else {\r", "-\t\t\t\t\t\t\troot = (IPackageFragmentRoot)this.currentElement;\r", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)this.currentElement;\r", "-\t\t\t\t\tif (pkgFragment != null) {\r", "+\t\t\t\t\tif (pkgFragment == null) {\r", "+\t\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t\t} else {\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "-\t\t\telement = JavaModelManager.create(resource, project);\r", "+\t\t\treturn null;\r", "+\t\t} else {\r", "+\t\t\tthis.currentElement = (Openable)element;\r", "+\t\t\treturn this.currentElement;\r", "-\t\tthis.currentElement = (Openable)element;\r", "-\t\treturn this.currentElement;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "857e0219d56aeb827007ccb2b65009c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "c1c274932491e0be8f680c6ad9f4ab9bacdf19f5", "commitAfterChange": "0c46c5213b09d0da0f69c7b26f904c0f9c4b8264", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \tpublic void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "signatureAfterChange": "\r \tpublic void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "diff": ["+\t\t\t\t// workaround for bug 15168 circular errors not reported \r", "+\t\t\t\tif (this.javaProjectsCache == null) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tthis.javaProjectsCache = this.getJavaModel().getJavaProjects();\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "-\t\t\t\t\t// in case the project was removed then added\r", "-\t\t\t\t\tthis.projectsBeingDeleted.remove(resource);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tthis.deltaProcessor.addToProjectsToUpdateWithDependents((IProject)resource);\r", "+\t\t\t\t\tIProject project = (IProject)resource;\r", "+\t\t\t\t\tthis.deltaProcessor.addToProjectsToUpdateWithDependents(project);\r", "+\t\t\t\t\t\r", "+\t\t\t\t\t// workaround for bug 15168 circular errors not reported \r", "+\t\t\t\t\tif (this.deltaProcessor.hasJavaNature(project)) {\r", "+\t\t\t\t\t\tthis.deltaProcessor.addToParentInfo((JavaProject)JavaCore.create(project));\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t// in case the project was removed then added then changed\r", "-\t\t\t\t\tthis.projectsBeingDeleted.remove(resource);\r", "-\t\t\t\t\t\r", "+\t\t\t\t\tIProject project = (IProject)resource;\r", "-\t\t\t\t\t\tthis.deltaProcessor.addToProjectsToUpdateWithDependents((IProject)resource);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {\r", "-\t\t\t\t\t\tIProject project = (IProject)resource;\r", "+\t\t\t\t\t\tthis.deltaProcessor.addToProjectsToUpdateWithDependents(project);\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported \r", "+\t\t\t\t\t\tif (project.isOpen()) {\r", "+\t\t\t\t\t\t\tif (this.deltaProcessor.hasJavaNature(project)) {\r", "+\t\t\t\t\t\t\t\tthis.deltaProcessor.addToParentInfo((JavaProject)JavaCore.create(project));\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)this.getJavaModel().findJavaProject(project);\r", "+\t\t\t\t\t\t\tif (javaProject != null) {\r", "+\t\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\t\tjavaProject.close();\r", "+\t\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tthis.deltaProcessor.removeFromParentInfo(javaProject);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {\r", "-\t\t\t\t\t\t\tthis.deltaProcessor.addToProjectsToUpdateWithDependents((IProject)resource);\r", "+\t\t\t\t\t\t\tthis.deltaProcessor.addToProjectsToUpdateWithDependents(project);\r", "+\r", "+\t\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported \r", "+\t\t\t\t\t\t\tif (isJavaProject) {\r", "+\t\t\t\t\t\t\t\tthis.deltaProcessor.addToParentInfo((JavaProject)JavaCore.create(project));\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);\r", "+\t\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\t\tjavaProject.close();\r", "+\t\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tthis.deltaProcessor.removeFromParentInfo(javaProject);\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported \r", "+\t\t\t\t\t\t// in case the project was removed then added then changed\r", "+\t\t\t\t\t\tthis.deltaProcessor.addToParentInfo((JavaProject)JavaCore.create(project));\r", "+\t\t\t\t\t}\t\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a90825b2a6c66946b575c2a174a95867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "c609c337bf309009b4e02e584ece29cf9833f54e", "commitAfterChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "diff": ["-\t\tboolean reloadClasspath = true;", "-\t\tif (delta != null) {", "-\t\t\treloadClasspath = false; // narrow down need to reload based on delta", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.REMOVED : // recreate one based on in-memory classpath", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "-\t\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "-\t\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\tswitch (delta.getKind()) {", "+\t\t\tcase IResourceDelta.REMOVED : // recreate one based on in-memory classpath", "+\t\t\t\ttry {", "+\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "+\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "+\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\tif (project.getProject().isAccessible()) {", "+\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0  // only consider content change", "+\t\t\t\t\t\t&& (delta.getFlags() & IResourceDelta.MOVED_FROM) == 0) {// and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0  // only consider content change", "-\t\t\t\t\t\t\t&& (delta.getFlags() & IResourceDelta.MOVED_FROM) == 0) // and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\treloadClasspath = true;", "-\t\t\t}", "-\t\t}", "-\t\tif (reloadClasspath) {", "-\t\t\ttry {", "-\t\t\t\tproject.forceClasspathReload(null);", "-\t\t\t} catch (RuntimeException e) {", "-\t\t\t} catch (JavaModelException e) {\t", "-\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// fall through", "+\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\ttry {", "+\t\t\t\t\tproject.forceClasspathReload(null);", "+\t\t\t\t} catch (RuntimeException e) { \t\t// ignore", "+\t\t\t\t} catch (JavaModelException e) {\t// ignore", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbde977a7cff2dfae52d37304d809d34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "signatureAfterChange": " \tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "diff": ["-\t\tboolean processChildren = false;", "+\t\tIResourceDelta[] children = null;", "-\t\t\t\tprocessChildren = true;", "+\t\t\t\tchildren = delta.getAffectedChildren();", "-\t\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+\t\t\t\t\t\taddToRootsToRefreshWithDependents(javaProject);", "-\t\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t\t\taddToParentInfo(javaProject);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t// force to (re)read the .classpath file", "+\t\t\t\t\t\t\t\tjavaProject.getPerProjectInfo().readAndCacheClasspath(javaProject);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {\t", "+\t\t\t\t\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tthis.state.updateProjectReferences(", "-\t\t\t\t\t\t\t\t\tjavaProject, ", "-\t\t\t\t\t\t\t\t\tnull/*no old classpath*/, ", "-\t\t\t\t\t\t\t\t\tnull/*compute new resolved classpath later*/, ", "-\t\t\t\t\t\t\t\t\tnull/*read raw classpath later*/, ", "-\t\t\t\t\t\t\t\t\tfalse/*cannot change resources*/);", "-\t\t\t\t\t\t\t} catch (JavaModelException e1) {", "-\t\t\t\t\t\t\t\t// project always exists", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t\tClasspathChange change = (ClasspathChange) this.classpathChanges.get(project);", "+\t\t\t\t\t\t\tthis.state.addProjectReferenceChange(javaProject, change == null ? null : change.oldResolvedClasspath);", "-\t\t\t\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+\t\t\t\t\t\t\t\taddToRootsToRefreshWithDependents(javaProject);", "-\t\t\t\t\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t\t\t\t\t\taddToParentInfo(javaProject);", "-\t\t\t\t\t\t\t\tif (wasJavaProject != isJavaProject) { ", "+\t\t\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "-\t\t\t\t\t\t\t\t\t\tprocessChildren = true;", "+\t\t\t\t\t\t\t\t\t\tchildren = delta.getAffectedChildren();", "-\t\t\t\t\t\t\t\t\tprocessChildren = true;", "+\t\t\t\t\t\t\t\t\tchildren = delta.getAffectedChildren();", "-\t\t\t\t\treconcileClasspathFileUpdate(delta, (JavaProject)JavaCore.create(file.getProject()));", "+\t\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\t\t\t\tint flags = delta.getFlags();", "+\t\t\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) == 0  // only consider content change", "+\t\t\t\t\t\t\t\t&& (flags & IResourceDelta.ENCODING) == 0 // and encoding change", "+\t\t\t\t\t\t\t\t&& (flags & IResourceDelta.MOVED_FROM) == 0) {// and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t// fall through", "+\t\t\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\t\t\tjavaProject = (JavaProject)JavaCore.create(file.getProject());", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t// force to (re)read the .classpath file", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tjavaProject.getPerProjectInfo().readAndCacheClasspath(javaProject);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t// project doesn't exist", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "-\t\tif (processChildren) {", "-\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "+\t\tif (children != null) {"]}], "num": 35944}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4be77d07ada04537342dba0e6ad67129", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a63963dbf33f41496c2f05d553bdcd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "5af30c3917bf512b1381c83cf2b214b4e93e8c9e", "commitAfterChange": "40810d6d8748f2beada6fc3922fddf79c52aa3fb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(FieldDeclaration fieldDecl, boolean resolve)", "diff": ["+ */\r", "+private int matchLevel(FieldDeclaration fieldDecl, boolean resolve) {\r", "+\t// nedd to be a write only access\t\r", "+\tif (!this.writeAccess || this.readAccess) return IMPOSSIBLE_MATCH;\r", "+\t\r", "+\t// need have an initialization\r", "+\tif (fieldDecl.initialization == null) return IMPOSSIBLE_MATCH;", "+\t\r", "+\t// field name\r", "+\tif (!this.matchesName(this.name, fieldDecl.name))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\tif (resolve) {\r", "+\t\t// receiver type and field type\r", "+\t\treturn this.matchLevel(fieldDecl.binding);\r", "+\t} else {\r", "+\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a1dad48306822f2b0b20a32dfcd4b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "commitAfterChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected int resolveLevel(ConstructorDeclaration constructor, boolean checkDeclarations)", "signatureAfterChange": " protected int resolveLevel(FieldDeclaration field)", "diff": ["+}", "+protected int resolveLevel(FieldDeclaration field) {", "+\t// only accept enum constants", "+\tif (field.type != null || field.binding == null) return IMPOSSIBLE_MATCH;", "+\tif (this.pattern.declaringSimpleName != null && !matchesName(this.pattern.declaringSimpleName, field.binding.type.sourceName()))", "+\t\treturn IMPOSSIBLE_MATCH;", "+\tif (!(field.initialization instanceof AllocationExpression) || field.initialization.resolvedType.isLocalType()) return IMPOSSIBLE_MATCH;", "+", "+\treturn resolveLevel(((AllocationExpression)field.initialization).binding);"]}], "num": 61615}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58c432da877ba8c6d56f6d81312616f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20e597d2647ce83c6e58180b66f358ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 59, "signatureBeforeChange": " public IJavaElement getOriginal(IJavaElement workingCopyElement)", "signatureAfterChange": " public IJavaElement getOriginal(IJavaElement workingCopyElement)", "diff": ["- */", "-public IJavaElement getOriginal(IJavaElement workingCopyElement) {", "-\treturn null;", "-}", "+ */", "+public IJavaElement getOriginal(IJavaElement workingCopyElement) {", "+\tif (!isWorkingCopy()) return null;", "+\t", "+\t//not a element contained in a compilation unit", "+\tint javaElementType = workingCopyElement.getElementType();", "+\tif (javaElementType < COMPILATION_UNIT || javaElementType == CLASS_FILE) {", "+\t\treturn null;", "+\t}", "+\tif (workingCopyElement instanceof BinaryMember) {", "+\t\treturn null;", "+\t}", "+\tIJavaElement parent = workingCopyElement.getParent();", "+\tArrayList hierarchy = new ArrayList(4);", "+\t", "+\twhile (parent.getElementType() > COMPILATION_UNIT) {", "+\t\thierarchy.add(parent);", "+\t\tparent = parent.getParent();", "+\t}", "+\tif (parent.getElementType() == COMPILATION_UNIT) {", "+\t\thierarchy.add(((ICompilationUnit)parent).getOriginalElement());", "+\t}", "+\t", "+\tICompilationUnit cu = (ICompilationUnit) getOriginalElement();", "+\tif (javaElementType == COMPILATION_UNIT) {", "+\t\tparent = workingCopyElement;", "+\t}", "+\tif (((ICompilationUnit) parent).isWorkingCopy() && !((ICompilationUnit) parent).getOriginalElement().equals(cu)) {", "+\t\treturn null;", "+\t}", "+\tswitch (javaElementType) {", "+\t\tcase PACKAGE_DECLARATION :", "+\t\t\treturn cu.getPackageDeclaration(workingCopyElement.getElementName());", "+\t\tcase IMPORT_CONTAINER :", "+\t\t\treturn cu.getImportContainer();", "+\t\tcase IMPORT_DECLARATION :", "+\t\t\treturn cu.getImport(workingCopyElement.getElementName());", "+\t\tcase TYPE :", "+\t\t\tif (hierarchy.size() == 1) {", "+\t\t\t\treturn cu.getType(workingCopyElement.getElementName());", "+\t\t\t} else {", "+\t\t\t\t//inner type", "+\t\t\t\treturn getOriginalType(hierarchy).getType(workingCopyElement.getElementName());", "+\t\t\t}", "+\t\tcase METHOD :", "+\t\t\tIType type;", "+\t\t\tif (hierarchy.size() == 2) {", "+\t\t\t\tString typeName = ((IJavaElement) hierarchy.get(0)).getElementName();", "+\t\t\t\ttype = cu.getType(typeName);", "+\t\t\t} else {", "+\t\t\t\t//inner type", "+\t\t\t\ttype = getOriginalType(hierarchy);", "+\t\t\t}", "+\t\t\treturn type.getMethod(workingCopyElement.getElementName(), ((IMethod) workingCopyElement).getParameterTypes());", "+\t\tcase FIELD :", "+\t\t\tif (hierarchy.size() == 2) {", "+\t\t\t\tString typeName = ((IJavaElement) hierarchy.get(0)).getElementName();", "+\t\t\t\ttype = cu.getType(typeName);", "+\t\t\t} else {", "+\t\t\t\t//inner type", "+\t\t\t\ttype = getOriginalType(hierarchy);", "+\t\t\t}", "+\t\t\treturn type.getField(workingCopyElement.getElementName());", "+\t\tcase INITIALIZER :", "+\t\t\tif (hierarchy.size() == 2) {", "+\t\t\t\tString typeName = ((IJavaElement) hierarchy.get(0)).getElementName();", "+\t\t\t\ttype = cu.getType(typeName);", "+\t\t\t} else {", "+\t\t\t\t//inner type", "+\t\t\t\ttype = getOriginalType(hierarchy);", "+\t\t\t}", "+\t\t\treturn type.getInitializer(((Initializer) workingCopyElement).getOccurrenceCount());", "+\t\tcase COMPILATION_UNIT :", "+\t\t\treturn cu;", "+\t\tdefault :", "+\t\t\treturn null;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d959d829e0a62ec5dac3b55f2898e242", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["-\t\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\t\tsourceType.qualifiedPackageName(),", "-\t\t\t\t\t\tsourceType.sourceName(),", "-\t\t\t\t\t\tsourceType.sourceName(),", "-\t\t\t\t\t\tsourceType.modifiers,", "-\t\t\t\t\t\tthis.startPosition - this.offset, ", "-\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\trelevance);", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "+\t\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "+\t\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "+\t\t\t\t\t\tproposal.setFlags(sourceType.modifiers);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\t\tsourceType.qualifiedPackageName(),", "-\t\t\t\t\t\tsourceType.sourceName(),", "-\t\t\t\t\t\tsourceType.sourceName(),", "-\t\t\t\t\t\tsourceType.modifiers,", "-\t\t\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\trelevance);", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "+\t\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "+\t\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "+\t\t\t\t\t\tproposal.setFlags(sourceType.modifiers | Flags.AccInterface);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\t\t\ttypeName,", "-\t\t\t\t\t\t\t\t\tcompletionName,", "-\t\t\t\t\t\t\t\t\trefBinding.modifiers,", "-\t\t\t\t\t\t\t\t\tthis.startPosition - this.offset, ", "-\t\t\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(packageName);", "+\t\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(refBinding));", "+\t\t\t\t\t\t\t\t\tproposal.setPackageName(packageName);", "+\t\t\t\t\t\t\t\t\tproposal.setTypeName(typeName);", "+\t\t\t\t\t\t\t\t\tproposal.setCompletion(completionName);", "+\t\t\t\t\t\t\t\t\tproposal.setFlags(refBinding.modifiers);", "+\t\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\t\t\ttypeName,", "-\t\t\t\t\t\t\t\t\tcompletionName,", "-\t\t\t\t\t\t\t\t\trefBinding.modifiers,", "-\t\t\t\t\t\t\t\t\tthis.startPosition - this.offset, ", "-\t\t\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(packageName);", "+\t\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(refBinding));", "+\t\t\t\t\t\t\t\t\tproposal.setPackageName(packageName);", "+\t\t\t\t\t\t\t\t\tproposal.setTypeName(typeName);", "+\t\t\t\t\t\t\t\t\tproposal.setCompletion(completionName);", "+\t\t\t\t\t\t\t\t\tproposal.setFlags(refBinding.modifiers | Flags.AccInterface);", "+\t\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff917bd24b106891b049f5b70e129061", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits, IProgressMonitor monitor)", "signatureAfterChange": "  public void resolve(IGenericType[] suppliedTypes, org.eclipse.jdt.core.ICompilationUnit[] closedCUs, HashSet localTypes, IProgressMonitor monitor)", "diff": ["-public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits, IProgressMonitor monitor) {", "+public void resolve(IGenericType[] suppliedTypes, org.eclipse.jdt.core.ICompilationUnit[] closedCUs, HashSet localTypes, IProgressMonitor monitor) {", "-\t\tint sourceLength = sourceUnits == null ? 0 : sourceUnits.length;", "+\t\tint sourceLength = closedCUs == null ? 0 : closedCUs.length;", "+\t\tboolean[] hasLocalType = new boolean[suppliedLength + sourceLength];", "+\t\t\t\t", "+\t\t\t\t// contains a potential subtype as a local or anonymous type?", "+\t\t\t\tboolean containsLocalType = false;", "+\t\t\t\tif (localTypes == null) { // case of hierarchy on region", "+\t\t\t\t\tcontainsLocalType = false;", "+\t\t\t\t} else if (topLevelType instanceof SourceTypeElementInfo) {", "+\t\t\t\t\tIPath path = ((SourceTypeElementInfo)topLevelType).getHandle().getPath();", "+\t\t\t\t\tcontainsLocalType = localTypes.contains(path.toString());", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\tunits[i] = ", "-\t\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\t\t\tnew ISourceType[]{topLevelType}, ", "-\t\t\t\t\t\tfalse, // no need for field and methods", "-\t\t\t\t\t\ttrue, // need member types", "-\t\t\t\t\t\tfalse, // no need for field initialization", "-\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "-\t\t\t\t\t\tresult);", "+\t\t\t\tif (!containsLocalType) {", "+\t\t\t\t\tunits[i] = ", "+\t\t\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "+\t\t\t\t\t\t\tnew ISourceType[]{topLevelType}, ", "+\t\t\t\t\t\t\ttrue, // need for field and methods // TODO (jerome) need fields and methods only for supertypes of local types", "+\t\t\t\t\t\t\ttrue, // need member types", "+\t\t\t\t\t\t\tfalse, // no need for field initialization", "+\t\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "+\t\t\t\t\t\t\tresult);", "+\t\t\t\t} else {", "+\t\t\t\t\tunits[i] =", "+\t\t\t\t\t\tElementInfoConverter.buildCompilationUnit(", "+\t\t\t\t\t\t\tnew SourceTypeElementInfo[]{(SourceTypeElementInfo)topLevelType}, ", "+\t\t\t\t\t\t\ttrue, // need local types", "+\t\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "+\t\t\t\t\t\t\tresult);", "+\t\t\t\t\tunits[i].bits |= AstNode.HasAllMethodBodies;", "+\t\t\t\t\thasLocalType[i] = true;", "+\t\t\t\t}", "-\t\t\tICompilationUnit sourceUnit = sourceUnits[i];", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit closedCU = closedCUs[i];", "+\t\t\tIResource file = closedCU.getResource();", "+\t\t\tString osPath = file.getLocation().toOSString();", "+\t\t\tICompilationUnit sourceUnit = this.requestor.createCompilationUnitFromPath((Openable)closedCU, osPath);", "+\t\t\t", "+", "+\t\t\t\t// contains a potential subtype as a local or anonymous type?", "+\t\t\t\tif (localTypes == null) { // case of hierarchy on region", "+\t\t\t\t\thasLocalType[suppliedLength+i] = false;", "+\t\t\t\t} else {", "+\t\t\t\t\tIPath path = file.getFullPath();", "+\t\t\t\t\thasLocalType[suppliedLength+i] = localTypes.contains(path.toString());", "+\t\t\t\t}", "+\t\t\t", "-\t\t// complete type bindings (ie. connect super types) and remember them", "+\t\t// complete type bindings (ie. connect super types)", "-\t\t\t\t\t// must start with the top level type", "-\t\t\t\t\tISourceType topLevelType = (ISourceType) suppliedTypes[i];", "-\t\t\t\t\tsuppliedTypes[i] = null; // no longer needed pass this point\t\t\t\t", "-\t\t\t\t\twhile (topLevelType.getEnclosingType() != null)", "-\t\t\t\t\t\ttopLevelType = topLevelType.getEnclosingType();", "-\t\t\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, false);", "-\t\t\t\t\t\trememberWithMemberTypes(topLevelType, parsedUnit.types[0].binding);", "+\t\t\t\t\t\t// NB: No need to get method bodies as they were already computed", "+\t\t\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, true); // TODO (jerome) build fields and methods only for super types of local types", "-\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, false);", "-\t\t\t\tint typeCount = parsedUnit.types == null ? 0 : parsedUnit.types.length;", "-\t\t\t\tICompilationUnit sourceUnit = sourceUnits[i];", "-\t\t\t\tsourceUnits[i] = null; // no longer needed pass this point", "-\t\t\t\tfor (int j = 0; j < typeCount; j++){", "-\t\t\t\t\trememberWithMemberTypes(parsedUnit.types[j], null, sourceUnit);", "+\t\t\t\ttry {", "+\t\t\t\t\tboolean localType = hasLocalType[suppliedLength+i];", "+\t\t\t\t\tif (localType) {", "+\t\t\t\t\t\tparser.getMethodBodies(parsedUnit);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, localType);", "+\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\t// classpath problem for this type: ignore", "+\t\t}", "+\t\t", "+\t\t// remember type bindings", "+\t\tfor (int i = 0; i < suppliedLength; i++) {", "+\t\t\tif (!suppliedTypes[i].isBinaryType()) { // note that binary types have already been remembered above", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = units[i];", "+\t\t\t\tif (parsedUnit != null) {", "+\t\t\t\t\tboolean localType = hasLocalType[i];", "+\t\t\t\t\tif (localType) {", "+\t\t\t\t\t\tparsedUnit.scope.faultInTypes();", "+\t\t\t\t\t\tparsedUnit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "+\t\t\t\t\t\tparsedUnit.resolve();", "+\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t// must start with the top level type", "+\t\t\t\t\tISourceType topLevelType = (ISourceType) suppliedTypes[i];", "+\t\t\t\t\tsuppliedTypes[i] = null; // no longer needed pass this point\t\t\t\t", "+\t\t\t\t\twhile (topLevelType.getEnclosingType() != null) {", "+\t\t\t\t\t\ttopLevelType = topLevelType.getEnclosingType();", "+\t\t\t\t\t}", "+\t\t\t\t\torg.eclipse.jdt.core.ICompilationUnit cu = ((SourceTypeElementInfo)topLevelType).getHandle().getCompilationUnit();", "+\t\t\t\t\trememberAllTypes(parsedUnit, cu, localType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfor (int i = 0; i < sourceLength; i++) {", "+\t\t\tCompilationUnitDeclaration parsedUnit = units[suppliedLength+i];", "+\t\t\tif (parsedUnit != null) {", "+\t\t\t\tboolean localType = hasLocalType[suppliedLength+i];", "+\t\t\t\tif (localType) {", "+\t\t\t\t\tparsedUnit.scope.faultInTypes();", "+\t\t\t\t\tparsedUnit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "+\t\t\t\t\tparsedUnit.resolve();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\trememberAllTypes(parsedUnit, closedCUs[i], localType);", "+\t\t\t}", "-}"]}], "num": 50122}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31794094afd6b49607803305e0960265", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aa97a4f15dcc3b68796808fd9781049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "signatureAfterChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "diff": ["-\tif (md.exclusionPatterns != null && Util.isExcluded(resource, md.exclusionPatterns)) return;", "+\t// remember that if inclusion & exclusion patterns change then a full build is done", "+\tboolean isExcluded = (md.exclusionPatterns != null || md.inclusionPatterns != null)", "+\t\t&& Util.isExcluded(resource, md.inclusionPatterns, md.exclusionPatterns);", "+\t\t\tif (isExcluded && md.inclusionPatterns == null)", "+\t\t        return; // no need to go further with this delta since its children cannot be included", "+", "-\t\t\t\t\tIPath addedPackagePath = resource.getFullPath().removeFirstSegments(segmentCount);", "-\t\t\t\t\tcreateFolder(addedPackagePath, md.binaryFolder); // ensure package exists in the output folder", "-\t\t\t\t\t// add dependents even when the package thinks it exists to be on the safe side", "-\t\t\t\t\tif (JavaBuilder.DEBUG)", "-\t\t\t\t\t\tSystem.out.println(\"Found added package \" + addedPackagePath); //$NON-NLS-1$", "-\t\t\t\t\taddDependentsOf(addedPackagePath, true);", "+\t\t\t\t    if (!isExcluded) {", "+\t\t\t\t\t\tIPath addedPackagePath = resource.getFullPath().removeFirstSegments(segmentCount);", "+\t\t\t\t\t\tcreateFolder(addedPackagePath, md.binaryFolder); // ensure package exists in the output folder", "+\t\t\t\t\t\t// add dependents even when the package thinks it exists to be on the safe side", "+\t\t\t\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\t\t\t\tSystem.out.println(\"Found added package \" + addedPackagePath); //$NON-NLS-1$", "+\t\t\t\t\t\taddDependentsOf(addedPackagePath, true);", "+\t\t\t\t    }", "+\t\t\t\t    if (isExcluded) {", "+\t\t\t\t    \t// since this folder is excluded then there is nothing to delete (from this md), but must walk any included subfolders", "+\t\t\t\t\t\tchildren = sourceDelta.getAffectedChildren();", "+\t\t\t\t\t\tfor (int i = 0, l = children.length; i < l; i++)", "+\t\t\t\t\t\t\tfindSourceFiles(children[i], md, segmentCount);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t    }", "+\t\t\tif (isExcluded) return;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5716b26afa05a9f3477a1d360f21c2f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "2b3faf03e480607600ec10a4a39f50f16f7be45e", "commitAfterChange": "f7325223a37c0f8ceeea4cb0dae6e3b624fd90dd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "signatureAfterChange": "  protected boolean findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "diff": ["-protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException {", "+protected boolean findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException {", "-\t\t        return; // no need to go further with this delta since its children cannot be included", "+\t\t        return true; // no need to go further with this delta since its children cannot be included", "-\t\t\t\t\treturn;", "+\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\treturn true;", "-\t\t\treturn;", "+\t\t\treturn true;", "-\t\t\tif (isExcluded) return;", "+\t\t\tif (isExcluded) return true;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\treturn; // skip it since it really isn't changed", "+\t\t\t\t\t\t\treturn true; // skip it since it really isn't changed", "-\t\t\t\treturn;", "+\t\t\t\treturn true;", "-\t\t\t\treturn; // skip class files", "+\t\t\t\t// perform full build if a managed class file has been changed", "+\t\t\t\tIPath typePath = resource.getFullPath().removeFirstSegments(segmentCount).removeFileExtension();", "+\t\t\t\tif (newState.isKnownType(typePath.toString())) {", "+\t\t\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\t\t\tSystem.out.println(\"MOST DO FULL BUILD. Found change to class file \" + typePath); //$NON-NLS-1$", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\treturn true;", "-\t\t\t\tif (javaBuilder.filterExtraResource(resource)) return;", "+\t\t\t\tif (javaBuilder.filterExtraResource(resource)) return true;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\treturn; // skip it since it really isn't changed", "+\t\t\t\t\t\t\treturn true; // skip it since it really isn't changed", "-\t\t\t\treturn;", "+\t\t\t\treturn true;", "+\treturn true;"]}], "num": 8621}
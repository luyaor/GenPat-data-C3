{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e09bf6ec53eaf2ce11fd310b97ecbd2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24cc7e74759b123f7330d1b65de07060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "commitAfterChange": "b1d2801cbd77cde72fb8fb40e241e1d3e42f4b0f", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test0042()", "signatureAfterChange": " \tpublic void test0042()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X <T extends U, U> {\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class X <T extends U, U> {\\n\" + ", "-\t\t\t\"\t                ^\\n\" + ", "-\t\t\t\"Illegal forward reference to type parameter U\\n\" + ", "-\t\t\t\"----------\\n\");", "-\t}\t", "+\t\tString[] test = new String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X <T extends U, U> {}\"", "+\t\t};", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\ttest,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tpublic class X <T extends U, U> {}\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"Illegal forward reference to type parameter U\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t} else {", "+\t\t\tthis.runConformTest(test, \"\");", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3aedfb56dfc24ac00ddd16aa354b5efa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 585, "methodNumberAfterChange": 585, "signatureBeforeChange": " \tpublic void test0566()", "signatureAfterChange": " \tpublic void test0566()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "+\t\tString xSource =", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tle = fill(le, new X2());\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type mismatch: cannot convert from List<X2> to List<X1>\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\t\"}\\n\";", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\txSource,", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\t\"\tle = fill(le, new X2());\\n\" +", "+\t\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\"Type mismatch: cannot convert from List<X2> to List<X1>\\n\" +", "+\t\t\t\t\"----------\\n\");", "+\t\t} else {", "+\t\t\trunConformTest(new String[]{ \"X.java\", xSource });", "+\t\t}"]}], "num": 29698}
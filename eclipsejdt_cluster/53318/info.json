{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "327baf1be443cf071a91d978902a4ada", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01fdb197410d74d23fc768940de1cbda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tprivate String getPreserveEmptyLines(int count)", "signatureAfterChange": "  \tprivate String getPreserveEmptyLines(int count)", "diff": ["-\t\t\t} else {", "-\t\t\t\treturn getNewLine();", "+\t\t\treturn getNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0885d275da59a79c5f2f27e1ed46b911", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected boolean matchesName(char[] pattern, char[] name)", "signatureAfterChange": " protected boolean matchesName(char[] pattern, char[] name)", "diff": ["-\tif (name != null){", "+\tif (name != null) {", "-\t\t\t\tif (!this.isCaseSensitive) {", "+\t\t\t\tif (!this.isCaseSensitive)", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0894005ce324c7b18bbab44fdf2f2ff9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "\t \tpublic int hashCode()", "signatureAfterChange": "\t public int hashCode()", "diff": ["-\t}\t", "-\tpublic int hashCode() {", "-\t\tif (this.compoundName == null) return super.hashCode();", "-\t\tint hashCode = 0;", "-\t\tfor (int i = 0, length = this.compoundName.length; i < length; i++) {", "-\t\t\thashCode += CharOperation.hashCode(this.compoundName[i]);", "-\t\t}", "-\t\treturn hashCode;", "-\t}", "+}\t", "+public int hashCode() {", "+\tif (this.compoundName == null) return super.hashCode();", "+", "+\tint hashCode = 0;", "+\tfor (int i = 0, length = this.compoundName.length; i < length; i++)", "+\t\thashCode += CharOperation.hashCode(this.compoundName[i]);", "+\treturn hashCode;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095593a20d87a15ebac7b6eeeadad510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6c797406271c70e354dc360e4e2b55dc743bf914", "commitAfterChange": "6bb034ac24fec033a91d15d668c7ba33f5039fc9", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["-\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) {", "-\t\treturn;", "-\t}", "-//\tboolean insideDefaultConstructor = ", "-//\t\t(this.referenceContext instanceof ConstructorDeclaration)", "-//\t\t\t&& ((ConstructorDeclaration)this.referenceContext).isDefaultConstructor();", "-//\tboolean insideImplicitConstructorCall =", "-//\t\t(statement instanceof ExplicitConstructorCall)", "-//\t\t\t&& (((ExplicitConstructorCall) statement).accessMode == ExplicitConstructorCall.ImplicitSuper);", "-", "+\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) return;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocUndefinedConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocUndefinedConstructor;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocNotVisibleConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocNotVisibleConstructor;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.AmbiguousConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.AmbiguousConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocAmbiguousConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocAmbiguousConstructor;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb4cb61947f367e3f0ba96021ec3ecf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "commitAfterChange": "d63e77a4f3e59d96dada738a65e836b17108f62c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tchar[] getUnixSource(char[] source)", "signatureAfterChange": " \tchar[] getUnixSource(char[] source)", "diff": ["-\t\t} else {", "-\t\t\treturn unixSource;", "+\t\treturn unixSource;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13613b2a7d488a3509f34c4df7ac178e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void expectingNoPresenceOf(IPath[] paths)", "signatureAfterChange": " \tprotected void expectingNoPresenceOf(IPath[] paths)", "diff": ["-\t\t", "-\t\tfor (int i = 0; i < paths.length; i++){", "-\t\t\tassertTrue(paths[i] +\" is present\", !wRoot.append(paths[i]).toFile().exists()); //$NON-NLS-1$", "-\t\t}", "+", "+\t\tfor (int i = 0; i < paths.length; i++)", "+\t\t\tassertTrue(paths[i] + \" is present\", !wRoot.append(paths[i]).toFile().exists()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "148ca219b221804fab7a034f00d6fabe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractCompletionTest.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint cursorLocation,  \t\tString expectedCompletion,  \t\tString expectedParentCompletion, \t\tString expectedUnitToString,  \t\tString expectedCompletionIdentifier,  \t\tString expectedReplacedSource, \t\tString[] expectedLabels, \t\tString testName)", "signatureAfterChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint cursorLocation,  \t\tString expectedCompletion,  \t\tString expectedParentCompletion, \t\tString expectedUnitToString,  \t\tString expectedCompletionIdentifier,  \t\tString expectedReplacedSource, \t\tString[] expectedLabels, \t\tString testName)", "diff": ["-\t\t\t\t\t} else {", "-\t\t\t\t\t\tassertTrue(\"TBD\", false); // field initializer", "+\t\t\t\t\tassertTrue(\"TBD\", false); // field initializer"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "148d638a3150837c33a6666884c61269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["- */ \r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\tif ((bits & IsReachableMASK) == 0) {\r", "-\t\treturn;\r", "-\tint pc = codeStream.position;\r", "-\texception.generateCode(currentScope, codeStream, true);\r", "-\tcodeStream.athrow();\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\t\tif ((bits & IsReachableMASK) == 0)\r", "+\t\t\treturn;\r", "+\t\tint pc = codeStream.position;\r", "+\t\texception.generateCode(currentScope, codeStream, true);\r", "+\t\tcodeStream.athrow();\r", "+\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14db1bffa59fddecc6917261b40062a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "signatureAfterChange": " \tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "diff": ["-\t\t\t} else {", "-\t\t\t\treturn this;", "-\t\t\t}", "+\t\t\t} ", "+\t\t\treturn this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17ece509a208b56016cd18c7a4208b03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariablePattern.java", "commitBeforeChange": "cb3a630359a22f7ce6166a489826cbd44a0698c7", "commitAfterChange": "684148daf1ae1fa5c2a3b4e261bbfa56ad328f58", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void findIndexMatches(IIndex index, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IIndex index, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\t */", "-\tpublic void findIndexMatches(IIndex index, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "-\t\tString path = this.localVariable.getPath().toString();", "-\t\tif (scope.encloses(path)) {", "-\t\t\tacceptPath(requestor, path);", "-\t\t}", "-\t}", "+ */", "+public void findIndexMatches(IIndex index, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "+\tString path = this.localVariable.getPath().toString();", "+\tif (scope.encloses(path))", "+\t\tacceptPath(requestor, path);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18b7bba067f214e8fa39ae58d0c2930a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8c12a1560b5b16e626f09d83b170c60e0f7d623a", "commitAfterChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "signatureAfterChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "diff": ["-\t\tif (typeParameters == null || environment().options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\tif (typeParameters == null || environment().options.sourceLevel < ClassFileConstants.JDK1_5)", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1990fde4d0f83425bce1973696225de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["- */ \r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\tif ((bits & IsReachableMASK) == 0) {\r", "-\t\treturn;\r", "-\tint pc = codeStream.position;\r", "-\texception.generateCode(currentScope, codeStream, true);\r", "-\tcodeStream.athrow();\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\t\tif ((bits & IsReachableMASK) == 0)\r", "+\t\t\treturn;\r", "+\t\tint pc = codeStream.position;\r", "+\t\texception.generateCode(currentScope, codeStream, true);\r", "+\t\tcodeStream.athrow();\r", "+\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f463634e0d61c0fe150696489ac3e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/DeclarationOfReferencedTypesPattern.java", "commitBeforeChange": "8089727dc6e57c18954234bb8002634241161372", "commitAfterChange": "b99409559acb56cfc6bd7fc6fadb5a07232e1c32", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\ttypeBinding = ((TypeReference)reference).resolvedType;", "+\t\ttypeBinding = ((TypeReference) reference).resolvedType;", "-\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)reference;", "+\t\tQualifiedNameReference qNameRef = (QualifiedNameReference) reference;", "-\t\tmaxType = qNameRef.tokens.length-1;", "+\t\tmaxType = qNameRef.tokens.length - 1;", "-\t\ttypeBinding = (TypeBinding)((SingleNameReference)reference).binding;", "+\t\ttypeBinding = (TypeBinding)((SingleNameReference) reference).binding;", "-\tif (typeBinding instanceof ArrayBinding) {", "-\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;", "-\t}", "+\tif (typeBinding instanceof ArrayBinding)", "+\t\ttypeBinding = ((ArrayBinding) typeBinding).leafComponentType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a234ba242666ea9935ddffe137ac0fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected void expectingPresenceOf(IPath[] paths)", "signatureAfterChange": " \tprotected void expectingPresenceOf(IPath[] paths)", "diff": ["-\t\t", "-\t\tfor (int i = 0; i < paths.length; i++){", "-\t\t\tassertTrue(paths[i] +\" is not present\", wRoot.append(paths[i]).toFile().exists()); //$NON-NLS-1$", "-\t\t}", "+", "+\t\tfor (int i = 0; i < paths.length; i++)", "+\t\t\tassertTrue(paths[i] + \" is not present\", wRoot.append(paths[i]).toFile().exists()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b3a00f414d38d95aaf3d3c66a210625", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3b79f63e00cbebb1fe326313cd6905bd51bae92d", "commitAfterChange": "b12df142e152c773f1c1ff7b21405d32743abd50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t} else if( (this.receiver.isSuper()) || codegenBinding.isPrivate()){", "+\t\t} else if((this.receiver.isSuper()) || codegenBinding.isPrivate()){", "+\t\t} else if (constantPoolDeclaringClass.isInterface()) { // interface or annotation type", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, codegenBinding, constantPoolDeclaringClass);", "-\t\t\tif (constantPoolDeclaringClass.isInterface()) { // interface or annotation type", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t}", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, codegenBinding, constantPoolDeclaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c5ef1bf1614107076dcec7a813aa8d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IPath addClass(IPath packageFragmentRootPath, String packageName, String className, String contents)", "signatureAfterChange": " \tpublic IPath addClass(IPath packageFragmentRootPath, String packageName, String className, String contents)", "diff": ["-\t\t} else {", "-\t\t\treturn addClass(packageFragmentRootPath, className, contents);", "+\t\treturn addClass(packageFragmentRootPath, className, contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2167ed2afdfed564fc2243833471ccfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "bed0efb0db7951bba4e9dcbba9cef098d98058d9", "commitAfterChange": "2abab9940e6db0d9bb45ae1df4c7dab4bbd26433", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " public int resolveLevel(Binding binding)", "signatureAfterChange": " public int resolveLevel(Binding binding)", "diff": ["-\t} else {", "-\t\treturn IMPOSSIBLE_MATCH;", "+\treturn IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23034f93525d2bdb368d8890432e2d91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t} else {", "-\t\t\treturn flowInfo;", "+\t\treturn flowInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "244fe2aa8bbf59c999bccf56fd068302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tprotected IJavaElementDelta getDeltaFor(IJavaElement element, boolean returnFirst)", "signatureAfterChange": " \tprotected IJavaElementDelta getDeltaFor(IJavaElement element, boolean returnFirst)", "diff": ["-\t\t\t\t} else {", "-\t\t\t\t\tresult = delta;", "+\t\t\t\tresult = delta;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "262bf56f520ae0573ba8110ed7bf32f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public IJavaElement generateHandle(IJavaElement original, String rename, IJavaElement container)", "signatureAfterChange": " public IJavaElement generateHandle(IJavaElement original, String rename, IJavaElement container)", "diff": ["-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn ((IType) container).getMethod(name, ((IMethod) original).getParameterTypes());", "+\t\t\t\t\treturn ((IType) container).getMethod(name, ((IMethod) original).getParameterTypes());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2873b0b817f9fcaa546937ed17c3df26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["- */ \r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\tif ((bits & IsReachableMASK) == 0) {\r", "-\t\treturn;\r", "-\tint pc = codeStream.position;\r", "-\texception.generateCode(currentScope, codeStream, true);\r", "-\tcodeStream.athrow();\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\t\tif ((bits & IsReachableMASK) == 0)\r", "+\t\t\treturn;\r", "+\t\tint pc = codeStream.position;\r", "+\t\texception.generateCode(currentScope, codeStream, true);\r", "+\t\tcodeStream.athrow();\r", "+\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d007162336e1c55053ee74e1aeb4c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit(LocalTypeDeclaration typeDeclaration, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LocalTypeDeclaration typeDeclaration, BlockScope scope)", "diff": ["-\t\tif (SuperTypeNamesCollector.this.matches(binding)) {", "+\t\tif (SuperTypeNamesCollector.this.matches(binding))", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d75eced8f74678e3584d446710ebe72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["- */ \r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\tif ((bits & IsReachableMASK) == 0) {\r", "-\t\treturn;\r", "-\tint pc = codeStream.position;\r", "-\texception.generateCode(currentScope, codeStream, true);\r", "-\tcodeStream.athrow();\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\t\tif ((bits & IsReachableMASK) == 0)\r", "+\t\t\treturn;\r", "+\t\tint pc = codeStream.position;\r", "+\t\texception.generateCode(currentScope, codeStream, true);\r", "+\t\tcodeStream.athrow();\r", "+\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f247569e9bbc45710374dc5659a1d2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/JDIStackFrame.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected StackFrame getStackFrame()", "signatureAfterChange": " protected StackFrame getStackFrame()", "diff": ["-\t\t} else {", "-\t\t\treturn this.jdiThread.frame(0);", "+\t\treturn this.jdiThread.frame(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ecb02f7c08db8e2415cc5ce21c5219", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "4075c9316d3502762c17ed452f06fa6d926713f3", "commitAfterChange": "19a1913b17e3092170a28a811c1b6c80eb2c4989", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public final boolean areParametersCompatibleWith(TypeBinding[] arguments)", "signatureAfterChange": " public final boolean areParametersCompatibleWith(TypeBinding[] arguments)", "diff": ["-\t\tif (paramLength == argLength) { // accept both X and X[] but not X[][]", "+\t\tif (paramLength == argLength) { // accept X[] but not X or X[][]", "-\t\t\tif (varArgType != lastArgument && !lastArgument.isCompatibleWith(varArgType)) {", "+\t\t\tif (varArgType != lastArgument && !lastArgument.isCompatibleWith(varArgType))", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35c0e93124aeed7a267f89acfbc8bdcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "cdf9b8e4c56a386ff2dde986be8b72d07aa1cb88", "commitAfterChange": "8e48752294c0bdafc35bf5d5bf2db780924b6282", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprivate ArrayList otherRootsInfo(IPath path, int kind)", "signatureAfterChange": " \tprivate ArrayList otherRootsInfo(IPath path, int kind)", "diff": ["-\t\t} else {", "-\t\t\treturn (ArrayList)this.state.otherRoots.get(path);", "+\t\treturn (ArrayList)this.state.otherRoots.get(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "367d53e9ded0f9f400cb02c82b3da688", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "6c9d3461652e1b0a1c076bd07fea25ea7241dc4b", "commitAfterChange": "fc3823ac5e20f18e24acb3b991589cbc8e132c53", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "signatureAfterChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "diff": ["-\tif (initialTypeNames != null){\r", "+\tif (initialTypeNames != null)\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "374d9cd34602c9635659fe021bdf5510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding targetMethod)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding targetMethod)", "diff": ["-\tif (synthetics == null) {", "+\tif (synthetics == null)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3807db9ec14e41cd32c43dbed96bd136", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public static String getOutputDirectory()", "signatureAfterChange": " public static String getOutputDirectory()", "diff": ["-\t} else {", "-\t\treturn toNativePath(container) + File.separator + OUTPUT_DIRECTORY;", "+\treturn toNativePath(container) + File.separator + OUTPUT_DIRECTORY;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38b4df050dd98cea1fa81ad0832c7aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic int getNextIndentationLevel(int someColumn)", "signatureAfterChange": " \tpublic int getNextIndentationLevel(int someColumn)", "diff": ["-\t\t} else {", "-\t\t\treturn indent;", "+\t\treturn indent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3922837a6e6a09fa8160f84d75a4d238", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public int scanIdentifierOrKeyword() throws InvalidInputException", "signatureAfterChange": " public int scanIdentifierOrKeyword() throws InvalidInputException", "diff": ["-\twhile (getNextCharAsJavaIdentifierPart()) {};", "+\twhile (getNextCharAsJavaIdentifierPart());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "393e759083299b6eaff8f146a1b94a32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["-}\r", "-public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\tif (visitor.visit(this, blockScope)) {\r", "-\t\texception.traverse(visitor, blockScope);\r", "-\tvisitor.endVisit(this, blockScope);\r", "-}\r", "+\r", "+\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\t\tif (visitor.visit(this, blockScope))\r", "+\t\t\texception.traverse(visitor, blockScope);\r", "+\t\tvisitor.endVisit(this, blockScope);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39736ca8238e01829a84d02ed3dcb63c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "0d26cebfc5ac438f5812d87a88435e81d289bbea", "commitAfterChange": "51bd97b9a16ddeaff77cec180dcadc8f8924a66a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\tif (length > 1) \tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "+\t\tif (length > 1)", "+\t\t\tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "-\t}\t", "-\tfor (int i = methods.length; --i >= 0;) {", "-\t\tresolveTypesFor(methods[i]);", "+\tfor (int i = methods.length; --i >= 0;)", "+\t\tresolveTypesFor(methods[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8107c7719d2055eb54d505a5922321", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tString getSource(ASTNode astNode, char[] source)", "signatureAfterChange": "  \tString getSource(ASTNode astNode, char[] source)", "diff": ["-\t\t} else {", "-\t\t\treturn result;", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ec32f4bc6cbbd64ed628c00c9529482", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/LocalVirtualMachine.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected void cleanupTargetPath() throws TargetException", "signatureAfterChange": " protected void cleanupTargetPath() throws TargetException", "diff": ["-\t\t\t} else {", "-\t\t\t\ttry {", "-\t\t\t\t\tThread.sleep(count * 100);", "-\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t}", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tThread.sleep(count * 100);", "+\t\t\t} catch (InterruptedException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ecc44004d53d1a005d24f010530a32d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic ICompilationUnit getCompilationUnit(String projectName, String rootPath, String packageName, String cuName) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getCompilationUnit(String projectName, String rootPath, String packageName, String cuName) throws JavaModelException", "diff": ["-\t\t} else {", "-\t\t\treturn pkg.getCompilationUnit(cuName);", "+\t\treturn pkg.getCompilationUnit(cuName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42502b783ce18e4d1953b738c7020d33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprotected String[] getDefaultClassPaths()", "signatureAfterChange": " \t \tprotected String[] getDefaultClassPaths()", "diff": ["-\t\t} else {", "-\t\t\treturn super.getDefaultClassPaths();", "+\t\treturn super.getDefaultClassPaths();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c3711d1d2bf114093a2874a7f708fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["-}\r", "-public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\tif (visitor.visit(this, blockScope)) {\r", "-\t\texception.traverse(visitor, blockScope);\r", "-\tvisitor.endVisit(this, blockScope);\r", "-}\r", "+\r", "+\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\t\tif (visitor.visit(this, blockScope))\r", "+\t\t\texception.traverse(visitor, blockScope);\r", "+\t\tvisitor.endVisit(this, blockScope);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "474d25fdddb5f47f5034286c1af5f8aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "4a6a7781755a7a1cf7e30b7e629a87eea802f054", "commitAfterChange": "79d84450fa0277faedd98590a756a4b3c3037926", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public synchronized Index getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized Index getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\t\t\t\t} else {", "-\t\t\t\t\t\tindex = null; // will fall thru to createIfMissing & create a empty index for the rebuild all job to populate", "-\t\t\t\t\t}", "+\t\t\t\t\t} ", "+\t\t\t\t\tindex = null; // will fall thru to createIfMissing & create a empty index for the rebuild all job to populate"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a12ed339a06432c9b410b7abcdda8cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/LocalVMLauncher.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public String[] getProgramArguments()", "signatureAfterChange": " public String[] getProgramArguments()", "diff": ["-\t} else {", "-\t\treturn this.programArguments;", "+\treturn this.programArguments;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a50358d7757958e6d35cd1b74e7e474", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "65cbeb2496deccdd52152aae0a9c394928b06b10", "commitAfterChange": "1f4e18c70ad91633e199bda8d9aad7893b74f3bc", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void indirectAccessToStaticField(QualifiedNameReference qualifiedNameReference, FieldBinding field)", "signatureAfterChange": " public void indirectAccessToStaticField(QualifiedNameReference qualifiedNameReference, FieldBinding field)", "diff": ["-\tif (indexOfFirstFieldBinding >= 1) {", "+\tif (indexOfFirstFieldBinding >= 1)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aa781fa70b2ad017ce864707647f827", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "9e908010b1ae204dd6593c56e3ea43d5cb25cbdb", "commitAfterChange": "7913a078c30037cd5dca62ff4eaac30e820ed2ca", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate boolean buildFragments(Expression expression)", "signatureAfterChange": "  \tprivate boolean buildFragments(Expression expression)", "diff": ["-\t\t} else {", "-\t\t\treturn true;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4be5331d42e7b082340392424b5d1629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/ScannerHelper.java", "commitBeforeChange": "801b41050572fefc84dbdd642dfdb273c04ef277", "commitAfterChange": "8b9ffaebfbfce6f9ff7096c3755e2efc7cdd96d0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static boolean isDigit(char c) throws InvalidInputException", "signatureAfterChange": " public static boolean isDigit(char c) throws InvalidInputException", "diff": ["-\t} else {", "-\t\treturn false;", "+\treturn false;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0019a7a94c1dbdb1f26d3283df5f96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8c12a1560b5b16e626f09d83b170c60e0f7d623a", "commitAfterChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic final boolean isDefinedInType(ReferenceBinding type)", "signatureAfterChange": " \tpublic final boolean isDefinedInType(ReferenceBinding type)", "diff": ["-\t\t\t\tif (((ClassScope) scope).referenceContext.binding == type){", "+\t\t\t\tif (((ClassScope) scope).referenceContext.binding == type)", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d6a11d470bb7968cafe7c9ab60a0f91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "590096e839ca0126cbcfbf2e5062f8db4b66c3ba", "commitAfterChange": "2ca5e5e3fb17277ecb8c1c3fe65c0829f50cb44e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic IType findType(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags)", "signatureAfterChange": " \tpublic IType findType(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags)", "diff": ["-\t\tif (pkg == null) {", "-\t\t\treturn null;", "-\t\t}", "+\t\tif (pkg == null) return null;", "+", "-\t\tIType type= typeRequestor.getType();", "+\t\tIType type = typeRequestor.getType();", "+//\t\tif (type == null)", "+//\t\t\ttype = findSecondaryType(name, pkg, partialMatch, acceptFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50685538a66d7c5622192d3e4881651e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "ebce33160782a7ccea09c2470ab996fbaa0bcfe9", "commitAfterChange": "9cb2a494fe1e21879b04a456ce6a7676566f2732", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic ProblemReporter problemReporter()", "signatureAfterChange": " \tpublic ProblemReporter problemReporter()", "diff": ["-\t\t} else {", "-\t\t\treturn outerMethodScope.problemReporter();", "+\t\treturn outerMethodScope.problemReporter();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57486504a2ab1af785be077702ed9872", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/LocalVirtualMachine.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void shutDown()  throws TargetException", "signatureAfterChange": " public void shutDown()  throws TargetException", "diff": ["-\t} else {", "-\t\tthis.cleanupTargetPath();", "+\tthis.cleanupTargetPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5892585072623427aacf17ad1ab76491", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void faultInTypesForFieldsAndMethods()", "signatureAfterChange": " void faultInTypesForFieldsAndMethods()", "diff": ["-", "-\tif (enclosingType != null && enclosingType.isViewedAsDeprecated() && !this.isDeprecated()) {", "-\t\tmodifiers |= AccDeprecatedImplicitly;\t", "-\t}", "+\tif (enclosingType != null && enclosingType.isViewedAsDeprecated() && !this.isDeprecated())", "+\t\tmodifiers |= AccDeprecatedImplicitly;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aa13db49857b9f643a0f026c44cb2a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tprotected void printProblemsFor(IPath[] roots)", "signatureAfterChange": "  \tprotected void printProblemsFor(IPath[] roots)", "diff": ["-\t", "-\tprotected void printProblemsFor(IPath[] roots){", "+", "+\tprotected void printProblemsFor(IPath[] roots) {", "-\t\t\t", "+", "-\t\t\tfor (int j = 0; j < problems.length; j++) {", "+\t\t\tfor (int j = 0; j < problems.length; j++)", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b10a235c371f599f448872488b1f671", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope scope)", "diff": ["-\t\tif (SuperTypeNamesCollector.this.matches(binding)) {", "+\t\tif (SuperTypeNamesCollector.this.matches(binding))", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "612720026402031e8194a517162d22a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "215ebe5b137faf0e9e2c02060899bb72b6290076", "commitAfterChange": "75b36a9ed5cd2da7220cbd26b35e54ceed421c30", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["- */ \r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\tif ((bits & IsReachableMASK) == 0) {\r", "-\t\treturn;\r", "-\tint pc = codeStream.position;\r", "-\texception.generateCode(currentScope, codeStream, true);\r", "-\tcodeStream.athrow();\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\t\tif ((bits & IsReachableMASK) == 0)\r", "+\t\t\treturn;\r", "+\t\tint pc = codeStream.position;\r", "+\t\texception.generateCode(currentScope, codeStream, true);\r", "+\t\tcodeStream.athrow();\r", "+\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6651eb75eaee874795994254265f4626", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["-}\r", "-public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\tif (visitor.visit(this, blockScope)) {\r", "-\t\texception.traverse(visitor, blockScope);\r", "-\tvisitor.endVisit(this, blockScope);\r", "-}\r", "+\r", "+\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\t\tif (visitor.visit(this, blockScope))\r", "+\t\t\texception.traverse(visitor, blockScope);\r", "+\t\tvisitor.endVisit(this, blockScope);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67611fbef8015d0b693672dbbc127586", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "0d26cebfc5ac438f5812d87a88435e81d289bbea", "commitAfterChange": "51bd97b9a16ddeaff77cec180dcadc8f8924a66a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "signatureAfterChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "diff": ["-\tif ((this.tagBits & TagBits.AreFieldsComplete) != 0) {", "+\tif ((this.tagBits & TagBits.AreFieldsComplete) != 0)", "-\t}", "+", "-\t\tif (length > 1) \tReferenceBinding.sortFields(this.fields, 0, length - 1);", "+\t\tif (length > 1)", "+\t\t\tReferenceBinding.sortFields(this.fields, 0, length - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f62a6c2d9d9b4da8be4c4b97278b0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "commitAfterChange": "d63e77a4f3e59d96dada738a65e836b17108f62c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tchar[] getUnicodeSource(char[] source)", "signatureAfterChange": " \tchar[] getUnicodeSource(char[] source)", "diff": ["-\t\t} else {", "-\t\t\treturn unicodeSource;", "+\t\treturn unicodeSource;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a78877ff4057485e1b45b971d0e24ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\tif (hasRestrictedAccess()) {", "+\tif (hasRestrictedAccess())", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba2e7d787e95ddfe536070d962b9199", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "1a523523632cd1a64bce4e193fddecc091f0a09b", "commitAfterChange": "2da53a14245271c999bfef856e9b2ece46065198", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t} else if (currentMethod.isStatic() != inheritedMethod.isStatic())\t {\t// Cannot override a static method or hide an instance method", "+\t\t} else if (currentMethod.isStatic() != inheritedMethod.isStatic()) {  // Cannot override a static method or hide an instance method", "-\t\t\tif (inheritedMethod.isViewedAsDeprecated()) {", "+\t\t\tif (inheritedMethod.isViewedAsDeprecated())", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d78d6bfeca96edfbecd56fa7ba2bc21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "ab782d65c094c8090fc13992f7119c95c1d5e4f4", "commitAfterChange": "e5e75756c1a02fa963c84b22c459237f3dd65dc9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t\t} else {", "-\t\t\t// To run a specific test, just uncomment line with testNumbers in static initializer above", "-\t\t\t// and put numbers of tests you want to perform", "-\t\t\treturn setupSuite(testClass());", "+\t\treturn setupSuite(testClass());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d79e1f54e97bf6c194d6f0e89d574e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void indexAll(IProject project)", "signatureAfterChange": " public void indexAll(IProject project)", "diff": ["-\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY)", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71aa71ec47f3f11ac37d97b56e62979e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "26246adf380e69c31de951eed4c0173edaa96dd1", "commitAfterChange": "2c076bc353a2d83c198fbf8764d9fb723677890e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public void cleanup()", "signatureAfterChange": "\r public void cleanup()", "diff": ["+public void cleanup() {\r", "+\tfor (int i = 0, max = classpaths.length; i < max; i++)\r", "+\t\tclasspaths[i].reset();\r", "-\r", "-public void cleanup() {\r", "-\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "-\t\tclasspaths[i].reset();\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "751a9c9b0ea0eeb719e953f01337860d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "d3c17e80ba14fc4126e92ab48e41f513218ebbf6", "commitAfterChange": "2b3eb34cc2c38b25e9c0c8b158b33e67243033db", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r public void cleanup()", "signatureAfterChange": "\r \r public void cleanup()", "diff": ["+public void cleanup() {\r", "+\tfor (int i = 0, length = classpathLocations.length; i < length; i++)\r", "+\t\tclasspathLocations[i].cleanup();\r", "+}\r", "-\r", "-public void cleanup() {\r", "-\tfor (int i = 0, length = classpathLocations.length; i < length; i++){\r", "-\t\tclasspathLocations[i].cleanup();\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78ef4819a298d323941d996e5633edcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "cdf9b8e4c56a386ff2dde986be8b72d07aa1cb88", "commitAfterChange": "8e48752294c0bdafc35bf5d5bf2db780924b6282", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprivate boolean isResFilteredFromOutput(OutputsInfo info, IResource res, int elementType)", "signatureAfterChange": " \tprivate boolean isResFilteredFromOutput(OutputsInfo info, IResource res, int elementType)", "diff": ["-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// case of .class file under project and no source folder", "-\t\t\t\t\t\t\t// proj=bin", "-\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT ", "-\t\t\t\t\t\t\t\t\t&& res instanceof IFile ", "-\t\t\t\t\t\t\t\t\t&& Util.isValidClassFileName(res.getName())) {", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// case of .class file under project and no source folder", "+\t\t\t\t\t\t// proj=bin", "+\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT ", "+\t\t\t\t\t\t\t\t&& res instanceof IFile ", "+\t\t\t\t\t\t\t\t&& Util.isValidClassFileName(res.getName())) {", "+\t\t\t\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7924a1b5be23c6d5bc626d47daba4037", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic IPath addBinaryClass(IPath packageFragmentRootPath, String packageName, String className, byte[] contents)", "signatureAfterChange": " \tpublic IPath addBinaryClass(IPath packageFragmentRootPath, String packageName, String className, byte[] contents)", "diff": ["-\t\t} else {", "-\t\t\treturn addBinaryClass(packageFragmentRootPath, className, contents);", "+\t\treturn addBinaryClass(packageFragmentRootPath, className, contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7935055f06ba3abd74da92085e9528d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\t\t} else {", "-\t\t\t\tscope.problemReporter().localVariableHiding(this, existingVariable, false);", "+\t\t\tscope.problemReporter().localVariableHiding(this, existingVariable, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a681d6e1ed86ad994d01f7c87cc22d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariableLocator.java", "commitBeforeChange": "da751e82ab0e645d2074c217491c32d335824364", "commitAfterChange": "1c323836aef7c6d21afe597642c9f7a415d72ddd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprotected int matchLocalVariable(LocalVariableBinding variable, boolean matchName)", "signatureAfterChange": "  \tprotected int matchLocalVariable(LocalVariableBinding variable, boolean matchName)", "diff": ["-\t\tif (variable.declaration.declarationSourceStart != localVariable.declarationSourceStart) {", "+\t\tif (variable.declaration.declarationSourceStart != localVariable.declarationSourceStart)", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d42c625fd6b47bdf052cb5779383ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public long getAnnotationTagBits()", "signatureAfterChange": " public long getAnnotationTagBits()", "diff": ["-\t\tif ((this.tagBits & TagBits.AnnotationDeprecated) != 0) {", "+\t\tif ((this.tagBits & TagBits.AnnotationDeprecated) != 0)", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "842454f2c00b8eb887b24990ed02f498", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " private FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " private FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-\tif (hasRestrictedAccess()) {", "+\tif (hasRestrictedAccess())", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "862bf707259d1d9cf1a435663d09f064", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(AnonymousLocalTypeDeclaration typeDeclaration, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(AnonymousLocalTypeDeclaration typeDeclaration, BlockScope scope)", "diff": ["-\t\tif (SuperTypeNamesCollector.this.matches(binding)) {", "+\t\tif (SuperTypeNamesCollector.this.matches(binding))", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89fa2db527b4a45be7744e81a201e90e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "commitAfterChange": "3ba8416c88ea2caabb450ac956476cf3b7bed2e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public TypeDeclarationPattern( \tchar[] pkg, \tchar[][] enclosingTypeNames, \tchar[] simpleName, \tchar classOrInterface, \tint matchMode,  \tboolean isCaseSensitive)", "signatureAfterChange": " public TypeDeclarationPattern( \tchar[] pkg, \tchar[][] enclosingTypeNames, \tchar[] simpleName, \tchar classOrInterface, \tint matchMode,  \tboolean isCaseSensitive)", "diff": ["-\t\tfor (int i = 0; i < length; i++){", "+\t\tfor (int i = 0; i < length; i++)", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a399a232095be0d2dec133d3bb13312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "40d930a69e9e7d85b68aab4cf4c09ab9f4abeb52", "commitAfterChange": "a3f2ada1bb117a4483780267bcc61a925d7a330e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void addVisibleLocalVariable(LocalVariableBinding localBinding)", "signatureAfterChange": " public void addVisibleLocalVariable(LocalVariableBinding localBinding)", "diff": ["-\tif (visibleLocalsCount >= visibleLocals.length) {", "-\t\tSystem.arraycopy(visibleLocals, 0, (visibleLocals = new LocalVariableBinding[visibleLocalsCount * 2]), 0, visibleLocalsCount);", "-\t}", "+\tif (visibleLocalsCount >= visibleLocals.length)", "+\t\tSystem.arraycopy(visibleLocals, 0, visibleLocals = new LocalVariableBinding[visibleLocalsCount * 2], 0, visibleLocalsCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c924336ba0beddd021343aeb4afcddb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic IClassFile getClassFile(String projectName, String rootPath, String packageName, String className) throws JavaModelException", "signatureAfterChange": " \tpublic IClassFile getClassFile(String projectName, String rootPath, String packageName, String className) throws JavaModelException", "diff": ["-\t\t} else {", "-\t\t\treturn pkg.getClassFile(className);", "+\t\treturn pkg.getClassFile(className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e6c8a7cd588559dc30710e5dc62df7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "4a6a7781755a7a1cf7e30b7e629a87eea802f054", "commitAfterChange": "79d84450fa0277faedd98590a756a4b3c3037926", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private static IJavaProject getJavaProject(IPath path, IJavaModel model)", "signatureAfterChange": " private static IJavaProject getJavaProject(IPath path, IJavaModel model)", "diff": ["-\t} else {", "-\t\treturn null;", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92fa7424f283802bd323406a78d47e22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic ProblemReporter problemReporter()", "signatureAfterChange": " \tpublic ProblemReporter problemReporter()", "diff": ["-\t\t} else {", "-\t\t\treturn outerMethodScope.problemReporter();", "+\t\treturn outerMethodScope.problemReporter();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96204d27fbfd7b882387a71bf2891e74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "7468b4698239a80427b0dfed58d4a9c2f96541d8", "commitAfterChange": "071d5ff69d1256ea784921a560116cf8719733a6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// regular receiver reference ", "-\t\tif (this.receiver instanceof CastExpression) {", "-\t\t\t\tthis.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\t//always ignore receiver cast, since may affect constant pool reference", "-\t\t}", "+\t\t//always ignore receiver cast, since may affect constant pool reference", "+\t\tif (this.receiver instanceof CastExpression) this.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9704ef8f34ca70898f1475cfe9e0bd01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public char[] genericTypeSignature()", "signatureAfterChange": " public char[] genericTypeSignature()", "diff": ["-    if (this.genericReferenceTypeSignature == null) {", "+    if (this.genericReferenceTypeSignature == null)", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9887661f1faf52ba5f149c0e4e935adb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "4cb58ab533c79220136a132032afc1404604a700", "commitAfterChange": "c6eb7c253f30ad97be4157d7b386bdebd6f05934", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t \tprivate IClasspathEntry findProjectSourcePath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "signatureAfterChange": " \t \tprivate IClasspathEntry findProjectSourcePath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "diff": ["-\t\t\t{", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98bd3704fd639f773fc905ab9ddc4c63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8c12a1560b5b16e626f09d83b170c60e0f7d623a", "commitAfterChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] arguments, ReferenceBinding enclosingType)", "signatureAfterChange": " \t \tpublic ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] arguments, ReferenceBinding enclosingType)", "diff": ["-\t\t\tfor (int i = 0, max = arguments == null ? 0 : arguments.length; i < max; i++){", "+\t\t\tfor (int i = 0, max = arguments == null ? 0 : arguments.length; i < max; i++)", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86407218dfff47df1fdac8f88c7200f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "26bd8cd093799e096b816aa2a2b54f06087b05ff", "commitAfterChange": "f2d2df0fb5504922fbc1cf85d25df5b20854758d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r public final boolean needClassInitMethod()", "signatureAfterChange": "\r public final boolean needClassInitMethod()", "diff": ["+ */\r", "-\t//the real test is next code but the test on NotAConstant is\r", "-\t//not valid UNTIL the TC has runned :-( .....\r", "-\t//More, the binding hasn't been done.....:-(....\r", "-\r", "-\t//Thus the idea is therefore to generate a <clint> when some static\r", "-\t//fields exist. If it has no statement, it will not be generated\r", "-\r", "-\t/*--------------------------------------------------\r", "-\tif ( fields == null ) return false;\r", "-\tfor( int i = fields.length ; --i>= 0;){\r", "-\tFieldDeclaration field = fields[i];\r", "-\tif (field.binding.isStatic())\r", "-\t{if ( (field.binding.isFinal()) && (field.initialization == null) ) return true ;\r", "-\tif ( !field.isField()) return true ; //initializer are not-isField()\r", "-\tif ( (field.initialization != null) && (field.binding.constant == NotAConstant) ) return true ;}}\r", "-\t\r", "-\treturn false ;}\r", "-\t----------------------------------------------------*/\r", "-\tif ((this.bits & AddAssertionMASK) != 0) {\r", "-\t\treturn true;\r", "-\t}\r", "-\tif (fields == null)\r", "-\t\treturn false;\r", "+\t// always need a <clinit> when assertions are present\r", "+\tif ((this.bits & AddAssertionMASK) != 0) return true;\r", "+\tif (fields == null) return false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d792e1c2077300ff77d2ab49f8bf25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tprotected ILocalVariable getLocalVariable(String cuPath, String selectAt, String selection) throws JavaModelException", "signatureAfterChange": " \tprotected ILocalVariable getLocalVariable(String cuPath, String selectAt, String selection) throws JavaModelException", "diff": ["-\t\t} else {", "-\t\t\treturn null;", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e47366cfd5e970e94ad9c4bafa9ddb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "71ca7b096c04e123348cb13b19efbd2de402f9f2", "commitAfterChange": "6872e25fe154a5852fcd3ac0c49b686e5e81ec7b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public void cleanup()", "signatureAfterChange": "\r public void cleanup()", "diff": ["+public void cleanup() {\r", "+\tfor (int i = 0, max = classpaths.length; i < max; i++)\r", "+\t\tclasspaths[i].reset();\r", "-\r", "-public void cleanup() {\r", "-\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "-\t\tclasspaths[i].reset();\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac6bd53c9342ee39710fd0319a029694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "4a6a7781755a7a1cf7e30b7e629a87eea802f054", "commitAfterChange": "79d84450fa0277faedd98590a756a4b3c3037926", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate ICompilationUnit[] getWorkingCopies(IJavaElement element)", "signatureAfterChange": " \tprivate ICompilationUnit[] getWorkingCopies(IJavaElement element)", "diff": ["-\t\t\t\t} else {", "-\t\t\t\t\treturn new ICompilationUnit[] {cu};", "-\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\treturn new ICompilationUnit[] {cu};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad92f7470374e1ff199e80b5120ba893", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic IInitializer createInitializerHandle( \t\tTypeDeclaration typeDecl, \t\tFieldDeclaration initializer, \t\tIType type)", "signatureAfterChange": " public IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type)", "diff": ["-\t */", "-\tpublic IInitializer createInitializerHandle(", "-\t\tTypeDeclaration typeDecl,", "-\t\tFieldDeclaration initializer,", "-\t\tIType type) {", "-\t\tif (type == null) return null;", "-\t\t// find occurence count of the given initializer in its type declaration", "-\t\tint occurrenceCount = 0;", "-\t\tFieldDeclaration[] fields = typeDecl.fields;", "-\t\tfor (int i = 0, length = fields.length; i < length; i++) {", "-\t\t\tFieldDeclaration field = fields[i];", "-\t\t\tif (!field.isField()) {", "-\t\t\t\toccurrenceCount++;", "-\t\t\t\tif (field.equals(initializer)) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\treturn type.getInitializer(occurrenceCount);", "+ */", "+public IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type) {", "+\tif (type == null) return null;", "+", "+\t// find occurence count of the given initializer in its type declaration", "+\tint occurrenceCount = 0;", "+\tFieldDeclaration[] fields = typeDecl.fields;", "+\tfor (int i = 0, length = fields.length; i < length; i++) {", "+\t\tFieldDeclaration field = fields[i];", "+\t\tif (!field.isField()) {", "+\t\t\toccurrenceCount++;", "+\t\t\tif (field.equals(initializer)) break;", "+\t\t}", "+\t}", "+\treturn type.getInitializer(occurrenceCount);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af90895bf32f07ebdad9e2bf863c1127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic ICompilationUnit[] getCompilationUnits(String projectName, String rootPath, String packageName) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit[] getCompilationUnits(String projectName, String rootPath, String packageName) throws JavaModelException", "diff": ["-\t\t} else {", "-\t\t\treturn pkg.getCompilationUnits();", "+\t\treturn pkg.getCompilationUnits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b51abbb21c242a425cb71db82e30049d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "4a6a7781755a7a1cf7e30b7e629a87eea802f054", "commitAfterChange": "79d84450fa0277faedd98590a756a4b3c3037926", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic static char[] normalizeCRs(char[] text, char[] buffer)", "signatureAfterChange": " \tpublic static char[] normalizeCRs(char[] text, char[] buffer)", "diff": ["-\t\t} else {", "-\t\t\treturn text;", "+\t\treturn text;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb5ab64000db9d24f13be0922f24372b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8c12a1560b5b16e626f09d83b170c60e0f7d623a", "commitAfterChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\tif (leafType instanceof ReferenceBinding) {", "+\t\t\tif (leafType instanceof ReferenceBinding)", "-\t\t\t}", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tlastPosition);", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t\tlastPosition);", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4b7a275172ae008fce77cedad3371a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "afddb8d16711e6653bacb82f47dcaef80b86f19f", "commitAfterChange": "2bf771c6d451611ded7f253156b9c04a7039c1a6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["-\t\t\t\t\t\t\tif (initializer != null) {", "-\t\t\t\t\t\t\t\tdescription = initializer.getDescription(path);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c76f8218d01d99e837cf4b4c47aef847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/LocalVMLauncher.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public String getProgramClass()", "signatureAfterChange": " public String getProgramClass()", "diff": ["-\t} else {", "-\t\treturn this.programClass;", "+\treturn this.programClass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c83b54c4714e78da94088a1d3ddc91e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/VMInputStream.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int read() throws IOException", "signatureAfterChange": " public int read() throws IOException", "diff": ["-\t\t} else {", "-\t\t\tthrow e;", "+\t\tthrow e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c88e9484ddfc62fd52ca156453d18c9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic IPackageFragment getPackageFragment(String projectName, String rootPath, String packageName) throws JavaModelException", "signatureAfterChange": " \tpublic IPackageFragment getPackageFragment(String projectName, String rootPath, String packageName) throws JavaModelException", "diff": ["-\t\t} else {", "-\t\t\treturn root.getPackageFragment(packageName);", "+\t\treturn root.getPackageFragment(packageName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca40eb46d09b11507122ec8e8c1db415", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PossibleMatch.java", "commitBeforeChange": "7dcc81b9483bd917811b239ba748dff59d4ce7dc", "commitAfterChange": "4136248cb1581d6af7c774a979b9c48c11440c8d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private char[] getQualifiedName()", "signatureAfterChange": " private char[] getQualifiedName()", "diff": ["-\t\tif (fileName == NO_SOURCE_FILE_NAME) {", "+\t\tif (fileName == NO_SOURCE_FILE_NAME)", "-\t\t}", "-\t\tString simpleName = fileName.substring(0, fileName.length()-5); // length-\".java\".length()", "+", "+\t\tString simpleName = fileName.substring(0, fileName.length() - 5); // length-\".java\".length()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd76d6dd07666cffc192befa2e489924", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "95427331bb49c7a61529453199fb23bbc6427400", "commitAfterChange": "b98aebf0eceab136d1cb7e3ce3cad3db52513393", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic static IClasspathEntry newContainerEntry(IPath containerPath, boolean isExported)", "signatureAfterChange": " \tpublic static IClasspathEntry newContainerEntry(IPath containerPath, boolean isExported)", "diff": ["-\t\tif (containerPath == null) {", "-\t\t\tAssert.isTrue(false, \"Container path cannot be null\"); //$NON-NLS-1$", "-\t\t}", "+\t\tif (containerPath == null) Assert.isTrue(false, \"Container path cannot be null\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d220608ecd46778acae8184a417601e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "8032392aee6168afb7d9361a5e7c32ded0b6567a", "commitAfterChange": "af7c555b94268663ad75bc44adea174c67a820bf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\tfor (int i = 0, max = entries.length; i < max; i++){", "-", "+\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\tif (matchIndexEntry()){", "+\t\tif (matchIndexEntry())", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d409ad82da5b1eead44b71b56af9f613", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariableLocator.java", "commitBeforeChange": "cb3a630359a22f7ce6166a489826cbd44a0698c7", "commitAfterChange": "684148daf1ae1fa5c2a3b4e261bbfa56ad328f58", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic int match(LocalDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(LocalDeclaration node, MatchingNodeSet nodeSet)", "diff": ["+}", "+public int match(LocalDeclaration node, MatchingNodeSet nodeSet) {", "+\tint referencesLevel = IMPOSSIBLE_MATCH;", "+\tif (this.pattern.findReferences)", "+\t\t// must be a write only access with an initializer", "+\t\tif (this.pattern.writeAccess && !this.pattern.readAccess && node.initialization != null)", "+\t\t\tif (matchesName(this.pattern.name, node.name))", "+\t\t\t\treferencesLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\tpublic int match(LocalDeclaration node, MatchingNodeSet nodeSet) {", "-\t\tint referencesLevel = IMPOSSIBLE_MATCH;", "-\t\tif (this.pattern.findReferences)", "-\t\t\t// must be a write only access with an initializer", "-\t\t\tif (this.pattern.writeAccess && !this.pattern.readAccess && node.initialization != null)", "-\t\t\t\tif (matchesName(this.pattern.name, node.name))", "-\t\t\t\t\treferencesLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t", "-\t\tint declarationsLevel = IMPOSSIBLE_MATCH;", "-\t\tif (this.pattern.findDeclarations)", "-\t\t\tif (matchesName(this.pattern.name, node.name)) {", "-\t\t\t\tif (node.declarationSourceStart == getLocalVariable().declarationSourceStart)", "-\t\t\t\t\tdeclarationsLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t}", "-\t", "-\t\treturn nodeSet.addMatch(node, referencesLevel >= declarationsLevel ? referencesLevel : declarationsLevel); // use the stronger match", "-\t}", "+\tint declarationsLevel = IMPOSSIBLE_MATCH;", "+\tif (this.pattern.findDeclarations)", "+\t\tif (matchesName(this.pattern.name, node.name))", "+\t\t\tif (node.declarationSourceStart == getLocalVariable().declarationSourceStart)", "+\t\t\t\tdeclarationsLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "+\treturn nodeSet.addMatch(node, referencesLevel >= declarationsLevel ? referencesLevel : declarationsLevel); // use the stronger match", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d65a61bf4d5f648323e26d9526bf4408", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "215ebe5b137faf0e9e2c02060899bb72b6290076", "commitAfterChange": "75b36a9ed5cd2da7220cbd26b35e54ceed421c30", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["-}\r", "-public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\tif (visitor.visit(this, blockScope)) {\r", "-\t\texception.traverse(visitor, blockScope);\r", "-\tvisitor.endVisit(this, blockScope);\r", "-}\r", "+\r", "+\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\t\tif (visitor.visit(this, blockScope))\r", "+\t\t\texception.traverse(visitor, blockScope);\r", "+\t\tvisitor.endVisit(this, blockScope);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8357f4f1bc686b6153c29018fb9c00d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void ensureReadyToRun()", "signatureAfterChange": " public void ensureReadyToRun()", "diff": ["-\t}", "-\tpublic void ensureReadyToRun() {", "-\t\tif (!this.areIndexesReady) {", "-\t\t\tgetIndexes(null/*progress*/); // may trigger some index recreation", "-\t\t}", "-\t}", "+}", "+public void ensureReadyToRun() {", "+\tif (!this.areIndexesReady)", "+\t\tgetIndexes(null/*progress*/); // may trigger some index recreation", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8941aaa3733eabe7c2479703252f1cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tfinal private void markAsDefinitelyNotAssigned(int position)", "signatureAfterChange": " \tfinal private void markAsDefinitelyNotAssigned(int position)", "diff": ["-\t\t\t\t} else {", "-\t\t\t\t\t// might need to grow the arrays", "-\t\t\t\t\tif (vectorIndex >= extraDefiniteInits.length) {", "-\t\t\t\t\t\treturn; // nothing to do, it was not yet set ", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// might need to grow the arrays", "+\t\t\t\tif (vectorIndex >= extraDefiniteInits.length) {", "+\t\t\t\t\treturn; // nothing to do, it was not yet set "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d959a7ab0df526ecd616c8d9c5f92334", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tboolean standardBody(ASTNode receiver, Object other, boolean matchResult)", "signatureAfterChange": "  \t\tboolean standardBody(ASTNode receiver, Object other, boolean matchResult)", "diff": ["-\t\t\t} else {", "-\t\t\t\treturn this.result;", "+\t\t\treturn this.result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da2cb2bee24ba0b1cb9eff55b3b32ead", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void resetQuery()", "signatureAfterChange": " protected void resetQuery()", "diff": ["-\tif (this.simpleName == null) {", "-\t\t/* walk the segments from end to start as it will find less potential references using 'lang' than 'java' */", "+\t/* walk the segments from end to start as it will find less potential references using 'lang' than 'java' */", "+\tif (this.simpleName == null)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da9f7caca77fa2518d90d31ad7026768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/target/CodeSnippetClassLoader.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " private Class delegateLoadClass(String name) throws ClassNotFoundException", "signatureAfterChange": " private Class delegateLoadClass(String name) throws ClassNotFoundException", "diff": ["-\t} else {", "-\t\treturn myLoader.loadClass(name);", "+\treturn myLoader.loadClass(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc50e733356dcd8e33d6083eb1422a7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic boolean visit(MemberTypeDeclaration memberTypeDeclaration, \tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(MemberTypeDeclaration memberTypeDeclaration, ClassScope scope)", "diff": ["-\tpublic boolean visit(MemberTypeDeclaration memberTypeDeclaration, \tClassScope scope) {", "+\tpublic boolean visit(MemberTypeDeclaration memberTypeDeclaration, ClassScope scope) {", "-\t\tif (SuperTypeNamesCollector.this.matches(binding)) {", "+\t\tif (SuperTypeNamesCollector.this.matches(binding))", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd07e3ff626863aff53b2e8586a20473", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "0d26cebfc5ac438f5812d87a88435e81d289bbea", "commitAfterChange": "51bd97b9a16ddeaff77cec180dcadc8f8924a66a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public FieldBinding[] fields()", "signatureAfterChange": " public FieldBinding[] fields()", "diff": ["-\t\t\tif (length > 1) \tReferenceBinding.sortFields(this.fields, 0, length - 1);", "+\t\t\tif (length > 1)", "+\t\t\t\tReferenceBinding.sortFields(this.fields, 0, length - 1);", "-\t\t\t\tif (this.fields[i] != null) {", "+\t\t\t\tif (this.fields[i] != null)", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de03b178e53763b9cfa3852d53f5c588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariablePattern.java", "commitBeforeChange": "ef84f5fab4e549d913d92933638d556ae1ceefd2", "commitAfterChange": "3f513a524299babe8e8187ba844f5588920937db", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-\tif (scope.encloses(path)) {", "+\tif (scope.encloses(path))", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc707082dceb7fa6e1b57759764233f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "95427331bb49c7a61529453199fb23bbc6427400", "commitAfterChange": "b98aebf0eceab136d1cb7e3ce3cad3db52513393", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic static IClasspathEntry newVariableEntry( \t\tIPath variablePath, \t\tIPath variableSourceAttachmentPath, \t\tIPath variableSourceAttachmentRootPath, \t\tboolean isExported)", "signatureAfterChange": " \tpublic static IClasspathEntry newVariableEntry( \t\tIPath variablePath, \t\tIPath variableSourceAttachmentPath, \t\tIPath variableSourceAttachmentRootPath, \t\tboolean isExported)", "diff": ["-\t\t\t", "-\t\tif (variablePath == null) {", "-\t\t\tAssert.isTrue(false, \"Variable path cannot be null\"); //$NON-NLS-1$", "-\t\t}\t\t", "+", "+\t\tif (variablePath == null) Assert.isTrue(false, \"Variable path cannot be null\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e147c3f20b93d2e48eb5631d42a8faed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "9e908010b1ae204dd6593c56e3ea43d5cb25cbdb", "commitAfterChange": "7913a078c30037cd5dca62ff4eaac30e820ed2ca", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t} else {", "-\t\t\t\tcurrentSourceDirectory = currentArg;", "+\t\t\tcurrentSourceDirectory = currentArg;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e32ce3141d9e128b7fe774811d57f13a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "cdf9b8e4c56a386ff2dde986be8b72d07aa1cb88", "commitAfterChange": "8e48752294c0bdafc35bf5d5bf2db780924b6282", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tprivate RootInfo rootInfo(IPath path, int kind)", "signatureAfterChange": " \tprivate RootInfo rootInfo(IPath path, int kind)", "diff": ["-\t\t} else {", "-\t\t\treturn (RootInfo)this.state.roots.get(path);", "+\t\treturn (RootInfo)this.state.roots.get(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e2cede860113ec0b6630d23e685985", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected void handleInternalException( \t\tAbortCompilation abortException, \t\tCompilationUnitDeclaration unit)", "signatureAfterChange": " \tprotected void handleInternalException( \t\tAbortCompilation abortException, \t\tCompilationUnitDeclaration unit)", "diff": ["-\t\t\t} else {", "-\t\t\t\tthrow abortException.silentException;", "+\t\t\tthrow abortException.silentException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6455ad86cda70895e787b099fcbb0fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java", "commitBeforeChange": "c9d7e7319b2b22655d3a388aacf4691c8fa7c16e", "commitAfterChange": "ab20fccfe10c557b2eadd05f353546a2c1937b1d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void pushTypeName(char[] typeName)", "signatureAfterChange": " public void pushTypeName(char[] typeName)", "diff": ["-public void pushTypeName(char[] typeName){", "-\tif (depth == enclosingTypeNames.length){", "+public void pushTypeName(char[] typeName) {", "+\tif (depth == enclosingTypeNames.length)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e76409a6e25e8aabb513c28dacead29e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["-}\r", "-public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\tif (visitor.visit(this, blockScope)) {\r", "-\t\texception.traverse(visitor, blockScope);\r", "-\tvisitor.endVisit(this, blockScope);\r", "-}\r", "+\r", "+\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\t\tif (visitor.visit(this, blockScope))\r", "+\t\t\texception.traverse(visitor, blockScope);\r", "+\t\tvisitor.endVisit(this, blockScope);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7c0637f4699c4a4fcb41e8367112e84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3394ae20f255987c4e9aa44a93390ba57a3d677f", "commitAfterChange": "1068fd603e3f894423f0007ce5b2e26be2543d4d", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 245, "signatureBeforeChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "signatureAfterChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "diff": ["-\t} else {", "-\t\treturn null;", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eae80acb4705db4ac88d692621164637", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariableLocator.java", "commitBeforeChange": "cb3a630359a22f7ce6166a489826cbd44a0698c7", "commitAfterChange": "684148daf1ae1fa5c2a3b4e261bbfa56ad328f58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic int resolveLevel(AstNode possiblelMatchingNode)", "signatureAfterChange": " public int resolveLevel(AstNode possiblelMatchingNode)", "diff": ["+}", "+public int resolveLevel(AstNode possiblelMatchingNode) {", "+\tif (this.pattern.findReferences)", "+\t\tif (possiblelMatchingNode instanceof NameReference)", "+\t\t\treturn resolveLevel((NameReference) possiblelMatchingNode);", "+\tif (possiblelMatchingNode instanceof LocalDeclaration)", "+\t\treturn matchLocalVariable(((LocalDeclaration) possiblelMatchingNode).binding, true);", "+\treturn IMPOSSIBLE_MATCH;", "+}", "-", "-\tpublic int resolveLevel(AstNode possiblelMatchingNode) {", "-\t\tif (this.pattern.findReferences) {", "-\t\t\tif (possiblelMatchingNode instanceof NameReference)", "-\t\t\t\treturn resolveLevel((NameReference) possiblelMatchingNode);", "-\t\t}", "-\t\tif (possiblelMatchingNode instanceof LocalDeclaration)", "-\t\t\treturn matchLocalVariable(((LocalDeclaration) possiblelMatchingNode).binding, true);", "-\t\treturn IMPOSSIBLE_MATCH;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb4095e5260a104b510fb17ad455324", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/TestAll.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\t} else {", "-\t\t// Disable evaluation tests on Linux", "-\t\treturn new TestSuite(TestAll.class.getName());", "+\t// Disable evaluation tests on Linux", "+\treturn new TestSuite(TestAll.class.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4152ae9f2d42d284f2fff7f616fd61a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6c797406271c70e354dc360e4e2b55dc743bf914", "commitAfterChange": "6bb034ac24fec033a91d15d668c7ba33f5039fc9", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "signatureAfterChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "diff": ["-\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) {", "-\t\treturn;", "-\t}", "+\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) return;", "+\t// set problem id", "-", "-", "+\t// report issue"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62952cc6bf46a8eea946b1f603cc54a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "signatureAfterChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "diff": ["-\t\t} else {", "-\t\t\treturn assignment", "-\t\t\t\t.expression", "-\t\t\t\t.analyseCode(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tflowContext,", "-\t\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t\t.unconditionalInits();", "+\t\treturn assignment", "+\t\t\t.expression", "+\t\t\t.analyseCode(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tflowContext,", "+\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "+\t\t\t.unconditionalInits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7cb670244ca4c5e6d7d2ca6e1e2a09c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "da1ed68bc4edf753a4c670a981fc3b101d0548b0", "commitAfterChange": "d60a521aebaf899095636d4081476cd72ef03126", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  protected void storeTasksFor(SourceFile sourceFile, CategorizedProblem[] tasks) throws CoreException", "signatureAfterChange": "  protected void storeTasksFor(SourceFile sourceFile, CategorizedProblem[] tasks) throws CoreException", "diff": ["-\t\t\tif (extraLength > 0) {", "+\t\t\tif (extraLength > 0)", "-\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99d971f68d54f9b386ed9d90239562a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-    if (otherType == null) return false;", "-    switch(otherType.kind()) {", "+\tif (otherType == null) return false;", "+\tswitch(otherType.kind()) {", "-    \tcase Binding.WILDCARD_TYPE :", "+\t\tcase Binding.WILDCARD_TYPE :", "-    \t", "-    \tcase Binding.PARAMETERIZED_TYPE :", "-\t        if ((otherType.tagBits & HasDirectWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "-\t        \treturn false; // should have been identical", "-\t        ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-\t        if (this != otherParamType.type) ", "-\t            return false;", "-            if (!isStatic()) { // static member types do not compare their enclosing", "-\t\t        ReferenceBinding enclosing = enclosingType();", "-\t\t        if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-\t\t            return false;", "-            }", "-\t        int length = this.typeVariables == null ? 0 : this.typeVariables.length;", "-\t        TypeBinding[] otherArguments = otherParamType.arguments;", "-\t        int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-\t        if (otherLength != length) ", "-\t            return false;", "-\t        for (int i = 0; i < length; i++) {", "-\t        \tif (!this.typeVariables[i].isTypeArgumentContainedBy(otherArguments[i]))", "+", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\tif ((otherType.tagBits & HasDirectWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+\t\t\t\treturn false; // should have been identical", "+\t\t\tParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t\t\tif (this != otherParamType.type) ", "+\t\t\t\treturn false;", "+\t\t\tif (!isStatic()) { // static member types do not compare their enclosing", "+\t\t\t\tReferenceBinding enclosing = enclosingType();", "+\t\t\t\tif (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-\t        }", "-\t        return true;", "-    \t", "-    \tcase Binding.RAW_TYPE :", "+\t\t\t}", "+\t\t\tint length = this.typeVariables == null ? 0 : this.typeVariables.length;", "+\t\t\tTypeBinding[] otherArguments = otherParamType.arguments;", "+\t\t\tint otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t\tif (otherLength != length) ", "+\t\t\t\treturn false;", "+\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\tif (!this.typeVariables[i].isTypeArgumentContainedBy(otherArguments[i]))", "+\t\t\t\t\treturn false;", "+\t\t\treturn true;", "+", "+\t\tcase Binding.RAW_TYPE :", "-    }", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb708286f64bc5288e7659b6be02de58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f5e60dfb9e0f0da834028bc688056fab3928f60a", "commitAfterChange": "164aefb4defdbc9c646cd556f3b66727359ccec7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static ICompilationUnit createCompilationUnitFrom(IFile file, IJavaProject project)", "signatureAfterChange": " \tpublic static ICompilationUnit createCompilationUnitFrom(IFile file, IJavaProject project)", "diff": ["-\t\tif (file == null) {", "-\t\t\treturn null;", "-\t\t}", "+", "+\t\tif (file == null) return null;", "+", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc5d7143ba5e249c9fc64cd7197d1bd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "7468b4698239a80427b0dfed58d4a9c2f96541d8", "commitAfterChange": "071d5ff69d1256ea784921a560116cf8719733a6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (this.receiver instanceof CastExpression) {", "-\t\t\tthis.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t//containsCast = true; - always ignore receiver cast, since may affect constant pool reference", "-\t}", "+\tif (this.receiver instanceof CastExpression) this.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff51d075cd188c47fcf010b3754816cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public int scanIdentifierOrKeyword() throws InvalidInputException", "signatureAfterChange": " public int scanIdentifierOrKeyword() throws InvalidInputException", "diff": ["-\twhile (getNextCharAsJavaIdentifierPart()) {};", "+\twhile (getNextCharAsJavaIdentifierPart());"]}], "num": 53318}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b823ea716323054ceca116e4c2ae4d4f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6164b6325d0a8178d867831cf4a87d6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "e545c83d4c17deed9318734e91334eb8e0b9f1f6", "commitAfterChange": "15d3e8c6150f3af77b3e0d0c7bd80bfd130fd914", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["+\t\tIPath projectOutputLocation, // only set if needing full classpath validation (and markers)", "-\t\tif (generateMarkerOnError) {", "-\t\t\tstatus = JavaConventions.validateClasspath(this, resolvedPath, this.getOutputLocation());", "+\t\tif (generateMarkerOnError && projectOutputLocation != null) {", "+\t\t\tstatus = JavaConventions.validateClasspath(this, resolvedPath, projectOutputLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce77558abb19c72d60ccc0e81d2a145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "ed25425f5de4194a0f32ce4c1315af886ca42c42", "commitAfterChange": "821b6028ffbd0ba8edfd1a0534c32e817f4e830d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected boolean resourceExists()", "signatureAfterChange": " protected boolean resourceExists(IResource underlyingResource)", "diff": ["-protected boolean resourceExists() {", "-\tif (this.isExternal()) {", "+protected boolean resourceExists(IResource underlyingResource) {", "+\tif (underlyingResource == null) {", "-\t\t\t\tthis.getPath(), // don't make the path relative as this is an external archive", "+\t\t\t\tgetPath(), // don't make the path relative as this is an external archive", "-\t\treturn super.resourceExists();", "+\t\treturn super.resourceExists(underlyingResource);"]}], "num": 17421}
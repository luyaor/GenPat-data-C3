{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48de83e0d1e2806279889b6b3b55b655", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b35b6e6b85584c26296c7a6884059c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 23, "signatureBeforeChange": " public boolean innersNeedUpdate()", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["+", "+public boolean isCompatibleWith(TypeBinding targetType, final Scope scope) {", "+\tif (this.argumentsHaveErrors || this.binding == null || !this.binding.isValidBinding() || targetType == null || scope == null)", "+\t\treturn false;", "+\tTypeBinding originalExpectedType = this.expectedType;", "+\ttry {", "+\t\tthis.expectedType = targetType;", "+\t\t// No need to tunnel through overload resolution. this.binding is the MSMB.", "+\t\tMethodBinding method = isPolyExpression() ? ParameterizedGenericMethodBinding.computeCompatibleMethod18(this.binding.shallowOriginal(), this.argumentTypes, scope, this) : this.binding;", "+\t\tTypeBinding returnType;", "+\t\tif (method == null || !method.isValidBinding() || (returnType = method.returnType) == null || !returnType.isValidBinding())", "+\t\t\treturn false;", "+\t\tif (method == scope.environment().arrayClone)", "+\t\t\treturnType = this.actualReceiverType;", "+\t\treturn returnType != null && returnType.capture(scope, this.sourceEnd).isCompatibleWith(targetType, scope);", "+\t} finally {", "+\t\tthis.expectedType = originalExpectedType;", "+\t}", "+}", "-}", "-public boolean innersNeedUpdate() {", "-\treturn this.innerInferenceHelper != null;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86df87be95d3395a532daca053b72cd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "signatureAfterChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "diff": ["-\t", "+\tif (this.typeExpected != null && this.binding != null) {", "+\t\tMethodBinding cached = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(this.typeExpected) : null;", "+\t\tif (cached != null)", "+\t\t\treturn cached;", "+\t}", "-\t\t\t// force an inference context to be established, but avoid tunneling through overload resolution. We know this is the MSMB.", "-\t\t\treturn ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\t\t// force an inference context to be established for nested poly allocations (to be able to transfer b2), but avoid tunneling through overload resolution. We know this is the MSMB.", "+\t\t\tif (this.expressionContext == INVOCATION_CONTEXT && this.typeExpected == null)", "+\t\t\t\tconstructor = ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\tif (this.typeExpected != null)", "+\t\t\tregisterResult(this.typeExpected, constructor);"]}], "num": 44471}
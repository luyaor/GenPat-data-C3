{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3240e6fea20b54c2d9353c622f2246b2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d1e3d42d4ed81f6271d6535361cdc0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "af7c555b94268663ad75bc44adea174c67a820bf", "commitAfterChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\tretrieveRightBraceOrSemiColonPosition(methodDecl);", "-\t\t", "-\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] statements = methodDeclaration.statements;", "-\t\t", "-\t\tif (statements != null || explicitConstructorCall != null) {", "-\t\t\tBlock block = this.ast.newBlock();", "-\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "-\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, this.compilationUnitSource.length);", "-\t\t\tblock.setSourceRange(start, end - start + 1);", "-\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != ExplicitConstructorCall.ImplicitSuper) {", "-\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "-\t\t\t}", "-\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "-\t\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\t\tif (statements[i] instanceof LocalDeclaration) {", "-\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "-\t\t\t\t} else {", "-\t\t\t\t\tblock.statements().add(convert(statements[i]));", "+\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(methodDecl, methodDeclaration);", "+\t\tif (closingPosition != -1) {", "+\t\t\tint startPosition = methodDecl.getStartPosition();", "+\t\t\tmethodDecl.setSourceRange(startPosition, closingPosition - startPosition);", "+", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] statements = methodDeclaration.statements;", "+\t\t\t", "+\t\t\tif (statements != null || explicitConstructorCall != null) {", "+\t\t\t\tBlock block = this.ast.newBlock();", "+\t\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "+\t\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "+\t\t\t\tblock.setSourceRange(start, end - start + 1);", "+\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != ExplicitConstructorCall.ImplicitSuper) {", "+\t\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "+\t\t\t\t}", "+\t\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "+\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "+\t\t\t\t\tif (statements[i] instanceof LocalDeclaration) {", "+\t\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tblock.statements().add(convert(statements[i]));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tmethodDecl.setBody(block);", "+\t\t\t} else if (!methodDeclaration.isNative() && !methodDeclaration.isAbstract()) {", "+\t\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "+\t\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "+\t\t\t\tif (start != -1 && end != -1) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t * start or end can be equal to -1 if we have an interface's method.", "+\t\t\t\t\t */", "+\t\t\t\t\tBlock block = this.ast.newBlock();", "+\t\t\t\t\tblock.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tmethodDecl.setBody(block);", "-\t\t\tmethodDecl.setBody(block);", "-\t\t} else if (!methodDeclaration.isNative() && !methodDeclaration.isAbstract()) {", "-\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "-\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, this.compilationUnitSource.length);", "-\t\t\tif (start != -1 && end != -1) {", "-\t\t\t\t/*", "-\t\t\t\t * start or end can be equal to -1 if we have an interface's method.", "-\t\t\t\t */", "-\t\t\t\tBlock block = this.ast.newBlock();", "-\t\t\t\tblock.setSourceRange(start, end - start + 1);", "-\t\t\t\tmethodDecl.setBody(block);", "-\t\t\t}", "+\t\t} else {", "+\t\t\t// syntax error in this method declaration", "+\t\t\tif (!methodDeclaration.isNative() && !methodDeclaration.isAbstract()) {", "+\t\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "+\t\t\t\tend = methodDeclaration.bodyEnd;", "+\t\t\t\t// try to get the best end position", "+\t\t\t\tIProblem[] problems = methodDeclaration.compilationResult().problems;", "+\t\t\t\tif (problems != null) {", "+\t\t\t\t\tfor (int i = 0, max = problems.length; i < max; i++) {", "+\t\t\t\t\t\tIProblem currentProblem = problems[i];", "+\t\t\t\t\t\tif (currentProblem.getSourceStart() == start && currentProblem.getID() == IProblem.ParsingErrorInsertToComplete) {", "+\t\t\t\t\t\t\tend = currentProblem.getSourceEnd();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tint startPosition = methodDecl.getStartPosition();", "+\t\t\t\tmethodDecl.setSourceRange(startPosition, end - startPosition + 1);", "+\t\t\t\tif (start != -1 && end != -1) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t * start or end can be equal to -1 if we have an interface's method.", "+\t\t\t\t\t */", "+\t\t\t\t\tBlock block = this.ast.newBlock();", "+\t\t\t\t\tblock.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tmethodDecl.setBody(block);", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a93720568b99762368c2f6d5485d63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "86d91ac06ac1f83882727b265dd0aca78db0b5a4", "commitAfterChange": "68dbe89e9a681991a7bbff64c6d62bbc27421841", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tif (statements != null || explicitConstructorCall != null) {", "-\t\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "-\t\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "-\t\t\t\tif (start != -1 && end != -1) {", "-\t\t\t\t\tBlock block = this.ast.newBlock();", "-\t\t\t\t\tblock.setSourceRange(start, end - start + 1);", "-\t\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper) {", "-\t\t\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "-\t\t\t\t\t}", "-\t\t\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "-\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\t\t\t\tif (statements[i] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "-\t\t\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tblock.statements().add(convert(statements[i]));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tmethodDecl.setBody(block);", "+\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "+\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "+\t\t\tBlock block = null;", "+\t\t\tif (start != -1 && end != -1) {", "+\t\t\t\t/*", "+\t\t\t\t * start or end can be equal to -1 if we have an interface's method.", "+\t\t\t\t */", "+\t\t\t\tblock = this.ast.newBlock();", "+\t\t\t\tblock.setSourceRange(start, end - start + 1);", "+\t\t\t\tmethodDecl.setBody(block);", "+\t\t\t}", "+\t\t\tif (block != null && (statements != null || explicitConstructorCall != null)) {", "+\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper) {", "+\t\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "-\t\t\t} else if (!methodDeclaration.isNative() && !methodDeclaration.isAbstract()) {", "-\t\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "-\t\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "-\t\t\t\tif (start != -1 && end != -1) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t * start or end can be equal to -1 if we have an interface's method.", "-\t\t\t\t\t */", "-\t\t\t\t\tBlock block = this.ast.newBlock();", "-\t\t\t\t\tblock.setSourceRange(start, end - start + 1);", "-\t\t\t\t\tmethodDecl.setBody(block);", "+\t\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "+\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "+\t\t\t\t\tif (statements[i] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tblock.statements().add(convert(statements[i]));", "+\t\t\t\t\t}", "+\t\t\tif (block != null && (Modifier.isAbstract(methodDecl.getModifiers()) || Modifier.isNative(methodDecl.getModifiers()))) {", "+\t\t\t\tmethodDecl.setFlags(ASTNode.MALFORMED);", "+\t\t\t}"]}], "num": 24983}
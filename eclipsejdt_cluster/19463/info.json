{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75728dae2ea90516d9fd7b28877efaa8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b479921bb8b5e6edafb7ec11597b8b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "4f0e2d1dce5fad13089e3fb4fcd43ccba005c83c", "commitAfterChange": "698c26d613731d0111dbddcb370ca40364ac7e62", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 137, "signatureBeforeChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "signatureAfterChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "diff": ["+\t\t\t\t", "+\t\t\t\tif (tb.isParameterizedType() &&", "+\t\t\t\t\t\ttb.findSuperTypeOriginatingFrom(TypeIds.T_JavaUtilCollection, false) != null) {", "+\t\t\t\t\tParameterizedTypeBinding ptb = ((ParameterizedTypeBinding) tb);", "+\t\t\t\t\tTypeBinding[] arguments = ptb.arguments;", "+\t\t\t\t\tif (arguments != null && arguments.length == 1) {", "+\t\t\t\t\t\tTypeBinding argument = arguments[0];", "+\t\t\t\t\t\tfindVariableNameForCollection(", "+\t\t\t\t\t\t\tname,", "+\t\t\t\t\t\t\targument.leafComponentType().qualifiedPackageName(),", "+\t\t\t\t\t\t\targument.leafComponentType().qualifiedSourceName(),", "+\t\t\t\t\t\t\targument.leafComponentType().sourceName(),", "+\t\t\t\t\t\t\ttb,", "+\t\t\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\t\t\tforbiddenNames,", "+\t\t\t\t\t\t\tkind,", "+\t\t\t\t\t\t\tmodifiers);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31659caa0b8747db837ecd5be1cbc154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "commitAfterChange": "63af609b0c4ca15a76568f63423f1cb23d7be92e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic String debugName()", "signatureAfterChange": " \tpublic String debugName()", "diff": ["+\t    if (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t    \t// restore applied null annotation from tagBits:", "+\t\t    if ((this.tagBits & TagBits.AnnotationNonNull) != 0) {", "+\t\t    \tchar[][] nonNullAnnotationName = environment().getNonNullAnnotationName();", "+\t\t\t\tnameBuffer.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]).append(' ');", "+\t\t    } else if ((this.tagBits & TagBits.AnnotationNullable) != 0) {", "+\t\t    \tchar[][] nullableAnnotationName = environment().getNullableAnnotationName();", "+\t\t\t\tnameBuffer.append('@').append(nullableAnnotationName[nullableAnnotationName.length-1]).append(' ');", "+\t\t    }", "+\t    }", "-\t\tif (this.arguments != null) {", "+\t\tif (this.arguments != null && this.arguments.length > 0) { // empty arguments array happens when PTB has been created just to capture type annotations"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b78139b7ffbb3e9ffaa3533a50999167", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["+\t\t\t\tif (scope instanceof BlockScope && !this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "+\t\t\t\t\tchar[][] alreadyDefinedName = computeAlreadyDefinedName((BlockScope)scope, singleNameReference);", "+\t\t\t\t\t", "+\t\t\t\t\tfindUnresolvedReference(", "+\t\t\t\t\t\t\tsingleNameReference.sourceStart - 1,", "+\t\t\t\t\t\t\tsingleNameReference.sourceEnd,", "+\t\t\t\t\t\t\t(BlockScope)scope,", "+\t\t\t\t\t\t\talreadyDefinedName);", "+\t\t\t\t}", "+\t\t\t\t\t\trelevance += computeRelevanceForResolution();", "+\t\t\t\t\t\tif (scope instanceof BlockScope && !this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "+\t\t\t\t\t\t\tchar[][] alreadyDefinedName = computeAlreadyDefinedName((BlockScope)scope, FakeInvocationSite);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tfindUnresolvedReference(", "+\t\t\t\t\t\t\t\t\tmemberValuePair.sourceStart - 1,", "+\t\t\t\t\t\t\t\t\tmemberValuePair.sourceEnd,", "+\t\t\t\t\t\t\t\t\t(BlockScope)scope,", "+\t\t\t\t\t\t\t\t\talreadyDefinedName);", "+\t\t\t\t\t\t}"]}], "num": 19463}
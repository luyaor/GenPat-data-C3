{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e97892aae04875fa04ad63bbdcd4a108", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babe80c86f56f1bcba0d53b408abbd64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-", "-\t\tflowInfo = expression", "-\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t.unconditionalInits();", "-\t\texpression.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);", "-\t\treturn flowInfo;", "+\tLocalVariableBinding local = this.expression.localVariableBinding();", "+\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\tflowContext.recordUsingNullReference(currentScope, local, ", "+\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL, flowInfo);", "+\t\tflowInfo = expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tFlowInfo initsWhenFalse = flowInfo.copy();", "+\t\tflowInfo.markAsComparedEqualToNonNull(local);", "+\t\treturn FlowInfo.conditional(flowInfo, initsWhenFalse);", "+\treturn expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39730faae0f98a8a02875786c34fea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate int classpathContains(IClasspathEntry[] list, IClasspathEntry entry)", "signatureAfterChange": " \tprivate int classpathContains(IClasspathEntry[] list, IClasspathEntry entry)", "diff": ["+\t\t\t\t\tif (JavaCore.ENABLED.equals(this.project.getOption(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, true))) {", "+\t\t\t\t\t\t// if null annotations are enabled, also check for changes in external annotation attachment", "+\t\t\t\t\t\tString annotationPath = ClasspathEntry.getRawExternalAnnotationPath(entry);", "+\t\t\t\t\t\tString otherAnnotationPath = ClasspathEntry.getRawExternalAnnotationPath(other);", "+\t\t\t\t\t\tif (annotationPath != null && otherAnnotationPath != null) {", "+\t\t\t\t\t\t\tif (!annotationPath.equals(otherAnnotationPath))", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t} else if (annotationPath != otherAnnotationPath) {", "+\t\t\t\t\t\t\tcontinue; // null and not-null", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}"]}], "num": 33466}
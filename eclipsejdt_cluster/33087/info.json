{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f46feb5b600ff25fc539d491bed2098a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e41c3fb6d771bff4dc22adac7f0e4bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "4f8ce9c44083e58564232003d59f7f12a74c51b9", "commitAfterChange": "19eef6f26c48016adc4a14301bf3da3ca0ccecb1", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["-\t\t\t\t\tdoTextInsert(pos, \";\", getEditGroup(children[0])); //$NON-NLS-1$", "+\t\t\t\t\tif (token == TerminalTokens.TokenNameCOMMA) {", "+\t\t\t\t\t\t// a comma is at the end of the enum constant before a potential semicolon", "+\t\t\t\t\t\tint endPos= getScanner().getCurrentEndOffset();", "+\t\t\t\t\t\tint nextToken= getScanner().readNext(endPos, true);", "+\t\t\t\t\t\tif (nextToken != TerminalTokens.TokenNameSEMICOLON) {", "+\t\t\t\t\t\t\tdoTextInsert(endPos, \";\", getEditGroup(children[0])); //$NON-NLS-1$", "+//\t\t\t\t\t\t\tdoTextReplace(pos, endPos - pos, \";\", getEditGroup(children[0])); //$NON-NLS-1$", "+\t\t\t\t\t\t\tpos= endPos;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tendPos= getScanner().getCurrentEndOffset();", "+\t\t\t\t\t\t\tif (isAllOfKind(children, RewriteEvent.REMOVED)) {", "+\t\t\t\t\t\t\t\tdoTextRemove(pos, endPos - pos, getEditGroup(children[0]));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpos= endPos;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdoTextInsert(pos, \";\", getEditGroup(children[0])); //$NON-NLS-1$", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d77b26b898566c5e48bb9ae279cfe85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 302, "methodNumberAfterChange": 302, "signatureBeforeChange": " public boolean expressionNonNullComparison(Expression expr, boolean checkForNull)", "signatureAfterChange": " public boolean expressionNonNullComparison(Expression expr, boolean checkForNull)", "diff": ["-", "+", "+\tif (expr.resolvedType != null) {", "+\t\tlong tagBits = expr.resolvedType.tagBits & TagBits.AnnotationNullMASK;", "+\t\tif (tagBits == TagBits.AnnotationNonNull) {", "+\t\t\tproblemId = IProblem.RedundantNullCheckAgainstNonNullType;", "+\t\t\targuments = new String[] { String.valueOf(expr.resolvedType.nullAnnotatedReadableName(this.options, true)) };", "+\t\t\tstart = nodeSourceStart(location);", "+\t\t\tend = nodeSourceEnd(location);", "+\t\t\thandle(problemId, arguments, arguments, start, end);", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+\t\t} else {", "+\t\t\t// signaling redundancy based on syntactic analysis:", "+\t\t\tproblemId = checkForNull", "+\t\t\t\t\t? IProblem.FieldComparisonYieldsFalse", "+\t\t\t\t\t: IProblem.RedundantNullCheckOnField;", "+\t\t\targuments = new String[] { String.valueOf(field.name)};"]}], "num": 33087}
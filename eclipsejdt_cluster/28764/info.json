{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6ba817776acdea13660e0d8e742baa8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0495b5a070b3c45fec278aadef4e1a17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tboolean argsContainCast = false; ", "-\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null){", "+\t\t\tExpression argument = arguments[i];", "+\t\t\tif (argument instanceof CastExpression) {", "+\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\targsContainCast = true;", "+\t\t\t}", "+\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\tif (argHasError){", "+\t\tif (argHasError) {", "-\tif (arguments != null)", "-\t\tfor (int i = 0; i < arguments.length; i++)", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < arguments.length; i++) {", "-", "+\t\t}", "+\t\tif (argsContainCast) {", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, this.receiver, (ReferenceBinding)receiverType, binding, this.arguments, argumentTypes, this);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dafb869ac7af6f834c91b9ebef9bfd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "7468b4698239a80427b0dfed58d4a9c2f96541d8", "commitAfterChange": "071d5ff69d1256ea784921a560116cf8719733a6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tboolean enclosingInstanceContainsCast = false;", "+\t\t\tif (enclosingInstance instanceof CastExpression) {", "+\t\t\t\tenclosingInstance.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\tenclosingInstanceContainsCast = true;", "+\t\t\t}", "-\t\t\t} else if ((receiverType = ((SingleTypeReference) type).resolveTypeEnclosing(", "-\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t(ReferenceBinding) enclosingInstanceType)) == null) {", "-\t\t\t\thasError = true;", "+\t\t\t} else {", "+\t\t\t\treceiverType = ((SingleTypeReference) type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingInstanceType);", "+\t\t\t\tif (receiverType == null) {", "+\t\t\t\t\thasError = true;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (enclosingInstanceContainsCast) {", "+\t\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\tif (enclosingInstance instanceof CastExpression) {", "+\t\t\t\tenclosingInstance.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\tenclosingInstanceContainsCast = true;", "+\t\t\t}", "+\t\t\t\tif (enclosingInstanceContainsCast) {", "+\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beb4eabebf778fe1bde1524278eca5f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "55c747d0a8aaf13e7d70753235bf6ee4885d2fa8", "commitAfterChange": "f72032f192993f6a000c445c6ab6a878ffda160a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite)", "diff": ["-\r", "+\t\tboolean isCompletingDeclaration,\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "+\t\t\tif(!isCompletingDeclaration){\r", "+\t\t\t\tfindLocalMethods(\r", "+\t\t\t\t\tselector,\r", "+\t\t\t\t\targTypes,\r", "+\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\texactMatch,\r", "+\t\t\t\t\treceiverType,\r", "+\t\t\t\t\tinvocationSite);\r", "+\t\t\t}\r", "-\r", "-\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t\t\t\tif(isCompletingDeclaration){\r", "+\t\t\t\t\t\t\t\tfindLocalMethodDeclarations(\r", "+\t\t\t\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\t\t\t\treceiverType);\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tfindLocalMethods(\r", "+\t\t\t\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t\t\t\t}\r", "+\r", "-\t\twhile (currentType != null) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "+\t\t\r", "+\t\tif(isCompletingDeclaration && currentType != null)\r", "+\t\t\r", "+\t\twhile (currentType != null) {\r", "+\t\t\tif(isCompletingDeclaration){\r", "+\t\t\t\tfindLocalMethodDeclarations(\r", "+\t\t\t\t\tselector,\r", "+\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\texactMatch,\r", "+\t\t\t\t\treceiverType);\r", "+\t\t\t} else{\r", "+\t\t\t\tfindLocalMethods(\r", "+\t\t\t\t\tselector,\r", "+\t\t\t\t\targTypes,\r", "+\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\texactMatch,\r", "+\t\t\t\t\treceiverType,\r", "+\t\t\t\t\tinvocationSite);\r", "+\t\t\t}\r", "+\t\t\tcurrentType = currentType.superclass();\r", "+\t\t\t\t\r"]}], "num": 28764}
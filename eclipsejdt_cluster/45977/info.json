{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8369c5f602b8c2df65fc398f58fd63f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c8b95cea1d2e73a8ebf40c1c9a60fab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1b98b39107e931dc0893df1da7a410cad5cc4745", "commitAfterChange": "9635fd418f2d5b55fe3d3dc4ccb7797a5daf3a53", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope) {", "+\tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation) {", "-\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,", "-\t\t\t\t\t\t\tscope);", "-\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)){", "-\t\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "-\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "-\t\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "-\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tsingleNameReference,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\t\t\t\tsingleNameReference.isInsideAnnotationAttribute);", "+\t\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)){", "+\t\t\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "+\t\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t\t\t}", "-\t", "+\t\t\t\t\t\t\t\t\tboolean isInsideAnnotationAttribute = ref.isInsideAnnotationAttribute;", "-\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD) &&", "+\t\t\t\t\t\t\t\t\tif(isInsideAnnotationAttribute &&", "+\t\t\t\t\t\t\t\t\t\t\t!this.requestor.isIgnored(CompletionProposal.KEYWORD) &&", "-\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\t\t\t\tif(!isInsideAnnotationAttribute && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlong completionPosition = type.sourcePositions[type.tokens.length];", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(memberValuePairs == null || memberValuePairs.length == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annotation.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(methodBindings != null &&", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cef122f2c9fd7e5a23cfa41e07ab7f28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c273134bf110ff6a8ee2009bd261955b7caa4081", "commitAfterChange": "a15857c78be035e31c0bb57b42d7b9ffa74cef8c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "-\t\t\t\tif (memberValuePairs == null || memberValuePairs.length == 0) {", "-\t\t\t\t\tif (annotation.resolvedType instanceof ReferenceBinding) {", "-\t\t\t\t\t\tMethodBinding[] methodBindings =", "-\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "-\t\t\t\t\t\tif (methodBindings != null &&", "-\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "-\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "-\t\t\t\t\t\t\tif (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "-\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "-\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "-\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\tif (this.assistNodeCanBeSingleMemberAnnotation) {", "+\t\t\t\t\tif (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tFakeInvocationSite,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);"]}], "num": 45977}
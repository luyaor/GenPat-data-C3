{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6292b1c487e6f366f244d0f515973e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b73bdcab32572e880f1d4a9d5148de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "commitAfterChange": "226549608701ba73d9d11accd44137bac1a2e12b", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public org.eclipse.jdt.core.dom.CompilationUnit reconcile( \tboolean createAST, \tboolean forceProblemDetection, \tWorkingCopyOwner workingCopyOwner, \tIProgressMonitor monitor) \tthrows JavaModelException", "signatureAfterChange": " public org.eclipse.jdt.core.dom.CompilationUnit reconcile( \tint astLevel, \tboolean forceProblemDetection, \tWorkingCopyOwner workingCopyOwner, \tIProgressMonitor monitor) \tthrows JavaModelException", "diff": ["- */", "-public org.eclipse.jdt.core.dom.CompilationUnit reconcile(", "-\tboolean createAST,", "-\tboolean forceProblemDetection,", "-\tWorkingCopyOwner workingCopyOwner,", "-\tIProgressMonitor monitor)", "-\tthrows JavaModelException {", "-", "-\treturn reconcile(AST.LEVEL_2_0, forceProblemDetection, workingCopyOwner, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88eafd98a898c94e960b336212f352c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2b25437c1d081a8e45247264663df433e9d9e360", "commitAfterChange": "b6b8173d4f9c7b0fe8067e052e4660cc0c1fa5df", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\tif (fieldDeclaration != null && fieldDeclaration.initialization != null) {", "-\t\t\t\t// We're asking for a proposal inside this field's initialization. So record its id", "-\t\t\t\tfieldBeingCompletedId = field.id;", "-\t\t\t\tbreak;", "+\t\t\t// We maybe asking for a proposal inside this field's initialization. So record its id", "+\t\t\tASTNode astNode = this.parser.assistNode;", "+\t\t\tif (fieldDeclaration != null && fieldDeclaration.initialization != null && astNode != null) {", "+\t\t\t\tif (fieldDeclaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\tif (fieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t// completion is inside a field initializer", "+\t\t\t\t\t\tfieldBeingCompletedId = field.id;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else { // The sourceEnd may not yet be set", "+\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(astNode, fieldDeclaration.initialization);", "+\t\t\t\t\tif (detector.containsCompletionNode()) {  // completion is inside a field initializer", "+\t\t\t\t\t\tfieldBeingCompletedId = field.id;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8f185beb10dbbe7ea723a690c2a1716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "cbce30b9f59e4652d4bd8e53671da318f5703bbd", "commitAfterChange": "bb6274460011ae3e14410332fdec5a35eeffca9b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "signatureAfterChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "diff": ["-", "+\tIfStatement ifStatement = null;", "-\tif (index != -1 && this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] != null) {", "-\t\tExpression condition = (Expression)this.elementObjectInfoStack[index];", "-", "-\t\t// If currentElement is a RecoveredLocalVariable then it can be contained in the if statement", "-\t\tif (this.currentElement instanceof RecoveredLocalVariable &&", "-\t\t\t\tthis.currentElement.parent instanceof RecoveredBlock) {", "-\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) this.currentElement;", "-\t\t\tif (recoveredLocalVariable.localDeclaration.initialization == null &&", "-\t\t\t\t\tstatement instanceof Expression &&", "-\t\t\t\t\tcondition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {", "-\t\t\t\tthis.currentElement.add(statement, 0);", "-", "-\t\t\t\tstatement = recoveredLocalVariable.updatedStatement(0, new HashSet());", "-", "-\t\t\t\t// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead", "-\t\t\t\tRecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;", "-\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "-", "-\t\t\t\tthis.currentElement = recoveredBlock;", "-", "+\twhile (index >= 0) {", "+\t\t// Try to find an enclosing if statement even if one is not found immediately preceding the completion node.", "+\t\tif (index != -1 && this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] != null) {", "+\t\t\tExpression condition = (Expression)this.elementObjectInfoStack[index];", "+\t", "+\t\t\t// If currentElement is a RecoveredLocalVariable then it can be contained in the if statement", "+\t\t\tif (this.currentElement instanceof RecoveredLocalVariable &&", "+\t\t\t\t\tthis.currentElement.parent instanceof RecoveredBlock) {", "+\t\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) this.currentElement;", "+\t\t\t\tif (recoveredLocalVariable.localDeclaration.initialization == null &&", "+\t\t\t\t\t\tstatement instanceof Expression &&", "+\t\t\t\t\t\tcondition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {", "+\t\t\t\t\tthis.currentElement.add(statement, 0);", "+\t", "+\t\t\t\t\tstatement = recoveredLocalVariable.updatedStatement(0, new HashSet());", "+\t", "+\t\t\t\t\t// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead", "+\t\t\t\t\tRecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;", "+\t\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "+\t", "+\t\t\t\t\tthis.currentElement = recoveredBlock;", "+\t", "+\t\t\t\t}", "+\t\t\tif (statement instanceof AND_AND_Expression && this.assistNode instanceof Statement) {", "+\t\t\t\tstatement = (Statement) this.assistNode;", "+\t\t\t}", "+\t\t\tifStatement =", "+\t\t\t\tnew IfStatement(", "+\t\t\t\t\t\tcondition,", "+\t\t\t\t\t\tstatement,", "+\t\t\t\t\t\tcondition.sourceStart,", "+\t\t\t\t\t\tstatement.sourceEnd);", "+\t\t\tindex--;", "+\t\t\tbreak;", "-\t\tif (statement instanceof AND_AND_Expression && this.assistNode instanceof Statement) {", "-\t\t\tstatement = (Statement) this.assistNode;", "-\t\t}", "-\t\tIfStatement ifStatement =", "-\t\t\tnew IfStatement(", "-\t\t\t\t\tcondition,", "-\t\t\t\t\tstatement,", "-\t\t\t\t\tcondition.sourceStart,", "-\t\t\t\t\tstatement.sourceEnd);", "-\t\tthis.enclosingNode = ifStatement;", "-\t\treturn ifStatement;", "+\t\tindex--;", "-", "-\treturn statement;", "+\tif (ifStatement == null) {", "+\t\treturn statement;", "+\t}", "+\t// collect all if statements with instanceof expressions that enclose the completion node", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=304006", "+\twhile (index >= 0) {", "+\t\tif (this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] instanceof InstanceOfExpression) {", "+\t\t\tInstanceOfExpression condition = (InstanceOfExpression)this.elementObjectInfoStack[index];", "+\t\t\tifStatement =", "+\t\t\t\tnew IfStatement(", "+\t\t\t\t\t\tcondition,", "+\t\t\t\t\t\tifStatement,", "+\t\t\t\t\t\tcondition.sourceStart,", "+\t\t\t\t\t\tifStatement.sourceEnd);", "+\t\t}", "+\t\tindex--;", "+\t}", "+\tthis.enclosingNode = ifStatement;", "+\treturn ifStatement;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db8651b722853562eb6d29afa6d741b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "0df073aaf80ff21c61e718b91c8d484463b96210", "commitAfterChange": "e54298ab4c8f6bdf72c096243b9bdd0814a3eb04", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+\t\tboolean alreadyParsedTag = false;", "+\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\talreadyParsedTag = true;", "+\t\t\t\talreadyParsedTag = true;", "+\t\tif (! alreadyParsedTag && this.reportProblems && verifyEndLine(this.scanner.currentPosition)) {", "+\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(tagName, this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "+\t\t\treturn false;", "+\t\t}", "+\t\treturn valid;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7d70e30ae3728c8d5b03c35133a5716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "13de33d27f62a8e18bfa9b4bad7cc8222b56b1f2", "commitAfterChange": "e1cd009aeadbb1638b9152a08db4bfcba963e522", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void computeVisibleElementBindings()", "signatureAfterChange": "  \tprivate void computeVisibleElementBindings()", "diff": ["-\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fields[i];", "+\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fields[i];\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// completion is inside a field initializer", "-\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "-\t\t\t\t\t\t\t\t// remove this field from visibleFields list because completion is being asked in its", "-\t\t\t\t\t\t\t\t// intialization and so this has not yet been declared successfully.", "-\t\t\t\t\t\t\t\tif (this.visibleFields.size > 0 && this.visibleFields.contains(fieldDeclaration.binding)) {", "-\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(fieldDeclaration.binding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\t\twhile (count < this.visibleFields.size) {", "-\t\t\t\t\t\t\t\t\tFieldBinding visibleField = (FieldBinding)this.visibleFields.elementAt(count);", "-\t\t\t\t\t\t\t\t\tif (visibleField.id > fieldDeclaration.binding.id) {", "-\t\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(visibleField);", "-\t\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t/*(Incase fieldDeclaration != null is not sufficient to infer that", "-\t\t\t\t\t\t\t  proposal is being asked inside initializer of field decl, use the below if", "-\t\t\t\t\t\t\t  block instead of the above)", "-\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null) {", "-\t\t\t\t\t\t\t ", "+\t\t\t\t\t\t\t\tboolean isInsideInitializer = false;", "-\t\t\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\t\t\tisInsideInitializer = true;", "-\t\t\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\t\t\t// completion is inside a field initializer", "+\t\t\t\t\t\t\t\t\t\tisInsideInitializer = true;", "-\t\t\t\t\t\t\t\t// remove this field from visibleFields list because completion is being asked in its", "-\t\t\t\t\t\t\t\t// intialization and so this has not yet been declared successfully.", "-\t\t\t\t\t\t\t\tif (this.visibleFields.size > 0 && this.visibleFields.contains(fieldDeclaration.binding)) {", "-\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(fieldDeclaration.binding);", "+\t\t\t\t\t\t\t\tif (isInsideInitializer) {", "+\t\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\t\t// remove this field from visibleFields list because completion is being asked in its", "+\t\t\t\t\t\t\t\t\t// intialization and so this has not yet been declared successfully.", "+\t\t\t\t\t\t\t\t\tif (this.visibleFields.size > 0 && this.visibleFields.contains(fieldDeclaration.binding)) {", "+\t\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(fieldDeclaration.binding);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\t\twhile (count < this.visibleFields.size) {", "+\t\t\t\t\t\t\t\t\t\tFieldBinding visibleField = (FieldBinding)this.visibleFields.elementAt(count);", "+\t\t\t\t\t\t\t\t\t\tif (visibleField.id > fieldDeclaration.binding.id) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(visibleField);", "+\t\t\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t}*/", "+\t\t\t\t\t\t\t}"]}], "num": 60057}
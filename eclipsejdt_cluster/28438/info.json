{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0c7fcbea29d596640b4f3565cf69995", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b882766b41fcd367d81eca77908383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "7fcda725e57776ddb850f6e0923a37be77d4220a", "commitAfterChange": "a6e6bfb150ee78b02c696c163d3f66a811019e6b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tHashtableOfArrayToObject getAllPackageFragments(JavaProject project)", "signatureAfterChange": " \t \tHashtableOfArrayToObject getAllPackageFragments(JavaProject project)", "diff": ["-\t\t\tIPackageFragment[] frags = this.getPackageFragmentsInRoots(roots, project);", "-\t\t\tfor (int i= 0; i < frags.length; i++) {", "-\t\t\t\tPackageFragment fragment= (PackageFragment) frags[i];", "-\t\t\t\tString[] pkgName = fragment.names;", "-\t\t\t\tIPackageFragment[] entry= (IPackageFragment[]) cache.get(pkgName);", "-\t\t\t\tif (entry == null) {", "-\t\t\t\t\tentry= new IPackageFragment[1];", "-\t\t\t\t\tentry[0]= fragment;", "-\t\t\t\t\tcache.put(pkgName, entry);", "-\t\t\t\t} else {", "-\t\t\t\t\tIPackageFragment[] copy= new IPackageFragment[entry.length + 1];", "-\t\t\t\t\tSystem.arraycopy(entry, 0, copy, 0, entry.length);", "-\t\t\t\t\tcopy[entry.length]= fragment;", "-\t\t\t\t\tcache.put(pkgName, copy);", "+\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\t\tIJavaElement[] frags = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tfrags = root.getChildren();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// root doesn't exist: ignore", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tfor (int j = 0, length2 = frags.length; j < length2; j++) {", "+\t\t\t\t\tPackageFragment fragment= (PackageFragment) frags[j];", "+\t\t\t\t\tString[] pkgName = fragment.names;", "+\t\t\t\t\tIPackageFragmentRoot[] entry= (IPackageFragmentRoot[]) cache.get(pkgName);", "+\t\t\t\t\tif (entry == null) {", "+\t\t\t\t\t\tentry= new IPackageFragmentRoot[] {root};", "+\t\t\t\t\t\tcache.put(pkgName, entry);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tIPackageFragmentRoot[] copy= new IPackageFragmentRoot[entry.length + 1];", "+\t\t\t\t\t\tSystem.arraycopy(entry, 0, copy, 0, entry.length);", "+\t\t\t\t\t\tcopy[entry.length]= root;", "+\t\t\t\t\t\tcache.put(pkgName, copy);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a402efd9eca741b5255047579ffaf3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "1b6e530846bd3016ce4d9f23e0a1a2bddd09dba4", "commitAfterChange": "63e1f1decc43a525e62efd06af41afe94624af82", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tHashtableOfArrayToObject getAllPackageFragments(JavaProject project)", "signatureAfterChange": " \t \tProjectCache getProjectCache(JavaProject project)", "diff": ["-\tHashtableOfArrayToObject getAllPackageFragments(JavaProject project) {", "-\t\tif (this.allPkgFragmentsCache == null) {", "-\t\t\tHashtableOfArrayToObject cache = new HashtableOfArrayToObject();", "-\t\t\tIPackageFragmentRoot[] roots = getAllPackageFragmentRoots(project);", "+\tProjectCache getProjectCache(JavaProject project) {", "+\t\tProjectCache cache = this.projectCache;", "+\t\tif (cache == null) {", "+\t\t\tIPackageFragmentRoot[] roots;", "+\t\t\tMap reverseMap = new HashMap(3);", "+\t\t\ttry {", "+\t\t\t\troots = project.getAllPackageFragmentRoots(reverseMap);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project does not exist: cannot happen since this is the info of the project", "+\t\t\t\troots = new IPackageFragmentRoot[0];", "+\t\t\t\treverseMap.clear();", "+\t\t\t}", "+\t\t\tHashtableOfArrayToObject fragmentsCache = new HashtableOfArrayToObject();", "-\t\t\t\t\tObject existing = cache.get(pkgName);", "+\t\t\t\t\tObject existing = fragmentsCache.get(pkgName);", "-\t\t\t\t\t\tcache.put(pkgName, root);", "+\t\t\t\t\t\tfragmentsCache.put(pkgName, root);", "-\t\t\t\t\t\t\tcache.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t\t\tfragmentsCache.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "-\t\t\t\t\t\t\tcache.put(pkgName, copy);", "+\t\t\t\t\t\t\tfragmentsCache.put(pkgName, copy);", "-\t\t\tthis.allPkgFragmentsCache = cache;", "+\t\t\tcache = new ProjectCache(roots, fragmentsCache, reverseMap);", "+\t\t\tthis.projectCache = cache;", "-\t\treturn this.allPkgFragmentsCache;", "+\t\treturn cache;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd66a86b3c2be998efaa93a222df339", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "b97ded2f83297eeeca5d1431ded2373cd5cd9a87", "commitAfterChange": "db5d3330558f8c3dc02b2913325d1658af93a1d6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "diff": ["-\t\tMap allRemovedRoots = manager.deltaProcessor.removedRoots;", "-\t\tMap removedRoots = null;", "-\t\tif (allRemovedRoots != null) {", "-\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) allRemovedRoots.get(project);", "-\t\t\tif (roots != null) {", "-\t\t\t\tremovedRoots = new HashMap();", "-\t\t\t\tfor (int i = 0; i < roots.length; i++) {", "-\t\t\t\t\tIPackageFragmentRoot root = roots[i];", "-\t\t\t\t\tremovedRoots.put(root.getPath(), root);", "-\t\t\t\t}", "+\t\tMap oldRoots = null;", "+\t\tIPackageFragmentRoot[] roots = null;", "+\t\tif (project.isOpen()) {", "+\t\t\ttry {", "+\t\t\t\troots = project.getPackageFragmentRoots();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t}", "+\t\t} else {", "+\t\t\tMap allRemovedRoots ;", "+\t\t\tif ((allRemovedRoots = manager.deltaProcessor.removedRoots) != null) {", "+\t\t \t\troots = (IPackageFragmentRoot[]) allRemovedRoots.get(project);", "+\t\t\t}", "+\t\t}", "+\t\tif (roots != null) {", "+\t\t\toldRoots = new HashMap();", "+\t\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\t\toldRoots.put(root.getPath(), root);", "-\t\t\t\tif (removedRoots != null) {", "-\t\t\t\t\tIPackageFragmentRoot removedRoot = (IPackageFragmentRoot)  removedRoots.get(oldResolvedPath[i].getPath());", "-\t\t\t\t\tif (removedRoot != null) { // use old root if any (could be none if entry wasn't bound)", "-\t\t\t\t\t\tpkgFragmentRoots = new IPackageFragmentRoot[] { removedRoot };", "+\t\t\t\tif (oldRoots != null) {", "+\t\t\t\t\tIPackageFragmentRoot oldRoot = (IPackageFragmentRoot)  oldRoots.get(oldResolvedPath[i].getPath());", "+\t\t\t\t\tif (oldRoot != null) { // use old root if any (could be none if entry wasn't bound)", "+\t\t\t\t\t\tpkgFragmentRoots = new IPackageFragmentRoot[] { oldRoot };"]}], "num": 28438}
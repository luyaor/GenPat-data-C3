{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91af5643ce900513049223e6f8b977f9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9a1f230c5c25339fb84ecc4c24cd75c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "fbf0909c10f2ace01461d4ca2e7f7ef5d34ed6fa", "commitAfterChange": "34f79b507663962f5a8b34c6546e7cf80423bb0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void initializeRoots(boolean initAfterLoad)", "signatureAfterChange": " \t \tpublic void initializeRoots(boolean initAfterLoad)", "diff": ["-\t\tHashMap newRoots = null;", "-\t\tHashMap newOtherRoots = null;", "-\t\tHashMap newSourceAttachments = null;", "-\t\tHashMap newProjectDependencies = null;", "+\t\tHashMap[] rootInfos = null;", "+\t\t\t\t", "+\t\t\t\trootInfos = getRootInfos(false/*don't use previous session values*/);", "-\t\t\t\tnewRoots = new HashMap();", "-\t\t\t\tnewOtherRoots = new HashMap();", "-\t\t\t\tnewSourceAttachments = new HashMap();", "-\t\t\t\tnewProjectDependencies = new HashMap();", "-\t\t", "-\t\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\t\tIJavaProject[] projects;", "-\t\t\t\ttry {", "-\t\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// nothing can be done", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tJavaProject project = (JavaProject) projects[i];", "-\t\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tclasspath = project.getResolvedClasspath();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// continue with next project", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {", "-\t\t\t\t\t\t\tIJavaProject key = model.getJavaProject(entry.getPath().segment(0)); // TODO (jerome) reuse handle", "-\t\t\t\t\t\t\tIJavaProject[] dependents = (IJavaProject[]) newProjectDependencies.get(key);", "-\t\t\t\t\t\t\tif (dependents == null) {", "-\t\t\t\t\t\t\t\tdependents = new IJavaProject[] {project};", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint dependentsLength = dependents.length;", "-\t\t\t\t\t\t\t\tSystem.arraycopy(dependents, 0, dependents = new IJavaProject[dependentsLength+1], 0, dependentsLength);", "-\t\t\t\t\t\t\t\tdependents[dependentsLength] = project;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnewProjectDependencies.put(key, dependents);", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// root path", "-\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// source attachment path", "-\t\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tpropertyString = Util.getSourceAttachmentProperty(path);", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\tif (this.rootsAreStale && newRoots != null) { // double check again", "-\t\t\t\tthis.roots = newRoots;", "-\t\t\t\tthis.otherRoots = newOtherRoots;", "-\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "-\t\t\t\tthis.projectDependencies = newProjectDependencies;", "+\t\t\tif (this.rootsAreStale && rootInfos != null) { // double check again", "+\t\t\t\tthis.roots = rootInfos[0];", "+\t\t\t\tthis.otherRoots = rootInfos[1];", "+\t\t\t\tthis.sourceAttachments = rootInfos[2];", "+\t\t\t\tthis.projectDependencies = rootInfos[3];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b90bdfc388aa521f43e5b49d907eb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "e1a4dd76a1096e4a9ca316a8229a1b7d5fbaaa3a", "commitAfterChange": "0ff40cf9419ba675580163e104091de3b2c53d9a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void initializeRoots(boolean initAfterLoad)", "signatureAfterChange": " \t \tpublic void initializeRoots(boolean initAfterLoad)", "diff": ["-\t\tHashMap newRoots = null;", "-\t\tHashMap newOtherRoots = null;", "-\t\tHashMap newSourceAttachments = null;", "-\t\tHashMap newProjectDependencies = null;", "+\t\tHashMap[] rootInfos = null;", "+\t\t\t\t", "+\t\t\t\trootInfos = getRootInfos(false/*don't use previous session values*/);", "-\t\t\t\tnewRoots = new HashMap();", "-\t\t\t\tnewOtherRoots = new HashMap();", "-\t\t\t\tnewSourceAttachments = new HashMap();", "-\t\t\t\tnewProjectDependencies = new HashMap();", "-\t\t", "-\t\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\t\tIJavaProject[] projects;", "-\t\t\t\ttry {", "-\t\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// nothing can be done", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tJavaProject project = (JavaProject) projects[i];", "-\t\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tclasspath = project.getResolvedClasspath();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// continue with next project", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {", "-\t\t\t\t\t\t\tIJavaProject key = model.getJavaProject(entry.getPath().segment(0)); // TODO (jerome) reuse handle", "-\t\t\t\t\t\t\tIJavaProject[] dependents = (IJavaProject[]) newProjectDependencies.get(key);", "-\t\t\t\t\t\t\tif (dependents == null) {", "-\t\t\t\t\t\t\t\tdependents = new IJavaProject[] {project};", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint dependentsLength = dependents.length;", "-\t\t\t\t\t\t\t\tSystem.arraycopy(dependents, 0, dependents = new IJavaProject[dependentsLength+1], 0, dependentsLength);", "-\t\t\t\t\t\t\t\tdependents[dependentsLength] = project;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnewProjectDependencies.put(key, dependents);", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// root path", "-\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// source attachment path", "-\t\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tpropertyString = Util.getSourceAttachmentProperty(path);", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\tif (this.rootsAreStale && newRoots != null) { // double check again", "-\t\t\t\tthis.roots = newRoots;", "-\t\t\t\tthis.otherRoots = newOtherRoots;", "-\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "-\t\t\t\tthis.projectDependencies = newProjectDependencies;", "+\t\t\tif (this.rootsAreStale && rootInfos != null) { // double check again", "+\t\t\t\tthis.roots = rootInfos[0];", "+\t\t\t\tthis.otherRoots = rootInfos[1];", "+\t\t\t\tthis.sourceAttachments = rootInfos[2];", "+\t\t\t\tthis.projectDependencies = rootInfos[3];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebdfa4bc01d3414d44c2f782c8f7c48a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "34f79b507663962f5a8b34c6546e7cf80423bb0b", "commitAfterChange": "0b3c372cd8063a26d1eaf5c9a3c9657a40eb4a99", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void initializeRoots(boolean initAfterLoad)", "signatureAfterChange": " \t \tpublic void initializeRoots(boolean initAfterLoad)", "diff": ["-\t\tHashMap[] rootInfos = null;", "+\t\tHashMap newRoots = null;", "+\t\tHashMap newOtherRoots = null;", "+\t\tHashMap newSourceAttachments = null;", "+\t\tHashMap newProjectDependencies = null;", "-\t\t\t\t", "-\t\t\t\trootInfos = getRootInfos(false/*don't use previous session values*/);", "+\t\t\t\tnewRoots = new HashMap();", "+\t\t\t\tnewOtherRoots = new HashMap();", "+\t\t\t\tnewSourceAttachments = new HashMap();", "+\t\t\t\tnewProjectDependencies = new HashMap();", "+\t\t", "+\t\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\t\tIJavaProject[] projects;", "+\t\t\t\ttry {", "+\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// nothing can be done", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\tJavaProject project = (JavaProject) projects[i];", "+\t\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tclasspath = project.getResolvedClasspath();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// continue with next project", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {", "+\t\t\t\t\t\t\tIJavaProject key = model.getJavaProject(entry.getPath().segment(0)); // TODO (jerome) reuse handle", "+\t\t\t\t\t\t\tIJavaProject[] dependents = (IJavaProject[]) newProjectDependencies.get(key);", "+\t\t\t\t\t\t\tif (dependents == null) {", "+\t\t\t\t\t\t\t\tdependents = new IJavaProject[] {project};", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint dependentsLength = dependents.length;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(dependents, 0, dependents = new IJavaProject[dependentsLength+1], 0, dependentsLength);", "+\t\t\t\t\t\t\t\tdependents[dependentsLength] = project;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnewProjectDependencies.put(key, dependents);", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// root path", "+\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "+\t\t\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// source attachment path", "+\t\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\t\t\tString propertyString = null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tpropertyString = Util.getSourceAttachmentProperty(path);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (this.rootsAreStale && rootInfos != null) { // double check again", "-\t\t\t\tthis.roots = rootInfos[0];", "-\t\t\t\tthis.otherRoots = rootInfos[1];", "-\t\t\t\tthis.sourceAttachments = rootInfos[2];", "-\t\t\t\tthis.projectDependencies = rootInfos[3];", "+\t\t\tif (this.rootsAreStale && newRoots != null) { // double check again", "+\t\t\t\tthis.roots = newRoots;", "+\t\t\t\tthis.otherRoots = newOtherRoots;", "+\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "+\t\t\t\tthis.projectDependencies = newProjectDependencies;", "-\t}"]}], "num": 36884}
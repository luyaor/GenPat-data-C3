{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "823f9ae0c0334a8cea64509ac7cc3e6c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e506b352bcb60a615f3c0f530f8879", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/VerboseElementCache.java", "commitBeforeChange": "7f547e4df5eb75fa9635256f722fd3750a48a3e2", "commitAfterChange": "49e0262787cdec74a49d7bb90191a6d160d6e797", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprotected boolean makeSpace(int space)", "signatureAfterChange": "  \tprotected boolean makeSpace(int space)", "diff": ["-\t\tif (this.beingAdded != null && !isSpaceAvailable(space, fSpaceLimit)) {", "+\t\tif (this.beingAdded == null) return super.makeSpace(space);", "+\t\tString fillingRatio = toStringFillingRation(this.name);", "+\t\tboolean result = super.makeSpace(space);", "+\t\tString newFillingRatio = toStringFillingRation(this.name);", "+\t\tif (!fillingRatio.equals(newFillingRatio)) {", "-\t\t\tSystem.out.println(Thread.currentThread() + \" MAKING SPACE IN \" + toStringFillingRation(this.name)); //$NON-NLS-1$", "+\t\t\tSystem.out.println(Thread.currentThread() + \" MADE SPACE FOR \" + fillingRatio + \" (NOW \" + NumberFormat.getInstance().format(fillingRatio()) + \"% full)\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\treturn super.makeSpace(space);", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66ec3db13d6ad6e948493c19210e903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "d59541eb58af959f3a88200970206c2ba05248de", "commitAfterChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "diff": ["-//\t\tstopOnFailure = false;", "+\t\tstopOnFailure = false;", "-\t\tassertTrue(!stop || failures.size()==0);", "+\t\tif (stop && failures.size() > 0) {", "+\t\t\tString expected = new String(source, docComment.getStartPosition(), docComment.getLength());", "+\t\t\tASTConverterJavadocFlattener flattener = new ASTConverterJavadocFlattener(expected);", "+\t\t\tdocComment.accept(flattener);", "+\t\t\tassertEquals(\"Unexpected errors while verifying javadoc comment positions!\", expected, flattener.getResult());", "+\t\t}"]}], "num": 11668}
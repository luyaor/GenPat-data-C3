{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e132eb565a27731f73f0139f8775d3c0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e94035d8281c3ba41999c8407da203a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public MethodBinding getMethodBinding(IMethod method)", "signatureAfterChange": " public MethodBinding getMethodBinding(IMethod method)", "diff": ["-\tMethodBinding methodBinding = null;", "-\t\t\tint length = parameterTypes.length;", "-\t\t\tTypeBinding[] parameters = new TypeBinding[length];", "-\t\t\tfor (int i=0;  i<length; i++) {", "-\t\t\t\tparameters[i] = this.unitScope.getType(Signature.toCharArray(parameterTypes[i].toCharArray()));", "+\t\t\tint paramTypeslength = parameterTypes.length;", "+\t\t\tchar[][] paramTypesChars = new char[paramTypeslength][];", "+\t\t\tfor (int i=0;  i<paramTypeslength; i++) {", "+\t\t\t\tparamTypesChars[i] = Signature.toCharArray(parameterTypes[i].toCharArray());", "-\t\t\tmethodBinding = referenceBinding.getExactMethod(method.getElementName().toCharArray(), parameters);", "-\t\t\tthis.bindings.put(method, methodBinding);", "-\t\t\treturn methodBinding;", "+\t\t\tMethodBinding[] methods = referenceBinding.getMethods(method.getElementName().toCharArray());", "+\t\t\tint methodsLength = methods.length;", "+\t\t\tTypeVariableBinding[] refTypeVariables = referenceBinding.typeVariables();", "+\t\t\tint typeVarLength = refTypeVariables==null ? 0 : refTypeVariables.length;", "+\t\t\tfor (int i=0; i<methodsLength; i++) {", "+\t\t\t\tTypeBinding[] methodParameters = methods[i].parameters;", "+\t\t\t\tint paramLength = methodParameters==null ? 0 : methodParameters.length;", "+\t\t\t\tTypeVariableBinding[] methodTypeVariables = methods[i].typeVariables;", "+\t\t\t\tint methTypeVarLength = methodTypeVariables==null ? 0 : methodTypeVariables.length;", "+\t\t\t\tboolean found = paramLength == paramTypeslength;", "+\t\t\t\tif (found) {", "+\t\t\t\t\tfor (int p=0; found && p<paramLength; p++) {", "+\t\t\t\t\t\tif (CharOperation.equals(methodParameters[p].erasure().shortReadableName(), paramTypesChars[p])) {", "+\t\t\t\t\t\t\t// param erasure match", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// type variable", "+\t\t\t\t\t\t\tboolean foundVar = true;", "+\t\t\t\t\t\t\tfor (int v=0; foundVar && v<typeVarLength; v++) {", "+\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, paramTypesChars[p])) {", "+\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!foundVar) {", "+\t\t\t\t\t\t\t\tfoundVar = true;", "+\t\t\t\t\t\t\t\tfor (int v=0; foundVar && v<methTypeVarLength; v++) {", "+\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(methodTypeVariables[v].sourceName, paramTypesChars[p])) {", "+\t\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (!foundVar) found = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (found) {", "+\t\t\t\t\tthis.bindings.put(method, methods[i]);", "+\t\t\t\t\treturn methods[i];", "+\t\t\t\t}", "+\t\t\t}", "+//\t\t\tmethodBinding = referenceBinding.getExactMethod(method.getElementName().toCharArray(), parameters);", "+//\t\t\tthis.bindings.put(method, methodBinding);", "+//\t\t\treturn methodBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0bc6d6069c8794ca1e20457d05ff5be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding getMethodBinding(IMethod method)", "signatureAfterChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "diff": ["-public MethodBinding getMethodBinding(IMethod method) {", "+public MethodBinding getMethodBinding(MethodPattern methodPattern) {", "-\tBinding binding = (Binding) this.bindings.get(method);", "+\tBinding binding = (Binding) this.bindings.get(methodPattern);", "-\tString typeName = method.getDeclaringType().getElementName();", "-\tTypeBinding declaringTypeBinding = getType(typeName, typeName.toCharArray());", "+\tchar[] typeName = PatternLocator.qualifiedPattern(methodPattern.declaringSimpleName, methodPattern.declaringQualification);", "+\tif (typeName == null) {", "+\t\tif (methodPattern.declaringType == null) return null;", "+\t\ttypeName = methodPattern.declaringType.getFullyQualifiedName().toCharArray();", "+\t}", "+\tTypeBinding declaringTypeBinding = getType(typeName, typeName);", "-\t\t\tString[] parameterTypes = method.getParameterTypes();", "+\t\t\tchar[][] parameterTypes = methodPattern.parameterSimpleNames;", "+\t\t\tif (parameterTypes == null) return null;", "-\t\t\tchar[][] paramTypesChars = new char[paramTypeslength][];", "-\t\t\tfor (int i=0;  i<paramTypeslength; i++) {", "-\t\t\t\tparamTypesChars[i] = Signature.toCharArray(parameterTypes[i].toCharArray());", "-\t\t\t}", "-\t\t\tMethodBinding[] methods = referenceBinding.getMethods(method.getElementName().toCharArray());", "+\t\t\tMethodBinding[] methods = referenceBinding.getMethods(methodPattern.selector);", "-\t\t\t\tboolean found = paramLength == paramTypeslength;", "-\t\t\t\tif (found) {", "-\t\t\t\t\tfor (int p=0; found && p<paramLength; p++) {", "-\t\t\t\t\t\tif (CharOperation.equals(methodParameters[p].erasure().shortReadableName(), paramTypesChars[p])) {", "+\t\t\t\tboolean found = false;", "+\t\t\t\tif (paramLength == paramTypeslength) {", "+\t\t\t\t\tfor (int p=0; p<paramLength; p++) {", "+\t\t\t\t\t\tif (CharOperation.equals(methodParameters[p].erasure().shortReadableName(), parameterTypes[p])) {", "+\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\tboolean foundVar = true;", "-\t\t\t\t\t\t\tfor (int v=0; foundVar && v<typeVarLength; v++) {", "-\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, paramTypesChars[p])) {", "-\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\tfor (int v=0; v<typeVarLength; v++) {", "+\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, parameterTypes[p])) {", "+\t\t\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\tif (!foundVar) {", "-\t\t\t\t\t\t\t\tfoundVar = true;", "-\t\t\t\t\t\t\t\tfor (int v=0; foundVar && v<methTypeVarLength; v++) {", "-\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(methodTypeVariables[v].sourceName, paramTypesChars[p])) {", "-\t\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\t\tfor (int v=0; v<methTypeVarLength; v++) {", "+\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(methodTypeVariables[v].sourceName, parameterTypes[p])) {", "+\t\t\t\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\tif (!foundVar) found = false;", "+\t\t\t\t\t\t\tif (!found) break;", "-\t\t\t\t\tthis.bindings.put(method, methods[i]);", "+\t\t\t\t\tthis.bindings.put(methodPattern, methods[i]);", "-//\t\t\tmethodBinding = referenceBinding.getExactMethod(method.getElementName().toCharArray(), parameters);", "-//\t\t\tthis.bindings.put(method, methodBinding);", "-//\t\t\treturn methodBinding;", "-\tthis.bindings.put(method, new ProblemMethodBinding(method.getElementName().toCharArray(), null, ProblemReasons.NotFound));", "+\tthis.bindings.put(methodPattern, new ProblemMethodBinding(methodPattern.selector, null, ProblemReasons.NotFound));"]}], "num": 20768}
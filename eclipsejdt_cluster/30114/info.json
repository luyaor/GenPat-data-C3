{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4ae7270091c1882a33b3633c6820c08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6918f92cac60ccad2fbb339025a49f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "signatureAfterChange": " \tpublic void testBatchCompilerNoWarning() throws IOException", "diff": ["-\tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException {", "-\t\t// Do no longer print results in performance fingerprint", "-\t\ttagAsSummary(\"Compile>Build>Batch>Src:compiler>Options:DocCommentSupport,None\", Dimension.CPU_TIME, true); // put in fingerprint", "-\t\tFile logsFile = buildUsingBatchCompiler(\"-enableJavadoc -nowarn\");", "-", "-\t\t// Should not get any error", "-\t\tassertTrue(\"No log file\", logsFile.exists());", "-\t\tif (logsFile.length() != 0) {", "-\t\t\tchar[] errors = Util.getFileCharContent(logsFile, null);", "-\t\t\tint length = Math.min(errors.length, 1000);", "-\t\t\tassertTrue(\"Should have NO warning!\\nAlthoug, got following ones:\\n\"+(new String(errors, 0, length)), false);", "+\t */", "+\tpublic void testBatchCompilerNoWarning() throws IOException {", "+\t\ttagAsSummary(\"Compile>Batch>Compiler>No warning\", true); // put in fingerprint", "+\t\tbuildUsingBatchCompiler(\"-nowarn\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a75af022d539c5056251cdc97eac16f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "commitAfterChange": "ab734870d680bdde73d51371df0336cce36fb2b0", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \t \tpublic WhileStatement convert(org.eclipse.jdt.internal.compiler.ast.WhileStatement statement)", "signatureAfterChange": " \t \tpublic WhileStatement convert(org.eclipse.jdt.internal.compiler.ast.WhileStatement statement)", "diff": ["-\t\tif (action != null) {", "-\t\t\twhileStatement.setBody(convert(action));", "-\t\t\tif (!(action instanceof org.eclipse.jdt.internal.compiler.ast.Block)) {", "-\t\t\t\t// set the end position of the for statement on the semi-colon", "-\t\t\t\tretrieveSemiColonPosition(whileStatement);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tEmptyStatement emptyStatement = this.ast.newEmptyStatement();", "+\t\twhileStatement.setBody(convert(action));", "+\t\tif (!(action instanceof org.eclipse.jdt.internal.compiler.ast.Block)) {", "+\t\t\t// set the end position of the for statement on the semi-colon", "-\t\t\tint start = retrieveStartingSemiColonPosition(statement.sourceStart, compilationUnitSource.length);", "-\t\t\tint end = retrieveEndingSemiColonPosition(start, compilationUnitSource.length);", "-\t\t\temptyStatement.setSourceRange(start, end - start + 1);", "-\t\t\twhileStatement.setBody(emptyStatement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f517a8904714ce492520de5fb7fa73b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "commitAfterChange": "ab734870d680bdde73d51371df0336cce36fb2b0", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tpublic DoStatement convert(org.eclipse.jdt.internal.compiler.ast.DoStatement statement)", "signatureAfterChange": " \t \tpublic DoStatement convert(org.eclipse.jdt.internal.compiler.ast.DoStatement statement)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.Statement action = statement.action;", "-\t\tif (action != null) {", "-\t\t\tdoStatement.setBody(convert(statement.action));", "-\t\t} else {", "-\t\t\tEmptyStatement emptyStatement = this.ast.newEmptyStatement();", "-\t\t\tint start = retrieveStartingSemiColonPosition(statement.sourceStart, statement.sourceEnd);", "-\t\t\tint end = retrieveEndingSemiColonPosition(start, statement.sourceEnd);", "-\t\t\temptyStatement.setSourceRange(start, end - start + 1);", "-\t\t\tdoStatement.setBody(emptyStatement);", "-\t\t}", "+\t\tdoStatement.setBody(convert(statement.action));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f81642c33b1571f1c03eea61e2d46717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "commitAfterChange": "ab734870d680bdde73d51371df0336cce36fb2b0", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "signatureAfterChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.Statement action = statement.action;", "-\t\tif (action != null) {", "-\t\t\tforStatement.setBody(convert(statement.action));", "-\t\t} else {", "-\t\t\tEmptyStatement emptyStatement = this.ast.newEmptyStatement();", "-\t\t\tint start = retrieveStartingSemiColonPosition(statement.sourceStart, compilationUnitSource.length);", "-\t\t\tint end = retrieveEndingSemiColonPosition(start, compilationUnitSource.length);", "-\t\t\temptyStatement.setSourceRange(start, end - start + 1);", "-\t\t\tforStatement.setBody(emptyStatement);", "-\t\t}", "+\t\tforStatement.setBody(convert(statement.action));"]}], "num": 30114}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d237d515d6d2b74cdf3ab1469b97ef9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "051bba658f6e3e6a83240b3a5865e7c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprotected Scanner getScanner()", "signatureAfterChange": " \tprotected void getMethodBodies(CompilationUnitDeclaration unit, int place)", "diff": ["-", "-\tprotected Scanner getScanner() {", "-\t\treturn this.parser == null ? null : this.parser.scanner;", "+\t}", "+\tprotected void getMethodBodies(CompilationUnitDeclaration unit, int place) {", "+\t\t//fill the methods bodies in order for the code to be generated", "+\t\tif (unit.ignoreMethodBodies) {", "+\t\t\tunit.ignoreFurtherInvestigation = true;", "+\t\t\treturn;", "+\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "+\t\t}", "+", "+\t\tif (place < parseThreshold)", "+\t\t\treturn; //work already done ...", "+", "+\t\t//real parse of the method....", "+\t\tthis.parser.scanner.setSource(unit.compilationResult.compilationUnit.getContents());", "+\t\tthis.parser.parseBodies(unit);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c94a9e5041c8f35f9e7e39f67aea335", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void getMethodBodies(CompilationUnitDeclaration unit, int place)", "signatureAfterChange": " protected void getMethodBodies(CompilationUnitDeclaration unit, MatchingNodeSet matchingNodeSet)", "diff": ["-\t}", "-\tprotected void getMethodBodies(CompilationUnitDeclaration unit, int place) {", "-\t\t//fill the methods bodies in order for the code to be generated", "-", "-\t\tif (unit.ignoreMethodBodies) {", "-\t\t\tunit.ignoreFurtherInvestigation = true;", "-\t\t\treturn;", "-\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "-\t\t}", "-", "-\t\tif (place < parseThreshold)", "-\t\t\treturn; //work already done ...", "-", "-\t\t//real parse of the method....", "-\t\tthis.parser.scanner.setSource(unit.compilationResult.compilationUnit.getContents());", "-\t\tthis.parser.parseBodies(unit);", "-\t}", "+}", "+protected void getMethodBodies(CompilationUnitDeclaration unit, MatchingNodeSet matchingNodeSet) {", "+\tif (unit.ignoreMethodBodies) {", "+\t\tunit.ignoreFurtherInvestigation = true;", "+\t\treturn; // if initial diet parse did not work, no need to dig into method bodies.", "+\t}", "+", "+\ttry {", "+\t\tthis.parser.scanner.setSource(unit.compilationResult.compilationUnit.getContents());", "+\t\tthis.parser.matchSet = matchingNodeSet;", "+\t\tthis.parser.parseBodies(unit);", "+\t} finally {", "+\t\tthis.parser.matchSet = null;", "+\t}", "+}"]}], "num": 63121}
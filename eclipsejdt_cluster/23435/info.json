{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d00e8fbb3095b36929f4bf8e6307ffde", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4559517ff211237ccd19b544da7f879", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "5f24b77df8c988e32ccc28fe3aeb291db1631306", "commitAfterChange": "af85fd47bc376f76c0f4a41c13693956408c1a01", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void finalizeProblems()", "signatureAfterChange": "  public void finalizeProblems()", "diff": ["-\tif (this.suppressWarningsCount == 0) {", "-\t\tif (this.compilationResult.hasErrors()) {", "-\t\t\t// we need to check if we should discard unused locals warnings (336648)", "-\t\t\tint removed = 0;", "-\t\t\tCategorizedProblem[] problems = this.compilationResult.problems;", "-\t\t\tint problemCount = this.compilationResult.problemCount;", "-\t\t\tfor (int i = 0; i < problemCount; i++) {", "-\t\t\t\tCategorizedProblem currentProblem = problems[i];", "-\t\t\t\tif (currentProblem.getID() == IProblem.LocalVariableIsNeverUsed", "-\t\t\t\t\t\t&& currentProblem.isWarning()) {", "-\t\t\t\t\tproblems[i] = null;", "-\t\t\t\t\tremoved++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// compact remaining problems", "-\t\t\tif (removed > 0) {", "-\t\t\t\tfor (int i = 0, index = 0; i < problemCount; i++) {", "-\t\t\t\t\tCategorizedProblem problem;", "-\t\t\t\t\tif ((problem = problems[i]) != null) {", "-\t\t\t\t\t\tif (i > index) {", "-\t\t\t\t\t\t\tproblems[index++] = problem;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tthis.compilationResult.problemCount -= removed;", "-\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "+\tif (this.suppressWarningsCount == 0) return;", "-\tint remainingErrors = 0;", "-\t\tboolean isError = problem.isError();", "-\t\tif (isError) {", "+\t\tif (problem.isError()) {", "-\t\t\t\tremainingErrors++;", "-\t\t\t\tremainingErrors++;", "-\t\t\tif (start < startSuppress) {", "+\t\t\tif (start < startSuppress) continue nextSuppress;", "+\t\t\tif (end > endSuppress) continue nextSuppress;", "+\t\t\tif (!this.suppressWarningIrritants[iSuppress].isSet(irritant))", "-\t\t\t}", "-\t\t\tif (end > endSuppress) {", "-\t\t\t\tcontinue nextSuppress;", "-\t\t\t}", "-\t\t\tif (!this.suppressWarningIrritants[iSuppress].isSet(irritant)) {", "-\t\t\t\tcontinue nextSuppress;", "-\t\t\t}", "-\t\t\tif (isError) {", "-\t\t\t\tthis.compilationResult.numberOfErrors--;", "-\t\t\t}", "-\t\t}", "-\t\tif (isError) {", "-\t\t\tremainingErrors++;", "-\t\t}", "-\t}", "-\t// we need to check if we should discard unused locals warnings that were not already filtered out (336648)", "-\tif (remainingErrors > 0) {", "-\t\tfor (int i = 0; i < problemCount; i++) {", "-\t\t\tCategorizedProblem problem;", "-\t\t\tif ((problem = problems[i]) != null", "-\t\t\t\t\t&& problem.getID() == IProblem.LocalVariableIsNeverUsed", "-\t\t\t\t\t&& problem.isWarning()) {", "-\t\t\t\tproblems[i] = null;", "-\t\t\t\tremoved++;", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2683052ca902b1314b8e9247d14b6bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "a1ad7ed237b99cea40e4be02872fbc81f27fd996", "commitAfterChange": "039d36406bcab8d55430422b8fa21e6430ca432b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void finalizeProblems()", "signatureAfterChange": "  public void finalizeProblems()", "diff": ["-\tif (this.suppressWarningsCount == 0) return;", "+\tif (this.suppressWarningsCount == 0) {", "+\t\tif (this.compilationResult.hasErrors()) {", "+\t\t\t// we need to check if we should discard unused locals warnings (336648)", "+\t\t\tint removed = 0;", "+\t\t\tCategorizedProblem[] problems = this.compilationResult.problems;", "+\t\t\tint problemCount = this.compilationResult.problemCount;", "+\t\t\tfor (int i = 0; i < problemCount; i++) {", "+\t\t\t\tif (problems[i].getID() == IProblem.LocalVariableIsNeverUsed) {", "+\t\t\t\t\tproblems[i] = null;", "+\t\t\t\t\tremoved++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// compact remaining problems", "+\t\t\tif (removed > 0) {", "+\t\t\t\tfor (int i = 0, index = 0; i < problemCount; i++) {", "+\t\t\t\t\tCategorizedProblem problem;", "+\t\t\t\t\tif ((problem = problems[i]) != null) {", "+\t\t\t\t\t\tif (i > index) {", "+\t\t\t\t\t\t\tproblems[index++] = problem;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.compilationResult.problemCount -= removed;", "+\t\t\t}", "+\t\t}", "+\t\treturn;", "+\t}", "+\tint remainingErrors = 0;", "-\t\tif (problem.isError()) {", "+\t\tboolean isError = problem.isError();", "+\t\tif (isError) {", "+\t\t\t\tremainingErrors++;", "+\t\t\t\tremainingErrors++;", "-\t\t\tif (start < startSuppress) continue nextSuppress;", "-\t\t\tif (end > endSuppress) continue nextSuppress;", "-\t\t\tif (!this.suppressWarningIrritants[iSuppress].isSet(irritant))", "+\t\t\tif (start < startSuppress) {", "+\t\t\t}", "+\t\t\tif (end > endSuppress) {", "+\t\t\t\tcontinue nextSuppress;", "+\t\t\t}", "+\t\t\tif (!this.suppressWarningIrritants[iSuppress].isSet(irritant)) {", "+\t\t\t\tcontinue nextSuppress;", "+\t\t\t}", "+\t\t\tif (isError) {", "+\t\t\t\tthis.compilationResult.numberOfErrors--;", "+\t\t\t}", "+\t\tif (isError) {", "+\t\t\tremainingErrors++;", "+\t\t}", "+\t}", "+\t// we need to check if we should discard unused locals warnings that were not already filtered out (336648)", "+\tif (remainingErrors > 0) {", "+\t\tfor (int i = 0; i < problemCount; i++) {", "+\t\t\tCategorizedProblem problem;", "+\t\t\tif ((problem = problems[i]) != null && problem.getID() == IProblem.LocalVariableIsNeverUsed) {", "+\t\t\t\tproblems[i] = null;", "+\t\t\t\tremoved++;", "+\t\t\t}", "+\t\t}"]}], "num": 23435}
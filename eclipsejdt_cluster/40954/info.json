{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e459d47a0046b0394a997f1685e4ceb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1387f729f978175934fa76556b05752f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "\t \tpublic void test098()", "signatureAfterChange": "\t \tpublic void test098()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tAX ax = new AX();\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tAX ax = new AX();\\n\" + ", "+\t\t\t\"\t            ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tAX ax2 = ax.p;\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16db4277dc0bd0a57f96754962f4c83c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3639dc175801e2c9b679b76a5a58c78d31a121fb", "commitAfterChange": "d376f3738e131d90e211985a40fdbdae44710f60", "methodNumberBeforeChange": 1005, "methodNumberAfterChange": 1005, "signatureBeforeChange": " public void test0996()", "signatureAfterChange": " public void test0996()", "diff": ["-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"  /**\\n\" + ", "-\t\t\t\t\"   * @param pArgs\\n\" + ", "-\t\t\t\t\"   */\\n\" + ", "-\t\t\t\t\"    final List<X<?>> l2 = castList(l1, X.class);\\n\" + ", "-\t\t\t\t\"    System.exit(0);\\n\" + ", "+\t\t\t\t\"    final List<X<?>> l2 = castList(l1, List.class);\\n\" + ", "+\t\t\t\t\"    \\n\" + ", "+\t\t\t\t\"    List<X> l3 = l2;\\n\" + ", "+\t\t\t\t\"    List<X<String>> l4 = null;\\n\" + ", "+\t\t\t\t\"    l3 = l4;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 25)\\n\" + ", "-\t\t\t\"\tfinal List<X<?>> l2 = castList(l1, X.class);\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from List<X> to List<X<?>>\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tfinal List<X<?>> l2 = castList(l1, List.class);\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<List> to List<X<?>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tList<X> l3 = l2;\\n\" + ", "+\t\t\t\"\t     ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tList<X> l3 = l2;\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<X<?>> to List<X>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tl3 = l4;\\n\" + ", "+\t\t\t\"\t     ^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<X<String>> to List<X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1818f7727f2c4aeff3d5cb6989072b50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": " \tpublic void test447()", "signatureAfterChange": " \tpublic void test447()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX.Inner d2 = new X.Inner();\\n\" + ", "+\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX.Inner d2 = new X.Inner();\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187cdbfc0969f890450a7171d1ba78ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "fc25b1b826e7fad7f1da04ab9d452bc350b24919", "commitAfterChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["+        \" Null annotation options:\\n\" +", "+\t\t\"    -nullAnnotations:<suboptions>\\n\" +", "+\t\t\"                      enable use of annotations for specifying null contracts;\\n\" +", "+\t\t\"                      <suboptions> is a non-empty, comma-separated list of:\\n\" +", "+\t\t\"        nullable=<typename>\\n\" +", "+\t\t\"                      specifies the fully qualified name of an annotation type\\n\" +", "+\t\t\"                      to be used for marking types whose values include null\\n\" +", "+\t\t\"        nonnull=<typename>\\n\" +", "+\t\t\"                      specifies the fully qualified name of an annotation type\\n\" +", "+\t\t\"                      to be used for marking types whose values cannot be null\\n\" +", "+\t\t\"        emulate       tells the compiler to emulate the above annotation types\\n\" +", "+\t\t\"                      although they do not exist on the classpath\\n\" +", "+\t\t\"        import        tells the compiler to import the above annotation types\\n\" +", "+\t\t\"                      without specific mention in the sources such that their\\n\" +", "+\t\t\"                      simple names can be used without explicit imports\\n\" +", "+\t\t\" \\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd4b8cd2842475538716ba5eaeb3a35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["-\t\t\t\t\"    46  goto 56\\n\" + ", "+\t\t\t\t\"    46  goto 61\\n\" + ", "-\t\t\t\t\"    58  dload_3 [i]\\n\" + ", "-\t\t\t\t\"    59  dconst_1\\n\" + ", "-\t\t\t\t\"    60  dadd\\n\" + ", "-\t\t\t\t\"    61  d2l\\n\" + ", "-\t\t\t\t\"    62  lstore 5 [j]\\n\" + ", "-\t\t\t\t\"    64  lload 5 [j]\\n\" + ", "-\t\t\t\t\"    66  l2i\\n\" + ", "-\t\t\t\t\"    67  istore 7 [k]\\n\" + ", "-\t\t\t\t\"    69  iload 7 [k]\\n\" + ", "-\t\t\t\t\"    71  i2l\\n\" + ", "-\t\t\t\t\"    72  lload 5 [j]\\n\" + ", "-\t\t\t\t\"    74  ladd\\n\" + ", "-\t\t\t\t\"    75  l2i\\n\" + ", "-\t\t\t\t\"    76  istore 7 [k]\\n\" + ", "-\t\t\t\t\"    78  return\\n\" + ", "+\t\t\t\t\"    58  goto 63\\n\" + ", "+\t\t\t\t\"    61  dconst_1\\n\" + ", "+\t\t\t\t\"    62  dstore_3 [i]\\n\" + ", "+\t\t\t\t\"    63  dload_3 [i]\\n\" + ", "+\t\t\t\t\"    64  dconst_1\\n\" + ", "+\t\t\t\t\"    65  dadd\\n\" + ", "+\t\t\t\t\"    66  d2l\\n\" + ", "+\t\t\t\t\"    67  lstore 5 [j]\\n\" + ", "+\t\t\t\t\"    69  lload 5 [j]\\n\" + ", "+\t\t\t\t\"    71  l2i\\n\" + ", "+\t\t\t\t\"    72  istore 7 [k]\\n\" + ", "+\t\t\t\t\"    74  iload 7 [k]\\n\" + ", "+\t\t\t\t\"    76  i2l\\n\" + ", "+\t\t\t\t\"    77  lload 5 [j]\\n\" + ", "+\t\t\t\t\"    79  ladd\\n\" + ", "+\t\t\t\t\"    80  l2i\\n\" + ", "+\t\t\t\t\"    81  istore 7 [k]\\n\" + ", "+\t\t\t\t\"    83  return\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 40] -> 40 when : java.lang.NullPointerException\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 37] -> 40 when : java.lang.NullPointerException\\n\" + ", "-\t\t\t\t\"        [pc: 58, line: 21]\\n\" + ", "-\t\t\t\t\"        [pc: 64, line: 22]\\n\" + ", "-\t\t\t\t\"        [pc: 69, line: 23]\\n\" + ", "-\t\t\t\t\"        [pc: 78, line: 24]\\n\" + ", "+\t\t\t\t\"        [pc: 61, line: 18]\\n\" + ", "+\t\t\t\t\"        [pc: 63, line: 21]\\n\" + ", "+\t\t\t\t\"        [pc: 69, line: 22]\\n\" + ", "+\t\t\t\t\"        [pc: 74, line: 23]\\n\" + ", "+\t\t\t\t\"        [pc: 83, line: 24]\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 79] local: d index: 0 type: double\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 79] local: b index: 2 type: boolean\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 84] local: d index: 0 type: double\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 84] local: b index: 2 type: boolean\\n\" + ", "-\t\t\t\t\"        [pc: 53, pc: 56] local: i index: 3 type: double\\n\" + ", "-\t\t\t\t\"        [pc: 58, pc: 79] local: i index: 3 type: double\\n\" + ", "+\t\t\t\t\"        [pc: 53, pc: 61] local: i index: 3 type: double\\n\" + ", "+\t\t\t\t\"        [pc: 63, pc: 84] local: i index: 3 type: double\\n\" + ", "-\t\t\t\t\"        [pc: 64, pc: 79] local: j index: 5 type: long\\n\" + ", "-\t\t\t\t\"        [pc: 69, pc: 79] local: k index: 7 type: int\\n\" + ", "-\t\t\t\t\"      Stack map table: number of frames 5\\n\" + ", "+\t\t\t\t\"        [pc: 69, pc: 84] local: j index: 5 type: long\\n\" + ", "+\t\t\t\t\"        [pc: 74, pc: 84] local: k index: 7 type: int\\n\" + ", "+\t\t\t\t\"      Stack map table: number of frames 7\\n\" + ", "-\t\t\t\t\"        [pc: 56, append: {double}]\\n\";", "+\t\t\t\t\"        [pc: 56, append: {double}]\\n\" + ", "+\t\t\t\t\"        [pc: 61, chop 1 local(s)]\\n\" + ", "+\t\t\t\t\"        [pc: 63, append: {double}]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43ca8a8cd1c9e41fd45e1cc52ba2e181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \" Ignored options:\\n\" + ", "-        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "-        \"    -X<option>         specify non-standard option (ignored\\n\" + ", "-        \"                       except for -Xemacs)\\n\" + ", "-        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "-        \"    -O                 optimize for execution time (ignored)\\n\" + ", "+        \" Annotation processing options:\\n\" + ", "+        \"   These options are meaningful only in a 1.6 environment.\\n\" + ", "+        \"    -Akey[=value]        annotation processors options that are made to\\n\" + ", "+        \"                         annotation processors. key are identifiers separated\\n\" + ", "+        \"                         by ..\\n\" + ", "+        \"    -processorpath <directories and zip/jar files separated by ;>\\n\" + ", "+        \"                         specify locations where to find annotation processors\\n\" + ", "+        \"                         If this option is not used, the classpath will be\\n\" + ", "+        \"                         searched for processors.\\n\" + ", "+        \"    -processor <class1[,class2,...]>\\n\" + ", "+        \"                         Qualified names of the annotation processors to run.\\n\" + ", "+        \"                         This bypasses the default annotation discovery process\\n\" + ", "+        \"    -proc:only           run annotation processors, but do not compile\\n\" + ", "+        \"    -proc:none           perform compilation but do not run annotation\\n\" + ", "+        \"                         processors\\n\" + ", "+        \"    -s <dir>             specify a directory where to put the generated source\\n\" + ", "+        \"                         files\\n\" + ", "+        \"    -XprintProcessorInfo print information about which annotations and which\\n\" + ", "+        \"                         elements a processor is asked to process\\n\" + ", "+        \"    -XprintRounds        print information about annotation processing rounds.\\n\" + ", "+        \" \\n\" + ", "+        \" Ignored options:\\n\" + ", "+        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "+        \"    -X<option>         specify non-standard option (ignored\\n\" + ", "+        \"                       except for listed -X options)\\n\" + ", "+        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "+        \"    -O                 optimize for execution time (ignored)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53af9f44bec6e3f3e6f2133504d4d99a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 921, "methodNumberAfterChange": 921, "signatureBeforeChange": " public void test0914()", "signatureAfterChange": " public void test0914()", "diff": ["-\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<Collection[]> lc1 = null;\\n\" + ", "+\t\t\"\t     ^^^^^^^^^^\\n\" + ", "+\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tList<? super Collection[]> lc4 = null;\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^\\n\" + ", "+\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"8. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\"9. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\"8. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\"10. ERROR in X.java (at line 19)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b490106b428f4ece2b2bd71af9ce950", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 196, "methodNumberAfterChange": 196, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"1. ERROR in Errors.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in Errors.java (at line 5)\\n\" + ", "+\t\t\t\"\tex.five(\\\"eclipse\\\");\\n\" + ", "+\t\t\t\"\t   ^^^^\\n\" + ", "+\t\t\t\"The method five(String) is ambiguous for the type Ex<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Errors.java (at line 6)\\n\" + ", "-\t\t\t\"2. WARNING in Errors.java (at line 7)\\n\" + ", "+\t\t\t\"3. WARNING in Errors.java (at line 7)\\n\" + ", "-\t\t\t\"3. WARNING in Errors.java (at line 9)\\n\" + ", "+\t\t\t\"4. ERROR in Errors.java (at line 9)\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method five(Object) belongs to the raw type Ex. References to generic type Ex<C> should be parameterized\\n\" + ", "+\t\t\t\"\t    ^^^^\\n\" + ", "+\t\t\t\"The method five(Object) is ambiguous for the type Ex\\n\" + ", "-\t\t\t\"4. ERROR in Errors.java (at line 10)\\n\" + ", "+\t\t\t\"5. ERROR in Errors.java (at line 10)\\n\" + ", "-\t\t\t\"5. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"6. ERROR in Errors.java (at line 20)\\n\" + ", "+\t\t\t\"\t@Override void five(C cEx) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method five(C) of type Ex<C> has the same erasure as five(TC) of type Top<TC> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in Errors.java (at line 20)\\n\" + ", "+\t\t\t\"\t@Override void five(C cEx) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\tmustOverrideMessage(\"five(C)\", \"Ex<C>\") + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t\"6. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"9. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t// we disagree about the ambiguous errors on lines 5, 9 & 20, see the message sends to proof()", "-\t\t\t// 9: warning: [unchecked] unchecked call to <TM>five(TC) as a member of the raw type Top", "+\t\t\t// **** 9: warning: [unchecked] unchecked call to <TM>five(TC) as a member of the raw type Top", "-\t\t\t// 10: warning: [unchecked] unchecked call to six(TC) as a member of the raw type Top", "+\t\t\t// **** 10: warning: [unchecked] unchecked call to six(TC) as a member of the raw type Top"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "972a32e4957795e615f068c9be6fb1da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 537, "methodNumberAfterChange": 537, "signatureBeforeChange": " \tpublic void test533()", "signatureAfterChange": " \tpublic void test533()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tClass c = Foo.class;\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<Enum> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t        ^^^^\\n\" + ", "+\t\t\t\"Type safety: Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<Enum> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t                     ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ff75e93de09789c19d5656305eafb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "3883b7541738126367cb07b1070bef67542d7472", "commitAfterChange": "4b1db0d2e4815773f45b505f90ea79c3b012c46c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void setUpSuite() throws Exception", "signatureAfterChange": " public void setUpSuite() throws Exception", "diff": ["+\t\t\"  @Deprecated\\n\" +", "+\t\t\"  int f8;\\n\" +", "+\t\t\"  @Deprecated\\n\" +", "+\t\t\"  private void fred2() {\\n\" +", "+\t\t\"  }\\n\" +", "+\t\t\"}\\n\" +", "+\t\t\"@Deprecated\\n\" +", "+\t\t\"interface I3 {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b312c70a8f6f74826fef1bbbccd6b123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " \tpublic void test050b()", "signatureAfterChange": " \tpublic void test050b()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\t\t\t\"\t\t<T extends Y> T foo(Object o) {  return null; } // ok\\n\" +", "-\t\t\t\t\"\t\t<T extends Z> T foo(Object o) {  return null; } // ok\\n\" +", "+\t\t\t\t\"\t\t<T extends Y> T foo(Object o) {  return null; } // duplicate\\n\" +", "+\t\t\t\t\"\t\t<T extends Z> T foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\t\"class A<T> {}\" +", "-\t\t\t\t\"class Y {}\" +", "+\t\t\t\t\"class A<T> {}\\n\" +", "+\t\t\t\t\"class Y {}\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\tY foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\tZ foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 11)\\n\" +", "-\t\t\t\"\tA<Y> foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C3\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 12)\\n\" +", "-\t\t\t\"\tA<Z> foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C3\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 15)\\n\" +", "-\t\t\t\"\tY foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C4\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 16)\\n\" +", "-\t\t\t\"\t<T extends Z> T foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C4\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tY foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C1\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tZ foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C1\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t<T extends Y> T foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\t<T extends Z> T foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tA<Y> foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C3\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tA<Z> foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C3\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tY foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C4\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\t<T extends Z> T foo(Object o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(Object) in type X.C4\\n\" + ", "-\t\t\t// foo(java.lang.Object) is already defined in X.C1", "-\t\t\t// foo(java.lang.Object) is already defined in X.C3", "-\t\t\t// foo(java.lang.Object) is already defined in X.C4", "+/* javac 7", "+X.java:4: foo(Object) is already defined in X.C1", "+                Z foo(Object o) {  return null; } // duplicate", "+                  ^", "+X.java:8: name clash: <T#1>foo(Object) and <T#2>foo(Object) have the same erasure", "+                <T extends Z> T foo(Object o) {  return null; } // duplicate", "+                                ^", "+  where T#1,T#2 are type-variables:", "+    T#1 extends Z declared in method <T#1>foo(Object)", "+    T#2 extends Y declared in method <T#2>foo(Object)", "+X.java:12: foo(Object) is already defined in X.C3", "+                A<Z> foo(Object o) {  return null; } // duplicate", "+                     ^", "+X.java:16: foo(Object) is already defined in X.C4", "+                <T extends Z> T foo(Object o) {  return null; } // duplicate", "+                                ^", "+4 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3f11c0039f3ab433a5182a191c4a327", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 805, "methodNumberAfterChange": 805, "signatureBeforeChange": " public void test799()", "signatureAfterChange": " public void test799()", "diff": ["-\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"\tY first;\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Type safety: Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tY first2;\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Type safety: Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 18)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61a9b4301df9d982ac8eaae7c9621fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "9f0162708ef3ad281e157ce3ba268bca0e9b1dde", "commitAfterChange": "a291a37a897de20cd8c895370c415618ede4cf7f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\"1. ERROR in p\\\\X.java (at line 3)\\n\" + ", "-\t\t\t\"\timport static p2.Z.Zint;\\n\" + ", "+\t\t\t\"1. WARNING in p\\\\X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\timport static p2.Y.*;\\r\\n\" + ", "+\t\t\t\"\t              ^^^^\\n\" + ", "+\t\t\t\"The import p2.Y is never used\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in p\\\\X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\timport static p2.Z.Zint;\\r\\n\" + ", "-\t\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\t\"\timport static p2.Z.ZMember;\\n\" + ", "+\t\t\t\"3. ERROR in p\\\\X.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\timport static p2.Z.ZMember;\\r\\n\" + ", "-\t\t\t\"3. ERROR in p\\\\X.java (at line 6)\\n\" + ", "-\t\t\t\"\tint x = y(1);\\n\" + ", "+\t\t\t\"4. ERROR in p\\\\X.java (at line 6)\\r\\n\" + ", "+\t\t\t\"\tint x = y(1);\\r\\n\" + ", "-\t\t\t\"4. ERROR in p\\\\X.java (at line 7)\\n\" + ", "-\t\t\t\"\tint y = Yint;\\n\" + ", "+\t\t\t\"5. ERROR in p\\\\X.java (at line 7)\\r\\n\" + ", "+\t\t\t\"\tint y = Yint;\\r\\n\" + ", "-\t\t\t\"5. ERROR in p\\\\X.java (at line 8)\\n\" + ", "-\t\t\t\"\tint z = Zint;\\n\" + ", "+\t\t\t\"6. ERROR in p\\\\X.java (at line 8)\\r\\n\" + ", "+\t\t\t\"\tint z = Zint;\\r\\n\" + ", "-\t\t\t\"6. ERROR in p\\\\X.java (at line 10)\\n\" + ", "-\t\t\t\"\tvoid m2(ZMember m) {}\\n\" + ", "+\t\t\t\"7. ERROR in p\\\\X.java (at line 9)\\r\\n\" + ", "+\t\t\t\"\tvoid m1(YMember m) {}\\r\\n\" + ", "+\t\t\t\"\t        ^^^^^^^\\n\" + ", "+\t\t\t\"YMember cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in p\\\\X.java (at line 10)\\r\\n\" + ", "+\t\t\t\"\tvoid m2(ZMember m) {}\\r\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf111a82704e5d73ebc36f811842c2c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodHandleTest.java", "commitBeforeChange": "51213023943da7653dfbcc6859baaa171fa1aac9", "commitAfterChange": "dc6be4d1880713315c6901a8e8e763dd417a08df", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t}", "-\tpublic void test008() {", "-\t\tMap options = getCompilerOptions();", "-\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION, JavaCore.ERROR);", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.lang.invoke.MethodHandle;\\n\" + ", "-\t\t\t\t\"import java.lang.invoke.MethodHandles;\\n\" + ", "-\t\t\t\t\"import java.lang.invoke.MethodType;\\n\" + ", "-\t\t\t\t\"import java.lang.invoke.WrongMethodTypeException;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tpublic static <T> T foo(T param){\\n\" + ", "-\t\t\t\t\"\t\treturn null;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\ttry {\\n\" + ", "-\t\t\t\t\"\t\t\tMethodHandle handle = MethodHandles.lookup().findStatic(X.class, \\\"foo\\\", MethodType.methodType(Object.class, Object.class));\\n\" + ", "-\t\t\t\t\"\t\t\ttry {\\n\" + ", "-\t\t\t\t\"\t\t\t\tObject o = handle.invokeGeneric(new Object());\\n\" + ", "-\t\t\t\t\"\t\t\t} catch (Throwable e) {\\n\" + ", "-\t\t\t\t\"\t\t\t\te.printStackTrace();\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "-\t\t\t\t\"\t\t} catch (Throwable e) {\\n\" + ", "-\t\t\t\t\"\t\t\te.printStackTrace();\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tObject o = handle.invokeGeneric(new Object());\\n\" + ", "-\t\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method invokeGeneric(Object...) from the type MethodHandle is deprecated\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\ttrue,", "-\t\t\toptions);", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=466748", "+\tpublic void test011() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.lang.invoke.MethodHandle;\\n\" + ", "+\t\t\t\t\"import java.lang.invoke.MethodHandles;\\n\" + ", "+\t\t\t\t\"import java.lang.reflect.Method;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tpublic static void test1(Integer i){\\n\" + ", "+\t\t\t\t\"\t\tSystem.out.println(\\\"test1:\\\" + i);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic static void test2(int i){\\n\" + ", "+\t\t\t\t\"\t\tSystem.out.println(\\\"test2:\\\" + i);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) throws Throwable{\\n\" + ", "+\t\t\t\t\"\t\tMethod m1 = X.class.getMethod(\\\"test1\\\", Integer.class);\\n\" + ", "+\t\t\t\t\"\t\tMethod m2 = X.class.getMethod(\\\"test2\\\", int.class);\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"\t\tMethodHandle test1Handle = MethodHandles.lookup().unreflect(m1);\\n\" + ", "+\t\t\t\t\"\t\tMethodHandle test2Handle = MethodHandles.lookup().unreflect(m2);\\n\" + ", "+\t\t\t\t\"\t\t\\n\" + ", "+\t\t\t\t\"\t\tInteger arg_Integer = 1;\\n\" + ", "+\t\t\t\t\"\t\tint arg_int = 1;\\n\" + ", "+\t\t\t\t\"\t\t\\n\" + ", "+\t\t\t\t\"\t\t// results in a java.lang.VerifyError - but should work without error\\n\" + ", "+\t\t\t\t\"\t\ttest1Handle.invokeExact(Integer.class.cast(arg_int));\\n\" + ", "+\t\t\t\t\"\t\t\\n\" + ", "+\t\t\t\t\"\t\t// The following line also results in a java.lang.VerifyError, but should actually throw a ClassCastException\\n\" + ", "+\t\t\t\t\"\t\ttry {\\n\" + ", "+\t\t\t\t\"\t\t\ttest2Handle.invokeExact(int.class.cast(arg_Integer)); \\n\" + ", "+\t\t\t\t\"\t\t} catch(ClassCastException e) {\\n\" + ", "+\t\t\t\t\"\t\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"test1:1\\n\" + ", "+\t\t\t\"SUCCESS\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6395a239a903d8b861bec9e0512c57a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/LambdaExpressionSyntaxTest.java", "commitBeforeChange": "8af48aa5660e72584abef914d9f2b32173f50c99", "commitAfterChange": "3f60c9b8b6041548c5cf76290845b4be1c2aa43b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test0018() throws IOException", "signatureAfterChange": " \tpublic void test0018() throws IOException", "diff": ["-\t// Reference expression - super:: form, without type arguments. ", "-\tpublic void test0018() throws IOException {", "-\t\tString source = ", "-\t\t\t\t\"interface I {\\n\" +", "-\t\t\t\t\"    void foo(int x);\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"public class X extends Y {\\n\" +", "-\t\t\t\t\"    public static void main(String [] args) {\\n\" +", "-\t\t\t\t\"\tnew X().doit();\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"    void doit() {\\n\" +", "-\t\t\t\t\"        I i = super::foo;\\n\" +", "-\t\t\t\t\"        i.foo(10); \\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y {\\n\" +", "-\t\t\t\t\"    public void foo(int x) {\\n\" +", "-\t\t\t\t\"\tSystem.out.println(x);\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\tString expectedUnitToString = ", "-\t\t\t\t\"interface I {\\n\" + ", "-\t\t\t\t\"  void foo(int x);\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"  public X() {\\n\" + ", "-\t\t\t\t\"    super();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"    new X().doit();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  void doit() {\\n\" + ", "-\t\t\t\t\"    I i = super::foo;\\n\" + ", "-\t\t\t\t\"    i.foo(10);\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class Y {\\n\" + ", "-\t\t\t\t\"  Y() {\\n\" + ", "-\t\t\t\t\"    super();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  public void foo(int x) {\\n\" + ", "-\t\t\t\t\"    System.out.println(x);\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\";", "-\t\tcheckParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), null, \"test0018\", expectedUnitToString);", "-\t}", "+\tpublic void test0018() throws IOException {", "+\t\t\t\t\"  J j1 = () -> 0;\\n\" + ", "+\t\tcheckParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), null, \"test0018\", expectedUnitToString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d665a964a2b5f4bc31ef58e35693cefd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 920, "methodNumberAfterChange": 920, "signatureBeforeChange": " public void test0913()", "signatureAfterChange": " public void test0913()", "diff": ["-\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<Collection[]> lc1 = null;\\n\" + ", "+\t\t\"\t     ^^^^^^^^^^\\n\" + ", "+\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tList<? extends Collection[]> lc4 = null;\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^\\n\" + ", "+\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"8. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"9. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"8. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\"10. ERROR in X.java (at line 16)\\n\" + "]}], "num": 40954}
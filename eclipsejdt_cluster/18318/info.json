{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b6e679f310bba5a91b02f47dccab918", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b806b570393485d158e7f18912606e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 238, "signatureBeforeChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "signatureAfterChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "diff": ["-\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, false);", "-\t\t\t\tString parameterTypeNames = typesAsString(method.isVarargs(), method.parameters, false);", "-\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, true);", "-\t\t\t\tString parameterTypeShortNames = typesAsString(method.isVarargs(), method.parameters, true);", "+\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch, false);", "+\t\t\t\tString parameterTypeNames = typesAsString(method, false);", "+\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch, true);", "+\t\t\t\tString parameterTypeShortNames = typesAsString(method, true);", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(false, invocationArguments, false),", "+\t\t\t\t        typesAsString(invocationArguments, false),", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(false, invocationArguments, true),", "+\t\t\t\t        typesAsString(invocationArguments, true),", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, false),", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, true),", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\tnew String(method.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String(method.selector), typesAsString(method, false)},", "-\t\t\tnew String(method.selector), typesAsString(method.isVarargs(), method.parameters, true)},", "+\t\t\tnew String(method.selector), typesAsString(method, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77be66d9a0fa6c3cf85090d9c32a4900", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t    Binding binding = scope.getPackage(this.tokens);", "+\t    if (binding != null && !binding.isValidBinding()) {", "+\t    \tthis.resolvedType = (ReferenceBinding) binding;", "+\t\t\treportInvalidType(scope);", "+\t\t\treturn null;", "+\t\t}", "+", "+\t    PackageBinding packageBinding = binding == null ? null : (PackageBinding) binding;", "-\t\tfor (int i = 0, max = this.tokens.length; i < max; i++) {", "-\t\t    ReferenceBinding currentType;", "-\t\t    if (i == 0) {", "-\t\t        // isolate first fragment", "-\t\t\t\twhile (this.typeArguments[i] == null) i++;", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.resolvedType = scope.getType(this.tokens, i+1);", "-\t\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t\te.updateContext(this, scope.referenceCompilationUnit().compilationResult);", "-\t\t\t\t\tthrow e;", "-\t\t\t\t}", "-\t\t\t\tif (!(this.resolvedType.isValidBinding())) {", "-\t\t\t\t\treportInvalidType(scope);", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tcurrentType = (ReferenceBinding) this.resolvedType;", "-\t\t\t\tif (currentType.isMemberType()) { // check raw enclosing type", "-\t\t\t\t    ArrayList enclosingTypes = new ArrayList();", "-\t\t\t\t    boolean hasGenericEnclosing = false;", "-\t\t\t\t    for (ReferenceBinding enclosing = currentType.enclosingType(); enclosing != null; enclosing = enclosing.enclosingType()) {", "-\t\t\t\t        enclosingTypes.add(enclosing);", "-\t\t\t\t        if (enclosing.isGenericType()) hasGenericEnclosing = true;", "-\t\t\t\t    }", "-\t\t\t\t    if (hasGenericEnclosing) {", "-\t\t\t\t        for (int j = enclosingTypes.size() - 1; j >= 0; j--) {", "-\t\t\t\t            ReferenceBinding enclosing = (ReferenceBinding)enclosingTypes.get(j);", "-\t\t\t\t            if (enclosing.isGenericType()) {", "-\t\t\t\t\t            qualifiedType = scope.environment().createRawType(enclosing, qualifiedType); // raw type", "-\t\t\t\t            }", "-\t\t\t\t        }", "-\t\t\t\t    }", "-\t\t\t\t}", "-\t\t    } else {", "-\t\t\t    this.resolvedType = currentType = scope.getMemberType(this.tokens[i], (ReferenceBinding)qualifiedType.erasure());", "-\t\t\t\tif (!(this.resolvedType.isValidBinding())) {", "-\t\t\t\t\treportInvalidType(scope);", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t    }", "-\t\t    // check generic and arity", "+\t\tfor (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {", "+\t\t\tfindNextTypeBinding(i, scope, packageBinding);", "+\t\t\tif (!(this.resolvedType.isValidBinding())) {", "+\t\t\t\treportInvalidType(scope);", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tReferenceBinding currentType = (ReferenceBinding) this.resolvedType;", "+", "+\t\t\t// check generic and arity", "-\t\t\t\t}\t\t\t", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "-\t\t\t\t// check argument type compatibility", "-\t\t\t\tfor (int j = 0; j < argLength; j++) {", "-\t\t\t\t    TypeBinding argType = argTypes[j];", "-\t\t\t\t    if (!typeVariables[j].boundCheck(parameterizedType, argType)) {", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argType, typeVariables[j], currentType, args[j]);", "-\t\t\t\t    }", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "+\t\t\t\t// check argument type compatibility now if not a class scope", "+\t\t\t\tif (!isClassScope) // otherwise will do it in Scope.connectTypeVariables()", "+\t\t\t\t\tfor (int j = 0; j < argLength; j++)", "+\t\t\t\t\t    if (!typeVariables[j].boundCheck(parameterizedType, argTypes[j]))", "+\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[j], typeVariables[j], currentType, args[j]);", "+", "-\t\tif (isTypeUseDeprecated(this.resolvedType, scope)) {", "+\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "-\t\t}\t\t", "-\t\t\tif (dimensions > 255) {", "+\t\t\tif (dimensions > 255)", "-\t\t\t}"]}], "num": 18318}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25b1146e493f85ff63f61a1485153e87", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20e01dd23114aaf5c74dca113343c3eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "c69c700b22ba98a95d56e16f7365ecaf28392cdd", "commitAfterChange": "b7ba07c07da6eba63afdd84d57a7b0c7321ed73b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic char[] genericTypeSignature()", "signatureAfterChange": " \tpublic char[] genericTypeSignature()", "diff": ["-", "-\t    if (this.genericTypeSignature == null) {", "-\t\t    StringBuffer sig = new StringBuffer(10);", "-\t\t\tif (this.isMemberType() && this.enclosingType().isParameterizedType()) {", "-\t\t\t    char[] typeSig = this.enclosingType().genericTypeSignature();", "-\t\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t\t\t    sig.append('.').append(this.sourceName()).append(';');", "+\t\tif (this.genericTypeSignature == null) {", "+\t\t\tif ((this.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0) {", "+\t\t    \tthis.genericTypeSignature = genericType().signature();", "+\t\t\t} else {", "+\t\t\t    StringBuffer sig = new StringBuffer(10);", "+\t\t\t    if (this.isMemberType()) {", "+\t\t\t    \tReferenceBinding enclosing = enclosingType();", "+\t\t\t    \tboolean hasParameterizedEnclosing = enclosing.isParameterizedType();", "+\t\t\t\t\tchar[] typeSig = hasParameterizedEnclosing ? enclosing.genericTypeSignature() : enclosing.signature();", "+\t\t\t\t\tsig.append(typeSig, 0, typeSig.length-1);// copy all but trailing semicolon", "+\t\t\t    \tif (hasParameterizedEnclosing && (enclosing.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "+\t\t\t    \t\tsig.append('.');", "+\t\t\t    \t} else {", "+\t\t\t    \t\tsig.append('$');", "+\t\t\t    \t}", "+\t\t\t    \tsig.append(this.sourceName());", "+\t\t\t    } else {", "+\t\t\t    \tchar[] typeSig = genericType().signature();", "+\t\t\t\t\tsig.append(typeSig, 0, typeSig.length-1);// copy all but trailing semicolon", "+\t\t    \t}", "+\t\t\t\tsig.append(';');", "-\t\t\t\tsig.getChars(0, sigLength, this.genericTypeSignature, 0);\t\t\t\t\t\t    ", "-\t\t\t} else {", "-\t\t\t     this.genericTypeSignature = genericType().signature(); // erasure", "+\t\t\t\tsig.getChars(0, sigLength, this.genericTypeSignature, 0);\t\t\t\t\t\t", "-\t    }", "-\t   return this.genericTypeSignature;", "+\t\t}", "+\t\treturn this.genericTypeSignature;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7767a20f3adf2ad52452778f600b2ab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "c69c700b22ba98a95d56e16f7365ecaf28392cdd", "commitAfterChange": "b7ba07c07da6eba63afdd84d57a7b0c7321ed73b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic char[] genericTypeSignature()", "signatureAfterChange": " \tpublic char[] genericTypeSignature()", "diff": ["-\t    if (this.genericTypeSignature == null) {", "-\t\t    StringBuffer sig = new StringBuffer(10);", "-\t\t\tif (this.isMemberType() && this.enclosingType().isParameterizedType()) {", "-\t\t\t    char[] typeSig = this.enclosingType().genericTypeSignature();", "-\t\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t\t\t    sig.append('.').append(this.sourceName());", "+\t\tif (this.genericTypeSignature == null) {", "+\t\t\tif ((this.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0) {", "+\t\t    \tthis.genericTypeSignature = this.type.signature();", "-\t\t\t    char[] typeSig = this.type.signature();", "-\t\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t\t\t}\t   \t    ", "-\t\t\tif (this.arguments != null) {", "-\t\t\t    sig.append('<');", "-\t\t\t    for (int i = 0, length = this.arguments.length; i < length; i++) {", "-\t\t\t        sig.append(this.arguments[i].genericTypeSignature());", "-\t\t\t    }", "-\t\t\t    sig.append('>');", "+\t\t\t    StringBuffer sig = new StringBuffer(10);", "+\t\t\t    if (this.isMemberType()) {", "+\t\t\t    \tReferenceBinding enclosing = enclosingType();", "+\t\t\t    \tboolean hasParameterizedEnclosing = enclosing.isParameterizedType();", "+\t\t\t\t\tchar[] typeSig = hasParameterizedEnclosing ? enclosing.genericTypeSignature() : enclosing.signature();", "+\t\t\t\t\tsig.append(typeSig, 0, typeSig.length-1);// copy all but trailing semicolon", "+\t\t\t    \tif (hasParameterizedEnclosing && (enclosing.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "+\t\t\t    \t\tsig.append('.');", "+\t\t\t    \t} else {", "+\t\t\t    \t\tsig.append('$');", "+\t\t\t    \t}", "+\t\t\t    \tsig.append(this.sourceName());", "+\t\t\t    } else {", "+\t\t\t    \tchar[] typeSig = this.type.signature();", "+\t\t\t\t\tsig.append(typeSig, 0, typeSig.length-1);// copy all but trailing semicolon", "+\t\t    \t}", "+\t\t\t\tif (this.arguments != null) {", "+\t\t\t\t    sig.append('<');", "+\t\t\t\t    for (int i = 0, length = this.arguments.length; i < length; i++) {", "+\t\t\t\t        sig.append(this.arguments[i].genericTypeSignature());", "+\t\t\t\t    }", "+\t\t\t\t    sig.append('>');", "+\t\t\t\t}", "+\t\t\t\tsig.append(';');", "+\t\t\t\tint sigLength = sig.length();", "+\t\t\t\tthis.genericTypeSignature = new char[sigLength];", "+\t\t\t\tsig.getChars(0, sigLength, this.genericTypeSignature, 0);\t\t\t\t\t\t", "-\t\t\tsig.append(';');", "-\t\t\tint sigLength = sig.length();", "-\t\t\tthis.genericTypeSignature = new char[sigLength];", "-\t\t\tsig.getChars(0, sigLength, this.genericTypeSignature, 0);\t\t\t", "-\t    }", "-\t\treturn this.genericTypeSignature;\t    ", "+\t\t}", "+\t\treturn this.genericTypeSignature;"]}], "num": 52105}
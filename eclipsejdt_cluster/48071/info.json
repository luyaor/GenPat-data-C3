{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c54d50ae4b0436f168684f9b8dc5b85f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4232b741086723d07cc584784afacf86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "e1454516411e21c76afb7797ea67208e4fc9c49d", "commitAfterChange": "85e7f681aa7d70ec863df3c9b4c8ff252b7d94c0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["+\t\t\t\t\t\t\tif (matchingMethod.hasSubstitutedParameters() && !currentMethod.original().areParametersEqual(matchingMethod.original()))", "+\t\t\t\t\t\t\t\tcontinue nextMethod; // keep inherited substituted methods to detect anonymous errors"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47007cc5e85c2eabe6a7cdcbe4f4dbb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "451a4290b08482db72c12f90b576f09a8da8fda2", "commitAfterChange": "68032f015aeece9b1e17b3f98b4f78c4d8098b12", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t\t\t\t\t\t\t\tif (matchingMethod.isBridge() && !currentMethod.isBridge())", "+\t\t\t\t\t\t\t\t\t\tcontinue nextMethod; // keep inherited methods to find concrete method over a bridge method"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a4304fac7d4bb9b964d21f8d4b89b2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cd68b167bcb2c40d959f9db282b6c0fe02c36af3", "commitAfterChange": "56bc267ccbb561e15a1def744b67e8208e4ddb23", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["+\t\t\t\t\t\t\tif (matchingMethod.typeVariables != NoTypeVariables)", "+\t\t\t\t\t\t\t\tcontinue nextMethod; // keep inherited substituted methods to detect anonymous errors"]}], "num": 48071}
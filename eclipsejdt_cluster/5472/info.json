{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb170177ebdd4bbfc97d6bb83710591f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18369ed503b15d1f7a2c2b4f4e2c0956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "225ea5653541f8a56d524334d3e9e6bb7fa18aa6", "commitAfterChange": "e67d1dc6830648c83fdb0e0b83b59925424638d8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\tboolean analyseResources = currentScope.compilerOptions().analyseResourceLeaks;", "-\t\t\t\tif (FakedTrackingVariable.isAnyCloseable(this.expressions[i].resolvedType)) {", "+\t\t\t\tif (analyseResources && FakedTrackingVariable.isAnyCloseable(this.expressions[i].resolvedType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece99f2ed107d1b4acf768e5eab23b2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "1d9c797e2d535a723d97129a4995a501f060e8fc", "commitAfterChange": "45457c087850a9bcb1e2d528c971be662d0a4e96", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-", "+\tboolean analyseNullAnnotations = this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled;", "-\t\tif (!concreteMethod.isStatic() && !abstractMethod.isStatic())", "+\t\tif (analyseNullAnnotations && !concreteMethod.isStatic() && !abstractMethod.isStatic())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1c46f3af9117fc3776e2f55724a3c49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "47675492fc82633c43ef2fc861903bfd0692e441", "commitAfterChange": "56484abf3afec06a3b2fe9a53e3d4859e1a90d5d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\tboolean firstSpill = !(this.binding instanceof SyntheticMethodBinding);", "-\t\t\tif (this.shouldCaptureInstance) {", "+\t\t\tif (this.shouldCaptureInstance && firstSpill) { // finally block handling results in extra spills, avoid side effect."]}], "num": 5472}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcd2dc1b16fbc5e3dc8acd070b8af7f9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f19550944665517eea5e36572525aa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FormatterOptions(ConfigurableOption[] settings)", "signatureAfterChange": "\r public FormatterOptions(Map settings)", "diff": ["-public FormatterOptions(ConfigurableOption[] settings){\r", "+public FormatterOptions(Map settings){\r", "-\t// filter options which are related to the formatter component\r", "-\tString componentName = CodeFormatter.class.getName();\r", "-\tfor (int i = 0, max = settings.length; i < max; i++){\r", "-\t\tif (settings[i].getComponentName().equals(componentName)){\r", "-\t\t\tthis.setOption(settings[i]);\r", "+\t// filter options which are related to the assist component\r", "+\tObject[] entries = settings.entrySet().toArray();\r", "+\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\tString optionID = (String) entry.getKey();\r", "+\t\tString optionValue = (String) entry.getValue();\r", "+\t\t\r", "+\t\tif(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.newLineBeforeOpeningBraceMode = true;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.newLineBeforeOpeningBraceMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_InsertNewlineInControlStatement)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.newlineInControlStatementMode = true;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.newlineInControlStatementMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_ClearAllBlankLines)){\r", "+\t\t\tif (optionValue.equals(CLEAR_ALL)){\r", "+\t\t\t\tthis.clearAllBlankLinesMode = true;\r", "+\t\t\t} else if (optionValue.equals(PRESERVE_ONE)){\r", "+\t\t\t\tthis.clearAllBlankLinesMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.compactElseIfMode = false;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.compactElseIfMode = true;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.newLineInEmptyBlockMode = true;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.newLineInEmptyBlockMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_SplitLineExceedingLength)){\r", "+\t\t\ttry {\r", "+\t\t\t\tint val = Integer.parseInt(optionValue);\r", "+\t\t\t\tif (val >= 0) this.maxLineLength = val;\r", "+\t\t\t} catch(NumberFormatException e){\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_CompactAssignment)){\r", "+\t\t\tif (optionValue.equals(COMPACT)){\r", "+\t\t\t\tthis.compactAssignmentMode = true;\r", "+\t\t\t} else if (optionValue.equals(NORMAL)){\r", "+\t\t\t\tthis.compactAssignmentMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_TabulationChar)){\r", "+\t\t\tif (optionValue.equals(TAB)){\r", "+\t\t\t\tthis.indentWithTab = true;\r", "+\t\t\t} else if (optionValue.equals(SPACE)){\r", "+\t\t\t\tthis.indentWithTab = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_TabulationSize)){\r", "+\t\t\ttry {\r", "+\t\t\t\tint val = Integer.parseInt(optionValue);\r", "+\t\t\t\tif (val > 0) this.tabSize = val;\r", "+\t\t\t} catch(NumberFormatException e){\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de2f8dd2671168c2b44fe0534e6ad909", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java", "commitBeforeChange": "cc758bfd339f8a87c20acc3346f061d63795c18c", "commitAfterChange": "2bc92b74226ce6025d1c26404f4960477e265708", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic AssistOptions(Map settings)", "signatureAfterChange": " \tpublic AssistOptions(Map settings)", "diff": ["-\t\t// filter options which are related to the assist component", "-\t\tIterator entries = settings.entrySet().iterator();", "-\t\twhile (entries.hasNext()) {", "-\t\t\tMap.Entry entry = (Map.Entry)entries.next();", "-\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\tcontinue;", "-\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\tcontinue;", "-\t\t\tString optionID = (String) entry.getKey();", "-\t\t\tString optionValue = (String) entry.getValue();", "+\t\tset(settings);", "+\t}", "-\t\t\tif (optionID.equals(OPTION_PerformVisibilityCheck)) {", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.checkVisibility = true;", "-\t\t\t\t} else", "-\t\t\t\t\tif (optionValue.equals(DISABLED)) {", "-\t\t\t\t\t\tthis.checkVisibility = false;", "-\t\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} else if (optionID.equals(OPTION_ForceImplicitQualification)) {", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.forceImplicitQualification = true;", "-\t\t\t\t} else", "-\t\t\t\t\tif (optionValue.equals(DISABLED)) {", "-\t\t\t\t\t\tthis.forceImplicitQualification = false;", "-\t\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_FieldPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.fieldPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_StaticFieldPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.staticFieldPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_LocalPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.localPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_ArgumentPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.argumentPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_FieldSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.fieldSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_StaticFieldSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.staticFieldSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_LocalSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.localSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_ArgumentSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.argumentSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;"]}], "num": 65221}
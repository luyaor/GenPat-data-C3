{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8c3135072c28abc7237dd1dfed3f6d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f5f94650c33aefa0f24dd549cbba4eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames) {", "+private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames) {", "-\tTypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\tITypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) { // below 1.8, external annotations will be attached later", "+\t\t\twalker = binaryType.enrichWithExternalAnnotationsFor(walker, method, this.environment);", "+\t\t}", "+\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) { // below 1.8, external annotations will be attached later", "+\t\t\twalker = binaryType.enrichWithExternalAnnotationsFor(walker, method, this.environment);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b36a37f74dc554e9969019da7f35d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "8641f54de2fbb396358e8ce74c8966d612b3bcdf", "commitAfterChange": "7f7fe7a0ba4a6e12c0bff10c900a5fe01a5f59ed", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage)", "diff": ["-\tpublic void findTypes(char[] prefix, final boolean findMembers, final ISearchRequestor storage) {", "+\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage) {", "-\t\t\t\tsimpleName = CharOperation.toLowerCase(prefix);", "+\t\t\t\tif (camelCaseMatch) {", "+\t\t\t\t\tsimpleName = prefix;", "+\t\t\t\t} else {", "+\t\t\t\t\tsimpleName = CharOperation.toLowerCase(prefix);", "+\t\t\t\t}", "-\t\t\t\tsimpleName =", "-\t\t\t\t\tCharOperation.toLowerCase(", "-\t\t\t\t\t\tCharOperation.subarray(prefix, lastDotIndex + 1, prefix.length));", "+\t\t\t\tif (camelCaseMatch) {", "+\t\t\t\t\tsimpleName = CharOperation.subarray(prefix, lastDotIndex + 1, prefix.length);", "+\t\t\t\t} else {", "+\t\t\t\t\tsimpleName =", "+\t\t\t\t\t\tCharOperation.toLowerCase(", "+\t\t\t\t\t\t\tCharOperation.subarray(prefix, lastDotIndex + 1, prefix.length));", "+\t\t\t\t}", "+\t\t\t\tint matchRule = SearchPattern.R_PREFIX_MATCH;", "+\t\t\t\tif (camelCaseMatch) matchRule |= SearchPattern.R_CAMELCASE_MATCH;", "-\t\t\t\t\tSearchPattern.R_PREFIX_MATCH, // not case sensitive", "+\t\t\t\t\tmatchRule, // not case sensitive"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecfbca28a8b64e7d91c6023d1afdf820", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "   private void createFields(IBinaryField[] iFields, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames) {", "+", "+private void createFields(IBinaryField[] iFields, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames) {", "-\t\t\t\tTypeAnnotationWalker walker = getTypeAnnotationWalker(binaryField.getTypeAnnotations()).toField();", "+\t\t\t\tITypeAnnotationWalker walker = getTypeAnnotationWalker(binaryField.getTypeAnnotations());", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) { // below 1.8, external annotations will be attached later", "+\t\t\t\t\twalker = binaryType.enrichWithExternalAnnotationsFor(walker, iFields[i], this.environment);", "+\t\t\t\t}", "+\t\t\t\twalker = walker.toField();"]}], "num": 32473}
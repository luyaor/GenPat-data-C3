{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a952d4244d4197f041cca52027fee12f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48bf04ae2559ed8301f22c679c051087", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f6037f3e0e76e18ea82dd93d13e55dc410583456", "commitAfterChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate void deleting(IProject project)", "signatureAfterChange": " \tprivate void deleting(IProject project)", "diff": ["-\t\t\tif (this.state.modelProjectsCache == null) {", "-\t\t\t\tthis.state.modelProjectsCache = this.manager.getJavaModel().getJavaProjects();", "-\t\t\t}", "+\t\t\tthis.state.getOldJavaProjecNames(); // foce list to be computed", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60f5136c5ba31c54f1d312679b182cda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeAttribute.java", "commitBeforeChange": "8593ccbacaea58bc31d7f71f8a393c5c276effab", "commitAfterChange": "ab233550db657855007d7fd2c56941a3b07c6fa6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void traverse(IBytecodeVisitor visitor) throws ClassFormatException", "signatureAfterChange": " \tpublic void traverse(IBytecodeVisitor visitor) throws ClassFormatException", "diff": ["-\t\t\t\t\tif (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_NameAndType) {", "+\t\t\t\t\tif (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_InvokeDynamic) {", "-\t\t\t\t\t\t\tthis.constantPool.decodeEntry(constantPoolEntry.getNameAndTypeInfoNameIndex()),", "-\t\t\t\t\t\t\tthis.constantPool.decodeEntry(constantPoolEntry.getNameAndTypeInfoDescriptorIndex()));", "+\t\t\t\t\t\t\tconstantPoolEntry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f919f30ed1f8555d5f0741f74825b86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/old/CodeFormatter.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic String format(String string, int indentLevel, int[] positions, String lineSeparator)", "signatureAfterChange": " \t \tpublic String format(String string, int indentLevel, int[] positions, String lineSeparator)", "diff": ["-\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE, this.options.get(JavaCore.FORMATTER_TAB_SIZE));", "-\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_LENGTH, this.options.get(JavaCore.FORMATTER_TAB_SIZE));", "+\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE, this.options.get(JavaCore.FORMATTER_TAB_SIZE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70afd4aba6c9be56df870068f0a24dd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "6c2ec0a92a2511791f4e1e6a880792d44b96e311", "commitAfterChange": "58dc232e4ac3a587a92cd50ddedf4e70cf15b87c", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void removeFile(IPath filePath)", "signatureAfterChange": " \tpublic void removeFile(IPath filePath)", "diff": ["-\t\tIFolder folder = fWorkspace.getRoot().getFolder(filePath.removeLastSegments(1));", "-\t\t\tfolder.getFile(filePath.lastSegment()).delete(true, null);", "+\t\t\tfWorkspace.getRoot().getFile(filePath).delete(true, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d52512857b0e2173ab6ea56a2ac18a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic boolean visit(DimensionInfo node)", "signatureAfterChange": "  \tpublic boolean visit(ExtraDimension node)", "diff": ["-\tpublic boolean visit(DimensionInfo node) {", "+\tpublic boolean visit(ExtraDimension node) {", "-\t\tthis.buffer.append(\"[\"); //$NON-NLS-1$", "-\t\tif (node.expression() != null) {", "-\t\t\tnode.expression().accept(this);", "-\t\t}", "-\t\tthis.buffer.append(\"]\"); //$NON-NLS-1$", "+\t\tthis.buffer.append(\"[]\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb24757a848ba35d80f99be3e786d208", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "0ee327f784f1f4e34e68a84648fe26304fce751c", "commitAfterChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate synchronized void containersReset(String[] containerIDs)", "signatureAfterChange": " \t \tprivate synchronized void containersReset(String[] containerIDs)", "diff": ["-\t\t\tIterator projectIterator = this.containers.keySet().iterator();", "+\t\t\tIterator projectIterator = this.containers.values().iterator();", "-\t\t\t\tIJavaProject project = (IJavaProject)projectIterator.next();", "-\t\t\t\tMap projectContainers = (Map)this.containers.get(project);", "+\t\t\t\tMap projectContainers = (Map) projectIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2e7bee2521c4a331e1816014074d2b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean visit(BooleanLiteral node)", "signatureAfterChange": " \tpublic boolean visit(BlockComment node)", "diff": ["+\t */", "+\tpublic boolean visit(BlockComment node) {", "+\t\tthis.buffer.append(\"/* */\");//$NON-NLS-1$", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d40ed1ab7a9c03b5b31ac162767a2ef4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "330aeaad59d1633d10c0cd3a9ee9ac57073b385f", "commitAfterChange": "960ce528d76bd309a28ce655fc14cff77629ffa5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "-\t\tint le = this.lineEnd;", "-\t\ttag = new char[length];", "+\t\tchar[] tag = new char[length];", "-\t\tthis.lineEnd = le;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "defd646d169b44928e641cdb80ee92ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "939dd159977cdcca1beae88ff479c614c659015a", "commitAfterChange": "3e4eb0f670f073216375c7703d5a88023b74a5d5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "signatureAfterChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "diff": ["-\t\t\t\t\t\tif(token != null && token.length != 0)\r", "-\t\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t\tname = computeBaseNames(sourceName[0], excludeNames);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tname = computeBaseNames('b', excludeNames);\r", "+\t\t\t\t\t\tname = computeBaseNames(sourceName[0], excludeNames);\r"]}], "num": 8813}
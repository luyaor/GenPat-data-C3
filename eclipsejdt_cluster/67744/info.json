{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abae4ba358392e9a878297ccd5e62393", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0360992c03e4e57a2e779d37c153ab6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "723628e20cdcca3d7368991555fbb1e08f7222a1", "commitAfterChange": "daa096617d4294add6bd8531102c2906f3417dbb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "signatureAfterChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "diff": ["-\t\tfor (int i = 0; i < list.length; i++) {", "+\t\tString[] exclusionPatterns = entry.getExclusionPatterns();", "+\t\tnextEntry: for (int i = 0; i < list.length; i++) {", "+\t\t\t\t\tString[] otherExcludes = other.getExclusionPatterns();", "+\t\t\t\t\tif (exclusionPatterns == null) {", "+\t\t\t\t\t\tif (otherExcludes != null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint excludeLength = exclusionPatterns.length;", "+\t\t\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tfor (int j = 0; j < excludeLength; j++) {", "+\t\t\t\t\t\t\tif (!exclusionPatterns[j].equals(otherExcludes[j]))", "+\t\t\t\t\t\t\t\tcontinue nextEntry;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0ded90d40997fa774564e3ea2e64af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " public boolean hasSubpackages() throws JavaModelException", "signatureAfterChange": " public boolean hasSubpackages() throws JavaModelException", "diff": ["-\tString elementName = getElementName();", "-\tint nameLength = elementName.length();", "-\tString packageName = isDefaultPackage() ? elementName : elementName+\".\"; //$NON-NLS-1$", "-\tfor (int i= 0; i < packages.length; i++) {", "-\t\tString otherName = packages[i].getElementName();", "-\t\tif (otherName.length() > nameLength && otherName.startsWith(packageName)) {", "-\t\t\treturn true;", "-\t\t}", "+\tint namesLength = this.names.length;", "+\tnextPackage: for (int i= 0, length = packages.length; i < length; i++) {", "+\t\tString[] otherNames = ((PackageFragment) packages[i]).names;", "+\t\tif (otherNames.length <= namesLength) continue nextPackage;", "+\t\tfor (int j = 0; j < namesLength; j++)", "+\t\t\tif (!this.names[j].equals(otherNames[j]))", "+\t\t\t\tcontinue nextPackage;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20e77cec0ba4099e2724f9af53dab941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/DependencyGraph.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \tpublic void integrityCheck(Dictionary table)", "signatureAfterChange": "\r \tpublic void integrityCheck(Dictionary table)", "diff": ["-\t\tString msg =\r", "-\t\t\t\"Internal Error: the dependency graph is corrupt, do a full build to workaround error.\";\r", "+\t\tString msg = Util.bind(\"build.graphCorrupt\"/*nonNLS*/);\r", "-\t\t\t\tfor (int j = depDeps.length; --j >= 0;) {\r", "-\t\t\t\t\tif (depDeps[j] == node) {\r", "-\t\t\t\t\t\tfound = true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "+\t\t\t\t for (int j = depDeps.length; --j >= 0;) {\r", "+\t\t\t\t\t if (depDeps[j] == node) {\r", "+\t\t\t\t\t\t found = true;\r", "+\t\t\t\t\t }\r", "+\t\t\t\t }\t\t\t\t\r", "-\t\t\t\tfor (int j = depDeps.length; --j >= 0;) {\r", "-\t\t\t\t\tif (depDeps[j] == node) {\r", "-\t\t\t\t\t\tfound = true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "+\t\t\t\t for (int j = depDeps.length; --j >= 0;) {\r", "+\t\t\t\t\t if (depDeps[j] == node) {\r", "+\t\t\t\t\t\t found = true;\r", "+\t\t\t\t\t }\r", "+\t\t\t\t }\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90cdff781c26d9879af6cccb51052ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\t", "+", "-\t", "+", "-\tIEntryResult[] entries = (IEntryResult[])this.entryResults.get(input);", "+\tIEntryResult[] entries = (IEntryResult[]) this.entryResults.get(input);", "-\t\tif (entries == null) {", "+\t\tif (entries == null)", "-\t\t}", "-\tnextEntry: for (int i = 0, max = entries.length; i < max; i++){", "+\tnextEntry: for (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\tif (word[length+slash] != '/') continue; ", "+\t\t\tif (word[length + slash] != '/') continue; ", "-\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\tchar value = word[j+slash];", "-\t\t\t\tif (value != simpleName[j]) continue nextEntry;", "-\t\t\t}", "+\t\t\tfor (int j = 0; j < length; j++)", "+\t\t\t\tif (word[j + slash] != simpleName[j]) continue nextEntry;", "-\t\t", "+", "-\t\tthis.decodeIndexEntry(entry);", "+\t\tdecodeIndexEntry(entry);"]}], "num": 67744}
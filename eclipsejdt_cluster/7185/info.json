{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c67f9c084a392bfab1658144f7b07f6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3562dfb22963f638ab125e5d53744fdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "commitAfterChange": "eca034eefb984fcda8d1031d81c86811d9a168b4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders() throws CoreException", "diff": ["-\t\tif (deleteAll && sourceLocation.hasIndependentOutputFolder) {", "+\t\tif (sourceLocation.hasIndependentOutputFolder) {", "-\t\t\tIResource[] members = outputFolder.members(); ", "-\t\t\tfor (int j = 0, m = members.length; j < m; j++)", "-\t\t\t\tmembers[j].delete(IResource.FORCE, null);", "-\t\t\tcopyExtraResourcesBack(sourceLocation);", "+\t\t\tif (deleteAll) {", "+\t\t\t\tIResource[] members = outputFolder.members(); ", "+\t\t\t\tfor (int ii = 0, ll = members.length; ii < ll; ii++)", "+\t\t\t\t\tmembers[ii].delete(IResource.FORCE, null);", "+\t\t\t} else {", "+\t\t\t\toutputFolder.accept(", "+\t\t\t\t\tnew IResourceVisitor() {", "+\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "+\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t);", "+\t\t\t}", "+\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "-\t\t\t\t\t: null; // ignore exclusionPatterns if output folder != source folder", "+\t\t\t\t\t: null; // ignore exclusionPatterns if output folder == another source folder... not this one"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b7b0c4c4d0f1d267d78bffe44e1b6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "68510f354df915bfae6d7cab257ea569b0a04f02", "commitAfterChange": "94922404a8030ddb0c95da3eb05c6a622d226ac7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders() throws CoreException", "diff": ["-\tnext : for (int i = 0, l = sourceLocations.length; i < l; i++) {", "-\t\tClasspathMultiDirectory sourceLocation = sourceLocations[i];", "+\tnext : for (int iSource = 0, length = sourceLocations.length; iSource < length; iSource++) {", "+\t\tClasspathMultiDirectory sourceLocation = sourceLocations[iSource];", "-\t\t\tif (visited.contains(outputFolder)) continue next;", "-\t\t\tvisited.add(outputFolder);", "-\t\t\tif (deleteAll) {", "-\t\t\t\tIResource[] members = outputFolder.members(); ", "-\t\t\t\tfor (int ii = 0, ll = members.length; ii < ll; ii++)", "-\t\t\t\t\tmembers[ii].delete(IResource.FORCE, null);", "-\t\t\t} else {", "-\t\t\t\toutputFolder.accept(", "-\t\t\t\t\tnew IResourceVisitor() {", "-\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "-\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "-\t\t\t\t\t\t\t\treturn false;", "+\t\t\tif (!visited.contains(outputFolder)){", "+\t\t\t\tvisited.add(outputFolder);", "+\t\t\t\tif (deleteAll) {", "+\t\t\t\t\tIResource[] members = outputFolder.members(); ", "+\t\t\t\t\tfor (int iMember = 0, memberLength = members.length; iMember < memberLength; iMember++)", "+\t\t\t\t\t\tmembers[iMember].delete(IResource.FORCE, null);", "+\t\t\t\t} else {", "+\t\t\t\t\toutputFolder.accept(", "+\t\t\t\t\t\tnew IResourceVisitor() {", "+\t\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "+\t\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t);", "+\t\t\t\t\t);", "+\t\t\t\t}"]}], "num": 7185}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "767979219264622b302d234f603838a7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "053bd59d7a38392915bf243fa8b36098", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f372eb4169324cad87b7cff6d25b5939cf1574c9", "commitAfterChange": "aac9fc656ae32e1d44c924b003ab11a649890335", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t// target cannot be 1.4 if compliance is 1.3\r", "+\t\tif (options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_4)\r", "+\t\t\t\t&& !options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ \r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f09c1e963e293569f31f93c88f030b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "765aefb641ece984e8e3a8e814e66c7ff75e2a4d", "commitAfterChange": "87bc3aca5276736813fdee6191f13f0834fba9c7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "diff": ["+\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40332b40cb3016189bd464bbfa3e58a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tprotected Hashtable warningOptions(int kind)", "signatureAfterChange": " \tprotected Hashtable warningOptions(int kind)", "diff": ["+\t\t// Ignore 3.2 options", "+\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLabel, CompilerOptions.IGNORE); ", "+", "+\t\t// Set compliance", "+\t\tString compliance= compliance();", "+\t\tif (compliance != null) {", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_Compliance, compliance);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_Source, compliance);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TargetPlatform, compliance);", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "483671237d4f3d0308a0f3f74419b8e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected Map getCompilerOptions()", "signatureAfterChange": " protected Map getCompilerOptions()", "diff": ["+\toptions.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "566b4367d1f9f9ac3ab3e2bd67037252", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public String[][] resolveType(String typeName) throws JavaModelException", "signatureAfterChange": " public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-", "- public String[][] resolveType(String typeName) throws JavaModelException {", "-\tISourceType info = (ISourceType) this.getElementInfo();", "-\tISearchableNameEnvironment environment = ((JavaProject)getJavaProject()).getSearchableNameEnvironment();", "-", "-\tclass TypeResolveRequestor implements ISelectionRequestor {", "-\t\tString[][] answers = null;", "-\t\tvoid acceptType(String[] answer){", "-\t\t\tif (answers == null) {", "-\t\t\t\tanswers = new String[][]{ answer };", "-\t\t\t} else {", "-\t\t\t\t// grow", "-\t\t\t\tint length = answers.length;", "-\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "-\t\t\t\tanswers[length] = answer;", "+ */", "+public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException {", "+\tJavaProject project = (JavaProject)getJavaProject();", "+\tNameLookup lookup = null;", "+\ttry {", "+\t\t// set the units to look inside", "+\t\tlookup = ((JavaProject)project).getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t", "+\t\t// resolve", "+\t\tISourceType info = (ISourceType) this.getElementInfo();", "+\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "+\t", "+\t\tclass TypeResolveRequestor implements ISelectionRequestor {", "+\t\t\tString[][] answers = null;", "+\t\t\tvoid acceptType(String[] answer){", "+\t\t\t\tif (answers == null) {", "+\t\t\t\t\tanswers = new String[][]{ answer };", "+\t\t\t\t} else {", "+\t\t\t\t\t// grow", "+\t\t\t\t\tint length = answers.length;", "+\t\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "+\t\t\t\t\tanswers[length] = answer;", "+\t\t\t\t}", "+\t\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "+\t\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "+\t\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "+\t\t\t}", "+\t", "+\t\t\tpublic void acceptError(IProblem error) {}", "+\t\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name) {}", "+\t\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {}", "+\t\t\tpublic void acceptPackage(char[] packageName){}", "+\t", "-\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "-\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "+\t\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "+\t\tSelectionEngine engine = ", "+\t\t\tnew SelectionEngine(environment, requestor, this.getJavaProject().getOptions(true));", "+\t\t\t", "+\t \tIType[] topLevelTypes = this.getCompilationUnit().getTypes();", "+\t \tint length = topLevelTypes.length;", "+\t \tISourceType[] topLevelInfos = new ISourceType[length];", "+\t \tfor (int i = 0; i < length; i++) {", "+\t\t\ttopLevelInfos[i] = (ISourceType)((SourceType)topLevelTypes[i]).getElementInfo();", "-\t\t", "-\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "-\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "+\t\t\t", "+\t\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "+\t\treturn requestor.answers;", "+\t} finally {", "+\t\tif (lookup != null) {", "+\t\t\tlookup.setUnitsToLookInside(null);", "-", "-\t\tpublic void acceptError(IProblem error) {}", "-\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name) {}", "-\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {}", "-\t\tpublic void acceptPackage(char[] packageName){}", "-", "-\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "-\tSelectionEngine engine = ", "-\t\tnew SelectionEngine(environment, requestor, this.getJavaProject().getOptions(true));", "-\t\t", "- \tIType[] topLevelTypes = this.getCompilationUnit().getTypes();", "- \tint length = topLevelTypes.length;", "- \tISourceType[] topLevelInfos = new ISourceType[length];", "- \tfor (int i = 0; i < length; i++) {", "-\t\ttopLevelInfos[i] = (ISourceType)((SourceType)topLevelTypes[i]).getElementInfo();", "-\t}", "-\t\t", "-\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "-\treturn requestor.answers;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577cf3f756f76e5fa5cb7548a8acc1b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "65a3127da1161f59c28b91d7c9ae657695f2488d", "commitAfterChange": "c09eb95401923d299adffa8009ff4fabdb575aa4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic Element elementEncode( \t\tDocument document, \t\tIPath projectPath) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic Element elementEncode( \t\tDocument document, \t\tIPath projectPath) \t\tthrows JavaModelException", "diff": ["+\t\t", "-\t\t\telement.setAttribute(\"sourcepath\", this.sourceAttachmentPath.toString()); //$NON-NLS-1$", "+\t\t\txmlPath = this.sourceAttachmentPath;", "+\t\t\t// translate to project relative from absolute (unless a device path)", "+\t\t\tif (xmlPath.isAbsolute()) {", "+\t\t\t\tif (projectPath != null && projectPath.isPrefixOf(xmlPath)) {", "+\t\t\t\t\tif (xmlPath.segment(0).equals(projectPath.segment(0))) {", "+\t\t\t\t\t\txmlPath = xmlPath.removeFirstSegments(1);", "+\t\t\t\t\t\txmlPath = xmlPath.makeRelative();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\txmlPath = xmlPath.makeAbsolute();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telement.setAttribute(\"sourcepath\", xmlPath.toString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64bf3ef6702f66f9cafd4b5bec7432ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "9c1e2e3de87cdd04985b57918d50a3f3fc191472", "commitAfterChange": "de85d73a10e0280a45c9d9fcbbd2b35068e06127", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, final FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, final FlowInfo flowInfo)", "diff": ["-\t\tAbstractMethodDeclaration.analyseArguments(lambdaInfo, this.arguments, this.binding);", "+\t\tMethodBinding methodWithParameterDeclaration = argumentsTypeElided() ? this.descriptor : this.binding;", "+\t\tAbstractMethodDeclaration.analyseArguments(lambdaInfo, this.arguments, methodWithParameterDeclaration);", "+\t\t} else { // Expression", "+\t\t\tif (currentScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled ", "+\t\t\t\t\t&& flowInfo.reachMode() == FlowInfo.REACHABLE)", "+\t\t\t{", "+\t\t\t\tExpression expression = (Expression)this.body;", "+\t\t\t\tcheckAgainstNullAnnotation(flowContext, expression, expression.nullStatus(flowInfo, flowContext));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "665fc23e912146517f767b33a8bd7f6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "74edcbc531d51c7b36194b7c17544e9192cb58b1", "commitAfterChange": "b62a1c02d1cac5bc56799a98df58d39d3e512bc5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \tpublic IJavaElement getJavaElement()", "diff": ["-\t\tint nameStart =  localVar.getStartPosition();", "-\t\tint nameLength = localVar.getLength();", "-\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) localVar.getParent();", "-\t\tint sourceStart = statement.getStartPosition();", "-\t\tint sourceLength = statement.getLength();", "+\t\tint nameStart;", "+\t\tint nameLength;", "+\t\tint sourceStart;", "+\t\tint sourceLength;", "+\t\tif (localVar instanceof SingleVariableDeclaration) {", "+\t\t\tsourceStart = localVar.getStartPosition();", "+\t\t\tsourceLength = localVar.getLength();", "+\t\t\tSimpleName simpleName = ((SingleVariableDeclaration) localVar).getName();", "+\t\t\tnameStart = simpleName.getStartPosition();", "+\t\t\tnameLength = simpleName.getLength();", "+\t\t} else {", "+\t\t\tnameStart =  localVar.getStartPosition();", "+\t\t\tnameLength = localVar.getLength();", "+\t\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) localVar.getParent();", "+\t\t\tsourceStart = statement.getStartPosition();", "+\t\t\tsourceLength = statement.getLength();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74fb0f3f00e61a084e7097901f501556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "266ddb07da0dd2618bcfbec3256d70ddf353d13c", "commitAfterChange": "0f0f6cf807937b95cd594ad18f819e710f9be563", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic IJavaElement findElement(IPath path) throws JavaModelException", "signatureAfterChange": " \tpublic IJavaElement findElement(IPath path, WorkingCopyOwner owner) throws JavaModelException", "diff": ["+\t */", "+\tpublic IJavaElement findElement(IPath path, WorkingCopyOwner owner) throws JavaModelException {", "+\t\t", "-\t\t\t\tIType type =", "-\t\t\t\t\tgetNameLookup().findType(", "+\t\t\t\tIType type = null;", "+\t\t\t\tNameLookup lookup = null;", "+\t\t\t\ttry {", "+\t\t\t\t\t// set units to look inside", "+\t\t\t\t\tlookup = getNameLookup();", "+\t\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\t\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t\t\t", "+\t\t\t\t\t// lookup type", "+\t\t\t\t\ttype = lookup.findType(", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (lookup != null) {", "+\t\t\t\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7782178804a347640f527ff4e65e80b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "f0bf109b49cb0d1b5ee96570e8403cab9257521b", "commitAfterChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " public IJavaElement[] codeSelect(String codeSnippet, int offset, int length) throws JavaModelException", "signatureAfterChange": " public IJavaElement[] codeSelect(String codeSnippet, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tSelectionRequestor requestor= new SelectionRequestor(this.project.getNameLookup(), null); // null because there is no need to look inside the code snippet itself", "-\tthis.context.select(", "-\t\tcodeSnippet.toCharArray(),", "-\t\toffset,", "-\t\toffset + length - 1,", "-\t\tthis.project.getSearchableNameEnvironment(),", "-\t\trequestor,", "-\t\tthis.project.getOptions(true)", "-\t);", "-\treturn requestor.getElements();", "+ */", "+public IJavaElement[] codeSelect(String codeSnippet, int offset, int length, WorkingCopyOwner owner) throws JavaModelException {", "+\tNameLookup lookup = null;", "+\ttry {", "+\t\t// set the units to look inside", "+\t\tlookup = this.project.getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tlookup.setUnitsToLookInside(workingCopies);", "+", "+\t\t// code select", "+\t\tSelectionRequestor requestor= new SelectionRequestor(lookup, null); // null because there is no need to look inside the code snippet itself", "+\t\tthis.context.select(", "+\t\t\tcodeSnippet.toCharArray(),", "+\t\t\toffset,", "+\t\t\toffset + length - 1,", "+\t\t\tthis.project.getSearchableNameEnvironment(),", "+\t\t\trequestor,", "+\t\t\tthis.project.getOptions(true)", "+\t\t);", "+\t\treturn requestor.getElements();", "+\t} finally {", "+\t\tif (lookup != null) {", "+\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b1704ceeb741163a2622461b21e1a95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "167c362a4ac2baf619eec088a660153ec713b502", "commitAfterChange": "203954a19427f44b197aa09593f6f49177e09606", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprotected void setUp() throws Exception", "signatureAfterChange": " \t \tprotected void setUp() throws Exception", "diff": ["-\t\t", "+\t\tproj.setOption(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "+\t\tproj.setOption(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, JavaCore.ERROR);", "+\t\tproj.setOption(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "+\t\tproj.setOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_5);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8afad19d7448e282f17b81ab07e750b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "bf1ba1c1732b0be00fbd03cfd8ae394b6a169e63", "commitAfterChange": "debb51f61b0b4a5b1a6926f67a451ba72125546c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void evaluateCodeSnippet( \tString codeSnippet,  \tString[] localVariableTypeNames,  \tString[] localVariableNames,  \tint[] localVariableModifiers,  \tIType declaringType,  \tboolean isStatic,  \tboolean isConstructorCall,  \tICodeSnippetRequestor requestor,  \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "signatureAfterChange": " public void evaluateCodeSnippet( \tString codeSnippet,  \tString[] localVariableTypeNames,  \tString[] localVariableNames,  \tint[] localVariableModifiers,  \tIType declaringType,  \tboolean isStatic,  \tboolean isConstructorCall,  \tICodeSnippetRequestor requestor,  \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "diff": ["+\tMap options = this.project.getOptions(true);", "+\t\t\t\t// turn off import complaints for implicitly added ones", "+\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE);", "+\t\t\t\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.IGNORE);", "+\t\t\t\t\t// turn off import complaints for implicitly added ones", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE);", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.IGNORE);", "-\t\t\tthis.project.getOptions(true), ", "+\t\t\toptions, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94063a1d90caa5095b38deefe7d0ef60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void setUpSuite() throws Exception", "signatureAfterChange": " \tpublic void setUpSuite() throws Exception", "diff": ["+\t\t", "+\t\tMap options = JavaCore.getDefaultOptions();", "+\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "+\t\toptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "+\t\toptions.put(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_5);", "+\t\t", "+\t\tsetUpJavaProject(\"Converter15\", options); //$NON-NLS-1$", "-\t}\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b04a47dc60be48d45109828724bb22cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "4cb58ab533c79220136a132032afc1404604a700", "commitAfterChange": "c6eb7c253f30ad97be4157d7b386bdebd6f05934", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\tpublic void preferenceChange(PreferenceChangeEvent event)", "signatureAfterChange": " \t\tpublic void preferenceChange(PreferenceChangeEvent event)", "diff": ["+\t\t\t", "+\t\t\t// handle change to generated source directory", "+\t\t\tif ( AptPreferenceConstants.APT_GENSRCDIR.equals( event.getKey() ) ) {", "+", "+\t\t\t\tif ( event.getNewValue() != null && ! event.getNewValue().equals( event.getOldValue())) {", "+\t\t\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _proj );", "+\t\t\t\t\tgfm.setGeneratedSourceFolderName( (String)event.getNewValue() );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4ba6ac6b5d1dd9ad67962bbbd84cd7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected Map getCompilerOptions()", "signatureAfterChange": " protected Map getCompilerOptions()", "diff": ["+\toptions.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4faa96d297b42727197ee059dac96f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\t\tFlowInfo flowInfo)", "diff": ["+\t\tfinal CompilerOptions compilerOptions = currentScope.compilerOptions();", "-\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\tif (!isKnowDeadCodePattern(this.condition) || compilerOptions.reportDeadCodeInTrivialIfStatement) {", "-\t\tif (currentScope.compilerOptions().enableSyntacticNullAnalysisForFields) {", "+\t\tif (compilerOptions.enableSyntacticNullAnalysisForFields) {", "-\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\tif (!isKnowDeadCodePattern(this.condition) || compilerOptions.reportDeadCodeInTrivialIfStatement) {", "+\t\tif (isPolyExpression() && compilerOptions.isAnnotationBasedNullAnalysisEnabled && flowInfo.reachMode() == FlowInfo.REACHABLE) {", "+\t\t\tcheckAgainstNullTypeAnnotation(currentScope, this.resolvedType, this.valueIfTrue, flowContext, flowInfo);", "+\t\t\tcheckAgainstNullTypeAnnotation(currentScope, this.resolvedType, this.valueIfFalse, flowContext, flowInfo);", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1fab35f01e47b59c56f1307ce87b1d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "266ddb07da0dd2618bcfbec3256d70ddf353d13c", "commitAfterChange": "0f0f6cf807937b95cd594ad18f819e710f9be563", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor) throws JavaModelException", "signatureAfterChange": " protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "diff": ["- */", "-protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor) throws JavaModelException {", "+protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException {", "-\tSearchableEnvironment environment = (SearchableEnvironment) project.getSearchableNameEnvironment();", "-\tNameLookup nameLookup = project.getNameLookup();", "-\tenvironment.unitToSkip = unitToSkip;", "-", "-\tCompletionEngine engine = new CompletionEngine(environment, new CompletionRequestorWrapper(requestor,nameLookup), project.getOptions(true), project);", "-\tengine.complete(cu, position, 0);", "-\tenvironment.unitToSkip = null;", "-}", "+\tSearchableEnvironment environment = null;", "+\tNameLookup nameLookup = null;", "+\ttry {", "+\t\t// set unit to skip", "+\t\tenvironment = (SearchableEnvironment) project.getSearchableNameEnvironment();", "+\t\tenvironment.unitToSkip = unitToSkip;", "+\t\t// set the units to look inside", "+\t\tnameLookup = project.getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tnameLookup.setUnitsToLookInside(workingCopies);", "+", "+\t\t// code complete", "+\t\tCompletionEngine engine = new CompletionEngine(environment, new CompletionRequestorWrapper(requestor,nameLookup), project.getOptions(true), project);", "+\t\tengine.complete(cu, position, 0);", "+\t} finally {", "+\t\tif (environment != null) {", "+\t\t\tenvironment.unitToSkip = null;", "+\t\t}", "+\t\tif (nameLookup != null) {", "+\t\t\tnameLookup.setUnitsToLookInside(null);", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d774f512abaf914c83ace0d1b2ba0c08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6d042411635c9e25293983b11bee41453609391b", "commitAfterChange": "bc230c9a2037f7f2692d1240a37dc4d689016229", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecationInsideDeprecatedCode, ", "+\t\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\t} else if (token.equals(\"allDeprecation\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecationInsideDeprecatedCode, ", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6a6bb71dd76b6e4bf8f97fbbb57a9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "266ddb07da0dd2618bcfbec3256d70ddf353d13c", "commitAfterChange": "0f0f6cf807937b95cd594ad18f819e710f9be563", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic IType findType(String fullyQualifiedName) throws JavaModelException", "signatureAfterChange": " \tpublic IType findType(String fullyQualifiedName, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\t\tIType type = ", "-\t\t\tthis.getNameLookup().findType(", "-\t\t\t\tfullyQualifiedName, ", "+\t */", "+\tpublic IType findType(String fullyQualifiedName, WorkingCopyOwner owner) throws JavaModelException {", "+\t\t", "+\t\tIType type = null;", "+\t\tNameLookup lookup = null;", "+\t\ttry {", "+\t\t\t// set units to look inside", "+\t\t\tlookup = getNameLookup();", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t", "+\t\t\t// lookup type", "+\t\t\ttype = lookup.findType(", "+\t\t\t\tfullyQualifiedName,", "+\t\t} finally {", "+\t\t\tif (lookup != null) {", "+\t\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t\t}", "+\t\t}"]}], "num": 60297}
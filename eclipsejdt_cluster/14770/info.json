{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bd1aa89fbcd6887e742266b65e54381", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16344c4f6357e819326edbe8329bcf50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "9b9b413c1fc3e1733988a3ceecffb87b92306bbd", "commitAfterChange": "afdd923f425377ac0a0c68fd300457070eaabf3e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public OutputStream createBinaryFile(Filer.Location loc, String pkg, File relPath)         throws IOException", "signatureAfterChange": "     public OutputStream createBinaryFile(Filer.Location loc, String pkg, File relPath)         throws IOException", "diff": ["+    \t", "+    \t// We do not want to write to disk during reconcile", "+\t\tif (_env.getPhase() == Phase.RECONCILE) {", "+\t\t\treturn new NoOpOutputStream();", "+\t\t}", "+    \t", "-    \treturn new RefreshingFileOutputStream( path, _env.getProject() );", "+    \tIFile file = _env.getProject().getFile(path);", "+    \treturn new BinaryFileOutputStream(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "208e0b4e3642465e723dd0fb06ca91df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic InferenceContext18 freshInferenceContext(Scope scope)", "signatureAfterChange": "  \tpublic InferenceContext18 freshInferenceContext(Scope scope)", "diff": ["-\t\treturn null; // subject to inference only as an argument to an outer invocation", "+\t\tif (this.expressionContext != ExpressionContext.VANILLA_CONTEXT) {", "+\t\t\tExpression[] arguments = createPseudoExpressions(this.freeParameters);", "+\t\t\treturn new InferenceContext18(scope, arguments, this);", "+\t\t}", "+\t\treturn null; // shouldn't happen, actually"]}], "num": 14770}
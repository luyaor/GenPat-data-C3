{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0ca6ea8ac4037ad8989d0bc0050a4de", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5033ba2eada17a41c15023d6650fa7eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\tthis.codegenBinding = this.binding.original();", "+\tFieldBinding codegenBinding = this.binding.original();", "-\t\tif ((currentScope.enclosingSourceType() != this.codegenBinding.declaringClass)", "+\t\tif ((currentScope.enclosingSourceType() != codegenBinding.declaringClass)", "-\t\t\t\t((SourceTypeBinding) this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\t\t((SourceTypeBinding) codegenBinding.declaringClass).addSyntheticMethod(codegenBinding, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenBinding, this, isReadAccess);", "-\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = destinationType.addSyntheticMethod(codegenBinding, isReadAccess);", "+\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenBinding, this, isReadAccess);", "-\t\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = currentCompatibleType.addSyntheticMethod(codegenBinding, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenBinding, this, isReadAccess);", "-\t\t}", "-\t}", "-\t// if the binding declaring class is not visible, need special action", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t// and not from Object or implicit static field access.", "-\tif (this.binding.declaringClass != this.receiverType", "-\t\t\t&& !this.receiverType.isArrayType()", "-\t\t\t&& this.binding.declaringClass != null // array.length", "-\t\t\t&& this.binding.constant() == Constant.NotAConstant) {", "-\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(this.receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "-\t\t\t\t&& this.binding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object fields", "-\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t\tthis.codegenBinding =", "-\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\tthis.codegenBinding,", "-\t\t\t\t\t(ReferenceBinding) this.receiverType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e8c38066954a060e4311e9bff89ca81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tif (binding.isPrivate()){", "+", "+\t// if method from parameterized type got found, use the original method at codegen time", "+\tthis.codegenBinding = this.binding.original();", "+\tif (this.codegenBinding != this.binding) {", "+\t    // extra cast needed if method return type has type variable", "+\t    if ((this.codegenBinding.returnType.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t        this.genericCast = this.codegenBinding.returnType.genericCast(this.binding.returnType);", "+\t    }", "+\t} ", "+\tif (this.binding.isPrivate()){", "-\t\t\tsyntheticAccessor = ((SourceTypeBinding)binding.declaringClass).addSyntheticMethod(binding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\t\tsyntheticAccessor = ((SourceTypeBinding)binding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "-\t\tsyntheticAccessor = destinationType.addSyntheticMethod(binding, isSuperAccess());", "-\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\tsyntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "-\t\t\t\t&& binding.declaringClass.getPackage() ", "+\t\t\t\t&& this.codegenBinding.declaringClass.getPackage() ", "-\t\t\tsyntheticAccessor = currentCompatibleType.addSyntheticMethod(binding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\t\tsyntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t", "-\tif (binding.declaringClass != this.qualifyingType", "+\tif (this.binding.declaringClass != this.qualifyingType", "-\t\t\t\t&& (!receiver.isImplicitThis() || !binding.isStatic())", "-\t\t\t\t&& binding.declaringClass.id != T_Object) // no change for Object methods", "-\t\t\t|| !binding.declaringClass.canBeSeenBy(currentScope))) {", "+\t\t\t\t&& (!receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "+\t\t\t\t&& this.binding.declaringClass.id != T_Object) // no change for Object methods", "+\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope))) {", "-\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(binding, (ReferenceBinding) this.qualifyingType);", "+\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(", "+\t\t        \t\t\t\t\t\t\t\t\t\tthis.codegenBinding, (ReferenceBinding) this.qualifyingType.erasure());"]}], "num": 50842}
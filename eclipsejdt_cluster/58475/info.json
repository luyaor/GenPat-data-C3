{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a5487a14ee9eb275808bef1127d224b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be323d30df148bd3df3949376b19d72e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "55e73883e7d976f9cccec7b53550d84ac74291b1", "commitAfterChange": "dc04cc3af6415e31629b43b683998ef4771a1c6c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\tif (hasReturnNonNullDefault) { // conflict with inheritance already checked", "+\t\t\t\tif (hasReturnNonNullDefault && currentMethod.returnType.acceptsNonNullDefault()) { // conflict with inheritance already checked", "-\t\t\t\t\telse", "+\t\t\t\t\telse if (currentMethod.parameters[i].acceptsNonNullDefault())", "+\t\t\t\t\telse", "+\t\t\t\t\t\tcurrentNonNullNess = null; // cancel if parameter doesn't accept the default"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3831acba1743e9e5943a28a22fee53b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "09a76541b486383f4df376aea0572442ead3939f", "commitAfterChange": "2b146679d3d17750c10e2b9415f98c6ca3cc39ec", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\tif (hasReturnNonNullDefault && currentMethod.returnType.acceptsNonNullDefault()) { // conflict with inheritance already checked", "+\t\t\t\tif (hasReturnNonNullDefault && (!useTypeAnnotations || currentMethod.returnType.acceptsNonNullDefault())) { // conflict with inheritance already checked"]}], "num": 58475}
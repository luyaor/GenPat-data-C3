{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59a480b9c04ae59576ce87f16d69ee7e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d4a739d7d6aa040c9c93cc8f737a2da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tCollection<InferenceVariable> inputVariables(final InferenceContext18 context)", "signatureAfterChange": "  \tCollection<InferenceVariable> inputVariables(final InferenceContext18 context)", "diff": ["-\t\t\t\t\tStatement body = resolved != null ? resolved.body() : lambda.body();", "-\t\t\t\t\tif (body instanceof Expression) {", "-\t\t\t\t\t\tvariables.addAll(new ConstraintExpressionFormula((Expression) body, r, COMPATIBLE).inputVariables(context));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// TODO: should I use LambdaExpression.resultExpressions? (is currently private).", "-\t\t\t\t\t\tbody.traverse(new ASTVisitor() {", "-\t\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope scope) {", "-\t\t\t\t\t\t\t\tvariables.addAll(new ConstraintExpressionFormula(returnStatement.expression, r, COMPATIBLE).inputVariables(context));", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}, (BlockScope)null);", "+\t\t\t\t\tExpression[] resultExpressions = resolved != null ? resolved.resultExpressions() : null;", "+\t\t\t\t\tfor (int i = 0, length = resultExpressions == null ? 0 : resultExpressions.length; i < length; i++) {", "+\t\t\t\t\t\tvariables.addAll(new ConstraintExpressionFormula(resultExpressions[i], r, COMPATIBLE).inputVariables(context));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee20d0b9dd571d99b3c58fb9d8766f57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "3a5401b27a838fcf33757f0b2ef8214fd68d66ea", "commitAfterChange": "e788af814a64e70ab3a9cd6cb10f201dff372018", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["+\t\t\t\t\tExpression[] exprs;", "-\t\t\t\t\t\tExpression body = (Expression)lambda.body();", "-\t\t\t\t\t\tresult.add(new ConstraintExpressionFormula(body, r, COMPATIBLE));", "+\t\t\t\t\t\texprs = new Expression[] {(Expression)lambda.body()};", "-\t\t\t\t\t\tExpression[] exprs = lambda.resultExpressions();", "-\t\t\t\t\t\tfor (int i = 0; i < exprs.length; i++) {", "-\t\t\t\t\t\t\tresult.add(new ConstraintExpressionFormula(exprs[i], r, COMPATIBLE));", "+\t\t\t\t\t\texprs = lambda.resultExpressions();", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i = 0; i < exprs.length; i++) {", "+\t\t\t\t\t\tExpression expr = exprs[i];", "+\t\t\t\t\t\tif (r.isProperType(true) && expr.resolvedType != null) {", "+\t\t\t\t\t\t\tTypeBinding exprType = expr.resolvedType;", "+\t\t\t\t\t\t\t// \"not compatible in an assignment context with R\"?", "+\t\t\t\t\t\t\tif (!(expr.isConstantValueOfTypeAssignableToType(exprType, r)", "+\t\t\t\t\t\t\t\t\t|| exprType.isCompatibleWith(r)))", "+\t\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tresult.add(new ConstraintExpressionFormula(expr, r, COMPATIBLE));"]}], "num": 11986}
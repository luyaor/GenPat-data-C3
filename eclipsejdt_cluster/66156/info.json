{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5cac1b2322e8aa567bd3153cc3a83f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f2f28ef3080e05564ee8cc75b10bc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "96ef1f14bcd478482a92078234eb6af9c101a0ca", "commitAfterChange": "1e440b3a3ee1ce045faaf4b9f0cc5f6c547c81ba", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " public SourceMapper getSourceMapper()", "signatureAfterChange": " public SourceMapper getSourceMapper()", "diff": ["+\tSourceMapper mapper;", "-\t\treturn ((PackageFragmentRootInfo) getElementInfo()).getSourceMapper();", "+\t\tPackageFragmentRootInfo rootInfo = (PackageFragmentRootInfo) getElementInfo();", "+\t\tmapper = rootInfo.getSourceMapper();", "+\t\tif (mapper == null) {", "+\t\t\t// first call to this method", "+\t\t\tIPath sourcePath= getSourceAttachmentPath();", "+\t\t\tif (sourcePath != null) {", "+\t\t\t\tIPath rootPath= getSourceAttachmentRootPath();", "+\t\t\t\tmapper = this.createSourceMapper(sourcePath, rootPath);", "+\t\t\t\tif (rootPath == null && mapper.rootPath != null) {", "+\t\t\t\t\t// as a side effect of calling the SourceMapper constructor, the root path was computed", "+\t\t\t\t\trootPath = new Path(mapper.rootPath);", "+\t\t\t\t\t", "+\t\t\t\t\t//set the property to the path of the mapped source", "+\t\t\t\t\tthis.setSourceAttachmentProperty(", "+\t\t\t\t\t\tsourcePath.toString() ", "+\t\t\t\t\t\t+ ATTACHMENT_PROPERTY_DELIMITER ", "+\t\t\t\t\t\t+ rootPath.toString());", "+\t\t\t\t}", "+\t\t\t\trootInfo.setSourceMapper(mapper);", "+\t\t\t} else {", "+\t\t\t\t// remember that no source is attached", "+\t\t\t\trootInfo.setSourceMapper(NO_SOURCE_MAPPER);", "+\t\t\t\tmapper = null;", "+\t\t\t}", "+\t\t} else if (mapper == NO_SOURCE_MAPPER) {", "+\t\t\t// a previous call to this method found out that no source was attached", "+\t\t\tmapper = null;", "+\t\t}", "-\t\treturn null;", "+\t\t// no source can be attached", "+\t\tmapper = null;", "+\treturn mapper;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac37dc0f7b02b43fe0119eedd0b2d60c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "05ca87fa79cdcdbf8adddd11b0044e5bbc381076", "commitAfterChange": "1a08d829c1b17811d102043c26cfbba0a6765570", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \t@Override \t@SuppressWarnings(\"unchecked\") \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding) throws InvalidInputException", "signatureAfterChange": " \t \t@Override \t@SuppressWarnings(\"unchecked\") \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding) throws InvalidInputException", "diff": ["+\t\tEclipseFileManager javaFileManager = null;", "+\t\tStandardJavaFileManager standardJavaFileManager = null;", "-\t\t\tEclipseFileManager javaFileManager = (EclipseFileManager) this.fileManager;", "+\t\t\tjavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\t}", "+\t\tif (this.fileManager instanceof StandardJavaFileManager) {", "+\t\t\tstandardJavaFileManager = (StandardJavaFileManager) this.fileManager;", "+\t\t}", "+\t\tif (javaFileManager != null) {", "-\t\t\tIterable<? extends File> location = javaFileManager.getLocation(StandardLocation.PLATFORM_CLASS_PATH);", "-\t\t\tif (location != null) {", "-\t\t\t\tfor (File file : location) {", "-\t\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "-\t    \t\t\t\tfile.getAbsolutePath(),", "-\t    \t\t\t\tnull,", "-\t    \t\t\t\tnull));", "-\t\t\t\t}", "+\t\t}", "+\t\tIterable<? extends File> location = null;", "+\t\tif (standardJavaFileManager != null) {", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.PLATFORM_CLASS_PATH);", "+\t\t}", "+\t\tif (location != null) {", "+\t\t\tfor (File file : location) {", "+\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "+    \t\t\t\tfile.getAbsolutePath(),", "+    \t\t\t\tnull,", "+    \t\t\t\tnull));", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleExtdirs(null));", "+\t\t}", "+\t\tif (javaFileManager != null) {", "+    \t\tif ((javaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "+    \t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+    \t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleExtdirs(null));", "+    \t\t}", "+\t\t}", "+\t\tif (standardJavaFileManager != null) {", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.SOURCE_PATH);", "+\t\t} else {", "+\t\t\tlocation = null;", "+\t\t}", "+\t\tif (location != null) {", "+\t\t\tfor (File file : location) {", "+\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "+    \t\t\t\tfile.getAbsolutePath(),", "+    \t\t\t\tnull,", "+    \t\t\t\tnull));", "-\t\t\tlocation = javaFileManager.getLocation(StandardLocation.SOURCE_PATH);", "-\t\t\tif (location != null) {", "-\t\t\t\tfor (File file : location) {", "-\t\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "-\t    \t\t\t\tfile.getAbsolutePath(),", "-\t    \t\t\t\tnull,", "-\t    \t\t\t\tnull));", "-\t\t\t\t}", "+\t\t}", "+\t\tif (standardJavaFileManager != null) {", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "+\t\t} else {", "+\t\t\tlocation = null;", "+\t\t}", "+\t\tif (location != null) {", "+\t\t\tfor (File file : location) {", "+\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "+    \t\t\t\tfile.getAbsolutePath(),", "+    \t\t\t\tnull,", "+    \t\t\t\tnull));", "-\t\t\tlocation = javaFileManager.getLocation(StandardLocation.CLASS_PATH);", "-\t\t\tif (location != null) {", "-\t\t\t\tfor (File file : location) {", "-\t\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "-\t    \t\t\t\tfile.getAbsolutePath(),", "-\t    \t\t\t\tnull,", "-\t    \t\t\t\tnull));", "-\t\t\t\t}", "-\t\t\t}", "+\t\t}", "+\t\tif (this.checkedClasspaths == null) {", "+\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleBootclasspath(null, null));", "+\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleClasspath(null, null));"]}], "num": 66156}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82012d447b923f5bd9f7140682b83a56", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6451ad16d93a27764cb90a53228cb0a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "5fbb7a295fe51a8ea6177a5aeab11cf819ed3177", "commitAfterChange": "cb36eca9d9b9093df77fd23643572b1315c79e4d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tcheckInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this, (this.bits & ASTNode.Unchecked) != 0);", "+\t\t\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\t\t\tthis.bits |= ASTNode.Unchecked;", "+\t\t\t\t}", "-\t\t\tcheckInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this, (this.bits & ASTNode.Unchecked) != 0);", "+\t\t\tif (checkInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\t\tthis.bits |= ASTNode.Unchecked;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c9ac2a833d601c775f19d6fb77a1875", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "dc882d5765f5ebe6ddd0fd95b556bea362bb123f", "commitAfterChange": "615fac1240227c90a7ae2e892e27bd3660f50d7d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\tIContainer outputFolder = outputPath.segmentCount() == 1", "-\t\t\t\t\t? (IContainer) javaProject.getProject()", "-\t\t\t\t\t: (IContainer) root.getFolder(outputPath);", "-\t\t\t\tif (!outputFolder.exists())", "-\t\t\t\t\tcreateFolder(outputFolder, javaProject.getProject());", "+\t\t\t\tIContainer outputFolder;", "+\t\t\t\tif (outputPath.segmentCount() == 1) {", "+\t\t\t\t\toutputFolder = javaProject.getProject();", "+\t\t\t\t} else {", "+\t\t\t\t\toutputFolder = root.getFolder(outputPath);", "+\t\t\t\t\tif (!outputFolder.exists())", "+\t\t\t\t\t\tcreateFolder(outputFolder);", "+\t\t\t\t}"]}], "num": 18519}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a4823e0e69c58757cb8c34ec47b8891", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "220a74fa5cdbd0560674d45c4a58c26a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "9ecfd83150af2852591fa7ec68468d790c7eefcb", "commitAfterChange": "bbc460d21d93548b386e69b054c421a009cad4c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["+\t\t\tint invalidTagLineEnd = -1;", "+\t\t\tint invalidInlineTagLineEnd = -1;", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedTag(this.inlineTagStart, this.inlineTagStart);", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\t\t\t\tint end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t\t} // else {", "+\t\t\t\t\t\t\t\t\tinvalidInlineTagLineEnd = this.lineEnd;", "+\t\t\t\t\t\t\t\t} else if (this.textStart != -1 && this.textStart < invalidTagLineEnd) {", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, invalidTagLineEnd);", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+//\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+//\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\tif (!valid) {", "-\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\t\tvalidComment = false;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51600", "+\t\t\t\t\t\t\t\t\t\t// do not stop the inline tag when error is encountered to get text after", "+//\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\t\t\t\t\t\t\tvalidComment = false;", "+\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51600", "+\t\t\t\t\t\t\t\t\t\t// for DOM AST node, store tag as text in case of invalid syntax", "+\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\t\t\t\tparseTag();", "+\t\t\t\t\t\t\t\t\t\t\tthis.textStart = this.tagSourceEnd+1;", "+\t\t\t\t\t\t\t\t\t\t\tinvalidTagLineEnd  = this.lineEnd;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t//}", "-\t\t\t\t\t\tthis.inlineTagStarted = false;", "+//\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "+//\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidTag(this.inlineTagStart, this.index);", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\t\t\tint end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;", "+\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t} //else {", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t//}", "-\t\t\tif (this.lineStarted && this.textStart < previousPosition) {", "+\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\tint end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;", "+\t\t\t\t\tif (this.index >= this.endComment) end = invalidInlineTagLineEnd;", "+\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);", "+\t\t\t\t}", "+\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t}", "+\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "+\t\t\t\t}", "+\t\t\t} else if (this.lineStarted && this.textStart < previousPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc3d0496ab4f9074f4703eb7b3bc85b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "330aeaad59d1633d10c0cd3a9ee9ac57073b385f", "commitAfterChange": "960ce528d76bd309a28ce655fc14cff77629ffa5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\tprotected boolean commentParse(int javadocStart, int javadocEnd) {", "-", "+\tprotected boolean commentParse() {", "+\t\t", "-\t\t\tthis.scanner.resetTo(javadocStart, javadocEnd);", "-\t\t\tthis.endComment = javadocEnd;", "-\t\t\tthis.index = javadocStart;", "-\t\t\treadChar(); // starting '/'", "+\t\t\tthis.linePtr = getLineNumber(this.firstTagPosition);", "+\t\t\tint realStart = this.linePtr==1 ? javadocStart : this.scanner.getLineEnd(this.linePtr-1)+1;", "+\t\t\tif (realStart < javadocStart) realStart = javadocStart;", "+\t\t\tthis.scanner.resetTo(realStart, javadocEnd);", "+\t\t\tthis.index = realStart;", "+\t\t\tif (realStart == javadocStart) {", "+\t\t\t\treadChar(); // starting '/'", "+\t\t\t\treadChar(); // first '*'", "+\t\t\t}", "-\t\t\treadChar(); // first '*'", "-\t\t\tchar nextCharacter= readChar(); // second '*'", "-\t\t\t", "+\t\t\tchar nextCharacter = 0;", "+\t\t\tif (realStart == javadocStart) nextCharacter = readChar(); // second '*'", "+", "-\t\t\tthis.linePtr = getLineNumber(javadocStart);", "-\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : this.scanner.getLineEnd(this.linePtr);", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.javadocEnd: this.scanner.getLineEnd(this.linePtr) - 1;", "-\t\t\twhile (!abort && this.index < this.endComment) {", "+\t\t\tcharacterLoop: while (!abort && this.index < this.javadocEnd) {", "-\t\t\t\tif (this.index >= this.endComment) {", "+\t\t\t\tif (this.index >= this.javadocEnd) {", "-\t\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, previousPosition);", "-\t\t\t\t\t\t\t\t\tpushText(this.textStart, this.inlineTagStart);", "+\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, this.inlineTagStart);", "-\t\t\t\t\t\t\t\tpushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, invalidTagLineEnd);", "-\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.endComment);", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.javadocEnd);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {", "+\t\t\t\t\t\t\t\trefreshReturnStatement();", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, previousPosition);", "+\t\t\t\t\t\tif (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {", "+\t\t\t\t\t\t\trefreshReturnStatement();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\tif (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {", "+\t\t\t\t\t\t\trefreshReturnStatement();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\tif (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {", "+\t\t\t\t\t\t\trefreshReturnStatement();", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (this.index >= this.endComment) end = invalidInlineTagLineEnd;", "+\t\t\t\t\tif (this.index >= this.javadocEnd) end = invalidInlineTagLineEnd;", "-\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\tpushText(this.textStart, previousPosition);", "-\t\t\t\t}", "+\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t}", "-\t\t\t} else if (this.lineStarted && this.textStart < previousPosition) {", "+\t\t\t} else if (this.kind == DOM_PARSER && this.lineStarted && this.textStart < previousPosition) {"]}], "num": 16541}
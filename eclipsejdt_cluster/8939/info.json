{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "592e7d1e56cbdc6e5fade94d0e7d9844", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fccc69c1cb99ea43018d01ff0ecadbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "5174a8c02a257a6c5c2bc19d00e0cd6b27cfdb23", "commitAfterChange": "a0feb61305a24ade473a3a9b76bc23e1585af5a0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "diff": ["-\t\tif (Character.isLowerCase(patternChar = pattern[iPattern])) {", "+\t\t\t\t\t", "+\t\tif ((patternChar = pattern[iPattern]) < ScannerHelper.MAX_OBVIOUS", "+\t\t\t\t? ScannerHelper.ObviousIdentCharNatures[patternChar] == ScannerHelper.C_LOWER_LETTER", "+\t\t\t\t: Character.isLowerCase(patternChar)) {", "-\t\t\t\tif (Character.isLowerCase(nameChar)) {", "+\t\t\t\tif (nameChar < ScannerHelper.MAX_OBVIOUS) {", "+\t\t\t\t\tswitch (ScannerHelper.ObviousIdentCharNatures[nameChar]) {", "+\t\t\t\t\t\tcase ScannerHelper.C_LOWER_LETTER :", "+\t\t\t\t\t\tcase ScannerHelper.C_LETTER :", "+\t\t\t\t\t\t\t// lowercase name char is ignored", "+\t\t\t\t\t\t\tiName++;", "+\t\t\t\t\t\t\tcontinue checkName;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (Character.isLowerCase(nameChar)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a59f761844bc72782b61bd589c74813c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "251976e8fad9ff65049e5f83ba04649db3c182a3", "commitAfterChange": "56cb67c43913b7625a25f749d61b904524d06107", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic static final boolean match( \t\tchar[] pattern, \t\tint patternStart, \t\tint patternEnd, \t\tchar[] name, \t\tint nameStart, \t\tint nameEnd, \t\tboolean isCaseSensitive)", "signatureAfterChange": " \tpublic static final boolean match( \t\tchar[] pattern, \t\tint patternStart, \t\tint patternEnd, \t\tchar[] name, \t\tint nameStart, \t\tint nameEnd, \t\tboolean isCaseSensitive)", "diff": ["-\t\tcheckSegment : while (iName < nameEnd && iPattern < patternEnd) {", "+\t\tcheckSegment : while (iName < nameEnd) {", "+\t\t\tif (iPattern == patternEnd) {", "+\t\t\t\tiPattern = segmentStart; // mismatch - restart current segment", "+\t\t\t\tiName = ++prefixStart;", "+\t\t\t\tcontinue checkSegment;", "+\t\t\t}", "+\t\t\t\tif (segmentStart == patternEnd) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t/* chech current name character */", "-\t\t\tif ((isCaseSensitive", "-\t\t\t\t? name[iName]", "-\t\t\t\t: Character.toLowerCase(name[iName]))", "-\t\t\t\t!= patternChar", "-\t\t\t\t&& patternChar != '?') {", "+\t\t\t/* check current name character */", "+\t\t\tif ((isCaseSensitive ? name[iName] : Character.toLowerCase(name[iName]))", "+\t\t\t\t\t\t!= patternChar", "+\t\t\t\t\t&& patternChar != '?') {"]}], "num": 8939}
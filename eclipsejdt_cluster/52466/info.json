{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecf97d00d87e8f90e4732f6656fa78b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a16f304f20343a2209cf9732b64db5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "b0c126113d3919e827d562fe7ceede775b6f96a6", "commitAfterChange": "1636f4f6a9a908a8764c3fcbad745e3e39a0b116", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void addSpecialMethods()", "signatureAfterChange": " \tpublic void addSpecialMethods()", "diff": ["-\t\tboolean doneGeneratingLambdas = false;", "-\t\tint currentLambda = 0;", "-\t\tdo {", "-\t\t\tLambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();  // refresh as a lambda code generation could schedule nested lambdas for code generation.", "-\t\t\tint lambdaCount = lambdas == null ? 0 : lambdas.length;", "-\t\t\tif (lambdaCount > currentLambda) {", "-\t\t\t\tLambdaExpression lambda = lambdas[currentLambda++];", "-\t\t\t\tif (lambda != null) // null ==> completely amorphous synthetic lambdas for array construction and such.", "-\t\t\t\t\tlambda.generateCode(this.referenceBinding.scope, this);", "-\t\t\t} else {", "-\t\t\t\tdoneGeneratingLambdas = true;", "-\t\t\t}", "-\t\t} while (!doneGeneratingLambdas);", "-\t\t", "-\t\tSyntheticMethodBinding[] syntheticMethods = this.referenceBinding.syntheticMethods();", "-\t\tif (syntheticMethods != null) {", "-\t\t\tfor (int i = 0, max = syntheticMethods.length; i < max; i++) {", "-\t\t\t\tSyntheticMethodBinding syntheticMethod = syntheticMethods[i];", "-\t\t\t\tswitch (syntheticMethod.purpose) {", "-\t\t\t\t\tcase SyntheticMethodBinding.FieldReadAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldReadAccess :", "-\t\t\t\t\t\t// generate a method info to emulate an reading access to", "-\t\t\t\t\t\t// a non-accessible field", "-\t\t\t\t\t\taddSyntheticFieldReadAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.FieldWriteAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldWriteAccess :", "-\t\t\t\t\t\t// generate a method info to emulate an writing access to", "-\t\t\t\t\t\t// a non-accessible field", "-\t\t\t\t\t\taddSyntheticFieldWriteAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.MethodAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.SuperMethodAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.BridgeMethod :", "-\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible method / super-method or bridge method", "-\t\t\t\t\t\taddSyntheticMethodAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.ConstructorAccess :", "-\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible constructor", "-\t\t\t\t\t\taddSyntheticConstructorAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.EnumValues :", "-\t\t\t\t\t\t// generate a method info to define <enum>#values()", "-\t\t\t\t\t\taddSyntheticEnumValuesMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.EnumValueOf :", "-\t\t\t\t\t\t// generate a method info to define <enum>#valueOf(String)", "-\t\t\t\t\t\taddSyntheticEnumValueOfMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.SwitchTable :", "-\t\t\t\t\t\t// generate a method info to define the switch table synthetic method", "-\t\t\t\t\t\taddSyntheticSwitchTable(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.TooManyEnumsConstants :", "-\t\t\t\t\t\taddSyntheticEnumInitializationMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.ArrayConstructor:", "-\t\t\t\t\t\taddSyntheticArrayConstructor(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "+\t\tint emittedSyntheticsCount = 0;", "+\t\tboolean continueScanningSynthetics = true;", "+\t\twhile (continueScanningSynthetics) {", "+\t\t\tcontinueScanningSynthetics = false;", "+\t\t\tSyntheticMethodBinding[] syntheticMethods = this.referenceBinding.syntheticMethods();", "+\t\t\tint currentSyntheticsCount = syntheticMethods == null ? 0: syntheticMethods.length;", "+\t\t\tif (emittedSyntheticsCount != currentSyntheticsCount) {", "+\t\t\t\tfor (int i = emittedSyntheticsCount, max = currentSyntheticsCount; i < max; i++) {", "+\t\t\t\t\tSyntheticMethodBinding syntheticMethod = syntheticMethods[i];", "+\t\t\t\t\tswitch (syntheticMethod.purpose) {", "+\t\t\t\t\t\tcase SyntheticMethodBinding.FieldReadAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldReadAccess :", "+\t\t\t\t\t\t\t// generate a method info to emulate an reading access to", "+\t\t\t\t\t\t\t// a non-accessible field", "+\t\t\t\t\t\t\taddSyntheticFieldReadAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.FieldWriteAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldWriteAccess :", "+\t\t\t\t\t\t\t// generate a method info to emulate an writing access to", "+\t\t\t\t\t\t\t// a non-accessible field", "+\t\t\t\t\t\t\taddSyntheticFieldWriteAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.MethodAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SuperMethodAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.BridgeMethod :", "+\t\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible method / super-method or bridge method", "+\t\t\t\t\t\t\taddSyntheticMethodAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.ConstructorAccess :", "+\t\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible constructor", "+\t\t\t\t\t\t\taddSyntheticConstructorAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.EnumValues :", "+\t\t\t\t\t\t\t// generate a method info to define <enum>#values()", "+\t\t\t\t\t\t\taddSyntheticEnumValuesMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.EnumValueOf :", "+\t\t\t\t\t\t\t// generate a method info to define <enum>#valueOf(String)", "+\t\t\t\t\t\t\taddSyntheticEnumValueOfMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SwitchTable :", "+\t\t\t\t\t\t\t// generate a method info to define the switch table synthetic method", "+\t\t\t\t\t\t\taddSyntheticSwitchTable(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.TooManyEnumsConstants :", "+\t\t\t\t\t\t\taddSyntheticEnumInitializationMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.ArrayConstructor:", "+\t\t\t\t\t\t\taddSyntheticArrayConstructor(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.LambdaMethod:", "+\t\t\t\t\t\t\tsyntheticMethod.lambda.generateCode(this.referenceBinding.scope, this);", "+\t\t\t\t\t\t\tcontinueScanningSynthetics = true; // lambda code generation could schedule additional nested lambdas for code generation.", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\temittedSyntheticsCount = currentSyntheticsCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "531ae08590ccb0107d6ab04dc6529d5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tprivate void createICompilationUnits()", "signatureAfterChange": " \tprivate void createICompilationUnits()", "diff": ["-\t\tfinal int len = _files.length;", "-\t\t_units = new ICompilationUnit[len];\t\t", "-\t\tint count = 0;", "-\t\tfor( int i=0; i<len; i++ ){", "-\t\t\t_units[i] = JavaCore.createCompilationUnitFrom(_files[i]);", "-\t\t\tif( _units[i] != null )", "-\t\t\t\tcount ++;", "-\t\t}", "+\t\t_units = createICUsFrom(_filesWithAnnotation);", "-\t\tif(count != len){", "-\t\t\tfinal IFile[] newFiles = new IFile[count];", "-\t\t\tfinal ICompilationUnit[] newUnits = new ICompilationUnit[count];", "+\t\tfinal int actualLen = getNumberNonNulls(_units);", "+\t\tif(actualLen != _filesWithAnnotation.length ){", "+\t\t\tfinal IFile[] newFiles = new IFile[actualLen];", "+\t\t\tfinal ICompilationUnit[] newUnits = new ICompilationUnit[actualLen];", "-\t\t\tfor( int i=0; i<len; i++ ){", "+\t\t\tfor( int i=0; i<_filesWithAnnotation.length ; i++ ){", "-\t\t\t\t\tnewFiles[newIndex] = _files[i];", "+\t\t\t\t\tnewFiles[newIndex] = _filesWithAnnotation[i];", "-\t\t\t_files = newFiles;", "+\t\t\t_filesWithAnnotation = newFiles;"]}], "num": 52466}
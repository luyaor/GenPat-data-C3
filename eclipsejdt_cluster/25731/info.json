{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "710392295cfc3099d47ca25ac16be495", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d0b9748695052c090e38a6e9424ce3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "3916c67b0128c74e08a07f109332d68e11705964", "commitAfterChange": "db24d1d0025b319685ad3bf80253e7a07fb708a2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["-", "-\t\t// Get projects in workspace (save projects creation on local boxes...)", "+\t\t", "+\t\t// Get wksp info", "-\t\tIProject[] projects = workspaceRoot.getProjects();", "-\t\tint projectsLength = projects.length;", "+\t\tString targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-\t\t// If no projects then unzip file", "-\t\tif (projectsLength == 0) {", "-\t\t\tprojects = createFullSourceWorkspace();", "-\t\t\tprojectsLength = projects.length;", "+\t\t// Get projects directories", "+\t\tFile wkspDir = new File(targetWorkspacePath);", "+\t\tFullSourceProjectsFilter filter = new FullSourceProjectsFilter();", "+\t\tFile[] directories = wkspDir.listFiles(filter);", "+\t\tlong start = System.currentTimeMillis();", "+\t\tint dirLength = directories.length;", "+\t\tif (dirLength != 62) {", "+\t\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "+\t\t\tSystem.out.println(\"Unzipping \"+fullSourceZipPath);", "+\t\t\tSystem.out.print(\"\tin \"+targetWorkspacePath+\"...\");", "+\t\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "+\t\t\tSystem.out.println(\" done in \"+(System.currentTimeMillis()-start)+\"ms.\");", "-\t\tfor (int i = 0; i < projectsLength; i++) {", "-\t\t\tENV.addProject(projects[i]);", "+\t\tSystem.out.print(\"Create and open projects in environment...\");", "+\t\tstart = System.currentTimeMillis();", "+\t\tfor (int i = 0; i < dirLength; i++) {", "+\t\t\tString dirName = directories[i].getName();", "+\t\t\tIProject project = workspaceRoot.getProject(dirName);", "+\t\t\tif (project.exists()) {", "+\t\t\t\tENV.addProject(project);", "+\t\t\t} else {", "+\t\t\t\tENV.addProject(dirName);", "+\t\t\t}", "+\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6ee7e34c3161f1d43c3589e0027348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "e08c13a0c3bb4d09711ac8489d25db103dbf1d29", "commitAfterChange": "ef615d69291882d9684ed70ee76e1c7e60ee0223", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void setUpBigProject() throws CoreException", "signatureAfterChange": " private void setUpBigProject() throws CoreException", "diff": ["-//\t\tboolean linux = \"linux\".equals(System.getProperty(\"osgi.os\", \"?\"));", "+\t\tlong start = System.currentTimeMillis();", "+\t\tif (PRINT) System.out.println(\"Create project \"+BIG_PROJECT_NAME+\":\");", "+", "-//\t\tfinal int rootLength = linux ? LINUX_FOLDERS_COUNT : FOLDERS_COUNT;", "-\t\tfinal String[] sourceFolders = new String[/*rootLength*/FOLDERS_COUNT];", "-\t\tfor (int i = 0; i < /*rootLength*/FOLDERS_COUNT; i++) {", "+\t\tfinal String[] sourceFolders = new String[FOLDERS_COUNT];", "+\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\tif (PRINT) System.out.print(\"\t- create \"+FOLDERS_COUNT+\" folders and \"+PACKAGES_COUNT+\" packages...\");", "-//\t\tint packLength = linux ? LINUX_PACKAGES_COUNT : PACKAGES_COUNT;", "-\t\tfor (int i = 0; i < /*rootLength*/FOLDERS_COUNT; i++) {", "-\t\t\tfor (int j = 0; j < /*packLength*/PACKAGES_COUNT; j++) {", "+\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\t\tif (PRINT && ((i+1)%10)==0) System.out.print(\"\t\t+ folder src\"+i+\"...\");", "+\t\t\tlong top = System.currentTimeMillis();", "+\t\t\tfor (int j = 0; j < PACKAGES_COUNT; j++) {", "+\t\t\tif (PRINT && ((i+1)%10)==0) System.out.println(\"(\"+(System.currentTimeMillis()-top)+\"ms)\");", "+\t\t}", "+\t\tif (PRINT) {", "+\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "+\t\t\tstart = System.currentTimeMillis();", "+\t\t\tSystem.out.print(\"\t- add project to full source workspace...\");", "-\t\tBIG_PROJECT = (JavaProject) createJavaProject(\"BigProject\", sourceFolders, \"bin\", \"1.4\");", "+\t\tBIG_PROJECT = (JavaProject) createJavaProject(BIG_PROJECT_NAME, sourceFolders, \"bin\", \"1.4\");", "-\t\tBIG_PROJECT_TYPE_PATH = new Path(\"/BigProject/src\" + (/*rootLength*/FOLDERS_COUNT-1) + \"/org/eclipse/jdt/core/tests\" + (/*rootLength*/FOLDERS_COUNT-1) + \"/performance\" + (/*packLength*/PACKAGES_COUNT-1) + \"/TestBigProject.java\");", "+\t\tif (PRINT) {", "+\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "+\t\t\tstart = System.currentTimeMillis();", "+\t\t\tSystem.out.print(\"\t- Create compilation unit with secondary type...\");", "+\t\t}", "+\t\tBIG_PROJECT_TYPE_PATH = new Path(\"/BigProject/src\" + (FOLDERS_COUNT-1) + \"/org/eclipse/jdt/core/tests\" + (FOLDERS_COUNT-1) + \"/performance\" + (PACKAGES_COUNT-1) + \"/TestBigProject.java\");", "-\t\tString content = \"package org.eclipse.jdt.core.tests\" + (/*rootLength*/FOLDERS_COUNT-1) + \".performance\" + (/*packLength*/PACKAGES_COUNT-1) + \";\\n\" +", "+\t\tString content = \"package org.eclipse.jdt.core.tests\" + (FOLDERS_COUNT-1) + \".performance\" + (PACKAGES_COUNT-1) + \";\\n\" +", "+\t\tif (PRINT) {", "+\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "+\t\t}"]}], "num": 25731}
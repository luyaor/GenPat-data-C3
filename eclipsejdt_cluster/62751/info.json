{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "981049fda44233a1947333acd35f534c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7144a10a5828f2c305ac5d5e24ef6745", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectResourceCopier.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tprivate boolean deleteResourceCopyFromOutput(IResource resource)", "signatureAfterChange": "\r private boolean deleteResourceCopyFromOutput(IResource resource)", "diff": ["+ */\r", "+private boolean deleteResourceCopyFromOutput(IResource resource) {\r", "-\t */\r", "-\tprivate boolean deleteResourceCopyFromOutput(IResource resource) {\r", "+\tIPath sourceFolderPath = getSourceFolderPath(resource);\r", "+\tif (sourceFolderPath == null) return false; // resource is not inside the classpath\r", "-\t\tIPath sourceFolderPath = getSourceFolderPath(resource);\r", "-\t\tif (sourceFolderPath == null)\r", "-\t\t\treturn false; // resource is not inside the classpath\r", "-\r", "-\t\tIPath resourcePath = resource.getFullPath();\r", "-\t\tif (resourcePath.equals(sourceFolderPath))\r", "-\t\t\treturn true; // skip source folder itself\r", "-\t\tif (resourcePath.equals(this.outputLocation))\r", "-\t\t\treturn false; // do not visit the binary output\t\r", "-\t\tIPath pathSuffix, targetPath;\r", "-\r", "-\t\tswitch (resource.getType()) {\r", "-\t\t\tcase IResource.FILE :\r", "-\t\t\t\tif (!\"java\".equals(resource.getFileExtension())) { // ignore source files\r", "-\r", "-\t\t\t\t\tIFile currentFile = (IFile) resource;\r", "-\t\t\t\t\tpathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());\r", "-\t\t\t\t\ttargetPath = this.outputLocation.append(pathSuffix);\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tIFile previousFile = this.root.getFile(targetPath);\r", "-\t\t\t\t\t\tif (previousFile.exists())\r", "-\t\t\t\t\t\t\tpreviousFile.delete(true, true, null);\r", "-\t\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t\tthrow this.devContext.internalException(e);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\tIContainer currentFolder = (IFolder) resource;\r", "+\tIPath resourcePath = resource.getFullPath();\r", "+\tif (resourcePath.equals(sourceFolderPath)) return true; // skip source folder itself\r", "+\tif (resourcePath.equals(this.outputLocation)) return false; // do not visit the binary output\t\r", "+\tIPath pathSuffix, targetPath;\r", "+\t\r", "+\tswitch (resource.getType()){\r", "+\t\tcase IResource.FILE :\r", "+\t\t\tif (!\"java\".equals(resource.getFileExtension())){ // ignore source files\r", "+\t\t\t\t\r", "+\t\t\t\tIFile currentFile = (IFile) resource;\r", "-\t\t\t\tIFolder targetFolder = this.root.getFolder(targetPath);\r", "-\t\t\t\tif (targetFolder.exists()) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\ttargetFolder.delete(true, false, null);\r", "-\t\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t\tthrow this.devContext.internalException(e);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\treturn false;\r", "-\t}\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tIFile previousFile = this.root.getFile(targetPath);\r", "+\t\t\t\t\tif (previousFile.exists()) previousFile.delete(true, true, null);\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\t//throw this.devContext.internalException(e);\r", "+\t\t\tbreak;\r", "+\t\tcase IResource.FOLDER :\r", "+\t\t\tIContainer currentFolder = (IFolder) resource;\r", "+\t\t\tpathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());\r", "+\t\t\ttargetPath = this.outputLocation.append(pathSuffix);\r", "+\t\t\tIFolder targetFolder = this.root.getFolder(targetPath);\r", "+\t\t\tif (targetFolder.exists()){\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttargetFolder.delete(true, false, null);\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\t//throw this.devContext.internalException(e);\r", "+\t\t\tbreak;\r", "+\treturn false;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0a5ee04fd2b6038e0edb8cc4df2f472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectResourceCopier.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprivate boolean copyToOutput(IResource resource)", "signatureAfterChange": "\r private boolean copyToOutput(IResource resource)", "diff": ["+ */\r", "+private boolean copyToOutput(IResource resource) {\r", "-\t */\r", "-\tprivate boolean copyToOutput(IResource resource) {\r", "+\tif (!resource.exists()) return false;\r", "+\tIPath sourceFolderPath = getSourceFolderPath(resource);\r", "+\tIPath resourcePath = resource.getFullPath();\r", "-\t\tif (!resource.exists())\r", "-\t\t\treturn false;\r", "-\t\tIPath sourceFolderPath = getSourceFolderPath(resource);\r", "-\t\tIPath resourcePath = resource.getFullPath();\r", "-\r", "-\t\tswitch (resource.getType()) {\r", "-\t\t\tcase IResource.FILE :\r", "-\t\t\t\tif (sourceFolderPath == null)\r", "-\t\t\t\t\treturn false; // resource is not inside the classpath\t\t\r", "-\t\t\t\tif (!\"java\".equals(resource.getFileExtension())) { // ignore source files\r", "-\r", "-\t\t\t\t\tIFile currentFile = (IFile) resource;\r", "-\t\t\t\t\tIPath pathSuffix =\r", "-\t\t\t\t\t\tresourcePath.removeFirstSegments(sourceFolderPath.segmentCount());\r", "-\t\t\t\t\tIPath targetPath = this.outputLocation.append(pathSuffix);\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tIFile previousFile = this.root.getFile(targetPath);\r", "-\t\t\t\t\t\tif (previousFile.exists())\r", "-\t\t\t\t\t\t\tpreviousFile.delete(true, false, null);\r", "-\t\t\t\t\t\tcurrentFile.copy(targetPath, true, null);\r", "-\t\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t\tthrow this.devContext.internalException(e);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IResource.PROJECT :\r", "-\t\t\t\tif (resourcePath.equals(this.outputLocation))\r", "-\t\t\t\t\treturn false; // do not visit the binary output\r", "-\t\t\t\tif (resourcePath.equals(sourceFolderPath))\r", "-\t\t\t\t\treturn true; // skip source folder itself\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\tif (resourcePath.equals(this.outputLocation))\r", "-\t\t\t\t\treturn false; // do not visit the binary output\r", "-\t\t\t\tif (sourceFolderPath == null)\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t\t// continue inside folder (source folder might be one of its children)\t\t\r", "-\t\t\t\tif (resourcePath.equals(sourceFolderPath))\r", "-\t\t\t\t\treturn true; // skip source folder itself\r", "-\t\t\t\tIContainer currentFolder = (IFolder) resource;\r", "-\r", "-\t\t\t\tIPath pathSuffix =\r", "-\t\t\t\t\tresourcePath.removeFirstSegments(sourceFolderPath.segmentCount());\r", "+\tswitch (resource.getType()){\r", "+\t\tcase IResource.FILE :\r", "+\t\t\tif (sourceFolderPath == null) return false; // resource is not inside the classpath\t\t\r", "+\t\t\tif (!\"java\".equals(resource.getFileExtension())){ // ignore source files\r", "+\t\t\t\t\r", "+\t\t\t\tIFile currentFile = (IFile) resource;\r", "+\t\t\t\tIPath pathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());\r", "-\t\t\t\tIFolder targetFolder = this.root.getFolder(targetPath);\r", "-\t\t\t\tif (!targetFolder.exists()) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\ttargetFolder.create(true, true, null);\r", "-\t\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t\tthrow this.devContext.internalException(e);\r", "-\t\t\t\t\t}\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tIFile previousFile = this.root.getFile(targetPath);\r", "+\t\t\t\t\tif (previousFile.exists()) previousFile.delete(true, false, null);\r", "+\t\t\t\t\tcurrentFile.copy(targetPath, true, null);\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\t//throw this.devContext.internalException(e);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\treturn true;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase IResource.PROJECT :\r", "+\t\t\tif (resourcePath.equals(this.outputLocation)) return false; // do not visit the binary output\r", "+\t\t\tif (resourcePath.equals(sourceFolderPath)) return true; // skip source folder itself\r", "+\t\t\tbreak;\r", "+\t\tcase IResource.FOLDER :\r", "+\t\t\tif (resourcePath.equals(this.outputLocation)) return false; // do not visit the binary output\r", "+\t\t\tif (sourceFolderPath == null) return true; // continue inside folder (source folder might be one of its children)\t\t\r", "+\t\t\tif (resourcePath.equals(sourceFolderPath)) return true; // skip source folder itself\r", "+\t\t\tIContainer currentFolder = (IFolder) resource;\r", "+\t\t\t\t\r", "+\t\t\tIPath pathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());\r", "+\t\t\tIPath targetPath = this.outputLocation.append(pathSuffix);\r", "+\t\t\tIFolder targetFolder = this.root.getFolder(targetPath);\r", "+\t\t\tif (!targetFolder.exists()){\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttargetFolder.create(true, true, null);\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\t//throw this.devContext.internalException(e);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\treturn true;\r", "+}\r"]}], "num": 62751}
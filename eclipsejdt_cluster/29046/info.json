{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ef22b8bd13b35a93ce9ed2cf8cb58d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d762e54e81a1e791b802e9e752ac9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "f463f267bd3e26fe15afb712785b8045bca4918d", "commitAfterChange": "127c5aac940d6a1c5a28540905b27ce397eeca14", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public int nullStatus(FlowInfo flowInfo)", "diff": ["-\tpublic int nullStatus(FlowInfo flowInfo) {", "+public int nullStatus(FlowInfo flowInfo) {", "-\t\tif (/* (this.bits & IsNonNull) != 0 || */", "-\t\t\tthis.constant != null && this.constant != Constant.NotAConstant)", "-\t\treturn FlowInfo.NON_NULL; // constant expression cannot be null", "+\tif (/* (this.bits & IsNonNull) != 0 || */", "+\t\tthis.constant != null && this.constant != Constant.NotAConstant)", "+\treturn FlowInfo.NON_NULL; // constant expression cannot be null", "+\t\tif (flowInfo.isPotentiallyNull(local))", "+\t\t\treturn FlowInfo.POTENTIALLY_NULL;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3528992288e30bab69c00a6c6fbeee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public int nullStatus(FlowInfo flowInfo, FlowContext flowContext)", "diff": ["-public int nullStatus(FlowInfo flowInfo) {", "-", "-\tif (/* (this.bits & IsNonNull) != 0 || */", "-\t\tthis.constant != null && this.constant != Constant.NotAConstant)", "-\t\treturn FlowInfo.NON_NULL; // constant expression cannot be null", "-", "-\tLocalVariableBinding local = localVariableBinding();", "-\tif (local != null)", "-\t\treturn flowInfo.nullStatus(local);", "+public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {", "+\t// many kinds of expression need no analysis / are always non-null, make it the default:"]}], "num": 29046}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c37e5f08e23c362e0277543e700aa5fc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0336930fc75781fbcff17a46c5bb9db9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "2c31016dddf9aa4fc99eb36c535dd6602745e4be", "commitAfterChange": "fd3b7a5f13831ab502da35b25283f8932b2b1174", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\t\t\t} else if (lastPackage != null && lastPackage.isComment() && pack.isSameGroup(lastPackage)) {", "+\t\t\t\t\t\t// the last pack may be a dummy for a comment which doesn't belong to any extended range", "+\t\t\t\t\t\tstringsToInsert.add(lineDelim);", "+\t\t\t\tboolean allImportsAddedToStar = false;", "+\t\t\t\t\tallImportsAddedToStar = true;", "-\t\t\t\t\t\t\tString str= getNewImportString(currDecl.getElementName(), isStatic, lineDelim);", "+\t\t\t\t\t\t\tIRegion rangeBefore = currDecl.getPrecedingCommentRange();", "+\t\t\t\t\t\t\tIRegion rangeAfter = currDecl.getTrailingCommentRange();", "+\t\t\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\t\t\tstringsToInsert.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tString trailingComment = null;", "+\t\t\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\t\t\ttrailingComment = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString str= getNewImportString(currDecl.getElementName(), isStatic, trailingComment, lineDelim);", "-\t\t\t\t\t\t} else if (doStarImport && !currDecl.isOnDemand()) {", "+\t\t\t\t\t\t} else if (doStarImport && !currDecl.isOnDemand() && !allImportsAddedToStar) {", "-\t\t\t\tfor (int i = 0, max = this.preserveExistingCommentsRanges.length; i < max; i++) {", "+\t\t\t\tfor (int i = 0, max = this.preserveExistingCommentsRanges.length; (i < max && this.preserveExistingCommentsRanges[i] != null); i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0920a6bd4d0acd5bff131e748af36ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "01507ee98d5beecae71082dd137e782bb5a3bef0", "commitAfterChange": "919024c6945d276058446a723145394a23656d2f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\t\t\t} else if (lastPackage != null && lastPackage.isComment() && pack.isSameGroup(lastPackage)) {", "+\t\t\t\t\t\t// the last pack may be a dummy for a comment which doesn't belong to any extended range", "+\t\t\t\t\t\tstringsToInsert.add(lineDelim);", "+\t\t\t\tboolean allImportsAddedToStar = false;", "+\t\t\t\t\tallImportsAddedToStar = true;", "-\t\t\t\t\t\t\tString str= getNewImportString(currDecl.getElementName(), isStatic, lineDelim);", "+\t\t\t\t\t\t\tIRegion rangeBefore = currDecl.getPrecedingCommentRange();", "+\t\t\t\t\t\t\tIRegion rangeAfter = currDecl.getTrailingCommentRange();", "+\t\t\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\t\t\tstringsToInsert.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tString trailingComment = null;", "+\t\t\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\t\t\ttrailingComment = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString str= getNewImportString(currDecl.getElementName(), isStatic, trailingComment, lineDelim);", "-\t\t\t\t\t\t} else if (doStarImport && !currDecl.isOnDemand()) {", "+\t\t\t\t\t\t} else if (doStarImport && !currDecl.isOnDemand() && !allImportsAddedToStar) {", "-\t\t\t\tfor (int i = 0, max = this.preserveExistingCommentsRanges.length; i < max; i++) {", "+\t\t\t\tfor (int i = 0, max = this.preserveExistingCommentsRanges.length; (i < max && this.preserveExistingCommentsRanges[i] != null); i++) {"]}], "num": 41720}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b033de37e0690d6dbdc148d07a90e1f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729991824f0ee9842f16ae6fc5844c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "30210dace16fbfb20e6910ce9f1394f40ee548a8", "commitAfterChange": "5a6c51c6c96c32c434285845bfd71f9a0c6d8df5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic static Hashtable getOptions()", "signatureAfterChange": " \tpublic static Hashtable getOptions()", "diff": ["-\t\t\t// get preferences set to their default", "-\t\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "-\t\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "-\t\t\t\tString propertyName = defaultPropertyNames[i];", "-\t\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t\t}", "-\t\t\t}\t\t", "+\t\t\t// initialize preferences to their default", "+\t\t\tIterator iterator = optionNames.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t    String propertyName = (String) iterator.next();", "+\t\t\t    options.put(propertyName, preferences.getDefaultString(propertyName));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77286fc78366c41178dcd404513ebf0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "b68ef63283c9f409824eec0ff2124a6153a7e920", "commitAfterChange": "a1a6d45179940b02582a205f563838be0a6dc046", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\r", "-\tCompilationResult result = new CompilationResult(sourceTypes[0].getFileName(), 1, 1);\r", "+\t// find most enclosing type first (needed when explicit askForType(...) is done \r", "+\t// with a member type (e.g. p.A$B))\r", "+\tISourceType sourceType = sourceTypes[0];\r", "+\twhile (sourceType.getEnclosingType() != null)\r", "+\t\tsourceType = sourceType.getEnclosingType();\r", "+\t\r", "+\t// build corresponding compilation unit\r", "+\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1);\r", "-\t\tSourceTypeConverter.buildCompilationUnit(sourceTypes, false, true, lookupEnvironment.problemReporter, result);\r", "-\r", "+\t\tSourceTypeConverter.buildCompilationUnit(new ISourceType[] {sourceType}, false, true, lookupEnvironment.problemReporter, result);\r", "+\t\t\r", "+\t// build bindings\r", "-\t\tfor (int i = 0, length = sourceTypes.length; i < length; i++) {\r", "-\t\t\trememberWithMemberTypes(sourceTypes[i], unit.types[i].binding);\r", "-\t\t}\r", "-\r", "+\t\trememberWithMemberTypes(sourceType, unit.types[0].binding);\r"]}], "num": 9915}
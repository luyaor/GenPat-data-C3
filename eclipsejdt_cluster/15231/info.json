{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "907561f8430dfcb3071d418ca65e6916", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27082451f1f7995829abc0f25f345c83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e733dacf7e2cb0f1c468842218b8cf0fff8a2c3b", "commitAfterChange": "ef98b1110b7ab3f8a6089643c80689cd9cb542d0", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tprivate String getPreserveEmptyLines(int count)", "signatureAfterChange": " \tprivate String getPreserveEmptyLines(int count)", "diff": ["+\t\t\t\t\t// Reset indentation level to the location output", "+\t\t\t\t\tthis.indentationLevel = this.currentAlignment.location.outputIndentationLevel;", "+\t\t\t\t\tthis.numberOfIndentations = this.currentAlignment.location.numberOfIndentations;", "+\t\t\t\t\tthis.formatter.lastLocalDeclarationSourceStart = this.currentAlignment.location.lastLocalDeclarationSourceStart;", "+\t\t\t\t\t// Create new line keeping the existing indentation", "-\t\t\t\t\tif (this.currentAlignment.useBreakIndentation) {", "+\t\t\t\t\tint currentColumn = getCurrentIndentation(this.scanner.currentPosition);", "+\t\t\t\t\tAlignment rootAlignment = this.currentAlignment;", "+\t\t\t\t\twhile (rootAlignment.enclosing != null) {", "+\t\t\t\t\t\trootAlignment = rootAlignment.enclosing;", "+\t\t\t\t\t}", "+\t\t\t\t\tLocation location = rootAlignment.location;", "+\t\t\t\t\tif (currentColumn > location.inputColumn) {", "-\t\t\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t\t\t\t\tthis.indentationLevel += currentColumn - location.inputColumn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4094f21b9d9355911b5ef079e61e6d0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7d60d6a1b8e52fde368eb35071909d0d4d0895e", "commitAfterChange": "dbccfabc436a755dd314d3780906cc13c2df858a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate String getPreserveEmptyLines(int count)", "signatureAfterChange": " \tprivate String getPreserveEmptyLines(int count)", "diff": ["-\t\t\tif (this.currentAlignment != null && !this.formatter.preferences.join_wrapped_lines) {", "-\t\t\t\tint savedIndentation = this.indentationLevel;", "-\t\t\t\tStringBuffer buffer = new StringBuffer(getNewLine());", "-\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\tthis.indentationLevel = savedIndentation;", "-\t\t\t\treturn buffer.toString();", "+\t\t\tif (this.currentAlignment != null && this.memberAlignment != null && !this.formatter.preferences.join_wrapped_lines) {", "+\t\t\t\tif (this.memberAlignment.depth() <= this.currentAlignment.depth()) {", "+\t\t\t\t\tint savedIndentation = this.indentationLevel;", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer(getNewLine());", "+\t\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\tthis.indentationLevel = savedIndentation;", "+\t\t\t\t\treturn buffer.toString();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8db4b16c2c801eeb3728a0d064020c39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "418c9d96f68afdaa5bf2af6f5a37a844d4f83382", "commitAfterChange": "0ca5c78856085a3f8ae52f8191293310a57eb6c4", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tprivate String getPreserveEmptyLines(int count)", "signatureAfterChange": " \tprivate String getPreserveEmptyLines(int count)", "diff": ["+\t */", "-\t\tif (count > 0) {", "-\t\t\tif (this.formatter.preferences.number_of_empty_lines_to_preserve != 0) {", "-\t\t\t\tint linesToPreserve = Math.min(count, this.formatter.preferences.number_of_empty_lines_to_preserve);", "-\t\t\t\treturn getEmptyLines(linesToPreserve);", "+\t\tif (count == 0) {", "+\t\t\t// preserve line breaks in wrapping if specified", "+\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=198074", "+\t\t\tif (this.currentAlignment != null && this.formatter.preferences.preserve_existing_line_breaks) {", "+\t\t\t\tint savedIndentation = this.indentationLevel;", "+\t\t\t\tStringBuffer buffer = new StringBuffer(getNewLine());", "+\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\tthis.indentationLevel = savedIndentation;", "+\t\t\t\treturn buffer.toString();", "-\t\t\treturn getNewLine();", "+\t\t\treturn Util.EMPTY_STRING;", "-\t\treturn Util.EMPTY_STRING;", "+\t\tif (this.formatter.preferences.number_of_empty_lines_to_preserve != 0) {", "+\t\t\tint linesToPreserve = Math.min(count, this.formatter.preferences.number_of_empty_lines_to_preserve);", "+\t\t\treturn getEmptyLines(linesToPreserve);", "+\t\t}", "+\t\treturn getNewLine();"]}], "num": 15231}
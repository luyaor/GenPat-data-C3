{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c5028f1f8bbfe0643ca68782baf4ebb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d19f358a19185e53d6cd2e1efff1fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "f6b98e81e084c7fc5756b6873d78549cc1ce9d4c", "commitAfterChange": "334acc099e45b6ce9ec3bc9c1d31c4c1fb234636", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public String getTypeQualifiedName(char enclosingTypeSeparator)", "signatureAfterChange": " public String getTypeQualifiedName(char enclosingTypeSeparator)", "diff": ["-\tIType declaringType = this.getDeclaringType();", "-\tif (declaringType == null) {", "-\t\tString classFileName = this.getClassFile().getElementName();", "-\t\tif (classFileName.indexOf('$') == -1) {", "-\t\t\t// top level class file: name of type is same as name of class file", "-\t\t\treturn this.name;", "-\t\t} else {", "-\t\t\t// anonymous or local class file", "-\t\t\treturn classFileName.substring(0, classFileName.lastIndexOf('.')); // remove .class", "-\t\t}", "-\t} else {", "-\t\treturn ", "-\t\t\tdeclaringType.getTypeQualifiedName(enclosingTypeSeparator)", "-\t\t\t+ enclosingTypeSeparator", "-\t\t\t+ this.name;", "+\ttry {", "+\t\treturn getTypeQualifiedName(enclosingTypeSeparator, false/*don't show parameters*/);", "+\t} catch (JavaModelException e) {", "+\t\t// exception thrown only when showing parameters", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e306fc3d93d01e574f2e2cc9b508e8fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "commitAfterChange": "28d83829a5c5453c02025fb74750ed1594ff644e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r public String getTypeQualifiedName(char enclosingTypeSeparator)", "signatureAfterChange": "\r public String getTypeQualifiedName(char enclosingTypeSeparator)", "diff": ["-\tif (fParent.getElementType() == IJavaElement.CLASS_FILE) {\r", "-\t\tString name= fParent.getElementName();\r", "-\t\treturn name.substring(0,name.lastIndexOf('.'));\r", "-\t}\r", "-\tif (fParent.getElementType() == IJavaElement.TYPE) {\r", "-\t\tif (Character.isDigit(fName.charAt(0))) {\r", "-\t\t\treturn ((IType) fParent).getTypeQualifiedName(enclosingTypeSeparator);\r", "+\tIType declaringType = this.getDeclaringType();\r", "+\tif (declaringType == null) {\r", "+\t\tString classFileName = this.getClassFile().getElementName();\r", "+\t\tif (classFileName.indexOf('$') == -1) {\r", "+\t\t\t// top level class file: name of type is same as name of class file\r", "+\t\t\treturn fName;\r", "-\t\t\treturn ((IType) fParent).getTypeQualifiedName(enclosingTypeSeparator) + enclosingTypeSeparator + fName;\r", "+\t\t\t// anonymous or local class file\r", "+\t\t\treturn classFileName.substring(0, classFileName.lastIndexOf('.')); // remove .class\r", "+\t} else {\r", "+\t\treturn \r", "+\t\t\tdeclaringType.getTypeQualifiedName(enclosingTypeSeparator)\r", "+\t\t\t+ enclosingTypeSeparator\r", "+\t\t\t+ fName;\r", "-\tAssert.isTrue(false); // should not be reachable\r", "-\treturn null;\r"]}], "num": 36831}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13bc47c4e879b9893acfb0a6ca4f46a4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c48d682be8dbb739f24c5626bcb500d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "0d8b14fcdd186ef07894db465104582e473b32af", "commitAfterChange": "cb1176594034666f0f8d852dc8fc01987d54d11b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\t\t\t\tkind = IGenericType.ENUM_DECL;", "+\t\t\t\t\t\t\t\tkind = TypeDeclaration.ENUM_DECL;", "-\t\t\t\t\t\t\t\tkind = IGenericType.ANNOTATION_TYPE_DECL;", "+\t\t\t\t\t\t\t\tkind = TypeDeclaration.ANNOTATION_TYPE_DECL;", "-\t\t\t\t\t\t\t\tkind = IGenericType.CLASS_DECL;", "+\t\t\t\t\t\t\t\tkind = TypeDeclaration.CLASS_DECL;", "-\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE_DECL;", "+\t\t\t\t\t\t\t\tkind = TypeDeclaration.INTERFACE_DECL;", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, typeDeclaration.kind(), packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, TypeDeclaration.kind(typeDeclaration.modifiers), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, memberTypeDeclaration.kind(), packageDeclaration, memberTypeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, TypeDeclaration.kind(memberTypeDeclaration.modifiers), packageDeclaration, memberTypeDeclaration.name)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2910d7dfbb7bba70c0db1921fae76df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "5c25bc24b238851bade1684c837193693f04d597", "commitAfterChange": "4af63c78a97854459ffdb3bdd8ea245bbfdb48a7", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tIWorkspace workspace, \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchMode,  \t\tfinal boolean isCaseSensitive, \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\tIWorkspace workspace,", "-\t\tfinal int matchMode, ", "-\t\tfinal boolean isCaseSensitive,", "+\t\tfinal int matchRule, ", "-\t\t\tisCaseSensitive ? matchMode | SearchPattern.R_CASE_SENSITIVE : matchMode);", "+\t\t\tmatchRule);", "-\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, type.isClass(), packageDeclaration, simpleName)) {", "+\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, type.isClass(), packageDeclaration, simpleName)) {", "-\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !typeDeclaration.isInterface(), packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, !typeDeclaration.isInterface(), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !memberTypeDeclaration.isInterface(), packageDeclaration, memberTypeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, !memberTypeDeclaration.isInterface(), packageDeclaration, memberTypeDeclaration.name)) {", "+\t}"]}], "num": 56117}
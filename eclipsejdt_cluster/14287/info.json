{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b05d3e6d810f97b4afed539883343d09", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d842d62336aa5eff6f32e0eb358829", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1784048e951cac8e5c6590cc5827817757e6384e", "commitAfterChange": "4a48abb3b4027036bdeac61104059b6c83710144", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "diff": ["+\t\t\tthis.index = javadocStart +3;", "+\t\t\tint endComment = javadocEnd - 2;", "+\t\t\t\t// Initialization", "-\t\t\t} else if (this.sourceParser.options.getSeverity(CompilerOptions.MissingJavadocComments) != ProblemSeverities.Ignore) {", "-\t\t\t\tthis.javadoc = new Javadoc(javadocStart, javadocEnd);", "-\t\t\t} else {", "-\t\t\t\tthis.javadoc = null;", "-\t\t\t}", "-", "-\t\t\tint firstLineNumber = this.sourceParser.scanner.getLineNumber(javadocStart);", "-\t\t\tint lastLineNumber = this.sourceParser.scanner.getLineNumber(javadocEnd);", "-", "-\t\t\t// scan line per line, since tags must be at beginning of lines only", "-\t\t\tnextLine : for (int line = firstLineNumber; line <= lastLineNumber; line++) {", "-\t\t\t\tint lineStart = line == firstLineNumber", "-\t\t\t\t\t\t? javadocStart + 3 // skip leading /**", "-\t\t\t\t\t\t: this.sourceParser.scanner.getLineStart(line);", "-\t\t\t\tthis.index = lineStart;", "-\t\t\t\tthis.lineEnd = line == lastLineNumber", "-\t\t\t\t\t\t? javadocEnd - 2 // remove trailing */", "-\t\t\t\t\t\t: this.sourceParser.scanner.getLineEnd(line);", "-\t\t\t\twhile (this.index < this.lineEnd) {", "-\t\t\t\t\tchar nextCharacter = readChar(); // consider unicodes", "+\t\t\t\tthis.scanner.startPosition = this.index;", "+\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\tthis.lineStarted = false;", "+\t\t\t\tint lineNumber = this.sourceParser.scanner.getLineNumber(javadocStart);", "+\t\t\t\tint lastLineNumber = this.sourceParser.scanner.getLineNumber(javadocEnd);", "+\t\t\t\tthis.lineEnd = lineNumber == lastLineNumber ? javadocEnd - 2 : javadocStart + 3;", "+\t\t\t\tchar nextCharacter= 0, previousChar;", "+\t\t\t\tint charPosition = -1, inlineStartPosition = 0;", "+\t\t\t\t", "+\t\t\t\t// Loop on each comment character", "+\t\t\t\twhile (this.index < endComment) {", "+\t\t\t\t\tint previousPosition = this.index;", "+\t\t\t\t\tpreviousChar = nextCharacter;", "+\t\t\t\t\t", "+\t\t\t\t\t// Calculate line end (cannot use this.scanner.linePtr as scanner does not parse line ends again)", "+\t\t\t\t\tif (this.index > this.lineEnd) {", "+\t\t\t\t\t\tif (lineNumber < lastLineNumber) {", "+\t\t\t\t\t\t\tthis.lineEnd = this.sourceParser.scanner.getLineEnd(++lineNumber) - 1;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.lineEnd = javadocEnd - 2;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.lineStarted = false;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// Read next char only if token was consumed", "+\t\t\t\t\tif (this.currentTokenType < 0) {", "+\t\t\t\t\t\tnextCharacter = readChar(); // consider unicodes", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch (this.currentTokenType) {", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "+\t\t\t\t\t\t\t\tnextCharacter = '}';", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "+\t\t\t\t\t\t\t\tnextCharacter = '*';", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tnextCharacter = this.scanner.currentCharacter;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t}", "+\t\t\t\t\t", "-\t\t\t\t\t\t\tif (!this.checkJavadoc) {", "-\t\t\t\t\t\t\t\tif ((readChar() == 'd') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'p') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'r') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'c') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'a') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 't') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t\t(readChar() == 'd')) {", "-\t\t\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "-\t\t\t\t\t\t\t\t\tnextCharacter = readChar();", "-\t\t\t\t\t\t\t\t\tif (Character.isWhitespace(nextCharacter) || nextCharacter == '*') {", "-\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t\t\tbreak nextLine; // done", "+\t\t\t\t\t\t\tboolean valid = false;", "+\t\t\t\t\t\t\t// Start tag parsing only if we are on line beginning or at inline tag beginning", "+\t\t\t\t\t\t\tif (!this.lineStarted || previousChar == '{') {", "+\t\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\t\t\t\t\t\tint start = this.astStack[this.astPtr].sourceStart;", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(start, charPosition);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (previousChar == '{') {", "+\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, endComment);", "+\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "+\t\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "+\t\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\t\t\t\t\tswitch (tk) {", "+\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tthis.javadoc.inherited = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseParam();", "+\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE) ||", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK) ||", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee();", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseReturn();", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (!valid && this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\tcontinue nextLine;", "-\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "-\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "-\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\tparseParam();", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\t\t\t\t\tparseSee();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\tparseReturn();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\\r':", "+\t\t\t\t\t\tcase '\\n':", "+\t\t\t\t\t\t\tthis.lineStarted = false;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '}' :", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) this.inlineTagStarted = false;", "+\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '{' :", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(inlineStartPosition, this.index);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tinlineStartPosition = previousPosition;", "-\t\t\t\t\t\t\tcontinue nextLine;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\t\tcontinue nextLine;", "+\t\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\t\tif (!this.lineStarted && !CharOperation.isWhitespace(nextCharacter)) {", "+\t\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t} else {", "+\t\t\t\t// Init javadoc if necessary", "+\t\t\t\tif (this.sourceParser.options.getSeverity(CompilerOptions.MissingJavadocComments) != ProblemSeverities.Ignore) {", "+\t\t\t\t\tthis.javadoc = new Javadoc(javadocStart, javadocEnd);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.javadoc = null;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// Parse comment", "+\t\t\t\tint firstLineNumber = this.sourceParser.scanner.getLineNumber(javadocStart);", "+\t\t\t\tint lastLineNumber = this.sourceParser.scanner.getLineNumber(javadocEnd);", "+\t", "+\t\t\t\t// scan line per line, since tags must be at beginning of lines only", "+\t\t\t\tnextLine : for (int line = firstLineNumber; line <= lastLineNumber; line++) {", "+\t\t\t\t\tint lineStart = line == firstLineNumber", "+\t\t\t\t\t\t\t? javadocStart + 3 // skip leading /**", "+\t\t\t\t\t\t\t: this.sourceParser.scanner.getLineStart(line);", "+\t\t\t\t\tthis.index = lineStart;", "+\t\t\t\t\tthis.lineEnd = line == lastLineNumber", "+\t\t\t\t\t\t\t? javadocEnd - 2 // remove trailing * /", "+\t\t\t\t\t\t\t: this.sourceParser.scanner.getLineEnd(line);", "+\t\t\t\t\twhile (this.index < this.lineEnd) {", "+\t\t\t\t\t\tchar nextCharacter = readChar(); // consider unicodes", "+\t\t\t\t\t\tif  (nextCharacter == '@' &&", "+\t\t\t\t\t\t\t(readChar() == 'd') &&", "+\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t(readChar() == 'p') &&", "+\t\t\t\t\t\t\t(readChar() == 'r') &&", "+\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t(readChar() == 'c') &&", "+\t\t\t\t\t\t\t(readChar() == 'a') &&", "+\t\t\t\t\t\t\t(readChar() == 't') &&", "+\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t(readChar() == 'd'))", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "+\t\t\t\t\t\t\tnextCharacter = readChar();", "+\t\t\t\t\t\t\tif (Character.isWhitespace(nextCharacter) || nextCharacter == '*') {", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5df4adc47319ef242f480eb9ced274d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected boolean parseTag()", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\tprotected boolean parseTag() {", "-\t\treturn true;", "+\tprotected boolean parseTag(int previousPosition) throws InvalidInputException {", "+\t\tboolean valid = false;", "+\t\t", "+\t\t// Read tag name", "+\t\tint token = readTokenAndConsume();", "+\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "+", "+\t\t// Decide which parse to perform depending on tag name", "+\t\tthis.tagValue = NO_TAG_VALUE;", "+\t\tswitch (token) {", "+\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\tswitch (tag[0]) {", "+\t\t\t\t\tcase 'd':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\tthis.deprecated = true;", "+\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'i':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "+\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "+\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "+\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "+\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "+\t\t\t\t\t\t\tthis.inherited = this.astPtr==-1;", "+\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'p':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\t\t\t\tvalid = parseParam();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'e':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 's':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'l':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid= parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'v':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_VALUE) && this.sourceParser != null && this.sourceParser.options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "+\t\t\t\tvalid = parseReturn();", "+\t\t\t\t// verify characters after return tag (we're expecting text description)", "+\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "+\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tthis.textStart = this.index;", "+\t\treturn valid;", "+\t}"]}], "num": 14287}
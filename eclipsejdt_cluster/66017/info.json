{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad96a5536db1c311b2f87ae80401bb26", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90226c42650bc6831ba0b4da72b02ce9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "206ad24d44233cc9c2be37e780d152ced497a68c", "commitAfterChange": "c8764bd191b442c989d64659a101e6d60b5fd3b5", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": " \tpublic boolean visit(ThrowStatement throwStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ThrowStatement throwStatement, BlockScope scope)", "diff": ["-\t\tthis.scribe.space();", "-\t\tthrowStatement.exception.traverse(this, scope);", "+\t\tExpression expression = throwStatement.exception;", "+\t\tfinal int numberOfParens = (expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif ((numberOfParens > 0 && this.preferences.insert_space_before_parenthesized_expression_in_throw)", "+\t\t\t\t|| numberOfParens == 0) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\texpression.traverse(this, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94dfea0ec276ecc9a388ab89299fa402", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "646aa5ecb536b7e9ff4fed634622c7786b50bf41", "commitAfterChange": "25e24dc0b5df8ee9c07cfac971fa5e561f586699", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic ParenthesizedExpression convertToParenthesizedExpression(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "  \tpublic ParenthesizedExpression convertToParenthesizedExpression(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["+\t\t// decrement the number of parenthesis", "+\t\tint numberOfParenthesis = (expression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\texpression.bits &= ~AstNode.ParenthesizedMASK;", "+\t\texpression.bits |= (numberOfParenthesis - 1) << AstNode.ParenthesizedSHIFT;"]}], "num": 66017}
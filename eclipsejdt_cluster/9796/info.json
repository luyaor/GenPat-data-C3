{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c60a0401de11f5a905224512059de84", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e321d3023ac0ea418c997fbe1674add", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "faddcb079bee5b548a6f2f972d8258d3ff3dc5d3", "commitAfterChange": "7596807cbc20be2267cc443bfe387f40df0774fb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "diff": ["+\t\t\tMethodBinding[] existingMethods = receiverType.methods();\r", "+\t\t\tfor(int i =0 ; i < existingMethods.length ; i++){\r", "+\t\t\t\tMethodBinding existingMethod = existingMethods[i];\r", "+\t\t\t\tif (CharOperation.equals(method.selector, existingMethod.selector, true)\r", "+\t\t\t\t\t&& method.areParametersEqual(existingMethod)){\r", "+\t\t\t\t\tcontinue next;\t\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e4963d95f0f36e233cfd3c1134637b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "fccc3c9fd12b95c908b1566d2444bf312ceefff2", "commitAfterChange": "65db522775790e696e2711bd035a45d8d1048338", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void faultInImports()", "signatureAfterChange": " void faultInImports()", "diff": ["+", "+\tint length = imports.length;", "+\tresolvedSingeTypeImports = new HashtableOfObject(length);", "+\tfor (int i = 0; i < length; i++) {", "+\t\tImportBinding binding = imports[i];", "+\t\tif (!binding.onDemand)", "+\t\t\tresolvedSingeTypeImports.put(binding.compoundName[binding.compoundName.length - 1], binding);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac96984627c30ca826946fb311d4154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeleteResourceElementsOperation.java", "commitBeforeChange": "407faf8899c60979a7963dd83b92115cf3b78328", "commitAfterChange": "8ce429ba50e328ba7bba736fb319609f81a16be8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private void deletePackageFragment(IPackageFragment frag)\r \tthrows JavaModelException", "signatureAfterChange": "\r private void deletePackageFragment(IPackageFragment frag)\r \tthrows JavaModelException", "diff": ["-\t\t// remove the folder if it is empty\r", "-\t\tIResource[] members;\r", "+\t\t// delete remaining files in this package (.class file in the case where Proj=src=bin)\r", "+\t\tIResource[] remaingFiles;\r", "-\t\t\tmembers = ((IFolder) res).members();\r", "+\t\t\tremaingFiles = ((IFolder) res).members();\r", "-\t\tif (members.length == 0) {\r", "-\t\t\tdeleteEmptyPackageFragment(frag, fForce);\r", "+\t\tboolean isEmpty = true;\r", "+\t\tfor (int i = 0, length = remaingFiles.length; i < length; i++) {\r", "+\t\t\tIResource file = remaingFiles[i];\r", "+\t\t\tif (file instanceof IFile) {\r", "+\t\t\t\tthis.deleteResource(file, true);\r", "+\t\t\t} else {\r", "+\t\t\t\tisEmpty = false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (isEmpty) {\r", "+\t\t\t// delete recursively empty folders\r", "+\t\t\tdeleteEmptyPackageFragment(frag, false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3b4a65a1e3af812ee3cfe50e8ca5793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "3d4c211d581e5ab7a648e648f6e07c2d98cd2b06", "commitAfterChange": "985d5704b5812718c29d572a9f4e88e4ef1e7e81", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private Binding findSingleStaticImport(char[][] compoundName)", "signatureAfterChange": " private Binding findSingleStaticImport(char[][] compoundName)", "diff": ["+\t// look to see if there is a static method with the same selector", "+\tMethodBinding[] methods = type.getMethods(name);", "+\tif (methods != NoMethods) {", "+\t\tfor (int i = methods.length; --i >= 0;) {", "+\t\t\tMethodBinding method = methods[i];", "+\t\t\tif (method.isStatic() && method.canBeSeenBy(fPackage))", "+\t\t\t\treturn method;", "+\t\t}", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee24a2bca988106d21d2468147ab7b6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "2b810e9ce6e62d5b8f5d0b01de3fab00973de806", "commitAfterChange": "e07ac4343b59e78d96b40c4bf7bf797b84cb728a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["+\t// Abort build only if there are classpath errors", "-\tif (markers.length > 0) {", "+\tboolean buildPathHasError = false;", "+\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\tIMarker marker = markers[i];", "+\t\tif (((Integer)marker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_ERROR) {", "+\t\t\tbuildPathHasError = true;", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tif (buildPathHasError) {", "-\t\t\tSystem.out.println(\"Aborted build because project is involved in a cycle or has classpath problems\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Aborted build because project has classpath errors (incomplete or involved in cycle)\"); //$NON-NLS-1$"]}], "num": 9796}
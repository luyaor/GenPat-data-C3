{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d5561dce11212417cd45ea6b8f93c69", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d057a17813aa664709fd11f45c9a124", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "cc628ea5c515ac89ded681df40bf6e83ff17d6c0", "commitAfterChange": "2a24da854cab81b3e14f5a439f9a6b762b3ebc0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private ProcessorEnvImpl( IFile file, IJavaProject javaProj, Phase phase )", "signatureAfterChange": "      \tprivate ProcessorEnvImpl(ICompilationUnit compilationUnit, IFile file, IJavaProject javaProj, Phase phase)", "diff": ["-", "-    private ProcessorEnvImpl( IFile file, IJavaProject javaProj, Phase phase )", "+    ", "+\tprivate ProcessorEnvImpl(ICompilationUnit compilationUnit, IFile file, IJavaProject javaProj, Phase phase)", "-        assert phase == Phase.BUILD : \"Unexpected phase value.  Use Phase.BUILD instead of \" + phase;", "+\t\t// if we are in reconcile, file will be null & compilationUnit will be valid", "+\t\t// if we are in build, file will not be null & compilationUnit will be null", "+        assert ( phase == Phase.RECONCILE && compilationUnit != null && file == null ) || ( phase == Phase.BUILD && compilationUnit == null && file != null ) : \"Unexpected phase value.  Use Phase.RECONCILE instead of \" + phase;", "-    \t_compilationUnit = null;", "-", "-\t\tchar[] source = null;", "-", "-\t\ttry", "-\t\t{", "-\t\t\tsource = getFileContents( file );", "-\t\t}", "-\t\tcatch( Exception e )", "-\t\t{", "-\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "-\t\t\te.printStackTrace();", "-\t\t}", "-", "-\t\t_source = source;", "-\t\tassert _source != null : \"missing source\";", "-", "-\t\tString unitName = file.getProjectRelativePath().toString();", "-\t\tASTNode node = createDietAST( unitName, javaProj, null, _source );", "-\t\t_astCompilationUnit = (org.eclipse.jdt.core.dom.CompilationUnit) node;", "-        _file = file;", "+        ", "+        String unitName = null;", "+\t\tif ( compilationUnit != null )", "+\t\t{", "+\t\t\tunitName = compilationUnit.getResource().getProjectRelativePath().toString();", "+\t        _compilationUnit = compilationUnit;", "+\t\t\t_file = (IFile)compilationUnit.getResource();", "+\t\t\t_source = null;", "+\t\t}", "+\t\telse", "+\t\t{", "+\t\t\tunitName = file.getProjectRelativePath().toString();\t", "+\t\t\t_compilationUnit = null;", "+\t\t\t_file = file;", "+\t\t\tchar[] source = null;", "+\t\t\ttry", "+\t\t\t{", "+\t\t\t\tsource = getFileContents( file );", "+\t\t\t}", "+\t\t\tcatch( Exception e )", "+\t\t\t{", "+\t\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t\t_source = source;", "+\t\t\tassert _source != null : \"missing source\";", "+\t\t}", "+", "+\t\tassert ( _source == null && _compilationUnit != null ) || ( _source != null && _compilationUnit == null ) : \"Unexpected values for _compilationUnit and _source!\";", "+\t\tASTNode node = createDietAST( unitName, javaProj, _compilationUnit, _source );", "+\t\t_astCompilationUnit = (org.eclipse.jdt.core.dom.CompilationUnit) node;", "+", "-\t\t_modelCompUnit2astCompUnit = new HashMap<ICompilationUnit, CompilationUnit>();", "+        _modelCompUnit2astCompUnit = new HashMap<ICompilationUnit, CompilationUnit>();", "-        _allProblems = new HashMap<IFile, List<IProblem>>(4);        ", "+\t\t_allProblems = new HashMap<IFile, List<IProblem>>(4);        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffffa4125977ccf4d8f43bccccaa97a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "ef0604aef9ae504bcfc77425341e6baf6891cd21", "commitAfterChange": "b16439228426b14cb0612ff6650bc46c3d9f2a61", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      \tprivate ProcessorEnvImpl(ICompilationUnit compilationUnit, IFile file, IJavaProject javaProj, Phase phase)", "signatureAfterChange": "          private ProcessorEnvImpl(final CompilationUnit astCompilationUnit, \t\t\tfinal ICompilationUnit compilationUnit, final char[] source, \t\t\tfinal IFile file, final IJavaProject javaProj, final Phase phase)", "diff": ["-\tprivate ProcessorEnvImpl(ICompilationUnit compilationUnit, IFile file, IJavaProject javaProj, Phase phase)", "-    {", "-\t\t// if we are in reconcile, file will be null & compilationUnit will be valid", "-\t\t// if we are in build, file will not be null & compilationUnit will be null", "-        assert ( phase == Phase.RECONCILE && compilationUnit != null && file == null ) || ( phase == Phase.BUILD && compilationUnit == null && file != null ) : \"Unexpected phase value.  Use Phase.RECONCILE instead of \" + phase; //$NON-NLS-1$", "-", "-        _phase = phase;", "-        ", "-        String unitName = null;", "-\t\tif ( compilationUnit != null )", "-\t\t{", "-\t\t\tunitName = compilationUnit.getResource().getProjectRelativePath().toString();", "-\t        _compilationUnit = compilationUnit;", "-\t\t\t_file = (IFile)compilationUnit.getResource();", "-\t\t\t_source = null;", "-\t\t}", "-\t\telse", "-\t\t{", "-\t\t\tunitName = file.getProjectRelativePath().toString();\t", "-\t\t\t_compilationUnit = null;", "-\t\t\t_file = file;", "-\t\t\tchar[] source = null;", "-\t\t\ttry", "-\t\t\t{", "-\t\t\t\tsource = getFileContents( file );", "-\t\t\t}", "-\t\t\tcatch( Exception e )", "-\t\t\t{", "-\t\t\t\tAptPlugin.log(e, \"Failure constructing processor environment\"); //$NON-NLS-1$", "-\t\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "-\t\t\t}", "-\t\t\t_source = source;", "-\t\t\tassert _source != null : \"missing source\"; //$NON-NLS-1$", "-\t\t}", "-", "-\t\tassert ( _source == null && _compilationUnit != null ) || ( _source != null && _compilationUnit == null ) : \"Unexpected values for _compilationUnit and _source!\"; //$NON-NLS-1$", "-\t\tASTNode node = createDietAST( unitName, javaProj, _compilationUnit, _source );", "-\t\t_astCompilationUnit = (org.eclipse.jdt.core.dom.CompilationUnit) node;", "-", "-\t\t_javaProject = javaProj;", "-        _modelCompUnit2astCompUnit = new HashMap<ICompilationUnit, CompilationUnit>();", "-\t\t_typeBinding2ModelCompUnit = new HashMap<ITypeBinding, ICompilationUnit>();", "-\t\t_allProblems = new HashMap<IFile, List<IProblem>>(4);        ", "+    private ProcessorEnvImpl(final CompilationUnit astCompilationUnit,", "+\t\t\tfinal ICompilationUnit compilationUnit, final char[] source,", "+\t\t\tfinal IFile file, final IJavaProject javaProj, final Phase phase) {", "+\t\tsuper(astCompilationUnit, file, javaProj, phase);", "+\t\t// if we are in reconcile, file will be null & compilationUnit will be", "+\t\t// valid", "+\t\t// if we are in build, file will not be null & compilationUnit will be", "+\t\t// null", "+\t\tassert (phase == Phase.RECONCILE && compilationUnit != null && file == null) ||", "+\t\t\t\t(phase == Phase.BUILD && compilationUnit == null && file != null) : ", "+\t\t\t\t\"Unexpected phase value \" //$NON-NLS-1$", "+\t\t\t\t+ phase;", "+\t\tassert (source == null && compilationUnit != null) ||", "+\t\t\t\t(source != null && compilationUnit == null) : ", "+\t\t\t\t\"Unexpected values for _compilationUnit and _source!\"; //$NON-NLS-1$", "+\t\t_source = source;", "+\t\t_compilationUnit = compilationUnit;", "+\t\t_allProblems = new HashMap<IFile, List<IProblem>>(4);", "-\t\tinitPrimitives(_javaProject);", "-    }", "+\t}"]}], "num": 11418}
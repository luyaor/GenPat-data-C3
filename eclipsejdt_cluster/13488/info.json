{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c908c84d5c4f2122c246498f90d923ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d8ce5b9ccd969fc7808ce8bbb7aaab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "commitAfterChange": "efe1773a267b3bdb803164d9b413b69c3685878f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["+\t\t\t} else if (invocation instanceof AllocationExpression) {", "+\t\t\t\tif (((AllocationExpression)invocation).suspendedResolutionState != null)", "+\t\t\t\t\treturn; // not yet ready", "-\t\t\t\t\tMethodBinding binding = innerInvocation.binding();", "+\t\t\t\t\tMethodBinding binding = innerInvocation.binding(parameterType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e2830a670167da12fca4ce027464b8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "commitAfterChange": "efe1773a267b3bdb803164d9b413b69c3685878f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate int parameterCompatibilityLevel18(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods, InvocationSite site)", "signatureAfterChange": "  \tprivate int parameterCompatibilityLevel18(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods, InvocationSite site)", "diff": ["-\t\t\t\t\t\t\tMethodBinding innerBinding = innerPoly.binding();", "+\t\t\t\t\t\t\tMethodBinding innerBinding = innerPoly.binding(null); // 1. try without update", "+\t\t\t\t\t\t\t} else if (innerPoly instanceof AllocationExpression) {", "+\t\t\t\t\t\t\t\tMethodBinding updatedMethod = innerPoly.binding(targetType); // 2. try with updating", "+\t\t\t\t\t\t\t\tif (updatedMethod != innerBinding && updatedMethod != null && updatedMethod.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\tif (updatedMethod.declaringClass.isCompatibleWith(targetType))", "+\t\t\t\t\t\t\t\t\t\treturn COMPATIBLE;", "+\t\t\t\t\t\t\t\t\treturn NOT_COMPATIBLE;", "+\t\t\t\t\t\t\t\t}"]}], "num": 13488}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdfd2c57db179d5591df75f4ddfde54d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "072ec975ee1437b59579081e7f3ce583", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "fc2bbd994a305724f9f5d9645163d8f7329cd965", "commitAfterChange": "340d76460697d1d853431b9a4e8d18df2a5632b9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tFlowInfo conditionFlowInfo;", "-\t\t\tif (this.receiver.resolvedType != null ", "-\t\t\t\t\t&& this.receiver.resolvedType.id == TypeIds.T_OrgEclipseCoreRuntimeAssert", "-\t\t\t\t\t&& argument.resolvedType != null", "-\t\t\t\t\t&& argument.resolvedType.id == TypeIds.T_boolean) {", "-\t\t\t\tConstant cst = argument.optimizedBooleanConstant();", "-\t\t\t\tboolean isOptimizedTrueAssertion = cst != Constant.NotAConstant && cst.booleanValue() == true;", "-\t\t\t\tboolean isOptimizedFalseAssertion = cst != Constant.NotAConstant && cst.booleanValue() == false;", "-\t\t\t\tflowContext.tagBits |= FlowContext.HIDE_NULL_COMPARISON_WARNING;", "-\t\t\t\tconditionFlowInfo = argument.analyseCode(currentScope, flowContext, flowInfo.copy());", "-\t\t\t\tif (!wasInsideAssert) {", "-\t\t\t\t\tflowContext.tagBits &= ~FlowContext.HIDE_NULL_COMPARISON_WARNING;", "-\t\t\t\t}", "-\t\t\t\tUnconditionalFlowInfo assertWhenTrueInfo = conditionFlowInfo.initsWhenTrue().unconditionalInits();", "-\t\t\t\tFlowInfo assertInfo = conditionFlowInfo.initsWhenFalse();", "-\t\t\t\tif (isOptimizedTrueAssertion) {", "-\t\t\t\t\tassertInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);", "-\t\t\t\t}", "-\t\t\t\tif (!isOptimizedFalseAssertion) {", "-\t\t\t\t\t// if assertion is not false for sure, only then it makes sense to carry the flow info ahead.", "-\t\t\t\t\t// if the code does reach ahead, it means the assert didn't cause an exit, and so", "-\t\t\t\t\t// the expression inside it shouldn't change the prior flowinfo", "-\t\t\t\t\t// viz. org.eclipse.core.runtime.Assert.isLegal(false && o != null)", "-\t\t\t\t\t", "-\t\t\t\t\t// keep the merge from the initial code for the definite assignment", "-\t\t\t\t\t// analysis, tweak the null part to influence nulls downstream", "-\t\t\t\t\tflowInfo = flowInfo.mergedWith(assertInfo.nullInfoLessUnconditionalCopy()).", "-\t\t\t\t\t\taddInitializationsFrom(assertWhenTrueInfo.discardInitializationInfo());", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tflowInfo = argument.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tswitch (detectAssertionUtility(i)) {", "+\t\t\t\tcase TRUE_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseBooleanAssertion(currentScope, argument, flowContext, flowInfo, wasInsideAssert, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase FALSE_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseBooleanAssertion(currentScope, argument, flowContext, flowInfo, wasInsideAssert, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase NONNULL_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseNullAssertion(currentScope, argument, flowContext, flowInfo, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase NULL_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseNullAssertion(currentScope, argument, flowContext, flowInfo, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tflowInfo = argument.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891e8c424ea4e89ca1cb53efd4bed4ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "071f59f477be631666f24420ca0aab156c270c65", "commitAfterChange": "986a6d11b1b7e4db82dd5d830210e01550f74aa3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tFlowInfo conditionFlowInfo;", "-\t\t\tif (this.receiver.resolvedType != null ", "-\t\t\t\t\t&& this.receiver.resolvedType.id == TypeIds.T_OrgEclipseCoreRuntimeAssert", "-\t\t\t\t\t&& argument.resolvedType != null", "-\t\t\t\t\t&& argument.resolvedType.id == TypeIds.T_boolean) {", "-\t\t\t\tConstant cst = argument.optimizedBooleanConstant();", "-\t\t\t\tboolean isOptimizedTrueAssertion = cst != Constant.NotAConstant && cst.booleanValue() == true;", "-\t\t\t\tboolean isOptimizedFalseAssertion = cst != Constant.NotAConstant && cst.booleanValue() == false;", "-\t\t\t\tflowContext.tagBits |= FlowContext.HIDE_NULL_COMPARISON_WARNING;", "-\t\t\t\tconditionFlowInfo = argument.analyseCode(currentScope, flowContext, flowInfo.copy());", "-\t\t\t\tif (!wasInsideAssert) {", "-\t\t\t\t\tflowContext.tagBits &= ~FlowContext.HIDE_NULL_COMPARISON_WARNING;", "-\t\t\t\t}", "-\t\t\t\tUnconditionalFlowInfo assertWhenTrueInfo = conditionFlowInfo.initsWhenTrue().unconditionalInits();", "-\t\t\t\tFlowInfo assertInfo = conditionFlowInfo.initsWhenFalse();", "-\t\t\t\tif (isOptimizedTrueAssertion) {", "-\t\t\t\t\tassertInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);", "-\t\t\t\t}", "-\t\t\t\tif (!isOptimizedFalseAssertion) {", "-\t\t\t\t\t// if assertion is not false for sure, only then it makes sense to carry the flow info ahead.", "-\t\t\t\t\t// if the code does reach ahead, it means the assert didn't cause an exit, and so", "-\t\t\t\t\t// the expression inside it shouldn't change the prior flowinfo", "-\t\t\t\t\t// viz. org.eclipse.core.runtime.Assert.isLegal(false && o != null)", "-\t\t\t\t\t", "-\t\t\t\t\t// keep the merge from the initial code for the definite assignment", "-\t\t\t\t\t// analysis, tweak the null part to influence nulls downstream", "-\t\t\t\t\tflowInfo = flowInfo.mergedWith(assertInfo.nullInfoLessUnconditionalCopy()).", "-\t\t\t\t\t\taddInitializationsFrom(assertWhenTrueInfo.discardInitializationInfo());", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tflowInfo = argument.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tswitch (detectAssertionUtility(i)) {", "+\t\t\t\tcase TRUE_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseBooleanAssertion(currentScope, argument, flowContext, flowInfo, wasInsideAssert, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase FALSE_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseBooleanAssertion(currentScope, argument, flowContext, flowInfo, wasInsideAssert, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase NONNULL_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseNullAssertion(currentScope, argument, flowContext, flowInfo, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase NULL_ASSERTION:", "+\t\t\t\t\tflowInfo = analyseNullAssertion(currentScope, argument, flowContext, flowInfo, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tflowInfo = argument.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab3fc3cc9aac4e83aa3235d93939e6e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1248181e23c81da45ee8e328a409b761a39e6e52", "commitAfterChange": "3df0b6d0a7c9e742ebbc5f2930d09070fa613a77", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "signatureAfterChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tchar[][] excludeNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "diff": ["-\t// Helper method for private void findVariableNames(char[] name, TypeReference type )", "-\tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim){", "-\t\t\tif(sourceName == null || sourceName.length == 0)", "-\t\t\t\treturn;", "-\t\t\t\t", "-\t\t\tchar[] name = null;", "+\t\t// Helper method for private void findVariableNames(char[] name, TypeReference type )", "+\tprivate void findVariableName(", "+\t\tchar[] token,", "+\t\tchar[] qualifiedPackageName,", "+\t\tchar[] qualifiedSourceName,", "+\t\tchar[] sourceName,", "+\t\tchar[][] excludeNames,", "+\t\tint dim,", "+\t\tint kind,", "+\t\tint modifiers){", "-\t\t\t// compute variable name for base type", "-\t\t\ttry{", "-\t\t\t\tnameScanner.setSource(sourceName);", "-\t\t\t\tswitch (nameScanner.getNextToken()) {", "-\t\t\t\t\tcase TokenNameint :", "-\t\t\t\t\tcase TokenNamebyte :", "-\t\t\t\t\tcase TokenNameshort :", "-\t\t\t\t\tcase TokenNamechar :", "-\t\t\t\t\tcase TokenNamelong :", "-\t\t\t\t\tcase TokenNamefloat :", "-\t\t\t\t\tcase TokenNamedouble :", "-\t\t\t\t\tcase TokenNameboolean :", "-\t\t\t\t\t\tif(token != null && token.length != 0)", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tname = computeBaseNames(sourceName[0], excludeNames);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif(name != null) {", "-\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(token, name);", "-\t\t\t\t\t", "-\t\t\t\t\t// accept result", "-\t\t\t\t\trequestor.acceptVariableName(", "-\t\t\t\t\t\tqualifiedPackageName,", "-\t\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\t\tname,", "-\t\t\t\t\t\tname,", "-\t\t\t\t\t\tstartPosition - offset,", "-\t\t\t\t\t\tendPosition - offset,", "-\t\t\t\t\t\trelevance);", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t} catch(InvalidInputException e){", "-\t\t\t}", "-\t\t\t", "-\t\t\t// compute variable name for non base type", "-\t\t\tchar[][] names = computeNames(sourceName, dim > 0);", "-\t\t\tchar[] displayName;", "-\t\t\tif (dim > 0){", "-\t\t\t\tint l = qualifiedSourceName.length;", "-\t\t\t\tdisplayName = new char[l+(2*dim)];", "-\t\t\t\tSystem.arraycopy(qualifiedSourceName, 0, displayName, 0, l);", "-\t\t\t\tfor(int i = 0; i < dim; i++){", "-\t\t\t\t\tdisplayName[l+(i*2)] = '[';", "-\t\t\t\t\tdisplayName[l+(i*2)+1] = ']';", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tdisplayName = qualifiedSourceName;", "-\t\t\t}", "-\t\t\tnext : for(int i = 0 ; i < names.length ; i++){", "-\t\t\t\tname = names[i];", "-\t\t\t\t", "-\t\t\t\tif (!CharOperation.prefixEquals(token, name, false))", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t", "-\t\t\t\t// completion must be an identifier (not a keyword, ...).", "-\t\t\t\ttry{", "-\t\t\t\t\tnameScanner.setSource(name);", "-\t\t\t\t\tif(nameScanner.getNextToken() != TokenNameIdentifier)", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t} catch(InvalidInputException e){", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tint count = 2;", "-\t\t\t\tchar[] originalName = name;", "-\t\t\t\tfor(int j = 0 ; j < excludeNames.length ; j++){", "-\t\t\t\t\tif(CharOperation.equals(name, excludeNames[j], false)) {", "-\t\t\t\t\t\tname = CharOperation.concat(originalName, String.valueOf(count++).toCharArray());", "-\t\t\t\t\t\tj = 0;", "-\t\t\t\t\t}\t", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\trelevance += computeRelevanceForCaseMatching(token, name);", "-\t\t\t\t", "-\t\t\t\t// accept result", "-\t\t\t\trequestor.acceptVariableName(", "+\t\tif(sourceName == null || sourceName.length == 0)", "+\t\t\treturn;", "+\t\t", "+\t\tchar[][] names = CharOperation.NO_CHAR_CHAR;", "+\t\tswitch (kind) {", "+\t\t\tcase FIELD :", "+\t\t\t\tnames = NameComputer.suggestFieldNames(", "+\t\t\t\t\tjavaProject,", "-\t\t\t\t\tdisplayName,", "-\t\t\t\t\tname,", "-\t\t\t\t\tname,", "-\t\t\t\t\tstartPosition - offset,", "-\t\t\t\t\tendPosition - offset,", "-\t\t\t\t\trelevance);", "-\t\t\t}", "-\t}", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tdim,", "+\t\t\t\t\tmodifiers,", "+\t\t\t\t\texcludeNames);", "+\t\t\t\tbreak;", "+\t\t\tcase LOCAL :", "+\t\t\t\tnames = NameComputer.suggestLocalVariableNames(", "+\t\t\t\t\tjavaProject,", "+\t\t\t\t\tqualifiedPackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tdim,", "+\t\t\t\t\texcludeNames);", "+\t\t\t\tbreak;", "+\t\t\tcase ARGUMENT :", "+\t\t\t\tnames = NameComputer.suggestArgumentNames(", "+\t\t\t\t\tjavaProject,", "+\t\t\t\t\tqualifiedPackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tdim,", "+\t\t\t\t\texcludeNames);", "+\t\t\t\tbreak;", "+\t\t}", "+\t\t// compute variable name for non base type", "+\t\tchar[] displayName;", "+\t\tif (dim > 0){", "+\t\t\tint l = qualifiedSourceName.length;", "+\t\t\tdisplayName = new char[l+(2*dim)];", "+\t\t\tSystem.arraycopy(qualifiedSourceName, 0, displayName, 0, l);", "+\t\t\tfor(int i = 0; i < dim; i++){", "+\t\t\t\tdisplayName[l+(i*2)] = '[';", "+\t\t\t\tdisplayName[l+(i*2)+1] = ']';", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdisplayName = qualifiedSourceName;", "+\t\t}", "+\t\t", "+\t\tnext : for(int i = 0 ; i < names.length ; i++){", "+\t\t\tchar[] name = names[i];", "+\t\t", "+\t\t\tif (!CharOperation.prefixEquals(token, name, false))", "+\t\t\t\tcontinue next;", "+\t\t\t", "+\t\t\tint relevance = computeBaseRelevance();", "+\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\trelevance += computeRelevanceForCaseMatching(token, name);", "+\t\t\t", "+\t\t\t// accept result", "+\t\t\trequestor.acceptVariableName(", "+\t\t\t\tqualifiedPackageName,", "+\t\t\t\tdisplayName,", "+\t\t\t\tname,", "+\t\t\t\tname,", "+\t\t\t\tstartPosition - offset,", "+\t\t\t\tendPosition - offset,", "+\t\t\t\trelevance);", "+\t\t}", "+\t\t", "+\t}"]}], "num": 22465}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bad1ad676af6aa726c0aab0343166e4d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b3ed23ba977b21cc4dbfc8b07c9c3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPool.java", "commitBeforeChange": "3413778e1bd5154fc1bb3b2fe41a2f5c159f06ae", "commitAfterChange": "b6700c6040587d6a407e0aa87172122e678ac070", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic IConstantPoolEntry decodeEntry(int index)", "signatureAfterChange": " \tpublic IConstantPoolEntry decodeEntry(int index)", "diff": ["-\t\tthis.constantPoolEntry.reset();", "+\t\tConstantPoolEntry constantPoolEntry = new ConstantPoolEntry();", "+\t\tconstantPoolEntry.reset();", "-\t\tthis.constantPoolEntry.setKind(kind);", "+\t\tconstantPoolEntry.setKind(kind);", "-\t\t\t\tthis.constantPoolEntry.setClassInfoNameIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setClassInfoName(getUtf8ValueAt(this.constantPoolEntry.getClassInfoNameIndex()));", "+\t\t\t\tconstantPoolEntry.setClassInfoNameIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setClassInfoName(getUtf8ValueAt(constantPoolEntry.getClassInfoNameIndex()));", "-\t\t\t\tthis.constantPoolEntry.setDoubleValue(doubleAt(classFileBytes, 1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setDoubleValue(doubleAt(classFileBytes, 1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setClassIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "-\t\t\t\tint declaringClassIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[this.constantPoolEntry.getClassIndex()]);", "-\t\t\t\tthis.constantPoolEntry.setClassName(getUtf8ValueAt(declaringClassIndex));", "-\t\t\t\tthis.constantPoolEntry.setNameAndTypeIndex(u2At(this.classFileBytes,  3, this.constantPoolOffset[index]));", "-\t\t\t\tint fieldNameIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[this.constantPoolEntry.getNameAndTypeIndex()]);", "-\t\t\t\tint fieldDescriptorIndex = u2At(this.classFileBytes,  3, this.constantPoolOffset[this.constantPoolEntry.getNameAndTypeIndex()]);", "-\t\t\t\tthis.constantPoolEntry.setFieldName(getUtf8ValueAt(fieldNameIndex));", "-\t\t\t\tthis.constantPoolEntry.setFieldDescriptor(getUtf8ValueAt(fieldDescriptorIndex));", "+\t\t\t\tconstantPoolEntry.setClassIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "+\t\t\t\tint declaringClassIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[constantPoolEntry.getClassIndex()]);", "+\t\t\t\tconstantPoolEntry.setClassName(getUtf8ValueAt(declaringClassIndex));", "+\t\t\t\tconstantPoolEntry.setNameAndTypeIndex(u2At(this.classFileBytes,  3, this.constantPoolOffset[index]));", "+\t\t\t\tint fieldNameIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[constantPoolEntry.getNameAndTypeIndex()]);", "+\t\t\t\tint fieldDescriptorIndex = u2At(this.classFileBytes,  3, this.constantPoolOffset[constantPoolEntry.getNameAndTypeIndex()]);", "+\t\t\t\tconstantPoolEntry.setFieldName(getUtf8ValueAt(fieldNameIndex));", "+\t\t\t\tconstantPoolEntry.setFieldDescriptor(getUtf8ValueAt(fieldDescriptorIndex));", "-\t\t\t\tthis.constantPoolEntry.setClassIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "-\t\t\t\tdeclaringClassIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[this.constantPoolEntry.getClassIndex()]);", "-\t\t\t\tthis.constantPoolEntry.setClassName(getUtf8ValueAt(declaringClassIndex));", "-\t\t\t\tthis.constantPoolEntry.setNameAndTypeIndex(u2At(this.classFileBytes,  3, this.constantPoolOffset[index]));", "-\t\t\t\tint methodNameIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[this.constantPoolEntry.getNameAndTypeIndex()]);", "-\t\t\t\tint methodDescriptorIndex = u2At(this.classFileBytes,  3, this.constantPoolOffset[this.constantPoolEntry.getNameAndTypeIndex()]);", "-\t\t\t\tthis.constantPoolEntry.setMethodName(getUtf8ValueAt(methodNameIndex));", "-\t\t\t\tthis.constantPoolEntry.setMethodDescriptor(getUtf8ValueAt(methodDescriptorIndex));", "+\t\t\t\tconstantPoolEntry.setClassIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "+\t\t\t\tdeclaringClassIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[constantPoolEntry.getClassIndex()]);", "+\t\t\t\tconstantPoolEntry.setClassName(getUtf8ValueAt(declaringClassIndex));", "+\t\t\t\tconstantPoolEntry.setNameAndTypeIndex(u2At(this.classFileBytes,  3, this.constantPoolOffset[index]));", "+\t\t\t\tint methodNameIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[constantPoolEntry.getNameAndTypeIndex()]);", "+\t\t\t\tint methodDescriptorIndex = u2At(this.classFileBytes,  3, this.constantPoolOffset[constantPoolEntry.getNameAndTypeIndex()]);", "+\t\t\t\tconstantPoolEntry.setMethodName(getUtf8ValueAt(methodNameIndex));", "+\t\t\t\tconstantPoolEntry.setMethodDescriptor(getUtf8ValueAt(methodDescriptorIndex));", "-\t\t\t\tthis.constantPoolEntry.setFloatValue(floatAt(classFileBytes, 1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setFloatValue(floatAt(classFileBytes, 1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setIntegerValue(i4At(classFileBytes, 1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setIntegerValue(i4At(classFileBytes, 1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setLongValue(i8At(classFileBytes, 1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setLongValue(i8At(classFileBytes, 1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setNameAndTypeNameIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setNameAndTypeDescriptorIndex(u2At(this.classFileBytes,  3, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setNameAndTypeNameIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setNameAndTypeDescriptorIndex(u2At(this.classFileBytes,  3, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setStringIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setStringValue(getUtf8ValueAt(this.constantPoolEntry.getStringIndex()));", "+\t\t\t\tconstantPoolEntry.setStringIndex(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setStringValue(getUtf8ValueAt(constantPoolEntry.getStringIndex()));", "-\t\t\t\tthis.constantPoolEntry.setUtf8Length(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "-\t\t\t\tthis.constantPoolEntry.setUtf8Value(getUtf8ValueAt(index));", "+\t\t\t\tconstantPoolEntry.setUtf8Length(u2At(this.classFileBytes,  1, this.constantPoolOffset[index]));", "+\t\t\t\tconstantPoolEntry.setUtf8Value(getUtf8ValueAt(index));", "-\t\treturn this.constantPoolEntry;", "+\t\treturn constantPoolEntry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad91f09a0fdf1a1264ae2246e39b298b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tgenerateReadSequence(currentScope, codeStream);", "-\tif (this.lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\tif (this.lastFieldBinding.isStatic()){", "-\t\t\tcodeStream.getstatic(this.lastFieldBinding);", "+    FieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\tif (lastFieldBinding.isStatic()){", "+\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\tcodeStream.getfield(this.lastFieldBinding);", "+\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\tif (this.lastFieldBinding.isStatic()) {", "-\t\t\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\t\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.lastFieldBinding.type.id);", "+\t\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "-\t\tfieldStore(codeStream, this.lastFieldBinding, null, false);", "+\t\tfieldStore(codeStream, lastFieldBinding, null, false);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.lastFieldBinding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.lastFieldBinding);", "-\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(lastFieldBinding);", "+\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\t\tif (this.lastFieldBinding.isStatic()) {", "+\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\tif (this.lastFieldBinding.isStatic()) {", "+\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.lastFieldBinding.type.id);", "+\t\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(this.lastFieldBinding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(lastFieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f429b09973381d024d7934dc3ff60c7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected void setSourceComment(char[] source) throws ArrayIndexOutOfBoundsException", "signatureAfterChange": " \tprotected void setSourceComment(char[] source) throws ArrayIndexOutOfBoundsException", "diff": ["-\t\tthis.comments = new ArrayList();", "-\t\tthis.allTags = new ArrayList();", "+\t\tcomments = new ArrayList();", "+\t\tallTags = new ArrayList();", "-\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "+\t\t\ti += (chars==null) ? 1 : chars.length();", "-\t\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\t\t\tif (chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\t\telse buffer.append(chars);", "-\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "+\t\t\t\t\t\t\t\ti += (chars==null) ? 1 : chars.length();", "-\t\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "+\t\t\t\t\t\t\t\t\ti += (chars==null) ? 1 : chars.length();", "-\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "+\t\t\t\t\t\t\t\ti += (chars==null) ? 1 : chars.length();", "-\t\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "+\t\t\t\t\t\t\t\t\ti += (chars==null) ? 1 : chars.length();", "-\t\t\t\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "+\t\t\t\t\t\t\t\t\t\t\ti += (chars==null) ? 1 : chars.length();", "-\t\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\t\t\tif (chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\t\telse buffer.append(chars);", "-\t\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\t\t\tif (chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\t\telse buffer.append(chars);", "-\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\tif (chars == null) buffer.append(currentChar);", "+\t\t\t\t\telse buffer.append(chars);", "-\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\t\tthis.comments.add(buffer.toString());", "-\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\t\t\t\tif (chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\telse buffer.append(chars);", "+\t\t\t\t\t\tcomments.add(buffer.toString());", "+\t\t\t\t\t\tallTags.add(new ArrayList());", "-\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\tif (chars == null) buffer.append(currentChar);", "+\t\t\t\t\telse buffer.append(chars);", "-\t\t\t\t\t\tthis.comments.add(buffer.toString());", "-\t\t\t\t\t\tthis.allTags.add(tags);", "+\t\t\t\t\t\tcomments.add(buffer.toString());", "+\t\t\t\t\t\tallTags.add(tags);", "-\t\t\t\t\t\tthis.comments.add(buffer.toString());", "-\t\t\t\t\t\tthis.allTags.add(tags);", "+\t\t\t\t\t\tcomments.add(buffer.toString());", "+\t\t\t\t\t\tallTags.add(tags);", "-\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\t\tif (chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\telse buffer.append(chars);"]}], "num": 43405}
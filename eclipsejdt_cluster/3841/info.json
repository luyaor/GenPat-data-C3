{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dc0353535011b98d8b99be949fe2242", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b757313b26e96ea3cc1209b08dad840", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "76a8025d64f3e2797e6f2fc43657ddca227a53e7", "commitAfterChange": "72398fb1bfc9de8f8d1c235c08849e28d61cb9f4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tprivate LambdaExpression cachedResolvedCopy(TypeBinding targetType, boolean anyTargetOk)", "signatureAfterChange": "  \tprivate LambdaExpression cachedResolvedCopy(TypeBinding targetType, boolean anyTargetOk)", "diff": ["+", "+\t\ttargetType = findGroundTargetType(this.enclosingScope, targetType, argumentsTypeElided());", "+\t\tif (targetType == null)", "+\t\t\treturn null;", "+\t\t", "+\t\tMethodBinding sam = targetType.getSingleAbstractMethod(this.enclosingScope, true);", "+\t\tif (sam == null || !sam.isValidBinding())", "+\t\t\treturn null;", "+\t\t", "+\t\tif (sam.parameters.length != this.arguments.length)", "+\t\t\treturn null;", "+\t\t", "-\t\t", "-\t\ttargetType = findGroundTargetType(this.enclosingScope, targetType, argumentsTypeElided());", "-\t\tif (targetType == null)", "-\t\t\treturn null;", "-\t\t", "-\t\tMethodBinding sam = targetType.getSingleAbstractMethod(this.enclosingScope, true);", "-\t\tif (sam == null || !sam.isValidBinding())", "-\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed5d70c03b1f98b641d638835500f333", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability()", "signatureAfterChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType)", "diff": ["-\tpublic boolean isPertinentToApplicability() {", "+\tpublic boolean isPertinentToApplicability(TypeBinding targetType) {", "+\t\t", "+\t\t// Add the rule about type variable of the generic method.", "+\t\t", "+\t\tfinal MethodBinding sam = targetType.getSingleAbstractMethod(this.enclosingScope); // cached/cheap call.", "+\t\t", "+\t\tif (sam == null || !sam.isValidBinding())", "+\t\t\treturn true;", "+\t\t", "+\t\tif (sam.parameters.length != this.argumentTypes.length)", "+\t\t\treturn true;", "+\t\t", "-\t\t\tif (!returnExpressions[i].isPertinentToApplicability())", "+\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType))", "+\t\t"]}], "num": 3841}
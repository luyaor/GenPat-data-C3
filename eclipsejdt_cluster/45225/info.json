{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f16eed5738bb6b481182cdfa6ee20214", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fd7e2ea4c66d193909b3ef9db1e4c84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "64b96fa1ce2b515f4a874add8f64c38e4d9533fd", "commitAfterChange": "4dc818b4e43cdaa450b9bd9617f340ff5b901864", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void doExtraRangesForChildren(ASTNode node, Scanner scanner)", "signatureAfterChange": " \tprivate void doExtraRangesForChildren(ASTNode node, Scanner scanner)", "diff": ["-\t\tint lastChild= children.size() ;", "+\t\tint size = children.size() ;", "-\t\tint lastPos = node.getStartPosition() + node.getLength();", "-\t\tscanner.resetTo(lastPos, scanner.source.length-1);", "-\t\ttry {", "-\t\t\tint token = -1;", "-\t\t\tdo {", "-\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t} while (token >= TerminalTokens.TokenNameWHITESPACE && token <= TerminalTokens.TokenNameCOMMENT_JAVADOC);", "-\t\t\tlastPos = scanner.getCurrentTokenStartPosition();", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// do nothing", "-\t\t}", "+\t\tint lastPos = getExtendedEnd(node);", "+//\t\tint lastPos = node.getStartPosition() + node.getLength();", "+//\t\tscanner.resetTo(lastPos, scanner.source.length-1);", "+//\t\ttry {", "+//\t\t\tint token = -1;", "+//\t\t\tdo {", "+//\t\t\t\ttoken = scanner.getNextToken();", "+//\t\t\t} while (token >= TerminalTokens.TokenNameWHITESPACE && token <= TerminalTokens.TokenNameCOMMENT_JAVADOC);", "+//\t\t\tlastPos = scanner.getCurrentTokenStartPosition();", "+//\t\t} catch (InvalidInputException e) {", "+//\t\t\t// do nothing", "+//\t\t}", "-\t\t\tfor (int i= 0; i < lastChild; i++) {", "+\t\t\tfor (int i= 0; i < size; i++) {", "-\t\t\t\tint nextStart = i==(lastChild-1) ? lastPos : ((ASTNode) children.get(i+1)).getStartPosition();", "+\t\t\t\tboolean lastChild = i==(size-1);", "+\t\t\t\tint nextStart = lastChild ? lastPos : ((ASTNode) children.get(i+1)).getStartPosition();", "-\t\t\t\tpreviousEnd = storeTrailingComments(current, nextStart,scanner);", "+\t\t\t\tpreviousEnd = storeTrailingComments(current, nextStart, scanner, lastChild);", "-\t\tfor (int i= 0; i < lastChild; i++) {", "+\t\tfor (int i= 0; i < size; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d903b9785e6e6d9071c0c85dcb9e96e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": " \t \tprotected void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["+\tprotected void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "+\t\tint start = expression.sourceStart;", "+\t\tint end = expression.sourceEnd;", "+\t\tint leftParentCount = 1;", "+\t\tint rightParentCount = 0;", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token = this.scanner.getNextToken();", "+\t\t\texpression.sourceStart = this.scanner.currentPosition;", "+\t\t\tboolean stop = false;", "+\t\t\twhile (!stop && ((token  = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "+\t\t\t\t\t\tleftParentCount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "+\t\t\t\t\t\trightParentCount++;", "+\t\t\t\t\t\tif (rightParentCount == leftParentCount) {", "+\t\t\t\t\t\t\t// we found the matching parenthesis", "+\t\t\t\t\t\t\tstop = true;", "+\t\t\t\t\t\t}", "+\t\t\t}", "+\t\t\texpression.sourceEnd = this.scanner.startPosition - 1;", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}", "-\t", "-\tprivate void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "-\t\tint start = expression.sourceStart;", "-\t\tint end = expression.sourceEnd;", "-\t\tint leftParentCount = 1;", "-\t\tint rightParentCount = 0;", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token = this.scanner.getNextToken();", "-\t\t\texpression.sourceStart = this.scanner.currentPosition;", "-\t\t\tboolean stop = false;", "-\t\t\twhile (!stop && ((token  = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "-\t\t\t\t\t\tleftParentCount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "-\t\t\t\t\t\trightParentCount++;", "-\t\t\t\t\t\tif (rightParentCount == leftParentCount) {", "-\t\t\t\t\t\t\t// we found the matching parenthesis", "-\t\t\t\t\t\t\tstop = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\texpression.sourceEnd = this.scanner.startPosition - 1;", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}"]}], "num": 45225}
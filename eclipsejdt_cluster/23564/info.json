{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c213c9d6dcd8999e41d1d858f79555ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b59577dc8989a259e9b05280ff85126", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-\tchar[] methodSignature = use15specifics ? method.getGenericSignature() : null;", "+\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, Since a 1.4 project can have a 1.5", "+\t   type as a super type and the 1.5 type could be generic, we must internalize usages of type", "+\t   variables properly in order to be able to apply substitutions and thus be able to detect", "+\t   overriding in the presence of generics. Seeing the erased form is not good enough.", "+\t */", "+\tchar[] methodSignature = method.getGenericSignature(); // always use generic signature, even in 1.4", "-\t\tSignatureWrapper wrapper = new SignatureWrapper(methodSignature);", "+\t\tSignatureWrapper wrapper = new SignatureWrapper(methodSignature, use15specifics);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f22e7a7cace28f033d4825514b554368", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-\tchar[] methodSignature = use15specifics ? method.getGenericSignature() : null;", "+\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, Since a 1.4 project can have a 1.5", "+\t   type as a super type and the 1.5 type could be generic, we must internalize usages of type", "+\t   variables properly in order to be able to apply substitutions and thus be able to detect", "+\t   overriding in the presence of generics. Seeing the erased form is not good enough.", "+\t */", "+\tchar[] methodSignature = method.getGenericSignature(); // always use generic signature, even in 1.4", "-\t\tSignatureWrapper wrapper = new SignatureWrapper(methodSignature);", "+\t\tSignatureWrapper wrapper = new SignatureWrapper(methodSignature, use15specifics);"]}], "num": 23564}
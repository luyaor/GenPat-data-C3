{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5addc61117a5752d622139125db064b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19fe4a656167f55dfe1e564a36a7af7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic boolean compile(String[] argv)", "signatureAfterChange": " \tpublic boolean compile(String[] argv)", "diff": ["-\t\t\tif (proceed) {", "-\t\t\t\tif (showProgress)", "-\t\t\t\t\tout.println(Main.bind(\"progress.compiling\")); //$NON-NLS-1$", "-\t\t\t\tfor (int i = 0; i < repetitions; i++) {", "-\t\t\t\t\tglobalProblemsCount = 0;", "-\t\t\t\t\tglobalErrorsCount = 0;", "-\t\t\t\t\tglobalWarningsCount = 0;", "-\t\t\t\t\tlineCount = 0;", "-\t\t\t\t\texportedClassFilesCounter = 0;", "+\t\t\tif (this.proceed) {", "+\t\t\t\tif (this.showProgress)", "+\t\t\t\t\tthis.out.println(Main.bind(\"progress.compiling\")); //$NON-NLS-1$", "+\t\t\t\tfor (int i = 0; i < this.repetitions; i++) {", "+\t\t\t\t\tthis.globalProblemsCount = 0;", "+\t\t\t\t\tthis.globalErrorsCount = 0;", "+\t\t\t\t\tthis.globalWarningsCount = 0;", "+\t\t\t\t\tthis.lineCount = 0;", "+\t\t\t\t\tthis.exportedClassFilesCounter = 0;", "-\t\t\t\t\tif (repetitions > 1) {", "-\t\t\t\t\t\tout.flush();", "-\t\t\t\t\t\tout.println(", "+\t\t\t\t\tif (this.repetitions > 1) {", "+\t\t\t\t\t\tthis.out.flush();", "+\t\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\t\t\tString.valueOf(repetitions)));", "+\t\t\t\t\t\t\t\tString.valueOf(this.repetitions)));", "-\t\t\t\t\tif (timer) {", "+\t\t\t\t\tif (this.timer) {", "-\t\t\t\t\t\ttime = System.currentTimeMillis() - startTime;", "-\t\t\t\t\t\tif (lineCount != 0) {", "-\t\t\t\t\t\t\tout.println(", "+\t\t\t\t\t\tthis.time = System.currentTimeMillis() - startTime;", "+\t\t\t\t\t\tif (this.lineCount != 0) {", "+\t\t\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\t\t\t\t\tString.valueOf(lineCount),", "-\t\t\t\t\t\t\t\t\t\tString.valueOf(time),", "-\t\t\t\t\t\t\t\t\t\tString.valueOf(((int)(lineCount * 10000.0 / time)) / 10.0)}));", "+\t\t\t\t\t\t\t\t\t\tString.valueOf(this.lineCount),", "+\t\t\t\t\t\t\t\t\t\tString.valueOf(this.time),", "+\t\t\t\t\t\t\t\t\t\tString.valueOf(((int)(this.lineCount * 10000.0 / this.time)) / 10.0)}));", "-\t\t\t\t\t\t\tout.println(Main.bind(\"compile.totalTime\", String.valueOf(time))); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.out.println(Main.bind(\"compile.totalTime\", String.valueOf(this.time))); //$NON-NLS-1$", "-\t\t\t\t\tif (globalProblemsCount > 0) {", "-\t\t\t\t\t\tif (globalProblemsCount == 1) {", "-\t\t\t\t\t\t\terr.print(Main.bind(\"compile.oneProblem\")); //$NON-NLS-1$", "+\t\t\t\t\tif (this.globalProblemsCount > 0) {", "+\t\t\t\t\t\tif (this.globalProblemsCount == 1) {", "+\t\t\t\t\t\t\tthis.err.print(Main.bind(\"compile.oneProblem\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\terr.print(", "-\t\t\t\t\t\t\t\tMain.bind(\"compile.severalProblems\", String.valueOf(globalProblemsCount))); \t//$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.err.print(", "+\t\t\t\t\t\t\t\tMain.bind(\"compile.severalProblems\", String.valueOf(this.globalProblemsCount))); \t//$NON-NLS-1$", "-\t\t\t\t\t\terr.print(\" (\"); //$NON-NLS-1$", "-\t\t\t\t\t\tif (globalErrorsCount > 0) {", "-\t\t\t\t\t\t\tif (globalErrorsCount == 1) {", "-\t\t\t\t\t\t\t\terr.print(Main.bind(\"compile.oneError\")); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.err.print(\" (\"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (this.globalErrorsCount > 0) {", "+\t\t\t\t\t\t\tif (this.globalErrorsCount == 1) {", "+\t\t\t\t\t\t\t\tthis.err.print(Main.bind(\"compile.oneError\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\terr.print(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"compile.severalErrors\", String.valueOf(globalErrorsCount))); \t//$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.err.print(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"compile.severalErrors\", String.valueOf(this.globalErrorsCount))); \t//$NON-NLS-1$", "-\t\t\t\t\t\tif (globalWarningsCount > 0) {", "-\t\t\t\t\t\t\tif (globalErrorsCount > 0) {", "-\t\t\t\t\t\t\t\terr.print(\", \"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (this.globalWarningsCount > 0) {", "+\t\t\t\t\t\t\tif (this.globalErrorsCount > 0) {", "+\t\t\t\t\t\t\t\tthis.err.print(\", \"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tif (globalWarningsCount == 1) {", "-\t\t\t\t\t\t\t\terr.print(Main.bind(\"compile.oneWarning\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (this.globalWarningsCount == 1) {", "+\t\t\t\t\t\t\t\tthis.err.print(Main.bind(\"compile.oneWarning\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\terr.print(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"compile.severalWarnings\", String.valueOf(globalWarningsCount))); \t//$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.err.print(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"compile.severalWarnings\", String.valueOf(this.globalWarningsCount))); \t//$NON-NLS-1$", "-\t\t\t\t\t\terr.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.err.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\tif (exportedClassFilesCounter != 0", "+\t\t\t\t\tif (this.exportedClassFilesCounter != 0", "-\t\t\t\t\t\tif (exportedClassFilesCounter == 1) {", "-\t\t\t\t\t\t\tout.println(Main.bind(\"compile.oneClassFileGenerated\")); //$NON-NLS-1$", "+\t\t\t\t\t\tif (this.exportedClassFilesCounter == 1) {", "+\t\t\t\t\t\t\tthis.out.println(Main.bind(\"compile.oneClassFileGenerated\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\tout.println(", "+\t\t\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\t\t\t\tString.valueOf(exportedClassFilesCounter)));", "+\t\t\t\t\t\t\t\t\tString.valueOf(this.exportedClassFilesCounter)));", "-\t\t\t\tif (showProgress)", "-\t\t\t\t\tout.println();", "+\t\t\t\tif (this.showProgress)", "+\t\t\t\t\tthis.out.println();", "-\t\t\tif (systemExitWhenFinished) {", "-\t\t\t\tout.flush();", "-\t\t\t\terr.flush();", "-\t\t\t\tSystem.exit(globalErrorsCount > 0 ? -1 : 0);", "+\t\t\tif (this.systemExitWhenFinished) {", "+\t\t\t\tthis.out.flush();", "+\t\t\t\tthis.err.flush();", "+\t\t\t\tSystem.exit(this.globalErrorsCount > 0 ? -1 : 0);", "-\t\t\terr.println(e.getMessage());", "-\t\t\terr.println(\"------------------------\"); //$NON-NLS-1$", "+\t\t\tthis.err.println(e.getMessage());", "+\t\t\tthis.err.println(\"------------------------\"); //$NON-NLS-1$", "-\t\t\tif (systemExitWhenFinished) {", "+\t\t\tif (this.systemExitWhenFinished) {", "-\t\t\tif (systemExitWhenFinished) {", "-\t\t\t\tout.flush();", "-\t\t\t\terr.flush();", "+\t\t\tif (this.systemExitWhenFinished) {", "+\t\t\t\tthis.out.flush();", "+\t\t\t\tthis.err.flush();", "-\t\t\t\t\terr.close();", "+\t\t\t\t\tthis.err.close();", "-\t\t\tout.flush();", "-\t\t\terr.flush();", "+\t\t\tthis.out.flush();", "+\t\t\tthis.err.flush();", "-\t\t\t\terr.close();", "+\t\t\t\tthis.err.close();", "-\t\tif (globalErrorsCount == 0){", "+\t\tif (this.globalErrorsCount == 0){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "496bea1739243c9c6f2f515a6dc52795", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tconstant = NotAConstant;", "-\tthis.qualifyingType = this.receiverType = receiver.resolveType(scope); ", "+\tthis.constant = NotAConstant;", "+\tthis.qualifyingType = this.receiverType = this.receiver.resolveType(scope); ", "-\tif (arguments != null) {", "+\tif (this.arguments != null) {", "-\t\tint length = arguments.length;", "+\t\tint length = this.arguments.length;", "-\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null)", "+\t\t\tif ((argumentTypes[i] = this.arguments[i].resolveType(scope)) == null)", "-\tif (receiverType == null) ", "+\tif (this.receiverType == null) ", "-\tif (receiverType.isBaseType()) {", "-\t\tscope.problemReporter().errorNoMethodFor(this, receiverType, argumentTypes);", "+\tif (this.receiverType.isBaseType()) {", "+\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "-\tbinding = ", "-\t\treceiver.isImplicitThis()", "-\t\t\t? scope.getImplicitMethod(selector, argumentTypes, this)", "-\t\t\t: scope.getMethod(receiverType, selector, argumentTypes, this); ", "-\tif (!binding.isValidBinding()) {", "-\t\tif (binding instanceof ProblemMethodBinding", "-\t\t\t&& ((ProblemMethodBinding) binding).problemId() == NotVisible) {", "+\tthis.binding = ", "+\t\tthis.receiver.isImplicitThis()", "+\t\t\t? scope.getImplicitMethod(this.selector, argumentTypes, this)", "+\t\t\t: scope.getMethod(this.receiverType, this.selector, argumentTypes, this); ", "+\tif (!this.binding.isValidBinding()) {", "+\t\tif (this.binding instanceof ProblemMethodBinding", "+\t\t\t&& ((ProblemMethodBinding) this.binding).problemId() == NotVisible) {", "-\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\tif (delegateThis == null){ // if not found then internal error, field should have been found", "-\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\tscope.problemReporter().invalidMethod(this, binding);", "+\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\tif (this.delegateThis == null){ // if not found then internal error, field should have been found", "+\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\tscope.problemReporter().invalidMethod(this, this.binding);", "-\t\t\t\tconstant = NotAConstant;", "-\t\t\t\tscope.problemReporter().invalidMethod(this, binding);", "+\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\tscope.problemReporter().invalidMethod(this, this.binding);", "-\t\t\t\treceiver instanceof CodeSnippetThisReference && ((CodeSnippetThisReference) receiver).isImplicit", "-\t\t\t\t\t? localScope.getImplicitMethod((ReferenceBinding)delegateThis.type, selector, argumentTypes, this)", "-\t\t\t\t\t: localScope.getMethod(delegateThis.type, selector, argumentTypes, this); ", "+\t\t\t\tthis.receiver instanceof CodeSnippetThisReference && ((CodeSnippetThisReference) this.receiver).isImplicit", "+\t\t\t\t\t? localScope.getImplicitMethod((ReferenceBinding)this.delegateThis.type, this.selector, argumentTypes, this)", "+\t\t\t\t\t: localScope.getMethod(this.delegateThis.type, this.selector, argumentTypes, this); ", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tif (receiverType instanceof ReferenceBinding) {", "-\t\t\t\t\t\tbinding.declaringClass = (ReferenceBinding) receiverType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tif (this.receiverType instanceof ReferenceBinding) {", "+\t\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.receiverType;", "-\t\t\t\t\t\tscope.problemReporter().errorNoMethodFor(this, receiverType, argumentTypes);", "+\t\t\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "-\t\t\t\tscope.problemReporter().invalidMethod(this, binding);", "+\t\t\t\tscope.problemReporter().invalidMethod(this, this.binding);", "-\t\t\t\tbinding = privateBinding;", "+\t\t\t\tthis.binding = privateBinding;", "-\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\tif (receiverType instanceof ReferenceBinding) {", "-\t\t\t\t\tbinding.declaringClass = (ReferenceBinding) receiverType;", "+\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\tif (this.receiverType instanceof ReferenceBinding) {", "+\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.receiverType;", "-\t\t\t\t\tscope.problemReporter().errorNoMethodFor(this, receiverType, argumentTypes);", "+\t\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "-\t\t\tscope.problemReporter().invalidMethod(this, binding);", "+\t\t\tscope.problemReporter().invalidMethod(this, this.binding);", "-\tif (!binding.isStatic()) {", "+\tif (!this.binding.isStatic()) {", "-\t\tif (receiver instanceof NameReference) {", "-\t\t\tif ((((NameReference) receiver).bits & BindingIds.TYPE) != 0) {", "-\t\t\t\tscope.problemReporter().mustUseAStaticMethod(this, binding);", "+\t\tif (this.receiver instanceof NameReference) {", "+\t\t\tif ((((NameReference) this.receiver).bits & BindingIds.TYPE) != 0) {", "+\t\t\t\tscope.problemReporter().mustUseAStaticMethod(this, this.binding);", "-\tif (arguments != null)", "-\t\tfor (int i = 0; i < arguments.length; i++)", "-\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "+\tif (this.arguments != null)", "+\t\tfor (int i = 0; i < this.arguments.length; i++)", "+\t\t\tthis.arguments[i].implicitWidening(this.binding.parameters[i], argumentTypes[i]);", "-\tif (binding.isAbstract()) {", "-\t\tif (receiver.isSuper()) {", "-\t\t\tscope.problemReporter().cannotDireclyInvokeAbstractMethod(this, binding);", "+\tif (this.binding.isAbstract()) {", "+\t\tif (this.receiver.isSuper()) {", "+\t\t\tscope.problemReporter().cannotDireclyInvokeAbstractMethod(this, this.binding);", "-\tif (isMethodUseDeprecated(binding, scope))", "-\t\tscope.problemReporter().deprecatedMethod(binding, this);", "+\tif (isMethodUseDeprecated(this.binding, scope))", "+\t\tscope.problemReporter().deprecatedMethod(this.binding, this);", "-\treturn this.resolvedType = binding.returnType;", "+\treturn this.resolvedType = this.binding.returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aacab318a427d6b40bbf283fc3b248d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tconstant = Constant.NotAConstant;", "+\tthis.constant = Constant.NotAConstant;", "-\t\tthis.receiver.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\tthis.receiver.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\tthis.actualReceiverType = receiver.resolveType(scope); ", "-\tboolean receiverIsType = receiver instanceof NameReference && (((NameReference) receiver).bits & Binding.TYPE) != 0;", "+\tthis.actualReceiverType = this.receiver.resolveType(scope); ", "+\tboolean receiverIsType = this.receiver instanceof NameReference && (((NameReference) this.receiver).bits & Binding.TYPE) != 0;", "-\tif (arguments != null) {", "+\tif (this.arguments != null) {", "-\t\tint length = arguments.length;", "+\t\tint length = this.arguments.length;", "-\t\t\tExpression argument = arguments[i];", "+\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\t\t\targument.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\t\t\tif (actualReceiverType instanceof ReferenceBinding) {", "+\t\t\tif (this.actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? actualReceiverType : argumentTypes[i]; // replace args with errors with receiver", "+\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? TypeBinding.NULL : argumentTypes[i]; // replace args with errors with null type", "-\t\t\t\t\treceiver.isImplicitThis()", "-\t\t\t\t\t\t? scope.getImplicitMethod(selector, pseudoArgs, this)", "-\t\t\t\t\t\t: scope.findMethod((ReferenceBinding) actualReceiverType, selector, pseudoArgs, this);", "-\t\t\t\tif (binding != null && !binding.isValidBinding()) {", "-\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\t\t\t\tthis.receiver.isImplicitThis()", "+\t\t\t\t\t\t? scope.getImplicitMethod(this.selector, pseudoArgs, this)", "+\t\t\t\t\t\t: scope.findMethod((ReferenceBinding) this.actualReceiverType, this.selector, pseudoArgs, this);", "+\t\t\t\tif (this.binding != null && !this.binding.isValidBinding()) {", "+\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)this.binding).closestMatch;", "+\t\t\t\t\t\tif (closestMatch.original().typeVariables != Binding.NO_TYPE_VARIABLES) { // generic method", "+\t\t\t\t\t\t\t// shouldn't return generic method outside its context, rather convert it to raw method (175409)", "+\t\t\t\t\t\t\tclosestMatch = scope.environment().createParameterizedGenericMethod(closestMatch.original(), (RawTypeBinding)null);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((closestMatch.isPrivate() || closestMatch.declaringClass.isLocalType()) && !scope.isDefinedInMethod(closestMatch)) {", "+\t\t\t\t\t\tMethodBinding closestMatchOriginal = closestMatch.original();", "+\t\t\t\t\t\tif ((closestMatchOriginal.isPrivate() || closestMatchOriginal.declaringClass.isLocalType()) && !scope.isDefinedInMethod(closestMatchOriginal)) {", "-\t\t\t\t\t\t\tclosestMatch.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "+\t\t\t\t\t\t\tclosestMatchOriginal.modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "-\t\treceiver.isImplicitThis()", "-\t\t\t? scope.getImplicitMethod(selector, argumentTypes, this)", "-\t\t\t: scope.getMethod(this.actualReceiverType, selector, argumentTypes, this); ", "-\tif (!binding.isValidBinding()) {", "-\t\tif (binding.declaringClass == null) {", "+\t\tthis.receiver.isImplicitThis()", "+\t\t\t? scope.getImplicitMethod(this.selector, argumentTypes, this)", "+\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this); ", "+\tif (!this.binding.isValidBinding()) {", "+\t\tif (this.binding.declaringClass == null) {", "-\t\t\t\tbinding.declaringClass = (ReferenceBinding) this.actualReceiverType;", "+\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.actualReceiverType;", "-\t\tscope.problemReporter().invalidMethod(this, binding);", "-\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\tscope.problemReporter().invalidMethod(this, this.binding);", "+\t\tMethodBinding closestMatch = ((ProblemMethodBinding)this.binding).closestMatch;", "-\t\t\tif ((closestMatch.isPrivate() || closestMatch.declaringClass.isLocalType()) && !scope.isDefinedInMethod(closestMatch)) {", "+\t\t\tMethodBinding closestMatchOriginal = closestMatch.original();\t\t\t", "+\t\t\tif ((closestMatchOriginal.isPrivate() || closestMatchOriginal.declaringClass.isLocalType()) && !scope.isDefinedInMethod(closestMatchOriginal)) {", "-\t\t\t\tclosestMatch.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "+\t\t\t\tclosestMatchOriginal.modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "-\tif (!binding.isStatic()) {", "+\tif (!this.binding.isStatic()) {", "-\t\t\tscope.problemReporter().mustUseAStaticMethod(this, binding);", "+\t\t\tscope.problemReporter().mustUseAStaticMethod(this, this.binding);", "-\t\t\t\t\t&& (this.receiver.bits & IgnoreRawTypeCheck) == 0 ", "+\t\t\t\t\t&& (this.receiver.bits & ASTNode.IgnoreRawTypeCheck) == 0 ", "-\t\t\treceiver.computeConversion(scope, this.actualReceiverType, this.actualReceiverType);", "+\t\t\tthis.receiver.computeConversion(scope, this.actualReceiverType, this.actualReceiverType);", "-\t\tif (!(receiver.isImplicitThis() || receiver.isSuper() || receiverIsType)) {", "-\t\t\tscope.problemReporter().nonStaticAccessToStaticMethod(this, binding);", "+\t\tif (!(this.receiver.isImplicitThis() || this.receiver.isSuper() || receiverIsType)) {", "+\t\t\tscope.problemReporter().nonStaticAccessToStaticMethod(this, this.binding);", "-\t\tif (!receiver.isImplicitThis() && binding.declaringClass != actualReceiverType) {", "-\t\t\tscope.problemReporter().indirectAccessToStaticMethod(this, binding);", "+\t\tif (!this.receiver.isImplicitThis() && this.binding.declaringClass != this.actualReceiverType) {", "+\t\t\tscope.problemReporter().indirectAccessToStaticMethod(this, this.binding);", "-\tcheckInvocationArguments(scope, this.receiver, actualReceiverType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+\tcheckInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this);", "-\tif (binding.isAbstract()) {", "-\t\tif (receiver.isSuper()) {", "-\t\t\tscope.problemReporter().cannotDireclyInvokeAbstractMethod(this, binding);", "+\tif (this.binding.isAbstract()) {", "+\t\tif (this.receiver.isSuper()) {", "+\t\t\tscope.problemReporter().cannotDireclyInvokeAbstractMethod(this, this.binding);", "-\tif (isMethodUseDeprecated(binding, scope, true))", "-\t\tscope.problemReporter().deprecatedMethod(binding, this);", "+\tif (isMethodUseDeprecated(this.binding, scope, true))", "+\t\tscope.problemReporter().deprecatedMethod(this.binding, this);", "-\tif (actualReceiverType.isArrayType() ", "+\tif (this.actualReceiverType.isArrayType() ", "-\t\t\t&& CharOperation.equals(this.binding.selector, CLONE)) {", "-\t\tthis.resolvedType = actualReceiverType;", "+\t\t\t&& CharOperation.equals(this.binding.selector, TypeConstants.CLONE)) {", "+\t\tthis.resolvedType = this.actualReceiverType;", "-\tif (receiver.isSuper() && compilerOptions.getSeverity(CompilerOptions.OverridingMethodWithoutSuperInvocation) != ProblemSeverities.Ignore) {", "+\tif (this.receiver.isSuper() && compilerOptions.getSeverity(CompilerOptions.OverridingMethodWithoutSuperInvocation) != ProblemSeverities.Ignore) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff5faff8cc18a31932d968339e14226", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\t\tcompletionToken = type.token;", "+\t\t\tthis.completionToken = type.token;", "-\t\t\tfindTypesAndPackages(completionToken, scope);", "-\t\t\tfindKeywordsForMember(completionToken, field.modifiers);", "+\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\tfindKeywordsForMember(this.completionToken, field.modifiers);", "-\t\t\t\tfindMethods(completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false, false);", "-\t\t\t\tproposeNewMethod(completionToken, scope.enclosingSourceType());", "+\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false, false);", "+\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "-\t\t\t\tcompletionToken = type.token;", "+\t\t\t\tthis.completionToken = type.token;", "-\t\t\t\tfindTypesAndPackages(completionToken, scope.parent);", "-\t\t\t\tfindKeywordsForMember(completionToken, method.modifiers);", "+\t\t\t\tfindTypesAndPackages(this.completionToken, scope.parent);", "+\t\t\t\tfindKeywordsForMember(this.completionToken, method.modifiers);", "-\t\t\t\t\tfindMethods(completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false);", "-\t\t\t\t\tproposeNewMethod(completionToken, scope.enclosingSourceType());", "+\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false);", "+\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "-\t\t\t\t\tcompletionToken = singleNameReference.token;", "+\t\t\t\t\tthis.completionToken = singleNameReference.token;", "-\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\tfindTypesAndPackages(completionToken, scope);", "-\t\t\t\t\tfindKeywords(completionToken, singleNameReference.possibleKeywords);", "+\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "-\t\t\t\t\t\tif(CharOperation.prefixEquals(completionToken, Keywords.THIS, false)) {", "+\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "-\t\t\t\t\t\t} else if(CharOperation.prefixEquals(completionToken, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "-\t\t\t\t\t\tcompletionToken = ((CompletionOnSingleTypeReference) astNode).token;", "+\t\t\t\t\t\tthis.completionToken = ((CompletionOnSingleTypeReference) astNode).token;", "-\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnClassReference;", "-\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnExceptionReference;", "-\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;", "+\t\t\t\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnClassReference;", "+\t\t\t\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnExceptionReference;", "+\t\t\t\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;", "-\t\t\t\t\t\t\tfindTypesAndPackages(completionToken, scope);", "+\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "+\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(completionToken, receiverType, scope, ref, scope,false,false);", "+\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType, scope, ref, scope,false,false);", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(completionToken, receiverType, scope, scope.enclosingSourceType());", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(this.completionToken, receiverType, scope, scope.enclosingSourceType());", "-\t\t\t\t\t\t\t\t\tfindClassField(completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t\tif(completionToken.length > 0) {", "-\t\t\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.THIS});", "+\t\t\t\t\t\t\t\t\t\tif(this.completionToken.length > 0) {", "+\t\t\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.THIS});", "-\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(completionToken, Keywords.THIS);", "-\t\t\t\t\t\t\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\t\t\t\t\t\t\trequestor.acceptKeyword(Keywords.THIS, startPosition - offset, endPosition - offset,relevance);", "+\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, Keywords.THIS);", "+\t\t\t\t\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\t\t\t\t\tthis.requestor.acceptKeyword(Keywords.THIS, this.startPosition - this.offset, this.endPosition - this.offset,relevance);", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;", "-\t\t\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;", "-\t\t\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;", "+\t\t\t\t\t\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;", "+\t\t\t\t\t\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;", "+\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;", "-\t\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "+\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t\tcompletionToken = access.token;", "+\t\t\t\t\t\t\t\t\tthis.completionToken = access.token;", "-\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.NEW});", "+\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW});", "-\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tcompletionToken = messageSend.selector;", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken = messageSend.selector;", "-\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(completionToken, argTypes, scope, messageSend, scope);", "+\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(this.completionToken, argTypes, scope, messageSend, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = access.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = access.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = method.selector;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = method.selector;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = field.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = field.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = arg.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = arg.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideQualifiedReference = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tassistNodeIsClass = ref.isClass();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tassistNodeIsException = ref.isException();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tassistNodeIsInterface = ref.isInterface();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsClass = ref.isClass();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsException = ref.isException();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = ref.isInterface();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken = ref.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompletionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b00d60e217dd2ad00f7eacaa266890", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "1b80cae94595518122618b458eed60915f76d171", "commitAfterChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif ((bits & IsReachable) == 0) {", "+\t\tif ((this.bits & ASTNode.IsReachable) == 0) {", "-\t\t\tthis.anyExceptionLabels = NO_EXCEPTION_HANDLER;", "+\t\t\tthis.anyExceptionLabels = SubRoutineStatement.NO_EXCEPTION_HANDLER;", "-\t\tif (subRoutineStartLabel == null) { ", "+\t\tif (this.subRoutineStartLabel == null) { ", "-\t\t\t} else if (scope.compilerOptions().inlineJsrBytecode) {", "+\t\t\t} else if (this.scope.compilerOptions().inlineJsrBytecode) {", "-\t\t\t\tcatchArguments == null ? 0 : catchArguments.length];", "+\t\t\t\tthis.catchArguments == null ? 0 : this.catchArguments.length];", "-\t\t\texceptionLabels[i] = new ExceptionLabel(codeStream, catchArguments[i].binding.type);", "+\t\t\texceptionLabels[i] = new ExceptionLabel(codeStream, this.catchArguments[i].binding.type);", "-\t\tif (subRoutineStartLabel != null) {", "-\t\t\tsubRoutineStartLabel.initialize(codeStream);", "+\t\tif (this.subRoutineStartLabel != null) {", "+\t\t\tthis.subRoutineStartLabel.initialize(codeStream);", "-\t\ttryBlock.generateCode(scope, codeStream);", "+\t\tthis.tryBlock.generateCode(this.scope, codeStream);", "-\t\t\tif (!tryBlockExit) {", "+\t\t\tif (!this.tryBlockExit) {", "-\t\t\t\t\t\tcodeStream.goto_(subRoutineStartLabel);", "+\t\t\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(tryBlock.scope, position);", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(this.tryBlock.scope, position);", "-\t\t\tif (catchArguments != null) {", "+\t\t\tif (this.catchArguments != null) {", "-\t\t\t\t\tif (preTryInitStateIndex != -1) {", "-\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preTryInitStateIndex);", "+\t\t\t\t\tif (this.preTryInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\tif ((catchVar = catchArguments[i].binding).resolvedPosition != -1) {", "+\t\t\t\t\tif ((catchVar = this.catchArguments[i].binding).resolvedPosition != -1) {", "-\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, catchArguments[i].sourceStart);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, this.catchArguments[i].sourceStart);", "-\t\t\t\t\tcatchBlocks[i].generateCode(scope, codeStream);", "-\t\t\t\t\tif (!catchExits[i]) {", "+\t\t\t\t\tthis.catchBlocks[i].generateCode(this.scope, codeStream);", "+\t\t\t\t\tif (!this.catchExits[i]) {", "-\t\t\t\t\t\t\t\tcodeStream.goto_(subRoutineStartLabel);", "+\t\t\t\t\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "-\t\t\tif (subRoutineStartLabel != null) {", "-\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "-\t\t\t\tif (preTryInitStateIndex != -1) {", "+\t\t\tif (this.subRoutineStartLabel != null) {", "+\t\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "+\t\t\t\tif (this.preTryInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preTryInitStateIndex);", "+\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\t\tcodeStream.store(anyExceptionVariable, false);", "-\t\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, finallyBlock.sourceStart);", "+\t\t\t\t\t\tcodeStream.store(this.anyExceptionVariable, false);", "+\t\t\t\t\t\tcodeStream.jsr(this.subRoutineStartLabel);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);", "-\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, finallyBlock.sourceEnd);", "-\t\t\t\t\t\tsubRoutineStartLabel.place();", "-\t\t\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "+\t\t\t\t\t\tcodeStream.throwAnyException(this.anyExceptionVariable);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, this.finallyBlock.sourceEnd);", "+\t\t\t\t\t\tthis.subRoutineStartLabel.place();", "+\t\t\t\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "-\t\t\t\t\t\tcodeStream.store(returnAddressVariable, false);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, finallyBlock.sourceStart);", "-\t\t\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\t\t\t\tcodeStream.store(this.returnAddressVariable, false);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, this.finallyBlock.sourceStart);", "+\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\t\t\t\t\tcodeStream.ret(returnAddressVariable.resolvedPosition);", "+\t\t\t\t\t\tcodeStream.ret(this.returnAddressVariable.resolvedPosition);", "-\t\t\t\t\t\t\tfinallyBlock.sourceEnd);", "+\t\t\t\t\t\t\tthis.finallyBlock.sourceEnd);", "-\t\t\t\t\t\tcodeStream.store(anyExceptionVariable, false);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, finallyBlock.sourceStart);", "+\t\t\t\t\t\tcodeStream.store(this.anyExceptionVariable, false);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);", "-\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);", "-\t\t\t\t\t\tsubRoutineStartLabel.place();", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, finallyBlock.sourceEnd);", "+\t\t\t\t\t\tcodeStream.throwAnyException(this.anyExceptionVariable);", "+\t\t\t\t\t\tthis.subRoutineStartLabel.place();", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, this.finallyBlock.sourceEnd);", "-\t\t\t\t\t\tsubRoutineStartLabel.place();", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, finallyBlock.sourceStart);", "-\t\t\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\t\t\t\tthis.subRoutineStartLabel.place();", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);", "+\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\t\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "+\t\t\t\t\t\t\tcodeStream.jsr(this.subRoutineStartLabel);", "-\t\t\t\t\t\t\t\tfinallyBlock.sourceEnd);\t", "+\t\t\t\t\t\t\t\tthis.finallyBlock.sourceEnd);\t", "-\t\t\t\t\t\t\tif (preTryInitStateIndex != -1) {", "-\t\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preTryInitStateIndex);", "+\t\t\t\t\t\t\tif (this.preTryInitStateIndex != -1) {", "+\t\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\t\tif (subRoutineStartLabel != null) {", "-\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\tif (this.subRoutineStartLabel != null) {", "+\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\tif (mergedInitStateIndex != -1) {", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\tif (this.mergedInitStateIndex != -1) {", "+\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);", "+\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);"]}], "num": 1511}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0e595719311873afed1b8d29fd6f0df", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a57cbb79b3facff2b624a77c9a3a0a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "80a36bf53ae731edac012c99749b4fd073634fd5", "commitAfterChange": "775667d78092a7c5a2c35b021921f25b4037d7f4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\t", "+", "-\t", "+", "-\t\t\t\t\t\t\tFieldBinding fieldBinding =", "-\t\t\t\t\t\t\t\tclassScope.findField(enclosingType, name, invocationSite, needResolve);", "+\t\t\t\t\t\t\tFieldBinding fieldBinding = classScope.findField(enclosingType, name, invocationSite, needResolve);", "-\t", "+", "-\t\t\t\t\t\t\t\t\tif (enclosingType == fieldBinding.declaringClass", "-\t\t\t\t\t\t\t\t\t\t|| environment().options.complianceLevel >= ClassFileConstants.JDK1_4){", "+\t\t\t\t\t\t\t\t\tif (enclosingType == fieldBinding.declaringClass || environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t", "-\t\t\t\t\t\t\t\tif (foundField == null", "-\t\t\t\t\t\t\t\t\t|| (foundField.problemId() == NotVisible", "-\t\t\t\t\t\t\t\t\t\t&& fieldBinding.problemId() != NotVisible)) {", "+", "+\t\t\t\t\t\t\t\tif (foundField == null || (foundField.problemId() == NotVisible && fieldBinding.problemId() != NotVisible)) {", "-\t", "+", "-\t\t\t\t\tif (foundField.isValidBinding()){", "-\t\t\t\t\t\tif (foundDepth > 0){", "+\t\t\t\t\tif (foundField.isValidBinding()) {", "+\t\t\t\t\t\tif (foundDepth > 0) {", "+", "+\t\t\t\tif (environment().options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t// at this point the scope is a compilation unit scope & need to check for imported static fields", "+\t\t\t\t\tCompilationUnitScope unitScope = (CompilationUnitScope) scope;", "+\t\t\t\t\tImportBinding[] imports = unitScope.imports;", "+\t\t\t\t\tif (imports != null) {", "+\t\t\t\t\t\t// check single static imports", "+\t\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\t\t\tImportBinding importBinding = imports[i];", "+\t\t\t\t\t\t\tif (importBinding.isStatic() && !importBinding.onDemand) {", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(importBinding.compoundName[importBinding.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t\t\t\tif (unitScope.resolveSingleImport(importBinding) != null && importBinding.resolvedImport instanceof FieldBinding) {", "+\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "+\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\t\treturn importBinding.resolvedImport; // already know its visible", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// check on demand imports", "+\t\t\t\t\t\tboolean foundInImport = false;", "+\t\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\t\t\tImportBinding importBinding = imports[i];", "+\t\t\t\t\t\t\tif (importBinding.isStatic() && importBinding.onDemand) {", "+\t\t\t\t\t\t\t\tBinding resolvedImport = importBinding.resolvedImport;", "+\t\t\t\t\t\t\t\tif (resolvedImport instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\tFieldBinding temp = findField((ReferenceBinding) resolvedImport, name, invocationSite, needResolve);", "+\t\t\t\t\t\t\t\t\tif (temp != null) {", "+\t\t\t\t\t\t\t\t\t\tif (!temp.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\t\t\tproblemField = temp;", "+\t\t\t\t\t\t\t\t\t\t} else if (temp.isStatic()) {", "+\t\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "+\t\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.", "+\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\tfoundField = temp;", "+\t\t\t\t\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (foundField != null) return foundField;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c503b70d67998d3d004d893b6b6be389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "80a36bf53ae731edac012c99749b4fd073634fd5", "commitAfterChange": "775667d78092a7c5a2c35b021921f25b4037d7f4", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t: classScope.findExactMethod( receiverType, foundMethod.selector, foundMethod.parameters, invocationSite);", "+\t\t\t\t\t\t\t: classScope.findExactMethod(receiverType, foundMethod.selector, foundMethod.parameters, invocationSite);", "-\t\t\t\t\t\t\t\t|| ((fuzzyProblem == null || fuzzyProblem.problemId() != NotVisible) && environment().options.complianceLevel >= ClassFileConstants.JDK1_4)){", "+\t\t\t\t\t\t\t\t|| ((fuzzyProblem == null || fuzzyProblem.problemId() != NotVisible) && environment().options.complianceLevel >= ClassFileConstants.JDK1_4)) {", "-\t\t\t\t\t\tif (foundMethod == null", "-\t\t\t\t\t\t\t|| (foundMethod.problemId() == NotVisible", "-\t\t\t\t\t\t\t\t&& methodBinding.problemId() != NotVisible)) {", "+\t\t\t\t\t\tif (foundMethod == null || (foundMethod.problemId() == NotVisible && methodBinding.problemId() != NotVisible)) {", "-\t\t\t\t\t\t\tif (depth > 0){", "+\t\t\t\t\t\t\tif (depth > 0) {", "+", "+\t\tif (insideStaticContext && environment().options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t// at this point the scope is a compilation unit scope & need to check for imported static methods", "+\t\t\tCompilationUnitScope unitScope = (CompilationUnitScope) scope;", "+\t\t\tImportBinding[] imports = unitScope.imports;", "+\t\t\tif (imports != null) {", "+\t\t\t\t// check on demand imports", "+\t\t\t\tboolean foundInImport = false;", "+\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\tImportBinding importBinding = imports[i];", "+\t\t\t\t\tif (importBinding.isStatic() && importBinding.onDemand) {", "+\t\t\t\t\t\tBinding resolvedImport = importBinding.resolvedImport;", "+\t\t\t\t\t\tif (resolvedImport instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tMethodBinding temp = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\tif (temp != null) {", "+\t\t\t\t\t\t\t\tif (!temp.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\tif (foundMethod == null)", "+\t\t\t\t\t\t\t\t\t\tfoundMethod = temp;", "+\t\t\t\t\t\t\t\t} else if (temp.isStatic()) {", "+\t\t\t\t\t\t\t\t\tif (temp.canBeSeenBy(unitScope.fPackage)) {", "+\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "+\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand types.", "+\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(temp, selector, temp.parameters, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\tfoundMethod = temp;", "+\t\t\t\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t\t\t} else if (foundMethod == null) {", "+\t\t\t\t\t\t\t\t\t\tfoundMethod = new ProblemMethodBinding(temp, selector, temp.parameters, NotVisible);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (foundMethod != null)", "+\t\t\t\treturn foundMethod;", "+\t\t}"]}], "num": 49695}
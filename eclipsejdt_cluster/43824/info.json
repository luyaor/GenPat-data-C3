{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02a5e0fe842539e00d43fc961a6ef797", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c3153d0a73c2e8344a21f4fe4ce6470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "350354f214ca227e1737fa04a92c132cd3211f35", "commitAfterChange": "e85ca2cada691cc814bdc6ae7f59c48ddbdb7a54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\t\tCompilationUnitDeclaration unit;\r", "+\t\tCompilationUnitDeclaration unit = null;\r", "+\t\t\t\tboolean initializingSearchPattern = this.parser.matchSet == null;\r", "+\t\t\t\tif (initializingSearchPattern) {\r", "+\t\t\t\t\tthis.parser.matchSet = new MatchSet(this);\r", "+\t\t\t\t}\r", "-\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "+\t\t\t\t} finally {\r", "+\t\t\t\t\tif (initializingSearchPattern) {\r", "+\t\t\t\t\t\tif (!this.parser.matchSet.isEmpty() \r", "+\t\t\t\t\t\t\t\t&& unit != null) {\r", "+\t\t\t\t\t\t\t// potential matches were found while initializing the search pattern\r", "+\t\t\t\t\t\t\t// from the lookup environment: add them in the list of potential matches\r", "+\t\t\t\t\t\t\tPotentialMatch potentialMatch = \r", "+\t\t\t\t\t\t\t\tnew PotentialMatch(\r", "+\t\t\t\t\t\t\t\t\tthis,\r", "+\t\t\t\t\t\t\t\t\tfile, \r", "+\t\t\t\t\t\t\t\t\t(CompilationUnit)type.getCompilationUnit(), \r", "+\t\t\t\t\t\t\t\t\tunit,\r", "+\t\t\t\t\t\t\t\t\tthis.parser.matchSet);\r", "+\t\t\t\t\t\t\tthis.addPotentialMatch(potentialMatch);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tthis.parser.matchSet = null;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9edc307b66ee810b7ef7149c2f5ddd34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "7e90cfc843b0651b2df6811a5c412b5db3d07d3e", "commitAfterChange": "5aa22ef02c63418c06be6cd6a1ebf3ebbd649c6f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391201", "+\t\t\t\tif ((metaTagBits & TagBits.SE7AnnotationTargetMASK) == 0", "+\t\t\t\t\t\t&& (metaTagBits & (TagBits.AnnotationForTypeUse | TagBits.AnnotationForTypeParameter)) != 0) {", "+\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t\tswitch (kind) {", "+\t\t\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\t\t\tscope.problemReporter().invalidUsageOfTypeAnnotations(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForType) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForConstructor) != 0)", "+\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeParameter) != 0) {", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "+\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f7f2e606c50763261f025f8975b99d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void buildFields()", "signatureAfterChange": " \t \tprivate void buildFields()", "diff": ["+\t\tboolean hierarchyIsInconsistent = referenceContext.binding.isHierarchyInconsistent();", "-\t\t\treferenceContext.binding.fields = NoFields;", "+\t\t\tif (hierarchyIsInconsistent) { // 72468", "+\t\t\t\treferenceContext.binding.fields = new FieldBinding[1];", "+\t\t\t\treferenceContext.binding.fields[0] =", "+\t\t\t\t\tnew FieldBinding(IncompleteHierarchy, VoidBinding, AccPrivate, referenceContext.binding, null);", "+\t\t\t} else {", "+\t\t\t\treferenceContext.binding.fields = NoFields;", "+\t\t\t}", "+\t\tif (hierarchyIsInconsistent)", "+\t\t\tcount++;", "+\t\tif (hierarchyIsInconsistent)", "+\t\t\tfieldBindings[count++] = new FieldBinding(IncompleteHierarchy, VoidBinding, AccPrivate, referenceContext.binding, null);"]}], "num": 43824}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "531fd39f2e6b6dd6ad3f0b070a2f65eb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f7088cfa6d451b4b6e91f521115abbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "70b9f71bdfa4f15d433383739618a9fdcdbf50e8", "commitAfterChange": "d9dd3f3b4344311765aa43bd0ec69a035e3c1a0f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace) {", "-\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "-\t\t", "-\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "-\t\tformatOpeningBrace(array_initializer_brace_position, insertSpaceBeforeOpeningBrace);", "-\t\t", "-\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "-\t\tif (expressions != null) {", "-\t\t\tint expressionsLength = expressions.length;", "-\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "-\t\t\tif (expressionsLength > 1) {", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\t}", "-\t\t\t\tAlignment arrayInitializerAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\t\"array_initializer\",//$NON-NLS-1$", "-\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "-\t\t\t\t\t\tAlignment.R_OUTERMOST,", "-\t\t\t\t\t\texpressionsLength,", "-\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "-\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "-\t\t\t\t\t\ttrue);", "-\t\t\t\t", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t    arrayInitializerAlignment.fragmentIndentations[0] = arrayInitializerAlignment.breakIndentationLevel;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "-\t\t\t\tboolean ok = false;", "-\t\t\t\tdo {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tok = true;", "-\t\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t}", "-\t\t\t\t} while (!ok);", "-\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "-\t\t\t} else {", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\t\tthis.scribe.indent();", "-\t\t\t\t}", "-\t\t\t\t// we don't need to use an alignment", "-\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\tif (isComma()) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t}", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.unIndent();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t} else if (this.preferences.insert_space_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t} else if (this.preferences.insert_space_between_empty_braces_in_array_initializer) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, false, true); ", "-\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}\t", "-\t", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "-\t}", "+\tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope) {\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);", "+\t\t}", "+\t\t", "+\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "+\t\tformatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "+\t\t", "+\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "+\t\tif (expressions != null) {", "+\t\t\tint expressionsLength = expressions.length;", "+\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "+\t\t\tif (expressionsLength > 1) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "+\t\t\t\tAlignment arrayInitializerAlignment =this.scribe.createAlignment(", "+\t\t\t\t\t\t\"array_initializer\",//$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "+\t\t\t\t\t\tAlignment.R_OUTERMOST,", "+\t\t\t\t\t\texpressionsLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "+\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "+\t\t\t\t\t\ttrue);", "+\t\t\t\t", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t    arrayInitializerAlignment.fragmentIndentations[0] = arrayInitializerAlignment.breakIndentationLevel;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\texpressions[0].traverse(this, scope);", "+\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "+\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "+\t\t\t\t\t\t\t\tif (isComma()) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t}", "+\t\t\t\t// we don't need to use an alignment", "+\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\texpressions[0].traverse(this, scope);", "+\t\t\t\tif (isComma()) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t}", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t} else if (this.preferences.insert_space_before_closing_brace_in_array_initializer) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t} else if (this.preferences.insert_space_between_empty_braces_in_array_initializer) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, false, true); ", "+\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\tthis.scribe.unIndent();", "+\t\t}\t", "+\t", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(arrayInitializer, numberOfParens);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e41633b8360484700b5f83d702134fb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "54beaf9a0ac7e8e91c308765e4aff36ce5749605", "commitAfterChange": "2ad8f0c7463e2025ec9e28003dc9e376c4e0c20f", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "diff": ["-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        int line = this.scribe.line;", "-", "-        this.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "-", "-\t\tif (this.scribe.line > line) {", "-        \t// annotations introduced new line, but this is not a line wrapping", "-\t\t\t// see 158267", "-\t\t\tline = this.scribe.line;", "-\t\t}", "-\t\tthis.scribe.space();", "-", "-\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "-\t\tif (typeParameters != null) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "-\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tint length = typeParameters.length;", "-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "-\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "-\t\t\tif (isClosingGenericToken()) {", "-\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t}", "-", "-\t\t * Print the method return type", "+\t\t * Print comments to get proper line number", "-\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\tthis.scribe.printComment();", "+\t\tint line = this.scribe.line;", "+", "+\t\t// Create alignment", "+\t\tAlignment methodDeclAlignment = this.scribe.createAlignment(", "+\t\t\t\t\"methodDeclaration\",//$NON-NLS-1$", "+\t\t\t\tthis.preferences.alignment_for_method_declaration,", "+\t\t\t\tAlignment.R_INNERMOST,", "+\t\t\t\t3,", "+\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\tthis.scribe.enterAlignment(methodDeclAlignment);", "+\t\tboolean ok = false;", "+\t\tdo {", "+\t\t\ttry {", "-\t\tif (returnType != null) {", "-\t\t\treturnType.traverse(this, methodDeclarationScope);", "-\t\t}", "-\t\t/*", "-\t\t * Print the method name", "-\t\t */", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+\t\t\t\tthis.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "+\t\t\t\tint fragmentIndex = 0;", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, fragmentIndex);", "-\t\tformatMethodArguments(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+\t\t\t\tif (this.scribe.line > line) {", "+\t\t\t\t\t// annotations introduced new line, but this is not a line wrapping", "+\t\t\t\t\t// see 158267", "+\t\t\t\t\tline = this.scribe.line;", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.space();", "-\t\t/*", "-\t\t * Check for extra dimensions", "-\t\t */", "-\t\tint extraDimensions = getDimensions();", "-\t\tif (extraDimensions != 0) {", "-\t\t\t for (int i = 0; i < extraDimensions; i++) {", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t }", "-\t\t}", "+\t\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "+\t\t\t\tif (typeParameters != null) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "+\t\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tint length = typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+\t\t\t\t}", "-\t\tformatThrowsClause(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\t/*", "+\t\t\t\t * Print the method return type", "+\t\t\t\t */", "+\t\t\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\t", "+\t\t\t\tif (returnType != null) {", "+\t\t\t\t\treturnType.traverse(this, methodDeclarationScope);", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Print the method name", "+\t\t\t\t */", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+", "+\t\t\t\t// Format arguments", "+\t\t\t\tformatMethodArguments(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Check for extra dimensions", "+\t\t\t\t */", "+\t\t\t\tint extraDimensions = getDimensions();", "+\t\t\t\tif (extraDimensions != 0) {", "+\t\t\t\t\t for (int i = 0; i < extraDimensions; i++) {", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t\t }", "+\t\t\t\t}", "+", "+\t\t\t\t// Format throws", "+\t\t\t\tformatThrowsClause(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\tok = true;", "+\t\t\t} catch (AlignmentException e) {", "+\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t}", "+\t\t} while (!ok);", "+\t\tthis.scribe.exitAlignment(methodDeclAlignment, true);"]}], "num": 23869}
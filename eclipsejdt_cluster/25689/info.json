{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9dfb14d2f1e6421dfcac1dddd5227c2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9952107db2974aec1c2d420d7903a76a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tchar[][] extractMethodArguments(IMethod method)", "signatureAfterChange": " \tchar[][] extractMethodArguments(IMethod method)", "diff": ["-\t\tString[] argumentsSignatures = null;", "-\t\tBindingKey key;", "-\t\tif (method.isResolved() && (key = new BindingKey(method.getKey())).isParameterizedMethod()) {", "-\t\t\targumentsSignatures = key.getTypeArguments();", "-\t\t} else {", "-\t\t\ttry {", "-\t\t\t\tITypeParameter[] parameters = method.getTypeParameters();", "-\t\t\t\tif (parameters != null) {", "-\t\t\t\t\tint length = parameters.length;", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tchar[][] arguments = new char[length][];", "-\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn arguments;", "+", "+\t\t// Use bind key if the element is resolved", "+\t\tif (method.isResolved()) {", "+\t\t\tBindingKey bindingKey = new BindingKey(method.getKey());", "+\t\t\tif (bindingKey.isParameterizedMethod()) {", "+\t\t\t\tString[] argumentsSignatures = bindingKey.getTypeArguments();", "+\t\t\t\tint length = argumentsSignatures.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar[][] methodArguments = new char[length][];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "+\t\t\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t\t\t\treturn methodArguments;", "-\t\t\t}", "-\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\t// do nothing", "-", "-\t\t// Parameterized method", "-\t\tif (argumentsSignatures != null) {", "-\t\t\tint length = argumentsSignatures.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tchar[][] methodArguments = new char[length][];", "-\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "-\t\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t", "+\t\t// Try to get the argument using the JavaModel info", "+\t\ttry {", "+\t\t\tITypeParameter[] parameters = method.getTypeParameters();", "+\t\t\tif (parameters != null) {", "+\t\t\t\tint length = parameters.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar[][] arguments = new char[length][];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn arguments;", "-\t\t\t\treturn methodArguments;", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\t// do nothing"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73df79c0f656d9135c18efaa86182c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "signatureAfterChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "diff": ["-\t\tBindingKey key;", "-\t\tif (type.isResolved() && ((key = new BindingKey(type.getKey())).isParameterizedType() || key.isRawType())) {", "-\t\t\tString signature = key.toSignature();", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);", "-\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t\t} else {", "-\t\t\t// Scan hierachy to store type arguments at each level", "-\t\t\tchar[][][] typeParameters = new char[10][][];", "-\t\t\tint ptr = -1;", "-\t\t\tboolean hasParameters = false;", "-\t\t\ttry {", "-\t\t\t\tIJavaElement parent = type;", "-\t\t\t\tITypeParameter[] parameters = null;", "-\t\t\t\twhile (parent != null && parent.getElementType() == IJavaElement.TYPE) {", "-\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t}", "-\t\t\t\t\tIType parentType = (IType) parent;", "-\t\t\t\t\tparameters = parentType.getTypeParameters();", "-\t\t\t\t\tif (parameters !=null) {", "-\t\t\t\t\t\tint length = parameters.length;", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\thasParameters = true;", "-\t\t\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "-\t\t\t\t\t\t\tfor (int i=0; i<length; i++)", "-\t\t\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tparent = parent.getParent();", "+\t\tif (type.isResolved()) {", "+\t\t\tBindingKey bindingKey = new BindingKey(type.getKey());", "+\t\t\tif (bindingKey.isParameterizedType() || bindingKey.isRawType()) {", "+\t\t\t\tString signature = bindingKey.toSignature();", "+\t\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);", "+\t\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Scan hierarchy to store type arguments at each level", "+\t\tchar[][][] typeParameters = new char[10][][];", "+\t\tint ptr = -1;", "+\t\tboolean hasParameters = false;", "+\t\ttry {", "+\t\t\tIJavaElement parent = type;", "+\t\t\tITypeParameter[] parameters = null;", "+\t\t\twhile (parent != null && parent.getElementType() == IJavaElement.TYPE) {", "+\t\t\t\tif (++ptr > typeParameters.length) {", "+\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "+\t\t\t\tIType parentType = (IType) parent;", "+\t\t\t\tparameters = parentType.getTypeParameters();", "+\t\t\t\tif (parameters !=null) {", "+\t\t\t\t\tint length = parameters.length;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\thasParameters = true;", "+\t\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "+\t\t\t\t\t\tfor (int i=0; i<length; i++)", "+\t\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tparent = parent.getParent();", "-\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\t// Store type arguments if any", "-\t\t\tif (hasParameters) {", "-\t\t\t\tif (++ptr < typeParameters.length)", "-\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "-\t\t\t\tsetTypeArguments(typeParameters);", "-\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Store type arguments if any", "+\t\tif (hasParameters) {", "+\t\t\tif (++ptr < typeParameters.length)", "+\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "+\t\t\tsetTypeArguments(typeParameters);"]}], "num": 25689}
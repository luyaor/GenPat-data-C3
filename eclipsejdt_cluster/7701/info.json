{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d8e195d359cbfc830f562471fa9df36", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "189092117d153c4e7ee7271d1327b402", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["+\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "+\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "-\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\tpreviousPosition = start;", "-\t\t\t\t\t\t\ttypeRef = null;", "-\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "+\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "-\t\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\tpreviousPosition = start;", "-\t\t\t\t\t\t\t\ttypeRef = null;", "-\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf31cc3b5eacd2f9890a029dc463ba63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 117, "signatureBeforeChange": "  \tprivate void setSourceRangeAnnotationsAndRecordNodes(TypeReference typeReference, AnnotatableType annotatableType, \t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] typeAnnotations, int index, int start, int end)", "signatureAfterChange": "  \tprivate void setSourceRangeAnnotationsAndRecordNodes(TypeReference typeReference, AnnotatableType annotatableType, \t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] typeAnnotations, int index, int start, int end)", "diff": ["-\t\tint annotationsStart = start;", "+\t\tannotatableType.setSourceRange(start, length);", "-\t\t\tif (annotations[0] != null && (annotationsStart = annotations[0].sourceStart) < start) {", "-\t\t\t\tlength += annotationsStart > 0 ? start - annotationsStart : 0;", "-\t\t\t\tstart = annotationsStart;", "-\t\t\t}", "-\t\tannotatableType.setSourceRange(start, length);"]}], "num": 7701}
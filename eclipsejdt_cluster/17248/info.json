{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19d77fd77dc540d18305df417692c796", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bb6ab2498db9fe1b272b34a15a4a014", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "commitAfterChange": "76a8025d64f3e2797e6f2fc43657ddca227a53e7", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tprivate LambdaExpression cachedResolvedCopy(TypeBinding targetType)", "signatureAfterChange": "  \tprivate LambdaExpression cachedResolvedCopy(TypeBinding targetType, boolean anyTargetOk)", "diff": ["-\tprivate LambdaExpression cachedResolvedCopy(TypeBinding targetType) {", "-\t\tLambdaExpression copy = this.copiesPerTargetType != null ? this.copiesPerTargetType.get(targetType) : null;", "-\t\tif (copy != null)", "-\t\t\treturn copy;", "+\tprivate LambdaExpression cachedResolvedCopy(TypeBinding targetType, boolean anyTargetOk) {", "+\t\tLambdaExpression copy = null;", "+\t\tif (this.copiesPerTargetType != null) {", "+\t\t\tcopy = this.copiesPerTargetType.get(targetType);", "+\t\t\tif (copy != null)", "+\t\t\t\treturn copy;", "+\t\t\tif (anyTargetOk && this.copiesPerTargetType.values().size() > 0)", "+\t\t\t\treturn this.copiesPerTargetType.values().iterator().next();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d65bc62d69c4d7915636f8fa0db2e92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-\t// Cache resolved copies against various target types, so repeat overload resolution and possibly type inference could be avoided.", "-\tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy) {", "-\t\tif (this.copiesPerTargetType == null)", "-\t\t\tthis.copiesPerTargetType = new HashMap<TypeBinding, ReferenceExpression>();", "-\t\tthis.copiesPerTargetType.put(targetType, copy);", "-\t\treturn copy;", "+\t\tReferenceExpression copy = cachedResolvedCopy(targetType);", "+\t\treturn copy != null && copy.resolvedType != null && copy.resolvedType.isValidBinding() && copy.binding != null && copy.binding.isValidBinding();"]}], "num": 17248}
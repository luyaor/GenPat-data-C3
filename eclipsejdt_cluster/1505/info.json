{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dd7790e59758eed2d88eb8c25e9b03b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "693822c2f82e87789546f9e77e789bd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "76f5a1c536420ff37c3b13a645ebec88bfc3c494", "commitAfterChange": "902ad81671a3859ccd7100f43d06275b71901e88", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\ttry {", "-\t\t\t\tthis.hierarchyResolver = ", "-\t\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "-\t\t\t\tif (focusType != null) {", "-\t\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "-\t\t\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));", "-\t\t\t\t\tif (focusTypeBinding == null ", "-\t\t\t\t\t\t|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {", "-\t\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "+\t\t}", "+\t\ttry {", "+\t\t\tthis.hierarchyResolver = ", "+\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "+\t\t\tif (focusType != null) {", "+\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "+\t\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));", "+\t\t\t\tif (focusTypeBinding == null ", "+\t\t\t\t\t|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {", "+\t\t\t\t\t// focus type is not visible in this project: no need to go further", "+\t\t\t\t\treturn;", "-\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits, monitor);", "-\t\t\t} finally {", "-\t\t\t\tif (inProjectOfFocusType) {", "-\t\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);", "-\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits, monitor);", "+\t\t} finally {", "+\t\t\tif (inProjectOfFocusType) {", "+\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d766a5099d66762a2e0e0b0ba58f08aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tthis.searchableEnvironment = (SearchableEnvironment)project.getSearchableNameEnvironment();", "-\t\tthis.nameLookup = project.getNameLookup();", "+\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside = null;", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside;", "-\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\ttry {", "-\t\t\tthis.hierarchyResolver = ", "-\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "-\t\t\tif (focusType != null) {", "-\t\t\t\tMember declaringMember = ((Member)focusType).getOuterMostLocalContext();", "-\t\t\t\tif (declaringMember == null) {", "-\t\t\t\t\t// top level or member type", "-\t\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "-\t\t\t\t\tif (!inProjectOfFocusType && project.getSearchableNameEnvironment().findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "-\t\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// local or anonymous type", "-\t\t\t\t\tOpenable openable;", "-\t\t\t\t\tif (declaringMember.isBinary()) {", "-\t\t\t\t\t\topenable = (Openable)declaringMember.getClassFile();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\topenable = (Openable)declaringMember.getCompilationUnit();", "-\t\t\t\t\t}", "-\t\t\t\t\tlocalTypes = new HashSet();", "-\t\t\t\t\tlocalTypes.add(openable.getPath().toString());", "-\t\t\t\t\tthis.hierarchyResolver.resolve(new Openable[] {openable}, localTypes, monitor);", "+\t\tSearchableEnvironment searchableEnvironment = (SearchableEnvironment)project.newSearchableNameEnvironment(unitsToLookInside);", "+\t\tthis.nameLookup = searchableEnvironment.nameLookup;", "+\t\tthis.hierarchyResolver = ", "+\t\t\tnew HierarchyResolver(searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "+\t\tif (focusType != null) {", "+\t\t\tMember declaringMember = ((Member)focusType).getOuterMostLocalContext();", "+\t\t\tif (declaringMember == null) {", "+\t\t\t\t// top level or member type", "+\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "+\t\t\t\tif (!inProjectOfFocusType && searchableEnvironment.findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "+\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t}", "-\t\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);", "-\t\t} finally {", "-\t\t\tif (inProjectOfFocusType) {", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);", "+\t\t\t} else {", "+\t\t\t\t// local or anonymous type", "+\t\t\t\tOpenable openable;", "+\t\t\t\tif (declaringMember.isBinary()) {", "+\t\t\t\t\topenable = (Openable)declaringMember.getClassFile();", "+\t\t\t\t} else {", "+\t\t\t\t\topenable = (Openable)declaringMember.getCompilationUnit();", "+\t\t\t\t}", "+\t\t\t\tlocalTypes = new HashSet();", "+\t\t\t\tlocalTypes.add(openable.getPath().toString());", "+\t\t\t\tthis.hierarchyResolver.resolve(new Openable[] {openable}, localTypes, monitor);", "+\t\t\t\treturn;", "+\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);"]}], "num": 1505}
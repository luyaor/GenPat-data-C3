{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dc47e9e5788717c1adba26e2dfe76ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e11f851252566af9b0249bce3551973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public void recordUsingNullReference(Scope scope, VariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  public void recordUsingNullReference(Scope scope, VariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["+", "-\t\tExpression reference, int checkType, FlowInfo flowInfo) {", "+\t\tASTNode location, int checkType, FlowInfo flowInfo) {", "+\t\t\tExpression reference = (Expression)location;", "+\t\t\treference = (Expression)location;", "-\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "-\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "-\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\trecordNullReference(local, location, checkType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6336c5862b185cd57e76c262804d2f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding var, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding var, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\t\t\tExpression reference, int checkType, FlowInfo flowInfo) {", "+\t\t\tASTNode location, int checkType, FlowInfo flowInfo) {", "+\t\t\t\t\t\tExpression reference = (Expression) location;", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, location);", "+\t\t\t\t\t\tExpression reference = (Expression) location;", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, location);", "-\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "+\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, location);", "-\t\t\t\trecordNullReference(var, reference, checkType);", "+\t\t\t\trecordNullReference(var, location, checkType);"]}], "num": 25261}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fecea2959abc1637d9201c31ddaa599", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2348322bccd6f1a947bcaf0c1234696f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest.java", "commitBeforeChange": "b536dbfbd4db3c6e92b57c5cb2acbf754bffac1a", "commitAfterChange": "610e59fb60c0fcb5310aaedafa338742894279de", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test338350()", "signatureAfterChange": " public void test338350()", "diff": ["-\t\t\t\"\t\tList<String> l = Bar.getRawList();\\n\" + ", "-\t\t\t\"\t\tArrayList<String> l2 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "+\t\t\t\"\t\tList<String> l = (List<String>) Bar.getObject();\\n\" + ", "+\t\t\t\"\t\tList<String> l2 = Bar.getRawList();\\n\" + ", "+\t\t\t\"\t\tArrayList<String> l3 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "-\t\t\t\"\tList<String> l = Bar.getRawList();\\n\" + ", "-\t\t\t\"\t                 ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "+\t\t\t\"\tList<String> l = (List<String>) Bar.getObject();\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to List<String>\\n\" + ", "-\t\t\t\"\tArrayList<String> l2 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "+\t\t\t\"\tList<String> l2 = Bar.getRawList();\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in Try.java (at line 23)\\n\" + ", "+\t\t\t\"\tArrayList<String> l3 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "-\t\t\t\t\t\"1. WARNING in Try.java (at line 6)\\n\" + ", "-\t\t\t\t\t\"\ttakeObj((E) Bar.getObject());\\n\" + ", "-\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"2. WARNING in Try.java (at line 7)\\n\" + ", "-\t\t\t\t\t\"\ttakeObj((E) Bar.getArray());\\n\" + ", "-\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object[] to E\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"3. WARNING in Try.java (at line 8)\\n\" + ", "-\t\t\t\t\t\"\ttakeObj((E) Array.newInstance(Integer.class, 2));\\n\" + ", "-\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"4. WARNING in Try.java (at line 12)\\n\" + ", "-\t\t\t\t\t\"\ttakeArray((E[]) Bar.getArray());\\n\" + ", "-\t\t\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object[] to E[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"5. WARNING in Try.java (at line 13)\\n\" + ", "-\t\t\t\t\t\"\ttakeArray((E[]) Array.newInstance(Integer.class, 2));\\n\" + ", "-\t\t\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"6. WARNING in Try.java (at line 17)\\n\" + ", "-\t\t\t\t\t\"\tlist.toArray((L[]) Bar.getArray());\\n\" + ", "-\t\t\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object[] to L[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"7. WARNING in Try.java (at line 18)\\n\" + ", "-\t\t\t\t\t\"\tlist.toArray((L[]) Array.newInstance(Integer.class, 2));\\n\" + ", "-\t\t\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to L[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"1. WARNING in Bar.java (at line 11)\\n\" + ", "-\t\t\t\t\t\"\tpublic static List getRawList() {\\n\" + ", "-\t\t\t\t\t\"\t              ^^^^\\n\" + ", "-\t\t\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"2. WARNING in Bar.java (at line 12)\\n\" + ", "-\t\t\t\t\t\"\treturn new ArrayList();\\n\" + ", "-\t\t\t\t\t\"\t           ^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "-\t\t\t\t\t\"----------\\n\",", "-\t\t\t\t\tnull,", "-\t\t\t\t\ttrue,", "-\t\t\t\t\tcustomOptions);", "+\t\t\t\"1. WARNING in Try.java (at line 6)\\n\" + ", "+\t\t\t\"\ttakeObj((E) Bar.getObject());\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Try.java (at line 7)\\n\" + ", "+\t\t\t\"\ttakeObj((E) Bar.getArray());\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object[] to E\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Try.java (at line 8)\\n\" + ", "+\t\t\t\"\ttakeObj((E) Array.newInstance(Integer.class, 2));\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Try.java (at line 12)\\n\" + ", "+\t\t\t\"\ttakeArray((E[]) Bar.getArray());\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object[] to E[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Try.java (at line 13)\\n\" + ", "+\t\t\t\"\ttakeArray((E[]) Array.newInstance(Integer.class, 2));\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in Try.java (at line 17)\\n\" + ", "+\t\t\t\"\tlist.toArray((L[]) Bar.getArray());\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object[] to L[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in Try.java (at line 18)\\n\" + ", "+\t\t\t\"\tlist.toArray((L[]) Array.newInstance(Integer.class, 2));\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to L[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in Try.java (at line 21)\\n\" + ", "+\t\t\t\"\tList<String> l = (List<String>) Bar.getObject();\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to List<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Bar.java (at line 11)\\n\" + ", "+\t\t\t\"\tpublic static List getRawList() {\\n\" + ", "+\t\t\t\"\t              ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Bar.java (at line 12)\\n\" + ", "+\t\t\t\"\treturn new ArrayList();\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\tnull,", "+\t\t\ttrue,", "+\t\t\tcustomOptions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ee2996c932d5f22cb10eb320729b2a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest.java", "commitBeforeChange": "404a2ab8d95764fff1652dfbb3727308f694ee0d", "commitAfterChange": "933a38236fec815027c8518edb1dfd53dabc40b0", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test338350()", "signatureAfterChange": " public void test338350()", "diff": ["-\t\t\t\"\t\tList<String> l = Bar.getRawList();\\n\" + ", "-\t\t\t\"\t\tArrayList<String> l2 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "+\t\t\t\"\t\tList<String> l = (List<String>) Bar.getObject();\\n\" + ", "+\t\t\t\"\t\tList<String> l2 = Bar.getRawList();\\n\" + ", "+\t\t\t\"\t\tArrayList<String> l3 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "-\t\t\t\"\tList<String> l = Bar.getRawList();\\n\" + ", "-\t\t\t\"\t                 ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "+\t\t\t\"\tList<String> l = (List<String>) Bar.getObject();\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to List<String>\\n\" + ", "-\t\t\t\"\tArrayList<String> l2 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "+\t\t\t\"\tList<String> l2 = Bar.getRawList();\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in Try.java (at line 23)\\n\" + ", "+\t\t\t\"\tArrayList<String> l3 = (ArrayList<String>) Bar.getRawList();\\n\" + ", "-\t\t\t\t\t\"1. WARNING in Try.java (at line 6)\\n\" + ", "-\t\t\t\t\t\"\ttakeObj((E) Bar.getObject());\\n\" + ", "-\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"2. WARNING in Try.java (at line 7)\\n\" + ", "-\t\t\t\t\t\"\ttakeObj((E) Bar.getArray());\\n\" + ", "-\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object[] to E\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"3. WARNING in Try.java (at line 8)\\n\" + ", "-\t\t\t\t\t\"\ttakeObj((E) Array.newInstance(Integer.class, 2));\\n\" + ", "-\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"4. WARNING in Try.java (at line 12)\\n\" + ", "-\t\t\t\t\t\"\ttakeArray((E[]) Bar.getArray());\\n\" + ", "-\t\t\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object[] to E[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"5. WARNING in Try.java (at line 13)\\n\" + ", "-\t\t\t\t\t\"\ttakeArray((E[]) Array.newInstance(Integer.class, 2));\\n\" + ", "-\t\t\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"6. WARNING in Try.java (at line 17)\\n\" + ", "-\t\t\t\t\t\"\tlist.toArray((L[]) Bar.getArray());\\n\" + ", "-\t\t\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object[] to L[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"7. WARNING in Try.java (at line 18)\\n\" + ", "-\t\t\t\t\t\"\tlist.toArray((L[]) Array.newInstance(Integer.class, 2));\\n\" + ", "-\t\t\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Type safety: Unchecked cast from Object to L[]\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"1. WARNING in Bar.java (at line 11)\\n\" + ", "-\t\t\t\t\t\"\tpublic static List getRawList() {\\n\" + ", "-\t\t\t\t\t\"\t              ^^^^\\n\" + ", "-\t\t\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"2. WARNING in Bar.java (at line 12)\\n\" + ", "-\t\t\t\t\t\"\treturn new ArrayList();\\n\" + ", "-\t\t\t\t\t\"\t           ^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "-\t\t\t\t\t\"----------\\n\",", "-\t\t\t\t\tnull,", "-\t\t\t\t\ttrue,", "-\t\t\t\t\tcustomOptions);", "+\t\t\t\"1. WARNING in Try.java (at line 6)\\n\" + ", "+\t\t\t\"\ttakeObj((E) Bar.getObject());\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Try.java (at line 7)\\n\" + ", "+\t\t\t\"\ttakeObj((E) Bar.getArray());\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object[] to E\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Try.java (at line 8)\\n\" + ", "+\t\t\t\"\ttakeObj((E) Array.newInstance(Integer.class, 2));\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to E\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Try.java (at line 12)\\n\" + ", "+\t\t\t\"\ttakeArray((E[]) Bar.getArray());\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object[] to E[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Try.java (at line 13)\\n\" + ", "+\t\t\t\"\ttakeArray((E[]) Array.newInstance(Integer.class, 2));\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in Try.java (at line 17)\\n\" + ", "+\t\t\t\"\tlist.toArray((L[]) Bar.getArray());\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object[] to L[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in Try.java (at line 18)\\n\" + ", "+\t\t\t\"\tlist.toArray((L[]) Array.newInstance(Integer.class, 2));\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to L[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in Try.java (at line 21)\\n\" + ", "+\t\t\t\"\tList<String> l = (List<String>) Bar.getObject();\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to List<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Bar.java (at line 11)\\n\" + ", "+\t\t\t\"\tpublic static List getRawList() {\\n\" + ", "+\t\t\t\"\t              ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Bar.java (at line 12)\\n\" + ", "+\t\t\t\"\treturn new ArrayList();\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\tnull,", "+\t\t\ttrue,", "+\t\t\tcustomOptions);"]}], "num": 55656}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa5fa55ccf272747bb7fc64e53d26a8f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c45a907273830ac99d61d23aa57951", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tpublic void handleLineTooLong()", "signatureAfterChange": "  \tpublic void handleLineTooLong()", "diff": ["-\t\tboolean insideMessageArguments = false;", "-\t\tboolean insideMessageSend = false;", "+\t\tint insideMessage = 0;", "+\t\tboolean insideStringConcat = false;", "-\t\t\t\t((insideMessageArguments || insideMessageSend) && targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS", "-\t\t\t\t\t\t&& (!targetAlignment.wasReset() || previousKind != Alignment.MESSAGE_SEND));", "+\t\t\t\t(!insideStringConcat &&", "+\t\t\t\t\t\tinsideMessage > 0 && targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS &&", "+\t\t\t\t\t\t(!targetAlignment.wasReset() || previousKind != Alignment.MESSAGE_SEND));", "-\t\t\t\t\tinsideMessageArguments = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tinsideMessageSend = true;", "+\t\t\t\t\tinsideMessage++;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Alignment.STRING_CONCATENATION:", "+\t\t\t\t\tinsideStringConcat = true;", "+\t\t\t\t\tif (insideStringConcat) throw alignmentException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6b6436a3af38c4026caec63c3a37406", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tvoid initialize(ReferenceBinding someType, TypeBinding[] someArguments)", "signatureAfterChange": "  \tvoid initialize(ReferenceBinding someType, TypeBinding[] someArguments)", "diff": ["-\t\t\t\tboolean isWildcardArgument = someArgument.isWildcard();", "-\t\t\t\tif (isWildcardArgument) {", "-\t\t\t\t\tthis.tagBits |= TagBits.HasDirectWildcard;", "-\t\t\t\t}", "-\t\t\t\tif (!isWildcardArgument || ((WildcardBinding) someArgument).boundKind != Wildcard.UNBOUND) {", "-\t\t\t\t\tthis.tagBits |= TagBits.IsBoundParameterizedType;", "+\t\t\t\tswitch (someArgument.kind()) {", "+\t\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\t\tthis.tagBits |= TagBits.HasDirectWildcard;", "+\t\t\t\t\t\tif (((WildcardBinding) someArgument).boundKind != Wildcard.UNBOUND) {", "+\t\t\t\t\t\t\tthis.tagBits |= TagBits.IsBoundParameterizedType;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.INTERSECTION_TYPE :", "+\t\t\t\t\t\tthis.tagBits |= TagBits.HasDirectWildcard;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\tthis.tagBits |= TagBits.IsBoundParameterizedType;", "+\t\t\t\t\t\tbreak;"]}], "num": 31350}
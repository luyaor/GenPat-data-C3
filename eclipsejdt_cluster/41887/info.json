{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2474a1a77d6a29cc9c7f507921598e57", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1def8e67daba0ab468f34719f8cc28d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "a262b5af4032b43a755aa27634102b39ece22487", "commitAfterChange": "f23b5454f1ff57141b5d3b54b81fb753a1898b7e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "\t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tJavaProject initialProject, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tHashtable visitedProjects, \r \t\tObjectVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tJavaProject initialProject, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tHashtable visitedProjects, \r \t\tObjectVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\tIClasspathEntry[] immediateClasspath = getResolvedClasspath(ignoreUnresolvedVariable, false);\r", "+\t\tIClasspathEntry[] immediateClasspath = getResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);\r", "-\t\t\t\t\t\tIProject projRsc = (IProject) getWorkspace().getRoot().findMember(entry.getPath());\r", "-\t\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t\r", "-\t\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);\r", "-\t\t\t\t\t\t\tproject.computeExpandedClasspath(\r", "-\t\t\t\t\t\t\t\tinitialProject, \r", "-\t\t\t\t\t\t\t\tignoreUnresolvedVariable, \r", "-\t\t\t\t\t\t\t\tgenerateMarkerOnError,\r", "-\t\t\t\t\t\t\t\tvisitedProjects, \r", "-\t\t\t\t\t\t\t\taccumulatedEntries);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tIProject projRsc = (IProject) getWorkspace().getRoot().findMember(entry.getPath());\r", "+\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t\r", "+\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);\r", "+\t\t\t\t\t\tproject.computeExpandedClasspath(\r", "+\t\t\t\t\t\t\tinitialProject, \r", "+\t\t\t\t\t\t\tignoreUnresolvedVariable, \r", "+\t\t\t\t\t\t\tgenerateMarkerOnError,\r", "+\t\t\t\t\t\t\tvisitedProjects, \r", "+\t\t\t\t\t\t\taccumulatedEntries);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2e9eff2fabd5039c5c54320573b7a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7eeebb70e2ff491ab9bcb9989009c102bc6dce17", "commitAfterChange": "922a8f2234ba62b5ea80c3fa8e1983d8481a3bfb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\t\t\t\tIProject projRsc = (IProject) workspaceRoot.findMember(entry.getPath());", "-\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t", "-\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);", "-\t\t\t\t\t\tproject.computeExpandedClasspath(", "-\t\t\t\t\t\t\tinitialProject, ", "-\t\t\t\t\t\t\tignoreUnresolvedVariable, ", "-\t\t\t\t\t\t\tgenerateMarkerOnError,", "-\t\t\t\t\t\t\tvisitedProjects, ", "-\t\t\t\t\t\t\taccumulatedEntries);", "+\t\t\t\t\tIResource member = workspaceRoot.findMember(entry.getPath()); ", "+\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){ // double check if bound to project (23977)", "+\t\t\t\t\t\tIProject projRsc = (IProject) member;", "+\t\t\t\t\t\tif (projRsc.isOpen()) {\t\t\t\t", "+\t\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);", "+\t\t\t\t\t\t\tproject.computeExpandedClasspath(", "+\t\t\t\t\t\t\t\tinitialProject, ", "+\t\t\t\t\t\t\t\tignoreUnresolvedVariable, ", "+\t\t\t\t\t\t\t\tgenerateMarkerOnError,", "+\t\t\t\t\t\t\t\tvisitedProjects, ", "+\t\t\t\t\t\t\t\taccumulatedEntries);", "+\t\t\t\t\t\t}"]}], "num": 41887}
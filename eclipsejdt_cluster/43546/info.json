{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a715ec0035a83c9f1a79f1e7bf067719", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c4e721cd83832e639e51aa3f6370425", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "fe98ddbed4cd1f8bb449a78291ed05ed04f18196", "commitAfterChange": "afe1aa1e23ce83b573f50388f1a50d564fe4b851", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "   \tprivate void format(MultiFieldDeclaration multiFieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "signatureAfterChange": "   \tprivate void format(MultiFieldDeclaration multiFieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "diff": ["-\t\t\t\t\t/*", "-\t\t\t\t\t * Check for extra dimensions", "-\t\t\t\t\t */", "-\t\t\t\t\tint extraDimensions = getDimensions();", "-\t\t\t\t\tif (extraDimensions != 0) {", "-\t\t\t\t\t\t for (int index = 0; index < extraDimensions; index++) {", "-\t\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t\t\t }", "-\t\t\t\t\t}", "+\t\t\t\t\tformatExtraDimensions(fieldDeclaration.type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa751d732774bcc03c9e51b0395eba38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "cf072eeff121940a541295553114f490c9a9bb69", "commitAfterChange": "9617178877607b049b1a7c4f92c93a8d11facd28", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "   \tprivate void format(MultiFieldDeclaration multiFieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "signatureAfterChange": "   \tprivate void format(MultiFieldDeclaration multiFieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "diff": ["-\t\t\t\t\t/*", "-\t\t\t\t\t * Check for extra dimensions", "-\t\t\t\t\t */", "-\t\t\t\t\tint extraDimensions = getDimensions();", "-\t\t\t\t\tif (extraDimensions != 0) {", "-\t\t\t\t\t\t for (int index = 0; index < extraDimensions; index++) {", "-\t\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t\t\t }", "-\t\t\t\t\t}", "+\t\t\t\t\tformatExtraDimensions(fieldDeclaration.type);"]}], "num": 43546}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dfe0877e2633ab18d9a6fc5928c0eb0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "624b94a7fee87c9f35b29a2bf6d9ab94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes, Scope scope)", "diff": ["-\tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes) {", "+\tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes, Scope scope) {", "-\t\t\t\t\tMethodBinding binding = innerInvocation.binding(parameterType);", "+\t\t\t\t\tMethodBinding binding = innerInvocation.binding(parameterType, true, scope);", "-\t\t\t\t\t\t\t\t\tresolvePolyExpressionArguments(innerInvocation, improvedBinding);", "+\t\t\t\t\t\t\t\t\tresolvePolyExpressionArguments(innerInvocation, improvedBinding, scope);", "-\t\t\t\t\t\tupdatedArgumentType = argument.checkAgainstFinalTargetType(parameterType);", "+\t\t\t\t\t\tupdatedArgumentType = argument.checkAgainstFinalTargetType(parameterType, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9472c7722f2d515a53db160a51c3c209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "69322cef043ef54194e3a32f347e151e0e2870a4", "commitAfterChange": "7d0859ec775b8e65d22913e093fcc433c8eb0ab1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\tfindParameterizedType((TypeReference)astNodeParent);", "+\t\t\t\t\tfindParameterizedType((TypeReference)astNodeParent, scope);", "-\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding, scope);", "-\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding, scope);", "-\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding, scope);", "-\t\t\t\t\tfindAnnotationReference(annotation.type);", "+\t\t\t\t\tfindAnnotationReference(annotation.type, scope);", "-\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding, scope);"]}], "num": 2974}
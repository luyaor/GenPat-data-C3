{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e74226bb3e0cb1af87d4187d9fa28f29", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cb15e08e1033893c008c8fc62356b7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 279, "signatureBeforeChange": " \tpublic void test275()", "signatureAfterChange": " \tpublic void test275()", "diff": ["+\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tpublic List useList(List l) {\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tpublic List useList(List l) {\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d71f4d780ffb9f4547a9a1fcfb39637", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dbcb3792ecd2123b1ae06c35b045d6b44d7f2a00", "commitAfterChange": "de9c3731901593a26ed46d1de3db44ef804f40a8", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": " \tpublic void _test257()", "signatureAfterChange": " \tpublic void test257()", "diff": ["-\t//TODO (kent) reenable once addressed", "-\tpublic void _test257() {", "+\tpublic void test257() {", "-\t\t\t\t\"import java.util.AbstractList;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\tclass L extends AbstractList<T> {}\\n\" + ", "+\t\t\t\t\"    public abstract class M extends java.util.AbstractList<T> {}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y<T> extends T {}\\n\" + ", "+\t\t\t\t\"class Z<T> {\\n\" + ", "+\t\t\t\t\"    class M extends T {}\\n\" + ", "-\t\t\t\"should only complain about missing abstract method impl.\");\t\t", "-\t}\t\t\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass Y<T> extends T {}\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Cannot refer to the type parameter T as a supertype\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass M extends T {}\\n\" + ", "+\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\"Cannot refer to the type parameter T as a supertype\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e975bf5ec3aa9013213264954789ea9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void test003()", "signatureAfterChange": "  \tpublic void test003()", "diff": ["-\t\t\t\"1. ERROR in Y.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"1. ERROR in YY.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. WARNING in YY.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in YY.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"1. ERROR in JJ.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. ERROR in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"2. ERROR in JJ.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"2. WARNING in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                              ^\\n\" + ", "+\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9285e3f237735fd7dcffc79f7380399", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam09() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternNestedParam09() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<?, ?, ?>] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [NGM.Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGM.Generic<NGS.Generic<?>, NGS.Generic<?>, NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGM.Generic<NGS.Generic<?>, NGS.Generic<NGS.Generic<?>>, NGS.Generic<NGS.Generic<NGS.Generic<?>>>>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGM.Generic<NGS.Generic<Object>, NGS.Generic<? extends Throwable>, NGS.Generic<? super RuntimeException>>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [NGM.Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [NGM.Generic<g3.t.def.NGS.Generic<java.lang.Object>, g3.t.def.NGS.Generic<? extends java.lang.Throwable>, g3.t.def.NGS.Generic<? super java.lang.RuntimeException>>] EXACT_MATCH\",", "+\t\t\tresultCollector);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0410af90c0ba18e3eb6491f4ed86c72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test004()", "signatureAfterChange": " public void test004()", "diff": ["+// FAIL cannot detect errors against 2nd and 3rd lambda, because of enclosingScopesHaveErrors()", "+\t\t\t// none of the lambdas is compatible because none is value-compatible, whereas foo() needs to return int.", "-\t\t\t\"\t    ^^^^\\n\" + ", "-\t\t\t\"This method must return a result of type int\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method goo(J) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\"  boolean y = true;\\n\" + ", "+\t\t\t\"  while (y)    ;\\n\" + ", "+\t\t\t\"})\\n\" + ", "-\t\t\t\"\t    ^^^^\\n\" + ", "-\t\t\t\"This method must return a result of type int\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method goo(J) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\"  while (x)    ;\\n\" + ", "+\t\t\t\"})\\n\" + ", "-\t\t\t\"\t    ^^^^\\n\" + ", "-\t\t\t\"This method must return a result of type int\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method goo(J) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\"  while (f)    ;\\n\" + ", "+\t\t\t\"})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c230be37ea92c9cb662e7a3e37d6dfe9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void test002()", "signatureAfterChange": "  \tpublic void test002()", "diff": ["-\t\t\t\"1. ERROR in Y.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"1. ERROR in YY.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. WARNING in YY.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in YY.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"1. ERROR in JJ.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. ERROR in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"2. ERROR in JJ.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"2. WARNING in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                              ^\\n\" + ", "+\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee96f4824a37750808c789659d8a467d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-\t\t\t\"1. ERROR in Y.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class Y<T> extends X<A> { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"1. ERROR in YY.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. WARNING in YY.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in YY.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class YY<T> extends X { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"1. ERROR in JJ.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"1. ERROR in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"2. ERROR in JJ.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\r\\n\" + ", "+\t\t\t\"2. WARNING in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                              ^\\n\" + ", "+\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in JJ.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + "]}], "num": 50655}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bcda0f69f3896a6cf95f4a863e4ec01", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0f24685171d2b958348330f944aa93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/IncrementalImageBuilder.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "signatureAfterChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "diff": ["-\t\t\t\t\tif (hasSeparateOutputFolder) {\r", "-\t\t\t\t\t\tIFolder addedPackageFolder = outputFolder.getFolder(addedPackagePath);\r", "-\t\t\t\t\t\tif (!addedPackageFolder.exists())\r", "-\t\t\t\t\t\t\taddedPackageFolder.create(true, true, null);\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tIFolder addedPackageFolder = outputFolder.getFolder(addedPackagePath);\r", "+\t\t\t\t\tif (!addedPackageFolder.exists())\r", "+\t\t\t\t\t\taddedPackageFolder.create(true, true, null);\r", "+\t\t\t\t\t// add dependents even when the package thinks it exists to be on the safe side\r", "-\t\t\t\t\t// add dependents even when the package thinks it exists to be on the safe side\r", "-\t\t\t\t\tif (hasSeparateOutputFolder) {\r", "-\t\t\t\t\t\tIFolder removedPackageFolder = outputFolder.getFolder(removedPackagePath);\r", "-\t\t\t\t\t\tif (removedPackageFolder.exists() && canRemovePackage(removedPackagePath))\r", "-\t\t\t\t\t\t\tremovedPackageFolder.delete(true, null);\r", "+\t\t\t\t\tIFolder removedPackageFolder = outputFolder.getFolder(removedPackagePath);\r", "+\t\t\t\t\tfor (int i = 0, length = sourceFolders.length; i < length; i++) {\r", "+\t\t\t\t\t\tif (sourceFolders[i].findMember(removedPackagePath) != null) {\r", "+\t\t\t\t\t\t\t// only a package fragment was removed, same as removing multiple source files\r", "+\t\t\t\t\t\t\tif (!removedPackageFolder.exists())\r", "+\t\t\t\t\t\t\t\tremovedPackageFolder.create(true, true, null);\r", "+\t\t\t\t\t\t\tIResourceDelta[] removedChildren = sourceDelta.getAffectedChildren();\r", "+\t\t\t\t\t\t\tfor (int j = 0, rlength = removedChildren.length; j < rlength; j++)\r", "+\t\t\t\t\t\t\t\tfindSourceFiles(removedChildren[j], sourceFolderSegmentCount);\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\tnewState.removePackage(sourceDelta);\r", "+\t\t\t\t\tif (removedPackageFolder.exists())\r", "+\t\t\t\t\t\tremovedPackageFolder.delete(true, null);\r", "+\t\t\t\t\tnewState.removePackage(sourceDelta);\r", "-\t\t\t\t\t\tIResource classFile = outputFolder.getFile(typePath.addFileExtension(JavaBuilder.CLASS_EXTENSION));\r", "-\t\t\t\t\t\tif (classFile.exists()) {\r", "-\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\t\t\tSystem.out.println(\"Deleting class file of removed file \" + typePath); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\tclassFile.delete(true, null);\r", "+\t\t\t\t\t\tchar[][] definedTypeNames = newState.getDefinedTypeNamesFor(location.toString());\r", "+\t\t\t\t\t\tif (definedTypeNames == null) {\r", "+\t\t\t\t\t\t\tremoveClassFile(typePath);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tIPath packagePath = typePath.removeLastSegments(1);\r", "+\t\t\t\t\t\t\tfor (int i = 0, length = definedTypeNames.length; i < length; i++)\r", "+\t\t\t\t\t\t\t\tremoveClassFile(packagePath.append(new String(definedTypeNames[i])));\r", "-\t\t\t\t\t\tchar[][] additionalTypeNames = newState.getAdditionalTypeNamesFor(location.toString());\r", "-\t\t\t\t\t\tif (additionalTypeNames != null) {\r", "-\t\t\t\t\t\t\tfor (int i = 0, length = additionalTypeNames.length; i < length; i++) {\r", "-\t\t\t\t\t\t\t\ttypePath = typePath.removeLastSegments(1).append(new String(additionalTypeNames[i]));\r", "-\t\t\t\t\t\t\t\tclassFile = outputFolder.getFile(typePath.addFileExtension(JavaBuilder.CLASS_EXTENSION));\r", "-\t\t\t\t\t\t\t\tif (classFile.exists()) {\r", "-\t\t\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Deleting class file of removed file \" + typePath); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\t\tclassFile.delete(true, null);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\taddDependentsOf(typePath, true);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t// add dependents even when the type thinks it does not exist to be on the safe side\r", "-\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of removed source file \" + typePath); //$NON-NLS-1$\r", "-\t\t\t\t\t\taddDependentsOf(typePath, true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7590bb424c84a72c958f27a8b785fe66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "signatureAfterChange": " protected IJavaElement createHandle(Annotation annotation, IAnnotatable parent)", "diff": ["-\t}", "-\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused) {", "-\t\ttry {", "-\t\t\tchar[] simpleName;", "-\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {\t\t\t\t", "-\t\t\t\tsimpleName = CharOperation.NO_CHAR;", "-\t\t\t} else {", "-\t\t\t\tsimpleName = typeDeclaration.name;", "-\t\t\t}", "-\t\t\tint occurrenceCount = occurrencesCounts.get(simpleName);", "-\t\t\tif (occurrenceCount == HashtableOfIntValues.NO_VALUE) {", "-\t\t\t\toccurrenceCount = 1;", "-\t\t\t} else {", "-\t\t\t\toccurrenceCount = occurrenceCount + 1;", "-\t\t\t}", "-\t\t\toccurrencesCounts.put(simpleName, occurrenceCount);", "-\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {\t\t\t\t", "-\t\t\t\treportMatching(typeDeclaration, this.enclosingElement, -1, nodeSet, occurrenceCount);", "-\t\t\t} else {", "-\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeDeclaration);", "-\t\t\t\treportMatching(typeDeclaration, this.enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);", "-\t\t\t}", "-\t\t\treturn false; // don't visit members as this was done during reportMatching(...)", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new WrappedCoreException(e);", "-\t\t}", "-\t}", "+ */", "+protected IJavaElement createHandle(Annotation annotation, IAnnotatable parent) {", "+\tif (parent == null) return null;", "+\tTypeReference typeRef = annotation.type;", "+\tchar[][] typeName = typeRef.getTypeName();", "+\tString name = new String(typeName[typeName.length-1]);", "+\ttry {", "+\t\tIAnnotation[] annotations = parent.getAnnotations();", "+\t\tint length = annotations == null ? 0 : annotations.length;", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tif (annotations[i].getElementName().equals(name)) {", "+\t\t\t\treturn annotations[i];", "+\t\t\t}", "+\t\t}", "+\t}", "+\tcatch (JavaModelException jme) {", "+\t\t// skip", "+\t}", "+\treturn null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8608e71f801b19ee8a231b356c0bed45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "3413778e1bd5154fc1bb3b2fe41a2f5c159f06ae", "commitAfterChange": "b6700c6040587d6a407e0aa87172122e678ac070", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void disassemble(IEnclosingMethodAttribute enclosingMethodAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IAnnotation annotation, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\tprivate void disassemble(IAnnotation annotation, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tfinal int typeIndex = annotation.getTypeIndex();", "+\t\tfinal char[] typeName = CharOperation.replaceOnCopy(constantPool.decodeEntry(typeIndex).getUtf8Value(), '/', '.');", "+\t\tbuffer.append(", "+\t\t\tUtil.bind(\"disassembler.annotationentrystart\", //$NON-NLS-1$", "+\t\t\tnew String[] {", "+\t\t\t\tInteger.toString(typeIndex),", "+\t\t\t\tnew String(Signature.toCharArray(typeName))", "+\t\t\t}", "+\t\t));", "+\t\tfinal IAnnotationComponent[] components = annotation.getComponents();", "+\t\tfor (int i = 0, max = components.length; i < max; i++) {", "+\t\t\tdisassemble(components[i], constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t}", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tbuffer.append(Util.bind(\"disassembler.annotationentryend\")); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af665cbeed635abe42b71f351ae2c90b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2a6fc21e132c7337a2ad9e75a03356551f0e9060", "commitAfterChange": "2f8f6c0c9552d7ebf46ec13ce513e098823a7a4e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tcheckDeprecated(methodInfo, buffer, lineSeparator, tabNumber);", "-\t\tcheckSynthetic(methodInfo, buffer, lineSeparator, tabNumber);", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , false, true));", "+\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , true, false));", "-\t\t\t.append(' ');", "+\t\t\t.append(' ')", "+\t\t\t.append(Util.bind(\"disassembler.commentend\"));", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tIClassFileAttribute[] attributes = methodInfo.getAttributes();", "+\t\tint length = attributes.length;", "+\t\tif (length != 0) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\tif ((attribute != codeAttribute) && (attribute != exceptionAttribute)) {", "+\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\tbuffer.append(Util.bind(\"disassembler.commentend\"));", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"disassembler.commentstart\"))", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(Util.bind(\"classfileformat.maxStack\"))", "-\t\t\t\t.append(codeAttribute.getMaxStack())", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(',')", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(Util.bind(\"classfileformat.maxLocals\"))", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(codeAttribute.getMaxLocals())", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(Util.bind(\"disassembler.commentend\"));", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t} else {", "-\t\t\tbuffer.append(Util.bind(\"disassembler.commentend\"));"]}], "num": 10439}
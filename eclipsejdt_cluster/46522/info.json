{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbcf3eadb1d5b0398e62493e8f6a29b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61486ea97cb36bc4bd116f9330d7ecc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "ed230d7da6ab9728129283fd00e6cd341cfcf50b", "commitAfterChange": "5c8da7df87ece8eb7412c83be00e8165dcb5a180", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\thandlingContext.initsOnFinally = ", "+\t\t\tnew NullInfoRegistry(flowInfo.unconditionalInits());", "+\t\t// only try blocks initialize that member - may consider creating a", "+\t\t// separate class if needed", "+\t\t", "+\t\t// chain up null info registry", "+\t\tif (flowContext.initsOnFinally != null) {", "+\t\t\tflowContext.initsOnFinally.add(handlingContext.initsOnFinally);", "+\t\t}", "+\t\t", "+\t\thandlingContext.initsOnFinally =", "+\t\t\tnew NullInfoRegistry(flowInfo.unconditionalInits());", "+\t\t// only try blocks initialize that member - may consider creating a", "+\t\t// separate class if needed\t\t", "-\t\t\t(tryInfo.tagBits & FlowInfo.UNREACHABLE) == 0 ", "-\t\t\t\t? flowInfo.unconditionalCopy().", "+\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t(tryInfo.tagBits & FlowInfo.UNREACHABLE) == 0 ?", "+\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\tinsideSubContext.initsOnReturn)", "-\t\t\t\t: insideSubContext.initsOnReturn,", "+\t\t\t\t\taddPotentialInitializationsFrom(insideSubContext.initsOnReturn) : ", "+\t\t\t\t\tinsideSubContext.initsOnReturn),", "-\t\t", "+", "+\t\t// chain up null info registry", "+\t\tif (flowContext.initsOnFinally != null) {", "+\t\t\tflowContext.initsOnFinally.add(handlingContext.initsOnFinally);", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650d926d477a7b1d4c64603a8ec6da9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "d822f3498ffb9e5cdd62d79ada53897bda8bb948", "commitAfterChange": "30d928a4ed94bdfc40106ae995b6d295a0fd9974", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t", "-\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(false)) {", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "-\t\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo)", "-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(handlingContext.initsOnReturn);", "+\t\t\t\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(tryInfo).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn));", "-\t\t\t\tFlowInfo catchInfo =", "+\t\t\t\tFlowInfo catchInfo;", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(tryInfo).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn));", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\tcatchInfo =", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bc221de72f19be4a7aefc74ad5dd554", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "372d175da142eb06ee96f2b4e45c55b51d9b736f", "commitAfterChange": "3fc938efd67d7f1d6ba4971b3e0f4aa8cd107965", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tFlowContext insideSubContext;\r", "+\tInsideSubRoutineFlowContext insideSubContext;\r", "-\t\tinsideSubContext = flowContext;\r", "+\t\t// no finally block\r", "+\t\tinsideSubContext = null;\r", "+\t\t// analyse finally block first\r", "-\r", "-\t\tnew ExceptionHandlingFlowContext(insideSubContext, tryBlock, caughtExceptionTypes, scope, flowInfo.unconditionalInits());\r", "+\t\tnew ExceptionHandlingFlowContext(\r", "+\t\t\tinsideSubContext == null ? flowContext: insideSubContext, \r", "+\t\t\ttryBlock, \r", "+\t\t\tcaughtExceptionTypes, \r", "+\t\t\tscope, \r", "+\t\t\tflowInfo.unconditionalInits());\r", "+\t\t\t\r", "-\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(handlingContext.initsOnException(caughtExceptionTypes[i]).unconditionalInits())\r", "+\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(\r", "+\t\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(caughtExceptionTypes[i]).unconditionalInits())\r", "-\t\t\tcatchInfo = catchBlocks[i].analyseCode(currentScope, insideSubContext, catchInfo);\r", "+\t\t\tcatchInfo = catchBlocks[i].analyseCode(\r", "+\t\t\t\tcurrentScope, \r", "+\t\t\t\tinsideSubContext == null ? flowContext: insideSubContext, \r", "+\t\t\t\tcatchInfo);\r", "+\t// need to include potential inits from returns inside the try/catch parts - 1GK2AOF\r", "+\ttryInfo.addPotentialInitializationsFrom(insideSubContext.initsOnReturn);\r"]}], "num": 46522}
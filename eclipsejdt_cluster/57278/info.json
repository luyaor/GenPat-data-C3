{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f3a1cf7ba7e6c3cd18153efd16d60f5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a21d472758320e546975142c2f5add9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "e61ca8e1d61583d3b3c2b651dd8b10d4b64ccab5", "commitAfterChange": "193b41508b7c1d081db1d1f5e0c1e17fb71515dc", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tboolean unboxedLeft = false, unboxedRight = false;", "-\t\t\t\tint unboxedID = env.computeBoxingType(leftType).id;", "-\t\t\t\tif (unboxedID != leftTypeID) {", "-\t\t\t\t\tleftTypeID = unboxedID;", "-\t\t\t\t\tunboxedLeft = true;", "-\t\t\t\t}", "+\t\t\t\tleftTypeID = env.computeBoxingType(leftType).id;", "-\t\t\t\tint unboxedID = env.computeBoxingType(rightType).id;", "-\t\t\t\tif (unboxedID != rightTypeID) {", "-\t\t\t\t\trightTypeID = unboxedID;", "-\t\t\t\t\tunboxedRight = true;", "-\t\t\t\t}", "+\t\t\t\trightTypeID = env.computeBoxingType(rightType).id;", "-\t\tleft.implicitConversion = (unboxedLeft ? UNBOXING : 0) | (operatorSignature >>> 12);", "-\t\tright.implicitConversion = (unboxedRight ? UNBOXING : 0) | ((operatorSignature >>> 4) & 0xFF);", "+\t\tleft.computeConversion(\tscope, \tTypeBinding.wellKnownType(scope, (operatorSignature >>> 16) & 0x0000F), leftType);", "+\t\tright.computeConversion(scope, TypeBinding.wellKnownType(scope, (operatorSignature >>> 8) & 0x0000F), rightType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b4ec1529104219d61fd51354c88804d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "c06c47cc107f647debe88ffb1eb03a0449972049", "commitAfterChange": "0a6d3ceb62cb9432ae4f89d5a92a50f1a71fe3e5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tTypeBinding leftType = left.resolveType(scope);", "+\t\t\tTypeBinding originalLeftType = left.resolveType(scope);", "-\t\t\tTypeBinding rightType = right.resolveType(scope);", "+\t\t\tTypeBinding originalRightType = right.resolveType(scope);", "-\t\tif (leftType == null || rightType == null){", "+\t\tif (originalLeftType == null || originalRightType == null){", "-\t\tboolean unboxedLeft = false, unboxedRight = false;", "+\t\tTypeBinding leftType = originalLeftType, rightType = originalRightType;", "-\t\t\t\t\tTypeBinding unboxedType = env.computeBoxingType(rightType);", "-\t\t\t\t\tif (unboxedType != rightType) {", "-\t\t\t\t\t\trightType = unboxedType;", "-\t\t\t\t\t\tunboxedRight = true;", "-\t\t\t\t\t}", "+\t\t\t\t\trightType = env.computeBoxingType(rightType);", "-\t\t\t\t\tTypeBinding unboxedType = env.computeBoxingType(leftType);", "-\t\t\t\t\tif (unboxedType != leftType) {", "-\t\t\t\t\t\tleftType = unboxedType;", "-\t\t\t\t\t\tunboxedLeft = true;", "-\t\t\t\t\t}", "+\t\t\t\t\tleftType = env.computeBoxingType(leftType);", "-\t\t\tleft.implicitConversion =  (unboxedLeft ? UNBOXING : 0) | (operatorSignature >>> 12);", "-\t\t\tright.implicitConversion =  (unboxedRight ? UNBOXING : 0) | ((operatorSignature >>> 4) & 0x000FF);", "+\t\t\tleft.computeConversion(scope, TypeBinding.wellKnownType(scope, (operatorSignature >>> 16) & 0x0000F), originalLeftType);", "+\t\t\tright.computeConversion(scope, TypeBinding.wellKnownType(scope, (operatorSignature >>> 8) & 0x0000F), originalRightType);"]}], "num": 57278}
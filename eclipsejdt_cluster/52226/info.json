{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecc511159e992a372bc2d4cb4a4af623", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "457c2eb845c454a7a2d85bb0ec01a885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate String getLocalVariableName(int pc, int index)", "signatureAfterChange": " \t \tprivate String getLocalVariableName(int pc, int index, boolean showIndex)", "diff": ["+\t", "+\tprivate String getLocalVariableName(int pc, int index, boolean showIndex) {", "-                return new String(entry.getName());", "+            \tfinal StringBuffer stringBuffer = new StringBuffer();", "+            \tif (showIndex) {", "+            \t\tstringBuffer.append(' ').append(index);", "+            \t}", "+            \tstringBuffer.append(' ').append('[').append(entry.getName()).append(']');", "+            \treturn String.valueOf(stringBuffer);", "-\t\tString localVariableName = Messages.bind(Messages.disassembler_localvariablename, (new String[] {Integer.toString(index)})); ", "-\t\treturn localVariableName;", "+    \tif (showIndex) {", "+        \tfinal StringBuffer stringBuffer = new StringBuffer();", "+        \tstringBuffer.append(' ').append(index);", "+         \treturn String.valueOf(stringBuffer);", "+    \t}", "+        return EMPTY_LOCAL_NAME;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bfadb76e8f7528b65f1fe883378755f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "8f26d11c4ba332f2be7ec8dbf571250694ed7207", "commitAfterChange": "43a0c55f94ed86f30ef95f5f1ba26a35207a73d3", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t\tTestVisitor v1 = new TestVisitor();", "-\t\tb.setLength(0);", "-\t\tx1.accept(v1);", "-\t\tString result = b.toString();", "-\t\tassertTrue((\"[(JD/**?*/\"+TAG1S+\"/**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t", "+\t\t// ASTVisitor() does not visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor();", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*//**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// ASTVisitor(false) does not visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor(false);", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*//**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// ASTVisitor(true) does visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor(true);", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*/\"+TAG1S+\"/**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}"]}], "num": 52226}
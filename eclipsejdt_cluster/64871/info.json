{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1bdb8516b871ada1a8567f1fe8d60e3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53354d33e40baa7d2eb4abd8716f9ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 1112, "methodNumberAfterChange": 1112, "signatureBeforeChange": " public void _test1084()", "signatureAfterChange": " public void test1084()", "diff": ["-public void _test1084() {", "+public void test1084() {", "-\t\t\"ERR\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tZ<Y> l2 = (Z<Y>) l1;\\n\" + ", "+\t\t\"\t  ^\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tZ<Y> l2 = (Z<Y>) l1;\\n\" + ", "+\t\t\"\t          ^^^^^^^^^\\n\" + ", "+\t\t\"Cannot cast from Z<Y<?>> to Z<Y>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tZ<Y> l2 = (Z<Y>) l1;\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f403010a2aaee392acbb6fe00028d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "cbb80b4c969d064367ed598ba99f074660c726c6", "commitAfterChange": "48bf00145f70fca24101eaac33adc5d495f9e595", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void _test428177()", "signatureAfterChange": " public void test428177()", "diff": ["-public void _test428177() {", "+public void test428177() {", "-\t\t\"valid error messages go here - some are expected since javac also complains\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\twithoutWildcard(stream); // ERROR\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#10-of ? extends String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 36)\\n\" + ", "+\t\t\"\tif(\\\"1\\\" == \\\"\\\") { return stream.collect(Collectors.toList()).stream(); // ERROR\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Stream<capture#14-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 38)\\n\" + ", "+\t\t\"\treturn stream.collect(Collectors.toList()); // NO ERROR\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#16-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 64871}
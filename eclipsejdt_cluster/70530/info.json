{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65539f19f7c4e5fe2f962a21d0146b7a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307630d80575b66b6390ca58490106ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "da1ed68bc4edf753a4c670a981fc3b101d0548b0", "commitAfterChange": "d60a521aebaf899095636d4081476cd72ef03126", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected void processAnnotationResults(CompilationParticipantResult[] results)", "signatureAfterChange": "  protected void processAnnotationResults(CompilationParticipantResult[] results)", "diff": ["-\t// called AFTER the build loop once all source files have been compiled", "-", "+\tif (this.incrementalBuilder == null)", "+\t\tthis.incrementalBuilder = new IncrementalImageBuilder(this);", "+\tthis.incrementalBuilder.processAnnotationResults(results);", "+}", "-\t// this is a copy of the incremental build loop", "-\tIncrementalImageBuilder incrementalBuilder = new IncrementalImageBuilder(this);", "-\ttry {", "-\t\tincrementalBuilder.resetCollections();", "-\t\tincrementalBuilder.processAnnotationResults(results);", "-\t\tincrementalBuilder.addAffectedSourceFiles(); // pick up any affected source files of the deleted generated files", "-", "-\t\twhile (incrementalBuilder.sourceFiles.size() > 0) {", "-\t\t\tSourceFile[] allSourceFiles = new SourceFile[incrementalBuilder.sourceFiles.size()];", "-\t\t\tincrementalBuilder.sourceFiles.toArray(allSourceFiles);", "-\t\t\tincrementalBuilder.resetCollections();", "-", "-\t\t\tincrementalBuilder.workQueue.addAll(allSourceFiles);", "-\t\t\tincrementalBuilder.compile(allSourceFiles);", "-\t\t\tincrementalBuilder.removeSecondaryTypes();", "-\t\t\tincrementalBuilder.addAffectedSourceFiles();", "-\t\t}", "-\t} catch (CoreException e) {", "-\t\tthrow internalException(e);", "-\t} finally {", "-\t\tincrementalBuilder.cleanUp();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7658a1ae11064ea07094d36537b98fa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "26e0b0c271d5031424823a1070ef180ba24218bf", "commitAfterChange": "c84496f37e5dff715764911530c1fceaa60b14ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\tint pc = codeStream.position;", "-\t\t\tint pc = codeStream.position;", "-\t\tLabel falseLabel;", "-\t\tbits |= OnlyValueRequired;", "-\t\tgenerateOptimizedBoolean(", "-\t\t\tcurrentScope, ", "-\t\t\tcodeStream, ", "-\t\t\tnull, ", "-\t\t\tfalseLabel = new Label(codeStream), ", "-\t\t\tvalueRequired);", "-\t\tif (falseLabel.hasForwardReferences()) {", "-\t\t\tif (valueRequired){", "-\t\t\t\t// comparison is TRUE ", "-\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\tif ((bits & IsReturnedValue) != 0){", "-\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "-\t\t\t\t\t// comparison is FALSE", "-\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t} else {", "-\t\t\t\t\tLabel endLabel = new Label(codeStream);", "-\t\t\t\t\tcodeStream.goto_(endLabel);", "-\t\t\t\t\tcodeStream.decrStackSize(1);", "-\t\t\t\t\t// comparison is FALSE", "-\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\tendLabel.place();", "-\t\t\t\t}", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t} else {", "-\t\t\t\tfalseLabel.place();", "-\t\t\t}\t", "+\t\t", "+\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) /*compile-time*/ == T_boolean) {", "+\t\t\tgenerateBooleanEqual(currentScope, codeStream, valueRequired);", "+\t\t} else {", "+\t\t\tgenerateNonBooleanEqual(currentScope, codeStream, valueRequired);", "+\t\tif (valueRequired) {", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a45ae8db7d807515f55d6621d4c2b7b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "58ba36970b62e85055d743e983529c59c428ef51", "commitAfterChange": "62b67c6dc710fafde2d85e9a6368fb1e9d9e73c8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "signatureAfterChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "diff": ["-", "-\t\tPackageBinding unitPackage = compilationUnitScope().fPackage;", "-\t\t", "+", "-\t\t", "+\t\tPackageBinding unitPackage = compilationUnitScope().fPackage;", "-\t\tHashtableOfObject knownTypeParameterNames = new HashtableOfObject(length);", "-\t\tnextParameter : for (int i = 0; i < length; i++) {", "+\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t", "-\t\t\tif (knownTypeParameterNames.containsKey(typeParameter.name)) {", "-\t\t\t\tTypeVariableBinding previousBinding = (TypeVariableBinding) knownTypeParameterNames.get(typeParameter.name);", "-\t\t\t\tif (previousBinding != null) {", "-\t\t\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\t\t\tTypeParameter previousParameter = typeParameters[j];", "-\t\t\t\t\t\tif (previousParameter.binding == previousBinding) {", "-\t\t\t\t\t\t\tproblemReporter().duplicateTypeParameterInType(previousParameter);", "-\t\t\t\t\t\t\tpreviousParameter.binding = null;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tknownTypeParameterNames.put(typeParameter.name, null); // ensure that the duplicate parameter is found & removed", "-\t\t\t\tproblemReporter().duplicateTypeParameterInType(typeParameter);", "-\t\t\t\ttypeParameter.binding = null;", "-\t\t\t} else {", "-\t\t\t\tknownTypeParameterNames.put(typeParameter.name, parameterBinding);", "-\t\t\t\t// remember that we have seen a field with this name", "-\t\t\t\tif (parameterBinding != null)", "-\t\t\t\t\ttypeVariableBindings[count++] = parameterBinding;", "+", "+\t\t\t// detect duplicates, but keep each variable to reduce secondary errors with instantiating this generic type (assume number of variables is correct)", "+\t\t\tfor (int j = 0; j < count; j++) {", "+\t\t\t\tTypeVariableBinding knownVar = typeVariableBindings[j];", "+\t\t\t\tif (CharOperation.equals(knownVar.sourceName, typeParameter.name))", "+\t\t\t\t\tproblemReporter().duplicateTypeParameterInType(typeParameter);", "+\t\t\ttypeVariableBindings[count++] = parameterBinding;", "-\t\tif (count != length) {", "+\t\tif (count != length)", "-\t\t}"]}], "num": 70530}
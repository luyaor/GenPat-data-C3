{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11a7b2a9f6d17303c8e72f228a2d3e75", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0597dad2b075d9051f70ab767c960e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "7c5e971605e3df9f80c39caf6a5dabceeb49148b", "commitAfterChange": "ffe39da04df0f3a3dcc2e15c0353857438ce8e35", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate boolean checkAndTagAsMalformed(ASTNode node)", "signatureAfterChange": " \t \tprivate boolean markIncludedProblems(int start, int end)", "diff": ["-\tprivate boolean checkAndTagAsMalformed(ASTNode node) {", "-\t\tboolean tagWithErrors = false;", "-\t\tsearch: for (int i = 0, max = this.problems.length; i < max; i++) {", "+\t", "+\tprivate boolean markIncludedProblems(int start, int end) {", "+\t\tboolean foundProblems = false;", "+\t\tnext: for (int i = 0, max = this.problems.length; i < max; i++) {", "+\t\t\t", "+\t\t\tif(this.usedOrIrrelevantProblems[i]) continue next;", "+\t\t\t", "-\t\t\t\t\tcontinue search;", "+\t\t\t\t\tthis.usedOrIrrelevantProblems[i] = true;", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t\t", "+\t\t\t", "-\t\t\tint start = node.getStartPosition();", "-\t\t\tint end = start + node.getLength();", "-\t\t\t\tnode.setFlags(node.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\ttagWithErrors = true;", "+\t\t\t\tthis.usedOrIrrelevantProblems[i] = true;", "+\t\t\t\tfoundProblems = true;", "-\t\treturn tagWithErrors;", "+\t\treturn foundProblems;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "620353baf2e6b9520f71e6b343b37b73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "939badb3c6fe1d2f02856fa68cfae3c871f99594", "commitAfterChange": "1d813f81d1ab9bf28fbd197f33e8c5356ab9bb9d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "signatureAfterChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "diff": ["-\t\tfor (int i = 0; i < expectedProblems.length; i++)", "-\t\t\tassertEquals(\"unexpected problem\", expectedProblems[i].toString(), rootProblems[i].toString()); //$NON-NLS-1$", "+\t", "+\t\tfor (int i = 0; i < expectedProblems.length; i++) {", "+\t\t\tProblem expectedProblem = expectedProblems[i];", "+\t\t\tboolean found = false;", "+\t\t\tfor (int j = 0; j < rootProblems.length; j++) {", "+\t\t\t\tif(expectedProblem.equals(rootProblems[j])) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\trootProblems[j] = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tassertTrue(\"problem not found: \" + expectedProblem.toString(), found); //$NON-NLS-1$", "+\t\t}", "+\t\tfor (int i = 0; i < rootProblems.length; i++) {", "+\t\t\tif(rootProblems[i] != null) {", "+\t\t\t\tassertTrue(\"unexpected problem: \" + rootProblems[i].toString(), false); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac2633e1c1ba2b98577bc8c0f7da65bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfObjectToIntArray.java", "commitBeforeChange": "69f7860162afcfc8030db1b89728ef29dad30425", "commitAfterChange": "12f67d7a75389e2a993321c57a8e613bfbfd0a38", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-\t\tString s = \"\"; //$NON-NLS-1$", "+\t\tStringBuffer buffer = new StringBuffer();", "-\t\tfor (int i = 0, length = this.keyTable.length; i < length; i++)", "-\t\t\tif ((key = this.keyTable[i]) != null)", "-\t\t\t\ts += key + \" -> \" + this.valueTable[i] + \"\\n\"; \t//$NON-NLS-2$ //$NON-NLS-1$", "-\t\treturn s;", "+\t\tfor (int i = 0, length = this.keyTable.length; i < length; i++) {", "+\t\t\tif ((key = this.keyTable[i]) != null) {", "+\t\t\t\tbuffer.append(key).append(\" -> \"); //$NON-NLS-1$", "+\t\t\t\tint[] ints = this.valueTable[i];", "+\t\t\t\tbuffer.append('[');", "+\t\t\t\tif (ints != null) {", "+\t\t\t\t\tfor (int j = 0, max = ints.length; j < max; j++) {", "+\t\t\t\t\t\tif (j > 0) {", "+\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append(ints[j]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(\"]\\n\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\treturn String.valueOf(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc85dcd9f5a08de9ddf38b3c0abec851", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate void expectingCompiling(String[] actual, String[] expected, String message)", "signatureAfterChange": "  \tprivate void expectingCompiling(String[] actual, String[] expected, String message)", "diff": ["-\t", "-\tprivate void expectingCompiling(String[] actual, String[] expected, String message){", "-\t\tif(DEBUG) {", "-\t\t\tfor (int i = 0; i < actual.length; i++) {", "+", "+\tprivate void expectingCompiling(String[] actual, String[] expected, String message) {", "+\t\tif (DEBUG)", "+\t\t\tfor (int i = 0; i < actual.length; i++)", "-\t\t\t}", "-\t\t}\t", "-\t\t", "+", "-\t\tfor (int i = 0; i < actual.length; i++){", "-\t\t\tif (i > 0) actualBuffer.append(\",\"); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < actual.length; i++) {", "+\t\t\tif (i > 0)", "+\t\t\t\tactualBuffer.append(\",\"); //$NON-NLS-1$", "-\t\tfor (int i = 0; i < expected.length; i++){", "-\t\t\tif (i > 0) expectedBuffer.append(\",\"); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < expected.length; i++) {", "+\t\t\tif (i > 0)", "+\t\t\t\texpectedBuffer.append(\",\"); //$NON-NLS-1$", "-\t\texpectedBuffer.append('}');\t\t", "+\t\texpectedBuffer.append('}');"]}], "num": 43845}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "159751d0bc8f2046004d18d00cedbeab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d1d692070a7660916a4937c2747c68d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "24ecdaaa88a3d3df53c6657b56b1c35a02f254d7", "commitAfterChange": "b77d2ea3108de5650fdc8f1f0c9f51bf7203159f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t// get the source if possible", "-\tchar[] contents = null;", "-\tSourceMapper mapper = this.getSourceMapper();", "-\tif (mapper != null) {", "-\t\tcontents = mapper.findSource(getType());", "+\tCompilationUnit workingCopy = new ClassFileWorkingCopy(this, owner == null ? DefaultWorkingCopyOwner.PRIMARY : owner);", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "+\t\tmanager.getPerWorkingCopyInfo(workingCopy, false/*don't create*/, true/*record usage*/, null/*not used since don't create*/);", "+\tif (perWorkingCopyInfo != null) {", "+\t\treturn perWorkingCopyInfo.getWorkingCopy(); // return existing handle instead of the one created above", "-\tif (contents == null) {", "-\t\treturn null;", "-\t}", "-", "-\tClassFileWorkingCopy workingCopy = new ClassFileWorkingCopy();", "-\tIBuffer buffer = owner == null ? this.getBuffer() : owner.createBuffer(workingCopy);", "-\tworkingCopy.buffer = buffer;", "-\t", "-\t// set the buffer source", "-\tif (buffer != null && buffer.getCharacters() == null){", "-\t\tbuffer.setContents(contents);", "-\t}", "+\tBecomeWorkingCopyOperation op = new BecomeWorkingCopyOperation(workingCopy, null);", "+\top.runOperation(monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8debf3a810e41636b2a3fae278bf754d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "7b4fdf4780132144ccc7c2e7370ef3841befc3d9", "commitAfterChange": "6a5ede81dc60cc482d4fde0564e95e20c9055fee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, long dimPos, long argNamePos) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, long[] dimPositions, long argNamePos) throws InvalidInputException", "diff": ["-\tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, long dimPos, long argNamePos) throws InvalidInputException {", "+\tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, long[] dimPositions, long argNamePos) throws InvalidInputException {", "-\t\t\tif (dimPos >= 0) argEnd = (int) dimPos;", "+\t\t\tif (dim > 0) argEnd = (int) dimPositions[dim-1];", "-\t\t\t\tif (dim > 0) {", "-\t\t\t\t\targType = this.ast.newArrayType(argType, dim);", "-\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPos)-argStart+1);", "-\t\t\t\t}", "+//\t\t\t\tif (dim > 0) {", "+//\t\t\t\t\targType = this.ast.newArrayType(argType, dim);", "+//\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPositions[dim-1])-argStart+1);", "+//\t\t\t\t}", "-\t\t\t\tif (dim > 0) {", "-\t\t\t\t\targType = this.ast.newArrayType(argType, dim);", "-\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPos)-argStart+1);", "-\t\t\t\t} else {", "-\t\t\t\t\targType.setSourceRange(argStart, node.getLength());", "+\t\t\t\targType.setSourceRange(argStart, node.getLength());", "+\t\t\t}", "+\t\t\tif (dim > 0) {", "+\t\t\t\tfor (int i=0; i<dim; i++) {", "+\t\t\t\t\targType = this.ast.newArrayType(argType);", "+\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPositions[i])-argStart+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6a0e54b4566e7fd16388e18f66b6ff2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java", "commitBeforeChange": "49709bf8c2e28ee09c1495f3c38bd0f03955bc27", "commitAfterChange": "a1768f443093f3441269907bc7cfbf61433d342b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public CompilationUnit(char[] contents, String fileName, String encoding)", "signatureAfterChange": " \t public CompilationUnit(char[] contents, String fileName, String encoding)", "diff": ["-\tif (File.separator.equals(\"/\")) { //$NON-NLS-1$", "-\t\tif (fileName.indexOf(\"\\\\\") != -1) { //$NON-NLS-1$", "-\t\t\tfileName = fileName.replace('\\\\', File.separatorChar);", "-\t\t}", "-\t} else {", "-\t\t// the file separator is \\", "-\t\tif (fileName.indexOf('/') != -1) {", "-\t\t\tfileName = fileName.replace('/', File.separatorChar);", "-\t\t}", "+\tchar[] fileNameCharArray = fileName.toCharArray();", "+\tswitch(File.separatorChar) {", "+\t\tcase '/' :", "+\t\t\tif (CharOperation.indexOf('\\\\', fileNameCharArray) != -1) {", "+\t\t\t\tCharOperation.replace(fileNameCharArray, '\\\\', '/');", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase '\\\\' :", "+\t\t\tif (CharOperation.indexOf('/', fileNameCharArray) != -1) {", "+\t\t\t\tCharOperation.replace(fileNameCharArray, '/', '\\\\');", "+\t\t\t}", "-\tthis.fileName = fileName.toCharArray();", "+\tthis.fileName = fileNameCharArray;", "+\tint start = CharOperation.lastIndexOf(File.separatorChar, fileNameCharArray) + 1; ", "-\tint start = fileName.lastIndexOf(\"/\") + 1; //$NON-NLS-1$", "-\tif (start == 0 || start < fileName.lastIndexOf(\"\\\\\")) //$NON-NLS-1$", "-\t\tstart = fileName.lastIndexOf(\"\\\\\") + 1; //$NON-NLS-1$", "+\tint end = CharOperation.lastIndexOf('.', fileNameCharArray);", "+\tif (end == -1) {", "+\t\tend = fileNameCharArray.length;", "+\t}", "-\tint end = fileName.lastIndexOf(\".\"); //$NON-NLS-1$", "-\tif (end == -1)", "-\t\tend = fileName.length();", "-", "-\tthis.mainTypeName = fileName.substring(start, end).toCharArray();", "+\tthis.mainTypeName = CharOperation.subarray(fileNameCharArray, start, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac1289c058aea88aa1c5241f2d865d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate MethodDeclaration find(char[] startWith, Scope s, int from, int to, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tprivate MethodDeclaration findBefore( \t\t\tchar[] startWith, \t\t\tScope s, \t\t\tint from, \t\t\tint to, \t\t\tint maxLineCount, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tprivate MethodDeclaration find(char[] startWith, Scope s, int from, int to, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\t// compute location of the end of the current block", "-\t\tthis.completionScanner.resetTo(from + 1, to);", "-\t\tthis.completionScanner.jumpOverBlock();", "-\t\t", "-\t\tint blockEnd = this.completionScanner.startPosition - 1;", "-\t\t\t\t\tthis.completionScanner.getLineNumber(from) + MAX_LINE_COUNT);", "-\t\t\tend = blockEnd;", "-\t\t\tend = maxEnd < blockEnd ? maxEnd : blockEnd;", "-\t\tMethodDeclaration fakeMethod = this.parser.parseStatementsAfterCompletion(", "+\t", "+\tprivate MethodDeclaration findBefore(", "+\t\t\tchar[] startWith,", "+\t\t\tScope s,", "+\t\t\tint from,", "+\t\t\tint to,", "+\t\t\tint maxLineCount,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tthis.requestor = nameRequestor;", "+\t\t", "+\t\t// reinitialize completion scanner to be usable as a normal scanner", "+\t\tthis.completionScanner.cursorLocation = 0;", "+\t\t", "+\t\t// reinitialize completionIdentifier", "+\t\tthis.completionScanner.prefix = startWith;", "+\t\t", "+\t\tint minStart =", "+\t\t\tthis.completionScanner.getLineStart(", "+\t\t\t\t\tthis.completionScanner.getLineNumber(to) - maxLineCount);", "+\t\t", "+\t\tint start;", "+\t\tint fakeBlocksCount;", "+\t\tif (minStart <= from) {", "+\t\t\tstart = from;", "+\t\t\tfakeBlocksCount = 0;", "+\t\t} else {", "+\t\t\tstart = minStart;", "+\t\t\tfakeBlocksCount = FAKE_BLOCKS_COUNT;", "+\t\t}", "+\t\t", "+\t\tthis.completionScanner.startRecordingIdentifiers();", "+\t\t", "+\t\tMethodDeclaration fakeMethod = this.parser.parseSomeStatements(", "+\t\t\t\tstart,", "+\t\t\t\tto,", "+\t\t\t\tfakeBlocksCount,"]}], "num": 6885}
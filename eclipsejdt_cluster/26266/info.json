{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9581ca3a224b1ff559dc7451d031aae", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3708f7f2a3d4ca20aa8cd60449014f8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic boolean visit(EnumConstant enumConstant, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(FieldDeclaration enumConstant, MethodScope scope)", "diff": ["-\tpublic boolean visit(EnumConstant enumConstant, ClassScope scope) {", "+\t// field is an enum constant", "+\tpublic boolean visit(FieldDeclaration enumConstant, MethodScope scope) {", "-\t\tint fieldsCount = enumConstant.fields == null ? 0 : enumConstant.fields.length;", "-\t\tint methodsCount = enumConstant.methods == null ? 0 : enumConstant.methods.length;", "-\t\tint enumsCount = enumConstant.enums == null ? 0 : enumConstant.enums.length;", "-\t\tint membersCount = enumConstant.memberTypes == null ? 0 : enumConstant.memberTypes.length;", "-\t\t", "-\t\tif (fieldsCount != 0 || methodsCount != 0 || membersCount != 0 || enumsCount != 0) {", "-\t\t\t/*", "-\t\t\t * Type body", "-\t\t\t */", "-\t\t\tString enum_constant_brace = this.preferences.brace_position_for_enum_constant;", "-\t", "-\t        formatLeftCurlyBrace(line, enum_constant_brace);", "-\t\t\tformatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, enumConstant);", "+\t\tExpression initialization = enumConstant.initialization;", "+\t\tif (initialization instanceof QualifiedAllocationExpression) {", "+\t\t\tTypeDeclaration typeDeclaration = ((QualifiedAllocationExpression) initialization).anonymousType;", "+\t\t\tint fieldsCount = typeDeclaration.fields == null ? 0 : typeDeclaration.fields.length;", "+\t\t\tint methodsCount = typeDeclaration.methods == null ? 0 : typeDeclaration.methods.length;", "+\t\t\tint membersCount = typeDeclaration.memberTypes == null ? 0 : typeDeclaration.memberTypes.length;", "-\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "-\t\t\t\tthis.scribe.indent();", "-\t\t\t}", "-\t", "-\t\t\tformatTypeMembers(enumConstant);", "-\t", "-\t\t\tthis.scribe.printComment();", "-\t\t\t", "-\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (this.preferences.insert_new_line_in_empty_enum_constant) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t\tif (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t\tif (hasComments()) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t\t\tif (fieldsCount != 0 || methodsCount != 0 || membersCount != 0) {", "+\t\t\t\t/*", "+\t\t\t\t * Type body", "+\t\t\t\t */", "+\t\t\t\tString enum_constant_brace = this.preferences.brace_position_for_enum_constant;", "+\t\t", "+\t\t        formatLeftCurlyBrace(line, enum_constant_brace);", "+\t\t\t\tformatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, typeDeclaration);", "+\t\t\t\t", "+\t\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\tformatTypeMembers(typeDeclaration);", "+\t\t", "+\t\t\t\tthis.scribe.printComment();", "+\t\t\t\t", "+\t\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t", "+\t\t\t\tif (this.preferences.insert_new_line_in_empty_enum_constant) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "+\t\t\t\tif (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t}", "+\t\t\t\tif (hasComments()) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2715e6cf90121ef5a70857133a2a7a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["+\t */", "+\tpublic boolean visit(EnumDeclaration node) {", "+\t\tif (node.getJavadoc() != null) {", "+\t\t\tnode.getJavadoc().accept(this);", "+\t\t}", "+\t\tprintModifiers(node.modifiers());", "+\t\tthis.buffer.append(\"enum \");//$NON-NLS-1$", "+\t\tnode.getName().accept(this);", "+\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\tif (!node.superInterfaceTypes().isEmpty()) {", "+\t\t\tthis.buffer.append(\"implements \");//$NON-NLS-1$", "+\t\t\tfor (Iterator it = node.superInterfaceTypes().iterator(); it.hasNext(); ) {", "+\t\t\t\tType t = (Type) it.next();", "+\t\t\t\tt.accept(this);", "+\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\t}", "+\t\tthis.buffer.append(\"{\");//$NON-NLS-1$", "+\t\tBodyDeclaration prev = null;", "+\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "+\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "+\t\t\tif (prev instanceof EnumConstantDeclaration) {", "+\t\t\t\t// enum constant declarations do not include punctuation", "+\t\t\t\tif (d instanceof EnumConstantDeclaration) {", "+\t\t\t\t\t// enum constant declarations are separated by commas", "+\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\t// semicolon separates last enum constant declaration from ", "+\t\t\t\t\t// first class body declarations", "+\t\t\t\t\tthis.buffer.append(\"; \");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\td.accept(this);", "+\t\t}", "+\t\tthis.buffer.append(\"}\");//$NON-NLS-1$", "+\t\treturn false;", "+\t}", "-\t\tprintModifiers(node.getModifiers());", "-\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\tif (node.getSuperclass() != null) {", "-\t\t\tthis.buffer.append(\"extends \");//$NON-NLS-1$", "-\t\t\tnode.getSuperclass().accept(this);", "-\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\t}", "-\t\tif (!node.superInterfaces().isEmpty()) {", "-\t\t\tthis.buffer.append(node.isInterface() ? \"extends \" : \"implements \");//$NON-NLS-2$//$NON-NLS-1$", "-\t\t\tfor (Iterator it = node.superInterfaces().iterator(); it.hasNext(); ) {", "-\t\t\t\tName n = (Name) it.next();", "-\t\t\t\tn.accept(this);", "-\t\t\t\tif (it.hasNext()) {", "-\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$"]}], "num": 26266}
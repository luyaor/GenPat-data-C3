{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93171c92b24817413380cb9931f0b8bf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "013ab5fa316afb50d64295c13333b3d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tsynchronized IMethodBinding resolveMethod(SuperMethodInvocation method)", "signatureAfterChange": " \tsynchronized IMethodBinding resolveMethod(MethodReference methodReference)", "diff": ["+\t */", "+\tsynchronized IMethodBinding resolveMethod(MethodReference methodReference) {", "+\t\tObject oldNode = this.newAstToOldAst.get(methodReference);", "+\t\tif (oldNode instanceof org.eclipse.jdt.internal.compiler.ast.ReferenceExpression) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ReferenceExpression referenceExpression = (org.eclipse.jdt.internal.compiler.ast.ReferenceExpression) oldNode;", "+\t\t\tIMethodBinding methodBinding = getMethodBinding(referenceExpression.binding);", "+\t\t\tif (methodBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.bindingsToAstNodes.put(methodBinding, methodReference);", "+\t\t\tString key = methodBinding.getKey();", "+\t\t\tif (key != null) {", "+\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, methodBinding);", "+\t\t\t}", "+\t\t\treturn methodBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f5a5e885d21d5e33b8cc96250366a3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "2febb206172fb89f01e337ac0b2a52d9b04b769e", "commitAfterChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tITypeBinding resolveType(AnnotationTypeDeclaration type)", "signatureAfterChange": " \tITypeBinding resolveType(AnnotationTypeDeclaration type)", "diff": ["-\t\t// TODO (olivier) - missing implementation", "-\t\treturn super.resolveType(type);", "+\t\tfinal Object node = this.newAstToOldAst.get(type);", "+\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\tif (typeDeclaration != null) {", "+\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "+\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(typeBinding, type);", "+\t\t\t\tString key = typeBinding.getKey();", "+\t\t\t\tif (key != null) {", "+\t\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, typeBinding);", "+\t\t\t\t}", "+\t\t\t\treturn typeBinding;", "+\t\t\t}", "+\t\t}", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a6d6fb46511e59f560f15be47b447e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "commitAfterChange": "85d82ef92c86e257cfcb71c0ec95b6b64432a5cb", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tsynchronized IMethodBinding resolveMethod(MethodInvocation method)", "signatureAfterChange": " \tsynchronized IMethodBinding resolveMethod(LambdaExpression lambda)", "diff": ["+\tsynchronized IMethodBinding resolveMethod(LambdaExpression lambda) {", "+\t\tObject oldNode = this.newAstToOldAst.get(lambda);", "+\t\tif (oldNode instanceof org.eclipse.jdt.internal.compiler.ast.LambdaExpression) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.LambdaExpression lambdaExpression = (org.eclipse.jdt.internal.compiler.ast.LambdaExpression) oldNode;", "+\t\t\tIMethodBinding methodBinding = getMethodBinding(lambdaExpression.binding);", "+\t\t\tif (methodBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.bindingsToAstNodes.put(methodBinding, lambda);", "+\t\t\tString key = methodBinding.getKey();", "+\t\t\tif (key != null) {", "+\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, methodBinding);", "+\t\t\t}", "+\t\t\treturn methodBinding;", "+\t\t}", "+\t\treturn null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93189e7532c7925c6d1c30ea021ea9bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "28475f7151ef48b7b99d16fedb7cc564edf8391b", "commitAfterChange": "4374063ffc07d9e5a6e12269e991cbcb89c32543", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tIVariableBinding resolveMember(AnnotationTypeMemberDeclaration member)", "signatureAfterChange": " \tIMethodBinding resolveMember(AnnotationTypeMemberDeclaration declaration)", "diff": ["-\tIVariableBinding resolveMember(AnnotationTypeMemberDeclaration member) {", "-\t\t// TODO (olivier) - missing implementation", "-\t\treturn super.resolveMember(member);", "+\tIMethodBinding resolveMember(AnnotationTypeMemberDeclaration declaration) {", "+\t\tObject oldNode = this.newAstToOldAst.get(declaration);", "+\t\tif (oldNode instanceof AbstractMethodDeclaration) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) oldNode;", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(methodDeclaration.binding);", "+\t\t\t\tif (methodBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, declaration);", "+\t\t\t\tString key = methodBinding.getKey();", "+\t\t\t\tif (key != null) {", "+\t\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, methodBinding);\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\treturn methodBinding;", "+\t\t\t}", "+\t\t}", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8aa7e97e0f6019780434516e882a979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "1bdf253b6c3e0502956ffbd356aa7f9c70660509", "commitAfterChange": "79857ed757b181d48665a94a07c64e0c91436988", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tIVariableBinding resolveVariable(EnumConstantDeclaration enumConstant)", "signatureAfterChange": " \tsynchronized IVariableBinding resolveVariable(EnumConstantDeclaration enumConstant)", "diff": ["+\tsynchronized IVariableBinding resolveVariable(EnumConstantDeclaration enumConstant) {", "+\t\tfinal Object node = this.newAstToOldAst.get(enumConstant);", "+\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\tIVariableBinding variableBinding = this.getVariableBinding(fieldDeclaration.binding);", "+\t\t\tif (variableBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\tthis.bindingsToAstNodes.put(variableBinding, node);", "+\t\t\tString key = variableBinding.getKey();", "+\t\t\tif (key != null) {", "+\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, variableBinding);\t\t\t\t", "+\t\t\treturn variableBinding;", "-\t */", "-\tIVariableBinding resolveVariable(EnumConstantDeclaration enumConstant) {", "-\t\t// TODO (olivier) - missing implementation", "-\t\treturn super.resolveVariable(enumConstant);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbd35d4be0de2343abc26e3dc7b861e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "259752fd2611ae86a8e7deb13311cd77026ab6f4", "commitAfterChange": "4725cc4b92cda70d0724324edfd82ed8a46041bc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tIVariableBinding resolveVariable(FieldDeclaration variable)", "signatureAfterChange": " \tIVariableBinding resolveVariable(FieldDeclaration variable)", "diff": ["+\t */", "+\tIVariableBinding resolveVariable(FieldDeclaration variable) {", "+\t\tfinal Object node = this.newAstToOldAst.get(variable);", "+\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "-\t */", "-\tIVariableBinding resolveVariable(FieldDeclaration variable) {", "-\t\tif (this.checkModificationCount && this.modificationCount != variable.getAST().modificationCount()) {", "-\t\t\treturn null;", "-\t\t}", "-\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) this.newAstToOldAst.get(variable);", "-\t\tIVariableBinding variableBinding = this.getVariableBinding(fieldDeclaration.binding);", "-\t\tif (variableBinding == null) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tthis.bindingsToAstNodes.put(variableBinding, variable);", "-\t\treturn variableBinding;", "+\t\treturn null;"]}], "num": 11556}
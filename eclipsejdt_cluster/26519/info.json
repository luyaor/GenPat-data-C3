{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "806a0dff1a785ad91b203a9ad11fc9b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0adfb6c576ac765b0d86e63d1bf45bbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PostfixExpression.java", "commitBeforeChange": "5b6dd37b3f6594fcb6694566bc7450985b1bde55", "commitAfterChange": "cd2b61036e3927f1fe000c47bcd4c2b236df73f6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\t// various scenarii are possible, setting an array reference, ", "+\t// a field reference, a blank final field reference, a field of an enclosing instance or ", "+\t// just a local variable.", "+", "+\tint pc = codeStream.position;", "+\t ((Reference) this.lhs).generatePostIncrement(currentScope, codeStream, this, valueRequired);", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t */", "-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}", "-\t\t// various scenarii are possible, setting an array reference, ", "-\t\t// a field reference, a blank final field reference, a field of an enclosing instance or ", "-\t\t// just a local variable.", "-", "-\t\tint pc = codeStream.position;", "-\t\t ((Reference) lhs).generatePostIncrement(currentScope, codeStream, this, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t}", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769414b89d2b32ea2be7be464607dba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "b944419a775a8766a80aaf50d5c9201201448e38", "commitAfterChange": "66a68a77c79dc8161adf91226d8f791e46bc037a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\t// various scenarii are possible, setting an array reference, ", "+\t// a field reference, a blank final field reference, a field of an enclosing instance or ", "+\t// just a local variable.", "+", "+\tint pc = codeStream.position;", "+\t ((Reference) lhs).generateAssignment(currentScope, codeStream, this, valueRequired);", "+\t// variable may have been optimized out", "+\t// the lhs is responsible to perform the implicitConversion generation for the assignment since optimized for unused local assignment.", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}", "-\t", "-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "-", "-\t\t// various scenarii are possible, setting an array reference, ", "-\t\t// a field reference, a blank final field reference, a field of an enclosing instance or ", "-\t\t// just a local variable.", "-", "-\t\tint pc = codeStream.position;", "-\t\tif ((this.bits & AssignmentHasNoEffect) != 0) {", "-\t\t\tif (valueRequired) {", "-//\t\t\t\tif (this.expression instanceof PostfixExpression) {", "-//\t\t\t\t\t// discard entire assignment and rhs for cases like: \"b = b++\"", "-//\t\t\t\t\tthis.lhs.generateCode(currentScope, codeStream, true);", "-//\t\t\t\t} else {", "-\t\t\t\tthis.expression.generateCode(currentScope, codeStream, true);", "-//\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\t ((Reference) lhs).generateAssignment(currentScope, codeStream, this, valueRequired);", "-\t\t\t// variable may have been optimized out", "-\t\t\t// the lhs is responsible to perform the implicitConversion generation for the assignment since optimized for unused local assignment.", "-\t\t}", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t}"]}], "num": 26519}
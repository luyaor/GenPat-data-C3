{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdc2d03e0272705d4773c138531d4c2f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088a00054019233633bbf95c59edc3a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tprivate void printBlockComment(boolean isJavadoc)", "signatureAfterChange": "  \tprivate void printBlockComment(boolean isJavadoc)", "diff": ["-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\tboolean addSpace = false;", "-\t\t\t\t\t\t\t\t// simply insert indentation if necessary", "-\t\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t\tif (indentComment) {", "-\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t\taddSpace = true;", "-\t\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t\tif (indentComment) {", "-\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t\taddSpace = true;", "-\t\t\t\t\t\t\taddReplaceEdit(start, previousStart - 1, String.valueOf(buffer));", "+\t\t\t\t\t\t\tString replacement;", "+\t\t\t\t\t\t\tif (indentComment) {", "+\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\t\tif (this.indentationLevel > 0) {", "+\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (addSpace) {", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(' ');", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treplacement = this.tempBuffer.toString();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\treplacement = addSpace ? this.lineSeparatorAndSpace : this.lineSeparator;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\taddReplaceEdit(start, previousStart - 1, replacement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ae49ec49d084e5207ff297effaa6cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKeyScanner.java", "commitBeforeChange": "b78a341d9c2ae71ec75ebc5229ccf7d4bba66b46", "commitAfterChange": "cee72fca9d21d8ecea9da9111153a7e6090893c1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tint nextToken()", "signatureAfterChange": " \tint nextToken()", "diff": ["-\t\tboolean insideMethod = false;", "+\t\t\t\tcase ',':", "+\t\t\t\t\t\tcase METHOD: // parameter", "+\t\t\t\t\t\tcase ARRAY:", "-\t\t\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\t\t\tif (this.source[this.start-1] == ',')", "+\t\t\t\t\t\t\t\tthis.token = PACKAGE;", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\tthis.token = TYPE;", "-\t\t\t\t\t\t\tif (this.source[start-1] == '$')", "-\t\t\t\t\t\t\t\tthis.token = TYPE;", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\tthis.token = insideMethod ? METHOD : FIELD;", "+\t\t\t\t\t\t\tswitch (this.source[this.start-1]) {", "+\t\t\t\t\t\t\t\tcase '$':", "+\t\t\t\t\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase ',':", "+\t\t\t\t\t\t\t\t\tthis.token = PACKAGE;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\tthis.token = FIELD;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tthis.index++;", "-\t\t\t\t\t} while (this.index < length && this.source[this.index] != ')');", "-\t\t\t\t\tinsideMethod = true;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\tthis.token = METHOD;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\tcase ')':", "+\t\t\t\t\tthis.start = ++this.index;", "+\t\t\t\t\tthis.token = END;", "+\t\t\t\t\treturn this.token;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "925d9a0ffef2bcbd019e72e4565759ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1784048e951cac8e5c6590cc5827817757e6384e", "commitAfterChange": "4a48abb3b4027036bdeac61104059b6c83710144", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Expression parseReference() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseReference() throws InvalidInputException", "diff": ["-\tprivate Expression parseReference() throws InvalidInputException {", "+\tprivate boolean parseReference() throws InvalidInputException {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t// Do nothing as we want to underline from the beginning of the string", "+\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "+\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);", "-\t\t\t\t\treturn null;", "+\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);", "+\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t\t// Do nothing as we want to underline from the beginning of the href", "+\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "+\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);", "-\t\t\t\t\treturn null;", "+\t\t\t\t\treturn false;", "-\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tif (reference == null) {", "-\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\tif (reference != null) {", "+\t\t\t\t\t\t\tpushSeeRef(reference);", "+\t\t\t\t\t\treturn false;", "-\t\t\treturn null;", "+\t\t\treturn false;", "-\t\t", "-\t\t// Verify that we're at line end", "+", "+\t\t// Verify that line end does not start with an open parenthese (which could be a constructor reference wrongly written...)", "+\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=47215", "-\t\t\tint token = readTokenAndConsume();", "+\t\t\tint token = readToken();", "-\t\t\t\treturn reference;", "+\t\t\t\treturn pushSeeRef(reference);", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);", "-\t\treturn null;", "+\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);", "+\t\treturn false;"]}], "num": 39929}
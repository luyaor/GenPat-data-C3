{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f3f0207eb4348d5ecf59dd704c7463a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1646ae612f0b121785472b0ae385c74d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "e17471345687d82115a1c5b17c8682ce70d39b82", "commitAfterChange": "99dafad6125dffe39055854634df7f841cac4f75", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "signatureAfterChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "diff": ["+\tchar[] qualifiedPackageName = type.qualifiedPackageName();\r", "+\tchar[] qualifiedSourceName = \r", "+\t\ttype instanceof LocalTypeBinding ?\r", "+\t\t\tCharOperation.concat(\"1\".toCharArray(), type.qualifiedSourceName(), '.') :\r", "+\t\t\ttype.qualifiedSourceName();\r", "-\t\t\ttype.qualifiedPackageName().length == 0 ? \r", "-\t\t\t\ttype.qualifiedSourceName() : \r", "-\t\t\t\tCharOperation.concat(type.qualifiedPackageName(), type.qualifiedSourceName(), '.'))) {\r", "+\t\t\tqualifiedPackageName.length == 0 ? \r", "+\t\t\t\tqualifiedSourceName : \r", "+\t\t\t\tCharOperation.concat(qualifiedPackageName, qualifiedSourceName, '.'))) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8eeeef08a1d7f6ff79e96337782e1c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "582314aebaa81c30307377892044ded507af1f74", "commitAfterChange": "c0ecc47cac9e40a73cc3ed5a5be93bbace7cb891", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "diff": ["+\t */", "+\t\tchar[] genericTypeKey = this.genericType.computeUniqueKey(false/*without access flags*/);", "+\t\tchar[] wildCardKey;", "-                return WILDCARD_STAR;", "+                wildCardKey = WILDCARD_STAR;", "+                break;", "-                return CharOperation.concat(WILDCARD_PLUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+                wildCardKey = CharOperation.concat(WILDCARD_PLUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+                break;", "-\t\t\t    return CharOperation.concat(WILDCARD_MINUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+\t\t\t    wildCardKey = CharOperation.concat(WILDCARD_MINUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+\t\t\t\tbreak;", "+        return CharOperation.concat(genericTypeKey, wildCardKey);"]}], "num": 9269}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0291b295d93a03240b62e885c2699bf3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9be4142a40d7fcc4ed3bd2ed4245f24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "1dc6df2cba1e3f21897002448cbe5ca7ad21d269", "commitAfterChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tboolean shouldInsertInScope = true;", "-\t\t\t\tshouldInsertInScope = false;", "-\t\tif (shouldInsertInScope) {", "-\t\t\tif ((modifiers & ClassFileConstants.AccFinal)!= 0 && this.initialization == null) {", "-\t\t\t\tmodifiers |= ExtraCompilerModifiers.AccBlankFinal;", "-\t\t\t}", "-\t\t\tthis.binding = new LocalVariableBinding(this, variableType, modifiers, false);", "-\t\t\tscope.addLocalVariable(binding);", "-\t\t\tthis.binding.setConstant(Constant.NotAConstant);", "-\t\t\t// allow to recursivelly target the binding....", "-\t\t\t// the correct constant is harmed if correctly computed at the end of this method", "+\t\tif ((modifiers & ClassFileConstants.AccFinal)!= 0 && this.initialization == null) {", "+\t\t\tmodifiers |= ExtraCompilerModifiers.AccBlankFinal;", "+\t\tthis.binding = new LocalVariableBinding(this, variableType, modifiers, false);", "+\t\tscope.addLocalVariable(binding);", "+\t\tthis.binding.setConstant(Constant.NotAConstant);", "+\t\t// allow to recursivelly target the binding....", "+\t\t// the correct constant is harmed if correctly computed at the end of this method", "-\t\t\tif (binding != null) {", "-\t\t\t\t// check for assignment with no effect", "-\t\t\t\tif (this.binding == Assignment.getDirectBinding(this.initialization)) {", "-\t\t\t\t\tscope.problemReporter().assignmentHasNoEffect(this, this.name);", "-\t\t\t\t}", "-\t\t\t\t// change the constant in the binding when it is final", "-\t\t\t\t// (the optimization of the constant propagation will be done later on)", "-\t\t\t\t// cast from constant actual type to variable type", "-\t\t\t\tbinding.setConstant(", "-\t\t\t\t\tbinding.isFinal()", "-\t\t\t\t\t\t? initialization.constant.castTo((variableType.id << 4) + initialization.constant.typeID())", "-\t\t\t\t\t\t: Constant.NotAConstant);", "+\t\t\t// check for assignment with no effect", "+\t\t\tif (this.binding == Assignment.getDirectBinding(this.initialization)) {", "+\t\t\t\tscope.problemReporter().assignmentHasNoEffect(this, this.name);", "+\t\t\t// change the constant in the binding when it is final", "+\t\t\t// (the optimization of the constant propagation will be done later on)", "+\t\t\t// cast from constant actual type to variable type", "+\t\t\tbinding.setConstant(", "+\t\t\t\tbinding.isFinal()", "+\t\t\t\t\t? initialization.constant.castTo((variableType.id << 4) + initialization.constant.typeID())", "+\t\t\t\t\t: Constant.NotAConstant);", "-\t\tif (this.binding != null)", "-\t\t\tresolveAnnotations(scope, this.annotations, this.binding);", "+\t\tresolveAnnotations(scope, this.annotations, this.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c895fb7e4a6e499577ab0b0cc96390a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "ce9c3dc3780579b9d7ca1bf9f8f7982e5e565824", "commitAfterChange": "313b53cfbdcba61e6d447a2d1253d1393322e31e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tTypeBinding tb = type.resolveType(scope);", "+\t\tTypeBinding typeBinding = type.resolveType(scope);", "-\t\tif (tb != null) {", "-\t\t\tif (tb == VoidBinding) {", "+\t\tif (typeBinding != null) {", "+\t\t\tif (typeBinding == VoidBinding) {", "-\t\t\tif (tb.isArrayType() && ((ArrayBinding) tb).leafComponentType == VoidBinding) {", "+\t\t\tif (typeBinding.isArrayType() && ((ArrayBinding) typeBinding).leafComponentType == VoidBinding) {", "-\t\t\tbinding = new LocalVariableBinding(this, tb, modifiers, false);", "+\t\t\tbinding = new LocalVariableBinding(this, typeBinding, modifiers, false);", "-\t\tif (tb == null) {", "+\t\tif (typeBinding == null) {", "-\t\t\t\tTypeBinding initTb = initialization.resolveTypeExpecting(scope, tb);", "-\t\t\t\tif (initTb != null) {", "-\t\t\t\t\t((ArrayInitializer) initialization).binding = (ArrayBinding) initTb;", "-\t\t\t\t\tinitialization.implicitWidening(tb, initTb);", "+\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, typeBinding);", "+\t\t\t\tif (initializationType != null) {", "+\t\t\t\t\t((ArrayInitializer) initialization).binding = (ArrayBinding) initializationType;", "+\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "-\t\t\t\tTypeBinding initTb = initialization.resolveType(scope);", "-\t\t\t\tif (initTb != null) {", "-\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initTb, tb)", "-\t\t\t\t\t\t|| (tb.isBaseType() && BaseTypeBinding.isWidening(tb.id, initTb.id))", "-\t\t\t\t\t\t|| initTb.isCompatibleWith(tb))", "-\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);", "+\t\t\t\tTypeBinding initializationType = initialization.resolveType(scope);", "+\t\t\t\tif (initializationType != null) {", "+\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, typeBinding)", "+\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationType.id))", "+\t\t\t\t\t\t|| initializationType.isCompatibleWith(typeBinding))", "+\t\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initTb, tb, this);", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, typeBinding, this);", "-\t\t\t\t\t\t? initialization.constant.castTo((tb.id << 4) + initialization.constant.typeID())", "+\t\t\t\t\t\t? initialization.constant.castTo((typeBinding.id << 4) + initialization.constant.typeID())"]}], "num": 4157}
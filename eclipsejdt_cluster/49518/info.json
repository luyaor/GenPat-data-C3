{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73d8196b19eea70b0e1a9eed095069ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "558a1225675dc6b3de13c98bcd7e29b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= UnreachableCode;", "-\t\t\t\t\tthis.warningThreshold &= ~UnreachableCode;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnreachableCode;", "-\t\t\t\t\tthis.warningThreshold |= UnreachableCode;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnreachableCode;", "-\t\t\t\t\tthis.warningThreshold &= ~UnreachableCode;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(UnreachableCode, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= ImportProblem;", "-\t\t\t\t\tthis.warningThreshold &= ~ImportProblem;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ImportProblem;", "-\t\t\t\t\tthis.warningThreshold |= ImportProblem;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ImportProblem;", "-\t\t\t\t\tthis.warningThreshold &= ~ImportProblem;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(ImportProblem, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= MethodWithConstructorName;", "-\t\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;", "-\t\t\t\t\tthis.warningThreshold |= MethodWithConstructorName;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;", "-\t\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(MethodWithConstructorName, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= OverriddenPackageDefaultMethod;", "-\t\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;", "-\t\t\t\t\tthis.warningThreshold |= OverriddenPackageDefaultMethod;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;", "-\t\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(OverriddenPackageDefaultMethod, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= UsingDeprecatedAPI;", "-\t\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;", "-\t\t\t\t\tthis.warningThreshold |= UsingDeprecatedAPI;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;", "-\t\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(UsingDeprecatedAPI, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= MaskedCatchBlock;", "-\t\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;", "-\t\t\t\t\tthis.warningThreshold |= MaskedCatchBlock;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;", "-\t\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(MaskedCatchBlock, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= UnusedLocalVariable;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;", "-\t\t\t\t\tthis.warningThreshold |= UnusedLocalVariable;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(UnusedLocalVariable, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= NoImplicitStringConversion;", "-\t\t\t\t\tthis.warningThreshold &= ~NoImplicitStringConversion;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~NoImplicitStringConversion;", "-\t\t\t\t\tthis.warningThreshold |= NoImplicitStringConversion;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~NoImplicitStringConversion;", "-\t\t\t\t\tthis.warningThreshold &= ~NoImplicitStringConversion;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(NoImplicitStringConversion, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= UnusedArgument;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedArgument;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedArgument;", "-\t\t\t\t\tthis.warningThreshold |= UnusedArgument;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedArgument;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedArgument;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(UnusedArgument, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= UnusedImport;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedImport;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedImport;", "-\t\t\t\t\tthis.warningThreshold |= UnusedImport;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedImport;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedImport;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(UnusedImport, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= AccessEmulation;", "-\t\t\t\t\tthis.warningThreshold &= ~AccessEmulation;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~AccessEmulation;", "-\t\t\t\t\tthis.warningThreshold |= AccessEmulation;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~AccessEmulation;", "-\t\t\t\t\tthis.warningThreshold &= ~AccessEmulation;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(AccessEmulation, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= LocalVariableHiding;", "-\t\t\t\t\tthis.warningThreshold &= ~LocalVariableHiding;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~LocalVariableHiding;", "-\t\t\t\t\tthis.warningThreshold |= LocalVariableHiding;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~LocalVariableHiding;", "-\t\t\t\t\tthis.warningThreshold &= ~LocalVariableHiding;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(LocalVariableHiding, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= FieldHiding;", "-\t\t\t\t\tthis.warningThreshold &= ~FieldHiding;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~FieldHiding;", "-\t\t\t\t\tthis.warningThreshold |= FieldHiding;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~FieldHiding;", "-\t\t\t\t\tthis.warningThreshold &= ~FieldHiding;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(FieldHiding, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= AccidentalBooleanAssign;", "-\t\t\t\t\tthis.warningThreshold &= ~AccidentalBooleanAssign;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~AccidentalBooleanAssign;", "-\t\t\t\t\tthis.warningThreshold |= AccidentalBooleanAssign;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~AccidentalBooleanAssign;", "-\t\t\t\t\tthis.warningThreshold &= ~AccidentalBooleanAssign;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(AccidentalBooleanAssign, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= SuperfluousSemicolon;", "-\t\t\t\t\tthis.warningThreshold &= ~SuperfluousSemicolon;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~SuperfluousSemicolon;", "-\t\t\t\t\tthis.warningThreshold |= SuperfluousSemicolon;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~SuperfluousSemicolon;", "-\t\t\t\t\tthis.warningThreshold &= ~SuperfluousSemicolon;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(SuperfluousSemicolon, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= NonExternalizedString;", "-\t\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;", "-\t\t\t\t\tthis.warningThreshold |= NonExternalizedString;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;", "-\t\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(NonExternalizedString, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= AssertUsedAsAnIdentifier;", "-\t\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;", "-\t\t\t\t\tthis.warningThreshold |= AssertUsedAsAnIdentifier;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;", "-\t\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(AssertUsedAsAnIdentifier, optionValue);", "-\t\t\tif(optionID.equals(OPTION_ReportStaticAccessReceiver)){", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= StaticAccessReceiver;", "-\t\t\t\t\tthis.warningThreshold &= ~StaticAccessReceiver;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~StaticAccessReceiver;", "-\t\t\t\t\tthis.warningThreshold |= StaticAccessReceiver;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~StaticAccessReceiver;", "-\t\t\t\t\tthis.warningThreshold &= ~StaticAccessReceiver;", "-\t\t\t\t}", "+\t\t\tif(optionID.equals(OPTION_ReportNonStaticAccessToStatic)){", "+\t\t\t\tupdateSeverity(NonStaticAccessToStatic, optionValue);", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report indirect static access", "+\t\t\tif(optionID.equals(OPTION_ReportIndirectStaticAccess)){", "+\t\t\t\tupdateSeverity(IndirectStaticAccess, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= IncompatibleNonInheritedInterfaceMethod;", "-\t\t\t\t\tthis.warningThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "-\t\t\t\t\tthis.warningThreshold |= IncompatibleNonInheritedInterfaceMethod;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "-\t\t\t\t\tthis.warningThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(IncompatibleNonInheritedInterfaceMethod, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= UnusedPrivateMember;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedPrivateMember;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedPrivateMember;", "-\t\t\t\t\tthis.warningThreshold |= UnusedPrivateMember;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~UnusedPrivateMember;", "-\t\t\t\t\tthis.warningThreshold &= ~UnusedPrivateMember;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(UnusedPrivateMember, optionValue);", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= NoEffectAssignment;", "-\t\t\t\t\tthis.warningThreshold &= ~NoEffectAssignment;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~NoEffectAssignment;", "-\t\t\t\t\tthis.warningThreshold |= NoEffectAssignment;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~NoEffectAssignment;", "-\t\t\t\t\tthis.warningThreshold &= ~NoEffectAssignment;", "-\t\t\t\t}", "+\t\t\t\tupdateSeverity(NoEffectAssignment, optionValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb9fbb140c31e027b4abda8dec08dee0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "b87572492983319fd5b985b86ee02375e95b060e", "commitAfterChange": "a11817dc899a9de9f005482307f896959bfddcb6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t     public void setEclipseDefaultSettings()", "signatureAfterChange": " \t     public void setEclipseDefaultSettings()", "diff": ["-        this.alignment_for_arguments_in_allocation_expression = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_enum_constant = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_explicit_constructor_call = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_qualified_allocation_expression = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_binary_expression = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_compact_if = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_conditional_expression = Alignment.M_NEXT_PER_LINE_SPLIT;", "-        this.alignment_for_expressions_in_array_initializer = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_multiple_fields = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_parameters_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_parameters_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_selector_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_superclass_in_type_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_superinterfaces_in_enum_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_superinterfaces_in_type_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_throws_clause_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_throws_clause_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.align_type_members_on_columns = false;", "-        this.brace_position_for_annotation_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_anonymous_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_array_initializer = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_block = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_block_in_case = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_constructor_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_enum_constant = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_enum_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_method_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_switch = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.comment_clear_blank_lines = true;", "-        this.comment_format = true;", "-        this.comment_format_header = false;", "-        this.comment_format_html = true;", "-        this.comment_format_source = true;", "-        this.comment_indent_parameter_description = true;", "-        this.comment_indent_root_tags = true;", "-        this.comment_insert_empty_line_before_root_tags = true;", "-        this.comment_insert_new_line_for_parameter = true;", "-        this.comment_line_length = 80;", "-        this.continuation_indentation = 2;", "-        this.continuation_indentation_for_array_initializer = 2;", "-        this.blank_lines_after_imports = 1;", "-        this.blank_lines_after_package = 1;", "-        this.blank_lines_before_field = 1;", "-        this.blank_lines_before_first_class_body_declaration = 0;", "-        this.blank_lines_before_imports = 1;", "-        this.blank_lines_before_member_type = 1;", "-        this.blank_lines_before_method = 1;", "-        this.blank_lines_before_new_chunk = 1;", "-        this.blank_lines_before_package = 0;", "-        this.blank_lines_between_type_declarations = 1;", "-        this.blank_lines_at_beginning_of_method_body = 0;", "-        this.indent_statements_compare_to_block = true;", "-        this.indent_statements_compare_to_body = true;", "-        this.indent_body_declarations_compare_to_enum_constant_header = true;", "-        this.indent_body_declarations_compare_to_enum_declaration_header = true;", "-        this.indent_body_declarations_compare_to_type_header = true;", "-        this.indent_breaks_compare_to_cases = true;", "-        this.indent_switchstatements_compare_to_cases = true;", "-        this.indent_switchstatements_compare_to_switch = false;", "-        this.indentation_size = 4;", "-        this.insert_new_line_after_annotation = true;", "-        this.insert_new_line_after_opening_brace_in_array_initializer = false;", "-        this.insert_new_line_at_end_of_file_if_missing = false;", "-        this.insert_new_line_before_catch_in_try_statement = false;", "-        this.insert_new_line_before_closing_brace_in_array_initializer = false;", "-        this.insert_new_line_before_else_in_if_statement = false;", "-        this.insert_new_line_before_finally_in_try_statement = false;", "-        this.insert_new_line_before_while_in_do_statement = false;", "-        this.insert_new_line_in_empty_anonymous_type_declaration = true;", "-        this.insert_new_line_in_empty_block = true;", "-        this.insert_new_line_in_empty_enum_constant = true;", "-        this.insert_new_line_in_empty_enum_declaration = true;", "-        this.insert_new_line_in_empty_method_body = true;", "-        this.insert_new_line_in_empty_type_declaration = true;", "-        this.insert_space_after_and_in_type_parameter = true;", "-        this.insert_space_after_assignment_operator = true;", "-        this.insert_space_after_at_in_annotation = false;", "-        this.insert_space_after_at_in_annotation_type_declaration = false;", "-        this.insert_space_after_binary_operator = true;", "-        this.insert_space_after_closing_angle_bracket_in_type_arguments = true;", "-        this.insert_space_after_closing_angle_bracket_in_type_parameters = true;", "-        this.insert_space_after_closing_paren_in_cast = true;", "-        this.insert_space_after_closing_brace_in_block = true;", "-        this.insert_space_after_colon_in_assert = true;", "-        this.insert_space_after_colon_in_case = true;", "-        this.insert_space_after_colon_in_conditional = true;", "-        this.insert_space_after_colon_in_for = true;", "-        this.insert_space_after_colon_in_labeled_statement = true;", "-        this.insert_space_after_comma_in_allocation_expression = true;", "-        this.insert_space_after_comma_in_annotation = true;", "-        this.insert_space_after_comma_in_array_initializer = true;", "-        this.insert_space_after_comma_in_constructor_declaration_parameters = true;", "-        this.insert_space_after_comma_in_constructor_declaration_throws = true;", "-        this.insert_space_after_comma_in_enum_constant_arguments = true;", "-        this.insert_space_after_comma_in_enum_declarations = true;", "-        this.insert_space_after_comma_in_explicit_constructor_call_arguments = true;", "-        this.insert_space_after_comma_in_for_increments = true;", "-        this.insert_space_after_comma_in_for_inits = true;", "-        this.insert_space_after_comma_in_method_invocation_arguments = true;", "-        this.insert_space_after_comma_in_method_declaration_parameters = true;", "-        this.insert_space_after_comma_in_method_declaration_throws = true;", "-        this.insert_space_after_comma_in_multiple_field_declarations = true;", "-        this.insert_space_after_comma_in_multiple_local_declarations = true;", "-        this.insert_space_after_comma_in_parameterized_type_reference = true;", "-        this.insert_space_after_comma_in_superinterfaces = true;", "-        this.insert_space_after_comma_in_type_arguments = true;", "-        this.insert_space_after_comma_in_type_parameters = true;", "-        this.insert_space_after_ellipsis = true;", "-        this.insert_space_after_opening_angle_bracket_in_parameterized_type_reference = false;", "-        this.insert_space_after_opening_angle_bracket_in_type_arguments = false;", "-        this.insert_space_after_opening_angle_bracket_in_type_parameters = false;", "-        this.insert_space_after_opening_bracket_in_array_allocation_expression = false;", "-        this.insert_space_after_opening_bracket_in_array_reference = false;", "-        this.insert_space_after_opening_brace_in_array_initializer = true;", "-        this.insert_space_after_opening_paren_in_annotation = false;", "-        this.insert_space_after_opening_paren_in_cast = false;", "-        this.insert_space_after_opening_paren_in_catch = false;", "-        this.insert_space_after_opening_paren_in_constructor_declaration = false;", "-        this.insert_space_after_opening_paren_in_enum_constant = false;", "-        this.insert_space_after_opening_paren_in_for = false;", "-        this.insert_space_after_opening_paren_in_if = false;", "-        this.insert_space_after_opening_paren_in_method_declaration = false;", "-        this.insert_space_after_opening_paren_in_method_invocation = false;", "-        this.insert_space_after_opening_paren_in_parenthesized_expression = false;", "-        this.insert_space_after_opening_paren_in_switch = false;", "-        this.insert_space_after_opening_paren_in_synchronized = false;", "-        this.insert_space_after_opening_paren_in_while = false;", "-        this.insert_space_after_postfix_operator = false;", "-        this.insert_space_after_prefix_operator = false;", "-        this.insert_space_after_question_in_conditional = true;", "-        this.insert_space_after_question_in_wilcard = false;", "-        this.insert_space_after_semicolon_in_for = true;", "-        this.insert_space_after_unary_operator = false;", "-        this.insert_space_before_and_in_type_parameter = true;", "-        this.insert_space_before_at_in_annotation_type_declaration = true;", "-        this.insert_space_before_assignment_operator = true;", "-        this.insert_space_before_binary_operator = true;", "-        this.insert_space_before_closing_angle_bracket_in_parameterized_type_reference = false;", "-        this.insert_space_before_closing_angle_bracket_in_type_arguments = false;", "-        this.insert_space_before_closing_angle_bracket_in_type_parameters = false;", "-        this.insert_space_before_closing_brace_in_array_initializer = true;", "-        this.insert_space_before_closing_bracket_in_array_allocation_expression = false;", "-        this.insert_space_before_closing_bracket_in_array_reference = false;", "-        this.insert_space_before_closing_paren_in_annotation = false;", "-        this.insert_space_before_closing_paren_in_cast = false;", "-        this.insert_space_before_closing_paren_in_catch = false;", "-        this.insert_space_before_closing_paren_in_constructor_declaration = false;", "-        this.insert_space_before_closing_paren_in_enum_constant = false;", "-        this.insert_space_before_closing_paren_in_for = false;", "-        this.insert_space_before_closing_paren_in_if = false;", "-        this.insert_space_before_closing_paren_in_method_declaration = false;", "-        this.insert_space_before_closing_paren_in_method_invocation = false;", "-        this.insert_space_before_closing_paren_in_parenthesized_expression = false;", "-        this.insert_space_before_closing_paren_in_switch = false;", "-        this.insert_space_before_closing_paren_in_synchronized = false;", "-        this.insert_space_before_closing_paren_in_while = false;", "-        this.insert_space_before_colon_in_assert = true;", "-        this.insert_space_before_colon_in_case = false;", "-        this.insert_space_before_colon_in_conditional = true;", "-        this.insert_space_before_colon_in_default = false;", "-        this.insert_space_before_colon_in_for = true;", "-        this.insert_space_before_colon_in_labeled_statement = false;", "-        this.insert_space_before_comma_in_allocation_expression = false;", "-        this.insert_space_before_comma_in_array_initializer = false;", "-        this.insert_space_before_comma_in_constructor_declaration_parameters = false;", "-        this.insert_space_before_comma_in_constructor_declaration_throws = false;", "-        this.insert_space_before_comma_in_enum_constant_arguments = false;", "-        this.insert_space_before_comma_in_enum_declarations = false;", "-        this.insert_space_before_comma_in_explicit_constructor_call_arguments = false;", "-        this.insert_space_before_comma_in_for_increments = false;", "-        this.insert_space_before_comma_in_for_inits = false;", "-        this.insert_space_before_comma_in_method_invocation_arguments = false;", "-        this.insert_space_before_comma_in_method_declaration_parameters = false;", "-        this.insert_space_before_comma_in_method_declaration_throws = false;", "-        this.insert_space_before_comma_in_multiple_field_declarations = false;", "-        this.insert_space_before_comma_in_multiple_local_declarations = false;", "-        this.insert_space_before_comma_in_parameterized_type_reference = false;", "-        this.insert_space_before_comma_in_superinterfaces = false;", "-        this.insert_space_before_comma_in_type_arguments = false;", "-        this.insert_space_before_comma_in_type_parameters = false;", "-        this.insert_space_before_ellipsis = false;", "-        this.insert_space_before_opening_angle_bracket_in_parameterized_type_reference = false;", "-        this.insert_space_before_opening_angle_bracket_in_type_arguments = false;", "-        this.insert_space_before_opening_angle_bracket_in_type_parameters = false;", "-        this.insert_space_before_opening_brace_in_annotation_type_declaration = true;", "-        this.insert_space_before_opening_brace_in_anonymous_type_declaration = true;", "-        this.insert_space_before_opening_brace_in_array_initializer = true;", "-        this.insert_space_before_opening_brace_in_block = true;", "-        this.insert_space_before_opening_brace_in_constructor_declaration = true;", "-        this.insert_space_before_opening_brace_in_enum_constant = true;", "-        this.insert_space_before_opening_brace_in_enum_declaration = true;", "-        this.insert_space_before_opening_brace_in_method_declaration = true;", "-        this.insert_space_before_opening_brace_in_switch = true;", "-        this.insert_space_before_opening_brace_in_type_declaration = true;", "-        this.insert_space_before_opening_bracket_in_array_allocation_expression = false;", "-        this.insert_space_before_opening_bracket_in_array_reference = false;", "-        this.insert_space_before_opening_bracket_in_array_type_reference = false;", "-        this.insert_space_before_opening_paren_in_annotation = false;", "-        this.insert_space_before_opening_paren_in_annotation_type_member_declaration = false;", "-        this.insert_space_before_opening_paren_in_catch = true;", "-        this.insert_space_before_opening_paren_in_constructor_declaration = false;", "-        this.insert_space_before_opening_paren_in_enum_constant = false;", "-        this.insert_space_before_opening_paren_in_for = true;", "-        this.insert_space_before_opening_paren_in_if = true;", "-        this.insert_space_before_opening_paren_in_method_invocation = false;", "-        this.insert_space_before_opening_paren_in_method_declaration = false;", "-        this.insert_space_before_opening_paren_in_switch = true;", "-        this.insert_space_before_opening_paren_in_synchronized = true;", "-        this.insert_space_before_opening_paren_in_parenthesized_expression = false;", "-        this.insert_space_before_opening_paren_in_while = true;", "-        this.insert_space_before_postfix_operator = false;", "-        this.insert_space_before_prefix_operator = false;", "-        this.insert_space_before_question_in_conditional = true;", "-        this.insert_space_before_question_in_wilcard = false;", "-        this.insert_space_before_semicolon = false;", "-        this.insert_space_before_semicolon_in_for = false;", "-        this.insert_space_before_unary_operator = false;", "-        this.insert_space_between_brackets_in_array_type_reference = false;", "-        this.insert_space_between_empty_braces_in_array_initializer = false;", "-        this.insert_space_between_empty_brackets_in_array_allocation_expression = false;", "-        this.insert_space_between_empty_parens_in_annotation_type_member_declaration = false;", "-        this.insert_space_between_empty_parens_in_constructor_declaration = false;", "-        this.insert_space_between_empty_parens_in_enum_constant = false;", "-        this.insert_space_between_empty_parens_in_method_declaration = false;", "-        this.insert_space_between_empty_parens_in_method_invocation = false;", "-        this.compact_else_if = true;", "-        this.keep_guardian_clause_on_one_line = false;", "-        this.keep_else_statement_on_same_line = false;", "-        this.keep_empty_array_initializer_on_one_line = false;", "-        this.keep_simple_if_on_one_line = false;", "-        this.keep_then_statement_on_same_line = false;", "-        this.number_of_empty_lines_to_preserve = 1;", "-        this.put_empty_statement_on_new_line = true;", "-        this.tab_size = 4;", "-        this.page_width = 80;", "+        setJavaConventionsSettings();", "+        this.tab_size = 4;"]}], "num": 49518}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad4f576fa447bd8751aef3aff5d19f18", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57566d1a88414219a5821e9b6387b45a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateSubRoutineInvocation( \t\t\tBlockScope currentScope, \t\t\tCodeStream codeStream)", "signatureAfterChange": " \tpublic void generateSubRoutineInvocation( \t\t\tBlockScope currentScope, \t\t\tCodeStream codeStream)", "diff": ["-\t\tif (this.isSubRoutineEscaping) {", "+\t\tif (isSubRoutineEscaping()) {", "-\t\t\t\tthis.exitAnyExceptionHandler();\t\t\t\t", "+\t\t\t\tthis.exitAnyExceptionHandler();", "+\t\t\t\t// inside try block, ensure to deactivate all catch block exception handlers while inlining finally block", "+\t\t\t\tfor (int i = 0, length = this.enclosingExceptionLabels == null ? 0 : this.enclosingExceptionLabels.length; i < length; i++) {", "+\t\t\t\t\tthis.enclosingExceptionLabels[i].placeEnd();", "+\t\t\t\t}", "+\t\t\t\t// inside try block, ensure to reactivate all catch block exception handlers after inlining finally block", "+\t\t\t\tfor (int i = 0, length = this.enclosingExceptionLabels == null ? 0 : this.enclosingExceptionLabels.length; i < length; i++) {", "+\t\t\t\t\tthis.enclosingExceptionLabels[i].placeStart();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0be744c2dd11c2d3441ce9410247d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["+\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tthis.bound.collectSubstitutes(otherWildcard.otherBounds[i], substitutes);", "+\t        \t}", "+            // check other bounds (lub scenario)", "+        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+        \t\tthis.otherBounds[i].collectSubstitutes(otherType, substitutes);", "+        \t}"]}], "num": 36316}
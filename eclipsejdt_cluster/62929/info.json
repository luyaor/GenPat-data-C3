{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a56c28dca27d580e5669634d15259d44", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2803c5650c1dcc133878976002ae6fe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "836fef68856b7e7f6b208deb388901eeda69de4b", "commitAfterChange": "79e5d72bba2066424baa4a0d68a49d71cc4f75a5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-    return this == otherType;", "+    if (this == otherType) return true;", "+    if (otherType == null) return false;", "+    if (otherType.isWildcard()) // wildcard", "+\t\treturn ((WildcardBinding) otherType).boundCheck(this);", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51676a2c124fa40a85a4814584864d62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "007f2027ff425d194812a64dbd50790ef7383015", "commitAfterChange": "f7f17008db6ff3c3f5e70873efcd612c1034949b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t    ", "-\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding()) {", "+\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding())", "-\t\t\t}", "+\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\tif (isClassScope)", "-\t\t\t\tif (((ClassScope) scope).detectCycle(currentType, this))", "-\t\t\t\t\treturn null;", "-\t\t\tTypeVariableBinding[] typeVariables = currentType.typeVariables();", "+\t\t\t\t// TODO (kent) - if ((this.bits & ASTNode.IsSuperType) != 0)", "+\t\t\t\tif (isClassScope)", "+\t\t\t\t\tif (((ClassScope) scope).detectCycle(currentType, this, argTypes))", "+\t\t\t\t\t\treturn null;", "+", "+\t\t\t    TypeVariableBinding[] typeVariables = currentType.typeVariables();", "-\t\t    } else if (currentType.isGenericType()) { // check raw type", "-\t\t\t        qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "-\t\t\t} else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "-\t\t\t\t    qualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "+\t\t    } else {", "+   \t\t\t    if ((this.bits & ASTNode.IsSuperType) != 0)", "+   \t\t\t    \tif (((ClassScope) scope).detectCycle(currentType, this, null))", "+   \t\t\t    \t\treturn null;", "+   \t\t\t    if (currentType.isGenericType()) { // check raw type", "+   \t\t\t    \tqualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "+   \t\t\t    } else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "+   \t\t\t    \tqualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "+   \t\t\t    }"]}], "num": 62929}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17f676849afccc84a138a19e6cda7755", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f4031a81cae7d047ff9d89d41336f62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "signatureAfterChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "diff": ["-\t\t\t\texpression.checkAgainstFinalTargetType(targetType, this.scope);", "+\t\t\t\tif (this.innerPolies.contains(expression)) // may get here for ReferenceExpressions ...", "+\t\t\t\t\texpression.setExpectedType(targetType); // ... prepare for final inference via rebindInnerPolies", "+\t\t\t\telse", "+\t\t\t\t\texpression.checkAgainstFinalTargetType(targetType, this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55956a137c367d74be258de4646181eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic void checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": "  \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-", "-\tpublic void checkAgainstFinalTargetType(TypeBinding targetType) {", "-\t\tif (this.expectedIsFinalTargetType)", "-\t\t\treturn; // already checked", "-\t\tthis.expectedIsFinalTargetType = true;", "-\t\tresolveTypeExpecting(this.enclosingScope, targetType);", "+\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType) {", "+\t\treturn resolveTypeExpecting(this.enclosingScope, targetType);"]}], "num": 66250}
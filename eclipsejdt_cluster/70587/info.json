{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e899878d522cc9135f1d13128181a8c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0788b5bd867ed60b9d89c924019c77ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "55ff17ec6653a434427e713aef1451bdb8c9f671", "commitAfterChange": "d20637ea2fd7b4c54c0555e8e8ade3dcbe515e38", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected void deleteProject(String projectName) throws CoreException", "signatureAfterChange": " protected void deleteProject(String projectName) throws CoreException", "diff": ["-}", "-protected void deleteProject(String projectName) throws CoreException {", "-\tIProject project = this.getProject(projectName);", "-\tCoreException lastException = null;", "-\ttry {", "-\t\tif (!project.isOpen()) { // force opening so that project can be deleted without logging (see bug 23629)", "-\t\t\tproject.open(null);", "-\t\t}", "-\t\tproject.delete(true, null);", "-\t} catch (CoreException e) {", "-\t\tlastException = e;", "-\t}", "-\twhile (project.isAccessible() && --retryCount >= 0) {", "-\t\ttry {", "-\t\t\tproject.delete(true, null);", "-\t\t} catch (CoreException e) {", "-\t\t\tlastException = e;", "-\t\t}", "-\tif (!project.isAccessible()) return;", "-\tSystem.err.println(\"Failed to delete project \" + projectName);", "-\tif (lastException != null) {", "-\t\tthrow lastException;", "+}", "+protected void deleteProject(String projectName) throws CoreException {", "+\tIProject project = this.getProject(projectName);", "+\tif (project.exists() && !project.isOpen()) { // force opening so that project can be deleted without logging (see bug 23629)", "+\t\tproject.open(null);", "+\tdeleteResource(project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7db701f3717d1976e7cefc41b4fb6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "commitAfterChange": "b7f468690a70977c68b74d1aeee81bdba359d238", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void deleteFile(File file)", "signatureAfterChange": " \tpublic void deleteFile(File file)", "diff": ["-\t\tfile = file.getAbsoluteFile();", "-\t\tif (!file.exists())", "-\t\t\treturn;", "-\t\tif (file.isDirectory()) {", "-\t\t\tString[] files = file.list();", "-\t\t\t//file.list() can return null", "-\t\t\tif (files != null) {", "-\t\t\t\tfor (int i = 0; i < files.length; ++i) {", "-\t\t\t\t\tdeleteFile(new File(file, files[i]));", "-\t\t\t\t}", "+\t\tint retryCount = 0;", "+\t\twhile (++retryCount <= 60) { // wait 1 minute at most", "+\t\t\tif (org.eclipse.jdt.core.tests.util.Util.delete(file)) {", "+\t\t\t\tbreak;", "-\t\tboolean success = file.delete();", "-\t\tint retryCount = 60; // wait 1 minute at most", "-\t\twhile (!success && --retryCount >= 0) {", "-\t\t\ttry {", "-\t\t\t\tThread.sleep(1000);", "-\t\t\t} catch (InterruptedException e) {", "-\t\t\t}", "-\t\t\tsuccess = file.delete();", "-\t\t}", "-\t\tif (success) return;", "-\t\tSystem.err.println(\"Failed to delete \" + file.getPath());"]}], "num": 70587}
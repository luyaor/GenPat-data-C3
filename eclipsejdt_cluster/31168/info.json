{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cbe14ee06a899475365beb13e7ad0c7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a3375588ee7c03b9183d9df7b909d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "3a1406d5ae7aa1b9a7051c35339eb7a6fe5990c7", "commitAfterChange": "9b3a87947cab397b160b1250e420f4ceac5f9d52", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler2()", "signatureAfterChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler2()", "diff": ["+\t\toptions.add(\"-1.5\");", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t\tif (!result.booleanValue()) {", "+\t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t\t\tassertTrue(\"Compilation failed \", false);", "+\t\t}", "+\t\tFile outputFile = new File(tmpFolder, \"p/X.class\");", "+\t\tassertTrue(outputFile.exists());", "+\t\tClassFileReader reader = null;", "+\t\ttry {", "+\t\t\treader = ClassFileReader.read(outputFile);", "+\t\t} catch (ClassFormatException e) {", "+\t\t\tassertTrue(\"Should not happen\", false);", "+\t\t} catch (IOException e) {", "+\t\t\tassertTrue(\"Should not happen\", false);", "+\t\t}", "+\t\tassertNotNull(\"No reader\", reader);", "+\t\tassertEquals(\"Not a 1.5 .class file\", ClassFileConstants.JDK1_5, reader.getVersion());", "- \t\t// check the classpath location", "- \t\tassertTrue(\"Has no location CLASS_OUPUT\", forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "+\t\t// check the classpath location", "+\t\tassertTrue(\"Has no location CLASS_OUPUT\", forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t\tif (!result.booleanValue()) {", "+\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t\t\tassertTrue(\"Compilation failed \", false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df57be583875a3b9aa8e2d839128f552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "9b263ca74abd4722306ade1fedc11526a5ecbfdb", "commitAfterChange": "73a5ef02b06d1735d208b5c3da074f189eab0418", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void _testCompilerOneClassWithSystemCompiler2()", "signatureAfterChange": " \tpublic void _testCompilerOneClassWithSystemCompiler2()", "diff": ["-\t\t\t\tSystem.out.println(\"Create file for input : \" + packageName + \" \" + relativeName + \" in location \" + location);", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create file for input : \" + packageName + \" \" + relativeName + \" in location \" + location);", "+\t\t\t\t}", "-\t\t\t\tSystem.out.println(\"Create java file for input : \" + className + \" in location \" + location);", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create java file for input : \" + className + \" in location \" + location);", "+\t\t\t\t}", "-\t\t\t\tSystem.out.println(\"Create .class file for \" + className + \" in location \" + location + \" with sibling \" + sibling.toUri());", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create .class file for \" + className + \" in location \" + location + \" with sibling \" + sibling.toUri());", "+\t\t\t\t}", "-\t\t\t\tSystem.out.println(javaFileForOutput.toUri());", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(javaFileForOutput.toUri());", "+\t\t\t\t}", "- \t\tCompilationTask task = systemCompiler.getTask(printWriter, manager, null, options, null, units);", "+\t\tCompilationTask task = systemCompiler.getTask(printWriter, manager, null, options, null, units);", "- \t\tSystem.out.println(\"Has location CLASS_OUPUT : \" + forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "+\t\tif (DEBUG) {", "+\t\t\tSystem.out.println(\"Has location CLASS_OUPUT : \" + forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "+\t\t}", "- \t\tdisplayLocation(manager, StandardLocation.CLASS_PATH);", "- \t\tdisplayLocation(manager, StandardLocation.PLATFORM_CLASS_PATH);", "+\t\tdisplayLocation(manager, StandardLocation.CLASS_PATH);", "+\t\tdisplayLocation(manager, StandardLocation.PLATFORM_CLASS_PATH);", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t\tif (!result.booleanValue()) {", "+\t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t\t\tassertTrue(\"Compilation failed \", false);", "+\t\t}"]}], "num": 31168}
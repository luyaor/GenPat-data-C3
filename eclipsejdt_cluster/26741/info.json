{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a9a38352b03fa7215d87d24079213c7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239d3c2eb24c75fd5bb1315a04f990f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7c822c57ef10d00c0850376434095c09c62bf945", "commitAfterChange": "97d56944c70dcb61876e816b166a34995344938d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tprivate void generateElementValue( \t\t\tExpression defaultValue, \t\t\tTypeBinding memberValuePairReturnType, \t\t\tint attributeOffset)", "signatureAfterChange": "  \tprivate void generateElementValue( \t\t\tExpression defaultValue, \t\t\tTypeBinding memberValuePairReturnType, \t\t\tint attributeOffset)", "diff": ["-\tprivate void generateElementValue(", "-\t\t\tExpression defaultValue,", "-\t\t\tTypeBinding memberValuePairReturnType,", "-\t\t\tint attributeOffset) {", "-\t\tConstant constant = defaultValue.constant;", "-\t\tTypeBinding defaultValueBinding = defaultValue.resolvedType;", "-\t\tif (constant != null && constant != Constant.NotAConstant) {", "-\t\t\tif (memberValuePairReturnType.isArrayType() && !defaultValueBinding.isArrayType()) {", "-\t\t\t\t// automatic wrapping", "-\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\tresizeContents(1);", "-\t\t\t\t}", "-\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "-\t\t\t\tcontents[contentsOffset++] = (byte) 0;", "-\t\t\t\tcontents[contentsOffset++] = (byte) 1;", "-\t\t\t}", "-\t\t\tgenerateElementValue(attributeOffset, defaultValue, constant);", "-\t\t} else {", "-\t\t\tif (defaultValueBinding != null) {", "-\t\t\t\tif (defaultValueBinding.isEnum()) {", "-\t\t\t\t\tif (contentsOffset + 5 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(5);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'e';", "-\t\t\t\t\tFieldBinding fieldBinding = null;", "-\t\t\t\t\tif (defaultValue instanceof QualifiedNameReference) {", "-\t\t\t\t\t\tQualifiedNameReference nameReference = (QualifiedNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else if (defaultValue instanceof SingleNameReference) {", "-\t\t\t\t\t\tSingleNameReference nameReference = (SingleNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (fieldBinding != null) {", "-\t\t\t\t\t\tfinal int enumConstantTypeNameIndex = constantPool.literalIndex(fieldBinding.type.signature());", "-\t\t\t\t\t\tfinal int enumConstantNameIndex = constantPool.literalIndex(fieldBinding.name);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantTypeNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantTypeNameIndex;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantNameIndex;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (defaultValueBinding.isAnnotationType()) {", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '@';", "-\t\t\t\t\tgenerateAnnotation((Annotation) defaultValue, attributeOffset);", "-\t\t\t\t} else if (defaultValueBinding.isArrayType()) {", "-\t\t\t\t\t// array type", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "-\t\t\t\t\tif (defaultValue instanceof ArrayInitializer) {", "-\t\t\t\t\t\tArrayInitializer arrayInitializer = (ArrayInitializer) defaultValue;", "-\t\t\t\t\t\tint arrayLength = arrayInitializer.expressions != null ? arrayInitializer.expressions.length : 0;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (arrayLength >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) arrayLength;", "-\t\t\t\t\t\tfor (int i = 0; i < arrayLength; i++) {", "-\t\t\t\t\t\t\tgenerateElementValue(arrayInitializer.expressions[i], attributeOffset);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class type", "-\t\t\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(3);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'c';", "-\t\t\t\t\tif (defaultValue instanceof ClassLiteralAccess) {", "-\t\t\t\t\t\tClassLiteralAccess classLiteralAccess = (ClassLiteralAccess) defaultValue;", "-\t\t\t\t\t\tfinal int classInfoIndex = constantPool.literalIndex(classLiteralAccess.targetType.signature());", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (classInfoIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) classInfoIndex;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+\tprivate void generateElementValue(", "+\t\t\tExpression defaultValue,", "+\t\t\tTypeBinding memberValuePairReturnType,", "+\t\t\tint attributeOffset) {", "+\t\tConstant constant = defaultValue.constant;", "+\t\tTypeBinding defaultValueBinding = defaultValue.resolvedType;", "+\t\tif (memberValuePairReturnType.isArrayType() && !defaultValueBinding.isArrayType()) {", "+\t\t\t// automatic wrapping", "+\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "+\t\t\t\tresizeContents(3);", "+\t\t\tcontents[contentsOffset++] = (byte) '[';", "+\t\t\tcontents[contentsOffset++] = (byte) 0;", "+\t\t\tcontents[contentsOffset++] = (byte) 1;", "+\t\t}", "+\t\tif (constant != null && constant != Constant.NotAConstant) {", "+\t\t\tgenerateElementValue(attributeOffset, defaultValue, constant);", "+\t\t} else {", "+\t\t\tgenerateElementValueForNonConstantExpression(defaultValue, attributeOffset, defaultValueBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9da0f98d3f76cef804d24f9c4d0259ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7c822c57ef10d00c0850376434095c09c62bf945", "commitAfterChange": "97d56944c70dcb61876e816b166a34995344938d", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate void generateElementValue(Expression defaultValue, int attributeOffset)", "signatureAfterChange": " \tprivate void generateElementValue(Expression defaultValue, int attributeOffset)", "diff": ["-\t\t\tif (defaultValueBinding != null) {", "-\t\t\t\tif (defaultValueBinding.isEnum()) {", "-\t\t\t\t\tif (contentsOffset + 5 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(5);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'e';", "-\t\t\t\t\tFieldBinding fieldBinding = null;", "-\t\t\t\t\tif (defaultValue instanceof QualifiedNameReference) {", "-\t\t\t\t\t\tQualifiedNameReference nameReference = (QualifiedNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else if (defaultValue instanceof SingleNameReference) {", "-\t\t\t\t\t\tSingleNameReference nameReference = (SingleNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (fieldBinding != null) {", "-\t\t\t\t\t\tfinal int enumConstantTypeNameIndex = constantPool.literalIndex(fieldBinding.type.signature());", "-\t\t\t\t\t\tfinal int enumConstantNameIndex = constantPool.literalIndex(fieldBinding.name);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantTypeNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantTypeNameIndex;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantNameIndex;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (defaultValueBinding.isAnnotationType()) {", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '@';", "-\t\t\t\t\tgenerateAnnotation((Annotation) defaultValue, attributeOffset);", "-\t\t\t\t} else if (defaultValueBinding.isArrayType()) {", "-\t\t\t\t\t// array type", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "-\t\t\t\t\tif (defaultValue instanceof ArrayInitializer) {", "-\t\t\t\t\t\tArrayInitializer arrayInitializer = (ArrayInitializer) defaultValue;", "-\t\t\t\t\t\tint arrayLength = arrayInitializer.expressions != null ? arrayInitializer.expressions.length : 0;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (arrayLength >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) arrayLength;", "-\t\t\t\t\t\tfor (int i = 0; i < arrayLength; i++) {", "-\t\t\t\t\t\t\tgenerateElementValue(arrayInitializer.expressions[i], attributeOffset);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class type", "-\t\t\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(3);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'c';", "-\t\t\t\t\tif (defaultValue instanceof ClassLiteralAccess) {", "-\t\t\t\t\t\tClassLiteralAccess classLiteralAccess = (ClassLiteralAccess) defaultValue;", "-\t\t\t\t\t\tfinal int classInfoIndex = constantPool.literalIndex(classLiteralAccess.targetType.signature());", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (classInfoIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) classInfoIndex;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tcontentsOffset = attributeOffset;", "+\t\t\tgenerateElementValueForNonConstantExpression(defaultValue, attributeOffset, defaultValueBinding);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d789679c1d2d959887ca14887713a07e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "de65819236a978eabe6f11a104e36a24db789ea9", "commitAfterChange": "1b976600c434b11b3265b882431a4b1ae03c69f7", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate void generateElementValue(Expression defaultValue, int attributeOffset)", "signatureAfterChange": "  \tprivate void generateElementValue( \t\t\tExpression defaultValue, \t\t\tTypeBinding memberValuePairReturnType, \t\t\tint attributeOffset)", "diff": ["+", "+\tprivate void generateElementValue(", "+\t\t\tExpression defaultValue,", "+\t\t\tTypeBinding memberValuePairReturnType,", "+\t\t\tint attributeOffset) {", "+\t\tConstant constant = defaultValue.constant;", "+\t\tTypeBinding defaultValueBinding = defaultValue.resolvedType;", "+\t\tif (constant != null && constant != Constant.NotAConstant) {", "+\t\t\tif (memberValuePairReturnType.isArrayType() && !defaultValueBinding.isArrayType()) {", "+\t\t\t\t// automatic wrapping", "+\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "+\t\t\t\t\tresizeContents(1);", "+\t\t\t\t}", "+\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "+\t\t\t\tcontents[contentsOffset++] = (byte) 0;", "+\t\t\t\tcontents[contentsOffset++] = (byte) 1;", "+\t\t\t}", "+\t\t\tgenerateElementValue(attributeOffset, defaultValue, constant);", "+\t\t} else {", "+\t\t\tif (defaultValueBinding != null) {", "+\t\t\t\tif (defaultValueBinding.isEnum()) {", "+\t\t\t\t\tif (contentsOffset + 5 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(5);", "+\t\t\t\t\t}", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) 'e';", "+\t\t\t\t\tFieldBinding fieldBinding = null;", "+\t\t\t\t\tif (defaultValue instanceof QualifiedNameReference) {", "+\t\t\t\t\t\tQualifiedNameReference nameReference = (QualifiedNameReference) defaultValue;", "+\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "+\t\t\t\t\t} else if (defaultValue instanceof SingleNameReference) {", "+\t\t\t\t\t\tSingleNameReference nameReference = (SingleNameReference) defaultValue;", "+\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcontentsOffset = attributeOffset;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (fieldBinding != null) {", "+\t\t\t\t\t\tfinal int enumConstantTypeNameIndex = constantPool.literalIndex(fieldBinding.type.signature());", "+\t\t\t\t\t\tfinal int enumConstantNameIndex = constantPool.literalIndex(fieldBinding.name);", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantTypeNameIndex >> 8);", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantTypeNameIndex;", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantNameIndex >> 8);", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantNameIndex;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (defaultValueBinding.isAnnotationType()) {", "+\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(1);", "+\t\t\t\t\t}", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) '@';", "+\t\t\t\t\tgenerateAnnotation((Annotation) defaultValue, attributeOffset);", "+\t\t\t\t} else if (defaultValueBinding.isArrayType()) {", "+\t\t\t\t\t// array type", "+\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(1);", "+\t\t\t\t\t}", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "+\t\t\t\t\tif (defaultValue instanceof ArrayInitializer) {", "+\t\t\t\t\t\tArrayInitializer arrayInitializer = (ArrayInitializer) defaultValue;", "+\t\t\t\t\t\tint arrayLength = arrayInitializer.expressions != null ? arrayInitializer.expressions.length : 0;", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (arrayLength >> 8);", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) arrayLength;", "+\t\t\t\t\t\tfor (int i = 0; i < arrayLength; i++) {", "+\t\t\t\t\t\t\tgenerateElementValue(arrayInitializer.expressions[i], attributeOffset);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcontentsOffset = attributeOffset;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// class type", "+\t\t\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(3);", "+\t\t\t\t\t}", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) 'c';", "+\t\t\t\t\tif (defaultValue instanceof ClassLiteralAccess) {", "+\t\t\t\t\t\tClassLiteralAccess classLiteralAccess = (ClassLiteralAccess) defaultValue;", "+\t\t\t\t\t\tfinal int classInfoIndex = constantPool.literalIndex(classLiteralAccess.targetType.signature());", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (classInfoIndex >> 8);", "+\t\t\t\t\t\tcontents[contentsOffset++] = (byte) classInfoIndex;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcontentsOffset = attributeOffset;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tcontentsOffset = attributeOffset;", "+\t\t\t}", "+\t\t}", "+\t}", "-\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "-\t\t\t\tresizeContents(3);", "-\t\t\t}", "-\t\t\tswitch (constant.typeID()) {", "-\t\t\t\tcase T_boolean :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'Z';", "-\t\t\t\t\tint booleanValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.booleanValue() ? 1 : 0);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (booleanValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) booleanValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_byte :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'B';", "-\t\t\t\t\tint integerValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.intValue());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (integerValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) integerValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_char :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'C';", "-\t\t\t\t\tintegerValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.intValue());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (integerValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) integerValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_int :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'I';", "-\t\t\t\t\tintegerValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.intValue());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (integerValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) integerValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_short :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'S';", "-\t\t\t\t\tintegerValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.intValue());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (integerValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) integerValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_float :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'F';", "-\t\t\t\t\tint floatValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.floatValue());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (floatValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) floatValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'D';", "-\t\t\t\t\tint doubleValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.doubleValue());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (doubleValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) doubleValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_long :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'J';", "-\t\t\t\t\tint longValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(constant.longValue());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (longValueIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) longValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_String :", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 's';", "-\t\t\t\t\tint stringValueIndex =", "-\t\t\t\t\t\tconstantPool.literalIndex(", "-\t\t\t\t\t\t\t((StringConstant) constant).stringValue());", "-\t\t\t\t\tif (stringValueIndex == -1) {", "-\t\t\t\t\t\tif (!creatingProblemType) {", "-\t\t\t\t\t\t\t// report an error and abort: will lead to a problem type classfile creation", "-\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = referenceBinding.scope.referenceContext;", "-\t\t\t\t\t\t\ttypeDeclaration.scope.problemReporter().stringConstantIsExceedingUtf8Limit(defaultValue);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// already inside a problem type creation : no attribute", "-\t\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (stringValueIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) stringValueIndex;", "-\t\t\t\t\t}", "-\t\t\t}"]}], "num": 26741}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b7fa601394e43072e4b74bd3e056787", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009c397d9c84d8dfc681babbedc41c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8f906774856d3fb8be48e8c1fa76527878a0f865", "commitAfterChange": "ecf6de5abf72d6130a58d26da044687c85216430", "methodNumberBeforeChange": 785, "methodNumberAfterChange": 785, "signatureBeforeChange": " public void test779()", "signatureAfterChange": " public void test779()", "diff": ["+\t", "+\tString expectedOutput =", "+\t\t\t\"  // Method descriptor #29 (I)Ljava/lang/Object;\\n\" + ", "+\t\t\t\"  // Stack: 2, Locals: 2\\n\" + ", "+\t\t\t\"  public bridge synthetic Object get(int arg);\\n\" + ", "+\t\t\t\"    0  aload_0\\n\" + ", "+\t\t\t\"    1  iload_1\\n\" + ", "+\t\t\t\"    2  invokevirtual X$1.get(int) : java.lang.String  [37]\\n\" + ", "+\t\t\t\"    5  areturn\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 1]\\n\";", "+\t", "+\t// check no unnecessary checkcast on bridge method for X$1", "+\ttry {", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X$1.class\");", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\tint index = result.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t}", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t}", "+\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\tassertTrue(false);", "+\t} catch (IOException e) {", "+\t\tassertTrue(false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d65a038a3d3464f1af0801e3c107998b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b98c5445ecec402caa11dd14f61dc75d1a13da5a", "commitAfterChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "methodNumberBeforeChange": 841, "methodNumberAfterChange": 841, "signatureBeforeChange": " public void test0821()", "signatureAfterChange": " public void test0821() throws Exception", "diff": ["-public void test0821() {", "+public void test0821() throws Exception {", "-\ttry {", "-\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "-\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "-\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "-\t\tint index = result.indexOf(expectedOutput);", "-\t\tif (index == -1 || expectedOutput.length() == 0) {", "-\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "+\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\tint index = result.indexOf(expectedOutput);", "+\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\tSystem.out.println(Util.displayString(result, 3));", "+\t}", "+\tif (index == -1) {", "+\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "-\t\tif (index == -1) {", "-\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "-\t\t}", "-\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\tassertTrue(false);", "-\t} catch (IOException e) {", "-\t\tassertTrue(false);", "-\t}\t\t"]}], "num": 55509}
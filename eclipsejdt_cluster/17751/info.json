{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e8896cc56098b724a47832fd730fa71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23fbcbd71458a78a82b29b6c87b40c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "bbb21a5affc4d3b9808e8ab897f64d3b1e68b6b2", "commitAfterChange": "e57c1379bf2ab200d310135306edb2776411f753", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate static synchronized char[] scannedIdentifier(String id, String sourceLevel, String complianceLevel)", "signatureAfterChange": " \tprivate static synchronized char[] scannedIdentifier(String id, String sourceLevel, String complianceLevel)", "diff": ["-\t\tString trimmed = id.trim();", "-\t\tif (!trimmed.equals(id)) {", "-\t\t\treturn null;", "-\t\t}", "-", "-\t\t// Read identifier", "-\t\t\tint token = SCANNER.getNextToken();", "-\t\t\tchar[] currentIdentifier;", "-\t\t\ttry {", "-\t\t\t\tcurrentIdentifier = SCANNER.getCurrentIdentifierSource();", "-\t\t\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\tint nextToken= SCANNER.getNextToken();", "-\t\t\tif (token == TerminalTokens.TokenNameIdentifier ", "-\t\t\t\t&& nextToken == TerminalTokens.TokenNameEOF", "-\t\t\t\t&& SCANNER.startPosition == SCANNER.source.length) { // to handle case where we had an ArrayIndexOutOfBoundsException ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     // while reading the last token", "-\t\t\t\treturn currentIdentifier;", "+\t\t\tint token = SCANNER.scanIdentifier();", "+\t\t\tif (token != TerminalTokens.TokenNameIdentifier) return null; ", "+\t\t\tif (SCANNER.currentPosition == SCANNER.eofPosition) { // to handle case where we had an ArrayIndexOutOfBoundsException ", "+\t\t\t\ttry {", "+\t\t\t\t\treturn SCANNER.getCurrentIdentifierSource();", "+\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d422a543cbe77d8169d308d4d471eeb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void compilationStarted()", "signatureAfterChange": " \tpublic void compilationStarted()", "diff": ["+\t */", "+\tpublic void compilationStarted()", "+\t{", "+\t\ttry {", "+\t\t\t// clear out any generated source folder config markers", "+\t\t\tIMarker[] markers = _jProject.getProject().findMarkers(AptPlugin.APT_CONFIG_PROBLEM_MARKER, true,", "+\t\t\t\t\tIResource.DEPTH_INFINITE);", "+\t\t\tif (markers != null) {", "+\t\t\t\tfor (IMarker marker : markers)", "+\t\t\t\t\tmarker.delete();", "+\t\t\t}", "+\t\t} catch (CoreException e) {", "+\t\t\tAptPlugin.log(e, \"Unable to delete configuration marker.\"); //$NON-NLS-1$", "+\t\t}", "+\t\t_skipTypeGeneration = false;", "+\t\t_gsfm.ensureFolderExists();", "+\t\t_generatedPackageFragmentRoot.set();", "+", "-\t */", "-\tpublic void compilationStarted() {", "-\t\ttry{", "-\t\t\t// clear out any generated source folder config markers", "-\t\t\tIMarker[] markers = _jProject.getProject().findMarkers(AptPlugin.APT_CONFIG_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "-\t\t\tif( markers != null ){", "-\t\t\t\tfor( IMarker marker : markers )", "-\t\t\t\t\tmarker.delete();", "-\t\t\t}", "-\t\t}", "-\t\tcatch(CoreException e){", "-\t\t\tAptPlugin.log(e, \"Unable to delete configuration marker.\"); //$NON-NLS-1$", "-\t\t}", "-\t\t_skipTypeGeneration = false;", "-\t\t_gsfm.ensureFolderExists();", "-\t\tfinal IFolder genFolder;\t\t", "-\t\tsynchronized(this){", "-\t\t\tgenFolder = _gsfm.getFolder();", "-\t\t\t_snapshotFolderName = genFolder.getProjectRelativePath().toString();", "-\t\t}", "-\t\ttry {", "-\t\t\t_generatedPackageFragmentRoot = null;", "-\t\t\tIPackageFragmentRoot[] roots = _jProject.getAllPackageFragmentRoots();", "-\t\t\tfor (IPackageFragmentRoot root : roots) {", "-\t\t\t\tfinal IResource resource = root.getResource();", "-\t\t\t\tif( resource != null && resource.equals(genFolder)){", "-\t\t\t\t\t_generatedPackageFragmentRoot = root;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tcatch (JavaModelException jme) {", "-\t\t\tAptPlugin.log(jme, \"Failure during start of compilation attempting to create generated source folder\"); //$NON-NLS-1$", "-\t\t}", "-\t\t", "-\t}"]}], "num": 17751}
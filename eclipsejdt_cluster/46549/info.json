{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "375fb52953b678536ffd7a29e9656df2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c36ee3fb3e54f85b1b7f3ab611aa932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "f98ff60ea4aadb5ad960a35b0293f0998e35fc18", "commitAfterChange": "e9dab03249c4cb99686aef75ce88b855ecbdceb7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor monitor, IBufferFactory factory) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor monitor, IBufferFactory factory) throws JavaModelException", "diff": ["+\t// get the source if possible\r", "+\tchar[] contents = null;\r", "+\tSourceMapper mapper = this.getSourceMapper();\r", "+\tif (mapper != null) {\r", "+\t\tcontents = mapper.findSource(getType());\r", "+\t}\r", "+\tif (contents == null) {\r", "+\t\treturn null;\r", "+\t}\r", "+\r", "-\r", "-\t// set the source if possible\r", "-\tSourceMapper mapper = this.getSourceMapper();\r", "-\tif (mapper != null) {\r", "-\t\tchar[] contents = mapper.findSource(getType());\r", "-\t\tif (contents != null) {\r", "-\t\t\tbuffer.setContents(contents);\r", "-\t\t}\r", "-\t}\r", "+\t\r", "+\t// set the buffer source\r", "+\tbuffer.setContents(contents);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f791fbd714cbca1314a4fd0654fe73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "commitAfterChange": "cfb672e66d17bef31f4b5a6058666168ba53b0d0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField, boolean onlyLongest)", "signatureAfterChange": "  \tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField, boolean onlyLongest)", "diff": ["-\t\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\t\tchar pc = sourceName[i - 1];", "-\t\t\t\t\t\t\t\tpreviousCharKind =", "-\t\t\t\t\t\t\t\t\tScannerHelper.isLowerCase(pc) ? IS_LOWER_CASE :", "-\t\t\t\t\t\t\t\t\t\tScannerHelper.isUpperCase(pc) ? IS_UPPER_CASE :", "-\t\t\t\t\t\t\t\t\t\t\tpc == '_' ? IS_UNDERSCORE : IS_OTHER;", "+\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=283539", "+\t\t\t\t\t\t\t// Process consecutive underscores only for constant types ", "+\t\t\t\t\t\t\tif (isConstantField) {", "+\t\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\t\tchar pc = sourceName[i - 1];", "+\t\t\t\t\t\t\t\t\tpreviousCharKind =", "+\t\t\t\t\t\t\t\t\t\tScannerHelper.isLowerCase(pc) ? IS_LOWER_CASE :", "+\t\t\t\t\t\t\t\t\t\t\tScannerHelper.isUpperCase(pc) ? IS_UPPER_CASE :", "+\t\t\t\t\t\t\t\t\t\t\t\tpc == '_' ? IS_UNDERSCORE : IS_OTHER;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tendIndex = i;", "-\t\t\t\t\t\t\tendIndex = i;", "-\t\t\t\t\t\t\tendIndex = i;", "+\t\t\t\t\t\t\t// Include the '_' also. E.g. My_word -> \"My_\" and \"word\".", "+\t\t\t\t\t\t\tendIndex = i+1;"]}], "num": 46549}
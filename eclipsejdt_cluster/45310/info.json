{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ab9e857dfc40de2b2940ced2faaf981", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6724e913b4f4ab32de6fae0e5da9f7d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/InternalASTRewrite.java", "commitBeforeChange": "a3f5a258168b2737715ba1b0eb047a73835a7a52", "commitAfterChange": "7b5011661f834d7b694ec46b2df63f185f1639df", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options)", "signatureAfterChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options)", "diff": ["-\t\tCompilationUnit rootNode = getRootNode();", "+\t\tfinal CompilationUnit rootNode = getRootNode();", "-\t\t\tASTRewriteAnalyzer visitor = new ASTRewriteAnalyzer(document, rootNode, result, this.eventStore, this.nodeStore, options);", "+\t\t\tTargetSourceRangeComputer xsrComputer = new TargetSourceRangeComputer() {", "+\t\t\t\t/** ", "+\t\t\t\t * This implementation of", "+\t\t\t\t * {@link TargetSourceRangeComputer#computeSourceRange(ASTNode)}", "+\t\t\t\t * is specialized to work in the case of internal AST rewriting, where the", "+\t\t\t\t * original AST has been modified from its original form. This means that", "+\t\t\t\t * one cannot trust that the root of the given node is the compilation unit.", "+\t\t\t\t */", "+\t\t\t\tpublic SourceRange computeSourceRange(ASTNode node) {", "+\t\t\t\t\tint extendedStartPosition = rootNode.getExtendedStartPosition(node);", "+\t\t\t\t\tint extendedLength = rootNode.getExtendedLength(node);", "+\t\t\t\t\treturn new SourceRange(extendedStartPosition, extendedLength);", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tASTRewriteAnalyzer visitor = new ASTRewriteAnalyzer(document, result, this.eventStore, this.nodeStore, options, xsrComputer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "805fcf48fa42b67657d81a4af987d944", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "154eb5a35bc8871be423c76826aa951bbdf84001", "commitAfterChange": "9174770081243ee00ec5ba9a53055a2ca337e226", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws RewriteException", "signatureAfterChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException", "diff": ["-\tpublic TextEdit rewriteAST(IDocument document, Map options) throws RewriteException {", "-\t\t// TODO (martin/david) - check arguments on entry to API methods", "-//\t\tif (document == null) {", "-//\t\t\tthrow new IllegalArgumentException();", "-//\t\t}", "+\tpublic TextEdit rewriteAST(IDocument document, Map options) throws IllegalArgumentException {", "+\t\tif (document == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "-\t\t\tfEventStore.markMovedNodesRemoved();", "-\t\t\ttry {", "-\t\t\t\tCompilationUnit astRoot= (CompilationUnit) rootNode.getRoot();", "-\t\t\t\tASTRewriteAnalyzer visitor= new ASTRewriteAnalyzer(document, astRoot, result, fEventStore, fNodeStore, options);", "-\t\t\t\trootNode.accept(visitor);", "-\t\t\t} catch (RewriteRuntimeException e) {", "-\t\t\t\tthrow new RewriteException(e.getCause());", "-\t\t\t}", "+\t\t\tvalidateASTNotModified(rootNode);", "+\t\t\t", "+\t\t\tgetRewriteEventStore().markMovedNodesRemoved();", "+", "+\t\t\tCompilationUnit astRoot= (CompilationUnit) rootNode.getRoot();", "+\t\t\tASTRewriteAnalyzer visitor= new ASTRewriteAnalyzer(document, astRoot, result, this.eventStore, this.nodeStore, options);", "+\t\t\trootNode.accept(visitor); // throws IllegalArgumentException"]}], "num": 45310}
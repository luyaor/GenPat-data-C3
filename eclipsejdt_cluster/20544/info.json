{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbb4933455352062fae2a90176eeb840", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a234b50d948236a0b20e9babea776fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "d159babfcb98ee4e8a47cd1b6b1a019884f04dec", "commitAfterChange": "269f312257be83a1ad7c36278e7ea6d85f19531b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "signatureAfterChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "diff": ["-\tObject[] res = new Object[max];", "-\tint index = 0;", "-\tfor (int i = 0; i < max; i++) {", "-\t\tString resName = resNames[i];", "-\t\t// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)", "-\t\tif (!resName.toLowerCase().endsWith(SUFFIX_STRING_java)) {", "-\t\t\tif (!this.isDefaultPackage()) {", "-\t\t\t\tresName = this.getElementName().replace('.', '/') + \"/\" + resName;//$NON-NLS-1$", "+\tif (max == 0) {", "+\t    info.setNonJavaResources(JavaElementInfo.NO_NON_JAVA_RESOURCES);", "+\t} else {", "+\t\tObject[] res = new Object[max];", "+\t\tint index = 0;", "+\t\tfor (int i = 0; i < max; i++) {", "+\t\t\tString resName = resNames[i];", "+\t\t\t// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)", "+\t\t\tif (!resName.toLowerCase().endsWith(SUFFIX_STRING_java)) {", "+\t\t\t\tif (!this.isDefaultPackage()) {", "+\t\t\t\t\tresName = this.getElementName().replace('.', '/') + \"/\" + resName;//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tres[index++] = new JarEntryFile(resName, zipName);", "-\t\t\tres[index++] = new JarEntryFile(resName, zipName);", "+\t\t} ", "+\t\tif (index != max) {", "+\t\t\tSystem.arraycopy(res, 0, res = new Object[index], 0, index);", "-\t} ", "-\tif (index != max) {", "-\t\tSystem.arraycopy(res, 0, res = new Object[index], 0, index);", "+\t\tinfo.setNonJavaResources(res);", "-\tinfo.setNonJavaResources(res);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db522cfe56331df74345d77af2691db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatchSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic PotentialMatch[] getPotentialMatches(IPackageFragmentRoot[] roots)", "signatureAfterChange": " public PotentialMatch[] getPotentialMatches(IPackageFragmentRoot[] roots)", "diff": ["-\t", "-\tpublic PotentialMatch[] getPotentialMatches(IPackageFragmentRoot[] roots) {", "-\t\tPotentialMatch[] result = new PotentialMatch[this.elementCount];", "-\t\tint index = 0;", "-\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "-\t\t\tIPackageFragmentRoot root = roots[i];", "-\t\t\tchar[] path = root.getPath().toString().toCharArray();", "-\t\t\tObjectVector potentialMatches = (ObjectVector)this.rootsToPotentialMatches.get(path);", "-\t\t\tif (potentialMatches != null) {", "-\t\t\t\tpotentialMatches.copyInto(result, index);", "-\t\t\t\tindex += potentialMatches.size();", "-\t\t\t}", "-\t\t}", "-\t\tif (index < this.elementCount) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tresult, ", "-\t\t\t\t0, ", "-\t\t\t\tresult = new PotentialMatch[index],", "-\t\t\t\t0,", "-\t\t\t\tindex);", "-\t\t}", "-\t\treturn result;", "-\t}", "+}", "+public PotentialMatch[] getPotentialMatches(IPackageFragmentRoot[] roots) {", "+\tPotentialMatch[] result = new PotentialMatch[this.elementCount];", "+\tint index = 0;", "+\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\tObjectVector potentialMatches = (ObjectVector) this.rootsToPotentialMatches.get(roots[i].getPath());", "+\t\tif (potentialMatches != null) {", "+\t\t\tpotentialMatches.copyInto(result, index);", "+\t\t\tindex += potentialMatches.size();", "+\t\t}", "+\t}", "+\tif (index < this.elementCount)", "+\t\tSystem.arraycopy(result, 0, result = new PotentialMatch[index], 0, index);", "+\treturn result;", "+}"]}], "num": 20544}
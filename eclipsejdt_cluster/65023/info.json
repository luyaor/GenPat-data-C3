{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "857eec8c99a6568001af0ac1fc617462", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a674539df01157fdb1d8e501950181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 57, "signatureBeforeChange": " protected void pushNotInInitializer()", "signatureAfterChange": " protected void pushOnElementStack(int kind)", "diff": ["- */", "-protected void pushNotInInitializer() {", "-\ttry {", "-\t\tthis.inFieldInitializationStack[++this.inFieldInitializationPtr] = false;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//except in test's cases, it should never raise", "-\t\tint oldStackLength = this.inFieldInitializationStack.length;", "-\t\tSystem.arraycopy(this.inFieldInitializationStack , 0, (this.inFieldInitializationStack = new boolean[oldStackLength + StackIncrement]), 0, oldStackLength);", "-\t\tthis.inFieldInitializationStack[this.inFieldInitializationPtr] = false;", "+protected void pushOnElementStack(int kind){", "+\tthis.pushOnElementStack(kind, 0);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7190712962ae8bbf1b55489b46dc479c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic ExceptionLabel enterAnyExceptionHandler(CodeStream codeStream)", "signatureAfterChange": " \t \tpublic ExceptionLabel enterAnyExceptionHandler(CodeStream codeStream)", "diff": ["-\t\tint length;", "-\t\tif ((length = this.anyExceptionLabelsCount) == this.anyExceptionLabels.length) {", "-\t\t\tSystem.arraycopy(this.anyExceptionLabels, 0 , this.anyExceptionLabels=new ExceptionLabel[length*2 + 1], 0, length);", "+\t\tif (this.anyExceptionLabel == null) {", "+\t\t\tthis.anyExceptionLabel = new ExceptionLabel(codeStream, null /*any exception*/);", "-\t\tExceptionLabel exceptionLabel = new ExceptionLabel(codeStream, null);", "-\t\tthis.anyExceptionLabels[this.anyExceptionLabelsCount++] = exceptionLabel;", "-\t\treturn exceptionLabel;", "+\t\tthis.anyExceptionLabel.placeStart();", "+\t\treturn this.anyExceptionLabel;"]}], "num": 65023}
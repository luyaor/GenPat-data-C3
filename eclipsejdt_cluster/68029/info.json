{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7d3335472d605d32348a4622d933dd6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54a1eccaa6808a16d5679cbf42d4b3d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tint i = 6;\\n\" +", "-\t\t\t\t\"\t\tif ((i == 6) \\n\" +", "-\t\t\t\t\"\t\t   & !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 6, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 4, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 5, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 5, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 16, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 6, lineNumberTable[3][1]);", "-\t\t\tassertEquals(\"wrong pc[4]\", 29, lineNumberTable[4][0]);", "-\t\t\tassertEquals(\"wrong line[4]\", 7, lineNumberTable[4][1]);", "-\t\t\tassertEquals(\"wrong pc[5]\", 36, lineNumberTable[5][0]);", "-\t\t\tassertEquals(\"wrong line[5]\", 9, lineNumberTable[5][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tint i = 6;\\n\" +", "+\t\t\t\"\t\tif ((i == 6) \\n\" +", "+\t\t\t\"\t\t   & !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 2, Locals: 3 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  bipush 6\\n\" + ", "+\t\t\t\"       4  istore_2\\n\" + ", "+\t\t\t\"       5  iload_2\\n\" + ", "+\t\t\t\"       6  bipush 6\\n\" + ", "+\t\t\t\"       8  if_icmpne 15\\n\" + ", "+\t\t\t\"      11  iconst_1\\n\" + ", "+\t\t\t\"      12  goto 16\\n\" + ", "+\t\t\t\"      15  iconst_0\\n\" + ", "+\t\t\t\"      16  iload_1\\n\" + ", "+\t\t\t\"      17  ifeq 24\\n\" + ", "+\t\t\t\"      20  iconst_0\\n\" + ", "+\t\t\t\"      21  goto 25\\n\" + ", "+\t\t\t\"      24  iconst_1\\n\" + ", "+\t\t\t\"      25  iand\\n\" + ", "+\t\t\t\"      26  ifeq 36\\n\" + ", "+\t\t\t\"      29  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"      32  iload_2\\n\" + ", "+\t\t\t\"      33  invokevirtual #27 <Method java.io.PrintStream#println(int arg) void>\\n\" + ", "+\t\t\t\"      36  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 4]\\n\" + ", "+\t\t\t\"      [pc: 5, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 16, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 29, line: 7]\\n\" + ", "+\t\t\t\"      [pc: 36, line: 9]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 37] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 37] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"      [pc: 5, pc: 37] local: i index: 2 type: int\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99ca897d169e354478760edcf015ed36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void test038()", "signatureAfterChange": " \tpublic void test038()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tint i = 6;\\n\" +", "-\t\t\t\t\"\t\tif ((i == 6) \\n\" +", "-\t\t\t\t\"\t\t   | !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 6, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 4, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 5, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 5, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 16, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 6, lineNumberTable[3][1]);", "-\t\t\tassertEquals(\"wrong pc[4]\", 29, lineNumberTable[4][0]);", "-\t\t\tassertEquals(\"wrong line[4]\", 7, lineNumberTable[4][1]);", "-\t\t\tassertEquals(\"wrong pc[5]\", 36, lineNumberTable[5][0]);", "-\t\t\tassertEquals(\"wrong line[5]\", 9, lineNumberTable[5][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tint i = 6;\\n\" +", "+\t\t\t\"\t\tif ((i == 6) \\n\" +", "+\t\t\t\"\t\t   | !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 2, Locals: 3 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  bipush 6\\n\" + ", "+\t\t\t\"       4  istore_2\\n\" + ", "+\t\t\t\"       5  iload_2\\n\" + ", "+\t\t\t\"       6  bipush 6\\n\" + ", "+\t\t\t\"       8  if_icmpne 15\\n\" + ", "+\t\t\t\"      11  iconst_1\\n\" + ", "+\t\t\t\"      12  goto 16\\n\" + ", "+\t\t\t\"      15  iconst_0\\n\" + ", "+\t\t\t\"      16  iload_1\\n\" + ", "+\t\t\t\"      17  ifeq 24\\n\" + ", "+\t\t\t\"      20  iconst_0\\n\" + ", "+\t\t\t\"      21  goto 25\\n\" + ", "+\t\t\t\"      24  iconst_1\\n\" + ", "+\t\t\t\"      25  ior\\n\" + ", "+\t\t\t\"      26  ifeq 36\\n\" + ", "+\t\t\t\"      29  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"      32  iload_2\\n\" + ", "+\t\t\t\"      33  invokevirtual #27 <Method java.io.PrintStream#println(int arg) void>\\n\" + ", "+\t\t\t\"      36  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 4]\\n\" + ", "+\t\t\t\"      [pc: 5, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 16, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 29, line: 7]\\n\" + ", "+\t\t\t\"      [pc: 36, line: 9]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 37] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 37] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"      [pc: 5, pc: 37] local: i index: 2 type: int\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbd95a4dbf6ab16d8de986aad5b86b2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test043()", "signatureAfterChange": " \tpublic void test043()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tint i = 6;\\n\" +", "-\t\t\t\t\"\t\tif ((i == 6) \\n\" +", "-\t\t\t\t\"\t\t   ^ !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 6, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 4, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 5, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 5, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 16, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 6, lineNumberTable[3][1]);", "-\t\t\tassertEquals(\"wrong pc[4]\", 29, lineNumberTable[4][0]);", "-\t\t\tassertEquals(\"wrong line[4]\", 7, lineNumberTable[4][1]);", "-\t\t\tassertEquals(\"wrong pc[5]\", 36, lineNumberTable[5][0]);", "-\t\t\tassertEquals(\"wrong line[5]\", 9, lineNumberTable[5][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tint i = 6;\\n\" +", "+\t\t\t\"\t\tif ((i == 6) \\n\" +", "+\t\t\t\"\t\t   ^ !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 2, Locals: 3 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  bipush 6\\n\" + ", "+\t\t\t\"       4  istore_2\\n\" + ", "+\t\t\t\"       5  iload_2\\n\" + ", "+\t\t\t\"       6  bipush 6\\n\" + ", "+\t\t\t\"       8  if_icmpne 15\\n\" + ", "+\t\t\t\"      11  iconst_1\\n\" + ", "+\t\t\t\"      12  goto 16\\n\" + ", "+\t\t\t\"      15  iconst_0\\n\" + ", "+\t\t\t\"      16  iload_1\\n\" + ", "+\t\t\t\"      17  ifeq 24\\n\" + ", "+\t\t\t\"      20  iconst_0\\n\" + ", "+\t\t\t\"      21  goto 25\\n\" + ", "+\t\t\t\"      24  iconst_1\\n\" + ", "+\t\t\t\"      25  ixor\\n\" + ", "+\t\t\t\"      26  ifeq 36\\n\" + ", "+\t\t\t\"      29  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"      32  iload_2\\n\" + ", "+\t\t\t\"      33  invokevirtual #27 <Method java.io.PrintStream#println(int arg) void>\\n\" + ", "+\t\t\t\"      36  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 4]\\n\" + ", "+\t\t\t\"      [pc: 5, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 16, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 29, line: 7]\\n\" + ", "+\t\t\t\"      [pc: 36, line: 9]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 37] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 37] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"      [pc: 5, pc: 37] local: i index: 2 type: int\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}], "num": 68029}
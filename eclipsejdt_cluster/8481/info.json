{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d65888bb5d8a89c294d9c7e1f8eeba9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05acae26066d8ca1ea980b0791394d5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "commitAfterChange": "0bbfe267fb7eaaa77628088e8cdbd841ddb40de5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn suite(evaluationTestClass, suiteName, 3);", "-\t}", "+\t\t// Init suite with class name", "+\t\tList tests = new ArrayList();", "+\t\tConstructor constructor = null;", "+\t\t\t// Get class constructor", "+\t\t\tconstructor = evaluationTestClass.getConstructor(paramTypes);", "+\t\t}", "+\t\tcatch (Exception e) {", "+\t\t\t// cannot get constructor, skip suite", "+\t\t\treturn suite;", "+\t\t}", "+", "+\t\t// Get all tests from \"test%\" methods", "+\t\tMethod[] methods = evaluationTestClass.getMethods();", "+\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "+\t\t\ttry {", "+\t\t\t\tif (methods[m].getModifiers() == 1 /* public */ &&", "+\t\t\t\t\tmethods[m].getName().startsWith(\"test\")) { //$NON-NLS-1$", "+\t\t\t\t\tString methName = methods[m].getName();", "+\t\t\t\t\tObject[] params = {methName};", "+\t\t\t\t\t// tests names subset", "+\t\t\t\t\tif (testsNames != null) {", "+\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "+\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(4))) {", "+\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// look for test number", "+\t\t\t\t\tif (methName.length()>4 && Character.isDigit(methName.charAt(4))) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// get test number", "+\t\t\t\t\t\t\tint n = 4;", "+\t\t\t\t\t\t\twhile (methName.charAt(n) == '0') n++;", "+\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(n));", "+\t\t\t\t\t\t\t// tests numbers subset", "+\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "+\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "+\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// tests range subset", "+\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "+\t\t\t\t\t// no subset, add all tests", "+\t\t\t\t\tif (testsNames==null && testsNumbers==null &&testsRange==null) {", "+\t\t\tcatch (Exception e) {", "+\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" removed from suite due to exception: \"+e.getMessage());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2de706656c6a26e09efac9071c7b2dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "3c4337082bfd6cd03c12a697c9ff074574c40dcb", "commitAfterChange": "62673bfe33e35621438dc115dd9c632f8333785c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn buildTestSuite(evaluationTestClass, null, suiteName); //$NON-NLS-1$", "-\t}", "+\t\t\t\t\tif (testsPrefix == null && testsNames == null && testsNumbers == null && testsRange == null) {", "+\t\t\t\t\tif (testsPrefix == null || methName.startsWith(testsPrefix)) {", "+\t\t\t\t\t\tint numStart = testsPrefix==null ? 4 /* test */ : testsPrefix.length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f2f3e54f7657ae3d357873e324b3be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void reportImport(ImportReference reference, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-public void reportImport(ImportReference reference, int accuracy) throws CoreException {", "-\tIJavaElement importHandle = createImportHandle(reference);", "-\tthis.patternLocator.matchReportImportRef(reference, null, importHandle, accuracy, this);", "+ */", "+protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException {", "+\tMatchingNodeSet nodeSet = this.currentPossibleMatch.nodeSet;", "+\tif (mustResolve) {", "+\t\t// move the possible matching nodes that exactly match the search pattern to the matching nodes set", "+\t\tObject[] nodes = nodeSet.possibleMatchingNodesSet.values;", "+\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\tAstNode node = (AstNode) nodes[i];", "+\t\t\tif (node == null) continue;", "+\t\t\tif (node instanceof ImportReference) {", "+\t\t\t\t// special case for import refs: they don't know their binding", "+\t\t\t\t// import ref cannot be in the hirarchy of a type", "+\t\t\t\tif (this.hierarchyResolver != null) continue;", "+", "+\t\t\t\tImportReference importRef = (ImportReference) node;", "+\t\t\t\tBinding binding = importRef.onDemand", "+\t\t\t\t\t? unit.scope.getTypeOrPackage(CharOperation.subarray(importRef.tokens, 0, importRef.tokens.length))", "+\t\t\t\t\t: unit.scope.getTypeOrPackage(importRef.tokens);", "+\t\t\t\tthis.patternLocator.matchLevelAndReportImportRef(importRef, binding, this);", "+\t\t\t} else {", "+\t\t\t\tnodeSet.addMatch(node, this.patternLocator.resolveLevel(node));", "+\t\t\t}", "+\t\t}", "+\t\tnodeSet.possibleMatchingNodesSet = new SimpleSet();", "+\t}", "+", "+\tif (nodeSet.matchingNodes.elementSize == 0) return; // no matching nodes were found", "+", "+\tboolean searchInsideCompilationUnits = (this.matchContainer & PatternLocator.COMPILATION_UNIT_CONTAINER) != 0;", "+\tImportReference pkg = unit.currentPackage;", "+\tif (pkg != null && nodeSet.matchingNodes.removeKey(pkg) != null) {", "+// Currently a no-op", "+//\t\tif (searchInsideCompilationUnits)", "+//\t\t\treportPackageDeclaration(pkg);", "+\t}", "+", "+\tImportReference[] imports = unit.imports;", "+\tif (imports != null) {", "+\t\tfor (int i = 0, l = imports.length; i < l; i++) {", "+\t\t\tImportReference importRef = imports[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(importRef);", "+\t\t\tif (level != null && searchInsideCompilationUnits)", "+\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, null, createImportHandle(importRef), level.intValue(), this);", "+\t\t}", "+\t}", "+", "+\tTypeDeclaration[] types = unit.types;", "+\tif (types != null) {", "+\t\tfor (int i = 0, l = types.length; i < l; i++) {", "+\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tTypeDeclaration type = types[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(type);", "+\t\t\tif (level != null && searchInsideCompilationUnits)", "+\t\t\t\treportTypeDeclaration(type, null, level.intValue());", "+\t\t\treportMatching(type, null, nodeSet);", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbfec4a396b658c6c209a9105f2e319f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void reportSuperTypeReference(TypeReference typeRef, IJavaElement type, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException", "diff": ["+ */", "+protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException {", "+\t// create type handle", "+\tIJavaElement enclosingElement;", "+\tif (parent == null) {", "+\t\tenclosingElement = createTypeHandle(type.name);", "+\t} else if (parent instanceof IType) {", "+\t\tenclosingElement = createTypeHandle((IType) parent, type.name);", "+\t\tif (enclosingElement == null) return;", "+\t} else {", "+\t\tenclosingElement = parent;", "+\t}", "+", "+\t// super types", "+\tboolean searchInsideTypes = (this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;", "+\tif (type instanceof AnonymousLocalTypeDeclaration) {", "+\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration) type).allocation.type;", "+\t\tif (superType != null) {", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(superType);", "+\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\tthis.patternLocator.matchReportReference(superType, enclosingElement, level.intValue(), this);", "+\t\t}", "+\t} else {", "+\t\tTypeReference superClass = type.superclass;", "+\t\tif (superClass != null) {", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(superClass);", "+\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\tthis.patternLocator.matchReportReference(superClass, enclosingElement, level.intValue(), this);", "+\t\t}", "+\t\tTypeReference[] superInterfaces = type.superInterfaces;", "+\t\tif (superInterfaces != null) {", "+\t\t\tfor (int i = 0, l = superInterfaces.length; i < l; i++) {", "+\t\t\t\tTypeReference superInterface = superInterfaces[i];", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(superInterface);", "+\t\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\t\tthis.patternLocator.matchReportReference(superInterface, enclosingElement, level.intValue(), this);", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t// filter out element not in hierarchy scope", "+\tboolean typeInHierarchy = type.binding == null || typeInHierarchy(type.binding);", "+", "+\tFieldDeclaration[] fields = type.fields;", "+\tif (fields != null) {", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(field);", "+\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "+\t\t\t\treportFieldDeclaration(field, enclosingElement, level.intValue());", "+\t\t\treportMatching(field, enclosingElement, type, nodeSet, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tAbstractMethodDeclaration[] methods = type.methods;", "+\tif (methods != null) {", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = methods.length; i < l; i++) {", "+\t\t\tAbstractMethodDeclaration method = methods[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(method);", "+\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "+\t\t\t\treportMethodDeclaration(method, enclosingElement, level.intValue());", "+\t\t\treportMatching(method, enclosingElement, nodeSet, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "+\tif (memberTypes != null) {", "+\t\tfor (int i = 0, l = memberTypes.length; i < l; i++) {", "+\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(memberType);", "+\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "+\t\t\t\treportTypeDeclaration(memberType, enclosingElement, level.intValue());", "+\t\t\treportMatching(memberType, enclosingElement, nodeSet);", "+\t\t}", "+\t}", "- */", "-public void reportSuperTypeReference(TypeReference typeRef, IJavaElement type, int accuracy) throws CoreException {", "-\tthis.patternLocator.matchReportReference(typeRef, type, accuracy, this);", "-}"]}], "num": 8481}
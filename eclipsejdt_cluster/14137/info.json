{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bcbcd420e58aeebfd64acfb42b65606", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a68f0e3e11dc4ccdbf70a3d74b37dac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, TypeBinding [] typeArguments, AnnotationBinding[] annotations)", "signatureAfterChange": " \tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, AnnotationBinding[] annotations)", "diff": ["-\t// Private subroutine for public APIs.", "-\tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, TypeBinding [] typeArguments, AnnotationBinding[] annotations) {", "-\t\tTypeBinding keyType = getUnannotatedType(type);", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);", "-\t\tint i = 0;", "-\t\tif (cachedInfo != null) {", "-\t\t\tfor (int length = cachedInfo.length; i < length; i++) {", "-\t\t\t\tTypeBinding cachedType = cachedInfo[i];", "-\t\t\t\tif (cachedType == null) break;", "-\t\t\t\tif (cachedType.enclosingType() == enclosingType) {", "-\t\t\t\t\tif (Util.effectivelyEqual(cachedType.getTypeAnnotations(), annotations) && Util.effectivelyEqual(cachedType.typeArguments(), typeArguments)) {", "-\t\t\t\t\t\treturn cachedType;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "-\t\t}", "-\t\tint length = cachedInfo.length;", "-\t\tif (i == length) {", "-\t\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new TypeBinding[length * 2], 0, length);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);", "-\t\t}", "-\t\t/* Add the new comer, retaining the same type binding id as the naked type. To materialize the new comer we can't use new since this is a general", "-\t\t   purpose method designed to deal type bindings of all types. \"Clone\" the incoming type, specializing for any enclosing type that may itself be ", "-\t\t   possibly be annotated. This is so the binding for @Outer Outer.Inner != Outer.@Inner Inner != @Outer Outer.@Inner Inner. Likewise so the bindings ", "-\t\t   for @Readonly List<@NonNull String> != @Readonly List<@Nullable String> != @Readonly List<@Interned String> ", "-\t\t*/", "-\t\tTypeBinding unannotatedType = this.unannotatedTypeSystem.getUnannotatedType(type);", "-\t\tTypeBinding annotatedType = type.clone(enclosingType);", "-\t\tannotatedType.id = unannotatedType.id;", "-\t\tannotatedType.setTypeAnnotations(annotations, this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "-\t\treturn cachedInfo[i] = annotatedType;", "+\t*/", "+\tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, AnnotationBinding[] annotations) {", "+\t\tTypeBinding nakedType = null;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(type);", "+\t\tfor (int i = 0, length = derivedTypes.length; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) break;", "+\t\t\t", "+\t\t\tif (derivedType.enclosingType() != enclosingType || !Util.effectivelyEqual(derivedType.typeArguments(), type.typeArguments()))", "+\t\t\t\tcontinue;", "+\t\t\t", "+\t\t\tswitch(type.kind()) {", "+\t\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\t\tif (!derivedType.isArrayType() || derivedType.dimensions() != type.dimensions() || derivedType.leafComponentType() != type.leafComponentType())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\t\tif (!derivedType.isParameterizedType() || derivedType.actualType() != type.actualType())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.RAW_TYPE:", "+\t\t\t\t\tif (!derivedType.isRawType() || derivedType.actualType() != type.actualType())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\t\tif (!derivedType.isWildcard() || derivedType.actualType() != type.actualType() || derivedType.rank() != type.rank() || derivedType.boundKind() != type.boundKind())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (derivedType.bound() != type.bound() || !Util.effectivelyEqual(derivedType.additionalBounds(), type.additionalBounds()))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tswitch(derivedType.kind()) {", "+\t\t\t\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\t\t\tcase Binding.RAW_TYPE:", "+\t\t\t\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (Util.effectivelyEqual(derivedType.getTypeAnnotations(), annotations)) {", "+\t\t\t\treturn derivedType;", "+\t\t\t}", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tnakedType = derivedType;", "+\t\t}", "+\t\tif (nakedType == null)", "+\t\t\tnakedType = getUnannotatedType(type);", "+\t\t", "+\t\tif (!haveTypeAnnotations(type, enclosingType, null, annotations))", "+\t\t\treturn nakedType;", "+\t\t", "+\t\tTypeBinding annotatedType = type.clone(enclosingType);", "+\t\tannotatedType.id = nakedType.id;", "+\t\tannotatedType.setTypeAnnotations(annotations, this.isAnnotationBasedNullAnalysisEnabled);", "+\t\tTypeBinding keyType;", "+\t\tswitch (type.kind()) {", "+\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\tkeyType = type.leafComponentType();", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\tcase Binding.RAW_TYPE:", "+\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\tkeyType = type.actualType();", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tkeyType = nakedType;", "+\t\t\t\tbreak;", "+\t\t}", "+\t\treturn cacheDerivedType(keyType, nakedType, annotatedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e165300f43d7cdd4a9615425f71dcced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "signatureAfterChange": " \t \tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "diff": ["+\t", "+\tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations) {", "+\t\t", "+\t\tif (genericType.hasTypeAnnotations())   // @NonNull (List<String>) and not (@NonNull List)<String>", "+\t\t\tthrow new IllegalStateException();", "+", "+\t\tParameterizedTypeBinding nakedType = null;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(genericType);", "+\t\tfor (int i = 0, length = derivedTypes.length; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null)", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isParameterizedType() || derivedType.actualType() != genericType)", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.enclosingType() != enclosingType || !Util.effectivelyEqual(derivedType.typeArguments(), typeArguments))", "+\t\t\t\tcontinue;", "+\t\t\tif (Util.effectivelyEqual(annotations, derivedType.getTypeAnnotations()))", "+\t\t\t\treturn (ParameterizedTypeBinding) derivedType;", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tnakedType = (ParameterizedTypeBinding) derivedType;", "+\t\t}", "+\t\tif (nakedType == null)", "+\t\t\tnakedType = super.getParameterizedType(genericType, typeArguments, enclosingType);", "+\t\t", "+\t\tif (!haveTypeAnnotations(genericType, enclosingType, typeArguments, annotations))", "+\t\t\treturn nakedType;", "+\t\t", "+\t\tTypeBinding parameterizedType = new ParameterizedTypeBinding(genericType, typeArguments, enclosingType, this.environment);", "+\t\tparameterizedType.id = nakedType.id;", "+\t\tparameterizedType.setTypeAnnotations(annotations, this.isAnnotationBasedNullAnalysisEnabled);", "+\t\treturn (ParameterizedTypeBinding) cacheDerivedType(genericType, nakedType, parameterizedType);", "-\tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations) {", "-\t\t", "-\t\tif (!haveTypeAnnotations(genericType, enclosingType, typeArguments, annotations))", "-\t\t\treturn this.unannotatedTypeSystem.getParameterizedType(genericType, typeArguments, enclosingType);", "-\t\tint index = 0;", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);", "-\t\tif (cachedInfo != null) {", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++){", "-\t\t\t\tTypeBinding cachedType = cachedInfo[index];", "-\t\t\t\tif (cachedType == null) ", "-\t\t\t\t\tbreak;", "-\t\t\t\tif (!cachedType.isParameterizedType())", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (cachedType.enclosingType() == enclosingType && Util.effectivelyEqual(annotations, cachedType.getTypeAnnotations()) && Util.effectivelyEqual(cachedType.typeArguments(), typeArguments))", "-\t\t\t\t\treturn (ParameterizedTypeBinding) cachedType;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "-\t\tint length = cachedInfo.length;", "-\t\tif (index == length) {", "-\t\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new TypeBinding[length * 2], 0, length);", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);", "-\t\t}", "-\t\t// Add the new comer, retaining the same type binding id as the naked type.", "-\t\tParameterizedTypeBinding unannotatedParameterizedType = this.unannotatedTypeSystem.getParameterizedType(genericType, typeArguments, enclosingType);", "-\t\tTypeBinding parameterizedType = new ParameterizedTypeBinding(genericType, typeArguments, enclosingType, this.environment);", "-\t\tparameterizedType.id = unannotatedParameterizedType.id;", "-\t\tparameterizedType.setTypeAnnotations(annotations, this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "-\t\treturn (ParameterizedTypeBinding) (cachedInfo[index] = parameterizedType);"]}], "num": 14137}
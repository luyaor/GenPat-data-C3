{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38f6faa2d6f9d5346e289bcda6e75e35", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2de4b2b16d6007eeb5d80c431bf6478c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "\t \tpublic static IClasspathEntry newContainerEntry( \t\t\tIPath containerPath,  \t\t\tIAccessRule[] accessRules,  \t\t\tIClasspathAttribute[] extraAttributes, \t\t\tboolean isExported)", "signatureAfterChange": "\t \tpublic static IClasspathEntry newContainerEntry( \t\t\tIPath containerPath,  \t\t\tIAccessRule[] accessRules,  \t\t\tIClasspathAttribute[] extraAttributes, \t\t\tboolean isExported)", "diff": ["-\t\tif (containerPath == null) Assert.isTrue(false, \"Container path cannot be null\"); //$NON-NLS-1$", "-\t\tif (containerPath.segmentCount() < 1) {", "+\t\tif (containerPath == null) {", "+\t\t\tAssert.isTrue(false, \"Container path cannot be null\"); //$NON-NLS-1$", "+\t\t} else if (containerPath.segmentCount() < 1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310176eb2cc13c8973b1b37d91447471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic final Binding getBinding( \t\tchar[][] compoundName, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic final Binding getBinding( \t\tchar[][] compoundName, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\t\tif (currentIndex == length)", "+\t\t\t\t\tif (currentIndex == length) {", "-\t\t\t\t\telse", "-\t\t\t\t\t\treturn new ProblemBinding(", "-\t\t\t\t\t\t\tCharOperation.subarray(compoundName, 0, currentIndex),", "-\t\t\t\t\t\t\tNotFound);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn new ProblemBinding(", "+\t\t\t\t\t\tCharOperation.subarray(compoundName, 0, currentIndex),", "+\t\t\t\t\t\tNotFound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a75355cbe67e63a5c64ceabe18d19f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "c601ed019aca559b512c4a25752389c0b4b0ccaf", "commitAfterChange": "4a73819ea0e019b04bf53185fc3a725bdbdd3d98", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public int getKind()", "signatureAfterChange": " public int getKind()", "diff": ["-\tif ((modifiers & AccAnnotation) != 0) return IGenericType.ANNOTATION_TYPE_DECL;", "-\tif ((modifiers & AccInterface) != 0) return IGenericType.INTERFACE_DECL;", "-\tif ((modifiers & AccEnum) != 0) return IGenericType.ENUM_DECL;", "+\tif ((modifiers & AccInterface) != 0) {", "+\t\tif ((modifiers & AccAnnotation) != 0) return IGenericType.ANNOTATION_TYPE_DECL;", "+\t\treturn IGenericType.INTERFACE_DECL;", "+\t}", "+\tif ((modifiers & AccEnum) != 0)\treturn IGenericType.ENUM_DECL;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "694cae8384969eb224a52f9ba574607d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "9c479e8055cbe93318686e778cf375ba226b61bc", "commitAfterChange": "82c71159e4a76fe2b085325a61ccc12c857c6a1f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (valueIfFalseType.isCompatibleWith(valueIfTrueType)) {", "-\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "-\t\t\treturn this.resolvedType = valueIfTrueType;", "-\t\t}", "-\t\tif (valueIfTrueType.isCompatibleWith(valueIfFalseType)) {", "-\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\treturn this.resolvedType = valueIfFalseType;", "-\t\t}", "-\t\t// 1.5 addition: allow most common supertype ", "+\t\t\t// >= 1.5 : LUB(operand types) must exist", "+\t\t} else {", "+\t\t\t// < 1.5 : one operand must be convertible to the other", "+\t\t\tif (valueIfFalseType.isCompatibleWith(valueIfTrueType)) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfTrueType;", "+\t\t\t} else if (valueIfTrueType.isCompatibleWith(valueIfFalseType)) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfFalseType;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d4be10569f41207be207c8a3398c9d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "5bdc3b4c1ac90c13e0ad5044d43a37f284ad498a", "commitAfterChange": "307ad9a47797c07fc55ef0b4be72dc644056364f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "signatureAfterChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "diff": ["-\tString fullName = assembleName(name, packageName, '/');\r", "-\tif (initialTypeNames != null)\r", "+\tif (initialTypeNames != null) {\r", "+\t\tString fullName = assembleName(name, packageName, '/');\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b82b3db7bd7e01b9e6fe7306e770e84f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic IPath getPackagePath(IPath root, String packageName)", "signatureAfterChange": " \tpublic IPath getPackagePath(IPath root, String packageName)", "diff": ["-\t\tif (packageName.length() == 0)", "+\t\tif (packageName.length() == 0) {", "-\t\telse", "-\t\t\treturn root.append(packageName.replace('.', IPath.SEPARATOR));", "+\t\t}", "+\t\treturn root.append(packageName.replace('.', IPath.SEPARATOR));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c036a6d5ec0da3e9bd4092016e50e427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "bb2857bc300fff00c2be800fc2548e2f4c962b8b", "commitAfterChange": "28b8b169c01fc29b7e942d64642d30abd4119ef3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprivate JavaModelManager()", "signatureAfterChange": " \tprivate JavaModelManager()", "diff": ["-\t\tif (Platform.isRunning()) this.indexManager = new IndexManager();", "-\t\tthis.nonChainingJars = loadNonChainingJarsCache();", "+\t\tif (Platform.isRunning()) {", "+\t\t\tthis.indexManager = new IndexManager();", "+\t\t\tthis.nonChainingJars = loadNonChainingJarsCache();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5afdb24cedfb51e63303a14f34abce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f65e97ef80b985d1ee9c7b3d0ef18aa147514ff3", "commitAfterChange": "988057f083fde4f461571ff6b54e8a23945003b1", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r \tprivate void saveState(PerProjectInfo info) throws CoreException", "signatureAfterChange": "\r \tprivate void saveState(PerProjectInfo info) throws CoreException", "diff": ["-\t\tif (VERBOSE) System.out.println(Util.bind(\"build.saveStateProgress\", info.project.getName())); //$NON-NLS-1$\r", "+\t\tif (VERBOSE)\r", "+\t\t\tSystem.out.println(Util.bind(\"build.saveStateProgress\", info.project.getName())); //$NON-NLS-1$\r", "-\t\tt= System.currentTimeMillis() - t;\r", "-\t\tif (VERBOSE)\r", "+\t\tif (VERBOSE) {\r", "+\t\t\tt = System.currentTimeMillis() - t;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f9e87474005554d9439ebf751955b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "91f3edc5382142e13f8351418b65563536c6670f", "commitAfterChange": "8beb6c014c6d79a132720a5abe8725a7bc30bf83", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding createBinding(MethodScope scope, TypeBinding typeBinding)", "signatureAfterChange": "  \tpublic TypeBinding createBinding(MethodScope scope, TypeBinding typeBinding)", "diff": ["-\t\t\tAnnotation.isTypeUseCompatible(this.type, scope, this.annotations);", "-\t\t\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8)", "+\t\t\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\tAnnotation.isTypeUseCompatible(this.type, scope, this.annotations);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e07fc113e5b8a8ed302e013fb0a7c692", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod( \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod( \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible)", "+\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible) {", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)", "-\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\t\t\t\t\tselector,", "-\t\t\t\t\t\t\t\t\targumentTypes,", "-\t\t\t\t\t\t\t\t\tInheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)", "+\t\t\t\t\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\t\t\t\t\tselector,", "+\t\t\t\t\t\t\t\targumentTypes,", "+\t\t\t\t\t\t\t\tInheritedNameHidesEnclosingName);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40e123428cbccd388c5493daba3c63c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic IPath getPackageFragmentRootPath(IPath projectPath, String name)", "signatureAfterChange": " \tpublic IPath getPackageFragmentRootPath(IPath projectPath, String name)", "diff": ["-\t\tif (name.length() == 0)", "+\t\tif (name.length() == 0) {", "-\t\telse", "-\t\t\treturn projectPath.append(name);", "+\t\t}", "+\t\treturn projectPath.append(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81c1ddb7484efb70f630688e641cf44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "4ed4929f5a19426d0e76e817c895cfe42549d282", "commitAfterChange": "5b6ed239ab2debdfdceff08624ed7d37a463daed", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "signatureAfterChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "diff": ["-\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\tif (this.suspendedResolutionState != null)", "+\t\tif (this.suspendedResolutionState != null) {", "+\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3fab01f91db42dc360878c3fbd64f3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "80e4c418549a0d8bd2236d9e45f61a0b24f01473", "commitAfterChange": "d50f599c69eb795e78c16e3acf0ec69b29313628", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "signatureAfterChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "diff": ["-\t\t\t\t\t\tif (e.astNode != null)\r", "+\t\t\t\t\t\tif (e.astNode != null) {\r", "+\t\t\t\t\t\t}\r"]}], "num": 6260}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23989412a5d5fedf5b2ddfb6a7a576f0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84055fe3c56d6349103a26162f624e25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "16a26bc49f78acb9a7d0c10a9d6bedce29952111", "commitAfterChange": "e70f557904c0f4a9dab2a8974c294cadedac3b10", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index)", "signatureAfterChange": "\r \r \tpublic void manageSyntheticReadAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding,\r \t\tint index)", "diff": ["-}\r", "-public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index) {\r", "-\t// index == 0 denotes the first fieldBinding, index > 0 denotes one of the 'otherBindings'\r", "-\r", "-\tif (fieldBinding.constant != NotAConstant) return;\r", "-\tif (fieldBinding.isPrivate()) { // private access\r", "-\t\tif (fieldBinding.declaringClass != currentScope.enclosingSourceType()) {\r", "-\t\t\tif (syntheticReadAccessors == null) {\r", "-\t\t\t\tif (otherBindings == null)\r", "-\t\t\t\t\tsyntheticReadAccessors = new SyntheticAccessMethodBinding[1];\r", "-\t\t\t\telse\r", "-\t\t\t\t\tsyntheticReadAccessors = new SyntheticAccessMethodBinding[otherBindings.length + 1];\r", "-\t\t\t}\r", "-\t\t\tsyntheticReadAccessors[index] = fieldBinding.getSyntheticReadAccess();\r", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);\r", "-\t\t}\r", "-\t\treturn;\r", "-\t}\r", "-\tif (fieldBinding.isProtected() // implicit protected access (only for first one)\r", "-\t\t&& index == 0\r", "-\t\t&& (bits & DepthMASK) != 0\r", "-\t\t&& (fieldBinding.declaringClass.getPackage() \r", "-\t\t\t!= currentScope.enclosingSourceType().getPackage())){\t\r", "-\t\t\tif (syntheticReadAccessors == null) {\r", "-\t\t\t\tif (otherBindings == null)\r", "-\t\t\t\t\tsyntheticReadAccessors = new SyntheticAccessMethodBinding[1];\r", "-\t\t\t\telse\r", "-\t\t\t\t\tsyntheticReadAccessors = new SyntheticAccessMethodBinding[otherBindings.length + 1];\r", "-\t\t\t}\r", "-\t\t\tsyntheticReadAccessors[index] = \r", "-\t\t\t\t((SourceTypeBinding)currentScope.enclosingSourceType().\r", "-\t\t\t\t\tenclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).\r", "-\t\t\t\t\t\taddSyntheticMethod(fieldBinding, true);\r", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);\r", "-\t}\r", "-}\r", "+\tpublic void manageSyntheticReadAccessIfNecessary(\r", "+\t\tBlockScope currentScope,\r", "+\t\tFieldBinding fieldBinding,\r", "+\t\tint index) {\r", "+\t\t// index == 0 denotes the first fieldBinding, index > 0 denotes one of the 'otherBindings'\r", "+\t\tif (fieldBinding.constant != NotAConstant)\r", "+\t\t\treturn;\r", "+\t\tif (fieldBinding.isPrivate()) { // private access\r", "+\t\t\tif (fieldBinding.declaringClass != currentScope.enclosingSourceType()) {\r", "+\t\t\t\tif (syntheticReadAccessors == null) {\r", "+\t\t\t\t\tif (otherBindings == null)\r", "+\t\t\t\t\t\tsyntheticReadAccessors = new SyntheticAccessMethodBinding[1];\r", "+\t\t\t\t\telse\r", "+\t\t\t\t\t\tsyntheticReadAccessors =\r", "+\t\t\t\t\t\t\tnew SyntheticAccessMethodBinding[otherBindings.length + 1];\r", "+\t\t\t\t}\r", "+\t\t\t\tsyntheticReadAccessors[index] = ((SourceTypeBinding) fieldBinding.declaringClass).addSyntheticMethod(fieldBinding, true);\r", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);\r", "+\t\t\t}\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tif (fieldBinding.isProtected()){\r", "+\t\t\tint depth = index == 0 ? (bits & DepthMASK) >> DepthSHIFT : otherDepths[index-1];\r", "+\t\t\t// implicit protected access (only for first one)\r", "+\t\t\tif (depth > 0 && (fieldBinding.declaringClass.getPackage()\r", "+\t\t\t\t\t\t\t\t!= currentScope.enclosingSourceType().getPackage())) {\r", "+\t\t\t\tif (syntheticReadAccessors == null) {\r", "+\t\t\t\t\tif (otherBindings == null)\r", "+\t\t\t\t\t\tsyntheticReadAccessors = new SyntheticAccessMethodBinding[1];\r", "+\t\t\t\t\telse\r", "+\t\t\t\t\t\tsyntheticReadAccessors =\r", "+\t\t\t\t\t\t\tnew SyntheticAccessMethodBinding[otherBindings.length + 1];\r", "+\t\t\t\t}\r", "+\t\t\t\tsyntheticReadAccessors[index] =\r", "+\t\t\t\t\t((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth))\r", "+\t\t\t\t\t\t\t\t\t\t\t.addSyntheticMethod(fieldBinding, true);\r", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72a8dcd2389d54bb481297e45de6bd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "78b119ace31b372cae1bcc15cb392c5be41d4686", "commitAfterChange": "5bad0f0933acdc658d4e40a7d9becfd8568dd235", "methodNumberBeforeChange": 292, "methodNumberAfterChange": 292, "signatureBeforeChange": " protected void consumeIdentifierOrNew(boolean newForm)", "signatureAfterChange": " protected void consumeIdentifierOrNew(boolean newForm)", "diff": ["-\tpushOnIntStack(newForm ? 1 : 0);  // to discriminate between the two forms downstream.", "-\tif (!newForm)", "-\t\tpushOnTypeAnnotationLengthStack(0);", "+\tif (newForm) {", "+\t\tint newStart = this.intStack[this.intPtr--];", "+\t\tpushIdentifier(ConstantPool.Init, (((long) newStart << 32)) + (newStart + 3));", "+\t}", "+\tpushOnTypeAnnotationLengthStack(0);"]}], "num": 4772}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c089b63bce3f8a3a415f76442989266", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f679223847df916fd1cf94eb67530e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments02() throws CoreException", "diff": ["+\t\tsearch(\"<? extends Exception> Single\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Exception>Single<Object>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new Single<Exception>(new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new Single<Exception>(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new Single<RuntimeException>(new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new Single<RuntimeException>(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), gs)] EQUIVALENT_ERASURE_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9d27a2e49d80dbe1c2b199c587ba6d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam08() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternNestedParam07() throws CoreException", "diff": ["+\t// Selection is really nasty in this case as match selection sometimes is \"Generic<?>\" !!!", "+\t\tsearch(\"GM.Generic<?, ?, ?>\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [Generic<?>] EXACT_MATCH\",", "+\t\t\tresultCollector);", "+\t}", "-\t// TODO (search-frederic) try to have a better match selection", "-\tpublic void testStringPatternNestedParam08() throws CoreException {", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [Generic<NGS.Generic<?>, NGS.Generic<?>, NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<NGS.Generic<?>, NGS.Generic<NGS.Generic<?>>, NGS.Generic<NGS.Generic<NGS.Generic<?>>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [Generic<NGS.Generic<Object>, NGS.Generic<? extends Throwable>, NGS.Generic<? super RuntimeException>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [Generic<g3.t.def.NGS.Generic<java.lang.Object>, g3.t.def.NGS.Generic<? extends java.lang.Throwable>, g3.t.def.NGS.Generic<? super java.lang.RuntimeException>>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb91e952ae2bd108642209556d5f2fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test015() throws Exception", "signatureAfterChange": " \t \tpublic void test006_classTypeParameter() throws Exception", "diff": ["+\t", "+\tpublic void test006_classTypeParameter() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_PARAMETER)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {\\n\" + ", "+\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"B.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_PARAMETER)\\n\" + ", "+\t\t\t\t\"@Retention(CLASS)\\n\" + ", "+\t\t\t\t\"@interface B {\\n\" + ", "+\t\t\t\t\"\tint value() default -1;\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T1,T2,@A @B(3) T3> {}\",", "+\t\t},", "+\t\t\"\");", "+\t\tString expectedOutput =", "+\t\t\t\"  RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"    #25 @A(\\n\" + ", "+\t\t\t\"      target type = 0x0 CLASS_TYPE_PARAMETER\\n\" + ", "+\t\t\t\"      type parameter index = 2\\n\" + ", "+\t\t\t\"    )\\n\" + ", "+\t\t\t\"  RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"    #21 @B(\\n\" + ", "+\t\t\t\"      #22 value=(int) 3 (constant type)\\n\" + ", "+\t\t\t\"      target type = 0x0 CLASS_TYPE_PARAMETER\\n\" + ", "+\t\t\t\"      type parameter index = 2\\n\" + ", "+\t\t\t\"    )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}", "-\t// field type generic or array", "-\tpublic void test015() throws Exception {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"A.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface A {\\n\" + ", "-\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"B.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"@interface B {\\n\" + ", "-\t\t\t\t\"\tint value() default -1;\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t@A int [] @B(3) [] field;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #12 @A(\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #8 @B(\\n\" + ", "-\t\t\t\"        #9 value=(int) 3 (constant type)\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "-\t}"]}], "num": 17401}
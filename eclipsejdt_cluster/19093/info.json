{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bb5040680273ea826cffb94c25e5ec8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0469843aa107c4ef2f23b930c02a09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\t&& methodScope.fieldDeclarationIndex != MethodScope.NotInFieldDecl", "-\t\t\t\t\t\t\t&& fieldBinding.id >= methodScope.fieldDeclarationIndex) {", "+\t\t\t\t\t\t\t\t&& methodScope.fieldDeclarationIndex != MethodScope.NotInFieldDecl", "+\t\t\t\t\t\t\t\t&& fieldBinding.id >= methodScope.fieldDeclarationIndex) {", "-\t\t\t\t\t\t\t\t&& this.indexOfFirstFieldBinding == 1)", "+\t\t\t\t\t\t\t\t&& this.indexOfFirstFieldBinding == 1) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!fieldBinding.isStatic() && this.indexOfFirstFieldBinding == 1) {", "+\t\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "444eee9b1a8db8d9be3b6463c2a9dbd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "949f1bbe84622faa807866412d26a5bdb0f64fe4", "commitAfterChange": "ecd2d9d0e14c2688e43c7c452930452fe7a77cc0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+", "+\t\t// final int i = (i = 0);", "+\t\tif (binding.isFinal() && flowInfo.isPotentiallyAssigned(binding)) {", "+\t\t\tcurrentScope.problemReporter().duplicateInitializationOfFinalLocal(binding, this);", "+\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a65d281db57da3d3a8c918a942038e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ContainerAnnotation.java", "commitBeforeChange": "389d48879e1222c78388564d268f16031c9e3b40", "commitAfterChange": "3c8db8654fc8e2927c75863ec1232c9bc3800c9b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (!repeatingAnnotationType.isDeprecated() && isTypeUseDeprecated(containerAnnotationType, scope)) {", "+\t\t\tscope.problemReporter().deprecatedType(containerAnnotationType, repeatingAnnotation);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f4d76fc055ea59d90e3fda9ae360bc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tscope.problemReporter().unnecessaryReceiverForStaticMethod(this, binding);", "+\t\t\tscope.problemReporter().nonStaticAccessToStaticMethod(this, binding);", "+\t\tif (!receiver.isImplicitThis() && binding.declaringClass != receiverType) {", "+\t\t\tscope.problemReporter().indirectAccessToStaticMethod(this, binding);", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1782758454f4ec3f6cc1d98919939d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.codegenBinding =", "-\t\t\tthis.binding = scope.getField(this.receiverType, token, this);", "+\t\tthis.codegenBinding = this.binding = scope.getField(this.receiverType, token, this);", "-\t\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0))", "+\t\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "-", "+\t\t}", "-\t\t\t\tscope.problemReporter().unnecessaryReceiverForStaticField(this, binding);", "+\t\t\t\tscope.problemReporter().nonStaticAccessToStaticField(this, binding);", "+\t\t\t}", "+\t\t\tif (!isImplicitThisRcv && binding.declaringClass != receiverType) {", "+\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, binding);"]}], "num": 19093}
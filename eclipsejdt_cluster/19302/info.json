{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1f02c9264a3a4d7184b83e23cafdac9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "120f8f53e3a44c09fcf79aa1f8548f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "fdc78eae04c092b433b059502afa80612c96fda8", "commitAfterChange": "0649403520900cba3eb046b6b617ad20a9f6b022", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tboolean argsContainCast = false;", "-\t\tif (left instanceof CastExpression) {", "-\t\t\tleft.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\targsContainCast = true;", "-\t\t}", "+\t\tboolean leftIsCast, rightIsCast;", "+\t\tif ((leftIsCast = left instanceof CastExpression) == true) left.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\tif (right instanceof CastExpression) {", "-\t\t\tright.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\targsContainCast = true;", "-\t\t}", "+\t\tif ((rightIsCast = right instanceof CastExpression) == true) right.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\tif (argsContainCast) {", "-\t\t\tCastExpression.checkNeedForArgumentCasts(scope, operator, operatorSignature, left, leftTypeId, right, rightTypeId);", "+\t\tif (leftIsCast || rightIsCast) {", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, operator, operatorSignature, left, leftTypeId, leftIsCast, right, rightTypeId, rightIsCast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54ff5012da3a25a963609a94c70ccbc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "fdc78eae04c092b433b059502afa80612c96fda8", "commitAfterChange": "0649403520900cba3eb046b6b617ad20a9f6b022", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tboolean argsContainCast = false;", "-\t\tif (left instanceof CastExpression) {", "-\t\t\tleft.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\targsContainCast = true;", "-\t\t}", "+\t\tboolean leftIsCast, rightIsCast;", "+\t\tif ((leftIsCast = left instanceof CastExpression) == true) left.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\tif (right instanceof CastExpression) {", "-\t\t\tright.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\targsContainCast = true;", "-\t\t}", "+\t\tif ((rightIsCast = right instanceof CastExpression) == true) right.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\tif (argsContainCast) {", "-\t\t\tCastExpression.checkNeedForArgumentCasts(scope, EQUAL_EQUAL, operatorSignature, left, leftType.id, right, rightType.id);", "-\t\t}\t", "+\t\tif (leftIsCast || rightIsCast) {", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, EQUAL_EQUAL, operatorSignature, left, leftType.id, leftIsCast, right, rightType.id, rightIsCast);", "+\t\t}"]}], "num": 19302}
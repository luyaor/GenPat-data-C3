{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9494b221cb368a6bd1b0e93d20425bd6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43377c00cc561f5105e9722cc49e1aff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testFieldReferenceBug78082() throws CoreException", "signatureAfterChange": " \tpublic void testBug78082() throws CoreException", "diff": ["-\t */", "-\tpublic void testFieldReferenceBug78082() throws CoreException {", "-\t\tIField field = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b78082\", \"M.java\").getType(\"M\").getField(\"VAL\");", "-\t\tsearch(", "-\t\t\tfield,", "-\t\t\tALL_OCCURRENCES,", "-\t\t\tgetJavaSearchScopeBugs(), ", "-\t\t\tthis.resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b78082/M.java b78082.M.VAL [VAL] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b78082/XY.java [VAL] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b78082/XY.java b78082.XY.val [VAL] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b78082/XY.java b78082.XY.val2 [VAL] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);", "-\t}", "+\t */", "+\tpublic void testBug78082() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[2];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b78082/M.java\",", "+\t\t\t\t\"package b78082;\\n\" + ", "+\t\t\t\t\"public class M {\\n\" + ", "+\t\t\t\t\"\tstatic int VAL=78082;\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b78082/XY.java\",", "+\t\t\t\t\"package b78082;\\n\" + ", "+\t\t\t\t\"import static b78082.M.VAL;\\n\" + ", "+\t\t\t\t\"public class XY {\\n\" + ", "+\t\t\t\t\"\tdouble val = VAL;\\n\" + ", "+\t\t\t\t\"\tdouble val2= b78082.M.VAL;\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\t// search field references", "+\t\t\tIType type = workingCopies[0].getType(\"M\");", "+\t\t\tIField field = type.getField(\"VAL\");", "+\t\t\tsearch(field, ALL_OCCURRENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b78082/M.java b78082.M.VAL [VAL] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b78082/XY.java [VAL] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b78082/XY.java b78082.XY.val [VAL] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b78082/XY.java b78082.XY.val2 [VAL] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95af42eec060a6c66779d56f7f2300f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTest.java", "commitBeforeChange": "624d1b561ac3289a55fdc4319658cfc9a95be40b", "commitAfterChange": "5b2838f3bb9b9310e5fe5dd75385e9134612c357", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void testBug226357() throws CoreException, IOException", "signatureAfterChange": " public void testBug226357() throws CoreException, IOException", "diff": ["-\tworkingCopies = new ICompilationUnit[1];", "-\tworkingCopies[0] = getWorkingCopy(\"/Converter15/src/Test.java\",", "-\t\t\"public class Test {\\n\" + ", "+\tworkingCopies = new ICompilationUnit[2];", "+\tworkingCopies[0] = getWorkingCopy(\"/Converter15/src/ParameterSubsetAnnotated.java\",", "+\t\t\"public class ParameterSubsetAnnotated {\\n\" + ", "+\tworkingCopies[1] = getWorkingCopy(\"/Converter15/src/ParameterSubsetClient.java\",", "+\t\t\"public class ParameterSubsetClient {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"        public void client() {\\n\" + ", "+\t\t\"                ParameterSubsetAnnotated.safeDiv(5, 0);\\n\" + ", "+\t\t\"        }\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"}\\n\"", "+\t);", "-\tCompilationUnit unit = (CompilationUnit) runConversion(workingCopies[0], true/*bindings*/, false/*no statement recovery*/, true/*bindings recovery*/);", "-\tMethodDeclaration methodDeclaration = null;", "-\tswitch(unit.getAST().apiLevel()) {", "-\t\tcase AST.JLS2 :", "-\t\t\tmethodDeclaration = (MethodDeclaration) getASTNode(unit, 0, 0);", "-\t\t\tbreak;", "-\t\tcase AST.JLS3 :", "-\t\t\tmethodDeclaration = (MethodDeclaration) getASTNode(unit, 0, 1);", "-\t}", "-\tassertNotNull(\"No method declaration\", methodDeclaration);", "+\tCompilationUnit unit = (CompilationUnit) runConversion(workingCopies[1], true/*bindings*/, false/*no statement recovery*/, true/*bindings recovery*/);", "+\tMethodDeclaration methodDeclaration = (MethodDeclaration) getASTNode(unit, 0, 0);", "+\tExpressionStatement statement = (ExpressionStatement) methodDeclaration.getBody().statements().get(0);", "+\tMethodInvocation methodInvocation = (MethodInvocation) statement.getExpression();", "-\t\t\"@LTest$NonZero;\\n\",", "-\t\tmethodDeclaration.resolveBinding()", "+\t\t\"@LParameterSubsetAnnotated$NonZero;\\n\",", "+\t\tmethodInvocation.resolveMethodBinding()"]}], "num": 46342}
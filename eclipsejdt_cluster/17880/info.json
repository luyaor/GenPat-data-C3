{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4643ac7f59071fd8874a9fa8d27c01ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "110d027d9fedbfd59531806d6ad83fba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java", "commitBeforeChange": "16a26bc49f78acb9a7d0c10a9d6bedce29952111", "commitAfterChange": "e70f557904c0f4a9dab2a8974c294cadedac3b10", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": "\r \r public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\t\t//    OR the field is a static field accessed directly through a type\r", "+\t\t//    OR the method is a static method accessed directly through a type\r", "+\t\t//    OR previous assertions are true for one of the enclosing type\r", "-\t\tif (declaringClass.isSuperclassOf(invocationType)) {\r", "-\t\t\tif (invocationSite.isSuperAccess()) return true;\r", "-\t\t\t// receiverType can be an array binding in one case... see if you can change it\r", "-\t\t\tif (receiverType instanceof ArrayBinding)\r", "-\t\t\t\treturn false;\r", "-\t\t\tif (invocationType == receiverType || invocationType.isSuperclassOf((ReferenceBinding) receiverType))\r", "-\t\t\t\treturn true;\r", "-\t\t\tif (isStatic())\r", "-\t\t\t\treturn true; // see 1FMEPDL - return invocationSite.isTypeAccess();\r", "-\t\t}\r", "+\t\t\r", "+\t\tReferenceBinding currentType = invocationType;\r", "+\t\tint depth = 0;\r", "+\t\tdo {\r", "+\t\t\tif (declaringClass.isSuperclassOf(currentType)) {\r", "+\t\t\t\tif (invocationSite.isSuperAccess()){\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t\t// receiverType can be an array binding in one case... see if you can change it\r", "+\t\t\t\tif (receiverType instanceof ArrayBinding){\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\tif (isStatic()){\r", "+\t\t\t\t\treturn true; // see 1FMEPDL - return invocationSite.isTypeAccess();\r", "+\t\t\t\t}\r", "+\t\t\t\tif (currentType == receiverType || currentType.isSuperclassOf((ReferenceBinding) receiverType)){\r", "+\t\t\t\t\tif (depth > 0) invocationSite.setDepth(depth);\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tdepth++;\r", "+\t\t\tcurrentType = currentType.enclosingType();\r", "+\t\t} while (currentType != null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1ee8167bfc648a5f51020f9a8eca443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "ce0032759c3236d2ea392944fcdfb033987155c8", "commitAfterChange": "5033818fa872fa58eee8c84922d0bad01293db14", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public final boolean canBeSeenBy(TypeBinding receiverType, boolean isSuperAccess, Scope scope)", "signatureAfterChange": "\r public final boolean canBeSeenBy(TypeBinding receiverType, boolean isSuperAccess, Scope scope)", "diff": ["+\t\t//    OR previous assertions are true for one of the enclosing type\r", "-\t\tif (declaringClass.isSuperclassOf(invocationType)) {\r", "-\t\t\tif (isSuperAccess) return true;\r", "-\t\t\t// receiverType can be an array binding in one case... see if you can change it\r", "-\t\t\tif (receiverType instanceof ArrayBinding)\r", "-\t\t\t\treturn false;\r", "-\t\t\tif (invocationType == receiverType || invocationType.isSuperclassOf((ReferenceBinding) receiverType))\r", "-\t\t\t\treturn true;\r", "-\t\t\tif (isStatic())\r", "-\t\t\t\treturn true; // see 1FMEPDL - return invocationSite.isTypeAccess();\r", "-\t\t}\r", "+\t\t\r", "+\t\tReferenceBinding currentType = invocationType;\r", "+\t\tdo {\r", "+\t\t\tif (declaringClass.isSuperclassOf(currentType)) {\r", "+\t\t\t\tif (isSuperAccess) return true;\r", "+\t\t\t\t// receiverType can be an array binding in one case... see if you can change it\r", "+\t\t\t\tif (receiverType instanceof ArrayBinding)\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\tif (currentType == receiverType || currentType.isSuperclassOf((ReferenceBinding) receiverType))\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\tif (isStatic())\r", "+\t\t\t\t\treturn true; // see 1FMEPDL - return invocationSite.isTypeAccess();\r", "+\t\t\t}\r", "+\t\t\tcurrentType = currentType.enclosingType();\r", "+\t\t} while (currentType != null);\r"]}], "num": 17880}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc5a83442d6f938a6ea9aa044877c206", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6b5a2211e2e2f136e6e9eea6ee934ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "f8069544c2b2660f8b2415856be61642ab9369f1", "commitAfterChange": "5158f4f499166dbc52302f8195c73110e357532f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-\t\tif (sourceFileName == null)", "-\t\t\treturn null; // no source file attribute", "-\t\tString name = new String(sourceFileName);", "-", "-\t\tIPackageFragment pkgFrag = type.getPackageFragment();", "-\t\tif (!pkgFrag.isDefaultPackage()) {", "-\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');", "-\t\t\tname = pkg + '/' + name;", "+\t\tString name = null;", "+\t\tif (sourceFileName == null) {", "+\t\t\t/*", "+\t\t\t * We assume that this type has been compiled from a file with its name", "+\t\t\t * For example, A.class comes from A.java and p.A.class comes from a file A.java", "+\t\t\t * in the folder p.", "+\t\t\t */", "+\t\t\ttry {", "+\t\t\t\tif (type.isMember()) {", "+\t\t\t\t\tIType enclosingType = type.getDeclaringType();", "+\t\t\t\t\twhile (enclosingType.getDeclaringType() != null) {", "+\t\t\t\t\t\tenclosingType = enclosingType.getDeclaringType();", "+\t\t\t\t\t}", "+\t\t\t\t\tname = enclosingType.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "+\t\t\t\t} else if (type.isLocal() || type.isAnonymous()){", "+\t\t\t\t\tString fullyQualifiedName = type.getFullyQualifiedName();", "+\t\t\t\t\tname = fullyQualifiedName.substring(0, fullyQualifiedName.indexOf('$')).replace('.', '/') + \".java\"; //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(name);", "+\t\t\t\t} else {", "+\t\t\t\t\tname = type.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t}", "+\t\t} else {", "+\t\t\tname = new String(sourceFileName);", "+\t\t\tIPackageFragment pkgFrag = type.getPackageFragment();", "+\t\t\tif (!pkgFrag.isDefaultPackage()) {", "+\t\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');", "+\t\t\t\tname = pkg + '/' + name;", "+\t\t\t}", "+\t\t}", "+\t\tif (name == null) {", "+\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df603351e78120db59309cb047952840", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "d9032a87dfcb69e19b4c3aae869d4a786d1fb149", "commitAfterChange": "eee6512d26cd1c50a9b02d1b4b78531f507d95fc", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "diff": ["-\tpublic char[] findSource(IType type, IBinaryType info) {", "+\tpublic char[] findSource(IType type, String simpleSourceFileName) {", "-\t\tchar[] sourceFileName = info.sourceFileName();", "+\t\tString name = simpleSourceFileName;", "-\t\tString name = null;", "-\t\tif (sourceFileName == null) {", "-\t\t\t/*", "-\t\t\t * We assume that this type has been compiled from a file with its name", "-\t\t\t * For example, A.class comes from A.java and p.A.class comes from a file A.java", "-\t\t\t * in the folder p.", "-\t\t\t */", "-\t\t\ttry {", "-\t\t\t\tif (type.isMember()) {", "-\t\t\t\t\tIType enclosingType = type.getDeclaringType();", "-\t\t\t\t\twhile (enclosingType.getDeclaringType() != null) {", "-\t\t\t\t\t\tenclosingType = enclosingType.getDeclaringType();", "-\t\t\t\t\t}", "-\t\t\t\t\tname = enclosingType.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "-\t\t\t\t} else if (type.isLocal() || type.isAnonymous()){", "-\t\t\t\t\tString fullyQualifiedName = type.getFullyQualifiedName();", "-\t\t\t\t\tname = fullyQualifiedName.substring(0, fullyQualifiedName.indexOf('$')).replace('.', '/') + \".java\"; //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tname = type.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t} else {", "-\t\t\tname = new String(sourceFileName);", "-\t\t\tif (!pkgFrag.isDefaultPackage()) {", "-\t\t\t\tString pkg = pkgFrag.getElementName().replace('.', '/');", "-\t\t\t\tname = pkg + '/' + name;", "-\t\t\t}", "-\t\t}", "-\t\tif (name == null) {", "-\t\t\treturn null;", "+\t\tif (!pkgFrag.isDefaultPackage()) {", "+\t\t\tString pkg = pkgFrag.getElementName().replace('.', '/');", "+\t\t\tname = pkg + '/' + name;"]}], "num": 72842}
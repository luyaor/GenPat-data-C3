{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f76b62d28e3e3bcfc1afb41a42506998", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09fa057144bfebb413344cdf978a39c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "e168a89894f4c34ad40563ef07ce8bbd8e8c6783", "commitAfterChange": "1bbbf8a961dd066b4ec5087feb85c45913c76707", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["+\t\t\tIFile file = (IFile)unit.getResource();", "-\t\t\t", "-\t\t\tif( unit.exists() ){", "+", "+\t\t\tif (unit.exists()) {", "-\t\t\t\t\toldData = new BufferedInputStream( ((IFile)unit.getResource() ).getContents());", "+\t\t\t\t\toldData = new BufferedInputStream( ((IFile)unit.getResource()).getContents());", "-\t\t\t}", "+\t\t\t}\t", "-\t\t\tif( contentsDiffer ){", "-\t\t\t\tunit = pkgFrag.createCompilationUnit(cuName, contents, true, progressMonitor);", "-\t\t\t}", "-\t\t\t", "-\t\t\tif( unit == null ) {\t\t\t\t", "-\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to create unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tthrow new CoreException(status);", "-\t\t\t}", "-\t\t\telse{", "-\t\t\t\tif( contentsDiffer ){\t\t", "-\t\t\t\t\t// make sure the change is commited to disk. ", "-\t\t\t\t\tif( unit.isWorkingCopy() )\t\t\t", "-\t\t\t\t\t\tunit.commitWorkingCopy(true, progressMonitor);\t\t\t", "-\t\t\t\t\telse\t\t\t", "-\t\t\t\t\t\tunit.save(progressMonitor, true);", "-\t\t\t\t}", "-\t\t\t\tfinal IFile file = (IFile)unit.getResource();", "-\t\t\t\tfile.setDerived( true );", "-\t\t\t\t// We used to also make the file read-only. This is a bad idea,", "-\t\t\t\t// as refactorings then fail in the future, which is worse", "-\t\t\t\t// than allowing a user to modify a generated file.", "+\t\t\tif( contentsDiffer ){\t", "-\t\t\t\t// during a batch build", "-\t\t\t\tif( parentFile != null ){", "-\t\t\t\t\taddEntryToFileMaps( parentFile, file );", "+\t\t\t\tif( unit.exists() && unit.isOpen() ){", "+\t\t\t\t\tIBuffer buffer = unit.getBuffer();", "+\t\t\t\t\tif (buffer == null){", "+\t\t\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to update unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tthrow new CoreException(status);", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.setContents(contents.toCharArray());", "+\t\t\t\t\tbuffer.save(progressMonitor, true);", "-\t\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);", "-\t\t\t}", "+\t\t\t\telse{", "+\t\t\t\t\tICompilationUnit newUnit = null;", "+\t\t\t\t\tnewUnit = pkgFrag.createCompilationUnit(cuName, contents, true,", "+\t\t\t\t\t\t\tprogressMonitor);", "+\t\t\t\t\tif( newUnit == null ) {\t\t\t\t", "+\t\t\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to create unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tthrow new CoreException(status);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t\tfile.setDerived(true);", "+\t\t\t// We used to also make the file read-only. This is a bad idea,", "+\t\t\t// as refactorings then fail in the future, which is worse", "+\t\t\t// than allowing a user to modify a generated file.", "+\t\t\t// during a batch build", "+\t\t\tif( parentFile != null ){", "+\t\t\t\taddEntryToFileMaps( parentFile, file );", "+\t\t\t}", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0fbe9e9f2ab734bf2dae3ae6779588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "commitAfterChange": "b7c75d5af8ed9aa46f28be9d8bc08449dc25dc4e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["-\t\t\tIProgressMonitor progressMonitor,", "-\t\t\tString charsetName ) ", "-\t\tthrows CoreException, UnsupportedEncodingException", "+\t\t\tIProgressMonitor progressMonitor)", "+\tthrows CoreException", "-\t\ttry", "-\t\t{", "+\t\ttry{", "+\t\t\tfinal IFolder genFolder = getGeneratedSourceFolder();", "+\t\t\tIPackageFragmentRoot genFragRoot = null;", "+\t\t\tIPackageFragmentRoot[] roots = _javaProject.getAllPackageFragmentRoots();", "+\t\t\tfor (IPackageFragmentRoot root : roots) {", "+\t\t\t\tif( genFolder.equals(root.getResource()) ){", "+\t\t\t\t\tgenFragRoot = root;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif( genFragRoot == null ){", "+\t\t\t\tthrow new IllegalStateException(\"failed to locate package fragment root for \" + genFolder.getName()); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif( typeName.indexOf('/') != -1 )", "+\t\t\t\ttypeName = typeName.replace('/', '.');", "+\t\t\tint separatorIndex = typeName.lastIndexOf('.');\t\t\t", "+\t\t\tfinal String typeSimpleName;", "+\t\t\tfinal String pkgName;", "+\t\t\tif( separatorIndex == -1 ){", "+\t\t\t\tpkgName = \"\"; //$NON-NLS-1$", "+\t\t\t\ttypeSimpleName = typeName;", "+\t\t\t}", "+\t\t\telse{", "+\t\t\t\tpkgName = typeName.substring(0, separatorIndex);", "+\t\t\t\ttypeSimpleName = typeName.substring(separatorIndex + 1, typeName.length());", "+\t\t\t}", "+\t\t\tIPackageFragment pkgFrag = genFragRoot.createPackageFragment(pkgName, true, progressMonitor);", "+\t\t\tif( pkgFrag == null ){", "+\t\t\t\tIStatus status = AptPlugin.createStatus(", "+\t\t\t\t\t\tnew IllegalStateException(\"failed to locate package '\" + pkgName + \"'\"),  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\"Failure generating file\");  //$NON-NLS-1$", "+\t\t\t\tthrow new CoreException(status);", "+\t\t\t}\t\t\t", "+\t\t\tfinal String cuName = typeSimpleName + \".java\"; //$NON-NLS-1$", "-\t\t\tIFile file = getIFileForTypeName( typeName );", "-", "-\t\t\tbyte[] bytes;", "-\t\t\tif ( charsetName == null || charsetName == \"\" ) //$NON-NLS-1$", "-\t\t\t\tbytes = contents.getBytes();", "-\t\t\telse", "-\t\t\t\tbytes = contents.getBytes( charsetName );", "-\t\t\tInputStream is = new ByteArrayInputStream( bytes );", "-\t\t\t", "+\t\t\tICompilationUnit unit = pkgFrag.getCompilationUnit(cuName);", "-\t\t\tif ( !file.exists() )", "-\t\t\t{", "-\t\t\t\tcreateFoldersForFile( file );", "-\t\t\t\tfile.create( is, true, progressMonitor );", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\t// Check if the content has changed", "+\t\t\tif( unit.exists() ){", "+\t\t\t\tInputStream is = null;", "-\t\t\t\t\toldData = new BufferedInputStream(file.getContents());", "+\t\t\t\t\tis = new ByteArrayInputStream( contents.getBytes() );", "+\t\t\t\t\toldData = new BufferedInputStream( ((IFile)unit.getResource() ).getContents());", "-\t\t\t\tif (contentsDiffer) {", "-\t\t\t\t\tfile.setContents( is, true, true, progressMonitor );", "-\t\t\t\t}", "-\t\t\tfile.setDerived( true );", "-\t\t\t// We used to also make the file read-only. This is a bad idea,", "-\t\t\t// as refactorings then fail in the future, which is worse", "-\t\t\t// than allowing a user to modify a generated file.", "+\t\t\tif( contentsDiffer )", "+\t\t\t\tunit = pkgFrag.createCompilationUnit(cuName, contents, true, progressMonitor);", "-\t\t\t// during a batch build", "-\t\t\tif( parentFile != null )", "-\t\t\t\taddEntryToFileMaps( parentFile, file );", "-\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);", "+\t\t\tif( unit == null ) {", "+\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to create unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tthrow new CoreException(status);", "+\t\t\t}", "+\t\t\telse{", "+\t\t\t\tfinal IFile file = (IFile)unit.getResource();", "+\t\t\t\tfile.setDerived( true );", "+\t\t\t\t// We used to also make the file read-only. This is a bad idea,", "+\t\t\t\t// as refactorings then fail in the future, which is worse", "+\t\t\t\t// than allowing a user to modify a generated file.", "+\t\t\t\t", "+\t\t\t\t// during a batch build", "+\t\t\t\tif( parentFile != null )", "+\t\t\t\t\taddEntryToFileMaps( parentFile, file );", "+\t\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);", "+\t\t\t}", "+\t\t\t", "-\t\tcatch (CoreException ce) {", "-\t\t\tthrow ce;", "+\t\tcatch(Exception e){", "+\t\t\tAptPlugin.log(e, \"failed to generate type \" + typeName); //$NON-NLS-1$", "-\t\tcatch (UnsupportedEncodingException uee) {", "-\t\t\tthrow uee;", "-\t\t}", "-\t\tcatch ( Throwable t )", "-\t\t{", "-\t\t\tthrow new CoreException(AptPlugin.createStatus(t, \"Could not generate file for type: \" + typeName)); //$NON-NLS-1$", "-\t\t}", "-\t}", "+\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Failed to generate type \" + typeName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tthrow new CoreException(status);", "+\t}\t"]}], "num": 17655}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb82f4b57d214aabb6e96f3a4ee3e8ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12c3defc004f70f2d6f7a2a37630375a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 256, "signatureBeforeChange": "  public void test2054_markAsDefinitelyUnknown()", "signatureAfterChange": " public void test0737_for_unknown_protection()", "diff": ["+// suggested by https://bugs.eclipse.org/bugs/show_bug.cgi?id=127570", "+public void test0737_for_unknown_protection() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class X {\\n\" + ", "+\t\t\t\"  public boolean foo(Boolean p) {\\n\" + ", "+\t\t\t\"    Boolean b = null;\\n\" + ", "+\t\t\t\"    for (int i = 0; i < 1; i++) {\\n\" + ", "+\t\t\t\"      if (b == p) {\\n\" + // tells us that p is null as well", "+\t\t\t\"        // empty\\n\" + ", "+\t\t\t\"      }\\n\" +", "+\t\t\t\"      else {\\n\" +", "+\t\t\t\"        continue;\\n\" +", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"      if (b.booleanValue()) {\\n\" + // complain b can only be null", "+\t\t\t\"        return b.booleanValue();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    return false;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tif (b.booleanValue()) {\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"The variable b can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}", "-", "-public void test2054_markAsDefinitelyUnknown() {", "-\tlong [][][] testData = {", "-\t\t{{0,0,0,0},{1,0,1,1}},", "-\t\t{{0,0,0,1},{1,0,1,1}},", "-\t\t{{0,0,1,0},{1,0,1,1}},", "-\t\t{{0,0,1,1},{1,0,1,1}},", "-\t\t{{0,1,0,0},{1,0,1,1}},", "-\t\t{{0,1,0,1},{1,0,1,1}},", "-\t\t{{0,1,1,0},{1,0,1,1}},", "-\t\t{{0,1,1,1},{1,0,1,1}},", "-\t\t{{1,0,0,0},{1,0,1,1}},", "-\t\t{{1,0,0,1},{1,0,1,1}},", "-\t\t{{1,0,1,0},{1,0,1,1}},", "-\t\t{{1,0,1,1},{1,0,1,1}},", "-\t\t{{1,1,0,0},{1,0,1,1}},", "-\t\t{{1,1,0,1},{1,0,1,1}},", "-\t\t{{1,1,1,0},{1,0,1,1}},", "-\t\t{{1,1,1,1},{1,0,1,1}},", "-\t};", "-\tint failures = 0;", "-\tLocalVariableBinding local = new TestLocalVariableBinding(0);", "-\tfor (int i = 0; i < testData.length; i++) {", "-\t\tUnconditionalFlowInfoTestHarness ", "-\t\t\tresult = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][0]);", "-\t\tresult.markAsDefinitelyUnknown(local);", "-\t\tif (!(result.testEquals(UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][1])))) {", "-\t\t\tif (failures == 0) {", "-\t\t\t\tSystem.out.println(\"markAsDefinitelyUnknown failures: \");", "-\t\t\t}", "-\t\t\tfailures++;", "-\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\"}, // instead of: \" + testStringValueOf(testData[i][1]));", "-\t\t}", "-\t}", "-\tlocal = new TestLocalVariableBinding(64);", "-\tfor (int i = 0; i < testData.length; i++) {", "-\t\tUnconditionalFlowInfoTestHarness ", "-\t\t\tresult = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][0], 64);", "-\t\tresult.markAsDefinitelyUnknown(local);", "-\t\tif (!(result.testEquals(UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][1], 64)))) {", "-\t\t\tif (failures == 0) {", "-\t\t\t\tSystem.out.println(\"markAsDefinitelyUnknown failures: \");", "-\t\t\t}", "-\t\t\tfailures++;", "-\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\"}, // (64) instead of: \" + testStringValueOf(testData[i][1]));", "-\t\t}", "-\t}", "-\tif (printTablesAsNames) {", "-\t\tSystem.out.println(\"RECAP TABLE FOR MARK DEFINITELY UNKNOWN\");", "-\t\tfor (int i = 0; i < testData.length; i++) {", "-\t\t\tSystem.out.println(testSymbolicValueOf(testData[i][0]) + \" -> \" +", "-\t\t\t\ttestSymbolicValueOf(testData[i][1]));", "-\t\t}\t", "-\t}", "-\tif (printTablesAsCodes) {", "-\t\tSystem.out.println(\"RECAP TABLE FOR MARK DEFINITELY UNKNOWN\");", "-\t\tfor (int i = 0; i < testData.length; i++) {", "-\t\t\tSystem.out.println(testCodedValueOf(testData[i][0]) + \" \" +", "-\t\t\t\ttestCodedValueOf(testData[i][1]));", "-\t\t}", "-\t}", "-\tassertTrue(\"nb of failures: \" + failures, failures == 0);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f71ee1486b5fd7474c70af9db7f9df0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 334, "methodNumberAfterChange": 317, "signatureBeforeChange": "  public void test2053_markAsDefinitelyNull()", "signatureAfterChange": " public void test1500()", "diff": ["+// encoding validation", "+public void test1500() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o, int i, boolean b, Object u) {\\n\" +", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"    switch (i) {\\n\" + ", "+\t\t\t\"      case 0:\\n\" +", "+\t\t\t\"        if (b) {\\n\" +", "+\t\t\t\"          o = u;\\n\" +", "+\t\t\t\"        } else {\\n\" +", "+\t\t\t\"          o = new Object();\\n\" +", "+\t\t\t\"        }\\n\" +", "+\t\t\t\"        break;\\n\" + ", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"    if (o == null) { /* empty */ }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}", "-", "-public void test2053_markAsDefinitelyNull() {", "-\tlong [][][] testData = {", "-\t\t{{0,0,0,0},{1,0,1,0}},", "-\t\t{{0,0,0,1},{1,0,1,0}},", "-\t\t{{0,0,1,0},{1,0,1,0}},", "-\t\t{{0,0,1,1},{1,0,1,0}},", "-\t\t{{0,1,0,0},{1,0,1,0}},", "-\t\t{{0,1,0,1},{1,0,1,0}},", "-\t\t{{0,1,1,0},{1,0,1,0}},", "-\t\t{{0,1,1,1},{1,0,1,0}},", "-\t\t{{1,0,0,0},{1,0,1,0}},", "-\t\t{{1,0,0,1},{1,0,1,0}},", "-\t\t{{1,0,1,0},{1,0,1,0}},", "-\t\t{{1,0,1,1},{1,0,1,0}},", "-\t\t{{1,1,0,0},{1,0,1,0}},", "-\t\t{{1,1,0,1},{1,0,1,0}},", "-\t\t{{1,1,1,0},{1,0,1,0}},", "-\t\t{{1,1,1,1},{1,0,1,0}},", "-\t};", "-\tint failures = 0;", "-\tLocalVariableBinding local = new TestLocalVariableBinding(0);", "-\tfor (int i = 0; i < testData.length; i++) {", "-\t\tUnconditionalFlowInfoTestHarness ", "-\t\t\tresult = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][0]);", "-\t\tresult.markAsDefinitelyNull(local);", "-\t\tif (!(result.testEquals(UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][1])))) {", "-\t\t\tif (failures == 0) {", "-\t\t\t\tSystem.out.println(\"markAsDefinitelyNull failures: \");", "-\t\t\t}", "-\t\t\tfailures++;", "-\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\"}, // instead of: \" + testStringValueOf(testData[i][1]));", "-\t\t}", "-\t}", "-\tlocal = new TestLocalVariableBinding(64);", "-\tfor (int i = 0; i < testData.length; i++) {", "-\t\tUnconditionalFlowInfoTestHarness ", "-\t\t\tresult = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][0], 64);", "-\t\tresult.markAsDefinitelyNull(local);", "-\t\tif (!(result.testEquals(UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][1], 64)))) {", "-\t\t\tif (failures == 0) {", "-\t\t\t\tSystem.out.println(\"markAsDefinitelyNull failures: \");", "-\t\t\t}", "-\t\t\tfailures++;", "-\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\"}, // (64) instead of: \" + testStringValueOf(testData[i][1]));", "-\t\t}", "-\t}", "-\tif (printTablesAsNames) {", "-\t\tSystem.out.println(\"RECAP TABLE FOR MARK DEFINITELY NULL\");", "-\t\tfor (int i = 0; i < testData.length; i++) {", "-\t\t\tSystem.out.println(testSymbolicValueOf(testData[i][0]) + \" -> \" +", "-\t\t\t\ttestSymbolicValueOf(testData[i][1]));", "-\t\t}\t", "-\t}", "-\tif (printTablesAsCodes) {", "-\t\tSystem.out.println(\"RECAP TABLE FOR MARK DEFINITELY NULL\");", "-\t\tfor (int i = 0; i < testData.length; i++) {", "-\t\t\tSystem.out.println(testCodedValueOf(testData[i][0]) + \" \" +", "-\t\t\t\ttestCodedValueOf(testData[i][1]));", "-\t\t}", "-\t}", "-\tassertTrue(\"nb of failures: \" + failures, failures == 0);", "-}"]}], "num": 34883}
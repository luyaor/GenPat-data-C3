{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b75ac33b988d15264802169723c4437", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1082e8dd7e6ce7857643a39075925dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "b8d589b72f11298620e188a74f142f9887cfc702", "commitAfterChange": "92a5335907fd0cb9878a81d6d82d370dc8deacce", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "  protected void addAffectedSourceFiles(char[] secondaryTypeName)", "signatureAfterChange": "  protected void compile(SourceFile[] units, SourceFile[] additionalUnits, boolean compilingFirstGroup)", "diff": ["-protected void addAffectedSourceFiles(char[] secondaryTypeName) {", "-\t// the secondary type search can have too many false hits if we addAffectedSource files using all the qualified type names", "-\t// of each secondary type... so look for the dependents 1 file at a time", "-\tint index = CharOperation.lastIndexOf('/', secondaryTypeName);", "-\tString packageName = index == -1 ? \"\" : new String(CharOperation.subarray(secondaryTypeName, 0, index)); //$NON-NLS-1$", "-\tStringSet packageNames = new StringSet(1);", "-\tpackageNames.add(packageName);", "-\tString typeName = new String(index == -1 ? secondaryTypeName : CharOperation.subarray(secondaryTypeName, index + 1, secondaryTypeName.length));", "-\tStringSet typeNames = new StringSet(1);", "-\ttypeNames.add(typeName);", "-", "-\taddAffectedSourceFiles(packageNames, typeNames);", "-}", "+protected void compile(SourceFile[] units, SourceFile[] additionalUnits, boolean compilingFirstGroup) {", "+\tif (compilingFirstGroup && additionalUnits != null) {", "+\t\t// add any source file from additionalUnits to units if it defines secondary types", "+\t\t// otherwise its possible during testing with MAX_AT_ONCE == 1 that a secondary type", "+\t\t// can cause an infinite loop as it alternates between not found and defined, see bug 146324", "+\t\tArrayList extras = null;", "+\t\tfor (int i = 0, l = additionalUnits.length; i < l; i++) {", "+\t\t\tSourceFile unit = additionalUnits[i];", "+\t\t\tif (unit != null && newState.getDefinedTypeNamesFor(unit.typeLocator()) != null) {", "+\t\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\t\tSystem.out.println(\"About to compile file with secondary types \"+ unit.typeLocator()); //$NON-NLS-1$", "+\t\t\t\tif (extras == null)", "+\t\t\t\t\textras = new ArrayList(3);", "+\t\t\t\textras.add(unit);", "+\t\t\t}", "+\t\t}", "+\t\tif (extras != null) {", "+\t\t\tint oldLength = units.length;", "+\t\t\tint toAdd = extras.size();", "+\t\t\tSystem.arraycopy(units, 0, units = new SourceFile[oldLength + toAdd], 0, oldLength);", "+\t\t\tfor (int i = 0; i < toAdd; i++)", "+\t\t\t\tunits[oldLength++] = (SourceFile) extras.get(i);", "+\t\t}", "+\t}", "+\tsuper.compile(units, additionalUnits, compilingFirstGroup);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71bfbe2b474ff1fa4757747218974727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic boolean visit(UnaryExpression unaryExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(", "+\t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference,", "+\t\t\tClassScope scope) {", "+\t\tfinal int numberOfParens = (parameterizedSingleTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(parameterizedSingleTypeReference, numberOfParens);", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_parameterized_type_reference);", "+\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_parameterized_type_reference) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tTypeReference[] typeArguments = parameterizedSingleTypeReference.typeArguments;", "+\t\tint typeArgumentsLength = typeArguments.length;", "+\t\tfor (int i = 0; i < typeArgumentsLength - 1; i++) {", "+\t\t\ttypeArguments[i].traverse(this, scope);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_parameterized_type_reference);", "+\t\t\tif (this.preferences.insert_space_after_comma_in_parameterized_type_reference) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}\t\t\t", "+\t\t}", "+\t\ttypeArguments[typeArgumentsLength - 1].traverse(this, scope);", "+\t\tif (isClosingGenericToken()) {", "+\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_parameterized_type_reference);", "+\t\t}", "+\t\tint dimensions = parameterizedSingleTypeReference.dimensions;", "+\t\tif (dimensions != 0) {", "+\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_type_reference) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\tif (this.preferences.insert_space_between_brackets_in_array_type_reference) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t}", "+\t\t}\t\t", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(parameterizedSingleTypeReference, numberOfParens);", "+\t\t}", "+\t\treturn false;"]}], "num": 60949}
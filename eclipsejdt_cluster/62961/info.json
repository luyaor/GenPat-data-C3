{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d34702ba32d7118a36f0a3334c5ce5c", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e3aefcbb428ae28b2325deb406af43d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "55f209d341e5b4a7686ec5f19b7f1d49ca53b06d", "commitAfterChange": "500b16b904cdef65e8101789f80e15e9737f379a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\tFieldBinding fieldBinding;", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tif (!(fieldBinding = (FieldBinding) this.codegenBinding).isConstantValue()) { // directly use inlined value for constant fields", "-\t\t\t\t\t\t\tboolean isStatic;", "-\t\t\t\t\t\t\tif (!(isStatic = fieldBinding.isStatic())) {", "+\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\t\t\tif (fieldBinding.isConstantValue()) {", "+\t\t\t\t\t\t// directly use inlined value for constant fields", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateConstant(fieldBinding.constant(), implicitConversion);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (valueRequired || currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\t\tboolean isStatic = fieldBinding.isStatic();", "+\t\t\t\t\t\t\tif (!isStatic) {", "-\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);", "-\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t} else { // directly use the inlined value", "-\t\t\t\t\t\t\tcodeStream.generateConstant(fieldBinding.constant(), implicitConversion);", "+\t\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "+\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\t\t\tswitch (fieldBinding.type.id) {", "+\t\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0a7ff029079cb991aa8c32859b28933", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "55f209d341e5b4a7686ec5f19b7f1d49ca53b06d", "commitAfterChange": "500b16b904cdef65e8101789f80e15e9737f379a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\t\tif (valueRequired) {", "-\t\t\t\tif (!this.codegenBinding.isConstantValue()) {", "+\t\t\tif (this.codegenBinding.isConstantValue()) {", "+\t\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.generateConstant(this.codegenBinding.constant(), implicitConversion);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\t\tif (valueRequired || currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\t\tswitch (this.codegenBinding.type.id) {", "+\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "-\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\tif (!isStatic) {", "+\t\t\t\t\tif (!isStatic){", "-\t\t\t\t\tcodeStream.generateConstant(this.codegenBinding.constant(), implicitConversion);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (!isStatic){", "-\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\tcodeStream.pop();"]}], "num": 62961}
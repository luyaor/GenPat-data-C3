{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c50d90609b3a38ac4c1e867fdf6f48cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31f0084c2f9faf5512cc3708ef1a8cc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "ebec254e498341be9350e02449a0dbae42c5870c", "commitAfterChange": "d100192f697f326dff66b368f9d71d16adde29e2", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\tthis.hasJavaLangObjectAsExpectedType = false;", "-\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\taddExpectedType(binding);", "+\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\taddExpectedType(binding);", "+\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "-\t\t\t\t\t\taddExpectedType(scope.getJavaLangString());", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "+\t\t\t\t\t\taddExpectedType(scope.getJavaLangString(), scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "-\t\t\t\t\t\t\t\taddExpectedType(typeVariableBindings[0].firstBound);", "+\t\t\t\t\t\t\t\taddExpectedType(typeVariableBindings[0].firstBound, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "-\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\taddExpectedType(TypeBinding.LONG);", "+\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\taddExpectedType(TypeBinding.LONG, scope);", "-\t\t\t\taddExpectedType(typeVariables[index].firstBound);", "+\t\t\t\t", "+\t\t\t\tTypeBinding bound = typeVariables[index].firstBound;", "+\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "-\t\t\t\t\t\t\taddExpectedType(typeVariables[j].firstBound);", "+\t\t\t\t\t\t\tTypeBinding bound = typeVariables[j].firstBound;", "+\t\t\t\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "-\t\t\t\taddExpectedType(memberValuePair.binding.returnType);", "+\t\t\t\taddExpectedType(memberValuePair.binding.returnType, scope);", "-\t\t\t\t\t\taddExpectedType(methodBindings[0].returnType);", "+\t\t\t\t\t\taddExpectedType(methodBindings[0].returnType, scope);", "-\t\t\t\t\t\t\taddExpectedType(exceptions[i]);", "+\t\t\t\t\t\t\taddExpectedType(exceptions[i], scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb77b2e2d78555aa334e657e70176610", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "57799a8beed7490f3a4382e24299a6b44ffe4faf", "commitAfterChange": "a623a62c4949e78ffb1e3db21245d05c22d9fb98", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "signatureAfterChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "diff": ["-\t\t\treturn format(K_COMPILATION_UNIT, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());", "+\t\t", "+\t\tMap options = JavaCore.getOptions();", "+\t\t// probing algorithm", "+\t\t/*", "+\t\t * 1) expression", "+\t\t * 2) statements", "+\t\t * 3) classbody declarations", "+\t\t * 4) compilation unit", "+\t\t */", "+\t\tExpression expression = parseExpression(source.toCharArray(), options);", "+\t\t", "+\t\tif (expression != null) {", "+\t\t\treturn internalFormatExpression(source, indentationLevel, positions, lineSeparator, options, expression);", "+\t\t}", "+", "+\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), options);", "+\t\t", "+\t\tif (constructorDeclaration.statements != null) {", "+\t\t\treturn internalFormatStatements(source, indentationLevel, positions, lineSeparator, options, constructorDeclaration);", "+\t\t}", "+\t\t", "+\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), options);", "+\t\t", "+\t\tif (bodyDeclarations != null) {", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options, bodyDeclarations);", "+\t\t}", "+", "+\t\treturn format(K_COMPILATION_UNIT, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());"]}], "num": 50077}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c05aa63b7447033cf5fe4d9cb07beae4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bedd275e4b60dbe320456aff356570f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding referenceTb = type.resolveType(scope);", "+\t\tTypeBinding referenceType = type.resolveType(scope);", "+\t\t", "-\t\tif (referenceTb == VoidBinding) {", "+\t\tif (referenceType == VoidBinding) {", "-\t\t\treferenceTb = null; // will return below", "+\t\t\treferenceType = null;", "-\t\tint lengthDim = -1;", "+\t\tint explicitDimIndex = -1;", "-\t\t\t\tif (lengthDim == -1)", "-\t\t\t\t\tlengthDim = i;", "-\t\t\t} else if (", "-\t\t\t\tlengthDim != -1) {", "+\t\t\t\tif (explicitDimIndex < 0) explicitDimIndex = i;", "+\t\t\t} else if (explicitDimIndex> 0) {", "-\t\t\t\treturn null;", "-\t\tif (referenceTb == null)", "-\t\t\treturn null;", "-\t\t// lengthDim == -1 says if all dimensions are nulled", "+\t\t// explicitDimIndex < 0 says if all dimensions are nulled", "-\t\t\tif (lengthDim == -1) {", "+\t\t\tif (explicitDimIndex < 0) {", "-\t\t\t\treturn null;", "-\t\t} else if (lengthDim != -1) {", "+\t\t} else if (explicitDimIndex >= 0) {", "-\t\t\treturn null;", "-\t\tfor (int i = 0; i <= lengthDim; i++) {", "-\t\t\tTypeBinding dimTb = dimensions[i].resolveTypeExpecting(scope, IntBinding);", "-\t\t\tif (dimTb == null)", "-\t\t\t\treturn null;", "-\t\t\tdimensions[i].implicitWidening(IntBinding, dimTb);", "+\t\tfor (int i = 0; i <= explicitDimIndex; i++) {", "+\t\t\tif (dimensions[i] != null) {", "+\t\t\t\tTypeBinding dimensionType = dimensions[i].resolveTypeExpecting(scope, IntBinding);", "+\t\t\t\tif (dimensionType != null) {", "+\t\t\t\t\tdimensions[i].implicitWidening(IntBinding, dimensionType);", "+\t\t\t\t}", "+\t\t\t}", "-\t\tthis.expressionType = arrayTb = scope.createArray(referenceTb, dimensions.length);", "+\t\tif (referenceType != null) {", "+\t\t\tthis.resolvedType = scope.createArray(referenceType, dimensions.length);", "-\t\t// check the initializer", "-\t\tif (initializer != null)", "-\t\t\tif ((initializer.resolveTypeExpecting(scope, arrayTb)) != null)", "-\t\t\t\tinitializer.binding = arrayTb;", "-\t\treturn arrayTb;", "+\t\t\t// check the initializer", "+\t\t\tif (initializer != null) {", "+\t\t\t\tif ((initializer.resolveTypeExpecting(scope, this.resolvedType)) != null)", "+\t\t\t\t\tinitializer.binding = (ArrayBinding)this.resolvedType;", "+\t\t\t}", "+\t\t}", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "537df77c30463476a0c4928b1dee8abd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "6c5ff7a40e06214003233124a78f91b46a0db4e6", "commitAfterChange": "abfab6e38455079c19f7f3fadcf15c77c144ade8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-", "-\t\tTypeBinding referenceType = type.resolveType(scope, true /* check bounds*/);", "+\t\tTypeBinding referenceType = this.type.resolveType(scope, true /* check bounds*/);", "-\t\tconstant = Constant.NotAConstant;", "+\t\tthis.constant = Constant.NotAConstant;", "-\t\tloop: for (int i = dimensions.length; --i >= 0;) {", "-\t\t\tif (dimensions[i] != null) {", "+\t\tloop: for (int i = this.dimensions.length; --i >= 0;) {", "+\t\t\tif (this.dimensions[i] != null) {", "-\t\tif (initializer == null) {", "+\t\tif (this.initializer == null) {", "-\t\t\tif (dimensions[i] != null) {", "-\t\t\t\tTypeBinding dimensionType = dimensions[i].resolveTypeExpecting(scope, TypeBinding.INT);", "+\t\t\tExpression dimExpression;", "+\t\t\tif ((dimExpression = this.dimensions[i]) != null) {", "+\t\t\t\tTypeBinding dimensionType = dimExpression.resolveTypeExpecting(scope, TypeBinding.INT);", "-\t\t\t\t\tdimensions[i].computeConversion(scope, TypeBinding.INT, dimensionType);", "+\t\t\t\t\tthis.dimensions[i].computeConversion(scope, TypeBinding.INT, dimensionType);", "-\t\t\tif (dimensions.length > 255) {", "+\t\t\tif (this.dimensions.length > 255) {", "-\t\t\tthis.resolvedType = scope.createArrayType(referenceType, dimensions.length);", "+\t\t\tthis.resolvedType = scope.createArrayType(referenceType, this.dimensions.length);", "-\t\t\tif (initializer != null) {", "-\t\t\t\tif ((initializer.resolveTypeExpecting(scope, this.resolvedType)) != null)", "-\t\t\t\t\tinitializer.binding = (ArrayBinding)this.resolvedType;", "+\t\t\tif (this.initializer != null) {", "+\t\t\t\tif ((this.initializer.resolveTypeExpecting(scope, this.resolvedType)) != null)", "+\t\t\t\t\tthis.initializer.binding = (ArrayBinding)this.resolvedType;"]}], "num": 850}
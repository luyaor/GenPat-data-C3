{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b72268ae6154f59a1e758784b8d6647", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ec0c1092e5909e2cad695b7a1358c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t\t\t\tscope.problemReporter().typeMismatchError(expressionType, elementType, expression);", "+\t\t\t\t\tscope.problemReporter().typeMismatchError(expressionType, elementType, expression, null);", "-\t\t\t\tscope.problemReporter().typeMismatchError(this.resolvedType, expectedType, this);", "+\t\t\t\tscope.problemReporter().typeMismatchError(this.resolvedType, expectedType, this, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1870c24ed292db1608d707292ff06e8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (lhsType != null) ", "+\tif (lhsType != null) {", "+\t}", "-\t", "-\tif (lhsType != rhsType) // must call before computeConversion() and typeMismatchError()", "+\tif (lhsType != rhsType) { // must call before computeConversion() and typeMismatchError()", "+\t}", "-\t} ", "-\tscope.problemReporter().typeMismatchError(rhsType, lhsType, this.expression);", "+\t}", "+\tscope.problemReporter().typeMismatchError(rhsType, lhsType, this.expression, this.lhs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8605ad748d270ceb0455a520b04d5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tif (valueIfTrueType != null && !valueIfTrueType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\tscope.problemReporter().typeMismatchError(valueIfTrueType, this.expectedType, this.valueIfTrue, null);", "+\t\t\t}", "+\t\t\tif (valueIfFalseType != null && !valueIfFalseType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\tscope.problemReporter().typeMismatchError(valueIfFalseType, this.expectedType, this.valueIfFalse, null);", "+\t\t\t}"]}], "num": 30566}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f239a22ec4e4fa9acb180a0696db607d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b73c442fd7fff21daf4916fe8251d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b5a77485d9f402d8e9320bc140c7dcd6fc18b9c8", "commitAfterChange": "168f2cd311cda9055baec08babe652e5b9c3fb27", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\tif (level != null) { // ensure that the reference has not been already reported while visiting", "+\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);", "-\t\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210bf526f6b0e878db97d5727b15227c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "b5c1652db351290a42a75d3cdd3241441a4413e2", "commitAfterChange": "43bc355f1a88457ab70fc9f06fe5c67fac23d207", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "signatureAfterChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "diff": ["-\t\t\tExpression expression = parseMemberValue(annotationSource);", "-\t\t\t/*", "-\t\t\t * expression can be null or not an annotation if the source has changed between", "-\t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "-\t\t\t * this parsing occured.", "-\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "-\t\t\t */", "-\t\t\tif (expression instanceof Annotation) {", "-\t\t\t\tannotations[recordedAnnotations++] = (Annotation) expression;", "+\t\t\tif (annotationSource != null) {", "+    \t\t\tExpression expression = parseMemberValue(annotationSource);", "+    \t\t\t/*", "+    \t\t\t * expression can be null or not an annotation if the source has changed between", "+    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "+    \t\t\t * this parsing occured.", "+    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "+    \t\t\t */", "+    \t\t\tif (expression instanceof Annotation) {", "+    \t\t\t\tannotations[recordedAnnotations++] = (Annotation) expression;", "+    \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dd5ace7e7929d60971d4ed56531ae23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public synchronized void removeIndexPath(IPath path)", "signatureAfterChange": " public synchronized void removeIndexPath(IPath path)", "diff": ["-\tfor (int i=0; i<ptr; i++) {", "-\t\tthis.indexes.remove(locations[i]);", "+\tif (locations != null) {", "+\t\tfor (int i=0; i<ptr; i++) {", "+\t\t\tthis.indexes.remove(locations[i]);", "+\t\t}", "+\t\tremoveIndexesState(locations);", "-\tremoveIndexesState(locations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451321cf7a01e123bc51e7f4385e8f80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "commitAfterChange": "d33b892acebec2bc1c5d62c55db84a184bb6f3b3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t// remaining binding keys are package binding keys or base type binding keys", "+\t\t\t// remaining binding keys", "-\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "-\t\t\t\t", "-\t\t\t\t// pass it to requestor", "-\t\t\t\tif (binding != null)", "-\t\t\t\t\tastRequestor.acceptBinding(((BindingKey) this.requestedKeys.valueTable[j]).getKey(), binding);", "+\t\t\t\tif (compilerBinding != null) {", "+\t\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "+\t\t\t\t\tif (binding != null)", "+\t\t\t\t\t\t// pass it to requestor", "+\t\t\t\t\t\tastRequestor.acceptBinding(((BindingKey) this.requestedKeys.valueTable[j]).getKey(), binding);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d76cb999170f5b74fcd467082095c01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "b1bbf2139f3f67cdaea0480f0decf88934849c4e", "commitAfterChange": "13243a5d10e37b2eb5c996e3858760c226a8e1be", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException", "signatureAfterChange": "\r protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException", "diff": ["-\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "-\t\tbuffer.setContents(original.getContents());\r", "+\t\tif (buffer != null){\r", "+\t\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "+\t\t\tbuffer.setContents(original.getContents());\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5415094ce8036f55a0c64fa93fda52fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "a5afd2507bd69ba3b522e38d3b9c62acfc31d170", "commitAfterChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\t\tIProblemRequestor problemRequestor = owner.getProblemRequestor(workingCopy);", "-\t\tif (problemRequestor instanceof ProblemRequestor) {", "-\t\t\t((ProblemRequestor) problemRequestor).initialize(source.toCharArray());", "+\t\tif (owner != null) {", "+\t\t\tIProblemRequestor problemRequestor = owner.getProblemRequestor(workingCopy);", "+\t\t\tif (problemRequestor instanceof ProblemRequestor) {", "+\t\t\t\t((ProblemRequestor) problemRequestor).initialize(source.toCharArray());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541ba76a9976ab234cd2653b6e77e6c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "d2fba759d7837de1441525f226f602f595016e9d", "commitAfterChange": "fa4ac5f2b99f8df2398d7d03706808dec36119dc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t@Override \tprotected void updateControls()", "signatureAfterChange": " \t@Override \tprotected void updateControls()", "diff": ["-\t\tboolean aptEnabled= Boolean.valueOf(getValue(KEY_APTENABLED)).booleanValue();", "-\t\tfAptEnabledField.setSelection(aptEnabled);", "+\t\tif (fAptEnabledField != null) {", "+\t\t\tboolean aptEnabled= Boolean.valueOf(getValue(KEY_APTENABLED)).booleanValue();", "+\t\t\tfAptEnabledField.setSelection(aptEnabled);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed6591e0c01936215683031972f2ccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "5e15d21a2464ebcd530c342a2e007320c442592a", "commitAfterChange": "995f69b7113814f96df0af814f13b94a8deb9b04", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void shutdown()", "signatureAfterChange": " public void shutdown()", "diff": ["-\tObject[] indexNames = indexStates.keyTable;", "-\tfor (int i = 0, l = indexNames.length; i < l; i++) {", "-\t\tString key = (String) indexNames[i];", "-\t\tif (key != null && !knownPaths.containsKey(key))", "-\t\t\tupdateIndexState(key, null);", "+\tif (indexStates != null) {", "+\t\tObject[] indexNames = indexStates.keyTable;", "+\t\tfor (int i = 0, l = indexNames.length; i < l; i++) {", "+\t\t\tString key = (String) indexNames[i];", "+\t\t\tif (key != null && !knownPaths.containsKey(key))", "+\t\t\t\tupdateIndexState(key, null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f717ebab84c2e5fed71c3a5539d840c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c4eeb254aa3e04b05bb343162722324faf2e87ad", "commitAfterChange": "28bb849fe2ae5896fc2b7b393e373422ae130f52", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "diff": ["-\t\t\tremovedRoots = new HashMap();", "-\t\t\tfor (int i = 0; i < roots.length; i++) {", "-\t\t\t\tIPackageFragmentRoot root = roots[i];", "-\t\t\t\tremovedRoots.put(root.getPath(), root);", "+\t\t\tif (roots != null) {", "+\t\t\t\tremovedRoots = new HashMap();", "+\t\t\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\t\t\tremovedRoots.put(root.getPath(), root);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6654c6c89861571587fe00fb6f22944a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "458d6ecb95c70f1df88b46b781028646894448a8", "commitAfterChange": "eae1dc9444e6dfc78448846e89895dbf064cc65b", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic MethodBinding getExactConstructor(TypeBinding receiverType, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getExactConstructor(TypeBinding receiverType, InvocationSite invocationSite)", "diff": ["-\t\tfinal TypeVariableBinding[] typeVariables = exactConstructor.typeVariables();", "-\t\tif (typeVariables != Binding.NO_TYPE_VARIABLES) {", "-\t\t\tif (typeVariables.length != genericTypeArguments.length)", "-\t\t\t\treturn null;", "-\t\t\texactConstructor = environment().createParameterizedGenericMethod(exactConstructor, genericTypeArguments);", "+\t\tif (exactConstructor != null) {", "+\t\t\tfinal TypeVariableBinding[] typeVariables = exactConstructor.typeVariables();", "+\t\t\tif (typeVariables != Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\tif (typeVariables.length != genericTypeArguments.length)", "+\t\t\t\t\treturn null;", "+\t\t\t\texactConstructor = environment().createParameterizedGenericMethod(exactConstructor, genericTypeArguments);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a73a1422d20108742fd7f4ede793b38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PossibleMatch.java", "commitBeforeChange": "19670fddbc0a6ddb9ec9d01212e02b553d64570a", "commitAfterChange": "6c9185aae05dfac5ea0388c66097677dae2d7a93", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public char[] getContents()", "signatureAfterChange": " public char[] getContents()", "diff": ["-\t\t\tIType type = ((ClassFile) this.openable).getType();", "-\t\t\tcontents = sourceMapper.findSource(type, fileName);", "+\t\t\tif (sourceMapper != null) {", "+\t\t\t\tIType type = ((ClassFile) this.openable).getType();", "+\t\t\t\tcontents = sourceMapper.findSource(type, fileName);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da22f273e4806133310de42d5be629db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "c2e1b19147149cbb623e6a2a40f8f224348d89bd", "commitAfterChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif (exceptionArgumentType.id == T_void){\r", "-\t\t\t\tscope.problemReporter().illegalVoidExpression(exceptionArgument);\r", "+\t\t\tif (exceptionArgumentType != null){\r", "+\t\t\t\tif (exceptionArgumentType.id == T_void){\r", "+\t\t\t\t\tscope.problemReporter().illegalVoidExpression(exceptionArgument);\r", "+\t\t\t\t}\r", "+\t\t\t\texceptionArgument.implicitConversion = (exceptionArgumentType.id << 4) + exceptionArgumentType.id;\r", "-\t\t\texceptionArgument.implicitConversion = (exceptionArgumentType.id << 4) + exceptionArgumentType.id;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7895be54a9efcd7f0ce93a039e2e0ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "01c0777b298a5c62a2819ec93e382b1ab9650906", "commitAfterChange": "f58d2dbeb8fe5ca58dc0a3fee57b3d7a41711711", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void discardJobs(String jobFamily)", "signatureAfterChange": " \tpublic void discardJobs(String jobFamily)", "diff": ["-\t\t\t\t\tthis.awaitingJobs[i] = null;", "-\t\t\t\t\tif (!(jobFamily == null || currentJob.belongsTo(jobFamily))) { // copy down, compacting", "-\t\t\t\t\t\tthis.awaitingJobs[++loc] = currentJob;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\tUtil.verbose(\"-> discarding background job  - \" + currentJob); //$NON-NLS-1$", "-\t\t\t\t\t\tcurrentJob.cancel();", "+\t\t\t\t\tif (currentJob != null) { // sanity check", "+\t\t\t\t\t\tthis.awaitingJobs[i] = null;", "+\t\t\t\t\t\tif (!(jobFamily == null || currentJob.belongsTo(jobFamily))) { // copy down, compacting", "+\t\t\t\t\t\t\tthis.awaitingJobs[++loc] = currentJob;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\t\tUtil.verbose(\"-> discarding background job  - \" + currentJob); //$NON-NLS-1$", "+\t\t\t\t\t\t\tcurrentJob.cancel();", "+\t\t\t\t\t\t}"]}], "num": 40767}
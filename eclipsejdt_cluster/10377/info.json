{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "447fd1e65705f37f43d23560f2d9333b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c99e7fa65767df1684f3c1e057e315b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/ProcessorTestStatus.java", "commitBeforeChange": "d1124c61c8f3ff39bbe128bdbccc90a8a92cba7f", "commitAfterChange": "a626dbe34a0108abdf11028aa7b5540f10df6847", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void setProcessorRan()", "signatureAfterChange": " \tpublic static void setProcessorRan()", "diff": ["-\t\ts_errorStatus = NO_ERRORS;", "+\t\tif (NOT_RUN.equals(s_errorStatus))", "+\t\t\ts_errorStatus = NO_ERRORS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8a0cb6a00dd3427671d59f197dad262", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cb102deeeb30ec755d64a8d266f5423000dc4f4e", "commitAfterChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t} ", "-\t\t\tmatchingMethod =", "-\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);", "+\t\t\t}", "+\t\t\t// when receiverType is abstract then need to find possible matches in interfaces", "+\t\t\tif (receiverType.isAbstract())", "+\t\t\t\tmatchingMethod =", "+\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);", "+\t\t\t// reduces secondary errors since missing interface method error is already reported", "-\t\t\tmatchingMethod = mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite);", "+\t\t\tmatchingMethod = mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t// see if there is a better match in the interfaces", "+\t\t\t\t// see if there is a better match in the interfaces - see AutoBoxingTest 99"]}], "num": 10377}
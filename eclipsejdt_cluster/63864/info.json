{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cbeba25116745758ccb568d5a048db1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b4f3570c9cc4933d0eab67d4f057ada", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9f02272e8245618968be36ae4ecb54a3d73ce22b", "commitAfterChange": "98015f05ba7582d26b70dbbe6918b5efeacff147", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " public void inheritedMethodsHaveIncompatibleReturnTypes(SourceTypeBinding type, MethodBinding[] inheritedMethods, int length)", "signatureAfterChange": " public void inheritedMethodsHaveIncompatibleReturnTypes(ASTNode location, MethodBinding[] inheritedMethods, int length)", "diff": ["+public void inheritedMethodsHaveIncompatibleReturnTypes(ASTNode location, MethodBinding[] inheritedMethods, int length) {", "+\tStringBuffer methodSignatures = new StringBuffer();", "+\tStringBuffer shortSignatures = new StringBuffer();", "+\tfor (int i = length; --i >= 0;) {", "+\t\tmethodSignatures", "+\t\t\t.append(inheritedMethods[i].declaringClass.readableName())", "+\t\t\t.append('.')", "+\t\t\t.append(inheritedMethods[i].readableName());", "+\t\tshortSignatures", "+\t\t\t.append(inheritedMethods[i].declaringClass.shortReadableName())", "+\t\t\t.append('.')", "+\t\t\t.append(inheritedMethods[i].shortReadableName());", "+\t\tif (i != 0){", "+\t\t\tmethodSignatures.append(\", \"); //$NON-NLS-1$", "+\t\t\tshortSignatures.append(\", \"); //$NON-NLS-1$", "+\t\t}", "+\t}", "+", "+\tthis.handle(", "+\t\t// Return type is incompatible with %1", "+\t\t// 9.4.2 - The return type from the method is incompatible with the declaration.", "+\t\tIProblem.IncompatibleReturnType,", "+\t\tnew String[] {methodSignatures.toString()},", "+\t\tnew String[] {shortSignatures.toString()},", "+\t\tlocation.sourceStart,", "+\t\tlocation.sourceEnd);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76401b5f222cd9870aabdb860413fe94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "commitAfterChange": "eaac4cd91d3c13197436495a330942a49816eb54", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void returnTypeUncheckedConversion(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void forbiddenReference(TypeBinding type, ASTNode location, String visibilityRuleOwner)", "diff": ["+}", "+public void forbiddenReference(TypeBinding type, ASTNode location, String visibilityRuleOwner) {", "+\tif (location == null) return; ", "+\tthis.handle(", "+\t\tIProblem.ForbiddenReference,", "+\t\tnew String[] {new String(type.readableName()), visibilityRuleOwner},", "+\t\tnew String[] {new String(type.shortReadableName()), visibilityRuleOwner},", "+\t\tlocation.sourceStart,", "+\t\tlocation.sourceEnd);", "-public void returnTypeUncheckedConversion(MethodBinding currentMethod, MethodBinding inheritedMethod) {", "-\tStringBuffer methodSignature = new StringBuffer();", "-\tmethodSignature", "-\t\t.append(inheritedMethod.declaringClass.readableName())", "-\t\t.append('.')", "-\t\t.append(inheritedMethod.readableName());", "-\tStringBuffer shortSignature = new StringBuffer();", "-\tshortSignature", "-\t\t.append(inheritedMethod.declaringClass.shortReadableName())", "-\t\t.append('.')", "-\t\t.append(inheritedMethod.shortReadableName());", "-", "-\tint id = IProblem.ReturnTypeUncheckedConversion;", "-\tthis.handle(", "-\t\tid,", "-\t\tnew String[] {methodSignature.toString()},", "-\t\tnew String[] {shortSignature.toString()},", "-\t\tcurrentMethod.sourceStart(),", "-\t\tcurrentMethod.sourceEnd());", "-}"]}], "num": 63864}
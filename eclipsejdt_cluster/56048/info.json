{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "146a67af3590ce8a4462c970c34792c4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7589867d65cb6ecbe437714e769468f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "89fead2e35034778cb1cda34e7f362e4b63427a2", "commitAfterChange": "b7181f3de94480b6d1001699120338d0c39696a4", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprivate String[] getNewImportStrings(PackageEntry packageEntry, boolean isStatic, String lineDelim)", "signatureAfterChange": " \t \tprivate String[] getNewImportStrings(IBuffer buffer, PackageEntry packageEntry, boolean isStatic, String lineDelim)", "diff": ["-\tprivate String[] getNewImportStrings(PackageEntry packageEntry, boolean isStatic, String lineDelim) {", "+\tprivate String[] getNewImportStrings(IBuffer buffer, PackageEntry packageEntry, boolean isStatic, String lineDelim) {", "+\t\tStringBuffer allComments = null;", "-\t\t\t\tallImports.add(getNewImportString(curr.getElementName(), isStatic, lineDelim));", "+\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\tallImports.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t}", "+\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\tString trailingComment = null;", "+\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\ttrailingComment = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "+\t\t\t\t}", "+\t\t\t\tallImports.add(getNewImportString(curr.getElementName(), isStatic, trailingComment, lineDelim));", "+\t\t\t} else {", "+\t\t\t\t// collect all comments", "+\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\tif (allComments == null) {", "+\t\t\t\t\t\tallComments = new StringBuffer();", "+\t\t\t\t\t}", "+\t\t\t\t\tallComments.append(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength())).append(lineDelim);", "+\t\t\t\t}", "+\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\tif (allComments == null) {", "+\t\t\t\t\t\tallComments = new StringBuffer();", "+\t\t\t\t\t}", "+\t\t\t\t\tallComments.append(buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength())).append(lineDelim);", "+\t\t\t\t}", "+\t\t}", "+\t\tif (allComments != null) {", "+\t\t\tallImports.add(0, String.valueOf(allComments));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1018e9e9e76ecbe6eaa03043d1b3eb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "89fead2e35034778cb1cda34e7f362e4b63427a2", "commitAfterChange": "b7181f3de94480b6d1001699120338d0c39696a4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\t\tString[] imports = getNewImportStrings(pack, isStatic, lineDelim);", "+\t\t\t\t\tString[] imports = getNewImportStrings(buffer, pack, isStatic, lineDelim);", "-\t\t\t\t\t\t\tString str= getNewImportString(currDecl.getElementName(), isStatic, lineDelim);", "+\t\t\t\t\t\t\tIRegion rangeBefore = currDecl.getPrecedingCommentRange();", "+\t\t\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\t\t\tstringsToInsert.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tIRegion rangeAfter = currDecl.getTrailingCommentRange();", "+\t\t\t\t\t\t\tString trailingComment = null;", "+\t\t\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\t\t\ttrailingComment = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString str= getNewImportString(currDecl.getElementName(), isStatic, trailingComment, lineDelim);", "+\t\t\t// insert back all existing imports comments since existing imports were not preserved", "+\t\t\tif (this.preserveExistingCommentsRanges != null) {", "+\t\t\t\tfor (int i = 0, max = this.preserveExistingCommentsRanges.length; i < max; i++) {", "+\t\t\t\t\tIRegion region = this.preserveExistingCommentsRanges[i];", "+\t\t\t\t\tString text = buffer.getText(region.getOffset(), region.getLength());", "+\t\t\t\t\t// remove preceding whitespaces", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tint length = text.length();", "+\t\t\t\t\tloop: while (index < length) {", "+\t\t\t\t\t\tif (Character.isWhitespace(text.charAt(index))) {", "+\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (index != 0) {", "+\t\t\t\t\t\ttext = text.substring(index);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!text.endsWith(lineDelim)) {", "+\t\t\t\t\t\ttext += lineDelim;", "+\t\t\t\t\t}", "+\t\t\t\t\tstringsToInsert.add(text);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 56048}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0b6fcdfb4e8a439b14ca462eb19b831", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e1d581c4389604c837ffdbd0ddd7085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "7511ce8ac2a616c416b32731f4d10587027e3f25", "commitAfterChange": "71d14c28198258a4d6a7c5df6309a1aa1f387bf3", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "\t\t  \tpublic void testStringLiteralUnicode()", "signatureAfterChange": "\t\t  \tpublic void testStringLiteralUnicode()", "diff": ["-\t\tAST localAst;", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tAST localAst = AST.newAST(ast.apiLevel());", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tlocalAst = AST.newAST(ast.apiLevel());", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tlocalAst = AST.newAST(ast.apiLevel());", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tlocalAst = AST.newAST(ast.apiLevel());", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tlocalAst = AST.newAST(ast.apiLevel());", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tlocalAst = AST.newAST(ast.apiLevel());", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tlocalAst = AST.newAST(ast.apiLevel());", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tlocalAst = AST.newAST2();", "-\t\t} else {", "-\t\t\tlocalAst = AST.newAST3();", "-\t\t}", "+\t\tlocalAst = AST.newAST(ast.apiLevel());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812848af2320d1b3f1295b879b92e0ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "commitAfterChange": "dedf5307e666f4e1475605b0b89aaf9292d38bf4", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \r private boolean hasStructuralFieldChanges(FieldInfo currentFieldInfo, FieldInfo otherFieldInfo)", "signatureAfterChange": "\r private boolean hasStructuralFieldChanges(FieldInfo currentFieldInfo, FieldInfo otherFieldInfo)", "diff": ["-private boolean hasStructuralFieldChanges(FieldInfo currentFieldInfo, FieldInfo otherFieldInfo) {\r", "-\r", "-\tif (currentFieldInfo.getModifiers() != otherFieldInfo.getModifiers()) {\r", "-\t\treturn true;\r", "-\t}\r", "-\tif (!CharOperation.equals(currentFieldInfo.getName(), otherFieldInfo.getName())) {\r", "-\t\treturn true;\r", "-\t}\r", "-\tif (!CharOperation.equals(currentFieldInfo.getTypeName(), otherFieldInfo.getTypeName())) {\r", "-\t\treturn true;\r", "-\t}\r", "-\tif (currentFieldInfo.hasConstant()) {\r", "-\t\tif (!otherFieldInfo.hasConstant()) {\r", "-\t\t\treturn true;\r", "+}\r", "+private boolean hasStructuralFieldChanges(FieldInfo currentFieldInfo, FieldInfo otherFieldInfo) {\r", "+\tif (currentFieldInfo.getModifiers() != otherFieldInfo.getModifiers())\r", "+\t\treturn true;\r", "+\tif (!CharOperation.equals(currentFieldInfo.getName(), otherFieldInfo.getName()))\r", "+\t\treturn true;\r", "+\tif (!CharOperation.equals(currentFieldInfo.getTypeName(), otherFieldInfo.getTypeName()))\r", "+\t\treturn true;\r", "+\tif (currentFieldInfo.hasConstant() != otherFieldInfo.hasConstant())\r", "+\t\treturn true;\r", "+\tif (currentFieldInfo.hasConstant()) {\r", "-\t\tif (!currentConstant.getClass().equals(otherConstant.getClass())) {\r", "+\t\tif (currentConstant.typeID() != otherConstant.typeID())\r", "-\t\t} \r", "+\t\tif (!currentConstant.getClass().equals(otherConstant.getClass()))\r", "+\t\t\treturn true;\r", "-\t\t\t\tcase TypeIds.T_int : \r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_int) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.intValue() != currentConstant.intValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_byte :\r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_byte) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.byteValue() != currentConstant.byteValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_short : \r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_short) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.shortValue() != currentConstant.shortValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_char : \r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_char) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.charValue() != currentConstant.charValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_float :\r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_float) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.floatValue() != currentConstant.floatValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_double :\r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_double) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.doubleValue() != currentConstant.doubleValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_boolean : \r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_boolean) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.booleanValue() != currentConstant.booleanValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_String : \r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_String) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant.stringValue() != currentConstant.stringValue()) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase TypeIds.T_null :\r", "-\t\t\t\t\tif (otherConstant.typeID() != TypeIds.T_null) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (otherConstant != NullConstant.Default) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "+\t\t\tcase TypeIds.T_int :\r", "+\t\t\t\treturn currentConstant.intValue() != otherConstant.intValue();\r", "+\t\t\tcase TypeIds.T_byte :\r", "+\t\t\t\treturn currentConstant.byteValue() != otherConstant.byteValue();\r", "+\t\t\tcase TypeIds.T_short :\r", "+\t\t\t\treturn currentConstant.shortValue() != otherConstant.shortValue();\r", "+\t\t\tcase TypeIds.T_char :\r", "+\t\t\t\treturn currentConstant.charValue() != otherConstant.charValue();\r", "+\t\t\tcase TypeIds.T_float :\r", "+\t\t\t\treturn currentConstant.floatValue() != otherConstant.floatValue();\r", "+\t\t\tcase TypeIds.T_double :\r", "+\t\t\t\treturn currentConstant.doubleValue() != otherConstant.doubleValue();\r", "+\t\t\tcase TypeIds.T_boolean :\r", "+\t\t\t\treturn currentConstant.booleanValue() != otherConstant.booleanValue();\r", "+\t\t\tcase TypeIds.T_String :\r", "+\t\t\t\treturn !currentConstant.stringValue().equals(otherConstant.stringValue());\r", "+\t\t\tcase TypeIds.T_null :\r", "+\t\t\t\treturn otherConstant != NullConstant.Default;\r", "-\t} else if (otherFieldInfo.hasConstant()) {\r", "-\t\treturn true;\r", "+\t}\r", "+\treturn false;\r", "+}\r"]}], "num": 58980}
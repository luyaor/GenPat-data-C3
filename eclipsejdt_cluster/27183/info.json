{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "826fcc2f9ebf37a3a5d139500cfd8c53", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c38da6a828e7392f4148255a68f8fa33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "7ca9f198dab5ae249453376b5f6d99317f797266", "commitAfterChange": "90457871ba3051d340feae7220f15bab37c7d551", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\ttryInfo = this.resources[i].analyseCode(currentScope, handlingContext, tryInfo);", "+\t\t\tfinal LocalDeclaration resource = this.resources[i];", "+\t\t\ttryInfo = resource.analyseCode(currentScope, handlingContext, tryInfo);", "-\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tLocalVariableBinding resourceBinding = resource.binding;", "-\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\tif(closeMethod == null) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t\t\t// extending from multiple interfaces.\t\t\t\t\t", "+\t\t\t\t\tInvocationSite site = new InvocationSite() {", "+\t\t\t\t\t\tpublic TypeBinding[] genericTypeArguments() { return null;}", "+\t\t\t\t\t\tpublic boolean isSuperAccess() {return false;}", "+\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "+\t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType) {/* empty */}", "+\t\t\t\t\t\tpublic void setDepth(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic void setFieldIndex(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic int sourceEnd() {return resource.sourceEnd(); }", "+\t\t\t\t\t\tpublic int sourceStart() {return resource.sourceStart(); }", "+\t\t\t\t\t\tpublic TypeBinding expectedType() { return null; }", "+\t\t\t\t\t};", "+\t\t\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t\t\t}", "+\t\t\t\tif (closeMethod != null && closeMethod.isValidBinding() && closeMethod.returnType.id == TypeIds.T_void) {", "-\t\t\ttryInfo = this.resources[i].analyseCode(currentScope, handlingContext, tryInfo);", "+\t\t\tfinal LocalDeclaration resource = this.resources[i];", "+\t\t\ttryInfo = resource.analyseCode(currentScope, handlingContext, tryInfo);", "-\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tLocalVariableBinding resourceBinding = resource.binding;", "-\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\tif(closeMethod == null) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t\t\t// extending from multiple interfaces.", "+\t\t\t\t\tInvocationSite site = new InvocationSite() {", "+\t\t\t\t\t\tpublic TypeBinding[] genericTypeArguments() { return null;}", "+\t\t\t\t\t\tpublic boolean isSuperAccess() {return false;}", "+\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "+\t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType) {/* empty */}", "+\t\t\t\t\t\tpublic void setDepth(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic void setFieldIndex(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic int sourceEnd() {return resource.sourceEnd(); }", "+\t\t\t\t\t\tpublic int sourceStart() {return resource.sourceStart(); }", "+\t\t\t\t\t\tpublic TypeBinding expectedType() { return null; }", "+\t\t\t\t\t};", "+\t\t\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t\t\t}", "+\t\t\t\tif (closeMethod != null && closeMethod.isValidBinding() && closeMethod.returnType.id == TypeIds.T_void) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea6e5a8b2788218fef24a31640da4a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "ed1175e5f3196c1368a9a2b98678b1f4969f4620", "commitAfterChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tint thrownExceptionSize = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "+\t\tint throwsTagsNbre = this.thrownExceptions == null ? 0 : this.thrownExceptions.length;", "+", "+\t\t// If no referenced method (field initializer for example) then report a problem for each param tag", "+\t\tif (md == null) {", "+\t\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "+\t\t\t\tint start = typeRef.sourceStart;", "+\t\t\t\tint end = typeRef.sourceEnd;", "+\t\t\t\tif (typeRef instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\tstart = ((JavadocQualifiedTypeReference) typeRef).tagSourceStart;", "+\t\t\t\t\tend = ((JavadocQualifiedTypeReference) typeRef).tagSourceEnd;", "+\t\t\t\t} else if (typeRef instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\tstart = ((JavadocSingleTypeReference) typeRef).tagSourceStart;", "+\t\t\t\t\tend = ((JavadocSingleTypeReference) typeRef).tagSourceEnd;", "+\t\t\t\t}", "+\t\t\t\tmethScope.problemReporter().javadocUnexpectedTag(start, end);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tint thrownExceptionSize = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef);", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef, md.binding.modifiers);", "-\t\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "-\t\t\t\t\t\t\tmethScope.problemReporter().javadocInvalidThrowsClassName(typeRef, true);", "+\t\t\t\t\t\t\tmethScope.problemReporter().javadocDuplicatedThrowsClassName(typeRef, md.binding.modifiers);", "-\t\t\tif (reportMissing) {", "-\t\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "-\t\t\t\t\tboolean found = false;", "-\t\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "-\t\t\t\t\t\tif (typeReferences[j] != null) {", "-\t\t\t\t\t\t\tTypeBinding typeBinding = typeReferences[j].resolvedType;", "-\t\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "-\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\ttypeReferences[j] = null;", "-\t\t\t\t\t\t\t}", "+\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "+\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "+\t\t\t\tboolean found = false;", "+\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "+\t\t\t\t\tif (typeReferences[j] != null) {", "+\t\t\t\t\t\tTypeBinding typeBinding = typeReferences[j].resolvedType;", "+\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\ttypeReferences[j] = null;", "-\t\t\t\t\tif (!found) {", "-\t\t\t\t\t\tif (exception.resolvedType != null && exception.resolvedType.isValidBinding()) { // flag only valid class name", "-\t\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception);", "-\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!found && reportMissing) {", "+\t\t\t\t\tif (exception.resolvedType != null && exception.resolvedType.isValidBinding()) { // flag only valid class name", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception, md.binding.modifiers);", "-\t\t\t\t\t\tmethScope.problemReporter().javadocInvalidThrowsClassName(typeRef, false);", "+\t\t\t\t\t\tmethScope.problemReporter().javadocInvalidThrowsClassName(typeRef, md.binding.modifiers);"]}], "num": 27183}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a991fb397112e1b66e62792f8b2bea6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e36d51d209903e626284d27934c84f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "b9dd40f151f099ea02bdb585a636b0e4d30a3aca", "commitAfterChange": "7c795ff1d272223e08c3d6df934de16fbe0934b7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " static Classpath getClasspath(String classpathName, String encoding,  \t\tboolean isSourceOnly, AccessRuleSet accessRuleSet,  \t\tString destinationPath)", "signatureAfterChange": " static Classpath getClasspath(String classpathName, String encoding, \t\tboolean isSourceOnly, AccessRuleSet accessRuleSet, \t\tString destinationPath)", "diff": ["-static Classpath getClasspath(String classpathName, String encoding, ", "-\t\tboolean isSourceOnly, AccessRuleSet accessRuleSet, ", "+static Classpath getClasspath(String classpathName, String encoding,", "+\t\tboolean isSourceOnly, AccessRuleSet accessRuleSet,", "-\t\t\tresult = new ClasspathDirectory(file, encoding, ", "-\t\t\t\t\tisSourceOnly ? ClasspathLocation.SOURCE : ", "-\t\t\t\t\t\tClasspathLocation.SOURCE | ClasspathLocation.BINARY, ", "+\t\t\tresult = new ClasspathDirectory(file, encoding,", "+\t\t\t\t\tisSourceOnly ? ClasspathLocation.SOURCE :", "+\t\t\t\t\t\tClasspathLocation.SOURCE | ClasspathLocation.BINARY,", "-\t} else { ", "+\t} else {", "-\t\t\t\tresult = new ClasspathSourceJar(file, true, accessRuleSet, ", "-\t\t\t\t\tencoding, ", "+\t\t\t\tresult = new ClasspathSourceJar(file, true, accessRuleSet,", "+\t\t\t\t\tencoding,", "-\t\t\t} else {", "+\t\t\t} else if (destinationPath == null) {", "-\t\t\t\tif (destinationPath != null) {", "-\t\t\t\t\tresult = null; // [-d dir] not allowed for binaries only jar", "-\t\t\t\t} else {", "-\t\t\t\t\tresult = new ClasspathJar(file, true, accessRuleSet, null);", "-\t\t\t\t}", "+\t\t\t\tresult = new ClasspathJar(file, true, accessRuleSet, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f637de9eb7fc4e15f9972fcb1c8ae556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "1a94a1e6652f1701b8c360d56d755e5438b79c26", "commitAfterChange": "3b002cab97d2ee77b59be67feaf705de255bc1fb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " static Classpath getClasspath(String classpathName, String encoding, boolean isSourceOnly, AccessRuleSet accessRuleSet)", "signatureAfterChange": " static Classpath getClasspath(String classpathName, String encoding,  \t\tboolean isSourceOnly, AccessRuleSet accessRuleSet,  \t\tString destinationPath)", "diff": ["-static Classpath getClasspath(String classpathName, String encoding, boolean isSourceOnly, AccessRuleSet accessRuleSet) {", "+static Classpath getClasspath(String classpathName, String encoding, ", "+\t\tboolean isSourceOnly, AccessRuleSet accessRuleSet, ", "+\t\tString destinationPath) {", "-\t\t\tresult = new ClasspathDirectory(file, encoding, isSourceOnly ? ClasspathLocation.SOURCE : ClasspathLocation.SOURCE | ClasspathLocation.BINARY, accessRuleSet);", "+\t\t\tresult = new ClasspathDirectory(file, encoding, ", "+\t\t\t\t\tisSourceOnly ? ClasspathLocation.SOURCE : ", "+\t\t\t\t\t\tClasspathLocation.SOURCE | ClasspathLocation.BINARY, ", "+\t\t\t\t\taccessRuleSet,", "+\t\t\t\t\tdestinationPath == null || destinationPath == Main.NONE ?", "+\t\t\t\t\t\tdestinationPath : // keep == comparison valid", "+\t\t\t\t\t\tconvertPathSeparators(destinationPath));", "-\t} else {", "+\t} else { ", "-\t\t\t\tresult = new ClasspathSourceJar(file, true, accessRuleSet, encoding);\t\t\t", "+\t\t\t\tresult = new ClasspathSourceJar(file, true, accessRuleSet, ", "+\t\t\t\t\tencoding, ", "+\t\t\t\t\tdestinationPath == null || destinationPath == Main.NONE ?", "+\t\t\t\t\t\tdestinationPath : // keep == comparison valid", "+\t\t\t\t\t\tconvertPathSeparators(destinationPath));", "-\t\t\t\tresult = new ClasspathJar(file, true, accessRuleSet);", "+\t\t\t\tif (destinationPath != null) {", "+\t\t\t\t\tresult = null; // [-d dir] not allowed for binaries only jar", "+\t\t\t\t} else {", "+\t\t\t\t\tresult = new ClasspathJar(file, true, accessRuleSet, null);", "+\t\t\t\t}"]}], "num": 7485}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84825bea341e2d65db7bd33cc00bd17f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c7fe4c1be3c6dd426a5f6b52f809748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \t\r private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res)", "signatureAfterChange": "\r \t\r private boolean isOnClasspath(IPath path)", "diff": ["-private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res) {\r", "-\tIPath path = res.getFullPath();\r", "-\tif (classpath == null) {\r", "-\t\treturn true;\r", "-\t} else if (classpath == UNKNOWN_CLASSPATH) {\r", "-\t\treturn false;\r", "-\t} else {\r", "-\t\tfor (int i = 0, length = classpath.length; i < length; i++) {\r", "-\t\t\tif (classpath[i].getPath().isPrefixOf(path)) {\r", "-\t\t\t\treturn true;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn false;\r", "-\t}\r", "+private boolean isOnClasspath(IPath path) {\r", "+\treturn this.roots.get(path) != null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3133b01c6a4976c7ad85b48295e76835", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver)", "signatureAfterChange": " \t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver)", "diff": ["+\t  */", "+\t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver) {", "+\t \tTypeVariableBinding[] typeVariableBindings = typeBinding.typeVariables();", "+\t \tfor (int i = 0, length = typeVariableBindings.length; i < length; i++) {", "+\t\t\tTypeVariableBinding typeVariableBinding = typeVariableBindings[i];", "+\t\t\tif (this.scanner.nextToken() != BindingKeyScanner.TYPE)", "+\t\t\t\treturn null;", "+\t\t \tchar[] typeVariableName = this.scanner.getTokenSource();", "+\t\t\tif (!CharOperation.equals(typeVariableName, typeVariableBinding.sourceName()))", "+\t\t\t\treturn null;", "+\t\t}", "+\t \treturn typeBinding;", "-\t  */", "-\t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver) {", "-\t \tTypeVariableBinding[] typeVariableBindings = typeBinding.typeVariables();", "-\t \tfor (int i = 0, length = typeVariableBindings.length; i < length; i++) {", "-\t\t\tTypeVariableBinding typeVariableBinding = typeVariableBindings[i];", "-\t\t \tchar[] typeVariableName = this.scanner.getTokenSource();", "-\t\t\tif (!CharOperation.equals(typeVariableName, typeVariableBinding.sourceName()))", "-\t\t\t\treturn null;", "-\t \t\treset();", "-\t \t\tBinding superclass = getCompilerBinding(resolver);", "-\t \t\tif (superclass != typeVariableBinding.superclass()) ", "-\t \t\t\treturn null;", "-\t \t\tReferenceBinding[] superinterfaces = typeVariableBinding.superInterfaces();", "-\t \t\tfor (int j = 0, superinterfacesLength = superinterfaces.length; j < superinterfacesLength; j++) {", "-\t\t \t\treset();", "-\t\t \t\tBinding superinterface = getCompilerBinding(resolver);", "-\t\t \t\tif (superinterface != superinterfaces[j]) ", "-\t\t \t\t\treturn null;", "-\t\t\t}", "-\t\t}", "-\t \treturn typeBinding;", "-\t }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a8f47ce2012e5de5a5caffd21d890d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected boolean compare(String str, int start, int length, char[] source)", "signatureAfterChange": " \tprivate void addFailure(String msg)", "diff": ["-\tprotected boolean compare(String str, int start, int length, char[] source) {", "-\t\tif (str.length() != length) return false;", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tif (str.charAt(i) != source[start+i]) return false;", "-\t\t}", "-\t\treturn true;", "+\tprivate void addFailure(String msg) {", "+\t\tthis.failures.add(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb6f21594c0bc68e7951e2c2c7934e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "44b2ae0b9ea2797846c8f36e5cf3be1acaab875d", "commitAfterChange": "0492d8e41c1aba4d81d43f5d644f4506ed10c8ab", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprivate boolean addBounds(TypeBound[] newBounds, LookupEnvironment environment)", "signatureAfterChange": "  \tpublic void addBounds(BoundSet that, LookupEnvironment environment)", "diff": ["+\tpublic void addBounds(BoundSet that, LookupEnvironment environment) {", "+\t\tif (that == null || environment == null)", "+\t\t\treturn;", "+\t\taddBounds(that.flatten(), environment);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a4a5896951eefec223ffc502c785a3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "54632eb8b3fc718083fd85b7fed41bcce1a85dc7", "commitAfterChange": "bfb03069bc857fa6dbdefe509f7d5cec8610c33c", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t\t\t\t\tvalue = value.trim();", "-\t\t\t\t\t\t// Keep the option value, even if it's deprecated", "-\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=324987", "-\t\t\t\t\t\tprojectOptions.put(propertyName, value);", "-\t\t\t\t\t\tif (!optionNames.contains(propertyName)) {", "-\t\t\t\t\t\t\t// try to migrate deprecated options", "-\t\t\t\t\t\t\tString[] compatibleOptions = (String[]) javaModelManager.deprecatedOptions.get(propertyName);", "-\t\t\t\t\t\t\tif (compatibleOptions != null) {", "-\t\t\t\t\t\t\t\tfor (int co=0, length=compatibleOptions.length; co < length; co++) {", "-\t\t\t\t\t\t\t\t\tprojectOptions.put(compatibleOptions[co], value);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (optionNames.contains(propertyName)){", "+\t\t\t\t\t\t\tprojectOptions.put(propertyName, value.trim());", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// Maybe an obsolete preference, try to migrate it...", "+\t\t\t\t\t\t\tjavaModelManager.migrateObsoleteOption(projectOptions, propertyName, value.trim());", "-\t\t\t\tif (propertyValue != null && javaModelManager.knowsOption(propertyName)){", "+\t\t\t\tif (propertyValue != null && optionNames.contains(propertyName)){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cfe8c0874559e372f64f1b3b3db4da9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "db9994e6bbc68b36b6835d66f1e05a3b040360e2", "commitAfterChange": "01c814e6bd45b7fbd49eec3a490338a17c21d9fb", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames)", "signatureAfterChange": "  ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames)", "diff": ["-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {", "-\treturn getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);", "+", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {", "+\treturn getTypeFromConstantPoolName(signature, start, end, isParameterized, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891117d83ae42639969fedd6f4acadca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "e5d472ae376881b61d2a17c3e23cd62b7ed964f0", "commitAfterChange": "447de272007f97647787cc473ca78784fcaddeeb", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic IJavaElement findElement(IPath path, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " \tpublic IJavaElement findElement(IPath path, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-", "-\t\t\t\tNameLookup lookup = newNameLookup((WorkingCopyOwner)null/*no need to look at working copies for pkgs*/);", "-\t\t\t\tIPackageFragment[] pkgFragments = lookup.findPackageFragments(packageName, false);", "-\t\t\t\tif (pkgFragments == null) {", "-\t\t\t\t\treturn null;", "-", "-\t\t\t\t} else {", "-\t\t\t\t\t// try to return one that is a child of this project", "-\t\t\t\t\tfor (int i = 0, length = pkgFragments.length; i < length; i++) {", "-", "-\t\t\t\t\t\tIPackageFragment pkgFragment = pkgFragments[i];", "-\t\t\t\t\t\tif (this.equals(pkgFragment.getParent().getParent())) {", "-\t\t\t\t\t\t\treturn pkgFragment;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t// default to the first one", "-\t\t\t\t\treturn pkgFragments[0];", "-\t\t\t\t}", "+\t\t\t\treturn findPackageFragment(packageName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4aa7b04e3425310ec44ee703091a2e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public static void createSourceZip(String[] pathsAndContents, String zipPath) throws IOException", "signatureAfterChange": " public static void createSourceZip(String[] pathsAndContents, String zipPath) throws IOException", "diff": ["-    File sourcesDir = new File(sourcesPath);", "-    flushDirectoryContent(sourcesDir);", "+    createSourceDir(pathsAndContents, sourcesPath);", "+    zip(new File(sourcesPath), zipPath);", "+}", "-    zip(sourcesDir, zipPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ad8d4041267d01a801bce972a53d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "1ce14f7d38953baa0407a7c04bf1e650dc1a4ab4", "commitAfterChange": "188c9c7dc3851a0a188854f7875a3d0a8c55cb71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, IClasspathEntry[] focusEntriesForPolymorphicSearch)", "signatureAfterChange": " private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject)", "diff": ["-public static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, IClasspathEntry[] focusEntriesForPolymorphicSearch) {", "+}", "+private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject) {", "-\t\tif (focus.equals(javaProject))", "-\t\t\treturn true;", "+\t\tif (focus == null) return false;", "+\t\tif (focus.equals(javaProject)) return true;", "-\t\tif (focusEntriesForPolymorphicSearch != null) {", "-\t\t\t// look for refering project", "-\t\t\tIPath projectPath = javaProject.getProject().getFullPath();", "-\t\t\tfor (int i = 0, length = focusEntriesForPolymorphicSearch.length; i < length; i++) {", "-\t\t\t\tIClasspathEntry entry = focusEntriesForPolymorphicSearch[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && entry.getPath().equals(projectPath))", "-\t\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afec2d705812fc84a36994d14a423e4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic void indexAll(IProject project)", "signatureAfterChange": "\r public void indexAll(IProject project)", "diff": ["-\t */\r", "-\tpublic void indexAll(IProject project) {\r", "-\t\tif (JavaCore.getPlugin() == null || this.workspace == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\t// Also request indexing of binaries on the classpath\r", "-\t\t// determine the new children\r", "-\t\t\tIJavaModel model = JavaModelManager.getJavaModel(this.workspace);\r", "-\t\t\tIJavaProject javaProject = ((JavaModel) model).getJavaProject(project);\r", "-\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\tfor (int i = 0; i < entries.length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots(entry);\r", "-\t\t\t\tfor (int j = 0; j < roots.length; j++) {\r", "-\t\t\t\t\tIPackageFragmentRoot root = roots[j];\r", "-\t\t\t\t\tif (root.exists()) {\r", "-\t\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t\tIResource rsc = root.getUnderlyingResource();\r", "-\t\t\t\t\t\t\tif (rsc == null) {\r", "-\t\t\t\t\t\t\t\tindexJarFile(root, project.getName());\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tindexJarFile((IFile) rsc, project.getName());\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (JavaModelException e) { // cannot retrieve classpath info\r", "-\t\t}\r", "-\t\trequest(new IndexAllProject(project, this));\r", "-\t}\r", "+ */\r", "+public void indexAll(IProject project){\r", "+\tif (JavaCore.getPlugin() == null || this.workspace == null) return;\r", "+\r", "+\t// Also request indexing of binaries on the classpath\r", "+\t// determine the new children\r", "+\ttry {\r", "+\t\tIJavaModel model = JavaModelManager.getJavaModel(this.workspace);\r", "+\t\tIJavaProject javaProject = ((JavaModel) model).getJavaProject(project);\t\r", "+\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\t\r", "+\t\tfor (int i = 0; i < entries.length; i++) {\r", "+\t\t\tIClasspathEntry entry= entries[i];\r", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY){\r", "+\t\t\t\tindexJarFile(entry.getPath(), project.getName());\r", "+\t} catch(JavaModelException e){ // cannot retrieve classpath info\r", "+\t}\t\r", "+\trequest(new IndexAllProject(project, this));\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfd04a9c3b15389ded990434532ed4ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "9e6a3af9f4e67aab7b20e93de31ad260ee0978b5", "commitAfterChange": "59520c153ca7b41ec00a737644dceff58328b89a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldCompileOK,  \t\t\tString[] testFiles,  \t\t\tString commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory, \t\t\tTestCompilationProgress progress)", "signatureAfterChange": " \tprotected void runTest( \t\t\tboolean shouldCompileOK,  \t\t\tString[] testFiles,  \t\t\tObject extraArguments, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory, \t\t\tTestCompilationProgress progress)", "diff": ["-\tprivate void runTest(", "+\tprotected void runTest(", "-\t\t\tString commandLine,", "+\t\t\tObject extraArguments,", "-\t\tMain batchCompiler;", "-\t\t\t\tbatchCompiler = new Main(out, err, false/*systemExit*/, null/*options*/, progress);", "-\t\t\ttry {", "-\t\t\t\tfinal String[] tokenizeCommandLine = Main.tokenize(commandLine);", "-\t\t\t\tcompileOK = batchCompiler.compile(tokenizeCommandLine);", "-\t\t\t} catch (RuntimeException e) {", "-\t\t\t\tcompileOK = false;", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\te.printStackTrace();", "-\t\t\t\tthrow e;", "-\t\t\t}", "+\t\t\tcompileOK = invokeCompiler(out, err, extraArguments, progress);", "-\t\t\t\t\t\t+ commandLine + \"]\",", "+\t\t\t\t\t\t+ extraArguments + \"]\",", "-\t\t\t\t\t\t+ commandLine + \"]\",", "+\t\t\t\t\t\t+ extraArguments + \"]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d481de311b5ea4315847a0d292d66eca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0fcbdf3f242eca695398990480b5252f47b13157", "commitAfterChange": "bdb5fd6b326428cc9f0c1c9c5974b9a701aacf91", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "signatureAfterChange": " \tpublic GeneratedFileManager(final AptProject aptProject, final GeneratedSourceFolderManager gsfm)", "diff": ["-\tpublic GeneratedFileManager(final AptProject aptProject) {", "-\t\t_aptProject = aptProject;", "-\t\tfinal IJavaProject javaProject = aptProject.getJavaProject();", "-\t\t", "-\t\t// get generated source dir from config ", "-\t\t// default value is set in org.eclipse.jdt.apt.core.internal.util.AptCorePreferenceInitializer", "-\t\t_generatedSourceFolderName = AptConfig.getString( javaProject, AptPreferenceConstants.APT_GENSRCDIR);", "-\t\t// properly initialize the GeneratedFileManager if project path is up-to-date and the generated ", "-\t\t// source folder is there.", "-\t\tfinal IFolder folder = javaProject.getProject().getFolder(_generatedSourceFolderName);", "-\t\tif(folder.exists()){", "-\t\t\tboolean uptodate = false;", "-\t\t\ttry{", "-\t\t\t\tuptodate = isProjectClassPathUpToDate(javaProject, null, folder.getFullPath(), null);", "-\t\t\t}catch(JavaModelException e){", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t\tif( uptodate )", "-\t\t\t\t_generatedSourceFolder = folder;", "-\t\t}\t", "+\tpublic GeneratedFileManager(final AptProject aptProject, final GeneratedSourceFolderManager gsfm) {", "+\t\t_jProject = aptProject.getJavaProject();", "+\t\t_gsfm = gsfm;"]}], "num": 62678}
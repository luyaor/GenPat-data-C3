{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3950d1a4d21d9b790c8e2df4dd5c1f61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d162155c8288aacde695220f95b925b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "d839a142b9eec12533dd514edfe7a79d5b71ee0c", "commitAfterChange": "bd83486db9699d62fa5d0b33b9f03e68c697c706", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "signatureAfterChange": " \t \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "diff": ["+\t\t}  catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D (added with fix of 99629)", "+\t\t\tif(DEBUG) {", "+\t\t\t\tSystem.out.println(\"Exception caught by CompletionEngine:\"); //$NON-NLS-1$", "+\t\t\t\te.printStackTrace(System.out);", "+\t\t\t}", "+\t\t} catch (InvalidCursorLocation e) { // may eventually report a usefull error (added to fix 99629)", "+\t\t\tif(DEBUG) {", "+\t\t\t\tSystem.out.println(\"Exception caught by CompletionEngine:\"); //$NON-NLS-1$", "+\t\t\t\te.printStackTrace(System.out);", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object (added with fix of 99629)", "+\t\t\tif(DEBUG) {", "+\t\t\t\tSystem.out.println(\"Exception caught by CompletionEngine:\"); //$NON-NLS-1$", "+\t\t\t\te.printStackTrace(System.out);", "+\t\t\t}", "+\t\t} catch (CompletionNodeFound e){ // internal failure - bugs 5618 (added with fix of 99629)", "+\t\t\tif(DEBUG) {", "+\t\t\t\tSystem.out.println(\"Exception caught by CompletionEngine:\"); //$NON-NLS-1$", "+\t\t\t\te.printStackTrace(System.out);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0fb5a54a5cb53952415dfe2641a9be1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "55ff17ec6653a434427e713aef1451bdb8c9f671", "commitAfterChange": "d20637ea2fd7b4c54c0555e8e8ade3dcbe515e38", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void deleteResource(IResource resource) throws CoreException", "signatureAfterChange": " public void deleteResource(IResource resource) throws CoreException", "diff": ["-\tresource.delete(false, null);", "+\tCoreException lastException = null;", "+\ttry {", "+\t\tresource.delete(true, null);", "+\t} catch (CoreException e) {", "+\t\tlastException = e;", "+\t}", "+\tint retryCount = 60; // wait 1 minute at most", "+\twhile (resource.isAccessible() && --retryCount >= 0) {", "+\t\ttry {", "+\t\t\tThread.sleep(1000);", "+\t\t} catch (InterruptedException e) {", "+\t\t}", "+\t\ttry {", "+\t\t\tresource.delete(true, null);", "+\t\t} catch (CoreException e) {", "+\t\t\tlastException = e;", "+\t\t}", "+\t}", "+\tif (!resource.isAccessible()) return;", "+\tSystem.err.println(\"Failed to delete \" + resource.getFullPath());", "+\tif (lastException != null) {", "+\t\tthrow lastException;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e93e92513668afda11228129250a4786", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "commitAfterChange": "bbd2ac48b173a123c7419ce013244d878b152c22", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public void testCompare() throws IOException, Exception", "signatureAfterChange": "  public void testCompare() throws IOException, Exception", "diff": ["-\tcompareFormattedSource();", "+\ttry {", "+\t\tcompareFormattedSource();", "+\t}", "+\tcatch (ComparisonFailure cf) {", "+\t\tif (this.failureIndex == -1) {", "+\t\t\tFAILURES[UNEXPECTED_FAILURE].failures.add(this.path);", "+\t\t} else {", "+\t\t\tFAILURES[this.failureIndex].failures.add(this.path);", "+\t\t}", "+\t\tthrow cf;", "+\t}", "+\tcatch (AssertionFailedError afe) {", "+\t\tif (this.failureIndex == -1) {", "+\t\t\tFAILURES[UNEXPECTED_FAILURE].failures.add(this.path);", "+\t\t} else {", "+\t\t\tFAILURES[this.failureIndex].failures.add(this.path);", "+\t\t}", "+\t\tthrow afe;", "+\t}", "+\tcatch (Exception ex) {", "+\t\tFAILURES[UNEXPECTED_FAILURE].failures.add(this.path);", "+\t\tthrow ex;", "+\t}"]}], "num": 12532}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6dd8fa65fa96fc0487ead0de8e52a0a8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9320720047e8bdb436653490c22f71ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "c13b5c8fdc5b98528c9ff5d2f4f3b65852c12b48", "commitAfterChange": "08ce0253d3f5d5ff59d7d3b857a3b4f1f87c7e61", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprivate void computeRootPath(File directory, String fullName, String[] rootPathHolder, int[] index)", "signatureAfterChange": " \t \tprivate void computeRootPath(File directory, HashSet firstLevelPackageNames, boolean hasDefaultPackage)", "diff": ["-\tprivate void computeRootPath(File directory, String fullName, String[] rootPathHolder, int[] index) {", "-\t\tFile[] files = directory.listFiles();", "-\t\tfor (int i = 0; i < files.length; i++) {", "-\t\t\tFile file = files[i];", "-\t\t\tif (file.isDirectory()) {", "-\t\t\t\tcomputeRootPath(file, fullName, rootPathHolder, index);", "-\t\t\t} else if (Util.isJavaFileName(file.getName())) {", "-\t\t\t\tIPath fullPath = new Path(file.getPath());", "-\t\t\t\tIPath javaFilePath = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);", "-\t\t\t\tString javaFilePathString = javaFilePath.toString();", "-\t\t\t\tif (javaFilePathString.endsWith(fullName)) {", "-\t\t\t\t\tindex[0] = Math.min(index[0], javaFilePathString.indexOf(fullName));", "-\t\t\t\t\trootPathHolder[0] = javaFilePathString;", "-\t}\t", "+\t", "+\tprivate void computeRootPath(File directory, HashSet firstLevelPackageNames, boolean hasDefaultPackage) {", "+\t\tFile[] files = directory.listFiles();", "+\t\tboolean hasSubDirectories = false;", "+\t\tloop: for (int i = 0, max = files.length; i < max; i++) {", "+\t\t\tFile file = files[i];", "+\t\t\tif (file.isDirectory()) {", "+\t\t\t\thasSubDirectories = true;", "+\t\t\t\tif (firstLevelPackageNames.contains(file.getName())) {", "+\t\t\t\t\tIPath fullPath = new Path(file.getParentFile().getPath());", "+\t\t\t\t\tIPath rootPathEntry = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);", "+\t\t\t\t\tthis.rootPaths.add(rootPathEntry.toString());", "+\t\t\t\t\tbreak loop;", "+\t\t\t\t} else {", "+\t\t\t\t\tcomputeRootPath(file, firstLevelPackageNames, hasDefaultPackage);", "+\t\t\t\t}", "+\t\t\t} else if (i == max - 1 && !hasSubDirectories && hasDefaultPackage) {", "+\t\t\t\tFile parentDir = file.getParentFile();", "+\t\t\t\tif (parentDir.list(this.filenameFilter).length != 0) {", "+\t\t\t\t\tIPath fullPath = new Path(parentDir.getPath());", "+\t\t\t\t\tIPath rootPathEntry = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);", "+\t\t\t\t\tthis.rootPaths.add(rootPathEntry.toString());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f45d8db1212563534392af21c278d748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "e781f8e7f01bf193d5dc75f48e7e40aa2b3a1ff8", "commitAfterChange": "253b6e86274d6a434f078cf2295ba672e6b070f0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate String computeRootPath(File directory)", "signatureAfterChange": " \t \tprivate void computeRootPath(File directory, String fullName, String[] rootPathHolder, int[] index)", "diff": ["+\t", "+\tprivate void computeRootPath(File directory, String fullName, String[] rootPathHolder, int[] index) {", "+\t\tFile[] files = directory.listFiles();", "+\t\tfor (int i = 0; i < files.length; i++) {", "+\t\t\tFile file = files[i];", "+\t\t\tif (file.isDirectory()) {", "+\t\t\t\tcomputeRootPath(file, fullName, rootPathHolder, index);", "+\t\t\t} else if (Util.isJavaFileName(file.getName())) {", "+\t\t\t\tIPath fullPath = new Path(file.getPath());", "+\t\t\t\tIPath javaFilePath = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);", "+\t\t\t\tString javaFilePathString = javaFilePath.toString();", "+\t\t\t\tif (javaFilePathString.endsWith(fullName)) {", "+\t\t\t\t\tindex[0] = Math.min(index[0], javaFilePathString.indexOf(fullName));", "+\t\t\t\t\trootPathHolder[0] = javaFilePathString;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}\t", "-\t}", "-\tprivate String computeRootPath(File directory) {", "-\t\tFile[] files = directory.listFiles();", "-\t\tfor (int i = 0; i < files.length; i++) {", "-\t\t\tFile file = files[i];", "-\t\t\tif (file.isDirectory()) {", "-\t\t\t\tString rootPath = computeRootPath(file);", "-\t\t\t\tif (rootPath != null) return rootPath;", "-\t\t\t} else if (Util.isJavaFileName(file.getName())) {", "-\t\t\t\ttry {", "-\t\t\t\t\tchar[] contents = Util.getFileCharContent(file, this.encoding);", "-\t\t\t\t\tIPath fullPath = new Path(file.getPath());", "-\t\t\t\t\tIPath relativePath = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);", "-\t\t\t\t\tString rootPath = computeRootPath(relativePath.toString(), contents);", "-\t\t\t\t\tif (rootPath != null) return rootPath;", "-\t\t\t\t} catch (IOException e) {"]}], "num": 62813}
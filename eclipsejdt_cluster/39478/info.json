{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7334c60feee65ec8ecfb588abe3a790a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "540ee14903440c029094d4027b93603c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "5cd6d58769a50d0c17684a6868642380a176871e", "commitAfterChange": "c2673608acb4322092a3f06755b8abd4c15cab30", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tswitch (originalInherited.returnType.leafComponentType().kind()) {", "+\t\tTypeBinding originalReturnType = originalInherited.returnType.leafComponentType();", "+\t\tswitch (originalReturnType.kind()) {", "-\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\tif (!currentMethod.returnType.leafComponentType().isTypeVariable())", "-\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "+\t\t\tcase Binding.TYPE_PARAMETER : // see 81618", "+\t\t\t\tif (originalReturnType.isTypeVariable() && ((TypeVariableBinding) originalReturnType).declaringElement == originalInherited) {", "+\t\t\t\t\tTypeBinding returnType = currentMethod.returnType.leafComponentType();", "+\t\t\t\t\tif (!returnType.isTypeVariable() || ((TypeVariableBinding) returnType).declaringElement != currentMethod)", "+\t\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "+\t\t\t\t}", "-\t\t}   ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f955edeecc8c7a84eb5244fda0bf7c25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "5f1e0ca52efa5c66e342b62d896831ba23629eba", "commitAfterChange": "0e4ee87d5a73569486905aa611208316069ccdd8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t// then when do you need a bridge method?", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t// TODO (philippe) - we need this hack until SourceTypeBindings stop acting as ParameterizedTypes", "+\t\t\t\tif (originalReturnType != originalInherited.declaringClass || !inheritedMethod.returnType.leafComponentType().isParameterizedType())", "+\t\t\t\t\tbreak;", "-\t\t\t\tif (!currentMethod.returnType.leafComponentType().isParameterizedType())", "+\t\t\t\tif (!currentMethod.returnType.leafComponentType().isParameterizedType()) {", "+\t\t\t\t\tif (currentMethod.returnType.leafComponentType().isRawType() && inheritedMethod.returnType.leafComponentType().isRawType())", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tif (originalReturnType.isTypeVariable() && ((TypeVariableBinding) originalReturnType).declaringElement == originalInherited) {", "+\t\t\t\tif (((TypeVariableBinding) originalReturnType).declaringElement == originalInherited) {"]}], "num": 39478}
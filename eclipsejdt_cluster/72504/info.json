{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afe1caa4b3824beeff600dc42c15e706", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "571dab586724aa9828f205f32788f414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r \t\r \tpublic char[] findSource(ClassFile classFile)", "signatureAfterChange": "\r \t\r \tpublic char[] findSource(ClassFile classFile)", "diff": ["-\t\t\t\tsource = sourceMapper.findSource(classFile.getType());\r", "-\t\t\t}\r", "-\t\t\tif (source == null) {\r", "-\t\t\t\t// default to opening the class file\r", "-\t\t\t\tString sourceFromBuffer = classFile.getSource();\r", "-\t\t\t\tif (sourceFromBuffer != null) {\r", "-\t\t\t\t\tsource = sourceFromBuffer.toCharArray();\r", "+\t\t\t\tIType type = classFile.getType();\r", "+\t\t\t\tif (classFile.isOpen() && type.getDeclaringType() == null) {\r", "+\t\t\t\t\tsource = sourceMapper.findSource(type);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tClassFileReader reader = this.classFileReader(type);\r", "+\t\t\t\t\tif (reader != null) {\r", "+\t\t\t\t\t\tsource = sourceMapper.findSource(type, reader);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6568028f245257dccab37285c12828c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0bd04abb8575a021cf8905c773ca1d2199f31c53", "commitAfterChange": "1bf6db68524b43c8e140351de0b8d9940aee5925", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding convertToRawType(TypeBinding type)", "signatureAfterChange": "  \tpublic TypeBinding convertToRawType(TypeBinding type)", "diff": ["+\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\tneedToConvert = !((ReferenceBinding)originalType).isStatic();", "+\t\t\tReferenceBinding originalGeneric = (ReferenceBinding) originalType.erasure();", "-\t\t\t\tconvertedType = environment().createRawType((ReferenceBinding) originalType.erasure(), convertedEnclosing);", "+\t\t\t\tconvertedType = environment().createRawType(originalGeneric, convertedEnclosing);", "-\t\t\t\tconvertedType = createParameterizedType((ReferenceBinding) originalType.erasure(), null, convertedEnclosing);", "+\t\t\t\tif (originalGeneric.isStatic())", "+\t\t\t\t\tconvertedType = createParameterizedType(originalGeneric, null, convertedEnclosing);", "+\t\t\t\telse ", "+\t\t\t\t\tconvertedType = environment().createRawType(originalGeneric, convertedEnclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "825b5f5c9332a21370754a2da0f19ccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "d03a83de0fe5be0e8f8f09b8efe99101b67367a2", "commitAfterChange": "e583360467dd665e6a3741180b503b0c70aed18f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\tpublic void propertyChange(Preferences.PropertyChangeEvent event)", "signatureAfterChange": " \t\tpublic void propertyChange(Preferences.PropertyChangeEvent event)", "diff": ["-\t\t\t\t// update path cache", "-\t\t\t\tif (newValue == null || newValue.equals(CP_ENTRY_IGNORE)) {", "-\t\t\t\t\tVariables.remove(varName);", "-\t\t\t\t} else {", "+\t\t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "+\t\t\t\t} else {", "+\t\t\t\t\tVariables.remove(varName);", "-\t\t\t\t// update path cache", "-\t\t\t\trecreatePersistedContainer(propertyName, ((String)event.getNewValue()).trim(), false);", "+\t\t\t\tString newValue = (String)event.getNewValue();", "+\t\t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "+\t\t\t\t\trecreatePersistedContainer(propertyName, newValue, false);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c220340bb9ff846c9afed4b4146d74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "e2a6d43d6cfc7ae0c6dc6dfaa282461be00cd7e3", "commitAfterChange": "225b64b4cacb0e2a7e07c6447406d2ac8f3df97c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": "\r \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\tString lowerName= name.toLowerCase();\r", "+\t\tString matchName= partialMatch ? name.toLowerCase() : name;\r", "+\t\t\tString elementName = classFile.getElementName();\r", "+\t\t\tif (partialMatch) elementName = elementName.toLowerCase();\r", "+\r", "-\t\t\t * In the following call to nameMatches we must always send true \r", "-\t\t\t * for the partialMatch argument since name will never have the \r", "-\t\t\t * extension \".class\" and the classFile always will.\r", "+\t\t\t * Must use startWith because matchName will never have the \r", "+\t\t\t * extension \".class\" and the elementName always will.\r", "-\t\t\tif (nameMatches(lowerName, classFile, true)) {\r", "+\t\t\tif (elementName.startsWith(matchName)) {\r"]}], "num": 72504}
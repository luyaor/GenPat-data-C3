{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5aa59820bd2bd26154614067ce02402", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d63fedf7c282ef158a11127d16c066", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "29901dd2faebfaef1b4d98d076ffc43db80ce6e9", "commitAfterChange": "df89682acad9efe382ca87d8dc961bb3d9c795fc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tfor (int i = dimensions.length; --i >= 0;) {", "+\t\tloop: for (int i = dimensions.length; --i >= 0;) {", "-\t\t\t} else if (explicitDimIndex> 0) {", "+\t\t\t} else if (explicitDimIndex > 0) {", "-\t\t\t\tscope.problemReporter().incorrectLocationForEmptyDimension(this, i);", "+\t\t\t\tscope.problemReporter().incorrectLocationForNonEmptyDimension(this, explicitDimIndex);", "+\t\t\t\tbreak loop;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d55639c104458f9b10b74174484fdad4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\tpublic TypeBinding resolveTypeExpecting(", "-\t\tBlockScope scope,", "-\t\tTypeBinding expectedType) {", "+\tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType) {", "-\t\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this);", "+\t\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this, null);"]}], "num": 51367}
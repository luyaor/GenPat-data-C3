{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0c3cf9c428e6439e63347d0539e3811", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45e27de5a991b52bfcc14d2eaa7067b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t public MethodPattern(int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "  public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tint matchMode,  \tboolean isCaseSensitive, \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tIType declaringType)", "diff": ["-\tprotected int decodedParameterCount;\t", "-public MethodPattern(int matchMode, boolean isCaseSensitive) {", "+", "+public MethodPattern(", "+\tboolean findDeclarations,", "+\tboolean findReferences,", "+\tchar[] selector, ", "+\tint matchMode, ", "+\tboolean isCaseSensitive,", "+\tchar[] declaringQualification,", "+\tchar[] declaringSimpleName,\t", "+\tchar[] returnQualification, ", "+\tchar[] returnSimpleName,", "+\tchar[][] parameterQualifications, ", "+\tchar[][] parameterSimpleNames,", "+\tIType declaringType) {", "+", "-}", "+\tthis.findDeclarations = findDeclarations;", "+\tthis.findReferences = findReferences;", "+", "+\tthis.selector = isCaseSensitive ? selector : CharOperation.toLowerCase(selector);", "+\tthis.declaringQualification = isCaseSensitive ? declaringQualification : CharOperation.toLowerCase(declaringQualification);", "+\tthis.declaringSimpleName = isCaseSensitive ? declaringSimpleName : CharOperation.toLowerCase(declaringSimpleName);", "+\tthis.returnQualification = isCaseSensitive ? returnQualification : CharOperation.toLowerCase(returnQualification);", "+\tthis.returnSimpleName = isCaseSensitive ? returnSimpleName : CharOperation.toLowerCase(returnSimpleName);", "+\tif (parameterSimpleNames != null) {", "+\t\tthis.parameterQualifications = new char[parameterSimpleNames.length][];", "+\t\tthis.parameterSimpleNames = new char[parameterSimpleNames.length][];", "+\t\tfor (int i = 0, max = parameterSimpleNames.length; i < max; i++) {", "+\t\t\tthis.parameterQualifications[i] = isCaseSensitive ? parameterQualifications[i] : CharOperation.toLowerCase(parameterQualifications[i]);", "+\t\t\tthis.parameterSimpleNames[i] = isCaseSensitive ? parameterSimpleNames[i] : CharOperation.toLowerCase(parameterSimpleNames[i]);", "+", "+\tthis.declaringType = declaringType;", "+\tthis.mustResolve = mustResolve();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f77fe9a0478257267708c68f952882a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\tpublic boolean checkDeprecation(int javadocStart, int javadocEnd) {", "+\tprotected boolean parseComment(int javadocStart, int javadocEnd) {", "-\t\t\tchar nextCharacter= 0, previousChar;", "-\t\t\tint charPosition = -1, inlineStartPosition = 0;", "-\t\t\tinitLineEnd();", "+\t\t\tthis.linePtr = getLineNumber(javadocStart);", "+\t\t\tthis.lastLinePtr = getLineNumber(javadocEnd);", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : javadocStart + 3;", "+\t\t\tthis.textStart = -1;", "+\t\t\tchar nextCharacter= 0, previousChar;", "+\t\t\tint charPosition = -1, inlineStartPosition = 0;", "-\t\t\t\tif (this.index > this.lineEnd) {", "+\t\t\t\tif (this.index > (this.lineEnd+1)) {", "+\t\t\t\t\tpreviousPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "-\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.kind == COMPIL_PARSER ? this.scanner.getCurrentTokenStartPosition() : previousPosition;", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(false);", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "+\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(true);", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(true);", "+\t\t\t\t\t\t\t\t\tthis.textStart = this.index;", "+\t\t\t\t\t\tif (this.lineStarted && this.textStart <= charPosition) {", "+\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.inlineTagStarted) this.inlineTagStarted = false;", "-\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart <= charPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.textStart = this.index;", "+\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.index < this.lineEnd) {", "+\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!this.lineStarted && !CharOperation.isWhitespace(nextCharacter)) {", "+\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) {", "+\t\t\t\t\t\t\tif (!this.lineStarted) {", "+\t\t\t\t\t\t\t\tthis.textStart = previousPosition;", "+\t\t\t\t\t\t\t}", "-\t\t} finally {", "-\t\t\tupdateJavadoc();", "+\t\t\tif (this.lineStarted && this.textStart <= this.endComment) {", "+\t\t\t\tpushText(this.textStart, this.endComment);", "+\t\t\t}", "+\t\t\tupdateDocComment();", "+\t\t} catch (Exception ex) {", "+\t\t\tvalidComment = false;"]}], "num": 18929}
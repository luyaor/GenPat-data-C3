{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39357ab8e6eecc1264eec41fd29c7748", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e766c7fe9f023ca34033d66557a956a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "ca3904810f95e1bcd38fe30169e6be65df9fab10", "commitAfterChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t\tint order = 0;", "+\t\t\t\t++order;", "+\t\t\t\t\t// Annotation value map should preserve order of annotation values", "+\t\t\t\t\tif (order != 1) {", "+\t\t\t\t\t\treportError(\"The annoZint param on D.methodDvoid should be first in the map, but was \" + order);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t// methodDvoid2 is like methodDvoid but the annotation values are in opposite order;", "+\t\t// check to see that order has been preserved", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid2 = _methodDvoid2.getAnnotationMirrors();", "+\t\tfor (AnnotationMirror annotMethodDvoid2 : annotsMethodDvoid2) {", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = annotMethodDvoid2.getElementValues();", "+\t\t\tif (null == values || values.size() != 2) {", "+\t\t\t\treportError(\"@AnnoZ on D.methodDvoid2() should have two values but had: \" +", "+\t\t\t\t\t\t(values == null ? 0 : values.size()));", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tint order = 0;", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tswitch (++order) {", "+\t\t\t\tcase 1:", "+\t\t\t\t\tif (!\"annoZString\".equals(methodName)) {", "+\t\t\t\t\t\treportError(\"First value of @AnnoZ on D.methodDvoid2 should be annoZString, but was: \" + methodName);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2:", "+\t\t\t\t\tif (!\"annoZint\".equals(methodName)) {", "+\t\t\t\t\t\treportError(\"Second value of @AnnoZ on D.methodDvoid2 should be annoZint, but was: \" + methodName);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd83abaeaaa844447b8243b1cad8d528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "63332515d07582eba4f5498d0bab26ce5646d103", "commitAfterChange": "9eacf221f3c2e0ebf1c2ce20d0a8cd74ff4bb60a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t\t", "+\t\t\t// Check Elements.getElementValuesWithDefaults()", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> defaults = ", "+\t\t\t\t_elementUtils.getElementValuesWithDefaults(annotD);", "+\t\t\tif (null == defaults) {", "+\t\t\t\treportError(\"Element.getElementValuesWithDefaults(annotD) returned null\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : defaults.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tif (\"annoZString\".equals(methodName)) {", "+\t\t\t\t\tfoundStringMethod = true;", "+\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (!\"annoZOnD\".equals(value)) {", "+\t\t\t\t\t\treportError(\"Explicit value of AnnoZ.annoZString is not \\\"annoZOnD\\\"\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse if (\"annoZint\".equals(methodName)) {", "+\t\t\t\t\tfoundStringMethod = true;", "+\t\t\t\t\t// TODO: this doesn't work because we are not getting default values resolved.", "+/*\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (null == value || !value.equals(17)) {", "+\t\t\t\t\t\treportError(\"Default value of AnnoZ.annoZint() is not 17\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+*/\t\t\t\t}", "+\t\t\t}"]}], "num": 45997}
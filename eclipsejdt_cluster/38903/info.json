{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "417a17c8e335f97ab85527b65a8d9967", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c7c891ab3165e0ed20874ff84d4ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "commitAfterChange": "3001a2e9b40b82bc07cde07151a79e328e95bc31", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "signatureAfterChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "diff": ["-\t\tif (isConstructor && binding.declaringClass.isEnum()) { // insert String name,int ordinal", "-\t\t\twriteArgumentName(ConstantPool.EnumName, ClassFileConstants.AccSynthetic, 0);", "-\t\t\twriteArgumentName(ConstantPool.EnumOrdinal, ClassFileConstants.AccSynthetic, 1);", "-\t\t\tlength = 2;", "+\t\tReferenceBinding declaringClass = binding.declaringClass;", "+", "+\t\tif (declaringClass.isEnum()) {", "+\t\t\tif (isConstructor) { // insert String name,int ordinal", "+\t\t\t\tlength = writeArgumentName(ConstantPool.EnumName, ClassFileConstants.AccSynthetic, length);", "+\t\t\t\tlength = writeArgumentName(ConstantPool.EnumOrdinal, ClassFileConstants.AccSynthetic, length);", "+\t\t\t} else if (CharOperation.equals(ConstantPool.ValueOf, binding.selector)) { // insert String name", "+\t\t\t\tlength = writeArgumentName(ConstantPool.Name, ClassFileConstants.AccMandated, length);", "+\t\t\t\ttargetParameters =  Binding.NO_PARAMETERS; // Override \"unknown\" synthetics below", "+\t\t\t}", "-\t\tboolean needSynthetics = isConstructor && binding.declaringClass.isNestedType();", "+\t\tboolean needSynthetics = isConstructor && declaringClass.isNestedType();", "-\t\t\tReferenceBinding[] syntheticArgumentTypes = binding.declaringClass.syntheticEnclosingInstanceTypes();", "+\t\t\tint modifier = (! declaringClass.isPrivate()) || declaringClass.isAnonymousType() ? ClassFileConstants.AccMandated : ClassFileConstants.AccSynthetic;", "+\t\t\tReferenceBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "-\t\t\t\t\tlength = writeArgumentName(name, ClassFileConstants.AccMandated | ClassFileConstants.AccFinal, length);", "+\t\t\t\t\tlength = writeArgumentName(name, modifier | ClassFileConstants.AccFinal, length);", "-\t\t\tSyntheticArgumentBinding[] syntheticOuterArguments = binding.declaringClass.syntheticOuterLocalVariables();", "+\t\t\tSyntheticArgumentBinding[] syntheticOuterArguments = declaringClass.syntheticOuterLocalVariables();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "966701cf003a1739ec3484c9ebd7da7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "3817fb9be5d23e5c6f76a434da338233b90b5a46", "commitAfterChange": "8d9f700412e8d76f89db3ccd17a42191a013d35d", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " public void invokespecial(MethodBinding methodBinding)", "signatureAfterChange": " public void invokespecial(MethodBinding methodBinding)", "diff": ["-\tsuper.invokespecial(methodBinding);", "-\tint argCount = 0;", "-\tif (methodBinding.isConstructor()) {", "-\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\tif (declaringClass.isNestedType()) {", "-\t\t\t// enclosing instances", "-\t\t\tTypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "-\t\t\tif (syntheticArgumentTypes != null) {", "-\t\t\t\targCount += syntheticArgumentTypes.length;", "-\t\t\t}", "-\t\t\t// outer local variables", "-\t\t\tSyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();", "-\t\t\tif (syntheticArguments != null) {", "-\t\t\t\targCount += syntheticArguments.length;", "-\t\t\t}", "-\t\t} else if (declaringClass.isEnum()) {", "-\t\t\targCount += 2;", "-\t\t}", "-\t\targCount += methodBinding.parameters.length;", "-\t\tthis.currentFrame.numberOfStackItems -= argCount;", "-\t\tthis.currentFrame.initializeReceiver();", "-\t\tthis.currentFrame.numberOfStackItems--; // remove the top of stack", "-\t} else {", "-\t\targCount = 1;", "-\t\targCount += methodBinding.parameters.length;", "-\t\tthis.currentFrame.numberOfStackItems -= argCount;", "-\t\tif (methodBinding.returnType != TypeBinding.VOID) {", "-\t\t\tthis.currentFrame.addStackItem(methodBinding.returnType);", "-\t\t}", "-\t}", "+    super.invokespecial(methodBinding);", "+    int argCount = 0;", "+    if (methodBinding.isConstructor()) {", "+        final ReferenceBinding declaringClass = methodBinding.declaringClass;", "+        if (declaringClass.isNestedType()) {", "+            // enclosing instances", "+            TypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "+            if (syntheticArgumentTypes != null) {", "+                argCount += syntheticArgumentTypes.length;", "+            }", "+            // outer local variables", "+            SyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();", "+            if (syntheticArguments != null) {", "+                argCount += syntheticArguments.length;", "+            }", "+        } else if (declaringClass.isEnum()) {", "+            argCount += 2;", "+        }", "+        argCount += methodBinding.parameters.length;", "+        if (this.currentFrame.numberOfStackItems >= (argCount + 1)) {", "+\t        this.currentFrame.numberOfStackItems -= argCount;", "+\t        this.currentFrame.initializeReceiver();", "+\t        this.currentFrame.numberOfStackItems--; // remove the top of stack", "+        }", "+    } else {", "+        argCount = 1;", "+        argCount += methodBinding.parameters.length;", "+        if (this.currentFrame.numberOfStackItems >= argCount) {", "+        \tthis.currentFrame.numberOfStackItems -= argCount;", "+        }        ", "+        if (methodBinding.returnType != TypeBinding.VOID) {", "+            this.currentFrame.addStackItem(methodBinding.returnType);", "+        }", "+    }"]}], "num": 38903}
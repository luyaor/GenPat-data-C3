{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cc36e6df3a593aed4348f200a0c8139", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7f1a5129cd873d51a356210525db56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "99b0ee0a94dea46a82c44b5f56daa5fcb74d2ad6", "commitAfterChange": "039fe9e46951f3ae4fb135033e62de597c68c2d9", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\t\t\tName name = ((MemberRef)node).getName();", "+\t\t\t\tMemberRef memberRef = (MemberRef) node;", "+\t\t\t\tName name = memberRef.getName();", "+\t\t\t\t// get compiler node and record nodes", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "-\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\trecordNodes(node, compilerNode);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.JavadocFieldReference fieldRef = (org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference) javadoc.getNodeStartingAt(start);", "+\t\t\t\tif (fieldRef != null) {", "+\t\t\t\t\trecordNodes(name, fieldRef);", "+\t\t\t\t\trecordNodes(node, fieldRef);", "-\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF ||", "-\t\t\t\t\tnode.getNodeType() == ASTNode.SIMPLE_NAME ||", "+\t\t\t\t// Replace qualifier to have all nodes recorded", "+\t\t\t\tif (memberRef.getQualifier() != null) {", "+\t\t\t\t\tmemberRef.setQualifier(convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) fieldRef.receiver));", "+\t\t\t\t}", "+\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF) {", "+\t\t\t\tMethodRef methodRef = (MethodRef) node;", "+\t\t\t\t// get compiler node and record nodes", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "+\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\trecordNodes(methodRef.getName(), compilerNode);", "+\t\t\t\t\trecordNodes(methodRef, compilerNode);", "+\t\t\t\t}", "+\t\t\t\t// Replace qualifier to have all nodes recorded", "+\t\t\t\tif (methodRef.getQualifier() != null) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = null;", "+\t\t\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression) {", "+\t\t\t\t\t\ttypeRef = ((org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression)compilerNode).type;", "+\t\t\t\t\t} ", "+\t\t\t\t\telse if (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend) {", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend)compilerNode).receiver;", "+\t\t\t\t\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\t\t\t\t\ttypeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) expression;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (typeRef != null) {", "+\t\t\t\t\t\tmethodRef.setQualifier(convert(typeRef));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (node.getNodeType() == ASTNode.SIMPLE_NAME ||", "+\t\t\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+//\t\t\t\t\t\tconvert((org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode);", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "+\t\t\t\t\t\tName name = (Name) node;", "+\t\t\t\t\t\tif (name.isQualifiedName()) {", "+\t\t\t\t\t\t\tSimpleName simpleName = null;", "+\t\t\t\t\t\t\twhile (name.isQualifiedName()) {", "+\t\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+\t\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "+\t\t\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "+\t\t\t\t\t\t\t\trecordNodes(name, typeRef);", "+\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+//\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f85138dd0a8e970f74b28270e6dd17ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "03f4a4782f5839bc6b71dbdaa61bddb7d624d757", "commitAfterChange": "d9449e8887bdabd52ba7a1ff8609baf4e6dc9497", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \t \tprivate BlockScope lookupScope(ASTNode node)", "signatureAfterChange": " \t \tprivate BlockScope lookupScope(ASTNode node)", "diff": ["-\t\t\twhile(!(currentNode instanceof TypeDeclaration)) {", "+\t\t\twhile(!(currentNode instanceof AbstractTypeDeclaration)) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "-\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "-\t\t\t\treturn typeDecl.staticInitializerScope;", "-\t\t\t} else {", "-\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\tif (currentNode instanceof TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn typeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof EnumDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDecl = (org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn enumDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn enumDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof AnnotationTypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration annotationTypeDecl = (org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn annotationTypeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn annotationTypeDecl.initializerScope;", "+\t\t\t\t}", "-\t\t\twhile(!(currentNode instanceof TypeDeclaration)) {", "+\t\t\twhile(!(currentNode instanceof AbstractTypeDeclaration)) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "-\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "-\t\t\t\treturn typeDecl.staticInitializerScope;", "-\t\t\t} else {", "-\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\tif (currentNode instanceof TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn typeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof EnumDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDecl = (org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn enumDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn enumDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof AnnotationTypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration annotationTypeDecl = (org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn annotationTypeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn annotationTypeDecl.initializerScope;", "+\t\t\t\t}", "+"]}], "num": 64603}
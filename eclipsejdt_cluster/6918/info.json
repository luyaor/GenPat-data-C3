{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a742a0b2e0ce0f2810125dbf4acaf5d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085acecc136db949013de0954806298c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "ecd385ce2c6acd660d8fd4527c963683ed4e3124", "commitAfterChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic synchronized HashMap removeAllClasspathChanges()", "signatureAfterChange": " \t \tpublic HashMap removeAllClasspathChanges()", "diff": ["-\tpublic synchronized HashMap removeAllClasspathChanges() {", "-\t\tHashMap result = this.classpathChanges;", "-\t\tthis.classpathChanges = new HashMap(result.size());", "-\t\treturn result;", "+\tpublic HashMap removeAllClasspathChanges() {", "+\t\tsynchronized (this.classpathChanges) {", "+\t\t\tHashMap result = this.classpathChanges;", "+\t\t\tthis.classpathChanges = new HashMap(result.size());", "+\t\t\treturn result;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "225a09054933688d2bf176c938e494c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "ecd385ce2c6acd660d8fd4527c963683ed4e3124", "commitAfterChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic synchronized ClasspathChange addClasspathChange(IProject project, IClasspathEntry[] oldRawClasspath, IPath oldOutputLocation, IClasspathEntry[] oldResolvedClasspath)", "signatureAfterChange": "  \tpublic ClasspathChange addClasspathChange(IProject project, IClasspathEntry[] oldRawClasspath, IPath oldOutputLocation, IClasspathEntry[] oldResolvedClasspath)", "diff": ["-\tpublic synchronized ClasspathChange addClasspathChange(IProject project, IClasspathEntry[] oldRawClasspath, IPath oldOutputLocation, IClasspathEntry[] oldResolvedClasspath) {", "-\t\tClasspathChange change = (ClasspathChange) this.classpathChanges.get(project);", "-\t\tif (change == null) {", "-\t\t\tchange = new ClasspathChange((JavaProject) JavaModelManager.getJavaModelManager().getJavaModel().getJavaProject(project), oldRawClasspath, oldOutputLocation, oldResolvedClasspath);", "-\t\t\tthis.classpathChanges.put(project, change);", "-\t\t} else {", "-\t\t\tif (change.oldRawClasspath == null)", "-\t\t\t\tchange.oldRawClasspath = oldRawClasspath;", "-\t\t\tif (change.oldOutputLocation == null)", "-\t\t\t\tchange.oldOutputLocation = oldOutputLocation;", "-\t\t\tif (change.oldResolvedClasspath == null)", "-\t\t\t\tchange.oldResolvedClasspath = oldResolvedClasspath;", "+\tpublic ClasspathChange addClasspathChange(IProject project, IClasspathEntry[] oldRawClasspath, IPath oldOutputLocation, IClasspathEntry[] oldResolvedClasspath) {", "+\t\tsynchronized (this.classpathChanges) {", "+\t\t\tClasspathChange change = (ClasspathChange) this.classpathChanges.get(project);", "+\t\t\tif (change == null) {", "+\t\t\t\tchange = new ClasspathChange((JavaProject) JavaModelManager.getJavaModelManager().getJavaModel().getJavaProject(project), oldRawClasspath, oldOutputLocation, oldResolvedClasspath);", "+\t\t\t\tthis.classpathChanges.put(project, change);", "+\t\t\t} else {", "+\t\t\t\tif (change.oldRawClasspath == null)", "+\t\t\t\t\tchange.oldRawClasspath = oldRawClasspath;", "+\t\t\t\tif (change.oldOutputLocation == null)", "+\t\t\t\t\tchange.oldOutputLocation = oldOutputLocation;", "+\t\t\t\tif (change.oldResolvedClasspath == null)", "+\t\t\t\t\tchange.oldResolvedClasspath = oldResolvedClasspath;", "+\t\t\t}", "+\t\t\treturn change;", "-\t\treturn change;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e76786a73d1e6947b294a5938d1f68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "db9be76de74b56d6d850bf6fc58da2f76b6cafdd", "commitAfterChange": "08d03106dd01075a6d73c7857f8d76a79176b45d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\ttry {", "-\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "-\t\t} catch (IOException e) {", "-\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\treturn;", "-\t\t}", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\ttry {", "+\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f469000b64153055783c23090d770da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "eb71a6569553cf8d8553685f6e99ee5bc278eacc", "commitAfterChange": "15e3a9fc2ecd5761f01e0bac254435a2b7c9efda", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary) {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX + libName;", "-\t\ttry {", "-\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// preferenceChange(...))", "-\t\t} catch (IOException e) {", "-\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\treturn;", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\ttry {", "+\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t\t}", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "-\t\t}", "-\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now.", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57538ea884ffc5c29027d5eb71196a48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "db9be76de74b56d6d850bf6fc58da2f76b6cafdd", "commitAfterChange": "08d03106dd01075a6d73c7857f8d76a79176b45d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic synchronized void removeUserLibrary(String libName)", "signatureAfterChange": "  \tpublic void removeUserLibrary(String libName)", "diff": ["-\tpublic synchronized void removeUserLibrary(String libName)  {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\tinstancePreferences.remove(propertyName);", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\tpublic void removeUserLibrary(String libName)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\tinstancePreferences.remove(propertyName);", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6931823873441bf147ba3b08542c6973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BufferManager.java", "commitBeforeChange": "f88b85d811a939d0409a5818c63f9f14f6a07c62", "commitAfterChange": "9811ed4dbf7f78776dfe6771796cd4bc6107fadb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IBuffer getBuffer(IOpenable owner)", "signatureAfterChange": " public IBuffer getBuffer(IOpenable owner)", "diff": ["-\treturn (IBuffer)this.openBuffers.get(owner);", "+\tsynchronized (this.openBuffers) {", "+\t\treturn (IBuffer)this.openBuffers.get(owner);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f97b22360d21c845a0cd568f15a152d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "ecd385ce2c6acd660d8fd4527c963683ed4e3124", "commitAfterChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic synchronized ClasspathChange getClasspathChange(IProject project)", "signatureAfterChange": " \t \tpublic ClasspathChange getClasspathChange(IProject project)", "diff": ["-\tpublic synchronized ClasspathChange getClasspathChange(IProject project) {", "-\t\treturn (ClasspathChange) this.classpathChanges.get(project);", "+\tpublic ClasspathChange getClasspathChange(IProject project) {", "+\t\tsynchronized (this.classpathChanges) {", "+\t\t\treturn (ClasspathChange) this.classpathChanges.get(project);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891d1a60d8bb8c636595139b9f2eb997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException {", "-\t\tThread currentThread = Thread.currentThread();", "-\t\tHashMap map = null;", "-\t\tZipFile zipFile;", "-\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "-\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "-\t\t\t\t", "-\t\t\treturn zipFile;", "-\t\t}", "-\t\tString fileSystemPath= null;", "-\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "-\t\tIResource file = root.findMember(path);", "-\t\tif (path.isAbsolute() && file != null) {", "-\t\t\tif (file == null) { // external file", "-\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t\t} else { // internal resource (not an IFile or not existing)", "-\t\t\t\tIPath location;", "-\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\tpublic ZipFile getZipFile(IPath path) throws CoreException {", "+\t\t\t", "+\t\tsynchronized(this.zipFiles) { // TODO:  use PeThreadObject which does synchronization", "+\t\t\tThread currentThread = Thread.currentThread();", "+\t\t\tHashMap map = null;", "+\t\t\tZipFile zipFile;", "+\t\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "+\t\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "+\t\t\t\t\t", "+\t\t\t\treturn zipFile;", "+\t\t\t}", "+\t\t\tString fileSystemPath= null;", "+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\tIResource file = root.findMember(path);", "+\t\t\tif (path.isAbsolute() && file != null) {", "+\t\t\t\tif (file == null) { // external file", "+\t\t\t\t\tfileSystemPath= path.toOSString();", "+\t\t\t\t} else { // internal resource (not an IFile or not existing)", "+\t\t\t\t\tIPath location;", "+\t\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tfileSystemPath= location.toOSString();", "+\t\t\t\t}", "+\t\t\t} else if (!path.isAbsolute()) {", "+\t\t\t\tfile= root.getFile(path);", "+\t\t\t\tif (file == null || file.getType() != IResource.FILE) {", "+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tIPath location = file.getLocation();", "+\t\t\t\tif (location == null) {", "+\t\t\t} else {", "+\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t} else if (!path.isAbsolute()) {", "-\t\t\tfile= root.getFile(path);", "-\t\t\tif (file == null || file.getType() != IResource.FILE) {", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t", "+\t\t\ttry {", "+\t\t\t\tif (ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tzipFile = new ZipFile(fileSystemPath);", "+\t\t\t\tif (map != null) {", "+\t\t\t\t\tmap.put(path, zipFile);", "+\t\t\t\t}", "+\t\t\t\treturn zipFile;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$", "-\t\t\tIPath location = file.getLocation();", "-\t\t\tif (location == null) {", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tfileSystemPath= location.toOSString();", "-\t\t} else {", "-\t\t\tfileSystemPath= path.toOSString();", "-\t\t}", "-", "-\t\ttry {", "-\t\t\tif (ZIP_ACCESS_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t\tzipFile = new ZipFile(fileSystemPath);", "-\t\t\tif (map != null) {", "-\t\t\t\tmap.put(path, zipFile);", "-\t\t\t}", "-\t\t\treturn zipFile;", "-\t\t} catch (IOException e) {", "-\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf6c8552c1718fa28a84bde086eb803", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "eb71a6569553cf8d8553685f6e99ee5bc278eacc", "commitAfterChange": "15e3a9fc2ecd5761f01e0bac254435a2b7c9efda", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void removeUserLibrary(String libName)", "signatureAfterChange": "  \tpublic void removeUserLibrary(String libName)", "diff": ["-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\tinstancePreferences.remove(propertyName);", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\tinstancePreferences.remove(propertyName);", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\t\t\t}", "-\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now.", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d525b01b0aa50d7f0c406b919ac24aa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic synchronized void flushZipFiles()", "signatureAfterChange": " \tpublic void flushZipFiles()", "diff": ["-\tpublic synchronized void flushZipFiles() {", "-\t\tThread currentThread = Thread.currentThread();", "-\t\tHashMap map = (HashMap)this.zipFiles.remove(currentThread);", "-\t\tif (map == null) return;", "-\t\tIterator iterator = map.values().iterator();", "-\t\twhile (iterator.hasNext()) {", "-\t\t\ttry {", "-\t\t\t\tZipFile zipFile = (ZipFile)iterator.next();", "-\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.flushZipFiles()] Closing ZipFile on \" +zipFile.getName()); //$NON-NLS-1$//$NON-NLS-2$", "+\tpublic void flushZipFiles() {", "+\t\tsynchronized(this.zipFiles) {", "+\t\t\tThread currentThread = Thread.currentThread();", "+\t\t\tHashMap map = (HashMap)this.zipFiles.remove(currentThread);", "+\t\t\tif (map == null) return;", "+\t\t\tIterator iterator = map.values().iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\ttry {", "+\t\t\t\t\tZipFile zipFile = (ZipFile)iterator.next();", "+\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.flushZipFiles()] Closing ZipFile on \" +zipFile.getName()); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t}", "+\t\t\t\t\tzipFile.close();", "+\t\t\t\t} catch (IOException e) {", "-\t\t\t\tzipFile.close();", "-\t\t\t} catch (IOException e) {", "-\t\t}", "-\t\t", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f06a1e2c118562bdaddac0824c4e9e4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "bea840ed083d1fec83d3c3225bb9a0c808792499", "commitAfterChange": "5f69ce6b12fd3016193dd415c95dd991f5435bb2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void setContents(char[] newContents)", "signatureAfterChange": " public void setContents(char[] newContents)", "diff": ["-\t\tthis.contents = newContents;", "-\t\tthis.flags &= ~ (F_HAS_UNSAVED_CHANGES);", "+\t\tsynchronized (this.lock) {", "+\t\t\tthis.contents = newContents;", "+\t\t\tthis.flags &= ~ (F_HAS_UNSAVED_CHANGES);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f798c64a1a33826312a145672384803f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic synchronized void cacheZipFiles()", "signatureAfterChange": " \tpublic void cacheZipFiles()", "diff": ["-\tpublic synchronized void cacheZipFiles() {", "-\t\tThread currentThread = Thread.currentThread();", "-\t\tif (this.zipFiles.get(currentThread) != null) return;", "-\t\tthis.zipFiles.put(currentThread, new HashMap());", "-\t}", "+\tpublic void cacheZipFiles() {", "+\t\tsynchronized(this.zipFiles) {", "+\t\t\tThread currentThread = Thread.currentThread();", "+\t\t\tif (this.zipFiles.get(currentThread) != null) return;", "+\t\t\tthis.zipFiles.put(currentThread, new HashMap());", "+\t}"]}], "num": 6918}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31d885af9c309d0afa54560764aee388", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30773a3bd588ac6f2a5cb7b48d7ff100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "8d7196c62e122781f984b6fec99acaaaff2c9b12", "commitAfterChange": "c40d37b31933df685287603b7876ab2876472c95", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": " public void testBug233187a()", "signatureAfterChange": " public void testBug233187a()", "diff": ["-\t\t\"X.java\",", "-\t\t\"package test.bug;\\n\" + ", "+\t\t\"test/a/X.java\",", "+\t\t\"package test.a;\\n\" + ", "-\t\t\"             * {@link X.Y#foo(test.bug.X.Y.Z[])} OK for javadoc tool\\n\" + ", "-\t\t\"             * {@link X.Y#foo(test.bug.X.Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"             * {@link X.Y#foo(no_test.bug.X.Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"             * {@link X.Y#foo(test.a.X.Y.Z[])} OK for javadoc tool\\n\" + ", "+\t\t\"             * {@link X.Y#foo(test.a.X.Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"             * {@link X.Y#foo(no_test.a.X.Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"             * {@link test.bug.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"             * {@link test.a.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t// warning - Tag @link: can't find foo(test.bug.X.Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(no_test.bug.X.Y.Z[]) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.bug.X.Y", "+\t\t// warning - Tag @link: can't find foo(test.a.X.Y.Z) in test.a.X.Y", "+\t\t// warning - Tag @link: can't find foo(no_test.a.X.Y.Z[]) in test.a.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.a.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.a.X.Y", "-\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(test.bug.X.Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"1. ERROR in test\\\\a\\\\X.java (at line 10)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(test.a.X.Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(no_test.bug.X.Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"\t                 ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"2. ERROR in test\\\\a\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(no_test.a.X.Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"\t                 ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"3. ERROR in test\\\\a\\\\X.java (at line 12)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\t* {@link test.bug.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"\t                          ^^^\\n\" + ", "+\t\t\"4. ERROR in test\\\\a\\\\X.java (at line 13)\\n\" + ", "+\t\t\"\t* {@link test.a.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"\t                        ^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bacff966f3e0ee3cd50c2e04a1edf1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "8d7196c62e122781f984b6fec99acaaaff2c9b12", "commitAfterChange": "c40d37b31933df685287603b7876ab2876472c95", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug233187b()", "signatureAfterChange": " public void testBug233187b()", "diff": ["-\tString[] units = new String[] {", "-\t\t\"X.java\",", "-\t\t\"package test.bug;\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"public class X {\\n\" + ", "-\t\t\"   public static class Y {\\n\" + ", "-\t\t\"        public static class Z { \\n\" + ", "-\t\t\"            /**\\n\" + ", "-\t\t\"             * The position in the new method signature depends on\\n\" + ", "-\t\t\"             * the position in the array passed to\\n\" + ", "-\t\t\"             * {@link X.Y#foo(test.bug.X.Y.Z)} OK for javadoc tool\\n\" +", "-\t\t\"            * {@link X.Y#foo(test.bug.X.Y.Z[])} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link X.Y#foo(no_test.bug.X.Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link test.bug.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             */\\n\" + ", "-\t\t\"            public int bar() {\\n\" + ", "-\t\t\"                return 0;\\n\" + ", "-\t\t\"            }\\n\" + ", "-\t\t\"        }\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"        public void foo(Z params) {\\n\" + ", "-\t\t\"        }\\n\" + ", "-\t\t\"    }\\n\" + ", "-\t\t\"}\\n\"", "-\t};", "-\trunNegativeTest(units,", "-\t\t// warning - Tag @link: can't find foo(test.bug.X.Y.Z[]) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(no_test.bug.X.Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z) in test.bug.X.Y", "+\trunNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"test/b/X.java\",", "+\t\t\t\"package test.b;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"   public static class Y {\\n\" + ", "+\t\t\t\"        public static class Z { \\n\" + ", "+\t\t\t\"            /**\\n\" + ", "+\t\t\t\"             * The position in the new method signature depends on\\n\" + ", "+\t\t\t\"             * the position in the array passed to\\n\" + ", "+\t\t\t\"             * {@link X.Y#foo(test.b.X.Y.Z)} OK for javadoc tool\\n\" +", "+\t\t\t\"            * {@link X.Y#foo(test.b.X.Y.Z[])} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link X.Y#foo(no_test.b.X.Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link test.b.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             */\\n\" + ", "+\t\t\t\"            public int bar() {\\n\" + ", "+\t\t\t\"                return 0;\\n\" + ", "+\t\t\t\"            }\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"        public void foo(Z params) {\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\t// warning - Tag @link: can't find foo(test.b.X.Y.Z[]) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(no_test.b.X.Y.Z) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z) in test.b.X.Y", "-\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(test.bug.X.Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"1. ERROR in test\\\\b\\\\X.java (at line 10)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(test.b.X.Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(no_test.bug.X.Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"\t                 ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"2. ERROR in test\\\\b\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(no_test.b.X.Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"\t                 ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"3. ERROR in test\\\\b\\\\X.java (at line 12)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\t* {@link test.bug.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"\t                          ^^^\\n\" + ", "+\t\t\"4. ERROR in test\\\\b\\\\X.java (at line 13)\\n\" + ", "+\t\t\"\t* {@link test.b.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"\t                        ^^^\\n\" + "]}], "num": 20867}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bea186002f3371a94accdfd4297aea89", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33d02f72f21dfc0786cae43d9a1f3941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "5c94036938fe400e122792407c5c35d8914790e5", "commitAfterChange": "e002812d8385bfcab83bbcee92fbb80489aadeb5", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations)", "signatureAfterChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final boolean includeTypeUseAnnotations)", "diff": ["-\tprivate int generateRuntimeAnnotations(final Annotation[] annotations) {", "+\tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final boolean includeTypeUseAnnotations) {", "-\t\t\tif (annotation.isRuntimeInvisible()) {", "+\t\t\tif (annotation.isRuntimeInvisible() || (includeTypeUseAnnotations && annotation.isRuntimeTypeInvisible())) {", "-\t\t\t} else if (annotation.isRuntimeVisible()) {", "+\t\t\t} else if (annotation.isRuntimeVisible() || (includeTypeUseAnnotations && annotation.isRuntimeTypeVisible())) {", "-\t\t\t\tif (annotation.isRuntimeInvisible()) {", "+\t\t\t\tif (annotation.isRuntimeInvisible() || ", "+\t\t\t\t\t\t// No need to explicitly check it is type_use and not type_parameter, ", "+\t\t\t\t\t\t// that will already have been checked", "+\t\t\t\t\t\t(includeTypeUseAnnotations && annotation.isRuntimeTypeInvisible())) {", "-\t\t\t\tif (annotation.isRuntimeVisible()) {", "+\t\t\t\tif (annotation.isRuntimeVisible() || ", "+\t\t\t\t\t// No need to explicitly check it is type_use and not type_parameter, ", "+\t\t\t\t\t// that will already have been checked", "+\t\t\t\t\t(includeTypeUseAnnotations && annotation.isRuntimeTypeVisible())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b52821ebe5582f54af75f92f6f349f7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7336215b569e42bf0d7946c272b0da8ff71d12fb", "commitAfterChange": "e29082e6108e43f171cfe9fae0a56914a1f2ec3e", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly)", "signatureAfterChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "diff": ["-\tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly) {", "+\tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "+\t\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "+\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setReplaceRange((canCompleteEmptyToken && (this.startPosition < 0)) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange((canCompleteEmptyToken && (this.tokenStart < 0)) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);"]}], "num": 58386}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f56536f57ea75a8d6f10956a575df45f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef33755105e2cc5ded7fcf5faed0e46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "98cab260cb812cf41104f4ab6b99948f3194525c", "commitAfterChange": "ad0abd0ba7159a3530637d5ee793de5f0228f486", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static IWorkspace getWorkspace()", "signatureAfterChange": " \tpublic static File copyResource(File src, File dest)", "diff": ["-\t */", "-\tpublic static IWorkspace getWorkspace() {", "-\t\treturn ResourcesPlugin.getWorkspace();", "-\t}", "+\t */", "+\tpublic static File copyResource(File src, File dest) {", "+\t\t// read source bytes", "+\t\tbyte[] srcBytes = null;", "+\t\ttry {", "+\t\t\tsrcBytes = read(src);", "+\t\t} catch (IOException e1) {", "+\t\t\treturn null;", "+\t\t}", "+", "+\t\tif (convertToIndependantLineDelimiter(src)) {", "+\t\t\tString contents = new String(srcBytes);", "+\t\t\tcontents = TestUtils.convertToIndependantLineDelimiter(contents);", "+\t\t\tsrcBytes = contents.getBytes();", "+\t\t}", "+", "+\t\tif (!dest.exists()) {", "+\t\t\tdest.mkdirs();", "+\t\t}", "+\t\t// write bytes to dest", "+\t\tFileOutputStream out = null;", "+\t\tFile result = new File(dest, src.getName());", "+\t\ttry {", "+\t\t\tout = new FileOutputStream(result);", "+\t\t\tout.write(srcBytes);", "+\t\t\tout.flush();", "+\t\t} catch(IOException e) {", "+\t\t\treturn null;", "+\t\t} finally {", "+\t\t\tif (out != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tout.close();", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76ee32a923a9ca7640f01ed6b23ea63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "dfd8d4647bad1465cda928961972e854fc071249", "commitAfterChange": "31c3266cfb06f3143b63cd3aca05524ef5cd1755", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public IIndex getIndex(IPath path)", "signatureAfterChange": "\r public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-public IIndex getIndex(IPath path) {\r", "-\treturn this.getIndex(path, true);\r", "-}\r", "+public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing) {\r", "+\t\t\tString indexPath = null;\r", "+\t\t\t// index isn't cached, consider reusing an existing index file\r", "+\t\t\tif (reuseExistingFile){\r", "+\t\t\t\tindexPath = computeIndexName(path);\r", "+\t\t\t\tFile indexFile = new File(indexPath);\r", "+\t\t\t\tif (indexFile.exists()){ // check before creating index so as to avoid creating a new empty index if file is missing\r", "+\t\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$\r", "+\t\t\t\t\tif (index != null){\r", "+\t\t\t\t\t\tindexes.put(path, index);\r", "+\t\t\t\t\t\tmonitors.put(index, new ReadWriteMonitor());\r", "+\t\t\t\t\t\treturn index;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t} \r", "+\t\t\t// index wasn't found on disk, consider creating an empty new one\r", "+\t\t\tif (createIfMissing){\r", "+\t\t\t\tif (indexPath == null) indexPath = computeIndexName(path);\r", "+\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$\r", "+\t\t\t\tif (index != null){\r", "+\t\t\t\t\tindexes.put(path, index);\r", "+\t\t\t\t\tmonitors.put(index, new ReadWriteMonitor());\r", "+\t\t\t\t\treturn index;\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}], "num": 50271}
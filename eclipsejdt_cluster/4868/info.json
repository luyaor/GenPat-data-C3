{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd810635e12b81d7cde4d78116b8037a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f076036b032a51882c7d184905a3983", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "a127c18eb2e0be7f3c68a60246b08a9a69e7be5d", "commitAfterChange": "771a62c1c5090742b5612a8958d0207ca0f557cc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\t\t\tif (isInterface) {", "+\t\t\t\t// interface cannot have a constructor", "+\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "+\t\t\t\t// no return type for a method that is not a constructor", "+\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\t\tbreak;", "-\t\tint declarationSourceEnd = methodDeclaration.bodyEnd;", "-\t\tmethodDecl.setSourceRange(declarationSourceStart, declarationSourceEnd - declarationSourceStart + 1);", "-\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(methodDeclaration.bodyEnd + 1, methodDeclaration.declarationSourceEnd);", "+\t\tint bodyEnd = methodDeclaration.bodyEnd;", "+\t\tmethodDecl.setSourceRange(declarationSourceStart, bodyEnd - declarationSourceStart + 1);", "+\t\tint declarationSourceEnd = methodDeclaration.declarationSourceEnd;", "+\t\tint rightBraceOrSemiColonPositionStart = bodyEnd == declarationSourceEnd ? bodyEnd : bodyEnd + 1;", "+\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(rightBraceOrSemiColonPositionStart, declarationSourceEnd);", "-\t\t\tend = retrieveRightBrace(methodDeclaration.bodyEnd, methodDeclaration.declarationSourceEnd);", "+\t\t\tend = retrieveRightBrace(methodDeclaration.bodyEnd, declarationSourceEnd);", "-\t\t\tif (block != null && (Modifier.isAbstract(methodDecl.getModifiers()) || Modifier.isNative(methodDecl.getModifiers()))) {", "+\t\t\tif (block != null", "+\t\t\t\t\t&& (Modifier.isAbstract(methodDecl.getModifiers())", "+\t\t\t\t\t\t\t|| Modifier.isNative(methodDecl.getModifiers())", "+\t\t\t\t\t\t\t|| isInterface)) {", "-\t\t\t\tstart = retrieveStartBlockPosition(methodHeaderEnd, declarationSourceEnd);", "+\t\t\t\tstart = retrieveStartBlockPosition(methodHeaderEnd, bodyEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fe84b4616d9a6d5fca3ab2fd37b8da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "fb0020e27808c429f3f311a11ef0ea9ea04441aa", "commitAfterChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment)", "signatureAfterChange": " \t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment)", "diff": ["-\t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment) {", "+\t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment) {", "-\t\t\t\tif (this.instantiation != null) {", "-\t\t\t\t\t// sanity check:", "-\t\t\t\t\tif (!TypeBinding.equalsEquals(this.instantiation, type)) {", "-\t\t\t\t\t\tthis.instantiation = null;", "-\t\t\t\t\t\treturn; // incorporation should find the conflict and fail the inference", "-\t\t\t\t\t}", "-\t\t\t\t\tlong oldBits = this.instantiation.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\tif (oldBits != 0) {", "-\t\t\t\t\t\tlong newBits = type.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\tif (newBits == oldBits || newBits == 0)", "-\t\t\t\t\t\t\treturn; // no update", "-\t\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "-\t\t\t\t\t\tif (annot != null)", "-\t\t\t\t\t\t\ttype = environment.createAnnotatedType(this.instantiation, annot);", "-\t\t\t\t\t}", "+\t\t\t\tlong oldBits = ((this.instantiation != null) ? this.instantiation.tagBits : variable.tagBits)", "+\t\t\t\t\t\t\t\t& TagBits.AnnotationNullMASK;", "+\t\t\t\tlong requestedBits = type.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tlong newBits = (oldBits == TagBits.AnnotationNonNull) ? oldBits : requestedBits; // need to preserve @NonNull", "+\t\t\t\tif (this.instantiation != null && oldBits == newBits) {", "+\t\t\t\t\treturn; // no update needed", "+\t\t\t\t}", "+\t\t\t\tif (requestedBits != newBits) {", "+\t\t\t\t\t// adjust 'type' to fit the newBits", "+\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "+\t\t\t\t\tif (annot != null)", "+\t\t\t\t\t\ttype = environment.createAnnotatedType(type.unannotated(), annot);"]}], "num": 4868}
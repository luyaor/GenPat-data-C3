{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e29ceda85f8902c8f93fb7891878cc8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9adcae9bcd4702d8b5d7f771fd80ed7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "c4f17ac79e05c4dff8c3cc6e660e1fc73ee3406f", "commitAfterChange": "29d06747dc9924aaa37b6f5478bee32ae657345a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected ReferenceBinding getReferenceBinding()", "signatureAfterChange": " \t \tpublic List<? extends TypeMirror> getInterfaces()", "diff": ["-\tprotected ReferenceBinding getReferenceBinding() {", "-\t\treturn (ReferenceBinding)_binding;", "+\tpublic List<? extends TypeMirror> getInterfaces() {", "+\t\tReferenceBinding binding = (ReferenceBinding)_binding;", "+\t\tif (null == binding.superInterfaces() || binding.superInterfaces().length == 0) {", "+\t\t\treturn Collections.emptyList();", "+\t\t}", "+\t\tList<TypeMirror> interfaces = new ArrayList<TypeMirror>(binding.superInterfaces().length);", "+\t\tfor (ReferenceBinding interfaceBinding : binding.superInterfaces()) {", "+\t\t\tTypeMirror interfaceType = Factory.newTypeMirror(interfaceBinding);", "+\t\t\tinterfaces.add(interfaceType);", "+\t\t}", "+\t\treturn interfaces;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cebfd8fb7568255938517eacca9a3d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java", "commitBeforeChange": "e9c60c881f616cec2b0aa059fea6029ace6786f2", "commitAfterChange": "7c5bfe960ac34f9bf490d269fc7b421c65f6f08b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\t//TODO: what should this method do for generic types, as opposed to parameterized types?", "+\t\t//E.g., class <T1> Foo {}, get the class as a type, what are its type arguments?", "+\t\tReferenceBinding binding = (ReferenceBinding)_binding;", "+\t\tif (!binding.isParameterizedType()) {", "+\t\t\treturn Collections.emptyList();", "+\t\t}", "+\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "+\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(ptb.arguments.length);", "+\t\tfor (TypeBinding arg : ptb.arguments) {", "+\t\t\targs.add(Factory.newTypeMirror(arg));", "+\t\t}", "+\t\treturn Collections.unmodifiableList(args);"]}], "num": 31850}
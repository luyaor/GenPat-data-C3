{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "796c7532612b640aa0194a2391ffafb1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643881ef2525dd128779d08f849e3fff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 399, "methodNumberAfterChange": 399, "signatureBeforeChange": " private void syntaxError( \tint id, \tint startPosition, \tint endPosition, \tint currentKind, \tchar[] currentTokenSource, \tString errorTokenName, \tString expectedToken)", "signatureAfterChange": " private void syntaxError( \tint id, \tint startPosition, \tint endPosition, \tint currentKind, \tchar[] currentTokenSource, \tString errorTokenName, \tString expectedToken)", "diff": ["+\tif (currentKind == TerminalTokens.TokenNameAT && expectedToken != null && expectedToken.equals(\"@\")) { //$NON-NLS-1$", "+\t\t// In the diagnose parser case, we don't have the wherewithal to discriminate when we should hand out @308 vs @. So we always answer @.", "+\t\t// We should silently recover so swallow the message.", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfb3c7c151a47bed11dca27fe7c9ea93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "d1604ec4aaf14502ebd4979c300c0ac9998996a1", "commitAfterChange": "e50fa330bbb302e8ef44446c0c3afc64880dfa01", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate boolean dumpBinaryExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "signatureAfterChange": " \t \tprivate boolean dumpBinaryExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "diff": ["-\t\t\t\t\t\tif (operators[i] == TerminalTokens.TokenNameMINUS && isMinus()) {", "+\t\t\t\t\t\tif (operators[i] == TerminalTokens.TokenNameMINUS && isNextToken(TerminalTokens.TokenNameMINUS)) {", "-\t\t\tif (operator == TerminalTokens.TokenNameMINUS && isMinus()) {", "+\t\t\tif (operator == TerminalTokens.TokenNameMINUS && isNextToken(TerminalTokens.TokenNameMINUS)) {"]}], "num": 39965}
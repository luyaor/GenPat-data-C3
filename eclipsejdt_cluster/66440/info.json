{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15c446c998e2ec777b4a701058d2b096", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e25c208b424fd8886f28ff5969a0cd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1032, "methodNumberAfterChange": 1032, "signatureBeforeChange": " public void test1008()", "signatureAfterChange": " public void test1008()", "diff": ["-\t\t\t\"\t\treturn null;\\n\" +", "+\t\t\t\"\t\treturn zork;\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" +", "-\t\t\"\tvoid foo(L l, C<? extends X> c) {\\r\\n\" +", "-\t\t\"\t         ^\\n\" +", "-\t\t\"L is a raw type. References to generic type L<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tX x = bar(l, c);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(L, C) of the generic method bar(L<T>, C<? extends T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tX x = bar(l, c);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Object to X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tX x = bar(l, c);\\r\\n\" +", "-\t\t\"\t          ^\\n\" +", "-\t\t\"Type safety: The expression of type L needs unchecked conversion to conform to L<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"\tvoid foo(L l, C<? extends X> c) {\\n\" + ", "+\t\t\"\t         ^\\n\" + ", "+\t\t\"L is a raw type. References to generic type L<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tX x = bar(l, c);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(L, C<capture#1-of ? extends X>) of the generic method bar(L<T>, C<? extends T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tX x = bar(l, c);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Object to X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tX x = bar(l, c);\\n\" + ", "+\t\t\"\t          ^\\n\" + ", "+\t\t\"Type safety: The expression of type L needs unchecked conversion to conform to L<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\treturn zork;\\n\" + ", "+\t\t\"\t       ^^^^\\n\" + ", "+\t\t\"zork cannot be resolved\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8024976e59f5926a6bc7881872a78dc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 176, "methodNumberAfterChange": 178, "signatureBeforeChange": "\r public void testBug434600b()", "signatureAfterChange": "\r public void testBug434600b()", "diff": ["-\t\t\t\"interface I<S, T extends @Nullable List<@NonNull List<S>>> {\\n\" +\r", "+\t\t\t\"interface I<S, T extends @NonNull List<@NonNull List<S>>> {\\n\" +\r", "-\t\t\t\"\tI<String, @Nullable ArrayList<@Nullable List<String>>> field;\\n\" +\r", "+\t\t\t\"\tI<String, @NonNull ArrayList<@Nullable List<String>>> field;\\n\" +\r", "-\t\t\t\"class C2 implements I<@NonNull String, @Nullable ArrayList<@NonNull List<@Nullable String>>> {}\\n\" // FIXME: cross checking for contradictory substitution for 'S' NYI\r", "+\t\t\t\"class C2 implements I<@NonNull String, @NonNull ArrayList<@NonNull List<@Nullable String>>> {}\\n\"\r", "-\t\t\"Null constraint mismatch: The type \\'ArrayList<@NonNull List<@Nullable String>>\\' is not a valid substitute for the type parameter \\'T extends @Nullable List<@NonNull List<S>>\\'\\n\" + \r", "+\t\t\"Null constraint mismatch: The type \\'ArrayList<@NonNull List<@Nullable String>>\\' is not a valid substitute for the type parameter \\'T extends @NonNull List<@NonNull List<S>>\\'\\n\" + \r", "-\t\t\"\tI<String, @Nullable ArrayList<@Nullable List<String>>> field;\\n\" + \r", "-\t\t\"\t          ^^^^^^^^^^^^^^^^^^^\\n\" + \r", "-\t\t\"Null constraint mismatch: The type \\'@Nullable ArrayList<@Nullable List<String>>\\' is not a valid substitute for the type parameter \\'T extends @Nullable List<@NonNull List<S>>\\'\\n\" + \r", "+\t\t\"\tI<String, @NonNull ArrayList<@Nullable List<String>>> field;\\n\" + \r", "+\t\t\"\t          ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"Null constraint mismatch: The type \\'@NonNull ArrayList<@Nullable List<String>>\\' is not a valid substitute for the type parameter \\'T extends @NonNull List<@NonNull List<S>>\\'\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"3. ERROR in C.java (at line 7)\\n\" + \r", "+\t\t\"\tclass C2 implements I<@NonNull String, @NonNull ArrayList<@NonNull List<@Nullable String>>> {}\\n\" + \r", "+\t\t\"\t                                       ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"Null constraint mismatch: The type \\'@NonNull ArrayList<@NonNull List<@Nullable String>>\\' is not a valid substitute for the type parameter \\'T extends @NonNull List<@NonNull List<S>>\\'\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efb795704597ae1e3bac654dddb6e159", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test003() throws JavaModelException", "signatureAfterChange": " public void test003() throws JavaModelException", "diff": ["-\t\t\t\"\t\t\treturn (xyz, pqr) -> first.\\n\" +", "+\t\t\t\"\t\t\treturn (xyz, pqr) -> first.c\\n\" +", "-\tString completeBehind = \"first.\";", "+\tString completeBehind = \"first.c\";", "+\t\t\t\"CASE_INSENSITIVE_ORDER[FIELD_REF]{CASE_INSENSITIVE_ORDER, Ljava.lang.String;, Ljava.util.Comparator<Ljava.lang.String;>;, CASE_INSENSITIVE_ORDER, null, 14}\\n\" +", "+\t\t\t\"copyValueOf[METHOD_REF]{copyValueOf(), Ljava.lang.String;, ([C)Ljava.lang.String;, copyValueOf, (arg0), 24}\\n\" +", "+\t\t\t\"copyValueOf[METHOD_REF]{copyValueOf(), Ljava.lang.String;, ([CII)Ljava.lang.String;, copyValueOf, (arg0, arg1, arg2), 24}\\n\" +", "+\t\t\t\"charAt[METHOD_REF]{charAt(), Ljava.lang.String;, (I)C, charAt, (arg0), 35}\\n\" +", "+\t\t\t\"chars[METHOD_REF]{chars(), Ljava.lang.CharSequence;, ()Ljava.util.stream.IntStream;, chars, null, 35}\\n\" +", "-\t\t\t\"equals[METHOD_REF]{equals(), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), 35}\\n\" +", "-\t\t\t\"finalize[METHOD_REF]{finalize(), Ljava.lang.Object;, ()V, finalize, null, 35}\\n\" +", "-\t\t\t\"getClass[METHOD_REF]{getClass(), Ljava.lang.Object;, ()Ljava.lang.Class<+Ljava.lang.Object;>;, getClass, null, 35}\\n\" +", "-\t\t\t\"hashCode[METHOD_REF]{hashCode(), Ljava.lang.Object;, ()I, hashCode, null, 35}\\n\" +", "-\t\t\t\"length[METHOD_REF]{length(), Ljava.lang.String;, ()I, length, null, 35}\\n\" +", "-\t\t\t\"notify[METHOD_REF]{notify(), Ljava.lang.Object;, ()V, notify, null, 35}\\n\" +", "-\t\t\t\"notifyAll[METHOD_REF]{notifyAll(), Ljava.lang.Object;, ()V, notifyAll, null, 35}\\n\" +", "-\t\t\t\"toString[METHOD_REF]{toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, 35}\\n\" +", "-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, ()V, wait, null, 35}\\n\" +", "-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (J)V, wait, (millis), 35}\\n\" +", "-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (JI)V, wait, (millis, nanos), 35}\",", "+\t\t\t\"codePointAt[METHOD_REF]{codePointAt(), Ljava.lang.String;, (I)I, codePointAt, (arg0), 35}\\n\" +", "+\t\t\t\"codePointBefore[METHOD_REF]{codePointBefore(), Ljava.lang.String;, (I)I, codePointBefore, (arg0), 35}\\n\" +", "+\t\t\t\"codePointCount[METHOD_REF]{codePointCount(), Ljava.lang.String;, (II)I, codePointCount, (arg0, arg1), 35}\\n\" +", "+\t\t\t\"codePoints[METHOD_REF]{codePoints(), Ljava.lang.CharSequence;, ()Ljava.util.stream.IntStream;, codePoints, null, 35}\\n\" +", "+\t\t\t\"compareTo[METHOD_REF]{compareTo(), Ljava.lang.String;, (Ljava.lang.String;)I, compareTo, (arg0), 35}\\n\" +", "+\t\t\t\"compareToIgnoreCase[METHOD_REF]{compareToIgnoreCase(), Ljava.lang.String;, (Ljava.lang.String;)I, compareToIgnoreCase, (arg0), 35}\\n\" +", "+\t\t\t\"concat[METHOD_REF]{concat(), Ljava.lang.String;, (Ljava.lang.String;)Ljava.lang.String;, concat, (arg0), 35}\\n\" +", "+\t\t\t\"contains[METHOD_REF]{contains(), Ljava.lang.String;, (Ljava.lang.CharSequence;)Z, contains, (arg0), 35}\\n\" +", "+\t\t\t\"contentEquals[METHOD_REF]{contentEquals(), Ljava.lang.String;, (Ljava.lang.CharSequence;)Z, contentEquals, (arg0), 35}\\n\" +", "+\t\t\t\"contentEquals[METHOD_REF]{contentEquals(), Ljava.lang.String;, (Ljava.lang.StringBuffer;)Z, contentEquals, (arg0), 35}\","]}], "num": 66440}
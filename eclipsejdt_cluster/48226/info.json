{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6c20304ec095330c991c041cd16fafe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90b9d6340938bd76c54a261a4579adcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "cb102deeeb30ec755d64a8d266f5423000dc4f4e", "commitAfterChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\t\t\t\tif (!params1[index].isRawType() || params1[index].erasure() != params2[index].erasure()) // want X#RAW to match X#RAW and X<T>", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tif (!params2[index].isRawType() || params1[index].erasure() != params2[index].erasure()) // want X#RAW to match X#RAW and X<T>", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0635d32b611c590a971e0272f71c918", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod)", "signatureAfterChange": " boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod)", "diff": ["-\tif (!this.type.isInterface())", "-\t\tif (method.declaringClass.isClass() || !this.type.implementsInterface(method.declaringClass, false))", "-\t\t\tif (otherMethod.declaringClass.isClass() || !this.type.implementsInterface(otherMethod.declaringClass, false))", "-\t\t\t\treturn true; // do not complain since the superclass already got blamed", "-", "+\t/* We used to have some checks here to see if we would have already blamed the super type and if so avoid blaming", "+\t   the current type again. I have gotten rid of them as they in fact short circuit error reporting in cases where", "+\t   they should not. This means that occasionally we would report the error twice - the diagnostics is valid however,", "+\t   albeit arguably redundant. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=334313. For an example of a test", "+\t   where we do this extra reporting see org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest.test159()", "+\t */"]}], "num": 48226}
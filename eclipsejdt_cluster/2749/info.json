{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "285c03b4b065590a7e78ddba2bcb967b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ba4fe8067593cb210415779892b2a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java", "commitBeforeChange": "93435bbc903bd3b20b6b025e5785dd8f0ccdee63", "commitAfterChange": "725055f2b34cdbfae0fb11f5bfd68ad41728348a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void testLambdaSpecifics()", "signatureAfterChange": " \t \tpublic void testLambdaSpecifics()", "diff": ["+\t\tSet<Modifier> modifiers = method.getModifiers();", "+\t\tassertModifiers(modifiers, new String[]{});", "+\t\tmodifiers = method.getModifiers();", "+\t\tassertModifiers(modifiers, new String[]{\"public\", \"default\"});", "+\t\tmethod = null;", "+\t\tmembers = _elementUtils.getAllMembers(annotatedType);", "+\t\tfor (ExecutableElement member : ElementFilter.methodsIn(members)) {", "+\t\t\tif (\"anotherDefault\".equals(member.getSimpleName().toString())) {", "+\t\t\t\tmethod = member;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tassertNotNull(\"Java8ElementProcessor#examineLambdaSpecifics: Element for method anotherDefault() should not be null\", method);", "+\t\tassertTrue(\"Java8ElementProcessor#examineLambdaSpecifics: Method anotherDefault() should be a default method\", method.isDefault());", "+\t\tmodifiers = method.getModifiers();", "+\t\tassertModifiers(modifiers, new String[]{\"public\", \"default\"});", "+\t\t", "+\t\t", "+\t\tmodifiers = method.getModifiers();", "+\t\tassertModifiers(modifiers, new String[]{\"public\", \"static\"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e43d7802d09f9d814bcf879fad5f94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "5ee2151c41af9ff855348a169dff9645033b3177", "commitAfterChange": "44dd3fd78d480cf979c77fad7d9bdc1e1fe0ad4d", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic void test0026() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0026() throws JavaModelException", "diff": ["+\t\tIMethodBinding methodBinding = enumConstantDeclaration.resolveConstructorBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tassertTrue(\"Not a constructor\", methodBinding.isConstructor());", "-\t\tassertEquals(\"wrong size\", 0, enumConstantDeclaration.arguments().size());\t\t", "+\t\tassertEquals(\"wrong size\", 0, enumConstantDeclaration.arguments().size());", "+\t\tmethodBinding = enumConstantDeclaration.resolveConstructorBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tassertTrue(\"Not a constructor\", methodBinding.isConstructor());", "+\t\tmethodBinding = enumConstantDeclaration.resolveConstructorBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tassertTrue(\"Not a constructor\", methodBinding.isConstructor());", "+\t\tmethodBinding = enumConstantDeclaration.resolveConstructorBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tassertTrue(\"Not a constructor\", methodBinding.isConstructor());"]}], "num": 2749}
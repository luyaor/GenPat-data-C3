{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30c3fcbb54980b49024d5da7a003d2b3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65cb08c7ba81500a8cff425e3022c946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t// handling innerclass instance allocation", "+\t\t// handling innerclass instance allocation - enclosing instance arguments", "-\t\t\tcodeStream.generateSyntheticArgumentValues(", "+\t\t\tcodeStream.generateSyntheticEnclosingInstanceValues(", "+\t\t// handling innerclass instance allocation - outer local arguments", "+\t\tif (allocatedType.isNestedType()) {", "+\t\t\tcodeStream.generateSyntheticOuterArgumentValues(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tallocatedType,", "+\t\t\t\tthis);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5077fe20b8ea3b6bbfc5bf7ae207b42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t// handling innerclass instance allocation", "+\t\t// handling innerclass instance allocation - enclosing instance arguments", "-\t\t\t// make sure its name is computed before arguments, since may be necessary for argument emulation", "-\t\t\tcodeStream.generateSyntheticArgumentValues(", "+\t\t\tcodeStream.generateSyntheticEnclosingInstanceValues(", "+\t\t// handling innerclass instance allocation - outer local arguments", "+\t\tif (allocatedType.isNestedType()) {", "+\t\t\tcodeStream.generateSyntheticOuterArgumentValues(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tallocatedType,", "+\t\t\t\tthis);", "+\t\t}", "+\t\t"]}], "num": 25498}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "242f96bd112aeb9a7e570036bb153018", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9288ae0831ad1686dec241705c2c265f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Constant resolveCase( \t\tBlockScope scope, \t\tTypeBinding switchType, \t\tSwitchStatement switchStatement)", "signatureAfterChange": " \tpublic Constant resolveCase( \t\tBlockScope scope, \t\tTypeBinding switchExpressionType, \t\tSwitchStatement switchStatement)", "diff": ["+\t */", "-\t\tTypeBinding switchType,", "+\t\tTypeBinding switchExpressionType,", "-\t\t\treturn null;", "+\t\t\treturn NotAConstant;", "-\t\tif (caseType == null || switchType == null) return null;", "-\t\tif (constantExpression.isConstantValueOfTypeAssignableToType(caseType, switchType))", "-\t\t\treturn constantExpression.constant;", "-\t\tif (caseType.isCompatibleWith(switchType))", "-\t\t\treturn constantExpression.constant;", "-\t\tscope.problemReporter().typeMismatchError(caseType, switchType, constantExpression);", "-\t\treturn null;", "+\t\tif (caseType == null || switchExpressionType == null) return NotAConstant;", "+\t\tif (constantExpression.isConstantValueOfTypeAssignableToType(caseType, switchExpressionType)", "+\t\t\t\t|| caseType.isCompatibleWith(switchExpressionType)) {", "+\t\t\tif (caseType.isEnum()) {", "+\t\t\t\tthis.isEnumConstant = true;", "+\t\t\t\tif (constantExpression instanceof NameReference", "+\t\t\t\t\t\t&& (constantExpression.bits & RestrictiveFlagMASK) == Binding.FIELD) {", "+\t\t\t\t\treturn Constant.fromValue(((NameReference)constantExpression).fieldBinding().id); // ordinal value", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\treturn constantExpression.constant;", "+\t\t\t}", "+\t\t}", "+\t\tscope.problemReporter().typeMismatchError(caseType, switchExpressionType, constantExpression);", "+\t\treturn NotAConstant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d7cfb75f39b9b5916c12e84f53078d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f0d98c4f580c534cd9bb9d201adb77ab90eafc65", "commitAfterChange": "44beb229da7acf29f8209404ea1120f9422c2f4a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);", "-\t\t\tif (this.isConstructorReference() && this.receiverType.isNestedType()) {", "-\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "-\t\t\t\tReferenceBinding[] syntheticArgumentTypes;", "-\t\t\t\tif ((syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "-\t\t\t\t\tint length = syntheticArgumentTypes.length;", "-\t\t\t\t\targumentsSize = length;", "-\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "-\t\t\t\t\t\tReferenceBinding syntheticArgumentType = syntheticArgumentTypes[i];", "-\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "-\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "-\t\t\t\t\t\t\t\tsyntheticArgumentType,", "-\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "-\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\tif (this.isConstructorReference()) {", "+\t\t\t\tReferenceBinding[] enclosingInstances = Binding.UNINITIALIZED_REFERENCE_TYPES;", "+\t\t\t\tif (this.receiverType.isNestedType()) {", "+\t\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "+\t\t\t\t\tif ((enclosingInstances = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "+\t\t\t\t\t\tint length = enclosingInstances.length;", "+\t\t\t\t\t\targumentsSize = length;", "+\t\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "+\t\t\t\t\t\t\tReferenceBinding syntheticArgumentType = enclosingInstances[i];", "+\t\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "+\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "+\t\t\t\t\t\t\t\t\tsyntheticArgumentType,", "+\t\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "+\t\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t// Reject types that capture outer local arguments, these cannot be manufactured by the metafactory.", "+\t\t\t\t\tif (nestedType.syntheticOuterLocalVariables() != null) {", "+\t\t\t\t\t\tcurrentScope.problemReporter().noSuchEnclosingInstance(nestedType.enclosingType, this, false);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.syntheticAccessor != null) {", "+\t\t\t\t\tthis.binding = sourceType.addSyntheticFactoryMethod(this.binding, this.syntheticAccessor, enclosingInstances);", "+\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);", "+\t}"]}], "num": 47404}
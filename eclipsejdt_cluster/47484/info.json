{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7546fde8a0c6fcf4e7737145c2e51b11", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20df0f0216a3dc47195c0a2e885e8d64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "57cba198120c4662ab850cc932bbebd6162d83ba", "commitAfterChange": "279aeb5315dd3e931b1b250acdd0f59424091807", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["+\t\tif (enclosingElement != null) { // skip if unable to find method", "+\t\t\t// compute source positions of the selector ", "+\t\t\tScanner scanner = parser.scanner;", "+\t\t\tint nameSourceStart = method.sourceStart;", "+\t\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "+\t\t\tscanner.resetTo(nameSourceStart, method.sourceEnd);", "+\t\t\ttry {", "+\t\t\t\tscanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\tint nameSourceEnd = scanner.currentPosition - 1;", "-\t\t// compute source positions of the selector ", "-\t\tScanner scanner = parser.scanner;", "-\t\tint nameSourceStart = method.sourceStart;", "-\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "-\t\tscanner.resetTo(nameSourceStart, method.sourceEnd);", "-\t\ttry {", "-\t\t\tscanner.getNextToken();", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "+\t\t\treport(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;", "-", "-\t\treport(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "-\t\t\tif ((this.matchContainer & PatternLocator.METHOD_CONTAINER) == 0) {", "-\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "-\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "-\t\t\t} else {", "+\t\t\tif ((this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0) {", "-\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\tAstNode node = nodes[i];", "-\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\tif (enclosingElement != null) { // skip if unable to find method", "+\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn;", "+\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbb59bda514a327aa8a422230662a845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateElementInCUOperation.java", "commitBeforeChange": "677db12ffe2b33d9711034d339aec7b56ab85d41", "commitAfterChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["-\tbeginTask(getMainTaskName(), getMainAmountOfWork());\r", "-\tJavaElementDelta delta = newJavaElementDelta();\r", "-\tICompilationUnit unit = getCompilationUnit();\r", "-\tgenerateNewCompilationUnitDOM(unit);\r", "-\tif (fCreationOccurred) {\r", "-\t\t//a change has really occurred\r", "-\t\tIBuffer buffer = unit.getBuffer();\r", "-\t\tchar[] bufferContents = buffer.getCharacters();\r", "-\t\tchar[] elementContents = org.eclipse.jdt.internal.core.Util.normalizeCRs(fCreatedElement.getCharacters(), bufferContents);\r", "-\t\tswitch (fReplacementLength) {\r", "-\t\t\tcase -1 : \r", "-\t\t\t\t// element is append at the end\r", "-\t\t\t\tbuffer.append(elementContents);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 0 :\r", "-\t\t\t\t// element is inserted\r", "-\t\t\t\tbuffer.replace(fInsertionPosition, 0, elementContents);\r", "-\t\t\t\tbreak;\r", "-\t\t\tdefault :\r", "-\t\t\t\t// element is replacing the previous one\r", "-\t\t\t\tbuffer.replace(fInsertionPosition, fReplacementLength, elementContents);\r", "+\ttry {\r", "+\t\tbeginTask(getMainTaskName(), getMainAmountOfWork());\r", "+\t\tJavaElementDelta delta = newJavaElementDelta();\r", "+\t\tICompilationUnit unit = getCompilationUnit();\r", "+\t\tgenerateNewCompilationUnitDOM(unit);\r", "+\t\tif (fCreationOccurred) {\r", "+\t\t\t//a change has really occurred\r", "+\t\t\tIBuffer buffer = unit.getBuffer();\r", "+\t\t\tif (buffer  == null) return;\r", "+\t\t\tchar[] bufferContents = buffer.getCharacters();\r", "+\t\t\tif (bufferContents == null) return;\r", "+\t\t\tchar[] elementContents = org.eclipse.jdt.internal.core.Util.normalizeCRs(fCreatedElement.getCharacters(), bufferContents);\r", "+\t\t\tswitch (fReplacementLength) {\r", "+\t\t\t\tcase -1 : \r", "+\t\t\t\t\t// element is append at the end\r", "+\t\t\t\t\tbuffer.append(elementContents);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase 0 :\r", "+\t\t\t\t\t// element is inserted\r", "+\t\t\t\t\tbuffer.replace(fInsertionPosition, 0, elementContents);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault :\r", "+\t\t\t\t\t// element is replacing the previous one\r", "+\t\t\t\t\tbuffer.replace(fInsertionPosition, fReplacementLength, elementContents);\r", "+\t\t\t}\r", "+\t\t\tunit.save(null, false);\r", "+\t\t\tboolean isWorkingCopy = unit.isWorkingCopy();\r", "+\t\t\tthis.hasModifiedResource = !isWorkingCopy;\r", "+\t\t\tworked(1);\r", "+\t\t\tfResultElements = generateResultHandles();\r", "+\t\t\tif (!isWorkingCopy) { // if unit is working copy, then save will have already fired the delta\r", "+\t\t\t\tif (unit.getParent().exists()) {\r", "+\t\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "+\t\t\t\t\t\tdelta.added(fResultElements[i]);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\taddDelta(delta);\r", "+\t\t\t\t} // else unit is created outside classpath\r", "+\t\t\t\t  // non-java resource delta will be notified by delta processor\r", "+\t\t\t}\r", "-\t\tunit.save(null, false);\r", "-\t\tboolean isWorkingCopy = unit.isWorkingCopy();\r", "-\t\tthis.hasModifiedResource = !isWorkingCopy;\r", "-\t\tworked(1);\r", "-\t\tfResultElements = generateResultHandles();\r", "-\t\tif (!isWorkingCopy) { // if unit is working copy, then save will have already fired the delta\r", "-\t\t\tif (unit.getParent().exists()) {\r", "-\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "-\t\t\t\t\tdelta.added(fResultElements[i]);\r", "-\t\t\t\t}\r", "-\t\t\t\taddDelta(delta);\r", "-\t\t\t} // else unit is created outside classpath\r", "-\t\t\t  // non-java resource delta will be notified by delta processor\r", "-\t\t}\r", "+\t} finally {\r", "+\t\tdone();\r", "-\tdone();\r"]}], "num": 47484}
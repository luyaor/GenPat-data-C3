{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c2200225a4d99348fe2499b4cda931f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "786630c10070820c57163e396c88e6be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "985d5704b5812718c29d572a9f4e88e4ef1e7e81", "commitAfterChange": "f881f7f3af831f777efbcae1d912f604e776b198", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static String bind(String id, String[] arguments)", "signatureAfterChange": " \tpublic static String bind(String id, String[] arguments)", "diff": ["-\t\t// for compatibility with MessageFormat which eliminates double quotes in original message", "-\t\tchar[] messageWithNoDoubleQuotes =", "-\t\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "-\t", "-\t\tif (arguments == null) return new String(messageWithNoDoubleQuotes);", "-\t", "-\t\tint length = messageWithNoDoubleQuotes.length;", "-\t\tint start = 0;", "-\t\tint end = length;", "-\t\tStringBuffer output = null;", "-\t\twhile (true) {", "-\t\t\tif ((end = CharOperation.indexOf('{', messageWithNoDoubleQuotes, start)) > -1) {", "-\t\t\t\tif (output == null) output = new StringBuffer(length+arguments.length*20);", "-\t\t\t\toutput.append(messageWithNoDoubleQuotes, start, end - start);", "-\t\t\t\tif ((start = CharOperation.indexOf('}', messageWithNoDoubleQuotes, end + 1)) > -1) {", "-\t\t\t\t\tint index = -1;", "-\t\t\t\t\tString argId = new String(messageWithNoDoubleQuotes, end + 1, start - end - 1);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tindex = Integer.parseInt(argId);", "-\t\t\t\t\t\tif (arguments[index] == null) {", "-\t\t\t\t\t\t\toutput.append('{').append(argId).append('}'); // leave parameter in since no better arg '{0}'", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\toutput.append(arguments[index]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "-\t\t\t\t\t\tboolean done = false;", "-\t\t\t\t\t\tif (!id.equals(argId)) {", "-\t\t\t\t\t\t\tString argMessage = null;", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "-\t\t\t\t\t\t\t\toutput.append(argMessage);", "-\t\t\t\t\t\t\t\tdone = true;", "-\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "-\t\t\t\t\t\t\t\t// unable to bind argument, ignore (will leave argument in)", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!done) output.append(messageWithNoDoubleQuotes, end + 1, start - end);", "-\t\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\t\t\t\t\toutput.append(\"{missing \" + Integer.toString(index) + \"}\"); //$NON-NLS-2$ //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tstart++;", "-\t\t\t\t} else {", "-\t\t\t\t\toutput.append(messageWithNoDoubleQuotes, end, length);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (output == null) return new String(messageWithNoDoubleQuotes);", "-\t\t\t\toutput.append(messageWithNoDoubleQuotes, start, length - start);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn output.toString();", "+\t\treturn MessageFormat.format(message, arguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf296267114974e4bc2fd82925b15a5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "985d5704b5812718c29d572a9f4e88e4ef1e7e81", "commitAfterChange": "f881f7f3af831f777efbcae1d912f604e776b198", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic static String bind(String id, String[] arguments)", "signatureAfterChange": " \tpublic static String bind(String id, String[] arguments)", "diff": ["-\t\t// for compatibility with MessageFormat which eliminates double quotes in original message", "-\t\tchar[] messageWithNoDoubleQuotes =", "-\t\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "-\t\t", "-\t\tmessage = new String(messageWithNoDoubleQuotes);", "-\t\tint length = message.length();", "-\t\tint start = -1;", "-\t\tint end = length;", "-\t\tStringBuffer output = null;", "-\t\twhile (true) {", "-\t\t\tif ((end = message.indexOf('{', start)) > -1) {", "-\t\t\t\tif (output == null) output = new StringBuffer(80);", "-\t\t\t\toutput.append(message.substring(start + 1, end));", "-\t\t\t\tif ((start = message.indexOf('}', end)) > -1) {", "-\t\t\t\t\tint index = -1;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "-\t\t\t\t\t\tindex = Integer.parseInt(argId);", "-\t\t\t\t\t\tif (arguments == null || arguments[index] == null) {", "-\t\t\t\t\t\t\toutput.append('{').append(argId).append('}'); // leave parameter in since no better arg '{0}'", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\toutput.append(arguments[index]);", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "-\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "-\t\t\t\t\t\tboolean done = false;", "-\t\t\t\t\t\tif (!id.equals(argId)) {", "-\t\t\t\t\t\t\tString argMessage = null;", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "-\t\t\t\t\t\t\t\toutput.append(argMessage);", "-\t\t\t\t\t\t\t\tdone = true;", "-\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "-\t\t\t\t\t\t\t\t// missing the right resource", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!done) output.append(message.substring(end + 1, start + 1));", "-\t\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\t\t\t\t\toutput.append(\"{missing \" + Integer.toString(index) + \"}\"); //$NON-NLS-2$ //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\toutput.append(message.substring(end, length));", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (output == null) return message;", "-\t\t\t\toutput.append(message.substring(start + 1, length));", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn output.toString();", "+\t\treturn MessageFormat.format(message, arguments);"]}], "num": 4528}
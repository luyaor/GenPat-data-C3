{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e49a79a9d02eeb319bd947274fc97cc1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a745926a2156dba16d640eb3c91ec25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-//\t\t\t\t\t\t\t\t\tTypeBinding[] types = { castType, interfaceType };", "-//\t\t\t\t\t\t\t\t\tif (scope.lowerUpperBound(types) == null) /* would answer VoidBinding if unrelated interfaces */", "-//\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\t\t\t\tif (match == null /*|| !match.isCompatibleWith(expressionType)*/) {", "-\t\t\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t// ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>", "+\t\t\t\t\t\t\t\t\tif (((ReferenceBinding)castType).hasIncompatibleSuperType((ReferenceBinding) expressionType))", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t// ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>", "+\t\t\t\t\t\t\t\t\tif (refExprType.hasIncompatibleSuperType((ReferenceBinding) castType))", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db0ec45f3e086fc8e298167476d0c852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "5d5551ec2f3d482c3329accb7b283797956514be", "commitAfterChange": "dd3fd2545bf6e1ef8b167aefc85ac247cd0a3802", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": " public int matchLevel(AstNode node, boolean resolve)", "diff": ["+\t} else if (node instanceof ConstructorDeclaration) {", "+\t\treturn this.matchLevel((ConstructorDeclaration)node, resolve);", "+\t} else if (node instanceof TypeDeclaration) {", "+\t\treturn this.matchLevel((TypeDeclaration)node, resolve);", "+}"]}], "num": 66622}
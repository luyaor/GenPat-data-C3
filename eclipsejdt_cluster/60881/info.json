{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "637fabd032e4e857835587f9b8fed937", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c593aa838662cccfdd5c48870a96de5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["-\t\t\"The return type is incompatible with J.c(), X.c()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.c(), X.c()\\n\" +", "-\t\t\"The return type is incompatible with I.b(), X.b()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.b(), X.b()\\n\" +", "-\t\t\"The return type is incompatible with J.a(), I.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.a(), I.a()\\n\" +", "-\t\t\"The return type is incompatible with J.c(), X.c()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.c(), X.c()\\n\" +", "-\t\t\"The return type is incompatible with I.b(), X.b()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.b(), X.b()\\n\" +", "-\t\t\"The return type is incompatible with I.a(), J.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.a(), J.a()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba6cb76c4a5634505b913a2248027d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test074()", "signatureAfterChange": " public void test074()", "diff": ["-\t\t\"1. ERROR in X4a.java (at line 3)\\n\" + ", "-\t\t\"\tpublic abstract void test();\\n\" + ", "-\t\t\"\t                     ^^^^^^\\n\" + ", "-\t\t\"The enum X4a can only define the abstract method test() if it also defines enum constants with corresponding implementations\\n\" + ", "+\t\t\"1. ERROR in X4a.java (at line 2)\\n\" + ", "+\t\t\"\tA;\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method test()\\n\" + ", "-\t\t\"\t    ^\\n\" + ", "-\t\t\"The type new X4c(){} must implement the inherited abstract method X4c.test()\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method test()\\n\" + "]}], "num": 60881}
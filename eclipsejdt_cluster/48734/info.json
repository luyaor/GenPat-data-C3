{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51718b5eeb47174f8059f978d86f9bbb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b420d5d628257996584efee27c9b362", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "9318beb1001c9d1a97d62cd25a1df5140d1d4221", "commitAfterChange": "fbb5cd8172f148996d50fb2879a48666d0d58444", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprivate void updateProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "signatureAfterChange": " \t \tprivate void updateProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "diff": ["-\t\tIClasspathEntry generatedSourceClasspathEntry = ", "-\t\t\tJavaCore.newSourceEntry(folder.getFullPath());", "+\t\tIPath path = folder.getFullPath();", "-\t\t\tif (cp[i].getPath().equals(generatedSourceClasspathEntry.getPath())) ", "+\t\t\tif (cp[i].getPath().equals( path )) ", "+\t\t", "+\t\t\t// update exclusion patterns", "+\t\t\tArrayList<IPath> exclusions = new ArrayList<IPath>();", "+\t\t\tfor ( int i = 0; i< cp.length; i++ )", "+\t\t\t{", "+\t\t\t\tif ( cp[i].getPath().isPrefixOf( path ) )", "+\t\t\t\t{", "+\t\t\t\t\t// exclusion patterns must be project-relative paths, and must end with a \"/\"", "+\t\t\t\t\tIPath projectRelativePath = folder.getProjectRelativePath().addTrailingSeparator();", "+\t\t\t\t\t", "+\t\t\t\t\t// path is contained in an existing source path, so update existing paths's exclusion patterns\t\t\t\t", "+\t\t\t\t\tIPath[] oldExclusions = cp[i].getExclusionPatterns();", "+", "+\t\t\t\t\t// don't add if exclusion pattern already contains src dir", "+\t\t\t\t\tboolean add = true;", "+\t\t\t\t\tfor ( int j = 0; j < oldExclusions.length; j++ )", "+\t\t\t\t\t\tif ( oldExclusions[j].equals( projectRelativePath ) )", "+\t\t\t\t\t\t\tadd = false;", "+\t\t\t\t\t", "+\t\t\t\t\tif ( add )", "+\t\t\t\t\t{", "+\t\t\t\t\t\tIPath[] newExclusions;", "+\t\t\t\t\t\tif ( cp[i].getExclusionPatterns() == null )", "+\t\t\t\t\t\t\tnewExclusions = new IPath[1];", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tnewExclusions = new IPath[ oldExclusions.length + 1 ];", "+\t\t\t\t\t\t\tSystem.arraycopy( oldExclusions, 0, newExclusions, 0, oldExclusions.length );", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewExclusions[ newExclusions.length - 1 ] = projectRelativePath;", "+\t\t\t\t\t\tcp[i] = JavaCore.newSourceEntry(cp[i].getPath(), cp[i].getInclusionPatterns(), newExclusions, cp[i].getOutputLocation(), cp[i].getExtraAttributes());", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\telse if ( path.isPrefixOf( cp[i].getPath() ))", "+\t\t\t\t{", "+\t\t\t\t\t// new source path contains an existing source path, so add an exclusion pattern for it", "+\t\t\t\t\texclusions.add( cp[i].getPath().addTrailingSeparator() );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tIPath[] exclusionPatterns = exclusions.toArray( new IPath[exclusions.size()] );", "+\t\t\tIClasspathEntry generatedSourceClasspathEntry = ", "+\t\t\t\tJavaCore.newSourceEntry(folder.getFullPath(), exclusionPatterns );", "+\t\t\t", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "525cb41b8bc9576f2dca2cc5b167f0b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tIClasspathEntry[] classpath = this.newRawPath;\r", "+\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r", "+\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\tboolean allowNestingInOutput = false;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "+\t\t\tallowNestingInOutput = true;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "+\t\r", "+\t// check all entries\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tIClasspathEntry entry = classpath[i];\r", "+\t\tIPath entryPath = entry.getPath();\r", "+\r", "+\t\t// no further check if entry coincidates with project or output location\r", "+\t\tif (entryPath.equals(projectPath)) continue;\r", "+\t\tif (entryPath.equals(outputLocation)) continue;\r", "+\t\t\r", "+\t\t// prevent nesting source entries in each other\r", "+\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "+\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "+\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// prevent nesting output location inside entry\r", "+\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\r", "+\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "+\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\t}\r", "+\treturn JavaModelStatus.VERIFIED_OK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "844edf3358c0e2dfa723b8b83f18c3aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tIClasspathEntry[] classpath = this.newRawPath;\r", "+\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r", "+\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\tboolean allowNestingInOutput = false;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "+\t\t\tallowNestingInOutput = true;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "+\t\r", "+\t// check all entries\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tIClasspathEntry entry = classpath[i];\r", "+\t\tIPath entryPath = entry.getPath();\r", "+\r", "+\t\t// no further check if entry coincidates with project or output location\r", "+\t\tif (entryPath.equals(projectPath)) continue;\r", "+\t\tif (entryPath.equals(outputLocation)) continue;\r", "+\t\t\r", "+\t\t// prevent nesting source entries in each other\r", "+\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "+\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "+\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// prevent nesting output location inside entry\r", "+\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\r", "+\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "+\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\t}\r", "+\treturn JavaModelStatus.VERIFIED_OK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac8f6b7891aaf215108b49cb03666d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tIClasspathEntry[] classpath = this.newRawPath;\r", "+\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r", "+\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\tboolean allowNestingInOutput = false;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "+\t\t\tallowNestingInOutput = true;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "+\t\r", "+\t// check all entries\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tIClasspathEntry entry = classpath[i];\r", "+\t\tIPath entryPath = entry.getPath();\r", "+\r", "+\t\t// no further check if entry coincidates with project or output location\r", "+\t\tif (entryPath.equals(projectPath)) continue;\r", "+\t\tif (entryPath.equals(outputLocation)) continue;\r", "+\t\t\r", "+\t\t// prevent nesting source entries in each other\r", "+\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "+\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "+\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// prevent nesting output location inside entry\r", "+\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\r", "+\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "+\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\t}\r", "+\treturn JavaModelStatus.VERIFIED_OK;\r"]}], "num": 48734}
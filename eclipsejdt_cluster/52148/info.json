{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92aded3072d4071138c566725a78fdf6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "666fbcac7cdce9a62a7c09af532cbf5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "57f58e2a83bf12a567b63842cf84a5fc12572160", "commitAfterChange": "9674e3cb2b45f11c40bb76a8bdb3c8663d35e93e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \t\r \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "signatureAfterChange": "\r \t\r \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "diff": ["-\t\t\r", "-\t\tTypeDeclaration typeDeclaration = converter.buildTypeDeclaration(type, compilationUnit, compilationResult, problemReporter);\r", "-\t\t\r", "-\t\tif(compilationUnit != null) {\t\r", "-\t\t\t// build AST from snippet\r", "-\t\t\tInitializer fakeInitializer = parseSnippeInitializer(snippet, position, localVariableTypeNames, localVariableNames, localVariableModifiers, isStatic);\r", "-\t\t\t\r", "-\t\t\t// merge AST\r", "-\t\t\tFieldDeclaration[] oldFields = typeDeclaration.fields;\r", "-\t\t\tFieldDeclaration[] newFields = new FieldDeclaration[oldFields.length + 1];\r", "-\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);\r", "-\t\t\tnewFields[oldFields.length] = fakeInitializer;\r", "-\t\t\ttypeDeclaration.fields = newFields;\r", "-\t\t\tif(DEBUG) {\r", "-\t\t\t\tSystem.out.println(\"SNIPPET COMPLETION AST :\");\r", "-\t\t\t\tSystem.out.println(compilationUnit.toString());\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tif (compilationUnit.types != null) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tlookupEnvironment.buildTypeBindings(compilationUnit);\r", "-\t\t\t\r", "-\t\t\t\t\tif ((unitScope = compilationUnit.scope) != null) {\r", "-\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(compilationUnit, true);\r", "-\t\t\t\t\t\tcompilationUnit.scope.faultInTypes();\r", "-\t\t\t\t\t\tcompilationUnit.resolve();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} catch (CompletionNodeFound e) {\r", "-\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "-\t\t\t\t\tif (e.astNode != null) {\r", "-\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "-\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\ttry {\r", "+\t\t\tTypeDeclaration typeDeclaration = converter.buildTypeDeclaration(type, compilationUnit, compilationResult, problemReporter);\r", "+\t\t\r", "+\t\t\tif(typeDeclaration != null) {\t\r", "+\t\t\t\t// build AST from snippet\r", "+\t\t\t\tInitializer fakeInitializer = parseSnippeInitializer(snippet, position, localVariableTypeNames, localVariableNames, localVariableModifiers, isStatic);\r", "+\t\t\t\t\r", "+\t\t\t\t// merge AST\r", "+\t\t\t\tFieldDeclaration[] oldFields = typeDeclaration.fields;\r", "+\t\t\t\tFieldDeclaration[] newFields = new FieldDeclaration[oldFields.length + 1];\r", "+\t\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);\r", "+\t\t\t\tnewFields[oldFields.length] = fakeInitializer;\r", "+\t\t\t\ttypeDeclaration.fields = newFields;\r", "+\t\t\r", "+\t\t\t\tif(DEBUG) {\r", "+\t\t\t\t\tSystem.out.println(\"SNIPPET COMPLETION AST :\");\r", "+\t\t\t\t\tSystem.out.println(compilationUnit.toString());\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\tif (compilationUnit.types != null) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(compilationUnit);\r", "+\t\t\t\t\r", "+\t\t\t\t\t\tif ((unitScope = compilationUnit.scope) != null) {\r", "+\t\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(compilationUnit, true);\r", "+\t\t\t\t\t\t\tcompilationUnit.scope.faultInTypes();\r", "+\t\t\t\t\t\t\tcompilationUnit.resolve();\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (CompletionNodeFound e) {\r", "+\t\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "+\t\t\t\t\t\tif (e.astNode != null) {\r", "+\t\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "+\t\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\t\t\t\t\t}\r", "+\t\t} catch(JavaModelException e) {\r", "+\t\t\t// Do nothing\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7f3986bc48b5aa0639ac00410aca603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6ccbfcdf7763fcaeda1d0244386479851683bc5d", "commitAfterChange": "33c49d622bab8462233806f9b2a9a525e0eeed12", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "-\t\t\texternalFoldersManager.createExternalFoldersProject(monitor);", "+\t\t\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "-\t\t\texternalFoldersManager.createPendingFolders(monitor);", "+\t\t\ttry {", "+\t\t\t\texternalFoldersManager.createPendingFolders(monitor);", "+\t\t\t}", "+\t\t\tcatch(JavaModelException jme) {", "+\t\t\t\t// Creation of external folder project failed. Log it and continue;", "+\t\t\t\tUtil.log(jme, \"Error while processing external folders\"); //$NON-NLS-1$", "+\t\t\t}"]}], "num": 52148}
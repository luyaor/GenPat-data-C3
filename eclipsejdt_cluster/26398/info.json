{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89992324c8dc0a62198ff84693f3fd52", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea2adfa788d36f2c74465b84b1e23de7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "      public PackageDeclaration getPackage(String name)", "signatureAfterChange": "      public PackageDeclaration getPackage(String name)", "diff": ["+\t\tif (name == null)", "+\t\t\tthrow new IllegalArgumentException(\"name cannot be null\");", "+\t\t", "-        throw new UnsupportedOperationException(\"NYI\");       ", "+        IPackageFragment[] pkgFrags = PackageUtil.getPackageFragments(name, this);", "+\t\t", "+\t\t// No packages found, null expected", "+\t\tif (pkgFrags.length == 0)", "+\t\t\treturn null;", "+\t\t", "+\t\t// If there are no source or class files, we'll need to return", "+\t\t// a special implementation of the package decl that expects", "+\t\t// no declarations inside it", "+\t\tboolean containsNoJavaResources = true;", "+\t\tfor (IPackageFragment pkg : pkgFrags) {", "+\t\t\ttry {", "+\t\t\t\tif (pkg.containsJavaResources()) {", "+\t\t\t\t\tcontainsNoJavaResources = false;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (JavaModelException e) {}", "+\t\t}", "+\t\tif (containsNoJavaResources)", "+\t\t\treturn new PackageDeclarationImplNoBinding(pkgFrags, this);", "+\t\t", "+\t\t// We should be able to create a class or ", "+\t\t// source file from one of the packages.", "+\t\tICompilationUnit compUnit = null;", "+\t\tIClassFile classFile = null;", "+\t\t", "+\t\tOUTER:", "+\t\tfor (IPackageFragment pkg : pkgFrags) {", "+\t\t\ttry {", "+\t\t\t\tICompilationUnit[] compUnits = pkg.getCompilationUnits();", "+\t\t\t\tif (compUnits.length > 0) {", "+\t\t\t\t\tcompUnit = compUnits[0];", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tIClassFile[] classFiles = pkg.getClassFiles();", "+\t\t\t\tif (classFiles.length > 0) {", "+\t\t\t\t\t// Need to grab the first one that's not an inner class,", "+\t\t\t\t\t// as eclipse has trouble parsing inner class files", "+\t\t\t\t\tfor (IClassFile tempClassFile : classFiles) {", "+\t\t\t\t\t\tif (tempClassFile.getElementName().indexOf(\"$\") < 0) {", "+\t\t\t\t\t\t\tclassFile = tempClassFile;", "+\t\t\t\t\t\t\tbreak OUTER;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (JavaModelException e) {}", "+\t\t}", "+\t\t", "+\t\tIType type = null;", "+\t\tif (compUnit != null) {", "+\t\t\ttry {", "+\t\t\t\tIType[] types = compUnit.getAllTypes();", "+\t\t\t}", "+\t\t\tcatch (JavaModelException e) {}", "+\t\t}", "+\t\telse if (classFile != null) {", "+\t\t\ttry {", "+\t\t\t\ttype = classFile.getType();", "+\t\t\t}", "+\t\t\tcatch (JavaModelException e) {}", "+\t\t}", "+\t\t", "+\t\t// Given a type, we can construct a package declaration impl from it,", "+\t\t// but we must hide the fact that it came from a real declaration,", "+\t\t// as the client requested it without that context", "+\t\tif (type != null) {", "+\t\t\tTypeDeclarationImpl typeDecl = (TypeDeclarationImpl)getTypeDeclaration(type);", "+\t\t\tITypeBinding binding = typeDecl.getDeclarationBinding();", "+\t\t\treturn new PackageDeclarationImpl(binding.getPackage(), typeDecl, this, true);", "+\t\t}", "+\t\t", "+\t\t// No classes or source files found", "+\t\treturn new PackageDeclarationImplNoBinding(pkgFrags, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fee7c4edfe845a5405fb31d7f7243b1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "ef0604aef9ae504bcfc77425341e6baf6891cd21", "commitAfterChange": "b16439228426b14cb0612ff6650bc46c3d9f2a61", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public PackageDeclaration getPackage(String name)", "signatureAfterChange": "      public PackageDeclaration getPackage(String name)", "diff": ["-\t\tif (name == null)", "-\t\t\tthrow new IllegalArgumentException(\"name cannot be null\"); //$NON-NLS-1$", "-", "-        IPackageFragment[] pkgFrags = PackageUtil.getPackageFragments(name, this);", "-", "-\t\t// No packages found, null expected", "-\t\tif (pkgFrags.length == 0)", "-\t\t\treturn null;", "-", "-\t\t// If there are no source or class files, we'll need to return", "-\t\t// a special implementation of the package decl that expects", "-\t\t// no declarations inside it", "-\t\tboolean containsNoJavaResources = true;", "-\t\tfor (IPackageFragment pkg : pkgFrags) {", "-\t\t\ttry {", "-\t\t\t\tif (pkg.containsJavaResources()) {", "-\t\t\t\t\tcontainsNoJavaResources = false;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (JavaModelException e) {}", "-\t\t}", "-\t\tif (containsNoJavaResources)", "-\t\t\treturn new PackageDeclarationImplNoBinding(pkgFrags, this);", "-", "-\t\t// We should be able to create a class or", "-\t\t// source file from one of the packages.", "-\t\tICompilationUnit compUnit = null;", "-\t\tIClassFile classFile = null;", "-", "-\t\tOUTER:", "-\t\tfor (IPackageFragment pkg : pkgFrags) {", "-\t\t\ttry {", "-\t\t\t\tICompilationUnit[] compUnits = pkg.getCompilationUnits();", "-\t\t\t\tif (compUnits.length > 0) {", "-\t\t\t\t\tcompUnit = compUnits[0];", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tIClassFile[] classFiles = pkg.getClassFiles();", "-\t\t\t\tif (classFiles.length > 0) {", "-\t\t\t\t\t// Need to grab the first one that's not an inner class,", "-\t\t\t\t\t// as eclipse has trouble parsing inner class files", "-\t\t\t\t\tfor (IClassFile tempClassFile : classFiles) {", "-\t\t\t\t\t\tif (tempClassFile.getElementName().indexOf(\"$\") < 0) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tclassFile = tempClassFile;", "-\t\t\t\t\t\t\tbreak OUTER;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (JavaModelException e) {}", "-\t\t}", "-", "-\t\tIType type = null;", "-\t\tif (compUnit != null) {", "-\t\t\ttry {", "-\t\t\t\tIType[] types = compUnit.getAllTypes();", "-\t\t\t\tif (types.length > 0) {", "-\t\t\t\t\ttype = types[0];", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (JavaModelException e) {}", "-\t\t}", "-\t\telse if (classFile != null) {", "-\t\t\ttry {", "-\t\t\t\ttype = classFile.getType();", "-\t\t\t}", "-\t\t\tcatch (JavaModelException e) {}", "-\t\t}", "-", "-\t\t// Given a type, we can construct a package declaration impl from it,", "-\t\t// but we must hide the fact that it came from a real declaration,", "-\t\t// as the client requested it without that context", "-\t\tif (type != null) {", "-\t\t\tTypeDeclarationImpl typeDecl = (TypeDeclarationImpl)getTypeDeclaration(type);", "-\t\t\tITypeBinding binding = typeDecl.getDeclarationBinding();", "-\t\t\treturn new PackageDeclarationImpl(binding.getPackage(), typeDecl, this, true, pkgFrags);", "-\t\t}", "-", "-\t\t// No classes or source files found", "-\t\treturn new PackageDeclarationImplNoBinding(pkgFrags, this);", "+\t\treturn super.getPackage(name);"]}], "num": 26398}
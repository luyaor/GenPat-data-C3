{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "026f1b7ceee6e94cf0e2ba2a9d81a676", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16e3cc24e0078303e540f9f5f179dc37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "commitAfterChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\targumentCompatibility: {", "-\t\t\tint lastIndex = argLength;", "-\t\t\tif (isVarArgs) {", "-\t\t\t\tlastIndex = paramLength - 1;", "-\t\t\t\tif (paramLength == argLength) { // accept both X and X[] but not X[][]", "-\t\t\t\t\tTypeBinding varArgType = parameters[lastIndex]; // is an ArrayBinding by definition", "-\t\t\t\t\tTypeBinding lastArgument = arguments[lastIndex];", "-\t\t\t\t\tif (varArgType != lastArgument && !lastArgument.isCompatibleWith(varArgType)) {", "-\t\t\t\t\t\t// expect X[], called with X", "-\t\t\t\t\t\tvarArgType = ((ArrayBinding) varArgType).elementsType();", "-\t\t\t\t\t\tif (!lastArgument.isCompatibleWith(varArgType))", "-\t\t\t\t\t\t\tbreak argumentCompatibility;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (paramLength < argLength) { // all remainig argument types must be compatible with the elementsType of varArgType", "-\t\t\t\t\tTypeBinding varArgType = ((ArrayBinding) parameters[lastIndex]).elementsType();", "-\t\t\t\t\tfor (int i = lastIndex; i < argLength; i++)", "-\t\t\t\t\t\tif (varArgType != arguments[i] && !arguments[i].isCompatibleWith(varArgType))", "-\t\t\t\t\t\t\tbreak argumentCompatibility;", "-\t\t\t\t} else if (lastIndex != argLength) { // can call foo(int i, X ... x) with foo(1) but NOT foo();", "-\t\t\t\t\tbreak argumentCompatibility;", "-\t\t\t\t}", "-\t\t\t\t// now compare standard arguments from 0 to lastIndex", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < lastIndex; i++)", "-\t\t\t\tif (parameters[i] != arguments[i] && !arguments[i].isCompatibleWith(parameters[i]))", "-\t\t\t\t\tbreak argumentCompatibility;", "-\t\t\treturn method; // compatible", "-\t\t}", "+\t\tif (parameterCompatibilityLevel(method, arguments) > NOT_COMPATIBLE)", "+\t\t\treturn method;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "213111cac9a99d3bd5df8c38ec5b934c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "ff27e2c47bba27e96f223ad4f3af6e2e2ed2e827", "commitAfterChange": "cea68c59c921f1ca5c01091f0bfe74894257a349", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " final int findInImports(String qualifier, String name, int kind)", "signatureAfterChange": " final int findInImports(String qualifier, String name, int kind)", "diff": ["-", "-\t\tint nTypes = 0;", "-\t\tif (this.astRoot != null) {", "-\t\t\tList types = this.astRoot.types();", "-\t\t\tnTypes = types != null ? types.size() : 0;", "-\t\t\tfor (int i = 0; i < nTypes; i++) {", "-\t\t\t\tAbstractTypeDeclaration type = (AbstractTypeDeclaration) types.get(i);", "-\t\t\t\tSimpleName simpleName;", "-\t\t\t\tif (type != null && (simpleName = type.getName()) != null && simpleName.toString().equals(name)) { ", "-\t\t\t\t\treturn ImportRewriteContext.RES_NAME_CONFLICT;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (nTypes <= 0 && this.compilationUnit != null) {", "-\t\t\ttry {", "-\t\t\t\tIType[] types = this.compilationUnit.getTypes();", "-\t\t\t\tnTypes = types.length;", "-\t\t\t\tfor (int i = 0; i < nTypes; i++) {", "-\t\t\t\t\tIType type = types[i];", "-\t\t\t\t\tString typeName = type.getElementName();", "-\t\t\t\t\tif (typeName != null && typeName.equals(name)) ", "-\t\t\t\t\t\treturn ImportRewriteContext.RES_NAME_CONFLICT;", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// TODO Auto-generated catch block", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b1394f13c55e9787e07352e5c06a4e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/CharOperation.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public static final boolean match(char[] pattern, char[] name, boolean isCaseSensitive)", "signatureAfterChange": " public static final boolean match(char[] pattern, char[] name, boolean isCaseSensitive)", "diff": ["-\tint iPattern = 0, patternLength = pattern.length;", "-\tint iName = 0, nameLength = name.length;", "+", "+\treturn match(pattern, 0, pattern.length, name, 0, name.length, isCaseSensitive);", "+}"]}], "num": 44164}
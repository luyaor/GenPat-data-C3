{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70b6d93509bbef3c2607dd0c1eaad018", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63ac54afe476de199d9cfa73258fda51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic final boolean needClassInitMethod()", "signatureAfterChange": " public final boolean needClassInitMethod()", "diff": ["+ */", "+public final boolean needClassInitMethod() {", "+\t// always need a <clinit> when assertions are present", "+\tif ((this.bits & ASTNode.ContainsAssertion) != 0)", "+\t\treturn true;", "+\tswitch (kind(this.modifiers)) {", "+\t\tcase TypeDeclaration.INTERFACE_DECL:", "+\t\tcase TypeDeclaration.ANNOTATION_TYPE_DECL:", "+\t\t\treturn this.fields != null; // fields are implicitly statics", "+\t\tcase TypeDeclaration.ENUM_DECL:", "+\t\t\treturn true; // even if no enum constants, need to set $VALUES array", "+\t}", "+\tif (this.fields != null) {", "+\t\tfor (int i = this.fields.length; --i >= 0;) {", "+\t\t\tFieldDeclaration field = this.fields[i];", "+\t\t\t//need to test the modifier directly while there is no binding yet", "+\t\t\tif ((field.modifiers & ClassFileConstants.AccStatic) != 0)", "+\t\t\t\treturn true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?", "+\t}", "+\treturn false;", "+}", "-\t */", "-\tpublic final boolean needClassInitMethod() {", "-", "-\t\t// always need a <clinit> when assertions are present", "-\t\tif ((this.bits & ContainsAssertion) != 0)", "-\t\t\treturn true;", "-\t\t", "-\t\tswitch (kind(this.modifiers)) {", "-\t\t\tcase TypeDeclaration.INTERFACE_DECL:", "-\t\t\tcase TypeDeclaration.ANNOTATION_TYPE_DECL:", "-\t\t\t\treturn this.fields != null; // fields are implicitly statics", "-\t\t\tcase TypeDeclaration.ENUM_DECL:", "-\t\t\t\treturn true; // even if no enum constants, need to set $VALUES array", "-\t\tif (this.fields != null) {", "-\t\t\tfor (int i = this.fields.length; --i >= 0;) {", "-\t\t\t\tFieldDeclaration field = this.fields[i];", "-\t\t\t\t//need to test the modifier directly while there is no binding yet", "-\t\t\t\tif ((field.modifiers & ClassFileConstants.AccStatic) != 0)", "-\t\t\t\t\treturn true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?", "-\t\t\t}", "-\t\t}", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce4006abd760217a586882bfec5866e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "7a8728f6d81c28d6bb26a6aa19e5258c1824c75b", "commitAfterChange": "58d1213fc33b8c0012fb5fd98a7e0347bfcceca1", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic final boolean needClassInitMethod()", "signatureAfterChange": " \tpublic final boolean needClassInitMethod()", "diff": ["-\t\tif (fields == null)", "-\t\t\treturn false;", "-\t\t\t\treturn true; // fields are implicitly statics", "+\t\t\t\treturn this.fields != null; // fields are implicitly statics", "+\t\t\tcase TypeDeclaration.ENUM_DECL:", "+\t\t\t\treturn true; // even if no enum constants, need to set $VALUES array", "-\t\tfor (int i = fields.length; --i >= 0;) {", "-\t\t\tFieldDeclaration field = fields[i];", "-\t\t\t//need to test the modifier directly while there is no binding yet", "-\t\t\tif ((field.modifiers & ClassFileConstants.AccStatic) != 0)", "-\t\t\t\treturn true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?", "-\t\t\tif (field.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT)", "-\t\t\t\treturn true;", "+\t\tif (this.fields != null) {", "+\t\t\tfor (int i = this.fields.length; --i >= 0;) {", "+\t\t\t\tFieldDeclaration field = this.fields[i];", "+\t\t\t\t//need to test the modifier directly while there is no binding yet", "+\t\t\t\tif ((field.modifiers & ClassFileConstants.AccStatic) != 0)", "+\t\t\t\t\treturn true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?", "+\t\t\t}"]}], "num": 54471}
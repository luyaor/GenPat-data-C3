{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7660c87f95c53286cf617f6b7feecc0b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b85337ccbaaa932349f7ea644b8a016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "9a76fb8f9434ae4b71dc267e686b050759ff3536", "commitAfterChange": "e5d54da7cf77d6614acfbbcede23df9b9dad68f9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkToDoTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-// chech presence of TODO: tags", "-public void checkToDoTag(int commentStart, int commentEnd) {", "+// chech presence of task: tags", "+public void checkTaskTag(int commentStart, int commentEnd) {", "-\t// only look for newer TODO: tags", "-\tif (this.todoCount > 0 && this.todoPositions[this.todoCount-1][0] >= commentStart) {", "+\t// only look for newer task: tags", "+\tif (this.taskCount > 0 && this.taskPositions[this.taskCount-1][0] >= commentStart) {", "-\tint tagLength = this.toDoTag.length;", "-\tfor (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+\tnextChar: for (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+\t\tint nextPos = -1;", "+\t\t", "-\t\tboolean foundTag = true;", "-\t\tfor (int t = 0; t < tagLength; t++){", "-\t\t\tif (this.source[i+t] != this.toDoTag[t]){", "-\t\t\t\tfoundTag = false;", "+\t\tnextTag: for (int itag = 0; itag < this.taskTags.length; itag++){", "+\t\t\tchar[] tag = this.taskTags[itag];", "+\t\t\tint tagLength = tag.length;", "+\t\t\tfor (int t = 0; t < tagLength; t++){", "+\t\t\t\tif (this.source[i+t] != tag[t]) continue nextTag;", "+\t\t\t}", "+\t\t\tnextPos = i + tagLength;", "+\t\t\tbreak;", "+\t\t}", "+\t\tif (nextPos < 0) continue nextChar;", "+", "+\t\t// extract message", "+\t\tchar c = this.source[nextPos];", "+\t\tint start = i; ", "+\t\tint msgStart = nextPos;", "+\t\tint end = -1;", "+\t\tfor (int j = nextPos; j < commentEnd; j++){", "+\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "+\t\t\t\tend = j - 1;", "+\t\t\t\ti = j+1;", "-\t\tif (foundTag){", "-", "-\t\t\tint nextPos = i+5;", "-\t\t\tchar c = this.source[nextPos];", "-", "-\t\t\tint start = i; ", "-\t\t\tint end = -1;", "-\t\t\tfor (int j = nextPos; j < commentEnd; j++){", "-\t\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "+\t\tif (end < 0){", "+\t\t\tfor (int j = commentEnd; j >= nextPos; j--){", "+\t\t\t\tif ((c = this.source[j]) == '*') {", "-\t\t\t\t\ti = j+1;", "-\t\t\tif (end < 0){", "-\t\t\t\tfor (int j = commentEnd; j >= nextPos; j--){", "-\t\t\t\t\tif ((c = this.source[j]) == '*') {", "-\t\t\t\t\t\tend = j - 1;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (end < 0) end = nextPos+1;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// trim message", "-\t\t\twhile (source[end] == ' ' && start <= end) end--;", "-\t\t\t", "-\t\t\tchar[] message = new char[end-start+1];", "-\t\t\tSystem.arraycopy(source, start, message, 0, end-start+1);", "-\t\t\t\t\t", "-\t\t\tif (this.todoMessages == null){", "-\t\t\t\tthis.todoMessages = new char[5][];", "-\t\t\t\tthis.todoPositions = new int[5][];", "-\t\t\t} else if (this.todoCount == this.todoMessages.length) {", "-\t\t\t\tSystem.arraycopy(this.todoMessages, 0, this.todoMessages = new char[this.todoCount*2][], 0, this.todoCount);", "-\t\t\t\tSystem.arraycopy(this.todoPositions, 0, this.todoPositions = new int[this.todoCount*2][], 0, this.todoCount);", "-\t\t\t}", "-\t\t\tthis.todoMessages[this.todoCount] = message;", "-\t\t\tthis.todoPositions[this.todoCount] = new int[]{ start, end };", "-\t\t\tthis.todoCount++;", "+\t\t\tif (end < 0) end = nextPos+1;", "+\t\t", "+\t\t// trim message", "+\t\twhile (source[msgStart] == ' ' && msgStart <= end) msgStart++;", "+\t\twhile (source[end] == ' ' && start <= end) end--;", "+\t\t", "+\t\tchar[] message = new char[end-msgStart+1];", "+\t\tSystem.arraycopy(source, msgStart, message, 0, end-msgStart+1);", "+\t\t\t\t", "+\t\tif (this.taskMessages == null){", "+\t\t\tthis.taskMessages = new char[5][];", "+\t\t\tthis.taskPositions = new int[5][];", "+\t\t} else if (this.taskCount == this.taskMessages.length) {", "+\t\t\tSystem.arraycopy(this.taskMessages, 0, this.taskMessages = new char[this.taskCount*2][], 0, this.taskCount);", "+\t\t\tSystem.arraycopy(this.taskPositions, 0, this.taskPositions = new int[this.taskCount*2][], 0, this.taskCount);", "+\t\t}", "+\t\tthis.taskMessages[this.taskCount] = message;", "+\t\tthis.taskPositions[this.taskCount] = new int[]{ start, end };", "+\t\tthis.taskCount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ca94757902a20c76ba98c25bdc05d58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "c2e4e37266e7de5de53d856cd21d7160dee54d73", "commitAfterChange": "3afb78bfe1369061320a52bdb0707dc9413b95a5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["+\tint foundTaskIndex = this.foundTaskCount;", "-\t\t\tbreak;", "-\t\t}", "-\t\tif (nextPos < 0) continue nextChar;", "-\t\t// extract message", "-\t\tchar c = this.source[nextPos];", "-\t\tint start = i; ", "-\t\tint msgStart = nextPos;", "-\t\tint end = -1;", "-\t\tfor (int j = nextPos; j < commentEnd; j++){", "-\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "-\t\t\t\tend = j - 1;", "-\t\t\t\ti = j+1;", "-\t\t\t\tbreak;", "+\t\t\tif (this.foundTaskTags == null){", "+\t\t\t\tthis.foundTaskTags = new char[5][];", "+\t\t\t\tthis.foundTaskMessages = new char[5][];", "+\t\t\t\tthis.foundTaskPriorities = new char[5][];", "+\t\t\t\tthis.foundTaskPositions = new int[5][];", "+\t\t\t} else if (this.foundTaskCount == this.foundTaskTags.length) {", "+\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\tthis.foundTaskTags[this.foundTaskCount] = tag;", "+\t\t\tthis.foundTaskPriorities[this.foundTaskCount] = priority;", "+\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[]{ i, -1 };", "+\t\t\tthis.foundTaskCount++;", "+\t\t\t", "+\t\t\ti = nextPos;", "-\t\tif (end < 0){", "-\t\t\tfor (int j = commentEnd-1; j >= nextPos; j--){", "+\t}", "+\t", "+\tfor (int i = foundTaskIndex; i < this.foundTaskCount; i++) {", "+\t\t// retrieve message start and end positions", "+\t\tint msgStart = this.foundTaskPositions[i][0] + this.foundTaskTags[i].length;", "+\t\tint end;", "+\t\tchar c;", "+\t\tif (i + 1 < this.foundTaskCount) {", "+\t\t\tend = this.foundTaskPositions[i + 1][0] - 1;", "+\t\t\tfor (int j = end; j >= msgStart; j--){", "-\t\t\tif (end < 0) end =commentEnd-1;", "+\t\t} else {", "+\t\t\tend = -1;", "+\t\t\tfor (int j = msgStart; j < commentEnd; j++){", "+\t\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "+\t\t\t\t\tend = j - 1;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (end < 0){", "+\t\t\t\tfor (int j = commentEnd-1; j >= msgStart; j--){", "+\t\t\t\t\tif ((c = this.source[j]) == '*') {", "+\t\t\t\t\t\tend = j-1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (end < 0) end = commentEnd-1;", "+\t\t\t}", "+", "-\t\t// trim message", "-\t\twhile (CharOperation.isWhitespace(source[msgStart]) && msgStart <= end) msgStart++;", "+\t\t// trim the message", "+\t\twhile (CharOperation.isWhitespace(source[msgStart]) && msgStart <= end) msgStart++;", "+", "+\t\t// update the end position of the task", "+\t\tthis.foundTaskPositions[i][1] = end;", "-\t\tchar[] message = new char[end-msgStart+1];", "-\t\tSystem.arraycopy(source, msgStart, message, 0, end-msgStart+1);", "-\t\t\t\t", "-\t\tif (this.foundTaskTags == null){", "-\t\t\tthis.foundTaskTags = new char[5][];", "-\t\t\tthis.foundTaskMessages = new char[5][];", "-\t\t\tthis.foundTaskPriorities = new char[5][];", "-\t\t\tthis.foundTaskPositions = new int[5][];", "-\t\t} else if (this.foundTaskCount == this.foundTaskTags.length) {", "-\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t}", "-\t\tthis.foundTaskTags[this.foundTaskCount] = tag;", "-\t\tthis.foundTaskMessages[this.foundTaskCount] = message;", "-\t\tthis.foundTaskPriorities[this.foundTaskCount] = priority;", "-\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[]{ start, end };", "-\t\tthis.foundTaskCount++;", "+\t\t// get the message source", "+\t\tfinal int messageLength = end-msgStart+1;", "+\t\tchar[] message = new char[messageLength];", "+", "+\t\tSystem.arraycopy(source, msgStart, message, 0, messageLength);", "+\t\tthis.foundTaskMessages[i] = message;"]}], "num": 9809}
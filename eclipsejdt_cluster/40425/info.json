{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27ca97fe7690c682ad49626523a9a473", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15074c30ab8c28d309573f3bef6d029f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "16e3cfb0a84cb0cd2c8901e2eb0295b42a63a54e", "commitAfterChange": "ab21422ac410052acb8d938b526b4111358a1452", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic boolean visit(NormalAnnotation annotation, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(NormalAnnotation annotation, BlockScope scope)", "diff": ["-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "-\t\t\t\tif (this.preferences.insert_space_after_comma_in_annotation) {", "-\t\t\t\t\tthis.scribe.space();", "+\t\t\tAlignment annotationAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\"annotationMemberValuePairs\",//$NON-NLS-1$", "+\t\t\t\t\tthis.preferences.alignment_for_arguments_in_annotation,", "+\t\t\t\t\tlength,", "+\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\tthis.scribe.enterAlignment(annotationAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "+\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.scribe.alignFragment(annotationAlignment, i);", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_annotation) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "+\t\t\t\t\t}", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t}", "-\t\t\tmemberValuePairs[length - 1].traverse(this, scope);", "+\t\t\t} while (!ok);", "+\t\t\tthis.scribe.exitAlignment(annotationAlignment, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a299c7b800f5277afe59cb68cc75b77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IFile generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIProject project, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "signatureAfterChange": " \tpublic synchronized FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIJavaProject javaProject, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "diff": ["-\tpublic IFile generateFileDuringBuild(", "+\tpublic synchronized FileGenerationResult generateFileDuringBuild(", "-\t\t\tIProject project,", "+\t\t\tIJavaProject javaProject,", "+\t\t\tIProject project = javaProject.getProject();", "+\t\t\t// create folder for generated source files", "+\t\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "+\t\t\tif (!folder.exists())", "+\t\t\t\tfolder.create(true, false, null);", "-\t\t// create folder for generated source files", "-\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\tif (!folder.exists())", "-\t\t\tfolder.create(true, false, null);", "-", "-\t\t// split the type name into its parts", "-\t\tString[] parts = typeName.split( \"\\\\.\");", "-", "-\t\t//  create folders for the package parts", "-\t\tint i = 0;", "-\t\tfor ( ;i < parts.length - 1; i++ )", "-\t\t{", "-\t\t\tfolder = folder.getFolder( parts[i] );", "-\t\t\tif ( !folder.exists() )", "-\t\t\t\tfolder.create( true, false, null );", "-\t\t}", "-\t\t", "-\t\tString fileName = parts[i] + \".java\";\t\t", "-\t\tIFile file = folder.getFile( fileName );", "-", "-\t\tbyte[] bytes;", "-\t\tif ( charsetName == null || charsetName == \"\" )", "-\t\t\tbytes = contents.getBytes();", "-\t\telse", "-\t\t\tbytes = contents.getBytes( charsetName );", "-\t\tInputStream is = new ByteArrayInputStream( bytes );", "-\t\t", "-\t\tif ( !file.exists() )", "-\t\t{", "-\t\t\tfile.create( is, true, progressMonitor );", "-\t\t}", "-\t\telse", "-\t\t{", "-\t\t\tmakeReadOnly( file, false );", "-\t\t\tfile.setContents( is, true, true, progressMonitor );", "-\t\t}", "-\t\t", "-\t\tfile.setDerived( true );", "-\t\t", "-\t\tmakeReadOnly( file, true );", "-\t\t", "-\t\tupdateFileMaps( typeName, parentFile, file );", "-\t\treturn file;", "+\t\t\t//", "+\t\t\t// make sure __generated_src dir is on the cp if not already", "+\t\t\t//", "+\t\t\tupdateProjectClasspath( (JavaProject)javaProject, folder, progressMonitor );", "+\t\t\t", "+\t\t\t// split the type name into its parts", "+\t\t\tString[] parts = typeName.split( \"\\\\.\");", "+\t", "+\t\t\t//  create folders for the package parts", "+\t\t\tint i = 0;", "+\t\t\tfor ( ;i < parts.length - 1; i++ )", "+\t\t\t{", "+\t\t\t\tfolder = folder.getFolder( parts[i] );", "+\t\t\t\tif ( !folder.exists() )", "+\t\t\t\t\tfolder.create( true, false, null );", "+\t\t\t}", "+\t\t\t", "+\t\t\tString fileName = parts[i] + \".java\";\t\t", "+\t\t\tIFile file = folder.getFile( fileName );", "+\t", "+\t\t\tbyte[] bytes;", "+\t\t\tif ( charsetName == null || charsetName == \"\" )", "+\t\t\t\tbytes = contents.getBytes();", "+\t\t\telse", "+\t\t\t\tbytes = contents.getBytes( charsetName );", "+\t\t\tInputStream is = new ByteArrayInputStream( bytes );", "+\t\t\t", "+\t\t\tboolean contentsDiffer = true;", "+\t\t\t", "+\t\t\tif ( !file.exists() )", "+\t\t\t{", "+\t\t\t\tfile.create( is, true, progressMonitor );", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\t// Check if the content has changed", "+\t\t\t\tInputStream oldData = null;", "+\t\t\t\ttry {", "+\t\t\t\t\toldData = new BufferedInputStream(file.getContents());", "+\t\t\t\t\tcontentsDiffer = !compareStreams(oldData, is);", "+\t\t\t\t}", "+\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\t// Do nothing. Assume the new content is different", "+\t\t\t\t}", "+\t\t\t\tfinally {", "+\t\t\t\t\tis.reset();", "+\t\t\t\t\tif (oldData != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\toldData.close();", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t\tcatch (IOException ioe) ", "+\t\t\t\t\t\t{}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (contentsDiffer) {", "+\t\t\t\t\tmakeReadOnly( file, false );", "+\t\t\t\t\tfile.setContents( is, true, true, progressMonitor );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tfile.setDerived( true );", "+\t\t\t", "+\t\t\tmakeReadOnly( file, true );", "+\t\t\t", "+\t\t\tupdateFileMaps( typeName, parentFile, file );", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cabc98d7c788eb0eeb5b3f1da36a36c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "ff60962397667d8f0b8f9465808cd2e926369be1", "commitAfterChange": "0e728cd1e89630be3eb8299ec5e4c703bc09030b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public IBinaryType getBinaryTypeInfo(IFile file) throws JavaModelException", "signatureAfterChange": " public IBinaryType getBinaryTypeInfo(IFile file) throws JavaModelException", "diff": ["-\t\t\t\tPackageFragment pkg = (PackageFragment) getParent();", "+\t\t\t\tPackageFragment pkg = (PackageFragment) le;", "-\t\t\t\tinfo = ClassFileReader.read(zip, entryName, true);", "+\t\t\t\tZipEntry ze = zip.getEntry(entryName);", "+\t\t\t\tif (ze != null) {", "+\t\t\t\t\tbyte contents[] = org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);", "+\t\t\t\t\tString fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;", "+\t\t\t\t\tinfo = new ClassFileReader(contents, fileName.toCharArray());", "+\t\t\t\t}", "-\t\t\treturn new ClassFileReader(contents, getElementName().toCharArray());", "+\t\t\treturn new ClassFileReader(contents, file.getFullPath().toString().toCharArray());"]}], "num": 40425}
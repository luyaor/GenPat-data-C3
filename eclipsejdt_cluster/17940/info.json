{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "feac3892ae1db0dd042f71879100882c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3708f7f2a3d4ca20aa8cd60449014f8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic boolean visit(EnumConstant enumConstant, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(FieldDeclaration enumConstant, MethodScope scope)", "diff": ["-\tpublic boolean visit(EnumConstant enumConstant, ClassScope scope) {", "+\t// field is an enum constant", "+\tpublic boolean visit(FieldDeclaration enumConstant, MethodScope scope) {", "-\t\tint fieldsCount = enumConstant.fields == null ? 0 : enumConstant.fields.length;", "-\t\tint methodsCount = enumConstant.methods == null ? 0 : enumConstant.methods.length;", "-\t\tint enumsCount = enumConstant.enums == null ? 0 : enumConstant.enums.length;", "-\t\tint membersCount = enumConstant.memberTypes == null ? 0 : enumConstant.memberTypes.length;", "-\t\t", "-\t\tif (fieldsCount != 0 || methodsCount != 0 || membersCount != 0 || enumsCount != 0) {", "-\t\t\t/*", "-\t\t\t * Type body", "-\t\t\t */", "-\t\t\tString enum_constant_brace = this.preferences.brace_position_for_enum_constant;", "-\t", "-\t        formatLeftCurlyBrace(line, enum_constant_brace);", "-\t\t\tformatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, enumConstant);", "+\t\tExpression initialization = enumConstant.initialization;", "+\t\tif (initialization instanceof QualifiedAllocationExpression) {", "+\t\t\tTypeDeclaration typeDeclaration = ((QualifiedAllocationExpression) initialization).anonymousType;", "+\t\t\tint fieldsCount = typeDeclaration.fields == null ? 0 : typeDeclaration.fields.length;", "+\t\t\tint methodsCount = typeDeclaration.methods == null ? 0 : typeDeclaration.methods.length;", "+\t\t\tint membersCount = typeDeclaration.memberTypes == null ? 0 : typeDeclaration.memberTypes.length;", "-\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "-\t\t\t\tthis.scribe.indent();", "-\t\t\t}", "-\t", "-\t\t\tformatTypeMembers(enumConstant);", "-\t", "-\t\t\tthis.scribe.printComment();", "-\t\t\t", "-\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (this.preferences.insert_new_line_in_empty_enum_constant) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t\tif (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t\tif (hasComments()) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t\t\tif (fieldsCount != 0 || methodsCount != 0 || membersCount != 0) {", "+\t\t\t\t/*", "+\t\t\t\t * Type body", "+\t\t\t\t */", "+\t\t\t\tString enum_constant_brace = this.preferences.brace_position_for_enum_constant;", "+\t\t", "+\t\t        formatLeftCurlyBrace(line, enum_constant_brace);", "+\t\t\t\tformatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, typeDeclaration);", "+\t\t\t\t", "+\t\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\tformatTypeMembers(typeDeclaration);", "+\t\t", "+\t\t\t\tthis.scribe.printComment();", "+\t\t\t\t", "+\t\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t", "+\t\t\t\tif (this.preferences.insert_new_line_in_empty_enum_constant) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "+\t\t\t\tif (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t}", "+\t\t\t\tif (hasComments()) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732dd225bbe877b2ba74157c51047aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic boolean visit( \t\tImportReference importRef, \t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit(EnumConstant enumConstant, ClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(EnumConstant enumConstant, ClassScope scope) {", "+        /*", "+         * Print comments to get proper line number", "+         */", "+        this.scribe.printComment();", "+        final int line = this.scribe.line; ", "+        ", "+        this.scribe.printModifiers(enumConstant.annotations, this);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "+", "+\t\tExpression[] arguments = enumConstant.arguments;", "+\t\tif (arguments != null) {", "+\t\t\tformatEnumConstantArguments(", "+\t\t\t\tenumConstant,", "+\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_enum_constant,", "+\t\t\t\tthis.preferences.insert_space_before_comma_in_enum_constant_arguments,", "+\t\t\t\tthis.preferences.insert_space_after_comma_in_enum_constant_arguments,", "+\t\t\t\tthis.preferences.alignment_for_arguments_in_enum_constant);\t\t\t", "+\t\t}", "+\t\t", "+\t\tint fieldsCount = enumConstant.fields == null ? 0 : enumConstant.fields.length;", "+\t\tint methodsCount = enumConstant.methods == null ? 0 : enumConstant.methods.length;", "+\t\tint enumsCount = enumConstant.enums == null ? 0 : enumConstant.enums.length;", "+\t\tint membersCount = enumConstant.memberTypes == null ? 0 : enumConstant.memberTypes.length;", "+\t\t", "+\t\tif (fieldsCount != 0 || methodsCount != 0 || membersCount != 0 || enumsCount != 0) {", "+\t\t\t/*", "+\t\t\t * Type body", "+\t\t\t */", "+\t\t\tString enum_constant_brace = this.preferences.brace_position_for_enum_constant;", "+\t", "+\t        formatLeftCurlyBrace(line, enum_constant_brace);", "+\t\t\tformatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, enumConstant);", "+\t\t\t", "+\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\tthis.scribe.indent();", "+\t\t\t}", "+\t", "+\t\t\tformatTypeMembers(enumConstant);", "+\t", "+\t\t\tthis.scribe.printComment();", "+\t\t\t", "+\t\t\tif (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (this.preferences.insert_new_line_in_empty_enum_constant) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "+\t\t\tthis.scribe.printTrailingComment();", "+\t\t\tif (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\tif (hasComments()) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 17940}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8f3b957923161eddcc4ba547813584b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a03564e88147265aed52de32fcd86d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6f8a1f468102cc95fa52d9b7fdbd93df1eea7638", "commitAfterChange": "e4d4ff5013f9df9fd57cdef7bafc039c1cd3f062", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tHashSet externalPaths = new HashSet();", "-\t\t\t\t\t\t\t\texternalPaths.add(entryPath);", "+\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(entryPath, true);", "-\t\t\t", "-\t\t\tISchedulingRule rule = null;", "-\t\t\t\t// Use a schedule rule to avoid a race condition (https://bugs.eclipse.org/bugs/show_bug.cgi?id=369251)", "-\t\t\t\trule = ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(externalFoldersManager.getExternalFoldersProject());", "-\t\t\t\tJob.getJobManager().beginRule(rule, monitor);", "-\t\t\t\t", "-\t\t\t\tIterator externalPathIter = externalPaths.iterator();", "-\t\t\t\twhile (externalPathIter.hasNext()) {", "-\t\t\t\t\texternalFoldersManager.addFolder((IPath) externalPathIter.next(), true);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t} catch (JavaModelException jme) {", "+\t\t\t}", "+\t\t\tcatch(JavaModelException jme) {", "-\t\t\t} finally {", "-\t\t\t\tJob.getJobManager().endRule(rule);", "-\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74f00c70e1f3714ea6ace720e516d5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "64633e564146a810870e383e4c41b9c4f39f79e1", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["+\t\t\tHashSet externalPaths = new HashSet();", "-\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(entryPath, true);", "+\t\t\t\t\t\t\t\texternalPaths.add(entryPath);", "+\t\t\t", "+\t\t\tISchedulingRule rule = null;", "+\t\t\t\t// Use a schedule rule to avoid a race condition (https://bugs.eclipse.org/bugs/show_bug.cgi?id=369251)", "+\t\t\t\trule = ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(externalFoldersManager.getExternalFoldersProject());", "+\t\t\t\tJob.getJobManager().beginRule(rule, monitor);", "+\t\t\t\t", "+\t\t\t\tIterator externalPathIter = externalPaths.iterator();", "+\t\t\t\twhile (externalPathIter.hasNext()) {", "+\t\t\t\t\texternalFoldersManager.addFolder((IPath) externalPathIter.next(), true);", "+\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch(JavaModelException jme) {", "+\t\t\t\t", "+\t\t\t} catch (JavaModelException jme) {", "+\t\t\t} finally {", "+\t\t\t\tJob.getJobManager().endRule(rule);", "+\t\t\t"]}], "num": 36676}
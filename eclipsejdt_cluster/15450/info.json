{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91b4e8ae346fe1645c90cc975b8f7a3d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dd4b98d12bbe28c6151e6b26b35953c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void test0052()", "signatureAfterChange": " public void test0052()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tX<String> x2 = new X<String>(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\"\t                   ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <String>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tX<Integer> x3 = new X<Integer>(1);\\n\" + ", "-\t\t\"\t                    ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\"\tX<AX> x4 = new X<AX>(new AX());\\n\" + ", "-\t\t\"\t               ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <AX>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tX<? extends AX> x5 = new X<AX<String>>(new AX<String>());\\n\" + ", "-\t\t\"\t                         ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <AX<String>>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\tX<?> x6 = new X<AX<String>>(new AX<String>());\\n\" + ", "-\t\t\"\t              ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <AX<String>>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tX<Class<? extends Object>> x7 = new X<Class<? extends Object>>();\\n\" + ", "-\t\t\"\t                                    ^\\n\" + ", "-\t\t\"Redundant specification of type arguments <Class<? extends Object>>\\n\" + ", "-\t\t\"----------\\n\",", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX<Integer> x3 = new X<Integer>(1);\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX<AX> x4 = new X<AX>(new AX());\\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <AX>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tX<? extends AX> x5 = new X<AX<String>>(new AX<String>());\\n\" + ", "+\t\t\t\"\t                         ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <AX<String>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tX<?> x6 = new X<AX<String>>(new AX<String>());\\n\" + ", "+\t\t\t\"\t              ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <AX<String>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tX<Class<? extends Object>> x7 = new X<Class<? extends Object>>();\\n\" + ", "+\t\t\t\"\t                                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Class<? extends Object>>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t: // additional error at line 5 due to better inference:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tX<Number> x = new X<Number>(1);\\n\" + ", "+\t\t\t\"\t                  ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX<Integer> x3 = new X<Integer>(1);\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX<AX> x4 = new X<AX>(new AX());\\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <AX>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tX<? extends AX> x5 = new X<AX<String>>(new AX<String>());\\n\" + ", "+\t\t\t\"\t                         ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <AX<String>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tX<?> x6 = new X<AX<String>>(new AX<String>());\\n\" + ", "+\t\t\t\"\t              ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <AX<String>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tX<Class<? extends Object>> x7 = new X<Class<? extends Object>>();\\n\" + ", "+\t\t\t\"\t                                    ^\\n\" + ", "+\t\t\t\"Redundant specification of type arguments <Class<? extends Object>>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66e5b2ef7a06951678390d31c099a408", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 820, "methodNumberAfterChange": 820, "signatureBeforeChange": " public void test0799()", "signatureAfterChange": " public void test0799()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 2)\\n\" +", "-\t\t\"\tY first;\\n\" +", "-\t\t\"\t^\\n\" +", "-\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"\tY first2;\\n\" +", "-\t\t\"\t^\\n\" +", "-\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 9)\\n\" +", "-\t\t\"\tString s = foo(ref, first);\\n\" +", "-\t\t\"\t           ^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Y to String\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 13)\\n\" +", "-\t\t\"\tref.next = first == null ? ref : first;\\n\" +", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#2-of ? extends T>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in X.java (at line 14)\\n\" +", "-\t\t\"\tString s = first == null ? ref : first;\\n\" +", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Y to String\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 15)\\n\" +", "-\t\t\"\tref.next = first2 == null ? ref : first2;\\n\" +", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#5-of ? extends T>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 18)\\n\" +", "-\t\t\"\treturn first == null ? ref : first;\\n\" +", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<? extends T>\\n\" +", "-\t\t\"----------\\n\");", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" +", "+\t\t\t\"\tY first;\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "+\t\t\t\"\tY first2;\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" +", "+\t\t\t\"\tString s = foo(ref, first);\\n\" +", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from Y to String\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. WARNING in X.java (at line 13)\\n\" +", "+\t\t\t\"\tref.next = first == null ? ref : first;\\n\" +", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#2-of ? extends T>\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"5. ERROR in X.java (at line 14)\\n\" +", "+\t\t\t\"\tString s = first == null ? ref : first;\\n\" +", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from Y to String\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"6. WARNING in X.java (at line 15)\\n\" +", "+\t\t\t\"\tref.next = first2 == null ? ref : first2;\\n\" +", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#5-of ? extends T>\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"7. WARNING in X.java (at line 18)\\n\" +", "+\t\t\t\"\treturn first == null ? ref : first;\\n\" +", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<? extends T>\\n\" +", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tY first;\\n\" + ", "+\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tY first2;\\n\" + ", "+\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tString s = foo(ref, first);\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from Y to String\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tref.next = first == null ? ref : first;\\n\" + ", "+\t\t\t\t\"\t                           ^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from Y<capture#3-of ? extends T> to Y<capture#2-of ? extends T>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tString s = first == null ? ref : first;\\n\" + ", "+\t\t\t\t\"\t                           ^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from Y<capture#4-of ? extends T> to String\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tString s = first == null ? ref : first;\\n\" + ", "+\t\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from Y to String\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tref.next = first2 == null ? ref : first2;\\n\" + ", "+\t\t\t\t\"\t                            ^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from Y<capture#6-of ? extends T> to Y<capture#5-of ? extends T>\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0a8f4e268084655efe2b1b1972ddf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 1473, "methodNumberAfterChange": 1474, "signatureBeforeChange": " public void test1439()", "signatureAfterChange": " public void test1439()", "diff": ["+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"", "+\t\t\t: // Line 7: in 1.8 <T> is infered to <null> => not a checked exception ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tthis((List) null, null);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation X(List, null) of the generic constructor X(List<U>, T) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tthis((List) null, null);\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<List<?>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tthis((List) null, null);\\n\" + ", "+\t\t\t\"\t      ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tsuper((List)lu, t);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation X(List, T) of the generic constructor X(List<U>, T) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tsuper((List)lu, t);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unhandled exception type Throwable\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tsuper((List)lu, t);\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<List<?>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tsuper((List)lu, t);\\n\" + ", "+\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4cd72df93634285007648d19fcfe70b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test014h()", "signatureAfterChange": " \tpublic void test014h()", "diff": ["+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\",", "+\t\t\t\"----------\\n\"", "+\t\t\t: // in 1.8 fewer of the calls are ambiguous", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in Y.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tH hraw = null;\\n\" + ", "+\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\"H is a raw type. References to generic type H<T3> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in Y.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tnew X().a(h);\\n\" + ", "+\t\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\t\"The method a(G) is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in Y.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tnew X().a(hraw);\\n\" + ", "+\t\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\t\"The method a(G) is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in Y.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tnew X().a2(h);\\n\" + ", "+\t\t\t\t\"\t        ^^\\n\" + ", "+\t\t\t\t\"The method a2(G) is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in Y.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tnew X().a2(hraw);\\n\" + ", "+\t\t\t\t\"\t        ^^\\n\" + ", "+\t\t\t\t\"The method a2(G) is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in Y.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tnew X().a5(h);\\n\" + ", "+\t\t\t\t\"\t        ^^\\n\" + ", "+\t\t\t\t\"The method a5(H<C>) is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"7. ERROR in Y.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tnew X().a5(hraw);\\n\" + ", "+\t\t\t\t\"\t        ^^\\n\" + ", "+\t\t\t\t\"The method a5(H) is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\"),"]}], "num": 15450}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bce0b8d589eaef3e14b86563f8821e5d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ab52299cb9bc2f2cc770bf6f59bc279", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "d374c39ddab0b1f83162946aec27b6b36fb07bfb", "commitAfterChange": "a8a3a90ec5bfee0f774504f5c766dbb8c9570420", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean checkConstructors(Parser parser)", "signatureAfterChange": " \tpublic boolean checkConstructors(Parser parser)", "diff": ["-\t\t\t\t\t\tif (this.kind() == IGenericType.INTERFACE_DECL) {", "-\t\t\t\t\t\t\t// report the problem and continue the parsing", "-\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors(", "-\t\t\t\t\t\t\t\t(ConstructorDeclaration) am);", "+\t\t\t\t\t\tswitch (kind()) {", "+\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL :", "+\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL :", "+\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\t\tparser.problemReporter().annotationTypeDeclarationCannotHaveConstructor((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d93a9eae26d787467e1005c43f745c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate boolean connectSuperclass()", "signatureAfterChange": " \tprivate boolean connectSuperclass()", "diff": ["-\t\tif (sourceType.id == T_Object) { // handle the case of redefining java.lang.Object up front", "+", "+\t\t// handle the case of redefining root types up front", "+\t\tswitch (sourceType.id) {", "+\t\t\tcase T_JavaLangObject :", "-\t\t\tif (sourceType.isInterface())", "+\t\t\tif (!sourceType.isClass())", "+", "+\t\t\tcase T_JavaLangEnum :", "+\t\t\t\t// TODO (kent) need to check is generic class with exactly one unbound parameter, and defines constructor Enum(String,int)", "-\t\t\tsourceType.superclass = getJavaLangObject();", "-\t\t\treturn !detectCycle(sourceType, sourceType.superclass, null);", "+\t\t\tif (sourceType.isEnum()) {", "+\t\t\t\treturn connectEnumSuperclass();", "+\t\t\t} else {", "+\t\t\t\tsourceType.superclass = getJavaLangObject();", "+\t\t\t\treturn !detectCycle(sourceType, sourceType.superclass, null);\t\t\t\t", "+\t\t\t}"]}], "num": 15972}
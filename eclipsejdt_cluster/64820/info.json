{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe3519a0914f2bf3f9a08d261bcd3ebb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06db6f4dcd38024ca34723483302b2e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 235, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t        typesAsString(false, invocationArguments, false),", "+\t\t\t\t        typesAsString(invocationArguments, false),", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t        typesAsString(false, invocationArguments, true),", "+\t\t\t\t        typesAsString(invocationArguments, true),", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t\t\t\ttypesAsString(false, shownConstructor.typeVariables, false),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\t\t\ttypesAsString(shownConstructor.typeVariables, false),", "+\t\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t\t\t\ttypesAsString(false, shownConstructor.typeVariables, true),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\t\t\ttypesAsString(shownConstructor.typeVariables, true),", "+\t\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, false),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, false),", "+\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, true),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, true),", "+\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\tnew String[] {new String(targetConstructor.declaringClass.readableName()), typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false)},", "-\t\tnew String[] {new String(targetConstructor.declaringClass.shortReadableName()), typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true)},", "+\t\tnew String[] {new String(targetConstructor.declaringClass.readableName()), typesAsString(targetConstructor, false)},", "+\t\tnew String[] {new String(targetConstructor.declaringClass.shortReadableName()), typesAsString(targetConstructor, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fdfe29b372a79414425988c915cfc0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "8e2ef31cf8fd6f75aa20407e8ef5b91a95949af6", "commitAfterChange": "7b76bd109981132b10232dab12b61206fb5d8435", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "signatureAfterChange": " \tprivate synchronized List<IFile> removeFileFromBuildMaps(IFile f)", "diff": ["-\tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "+\tprivate synchronized List<IFile> removeFileFromBuildMaps(IFile f)", "+\t\tList<IFile> toDelete = new ArrayList<IFile>();", "-\t\tSet<IFile> childFiles = _parentToGenFiles.getValues(f);", "+\t\tSet<IFile> childFiles = _buildDeps.getValues(f);", "-\t\t\tSet<IFile> parentFiles = _parentToGenFiles.getKeys(childFile);", "+\t\t\tSet<IFile> parentFiles = _buildDeps.getKeys(childFile);", "-\t\tboolean removed = _parentToGenFiles.removeKey(f);", "+\t\tboolean removed = _buildDeps.removeKey(f);", "-\t\t// Is this file the sole parent of types generated during reconcile?", "-\t\t// If so, add them to the discard list and remove them from the working", "-\t\t// copy list. Then remove the file (and its solely parented children)", "-\t\t// from the reconcile dependency list.", "-\t\tSet<ICompilationUnit> childWCs = _parentToGenWorkingCopies.getValues(f);", "-\t\tfor (ICompilationUnit childWC : childWCs) {", "-\t\t\tSet<IFile> parentFiles = _parentToGenWorkingCopies.getKeys(childWC);", "-\t\t\tif (parentFiles.size() == 1 && parentFiles.contains(f)) {", "-\t\t\t\ttoDiscard.add(childWC);", "-\t\t\t\tICompilationUnit removedWC = _workingCopies.remove(childWC.getResource());", "-\t\t\t\tassert removedWC != null && removedWC.equals(childWC) :", "-\t\t\t\t\t\"Working copy list: get(f).getResource() != f, for wc \" +  //$NON-NLS-1$", "-\t\t\t\t\tchildWC.getElementName();", "-\t\t\t}", "-\t\t}", "-\t\tremoved = _parentToGenWorkingCopies.removeKey(f);", "-\t\tif (removed) {", "-\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "-\t\t\t\t\t\"removed parent file from working copy dependencies: \" + f); //$NON-NLS-1$", "-\t\t}", "-", "-\t\t// Is this file being hidden by a blank working copy?  If so, remove that.", "-\t\tICompilationUnit wc = _hiddenBuiltTypes.remove(f);", "-\t\tif (null != wc) {", "-\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "-\t\t\t\t\t\"removed working copy from hidden types list: \" + f); //$NON-NLS-1$", "-\t\t}", "-\t\tif (null != wc) {", "-\t\t\ttoDiscard.add(wc);", "-\t\t}", "-", "+\t\treturn toDelete;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec822daa1aba8ad57046909190dc3c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 185, "signatureBeforeChange": " public void invalidConstructor(Statement statement, MethodBinding targetConstructor)", "signatureAfterChange": " public void invalidConstructor(Statement statement, MethodBinding targetConstructor)", "diff": ["-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t        typesAsString(false, invocationArguments, false),", "+\t\t\t\t        typesAsString(invocationArguments, false),", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t        typesAsString(false, invocationArguments, true),", "+\t\t\t\t        typesAsString(invocationArguments, true),", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t\t\t\ttypesAsString(false, shownConstructor.typeVariables, false),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\t\t\ttypesAsString(shownConstructor.typeVariables, false),", "+\t\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t\t\t\ttypesAsString(false, shownConstructor.typeVariables, true),", "-\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\t\t\ttypesAsString(shownConstructor.typeVariables, true),", "+\t\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, false),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, false),", "+\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, true),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, true),", "+\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false),", "+\t\t\t\t        typesAsString(shownConstructor, false),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t        typesAsString(targetConstructor, false) },", "-\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true),", "+\t\t\t\t        typesAsString(shownConstructor, true),", "-\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t        typesAsString(targetConstructor, true) },", "-\t\tnew String[] {new String(targetConstructor.declaringClass.readableName()), typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false)},", "-\t\tnew String[] {new String(targetConstructor.declaringClass.shortReadableName()), typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true)},", "+\t\tnew String[] {new String(targetConstructor.declaringClass.readableName()), typesAsString(shownConstructor, false)},", "+\t\tnew String[] {new String(targetConstructor.declaringClass.shortReadableName()), typesAsString(shownConstructor, true)},"]}], "num": 64820}
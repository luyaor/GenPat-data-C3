{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c9137778985345a64adb03e0eceea14", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1131aa67193797974a5e0ad411487650", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4", "commitAfterChange": "e92ab0eafbe7472576da485243db5aa49da5df74", "methodNumberBeforeChange": 538, "methodNumberAfterChange": 538, "signatureBeforeChange": " public void illegalReturnRedefinition(ASTNode location, MethodBinding descriptorMethod, \t\t\tchar[][] nonNullAnnotationName,  \t\t\tchar[][] providedAnnotationName, TypeBinding providedType)", "signatureAfterChange": " public void illegalReturnRedefinition(ASTNode location, MethodBinding descriptorMethod, \t\t\tboolean isUnchecked, TypeBinding providedType)", "diff": ["-\t\t\tchar[][] nonNullAnnotationName, ", "-\t\t\tchar/*@Nullable*/[][] providedAnnotationName, TypeBinding providedType) {", "+\t\t\tboolean isUnchecked, TypeBinding providedType) {", "-\tStringBuffer providedPrefix = new StringBuffer(); ", "-\tStringBuffer providedShortPrefix = new StringBuffer(); ", "-\tif (providedAnnotationName != null) {", "-\t\tprovidedPrefix.append('@').append(CharOperation.toString(providedAnnotationName)).append(' ');", "-\t\tprovidedShortPrefix.append('@').append(providedAnnotationName[providedAnnotationName.length-1]).append(' ');", "-\t}", "-\t\tprovidedAnnotationName == null", "+\t\tisUnchecked", "-\t\t\t\t\t\tCharOperation.toString(nonNullAnnotationName), String.valueOf(descriptorMethod.returnType.readableName()),", "-\t\t\t\t\t\tprovidedPrefix.toString(), String.valueOf(providedType.readableName())},", "+\t\t\t\t\t\tString.valueOf(descriptorMethod.returnType.nullAnnotatedReadableName(this.options, false)),", "+\t\t\t\t\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, false))},", "-\t\t\t\t\t\tString.valueOf(nonNullAnnotationName[nonNullAnnotationName.length-1]), String.valueOf(descriptorMethod.returnType.shortReadableName()),", "-\t\t\t\t\t\tprovidedShortPrefix.toString(), String.valueOf(providedType.shortReadableName())},", "+\t\t\t\t\t\tString.valueOf(descriptorMethod.returnType.nullAnnotatedReadableName(this.options, true)),", "+\t\t\t\t\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, true))},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ecebd3f0e49233e4369312632f0d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BuildNotifier.java", "commitBeforeChange": "9df5be4a36832dc62c270f51baaa2d061d29fa15", "commitAfterChange": "66711177c60015220094d37d3722607c867721b9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected String problemsMessage()", "signatureAfterChange": " protected String problemsMessage()", "diff": ["+\tboolean displayBoth = numNew > 0 && numFixed > 0;", "-\tif (numNew == 0) {", "-\t\t// (Fixed: x errors, y warnings)", "-\t\tbuffer.append(Util.bind(\"build.fixedHeader\")); //$NON-NLS-1$", "-\t\tbuffer.append(' ');", "-\t\tif (fixedErrorCount > 0) {", "-\t\t\tif (fixedErrorCount == 1)", "-\t\t\t\tbuffer.append(Util.bind(\"build.oneError\")); //$NON-NLS-1$", "-\t\t\telse", "-\t\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", String.valueOf(fixedErrorCount))); //$NON-NLS-1$", "-\t\t\tif (fixedWarningCount > 0)", "-\t\t\t\tbuffer.append(',').append(' ');", "-\t\t}", "-\t\tif (fixedWarningCount > 0) {", "-\t\t\tif (fixedWarningCount == 1)", "-\t\t\t\tbuffer.append(Util.bind(\"build.oneWarning\")); //$NON-NLS-1$", "-\t\t\telse", "-\t\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", String.valueOf(fixedWarningCount))); //$NON-NLS-1$", "-\t\t}", "-\t} else if (numFixed == 0) {", "-\t\t// (Found: x errors, y warnings)", "+\tif (numNew > 0) {", "+\t\t// (Found x errors + y warnings)", "-\t\tif (newErrorCount > 0) {", "+\t\tif (displayBoth || newErrorCount > 0) {", "-\t\t\tif (newWarningCount > 0)", "-\t\t\t\tbuffer.append(',').append(' ');", "+\t\t\tif (displayBoth || newWarningCount > 0)", "+\t\t\t\tbuffer.append(\" + \"); //$NON-NLS-1$", "-\t\tif (newWarningCount > 0) {", "+\t\tif (displayBoth || newWarningCount > 0) {", "-\t} else {", "-\t\t// (Found/fixed: x/y errors, x/y warnings)", "-\t\tbuffer.append(Util.bind(\"build.foundFixedHeader\")); //$NON-NLS-1$", "+\t\tif (numFixed > 0)", "+\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "+\t}", "+\tif (numFixed > 0) {", "+\t\t// (Fixed x errors + y warnings) or (Found x errors + y warnings, Fixed x + y)", "+\t\tbuffer.append(Util.bind(\"build.fixedHeader\")); //$NON-NLS-1$", "-", "-\t\tif (newErrorCount > 0 || fixedErrorCount > 0) {", "-\t\t\tString plusMinus = String.valueOf(newErrorCount) + \"/\" + String.valueOf(fixedErrorCount); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", plusMinus)); //$NON-NLS-1$", "-\t\t\tif (fixedWarningCount > 0 || newWarningCount > 0)", "-\t\t\t\tbuffer.append(',').append(' ');", "-\t\t}", "-\t\tif (newWarningCount > 0 || fixedWarningCount > 0) {", "-\t\t\tString plusMinus = String.valueOf(newWarningCount) + \"/\" + String.valueOf(fixedWarningCount); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", plusMinus)); //$NON-NLS-1$", "+\t\tif (displayBoth) {", "+\t\t\tbuffer.append(String.valueOf(fixedErrorCount));", "+\t\t\tbuffer.append(\" + \"); //$NON-NLS-1$", "+\t\t\tbuffer.append(String.valueOf(fixedWarningCount));", "+\t\t} else {", "+\t\t\tif (fixedErrorCount > 0) {", "+\t\t\t\tif (fixedErrorCount == 1)", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.oneError\")); //$NON-NLS-1$", "+\t\t\t\telse", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", String.valueOf(fixedErrorCount))); //$NON-NLS-1$", "+\t\t\t\tif (fixedWarningCount > 0)", "+\t\t\t\t\tbuffer.append(\" + \"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (fixedWarningCount > 0) {", "+\t\t\t\tif (fixedWarningCount == 1)", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.oneWarning\")); //$NON-NLS-1$", "+\t\t\t\telse", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", String.valueOf(fixedWarningCount))); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3507316f3d24c7614ae4c03fcb0b72d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "f8f573fb4945f47fa2e1f634d0b55fa9e0151f17", "commitAfterChange": "b1e2ed2bb1403d1f729ccda27eb7b9ebe7009bed", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testAddImports_bug24804_5() throws Exception", "signatureAfterChange": " \tpublic void testImportGroupMatchingQualifiedName() throws Exception", "diff": ["+\t */", "+\tpublic void testImportGroupMatchingQualifiedName() throws Exception {", "+\t\tICompilationUnit cu = createCompilationUnit(\"pack1\", \"C\");", "+", "+\t\tString[] order = new String[] { \"#android.R.doFoo\", \"android.R\", \"java\", \"android\" };", "+", "+\t\tImportRewrite imports = newImportsRewrite(cu, order, 999, 999, false);", "+\t\timports.setUseContextToFilterImplicitImports(true);", "+\t\timports.addImport(\"android.R\");", "+\t\timports.addImport(\"java.util.List\");", "+\t\timports.addImport(\"android.Foo\");", "+\t\timports.addStaticImport(\"android.R\", \"doFoo\", false);", "+", "+\t\tapply(imports);", "+", "+\t\tStringBuffer expected = new StringBuffer();", "+\t\texpected.append(\"package pack1;\\n\");", "+\t\texpected.append(\"\\n\");", "+\t\texpected.append(\"import static android.R.doFoo;\\n\");", "+\t\texpected.append(\"\\n\");", "+\t\texpected.append(\"import android.R;\\n\");", "+\t\texpected.append(\"\\n\");", "+\t\texpected.append(\"import java.util.List;\\n\");", "+\t\texpected.append(\"\\n\");", "+\t\texpected.append(\"import android.Foo;\\n\");", "+\t\texpected.append(\"\\n\");", "+\t\texpected.append(\"public class C {}\");", "+\t\tassertEqualString(cu.getSource(), expected.toString());", "+\t}", "-", "-\tpublic void testAddImports_bug24804_5() throws Exception {", "-", "-\t\tIPackageFragment pack1= this.sourceFolder.createPackageFragment(\"pack1\", false, null);", "-\t\tStringBuffer buf= new StringBuffer();", "-\t\tbuf.append(\"package pack1;\\n\");", "-\t\tbuf.append(\"\\n\");", "-\t\tbuf.append(\"import java.lang.AssertionError; //test\\n\");", "-\t\tbuf.append(\"\\n\");", "-\t\tbuf.append(\"/** comment2 */\\n\");", "-\t\tbuf.append(\"\\n\");", "-\t\tbuf.append(\"/** comment */\\n\");", "-\t\tbuf.append(\"import java.lang.System;\\n\");", "-\t\tbuf.append(\"\\n\");", "-\t\tbuf.append(\"public class C {\\n\");", "-\t\tbuf.append(\"}\\n\");", "-\t\tICompilationUnit cu= pack1.createCompilationUnit(\"C.java\", buf.toString(), false, null);", "-", "-\t\tString[] order= new String[] { \"java\" };", "-", "-\t\tImportRewrite imports= newImportsRewrite(cu, order, 1, 1, false);", "-\t\timports.addImport(\"java.io.Exception\");", "-", "-\t\tapply(imports);", "-", "-\t\tbuf= new StringBuffer();", "-\t\tbuf.append(\"package pack1;\\n\");", "-\t\tbuf.append(\"\\n\");", "-\t\tbuf.append(\"import java.io.*;\\n\");", "-\t\tbuf.append(\"//test\\n\");", "-\t\tbuf.append(\"/** comment2 */\\n\");", "-\t\tbuf.append(\"/** comment */\\n\");", "-\t\tbuf.append(\"\\n\");", "-\t\tbuf.append(\"public class C {\\n\");", "-\t\tbuf.append(\"}\\n\");", "-\t\tassertEqualString(cu.getSource(), buf.toString());", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46b52f460633dc232c67b2d08abf187d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/StandardVMLauncher.java", "commitBeforeChange": "37843798fe45653980f2b49b68c9aaf82a2a678a", "commitAfterChange": "113049ad9ea4e67ef301103493e4ca8a20365c97", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public String[] getCommandLine()", "signatureAfterChange": " public String[] getCommandLine()", "diff": ["-\tif (System.getProperty(\"java.vm.version\").startsWith(\"1.4.2\")) {", "-\t\tcommandLine.addElement(", "-\t\t\tthis.vmPath + ", "-\t\t\t(this.vmPath.endsWith(File.separator) ? \"\" : File.separator) + ", "-\t\t\t\"bin\" + ", "-\t\t\tFile.separator + ", "-\t\t\t\"java\");", "-\t} else {", "-\t\tString vmLocation = this.vmPath + ", "-\t\t\t(this.vmPath.endsWith(File.separator) ? \"\" : File.separator) + ", "-\t\t\t\"bin\" + ", "-\t\t\tFile.separator + ", "-\t\t\t\"javaw\";", "-\t\tfinal String osName = System.getProperty(\"os.name\");", "-\t\tif (osName.indexOf(\"win32\") != -1) {", "-\t\t\tvmLocation += \".exe\";", "-\t\t}", "-\t\tif (!new File(vmLocation).exists()) {", "-\t\t\tvmLocation = ", "-\t\t\t\tthis.vmPath + ", "-\t\t\t\t(this.vmPath.endsWith(File.separator) ? \"\" : File.separator) + ", "-\t\t\t\t\"bin\" + ", "-\t\t\t\tFile.separator + ", "-\t\t\t\t\"java\";", "-\t\t}", "-\t\tcommandLine.addElement(vmLocation);", "-\t}", "+\tStringBuffer vmLocation = new StringBuffer(this.vmPath);", "+\tvmLocation", "+\t\t.append(this.vmPath.endsWith(File.separator) ? \"\" : File.separator)", "+\t\t.append(\"bin\")", "+\t\t.append(File.separator)", "+\t\t.append(\"java\");", "+\tcommandLine.addElement(String.valueOf(vmLocation));", "-\tcommandLine.addElement(\"-Xbootclasspath:\" + buildBootClassPath());", "+\tcommandLine.addElement(\"-Xbootclasspath/a:\" + buildBootClassPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "669ea27afc5e31be327b04ebddd950a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "signatureAfterChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "diff": ["-\t\tString array_initializer_brace_position = this.preferences.array_initializer_brace_position;", "+\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "-\t\t\tif (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "+\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "-\t\t\t\t\t\tthis.preferences.array_initializer_expressions_alignment,", "+\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "-\t\t\t\t\t\tthis.preferences.array_initializer_continuation_indentation,", "+\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "-\t\t\t\tif (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t}", "-\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "+\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\tif (expressionsLength == 1) {", "-\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tif (isComma()) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t}", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.unIndent();", "-\t\t} else if (this.preferences.insert_space_between_empty_array_initializer) {", "+\t\t} else if (this.preferences.insert_space_between_empty_braces_in_array_initializer) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb0056486a14795dbd7fc7bd59e7dc76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelCache.java", "commitBeforeChange": "09473c6b83f94b4ab60d09394d8636c0ec234aff", "commitAfterChange": "af33da7216734bcb2ae0e5dbadaa836c42812db8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public String toStringFillingRation(String prefix)", "signatureAfterChange": " public String toStringFillingRation(String prefix)", "diff": ["-\tbuffer.append(\"Root cache[\"); //$NON-NLS-1$", "-\tbuffer.append(this.rootCache.getSpaceLimit());", "-\tbuffer.append(\"]: \"); //$NON-NLS-1$", "-\tbuffer.append(NumberFormat.getInstance().format(this.rootCache.fillingRatio()));", "-\tbuffer.append(\"%\\n\"); //$NON-NLS-1$", "+\tbuffer.append(this.rootCache.toStringFillingRation(\"Root cache\")); //$NON-NLS-1$", "+\tbuffer.append('\\n');", "-\tbuffer.append(\"Package cache[\"); //$NON-NLS-1$", "-\tbuffer.append(this.pkgCache.getSpaceLimit());", "-\tbuffer.append(\"]: \"); //$NON-NLS-1$", "-\tbuffer.append(NumberFormat.getInstance().format(this.pkgCache.fillingRatio()));", "-\tbuffer.append(\"%\\n\"); //$NON-NLS-1$", "+\tbuffer.append(this.pkgCache.toStringFillingRation(\"Package cache\")); //$NON-NLS-1$", "+\tbuffer.append('\\n');", "-\tbuffer.append(\"Openable cache[\"); //$NON-NLS-1$", "-\tbuffer.append(this.openableCache.getSpaceLimit());", "-\tbuffer.append(\"]: \"); //$NON-NLS-1$", "-\tbuffer.append(NumberFormat.getInstance().format(this.openableCache.fillingRatio()));", "-\tbuffer.append(\"%\\n\"); //$NON-NLS-1$", "+\tbuffer.append(this.openableCache.toStringFillingRation(\"Openable cache\")); //$NON-NLS-1$", "+\tbuffer.append('\\n');"]}], "num": 18363}
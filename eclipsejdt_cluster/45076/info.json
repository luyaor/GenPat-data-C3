{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c49874580c8e6e528d540d65beff136e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852a89aaa8fae2284fcd35d78fb5e63c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic StringBuffer print(int indent, StringBuffer output)", "signatureAfterChange": " \tpublic StringBuffer print(int indent, StringBuffer output)", "diff": ["-\t\tif (this.parameters != null) {", "-\t\t\tfor (int i = 0, length = this.parameters.length; i < length; i++) {", "+\t\tif (this.paramReferences != null) {", "+\t\t\tfor (int i = 0, length = this.paramReferences.length; i < length; i++) {", "-\t\t\t\tthis.parameters[i].print(indent, output).append('\\n');", "+\t\t\t\tthis.paramReferences[i].print(indent, output).append('\\n');", "+\t\t\t}", "+\t\t}", "+\t\tif (this.paramTypeParameters != null) {", "+\t\t\tfor (int i = 0, length = this.paramTypeParameters.length; i < length; i++) {", "+\t\t\t\tprintIndent(indent + 1, output).append(\" * @param <\"); //$NON-NLS-1$\t\t", "+\t\t\t\tthis.paramTypeParameters[i].print(indent, output).append(\">\\n\"); //$NON-NLS-1$", "-\t\t\tprintIndent(indent + 1, output).append(\" * @return\\n\"); //$NON-NLS-1$\t\t", "+\t\t\tprintIndent(indent + 1, output).append(\" * @\"); //$NON-NLS-1$", "+\t\t\tthis.returnStatement.print(indent, output).append('\\n');", "-\t\tif (this.thrownExceptions != null) {", "-\t\t\tfor (int i = 0, length = this.thrownExceptions.length; i < length; i++) {", "+\t\tif (this.exceptionReferences != null) {", "+\t\t\tfor (int i = 0, length = this.exceptionReferences.length; i < length; i++) {", "-\t\t\t\tthis.thrownExceptions[i].print(indent, output).append('\\n');", "+\t\t\t\tthis.exceptionReferences[i].print(indent, output).append('\\n');", "-\t\tif (this.references != null) {", "-\t\t\tfor (int i = 0, length = this.references.length; i < length; i++) {", "+\t\tif (this.seeReferences != null) {", "+\t\t\tfor (int i = 0, length = this.seeReferences.length; i < length; i++) {", "-\t\t\t\tthis.references[i].print(indent, output).append('\\n');", "+\t\t\t\tthis.seeReferences[i].print(indent, output).append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c20ffe9198cfa4b67bfcc10b4d5498c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "0b497d99ae5c5d12538e4bc3f61ace5a8ad6f2f8", "commitAfterChange": "f6f5dabbefe650566ba5bc89a6817171bf0deaef", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException {", "+\tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException {", "+\t\tfinal IJavaProject[] modifiedProjects;", "+\t\tSystem.arraycopy(affectedProjects, 0, modifiedProjects = new IJavaProject[projectLength], 0, projectLength);", "-\t\t\t", "+\t\t\tif (newContainer == null) newContainer = JavaModelManager.ContainerInitializationInProgress; // 30920 - prevent infinite loop", "-\t\t\t\taffectedProjects[i] = null; // filter out this project - does not reference the container path, or isnt't yet Java project", "+\t\t\t\tmodifiedProjects[i] = null; // filter out this project - does not reference the container path, or isnt't yet Java project", "-\t\t\t\taffectedProjects[i] = null; // filter out this project - container did not change", "+\t\t\t\tmodifiedProjects[i] = null; // filter out this project - container did not change", "-\t\t\t\t\t\tJavaProject affectedProject = (JavaProject)affectedProjects[i];", "+\t\t\t\t\t\tJavaProject affectedProject = (JavaProject)modifiedProjects[i];", "+\t\t} finally {", "+\t\t\tfor (int i = 0; i < projectLength; i++) {", "+\t\t\t\tif (respectiveContainers[i] == null) {", "+\t\t\t\t\tJavaModelManager.containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 45076}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdc0efff0cac3054049e84447ae1e346", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e79b0de9341e41a09c7c7dbc802784", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testGetReturnType()", "signatureAfterChange": " public void testGetReturnType()", "diff": ["-\tassertTrue(\"Signature#getReturnType is not correct1\", Signature.getReturnType(methodSig).equals(\"I\"));", "+\tassertEquals(\"Signature#getReturnType is not correct1\", \"I\",", "+\t\t\tSignature.getReturnType(methodSig));", "-\tassertTrue(\"Signature#getReturnType is not correct2\", Signature.getReturnType(methodSig).equals(\"I\"));", "+\tassertEquals(\"Signature#getReturnType is not correct2\", \"I\",", "+\t\t\tSignature.getReturnType(methodSig));", "-\tassertTrue(\"Signature#getReturnType is not correct3\", Signature.getReturnType(methodSig).equals(\"Qlist<Qxxx;>;\"));", "+\tassertEquals(\"Signature#getReturnType is not correct3\", \"Qlist<Qxxx;>;\",", "+\t\t\tSignature.getReturnType(methodSig));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9972d554e5b3d1808f48572af0a090d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "38835101c5cb5aa877400915ae93db40feae72e1", "commitAfterChange": "4007ad30c270c1323bfebe340590d44f8586e167", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testValidUnicodePackageName()", "signatureAfterChange": " \tpublic void testValidUnicodePackageName()", "diff": ["-\t\tassertTrue(\"unicode package name not handled\", JavaConventions.validatePackageName(pkgName, sourceLevel, complianceLevel).isOK());", "-\t\tassertTrue(\"Parameter modified\", pkgName.equals(\"com.\\\\u0069bm.jdt.core.tests.MyPackag\\\\u0065\"));", "+\t\tassertEquals(\"unicode package name not handled\", IStatus.OK, validate(pkgName, PACKAGE_NAME));", "+\t\tassertEquals(\"Parameter modified\", \"com.\\\\u0069bm.jdt.core.tests.MyPackag\\\\u0065\", pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a020545c2682cd7882e5fdf269cc7d08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testToQualifiedName()", "signatureAfterChange": " public void testToQualifiedName()", "diff": ["-\tassertTrue(\"Signature#toQualifiedName is not correct1\", Signature.toQualifiedName(new String[] {\"java\", \"lang\", \"Object\"}).equals(\"java.lang.Object\"));", "-\tassertTrue(\"Signature#toQualifiedName is not correct2\", Signature.toQualifiedName(new String[] {\"Object\"}).equals(\"Object\"));", "-\tassertTrue(\"Signature#toQualifiedName is not correct3\", Signature.toQualifiedName(new String[0]).equals(\"\"));", "+\tassertEquals(\"Signature#toQualifiedName is not correct1\", \"java.lang.Object\",", "+\t\t\tSignature.toQualifiedName(new String[] {\"java\", \"lang\", \"Object\"}));", "+\tassertEquals(\"Signature#toQualifiedName is not correct2\", \"Object\",", "+\t\t\tSignature.toQualifiedName(new String[] {\"Object\"}));", "+\tassertEquals(\"Signature#toQualifiedName is not correct3\", \"\",", "+\t\t\tSignature.toQualifiedName(new String[0]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c635395fff7e6c9a996f13ad5de884c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testGetElementType()", "signatureAfterChange": " public void testGetElementType()", "diff": ["-\tassertTrue(\"Signature#getElementType is not correct1\", Signature.getElementType(\"[[[[QString;\").equals(\"QString;\"));", "-\tassertTrue(\"Signature#getElementType is not correct2\", Signature.getElementType(\"QString;\").equals(\"QString;\"));", "-\tassertTrue(\"Signature#getElementType is not correct2\", Signature.getElementType(\"[[I\").equals(\"I\"));", "+\tassertEquals(\"Signature#getElementType is not correct1\", \"QString;\",", "+\t\t\tSignature.getElementType(\"[[[[QString;\"));", "+\tassertEquals(\"Signature#getElementType is not correct2\", \"QString;\",", "+\t\t\tSignature.getElementType(\"QString;\"));", "+\tassertEquals(\"Signature#getElementType is not correct2\", \"I\",", "+\t\t\tSignature.getElementType(\"[[I\"));", "-\tassertTrue(", "-\t\t\"Signature#getElementType not correct\", ", "-\t\tSignature.getElementType(\"[[[[Qlist<Qstring;>;\").equals(\"Qlist<Qstring;>;\"));", "+\tassertEquals(", "+\t\t\"Signature#getElementType not correct\", \"Qlist<Qstring;>;\",", "+\t\tSignature.getElementType(\"[[[[Qlist<Qstring;>;\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3430dee94bc7eeeae84df5b6e7f2f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testGetTypeVariable()", "signatureAfterChange": " public void testGetTypeVariable()", "diff": ["-\tassertTrue(\"Signature#getTypeVariable is not correct1\", Signature.getTypeVariable(formalTypeParameterSignature).equals(\"Hello\"));", "+\tassertEquals(\"Signature#getTypeVariable is not correct1\", \"Hello\",", "+\t\t\tSignature.getTypeVariable(formalTypeParameterSignature));", "-\tassertTrue(\"Signature#getTypeVariable is not correct2\", Signature.getTypeVariable(formalTypeParameterSignature).equals(\"Hello\"));", "+\tassertEquals(\"Signature#getTypeVariable is not correct2\", \"Hello\",", "+\t\t\tSignature.getTypeVariable(formalTypeParameterSignature));", "-\tassertTrue(\"Signature#getTypeVariable is not correct3\", Signature.getTypeVariable(formalTypeParameterSignature).equals(\"Hello\"));", "+\tassertEquals(\"Signature#getTypeVariable is not correct3\", \"Hello\",", "+\t\t\tSignature.getTypeVariable(formalTypeParameterSignature));"]}], "num": 58464}
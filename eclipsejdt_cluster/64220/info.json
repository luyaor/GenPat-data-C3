{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9760bde93811c05d791eb7d8e3bb9944", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05acae26066d8ca1ea980b0791394d5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "commitAfterChange": "0bbfe267fb7eaaa77628088e8cdbd841ddb40de5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn suite(evaluationTestClass, suiteName, 3);", "-\t}", "+\t\t// Init suite with class name", "+\t\tList tests = new ArrayList();", "+\t\tConstructor constructor = null;", "+\t\t\t// Get class constructor", "+\t\t\tconstructor = evaluationTestClass.getConstructor(paramTypes);", "+\t\t}", "+\t\tcatch (Exception e) {", "+\t\t\t// cannot get constructor, skip suite", "+\t\t\treturn suite;", "+\t\t}", "+", "+\t\t// Get all tests from \"test%\" methods", "+\t\tMethod[] methods = evaluationTestClass.getMethods();", "+\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "+\t\t\ttry {", "+\t\t\t\tif (methods[m].getModifiers() == 1 /* public */ &&", "+\t\t\t\t\tmethods[m].getName().startsWith(\"test\")) { //$NON-NLS-1$", "+\t\t\t\t\tString methName = methods[m].getName();", "+\t\t\t\t\tObject[] params = {methName};", "+\t\t\t\t\t// tests names subset", "+\t\t\t\t\tif (testsNames != null) {", "+\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "+\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(4))) {", "+\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// look for test number", "+\t\t\t\t\tif (methName.length()>4 && Character.isDigit(methName.charAt(4))) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// get test number", "+\t\t\t\t\t\t\tint n = 4;", "+\t\t\t\t\t\t\twhile (methName.charAt(n) == '0') n++;", "+\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(n));", "+\t\t\t\t\t\t\t// tests numbers subset", "+\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "+\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "+\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// tests range subset", "+\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "+\t\t\t\t\t// no subset, add all tests", "+\t\t\t\t\tif (testsNames==null && testsNumbers==null &&testsRange==null) {", "+\t\t\tcatch (Exception e) {", "+\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" removed from suite due to exception: \"+e.getMessage());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71b7a570b233d9cce1f4dd24a3f3377b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest.java", "commitBeforeChange": "f1193e6503e3d1d4aed816cb60dcc97268ceaf78", "commitAfterChange": "d173da65452fbda2d49c0f6b870b85fed5c21760", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic static Test suiteForJavadocSupport( String level, Class testClass, Constructor constructor, String support) throws InvocationTargetException, IllegalAccessException, InstantiationException", "signatureAfterChange": "  \tpublic static Test suiteForJavadocSupport(String level, Class testClass, Constructor constructor, String support) throws InvocationTargetException, IllegalAccessException, InstantiationException", "diff": ["-\tpublic static Test suiteForJavadocSupport(/*TestSuite suite,*/ String level, Class testClass, Constructor constructor, String support) throws InvocationTargetException, IllegalAccessException, InstantiationException {", "-\t\tTestSuite suite = new TestSuite(\"Doc \"+support);", "-\t\tif (testNames != null) {", "-\t\t\tfor (int i = 0; i < testNames.length; i++) {", "-\t\t\t\tString meth = \"test\" + testNames[i];", "-//\t\t\t\tObject[] params = {meth, support};", "-\t\t\t\tObject[] params = {meth};", "-\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t}", "-\t\t}", "-\t\telse if (testNumbers != null) {", "-\t\t\tfor (int i = 0; i < testNumbers.length; i++) {", "-\t\t\t\tString meth = \"test\";", "-\t\t\t\tint num = testNumbers[i];", "-\t\t\t\tif (num < 10) meth += \"0\";", "-\t\t\t\tif (num < 100) meth += \"0\";", "-\t\t\t\tmeth += num;", "-//\t\t\t\tObject[] params = {meth, support};", "-\t\t\t\tObject[] params = {meth};", "-\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t}", "-\t\t}", "-\t\telse if (testRange != null && testRange.length == 2 && testRange[0]>=0 && testRange[0]<=testRange[1]) {", "-\t\t\tfor (int i=testRange[0]; i<=testRange[1]; i++) {", "-\t\t\t\tString meth = \"test\";", "-\t\t\t\tif (i<10) meth += \"0\";", "-\t\t\t\tif (i<100) meth += \"0\";", "-\t\t\t\tmeth += i;", "-//\t\t\t\tObject[] params = {meth, support};", "-\t\t\t\tObject[] params = {meth};", "-\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// Run all tests", "-\t\t\tMethod[] methods = testClass.getMethods();", "-\t\t\tfor (int i = 0, max = methods.length; i < max; i++) {", "-\t\t\t\tif (methods[i].getModifiers() == 1 && methods[i].getName().startsWith(\"test\")) { //$NON-NLS-1$", "-//\t\t\t\t\tObject[] params = {methods[i].getName(), support};", "-\t\t\t\t\tObject[] params = {methods[i].getName()};", "-\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-//\t\treturn suite;", "+\tpublic static Test suiteForJavadocSupport(String level, Class testClass, Constructor constructor, String support) throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+\t\tTest suite = suite(testClass, \"Doc \"+support);"]}], "num": 64220}
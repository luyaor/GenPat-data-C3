{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cfdc12ab502497cfdffa0da00416459", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17d254ba46e0e9f3778b92a99a231fcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void generateOptimizedLogicalAnd(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "signatureAfterChange": " public void generateOptimizedLogicalAnd(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t// reposition the endPC", "-\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f9e130b95b51eea01a6fb9837bbf7f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void generateLogicalOr(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateLogicalOr(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t// reposition the endPC", "-\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e93aef44a1677f94328f177152444d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void generateLogicalXor(BlockScope currentScope,\tCodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateLogicalXor(BlockScope currentScope,\tCodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t// reposition the endPC", "-\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5e862b884a0e3146a72bd251d1be022", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void generateOptimizedLogicalOr(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "signatureAfterChange": " public void generateOptimizedLogicalOr(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\t\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);", "-\t// reposition the endPC", "-\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\tcodeStream.recordPositionsFrom(codeStream.position, this.sourceEnd);"]}], "num": 25663}
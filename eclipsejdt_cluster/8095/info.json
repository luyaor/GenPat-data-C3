{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e13663812e261f71c3a431ded8a5622e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07c444b7211a615ec4a9bfaa261bafee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "e44084d11b78dee2352add7a7fb666daba7d3b97", "commitAfterChange": "7594e7e641998e4b739042718fe64988f6b36839", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate BinaryExpressionFragmentBuilder buildFragments(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tprivate BinaryExpressionFragmentBuilder buildFragments(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["-\t\tbinaryExpression.left.traverse(builder, scope);", "+\t\t\t\tbinaryExpression.left.traverse(builder, scope);", "+\t\t\t\tbinaryExpression.right.traverse(builder, scope);", "+\t\t\t\tbinaryExpression.left.traverse(builder, scope);", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.EQUAL_EQUAL :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameEQUAL_EQUAL));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.NOT_EQUAL :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameNOT_EQUAL));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.AND :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameAND));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.DIVIDE :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameDIVIDE));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.GREATER :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameGREATER));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.GREATER_EQUAL :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameGREATER_EQUAL));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.LEFT_SHIFT :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLEFT_SHIFT));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.LESS :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLESS));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.LESS_EQUAL :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLESS_EQUAL));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.MINUS :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameMINUS));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.MULTIPLY :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameMULTIPLY));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.OR :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameOR));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.PLUS :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNamePLUS));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.REMAINDER :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameREMAINDER));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.RIGHT_SHIFT :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameRIGHT_SHIFT));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameUNSIGNED_RIGHT_SHIFT));", "-\t\t\t\tbreak;", "-\t\t\tcase OperatorIds.XOR :", "-\t\t\t\tbuilder.operatorsList.add(new Integer(ITerminalSymbols.TokenNameXOR));", "+\t\t\t\tbinaryExpression.right.traverse(builder, scope);", "-\t\tbinaryExpression.right.traverse(builder, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b98ce07a3e3595ff6b93d494d893245", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "7594e7e641998e4b739042718fe64988f6b36839", "commitAfterChange": "c50c590bab482d39145c20debd2941d0e0bbc56e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["-\t\tif (buildFragments(binaryExpression)) {", "-\t\t\tswitch((binaryExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT) {", "-\t\t\t\tcase OperatorIds.AND :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameAND));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.DIVIDE :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameDIVIDE));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.GREATER :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameGREATER));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.GREATER_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameGREATER_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.LEFT_SHIFT :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLEFT_SHIFT));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.LESS :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLESS));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.LESS_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLESS_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.MINUS :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameMINUS));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.MULTIPLY :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameMULTIPLY));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.OR :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameOR));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.PLUS :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNamePLUS));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.REMAINDER :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameREMAINDER));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.RIGHT_SHIFT :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameRIGHT_SHIFT));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameUNSIGNED_RIGHT_SHIFT));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.XOR :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameXOR));", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else {", "-\t\t\treturn false;", "-\t\t}", "+\t\tthis.fragmentsList.add(binaryExpression);", "+\t\treturn false;"]}], "num": 8095}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b51d4e3f10908048e33e59255d59254", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "177534f8f0d4e82420093e1670ff343b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "76b6a3cfd736c0a5d2fa443496ebcce87b457034", "commitAfterChange": "758384b437a0774b752cc93ee115caa6a5280651", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tint resourcesLength = this.resources.length;", "+\tif (resourcesLength > 0) {", "+\t\tthis.postResourcesInitStateIndexes = new int[resourcesLength];", "+\t}", "+", "+", "-\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\tthis.postResourcesInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(flowInfo);", "-\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\tthis.postResourcesInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cac9226cec4e8e097138b4f297cac18b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "4588c3b4f2f50edc1b7f6b03c5e9b0e36a6638a1", "commitAfterChange": "3d13a3235f809dfb48a127bd36dbb2c405e56ef1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\tthis.catchExitInitStateIndexes = new int[catchCount];", "-\t\t\t\t}", "-\t\t\t\telse {", "+\t\t\t\t} else {", "+\t\t\t\tthis.catchExitInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(catchInfo);", "+\t\t\tthis.catchExitInitStateIndexes = new int[catchCount];", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\tcatchInfo =", "-\t\t\t\t\tflowInfo.unconditionalCopy()", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t// remove null info to protect point of ", "-\t\t\t\t\t\t\t// exception null info ", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "-\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t}else {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\tflowInfo.unconditionalCopy()", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "+\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t\t\t\t\t// remove null info to protect point of ", "+\t\t\t\t\t\t\t\t// exception null info ", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "+\t\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\tthis.catchExitInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(catchInfo);"]}], "num": 49150}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "732566c9b26ddc466e0cbaa8f7c02bd7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "683947e3048a6a1388c3a7e4fa718ece", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "4c2a905aadc81c8c888c5fc5a111e98f871b85f1", "commitAfterChange": "2837bd360df1c376bc39df62191694b92b14b919", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean checkAnnotations()", "signatureAfterChange": " \tprivate boolean checkNegative2()", "diff": ["-\tprivate boolean checkAnnotations() {", "+\t */", "+\tprivate boolean checkNegative2() {", "+\t\tList<? extends Element> enclosedElements = _elementN2.getEnclosedElements();", "+\t\tfor (Element element : enclosedElements) {", "+\t\t\tString name = element.getSimpleName().toString();", "+\t\t\tif (\"m1\".equals(name)) {", "+\t\t\t\tAnnotationMirror am2 = findAnnotation(element, \"Anno2\");", "+\t\t\t\tif (_reportFailingCases && null == am2) {", "+\t\t\t\t\treportError(\"Couldn't find annotation Anno2 on method Negative2.m1\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"m2\".equals(name)) {", "+\t\t\t\tAnnotationMirror am1 = findAnnotation(element, \"Anno1\");", "+\t\t\t\tif (_reportFailingCases && null == am1) {", "+\t\t\t\t\treportError(\"Couldn't find annotation Anno1 on method Negative2.m2\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tAnnotationMirror am3 = findAnnotation(element, \"FakeAnno3\");", "+\t\t\t\tif (_reportFailingCases && null == am3) {", "+\t\t\t\t\treportError(\"Couldn't find annotation FakeAnno3 on method Negative2.m2\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"m3\".equals(name)) {", "+\t\t\t\tAnnotationMirror am2 = findAnnotation(element, \"Anno2\");", "+\t\t\t\tif (_reportFailingCases && null == am2) {", "+\t\t\t\t\treportError(\"Couldn't find annotation Anno2 on method Negative2.m3\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tAnnotationMirror am3 = findAnnotation(element, \"FakeAnno3\");", "+\t\t\t\tif (_reportFailingCases && null == am3) {", "+\t\t\t\t\treportError(\"Couldn't find annotation FakeAnno3 on method Negative2.m3\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"m4\".equals(name)) {", "+\t\t\t\tAnnotationMirror am4 = findAnnotation(element, \"Anno4\");", "+\t\t\t\tif (_reportFailingCases && null == am4) {", "+\t\t\t\t\treportError(\"Couldn't find annotation Anno4 on method Negative2.m4\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = am4.getElementValues();", "+\t\t\t\tfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\t\tif (\"value\".equals(entry.getKey().getSimpleName().toString())) {", "+\t\t\t\t\t\tString value = entry.getValue().getValue().toString();", "+\t\t\t\t\t\tif (!\"123\".equals(value) && !\"<error>\".equals(value)) {", "+\t\t\t\t\t\t\treportError(\"Unexpected value for Anno4 on Negative1.s1: \" + value);", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f13d1451d932232ee14fa117686b0151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "2b8cdf5b25e07227dc18107b83f738581752bc80", "commitAfterChange": "c97d2bafa36295328a1a888b1de6ae8961b94266", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean checkNegative1()", "signatureAfterChange": " \tpublic boolean checkNegative1() throws Exception", "diff": ["-\tpublic boolean checkNegative1() {", "-\t\tTypeElement elementN1 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "-\t\tif (null == elementN1 || elementN1.getKind() != ElementKind.CLASS) {", "+\tpublic boolean checkNegative1() throws Exception {", "+\t\t", "+\t\t// Get the root of the Negative1 model", "+\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "+\t\tif (null == element || element.getKind() != ElementKind.CLASS) {", "-\t\tAnnotationMirror am3 = findAnnotation(elementN1, \"A3\");", "-\t\tif (_reportFailingCases && null == am3) {", "-\t\t\treportError(\"Couldn't find annotation A3 on class Negative1\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tList<? extends Element> enclosedElements = elementN1.getEnclosedElements();", "-\t\tboolean foundM1 = false; // do we find an element of unresolved type?", "-\t\tfor (Element element : enclosedElements) {", "-\t\t\tString name = element.getSimpleName().toString();", "-\t\t\tif (\"m1\".equals(name)) {", "-\t\t\t\tfoundM1 = true;", "-\t\t\t\tTypeKind tk = element.asType().getKind();", "-\t\t\t\tif (tk != TypeKind.ERROR && tk != TypeKind.DECLARED) {", "-\t\t\t\t\treportError(\"Field Negative1.m1 has a type of unexpected kind \" + tk);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tAnnotationMirror am4 = findAnnotation(element, \"A4\");", "-\t\t\t\tif (_reportFailingCases && null == am4) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A4 on field Negative1.m1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"i1\".equals(name)) {", "-\t\t\t\tAnnotationMirror am5 = findAnnotation(element, \"A5\");", "-\t\t\t\tif (_reportFailingCases && null == am5) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A5 on field Negative1.i1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"m2\".equals(name)) {", "-\t\t\t\tAnnotationMirror am8 = findAnnotation(element, \"A8\");", "-\t\t\t\tif (_reportFailingCases && null == am8) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A8 on field Negative1.m2\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"s1\".equals(name)) {", "-\t\t\t\tAnnotationMirror am = findAnnotation(element, \"Anno1\");", "-\t\t\t\tif (null == am) {", "-\t\t\t\t\treportError(\"Couldn't find annotation Anno on field Negative1.s1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = am.getElementValues();", "-\t\t\t\tfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "-\t\t\t\t\tif (\"value\".equals(entry.getKey().getSimpleName().toString())) {", "-\t\t\t\t\t\tif (!\"spud\".equals(entry.getValue().getValue())) {", "-\t\t\t\t\t\t\treportError(\"Unexpected value for Anno1 on Negative1.s1: \" + entry.getValue().getValue());", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (_reportFailingCases && !foundM1) {", "-\t\t\treportError(\"Couldn't find field Negative1.m1, presumably because its type is missing\");", "-\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "+\t\t", "+\t\treturn checkModel(Collections.singletonList(element), NEGATIVE_1_MODEL, \"Negative1\");"]}], "num": 36515}
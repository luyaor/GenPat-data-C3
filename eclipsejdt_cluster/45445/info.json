{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d4021e545aee97462f03a8ca73286ce", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "480fc747688768cdafcd425a660509ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1589fb124e7e874aa6bee240247571801d34f0d8", "commitAfterChange": "db0d0539426c718589b4a2e672b5423396d1d75d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprivate void verifyComments(String testNbre, boolean flattened) throws JavaModelException", "signatureAfterChange": " \tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException", "diff": ["-\tprivate void verifyComments(String testNbre, boolean flattened) throws JavaModelException {", "+\tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException {", "-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.test\"+testNbre, \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tassertNotNull(\"Test file Converter/src/javadoc/test\"+testNbre+\"/Test.java was not found!\", sourceUnit);", "+//\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.test\"+testNbre, \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+//\t\tassertNotNull(\"Test file Converter/src/javadoc/test\"+testNbre+\"/Test.java was not found!\", sourceUnit);", "-\t\t\tString comment = (String) this.comments.get(i);", "+\t\t\tComment comment = unitComments[i];", "+\t\t\tString stringComment = (String) this.comments.get(i);", "-\t\t\tif (unitComments[i].isDocComment()) {", "-\t\t\t\tJavadoc docComment = (Javadoc)unitComments[i];", "+\t\t\t// Verify content", "+\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "+\t\t\tcomment.accept(printer);", "+\t\t\tString text = new String(source, comment.getStartPosition(), comment.getLength());", "+\t\t\tassertEquals(\"Flattened javadoc does NOT match source!\", text, printer.getResult());", "+\t\t\t// Verify javdoc tags positions and bindings", "+\t\t\tif (comment.isDocComment()) {", "+\t\t\t\tJavadoc docComment = (Javadoc)comment;", "-\t\t\t\tif (flattened) {", "-\t\t\t\t\tassertEquals(\"Flattened javadoc does NOT match source!\", comment, docComment.toString());", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a22a9a9726a1b836386f4929f70f355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testBug51363() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51363() throws JavaModelException", "diff": ["-\t\tthis.sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tASTNode result = runConversion(this.sourceUnit, false);", "+\t\tsourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tASTNode result = runConversion(sourceUnit, false);", "-\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "+\t\tassumeEquals(prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\tassumeEquals(prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "-\t\tassumeTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "-\t\tString sourceStr = this.sourceUnit.getSource();", "+\t\tassumeTrue(prefix+\"Comment should be a line comment \", comment.isLineComment());", "+\t\tString sourceStr = sourceUnit.getSource();", "-\t\tassumeTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "-\t\tsourceStr = this.sourceUnit.getSource();", "+\t\tassumeTrue(prefix+\"Comment should be a line comment\", comment.isLineComment());", "+\t\tsourceStr = sourceUnit.getSource();"]}], "num": 45445}
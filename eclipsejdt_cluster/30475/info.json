{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a4b19156cf648533ba4ac0f5adcd487", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57edbf901bd0f4316d13ec99f566d1fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 23, "signatureBeforeChange": " public static char[][] getParameterTypes(char[] methodSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getParameterTypes(char[] methodSignature) throws IllegalArgumentException", "diff": ["-\t\tif (count == 0)", "+\t\tif (count == 0) {", "-\t\tint i = CharOperation.indexOf(C_PARAM_START, methodSignature) + 1;", "-\t\tcount = 0;", "-\t\tint start = i;", "+\t\t}", "+\t\tint i = CharOperation.indexOf(C_PARAM_START, methodSignature);", "+\t\tif (i < 0) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t} else {", "+\t\t\ti++;", "+\t\t}", "+\t\tint t = 0;", "-\t\t\tchar c = methodSignature[i++];", "-\t\t\tswitch (c) {", "-\t\t\t\tcase C_ARRAY :", "-\t\t\t\t\t// array depth is i - start;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_BOOLEAN :", "-\t\t\t\tcase C_BYTE :", "-\t\t\t\tcase C_CHAR :", "-\t\t\t\tcase C_DOUBLE :", "-\t\t\t\tcase C_FLOAT :", "-\t\t\t\tcase C_INT :", "-\t\t\t\tcase C_LONG :", "-\t\t\t\tcase C_SHORT :", "-\t\t\t\tcase C_VOID :", "-\t\t\t\t\t// common case of base types", "-\t\t\t\t\tif (i - start == 1) {", "-\t\t\t\t\t\tswitch (c) {", "-\t\t\t\t\t\t\tcase C_BOOLEAN :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_BOOLEAN};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_BYTE :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_BYTE};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_CHAR :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_CHAR};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_DOUBLE :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_DOUBLE};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_FLOAT :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_FLOAT};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_INT :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_INT};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_LONG :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_LONG};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_SHORT :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_SHORT};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_VOID :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_VOID};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tresult[count++] = CharOperation.subarray(methodSignature, start, i);", "-\t\t\t\t\t}", "-\t\t\t\t\tstart = i;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_TYPE_VARIABLE :", "-\t\t\t\tcase C_RESOLVED :", "-\t\t\t\tcase C_UNRESOLVED :", "-\t\t\t\t\t// TODO (jeem) - rework to handle type arguments like QList<QString;>;", "-\t\t\t\t\ti = CharOperation.indexOf(C_SEMICOLON, methodSignature, i) + 1;", "-\t\t\t\t\tif (i == 0)", "-\t\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\tresult[count++] = CharOperation.subarray(methodSignature, start, i);", "-\t\t\t\t\tstart = i;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_PARAM_END:", "-\t\t\t\t\treturn result;", "-\t\t\t\tdefault :", "-\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\tif (methodSignature[i] == C_PARAM_END) {", "+\t\t\t\treturn result;", "+\t\t\tint e = scanTypeSignature(methodSignature, i);", "+\t\t\tif (e < 0) {", "+\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t}", "+\t\t\tresult[t] = CharOperation.subarray(methodSignature, i, e + 1);", "+\t\t\tt++;", "+\t\t\ti = e + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e3db1cc6ebc799a5b1c277652b48205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private static long copyType(char[] signature, int sigPos, char[] dest, int index, boolean fullyQualifyTypeNames)", "signatureAfterChange": " private static int scanBaseTypeSignature(char[] string, int start)", "diff": ["-private static long copyType(char[] signature, int sigPos, char[] dest, int index, boolean fullyQualifyTypeNames) {", "-\tint arrayCount = 0;", "-\tloop: while (true) {", "-\t\tswitch (signature[sigPos++]) {", "-\t\t\tcase C_ARRAY :", "-\t\t\t\tarrayCount++;", "-\t\t\t\tbreak;", "-\t\t\tcase C_BOOLEAN :", "-\t\t\t\tint length = BOOLEAN.length;", "-\t\t\t\tSystem.arraycopy(BOOLEAN, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_BYTE :", "-\t\t\t\tlength = BYTE.length;", "-\t\t\t\tSystem.arraycopy(BYTE, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_CHAR :", "-\t\t\t\tlength = CHAR.length;", "-\t\t\t\tSystem.arraycopy(CHAR, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_DOUBLE :", "-\t\t\t\tlength = DOUBLE.length;", "-\t\t\t\tSystem.arraycopy(DOUBLE, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_FLOAT :", "-\t\t\t\tlength = FLOAT.length;", "-\t\t\t\tSystem.arraycopy(FLOAT, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_INT :", "-\t\t\t\tlength = INT.length;", "-\t\t\t\tSystem.arraycopy(INT, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_LONG :", "-\t\t\t\tlength = LONG.length;", "-\t\t\t\tSystem.arraycopy(LONG, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_SHORT :", "-\t\t\t\tlength = SHORT.length;", "-\t\t\t\tSystem.arraycopy(SHORT, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_VOID :", "-\t\t\t\tlength = VOID.length;", "-\t\t\t\tSystem.arraycopy(VOID, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_RESOLVED :", "-\t\t\tcase C_UNRESOLVED :", "-\t\t\t\tint end = CharOperation.indexOf(C_SEMICOLON, signature, sigPos);", "-\t\t\t\tif (end == -1) throw new IllegalArgumentException();", "-\t\t\t\tint start;", "-\t\t\t\tif (fullyQualifyTypeNames) {", "-\t\t\t\t\tstart = sigPos;", "-\t\t\t\t} else {", "-\t\t\t\t\tstart = CharOperation.lastIndexOf(C_DOT, signature, sigPos, end)+1;", "-\t\t\t\t\tif (start == 0) start = sigPos;", "-\t\t\t\t} ", "-\t\t\t\tlength = end-start;", "-\t\t\t\tSystem.arraycopy(signature, start, dest, index, length);", "-\t\t\t\tsigPos = end+1;", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t}", "-\t}", "-\twhile (arrayCount-- > 0) {", "-\t\tdest[index++] = '[';", "-\t\tdest[index++] = ']';", "-\t}", "-\treturn (((long) index) << 32) + sigPos;", "-}", "+ */", "+private static int scanBaseTypeSignature(char[] string, int start) {", "+\t// need a minimum 1 char", "+\tif (start >= string.length) {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+\tchar c = string[start];", "+\tif (\"BCDFIJSVZ\".indexOf(c) >= 0) { //$NON-NLS-1$", "+\t\treturn start;", "+\t} else {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+}"]}], "num": 30475}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa3f56f8ff328ce310aac0de58488848", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7727775874c5569ba9a33875684494", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean search(IIndex index, IProgressMonitor progressMonitor)", "signatureAfterChange": "\t  \tpublic boolean search(IIndex index, IProgressMonitor progressMonitor)", "diff": ["+", "-//\t\tIIndex inMemIndex = indexManager.peekAtIndex(new Path(((Index)index).toString.substring(\"Index for \".length()).replace('\\\\','/')));", "-//\t\tif (inMemIndex != index) {", "-//\t\t}", "-\t\t", "+\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\t\t\t\tthis.indexManager.saveIndex(index);", "+\t\t\t\t\tindexManager.saveIndex(index);", "-\t\t\t\tprogressMonitor,", "-\t\t\t\tthis.scope);", "+\t\t\t\tthis.participant,", "+\t\t\t\tthis.scope,", "+\t\t\t\tprogressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d8a763472f901663409c2f3011e22d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/SubTypeSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean search(IIndex index, IProgressMonitor progressMonitor)", "signatureAfterChange": " public boolean search(IIndex index, IProgressMonitor progressMonitor)", "diff": ["+\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\t\t\tthis.indexManager.saveIndex(index);", "+\t\t\t\tindexManager.saveIndex(index);", "-\t\tpattern.findIndexMatches(input, requestor, progressMonitor, this.scope);", "+\t\tpattern.findIndexMatches(input, requestor, this.participant, this.scope, progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58998eb8cbf68cfe7b92ffe7fb17d80f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "124643a9b7e02d95e1d58a7a8c2d6cfa0cf9fa28", "commitAfterChange": "ef6d0ed8f44402be2b4df60004e0bd04afc498e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\tIIndexSearchRequestor orCombiner = (IIndexSearchRequestor) new OrPathCombiner(requestor);", "+\t// per construction, OR pattern can only be used with a PathCollector (which already gather results using a set)", "-\t\tthis.patterns[i].findIndexMatches(input, orCombiner, progressMonitor, scope);", "+\t\tthis.patterns[i].findIndexMatches(input, requestor, progressMonitor, scope);"]}], "num": 20795}
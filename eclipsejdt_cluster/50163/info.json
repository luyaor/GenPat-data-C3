{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f9b86c093222349844f27b76c57648a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c63dd4d60da16a11ca8d0f9920c469a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "26ae2fb0b104f35c8ff6905d5a4d6e38ab8aa8e4", "commitAfterChange": "87c97e046bfd0082db22afde07881f33a4558114", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic char[] computeUniqueKey()", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "diff": ["-\tpublic char[] computeUniqueKey() {", "+\tpublic char[] computeUniqueKey(boolean withAccessFlags) {", "-\t\t\treturn super.computeUniqueKey();", "+\t\t\treturn super.computeUniqueKey(withAccessFlags);", "-\t\tbuffer.append(super.computeUniqueKey());", "+\t\tbuffer.append(super.computeUniqueKey(withAccessFlags));", "-\t\t\tbuffer.append(typeArgument.computeUniqueKey());", "+\t\t\tbuffer.append(typeArgument.computeUniqueKey(false/*without access flags*/));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d58b3d1fe53d8f65b366817c445487", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "e3beac235d122e4c3c54870082319a4f2cc2abeb", "commitAfterChange": "553b813a23ab25477516582ea0c9fc2d6eaf9fb4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\tpublic char[] computeUniqueKey(boolean withAccessFlags) {", "+\tpublic char[] computeUniqueKey(boolean isLeaf) {", "-\t\t\treturn super.computeUniqueKey(withAccessFlags);", "+\t\t\treturn super.computeUniqueKey(isLeaf);", "-\t\tbuffer.append(super.computeUniqueKey(withAccessFlags));", "+\t\tbuffer.append(super.computeUniqueKey(isLeaf));", "-\t\t\tbuffer.append(typeArgument.computeUniqueKey(false/*without access flags*/));", "+\t\t\tbuffer.append(typeArgument.computeUniqueKey(false/*not a leaf*/));"]}], "num": 50163}
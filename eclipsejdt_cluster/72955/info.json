{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c28e77871f0dca3f864e7cc846f7fc1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "016938cf906ad0cfc164efd378c9e2eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\tboolean polyExpressionSeen = false;", "-\t\t\t\t\tpolyExpressionSeen = true;", "+\t\t\t\t\tthis.innersNeedUpdate = true;", "-\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, argumentTypes, polyExpressionSeen);", "+\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, argumentTypes);", "-\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, argumentTypes, polyExpressionSeen);", "+\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230f3b1ef834250f6ba3d1fbf839ce1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean polyExpressionSeen = false;", "-\t\t\t\tpolyExpressionSeen = true;", "+\t\t\t\tthis.innersNeedUpdate = true;", "-\tfindMethodBinding(scope, argumentTypes, polyExpressionSeen);", "+\tfindMethodBinding(scope, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e987c6f4f42f0b7a2e23d935ceeef54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean polyExpressionSeen = false;", "-\t\t\t\tpolyExpressionSeen = true;", "+\t\t\t\tthis.innersNeedUpdate = true;", "-\tthis.binding = findConstructorBinding(scope, this, allocatedType, argumentTypes, polyExpressionSeen);", "+\tthis.binding = findConstructorBinding(scope, this, allocatedType, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57ddd1dc75323debbad508115a51d86b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tboolean polyExpressionSeen = false;", "-\t\t\t\t\t\tpolyExpressionSeen = true;", "+\t\t\t\t\t\tthis.innersNeedUpdate = true;", "-\t\t\tthis.binding = findConstructorBinding(scope, this, receiverType, argumentTypes, polyExpressionSeen);", "+\t\t\tthis.binding = findConstructorBinding(scope, this, receiverType, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc58826bda7649e6b55cd98d88a5f149", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean polyExpressionSeen = false;", "-\t\t\t\tpolyExpressionSeen = true;", "+\t\t\t\tthis.innersNeedUpdate = true;", "-\tResolutionState state = new ResolutionState(scope, isDiamond, diamondNeedsDeferring, argsContainCast, polyExpressionSeen, argumentTypes);", "+\tResolutionState state = new ResolutionState(scope, isDiamond, diamondNeedsDeferring, argsContainCast, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37f4e1bbff1391bc691ac17d86bbb3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean argumentsNeedUpdate = false;", "-\t\t\t\t\targumentsNeedUpdate = true;", "+\t\t\t\t\tthis.innersNeedUpdate = true;", "-\tfindMethodBinding(scope, argumentTypes, argumentsNeedUpdate);", "+\tfindMethodBinding(scope, argumentTypes);"]}], "num": 72955}
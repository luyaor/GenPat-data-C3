{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a75232abd3df8ba0e50eb077b820d61", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d021f8f6e51036b2cc475cf0c3cdeaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-\t */", "-\t\tres.append(\"buffer:name= {\");//$NON-NLS-1$", "-\t\tfor (int i = 0; i < buffer.length; i++) {", "-\t\t\tres.append('\\'');", "-\t\t\tres.append(lexStream.name(buffer[i]));", "-\t\t\tres.append('\\'');", "-\t\t\tres.append(',');", "-\t\t}", "-\t\tres.append(\"\\nbuffer:kind= {\");//$NON-NLS-1$", "-\t\tfor (int i = 0; i < buffer.length; i++) {", "-\t\t\tres.append(lexStream.kind(buffer[i]));", "-\t\t\tres.append(',');", "-\t\t}", "-\t\tres.append(\"}\\n\");//$NON-NLS-1$", "-\t\t", "-\t\tString source = new String(parser.scanner.source);", "-\t\tif(currentToken <= 0) {", "-\t\t\tres.append(source);", "-\t\t} else {", "-\t\t\tint curtokStart = lexStream.start(currentToken);", "-\t\t\tint curtokEnd = lexStream.end(currentToken);", "-\t\t\tres.append(source.substring(0, curtokStart));", "-\t\t\tres.append('#');", "-\t\t\tres.append(source.substring(curtokStart, curtokEnd + 1));", "-\t\t\tres.append('#');", "-\t\t\tres.append(source.substring(curtokEnd+1));", "-\t\t}", "+\t\tres.append(lexStream.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21e25020466a98fd250af53dfa92681", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "commitAfterChange": "ffd0667b5086352f304c15ea4ad31de38892668e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tprivate void preserveExistingLineBreaks()", "signatureAfterChange": "  \tprivate void preserveExistingLineBreaks()", "diff": ["-\t\t\t\tint lineBreaks = getLineBreaksBetween(getPrevious(), token);", "-\t\t\t\tif (index > WrapPreparator.this.importsStart && index < WrapPreparator.this.importsEnd) {", "-\t\t\t\t\tlineBreaks = lineBreaks > 1 ? (this.options2.blank_lines_between_import_groups + 1) : 0;", "-\t\t\t\t} else {", "-\t\t\t\t\tlineBreaks = Math.min(lineBreaks, this.options2.number_of_empty_lines_to_preserve + 1);", "-\t\t\t\t}", "+\t\t\t\tboolean isBetweenImports = index > WrapPreparator.this.importsStart && index < WrapPreparator.this.importsEnd;", "+\t\t\t\tint lineBreaks = getLineBreaksToPreserve(getPrevious(), token, isBetweenImports);", "-\t\t\t\tif (!this.options2.join_wrapped_lines && token.isWrappable() && lineBreaks == 1) {", "-\t\t\t\t\ttoken.breakBefore();", "+\t\t\t\tif (lineBreaks == 1) {", "+\t\t\t\t\tif ((!this.options2.join_wrapped_lines && token.isWrappable()) || index == 0)", "+\t\t\t\t\t\ttoken.breakBefore();", "-\t\t\t\t\tif (index == 0)", "-\t\t\t\t\t\tlineBreaks--;", "-\t\t\tprivate int getLineBreaksBetween(Token token1, Token token2) {", "-\t\t\t\tif (token1 != null) {", "-\t\t\t\t\tList<Token> structure1 = token1.getInternalStructure();", "-\t\t\t\t\tif (structure1 != null && !structure1.isEmpty())", "-\t\t\t\t\t\ttoken1 = structure1.get(structure1.size() - 1);", "-\t\t\t\t}", "-\t\t\t\tList<Token> structure2 = token2.getInternalStructure();", "-\t\t\t\tif (structure2 != null && !structure2.isEmpty())", "-\t\t\t\t\ttoken2 = structure2.get(0);", "-\t\t\t\tint lineBreaks = WrapPreparator.this.tm.countLineBreaksBetween(token1, token2);", "-\t\t\t\tif (token1 == null)", "-\t\t\t\t\tlineBreaks++;", "-\t\t\t\treturn lineBreaks;", "-\t\t\t}", "-\t\tint endingBreaks = this.tm.countLineBreaksBetween(last, null);", "-\t\tendingBreaks = Math.min(endingBreaks, this.options.number_of_empty_lines_to_preserve);", "+\t\tint endingBreaks = getLineBreaksToPreserve(last, null, false);"]}], "num": 5092}
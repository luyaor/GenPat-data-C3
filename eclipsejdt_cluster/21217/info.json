{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "398cf0b1e70975465a731b1ca0288c53", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6ccb27d2f5a08399790cca0430ffe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "6e3484e93dc48a09ac8c425df0144a313c14ab99", "commitAfterChange": "4258235f7bd226d0dfb8701ffe19643b12592deb", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "signatureAfterChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "diff": ["+\t}", "+\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue);", "+\t\t", "+\t\tImportBinding[] importBindings = scope.compilationUnitScope().imports;", "+\t\tfor (int i = 0; i < importBindings.length; i++) {", "+\t\t\tImportBinding importBinding = importBindings[i];", "+\t\t\tif(importBinding.isValidBinding() && importBinding.isStatic()) {", "+\t\t\t\tBinding binding = importBinding.resolvedImport;", "+\t\t\t\tif(binding != null && binding.isValidBinding()) {", "+\t\t\t\t\tif(importBinding.onDemand) {", "+\t\t\t\t\t\tif(binding.bindingType() == BindingIds.TYPE) {", "+\t\t\t\t\t\t\tfindFields(", "+\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\t\tlocalsFound,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (binding.bindingType() == BindingIds.FIELD) {", "+\t\t\t\t\t\t\t\tfindFields(", "+\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\tnew FieldBinding[]{(FieldBinding)binding},", "+\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\t\t\t\tlocalsFound,", "+\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\t((FieldBinding)binding).declaringClass,", "+\t\t\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88e80059ec588084006438be74e9d6e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void loadVariables() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\tpublic void loadVariables() throws CoreException {", "+\tpublic void loadVariablesAndContainers() throws CoreException {", "-\t\t// load variables from preferences into cache", "+\t\t// load variables and containers from preferences into cache", "-\t\tint prefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "+\t\tint variablePrefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "-\t\t\t\tString varName = propertyName.substring(prefixLength);", "+\t\t\t\tString varName = propertyName.substring(variablePrefixLength);", "+\t\t\t\tPreviousSessionVariables.put(varName, varPath);", "-\t\t}\t\t", "+\t\t\tif (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "+\t\t\t\trecreatePersistedContainer(propertyName, preferences.getString(propertyName).trim(), true/*add to previous session values*/);", "+\t\t\t}", "+\t\t}", "+\t\t}", "+\t\t// override persisted values for containers which have a registered initializer", "+\t\tString[] registeredContainerIDs = getRegisteredContainerIDs();", "+\t\tfor (int i = 0; i < registeredContainerIDs.length; i++) {", "+\t\t\tString containerID = registeredContainerIDs[i];", "+\t\t\tIterator projectIterator = Containers.keySet().iterator();", "+\t\t\twhile (projectIterator.hasNext()){", "+\t\t\t\tIJavaProject project = (IJavaProject)projectIterator.next();", "+\t\t\t\tMap projectContainers = (Map)Containers.get(project);", "+\t\t\t\tif (projectContainers != null){", "+\t\t\t\t\tIterator containerIterator = projectContainers.keySet().iterator();", "+\t\t\t\t\twhile (containerIterator.hasNext()){", "+\t\t\t\t\t\tIPath containerPath = (IPath)containerIterator.next();", "+\t\t\t\t\t\tif (containerPath.segment(0).equals(containerID)) { // registered container", "+\t\t\t\t\t\t\tprojectContainers.put(containerPath, null); // reset container value, but leave entry in Map", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 21217}
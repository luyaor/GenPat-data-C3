{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79d63b018fcc08a8a75b748bbcf4fefa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "844edf3358c0e2dfa723b8b83f18c3aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tIClasspathEntry[] classpath = this.newRawPath;\r", "+\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r", "+\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\tboolean allowNestingInOutput = false;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "+\t\t\tallowNestingInOutput = true;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "+\t\r", "+\t// check all entries\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tIClasspathEntry entry = classpath[i];\r", "+\t\tIPath entryPath = entry.getPath();\r", "+\r", "+\t\t// no further check if entry coincidates with project or output location\r", "+\t\tif (entryPath.equals(projectPath)) continue;\r", "+\t\tif (entryPath.equals(outputLocation)) continue;\r", "+\t\t\r", "+\t\t// prevent nesting source entries in each other\r", "+\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "+\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "+\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// prevent nesting output location inside entry\r", "+\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\r", "+\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "+\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\t}\r", "+\treturn JavaModelStatus.VERIFIED_OK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac8f6b7891aaf215108b49cb03666d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tIClasspathEntry[] classpath = this.newRawPath;\r", "+\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r", "+\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\tboolean allowNestingInOutput = false;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "+\t\t\tallowNestingInOutput = true;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "+\t\r", "+\t// check all entries\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tIClasspathEntry entry = classpath[i];\r", "+\t\tIPath entryPath = entry.getPath();\r", "+\r", "+\t\t// no further check if entry coincidates with project or output location\r", "+\t\tif (entryPath.equals(projectPath)) continue;\r", "+\t\tif (entryPath.equals(outputLocation)) continue;\r", "+\t\t\r", "+\t\t// prevent nesting source entries in each other\r", "+\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "+\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "+\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// prevent nesting output location inside entry\r", "+\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\r", "+\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "+\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\t}\r", "+\treturn JavaModelStatus.VERIFIED_OK;\r"]}], "num": 42387}
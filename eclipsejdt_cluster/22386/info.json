{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "801441cc86ce960dc981d67dc97d64a7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e59e49fa0a207806056a8330ddf894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public char[][][] collect() throws JavaModelException", "signatureAfterChange": " public char[][][] collect() throws JavaModelException", "diff": ["-\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\t} finally {", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\ttry {", "-\t\tfor (int i = 0, length = paths.length; i < length; i++) {", "-\t\t\ttry {", "-\t\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "-\t\t\t\tif (openable == null) continue; // outside classpath", "+\tfor (int i = 0, length = paths.length; i < length; i++) {", "+\t\ttry {", "+\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "+\t\t\tif (openable == null) continue; // outside classpath", "-\t\t\t\tIJavaProject project = openable.getJavaProject();", "-\t\t\t\tif (!project.equals(previousProject)) {", "-\t\t\t\t\tif (previousProject != null)", "-\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\t\t\t\t\tpreviousProject = (JavaProject) project;", "-\t\t\t\t\tthis.locator.initialize(previousProject, 0);", "-\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);", "-\t\t\t\t}", "-\t\t\t\tif (openable instanceof ICompilationUnit) {", "-\t\t\t\t\tICompilationUnit unit = (ICompilationUnit) openable;", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, true /*only toplevel and member types are visible to the focus type*/);", "-\t\t\t\t\tif (parsedUnit != null)", "-\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "-\t\t\t\t} else if (openable instanceof IClassFile) {", "-\t\t\t\t\tIClassFile classFile = (IClassFile) openable;", "-\t\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "-\t\t\t\t\tif (matches(binding))", "-\t\t\t\t\t\tcollectSuperTypeNames(binding);", "-\t\t\t\t}", "-\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t// ignore: continue with next element", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// ignore: continue with next element", "+\t\t\tIJavaProject project = openable.getJavaProject();", "+\t\t\tif (!project.equals(previousProject)) {", "+\t\t\t\tpreviousProject = (JavaProject) project;", "+\t\t\t\tthis.locator.initialize(previousProject, 0);", "+\t\t\tif (openable instanceof ICompilationUnit) {", "+\t\t\t\tICompilationUnit unit = (ICompilationUnit) openable;", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, true /*only toplevel and member types are visible to the focus type*/);", "+\t\t\t\tif (parsedUnit != null)", "+\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "+\t\t\t} else if (openable instanceof IClassFile) {", "+\t\t\t\tIClassFile classFile = (IClassFile) openable;", "+\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "+\t\t\t\tif (matches(binding))", "+\t\t\t\t\tcollectSuperTypeNames(binding);", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// ignore: continue with next element", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignore: continue with next element", "-\t} finally {", "-\t\tif (previousProject != null)", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c94e4871cbdaa245eef1ddbea9f498ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "commitAfterChange": "179d5d1c5c2a0bb83cd907094171a8fb72cf869e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r protected char[][][] collect() throws JavaModelException", "signatureAfterChange": "\r \r protected char[][][] collect() throws JavaModelException", "diff": ["+\t\t// Collect the paths of the cus that are in the hierarchy of the given type\r", "-\t\tthis.createParser((JavaProject)this.type.getJavaProject());\r", "+\t\tJavaProject javaProject = (JavaProject)this.type.getJavaProject();\r", "+\t\tthis.locator.createParser(javaProject);\r", "+\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);\r", "-\t\t\t\tif (unit.isWorkingCopy()) {\r", "-\t\t\t\t\tunit = (ICompilationUnit)unit.getOriginalElement();\r", "-\t\t\t\t}\r", "+\t\t} finally {\r", "+\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r", "-\t\t\tfor (int i = 0, length = paths.length; i < length; i++) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tOpenable openable = this.handleFactory.createOpenable(paths[i]);\r", "-\t\t\t\t\tif (openable == null)\r", "-\t\t\t\t\t\tcontinue; // outside classpath\r", "-\t\t\t\t\tIJavaProject project = openable.getJavaProject();\r", "-\t\t\t\t\tif (previousProject == null || !previousProject.equals(project)) {\r", "-\t\t\t\t\t\tpreviousProject = (JavaProject)project;\r", "-\t\t\t\t\t\tthis.createParser(previousProject);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (openable instanceof ICompilationUnit) {\r", "-\t\t\t\t\t\tICompilationUnit unit = (ICompilationUnit)openable;\r", "-\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "-\t\t\t\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "+\t\t\ttry {\r", "+\t\t\t\tfor (int i = 0, length = paths.length; i < length; i++) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i]);\r", "+\t\t\t\t\t\tif (openable == null)\r", "+\t\t\t\t\t\t\tcontinue; // outside classpath\r", "+\t\t\t\t\t\tIJavaProject project = openable.getJavaProject();\r", "+\t\t\t\t\t\tif (!project.equals(previousProject)) {\r", "+\t\t\t\t\t\t\tif (previousProject != null) {\r", "+\t\t\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tpreviousProject = (JavaProject)project;\r", "+\t\t\t\t\t\t\tthis.locator.createParser(previousProject);\r", "+\t\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);\r", "-\t\t\t\t\t} else if (openable instanceof IClassFile) {\r", "-\t\t\t\t\t\tIClassFile classFile = (IClassFile)openable;\r", "-\t\t\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(classFile.getType());\r", "-\t\t\t\t\t\tif (this.matches(binding)) {\r", "-\t\t\t\t\t\t\tthis.collectSuperTypeNames(binding);\r", "+\t\t\t\t\t\tif (openable instanceof ICompilationUnit) {\r", "+\t\t\t\t\t\t\tICompilationUnit unit = (ICompilationUnit)openable;\r", "+\t\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "+\t\t\t\t\t\t\tif (parsedUnit != null) {\r", "+\t\t\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else if (openable instanceof IClassFile) {\r", "+\t\t\t\t\t\t\tIClassFile classFile = (IClassFile)openable;\r", "+\t\t\t\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(classFile.getType());\r", "+\t\t\t\t\t\t\tif (this.matches(binding)) {\r", "+\t\t\t\t\t\t\t\tthis.collectSuperTypeNames(binding);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t\t\t// ignore: continue with next element\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t// ignore: continue with next element\r", "-\t\t\t\t} catch (AbortCompilation e) {\r", "-\t\t\t\t\t// ignore: continue with next element\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t// ignore: continue with next element\r", "+\t\t\t\t}\r", "+\t\t\t} finally {\r", "+\t\t\t\tif (previousProject != null) {\r", "+\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r"]}], "num": 22386}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ed7eb9d51fe8b8c3033895d3ebd88a2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e5e503a7fe5fccda887586f5a16994", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean resolvePart2(ResolutionState state)", "signatureAfterChange": " boolean resolvePart2(ResolutionState state)", "diff": ["-\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), state.argumentTypes, state.scope);", "+\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), this.argumentTypes, state.scope);", "-\tthis.binding = findConstructorBinding(state.scope, this, receiverType, state.argumentTypes);", "+\tthis.binding = findConstructorBinding(state.scope, this, receiverType, this.argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9372a2743c4ebdf4ad8acbae486abfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " TypeBinding resolvePart3(ResolutionState state)", "signatureAfterChange": " TypeBinding resolvePart3(ResolutionState state)", "diff": ["-\tif (checkInvocationArguments(state.scope, null, allocationType, this.binding, this.arguments, state.argumentTypes, state.argsContainCast, this)) {", "+\tif (checkInvocationArguments(state.scope, null, allocationType, this.binding, this.arguments, this.argumentTypes, state.argsContainCast, this)) {", "- \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), state.argumentTypes, state.scope);", "+ \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), this.argumentTypes, state.scope);"]}], "num": 31154}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fc2f4996b54052366c89595272d7096", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28375e6f8b3a892657b61e1175f0ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "b6b8c5d56c52da04a602fb9a065023d943b4e7a7", "commitAfterChange": "f8cf1cf93993a2a964d587ccb545506c0c4fdc0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "diff": ["-\t\tArgument[] arguments = constructorDeclaration.arguments;", "-\t\tif (arguments != null) {", "-\t\t\tint argumentLength = arguments.length;", "-\t\t\tfor (int i = 0; i < argumentLength; i++) {", "-\t\t\t\targuments[i].traverse(this, constructorDeclaration.scope);", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4dafa0921e26708d46b507ba31ae651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "b6b8c5d56c52da04a602fb9a065023d943b4e7a7", "commitAfterChange": "f8cf1cf93993a2a964d587ccb545506c0c4fdc0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope)", "diff": ["-", "-\t\tArgument[] arguments = methodDeclaration.arguments;", "-\t\tif (arguments != null) {", "-\t\t\tint argumentLength = arguments.length;", "-\t\t\tfor (int i = 0; i < argumentLength; i++) {", "-\t\t\t\targuments[i].traverse(this, methodDeclaration.scope);", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "+\t\treturn true;"]}], "num": 35819}
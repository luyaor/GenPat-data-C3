{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d6c121410ffd3e17bb6345b63f1fcff", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa0528757cb81869f7b7c07ba82a4845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "644c4d9043a8634631a6c37637807f9484dbb1d4", "commitAfterChange": "fff3d1bb7cd12822df70202db7e6a801aeeb63a2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "signatureAfterChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "diff": ["+\t\tboolean ownConstraints;", "+\t\t\townConstraints = true;", "+\t\t\townConstraints = false; // these are lifted from a nested poly expression.", "+\t\tif (ownConstraints) { // lifted constraints get validated at their own context.", "+\t\t\tfinal int length = this.initialConstraints.length;", "+\t\t\tSystem.arraycopy(this.initialConstraints, 0, this.finalConstraints = new ConstraintExpressionFormula[length], 0, length);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c693239070c516d537c2a220d783a790", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ReferenceCollection.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void addDependencies(String[] typeNameDependencies)", "signatureAfterChange": "  public void addDependencies(String[] typeNameDependencies)", "diff": ["+\t\t\t}", "+\t\t\tif (!insideRoot(qualifiedTypeName[0])) {", "+\t\t\t\tint length = this.rootReferences.length;", "+\t\t\t\tSystem.arraycopy(this.rootReferences, 0, this.rootReferences = new char[length + 1][], 0, length);", "+\t\t\t\tthis.rootReferences[length] = qualifiedTypeName[0];"]}], "num": 23627}
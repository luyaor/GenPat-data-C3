{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f3f965bda3303f9929ede6849c9b5b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38fcf29fe4baac946205c99477be3adf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tint[] sortedIndexes = new int[caseCount];", "-\t\t\tint[] localKeysCopy;", "-\t\t\tbreakLabel.initialize(codeStream);", "-\t\t\tCaseLabel[] caseLabels = new CaseLabel[caseCount];", "-\t\t\tint[] constants = new int[caseCount];", "-\t\t\tboolean needSwitch = caseCount != 0;", "+\t\t\tthis.breakLabel.initialize(codeStream);", "+\t\t\tCaseLabel[] caseLabels = new CaseLabel[this.caseCount];", "+\t\t\tboolean needSwitch = this.caseCount != 0;", "-\t\t\t\tconstants[i] = cases[i].constantExpression.constant.intValue();", "-\t", "-\t\t\t// we sort the keys to be able to generate the code for tableswitch or lookupswitch", "-\t\t\tfor (int i = 0; i < caseCount; i++) {", "-\t\t\t\tsortedIndexes[i] = i;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tconstants,", "-\t\t\t\t0,", "-\t\t\t\t(localKeysCopy = new int[caseCount]),", "-\t\t\t\t0,", "-\t\t\t\tcaseCount);", "-\t\t\tCodeStream.sort(localKeysCopy, 0, caseCount - 1, sortedIndexes);", "-\t", "-\t\t\t\tint max = localKeysCopy[caseCount - 1];", "+\t\t\t\tint[] sortedIndexes = new int[this.caseCount];", "+\t\t\t\t// we sort the keys to be able to generate the code for tableswitch or lookupswitch", "+\t\t\t\tfor (int i = 0; i < caseCount; i++) {", "+\t\t\t\t\tsortedIndexes[i] = i;", "+\t\t\t\t}", "+\t\t\t\tint[] localKeysCopy;", "+\t\t\t\tSystem.arraycopy(this.constants, 0, (localKeysCopy = new int[this.caseCount]), 0, this.caseCount);", "+\t\t\t\tCodeStream.sort(localKeysCopy, 0, this.caseCount - 1, sortedIndexes);", "+", "+\t\t\t\t// for enum constants, actually switch on constant ordinal()", "+\t\t\t\tif (this.expression.resolvedType.isEnum()) {", "+\t\t\t\t\tcodeStream.invokeEnumOrdinal(this.expression.resolvedType.constantPoolName());", "+\t\t\t\t}", "+\t\t\t\tint max = localKeysCopy[this.caseCount - 1];", "-\t\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, constants, sortedIndexes, caseLabels);", "+\t\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, this.constants, sortedIndexes, caseLabels);", "-\t\t\t\t\t\t\tconstants,", "+\t\t\t\t\t\t\tthis.constants,", "-\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, constants, sortedIndexes, caseLabels);", "+\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, this.constants, sortedIndexes, caseLabels);", "-\t\t\tif (statements != null) {", "-\t\t\t\tfor (int i = 0, maxCases = statements.length; i < maxCases; i++) {", "-\t\t\t\t\tStatement statement = statements[i];", "-\t\t\t\t\tif ((caseIndex < caseCount) && (statement == cases[caseIndex])) { // statements[i] is a case", "-\t\t\t\t\t\tthis.scope.switchCase = cases[caseIndex]; // record entering in a switch case block", "+\t\t\tif (this.statements != null) {", "+\t\t\t\tfor (int i = 0, maxCases = this.statements.length; i < maxCases; i++) {", "+\t\t\t\t\tStatement statement = this.statements[i];", "+\t\t\t\t\tif ((caseIndex < this.caseCount) && (statement == this.cases[caseIndex])) { // statements[i] is a case", "+\t\t\t\t\t\tthis.scope.switchCase = this.cases[caseIndex]; // record entering in a switch case block", "-\t\t\t\t\t\tif (statement == defaultCase) { // statements[i] is a case or a default case", "-\t\t\t\t\t\t\tthis.scope.switchCase = defaultCase; // record entering in a switch case block", "+\t\t\t\t\t\tif (statement == this.defaultCase) { // statements[i] is a case or a default case", "+\t\t\t\t\t\t\tthis.scope.switchCase = this.defaultCase; // record entering in a switch case block", "-\t\t\tbreakLabel.place();", "+\t\t\tthis.breakLabel.place();", "-\t\t\t\tcodeStream.exitUserScope(scope);", "+\t\t\t\tcodeStream.exitUserScope(this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e2a7ec468ff2dcc7b7ee0fd5a56983", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\treceiverType = receiver.resolveType(scope);", "-\tif (receiverType == null){", "-\t\tconstant = NotAConstant;", "+\tthis.receiverType = this.receiver.resolveType(scope);", "+\tif (this.receiverType == null){", "+\t\tthis.constant = NotAConstant;", "-\tthis.codegenBinding = this.binding = scope.getField(receiverType, token, this);", "-\tFieldBinding firstAttempt = binding;", "+\tthis.codegenBinding = this.binding = scope.getField(this.receiverType, this.token, this);", "+\tFieldBinding firstAttempt = this.binding;", "-\tif (!binding.isValidBinding()) {", "-\t\tif (binding instanceof ProblemFieldBinding", "-\t\t\t&& ((ProblemFieldBinding) binding).problemId() == NotVisible) {", "+\tif (!this.binding.isValidBinding()) {", "+\t\tif (this.binding instanceof ProblemFieldBinding", "+\t\t\t&& ((ProblemFieldBinding) this.binding).problemId() == NotVisible) {", "-\t\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "-\t\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "+\t\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, token, this);", "+\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.token, this);", "-\tif (!binding.isValidBinding()) {", "-\t\tconstant = NotAConstant;", "+\tif (!this.binding.isValidBinding()) {", "+\t\tthis.constant = NotAConstant;", "-\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "-\t\tscope.problemReporter().deprecatedField(binding, this);", "+\tif (isFieldUseDeprecated(this.binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "+\t\tscope.problemReporter().deprecatedField(this.binding, this);", "-\tconstant = FieldReference.getConstantFor(binding, this, receiver.isImplicitThis(), scope);", "-\tif (!receiver.isThis()) {", "-\t\tconstant = NotAConstant;", "+\tthis.constant = FieldReference.getConstantFor(this.binding, this, this.receiver.isImplicitThis(), scope);", "+\tif (!this.receiver.isThis()) {", "+\t\tthis.constant = NotAConstant;", "-\treturn this.resolvedType = binding.type;", "+\treturn this.resolvedType = this.binding.type;"]}], "num": 34191}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d197e5274ab61d77e822148ee7230c9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6634deb9c0cedfee78df6f2d9526885d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "diff": ["-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\t\tint lastPosition = 0;", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\torg.eclipse.jdt.internal.compiler.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.compiler.util.SimpleSet(itsInterfaces.length * 2);", "+\t\t\tReferenceBinding[] interfacesToVisit = itsInterfaces;", "+\t\t\tint nextPosition = interfacesToVisit.length;", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding currentType = interfacesToVisit[i];", "+\t\t\t\tMethodBinding[] methods = currentType.getMethods(methodBinding.selector);", "+\t\t\t\tif(methods != null) {", "+\t\t\t\t\tfor (int k = 0; k < methods.length; k++) {", "+\t\t\t\t\t\tif(methodBinding.areParametersEqual(methods[k]))", "+\t\t\t\t\t\t\treturn methods[k];", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tReferenceBinding currentType = interfaces[j];", "-", "-\t\t\t\t\tif (!interfacesSeen.includes(currentType)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(currentType);", "-", "-\t\t\t\t\t\tMethodBinding[] methods = currentType.getMethods(methodBinding.selector);", "-\t\t\t\t\t\tif(methods != null) {", "-\t\t\t\t\t\t\tfor (int k = 0; k < methods.length; k++) {", "-\t\t\t\t\t\t\t\tif(methodBinding.areParametersEqual(methods[k])) {", "-\t\t\t\t\t\t\t\t\treturn methods[k];", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t}", "+\t\t\t\tif ((itsInterfaces = currentType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92de63abe45843040bd16d184c50b0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  private void addDefaultAbstractMethods()", "signatureAfterChange": "  private void addDefaultAbstractMethods()", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\tint lastPosition = 0;", "-\t\tinterfacesToVisit[lastPosition] = superInterfaces();", "-\t\tMethodBinding[] defaultAbstracts = null;", "-\t\tint defaultAbstractsCount = 0;", "-\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\tReferenceBinding superType = interfaces[j];", "+\t\tReferenceBinding[] itsInterfaces = superInterfaces();", "+\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\tMethodBinding[] defaultAbstracts = null;", "+\t\t\tint defaultAbstractsCount = 0;", "+\t\t\tReferenceBinding[] interfacesToVisit = itsInterfaces;", "+\t\t\tint nextPosition = interfacesToVisit.length;", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding superType = interfacesToVisit[i];", "-\t\t\t\t\t\tif (implementsMethod(method)) {", "+\t\t\t\t\t\tif (implementsMethod(method))", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tfor(int k = 0; k < defaultAbstractsCount; k++) {", "-\t\t\t\t\t\t\t\tMethodBinding alreadyAddedMethod = \tdefaultAbstracts[k];", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(alreadyAddedMethod.selector, method.selector)", "-\t\t\t\t\t\t\t\t\t\t&& alreadyAddedMethod.areParametersEqual(method)) {", "+\t\t\t\t\t\t\tfor (int k = 0; k < defaultAbstractsCount; k++) {", "+\t\t\t\t\t\t\t\tMethodBinding alreadyAdded = defaultAbstracts[k];", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(alreadyAdded.selector, method.selector) && alreadyAdded.areParametersEqual(method))", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (defaultAbstractsCount == defaultAbstracts.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, defaultAbstracts = new MethodBinding[2*defaultAbstractsCount], 0, defaultAbstractsCount);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (defaultAbstractsCount == defaultAbstracts.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, defaultAbstracts = new MethodBinding[2 * defaultAbstractsCount], 0, defaultAbstractsCount);", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();", "-\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t\t}", "-\t\t}", "-\t\tif (defaultAbstractsCount > 0) {", "-\t\t\tint length = this.methods.length;", "-\t\t\tSystem.arraycopy(this.methods, 0, this.methods = new MethodBinding[length+defaultAbstractsCount], 0, length);", "-\t\t\tSystem.arraycopy(defaultAbstracts, 0, this.methods, length, defaultAbstractsCount);", "-\t\t\t// re-sort methods", "-\t\t\tlength = length+defaultAbstractsCount;", "-\t\t\tif (length > 1) {", "-\t\t\t\tReferenceBinding.sortMethods(this.methods, 0, length);", "+\t\t\tif (defaultAbstractsCount > 0) {", "+\t\t\t\tint length = this.methods.length;", "+\t\t\t\tSystem.arraycopy(this.methods, 0, this.methods = new MethodBinding[length + defaultAbstractsCount], 0, length);", "+\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, this.methods, length, defaultAbstractsCount);", "+\t\t\t\t// re-sort methods", "+\t\t\t\tlength = length + defaultAbstractsCount;", "+\t\t\t\tif (length > 1)", "+\t\t\t\t\tReferenceBinding.sortMethods(this.methods, 0, length);", "+\t\t\t\t// this.tagBits |= TagBits.AreMethodsSorted; -- already set in #methods()", "-\t\t\t// this.tagBits |= TagBits.AreMethodsSorted; -- already set in #methods()"]}], "num": 50211}
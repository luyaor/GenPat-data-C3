{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95aa383451113936bda4f59bc90f4690", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f371d78d87ce9f89743bf9c1290d76e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["+\t\t\t\tReferenceBinding[] mostSpecificExceptions = null;", "+\t\t\t\tSimpleSet possibleMethods = null;", "-\t\t\t\t\t\tif (original2 == null || !original.areParameterErasuresEqual(original2) || !original.returnType.isCompatibleWith(original2.returnType)) // 15.2.2", "+\t\t\t\t\t\tif (original2 == null || !original.areParameterErasuresEqual(original2))", "+\t\t\t\t\t\tif (!original.returnType.isCompatibleWith(original2.returnType)) // 15.12.2", "+\t\t\t\t\t\t\tcontinue nextSpecific; // choose original2 instead", "+\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "+\t\t\t\t\t\t\tif (mostSpecificExceptions == null)", "+\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "+\t\t\t\t\t\t\tif (possibleMethods == null)", "+\t\t\t\t\t\t\t\tpossibleMethods = new SimpleSet(3);", "+\t\t\t\t\t\t\tint mostSpecificLength = mostSpecificExceptions.length;", "+\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "+\t\t\t\t\t\t\tSimpleSet temp = new SimpleSet(mostSpecificLength);", "+\t\t\t\t\t\t\tnextException : for (int t = 0; t < mostSpecificLength; t++) {", "+\t\t\t\t\t\t\t\tReferenceBinding exception = mostSpecificExceptions[t];", "+\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "+\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "+\t\t\t\t\t\t\t\t\t\tpossibleMethods.add(current);", "+\t\t\t\t\t\t\t\t\t\ttemp.add(exception);", "+\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "+\t\t\t\t\t\t\t\t\t\tpossibleMethods.add(next);", "+\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "+\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tmostSpecificExceptions = temp.elementSize == 0 ? Binding.NO_EXCEPTIONS : new ReferenceBinding[temp.elementSize];", "+\t\t\t\t\t\t\ttemp.asArray(mostSpecificExceptions);", "+\t\t\t\t\t\t}", "+\t\t\t\tif (mostSpecificExceptions != null) {", "+\t\t\t\t\tObject[] values = possibleMethods.values;", "+\t\t\t\t\tint exceptionLength = mostSpecificExceptions.length;", "+\t\t\t\t\tnextMethod : for (int p = 0, vLength = values.length; p < vLength; p++) {", "+\t\t\t\t\t\tMethodBinding possible = (MethodBinding) values[p];", "+\t\t\t\t\t\tif (possible == null) continue nextMethod;", "+\t\t\t\t\t\tReferenceBinding[] itsExceptions = possible.thrownExceptions;", "+\t\t\t\t\t\tif (itsExceptions.length == exceptionLength) {", "+\t\t\t\t\t\t\tnextException : for (int e = 0; e < exceptionLength; e++) {", "+\t\t\t\t\t\t\t\tReferenceBinding exception = itsExceptions[e];", "+\t\t\t\t\t\t\t\tfor (int f = 0; f < exceptionLength; f++)", "+\t\t\t\t\t\t\t\t\tif (exception == mostSpecificExceptions[f]) continue nextException;", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn possible;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+// do not return a new methodBinding until we know that it does not cause problems", "+//\t\t\t\t\treturn new MethodBinding(", "+//\t\t\t\t\t\tcurrent.modifiers,", "+//\t\t\t\t\t\tcurrent.selector,", "+//\t\t\t\t\t\tcurrent.returnType,", "+//\t\t\t\t\t\tcurrent.parameters,", "+//\t\t\t\t\t\tmostSpecificExceptions,", "+//\t\t\t\t\t\tcurrent.declaringClass", "+//\t\t\t\t\t);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b564afdadd4f3272fd690e79c52b015f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4b7408bf1768e4fe08faa711e23ea5c6fe36d225", "commitAfterChange": "4088e11dac262e43550a58fc93a14d090417ec2f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\tSimpleSet possibleMethods = null;", "+\t\t\t\tboolean shouldIntersectExceptions = original.declaringClass.isInterface() && original.thrownExceptions != Binding.NO_EXCEPTIONS; // only needed when selecting from interface methods", "-\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "-\t\t\t\t\t\t\tif (mostSpecificExceptions == null)", "-\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "-\t\t\t\t\t\t\tif (possibleMethods == null)", "-\t\t\t\t\t\t\t\tpossibleMethods = new SimpleSet(3);", "-\t\t\t\t\t\t\tint mostSpecificLength = mostSpecificExceptions.length;", "-\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "-\t\t\t\t\t\t\tSimpleSet temp = new SimpleSet(mostSpecificLength);", "-\t\t\t\t\t\t\tnextException : for (int t = 0; t < mostSpecificLength; t++) {", "-\t\t\t\t\t\t\t\tReferenceBinding exception = mostSpecificExceptions[t];", "-\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "-\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "-\t\t\t\t\t\t\t\t\t\tpossibleMethods.add(current);", "-\t\t\t\t\t\t\t\t\t\ttemp.add(exception);", "-\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "-\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "-\t\t\t\t\t\t\t\t\t\tpossibleMethods.add(next);", "-\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "-\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\tif (shouldIntersectExceptions && original2.declaringClass.isInterface()) {", "+\t\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "+\t\t\t\t\t\t\t\tif (original2.thrownExceptions == Binding.NO_EXCEPTIONS) {", "+\t\t\t\t\t\t\t\t\tmostSpecificExceptions = Binding.NO_EXCEPTIONS;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (mostSpecificExceptions == null) {", "+\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tint mostSpecificLength = mostSpecificExceptions.length;", "+\t\t\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "+\t\t\t\t\t\t\t\t\tSimpleSet temp = new SimpleSet(mostSpecificLength);", "+\t\t\t\t\t\t\t\t\tboolean changed = false;", "+\t\t\t\t\t\t\t\t\tnextException : for (int t = 0; t < mostSpecificLength; t++) {", "+\t\t\t\t\t\t\t\t\t\tReferenceBinding exception = mostSpecificExceptions[t];", "+\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "+\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(exception);", "+\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "+\t\t\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (changed) {", "+\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = temp.elementSize == 0 ? Binding.NO_EXCEPTIONS : new ReferenceBinding[temp.elementSize];", "+\t\t\t\t\t\t\t\t\t\ttemp.asArray(mostSpecificExceptions);", "-\t\t\t\t\t\t\tmostSpecificExceptions = temp.elementSize == 0 ? Binding.NO_EXCEPTIONS : new ReferenceBinding[temp.elementSize];", "-\t\t\t\t\t\t\ttemp.asArray(mostSpecificExceptions);", "-\t\t\t\tif (mostSpecificExceptions != null) {", "-\t\t\t\t\tObject[] values = possibleMethods.values;", "-\t\t\t\t\tint exceptionLength = mostSpecificExceptions.length;", "-\t\t\t\t\tnextMethod : for (int p = 0, vLength = values.length; p < vLength; p++) {", "-\t\t\t\t\t\tMethodBinding possible = (MethodBinding) values[p];", "-\t\t\t\t\t\tif (possible == null) continue nextMethod;", "-\t\t\t\t\t\tReferenceBinding[] itsExceptions = possible.thrownExceptions;", "-\t\t\t\t\t\tif (itsExceptions.length == exceptionLength) {", "-\t\t\t\t\t\t\tnextException : for (int e = 0; e < exceptionLength; e++) {", "-\t\t\t\t\t\t\t\tReferenceBinding exception = itsExceptions[e];", "-\t\t\t\t\t\t\t\tfor (int f = 0; f < exceptionLength; f++)", "-\t\t\t\t\t\t\t\t\tif (exception == mostSpecificExceptions[f]) continue nextException;", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn possible;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new MethodBinding(", "-\t\t\t\t\t\tcurrent.modifiers | ClassFileConstants.AccSynthetic,", "-\t\t\t\t\t\tcurrent.selector,", "-\t\t\t\t\t\tcurrent.returnType,", "-\t\t\t\t\t\tcurrent.parameters,", "-\t\t\t\t\t\tmostSpecificExceptions,", "-\t\t\t\t\t\tcurrent.declaringClass", "-\t\t\t\t\t);", "+\t\t\t\tif (mostSpecificExceptions != null && mostSpecificExceptions != current.thrownExceptions) {", "+\t\t\t\t\treturn new MostSpecificExceptionMethodBinding(current, mostSpecificExceptions);"]}], "num": 57373}
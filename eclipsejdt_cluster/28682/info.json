{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55ff0d035f4c5de17180b9445252896f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f97a22baeb185e732d8a7bd31801df7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "4371b6d8f370e30de814aa3f488aa7fff3acceb1", "commitAfterChange": "653406a482474edc2d8737f13239902108d47273", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["-\t\tthis.annotation.matchPatternLocator(this.patternLocator, this.nodeSet);", "+\t\t// Search for pattern locator matches in annotation @throws/@exception tags", "+\t\tTypeReference[] thrownExceptions = this.annotation.thrownExceptions;", "+\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "+\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t}", "+", "+\t\t// Search for pattern locator matches in annotation @see tags", "+\t\tExpression[] references = this.annotation.references;", "+\t\tint seeTagsNbre = references == null ? 0 : references.length;", "+\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "+\t\t\tExpression reference = references[i];", "+\t\t\tif (reference instanceof TypeReference) {", "+\t\t\t\tTypeReference typeRef = (TypeReference) reference;", "+\t\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t\t} else if (reference instanceof AnnotationFieldReference) {", "+\t\t\t\tAnnotationFieldReference fieldRef = (AnnotationFieldReference) reference;", "+\t\t\t\tpatternLocator.match(fieldRef, nodeSet);", "+\t\t\t} else if (reference instanceof AnnotationMessageSend) {", "+\t\t\t\tAnnotationMessageSend messageSend = (AnnotationMessageSend) reference;", "+\t\t\t\tpatternLocator.match(messageSend, nodeSet);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3aafb2ce30fb09111bf5f995fa1e1d82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected SearchableEnvironment getSearchableEnvironment()", "signatureAfterChange": " \tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots, IJavaProject project)", "diff": ["-\tprotected SearchableEnvironment getSearchableEnvironment() {", "+\tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots, IJavaProject project) {", "-\t\treturn fSearchableEnvironment;", "+\t\t// The following code assumes that all the roots have the given project as their parent", "+\t\tArrayList frags = new ArrayList();", "+\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\ttry {", "+\t\t\t\tIJavaElement[] pkgs = root.getChildren();", "+", "+\t\t\t\t/* 2 jar package fragment roots can be equals but not belonging ", "+\t\t\t\t   to the same project. As a result, they share the same element info.", "+\t\t\t\t   So this jar package fragment root could get the children of", "+\t\t\t\t   another jar package fragment root.", "+\t\t\t\t   The following code ensures that the children of this jar package", "+\t\t\t\t   fragment root have the given project as a great parent.", "+\t\t\t\t */", "+\t\t\t\tint length = pkgs.length;", "+\t\t\t\tif (length == 0) continue;", "+\t\t\t\tif (pkgs[0].getParent().getParent().equals(project)) {", "+\t\t\t\t\t// the children have the right parent, simply add them to the list", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\tfrags.add(pkgs[j]);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// create a new handle with the root as the parent", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\tfrags.add(root.getPackageFragment(pkgs[j].getElementName()));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// do nothing", "+\t\t\t}", "+\t\t}", "+\t\tIPackageFragment[] fragments = new IPackageFragment[frags.size()];", "+\t\tfrags.toArray(fragments);", "+\t\treturn fragments;"]}], "num": 28682}
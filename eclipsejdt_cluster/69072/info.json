{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6255c8db4bab2bf04f178373eb130bdf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4309f148379dbb72b2312bd32ee4869", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "29c65069abca990726d318e0e51a77345e02d507", "commitAfterChange": "abe74916372d719b72419b47087d6b9f61b3cd7b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic boolean isCastCompatible(ITypeBinding type)", "signatureAfterChange": " \tpublic boolean isCastCompatible(ITypeBinding type)", "diff": ["-\t\t\tExpression expression = new Expression() {", "-\t\t\t\tpublic StringBuffer printExpression(int indent,StringBuffer output) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\treturn expression.checkCastTypesCompatibility(scope, this.binding, expressionType, null);", "+\t\t\treturn TypeBinding.EXPRESSION.checkCastTypesCompatibility(scope, this.binding, expressionType, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb5a3a341c369b7780c11dab93d95c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "2f01b11ddccde1574bacaa5c4fb6f14efe163596", "commitAfterChange": "0e681f80efbcd55630ac88e7932322f24f43cac4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["+\t\t\tTypeBinding bound = ((WildcardBinding)expressionType).bound;", "+\t\t\tif (bound == null) bound = scope.getJavaLangObject();", "-\t\t\treturn checkCastTypesCompatibility(scope, castType, ((WildcardBinding)expressionType).bound, expression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType, bound, expression);"]}], "num": 69072}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec3c5502003304cad35c66ba7bea2b5d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c430b78bb0a58b2907b7ba2c5d7f18a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "9d28ff91378f9bfbe6756ae0331a10fbb52d3dba", "commitAfterChange": "9474d2cdea35a8b31f8fe2828fe199dbf7f1cf71", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "signatureAfterChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "diff": ["-\tdebug(unit, \"BEFORE\"); //$NON-NLS-1$", "+\tchar[] initialSource = unit.getSource().toCharArray();", "+\tint[] positions = null;", "-\t\tchar[] initialSource = unit.getSource().toCharArray();", "-\t\tint[] positions = new int[initialSource.length];", "+\t\tpositions = new int[initialSource.length];", "-\t\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, new int[][] { positions }, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "-\t\tString sortedSource = unit.getBuffer().getContents();", "-\t\tassertEquals(\"Different output\", sortedSource, expectedResult); //$NON-NLS-1$", "+\t}", "+\tIJavaElement element = unit.getWorkingCopy();", "+\tCompilationUnitSorter.sort(new IJavaElement[] { element }, new int[][] { positions }, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "+\tString sortedSource = ((ICompilationUnit) element).getBuffer().getContents();", "+\tassertEquals(\"Different output\", sortedSource, expectedResult); //$NON-NLS-1$", "+\tif (testPositions) {", "-\t} else {", "-\t\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, null, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "-\t\tString sortedSource = unit.getBuffer().getContents();", "-\t\tif (expectedResult == null || expectedResult.length() == 0) {", "-\t\t\tSystem.out.println(sortedSource);", "-\t\t} else {", "-\t\t\tassertEquals(\"Different output\", sortedSource, expectedResult); //$NON-NLS-1$", "-\t\t}", "-\tdebug(unit, \"AFTER\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb50ae07f3819d0719acd44e311ce8d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "272d89e2710b1b25c157dda1019ac9d84fa9215b", "commitAfterChange": "2089a9f5184bf5fb7d1ec0ff5a609f7c5f00e85f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void sortUnit(ICompilationUnit unit, String expectedResult) throws CoreException", "signatureAfterChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "diff": ["-\tdebug(unit, \"BEFORE\");", "-\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, null, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "-\tString sortedSource = unit.getBuffer().getContents();", "-\tassertEquals(\"Different output\", sortedSource, expectedResult);", "-\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, null, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "-\tString sortedSource2 = unit.getBuffer().getContents();", "-\tdebug(unit, \"AFTER\");", "-\tassertEquals(\"Different output\", sortedSource, sortedSource2);", "+", "+private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException {", "+\tdebug(unit, \"BEFORE\");", "+\tif (testPositions) {", "+\t\tchar[] initialSource = unit.getSource().toCharArray();", "+\t\tint[] positions = new int[initialSource.length];", "+\t\tfor (int i = 0; i < initialSource.length; i++) {", "+\t\t\tpositions[i] = i;", "+\t\t}", "+\t\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, new int[][] { positions }, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "+\t\tString sortedSource = unit.getBuffer().getContents();", "+\t\tassertEquals(\"Different output\", sortedSource, expectedResult);", "+\t\tfor (int i = 0, max = positions.length; i < max; i++) {", "+\t\t\tassertEquals(\"wrong mapped positions at \" + i + \" <-> \" + positions[i], initialSource[i], expectedResult.charAt(positions[i]));", "+\t\t}", "+\t} else {", "+\t\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, null, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "+\t\tString sortedSource = unit.getBuffer().getContents();", "+\t\tif (expectedResult == null || expectedResult.length() == 0) {", "+\t\t\tSystem.out.println(sortedSource);", "+\t\t} else {", "+\t\t\tassertEquals(\"Different output\", sortedSource, expectedResult);", "+\t\t}", "+\t}", "+\tdebug(unit, \"AFTER\");", "+}"]}], "num": 33558}
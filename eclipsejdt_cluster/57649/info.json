{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41d0515300083842cf5508a4d1b402a3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0136515ceee177fe63e23d0058330500", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 279, "signatureBeforeChange": " \tpublic void test0275()", "signatureAfterChange": " \tpublic void test0275()", "diff": ["-\t\t\t\"Type safety: The return type List for useList(List) from the type Y needs unchecked conversion to conform to List<String> from the type X\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type List for useList(List) from the type Y needs unchecked conversion to conform to List<String> from the type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e2c849deac66de074bd66c44969c89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "77be59ea5d67230fd212d874b96aeadaa71fd38c", "commitAfterChange": "496ec362de1eac6b25f53a35b2409254a0390a5f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void testDeleteJarFile2() throws CoreException", "signatureAfterChange": " public void testDeleteJarFile2() throws CoreException", "diff": ["-\t\t\t\"\t/P1/myLib.jar[-]: {}\\n\" + ", "+\t\t\t\"\tmyLib.jar[-]: {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03405c572f83fb12b2b290e0bde9bcb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["-\t\t\t+ (this.annotations == null ? 0 : this.annotations.listSize())", "-\t\t\t+ (this.componentType == null ? 0 : getComponentType().treeSize());", "+\t\t\t+ (this.componentType == null ? 0 : getComponentType().treeSize())", "+\t\t\t+ (this.annotations == null ? 0 : this.annotations.listSize());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03934a1373a289063aef06a2425eec29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testRemoveAddBinaryProject() throws CoreException", "signatureAfterChange": " public void testRemoveAddBinaryProject() throws CoreException", "diff": ["-\t\t\t\"\tlib.jar[-]: {}\\n\" + ", "+\t\t\t\"\tlib.jar[-]: {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f3daf4d469c21792da79a1929561d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "066f1fe71d5d139e5a681c9aeece89fa867b71b7", "commitAfterChange": "39951c3ce9f26380d44e65dd4f0a9c708c89c0d1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testGeneric02() throws JavaModelException", "signatureAfterChange": " public void testGeneric02() throws JavaModelException", "diff": ["-\t\t\"  List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "082e2907ca1da8660251f95d60dafa3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "commitAfterChange": "a8944173670c6319cce2438add6b3e87f478a46c", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "\r \tpublic void test0385137a()", "signatureAfterChange": "\r \tpublic void test0385137a()", "diff": ["-\t\t\t\t\t\"Type annotations are not allowed on type names used to access static members\\n\" + \r", "+\t\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "-\t\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "+\t\t\t\t\t\"Type annotations are not allowed on type names used to access static members\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08e50594b49fa489ab1ca7e15803dbdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": "\t\t \tpublic void test0168()", "signatureAfterChange": "\t\t \tpublic void test0168()", "diff": ["-\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<AX<T,T>,U>\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E,F> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E,F> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<AX<T,T>,U>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0808531b05cd85aeef1b82407d579e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 774, "methodNumberAfterChange": 774, "signatureBeforeChange": " public void test0768()", "signatureAfterChange": " public void test0768()", "diff": ["-\t\t\"The interface Y cannot be implemented more than once with different arguments: Y<Object> and Y<String>\\n\" + ", "+\t\t\"Cannot specify any additional bound Z when first bound is a type parameter\\n\" + ", "-\t\t\"Cannot specify any additional bound Z when first bound is a type parameter\\n\" + ", "+\t\t\"The interface Y cannot be implemented more than once with different arguments: Y<Object> and Y<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1651e7633c730904dabc80b5d8fe80b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "190188d8e56525352714e596e49e28ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "cce2d6d618061573d93fe3727b43bb448d464465", "commitAfterChange": "5ce69656376089b35c869f4300bbd8586809b01f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test001() throws CoreException", "signatureAfterChange": " public void test001() throws CoreException", "diff": ["-\t\t\t\"\tclass D {\\n\" +", "+\t\t\t\"\tstatic class D {\\n\" +", "-\t\tString expectedResult = \"/**\\n\" +\r\t\t\t\" *\\n\" +\r\t\t\t\" */\\n\" +\r\t\t\t\"package p;\\n\" +\r\t\t\t\"public class X {\\n\" +\r\t\t\t\"\t\\n\" +\r\t\t\t\"\tclass D {\\n\" +\r\t\t\t\"\t\tString toString() {\\n\" +\r\t\t\t\"\t\t\treturn \\\"HELLO\\\";\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\t// start of static field declaration\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\tstatic int i, j = 3, /*     */ k = 4;// end of static field declaration\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\tObject b1 = null, a1 = new Object() {\\n\" +\r\t\t\t\"\t\tvoid bar() {\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tvoid bar2() {\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tvoid bar3() {\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tvoid bar4() {\\n\" +\r\t\t\t\"\t\t\tSystem.out.println();\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}, c1 = null; // end of multiple field declaration\\n\" +\r\t\t\t\"\tvoid bar() {\\n\" +\r\t\t\t\"\t\t\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\t\tclass E {\\n\" +\r\t\t\t\"\t\t\tvoid bar2() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar7() {\\n\" +\r\t\t\t\"\t\t\t\tSystem.out.println();\\n\" +\r\t\t\t\"\t\t\t}\\n\" +\r\t\t\t\"\t\t\tvoid bar9() {}\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tObject o = new E();\\n\" +\r\t\t\t\"\t\tSystem.out.println(o);\\n\" +\r\t\t\t\"\t\tclass C {\\n\" +\r\t\t\t\"\t\t\tvoid bar4() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar5() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar6() {}\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\tvoid bar(int i) {\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\t// end of class X\\n\" +\r\t\t\t\"}\\n\" +\r\t\t\t\"// end of compilation unit\\n\";", "+\t\tString expectedResult = \"/**\\n\" +\r\t\t\t\" *\\n\" +\r\t\t\t\" */\\n\" +\r\t\t\t\"package p;\\n\" +\r\t\t\t\"public class X {\\n\" +\r\t\t\t\"\t\\n\" +\r\t\t\t\"\tstatic class D {\\n\" +\r\t\t\t\"\t\tString toString() {\\n\" +\r\t\t\t\"\t\t\treturn \\\"HELLO\\\";\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\t// start of static field declaration\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\tstatic int i, j = 3, /*     */ k = 4;// end of static field declaration\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\tObject b1 = null, a1 = new Object() {\\n\" +\r\t\t\t\"\t\tvoid bar() {\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tvoid bar2() {\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tvoid bar3() {\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tvoid bar4() {\\n\" +\r\t\t\t\"\t\t\tSystem.out.println();\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}, c1 = null; // end of multiple field declaration\\n\" +\r\t\t\t\"\tvoid bar() {\\n\" +\r\t\t\t\"\t\t\\n\" +\r\t\t\t\"\\n\" +\r\t\t\t\"\t\tclass E {\\n\" +\r\t\t\t\"\t\t\tvoid bar2() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar7() {\\n\" +\r\t\t\t\"\t\t\t\tSystem.out.println();\\n\" +\r\t\t\t\"\t\t\t}\\n\" +\r\t\t\t\"\t\t\tvoid bar9() {}\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t\tObject o = new E();\\n\" +\r\t\t\t\"\t\tSystem.out.println(o);\\n\" +\r\t\t\t\"\t\tclass C {\\n\" +\r\t\t\t\"\t\t\tvoid bar4() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar5() {}\\n\" +\r\t\t\t\"\t\t\tvoid bar6() {}\\n\" +\r\t\t\t\"\t\t}\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\tvoid bar(int i) {\\n\" +\r\t\t\t\"\t}\\n\" +\r\t\t\t\"\t// end of class X\\n\" +\r\t\t\t\"}\\n\" +\r\t\t\t\"// end of compilation unit\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23b3ae0d82c75c206a40388c15bf71aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43376e039f3b408b15eaff059a7746b22171766c", "commitAfterChange": "6ce150229a43c564ac0ba19e83d7a18e9ed0cfed", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void testCompletionKeywordSuper6() throws JavaModelException", "signatureAfterChange": " public void testCompletionKeywordSuper6() throws JavaModelException", "diff": ["-\t\t\t\"super[METHOD_REF<CONSTRUCTOR>]{super(), Ljava.lang.Object;, ()V, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"super[KEYWORD]{super, null, null, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\t\"super[KEYWORD]{super, null, null, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"super[METHOD_REF<CONSTRUCTOR>]{super(), Ljava.lang.Object;, ()V, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2877736b4eb954211e6030c7a77cd31d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchScopeTests.java", "commitBeforeChange": "8457dc17f56c4fff3fa2589438e210393d270f41", "commitAfterChange": "60249e9dd075ec142e7f7240fcef068b0fddb812", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testApplicationLibrairiesNonExistingJarAndClassFolder() throws CoreException", "signatureAfterChange": " public void testApplicationLibrairiesNonExistingJarAndClassFolder() throws CoreException", "diff": ["-\t\t\t\"\t/P/internal.jar\\n\" + ", "+\t\t\t\"\t/P/internal.jar\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29896420f1214d2fda0a52efa6b9bb1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void testNestedRootParentMove() throws CoreException", "signatureAfterChange": " public void testNestedRootParentMove() throws CoreException", "diff": ["-\t\t\t\"\tnested/src[-]: {MOVED_TO(nested2/src [in P])}\\n\" + ", "+\t\t\t\"\tnested/src[-]: {MOVED_TO(nested2/src [in P])}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c28294a07e910772e96bd9c23b50ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 849, "methodNumberAfterChange": 849, "signatureBeforeChange": " public void test0843()", "signatureAfterChange": " public void test0843()", "diff": ["-\t\t\"Unnecessary cast from List<Object&Serializable&CharSequence> to List<? extends String>\\n\" + ", "+\t\t\"Type safety: The cast from List<Object&Serializable&CharSequence> to List<? extends String> is actually checking against the erased type List\\n\" + ", "-\t\t\"Type safety: The cast from List<Object&Serializable&CharSequence> to List<? extends String> is actually checking against the erased type List\\n\" + ", "+\t\t\"Unnecessary cast from List<Object&Serializable&CharSequence> to List<? extends String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf43c06985bc3e36f8b29e1df52ceba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43376e039f3b408b15eaff059a7746b22171766c", "commitAfterChange": "6ce150229a43c564ac0ba19e83d7a18e9ed0cfed", "methodNumberBeforeChange": 351, "methodNumberAfterChange": 351, "signatureBeforeChange": " public void testCompletionKeywordSuper12() throws JavaModelException", "signatureAfterChange": " public void testCompletionKeywordSuper12() throws JavaModelException", "diff": ["-\t\t\t\"super[METHOD_REF<CONSTRUCTOR>]{super(), Ljava.lang.Object;, ()V, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"super[KEYWORD]{super, null, null, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\t\"super[KEYWORD]{super, null, null, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"super[METHOD_REF<CONSTRUCTOR>]{super(), Ljava.lang.Object;, ()V, super, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30cff96e36f87347933265e5541b2bd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testRenamePF() throws CoreException", "signatureAfterChange": " public void testRenamePF() throws CoreException", "diff": ["-\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y.newZ [in src [in P]])}\\n\" + ", "-\t\t\"\t\tx.y.newZ[+]: {MOVED_FROM(x.y.z [in src [in P]])}\"", "+\t\t\"\t\tx.y.newZ[+]: {MOVED_FROM(x.y.z [in src [in P]])}\\n\" + ", "+\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y.newZ [in src [in P]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33717bb1c1fae60215e8ffa023f8162d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "15119daf817db1018e77a6fda243b1a0915bea1f", "commitAfterChange": "46f57536ed8e2bfbe5a9484e153647c7c5b9cb5d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testCompletionFindClass() throws JavaModelException", "signatureAfterChange": " public void testCompletionFindClass() throws JavaModelException", "diff": ["-    \t\t\"ABC[TYPE_REF]{p1.ABC, p1, Lp1.ABC;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\\n\" +", "-\t\t\t\"A3[TYPE_REF]{A3, , LA3;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"ABC[TYPE_REF]{p1.ABC, p1, Lp1.ABC;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\\n\" +", "+    \t\t\"A3[TYPE_REF]{A3, , LA3;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "357702c709aaa53fc723367517948547", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"E cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"E cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38bb1fec93e862ff9d0581401c789e97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void testArrayType_05()", "signatureAfterChange": " \tpublic void testArrayType_05()", "diff": ["-\t\t\t\"Null type safety: The expression of type String[] needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type 'String []' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): the expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): the expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38bcda6c09a8da4eb72e362f4ca925b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " public void test_nonnull_var_in_constrol_structure_3()", "signatureAfterChange": " public void test_nonnull_var_in_constrol_structure_3()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7edfad05d4a046df9ed73b82c52340", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void test061()", "signatureAfterChange": " \tpublic void test061()", "diff": ["-\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "-\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b23b72bafa1ea5d4c635178e1b196ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  public void test059()", "signatureAfterChange": "  public void test059()", "diff": ["-\t\t\"The field Local.field is never read locally\\n\" + ", "+\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "-\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "+\t\t\"The field Local.field is never read locally\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cdb0955c735bc4b17603ff3ab446e23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " public void testRenameMethodAndSave() throws CoreException", "signatureAfterChange": " public void testRenameMethodAndSave() throws CoreException", "diff": ["-\t\t\t\"\t\t\t\t\tfoo2()[+]: {}\\n\" + ", "-\t\t\t\"\t\t\t\t\tfoo1()[-]: {}\"", "+\t\t\t\"\t\t\t\t\tfoo1()[-]: {}\\n\" + ", "+\t\t\t\"\t\t\t\t\tfoo2()[+]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411b30491af984303f37e02e2b0204bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void test_nesting_1()", "signatureAfterChange": " public void test_nesting_1()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4912203010bbfa2d6a91e4c7ca746d27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "0b29e3e291fcb69cbd668b09f597694d50edc0fe", "commitAfterChange": "710ea956533eb69ff7d09c9dabc60911e72310bd", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\t\tif (!method.areTypeVariableErasuresEqual(method2))", "-\t\t\t\t\t\t\t\tif (method.typeVariables != NoTypeVariables && method2.typeVariables != NoTypeVariables)", "+\t\t\t\t\t\t\tif (method.typeVariables != NoTypeVariables && method2.typeVariables != NoTypeVariables)", "+\t\t\t\t\t\t\t\tif (!method.areTypeVariableErasuresEqual(method2))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54d286d103bdfa6b979c6c9c71e8f144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7d303e0c7470c93430eab3c78ad03ab448e9ff6c", "commitAfterChange": "b54ef6a3435cf5491ebea526b9e9f65c52623f2f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  public boolean isSuperclassOf(ReferenceBinding otherType)", "signatureAfterChange": "  public boolean isSuperclassOf(ReferenceBinding otherType)", "diff": ["-\t\tif (this.isEquivalentTo(otherType)) return true;", "+\t\tif (otherType.isEquivalentTo(this)) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5931b3a9f1a217970a5488ebc381dbdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopySearchTests.java", "commitBeforeChange": "019595ccc2df022ba42315e87fd28c3a71a5ce43", "commitAfterChange": "3700cbbe57ab546e337347aaf15b75c700040cd5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testAllTypeNamesBug98684() throws CoreException", "signatureAfterChange": " \tpublic void testAllTypeNamesBug98684() throws CoreException", "diff": ["-\t\t\t\t\"\tpublic static class A2Inner2 {}\" + ", "+\t\t\t\t\"\tpublic static class A2Inner1 {}\" + ", "-\t\t\t\t\"p2.A2$A2Inner2\\n\" + ", "+\t\t\t\t\"p2.A2$A2Inner1\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be256cb25726a42d3b7f17a974710e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testRenameCU() throws CoreException", "signatureAfterChange": " public void testRenameCU() throws CoreException", "diff": ["-\t\t\"\t\t\tX.java[-]: {MOVED_TO(NewX.java [in <default> [in src [in P]]])}\\n\" + ", "-\t\t\"\t\t\tNewX.java[+]: {MOVED_FROM(X.java [in <default> [in src [in P]]])}\"", "+\t\t\"\t\t\tNewX.java[+]: {MOVED_FROM(X.java [in <default> [in src [in P]]])}\\n\" + ", "+\t\t\"\t\t\tX.java[-]: {MOVED_TO(NewX.java [in <default> [in src [in P]]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60e1570e662516d56350a5809862293b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "95dd3e249efbc10aa1749a2a001087016d8a52ae", "commitAfterChange": "d3f4f7dc5cd4aef3b0604e519603fa156a7db8f9", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate synchronized void containersReset(String[] containerIDs)", "signatureAfterChange": "  \tprivate synchronized void containersReset(String[] containerIDs)", "diff": ["-\t\t\t\t\t\tif (containerPath.segment(0).equals(containerID)) { // registered container", "+\t\t\t\t\t\tif (containerID.equals(containerPath.segment(0))) { // registered container"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6109a2258a6762ceedd2d2be3a420d2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": "\t\t \tpublic void test0169()", "signatureAfterChange": "\t\t \tpublic void test0169()", "diff": ["-\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<T>\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e8a532955cc064570fa4e5a3ece20ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"E cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"E cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "736ebacfcb93466afbc4f0803f72c126", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void test0044()", "signatureAfterChange": " public void test0044()", "diff": ["-\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "-\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7638b0d7cfd2d150fb7f56c89737a700", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43376e039f3b408b15eaff059a7746b22171766c", "commitAfterChange": "6ce150229a43c564ac0ba19e83d7a18e9ed0cfed", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testCompletionFindClass() throws JavaModelException", "signatureAfterChange": " public void testCompletionFindClass() throws JavaModelException", "diff": ["+    \t\t\"ABC[TYPE_REF]{p1.ABC, p1, Lp1.ABC;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\\n\" +", "-\t\t\t\"ABC[TYPE_REF]{p1.ABC, p1, Lp1.ABC;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\\n\" +", "-    \t\t\"A3[TYPE_REF]{A3, , LA3;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"A3[TYPE_REF]{A3, , LA3;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77a31b135e7b3e3643ead7d729751aaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testJavaSearchScope7() throws CoreException", "signatureAfterChange": " public void testJavaSearchScope7() throws CoreException", "diff": ["-\t\t\t\"\t/P2/src\\n\" + ", "+\t\t\t\"\t/P2/src\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a3c502a2e81e1b960605f232ad3494f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "8a8a933c5c65d7eab983f45d8d9819909a3e6266", "commitAfterChange": "3c53a94302f6ce332bab89158cbd1b29657da921", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException", "signatureAfterChange": "\r protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException", "diff": ["-\t\tif (resource != null && isSourceElement()) {\r", "-\t\t\tif (buffer == null) {\r", "+\t\tif (buffer == null) {\r", "+\t\t\tif (resource != null && isSourceElement()) {\r", "-\t\t\t} else {\r", "-\t\t\t\tthis.getBufferManager().addBuffer(buffer);\r", "-\t\t\t\tbuffer.addBufferChangedListener(this);\r", "-\t\t\t}\r", "+\t\t\t} \r", "+\t\t} else {\r", "+\t\t\tthis.getBufferManager().addBuffer(buffer);\r", "+\t\t\tbuffer.addBufferChangedListener(this);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7acff70ddf2d95d1f959b594c9cdb78c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void test0083()", "signatureAfterChange": " \tpublic void test0083()", "diff": ["-\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "+\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "-\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d97c02c99b8356f9a2b5b12ac00d83e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 552, "methodNumberAfterChange": 552, "signatureBeforeChange": "\t\t \tpublic void test0548()", "signatureAfterChange": "\t\t \tpublic void test0548()", "diff": ["-\t\t\t\"Unnecessary cast from DA<capture-of ?> to DC<?>\\n\" + ", "+\t\t\t\"Type safety: The cast from DA<capture-of ?> to DC<?> is actually checking against the erased type DC\\n\" + ", "-\t\t\t\"Type safety: The cast from DA<capture-of ?> to DC<?> is actually checking against the erased type DC\\n\" + ", "+\t\t\t\"Unnecessary cast from DA<capture-of ?> to DC<?>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e33e9f81bf4fa0800457576cc70adf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SyntaxErrorTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test05()", "signatureAfterChange": " public void test05()", "diff": ["-\t\t\"Syntax error, insert \\\";\\\" to complete BlockStatements\\n\"+", "+\t\t\"Syntax error, insert \\\"AssignmentOperator Expression\\\" to complete Assignment\\n\"+", "-\t\t\"Syntax error, insert \\\"AssignmentOperator Expression\\\" to complete Assignment\\n\"+", "+\t\t\"Syntax error, insert \\\";\\\" to complete BlockStatements\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84827907f53303d5e626e57220129316", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 542, "methodNumberAfterChange": 542, "signatureBeforeChange": " \tpublic void test0538()", "signatureAfterChange": " \tpublic void test0538()", "diff": ["-\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum<?>>\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum<?>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f8c2a27f38ff270dc5017fc22cbe7cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "commitAfterChange": "a8944173670c6319cce2438add6b3e87f478a46c", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "\r \tpublic void test0385137()", "signatureAfterChange": "\r \tpublic void test0385137()", "diff": ["-\t\t\t\t\t\"Type annotations are not allowed on type names used to access static members\\n\" + \r", "+\t\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "-\t\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "+\t\t\t\t\t\"Type annotations are not allowed on type names used to access static members\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "909cd15532d6de6f712d7aef080ce4f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": " public void testTypeReferenceInQualifiedNameReference2() throws JavaModelException, CoreException", "signatureAfterChange": " public void testTypeReferenceInQualifiedNameReference2() throws JavaModelException, CoreException", "diff": ["-\t\t\"src/p4/A.java p4.X.x() -> void [p4.A]\\n\" +", "-\t\t\"src/p4/A.java p4.X [p4.A]\",", "+\t\t\"src/p4/A.java p4.X [p4.A]\\n\" +", "+\t\t\"src/p4/A.java p4.X.x() -> void [p4.A]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95af3eb1a8f1708d71b690db9f4e0e5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "169fb9ab8fc17b4c63cdfa1026fc1d2117d3506d", "commitAfterChange": "a2b325ca1d6624b52c89c789b78776b21c10f4bc", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " \tpublic void testDoStatement()", "signatureAfterChange": " \tpublic void testDoStatement()", "diff": ["-\t\tassertTrue(result.equals(\"[(sDO\"+E1S+S1S+\"sDO)]\"));", "+\t\tassertTrue(result.equals(\"[(sDO\"+S1S+E1S+\"sDO)]\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e2b91e53bba83049b14efc600f137b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchScopeTests.java", "commitBeforeChange": "8457dc17f56c4fff3fa2589438e210393d270f41", "commitAfterChange": "60249e9dd075ec142e7f7240fcef068b0fddb812", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testApplicationLibrairiesJarAndClassFolder() throws CoreException", "signatureAfterChange": " public void testApplicationLibrairiesJarAndClassFolder() throws CoreException", "diff": ["-\t\t\t\"\t/P/internal.jar\\n\" + ", "+\t\t\t\"\t/P/internal.jar\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a9a776fa3d380c71ce34ecb6598846", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "af0e25a1d5ee864ea84d164d70f77532a60cf58e", "commitAfterChange": "f9abe0eae1be0e7103573798b92ccd764f2825ac", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": "\r \tpublic void test418041a()", "signatureAfterChange": "\r \tpublic void test418041a()", "diff": ["-\t\t\t\t\"\t                                  ^^^^^^^^^\\n\" + \r", "+\t\t\t\t\"\t                                          ^\\n\" +\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d6a062c3f78f5a6b49ee265c691f95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void testAddFieldAndConstructor() throws JavaModelException", "signatureAfterChange": " public void testAddFieldAndConstructor() throws JavaModelException", "diff": ["-\t\t\"\ti[+]: {}\\n\" + ", "-\t\t\"\tX(int)[+]: {}\"", "+\t\t\"\tX(int)[+]: {}\\n\" + ", "+\t\t\"\ti[+]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c758e3d36c0fd104770671b148a8fc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testPackageFragmentMove() throws CoreException", "signatureAfterChange": " public void testPackageFragmentMove() throws CoreException", "diff": ["-\t\t\t\"\t\tp[-]: {MOVED_TO(p2 [in src [in P]])}\\n\" + ", "-\t\t\t\"\t\tp2[+]: {MOVED_FROM(p [in src [in P]])}\"", "+\t\t\t\"\t\tp2[+]: {MOVED_FROM(p [in src [in P]])}\\n\" + ", "+\t\t\t\"\t\tp[-]: {MOVED_TO(p2 [in src [in P]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ed2d72af8678c92b78906c5ff801ea0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test022()", "signatureAfterChange": "  \tpublic void test022()", "diff": ["-\t\t\t\"Type safety: The return type List for getList() from the type B needs unchecked conversion to conform to List<String> from the type A\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type List for getList() from the type B needs unchecked conversion to conform to List<String> from the type A\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b3b8f4895540f5309a061e9558a7f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreatePackageTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testCreatePackageFragment1() throws JavaModelException", "signatureAfterChange": " public void testCreatePackageFragment1() throws JavaModelException", "diff": ["-\t\t\"\t\tone[+]: {}\\n\" + ", "+\t\t\"\t\tone.two.three[+]: {}\\n\" +", "-\t\t\"\t\tone.two.three[+]: {}\"", "+\t\t\"\t\tone[+]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b46f47398946ab262d071c01c2161f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testRenameEmptyPF() throws CoreException", "signatureAfterChange": " public void testRenameEmptyPF() throws CoreException", "diff": ["-\t\t\"\t\tx.y[+]: {MOVED_FROM(x.y.z [in src [in P]])}\\n\" + ", "-\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y [in src [in P]])}\"", "+\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y [in src [in P]])}\\n\" +", "+\t\t\"\t\tx.y[+]: {MOVED_FROM(x.y.z [in src [in P]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d182737e7c514dc6abd1f2cad5fbf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testMoveSourceFolder3() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder3() throws CoreException", "diff": ["-\t\t\t\"\tsrc1[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "+\t\t\t\"\tsrc1[*]: {REMOVED FROM CLASSPATH}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa4d4419cf405ef71149e9407950921d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void testNestedRootParentMove() throws CoreException", "signatureAfterChange": " public void testNestedRootParentMove() throws CoreException", "diff": ["-\t\t\t\"\tnested2/src[+]: {MOVED_FROM(nested/src [in P])}\\n\" + ", "+\t\t\t\"\tnested2/src[+]: {MOVED_FROM(nested/src [in P])}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af9c55bf9b4bef289a53fec753b3c7fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "10bffe6b84331580bd1f7b273305c5a3d5e7af2d", "commitAfterChange": "a9d9ef126afa0b02402ec922ee1b18941ed8396d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic boolean visit(Block block, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(Block block, BlockScope scope)", "diff": ["-\t\tif (block_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\tif (DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(block_brace_position)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afe7a440d3c101d2501b79dd3693d5a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "2f55ac87650774129d45512f57bbf2a4c46f6168", "commitAfterChange": "ac2fa4794ead759223b3fb7b925a0ae883d04295", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testMoveSourceFolder3() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder3() throws CoreException", "diff": ["-\t\t\t\"\tsrc1/src2[*]: {REORDERED}\\n\" + ", "+\t\t\t\"\tsrc1/src2[*]: {REORDERED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b09295d3d3f8062706c71f1ea4a4eec8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  public void test059()", "signatureAfterChange": "  public void test059()", "diff": ["-\t\t\"The field Local.field is never read locally\\n\" + ", "+\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "-\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "+\t\t\"The field Local.field is never read locally\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b245ceb407c797f47afd4d008f66cf05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testMoveSourceFolder5() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder5() throws CoreException", "diff": ["-\t\t\t\"\tsrc2[*]: {REORDERED}\\n\" + ", "+\t\t\t\"\tsrc2[*]: {REORDERED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6dc04e665f41731811c737584915c78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "e84db8d4c6681c452df342e0bb55c2450eb0a239", "commitAfterChange": "8654e35d625c39f9786ab81699fccb6057b0bc72", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t&& FakedTrackingVariable.isAnyCloseable(this.initialization.resolvedType)", "-\t\t\t&& currentScope.compilerOptions().analyseResourceLeaks;", "+\t\t\t&& currentScope.compilerOptions().analyseResourceLeaks", "+\t\t\t&& FakedTrackingVariable.isAnyCloseable(this.initialization.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d24d9ffb0028a880173cb5fc1f9bdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "c27ed950823c653614741fd79e3a625e0a0bdd28", "commitAfterChange": "c543e3e3882451fde43cbe4b896f41a0fa7dc69f", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": " public void testSearchFieldInBinaryWithResolution() throws CoreException", "signatureAfterChange": " public void testSearchFieldInBinaryWithResolution() throws CoreException", "diff": ["-\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.otherField [No source] EXACT_MATCH\\n\" +", "-\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.missing [No source] POTENTIAL_MATCH\"", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.missing [No source] EXACT_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.otherField [No source] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba122ae2cc62bd9d5dd70dc3ecef7e89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testRenameFieldsCheckingDeltasAndPositions() throws JavaModelException", "signatureAfterChange": " public void testRenameFieldsCheckingDeltasAndPositions() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t\tfred[+]: {}\\n\" + ", "-\t\t\"\t\t\t\t\tbar[-]: {}\"", "+\t\t\"\t\t\t\t\tbar[-]: {}\\n\" + ", "+\t\t\"\t\t\t\t\tfred[+]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc80ed7e638ef418bc732535e327f823", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"The method six(C) of type Ex<C> must override a superclass method\\n\" + ", "+\t\t\t\"Name clash: The method six(C) of type Ex<C> has the same erasure as six(TC) of type Top<TC> but does not override it\\n\" + ", "-\t\t\t\"Name clash: The method six(C) of type Ex<C> has the same erasure as six(TC) of type Top<TC> but does not override it\\n\" + ", "+\t\t\t\"The method six(C) of type Ex<C> must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f6eed9e96293f7b3070ddd22d073c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 863, "methodNumberAfterChange": 863, "signatureBeforeChange": " public void test0843()", "signatureAfterChange": " public void test0843()", "diff": ["-\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\"Type safety: Unchecked cast from List<Object&Serializable&CharSequence> to List<? extends String>\\n\" + ", "+\t\t\"Cannot cast from List<Object&Serializable&CharSequence> to List<? extends String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2c3674c8d80a9c264df8872425471ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "b8b67e3602501314f6e55c65c68eed3746bd4bbd", "commitAfterChange": "a6f66e49349e26b26fb61a65a047cdceca7cf10d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\t\tBlockScope currentScope, \t\t\tFlowContext flowContext, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\t\tBlockScope currentScope, \t\t\tFlowContext flowContext, \t\t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\tif (!caseInits.complainIfUnreachable(statement, scope, didAlreadyComplain)) {", "+\t\t\t\tif (!statement.complainIfUnreachable(caseInits, scope, didAlreadyComplain)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c51b18617cc842120a3b34be165ec52d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void test_nonnull_var_in_constrol_structure_2()", "signatureAfterChange": " public void test_nonnull_var_in_constrol_structure_2()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b3ec8e734360dc0a2eae00eb6c84af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void testJavaSearchScope8() throws CoreException", "signatureAfterChange": " public void testJavaSearchScope8() throws CoreException", "diff": ["-\t\t\t\"\t/P2/src\\n\" + ", "+\t\t\t\"\t/P2/src\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8258624c2869d7f3f5a73b2fb052c7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["-\t\t\t+ (this.annotations == null ? 0 : this.annotations.listSize())", "+\t\t\t+ (this.annotations == null ? 0 : this.annotations.listSize())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfe2a5d5a50898bb59717e0ecbca3dbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "signatureAfterChange": " \tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "diff": ["-\t\t\t\t\treturn Constant.fromValue(field.original().id); // ordinal value", "+\t\t\t\t\treturn IntConstant.fromValue(field.original().id); // ordinal value"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db41d112c4ba49c8bfcf713030d8e1eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "2eeba3a1a72b7ffb1126aea370d38335aef50755", "commitAfterChange": "fe86976332660361e34b2b3204aeb422d21cbf13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\t\t\tif (inheritedArg.isRawType()) {", "-\t\t\t\t\t\tif (currentArg.isParameterizedType() && hasBoundedParameters((ParameterizedTypeBinding) currentArg)) {", "+\t\t\t\t\tif (currentArg.isParameterizedType() && hasBoundedParameters((ParameterizedTypeBinding) currentArg)) {", "+\t\t\t\t\t\tif (inheritedArg.isRawType()) {", "+//\t\t\t\t\t\tif (inheritedArg.isRawType() || !inheritedArg.isEquivalentTo(currentArg)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54dd49ef3b3132fb1ce8f42c0224d38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test004()", "signatureAfterChange": " public void test004()", "diff": ["-\t\t\"The method UTC(int, int, int, int, int, int) from the type Date is deprecated\\n\" + ", "+\t\t\"The static method UTC(int, int, int, int, int, int) from the type Date should be accessed in a static way\\n\" + ", "-\t\t\"The static method UTC(int, int, int, int, int, int) from the type Date should be accessed in a static way\\n\" + ", "-\t\t\"----------\\n\"", "-", "-\t);", "+\t\t\"The method UTC(int, int, int, int, int, int) from the type Date is deprecated\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6225f75f1360439e17077ec4eb82da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e706b0acfc909e9320ccc69055b40efe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "2f55ac87650774129d45512f57bbf2a4c46f6168", "commitAfterChange": "ac2fa4794ead759223b3fb7b925a0ae883d04295", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testDeleteSourceFolder2() throws CoreException", "signatureAfterChange": " public void testDeleteSourceFolder2() throws CoreException", "diff": ["-\t\t\t\"\tsrc1/src2[*]: {REORDERED}\\n\" + ", "+\t\t\t\"\tsrc1/src2[*]: {REORDERED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e903dad701ac21861c4918670632b757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void testRenamePF2() throws CoreException", "signatureAfterChange": " public void testRenamePF2() throws CoreException", "diff": ["-\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y.z2 [in src [in P]])}\\n\" + ", "-\t\t\"\t\tx.y.z2[+]: {MOVED_FROM(x.y.z [in src [in P]])}\"", "+\t\t\"\t\tx.y.z2[+]: {MOVED_FROM(x.y.z [in src [in P]])}\\n\" +", "+\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y.z2 [in src [in P]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9d6efd7758f7b9e2f0725701d1fc3f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testDeleteSourceFolder2() throws CoreException", "signatureAfterChange": " public void testDeleteSourceFolder2() throws CoreException", "diff": ["-\t\t\t\"\tsrc1[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "+\t\t\t\"\tsrc1[*]: {REMOVED FROM CLASSPATH}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea82d95fd97d831dd16f9163e8712941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "59fabba3e30528d2c78fa06b51cac8c1c95902b5", "commitAfterChange": "93675a43d968a3c19731d41f01d7289fd7ab10d8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\t\t\t\t\t\t\tif (this.currentElement == null ", "-\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "+\t\t\t\t\t\t\t\tif (this.currentElement == null", "+\t\t\t\t\t\t\t\t\t\t|| !rootInfo.project.equals(this.currentElement.getJavaProject())) { // note if currentElement is the IJavaModel, getJavaProject() is null"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec2da9248cb1552daff6af87aff8b5e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void testDeleteProjectSetCPAnotherProject() throws CoreException", "signatureAfterChange": " public void testDeleteProjectSetCPAnotherProject() throws CoreException", "diff": ["-\t\t\t\"\tsrc[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "+\t\t\t\"\tsrc[*]: {REMOVED FROM CLASSPATH}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee3d285629e76cd6da21d92671ad9f5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test026()", "signatureAfterChange": "  \tpublic void test026()", "diff": ["-\t\t\t\"Type safety: The return type A for test() from the type C needs unchecked conversion to conform to A<T> from the type A<T>\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "-\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type A for test() from the type C needs unchecked conversion to conform to A<T> from the type A<T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee9fdb837f2cc7ab34e32413ec7e19c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\t\"      {\\n\" + ", "-\t\t\t\"        if (true)\\n\" + ", "+\t\t\t\"      if (true)\\n\" + ", "+\t\t\t\"          {\\n\" + ", "-\t\t\t\"      }\\n\" + ", "+\t\t\t\"          }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eed725acb9b6b88bb3d4ebd67556482b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 283, "signatureBeforeChange": " \tpublic void test0279()", "signatureAfterChange": " \tpublic void test0279()", "diff": ["-\t\t\t\"Type safety: The return type Class for getSomething() from the type X needs unchecked conversion to conform to Class<? extends Y> from the type ISomething\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type Class for getSomething() from the type X needs unchecked conversion to conform to Class<? extends Y> from the type ISomething\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1f041b2baf396af3ce069e1152ebcf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void testSetClasspathOnFreshProject() throws CoreException", "signatureAfterChange": " public void testSetClasspathOnFreshProject() throws CoreException", "diff": ["-\t\t\t\"\t<project root>[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {REMOVED FROM CLASSPATH}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f63d20126d2a694ccc4a42978b927130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void test_nonnull_var_in_constrol_structure_1()", "signatureAfterChange": " public void test_nonnull_var_in_constrol_structure_1()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f80115a6ef0d7eeb5c4b596b9a419f24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testRenameEmptyPF() throws CoreException", "signatureAfterChange": " public void testRenameEmptyPF() throws CoreException", "diff": ["-\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y [in src [in P]])}\\n\" + ", "-\t\t\"\t\tx.y[+]: {MOVED_FROM(x.y.z [in src [in P]])}\"", "+\t\t\"\t\tx.y[+]: {MOVED_FROM(x.y.z [in src [in P]])}\\n\" + ", "+\t\t\"\t\tx.y.z[-]: {MOVED_TO(x.y [in src [in P]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8962f69b12cbf9e03ccb3d08b219fa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "2f55ac87650774129d45512f57bbf2a4c46f6168", "commitAfterChange": "ac2fa4794ead759223b3fb7b925a0ae883d04295", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testMoveSourceFolder5() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder5() throws CoreException", "diff": ["-\t\t\t\"\tsrc2[*]: {REORDERED}\\n\" + ", "+\t\t\t\"\tsrc2[*]: {REORDERED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f971ecc0d7cb9b6774c15ecc0f6a9aba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "commitAfterChange": "9f714e954e743e8213418ce2cd94a29746b2c585", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testMoveSourceFolder5() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder5() throws CoreException", "diff": ["-\t\t\t\"\tsrc[+]: {MOVED_FROM(src [in P1])}\\n\" + ", "+\t\t\t\"\tsrc[+]: {MOVED_FROM(src [in P1])}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99cf53a98b3cc4e12807d8e1aa55936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testCompletionKeywordFalse5() throws JavaModelException", "signatureAfterChange": " public void testCompletionKeywordFalse5() throws JavaModelException", "diff": ["-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (JI)V, wait, (millis, nanos), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (J)V, wait, (millis), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (J)V, wait, (millis), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (JI)V, wait, (millis, nanos), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb61ce5112fa76268a33e2a9098a5355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 537, "methodNumberAfterChange": 537, "signatureBeforeChange": " \tpublic void test0533()", "signatureAfterChange": " \tpublic void test0533()", "diff": ["-\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum>\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb67e6932a5c5e9ad0305327713b1446", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "c79bfbeb67e4687c48de7885eb121ce1ea14c01f", "commitAfterChange": "ff61aa704b87289ea0c126beac8453107bd32bdf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic String getName()", "signatureAfterChange": "  \tpublic String getName()", "diff": ["-\t\t\tname = this.complianceLevel + \" - \" + name;", "+\t\t\tname = name + \" - \" + this.complianceLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc8a336308f87ed27e65033b9bb81fec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "-\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe0b7a92594c06d63da31fb5cc438166", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void testSetClasspathOnFreshProject() throws CoreException", "signatureAfterChange": " public void testSetClasspathOnFreshProject() throws CoreException", "diff": ["-\t\t\t\"\tsrc2[*]: {ADDED TO CLASSPATH}\\n\" + ", "+\t\t\t\"\tsrc2[*]: {ADDED TO CLASSPATH}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff55aa97a1a586d72a99052b62f8dd6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "cc44d533509199a22dee3cb03412b30282a18add", "commitAfterChange": "dee23bd4f5a65ed282a3f4a7e19b637fd72cfc3b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tsynchronized IAnnotationBinding getAnnotationInstance(org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalInstance)", "signatureAfterChange": "  \tsynchronized IAnnotationBinding getAnnotationInstance(org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalInstance)", "diff": ["-\t\tif (annotationType == null || ((annotationType.tagBits & TagBits.HasMissingType) != 0)) {", "-\t\t\tif (!this.isRecoveringBindings) {", "+\t\tif (!this.isRecoveringBindings) {", "+\t\t\tif (annotationType == null || ((annotationType.tagBits & TagBits.HasMissingType) != 0)) {"]}], "num": 57649}
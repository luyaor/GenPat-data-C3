{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa48bc7bbb5f6ef649a166610e6d1a8f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183aee6202b1c13fd942196ea45a4245", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InternalHexFloatTest.java", "commitBeforeChange": "d1fadbf3a3cc65cdec59a81bd717eea0685adc65", "commitAfterChange": "959aae3fee7a061c3e53022fde606d266442480e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\tif (COMPLIANCE_1_5.equals(this.complianceLevel)) {", "-\t\t\tMap customOptions = super.getCompilerOptions();", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);", "-\t\t\tthis.runNegativeTest(", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\t\\n\" +", "-\t\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(0X000.eP-5000F);\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\t\"}\"", "-\t\t\t\t},", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(0X000.eP-5000F);\\r\\n\" + ", "-\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The literal 0X000.eP-5000F of type float is out of range \\n\" + ", "-\t\t\t\t\"----------\\n\");", "-\t\t}", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\t\\n\" +", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"        System.out.println(0X000.eP-5000F);\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tSystem.out.println(0X000.eP-5000F);\\r\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The literal 0X000.eP-5000F of type float is out of range \\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a45e3e6bc730c68f51a675144e065be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void test009() throws Exception", "signatureAfterChange": " \tprotected Map getCompilerOptions()", "diff": ["-\t// throws", "-\tpublic void test009() throws Exception {", "+\t// Enables the tests to run individually", "+\tprotected Map getCompilerOptions() {", "+\t\tMap defaultOptions = super.getCompilerOptions();", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_8);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\treturn defaultOptions;", "+\t}", "-\t\t\t\t\"E.java\",", "-\t\t\t\t\"class E extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"E1.java\",", "-\t\t\t\t\"class E1 extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"E2.java\",", "-\t\t\t\t\"class E2 extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"\tvoid foo() throws @A(\\\"Hello, World!\\\") E, E1, @B @C('(') E2 {}\\n\" +", "-\t\t\t\"      #25 @A(\\n\" + ", "-\t\t\t\"        #26 value=\\\"Hello, World!\\\" (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 0\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #28 @C(\\n\" + ", "-\t\t\t\"        #26 value=\\'(\\' (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 2\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #23 @B(\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 2\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd013d4f3016e702234078b61292aa7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InternalHexFloatTest.java", "commitBeforeChange": "d1fadbf3a3cc65cdec59a81bd717eea0685adc65", "commitAfterChange": "959aae3fee7a061c3e53022fde606d266442480e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test007()", "signatureAfterChange": " \tpublic void test007()", "diff": ["-\t\tif (COMPLIANCE_1_5.equals(this.complianceLevel)) {", "-\t\t\tMap customOptions = super.getCompilerOptions();", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);", "-\t\t\tthis.runNegativeTest(", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\t\\n\" +", "-\t\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(0X000.eP5000F);\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\t\"}\"", "-\t\t\t\t},", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(0X000.eP5000F);\\r\\n\" + ", "-\t\t\t\t\"\t                   ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The literal 0X000.eP5000F of type float is out of range \\n\" + ", "-\t\t\t\t\"----------\\n\");", "-\t\t}", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\t\\n\" +", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"        System.out.println(0X000.eP5000F);\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tSystem.out.println(0X000.eP5000F);\\r\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The literal 0X000.eP5000F of type float is out of range \\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 47694}
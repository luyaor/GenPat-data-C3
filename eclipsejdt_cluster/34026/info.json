{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f827b3111cf9928ff862d2ae2a8ba274", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "510eaf991202e0e5d69ee85c8502247c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "0bd771375c18b7c83a5adef74657e35cf2c86ff3", "commitAfterChange": "5882e29154dfffe57fe4183f714dc74947e8e98d", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "signatureAfterChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "diff": ["+\tboolean oldDiet = this.diet;", "-\tthis.referenceContext = unit;", "+\tTypeDeclaration referenceContextTypeDeclaration = new TypeDeclaration(unit.compilationResult);", "+\treferenceContextTypeDeclaration.name = Util.EMPTY_STRING.toCharArray();", "+\treferenceContextTypeDeclaration.fields = new FieldDeclaration[0];", "+\tunit.types = new TypeDeclaration[1];", "+\tunit.types[0] = referenceContextTypeDeclaration;", "+\tthis.referenceContext = unit;", "+\t\tthis.diet = true;", "+\t} finally {", "+\t\tthis.diet = oldDiet;", "+\tASTNode[] result = null;", "-\t\treturn null;", "+\t\tif (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery) {", "+\t\t\treturn null;", "+\t\t}", "+\t\t// collect all body declaration inside the compilation unit except the default constructor", "+\t\tfinal List bodyDeclarations = new ArrayList();", "+\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope) {", "+\t\t\t\tif (!methodDeclaration.isDefaultConstructor()) {", "+\t\t\t\t\tbodyDeclarations.add(methodDeclaration);", "+\t\t\t\t}", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(FieldDeclaration fieldDeclaration, MethodScope scope) {", "+\t\t\t\tbodyDeclarations.add(fieldDeclaration);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope scope) {", "+\t\t\t\tbodyDeclarations.add(memberTypeDeclaration);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t};", "+\t\tunit.ignoreFurtherInvestigation = false;", "+\t\tunit.traverse(visitor, unit.scope);", "+\t\tunit.ignoreFurtherInvestigation = true;", "+\t\tresult = (ASTNode[]) bodyDeclarations.toArray(new ASTNode[bodyDeclarations.size()]);", "+\t} else {", "+\t\tint astLength;", "+\t\tif (this.astLengthPtr > -1 && (astLength = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\t\tresult = new ASTNode[astLength];", "+\t\t\tthis.astPtr -= astLength;", "+\t\t\tSystem.arraycopy(this.astStack, this.astPtr + 1, result, 0, astLength);", "+\t\t}", "-\tint astLength;", "-\tif (this.astLengthPtr > -1 && (astLength = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\tASTNode[] result = new ASTNode[astLength];", "-\t\tthis.astPtr -= astLength;", "-\t\tSystem.arraycopy(this.astStack, this.astPtr + 1, result, 0, astLength);", "-\t\treturn result;", "+\tboolean containsInitializers = false;", "+\tTypeDeclaration typeDeclaration = null;", "+\tfor (int i = 0, max = result.length; i< max; i++) {", "+\t\t// parse each class body declaration", "+\t\tASTNode node = result[i];", "+\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t((TypeDeclaration) node).parseMethods(this, unit);", "+\t\t} else if (node instanceof AbstractMethodDeclaration) {", "+\t\t\t((AbstractMethodDeclaration) node).parseStatements(this, unit);", "+\t\t} else if (node instanceof FieldDeclaration) {", "+\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\t\tswitch(fieldDeclaration.getKind()) {", "+\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\t\t\tcontainsInitializers = true;", "+\t\t\t\t\tif (typeDeclaration == null) {", "+\t\t\t\t\t\ttypeDeclaration = referenceContextTypeDeclaration;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (typeDeclaration.fields == null) {", "+\t\t\t\t\t\ttypeDeclaration.fields = new FieldDeclaration[1];", "+\t\t\t\t\t\ttypeDeclaration.fields[0] = fieldDeclaration;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint length2 = typeDeclaration.fields.length;", "+\t\t\t\t\t\tFieldDeclaration[] temp = new FieldDeclaration[length2 + 1];", "+\t\t\t\t\t\tSystem.arraycopy(typeDeclaration.fields, 0, temp, 0, length2);", "+\t\t\t\t\t\ttemp[length2] = fieldDeclaration;", "+\t\t\t\t\t\ttypeDeclaration.fields = temp;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\t\treturn null;", "+\t\t}", "-\treturn null;", "+\tif (containsInitializers) {", "+\t\tFieldDeclaration[] fieldDeclarations = typeDeclaration.fields;", "+\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t((Initializer) fieldDeclarations[i]).parseStatements(this, typeDeclaration , unit);", "+\t\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4743118a207a825b276bf3b98be2776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration", "-\t\t\t\t&& (statement.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsLocalTypeMASK) != 0) {", "-\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\tcase AST.JLS2 :", "-\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) statement));", "-\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "-\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t}", "-\t\t}", "-\t\t\tif (result.getNodeType() == ASTNode.ENUM_DECLARATION) {", "-\t\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\t\tcase AST.JLS2 :", "-\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement((EnumDeclaration) result);", "-\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "-\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) result;", "-\t\t\t\tif (typeDeclaration == null) {", "-\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\t} else {", "-\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(typeDeclaration);", "+\t\t\tswitch(result.getNodeType()) {", "+\t\t\t\tcase ASTNode.ENUM_DECLARATION:", "-\t\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());\t\t\t\t\t", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\t\t\t\tAbstractTypeDeclaration typeDeclAST3 = typeDeclarationStatement.getDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDeclAST3.getStartPosition(), typeDeclAST3.getLength());\t\t\t\t\t", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement((EnumDeclaration) result);", "+\t\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "+\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "+\t\t\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION :", "+\t\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "+\t\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement((AnnotationTypeDeclaration) result);", "+\t\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "+\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "+\t\t\t\t\t\t\treturn typeDeclarationStatement;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) result;", "+\t\t\t\t\tif (typeDeclaration == null) {", "+\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(typeDeclaration);", "+\t\t\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "+\t\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());\t\t\t\t\t", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\t\t\tAbstractTypeDeclaration typeDeclAST3 = typeDeclarationStatement.getDeclaration();", "+\t\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDeclAST3.getStartPosition(), typeDeclAST3.getLength());\t\t\t\t\t", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn typeDeclarationStatement;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f24616565b0118ba2e8e8bd220c2bd36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "05a3e6b542ee827cf511d126431eeeeff129c0c5", "commitAfterChange": "c203fa24cd19d35decddec98e524ad9aa8271741", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 505, "signatureBeforeChange": "  \tpublic void _test()", "signatureAfterChange": " \tpublic void test486()", "diff": ["-\tpublic void _test() {", "-\t\ttry {", "-\t\t\tchar[] contents = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(new File(\"D:/workspaces/eclipse/plugins/TestingOlivier/src/FormatterRegressionTests.java\"), null);", "-\t\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "-\t\t\tc.setSource(contents);", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) c.createAST(null);", "-\t\t\tList types = compilationUnit.types();", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) types.get(0);", "-\t\t\tMethodDeclaration[] methodDeclarations = typeDeclaration.getMethods();", "-\t\t\tint testCaseCounter = 229;", "-\t\t\tfor (int i = 0, max = methodDeclarations.length; i < max; i++) {", "-\t\t\t\tMethodDeclaration methodDeclaration = methodDeclarations[i];", "-\t\t\t\tfinal SimpleName methodName = methodDeclaration.getName();", "-\t\t\t\tif (methodName.getIdentifier().startsWith(\"test\")) {", "-\t\t\t\t\tBlock block = methodDeclaration.getBody();", "-\t\t\t\t\tList statements = block.statements();", "-\t\t\t\t\tStatement statement = (Statement) statements.get(0);", "-\t\t\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "-\t\t\t\t\t\tVariableDeclarationStatement localDeclaration = (VariableDeclarationStatement) statement;", "-\t\t\t\t\t\tList fragments = localDeclaration.fragments();", "-\t\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\t\t\t\tif (fragment.getName().getIdentifier().equals(\"source\")) {", "-\t\t\t\t\t\t\tExpression expression = fragment.getInitializer();", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tswitch(expression.getNodeType()) {", "-\t\t\t\t\t\t\t\tcase ASTNode.INFIX_EXPRESSION :", "-\t\t\t\t\t\t\t\t\tInfixExpression expression2 = (InfixExpression) expression;", "-\t\t\t\t\t\t\t\t\tList extendedOperands = expression2.extendedOperands();", "-\t\t\t\t\t\t\t\t\tbuffer.append(getSource(expression2.getLeftOperand(), contents));", "-\t\t\t\t\t\t\t\t\tbuffer.append(getSource(expression2.getRightOperand(), contents));", "-\t\t\t\t\t\t\t\t\tfor (int j = 0, max2 = extendedOperands.size(); j < max2; j++) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getSource((Expression) extendedOperands.get(j), contents));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase ASTNode.STRING_LITERAL :", "-\t\t\t\t\t\t\t\t\tStringLiteral literal = (StringLiteral) expression;", "-\t\t\t\t\t\t\t\t\tbuffer.append(getSource(literal, contents));", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcreateTestCase(buffer.toString(), testCaseCounter++);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t}", "+\t */", "+\tpublic void test486() {", "+\t\tMap options = DefaultCodeFormatterConstants.getDefaultSettings();", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\tDefaultCodeFormatterOptions preferences = new DefaultCodeFormatterOptions(options);", "+\t\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);", "+\t\trunTest(codeFormatter, \"test486\", \"A.java\", CodeFormatter.K_COMPILATION_UNIT);//$NON-NLS-1$ //$NON-NLS-2$", "+\t}"]}], "num": 34026}
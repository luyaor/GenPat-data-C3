{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6037506c75dcc73b1de454592a40dca5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8430f30f27a9d1d6016281a4218d0cca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2b797eb7226566ad166415dcfde6c744ad4c587", "commitAfterChange": "895b1bbc42bc6ec924c8066f964f04fd4701ee79", "methodNumberBeforeChange": 610, "methodNumberAfterChange": 610, "signatureBeforeChange": "\t\t \tpublic void test606()", "signatureAfterChange": "\t\t \tpublic void test606()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tbox.getValues()[1] = (Values<? extends U>) box.getValues()[2];\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Unnecessary cast from Values<capture-of ? extends U> to Values<? extends U>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tbox.getValues()[1] = (Values<? extends U>) box.getValues()[2];\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Values<capture-of ? extends U> to Values<capture-of ? extends U>\\n\" + ", "-\t\t\t\"----------\\n\");", "+    \t\t\"----------\\n\" + ", "+    \t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+    \t\t\"\tbox.getValues()[1] = (Values<? extends U>) box.getValues()[2];\\n\" + ", "+    \t\t\"\t                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type mismatch: cannot convert from Values<capture-of ? extends U> to Values<capture-of ? extends U>\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec112d5661346081a21617ebf8249fe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a8739597ebb6a7bc2be662454643b96202480dc7", "commitAfterChange": "6d77a4bf35583191a476bb93f4bd36f26de22100", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 398, "signatureBeforeChange": " \tpublic void test396()", "signatureAfterChange": " \tpublic void test396()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "-\t\t);", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 22)\\r\\n\" + ", "+\t\t\t\"\tfinal Collection<String> cL = (Collection<String>)emptyList(); // 2\\r\\n\" + ", "+\t\t\t\"\t                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot cast from List<Object> to Collection<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 25)\\r\\n\" + ", "+\t\t\t\"\tfinal Iterable<String> iL = (Iterable<String>)emptyList(); // 3\\r\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot cast from List<Object> to Iterable<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 31)\\r\\n\" + ", "+\t\t\t\"\tfinal Iterable<String> iC = (Iterable<String>)emptyCollection(); // 5\\r\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot cast from Collection<Object> to Iterable<String>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f43e772bd0a114234ce54ff8e37ec137", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 400, "methodNumberAfterChange": 400, "signatureBeforeChange": " \tpublic void test396()", "signatureAfterChange": " \tpublic void test396()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 22)\\r\\n\" + ", "-\t\t\t\"\tfinal Collection<String> cL = (Collection<String>)emptyList(); // 2\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tfinal Collection<String> cL = (Collection<String>)emptyList(); // 2\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 25)\\r\\n\" + ", "-\t\t\t\"\tfinal Iterable<String> iL = (Iterable<String>)emptyList(); // 3\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 25)\\n\" + ", "+\t\t\t\"\tfinal Iterable<String> iL = (Iterable<String>)emptyList(); // 3\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 31)\\r\\n\" + ", "-\t\t\t\"\tfinal Iterable<String> iC = (Iterable<String>)emptyCollection(); // 5\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 31)\\n\" + ", "+\t\t\t\"\tfinal Iterable<String> iC = (Iterable<String>)emptyCollection(); // 5\\n\" + "]}], "num": 32648}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fbb0efb65cfe497e6dbbf1c658ca9a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74540f00443995d37606b86798064075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "272c951df671b1ff904ed6bfcde81c10aeb94ffd", "commitAfterChange": "a9dd5518f87ef0feeb42f8f7b9c8664624a32457", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "signatureAfterChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "diff": ["+\t\t} else {", "+\t\t\t// empty class body declaration (like ';' see https://bugs.eclipse.org/bugs/show_bug.cgi?id=280079).", "+\t\t\tresult = new ASTNode[0];", "-\tfor (int i = 0, max = result.length; i< max; i++) {", "+\tfor (int i = 0, max = result.length; i < max; i++) {", "-\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\tif (((node.bits & ASTNode.HasSyntaxErrors) != 0) && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "-\t\t\t((Initializer) fieldDeclarations[i]).parseStatements(this, typeDeclaration , unit);", "-\t\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\t\tInitializer initializer = (Initializer) fieldDeclarations[i];", "+\t\t\tinitializer.parseStatements(this, typeDeclaration , unit);", "+\t\t\tif (((initializer.bits & ASTNode.HasSyntaxErrors) != 0) && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7529debc68d4da085ea7a600d31fa2c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "+\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\tcase Binding.LOCAL:", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "+\t\t\t// check if compound assignment is the only usage of this local", "+\t\t\tReference.reportOnlyUselesslyReadLocal(currentScope, localBinding, valueRequired);", "+\t\t\tbreak;", "+\t\tcase Binding.FIELD:", "+\t\t\t// check if compound assignment is the only usage of a private field", "+\t\t\treportOnlyUselesslyReadPrivateField(currentScope, (FieldBinding)this.binding, valueRequired);", "+\t}"]}], "num": 19293}
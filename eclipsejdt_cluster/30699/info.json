{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63d6d54b338128d741ca91eb36949966", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ac338f456f35c91130392909c10d183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "0490e8b1eeb14a2cc033060047b6bcfdf849f8a0", "commitAfterChange": "68c4f604f354a3213e3cb188ddbd758a47497f3f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic static void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container)", "signatureAfterChange": "  \tpublic synchronized void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container)", "diff": ["-", "-\tpublic static void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container){", "-", "-\t\tMap projectContainers = (Map)Containers.get(project);", "-\t\tif (projectContainers == null){", "-\t\t\tprojectContainers = new HashMap(1);", "-\t\t\tContainers.put(project, projectContainers);", "-", "-\t\tif (container == null) {", "-\t\t\tprojectContainers.remove(containerPath);", "-\t\t\tMap previousContainers = (Map)PreviousSessionContainers.get(project);", "-\t\t\tif (previousContainers != null){", "-\t\t\t\tpreviousContainers.remove(containerPath);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tprojectContainers.put(containerPath, container);", "-\t\t// do not write out intermediate initialization value", "-\t\tif (container == JavaModelManager.ContainerInitializationInProgress) {", "+\tpublic synchronized void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container){", "+", "+\t\t// set/unset the initialization in progress", "+\t\tHashSet projectInitializations = containerInitializationInProgress(project);", "+\t\tif (container == CONTAINER_INITIALIZATION_IN_PROGRESS) {", "+\t\t\tprojectInitializations.add(containerPath);", "+\t\t\t", "+\t\t\t// do not write out intermediate initialization value", "+\t\t} else {", "+\t\t\tprojectInitializations.remove(containerPath);", "+", "+\t\t\tMap projectContainers = (Map)this.containers.get(project);", "+\t\t\tif (projectContainers == null){", "+\t\t\t\tprojectContainers = new HashMap(1);", "+\t\t\t\tthis.containers.put(project, projectContainers);", "+\t\t\t}", "+\t", "+\t\t\tif (container == null) {", "+\t\t\t\tprojectContainers.remove(containerPath);", "+\t\t\t\tMap previousContainers = (Map)this.previousSessionContainers.get(project);", "+\t\t\t\tif (previousContainers != null){", "+\t\t\t\t\tpreviousContainers.remove(containerPath);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tprojectContainers.put(containerPath, container);", "+\t\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c151fd73655c1a511ce924bca0075cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "64daeb17943302da145ef115d15261de8d97b017", "commitAfterChange": "8c36621cf84c38f056b439d0f0ca65c3c7b433c1", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tif (manager.containerPutIfInitializingWithSameEntries(containerPath, affectedProjects, respectiveContainers))", "+\t\t\treturn;", "-\t\tfinal int projectLength = affectedProjects.length;", "+\t\tfinal int projectLength = affectedProjects.length;\t", "-\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, newContainer);", "+\t\t\t\tmanager.containerPut(affectedProject, containerPath, newContainer);", "-\t\t\tIClasspathContainer oldContainer = JavaModelManager.getJavaModelManager().containerGet(affectedProject, containerPath);", "+\t\t\tIClasspathContainer oldContainer = manager.containerGet(affectedProject, containerPath);", "-\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, newContainer);", "+\t\t\tmanager.containerPut(affectedProject, containerPath, newContainer);", "-\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker", "+\t\t\t\t\tmanager.containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54339ef753168597bf3a7bab4b68a7b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t", "+\t\t//TODO: need support for avoiding reentering calls (through getResolvedClasspath", "+", "-\t", "+\t\t\t", "-\t\t\tMap perProjectContainers = (Map)JavaModelManager.Containers.get(affectedProject);", "-\t\t\tif (perProjectContainers == null){", "-\t\t\t\tperProjectContainers = new HashMap();", "-\t\t\t\tJavaModelManager.Containers.put(affectedProject, perProjectContainers);", "-\t\t\t} else {", "-\t\t\t\tIClasspathContainer oldContainer = (IClasspathContainer) perProjectContainers.get(containerPath);", "-\t\t\t\tif (oldContainer != null && oldContainer.equals(respectiveContainers[i])){", "-\t\t\t\t\taffectedProjects[i] = null; // filter out this project - container did not change", "-\t\t\t\t\tcontinue;", "+\t\t\tIClasspathContainer oldContainer = JavaModelManager.containerGet(affectedProject, containerPath);", "+\t\t\tif (oldContainer == JavaModelManager.ContainerInitializationInProgress) {", "+\t\t\t\tMap previousContainerValues = (Map)JavaModelManager.PreviousSessionContainers.get(affectedProject);", "+\t\t\t\tif (previousContainerValues != null){", "+\t\t\t\t\tIClasspathContainer previousContainer = (IClasspathContainer)previousContainerValues.get(containerPath);", "+\t\t\t\t\tif (previousContainer != null) {", "+\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\t\t\tSystem.out.println(\"CPContainer INIT - reentering access to project container: [\"+affectedProject.getElementName()+\"] \" + containerPath + \" during its initialization, will see previous value: \"+ previousContainer); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tJavaModelManager.containerPut(affectedProject, containerPath, previousContainer); ", "+\t\t\t\t\t}", "+\t\t\t\t\toldContainer = previousContainer;", "+\t\t\tif (oldContainer != null && oldContainer.equals(respectiveContainers[i])){// TODO: could improve to only compare entries", "+\t\t\t\taffectedProjects[i] = null; // filter out this project - container did not change", "+\t\t\t\tcontinue;", "+\t\t\t}", "-\t\t\t\tremaining++;", "+\t\t\t\tremaining++; ", "-\t\t\tperProjectContainers.put(containerPath, newContainer);", "+\t\t\tJavaModelManager.containerPut(affectedProject, containerPath, newContainer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c3337afd1fbb87cbc15d89c22a44f48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "0490e8b1eeb14a2cc033060047b6bcfdf849f8a0", "commitAfterChange": "68c4f604f354a3213e3cb188ddbd758a47497f3f", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tif (newContainer == null) newContainer = JavaModelManager.ContainerInitializationInProgress; // 30920 - prevent infinite loop", "+\t\t\tif (newContainer == null) newContainer = JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS; // 30920 - prevent infinite loop", "-\t\t\t\tJavaModelManager.containerPut(affectedProject, containerPath, newContainer);", "+\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, newContainer);", "-\t\t\tIClasspathContainer oldContainer = JavaModelManager.containerGet(affectedProject, containerPath);", "-\t\t\tif (oldContainer == JavaModelManager.ContainerInitializationInProgress) {", "-\t\t\t\tMap previousContainerValues = (Map)JavaModelManager.PreviousSessionContainers.get(affectedProject);", "+\t\t\tIClasspathContainer oldContainer = JavaModelManager.getJavaModelManager().containerGet(affectedProject, containerPath);", "+\t\t\tif (oldContainer == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) {", "+\t\t\t\tMap previousContainerValues = (Map)JavaModelManager.getJavaModelManager().previousSessionContainers.get(affectedProject);", "-\t\t\t\t\t\tJavaModelManager.containerPut(affectedProject, containerPath, previousContainer); ", "+\t\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, previousContainer); ", "-\t\t\tJavaModelManager.containerPut(affectedProject, containerPath, newContainer);", "+\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, newContainer);", "-\t\t\t\t\tJavaModelManager.containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker", "+\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97375b32db6e14d61291783c064b7f87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "diff": ["-\t", "-\t\tMap projectContainers = (Map)JavaModelManager.Containers.get(project);", "-\t\tif (projectContainers == null){", "-\t\t\tprojectContainers = new HashMap(1);", "-\t\t\tJavaModelManager.Containers.put(project, projectContainers);", "-\t\t}", "-\t\tIClasspathContainer container = (IClasspathContainer)projectContainers.get(containerPath);", "-\t", "+", "+\t\tIClasspathContainer container = JavaModelManager.containerGet(project, containerPath);", "+", "-\t\t\t\tprojectContainers.put(containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\tSystem.out.println(\"CPContainer INIT - triggering initialization of: [\"+project.getElementName()+\"] \" + containerPath + \" using initializer: \"+ initializer); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t\t\tnew Exception(\"FAKE exception for dumping current CPContainer ([\"+project.getElementName()+\"] \"+ containerPath+ \")INIT invocation stack trace\").printStackTrace(); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t\t}", "+\t\t\t\tJavaModelManager.containerPut(project, containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles", "-\t\t\t\t\tcontainer = (IClasspathContainer)projectContainers.get(containerPath);", "+\t\t\t\t\tcontainer = JavaModelManager.containerGet(project, containerPath);", "-\t\t\t\t\tif (!ok) JavaModelManager.Containers.put(project, null); // flush cache", "-\t\t\t\t}", "-\t\t\t\tif (container != null){", "-\t\t\t\t\tprojectContainers.put(containerPath, container);", "+\t\t\t\t\tif (!ok) JavaModelManager.containerPut(project, containerPath, null); // flush cache", "-\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: [\"+project.getElementName()+\"] \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$//$NON-NLS-3$", "+\t\t\t} else {", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\tSystem.out.println(\"CPContainer INIT - no initializer found for: \"+project.getElementName()+\"] \" + containerPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}"]}], "num": 30699}
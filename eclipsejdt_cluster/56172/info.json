{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61e1c727dd57215536121ab1bb19002b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d75187d3448a01ba7b9193225dddfaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void exitAnyExceptionHandler()", "signatureAfterChange": "  \tpublic void exitAnyExceptionHandler()", "diff": ["-\t\tif (this.anyExceptionLabelsCount == 0) return;", "-\t\tExceptionLabel currentLabel = this.anyExceptionLabels[this.anyExceptionLabelsCount-1];", "-\t\tif (currentLabel.start == currentLabel.codeStream.position) {", "-\t\t\t// discard empty exception handler", "-\t\t\tthis.anyExceptionLabels[--this.anyExceptionLabelsCount] = null;", "-\t\t\tcurrentLabel.codeStream.removeExceptionHandler(currentLabel);", "-\t\t} else {", "-\t\t\tcurrentLabel.placeEnd();", "+\t\tif (this.anyExceptionLabel != null) {", "+\t\t\tthis.anyExceptionLabel.placeEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3025129568870d7a9710675dab3292", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean flag, \t\t\tboolean statementsRecovery)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tCompilerOptions options, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out)", "diff": ["-\tprivate Compiler(", "+\tpublic Compiler(", "-\t\t\tMap settings,", "+\t\t\tCompilerOptions options,", "-\t\t\tPrintWriter out,", "-\t\t\tboolean parseLiteralExpressionsAsConstants,", "-\t\t\tboolean storeAnnotations,", "-\t\t\tboolean flag,", "-\t\t\tboolean statementsRecovery) {", "-", "-\t\t// create a problem handler given a handling policy", "-\t\tthis.options = new CompilerOptions(settings);", "-\t\tthis.options.performStatementsRecovery = statementsRecovery;", "-\t\tif (flag) { // boolean parameters are significant, pass them down", "-\t\t\tthis.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;", "-\t\t\tthis.options.storeAnnotations = storeAnnotations;", "-\t\t}", "+\t\t\tPrintWriter out) {", "+\t\t", "+\t\tthis.options = options;"]}], "num": 56172}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2828f12f523d14705a36ebbe5c0ec444", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02bc9114b7ec05193d100f208395c3a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "994909f27ab64cbff8a4b8b71b6f8d78e265bc42", "commitAfterChange": "fd0bab5fda3357e5a56e4647b1a6d36779abe285", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "diff": ["- */\r", "-public boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress) {\r", "-\tif (VERBOSE) System.out.println(\"-> performing concurrent job : START - \" + searchJob); //$NON-NLS-1$\r", "-\tboolean status = FAILED;\r", "-\tif (awaitingJobsCount() > 0){\r", "-\t\tswitch(waitingPolicy){\r", "-\t\t\t\r", "-\t\t\tcase ForceImmediate :\r", "-\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : NOT READY - ForceImmediate - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\tboolean wasEnabled = isEnabled();\r", "-\t\t\t\t\tdisable(); // pause indexing\r", "-\t\t\t\t\tstatus = searchJob.execute();\r", "-\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (wasEnabled) enable();\r", "-\t\t\t\treturn status;\r", "-\t\t\tcase CancelIfNotReady :\r", "-\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : NOT READY - CancelIfNotReady - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\tprogress.setCanceled(true);\r", "-\t\t\t\tbreak; \r", "-\t\t\tcase WaitUntilReady :\r", "+\t */\r", "+\tpublic boolean performConcurrentJob(\r", "+\t\tIJob searchJob,\r", "+\t\tint waitingPolicy,\r", "+\t\tIProgressMonitor progress) {\r", "+\r", "+\t\tif (VERBOSE)\r", "+\t\t\tSystem.out.println(\"-> performing concurrent job : START - \" + searchJob); //$NON-NLS-1$\r", "+\t\tboolean status = IJob.FAILED;\r", "+\t\tif (awaitingJobsCount() > 0) {\r", "+\t\t\tswitch (waitingPolicy) {\r", "+\r", "+\t\t\t\tcase IJob.ForceImmediate :\r", "+\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\tSystem.out.println(\r", "+\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - ForceImmediate - \" + searchJob);//$NON-NLS-1$\r", "+\t\t\t\t\tboolean wasEnabled = isEnabled();\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tdisable(); // pause indexing\r", "+\t\t\t\t\t\tstatus = searchJob.execute();\r", "+\t\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\t\tSystem.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\tif (wasEnabled)\r", "+\t\t\t\t\t\t\tenable();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn status;\r", "+\t\t\t\tcase IJob.CancelIfNotReady :\r", "+\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\tSystem.out.println(\r", "+\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - CancelIfNotReady - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\t\t\tprogress.setCanceled(true);\r", "+\t\t\t\t\tbreak;\r", "+\r", "+\t\t\t\tcase IJob.WaitUntilReady :\r", "-\t\t\t\t\t\tif (progress != null && progress.isCanceled()) throw new OperationCanceledException();\r", "-\t\t\t\t\t\tcurrentJob = currentJob(); // currentJob can be null when jobs have been added to the queue but job manager is not enabled\r", "-\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob){\r", "-\t\t\t\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : NOT READY - WaitUntilReady - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\tif (progress != null){\r", "-\t\t\t\t\t\t\t\tprogress.subTask(Util.bind(\"manager.filesToIndex\", Integer.toString(awaitingWork))); //$NON-NLS-1$\r", "+\t\t\t\t\t\tif (progress != null && progress.isCanceled())\r", "+\t\t\t\t\t\t\tthrow new OperationCanceledException();\r", "+\t\t\t\t\t\tcurrentJob = currentJob();\r", "+\t\t\t\t\t\t// currentJob can be null when jobs have been added to the queue but job manager is not enabled\r", "+\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob) {\r", "+\t\t\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\r", "+\t\t\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - WaitUntilReady - \" + searchJob);//$NON-NLS-1$\r", "+\t\t\t\t\t\t\tif (progress != null) {\r", "+\t\t\t\t\t\t\t\tprogress.subTask(\r", "+\t\t\t\t\t\t\t\t\tUtil.bind(\"manager.filesToIndex\", Integer.toString(awaitingWork))); //$NON-NLS-1$\r", "-\t\t\t\t\t\t} catch(InterruptedException e){\r", "+\t\t\t\t\t\t} catch (InterruptedException e) {\r", "+\t\t\t}\r", "+\t\tstatus = searchJob.execute();\r", "+\t\tif (VERBOSE)\r", "+\t\t\tSystem.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "+\t\treturn status;\r", "-\tstatus = searchJob.execute();\r", "-\tif (VERBOSE) System.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "-\treturn status;\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08566f54ff9de337199016c5bacb2cea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 103, "signatureBeforeChange": " private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature)", "signatureAfterChange": " private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature)", "diff": ["+}", "+private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature) {", "+\tcountLabels = 0;", "+\tswitch(opcode) {", "+\t\tcase Opcodes.OPC_getfield :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth++;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_getstatic :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth += 2;", "+\t\t\t} else {", "+\t\t\t\tstackDepth++;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_putfield :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth -= 3;", "+\t\t\t} else {", "+\t\t\t\tstackDepth -= 2;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_putstatic :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth -= 2;", "+\t\t\t} else {", "+\t\t\t\tstackDepth--;", "+\t\t\t}", "+\t}", "+\tif (stackDepth > stackMax) {", "+\t\tstackMax = stackDepth;", "+\t}", "+\tif (classFileOffset + 2 >= bCodeStream.length) {", "+\t\tresizeByteArray();", "+\t}", "+\tposition++;", "+\tbCodeStream[classFileOffset++] = opcode;", "+\twriteUnsignedShort(constantPool.literalIndexForField(declaringClass, name, signature));", "+}", "-private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature) {", "-\tcountLabels = 0;", "-\tswitch(opcode) {", "-\t\tcase OPC_getfield :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth++;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase OPC_getstatic :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth += 2;", "-\t\t\t} else {", "-\t\t\t\tstackDepth++;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase OPC_putfield :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth -= 3;", "-\t\t\t} else {", "-\t\t\t\tstackDepth -= 2;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase OPC_putstatic :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth -= 2;", "-\t\t\t} else {", "-\t\t\t\tstackDepth--;", "-\t\t\t}", "-\t}", "-\tif (stackDepth > stackMax) {", "-\t\tstackMax = stackDepth;", "-\t}", "-\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\tresizeByteArray();", "-\t}", "-\tposition++;", "-\tbCodeStream[classFileOffset++] = opcode;", "-\twriteUnsignedShort(constantPool.literalIndexForField(declaringClass, name, signature));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29167026612c2742d506de49143ab07a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public FieldBinding addSyntheticFieldForEnumValues()", "signatureAfterChange": " public FieldBinding addSyntheticFieldForEnumValues()", "diff": ["-\t\t\tAccPrivate | AccStatic | AccSynthetic | AccFinal,", "+\t\t\tClassFileConstants.AccPrivate | ClassFileConstants.AccStatic | ClassFileConstants.AccSynthetic | ClassFileConstants.AccFinal,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bbd2695c9751d54095a6f94da8d830a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "df7db86dfdaff61d3ebc9328b44d180f263988fe", "commitAfterChange": "d781dcbe8a593d5ba6dc04230bf23771b905f7bd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\t\t\t\t\tif (!isDigit(this.currentCharacter)) {", "+\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "-\t\t\t\tif (!isDigit(this.currentCharacter))", "+\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "-\t\t\t\t\tif (!isDigit(this.currentCharacter))", "+\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "-\t\tif (!isDigit(this.currentCharacter))", "+\t\tif (!ScannerHelper.isDigit(this.currentCharacter))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326f416fa6204eab1ed3ec1caabb4973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\tcase FIELD : // assigning to a field", "+\t\t\tcase Binding.FIELD : // assigning to a field", "-\t\t\tcase LOCAL : // assigning to a local variable (cannot assign to outer local)", "+\t\t\tcase Binding.LOCAL : // assigning to a local variable (cannot assign to outer local)", "-\t\t\tcase FIELD : // assigning to a field", "+\t\t\tcase Binding.FIELD : // assigning to a field", "-\t\t\tcase LOCAL : // assigning to a local variable", "+\t\t\tcase Binding.LOCAL : // assigning to a local variable"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36dafcd42958add6e3826c4db88db36c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic SyntheticMethodBinding(FieldBinding targetField, ReferenceBinding declaringClass, TypeBinding enumBinding, char[] selector)", "signatureAfterChange": "  \tpublic SyntheticMethodBinding(FieldBinding targetField, ReferenceBinding declaringClass, TypeBinding enumBinding, char[] selector)", "diff": ["-\t\tthis.modifiers = AccDefault | AccStatic | AccSynthetic;", "+\t\tthis.modifiers = ClassFileConstants.AccDefault | ClassFileConstants.AccStatic | ClassFileConstants.AccSynthetic;", "-\t\t\tthis.modifiers |= AccStrictfp;", "+\t\t\tthis.modifiers |= ClassFileConstants.AccStrictfp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "404fc77593296a7fa388f8b37f63b2a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "80c078ddcf769ceb84a30bdd1354fc49a196e760", "commitAfterChange": "1e3ac51cb3938f7e9fd57cd2551e590148671265", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": "\r public void parseError(\r \tint startPosition, \r \tint endPosition, \r \tchar[] currentTokenSource, \r \tString errorTokenName, \r \tString[] possibleTokens,\r \tReferenceContext context,\r \tCompilationResult compilationResult)", "signatureAfterChange": "\r public void parseError(\r \tint startPosition, \r \tint endPosition, \r \tchar[] currentTokenSource, \r \tString errorTokenName, \r \tString[] possibleTokens,\r \tReferenceContext context,\r \tCompilationResult compilationResult)", "diff": ["-\t\t\t\tParsingErrorOnKeywordNoSuggestion,\r", "+\t\t\t\tIProblem.ParsingErrorOnKeywordNoSuggestion,\r", "-\t\t\t\tParsingErrorNoSuggestion,\r", "+\t\t\t\tIProblem.ParsingErrorNoSuggestion,\r", "-\t\t\tParsingErrorOnKeyword,\r", "+\t\t\tIProblem.ParsingErrorOnKeyword,\r", "-\t\tParsingError,\r", "+\t\tIProblem.ParsingError,\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f7e60a20e4e6f02e634082a3da8a39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tboolean isConditionTrue = cst == null || (cst != NotAConstant && cst.booleanValue() == true);", "-\t\tboolean isConditionFalse = cst != null && (cst != NotAConstant && cst.booleanValue() == false);", "+\t\tboolean isConditionTrue = cst == null || (cst != Constant.NotAConstant && cst.booleanValue() == true);", "+\t\tboolean isConditionFalse = cst != null && (cst != Constant.NotAConstant && cst.booleanValue() == false);", "-\t\tboolean isConditionOptimizedTrue = cst == null ||  (cst != NotAConstant && cst.booleanValue() == true);", "-\t\tboolean isConditionOptimizedFalse = cst != null && (cst != NotAConstant && cst.booleanValue() == false);", "+\t\tboolean isConditionOptimizedTrue = cst == null ||  (cst != Constant.NotAConstant && cst.booleanValue() == true);", "+\t\tboolean isConditionOptimizedFalse = cst != null && (cst != Constant.NotAConstant && cst.booleanValue() == false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4520885eed92f86182b5f75fb5b80f8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\tif ((left.constant != NotAConstant) && (left.constant.typeID() == T_boolean)) {", "+\t\t\tif ((left.constant != Constant.NotAConstant) && (left.constant.typeID() == T_boolean)) {", "-\t\t\tif ((right.constant != NotAConstant) && (right.constant.typeID() == T_boolean)) {", "+\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.typeID() == T_boolean)) {", "-\t\t\tif ((left.constant != NotAConstant) && (left.constant.typeID() == T_boolean)) {", "+\t\t\tif ((left.constant != Constant.NotAConstant) && (left.constant.typeID() == T_boolean)) {", "-\t\t\tif ((right.constant != NotAConstant) && (right.constant.typeID() == T_boolean)) {", "+\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.typeID() == T_boolean)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e16a9a9a2bd46c6ede4a70bc938464b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic ConstructorDeclaration createDefaultConstructor( \t\tboolean needExplicitConstructorCall, \t\tboolean needToInsert)", "signatureAfterChange": " \t \tpublic ConstructorDeclaration createDefaultConstructor( \t\tboolean needExplicitConstructorCall, \t\tboolean needToInsert)", "diff": ["-\t\tif (modifiers != AccDefault) {", "+\t\tif (modifiers != ClassFileConstants.AccDefault) {", "-\t\t\t\t(((this.bits & ASTNode.IsMemberType) != 0) && (modifiers & AccPrivate) != 0)", "-\t\t\t\t\t? AccDefault", "-\t\t\t\t\t: modifiers & AccVisibilityMASK;", "+\t\t\t\t(((this.bits & ASTNode.IsMemberType) != 0) && (modifiers & ClassFileConstants.AccPrivate) != 0)", "+\t\t\t\t\t? ClassFileConstants.AccDefault", "+\t\t\t\t\t: modifiers & ExtraCompilerModifiers.AccVisibilityMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66039982f090ff9284bd19f4d82621b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6d4fe8b897d9f85de3c7e4f3c65c2b0dfb35f1ed", "commitAfterChange": "e99876c3df14b077c8fdb45729d7e80e1c7f1686", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\tif (current != original) {", "+\t\t\t\t\t\tif (current.hasSubstitutedParameters() || original.typeVariables != Binding.NO_TYPE_VARIABLES) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "673e060bc2da1d03281996509b546fc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FieldBinding addSyntheticFieldForAssert(BlockScope blockScope)", "signatureAfterChange": " public FieldBinding addSyntheticFieldForAssert(BlockScope blockScope)", "diff": ["-\t\t\tAccDefault | AccStatic | AccSynthetic | AccFinal,", "+\t\t\tClassFileConstants.AccDefault | ClassFileConstants.AccStatic | ClassFileConstants.AccSynthetic | ClassFileConstants.AccFinal,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dd0b96f0bee447cd89e4ff0ca6e2762", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "commitAfterChange": "8c631374d51cd9cce66092e187c2523badcba90a", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \t\tprivate void startLoggingProblems(int errors, int warnings)", "signatureAfterChange": " \t\tprivate void startLoggingProblems(int errors, int warnings)", "diff": ["-\t\t\tthis.parameters.put(NUMBER_OF_PROBLEMS, new Integer(errors + warnings));", "-\t\t\tthis.parameters.put(NUMBER_OF_ERRORS, new Integer(errors));", "-\t\t\tthis.parameters.put(NUMBER_OF_WARNINGS, new Integer(warnings));", "-\t\t\tthis.printTag(PROBLEMS, this.parameters, true, false);", "+\t\t\tthis.parameters.put(Logger.NUMBER_OF_PROBLEMS, new Integer(errors + warnings));", "+\t\t\tthis.parameters.put(Logger.NUMBER_OF_ERRORS, new Integer(errors));", "+\t\t\tthis.parameters.put(Logger.NUMBER_OF_WARNINGS, new Integer(warnings));", "+\t\t\tthis.printTag(Logger.PROBLEMS, this.parameters, true, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "752e52956dba30f2958dfc1ac94395e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "commitAfterChange": "8c631374d51cd9cce66092e187c2523badcba90a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \t\tpublic void printStats(Main main)", "signatureAfterChange": "  \t\tpublic void printStats(Main main)", "diff": ["-\t\t\tif ((this.tagBits & XML) != 0) {", "-\t\t\t\tthis.printTag(STATS, null, true, false);", "+\t\t\tif ((this.tagBits & Logger.XML) != 0) {", "+\t\t\t\tthis.printTag(Logger.STATS, null, true, false);", "-\t\t\tif ((this.tagBits & XML) != 0) {", "-\t\t\t\tthis.endTag(STATS);", "+\t\t\tif ((this.tagBits & Logger.XML) != 0) {", "+\t\t\t\tthis.endTag(Logger.STATS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7580ba6c4cfaefc516a0a92a3b36a2d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "commitAfterChange": "8c631374d51cd9cce66092e187c2523badcba90a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\tpublic void logException(Exception e)", "signatureAfterChange": " \t\tpublic void logException(Exception e)", "diff": ["-\t\t\tif ((this.tagBits & XML) != 0) {", "+\t\t\tif ((this.tagBits & Logger.XML) != 0) {", "-\t\t\t\tthis.parameters.put(MESSAGE, message);", "-\t\t\t\tthis.parameters.put(CLASS, e.getClass());", "-\t\t\t\tthis.printTag(EXCEPTION, this.parameters, true, true);", "+\t\t\t\tthis.parameters.put(Logger.MESSAGE, message);", "+\t\t\t\tthis.parameters.put(Logger.CLASS, e.getClass());", "+\t\t\t\tthis.printTag(Logger.EXCEPTION, this.parameters, true, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7970e6580b79e139094ab1b71894d7eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic SyntheticMethodBinding(SourceTypeBinding declaringEnum, char[] selector)", "signatureAfterChange": " \tpublic SyntheticMethodBinding(SourceTypeBinding declaringEnum, char[] selector)", "diff": ["-\t    this.modifiers = AccFinal | AccPublic | AccStatic;", "+\t    this.modifiers = ClassFileConstants.AccFinal | ClassFileConstants.AccPublic | ClassFileConstants.AccStatic;", "-\t\t\tthis.modifiers |= AccStrictfp;", "+\t\t\tthis.modifiers |= ClassFileConstants.AccStrictfp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8421a6174ac4d792d39447b0b66e74c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void checkModifiers()", "signatureAfterChange": "  \tpublic void checkModifiers()", "diff": ["-\t\tif (((modifiers & AccJustFlag) & ~AccFinal) != 0)", "+\t\tif (((modifiers & ExtraCompilerModifiers.AccJustFlag) & ~ClassFileConstants.AccFinal) != 0)", "-\t\t\tmodifiers = (modifiers & ~AccAlternateModifierProblem) | AccModifierProblem;", "+\t\t\tmodifiers = (modifiers & ~ExtraCompilerModifiers.AccAlternateModifierProblem) | ExtraCompilerModifiers.AccModifierProblem;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87f05d914e970e115d2e8a2146e9fa31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t\t\t\t\t\tmodifiers |= AccAnnotationDefault;", "+\t\t\t\t\t\t\tmodifiers |= ClassFileConstants.AccAnnotationDefault;", "-\t\tboolean isVarargs = (modifiers & AccVarargs) != 0;", "-\t\tmethod.modifiers = modifiers & ~AccVarargs;", "+\t\tboolean isVarargs = (modifiers & ClassFileConstants.AccVarargs) != 0;", "+\t\tmethod.modifiers = modifiers & ~ClassFileConstants.AccVarargs;", "-\t\t\t\t\t\tAccDefault);", "+\t\t\t\t\t\tClassFileConstants.AccDefault);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9f281ac9465f331505e82a57d493c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\t\tthis.indexVariable.setConstant(NotAConstant); // not inlinable", "+\t\t\t\t\tthis.indexVariable.setConstant(Constant.NotAConstant); // not inlinable", "-\t\t\t\t\tthis.maxVariable.setConstant(NotAConstant); // not inlinable", "+\t\t\t\t\tthis.maxVariable.setConstant(Constant.NotAConstant); // not inlinable", "-\t\t\t\t\tthis.collectionVariable.setConstant(NotAConstant); // not inlinable", "+\t\t\t\t\tthis.collectionVariable.setConstant(Constant.NotAConstant); // not inlinable", "-\t\t\t\t\tthis.indexVariable.setConstant(NotAConstant); // not inlinable", "+\t\t\t\t\tthis.indexVariable.setConstant(Constant.NotAConstant); // not inlinable"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a45beb3cbb94a56ad16668dfec1ef879", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "80c078ddcf769ceb84a30bdd1354fc49a196e760", "commitAfterChange": "1e3ac51cb3938f7e9fd57cd2551e590148671265", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "\r public void invalidConstructor(Statement statement, MethodBinding method)", "signatureAfterChange": "\r public void invalidConstructor(Statement statement, MethodBinding method)", "diff": ["-\tint flag = UndefinedConstructor; //default...\r", "+\tint flag = IProblem.UndefinedConstructor; //default...\r", "-\t\t\tflag = UndefinedConstructor;\r", "+\t\t\tflag = IProblem.UndefinedConstructor;\r", "-\t\t\tflag = NotVisibleConstructor;\r", "+\t\t\tflag = IProblem.NotVisibleConstructor;\r", "-\t\t\tflag = AmbiguousConstructor;\r", "+\t\t\tflag = IProblem.AmbiguousConstructor;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd9939562e762047ec0c7c059d595d7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\tcase FIELD : // assigning to a field", "+\t\tcase Binding.FIELD : // assigning to a field", "-\t\tcase LOCAL : // assigning to a local variable (cannot assign to outer local)", "+\t\tcase Binding.LOCAL : // assigning to a local variable (cannot assign to outer local)", "-\t\tcase FIELD : // assigning to a field", "+\t\tcase Binding.FIELD : // assigning to a field", "-\t\tcase LOCAL : // assigning to a local variable", "+\t\tcase Binding.LOCAL : // assigning to a local variable"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da2cf3f6c9bded5649e68055e4f83db4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public boolean canBeInstantiated()", "signatureAfterChange": "  public boolean canBeInstantiated()", "diff": ["-\treturn (this.modifiers & (AccAbstract | AccInterface | AccEnum | AccAnnotation)) == 0;", "+\treturn (this.modifiers & (ClassFileConstants.AccAbstract | ClassFileConstants.AccInterface | ClassFileConstants.AccEnum | ClassFileConstants.AccAnnotation)) == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd716ce1ce3c627ea8f44db6ea0c6f55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": " public void javadocInvalidField(int sourceStart, int sourceEnd, Binding fieldBinding, TypeBinding searchedType, int modifiers)", "signatureAfterChange": " public void javadocInvalidField(int sourceStart, int sourceEnd, Binding fieldBinding, TypeBinding searchedType, int modifiers)", "diff": ["-\t\tcase NotFound :", "+\t\tcase ProblemReasons.NotFound :", "-\t\tcase NotVisible :", "+\t\tcase ProblemReasons.NotVisible :", "-\t\tcase Ambiguous :", "+\t\tcase ProblemReasons.Ambiguous :", "-\t\tcase NoError : // 0", "+\t\tcase ProblemReasons.NoError : // 0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e819ac41a72938d83d7448667d8c56da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "ea2022915119020693b7e7d531fb06ac486249cc", "commitAfterChange": "e9962e9dc43b649b58c5c0f76e81a2905c1b84d3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static boolean isOverlappingRoots(IPath rootPath1, IPath rootPath2)", "signatureAfterChange": " \tpublic static boolean isOverlappingRoots(IPath rootPath1, IPath rootPath2)", "diff": ["-\t\tif (extension1 != null && (extension1.equalsIgnoreCase(EXTENSION_JAR) || extension1.equalsIgnoreCase(EXTENSION_ZIP))) {", "+\t\tif (extension1 != null && (extension1.equalsIgnoreCase(SuffixConstants.EXTENSION_JAR) || extension1.equalsIgnoreCase(SuffixConstants.EXTENSION_ZIP))) {", "-\t\tif (extension2 != null && (extension2.equalsIgnoreCase(EXTENSION_JAR) || extension2.equalsIgnoreCase(EXTENSION_ZIP))) {", "+\t\tif (extension2 != null && (extension2.equalsIgnoreCase(SuffixConstants.EXTENSION_JAR) || extension2.equalsIgnoreCase(SuffixConstants.EXTENSION_ZIP))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0849619a135366e13c8f37cdb1f979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": " \tpublic FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["-\t\t\t\tcase FIELD : // reading a field", "+\t\t\t\tcase Binding.FIELD : // reading a field", "-\t\t\t\tcase LOCAL : // reading a local variable", "+\t\t\t\tcase Binding.LOCAL : // reading a local variable", "-\t\t\tcase FIELD : // assigning to a field", "+\t\t\tcase Binding.FIELD : // assigning to a field", "-\t\t\tcase LOCAL : // assigning to a local variable ", "+\t\t\tcase Binding.LOCAL : // assigning to a local variable "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecaa6270a7eb725ea94b544664eb4a91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public Binding getBinding(char[][] compoundName, int mask, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": "  public Binding getBinding(char[][] compoundName, int mask, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\tBinding binding = getBinding(compoundName[0], mask | TYPE | PACKAGE, invocationSite, true /*resolve*/);", "+\tBinding binding = getBinding(compoundName[0], mask | Binding.TYPE | Binding.PACKAGE, invocationSite, true /*resolve*/);", "-\tif ((mask & FIELD) != 0 && (binding instanceof FieldBinding)) { // was looking for a field and found a field", "+\tif ((mask & Binding.FIELD) != 0 && (binding instanceof FieldBinding)) { // was looking for a field and found a field", "-\tif ((mask & TYPE) != 0 && (binding instanceof ReferenceBinding)) { // was looking for a type and found a type", "+\tif ((mask & Binding.TYPE) != 0 && (binding instanceof ReferenceBinding)) { // was looking for a type and found a type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f149449c03f205829adad0cc5c693aa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "signatureAfterChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "diff": ["-\t\t\tcase T_JavaLangObject :", "-\t\t\tcase T_JavaIoSerializable :", "-\t\t\tcase T_JavaLangCloneable :", "+\t\t\tcase TypeIds.T_JavaLangObject :", "+\t\t\tcase TypeIds.T_JavaIoSerializable :", "+\t\t\tcase TypeIds.T_JavaLangCloneable :", "-\t\tif (otherDim < this.dimensions & otherType.leafComponentType().id == T_JavaLangObject) {", "+\t\tif (otherDim < this.dimensions & otherType.leafComponentType().id == TypeIds.T_JavaLangObject) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f83dbc063c2aaf715cd63bac6fc7c8f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2a24da854cab81b3e14f5a439f9a6b762b3ebc0a", "commitAfterChange": "60e097c0e5cf4a2c998f74536cf889c93554ea9d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because there are no factories\");", "+\t\t\t\tif ( AptPlugin.DEBUG ) trace( \"runAPT: leaving early because there are no factories\");", "-\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because file doesn't exist\");", "+\t\t\t\tif ( AptPlugin.DEBUG ) trace( \"runAPT: leaving early because file doesn't exist\");", "-\t\t\t\tif ( DEBUG ) trace ( \"runAPT:  leaving early because annotationDecls is empty\" );", "+\t\t\t\tif ( AptPlugin.DEBUG ) trace ( \"runAPT:  leaving early because annotationDecls is empty\" );", "-\t\t\t\t\t\tif ( DEBUG ) trace( \"runAPT: invoking processor \" + processor.getClass().getName() );", "+\t\t\t\t\t\tif ( AptPlugin.DEBUG ) trace( \"runAPT: invoking processor \" + processor.getClass().getName() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa9f98d1325621826f39f0c77c8f2050", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "df7db86dfdaff61d3ebc9328b44d180f263988fe", "commitAfterChange": "d781dcbe8a593d5ba6dc04230bf23771b905f7bd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\t\t\t\t\tif (!isDigit(this.currentCharacter)) {", "+\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "-\t\t\t\tif (!isDigit(this.currentCharacter))", "+\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "-\t\t\t\t\tif (!isDigit(this.currentCharacter))", "+\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "-\t\tif (!isDigit(this.currentCharacter))", "+\t\tif (!ScannerHelper.isDigit(this.currentCharacter))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff0f1d57079ec6562b5d464b8fc8cbad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tboolean isConditionTrue = cst != NotAConstant && cst.booleanValue() == true;", "-\t\tboolean isConditionFalse = cst != NotAConstant && cst.booleanValue() == false;", "+\t\tboolean isConditionTrue = cst != Constant.NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;", "-\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "-\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+\t\tboolean isConditionOptimizedTrue = cst != Constant.NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd804fd63cfa71f29b26675d43fc2fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void faultInTypesForFieldsAndMethods()", "signatureAfterChange": " void faultInTypesForFieldsAndMethods()", "diff": ["-\t\tthis.modifiers |= AccDeprecated;", "-\t} else if ((this.modifiers & AccDeprecated) != 0 && scope != null && scope.compilerOptions().sourceLevel >= JDK1_5) {", "+\t\tthis.modifiers |= ClassFileConstants.AccDeprecated;", "+\t} else if ((this.modifiers & ClassFileConstants.AccDeprecated) != 0 && scope != null && scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "-\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\tmodifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;"]}], "num": 14662}
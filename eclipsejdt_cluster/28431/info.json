{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8f33d4faf0fceb33e5b188aec756dab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e18bda7a763652f80b5b50b0a354cce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "df518c50a02deb68aef4a79e965e5cc9496143a4", "commitAfterChange": "f0207f5eaf15c65e4387aad951440df0bb0e1bb0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void searchAllTypeNames( \tIWorkspace workspace, \tchar[] packageName,  \tchar[] typeName, \tint matchMode,  \tboolean isCaseSensitive, \tint searchFor,  \tIJavaSearchScope scope,  \tfinal ITypeNameRequestor nameRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " public void searchAllTypeNames( \tIWorkspace workspace, \tfinal char[] packageName,  \tfinal char[] typeName, \tfinal int matchMode,  \tfinal boolean isCaseSensitive, \tint searchFor,  \tIJavaSearchScope scope,  \tfinal ITypeNameRequestor nameRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\tchar[] packageName, ", "-\tchar[] typeName,", "-\tint matchMode, ", "-\tboolean isCaseSensitive,", "+\tfinal char[] packageName, ", "+\tfinal char[] typeName,", "+\tfinal int matchMode, ", "+\tfinal boolean isCaseSensitive,", "-\tchar classOrInterface;", "+\tfinal char classOrInterface;", "-\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "-\t\t\t\tfinal char[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "+\t\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "+\t\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "-\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "+\t\t\t\t\t\tchar[] simpleName = type.getElementName().toCharArray();", "+\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, type.isClass(), packageDeclaration, simpleName)) {", "+\t\t\t\t\t\t\tif (type.isClass()) {", "+\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tfinal char[] packageDeclaration = parsedUnit.currentPackage == null ? CharOperation.NO_CHAR : CharOperation.concatWith(parsedUnit.currentPackage.getImportName(), '.');", "-\t\t\t\t\t\t\t\tif (!typeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !typeDeclaration.isInterface(), packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (!typeDeclaration.isInterface()) {", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// compute encloising type names", "-\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "-\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t\twhile (enclosing != null) {", "-\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "-\t\t\t\t\t\t\t\t\tif (enclosing instanceof MemberTypeDeclaration) {", "-\t\t\t\t\t\t\t\t\t\tenclosing = ((MemberTypeDeclaration)enclosing).enclosingType;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tenclosing = null;", "+\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !memberTypeDeclaration.isInterface(), packageDeclaration, memberTypeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\t// compute encloising type names", "+\t\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "+\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\t\t\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "+\t\t\t\t\t\t\t\t\t\tif (enclosing instanceof MemberTypeDeclaration) {", "+\t\t\t\t\t\t\t\t\t\t\tenclosing = ((MemberTypeDeclaration)enclosing).enclosingType;", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tenclosing = null;", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// report", "-\t\t\t\t\t\t\t\tif (!memberTypeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t// report", "+\t\t\t\t\t\t\t\t\tif (!memberTypeDeclaration.isInterface()) {", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cf21096059e9bd2abbca8dd81b22958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "c738f8a2f8c38edb037b1844278da54dc7b0f406", "commitAfterChange": "2ceff175173889ef3caa9cfcd05ec98c46b15cac", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "signatureAfterChange": " protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "diff": ["-\treturn matchesType(simpleNamePattern, qualificationPattern, fullyQualifiedTypeName)", "+", "+\t// NOTE: if case insensitive search then simpleNamePattern & qualificationPattern are assumed to be lowercase", "+\tchar[] pattern;", "+\tif (simpleNamePattern == null) {", "+\t\tif (qualificationPattern == null) return ACCURATE_MATCH;", "+\t\tpattern = CharOperation.concat(qualificationPattern, ONE_STAR, '.');", "+\t} else {", "+\t\tpattern = qualificationPattern == null", "+\t\t\t? CharOperation.concat(ONE_STAR, simpleNamePattern)", "+\t\t\t: CharOperation.concat(qualificationPattern, simpleNamePattern, '.');", "+\t}", "+\treturn CharOperation.match(pattern, fullyQualifiedTypeName, this.isCaseSensitive)"]}], "num": 28431}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83cfd7b54efe608ac0df44c57792af87", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15133a2a3576c7ebe93d8bb959ab1bfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "56fd729d2f45ec0b9c9fda262c4722902ccba4f8", "commitAfterChange": "880fcfdc9d3f451c53fbdd4300c71ec2c6ba2a25", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver)", "signatureAfterChange": " \t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver)", "diff": ["-\t \t", "-\t \t// collect parameter type bindings", "-\t \tArrayList parameterList = new ArrayList();", "-\t \tdo {", "-\t \t\treset();", "-\t \t\tBinding parameterBinding = getCompilerBinding(resolver);", "-\t \t\tif (parameterBinding == null) break;", "-\t \t\tparameterList.add(parameterBinding);", "-\t \t} while (this.scanner.token != BindingKeyScanner.END && !this.scanner.isAtParametersStart());", "-\t \tint parameterLength = parameterList.size();", "-\t \tTypeBinding[] parameters = new TypeBinding[parameterLength];", "-\t \tparameterList.toArray(parameters);", "-\t \t", "-\t \t", "-\t \t// collect type parameter bindings", "-\t \tArrayList typeParameterList = new ArrayList();", "-\t \tdo {", "-\t \t\treset();", "-\t \t\tBinding typeParameterBinding = getCompilerBinding(resolver);", "-\t \t\tif (typeParameterBinding == null) break;", "-\t \t\ttypeParameterList.add(typeParameterBinding);", "-\t \t} while (this.scanner.token != BindingKeyScanner.END);", "-\t \tint typeParameterLength = typeParameterList.size();", "-\t \tTypeBinding[] typeParameters = new TypeBinding[typeParameterLength];", "-\t \ttypeParameterList.toArray(typeParameters);", "+\t \tthis.scanner.skipMethodSignature();", "+\t \tchar[] signature = this.scanner.getTokenSource();", "-\t\t\t\tTypeBinding[] methodParameters = method.parameters;", "-\t\t\t\tint methodParameterLength = methodParameters == null ? 0 : methodParameters.length;", "-\t\t\t\tif (methodParameterLength != parameterLength)", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\tfor (int j = 0; j < parameterLength; j++) {", "-\t\t\t\t\tif (methodParameters[j] != parameters[j])", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t}", "-\t\t\t\tTypeBinding[] methodTypeParameters = method.typeVariables;", "-\t\t\t\tint methodTypeParameterLength = methodTypeParameters == null ? 0 : methodTypeParameters.length;", "-\t\t\t\tif (methodTypeParameterLength != typeParameterLength)", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\tfor (int j = 0; j < typeParameterLength; j++) {", "-\t\t\t\t\tif (methodTypeParameters[j] != typeParameters[j])", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t}", "+\t\t\t\tif (CharOperation.equals(signature, method.genericSignature()))", "+\t\t\t\t\treturn method;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6dd109ccf6e6df3eab3dde4a9a52386", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "a5f15775fe7fcb24ae5a0930116a996c10a2359a", "commitAfterChange": "6fb311673d1501ca166502c77ddfedc4e1f01c4f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t  \t MethodBinding getMethodBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver)", "signatureAfterChange": " \t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver)", "diff": ["-\t MethodBinding getMethodBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver) {", "-\t \tMethodBinding[] methods = typeBinding.methods;", "+\t */", "+\t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver) {", "+\t \t", "+\t \t// collect parameter type bindings", "-\t \t} while (this.scanner.token != BindingKeyScanner.END);", "+\t \t} while (this.scanner.token != BindingKeyScanner.END && !this.scanner.isAtTypeParameterStart());", "+\t \t", "+\t \t", "+\t \t// collect type parameter bindings", "+\t \tArrayList typeParameterList = new ArrayList();", "+\t \tdo {", "+\t \t\treset();", "+\t \t\tBinding typeParameterBinding = getCompilerBinding(resolver);", "+\t \t\tif (typeParameterBinding == null) break;", "+\t \t\ttypeParameterList.add(typeParameterBinding);", "+\t \t} while (this.scanner.token != BindingKeyScanner.END);", "+\t \tint typeParameterLength = typeParameterList.size();", "+\t \tTypeBinding[] typeParameters = new TypeBinding[typeParameterLength];", "+\t \ttypeParameterList.toArray(typeParameters);", "+\t \t", "-\t\t\t\tif (methodParameters == null || methodParameters.length != parameterLength)", "+\t\t\t\tint methodParameterLength = methodParameters == null ? 0 : methodParameters.length;", "+\t\t\t\tif (methodParameterLength != parameterLength)", "+\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t}", "+\t\t\t\tTypeBinding[] methodTypeParameters = method.typeVariables;", "+\t\t\t\tint methodTypeParameterLength = methodTypeParameters == null ? 0 : methodTypeParameters.length;", "+\t\t\t\tif (methodTypeParameterLength != typeParameterLength)", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\tfor (int j = 0; j < typeParameterLength; j++) {", "+\t\t\t\t\tif (methodTypeParameters[j] != typeParameters[j])"]}], "num": 49135}
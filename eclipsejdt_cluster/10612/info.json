{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe4773d01a692b8e663edd6fedd1106a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c14d463e2aa0537ffd1e22f67e5bab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper)", "signatureAfterChange": " private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames)", "diff": ["-private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper) {", "+private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames) {", "-\t\ttype = (ReferenceBinding) environment.getTypeFromTypeSignature(wrapper, existingVariables, this);", "+\t\ttype = (ReferenceBinding) environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames);", "-\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, existingVariables, this));", "+\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833a8f9e7465a67344c06876b033cd05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\tlong sourceLevel = this.environment.globalOptions.originalSourceLevel;", "+\t\tCompilerOptions globalOptions = this.environment.globalOptions;", "+\t\tlong sourceLevel = globalOptions.originalSourceLevel;", "+\t\tTypeAnnotationWalker walker = (sourceLevel >= ClassFileConstants.JDK1_8 && globalOptions.isAnnotationBasedNullAnalysisEnabled) ?", "+\t\t\t\tTypeAnnotationWalker.create(binaryType.getTypeAnnotations()) : TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "-\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames);", "+\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames, walker, true/*class*/);", "-\t\t\tthis.superclass = (ReferenceBinding) this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames);", "+\t\t\tthis.superclass = (ReferenceBinding) this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twalker.toSupertype((short) -1));", "+\t\t\t\tshort rank = 0;", "-\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "+\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, walker.toSupertype(rank++)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9db21f21bb442e82cf3047f0a50cea0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames)", "signatureAfterChange": " private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames) {", "+private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames, TypeAnnotationWalker walker) {", "+\tshort rank = 0;", "-\t\tTypeBinding typeFromTypeSignature = this.environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames);", "+\t\tTypeBinding typeFromTypeSignature = this.environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames, walker.toTypeBound(rank++));", "-\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames));", "+\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames, walker.toTypeBound(rank++)));"]}], "num": 10612}
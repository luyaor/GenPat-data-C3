{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3ca5aa7321dfe46d60ac2423cbcfd55", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a1e406c3a38757999a7e33e40c1399c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic abstract File getIndexFile();", "signatureAfterChange": " public File getIndexFile()", "diff": ["-\t */", "-\tpublic abstract File getIndexFile();", "+}", "+public File getIndexFile() {", "+\tif (this.diskIndex == null) return null;", "+", "+\treturn this.diskIndex.getIndexFile();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f3c3fee324071dcd64dbbd1db9f82da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic int getColumnIndentationLevel()", "signatureAfterChange": " \tpublic int getColumnIndentationLevel()", "diff": ["-\t\treturn this.column - 1;", "+\t\tif (this.useTab) {", "+\t\t\treturn (this.column - 1)/ this.tabSize; ", "+\t\t} else {", "+\t\t\treturn this.column - 1;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab8bb159abf0721376c47384f24d2563", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "28746d11ccbd26f27de3e6f37e37aa3059c91ec1", "commitAfterChange": "cbaf16ad0859cb1637417b40466837eb3e833f00", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public boolean isReadOnly()", "signatureAfterChange": "\r public boolean isReadOnly()", "diff": ["-\treturn (this.flags & F_IS_READ_ONLY) != 0;\r", "+\tif (this.file == null) {\r", "+\t\treturn (this.flags & F_IS_READ_ONLY) != 0;\r", "+\t} else {\r", "+\t\treturn this.file.isReadOnly();\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4acf71237620e4d7674ea60984999ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/WorkingCopyOwner.java", "commitBeforeChange": "cf8658c9364eba69da99d0cd3f2810816b79f850", "commitAfterChange": "2d8c25e0e9e9ed7348d0636c5c7a1bbc627b899a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic IBuffer createBuffer(ICompilationUnit workingCopy)", "signatureAfterChange": " \tpublic IBuffer createBuffer(ICompilationUnit workingCopy)", "diff": ["-\t\t// TODO: change to use a org.eclipse.text buffer", "-\t\treturn this.factory.createBuffer(workingCopy);", "+\t\tif (this.factory == null) {", "+\t\t\treturn BufferManager.getDefaultBufferManager().createBuffer(workingCopy);", "+\t\t} else {", "+\t\t\t// TODO: change to use a org.eclipse.text buffer", "+\t\t\treturn this.factory.createBuffer(workingCopy);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c150d45a2e74a8f2759bec953fdc09d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "9579e3add6a99053acfe6faec70c877feca5e8d3", "commitAfterChange": "542e863753b063e393ffd7f35e08fe8fe2f0bb63", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void setFocusType(char[][] compoundName)", "signatureAfterChange": "\r public ReferenceBinding setFocusType(char[][] compoundName)", "diff": ["-public void setFocusType(char[][] compoundName) {\r", "-\tif (compoundName == null || this.lookupEnvironment == null) return;\r", "+public ReferenceBinding setFocusType(char[][] compoundName) {\r", "+\tif (compoundName == null || this.lookupEnvironment == null) return null;\r", "+\tif (this.focusType == null) return null;\r", "-\t\r", "+\treturn this.focusType;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e371e3336e34878d079ab2b949b21bb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "9fff7ba189be037b4cf4f61956b7e287259b8f6d", "commitAfterChange": "8f52c3e814b7d9e86327e186704f1c7e2be78c75", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\tTypeBinding testType = expression.resolveType(upperScope);", "-\t\tif (testType == null)", "-\t\t\treturn;", "-\t\texpression.implicitWidening(testType, testType);", "-\t\tif (!(expression.isConstantValueOfTypeAssignableToType(testType, IntBinding))) {", "-\t\t\tif (!testType.isCompatibleWith(IntBinding)) {", "-\t\t\t\tupperScope.problemReporter().incorrectSwitchType(expression, testType);", "+\t    try {", "+\t\t\tTypeBinding testType = expression.resolveType(upperScope);", "+\t\t\tif (testType == null)", "+\t\t\texpression.implicitWidening(testType, testType);", "+\t\t\tif (!(expression.isConstantValueOfTypeAssignableToType(testType, IntBinding))) {", "+\t\t\t\tif (!testType.isCompatibleWith(IntBinding)) {", "+\t\t\t\t\tupperScope.problemReporter().incorrectSwitchType(expression, testType);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "-\t\t}", "-\t\tif (statements != null) {", "-\t\t\tscope = explicitDeclarations == 0 ? upperScope : new BlockScope(upperScope);", "-\t\t\tint length;", "-\t\t\t// collection of cases is too big but we will only iterate until caseCount", "-\t\t\tcases = new CaseStatement[length = statements.length];", "-\t\t\tint[] casesValues = new int[length];", "-\t\t\tCaseStatement[] duplicateCaseStatements = null;", "-\t\t\tint duplicateCaseStatementsCounter = 0;", "-\t\t\tint counter = 0;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tConstant constant;", "-\t\t\t\tfinal Statement statement = statements[i];", "-\t\t\t\tif ((constant = statement.resolveCase(scope, testType, this)) != null) {", "-\t\t\t\t\t//----check for duplicate case statement------------", "-\t\t\t\t\tif (constant != NotAConstant) {", "-\t\t\t\t\t\tint key = constant.intValue();", "-\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "-\t\t\t\t\t\t\tif (casesValues[j] == key) {", "-\t\t\t\t\t\t\t\tfinal CaseStatement currentCaseStatement = (CaseStatement) statement;", "-\t\t\t\t\t\t\t\tif (duplicateCaseStatements == null) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(cases[j]);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(currentCaseStatement);", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements = new CaseStatement[length];", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = cases[j];", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tboolean found = false;", "-\t\t\t\t\t\t\t\t\tsearchReportedDuplicate: for (int k = 2; k < duplicateCaseStatementsCounter; k++) {", "-\t\t\t\t\t\t\t\t\t\tif (duplicateCaseStatements[k] == statement) {", "-\t\t\t\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\t\t\t\tbreak searchReportedDuplicate;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (!found) {", "+\t\t\tif (statements != null) {", "+\t\t\t\tscope = explicitDeclarations == 0 ? upperScope : new BlockScope(upperScope);", "+\t\t\t\tint length;", "+\t\t\t\t// collection of cases is too big but we will only iterate until caseCount", "+\t\t\t\tcases = new CaseStatement[length = statements.length];", "+\t\t\t\tint[] casesValues = new int[length];", "+\t\t\t\tCaseStatement[] duplicateCaseStatements = null;", "+\t\t\t\tint duplicateCaseStatementsCounter = 0;", "+\t\t\t\tint counter = 0;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tConstant constant;", "+\t\t\t\t\tfinal Statement statement = statements[i];", "+\t\t\t\t\tif ((constant = statement.resolveCase(scope, testType, this)) != null) {", "+\t\t\t\t\t\t//----check for duplicate case statement------------", "+\t\t\t\t\t\tif (constant != NotAConstant) {", "+\t\t\t\t\t\t\tint key = constant.intValue();", "+\t\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "+\t\t\t\t\t\t\t\tif (casesValues[j] == key) {", "+\t\t\t\t\t\t\t\t\tfinal CaseStatement currentCaseStatement = (CaseStatement) statement;", "+\t\t\t\t\t\t\t\t\tif (duplicateCaseStatements == null) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(cases[j]);", "+\t\t\t\t\t\t\t\t\t\tduplicateCaseStatements = new CaseStatement[length];", "+\t\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = cases[j];", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tboolean found = false;", "+\t\t\t\t\t\t\t\t\t\tsearchReportedDuplicate: for (int k = 2; k < duplicateCaseStatementsCounter; k++) {", "+\t\t\t\t\t\t\t\t\t\t\tif (duplicateCaseStatements[k] == statement) {", "+\t\t\t\t\t\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak searchReportedDuplicate;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(currentCaseStatement);", "+\t\t\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcasesValues[counter++] = key;", "-\t\t\t\t\t\tcasesValues[counter++] = key;", "+\t\t\t} else {", "+\t\t\t\tif ((this.bits & UndocumentedEmptyBlockMASK) != 0) {", "+\t\t\t\t\tupperScope.problemReporter().undocumentedEmptyBlock(this.blockStart, this.sourceEnd);", "+\t\t\t\t}", "-\t\t} else {", "-\t\t\tif ((this.bits & UndocumentedEmptyBlockMASK) != 0) {", "-\t\t\t\tupperScope.problemReporter().undocumentedEmptyBlock(this.blockStart, this.sourceEnd);", "-\t\t\t}", "-\t\t}", "+\t    } finally {", "+\t        if (this.scope != null) this.scope.switchCase = null; // no longer inside switch case block", "+\t    }"]}], "num": 32260}
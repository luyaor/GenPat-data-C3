{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3871f823ad0e7f517a4b0b0afb7cf5e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddda5c2231d2656d375dbb0c8961eed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " \tpublic MethodBinding[] getMethods(char[] selector)", "diff": ["-\t\tjava.util.ArrayList matchingMethods = null;", "-\t\t\tint selectorLength = selector.length;", "-\t\t\tfor (int i = 0, length = this.methods.length; i < length; i++) {", "-\t\t\t\tMethodBinding method = this.methods[i];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tif (matchingMethods == null)", "-\t\t\t\t\t\tmatchingMethods = new java.util.ArrayList(2);", "-\t\t\t\t\tmatchingMethods.add(method);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (matchingMethods != null) {", "-\t\t\t\tMethodBinding[] result = new MethodBinding[matchingMethods.size()];", "-\t\t\t\tmatchingMethods.toArray(result);", "+\t\t\tlong range;", "+\t\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\t\tint start = (int) range;", "+\t\t\t\tint length = (int) (range >> 32) - start + 1;", "+\t\t\t\t// cannot optimize since some clients rely on clone array", "+\t\t\t\t// if (start == 0 && length == this.methods.length) ", "+\t\t\t\t//\treturn this.methods; // current set is already interesting subset", "+\t\t\t\tMethodBinding[] result;", "+\t\t\t\tSystem.arraycopy(this.methods, start, result = new MethodBinding[length], 0, length);", "-\t\tif ((tagBits & TagBits.AreMethodsComplete) != 0)", "+\t\tif ((tagBits & TagBits.AreMethodsComplete) != 0) {", "-", "+\t\t}", "-\t\t    \tMethodBinding[] temp = new MethodBinding[length + this.methods.length];", "+\t\t    \tint total = length + this.methods.length;", "+\t\t    \tMethodBinding[] temp = new MethodBinding[total];", "+\t\t    \tif (total > 1) {", "+\t\t    \t\tReferenceBinding.sortMethods(temp, 0, total-1); // resort to ensure order is good", "+\t\t    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b524096589fe6232880de034771f0e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " public MethodBinding[] getMethods(char[] selector)", "diff": ["-\tint count = 0;", "-\tint lastIndex = -1;", "-\tint selectorLength = selector.length;", "-\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\tMethodBinding method = methods[m];", "-\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\tresolveTypesFor(method);", "-\t\t\tcount++;", "-\t\t\tlastIndex = m;", "+\tif ((this.tagBits & TagBits.AreMethodsComplete) != 0) {", "+\t\tlong range;", "+\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\tint start = (int) range, end = (int) (range >> 32);", "+\t\t\tint length = end - start + 1;", "+\t\t\tif ((this.tagBits & TagBits.AreMethodsComplete) != 0) {", "+\t\t\t\t// simply clone method subset", "+\t\t\t\tMethodBinding[] result;\t\t\t\t", "+\t\t\t\tSystem.arraycopy(this.methods, start, result = new MethodBinding[length], 0, length);", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\treturn Binding.NO_METHODS;", "-\tif (count == 1)", "-\t\treturn new MethodBinding[] {methods[lastIndex]};", "-\tif (count > 0) {", "-\t\tMethodBinding[] result = new MethodBinding[count];", "-\t\tcount = 0;", "-\t\tfor (int m = 0; m <= lastIndex; m++) {", "-\t\t\tMethodBinding method = methods[m];", "-\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector))", "-\t\t\t\tresult[count++] = method;", "+\t// lazily sort methods", "+\tif ((this.tagBits & TagBits.AreMethodsSorted) == 0) {", "+\t\tint length = this.methods.length;", "+\t\tif (length > 1) \tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreMethodsSorted;", "+\t}\t", "+\tlong range;", "+\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\tint start = (int) range, end = (int) (range >> 32);", "+\t\tint length = end - start + 1;", "+\t\tMethodBinding[] result = new MethodBinding[length];", "+\t\t// iterate methods to resolve them", "+\t\tfor (int i = start, index = 0; i <= end; i++, index++) {\t", "+\t\t\tresolveTypesFor(result[index] = methods[i]);"]}], "num": 26949}
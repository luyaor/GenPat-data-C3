{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d1721d4997fa3aed29a408604a7af28", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4bdbd0175c423eea084395b9f173503", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, int segmentCount) throws CoreException", "signatureAfterChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "diff": ["-protected void findSourceFiles(IResourceDelta sourceDelta, int segmentCount) throws CoreException {", "+protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException {", "-\tIPath location = resource.getLocation();", "+\tif (md.exclusionPatterns != null && Util.isExcluded(resource, md.exclusionPatterns)) return;", "-\t\t\t\t\tIPath addedPackagePath = location.removeFirstSegments(segmentCount).makeRelative().setDevice(null);", "-\t\t\t\t\tgetOutputFolder(addedPackagePath); // ensure package exists in the output folder", "+\t\t\t\t\tIPath addedPackagePath = resource.getFullPath().removeFirstSegments(segmentCount);", "+\t\t\t\t\tgetOutputFolder(addedPackagePath, md.binaryFolder); // ensure package exists in the output folder", "-\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++)", "-\t\t\t\t\t\tfindSourceFiles(children[i], segmentCount);", "+\t\t\t\t\tfor (int i = 0, l = children.length; i < l; i++)", "+\t\t\t\t\t\tfindSourceFiles(children[i], md, segmentCount);", "-\t\t\t\t\tIPath removedPackagePath = location.removeFirstSegments(segmentCount).makeRelative().setDevice(null);", "-\t\t\t\t\tfor (int i = 0, length = sourceFolders.length; i < length; i++) {", "-\t\t\t\t\t\tif (sourceFolders[i].findMember(removedPackagePath) != null) {", "-\t\t\t\t\t\t\t// only a package fragment was removed, same as removing multiple source files", "-\t\t\t\t\t\t\tgetOutputFolder(removedPackagePath); // ensure package exists in the output folder", "-\t\t\t\t\t\t\tIResourceDelta[] removedChildren = sourceDelta.getAffectedChildren();", "-\t\t\t\t\t\t\tfor (int j = 0, rlength = removedChildren.length; j < rlength; j++)", "-\t\t\t\t\t\t\t\tfindSourceFiles(removedChildren[j], segmentCount);", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\tIPath removedPackagePath = resource.getFullPath().removeFirstSegments(segmentCount);", "+\t\t\t\t\tif (sourceLocations.length > 1) {", "+\t\t\t\t\t\tfor (int i = 0, l = sourceLocations.length; i < l; i++) {", "+\t\t\t\t\t\t\tif (sourceLocations[i].sourceFolder.getFolder(removedPackagePath).exists()) {", "+\t\t\t\t\t\t\t\t// only a package fragment was removed, same as removing multiple source files", "+\t\t\t\t\t\t\t\tgetOutputFolder(removedPackagePath, md.binaryFolder); // ensure package exists in the output folder", "+\t\t\t\t\t\t\t\tIResourceDelta[] removedChildren = sourceDelta.getAffectedChildren();", "+\t\t\t\t\t\t\t\tfor (int j = 0, m = removedChildren.length; j < m; j++)", "+\t\t\t\t\t\t\t\t\tfindSourceFiles(removedChildren[j], md, segmentCount);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tIFolder removedPackageFolder = outputFolder.getFolder(removedPackagePath);", "+\t\t\t\t\tIFolder removedPackageFolder = md.binaryFolder.getFolder(removedPackagePath);", "-\t\t\tString extension = location.getFileExtension();", "+\t\t\tString extension = resource.getFullPath().getFileExtension();", "-\t\t\t\tIPath typePath = location.removeFirstSegments(segmentCount).removeFileExtension().makeRelative().setDevice(null);", "-\t\t\t\tString sourceLocation = location.toString();", "+\t\t\t\tIPath typePath = resource.getFullPath().removeFirstSegments(segmentCount).removeFileExtension();", "+\t\t\t\tString typeLocator = resource.getProjectRelativePath().toString();", "-\t\t\t\t\t\t\tSystem.out.println(\"Compile this added source file \" + sourceLocation); //$NON-NLS-1$", "-\t\t\t\t\t\tlocations.add(sourceLocation);", "+\t\t\t\t\t\t\tSystem.out.println(\"Compile this added source file \" + typeLocator); //$NON-NLS-1$", "+\t\t\t\t\t\tsourceFiles.add(new SourceFile((IFile) resource, md, encoding));", "-\t\t\t\t\t\ttypeNames.add(typeName);", "-\t\t\t\t\t\tif (!newState.isDuplicateLocation(typeName, sourceLocation)) { // adding dependents results in 2 duplicate errors", "+\t\t\t\t\t\tif (!newState.isDuplicateLocator(typeName, typeLocator)) { // adding dependents results in 2 duplicate errors", "-\t\t\t\t\t\tchar[][] definedTypeNames = newState.getDefinedTypeNamesFor(sourceLocation);", "+\t\t\t\t\t\tchar[][] definedTypeNames = newState.getDefinedTypeNamesFor(typeLocator);", "-\t\t\t\t\t\t\tremoveClassFile(typePath);", "+\t\t\t\t\t\t\tremoveClassFile(typePath, md.binaryFolder);", "-\t\t\t\t\t\t\t\t// if the target file is a non-java resource, then markers are removed ", "-\t\t\t\t\t\t\t\t// see bug 2857 Renaming .java class with errors to .txt leaves errors in Task list (1GK06R3)  ", "-\t\t\t\t\t\t\t\tIResource movedToRes = resource.getWorkspace().getRoot().getFile(sourceDelta.getMovedToPath());", "-\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(movedToRes); ", "+\t\t\t\t\t\t\t\t// if the target file is a non-java resource, then markers are removed", "+\t\t\t\t\t\t\t\t// see bug 2857", "+\t\t\t\t\t\t\t\tIResource movedFile = javaBuilder.workspaceRoot.getFile(sourceDelta.getMovedToPath());", "+\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(movedFile); ", "-\t\t\t\t\t\t\t\tfor (int i = 0, length = definedTypeNames.length; i < length; i++)", "-\t\t\t\t\t\t\t\t\tremoveClassFile(packagePath.append(new String(definedTypeNames[i])));", "+\t\t\t\t\t\t\t\tfor (int i = 0, l = definedTypeNames.length; i < l; i++)", "+\t\t\t\t\t\t\t\t\tremoveClassFile(packagePath.append(new String(definedTypeNames[i])), md.binaryFolder);", "-\t\t\t\t\t\tnewState.remove(sourceLocation);", "+\t\t\t\t\t\tnewState.removeLocator(typeLocator);", "-\t\t\t\t\t\t\tSystem.out.println(\"Compile this changed source file \" + sourceLocation); //$NON-NLS-1$", "-\t\t\t\t\t\tlocations.add(sourceLocation);", "-\t\t\t\t\t\ttypeNames.add(typePath.toString());", "+\t\t\t\t\t\t\tSystem.out.println(\"Compile this changed source file \" + typeLocator); //$NON-NLS-1$", "+\t\t\t\t\t\tsourceFiles.add(new SourceFile((IFile) resource, md, encoding));", "-\t\t\t} else if (hasSeparateOutputFolder) {", "-\t\t\t\tif (javaBuilder.filterResource(resource)) return;", "+\t\t\t} else if (md.hasIndependentOutputFolder) {", "+\t\t\t\tif (javaBuilder.filterExtraResource(resource)) return;", "-\t\t\t\tIPath resourcePath = location.removeFirstSegments(segmentCount).makeRelative();", "-\t\t\t\tIResource outputFile = outputFolder.getFile(resourcePath);", "+\t\t\t\tIPath resourcePath = resource.getFullPath().removeFirstSegments(segmentCount);", "+\t\t\t\tIResource outputFile = md.binaryFolder.getFile(resourcePath);", "-\t\t\t\t\t\tgetOutputFolder(resourcePath.removeLastSegments(1)); // ensure package exists in the output folder", "+\t\t\t\t\t\tgetOutputFolder(resourcePath.removeLastSegments(1), md.binaryFolder); // ensure package exists in the output folder", "-\t\t\t\t\t\tgetOutputFolder(resourcePath.removeLastSegments(1)); // ensure package exists in the output folder", "+\t\t\t\t\t\tgetOutputFolder(resourcePath.removeLastSegments(1), md.binaryFolder); // ensure package exists in the output folder"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd4178b1fe14379c97f39e1f9e4eaa93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "3aa96cd0f03615774b8ac0aa730f24089285336b", "commitAfterChange": "a6bc9b89c0f99b3b1a760aa351e68b2be5cc2b5f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r protected void storeProblemsFor(IResource resource, IProblem[] problems)", "signatureAfterChange": "\r protected void storeProblemsFor(IResource resource, IProblem[] problems) throws CoreException", "diff": ["-protected void storeProblemsFor(IResource resource, IProblem[] problems) {\r", "+protected void storeProblemsFor(IResource resource, IProblem[] problems) throws CoreException {\r", "-\t\ttry {\r", "-\t\t\tIProblem problem = problems[i];\r", "-\t\t\tint id = problem.getID();\r", "-\t\t\tswitch (id) {\r", "-\t\t\t\tcase ProblemIrritants.SuperclassMustBeAClass :\r", "-\t\t\t\tcase ProblemIrritants.SuperInterfaceMustBeAnInterface :\r", "-\t\t\t\tcase ProblemIrritants.HierarchyCircularitySelfReference :\r", "-\t\t\t\tcase ProblemIrritants.HierarchyCircularity :\r", "-\t\t\t\tcase ProblemIrritants.HierarchyHasProblems :\r", "-\t\t\t\tcase ProblemIrritants.InvalidSuperclassBase :\r", "-\t\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 1 :\r", "-\t\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 2 :\r", "-\t\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 3 :\r", "-\t\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 4 :\r", "-\t\t\t\tcase ProblemIrritants.InvalidInterfaceBase :\r", "-\t\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 1 :\r", "-\t\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 2 :\r", "-\t\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 3 :\r", "-\t\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 4 :\r", "-\t\t\t\t\t// ensure that this file is always retrieved from source for the rest of the build\r", "-\t\t\t\t\tString fileLocation = resource.getLocation().toString();\r", "-\t\t\t\t\tif (!problemTypeLocations.contains(fileLocation))\r", "-\t\t\t\t\t\tproblemTypeLocations.add(fileLocation);\r", "-\t\t\t}\r", "+\t\tIProblem problem = problems[i];\r", "+\t\tint id = problem.getID();\r", "+\t\tswitch (id) {\r", "+\t\t\tcase ProblemIrritants.SuperclassMustBeAClass :\r", "+\t\t\tcase ProblemIrritants.SuperInterfaceMustBeAnInterface :\r", "+\t\t\tcase ProblemIrritants.HierarchyCircularitySelfReference :\r", "+\t\t\tcase ProblemIrritants.HierarchyCircularity :\r", "+\t\t\tcase ProblemIrritants.HierarchyHasProblems :\r", "+\t\t\tcase ProblemIrritants.InvalidSuperclassBase :\r", "+\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 1 :\r", "+\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 2 :\r", "+\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 3 :\r", "+\t\t\tcase ProblemIrritants.InvalidSuperclassBase + 4 :\r", "+\t\t\tcase ProblemIrritants.InvalidInterfaceBase :\r", "+\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 1 :\r", "+\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 2 :\r", "+\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 3 :\r", "+\t\t\tcase ProblemIrritants.InvalidInterfaceBase + 4 :\r", "+\t\t\t\t// ensure that this file is always retrieved from source for the rest of the build\r", "+\t\t\t\tString fileLocation = resource.getLocation().toString();\r", "+\t\t\t\tif (!problemTypeLocations.contains(fileLocation))\r", "+\t\t\t\t\tproblemTypeLocations.add(fileLocation);\r", "+\t\t}\r", "-\t\t\tIMarker marker = resource.createMarker(ProblemMarkerTag);\r", "-\t\t\tmarker.setAttributes(\r", "-\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, \"ID\", IMarker.CHAR_START, IMarker.CHAR_END, IMarker.LINE_NUMBER}, //$NON-NLS-1$\r", "-\t\t\t\tnew Object[] { \r", "-\t\t\t\t\tproblem.getMessage(),\r", "-\t\t\t\t\tnew Integer(problem.isError() ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING), \r", "-\t\t\t\t\tnew Integer(id),\r", "-\t\t\t\t\tnew Integer(problem.getSourceStart()),\r", "-\t\t\t\t\tnew Integer(problem.getSourceEnd() + 1),\r", "-\t\t\t\t\tnew Integer(problem.getSourceLineNumber())\r", "-\t\t\t\t});\r", "+\t\tIMarker marker = resource.createMarker(ProblemMarkerTag);\r", "+\t\tmarker.setAttributes(\r", "+\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, \"ID\", IMarker.CHAR_START, IMarker.CHAR_END, IMarker.LINE_NUMBER}, //$NON-NLS-1$\r", "+\t\t\tnew Object[] { \r", "+\t\t\t\tproblem.getMessage(),\r", "+\t\t\t\tnew Integer(problem.isError() ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING), \r", "+\t\t\t\tnew Integer(id),\r", "+\t\t\t\tnew Integer(problem.getSourceStart()),\r", "+\t\t\t\tnew Integer(problem.getSourceEnd() + 1),\r", "+\t\t\t\tnew Integer(problem.getSourceLineNumber())\r", "+\t\t\t});\r", "-\t\t\t// compute a user-friendly location\r", "-\t\t\tIJavaElement element = JavaCore.create(resource);\r", "-\t\t\tif (element instanceof org.eclipse.jdt.core.ICompilationUnit) { // try to find a finer grain element\r", "-\t\t\t\torg.eclipse.jdt.core.ICompilationUnit unit = (org.eclipse.jdt.core.ICompilationUnit) element;\r", "-\t\t\t\tIJavaElement fragment = unit.getElementAt(problem.getSourceStart());\r", "-\t\t\t\tif (fragment != null) element = fragment;\r", "-\t\t\t}\r", "-\t\t\tString location = null;\r", "-\t\t\tif (element instanceof JavaElement)\r", "-\t\t\t\tlocation = ((JavaElement) element).readableName();\r", "-\t\t\tif (location != null)\r", "-\t\t\t\tmarker.setAttribute(IMarker.LOCATION, location);\r", "-\t\t} catch(CoreException e) {\r", "-\t\t\tthrow internalException(e);\r", "+\t\t// compute a user-friendly location\r", "+\t\tIJavaElement element = JavaCore.create(resource);\r", "+\t\tif (element instanceof org.eclipse.jdt.core.ICompilationUnit) { // try to find a finer grain element\r", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit unit = (org.eclipse.jdt.core.ICompilationUnit) element;\r", "+\t\t\tIJavaElement fragment = unit.getElementAt(problem.getSourceStart());\r", "+\t\t\tif (fragment != null) element = fragment;\r", "+\t\tString location = null;\r", "+\t\tif (element instanceof JavaElement)\r", "+\t\t\tlocation = ((JavaElement) element).readableName();\r", "+\t\tif (location != null)\r", "+\t\t\tmarker.setAttribute(IMarker.LOCATION, location);\r"]}], "num": 5034}
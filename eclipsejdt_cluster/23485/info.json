{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22c47fe3354fa22ed56959046adb3ddd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca1aca05f647fdcc52cdad9a7ce5cf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationProcessorManager.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic void configure(org.eclipse.jdt.internal.compiler.Compiler compiler, String[] commandLineArguments)", "signatureAfterChange": " \t \tpublic void configure(Main batchCompiler, String[] commandLineArguments)", "diff": ["-\tpublic void configure(org.eclipse.jdt.internal.compiler.Compiler compiler, String[] commandLineArguments) {", "-\t\t// do nothing", "+\tpublic void configure(Main batchCompiler, String[] commandLineArguments) {", "+\t\tif (batchCompiler instanceof EclipseCompiler) {", "+\t\t\tthis.fileManager = ((EclipseCompiler) batchCompiler).fileManager;", "+\t\t} else {", "+\t\t\tString encoding = (String) batchCompiler.options.get(CompilerOptions.OPTION_Encoding);", "+\t\t\tCharset charset = encoding != null ? Charset.forName(encoding) : null;", "+\t\t\tJavaFileManager manager = new EclipseFileManager(batchCompiler, batchCompiler.compilerLocale, charset);", "+\t\t\tArrayList<String> options = new ArrayList<String>();", "+\t\t\tfor (String argument : commandLineArguments) {", "+\t\t\t\toptions.add(argument);", "+\t\t\t}", "+    \t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "+    \t\t\tmanager.handleOption(iterator.next(), iterator);", "+    \t\t}", "+\t\t\tthis.fileManager = manager;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f10caf40bbe3e653542c47f1635bd36e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationProcessorManager.java", "commitBeforeChange": "9d4f7131389390a16a995494da191d8ab6c07c5a", "commitAfterChange": "aa852841b1dd73414418bf5fc5420a74b80d0cd9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void configure(Main batchCompiler, String[] commandLineArguments)", "signatureAfterChange": "  \t@Override \tpublic void configure(Main batchCompiler, String[] commandLineArguments)", "diff": ["-\t\tif (batchCompiler instanceof EclipseCompiler) {", "-\t\t\tthis.fileManager = ((EclipseCompiler) batchCompiler).fileManager;", "-\t\t} else {", "-\t\t\tString encoding = (String) batchCompiler.options.get(CompilerOptions.OPTION_Encoding);", "-\t\t\tCharset charset = encoding != null ? Charset.forName(encoding) : null;", "-\t\t\tJavaFileManager manager = new EclipseFileManager(batchCompiler, batchCompiler.compilerLocale, charset);", "-\t\t\tArrayList<String> options = new ArrayList<String>();", "-\t\t\tfor (String argument : commandLineArguments) {", "-\t\t\t\toptions.add(argument);", "-\t\t\t}", "-\t\t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "-\t\t\t\tmanager.handleOption(iterator.next(), iterator);", "-\t\t\t}", "-\t\t\tthis.fileManager = manager;", "+\t\tif (null != _batchCompiler) {", "+\t\t\tthrow new IllegalStateException(", "+\t\t\t\t\t\"Calling configure() more than once on an AnnotationProcessorManager is not supported\");", "+\t\t}", "+\t\t_batchCompiler  = batchCompiler;", "+\t\t_processors = new ArrayList<ProcessorInfo>();", "+\t\tBatchProcessingEnvImpl processingEnv = new BatchProcessingEnvImpl(this, batchCompiler, commandLineArguments);", "+\t\t_processingEnv = processingEnv;", "+\t\t_procLoader = processingEnv.getFileManager().getClassLoader(StandardLocation.ANNOTATION_PROCESSOR_PATH);", "+\t\t_commandLineProcessors = parseCommandLineProcessors(commandLineArguments);", "+\t\tif (null != _commandLineProcessors) {", "+\t\t\t_commandLineProcessorIter = _commandLineProcessors.iterator();"]}], "num": 23485}
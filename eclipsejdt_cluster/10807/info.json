{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "927040cb0608e1a6a6ef108ab3c80f13", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "388c44dce9a7d22dfb8b1ed93fa8642d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 132, "signatureBeforeChange": " \t\t \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "signatureAfterChange": " \t\t \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "diff": ["-\t\tMethodBinding[] methods = currentType.availableMethods();", "+\t\tMethodBinding[] methods = null;", "+\t\tif (currentType instanceof ParameterizedTypeBinding && invocationSite instanceof CompletionOnQualifiedAllocationExpression) {", "+\t\t\tCompletionOnQualifiedAllocationExpression alloc = (CompletionOnQualifiedAllocationExpression) invocationSite;", "+\t\t\tif ((alloc.bits & ASTNode.IsDiamond) != 0) {", "+\t\t\t\t// inference failed. So don't substitute type arguments. Just return the unsubstituted methods", "+\t\t\t\t// and let the user decide what to substitute.", "+\t\t\t\tParameterizedTypeBinding binding = (ParameterizedTypeBinding) currentType;", "+\t\t\t\tReferenceBinding originalGenericType = binding.genericType();", "+\t\t\t\tif (originalGenericType != null)", "+\t\t\t\t\tmethods = originalGenericType.methods();", "+\t\t\t} else {", "+\t\t\t\tmethods = currentType.availableMethods();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmethods = currentType.availableMethods();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73427fd846ddf8bf79ba12d57e3b49a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "47bb14981c21ab76e1d954dd9d39ee2dfb3dc9f6", "commitAfterChange": "470af167f521a04aa267bae1a43471ece0106b8a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \r \tprivate BlockScope retrieveEnclosingScope(ASTNode node)", "signatureAfterChange": "\r \r \tprivate BlockScope retrieveEnclosingScope(ASTNode node)", "diff": ["-\t\twhile(!(currentNode instanceof MethodDeclaration) && !(currentNode instanceof Initializer)) {\r", "+\t\twhile(!(currentNode instanceof MethodDeclaration) && !(currentNode instanceof Initializer) && !(currentNode instanceof FieldDeclaration)) {\r", "+\t\t\t\treturn typeDecl.staticInitializerScope;\r", "+\t\t\t} else {\r", "+\t\t\t\treturn typeDecl.initializerScope;\r", "+\t\t\t}\r", "+\t\t} else if (currentNode instanceof FieldDeclaration) {\r", "+\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) currentNode;\r", "+\t\t\twhile(!(currentNode instanceof TypeDeclaration)) {\r", "+\t\t\t\tcurrentNode = currentNode.getParent();\r", "+\t\t\t}\r", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.newAstToOldAst.get(currentNode);\r", "+\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {\r"]}], "num": 10807}
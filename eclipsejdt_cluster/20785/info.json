{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cacbf6e67687dcba6828c79a96945c54", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485a44f719a8a5fc2f12746eef885826", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "34b4972480c62fc99b17d4728db2648e98460b52", "commitAfterChange": "a234173ab4d645c8990c97cafa00ec82ce0a909f", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " public void _test_redundant_annotation_03()", "signatureAfterChange": " public void test_missing_default_annotation_02()", "diff": ["-// DISABLED due to dysfunctional global default after Bug 366063 - Compiler should not add synthetic @NonNull annotations", "-public void _test_redundant_annotation_03() {", "-\tcustomOptions.put(JavaCore.COMPILER_NONNULL_IS_DEFAULT, JavaCore.ENABLED);", "-\trunConformTestWithLibs(", "+// test missing default nullness annotation for a package with package-info", "+public void test_missing_default_annotation_02() {", "+\tMap customOptions = getCompilerOptions();", "+\tcustomOptions.put(JavaCore.COMPILER_PB_MISSING_NONNULL_BY_DEFAULT_ANNOTATION, JavaCore.ERROR);", "+\trunNegativeTestWithLibs(", "+\t\tnew String[] {", "+\t\t\t\"p2/package-info.java\",", "+\t\t\t\"package p2;\\n\",", "-\t\t\t\"    @NonNullByDefault void foo() {}\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class Z {\\n\" +", "-\t\t\t\"    @NonNullByDefault void bar() {}\\n\" +", "+\t\t\t\"   void foo() {}\\n\" +", "-\t\t\t\"@org.eclipse.jdt.annotation.NonNullByDefault package p3;\\n\"", "+\t\t\t\"@org.eclipse.jdt.annotation.NonNullByDefault package p3;\\n\",", "+\t\t\t\"p3/Z.java\",", "+\t\t\t\"package p3;\\n\" +", "+\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\"public class Z {\\n\" +", "+\t\t\t\"    @NonNullByDefault void bar() {}\\n\" +", "+\t\t\t\"}\\n\",", "-\t\t\"1. WARNING in p2\\\\Y.java (at line 3)\\n\" +", "-\t\t\"\t@NonNullByDefault\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Nullness default is redundant with the global default\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in p2\\\\Y.java (at line 5)\\n\" +", "-\t\t\"\t@NonNullByDefault void foo() {}\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Nullness default is redundant with a default specified for the enclosing type Y\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in p2\\\\Y.java (at line 8)\\n\" +", "-\t\t\"\t@NonNullByDefault void bar() {}\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Nullness default is redundant with the global default\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in p3\\\\package-info.java (at line 1)\\n\" +", "-\t\t\"\t@org.eclipse.jdt.annotation.NonNullByDefault package p3;\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Nullness default is redundant with the global default\\n\" +", "+\t\t\"1. ERROR in p2\\\\package-info.java (at line 1)\\n\" + ", "+\t\t\"\tpackage p2;\\n\" + ", "+\t\t\"\t        ^^\\n\" + ", "+\t\t\"A default nullness annotation has not been specified for the package p2\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p3\\\\Z.java (at line 4)\\n\" + ", "+\t\t\"\t@NonNullByDefault void bar() {}\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Nullness default is redundant with a default specified for the enclosing package p3\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e0dc94ee25a91ac047582c4ef674442", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 351, "methodNumberAfterChange": 351, "signatureBeforeChange": " public void test200()", "signatureAfterChange": " public void test200()", "diff": ["+\tMap options = getCompilerOptions();", "+\tString compliance = (String) options.get(JavaCore.COMPILER_COMPLIANCE);", "+\tString errorMessage = compliance == JavaCore.VERSION_1_6 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tdouble foo(Collection<String> bar) {return 0; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tdouble foo(Collection<String> bar) {return 0; }\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^\\n\" + ", "-\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tdouble foo(Collection<String> bar) {return 0; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\"", "+\t\terrorMessage"]}], "num": 20785}
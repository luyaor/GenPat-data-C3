{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b14e8389443fc2010ed439971eabed33", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b528a449a33e10aece71c08d0fc8dfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void computeConstant(BlockScope scope, int leftId, int rightId)", "signatureAfterChange": "  \tpublic void computeConstant(BlockScope scope, int leftId, int rightId)", "diff": ["-\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t&& (right.constant != Constant.NotAConstant)) {", "+\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t&& (this.right.constant != Constant.NotAConstant)) {", "-\t\t\t\tconstant =", "+\t\t\t\tthis.constant =", "-\t\t\t\t\t\tleft.constant,", "+\t\t\t\t\t\tthis.left.constant,", "-\t\t\t\t\t\t(bits & OperatorMASK) >> OperatorSHIFT,", "-\t\t\t\t\t\tright.constant,", "+\t\t\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,", "+\t\t\t\t\t\tthis.right.constant,", "-\t\t\t\tconstant = Constant.NotAConstant;", "+\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\tconstant = Constant.NotAConstant;", "+\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\toptimizedBooleanConstant(", "+\t\t\tthis.optimizedBooleanConstant(", "-\t\t\t\t(bits & OperatorMASK) >> OperatorSHIFT,", "+\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4553f088dc217359efca6e27f0a77baa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\tif ((operation.left instanceof SingleNameReference) && ((variableReference = (SingleNameReference) operation.left).binding == binding)) {", "+\t\tif ((operation.left instanceof SingleNameReference) && ((variableReference = (SingleNameReference) operation.left).binding == this.binding)) {", "-\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.right, (operation.bits & OperatorMASK) >> OperatorSHIFT, operation.left.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "+\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.right, (operation.bits & OperatorMASK) >> OperatorSHIFT, operation.left.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "-\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == binding)", "+\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == this.binding)", "-\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.left, operator, operation.right.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "+\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.left, operator, operation.right.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\tif ((bits & FirstAssignmentToLocalMASK) != 0) { // for local variable debug attributes", "+\t\t\tif ((this.bits & FirstAssignmentToLocalMASK) != 0) { // for local variable debug attributes"]}], "num": 19627}
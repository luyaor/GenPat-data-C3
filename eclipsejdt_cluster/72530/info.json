{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27845e328ded3e6a22431b2b550e19c1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019a5e68ff985016bbc31caa5b2a721a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope classScope)", "signatureAfterChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope classScope)", "diff": ["-\t\t\t\tif (superclass != null)", "-\t\t\t\t\tsuperclass.traverse(visitor, scope);", "-\t\t\t\tif (superInterfaces != null) {", "-\t\t\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++)", "-\t\t\t\t\t\tsuperInterfaces[i].traverse(visitor, scope);", "+\t\t\t\tif (this.annotations != null) {", "+\t\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\tif (memberTypes != null) {", "-\t\t\t\t\tint memberTypesLength = memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < memberTypesLength; i++)", "-\t\t\t\t\t\tmemberTypes[i].traverse(visitor, scope);", "+\t\t\t\tif (this.superclass != null)", "+\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "+\t\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\tif (fields != null) {", "-\t\t\t\t\tint fieldsLength = fields.length;", "-\t\t\t\t\tfor (int i = 0; i < fieldsLength; i++) {", "+\t\t\t\tif (this.typeParameters != null) {", "+\t\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (this.memberTypes != null) {", "+\t\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.enums != null) {", "+\t\t\t\t\tint length = this.enums.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.enums[i].traverse(visitor, scope);", "+\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tif (this.fields != null) {", "+\t\t\t\t\tint length = this.fields.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tif ((field = fields[i]).isStatic()) {", "+\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\tif (methods != null) {", "-\t\t\t\t\tint methodsLength = methods.length;", "-\t\t\t\t\tfor (int i = 0; i < methodsLength; i++)", "-\t\t\t\t\t\tmethods[i].traverse(visitor, scope);", "+\t\t\t\tif (this.methods != null) {", "+\t\t\t\t\tint length = this.methods.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307409fdeda47bdcf57e99462fa1fbbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "signatureAfterChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "diff": ["-\t\t\t\tif (superclass != null)", "-\t\t\t\t\tsuperclass.traverse(visitor, scope);", "-\t\t\t\tif (superInterfaces != null) {", "-\t\t\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++)", "-\t\t\t\t\t\tsuperInterfaces[i].traverse(visitor, scope);", "+\t\t\t\tif (this.annotations != null) {", "+\t\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\tif (memberTypes != null) {", "-\t\t\t\t\tint memberTypesLength = memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < memberTypesLength; i++)", "-\t\t\t\t\t\tmemberTypes[i].traverse(visitor, scope);", "+\t\t\t\tif (this.superclass != null)", "+\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "+\t\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\tif (fields != null) {", "-\t\t\t\t\tint fieldsLength = fields.length;", "-\t\t\t\t\tfor (int i = 0; i < fieldsLength; i++) {", "+\t\t\t\tif (this.typeParameters != null) {", "+\t\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (this.memberTypes != null) {", "+\t\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.enums != null) {", "+\t\t\t\t\tint length = this.enums.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.enums[i].traverse(visitor, scope);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (this.fields != null) {", "+\t\t\t\t\tint length = this.fields.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tif ((field = fields[i]).isStatic()) {", "+\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\tif (methods != null) {", "-\t\t\t\t\tint methodsLength = methods.length;", "-\t\t\t\t\tfor (int i = 0; i < methodsLength; i++)", "-\t\t\t\t\t\tmethods[i].traverse(visitor, scope);", "+\t\t\t\tif (this.methods != null) {", "+\t\t\t\t\tint length = this.methods.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);"]}], "num": 72530}
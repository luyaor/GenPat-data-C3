{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2df9caaf1bfe4226e59817cc7b7d2e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a37c072714d062b3349861e56c23482", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": " protected void consumeNestedType()", "signatureAfterChange": " protected void consumeNestedType()", "diff": ["-\tnestedType++;", "+\tthis.nestedType++;", "-\t\tnestedMethod[nestedType] = 0;", "+\t\tthis.nestedMethod[this.nestedType] = 0;", "-\t\tint oldL = nestedMethod.length;", "-\t\tSystem.arraycopy(nestedMethod , 0, (nestedMethod = new int[oldL + 30]), 0, oldL);", "-\t\tnestedMethod[nestedType] = 0;", "+\t\tint oldL = this.nestedMethod.length;", "+\t\tSystem.arraycopy(this.nestedMethod , 0, (this.nestedMethod = new int[oldL + 30]), 0, oldL);", "+\t\tthis.nestedMethod[this.nestedType] = 0;", "-\t\tSystem.arraycopy(variablesCounter, 0, (variablesCounter = new int[oldL + 30]), 0, oldL);", "+\t\tSystem.arraycopy(this.variablesCounter, 0, (this.variablesCounter = new int[oldL + 30]), 0, oldL);", "-\tvariablesCounter[nestedType] = 0;", "+\tthis.variablesCounter[this.nestedType] = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f60b2cbba11e82aa28f904df363d3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": " protected void consumeNestedType()", "signatureAfterChange": " protected void consumeNestedType()", "diff": ["-\tthis.nestedType++;", "-\ttry {", "-\t\tthis.nestedMethod[this.nestedType] = 0;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//except in test's cases, it should never raise", "-\t\tint oldL = this.nestedMethod.length;", "-\t\tSystem.arraycopy(this.nestedMethod , 0, (this.nestedMethod = new int[oldL + 30]), 0, oldL);", "-\t\tthis.nestedMethod[this.nestedType] = 0;", "-\t\t// increase the size of the fieldsCounter as well. It has to be consistent with the size of the nestedMethod collection", "-\t\tSystem.arraycopy(this.variablesCounter, 0, (this.variablesCounter = new int[oldL + 30]), 0, oldL);", "+\tint length = this.nestedMethod.length;", "+\tif (++this.nestedType >= length) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.nestedMethod, 0,", "+\t\t\tthis.nestedMethod = new int[length + 30], 0,", "+\t\t\tlength);", "+\t\t// increase the size of the variablesCounter as well. It has to be consistent with the size of the nestedMethod collection", "+\t\tSystem.arraycopy(", "+\t\t\tthis.variablesCounter, 0,", "+\t\t\tthis.variablesCounter = new int[length + 30], 0,", "+\t\t\tlength);", "+\tthis.nestedMethod[this.nestedType] = 0;"]}], "num": 61934}
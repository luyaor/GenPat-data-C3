{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27404305b807146329780bcca01c03df", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b666c2dbfa5a4022b63a3bfbbf82f50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "677db12ffe2b33d9711034d339aec7b56ab85d41", "commitAfterChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public void save(IProgressMonitor progress, boolean force) throws JavaModelException", "signatureAfterChange": "\r public void save(IProgressMonitor progress, boolean force) throws JavaModelException", "diff": ["+\t\t\tString contents = this.getContents();\r", "+\t\t\tif (contents == null) return;\r", "-\t\t\t\t? getContents().getBytes() \r", "-\t\t\t\t: getContents().getBytes(encoding);\r", "+\t\t\t\t? contents.getBytes() \r", "+\t\t\t\t: contents.getBytes(encoding);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db900da3f20bda733892129d687d03df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "677db12ffe2b33d9711034d339aec7b56ab85d41", "commitAfterChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public ISourceRange getSourceRange() throws JavaModelException", "signatureAfterChange": "\r public ISourceRange getSourceRange() throws JavaModelException", "diff": ["-\t\treturn new SourceRange(0, buffer.getContents().toString().length());\r", "+\t\tString contents = buffer.getContents();\r", "+\t\tif (contents == null) return null;\r", "+\t\treturn new SourceRange(0, contents.length());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e14f5730a432a07592883210030cd774", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "4b1cb82b00b0f3c43755c37280deb732ae600c1a", "commitAfterChange": "1caf2b41c370e66c328190589dd64f01b35d7384", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void emulateOuterAccess(LocalVariableBinding outerLocalVariable)", "signatureAfterChange": " \tpublic void emulateOuterAccess(LocalVariableBinding outerLocalVariable)", "diff": ["-\t\tMethodScope currentMethodScope;", "-\t\tif ((currentMethodScope = this.methodScope())", "-\t\t\t!= outerLocalVariable.declaringScope.methodScope()) {", "+\t\tBlockScope outerVariableScope = outerLocalVariable.declaringScope;", "+\t\tif (outerVariableScope == null)", "+\t\t\treturn; // no need to further emulate as already inserted (val$this$0)", "+\t\tMethodScope currentMethodScope = this.methodScope();", "+\t\tif (outerVariableScope.methodScope() != currentMethodScope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e46db18cc782332e5b14fd86bf26dbb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "b8ff4f523edb67ccd09002204d57adbfde37cc9f", "commitAfterChange": "efb80a4deb3af0f6142e1fce258effdd26fb6f64", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\t\t\t\tfor (int i = 0, length = initializer.expressions.length; i < length; i++) {", "-\t\t\t\t\t\t\tExpression initExpr = initializer.expressions[i];", "-\t\t\t\t\t\t\tif (initExpr instanceof NameReference) {", "-\t\t\t\t\t\t\t\tFieldBinding field = ((NameReference) initExpr).fieldBinding();", "-\t\t\t\t\t\t\t\tif (field != null && field.declaringClass.id == T_JavaLangAnnotationElementType) {", "-\t\t\t\t\t\t\t\t\tlong element = getTargetElementType(field.name);", "-\t\t\t\t\t\t\t\t\tif ((tagBits & element) != 0) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateTargetInTargetAnnotation(annotationType, (NameReference)initExpr);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\ttagBits |= element;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\t\tfor (int i = 0, length = expressions.length; i < length; i++) {", "+\t\t\t\t\t\t\t\tExpression initExpr = expressions[i];", "+\t\t\t\t\t\t\t\tif (initExpr instanceof NameReference) {", "+\t\t\t\t\t\t\t\t\tFieldBinding field = ((NameReference) initExpr).fieldBinding();", "+\t\t\t\t\t\t\t\t\tif (field != null && field.declaringClass.id == T_JavaLangAnnotationElementType) {", "+\t\t\t\t\t\t\t\t\t\tlong element = getTargetElementType(field.name);", "+\t\t\t\t\t\t\t\t\t\tif ((tagBits & element) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateTargetInTargetAnnotation(annotationType, (NameReference)initExpr);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\ttagBits |= element;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t}"]}], "num": 18892}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2ec04b097509dc8f0941d768751c8d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5de00a32df75f9f98c3aee7bc2ea0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void printQualifiedReference(int sourceEnd)", "signatureAfterChange": "  \tpublic void printQualifiedReference(int sourceEnd)", "diff": ["+\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\tdefault: ", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "+\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\tcase TerminalTokens.TokenNameDOT :", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86e81b66c5117100e2e7c544e146a034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 68, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation)", "diff": ["-\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation) {", "-\t\tif (allocation.anonymousType != null) {", "-\t\t\tClassInstanceCreation classInstanceCreation = this.ast.newClassInstanceCreation();", "-\t\t\tclassInstanceCreation.setName(convert(allocation.type));", "-\t\t\tif (allocation.enclosingInstance != null) {", "-\t\t\t\tclassInstanceCreation.setExpression(convert(allocation.enclosingInstance));", "-\t\t\t}", "-\t\t\tint declarationSourceStart = allocation.sourceStart;", "-\t\t\tclassInstanceCreation.setSourceRange(declarationSourceStart, allocation.anonymousType.bodyEnd - declarationSourceStart + 1);", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = allocation.arguments;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tclassInstanceCreation.arguments().add(convert(arguments[i]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "-\t\t\tint start = retrieveStartBlockPosition(allocation.anonymousType.sourceEnd, allocation.anonymousType.bodyEnd);", "-\t\t\tanonymousClassDeclaration.setSourceRange(start, allocation.anonymousType.bodyEnd - start + 1);", "-\t\t\tclassInstanceCreation.setAnonymousClassDeclaration(anonymousClassDeclaration);", "-\t\t\tbuildBodyDeclarations(allocation.anonymousType, anonymousClassDeclaration);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\trecordNodes(classInstanceCreation, allocation.anonymousType);", "-\t\t\t\trecordNodes(anonymousClassDeclaration, allocation.anonymousType);", "-\t\t\t\tanonymousClassDeclaration.resolveBinding();", "-\t\t\t}", "-\t\t\treturn classInstanceCreation;\t\t\t", "-\t\t} else {", "-\t\t\tClassInstanceCreation classInstanceCreation = this.ast.newClassInstanceCreation();", "-\t\t\tclassInstanceCreation.setExpression(convert(allocation.enclosingInstance));", "-\t\t\tclassInstanceCreation.setName(convert(allocation.type));", "-\t\t\tclassInstanceCreation.setSourceRange(allocation.sourceStart, allocation.sourceEnd - allocation.sourceStart + 1);", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = allocation.arguments;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tExpression argument = convert(arguments[i]);", "-\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\trecordNodes(argument, arguments[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tclassInstanceCreation.arguments().add(argument);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\trecordNodes(classInstanceCreation, allocation);", "-\t\t\t}", "-\t\t\tremoveTrailingCommentFromExpressionEndingWithAParen(classInstanceCreation);", "-\t\t\treturn classInstanceCreation;", "+", "+\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation) {", "+\t\tClassInstanceCreation classInstanceCreation = this.ast.newClassInstanceCreation();", "+\t\tif (allocation.enclosingInstance != null) {", "+\t\t\tclassInstanceCreation.setExpression(convert(allocation.enclosingInstance));", "+\t\t}", "+\t\tswitch(this.ast.apiLevel) {", "+\t\t\tcase AST.JLS2 :", "+\t\t\t\tclassInstanceCreation.setName(convert(allocation.type));", "+\t\t\t\tbreak;", "+\t\t\tcase AST.JLS3 :", "+\t\t\t\tclassInstanceCreation.setType(convertType(allocation.type));", "+\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = allocation.arguments;", "+\t\tif (arguments != null) {", "+\t\t\tint length = arguments.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tExpression argument = convert(arguments[i]);", "+\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\trecordNodes(argument, arguments[i]);", "+\t\t\t\t}", "+\t\t\t\tclassInstanceCreation.arguments().add(argument);", "+\t\t\t}", "+\t\t}", "+\t\tif (allocation.typeArguments != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tclassInstanceCreation.setFlags(classInstanceCreation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int i = 0, max = allocation.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\tclassInstanceCreation.typeArguments().add(convert(allocation.typeArguments[i]));", "+\t\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}", "+\t\tif (allocation.anonymousType != null) {", "+\t\t\tint declarationSourceStart = allocation.sourceStart;", "+\t\t\tclassInstanceCreation.setSourceRange(declarationSourceStart, allocation.anonymousType.bodyEnd - declarationSourceStart + 1);", "+\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "+\t\t\tint start = retrieveStartBlockPosition(allocation.anonymousType.sourceEnd, allocation.anonymousType.bodyEnd);", "+\t\t\tanonymousClassDeclaration.setSourceRange(start, allocation.anonymousType.bodyEnd - start + 1);", "+\t\t\tclassInstanceCreation.setAnonymousClassDeclaration(anonymousClassDeclaration);", "+\t\t\tbuildBodyDeclarations(allocation.anonymousType, anonymousClassDeclaration);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(classInstanceCreation, allocation.anonymousType);", "+\t\t\t\trecordNodes(anonymousClassDeclaration, allocation.anonymousType);", "+\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\t\t}", "+\t\t\treturn classInstanceCreation;\t\t\t", "+\t\t} else {", "+\t\t\tfinal int start = allocation.sourceStart;", "+\t\t\tclassInstanceCreation.setSourceRange(start, allocation.sourceEnd - start + 1);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(classInstanceCreation, allocation);", "+\t\t\t}", "+\t\t\tremoveTrailingCommentFromExpressionEndingWithAParen(classInstanceCreation);", "+\t\t\treturn classInstanceCreation;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7a331457396f4357d64b5363d869172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(String jarPath)", "signatureAfterChange": " \t\t \tprivate IPackageFragmentRoot getPackageFragmentRoot(IResource resource, IPath entryPath)", "diff": ["+\t\t", "+\tprivate IPackageFragmentRoot getPackageFragmentRoot(IResource resource, IPath entryPath) {", "+\t\t\t\tif (ExternalFoldersManager.isExternal(resource.getFullPath()))", "+\t\t\t\t\treturn new ExternalPackageFragmentRoot(resource, entryPath, this);", "-\tpublic IPackageFragmentRoot getPackageFragmentRoot(String jarPath) {", "-\t\treturn getPackageFragmentRoot0(JavaProject.canonicalizedPath(new Path(jarPath)));"]}], "num": 71926}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a30574b563ca8967f6233184e97b2e4c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2445c320ab3de8138df1293a970ed3cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testAnonymousType() throws JavaModelException", "signatureAfterChange": " \tpublic void testAnonymousType() throws JavaModelException", "diff": ["-\t\t\t\"<anonymous #1> [in foo() [in X [in [Working copy] X.java [in <default> [in <project root> [in P]]]]]]\",", "+\t\t\t\"<anonymous #1> [in foo() [in X [in [Working copy] X.java [in <default> [in src [in P]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b4874d4dd8bb31944e602fb4ed2456", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testMethod4() throws JavaModelException", "signatureAfterChange": " \tpublic void testMethod4() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testMethod4() throws JavaModelException {", "-\t\tASTNode node = buildAST(", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\"\t\t/*start*/bar(new B<Object>())/*end*/;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\t<T extends Object> void bar(A<? extends T> arg) {\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class A<T> {\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class B<T> extends A<T> {\t\\n\" + ", "-\t\t\t\"}\"", "-\t\t);", "-\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\tassertNotNull(\"No binding\", binding);", "-\t\tIJavaElement element = binding.getJavaElement();", "-\t\tassertElementEquals(", "-\t\t\t\"Unexpected Java element\",", "-\t\t\t\"bar(A<? extends T>) [in X [in [Working copy] X.java [in <default> [in <project root> [in P]]]]]\",", "-\t\t\telement", "-\t\t);", "-\t\tassertTrue(\"Element should exist\", element.exists());", "-\t}", "+\tpublic void testMethod4() throws JavaModelException {", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\t/*start*/bar(new B<Object>())/*end*/;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\t<T extends Object> void bar(A<? extends T> arg) {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class A<T> {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class B<T> extends A<T> {\t\\n\" + ", "+\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\t\t\"bar(A<? extends T>) [in X [in [Working copy] X.java [in <default> [in src [in P]]]]]\","]}], "num": 29193}
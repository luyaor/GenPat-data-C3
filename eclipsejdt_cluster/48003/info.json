{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1d2f7de60ce8a87628bd85b289ab03e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "336d4733955cdb65a2cb912b5dd6b7b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "f95e58c822d23fa71cf6c6e2ac3adce80f07a42f", "commitAfterChange": "1c5093c74409d802b34134e981077f69adbcd0bf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["-\t\tIMethodBinding declaringMethod = getDeclaringMethod();", "-\t\tif (declaringMethod == null) return null;", "-\t\tJavaElement method = (JavaElement) declaringMethod.getJavaElement();", "-\t\tif (method == null) return null;", "+\t\tint sourceEnd = sourceStart+sourceLength-1;", "-\t\treturn new LocalVariable(method, localVar.getName().getIdentifier(), sourceStart, sourceStart+sourceLength-1, nameStart, nameStart+nameLength-1, new String(typeSig), ((LocalVariableBinding) this.binding).declaration.annotations);", "+\t\tJavaElement parent = null;", "+\t\tIMethodBinding declaringMethod = getDeclaringMethod();", "+\t\tif (declaringMethod == null) {", "+\t\t\tReferenceContext referenceContext = ((LocalVariableBinding) binding).declaringScope.referenceContext();", "+\t\t\tif (referenceContext instanceof TypeDeclaration){", "+\t\t\t\t// Local variable is declared inside an initializer", "+\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) referenceContext;", "+\t\t\t\tJavaElement typeHandle = null;", "+\t\t\t\tif (this.resolver instanceof DefaultBindingResolver) {", "+\t\t\t\t\tDefaultBindingResolver defaultBindingResolver = (DefaultBindingResolver) this.resolver;", "+\t\t\t\t\ttypeHandle = Util.getUnresolvedJavaElement(", "+\t\t\t\t\t\ttypeDeclaration.binding,", "+\t\t\t\t\t\tdefaultBindingResolver.workingCopyOwner,", "+\t\t\t\t\t\tdefaultBindingResolver.getBindingsToNodesMap());", "+\t\t\t\t} else {", "+\t\t\t\t\ttypeHandle = Util.getUnresolvedJavaElement(typeDeclaration.binding, null, null);", "+\t\t\t\t}", "+\t\t\t\tparent = Util.getUnresolvedJavaElement(sourceStart, sourceEnd, typeHandle);", "+\t\t\t} else {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tparent = (JavaElement) declaringMethod.getJavaElement();", "+\t\t}", "+\t\tif (parent == null) return null;", "+\t\treturn new LocalVariable(parent, localVar.getName().getIdentifier(), sourceStart, sourceEnd, nameStart, nameStart+nameLength-1, new String(typeSig), ((LocalVariableBinding) this.binding).declaration.annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0a2eafea6bccf221f063e920c2ede90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "f5dedbad023ed535da8140c4ada528c2bf574f20", "commitAfterChange": "b7dcee8ec99a66c7cd3b7ec7ac6ac22c9994d5db", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected boolean isAffectedByType(IJavaElementDelta delta, IType type, boolean hasImportChange)", "signatureAfterChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element)", "diff": ["+\tif (element instanceof CompilationUnit) {", "+\t\tCompilationUnit cu = (CompilationUnit)element;", "+\t\tChangeCollector collector = this.changeCollector == null ? new ChangeCollector(this) : this.changeCollector;", "+\t\ttry {", "+\t\t\tcollector.addChange(cu, delta);", "+\t\t} catch (JavaModelException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\tif (cu.isWorkingCopy()) {", "+\t\t\t// changes to working copies are batched", "+\t\t\tthis.changeCollector = collector;", "+\t\t\treturn false;", "+\t\t} else {", "+\t\t\treturn collector.needsRefresh();", "+\t\t}", "+\t} else if (element instanceof ClassFile) {", "+\t\tswitch (delta.getKind()) {", "+\t\t\tcase IJavaElementDelta.REMOVED:", "+\t\t\t\treturn this.files.get(element) != null;", "+\t\t\tcase IJavaElementDelta.ADDED:", "+\t\t\t\tIType type = ((ClassFile)element).getType();", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElementDelta.CHANGED:", "+\t\t\t\tIJavaElementDelta[] children = delta.getAffectedChildren();", "+\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "+\t\t\t\t\tIJavaElementDelta child = children[i];", "+\t\t\t\t\tIJavaElement childElement = child.getElement();", "+\t\t\t\t\tif (childElement instanceof IType) {", "+\t\t\t\t\t\ttype = (IType)childElement;", "+\t\t\t\t\t\tboolean hasVisibilityChange = (delta.getFlags() & IJavaElementDelta.F_MODIFIERS) > 0;", "+\t\t\t\t\t\tboolean hasSupertypeChange = (delta.getFlags() & IJavaElementDelta.F_SUPER_TYPES) > 0;", "+\t\t\t\t\t\tif ((hasVisibilityChange && hasSupertype(type.getElementName()))", "+\t\t\t\t\t\t\t\t|| (hasSupertypeChange && includesTypeOrSupertype(type))) {", "+\t\t\t\t\t\t\treturn true;", "- */", "-protected boolean isAffectedByType(IJavaElementDelta delta, IType type, boolean hasImportChange) {", "-\tswitch (delta.getKind()) {", "-\t\tcase IJavaElementDelta.ADDED:", "-\t\t\tString typeName = type.getElementName();", "-\t\t\tif (hasSupertype(typeName) ", "-\t\t\t\t|| subtypesIncludeSupertypeOf(type) ", "-\t\t\t\t|| this.missingTypes.contains(typeName)) {", "-\t\t\t\t", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElementDelta.CHANGED:", "-\t\t\tboolean hasVisibilityChange = (delta.getFlags() & IJavaElementDelta.F_MODIFIERS) > 0;", "-\t\t\tboolean hasSupertypeChange = (delta.getFlags() & IJavaElementDelta.F_SUPER_TYPES) > 0;", "-\t\t\tif ((hasVisibilityChange && hasSupertype(type.getElementName()))", "-\t\t\t\t\t|| ((hasImportChange || hasSupertypeChange) ", "-\t\t\t\t\t\t&& includesTypeOrSupertype(type))) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElementDelta.REMOVED:", "-\t\t\tif (this.contains(type)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tbreak;", "-\t}", "-\tIJavaElementDelta[] children = delta.getAffectedChildren();", "-\tfor (int i = 0, length = children.length; i < length; i++) {", "-\t\tIJavaElementDelta child = children[i];", "-\t\tIJavaElement childElement = child.getElement();", "-\t\tif (childElement instanceof IType) {", "-\t\t\tif (this.isAffectedByType(child, (IType)childElement, hasImportChange)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\t\t\tbreak;", "-} ", "+}"]}], "num": 48003}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ae7531b34ac019ddfb09231ecc7b949", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07059defdcc3750560f62a6e02014eb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "458161dc550c876a0d717a9a36eda696046c367f", "commitAfterChange": "59d8c0d8b554a42bbafdc0ad10f524f90fa03b31", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void checkMatching(AstNode node)", "signatureAfterChange": " public void addMatch(AstNode node, int matchLevel)", "diff": ["+}", "+public void addMatch(AstNode node, int matchLevel) {", "+\tswitch (matchLevel) {", "+\t\tcase PatternLocator.POTENTIAL_MATCH:", "+\t\t\taddPossibleMatch(node);", "+\t\t\tbreak;", "+\t\tcase PatternLocator.ACCURATE_MATCH:", "+\t\t\taddTrustedMatch(node);", "+\t}", "-}", "-public void checkMatching(AstNode node) {", "-\tthis.locator.pattern.matchCheck(node, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "576c29db347f2b22bd4c2e8ea06b3d33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void handleObsoleteLiteralAsError(boolean flag)", "signatureAfterChange": "\r public void setAssertIdentifierSeverity(int flag)", "diff": ["-public void handleObsoleteLiteralAsError(boolean flag) {\r", "-\tif (flag) {\r", "-\t\terrorThreshold |= ParsingOptionalError;\r", "-\t\twarningThreshold &= ~ParsingOptionalError;\r", "-\t} else {\r", "-\t\terrorThreshold &= ~ParsingOptionalError;\r", "-\t\twarningThreshold |= ParsingOptionalError;\r", "+public void setAssertIdentifierSeverity(int flag) {\r", "+\terrorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\twarningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\tswitch(flag){\r", "+\t\tcase Error : \r", "+\t\t\terrorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t\tcase Warning : \r", "+\t\t\twarningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be40606121695bd8644dbe63263cec9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void handleObsoleteLiteralAsError(boolean flag)", "signatureAfterChange": "\r public void setAssertIdentifierSeverity(int flag)", "diff": ["-public void handleObsoleteLiteralAsError(boolean flag) {\r", "-\tif (flag) {\r", "-\t\terrorThreshold |= ParsingOptionalError;\r", "-\t\twarningThreshold &= ~ParsingOptionalError;\r", "-\t} else {\r", "-\t\terrorThreshold &= ~ParsingOptionalError;\r", "-\t\twarningThreshold |= ParsingOptionalError;\r", "+public void setAssertIdentifierSeverity(int flag) {\r", "+\terrorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\twarningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\tswitch(flag){\r", "+\t\tcase Error : \r", "+\t\t\terrorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t\tcase Warning : \r", "+\t\t\twarningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4b9fc26991a28106d277210da773459", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void handleObsoleteLiteralAsError(boolean flag)", "signatureAfterChange": "\r public void setAssertIdentifierSeverity(int flag)", "diff": ["-public void handleObsoleteLiteralAsError(boolean flag) {\r", "-\tif (flag) {\r", "-\t\terrorThreshold |= ParsingOptionalError;\r", "-\t\twarningThreshold &= ~ParsingOptionalError;\r", "-\t} else {\r", "-\t\terrorThreshold &= ~ParsingOptionalError;\r", "-\t\twarningThreshold |= ParsingOptionalError;\r", "+public void setAssertIdentifierSeverity(int flag) {\r", "+\terrorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\twarningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\tswitch(flag){\r", "+\t\tcase Error : \r", "+\t\t\terrorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t\tcase Warning : \r", "+\t\t\twarningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5e61afa6be2bb303d87e2e75e0bb96d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void handleObsoleteLiteralAsError(boolean flag)", "signatureAfterChange": "\r public void setAssertIdentifierSeverity(int flag)", "diff": ["-public void handleObsoleteLiteralAsError(boolean flag) {\r", "-\tif (flag) {\r", "-\t\terrorThreshold |= ParsingOptionalError;\r", "-\t\twarningThreshold &= ~ParsingOptionalError;\r", "-\t} else {\r", "-\t\terrorThreshold &= ~ParsingOptionalError;\r", "-\t\twarningThreshold |= ParsingOptionalError;\r", "+public void setAssertIdentifierSeverity(int flag) {\r", "+\terrorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\twarningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\tswitch(flag){\r", "+\t\tcase Error : \r", "+\t\t\terrorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t\tcase Warning : \r", "+\t\t\twarningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\tbreak;\r", "+\t}\t\r"]}], "num": 9302}
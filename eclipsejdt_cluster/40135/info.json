{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6255ca2c668b0e7ceeaa5676c762cc83", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8180c90d9fec8877f7dc7d072c8070bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "6e3659bcc81a697d6dd17eb7b12230c5c5e2e02e", "commitAfterChange": "84c253c6de5d6b04e227efb942ee9828a865cfbe", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "signatureAfterChange": " \tpublic void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "diff": ["-\t\t\t\t\t\tif (JavaProject.hasJavaNature(resource.getProject())) {", "+\t\t\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\t} else if (JavaModelManager.getJavaModelManager().getJavaModel().findJavaProject(project) != null) {", "+\t\t\t\t\t\t\t// project had the java nature", "+\t\t\t\t\t\t\tthis.rootsAreStale = true;", "+", "+\t\t\t\t\t\t\t// remove classpath cache so that initializeRoots() will not consider the project has a classpath", "+\t\t\t\t\t\t\tthis.manager.removePerProjectInfo((JavaProject)JavaCore.create(project));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b016ce2a25f3050c4cca1c11e28ffb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8257947b843e715f21b92a87dc4b423cbc1eed03", "commitAfterChange": "00cae100ff4808e2019f6a4d94df4143c8fabbd0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tprivate void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "signatureAfterChange": " \tprivate void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "diff": ["-\t\t\t\t\t\t} else if (JavaModelManager.getJavaModelManager().getJavaModel().findJavaProject(project) != null) {", "+\t\t\t\t\t\t} else if (this.manager.getJavaModel().findJavaProject(project) != null) {", "-\t\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\tthis.state.rootsAreStale = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd23b2b35c0ac25fdf1404d382817ea1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "16854241687f97764faa9f85ee1f3765fd3ba174", "commitAfterChange": "38d650016715ef9203472d6cae057b9ec4d53fc1", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r \tprivate void locateMatches(JavaProject javaProject, IProgressMonitor progressMonitor) throws JavaModelException", "signatureAfterChange": "\r \tprivate void locateMatches(JavaProject javaProject, IProgressMonitor progressMonitor) throws JavaModelException", "diff": ["-\t\tboolean shouldResolve = this.pattern.needsResolve;\r", "+\t\tboolean compilationAborted = false;\r", "-\t\tif (shouldResolve) {\r", "+\t\tif (this.pattern.needsResolve) {\r", "-\t\t\t\tshouldResolve = false;\r", "+\t\t\t\tcompilationAborted = true;\r", "-\t\t\t\t\tthis.currentMatchingOpenable.shouldResolve = shouldResolve;\r", "+\t\t\t\t\tthis.currentMatchingOpenable.shouldResolve = !compilationAborted;\r", "-\t\t\t\tshouldResolve = false;\r", "+\t\t\t\tcompilationAborted = true;\r", "-\t\t\t\t\tshouldResolve = false;\r", "+\t\t\t\t\tcompilationAborted = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4092d67e1aac85333dabbebe2b2f48a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "ec3d2b8d7bc5e4b4b2d91a6a1cfd252341798462", "commitAfterChange": "dfdf5cdb33faed31f1d77a512774b27d49c87683", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "signatureAfterChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "diff": ["-\t\tthis.createAndResolveBindings(potentialMatches);", "-", "-\t\tif (!this.createHierarchyResolver()) {", "-\t\t\treturn;", "+\t\t// create and resolve binding (equivalent to beginCompilation() in Compiler)", "+\t\ttry {", "+\t\t\tthis.createAndResolveBindings(potentialMatches);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\tthis.compilationAborted = true;", "-", "+\t", "+\t\t// create hierarchy resolver if needed", "+\t\ttry {", "+\t\t\tif (!this.compilationAborted && !this.createHierarchyResolver()) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\tthis.compilationAborted = true;", "+\t\t}", "+\t"]}], "num": 40135}
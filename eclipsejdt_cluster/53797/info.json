{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c88af7938ca3ece73a69d9eaeb08d45d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22014db3a4f15a4d24fb7406f11c3792", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "c0679d24710a6b2a91bf47b3b4b03da992188ceb", "commitAfterChange": "e0d96d91a2a3382c51c572fe1c4254d193e4a7b4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "signatureAfterChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "diff": ["+\tif (length <= 1) {", "+\t\treturn true; // no need to continue since only 1 inherited method is left", "+\t}", "+\t// get rid of overriden methods coming from interfaces - if any", "+\tMethodBinding methodsToCheck[] = new MethodBinding[length];\t// must not nullify methods slots in place", "+\tint count = length;", "+\tfor (int i = 0; i < length; i++) {", "+\t\tmethodsToCheck[i] = methods[i];", "+\t}", "+\tfor (int i = 0; i < length; i++) {", "+\t\tMethodBinding existingMethod;", "+\t\tif ((existingMethod = methodsToCheck[i]) != null) {", "+\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\tMethodBinding inheritedMethod;", "+\t\t\t\tif (i != j && (inheritedMethod = methodsToCheck[j]) != null &&", "+\t\t\t\t\t\texistingMethod.declaringClass.implementsInterface(inheritedMethod.declaringClass, true)) {", "+\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(inheritedMethod, existingMethod);", "+\t\t\t\t\tif (substitute != null && ", "+\t\t\t\t\t\t\tdoesSubstituteMethodOverride(existingMethod, substitute) &&", "+\t\t\t\t\t\t\t(existingMethod.returnType.isCompatibleWith(substitute.returnType) ||", "+\t\t\t\t\t\t\t\t\tisReturnTypeSubstituable(substitute, existingMethod))) {", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tmethodsToCheck[j] = null;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (count < length) {", "+\t\tif (count == 1) { ", "+\t\t\treturn true; // no need to continue since only 1 inherited method is left", "+\t\t}", "+\t\tfor (int i = 0, j = 0; j < count; i++) {", "+\t\t\tif (methodsToCheck[i] != null) {", "+\t\t\t\tmethodsToCheck[j++] = methodsToCheck[i];", "+\t\t\t}", "+\t\t}", "+\t\tmethods = methodsToCheck;", "+\t\tlength = count;", "+\t} // else keep methods unchanged for further checks"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6340ee2aeea088010da79639debc14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\tObjectVector found = new ObjectVector(); //TODO should rewrite to remove #matchingMethod since found is allocated anyway", "+\t\tObjectVector found = new ObjectVector(); //TODO (kent) should rewrite to remove #matchingMethod since found is allocated anyway", "+\t\tMethodBinding problemMethod = null;", "-\t\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes)) {", "-\t\t\t\t\tswitch (candidatesCount) {", "-\t\t\t\t\t\tcase 0: ", "-\t\t\t\t\t\t\tmatchingMethod = methodBinding; // if only one match, reuse matchingMethod", "-\t\t\t\t\t\t\tcheckedMatchingMethod = true; // matchingMethod is known to exist and match params here", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 1:", "-\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize]; // only lazily created if more than one match", "-\t\t\t\t\t\t\tcandidates[0] = matchingMethod; // copy back", "-\t\t\t\t\t\t\tmatchingMethod = null;", "-\t\t\t\t\t\t\t// fall through", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tcandidates[candidatesCount] = methodBinding;", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\tswitch (candidatesCount) {", "+\t\t\t\t\t\t\tcase 0: ", "+\t\t\t\t\t\t\t\tmatchingMethod = compatibleMethod; // if only one match, reuse matchingMethod", "+\t\t\t\t\t\t\t\tcheckedMatchingMethod = true; // matchingMethod is known to exist and match params here", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize]; // only lazily created if more than one match", "+\t\t\t\t\t\t\t\tcandidates[0] = matchingMethod; // copy back", "+\t\t\t\t\t\t\t\tmatchingMethod = null;", "+\t\t\t\t\t\t\t\t// fall through", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tcandidates[candidatesCount] = compatibleMethod;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcandidatesCount++;", "+\t\t\t\t\t} else if (problemMethod == null) {", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\t\t\t\tcandidatesCount++;", "+\t\tif (candidatesCount > 0)", "+\t\t\tproblemMethod = null; // forget the problem method if candidates were found", "+", "-\t\t\tif (checkedMatchingMethod || areParametersAssignable(matchingMethod.parameters, argumentTypes)) {", "+\t\t\tif (!checkedMatchingMethod) {", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(matchingMethod, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\tmatchingMethod = compatibleMethod;", "+\t\t\t\t\t\tcheckedMatchingMethod = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (checkedMatchingMethod) {", "-\t\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, null, found);\t\t\t\t\t\t", "+\t\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, null, found);\t\t\t\t\t\t", "-\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);", "+\t\t\tmatchingMethod =", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);", "+\t\t\tif (matchingMethod != null) return matchingMethod;", "+\t\t\treturn problemMethod;", "+\t\t\tif (problemMethod != null) return problemMethod;", "+\t\t}", "+", "+\t\t// check for duplicate parameterized methods", "+\t\tif (compilationUnitScope().environment.options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\tfor (int i = 0; i < candidatesCount; i++) {", "+\t\t\t\tMethodBinding current = candidates[i];", "+\t\t\t\tif (current instanceof ParameterizedMethodBinding)", "+\t\t\t\t\tfor (int j = i + 1; j < candidatesCount; j++)", "+\t\t\t\t\t\tif (current.declaringClass == candidates[j].declaringClass && current.areParametersEqual(candidates[j]))", "+\t\t\t\t\t\t\treturn new ProblemMethodBinding(candidates[i].selector, candidates[i].parameters, Ambiguous);", "+\t\t\t}", "-\t\t\treturn mostSpecificMethodBinding(candidates, visiblesCount);", "+\t\t\treturn mostSpecificMethodBinding(candidates, visiblesCount, invocationSite);", "-\t\t\t? mostSpecificClassMethodBinding(candidates, visiblesCount)", "-\t\t\t: mostSpecificInterfaceMethodBinding(candidates, visiblesCount);", "+\t\t\t? mostSpecificClassMethodBinding(candidates, visiblesCount, invocationSite)", "+\t\t\t: mostSpecificInterfaceMethodBinding(candidates, visiblesCount, invocationSite);"]}], "num": 53797}
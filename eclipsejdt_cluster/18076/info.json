{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "196cbd5f9319d6b5f82122222739777c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "685ab45acef7d98460c7b690a79c614c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["+\t */", "+\tprivate void setUpFullSourceWorkspace() throws IOException, CoreException {", "+", "+\t\t// Get projects in workspace (save projects creation on local boxes...)", "+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "+\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\tint projectsLength = projects.length;", "+", "+\t\t// If no projects then unzip file", "+\t\tif (projectsLength == 0) {", "+\t\t\tprojects = createFullSourceWorkspace();", "+\t\t\tprojectsLength = projects.length;", "+\t\t}", "+", "+\t\t// Init environment with existing porjects", "+\t\tfor (int i = 0; i < projectsLength; i++) {", "+\t\t\tENV.addProject(projects[i]);", "+\t\t}", "+", "+\t\t// Init JRE_LIB variable", "+\t\tString jdkLib = Util.getJavaClassLibs()[0];", "+\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "+\t\t", "+\t\t// Set classpaths (workaround bug 73253 Project references not set on project open)", "+\t\tSystem.out.print(\"Set projects classpaths...\");", "+\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "+\t\tint length = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "+\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "+\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "+\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "+\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "+//\t\t\t} else if (JUNIT_PROJECT_NAME.equals(projectName)) {", "+//\t\t\t\tJUNIT_PROJECT = ALL_PROJECTS[i];", "+\t\t\t}", "+\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t\t// Make Big project dependent from jdt.core one", "+//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "+//\t\t\tint bpeLength = bigProjectEntries.length;", "+//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "+//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "+\t\t}", "+\t\tSystem.out.println(\"done\");", "+", "+\t\t// Initialize Parser wokring copy", "+\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "+\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "+\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();", "+\t}", "-\t */", "-\tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "-\t\tif (workspaceRoot.getProjects().length == 0) {", "-\t\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "-\t\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-", "-\t\t\t// Print for log in case of project creation troubles...", "-\t\t\tlong start = System.currentTimeMillis();", "-\t\t\tSystem.out.println(\"Unzipping \"+fullSourceZipPath);", "-\t\t\tSystem.out.print(\"\tin \"+targetWorkspacePath+\"...\");", "-\t\t\t", "-\t\t\t// Unzip file", "-\t\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-", "-\t\t\t// Create and open projects", "-\t\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\t\tproject.open(monitor);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}, null);", "-\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t\t}", "-\t\tString jdkLib = Util.getJavaClassLibs()[0];", "-\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "-\t\t", "-\t\t// Set classpaths (workaround bug 73253 Project references not set on project open)", "-\t\tSystem.out.print(\"Set projects classpaths...\");", "-\t\tlong start = System.currentTimeMillis();", "-\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "-\t\tint length = ALL_PROJECTS.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "-\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "-\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "-\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "-\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "-\t\t\t}", "-\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "-\t\t\t// Make Big project dependent from jdt.core one", "-//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "-//\t\t\tint bpeLength = bigProjectEntries.length;", "-//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "-//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "-\t\t}", "-\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "-\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "-\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();", "-\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f79c4f2ca54953a183798ba423dcd2f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "3916c67b0128c74e08a07f109332d68e11705964", "commitAfterChange": "db24d1d0025b319685ad3bf80253e7a07fb708a2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void setUpBigProject() throws CoreException", "signatureAfterChange": " private void setUpBigProject() throws CoreException, IOException", "diff": ["-private void setUpBigProject() throws CoreException {", "+private void setUpBigProject() throws CoreException, IOException {", "+\t\tString targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-\t\tSystem.out.println(\"Create project \"+BIG_PROJECT_NAME+\" in \"+workspaceRoot.getLocation()+\":\");", "-", "-\t\t// setup projects with several source folders and several packages per source folder", "-\t\tSystem.out.println(\"\t- create \"+FOLDERS_COUNT+\" folders x \"+PACKAGES_COUNT+\" packages...\");", "-\t\tfinal String[] sourceFolders = new String[FOLDERS_COUNT];", "-\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "-\t\t\tsourceFolders[i] = \"src\" + i;", "-\t\t}", "-\t\tString path = workspaceRoot.getLocation().toString() + \"/BigProject/src\";", "-\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "-\t\t\tif (PRINT && i>0 && i%10==0) System.out.print(\"\t\t+ folder src\"+i+\"...\");", "-\t\t\tlong top = System.currentTimeMillis();", "-\t\t\tfor (int j = 0; j < PACKAGES_COUNT; j++) {", "-\t\t\t\tnew java.io.File(path + i + \"/org/eclipse/jdt/core/tests\" + i + \"/performance\" + j).mkdirs();", "+\t\tFile wkspDir = new File(targetWorkspacePath);", "+\t\tFile projectDir = new File(wkspDir, BIG_PROJECT_NAME);", "+\t\tif (projectDir.exists()) {", "+\t\t\tSystem.out.print(\"Add existing project \"+BIG_PROJECT_NAME+\" in \"+workspaceRoot.getLocation()+\" to workspace...\");", "+\t\t\tIProject bigProject = workspaceRoot.getProject(BIG_PROJECT_NAME);", "+\t\t\tif (bigProject.exists()) {", "+\t\t\t\tENV.addProject(bigProject);", "+\t\t\t} else {", "+\t\t\t\tENV.addProject(BIG_PROJECT_NAME);", "-\t\t\tif (PRINT && i>0 && i%10==0) System.out.println(\"(\"+(System.currentTimeMillis()-top)+\"ms)\");", "+\t\t\tBIG_PROJECT = (JavaProject) ENV.getJavaProject(BIG_PROJECT_NAME);", "+\t\t\tBIG_PROJECT.setRawClasspath(BIG_PROJECT.getRawClasspath(), null);", "+\t\t} else {", "+\t\t\tSystem.out.println(\"Create project \"+BIG_PROJECT_NAME+\" in \"+workspaceRoot.getLocation()+\":\");", "+\t", "+\t\t\t// setup projects with several source folders and several packages per source folder", "+\t\t\tSystem.out.println(\"\t- create \"+FOLDERS_COUNT+\" folders x \"+PACKAGES_COUNT+\" packages...\");", "+\t\t\tfinal String[] sourceFolders = new String[FOLDERS_COUNT];", "+\t\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\t\t\tsourceFolders[i] = \"src\" + i;", "+\t\t\t}", "+\t\t\tString path = workspaceRoot.getLocation().toString() + \"/BigProject/src\";", "+\t\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\t\t\tif (PRINT && i>0 && i%10==0) System.out.print(\"\t\t+ folder src\"+i+\"...\");", "+\t\t\t\tlong top = System.currentTimeMillis();", "+\t\t\t\tfor (int j = 0; j < PACKAGES_COUNT; j++) {", "+\t\t\t\t\tnew java.io.File(path + i + \"/org/eclipse/jdt/core/tests\" + i + \"/performance\" + j).mkdirs();", "+\t\t\t\t}", "+\t\t\t\tif (PRINT && i>0 && i%10==0) System.out.println(\"(\"+(System.currentTimeMillis()-top)+\"ms)\");", "+\t\t\t}", "+\t\t\tSystem.out.println(\"\t\t=> global time = \"+(System.currentTimeMillis()-start)/1000.0+\" seconds)\");", "+", "+\t\t\t// Add project to workspace", "+\t\t\tstart = System.currentTimeMillis();", "+\t\t\tSystem.out.print(\"\t- add project to full source workspace...\");", "+\t\t\tENV.addProject(BIG_PROJECT_NAME);", "+\t\t\tBIG_PROJECT = (JavaProject) createJavaProject(BIG_PROJECT_NAME, sourceFolders, \"bin\", \"1.4\");", "+\t\t\tBIG_PROJECT.setRawClasspath(BIG_PROJECT.getRawClasspath(), null);", "-", "-\t\t// Print for log in case of project creation troubles...", "-\t\tSystem.out.println(\"\t\t=> global time = \"+(System.currentTimeMillis()-start)/1000.0+\" seconds)\");", "-\t\tstart = System.currentTimeMillis();", "-\t\tSystem.out.print(\"\t- add project to full source workspace...\");", "-", "-\t\t// Add project to workspace", "-\t\tENV.addProject(BIG_PROJECT_NAME);", "-\t\tBIG_PROJECT = (JavaProject) createJavaProject(BIG_PROJECT_NAME, sourceFolders, \"bin\", \"1.4\");", "-\t\tBIG_PROJECT.setRawClasspath(BIG_PROJECT.getRawClasspath(), null);", "+\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t\tString content = \"package org.eclipse.jdt.core.tests\" + (FOLDERS_COUNT-1) + \".performance\" + (PACKAGES_COUNT-1) + \";\\n\" +", "-\t\t\t\"public class TestBigProject {\\n\" +", "-\t\t\t\"\tclass Level1 {\\n\" +", "-\t\t\t\"\t\tclass Level2 {\\n\" +", "-\t\t\t\"\t\t\tclass Level3 {\\n\" +", "-\t\t\t\"\t\t\t\tclass Level4 {\\n\" +", "-\t\t\t\"\t\t\t\t\tclass Level5 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\tclass Level6 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\tclass Level7 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\tclass Level8 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t\tclass Level9 {\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t\t\tclass Level10 {}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t\t}\\n\" +", "-\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\"\t\t}\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class TestSecondary {}\\n\";", "-\t\tfile.create(new ByteArrayInputStream(content.getBytes()), true, null);", "+\t\tif (!file.exists()) {", "+\t\t\tString content = \"package org.eclipse.jdt.core.tests\" + (FOLDERS_COUNT-1) + \".performance\" + (PACKAGES_COUNT-1) + \";\\n\" +", "+\t\t\t\t\"public class TestBigProject {\\n\" +", "+\t\t\t\t\"\tclass Level1 {\\n\" +", "+\t\t\t\t\"\t\tclass Level2 {\\n\" +", "+\t\t\t\t\"\t\t\tclass Level3 {\\n\" +", "+\t\t\t\t\"\t\t\t\tclass Level4 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\tclass Level5 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\tclass Level6 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\tclass Level7 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\tclass Level8 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t\tclass Level9 {\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t\t\tclass Level10 {}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class TestSecondary {}\\n\";", "+\t\t\tfile.create(new ByteArrayInputStream(content.getBytes()), true, null);", "+\t\t}"]}], "num": 18076}
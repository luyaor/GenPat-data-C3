{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c6c01df3409d5dad02d43917877c89e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc6a73a9a1dbebaeae9eb7522886566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public void build(boolean computeSubtypes)", "signatureAfterChange": "\r \t\r \tpublic void build(boolean computeSubtypes)", "diff": ["-}\r", "-public void build(boolean computeSubtypes) {\r", "-\tif (this.hierarchy.fType == null || computeSubtypes) {\r", "-\t\tVector allTypesInRegion = determineTypesInRegion();\r", "-\t\tthis.hierarchy.initialize(allTypesInRegion.size());\r", "-\t\tcreateTypeHierarchyBasedOnRegion(allTypesInRegion);\r", "-\t} else {\r", "-\t\tthis.hierarchy.initialize(1);\r", "-\t\tthis.buildSupertypes();\r", "-\t}\r", "-}\r", "+\t\r", "+\tpublic void build(boolean computeSubtypes) {\r", "+\t\t\r", "+\t\tif (this.hierarchy.fType == null || computeSubtypes) {\r", "+\t\t\tArrayList allTypesInRegion = determineTypesInRegion();\r", "+\t\t\tthis.hierarchy.initialize(allTypesInRegion.size());\r", "+\t\t\tcreateTypeHierarchyBasedOnRegion(allTypesInRegion);\r", "+\t\t} else {\r", "+\t\t\tthis.hierarchy.initialize(1);\r", "+\t\t\tthis.buildSupertypes();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de028c3143b56bb14ddb2b537358771", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "5ec4215ec4f52f55dcb6e314c5f755ceba34fff6", "commitAfterChange": "5a4580d346b40161405692269366aba5f28266bb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void build(boolean computeSubtypes) throws JavaModelException, CoreException", "signatureAfterChange": "\r public void build(boolean computeSubtypes) throws JavaModelException, CoreException", "diff": ["-\tif (computeSubtypes) {\r", "-\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes();\r", "-\t\tif (allPossibleSubtypes != null) {\r", "-\t\t\tthis.hierarchy.initialize(allPossibleSubtypes.length);\r", "-\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes);\r", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();\r", "+\ttry {\r", "+\t\t// optimize access to zip files while building hierarchy\r", "+\t\tmanager.cacheZipFiles();\r", "+\t\t\t\t\r", "+\t\tif (computeSubtypes) {\r", "+\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes();\r", "+\t\t\tif (allPossibleSubtypes != null) {\r", "+\t\t\t\tthis.hierarchy.initialize(allPossibleSubtypes.length);\r", "+\t\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes);\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tthis.hierarchy.initialize(1);\r", "+\t\t\tthis.buildSupertypes();\r", "-\t} else {\r", "-\t\tthis.hierarchy.initialize(1);\r", "-\t\tthis.buildSupertypes();\r", "+\t} finally {\r", "+\t\tmanager.flushZipFiles();\r"]}], "num": 43303}
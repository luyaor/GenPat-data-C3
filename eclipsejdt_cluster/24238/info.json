{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fecec1672542e1b972e65f9ec03f3cc3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb66a05ccbd35be790d69bf4a9254b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "e7fead4adac4e5d682bbdf8cb7aaa3f524aab927", "commitAfterChange": "3f60ba6c4328b89dbfaef12feb628451b43d7879", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void  checkParameterizedTypeBounds()", "signatureAfterChange": " \tpublic void  checkParameterizedTypeBounds()", "diff": ["-\t\tfor (int i = 0, l = this.deferredBoundChecks == null ? 0 : this.deferredBoundChecks.size(); i < l; i++)", "-\t\t\t((TypeReference) this.deferredBoundChecks.get(i)).checkBounds(this);", "+\t\tfor (int i = 0, l = this.deferredBoundChecks == null ? 0 : this.deferredBoundChecks.size(); i < l; i++) {", "+\t\t\tObject toCheck = this.deferredBoundChecks.get(i);", "+\t\t\tif (toCheck instanceof TypeReference)", "+\t\t\t\t((TypeReference) toCheck).checkBounds(this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0be744c2dd11c2d3441ce9410247d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["+\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tthis.bound.collectSubstitutes(otherWildcard.otherBounds[i], substitutes);", "+\t        \t}", "+            // check other bounds (lub scenario)", "+        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+        \t\tthis.otherBounds[i].collectSubstitutes(otherType, substitutes);", "+        \t}"]}], "num": 24238}
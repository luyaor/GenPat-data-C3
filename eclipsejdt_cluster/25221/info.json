{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3590a739718b7bd8bd534216d56cd8d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "303cbf0b4e5f07a37bb1d8d06dd979e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\"2. ERROR in ALL.java (at line 8)\\n\" + ", "+\t\t\t\"2. WARNING in ALL.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass L<T> implements I { public T foo() {return null;} }\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in ALL.java (at line 8)\\n\" + ", "-\t\t\t\"3. ERROR in ALL.java (at line 8)\\n\" + ", "+\t\t\t\"4. ERROR in ALL.java (at line 8)\\n\" + ", "-\t\t\t\"4. ERROR in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"5. WARNING in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in ALL.java (at line 10)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8748d0d73f050037b708a2ced5781e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void testBug286601e()", "signatureAfterChange": " public void testBug286601_massive_01()", "diff": ["-public void testBug286601e() {", "+public void testBug286601_massive_01() {", "-\t\t\"public class Test\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"    public void build(String href) {\\n\" +", "-\t\t\"        // set the href on the related topic\\n\" +", "-\t\t\"        if (href == null)\\n\" +", "-\t\t\"            setHref(\\\"\\\"); //$NON-NLS-1$\\n\" +", "-\t\t\"        else {\\n\" +", "-\t\t\"            if (!href.equals(\\\"\\\") // no empty link //$NON-NLS-1$\\n\" +", "-\t\t\"                    && !href.startsWith(\\\"/\\\") // no help url //$NON-NLS-1$\\n\" +", "-\t\t\"                    && href.indexOf(\\':\\') == -1) // no other protocols\\n\" +", "-\t\t\"            {\\n\" +", "-\t\t\"                setHref(\\\"/test/\\\" + href); //$NON-NLS-1$ //$NON-NLS-2$\\n\" +", "-\t\t\"            }\\n\" +", "-\t\t\"        }\\n\" +", "-\t\t\"    }\\n\" +", "+\t\t\"package massive;\\n\" + ", "+\t\t\"public class X01 {\\n\" + ", "+\t\t\"    public void build(String href) {\\n\" + ", "+\t\t\"        // set the href on the related topic\\n\" + ", "+\t\t\"        if (href == null)\\n\" + ", "+\t\t\"            setHref(\\\"\\\"); //$NON-NLS-1$\\n\" + ", "+\t\t\"        else {\\n\" + ", "+\t\t\"            if (!href.equals(\\\"\\\") // no empty link //$NON-NLS-1$\\n\" + ", "+\t\t\"                    && !href.startsWith(\\\"/\\\") // no help url //$NON-NLS-1$\\n\" + ", "+\t\t\"                    && href.indexOf(\\':\\') == -1) // no other protocols\\n\" + ", "+\t\t\"            {\\n\" + ", "+\t\t\"                setHref(\\\"/test/\\\" + href); //$NON-NLS-1$ //$NON-NLS-2$\\n\" + ", "+\t\t\"            }\\n\" + ", "+\t\t\"        }\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"    private void setHref(String string)\\n\" + ", "+\t\t\"    {\\n\" + ", "+\t\t\"        \\n\" + ", "+\t\t\"    }\\n\" + ", "-\t\t\"public class Test\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"\tpublic void build(String href)\\n\" +", "-\t\t\"\t{\\n\" +", "-\t\t\"\t\t// set the href on the related topic\\n\" +", "-\t\t\"\t\tif (href == null)\\n\" +", "-\t\t\"\t\t\tsetHref(\\\"\\\"); //$NON-NLS-1$\\n\" +", "-\t\t\"\t\telse\\n\" +", "-\t\t\"\t\t{\\n\" +", "-\t\t\"\t\t\tif (!href.equals(\\\"\\\") // no empty link //$NON-NLS-1$\\n\" +", "-\t\t\"\t\t\t\t\t&& !href.startsWith(\\\"/\\\") // no help url //$NON-NLS-1$\\n\" +", "-\t\t\"\t\t\t\t\t&& href.indexOf(\\':\\') == -1) // no other protocols\\n\" +", "-\t\t\"\t\t\t{\\n\" +", "-\t\t\"\t\t\t\tsetHref(\\\"/test/\\\" + href); //$NON-NLS-1$ //$NON-NLS-2$\\n\" +", "-\t\t\"\t\t\t}\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\t}\\n\" +", "+\t\t\"package massive;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X01\\n\" + ", "+\t\t\"{\\n\" + ", "+\t\t\"\tpublic void build(String href)\\n\" + ", "+\t\t\"\t{\\n\" + ", "+\t\t\"\t\t// set the href on the related topic\\n\" + ", "+\t\t\"\t\tif (href == null)\\n\" + ", "+\t\t\"\t\t\tsetHref(\\\"\\\"); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\telse\\n\" + ", "+\t\t\"\t\t{\\n\" + ", "+\t\t\"\t\t\tif (!href.equals(\\\"\\\") // no empty link //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\t\t\t\t&& !href.startsWith(\\\"/\\\") // no help url //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\t\t\t\t&& href.indexOf(\\':\\') == -1) // no other protocols\\n\" + ", "+\t\t\"\t\t\t{\\n\" + ", "+\t\t\"\t\t\t\tsetHref(\\\"/test/\\\" + href); //$NON-NLS-1$ //$NON-NLS-2$\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\tprivate void setHref(String string)\\n\" + ", "+\t\t\"\t{\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t}\\n\" + "]}], "num": 25221}
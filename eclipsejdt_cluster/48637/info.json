{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e112a9c863e0390f31f4ca1dda81da28", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f2b0253373363ce459f6cc8a3591213", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "cb1229e517a2018e5263ed249b199ae2a321da49", "commitAfterChange": "4732df192beaa38106d940c4bfeefb54a9e4a1cf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tFieldBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "-\t\t\t\tif (existingVariable.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "-\t\t\t\tif (!existingVariable.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\tif (existingVariable instanceof FieldBinding) {", "+\t\t\t\t\tFieldBinding existingField = (FieldBinding) existingVariable;", "+\t\t\t\t\tif (existingField.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\t\tif (!existingField.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "512c920cf94b5bd25f63af36a0323257", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "a190d14807d4bcd5bcc5a224c605da11ef938ef0", "commitAfterChange": "65cd85ec657509335f606a8248f5deaa818d1194", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-", "+\t", "+\t\t\t// thus must lookup separately in super type and outer context", "+\t\t\t", "-\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this, true /*resolve*/);", "-\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()) {", "+\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "+\t\t\t\t\t// only corner case is: lookup of outer field through static declaringType, which isn't detected by #getBinding as lookup starts", "+\t\t\t\t\t// from outer scope. Subsequent static contexts are detected for free.", "-\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "+\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()", "+\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "+\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "+\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {"]}], "num": 48637}
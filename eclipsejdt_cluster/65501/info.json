{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77f5333ab39a962bb43ea96bfaf61592", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d1ed913d7ab5da14a66bdf51ef5f9ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void testEnumImplementations(TypeDeclaration testClass)", "signatureAfterChange": " \tprivate void testEnumImplementations(TypeDeclaration testClass)", "diff": ["-\t\tassertTrue(\"EnumDeclaration exists\", enumDecl != null);", "+\t\tProcessorTestStatus.assertTrue(\"EnumDeclaration exists\", enumDecl != null);", "-\t\tassertEquals(\"Number of enum constants\", 2, enumConstDecls.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of enum constants\", 2, enumConstDecls.size());", "-\t\tassertTrue(\"enum constant \\\"aardvark\\\" exists\", enumConstAardvark != null);", "-\t\tassertTrue(\"enum constant \\\"anteater\\\" exists\", enumConstAnteater != null);", "+\t\tProcessorTestStatus.assertTrue(\"enum constant \\\"aardvark\\\" exists\", enumConstAardvark != null);", "+\t\tProcessorTestStatus.assertTrue(\"enum constant \\\"anteater\\\" exists\", enumConstAnteater != null);", "-\t\tassertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAardvark.toString());", "-\t\tassertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAnteater.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAardvark.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Declaring type is EnumDec\", \"mirrortestpackage.DeclarationTestClass.EnumDec\", declaringTypeAnteater.toString());", "-\t\tassertEquals(\"Modifier.values() array length\", 11, valuesArrayLength);", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.values() array length\", 11, valuesArrayLength);", "-\t\tassertEquals(\"Modifier.ABSTRACT\", \"abstract\", Modifier.ABSTRACT.toString());", "-\t\tassertEquals(\"Modifier.FINAL\", \"final\", Modifier.FINAL.toString());", "-\t\tassertEquals(\"Modifier.NATIVE\", \"native\", Modifier.NATIVE.toString());", "-\t\tassertEquals(\"Modifier.PRIVATE\", \"private\", Modifier.PRIVATE.toString());", "-\t\tassertEquals(\"Modifier.PROTECTED\", \"protected\", Modifier.PROTECTED.toString());", "-\t\tassertEquals(\"Modifier.PUBLIC\", \"public\", Modifier.PUBLIC.toString());", "-\t\tassertEquals(\"Modifier.STATIC\", \"static\", Modifier.STATIC.toString());", "-\t\tassertEquals(\"Modifier.STRICTFP\", \"strictfp\", Modifier.STRICTFP.toString());", "-\t\tassertEquals(\"Modifier.SYNCHRONIZED\", \"synchronized\", Modifier.SYNCHRONIZED.toString());", "-\t\tassertEquals(\"Modifier.TRANSIENT\", \"transient\", Modifier.TRANSIENT.toString());", "-\t\tassertEquals(\"Modifier.VOLATILE\", \"volatile\", Modifier.VOLATILE.toString());", "-\t\tassertEquals(\"Modifier.valueOf(\\\"PUBLIC\\\")\", Modifier.PUBLIC, Modifier.valueOf(\"PUBLIC\"));", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.ABSTRACT\", \"abstract\", Modifier.ABSTRACT.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.FINAL\", \"final\", Modifier.FINAL.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.NATIVE\", \"native\", Modifier.NATIVE.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.PRIVATE\", \"private\", Modifier.PRIVATE.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.PROTECTED\", \"protected\", Modifier.PROTECTED.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.PUBLIC\", \"public\", Modifier.PUBLIC.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.STATIC\", \"static\", Modifier.STATIC.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.STRICTFP\", \"strictfp\", Modifier.STRICTFP.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.SYNCHRONIZED\", \"synchronized\", Modifier.SYNCHRONIZED.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.TRANSIENT\", \"transient\", Modifier.TRANSIENT.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.VOLATILE\", \"volatile\", Modifier.VOLATILE.toString());", "+\t\tProcessorTestStatus.assertEquals(\"Modifier.valueOf(\\\"PUBLIC\\\")\", Modifier.PUBLIC, Modifier.valueOf(\"PUBLIC\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b4d652f82b86d3e84ea033dc6cb006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void testFieldDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testFieldDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\tassertEquals(\"Number of fields\", 4, fieldDecls.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of fields\", 4, fieldDecls.size());", "-\t\tassertTrue(\"Field i exists\", fieldI != null);", "-\t\tassertEquals(\"Field i constant expression is 1\", \"1\", fieldI.getConstantExpression());", "-\t\tassertEquals(\"Field i constant value is 1\", \"1\", fieldI.getConstantValue().toString());", "-\t\tassertEquals(\"Field i type is int\", \"int\", fieldI.getType().toString());", "-\t\tassertTrue(\"Field f exists\", fieldF != null);", "-\t\tassertEquals(\"Field f constant expression is null\", null, fieldF.getConstantExpression());", "-\t\tassertEquals(\"Field f constant value is null\", null, fieldF.getConstantValue());", "-\t\tassertEquals(\"Field f type is float\", \"float\", fieldF.getType().toString());", "-\t\tassertTrue(\"Field s exists\", fieldS != null);", "-\t\tassertEquals(\"Field s constant expression is hello\", \"hello\", fieldS.getConstantExpression());", "-\t\tassertEquals(\"Field s constant value is hello\", \"hello\", fieldS.getConstantValue().toString());", "-\t\tassertEquals(\"Field s type is java.lang.String\", \"java.lang.String\", fieldS.getType().toString());", "-\t\tassertTrue(\"Field gc exists\", fieldGC != null);", "-\t\tassertEquals(\"Field gc constant expression is null\", null, fieldGC.getConstantExpression());", "-\t\tassertEquals(\"Field gc constant value is null\", null, fieldGC.getConstantValue());", "-\t\tassertEquals(\"Field gc type is java.util.GregorianCalendar\", \"java.util.GregorianCalendar\", fieldGC.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field i exists\", fieldI != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field i constant expression is 1\", \"1\", fieldI.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field i constant value is 1\", \"1\", fieldI.getConstantValue().toString());", "+\t\tProcessorTestStatus.assertEquals(\"Field i type is int\", \"int\", fieldI.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field f exists\", fieldF != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field f constant expression is null\", null, fieldF.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field f constant value is null\", null, fieldF.getConstantValue());", "+\t\tProcessorTestStatus.assertEquals(\"Field f type is float\", \"float\", fieldF.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field s exists\", fieldS != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field s constant expression is hello\", \"hello\", fieldS.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field s constant value is hello\", \"hello\", fieldS.getConstantValue().toString());", "+\t\tProcessorTestStatus.assertEquals(\"Field s type is java.lang.String\", \"java.lang.String\", fieldS.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field gc exists\", fieldGC != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field gc constant expression is null\", null, fieldGC.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field gc constant value is null\", null, fieldGC.getConstantValue());", "+\t\tProcessorTestStatus.assertEquals(\"Field gc type is java.util.GregorianCalendar\", \"java.util.GregorianCalendar\", fieldGC.getType().toString());"]}], "num": 65501}
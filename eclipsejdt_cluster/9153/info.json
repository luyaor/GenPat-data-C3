{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "260724fff75e51356cb78b554db07b83", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74ac5daee668277ef9b8e6ee65fda617", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "signatureAfterChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "diff": ["-\t\tif (bindingsWereCreated && ((InternalSearchPattern)this.pattern).mustResolve && unit.types != null) {", "-\t\t\tif (BasicSearchEngine.VERBOSE)", "-\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPossibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-", "-\t\t\treduceParseTree(unit);", "-", "-\t\t\tif (unit.scope != null) {", "-\t\t\t\t// fault in fields & methods", "-\t\t\t\tunit.scope.faultInTypes();", "+\t\tboolean mustResolve = ((InternalSearchPattern)this.pattern).mustResolve;", "+\t\tif (bindingsWereCreated &&  mustResolve) {", "+\t\t\tif (unit.types != null) {", "+\t\t\t\tif (BasicSearchEngine.VERBOSE)", "+\t\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPossibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+\t", "+\t\t\t\treduceParseTree(unit);", "+\t", "+\t\t\t\tif (unit.scope != null) {", "+\t\t\t\t\t// fault in fields & methods", "+\t\t\t\t\tunit.scope.faultInTypes();", "+\t\t\t\t}", "+\t\t\t\tunit.resolve();", "+\t\t\t} else if (unit.isPackageInfo()) {", "+\t\t\t\tif (BasicSearchEngine.VERBOSE)", "+\t\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPossibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\tunit.resolve();", "-\t\t\tunit.resolve();", "-", "-\t\t\treportMatching(unit, true);", "-\t\t} else {", "-\t\t\treportMatching(unit, ((InternalSearchPattern)this.pattern).mustResolve);", "+\t\treportMatching(unit, mustResolve);", "-\t\t// could not resolve: report innacurate matches", "+\t\t// could not resolve: report inaccurate matches"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccb595f03bf01725527def82e1ebfdc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "2e1e850482d90086f267196870c1a847d5fe0441", "commitAfterChange": "7cd8d4cd3f07fb844c8ea150f6fb9724f3e46dcf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] bytes, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "diff": ["-protected boolean writeClassFileCheck(IFile file, String fileName, byte[] bytes, boolean isSecondaryType) throws CoreException {", "-\t// In Incremental mode, compare the bytes against the previous file for structural changes", "-\treturn true;", "+protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException {", "+\t// Default implementation just writes out the bytes for the new class file...", "+\tif (JavaBuilder.DEBUG)", "+\t\tSystem.out.println(\"Writing new class file \" + file.getName());//$NON-NLS-1$", "+\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "+\tfile.setDerived(true);"]}], "num": 9153}
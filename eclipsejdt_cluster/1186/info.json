{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "372b6681d2b64ac4ad7d7360a24c7975", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118ecd4cf05efb57463ee0a2157ff89f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tif (this.expectedType != null && this.original == this) {  // final resolution.", "+\t\t\tthis.ordinal = blockScope.referenceCompilationUnit().record(this);", "+\t\t}", "+\t\t", "-\t\t\t\t\t\t\tTypeConstants.ANONYMOUS_METHOD, // will be fixed up later.", "+\t\t\t\t\t\t\tCharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.ordinal).toCharArray()), // will be fixed up later."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18dc564e64813c1d3cb88f30051584b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "a8cbebd170009b62a902461aed94df473d2c0d4a", "commitAfterChange": "399be45f49aecd84827a437a645f51d2664e149c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tif (this.expectedType != null && this.original == this) {  // final resolution.", "-\t\t\tthis.ordinal = blockScope.referenceCompilationUnit().record(this);", "+\t\tif (this.expectedType != null && this.original == this) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "+\t\t\tthis.ordinal = recordFunctionalType(blockScope);"]}], "num": 1186}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "541d7511698d36b736fc2a32854cc945", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fe38f83aaa4ac3f03a2f8e9e8c9b2ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "1d5b841741b609cf6927afba3dde0ac1dd2572e2", "commitAfterChange": "09c7c7b4fe8a9c0ad49252ee63d32d12d87dd8ea", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 18, "signatureBeforeChange": "\t \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "\t \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tchar[] fileName = unitElement.getElementName().toCharArray();", "-\t\tJavaProject project = (JavaProject) unitElement.getJavaProject();", "-\t\tCompilationUnitResolver compilationUnitVisitor =", "-\t\t\tnew CompilationUnitResolver(", "-\t\t\t\tgetNameEnvironment(project, owner, monitor),", "-\t\t\t\tgetHandlingPolicy(),", "-\t\t\t\tproject.getOptions(true),", "-\t\t\t\tgetRequestor(),", "-\t\t\t\tgetProblemFactory(monitor));", "-", "-\t\tCompilationUnitDeclaration unit = null;", "-\t\ttry {", "-\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "-", "-\t\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\tchar[][] expectedPackageName = null;", "-\t\t\tif (packageFragment != null){", "-\t\t\t\texpectedPackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "-\t\t\t}", "-\t\t\t", "-\t\t\tunit =", "-\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\tsource,", "-\t\t\t\t\t\texpectedPackageName,", "-\t\t\t\t\t\tnew String(fileName),", "-\t\t\t\t\t\tencoding),", "-\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "-\t\t\treturn unit;", "-\t\t} finally {", "-\t\t\tif (cleanUp && unit != null) {", "-\t\t\t\tunit.cleanUp();", "-\t\t\t}", "+\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "+\t\tchar[][] packageName = null;", "+\t\tif (packageFragment != null){", "+\t\t\tpackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "+\t\tString fileName = unitElement.getElementName();", "+\t\tIJavaProject project = unitElement.getJavaProject();", "+\t\treturn resolve(source, packageName, fileName, project, null/*no node searcher*/, cleanUp, owner, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "925a23336a70f38d509ac9391f86029c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "1d5b841741b609cf6927afba3dde0ac1dd2572e2", "commitAfterChange": "09c7c7b4fe8a9c0ad49252ee63d32d12d87dd8ea", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject javaProject, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject javaProject, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tCompilationUnitResolver compilationUnitVisitor =", "-\t\t\tnew CompilationUnitResolver(", "-\t\t\t\tgetNameEnvironment((JavaProject)javaProject, owner, monitor),", "-\t\t\t\tgetHandlingPolicy(),", "-\t\t\t\tjavaProject.getOptions(true),", "-\t\t\t\tgetRequestor(),", "-\t\t\t\tgetProblemFactory(monitor));", "-\t", "-\t\tCompilationUnitDeclaration unit = null;", "-\t\ttry {", "-\t\t\tString encoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);", "-", "-\t\t\tunit =", "-\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\tsource,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tunitName,", "-\t\t\t\t\t\tencoding),", "-\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "-\t\t\treturn unit;", "-\t\t} finally {", "-\t\t\tif (cleanUp && unit != null) {", "-\t\t\t\tunit.cleanUp();", "-\t\t\t}", "-\t\t}", "+\t\treturn ", "+\t\t\tresolve(", "+\t\t\t\tsource, ", "+\t\t\t\tnull/*no package name*/, ", "+\t\t\t\tunitName, javaProject, ", "+\t\t\t\tnull/*no node searcher*/, ", "+\t\t\t\tcleanUp, ", "+\t\t\t\towner, ", "+\t\t\t\tmonitor);"]}], "num": 28835}
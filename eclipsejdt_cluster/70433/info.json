{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a9ca50c2edb4f03cbf97df936e4130a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04741bb836b78b2cf11c43437703f0c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic MethodDeclaration addMissingAbstractMethodFor(MethodBinding methodBinding)", "signatureAfterChange": " public MethodDeclaration addMissingAbstractMethodFor(MethodBinding methodBinding)", "diff": ["-\t */", "-\tpublic MethodDeclaration addMissingAbstractMethodFor(MethodBinding methodBinding) {", "-\t\tTypeBinding[] argumentTypes = methodBinding.parameters;", "-\t\tint argumentsLength = argumentTypes.length;", "-\t\t//the constructor", "-\t\tMethodDeclaration methodDeclaration = new MethodDeclaration(this.compilationResult);", "-\t\tmethodDeclaration.selector = methodBinding.selector;", "-\t\tmethodDeclaration.sourceStart = sourceStart;", "-\t\tmethodDeclaration.sourceEnd = sourceEnd;", "-\t\tmethodDeclaration.modifiers = methodBinding.getAccessFlags() & ~ClassFileConstants.AccAbstract;", "-", "-\t\tif (argumentsLength > 0) {", "-\t\t\tString baseName = \"arg\";//$NON-NLS-1$", "-\t\t\tArgument[] arguments = (methodDeclaration.arguments = new Argument[argumentsLength]);", "-\t\t\tfor (int i = argumentsLength; --i >= 0;) {", "-\t\t\t\targuments[i] = new Argument((baseName + i).toCharArray(), 0L, null /*type ref*/, ClassFileConstants.AccDefault);", "-\t\t\t}", "-\t\t}", "-", "-\t\t//adding the constructor in the methods list", "-\t\tif (this.missingAbstractMethods == null) {", "-\t\t\tthis.missingAbstractMethods = new MethodDeclaration[] { methodDeclaration };", "-\t\t\tMethodDeclaration[] newMethods;", "-\t\t\t\tthis.missingAbstractMethods,", "-\t\t\t\tnewMethods = new MethodDeclaration[this.missingAbstractMethods.length + 1],", "-\t\t\t\tthis.missingAbstractMethods.length);", "-\t\t\tnewMethods[0] = methodDeclaration;", "-\t\t\tthis.missingAbstractMethods = newMethods;", "-\t\t//============BINDING UPDATE==========================", "-\t\tmethodDeclaration.binding = new MethodBinding(", "-\t\t\t\tmethodDeclaration.modifiers, //methodDeclaration", "-\t\t\t\tmethodBinding.selector,", "-\t\t\t\tmethodBinding.returnType,", "-\t\t\t\targumentsLength == 0 ? Binding.NO_PARAMETERS : argumentTypes, //arguments bindings", "-\t\t\t\tmethodBinding.thrownExceptions, //exceptions", "-\t\t\t\tbinding); //declaringClass", "-\t\t\t\t", "-\t\tmethodDeclaration.scope = new MethodScope(scope, methodDeclaration, true);", "-\t\tmethodDeclaration.bindArguments();", "+ */", "+public MethodDeclaration addMissingAbstractMethodFor(MethodBinding methodBinding) {", "+\tTypeBinding[] argumentTypes = methodBinding.parameters;", "+\tint argumentsLength = argumentTypes.length;", "+\t//the constructor", "+\tMethodDeclaration methodDeclaration = new MethodDeclaration(this.compilationResult);", "+\tmethodDeclaration.selector = methodBinding.selector;", "+\tmethodDeclaration.sourceStart = this.sourceStart;", "+\tmethodDeclaration.sourceEnd = this.sourceEnd;", "+\tmethodDeclaration.modifiers = methodBinding.getAccessFlags() & ~ClassFileConstants.AccAbstract;", "+", "+\tif (argumentsLength > 0) {", "+\t\tString baseName = \"arg\";//$NON-NLS-1$", "+\t\tArgument[] arguments = (methodDeclaration.arguments = new Argument[argumentsLength]);", "+\t\tfor (int i = argumentsLength; --i >= 0;) {", "+\t\t\targuments[i] = new Argument((baseName + i).toCharArray(), 0L, null /*type ref*/, ClassFileConstants.AccDefault);", "+\t\t}", "+\t}", "+", "+\t//adding the constructor in the methods list", "+\tif (this.missingAbstractMethods == null) {", "+\t\tthis.missingAbstractMethods = new MethodDeclaration[] { methodDeclaration };", "+\t} else {", "+\t\tMethodDeclaration[] newMethods;", "+\t\tSystem.arraycopy(", "+\t\t\tthis.missingAbstractMethods,", "+\t\t\t0,", "+\t\t\tnewMethods = new MethodDeclaration[this.missingAbstractMethods.length + 1],", "+\t\t\t1,", "+\t\t\tthis.missingAbstractMethods.length);", "+\t\tnewMethods[0] = methodDeclaration;", "+\t\tthis.missingAbstractMethods = newMethods;", "+\t}", "+", "+\t//============BINDING UPDATE==========================", "+\tmethodDeclaration.binding = new MethodBinding(", "+\t\t\tmethodDeclaration.modifiers, //methodDeclaration", "+\t\t\tmethodBinding.selector,", "+\t\t\tmethodBinding.returnType,", "+\t\t\targumentsLength == 0 ? Binding.NO_PARAMETERS : argumentTypes, //arguments bindings", "+\t\t\tmethodBinding.thrownExceptions, //exceptions", "+\t\t\tthis.binding); //declaringClass", "+\t\t\t", "+\tmethodDeclaration.scope = new MethodScope(this.scope, methodDeclaration, true);", "+\tmethodDeclaration.bindArguments();", "-\t\t//===================================================", "+\t//===================================================", "-\t\treturn methodDeclaration;", "-\t}", "+\treturn methodDeclaration;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "920f2d43e54a11af1bc032698bc90c4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "signatureAfterChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "diff": ["-\t// anonymous type constructor creation", "-\tpublic MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding) {", "-", "-\t\t//Add to method'set, the default constuctor that just recall the", "-\t\t//super constructor with the same arguments", "-\t\tString baseName = \"$anonymous\"; //$NON-NLS-1$", "-\t\tTypeBinding[] argumentTypes = inheritedConstructorBinding.parameters;", "-\t\tint argumentsLength = argumentTypes.length;", "-\t\t//the constructor", "-\t\tConstructorDeclaration cd = new ConstructorDeclaration(this.compilationResult);", "-\t\tcd.selector = new char[] { 'x' }; //no maining", "-\t\tcd.sourceStart = sourceStart;", "-\t\tcd.sourceEnd = sourceEnd;", "-\t\tint newModifiers = modifiers & ExtraCompilerModifiers.AccVisibilityMASK;", "-\t\tif (inheritedConstructorBinding.isVarargs()) {", "-\t\t\tnewModifiers |= ClassFileConstants.AccVarargs;", "-\t\t}", "-\t\tcd.modifiers = newModifiers;", "-\t\tcd.isDefaultConstructor = true;", "-", "-\t\tif (argumentsLength > 0) {", "-\t\t\tArgument[] arguments = (cd.arguments = new Argument[argumentsLength]);", "-\t\t\tfor (int i = argumentsLength; --i >= 0;) {", "-\t\t\t\targuments[i] = new Argument((baseName + i).toCharArray(), 0L, null /*type ref*/, ClassFileConstants.AccDefault);", "-\t\t\t}", "-\t\t}", "-", "-\t\t//the super call inside the constructor", "-\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "-\t\tcd.constructorCall.sourceStart = sourceStart;", "-\t\tcd.constructorCall.sourceEnd = sourceEnd;", "-", "-\t\tif (argumentsLength > 0) {", "-\t\t\tExpression[] args;", "-\t\t\targs = cd.constructorCall.arguments = new Expression[argumentsLength];", "-\t\t\tfor (int i = argumentsLength; --i >= 0;) {", "-\t\t\t\targs[i] = new SingleNameReference((baseName + i).toCharArray(), 0L);", "-\t\t\t}", "-\t\t}", "-", "-\t\t//adding the constructor in the methods list", "-\t\tif (methods == null) {", "-\t\t\tmethods = new AbstractMethodDeclaration[] { cd };", "-\t\t\t\tmethods,", "-\t\t\t\tnewMethods = new AbstractMethodDeclaration[methods.length + 1],", "-\t\t\t\tmethods.length);", "-\t\t\tnewMethods[0] = cd;", "-\t\t\tmethods = newMethods;", "-\t\t//============BINDING UPDATE==========================", "-\t\tcd.binding = new MethodBinding(", "-\t\t\t\tcd.modifiers, //methodDeclaration", "-\t\t\t\targumentsLength == 0 ? Binding.NO_PARAMETERS : argumentTypes, //arguments bindings", "-\t\t\t\tinheritedConstructorBinding.thrownExceptions, //exceptions", "-\t\t\t\tbinding); //declaringClass", "-\t\t\t\t", "-\t\tcd.scope = new MethodScope(scope, cd, true);", "-\t\tcd.bindArguments();", "-\t\tcd.constructorCall.resolve(cd.scope);", "+// anonymous type constructor creation", "+public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding) {", "+\t//Add to method'set, the default constuctor that just recall the", "+\t//super constructor with the same arguments", "+\tString baseName = \"$anonymous\"; //$NON-NLS-1$", "+\tTypeBinding[] argumentTypes = inheritedConstructorBinding.parameters;", "+\tint argumentsLength = argumentTypes.length;", "+\t//the constructor", "+\tConstructorDeclaration cd = new ConstructorDeclaration(this.compilationResult);", "+\tcd.selector = new char[] { 'x' }; //no maining", "+\tcd.sourceStart = this.sourceStart;", "+\tcd.sourceEnd = this.sourceEnd;", "+\tint newModifiers = this.modifiers & ExtraCompilerModifiers.AccVisibilityMASK;", "+\tif (inheritedConstructorBinding.isVarargs()) {", "+\t\tnewModifiers |= ClassFileConstants.AccVarargs;", "+\t}", "+\tcd.modifiers = newModifiers;", "+\tcd.isDefaultConstructor = true;", "-\t\tif (binding.methods == null) {", "-\t\t\tbinding.methods = new MethodBinding[] { cd.binding };", "-\t\t} else {", "-\t\t\tMethodBinding[] newMethods;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tbinding.methods,", "-\t\t\t\t0,", "-\t\t\t\tnewMethods = new MethodBinding[binding.methods.length + 1],", "-\t\t\t\t1,", "-\t\t\t\tbinding.methods.length);", "-\t\t\tnewMethods[0] = cd.binding;", "-\t\t\tbinding.methods = newMethods;", "+\tif (argumentsLength > 0) {", "+\t\tArgument[] arguments = (cd.arguments = new Argument[argumentsLength]);", "+\t\tfor (int i = argumentsLength; --i >= 0;) {", "+\t\t\targuments[i] = new Argument((baseName + i).toCharArray(), 0L, null /*type ref*/, ClassFileConstants.AccDefault);", "-\t\t//===================================================", "+\t}", "+\t//the super call inside the constructor", "+\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\tcd.constructorCall.sourceStart = this.sourceStart;", "+\tcd.constructorCall.sourceEnd = this.sourceEnd;", "-\t\treturn cd.binding;", "+\tif (argumentsLength > 0) {", "+\t\tExpression[] args;", "+\t\targs = cd.constructorCall.arguments = new Expression[argumentsLength];", "+\t\tfor (int i = argumentsLength; --i >= 0;) {", "+\t\t\targs[i] = new SingleNameReference((baseName + i).toCharArray(), 0L);", "+\t\t}", "+\t//adding the constructor in the methods list", "+\tif (this.methods == null) {", "+\t\tthis.methods = new AbstractMethodDeclaration[] { cd };", "+\t} else {", "+\t\tAbstractMethodDeclaration[] newMethods;", "+\t\tSystem.arraycopy(", "+\t\t\tthis.methods,", "+\t\t\t0,", "+\t\t\tnewMethods = new AbstractMethodDeclaration[this.methods.length + 1],", "+\t\t\t1,", "+\t\t\tthis.methods.length);", "+\t\tnewMethods[0] = cd;", "+\t\tthis.methods = newMethods;", "+\t}", "+\t//============BINDING UPDATE==========================", "+\tcd.binding = new MethodBinding(", "+\t\t\tcd.modifiers, //methodDeclaration", "+\t\t\targumentsLength == 0 ? Binding.NO_PARAMETERS : argumentTypes, //arguments bindings", "+\t\t\tinheritedConstructorBinding.thrownExceptions, //exceptions", "+\t\t\tthis.binding); //declaringClass", "+\t\t\t", "+\tcd.scope = new MethodScope(this.scope, cd, true);", "+\tcd.bindArguments();", "+\tcd.constructorCall.resolve(cd.scope);", "+", "+\tif (this.binding.methods == null) {", "+\t\tthis.binding.methods = new MethodBinding[] { cd.binding };", "+\t} else {", "+\t\tMethodBinding[] newMethods;", "+\t\tSystem.arraycopy(", "+\t\t\tthis.binding.methods,", "+\t\t\t0,", "+\t\t\tnewMethods = new MethodBinding[this.binding.methods.length + 1],", "+\t\t\t1,", "+\t\t\tthis.binding.methods.length);", "+\t\tnewMethods[0] = cd.binding;", "+\t\tthis.binding.methods = newMethods;", "+\t}", "+\t//===================================================", "+", "+\treturn cd.binding;", "+}"]}], "num": 70433}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a83c55407216b272599002d3b73dfcf5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cf6e9a556039bfd6370ac08c174f535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "adb31abd7b76aacf34a5241ce11f6a5ccfcea015", "commitAfterChange": "d9a97d862b475eea227de958d835b86e43eefc95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected void runGc()", "signatureAfterChange": " \tprotected void runGc()", "diff": ["-\t\tlong delta, free;", "-\t\tdo {", "+\t\tlong delta=0, free=0;", "+\t\tfor (int i=0; i<MAX_GC; i++) {", "-\t\t} while (iterations<MAX_GC && delta>DELTA_GC);", "-\t\tif (iterations == MAX_GC && delta > (DELTA_GC*10)) {", "+\t\t}", "+\t\tif (iterations == MAX_GC && delta > DELTA_GC) {", "-\t\t\tSystem.err.println(this.scenarioShortName+\": still get \"+delta+\" unfreeable memory (free=\"+free+\",total=\"+Runtime.getRuntime().totalMemory()+\") after \"+MAX_GC+\" gc...\");", "+\t\t\tSystem.out.println(\"WARNING: \"+this.scenarioShortName+\" still get \"+delta+\" unfreeable memory (free=\"+free+\",total=\"+Runtime.getRuntime().totalMemory()+\") after \"+MAX_GC+\" gc...\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b400be9ef0bafa7509ac3f69d0090457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "01b4ca7b386e2151e72abd0b2f1c2ecda16f856e", "commitAfterChange": "a2a25daab3f792071cba7e3d51c3d2abf00c6c2a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tboolean argumentsTypeElided = argumentsTypeElided();", "+\t\tint length = this.arguments == null ? 0 : this.arguments.length;", "+\t\tif (!argumentsTypeElided) {", "+\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\tthis.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);", "+\t\t}", "-\t\tboolean argumentsTypeElided = argumentsTypeElided();", "-\t\t\t\tint length = this.arguments != null ? this.arguments.length : 0;", "-\t\tint length = this.arguments == null ? 0 : this.arguments.length;", "-\t\t\tparameterType = argumentsTypeElided ? expectedParameterType : (this.argumentTypes[i] = argument.type.resolveType(this.scope, true /* check bounds*/));", "+\t\t\tparameterType = argumentsTypeElided ? expectedParameterType : this.argumentTypes[i];"]}], "num": 58699}
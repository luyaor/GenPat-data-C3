{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a219068bcff717539b361491d3d56e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88da5826ea68613a5186d3108381e980", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope) {", "+\tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds) {", "-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, qualifiedType));", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, qualifiedType), argTypes);", "+\t\t\t\t\t\t\tthis, scope.environment().createRawType((ReferenceBinding)currentType.erasure(), qualifiedType), argTypes);", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "-\t\t\t\t// check argument type compatibility now if not a class scope", "-\t\t\t\tif (!isClassScope) // otherwise will do it in Scope.connectTypeVariables()", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "+\t\t\t\t// check argument type compatibility", "+\t\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, qualifiedType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType(currentType, null, qualifiedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b705d7ad98bd5638dac8205801599510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "b4a82654048b0e1a92515a3233eb1c8bdd4b0ce9", "commitAfterChange": "5f62b57c23f20dcf7179ebcba2a671ee289e6e10", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testParseCompilationUnit2() throws CoreException", "signatureAfterChange": " \tpublic void testParseCompilationUnit2() throws CoreException", "diff": ["-\t\t\tCompilationUnit cu = AST.parseCompilationUnit(", "-\t\t\t\t(\"public class Z extends Y {\\n\" +", "-\t\t\t\t\"}\").toCharArray(),", "-\t\t\t\t \"Z.java\",", "-\t\t\t\tgetJavaProject(\"P\"),", "-\t\t\t\towner,", "-\t\t\t\tnull);", "+\t\t\tchar[] source = (", "+\t\t\t\t\"public class Z extends Y {\\n\" +", "+\t\t\t\t\"}\").toCharArray();", "+\t\t\tASTParser parser = ASTParser.newParser(AST.LEVEL_2_0);", "+\t\t\tparser.setSource(source);", "+\t\t\tparser.setUnitName(\"Z.java\");", "+\t\t\tparser.setProject(getJavaProject(\"P\"));", "+\t\t\tparser.setWorkingCopyOwner(owner);", "+\t\t\tCompilationUnit cu = (CompilationUnit) parser.createAST(null);", "+"]}], "num": 64707}
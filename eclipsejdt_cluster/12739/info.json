{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d290548ec06b24a5bcffbb1541cf5d7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae14f6e3bb4703cbbb4fe488dab53268", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\tif (enclosingElement == null)", "+\t\tif (enclosingElement == null) {", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(enclosingElement, method.binding, nodeSet);", "+\t\t}", "+\t\t// Traverse method declaration to report matches both in local types declaration", "+\t\t// and in local variables declaration", "+\t\tASTNode[] nodes = typeInHierarchy ? nodeSet.matchingNodes(method.declarationSourceStart, method.declarationSourceEnd) : null;", "+\t\tboolean report = (this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0 && encloses(enclosingElement);", "+\t\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, report ? nodes : null, nodeSet, this);", "-\t\t\tmethod.traverse(localDeclarationVisitor, (ClassScope) null);", "+\t\t\tmethod.traverse(declarationVisitor, (ClassScope) null);", "+\t\t}", "+\t\t// Report all nodes and remove them", "+\t\tif (nodes != null) {", "+\t\t\tint length = nodes.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\tif (report && level != null) {", "+\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t}", "+\t\t\t}", "-\t\treportMatching(method.annotations, enclosingElement, method.binding, nodeSet, true, true);", "+\t\treportMatching(method.annotations, enclosingElement, null, method.binding, nodeSet, true, true);", "-\t\t\t\tif (enclosingElement == null)", "+\t\t\t\tif (enclosingElement == null) {", "+\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);", "+\t\t\t\t\tif (((InternalSearchPattern)this.pattern).mustResolve) {", "+\t\t\t\t\t\t// Visit only if the pattern must resolve", "+\t\t\t\t\t\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, nodes, nodeSet, this);", "+\t\t\t\t\t\tmethod.traverse(declarationVisitor, (ClassScope) null);", "+\t\t\t\t\t\tint length = nodes.length;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, null, method.binding, level.intValue(), this);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90ff7d4e959d2767f5dc9755608eaa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\tif (enclosingElement == null)", "+\t\tif (enclosingElement == null) {", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(enclosingElement, field.binding, nodeSet);", "+\t\t}", "+\t\t// Traverse field declaration(s) to report matches both in local types declaration", "+\t\t// and in local variables declaration", "+\t\tint fieldEnd = field.endPart2Position == 0 ? field.declarationSourceEnd : field.endPart2Position;", "+\t\tASTNode[] nodes = typeInHierarchy ? nodeSet.matchingNodes(field.sourceStart, fieldEnd) : null;", "+\t\tboolean report = (this.matchContainer & PatternLocator.FIELD_CONTAINER) != 0 && encloses(enclosingElement);", "+\t\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, report ? nodes : null, nodeSet, this);", "-\t\t\tfield.traverse(localDeclarationVisitor, null);", "+\t\t\tfield.traverse(declarationVisitor, (MethodScope) null);", "+\t\t}", "+\t\t// Report all nodes and remove them", "+\t\tif (nodes != null) {", "+\t\t\tint length = nodes.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\tif (report && level != null) {", "+\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);", "+\t\t\t\t}", "+\t\t\t}", "+\tIJavaElement[] otherElements = null;", "-\t\treportMatching(field.annotations, enclosingElement, field.binding, nodeSet, true, true);", "+\t\tif (otherFields != null) {", "+\t\t\totherElements = createHandles(otherFields, type, parent);", "+\t\t}", "+\t\treportMatching(field.annotations, enclosingElement, otherElements, field.binding, nodeSet, true, true);", "-\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "-\t\t\t\t\t\t\tif (otherFields != null) {", "-\t\t\t\t\t\t\t\tint length = otherFields.length;", "-\t\t\t\t\t\t\t\tint size = 0;", "-\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "-\t\t\t\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "-\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "-\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (otherFields != null && otherElements == null) {", "+\t\t\t\t\t\t\t\totherElements = createHandles(otherFields, type, parent);", "-\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, nodes, nodeSet, this);", "+\t\t\t\t\tfield.traverse(declarationVisitor, (MethodScope) null);", "+\t\t\t\t\tint length = nodes.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "-\t\t\t\t\t\tBlockScope blockScope = null;", "-\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "-\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "-\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "+\t\t    \t        this.patternLocator.matchReportReference(node, enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), field.binding, level.intValue(), this);"]}], "num": 12739}
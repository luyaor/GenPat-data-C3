{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aeb957ac23d50633d5296a63da5baf0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e505ad1f60ad38d12f91ad9e87b9065", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "3973964fa15a8c49d459282ce0d949753f7e2224", "commitAfterChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static synchronized String addProcessorOption(IJavaProject jproj, String key, String val)", "signatureAfterChange": "     public static String addProcessorOption(IJavaProject jproj, String key, String val)", "diff": ["-    public static synchronized String addProcessorOption(IJavaProject jproj, String key, String val) {", "+    public static String addProcessorOption(IJavaProject jproj, String key, String val) {", "-    \tMap<String, String> options = getRawProcessorOptions(jproj);", "-    \tString old = options.get(key);", "-    \toptions.put(key, val);", "-    \tString serializedOptions = serializeProcessorOptions(options);", "-    \tsetString(jproj, AptPreferenceConstants.APT_PROCESSOROPTIONS, serializedOptions);", "+    \tString old;", "+    \tIEclipsePreferences node;", "+    \tsynchronized (AptConfig.class) {", "+\t    \tMap<String, String> options = getRawProcessorOptions(jproj);", "+\t    \told = options.get(key);", "+\t    \toptions.put(key, val);", "+\t    \tString serializedOptions = serializeProcessorOptions(options);", "+\t\t\tIScopeContext context = (null != jproj) ? ", "+\t\t\t\t\tnew ProjectScope(jproj.getProject()) : new InstanceScope();", "+\t\t\tnode = context.getNode(AptPlugin.PLUGIN_ID);", "+\t\t\tnode.put(AptPreferenceConstants.APT_PROCESSOROPTIONS, serializedOptions);", "+    \t}", "+    \t// Do the flush outside of the synchronized block to avoid deadlock:", "+    \t// flush causes a file write, which will block if the workspace is locked.", "+    \tflushPreference(AptPreferenceConstants.APT_PROCESSOROPTIONS, node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f3e7e8be3e1fdb6055107617d4bb5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "3973964fa15a8c49d459282ce0d949753f7e2224", "commitAfterChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static synchronized String removeProcessorOption(IJavaProject jproj, String key)", "signatureAfterChange": "     public static String removeProcessorOption(IJavaProject jproj, String key)", "diff": ["-    public static synchronized String removeProcessorOption(IJavaProject jproj, String key) {", "-    \tMap<String, String> options = getRawProcessorOptions(jproj);", "-    \tString old = options.get(key);", "-    \toptions.remove(key);", "-    \tString serializedOptions = serializeProcessorOptions(options);", "-    \tsetString(jproj, AptPreferenceConstants.APT_PROCESSOROPTIONS, serializedOptions);", "+    public static String removeProcessorOption(IJavaProject jproj, String key) {", "+    \tString old;", "+    \tIEclipsePreferences node;", "+    \tsynchronized (AptConfig.class) {", "+\t    \tMap<String, String> options = getRawProcessorOptions(jproj);", "+\t    \told = options.get(key);", "+\t    \toptions.remove(key);", "+\t    \tString serializedOptions = serializeProcessorOptions(options);", "+\t\t\tIScopeContext context = (null != jproj) ? ", "+\t\t\t\t\tnew ProjectScope(jproj.getProject()) : new InstanceScope();", "+\t\t\tnode = context.getNode(AptPlugin.PLUGIN_ID);", "+\t\t\tnode.put(AptPreferenceConstants.APT_PROCESSOROPTIONS, serializedOptions);", "+    \t}", "+    \t// Do the flush outside of the synchronized block to avoid deadlock:", "+    \t// flush causes a file write, which will block if the workspace is locked.", "+    \tflushPreference(AptPreferenceConstants.APT_PROCESSOROPTIONS, node);"]}], "num": 35895}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe8877ea12991c04c9988c5ea4807603", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eaf71a39c5bf77ea0ffe45deabb30ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "05ca87fa79cdcdbf8adddd11b0044e5bbc381076", "commitAfterChange": "1a08d829c1b17811d102043c26cfbba0a6765570", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     \t\tpublic Boolean call()", "signatureAfterChange": "     \t\tpublic Boolean call()", "diff": ["+\t\t\tprivate boolean hasRun = false;", "-    \t\t\treturn EclipseCompiler.this.call() ? Boolean.TRUE : Boolean.FALSE;", "+    \t\t\tif (this.hasRun) {", "+    \t\t\t\tthrow new IllegalStateException(\"This task has already been run\"); //$NON-NLS-1$", "+    \t\t\t}", "+    \t\t\tBoolean value = EclipseCompiler.this.call() ? Boolean.TRUE : Boolean.FALSE;", "+    \t\t\tthis.hasRun = true;", "+\t\t\t\treturn value;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f6638d03d3d355c23d887de1fd2b357", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "05ca87fa79cdcdbf8adddd11b0044e5bbc381076", "commitAfterChange": "1a08d829c1b17811d102043c26cfbba0a6765570", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\t", "+", "-\t\t", "+", "+\t\t\tprivate boolean hasRun = false;", "-    \t\t\treturn EclipseCompiler.this.call() ? Boolean.TRUE : Boolean.FALSE;", "+    \t\t\tif (this.hasRun) {", "+    \t\t\t\tthrow new IllegalStateException(\"This task has already been run\"); //$NON-NLS-1$", "+    \t\t\t}", "+    \t\t\tBoolean value = EclipseCompiler.this.call() ? Boolean.TRUE : Boolean.FALSE;", "+    \t\t\tthis.hasRun = true;", "+\t\t\t\treturn value;"]}], "num": 12253}
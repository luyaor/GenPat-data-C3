{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9f27cd51238e0586ad2b3703ab0bc0c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd481c3a2ca84fea81ff97a78ae2e74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/CompilationProcessorEnv.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate String resolveVarPath(String value)", "signatureAfterChange": " \tprivate String resolveVarPath(IJavaProject jproj, String value)", "diff": ["-\tprivate String resolveVarPath(String value) {", "+\tprivate String resolveVarPath(IJavaProject jproj, String value) {", "+\t\t// If it matches %PROJECT.DIR%/project, the path is relative to the current project.", "+\t\tif (jproj != null && PATHVAR_PROJECTROOT.equals(firstToken)) {", "+\t\t\t// all is well; do the substitution", "+\t\t\tIPath relativePath = path.removeFirstSegments(1);", "+\t\t\tIPath absoluteProjPath = jproj.getProject().getLocation();", "+\t\t\tIPath absoluteResPath = absoluteProjPath.append(relativePath);", "+\t\t\treturn absoluteResPath.toOSString();", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a32d20fdc1a63e98f949181a809595d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "89bd64197a8c81d9353ca25ee2694b070255ceb5", "commitAfterChange": "8cc33a88b7e04cb90905b591a01c27e56af27e07", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \t\tpublic void removeAllNew(Set onDemandConflicts)", "signatureAfterChange": "  \t\tpublic void filterImplicitImports(boolean useContextToFilterImplicitImports)", "diff": ["-\t\tpublic void removeAllNew(Set onDemandConflicts) {", "+\t\tpublic void filterImplicitImports(boolean useContextToFilterImplicitImports) {", "-\t\t\t\tif (curr.isNew() /*&& (onDemandConflicts == null || onDemandConflicts.contains(curr.getSimpleName()))*/) {", "-\t\t\t\t\tthis.importEntries.remove(i);", "+\t\t\t\tif (curr.isNew()) {", "+\t\t\t\t\tif (!useContextToFilterImplicitImports) {", "+\t\t\t\t\t\tthis.importEntries.remove(i);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString elementName = curr.getElementName();", "+\t\t\t\t\t\tint lastIndexOf = elementName.lastIndexOf('.');", "+\t\t\t\t\t\tboolean internalClassImport = lastIndexOf > getName().length();", "+\t\t\t\t\t\tif (!internalClassImport) {", "+\t\t\t\t\t\t\tthis.importEntries.remove(i);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 53166}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9928e339bb69c3e346f016660737a4b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "487ce31e4237f934785153e9564c4deb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "8ceb51d3aeb97f81e6ea986960d31cca67514932", "commitAfterChange": "79ea7516ee993fa0354e3522ad8337d5c8c5bf24", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean hasClasspathChanged()", "signatureAfterChange": "  private boolean hasClasspathChanged()", "diff": ["-\t\t\tSystem.out.println(newSourceLocations[n] + \" != \" + oldSourceLocations[o]); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < newLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < oldLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t}", "-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < newLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < oldLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t}", "-\t\t\tSystem.out.println(newBinaryLocations[n] + \" != \" + oldBinaryLocations[o]); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"New binary locations:\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(newBinaryLocations[i]);", "-\t\t\tSystem.out.println(\"was:\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"    \" + newBinaryLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Old binary locations:\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(oldBinaryLocations[i]);", "+\t\t\t\tSystem.out.println(\"    \" + oldBinaryLocations[i].debugPathString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6feb8da6299a5ec9e944e423ed7e4c04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "d9f5208ccd9842b7305a76e615fa0b04487a1a33", "commitAfterChange": "9ac3d3205dd69d72df25a75c1584224d5519622d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "signatureAfterChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "diff": ["-\tchar[] initialSource = unit.getSource().toCharArray();", "+\tString initialSource = unit.getSource();", "+\tint[] initialPositions = null;", "+\tArrayList arrayList = new ArrayList();", "-\t\tpositions = new int[initialSource.length];", "-\t\tfor (int i = 0; i < initialSource.length; i++) {", "-\t\t\tpositions[i] = i;", "+\t\tfor (int i = 0; i < initialSource.length(); i++) {", "+\t\t\tif (!Character.isWhitespace(initialSource.charAt(i))) {", "+\t\t\t\tarrayList.add(new Integer(i));", "+\t\t\t}", "+\t\tfinal int length = arrayList.size();", "+\t\tpositions = new int[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tpositions[i] = ((Integer) arrayList.get(i)).intValue();", "+\t\t}", "+\t\tinitialPositions = new int[length];", "+\t\tSystem.arraycopy(positions, 0, initialPositions, 0, length);", "+\tfinal int expectedResultLength = expectedResult.length();", "-\t\t\tassertEquals(\"wrong mapped positions at \" + i + \" <-> \" + positions[i], expectedResult.charAt(positions[i]), initialSource[i]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tchar mappedChar = ' ';", "+\t\t\tchar initial = initialSource.charAt(initialPositions[i]);", "+\t\t\ttry {", "+\t\t\t\tmappedChar = expectedResult.charAt(positions[i]);", "+\t\t\t\tif (mappedChar != initial) {", "+\t\t\t\t\tSystem.out.println(\"wrong mapped positions: \" + initialPositions[i] + \" <-> \" + positions[i] + \": expected \" + initial + \" but was \" + mappedChar); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tassertEquals(\"wrong mapped positions: \" + initialPositions[i] + \" <-> \" + positions[i], initial, mappedChar); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t} catch(StringIndexOutOfBoundsException e) {", "+\t\t\t\tSystem.out.println(\"Out of bounds : (length = \" + expectedResultLength + \") \" + positions[i]);", "+\t\t\t}"]}], "num": 22270}
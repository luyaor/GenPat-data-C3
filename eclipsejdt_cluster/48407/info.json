{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edb09fec3a7a3edbc4b12bf910f71f25", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24fffb5c8717364b88d7cc53561eee20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "commitAfterChange": "2bb908fe4c4bec3f1e5a84b7bbc8c64b4eaa7704", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private void updateProblemLength()", "signatureAfterChange": "     private void updateProblemLength()", "diff": ["-    {", "+    {\t", "-    \t", "+    \t\tint[] classNameRange = null;", "-    \t\t\tif( problem.getSourceEnd() == -1 ){", "+    \t\t\tif( problem.getSourceStart() < 0 ){", "+    \t\t\t\tif( classNameRange == null )", "+    \t\t\t\t\tclassNameRange = getClassNameRange(file);", "+    \t\t\t\tproblem.setSourceStart(classNameRange[0]);", "+    \t\t\t\tproblem.setSourceEnd(classNameRange[1]);", "+    \t\t\t\tproblem.setSourceLineNumber(classNameRange[2]);", "+    \t\t\t}", "+    \t\t\tif( problem.getSourceEnd() < 0 ){", "-\t    \t\t\t\tif( problem.getSourceEnd() == -1 )", "+\t    \t\t\t\tif( problem.getSourceEnd() < 0 )", "-\t    \t\t\t\tif( problem.getSourceEnd() == -1 ){", "+\t    \t\t\t\tif( problem.getSourceEnd() < 0 ){", "-\t    \t    \t\t\tproblem.setSourceEnd(endingOffset);\t    \t    \t\t\t", "+\t    \t    \t\t\tproblem.setSourceEnd(endingOffset-1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b840fcea66e275c407d163437bc9c48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "2c216d62729c7bf0a533819d86bda0a688a39a26", "commitAfterChange": "789f8ee3dc78aa2cb74e4e857fb2da09cf6b5b4e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["-\t\t\tTypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\t\tTypeVariableBinding[] originalVariables = this.originalMethod.typeVariables;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tnewArguments[i] = environment.convertToRawType(originalVariables[i].upperBound());", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "+\t\t\t\tif (originalVariable.boundsCount() == 1) {", "+\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(originalVariable.upperBound());", "+\t\t\t\t} else {", "+\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(", "+\t\t\t\t\t\t\t// use an intersection type to retain full bound information", "+\t\t\t\t\t\t\tthis.environment.createWildcard(null, 0, originalVariable.superclass(), originalVariable.superInterfaces(), Wildcard.EXTENDS));", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 48407}
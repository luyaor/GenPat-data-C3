{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a63e9d96389980f6a6c8626a560f061", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "632303a51cf98f52a1b69bfb69d6f9a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ConditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tpublic int reachMode()", "signatureAfterChange": "  public UnconditionalFlowInfo unconditionalInitsWithoutSideEffect()", "diff": ["-", "-\tpublic int reachMode(){", "-\t\treturn unconditionalInits().reachMode();", "-\t}", "+", "+public UnconditionalFlowInfo unconditionalInitsWithoutSideEffect() {", "+\t// cannot do better here than unconditionalCopy - but still a different ", "+\t// operation for UnconditionalFlowInfo", "+\treturn initsWhenTrue.unconditionalCopy().", "+\t\t\tmergedWith(initsWhenFalse.unconditionalInits());", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de90f01c082cd2e176074103e0544e78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\t\tBlockScope currentScope, \t\t\tFlowContext flowContext, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\t\tBlockScope currentScope, \t\t\tFlowContext flowContext, \t\t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "+\t\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.unconditionalInits());", "-\t\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "+\t\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.unconditionalInits());"]}], "num": 1741}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6cbb4c5d10dec5a49a13dc9206ec5ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c1b06e3ef36fa2424e49ece31b5c9f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource member = members[i];", "-\t\t\tString memberName = member.getName();", "+\t\tint length = members.length;", "+\t\tif (length >0) {", "+\t\t\tString sourceLevel = javaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIResource member = members[i];", "+\t\t\t\tString memberName = member.getName();", "-\t\t\tswitch(member.getType()) {", "+\t\t\t\tswitch(member.getType()) {", "-\t\t\t    case IResource.FOLDER:", "-\t\t\t\t\t// recurse into sub folders even even parent not included as a sub folder could be included", "-\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65637)", "-\t\t\t\t\tif (Util.isValidFolderNameForPackage(memberName)) {", "-\t\t\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "-\t\t\t\t\t\tif (javaProject.contains(member)) {", "-\t\t\t\t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "-\t\t\t\t\t\t\tboolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t    \tbreak;", "-\t\t\t    case IResource.FILE:", "-\t\t\t        // inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "-\t\t\t\t\tif (!hasIncluded", "-\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(memberName)", "+\t\t\t    \tcase IResource.FOLDER:", "+\t\t\t    \t\t// recurse into sub folders even even parent not included as a sub folder could be included", "+\t\t\t    \t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65637)", "+\t\t\t    \t\tif (Util.isValidFolderNameForPackage(memberName, sourceLevel, complianceLevel)) {", "+\t\t\t    \t\t\t// eliminate binary output only if nested inside direct subfolders", "+\t\t\t    \t\t\tif (javaProject.contains(member)) {", "+\t\t\t    \t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "+\t\t\t    \t\t\t\tboolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "+\t\t\t    \t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "+\t\t\t    \t\t\t}", "+\t\t\t    \t\t}", "+\t\t\t    \t\tbreak;", "+\t\t\t    \tcase IResource.FILE:", "+\t\t\t    \t\t// inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "+\t\t\t    \t\tif (!hasIncluded", "+\t\t\t    \t\t\t\t&& Util.isValidCompilationUnitName(memberName, sourceLevel, complianceLevel)", "-\t\t\t\t\t\thasIncluded = true;", "-\t\t\t\t\t    IPackageFragment pkg = getPackageFragment(pkgName);", "-\t\t\t\t\t    vChildren.add(pkg); ", "-\t\t\t\t\t}", "-\t\t\t        break;", "+\t\t\t    \t\t\thasIncluded = true;", "+\t\t\t    \t\t\tIPackageFragment pkg = getPackageFragment(pkgName);", "+\t\t\t    \t\t\tvChildren.add(pkg); ", "+\t\t\t    \t\t}", "+\t\t\t    \t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b303eaf70903f2b591515f62066bb017", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, String prefix, ArrayList vChildren, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String prefix, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-protected void computeFolderChildren(IContainer folder, String prefix, ArrayList vChildren, char[][] exclusionPatterns) throws JavaModelException {", "-\tIPackageFragment pkg = getPackageFragment(prefix);", "-\tvChildren.add(pkg);", "+protected void computeFolderChildren(IContainer folder, boolean isIncluded, String prefix, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException {", "+", "+\tif (isIncluded) {", "+\t    IPackageFragment pkg = getPackageFragment(prefix);", "+\t\tvChildren.add(pkg);", "+\t}", "+\t\tboolean hasIncluded = isIncluded;", "-\t\t\tif (member.getType() == IResource.FOLDER ", "-\t\t\t\t&& Util.isValidFolderNameForPackage(memberName)", "-\t\t\t\t&& !Util.isExcluded(member, exclusionPatterns)) {", "-\t\t\t\t\t", "-\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "-\t\t\t\tif (javaProject.contains(member)) {", "-\t\t\t\t\tString newPrefix;", "-\t\t\t\t\tif (prefix.length() == 0) {", "-\t\t\t\t\t\tnewPrefix = memberName;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tnewPrefix = prefix + \".\" + memberName; //$NON-NLS-1$", "+\t\t\t", "+\t\t\tswitch(member.getType()) {", "+\t\t\t    ", "+\t\t\t    case IResource.FOLDER:", "+\t\t\t\t\tif (Util.isValidFolderNameForPackage(memberName)) {", "+\t\t\t\t\t    boolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t// keep looking inside as long as included already, or may have child included due to inclusion patterns", "+\t\t\t\t\t    if (isMemberIncluded || inclusionPatterns != null) { ", "+\t\t\t\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "+\t\t\t\t\t\t\tif (javaProject.contains(member)) {", "+\t\t\t\t\t\t\t\tString newPrefix;", "+\t\t\t\t\t\t\t\tif (prefix.length() == 0) {", "+\t\t\t\t\t\t\t\t\tnewPrefix = memberName;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnewPrefix = prefix + \".\" + memberName; //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newPrefix, vChildren, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\tcomputeFolderChildren((IFolder) member, newPrefix, vChildren, exclusionPatterns);", "-\t\t\t\t}", "+\t\t\t    \tbreak;", "+\t\t\t    case IResource.FILE:", "+\t\t\t        // inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "+\t\t\t\t\tif (!hasIncluded", "+\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(memberName)", "+\t\t\t\t\t\t\t\t&& !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\t\thasIncluded = true;", "+\t\t\t\t\t    IPackageFragment pkg = getPackageFragment(prefix);", "+\t\t\t\t\t    vChildren.add(pkg); ", "+\t\t\t\t\t}", "+\t\t\t        break;"]}], "num": 67666}
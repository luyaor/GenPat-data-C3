{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d2c54fca132bbfa428bd9ccad5fe0fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "798428bbf00e59a593ea430c6abf615b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "bb843f95599450191304045d0679d3f06eac28ae", "commitAfterChange": "4bbe3baf3c6fb1695afac4562bc59202c79b2185", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-            /*", "-             * No bootclasspath, we will add one throught the JRE_LIB variable", "-             */", "-            String javaHome = System.getProperty(\"java.home\");//$NON-NLS-1$", "-            if (javaHome == null) {", "-\t\t\t\tthrow new BuildException(Util.getString(\"ant.jdtadapter.error.noBootclasspath\"));  //$NON-NLS-1$", "-            } else if (JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_4)", "-            \t\t|| JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_3)", "-            \t\t|| JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_2)) {", "-            \tFile f = new File(javaHome, \"/lib/rt.jar\");//$NON-NLS-1$", "-\t        \tif (f.exists()) {", "-\t\t\t\t\tcmd.createArgument().setPath(new Path(null, f.getAbsolutePath()));        \t", "-        \t\t} else {", "-\t\t\t\t\tthrow new BuildException(Util.getString(\"ant.jdtadapter.error.cannotInfereBootclasspath\", JavaEnvUtils.getJavaVersion()));  //$NON-NLS-1$", "-\t        \t}", "-           \t} else {", "-\t\t\t\tthrow new BuildException(Util.getString(\"ant.jdtadapter.error.cannotInfereBootclasspath\", JavaEnvUtils.getJavaVersion()));  //$NON-NLS-1$", "-           \t}", "+            includeJavaRuntime = true;", "-\t\tincludeJavaRuntime = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d577dae1f2f65054a386ed49feed468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "fe11cfff40c61fffff9aae0ef9f8efcbbccd75ca", "commitAfterChange": "75005dc0c3aa6109c4292d3d78ff1f819b20b258", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\t\t\tif (path.isAbsolute() && file != null) {", "-\t\t\t\tif (file == null) { // external file", "-\t\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t\t\t} else { // internal resource (not an IFile or not existing)", "-\t\t\t\t\tIPath location;", "-\t\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "-\t\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tfileSystemPath= location.toOSString();", "-\t\t\t\t}", "-\t\t\t} else if (!path.isAbsolute()) {", "-\t\t\t\tfile= root.getFile(path);", "-\t\t\t\tif (file == null || file.getType() != IResource.FILE) {", "-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tIPath location = file.getLocation();", "-\t\t\t\tif (location == null) {", "+\t\t\tif (file != null) {", "+\t\t\t\t// internal resource", "+\t\t\t\tIPath location;", "+\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\t// external resource"]}], "num": 21985}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f24b03d0d661010e5170fa370c00badc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61eaeedb08b2d33668413d2cd7c9cee7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fd4873f8881450efaceb482ead403702f0b3cd50", "commitAfterChange": "efd7cd38b35f875ede44936aed68717b93ca608e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t/*", "-\t\t\t * if 1.4 compliant, must filter out redundant protected methods from superclasses", "-\t\t\t */", "-\t\t\tif (isCompliant14) {", "+\t\t\tif (isCompliant14 && matchingMethod != null || found.size > 0) {", "+\t\t\t\t\t// if 1.4 compliant, must filter out redundant protected methods from superclasses", "-\t\t\t\t\tif ((currentMethod.modifiers & AccProtected) == 0) continue nextMethod;", "+\t\t\t\t\t// if ((currentMethod.modifiers & AccProtected) == 0) continue nextMethod;", "+\t\t\t\t\t// BUT we can also ignore any overridden method since we already know the better match (fixes 80028)", "-\t\t\t\t// TODO (kent) should skip inherited methods that are overridden"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63fec7b0cc7d44a3cc11619b85838eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tprivate static void setBoolean(IJavaProject jproject, String optionName, boolean value)", "signatureAfterChange": " \t \tprivate static void setBoolean(IJavaProject jproject, String optionName, boolean value)", "diff": ["-\t\tif (jproject != null) {", "+\t\tif (jproject != null && oldValue == null || (value != Boolean.parseBoolean(oldValue))) {", "-\t\t\taproj.handlePreferenceChange(optionName, oldValue, Boolean.toString(value));", "+\t\t\taproj.preferenceChanged(optionName);"]}], "num": 43935}
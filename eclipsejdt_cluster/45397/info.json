{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1504ad3d90cf9b0699a17284ca3603e5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3238947ae0809ceb2586cf2c05e766bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "7a8c3dc423c0b39a0d91a8547c98a520bb9dee61", "commitAfterChange": "9f0ebc31be56acb3fbfdaeae5760bc6493eb0026", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tpublic void test0017() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0017() throws JavaModelException", "diff": ["+\t\tList fragments = statement.fragments();", "+\t\tassertEquals(\"Wrong size\", 1,  fragments.size());", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tExpression initializer  = fragment.getInitializer();", "+\t\tassertNotNull(\"No initializer\", initializer);", "+\t\tITypeBinding binding = initializer.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86b12f5a9359d8b8fdcc4424d6730e91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": "  \tpublic void test0168() throws CoreException", "signatureAfterChange": "  \tpublic void test0168() throws CoreException", "diff": ["-\t\tassertTrue(\"Not a capture binding\", typeArguments[0].isCapture());", "-\t\tassertNotNull(\"No wildcard\", typeArguments[0].getWildcard());", "+\t\tfinal ITypeBinding typeBinding2 = typeArguments[0];", "+\t\tassertTrue(\"Not a capture binding\", typeBinding2.isCapture());", "+\t\tassertTrue(\"Not from source\", typeBinding2.isFromSource());", "+\t\tassertNotNull(\"No wildcard\", typeBinding2.getWildcard());"]}], "num": 45397}
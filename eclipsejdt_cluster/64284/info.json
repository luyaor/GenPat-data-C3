{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58a942263ff0e469758598c32d6f15e1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9a816fbe5e482a75beeb95d05063ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "aa717ce56e721f6ed4fc92594ba56da9f08c982e", "commitAfterChange": "5e93996c6b4562ee73fa5730afbd832d1574cd08", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\t  \tprivate void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "signatureAfterChange": "\t  \tprivate void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "diff": ["-\t\t\tint argumentLength = arguments.length;", "-\t\t\tAlignment argumentsAlignment = this.scribe.createAlignment(", "-\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "-\t\t\t\t\tthis.preferences.message_send_arguments_alignment,", "-\t\t\t\t\targumentLength,", "-\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "-\t\t\tboolean ok = false;", "-\t\t\tdo {", "-\t\t\t\ttry {", "-\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0; i < argumentLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "-\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\tint argumentsLength = arguments.length;", "+\t\t\tif (argumentsLength > 1) {", "+\t\t\t\tAlignment argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.message_send_arguments_alignment,", "+\t\t\t\t\t\targumentsLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "-\t\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "+\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t} while (!ok);", "-\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send);", "-\t\t} else {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_arguments);", "+\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t}", "+\t\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_arguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d3957f0a31d6225a10511c6345749f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "0b30e3bd30fe1e39e547d612dd69649980fc246c", "commitAfterChange": "5195e9af454b2916100d69750487aa83a5527c1e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "signatureAfterChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "diff": ["+\t\tint startingPositionInCascade = 1;", "+\t\t} else {", "+\t\t\tMessageSend currentMessageSend = fragments[1];", "+\t\t\tfinal int numberOfParens = (currentMessageSend.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageOpeningParenthesizedExpression(currentMessageSend, numberOfParens);", "+\t\t\t}", "+\t\t\tAstNode[] arguments = currentMessageSend.arguments;", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier); // selector", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_message_send);", "+\t\t\tif (arguments != null) {", "+\t\t\t\tint argumentLength = arguments.length;", "+\t\t\t\tAlignment argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.message_send_arguments_alignment,", "+\t\t\t\t\t\targumentLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\tboolean okForArguments = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int j = 0; j < argumentLength; j++) {", "+\t\t\t\t\t\t\tif (j > 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, j);", "+\t\t\t\t\t\t\tif (j > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\targuments[j].traverse(this, scope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tokForArguments = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!okForArguments);", "+\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send);", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageClosingParenthesizedExpression(currentMessageSend, numberOfParens);", "+\t\t\t}", "+\t\t\tstartingPositionInCascade = 2;", "-\t\t\t\tif (!fragment.isImplicitThis()) {", "-\t\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, 0);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 1; i < size; i++) {", "+\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, 0);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t\tfor (int i = startingPositionInCascade; i < size; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8ad9f2500fdeb9e21f0bf08661aca34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "bef94b122a5806a6bc4d6007e2830abcf111676d", "commitAfterChange": "280d119d240fe15fdcda0abda2f680707bc40458", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tpublic boolean visit(MethodInvocation node)", "signatureAfterChange": "  \tpublic boolean visit(MethodInvocation node)", "diff": ["+\t\t\t// check the first fragment", "+\t\t\tfinal Expression firstFragment = (Expression) fragments.get(0);", "+\t\t\tswitch(firstFragment.getNodeType()) {", "+\t\t\t\tcase ASTNode.METHOD_INVOCATION :", "+\t\t\t\t\tformatSingleMethodInvocation((MethodInvocation) firstFragment);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tfirstFragment.accept(this);", "+\t\t\t}", "+\t\t\tAlignment2 cascadingMessageSendAlignment =", "+\t\t\t\tthis.scribe.createAlignment(", "+\t\t\t\t\t\"cascadingMessageSendAlignment\", //$NON-NLS-1$", "+\t\t\t\t\tthis.preferences.alignment_for_selector_in_method_invocation,", "+\t\t\t\t\tAlignment.R_INNERMOST,", "+\t\t\t\t\tfragmentsLength,", "+\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\tthis.scribe.enterAlignment(cascadingMessageSendAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, 0);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t\t\tfor (int i = 1; i < fragmentsLength - 1; i++) {", "+\t\t\t\t\t\tMethodInvocation  currentMethodInvocation = (MethodInvocation) fragments.get(i);", "+\t\t\t\t\t\tformatSingleMethodInvocation(currentMethodInvocation);", "+\t\t\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, i);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t\t\t}", "+\t\t\t\t\tMethodInvocation  currentMethodInvocation = (MethodInvocation) fragments.get(fragmentsLength - 1);", "+\t\t\t\t\tformatSingleMethodInvocation(currentMethodInvocation);", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch(AlignmentException e){", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t}", "+\t\t\t} while (!ok);\t\t", "+\t\t\tthis.scribe.exitAlignment(cascadingMessageSendAlignment, true);", "-\t\t\tfinal List typeArguments = node.typeArguments();", "-\t\t\tfinal int typeArgumentsLength = typeArguments.size();", "-\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_arguments); ", "-\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_arguments) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < typeArgumentsLength - 1; i++) {", "-\t\t\t\t\t((Type) typeArguments.get(i)).accept(this);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_arguments);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_arguments) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\t((Type) typeArguments.get(typeArgumentsLength - 1)).accept(this);", "-\t\t\t\tif (isClosingGenericToken()) {", "-\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_arguments); ", "-\t\t\t\t}", "-\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_arguments) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier); // selector", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "-", "-\t\t\tfinal List arguments = node.arguments();", "-\t\t\tfinal int argumentsLength = arguments.size();", "-\t\t\tif (argumentsLength != 0) {", "-\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tif (argumentsLength > 1) {", "-\t\t\t\t\tAlignment2 argumentsAlignment = this.scribe.createAlignment(", "-\t\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "-\t\t\t\t\t\t\targumentsLength,", "-\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "-\t\t\t\t\tboolean ok = false;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "-\t\t\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "-\t\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tok = true;", "-\t\t\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} while (!ok);", "-\t\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "-\t\t\t} else {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "-\t\t\t}\t\t\t", "+\t\t\tformatSingleMethodInvocation(node);\t\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3cdc049a72348c1b4bb388f8dbbb7d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  \tpublic boolean visit(SuperMethodInvocation node)", "signatureAfterChange": "  \tpublic boolean visit(SuperMethodInvocation node)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn super.visit(node);", "+\t\tfinal Name qualifier = node.getQualifier();", "+\t\tif (qualifier != null) {", "+\t\t\tqualifier.accept(this);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamesuper);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "+", "+\t\tfinal List arguments = node.arguments();", "+\t\tfinal int argumentsLength = arguments.size();", "+\t\tif (argumentsLength != 0) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tif (argumentsLength > 1) {", "+\t\t\t\tAlignment2 argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "+\t\t\t\t\t\targumentsLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "+\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "+\t\t} else {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "+\t\t}\t\t\t", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd06a6a820b86aaa94abdedf18314116", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tpublic boolean visit(MethodInvocation node)", "signatureAfterChange": "  \tpublic boolean visit(MethodInvocation node)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn super.visit(node);", "+\t\tMethodInvocationFragmentBuilder builder = new MethodInvocationFragmentBuilder();", "+\t\tnode.accept(builder);", "+\t\t", "+\t\tfinal List fragments = builder.fragments();", "+\t\tfinal int fragmentsLength = fragments.size();", "+\t\tif (fragmentsLength >= 3) {", "+\t\t\t// manage cascading method invocations", "+\t\t} else {", "+\t\t\tExpression expression = node.getExpression();", "+\t\t\tif (expression != null) {", "+\t\t\t\texpression.accept(this);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t}", "+\t\t\tfinal List typeArguments = node.typeArguments();", "+\t\t\tfinal int typeArgumentsLength = typeArguments.size();", "+\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_arguments); ", "+\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_arguments) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < typeArgumentsLength - 1; i++) {", "+\t\t\t\t\t((Type) typeArguments.get(i)).accept(this);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_arguments);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\t((Type) typeArguments.get(typeArgumentsLength - 1)).accept(this);", "+\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_arguments); ", "+\t\t\t\t}", "+\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_arguments) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier); // selector", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "+", "+\t\t\tfinal List arguments = node.arguments();", "+\t\t\tfinal int argumentsLength = arguments.size();", "+\t\t\tif (argumentsLength != 0) {", "+\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tif (argumentsLength > 1) {", "+\t\t\t\t\tAlignment2 argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "+\t\t\t\t\t\t\targumentsLength,", "+\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\t\tboolean ok = false;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "+\t\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tok = true;", "+\t\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} while (!ok);", "+\t\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "+\t\t\t} else {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "+\t\t\t}\t\t\t", "+\t\t}", "+\t\treturn false;"]}], "num": 64284}
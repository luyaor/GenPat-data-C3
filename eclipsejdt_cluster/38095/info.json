{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3abe75b1c6e9e00a9fc95bbad312a21b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11adf338f1617608cecf4d8784e0a6f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test012()", "signatureAfterChange": " \tpublic void test012()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (true\\n\" +", "-\t\t\t\t\"\t\t   || !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 3, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 6, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 8, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 8, lineNumberTable[2][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (true\\n\" +", "+\t\t\t\"\t\t   || !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  iconst_0\\n\" + ", "+\t\t\t\"      1  istore_1\\n\" + ", "+\t\t\t\"      2  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"      5  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      8  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 8, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 9] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 9] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1916c0a6974426b5aa956b8dbaaf9f3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (true\\n\" +", "-\t\t\t\t\"\t\t   | !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 3, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 6, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 8, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 8, lineNumberTable[2][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (true\\n\" +", "+\t\t\t\"\t\t   | !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  iconst_0\\n\" + ", "+\t\t\t\"      1  istore_1\\n\" + ", "+\t\t\t\"      2  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"      5  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      8  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 8, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 9] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 9] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74d3e5783712c5846c3b768d289f2b07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA002 =", "-\t\t\t\t\"public class A002 {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tSystem.out.println(); /* \\\\u000d: CARRIAGE RETURN */\\n\" +", "-\t\t\t\t\"\t\tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA002, \"A002\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A002.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 3, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 6, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 4, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 12, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 5, lineNumberTable[2][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A002\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A002 {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tSystem.out.println(); /* \\\\u000d: CARRIAGE RETURN */\\n\" +", "+\t\t\t\"\t\tSystem.out.println();\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A002.java\\n\" + ", "+\t\t\t\"public class A002 extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A002();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A002\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       3  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 4]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 5]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A002\", source, expectedOutput);"]}], "num": 38095}
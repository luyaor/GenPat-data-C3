{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3e1f60fd308fceabf6e441da9d2ad10", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d797003c8d6dce966a73d90fd4ce84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c6083a2d48fa11ffa1e9554a2f00be6af36feafe", "commitAfterChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "signatureAfterChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "diff": ["-\tchar[][] nullableAnnotationName = this.environment.getNullableAnnotationName();", "-\tchar[][] nonNullAnnotationName = this.environment.getNonNullAnnotationName();", "-\tchar[][] nonNullByDefaultAnnotationName = this.environment.getNonNullByDefaultAnnotationName();", "-\tif (nullableAnnotationName == null || nonNullAnnotationName == null || nonNullByDefaultAnnotationName == null)", "-\t\treturn; // not well-configured to use null annotations", "-\t\t\tchar[][] typeName = signature2qualifiedTypeName(annotationTypeName);", "-\t\t\tif (CharOperation.equals(typeName, nonNullByDefaultAnnotationName)) {", "+\t\t\tint typeBit = this.environment.getNullAnnotationBit(signature2qualifiedTypeName(annotationTypeName));", "+\t\t\tif (typeBit == TypeIds.BitNonNullByDefaultAnnotation) {", "-\t\t\t\tif (methodBinding.defaultNullness == Binding.NULL_UNSPECIFIED_BY_DEFAULT)", "+\t\t\t\tif (methodBinding.defaultNullness == Binding.NULL_UNSPECIFIED_BY_DEFAULT) {", "-\t\t\t\telse if (methodBinding.defaultNullness != 0)", "+\t\t\t\t} else if (methodBinding.defaultNullness != 0) {", "-\t\t\t} else if (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\tif (methodBinding.defaultNullness == Binding.NONNULL_BY_DEFAULT && this.environment.usesNullTypeAnnotations()) {", "+\t\t\t\t\t\t// reading a decl-nnbd in a project using type annotations, mimic corresponding semantics by enumerating:", "+\t\t\t\t\t\tmethodBinding.defaultNullness |= Binding.DefaultLocationParameter | Binding.DefaultLocationReturnType;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (typeBit == TypeIds.BitNonNullAnnotation) {", "-\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t} else if (typeBit == TypeIds.BitNullableAnnotation) {", "-\t\t\t\t\t\tchar[][] typeName = signature2qualifiedTypeName(annotationTypeName);", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\t\tint typeBit = this.environment.getNullAnnotationBit(signature2qualifiedTypeName(annotationTypeName));", "+\t\t\t\t\t\tif (typeBit == TypeIds.BitNonNullAnnotation) {", "-\t\t\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\t\t\t} else if (typeBit == TypeIds.BitNullableAnnotation) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ba9453a0c263484598101e77c7060c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic boolean isDeclaration()", "signatureAfterChange": "  \tpublic boolean isDeclaration()", "diff": ["-\t\tASTNode parent = getParent();", "-\t\tif (parent == null) {", "+\t\tStructuralPropertyDescriptor d = getLocationInParent();", "+\t\tif (d == null) {", "+\t\tASTNode parent = getParent();", "-\t\t\t// could only be the name of the type", "-\t\t\treturn true;", "+\t\t\treturn (d == TypeDeclaration.NAME_PROPERTY);", "-\t\t\t// could be the name of the method or constructor", "-\t\t\treturn !p.isConstructor();", "+\t\t\t// could be the name of the method or constructor", "+\t\t\treturn !p.isConstructor() && (d == MethodDeclaration.NAME_PROPERTY);", "-\t\t\tSingleVariableDeclaration p = (SingleVariableDeclaration) parent;", "-\t\t\t// make sure its the name of the variable (not the initializer)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == SingleVariableDeclaration.NAME_PROPERTY);", "-\t\t\tVariableDeclarationFragment p = (VariableDeclarationFragment) parent;", "-\t\t\t// make sure its the name of the variable (not the initializer)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == VariableDeclarationFragment.NAME_PROPERTY);", "-\t\t\t// could only be the name of the enum type", "-\t\t\treturn true;", "+\t\t\treturn (d == EnumDeclaration.NAME_PROPERTY);", "-\t\t\t// could only be the name of the enum constant", "-\t\t\treturn true;", "-\t\t}", "-\t\tif (parent instanceof EnhancedForStatement) {", "-\t\t\tEnhancedForStatement p = (EnhancedForStatement) parent;", "-\t\t\t// make sure its the name of the loop variable (not the initializer)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == EnumConstantDeclaration.NAME_PROPERTY);", "-\t\t\t// could only be the type variable name", "-\t\t\treturn true;", "+\t\t\treturn (d == TypeParameter.NAME_PROPERTY);", "-\t\t\t// could only be the name of the annotation type", "-\t\t\treturn true;", "+\t\t\treturn (d == AnnotationTypeDeclaration.NAME_PROPERTY);", "-\t\t\tAnnotationTypeMemberDeclaration p = (AnnotationTypeMemberDeclaration) parent;", "-\t\t\t// make sure its the name of the member (not the default)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == AnnotationTypeMemberDeclaration.NAME_PROPERTY);"]}], "num": 12307}
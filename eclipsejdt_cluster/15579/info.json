{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e90e9348e768117190ea9c59d8ee48f4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a52873de5e65f9337f606f99b724cdc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "3aa835135283a2acadb61b0aae182c129f17ffab", "commitAfterChange": "a9c15bae1087a65c1bc60140ceb7a5a5416fd8a8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence)", "signatureAfterChange": "\r public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence)", "diff": ["+\t\r", "+\t// range check\r", "+\tboolean isInRange = \r", "+\t\t\t\tscanner.initialPosition <= typeDeclaration.declarationSourceStart\r", "+\t\t\t\t&& scanner.eofPosition >= typeDeclaration.declarationSourceEnd;\r", "+\t\r", "-\t\t\trequestor.enterInterface(\r", "-\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "-\t\t\t\ttypeDeclaration.modifiers & AccJustFlag, \r", "-\t\t\t\ttypeDeclaration.name, \r", "-\t\t\t\ttypeDeclaration.sourceStart, \r", "-\t\t\t\ttypeDeclaration.sourceEnd, \r", "-\t\t\t\tinterfaceNames);\r", "+\t\t\tif (isInRange){\r", "+\t\t\t\trequestor.enterInterface(\r", "+\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "+\t\t\t\t\ttypeDeclaration.modifiers & AccJustFlag, \r", "+\t\t\t\t\ttypeDeclaration.name, \r", "+\t\t\t\t\ttypeDeclaration.sourceStart, \r", "+\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "+\t\t\t\t\tinterfaceNames);\r", "+\t\t\t}\r", "-\t\t\t\trequestor.enterClass(\r", "-\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "-\t\t\t\t\ttypeDeclaration.modifiers, \r", "-\t\t\t\t\ttypeDeclaration.name, \r", "-\t\t\t\t\ttypeDeclaration.sourceStart, \r", "-\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "-\t\t\t\t\tnull, \r", "-\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\tif (isInRange){\r", "+\t\t\t\t\trequestor.enterClass(\r", "+\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.modifiers, \r", "+\t\t\t\t\t\ttypeDeclaration.name, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "+\t\t\t\t\t\tnull, \r", "+\t\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\t}\r", "-\t\t\t\trequestor.enterClass(\r", "-\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "-\t\t\t\t\ttypeDeclaration.modifiers, \r", "-\t\t\t\t\ttypeDeclaration.name, \r", "-\t\t\t\t\ttypeDeclaration.sourceStart, \r", "-\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "-\t\t\t\t\tCharOperation.concatWith(superclass.getTypeName(), '.'), \r", "-\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\tif (isInRange){\r", "+\t\t\t\t\trequestor.enterClass(\r", "+\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.modifiers, \r", "+\t\t\t\t\t\ttypeDeclaration.name, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceStart, \r", "+\t\t\t\t\t\ttypeDeclaration.sourceEnd, \r", "+\t\t\t\t\t\tCharOperation.concatWith(superclass.getTypeName(), '.'), \r", "+\t\t\t\t\t\tinterfaceNames); \r", "+\t\t\t\t}\r", "-\t\tif (isInterface) {\r", "-\t\t\trequestor.exitInterface(typeDeclaration.declarationSourceEnd);\r", "-\t\t} else {\r", "-\t\t\trequestor.exitClass(typeDeclaration.declarationSourceEnd);\r", "+\t\tif (isInRange){\r", "+\t\t\tif (isInterface) {\r", "+\t\t\t\trequestor.exitInterface(typeDeclaration.declarationSourceEnd);\r", "+\t\t\t} else {\r", "+\t\t\t\trequestor.exitClass(typeDeclaration.declarationSourceEnd);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed0f1540aeba53795dc7f800959b7f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementsOperation.java", "commitBeforeChange": "be479df5b4bb2001cc125bb2cd5431e316d0b787", "commitAfterChange": "e5d2b54b64c5be9c6975192bdd4dd72df228563d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate String processElement(ICompilationUnit unit, char[] source)", "signatureAfterChange": " \tprivate String processElement(ICompilationUnit unit, char[] source)", "diff": ["+\t\tdomUnit.accept(new ASTVisitor() {", "+\t\t\tpublic boolean visit(org.eclipse.jdt.core.dom.CompilationUnit compilationUnit) {", "+\t\t\t\tList types = compilationUnit.types();", "+\t\t\t\tfor (Iterator iter = types.iterator(); iter.hasNext();) {", "+\t\t\t\t\tAbstractTypeDeclaration typeDeclaration = (AbstractTypeDeclaration) iter.next();", "+\t\t\t\t\ttypeDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(typeDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration) {", "+\t\t\t\tList bodyDeclarations = annotationTypeDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tpublic boolean visit(AnonymousClassDeclaration anonymousClassDeclaration) {", "+\t\t\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration) {", "+\t\t\t\tList bodyDeclarations = typeDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tpublic boolean visit(EnumDeclaration enumDeclaration) {", "+\t\t\t\tList bodyDeclarations = enumDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}\t\t\t", "+\t\t});"]}], "num": 15579}
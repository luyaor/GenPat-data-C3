{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55fae6e24e9be76bc45e19bf318adc39", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85704ad57451a0264ff13d364f3c68f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["-\t\tflushAnnotationsDefinedPriorTo(endStatementPosition); // discard obsolete comments", "+\t\tflushAnnotationsDefinedPriorTo(endStatementPosition); // discard obsolete comments during recovery", "-\tboolean deprecated = false;", "-\tboolean checkDeprecated = false;", "-\tint lastAnnotationIndex = -1;", "-", "-\t//since jdk1.2 look only in the last java doc comment...", "-\tnextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){", "-\t\t//look for @deprecated into the first javadoc comment preceeding the declaration", "-\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "-\t\t// javadoc only (non javadoc comment have negative end positions.)", "-\t\tif (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {", "-\t\t\tcontinue nextComment;", "+\t", "+\tint lastComment = this.scanner.commentPtr;", "+\t", "+\tif (this.modifiersSourceStart >= 0) {", "+\t\t// eliminate comments located after modifierSourceStart if positionned", "+\t\twhile (lastComment >= 0 && this.scanner.commentStarts[lastComment] > modifiersSourceStart) lastComment--;", "+\t}", "+\tif (lastComment >= 0) {", "+\t\t// consider all remaining leading comments to be part of current declaration", "+\t\tthis.modifiersSourceStart = scanner.commentStarts[0]; ", "+\t", "+\t\t// check deprecation in last comment if javadoc \t", "+\t\tif (this.scanner.commentStops[lastComment] > 0) { \t// non javadoc comment have negative end positions", "+\t\t\tif (checkDeprecation(", "+\t\t\t\t\tthis.scanner.commentStarts[lastComment],", "+\t\t\t\t\tthis.scanner.commentStops[lastComment] - 1, //stop is one over,", "+\t\t\t\t\tthis.scanner.source)) {", "+\t\t\t\tcheckAndSetModifiers(AccDeprecated);", "+\t\t\t}", "-\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "-\t\t\tcontinue nextComment;", "-\t\t}", "-\t\tcheckDeprecated = true;", "-\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over", "-\t\tchar[] comment = scanner.source;", "-", "-\t\tdeprecated =", "-\t\t\tcheckDeprecation(", "-\t\t\t\tcommentSourceStart,", "-\t\t\t\tcommentSourceEnd,", "-\t\t\t\tcomment);", "-\t\tbreak nextComment;", "-\t}", "-\tif (deprecated) {", "-\t\tcheckAndSetModifiers(AccDeprecated);", "-\t}", "-\t// modify the modifier source start to point at the first comment", "-\tif (lastAnnotationIndex >= 0 && checkDeprecated) {", "-\t\tmodifiersSourceStart = scanner.commentStarts[lastAnnotationIndex]; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf9a8e6df20810bc0bf9efd3331cdbb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "504904baf698ed88f756bd940376797a16b35830", "commitAfterChange": "2360ea6176c15a2b2f0744a3b1d793c213d9a28d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t\tprivate void logXmlProblem(IProblem problem, char[] unitSource)", "signatureAfterChange": " \t\tprivate void logXmlProblem(IProblem problem, char[] unitSource)", "diff": ["-\t\t\tparameters.clear();", "-\t\t\tparameters.put(PROBLEM_ID, getFieldName(problem.getID()));", "-\t\t\tparameters.put(PROBLEM_SEVERITY, problem.isError() ? ERROR : WARNING);", "-\t\t\tparameters.put(PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "-\t\t\tparameters.put(PROBLEM_SOURCE_START, new Integer(sourceStart));", "-\t\t\tparameters.put(PROBLEM_SOURCE_END, new Integer(sourceEnd));", "+\t\t\tthis.parameters.clear();", "+\t\t\tthis.parameters.put(PROBLEM_ID, getFieldName(problem.getID()));", "+\t\t\tthis.parameters.put(PROBLEM_SEVERITY, problem.isError() ? ERROR : WARNING);", "+\t\t\tthis.parameters.put(PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));", "+\t\t\tthis.parameters.put(PROBLEM_SOURCE_START, new Integer(sourceStart));", "+\t\t\tthis.parameters.put(PROBLEM_SOURCE_END, new Integer(sourceEnd));", "-\t\t\tparameters.clear();", "-\t\t\tparameters.put(VALUE, problem.getMessage());", "+\t\t\tthis.parameters.clear();", "+\t\t\tthis.parameters.put(VALUE, problem.getMessage());", "-\t\t\tparameters.clear();", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tif ((sourceStart > sourceEnd)", "-\t\t\t\t|| ((sourceStart < 0) && (sourceEnd < 0))) {", "-\t\t\t\tbuffer.append(Util.bind(\"problem.noSourceInformation\")); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(unitSource, sourceStart, sourceEnd - sourceStart + 1);", "-\t\t\t}", "-\t\t\tparameters.put(VALUE, String.valueOf(buffer));", "-\t\t\tthis.printTag(PROBLEM_SOURCE, parameters, true, true);", "+\t\t\tthis.parameters.clear();", "+\t\t\textractContext(problem, unitSource);", "+\t\t\tthis.printTag(PROBLEM_SOURCE, this.parameters, true, true);", "-\t\t\t\tparameters.clear();", "+\t\t\t\tthis.parameters.clear();", "-\t\t\t\t\tparameters.put(PROBLEM_ARGUMENT_VALUE, arguments[i]);", "-\t\t\t\t\tthis.printTag(PROBLEM_ARGUMENT, parameters, true, true);", "+\t\t\t\t\tthis.parameters.put(PROBLEM_ARGUMENT_VALUE, arguments[i]);", "+\t\t\t\t\tthis.printTag(PROBLEM_ARGUMENT, this.parameters, true, true);"]}], "num": 14758}
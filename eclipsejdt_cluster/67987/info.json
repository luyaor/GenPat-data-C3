{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06caacb72abeaf9e88c8f4b1e2977eb8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13915fa9d69950534deeab45284281eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 371, "methodNumberAfterChange": 418, "signatureBeforeChange": " public void testBug137087c() throws CoreException", "signatureAfterChange": " public void testBug137087c() throws CoreException", "diff": ["+/** @deprecated As using a depreciated constant */", "-\t// Search CamelCase", "-\t\t\"\" // no match expected as this is not a valid camel case", "-\t);", "-\t// Search like UI does (ie. replace it with prefix if it's not a valid CamelCase)", "-\tint validatedRule = SearchPattern.validateMatchRule(pattern, matchRule);", "-\tif (validatedRule != matchRule) {", "-\t\tmatchRule = SearchPattern.R_PREFIX_MATCH;", "-\t}", "-\tsearch(pattern, TYPE, DECLARATIONS, matchRule);", "-\tassertSearchResults(", "-\t\t\"\"+ getExternalJCLPathString(\"1.5\") + \" java.lang.RuntimeException EXACT_MATCH\"", "+\t\t\"\" // no result because it's an invalid camel case pattern which is replaced with ", "+\t\t\t// prefix case sensitive match bu SearchPatter.validateMatchRule(...) (old behavior)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a28115f8f0db427a65836aceb90d7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 422, "signatureBeforeChange": " public void testBug137087g() throws CoreException", "signatureAfterChange": " public void testBug137087g() throws CoreException", "diff": ["+/** @deprecated As using a depreciated constant */", "-\t// Search CamelCase", "-\t\t\"\" // no match expected as this is not a valid camel case", "-\t);", "-\t// Search like UI does (ie. replace it with prefix if it's not a valid CamelCase)", "-\tint validatedRule = SearchPattern.validateMatchRule(pattern, matchRule);", "-\tif (validatedRule != matchRule) {", "-\t\tmatchRule = SearchPattern.R_PREFIX_MATCH;", "-\t}", "-\tsearch(pattern, TYPE, DECLARATIONS, matchRule);", "-\tassertSearchResults(", "-\t\t\"\"+ getExternalJCLPathString(\"1.5\") + \" java.lang.CloneNotSupportedException EXACT_MATCH\"", "+\t\t\"\" // no result because it's an invalid camel case pattern which is replaced with ", "+\t\t\t// prefix case sensitive match bu SearchPatter.validateMatchRule(...) (old behavior)"]}], "num": 67987}
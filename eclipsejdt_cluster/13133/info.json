{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f49933c3ea9d88fde5928be3560228d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07059defdcc3750560f62a6e02014eb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "458161dc550c876a0d717a9a36eda696046c367f", "commitAfterChange": "59d8c0d8b554a42bbafdc0ad10f524f90fa03b31", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void checkMatching(AstNode node)", "signatureAfterChange": " public void addMatch(AstNode node, int matchLevel)", "diff": ["+}", "+public void addMatch(AstNode node, int matchLevel) {", "+\tswitch (matchLevel) {", "+\t\tcase PatternLocator.POTENTIAL_MATCH:", "+\t\t\taddPossibleMatch(node);", "+\t\t\tbreak;", "+\t\tcase PatternLocator.ACCURATE_MATCH:", "+\t\t\taddTrustedMatch(node);", "+\t}", "-}", "-public void checkMatching(AstNode node) {", "-\tthis.locator.pattern.matchCheck(node, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26a88d107c48624f91b58731ff37595b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "b47007cd56be56e518f691f00411ed594be67102", "commitAfterChange": "eaa2c28fb9983936f1f852ef695044ad44499aa5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " public void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\t\tint level = this.locator.patternLocator.resolveLevel(node);", "-\t\t\t\tif (level == PatternLocator.ACCURATE_MATCH)", "-\t\t\t\t\tthis.matchingNodes.put(node, EXACT_MATCH);", "-\t\t\t\telse if (level == PatternLocator.INACCURATE_MATCH)", "-\t\t\t\t\tthis.matchingNodes.put(node, POTENTIAL_MATCH);", "+\t\t\t\taddMatch(node, this.locator.patternLocator.resolveLevel(node));"]}], "num": 13133}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8431a4a61de0bef136f0e45d2f96c1e1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eebb2ab837dd333ffa05d84a53c6bd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tfor (Iterator iter = this.matchingNodes.keySet().iterator(); iter.hasNext();) {", "-\t\tresult.append(\"\\n\"); //$NON-NLS-1$", "-\t\tAstNode node = (AstNode)iter.next();", "-\t\tObject value = this.matchingNodes.get(node);", "-\t\tif (value instanceof Integer) {", "-\t\t\tresult.append('\\t');", "-\t\t\tint accuracy = ((Integer)value).intValue();", "-\t\t\tswitch (accuracy) {", "-\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:", "-\t\t\t\t\tresult.append(\"IMPOSSIBLE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.POTENTIAL_MATCH:", "-\t\t\t\t\tresult.append(\"POTENTIAL_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.INACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"INACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.ACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"ACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} ", "+\tObject[] keyTable = this.matchingNodes.keyTable;", "+\tObject[] valueTable = this.matchingNodes.valueTable;", "+\tfor (int i = 0, l = keyTable.length; i < l; i++) {", "+\t\tAstNode node = (AstNode) keyTable[i];", "+\t\tif (node == null) continue;", "+\t\tresult.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\tresult.append(valueTable[i] == EXACT_MATCH", "+\t\t\t? \"ACCURATE_MATCH: \" //$NON-NLS-1$", "+\t\t\t: \"INACCURATE_MATCH: \"); //$NON-NLS-1$", "+", "-\tfor (Iterator iter = this.potentialMatchingNodes.keySet().iterator(); iter.hasNext();) {", "-\t\tresult.append(\"\\n\"); //$NON-NLS-1$", "-\t\tAstNode node = (AstNode)iter.next();", "-\t\tObject value = this.potentialMatchingNodes.get(node);", "-\t\tif (value instanceof Integer) {", "-\t\t\tresult.append(\"\\t\"); //$NON-NLS-1$", "-\t\t\tint accuracy = ((Integer)value).intValue();", "-\t\t\tswitch (accuracy) {", "-\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:", "-\t\t\t\t\tresult.append(\"IMPOSSIBLE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.POTENTIAL_MATCH:", "-\t\t\t\t\tresult.append(\"POTENTIAL_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.INACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"INACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.ACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"ACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\tObject[] nodes = this.potentialMatchingNodesSet.values;", "+\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\tAstNode node = (AstNode) nodes[i];", "+\t\tif (node == null) continue;", "+\t\tresult.append(\"\\nPOTENTIAL_MATCH: \"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "121d783ad8e07a280743030c484d555c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 10, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " protected StringBuffer print(StringBuffer output)", "diff": ["-}", "-public String toString() {", "-\tStringBuffer buffer = new StringBuffer(20);", "+protected StringBuffer print(StringBuffer output) {", "-\t\tbuffer.append(this.findReferences", "+\t\toutput.append(this.findReferences", "-\t\tbuffer.append(\"MethodReferencePattern: \"); //$NON-NLS-1$", "+\t\toutput.append(\"MethodReferencePattern: \"); //$NON-NLS-1$", "-\t\tbuffer.append(declaringQualification).append('.');", "+\t\toutput.append(declaringQualification).append('.');", "-\t\tbuffer.append(declaringSimpleName).append('.');", "+\t\toutput.append(declaringSimpleName).append('.');", "-\t\tbuffer.append(\"*.\"); //$NON-NLS-1$", "+\t\toutput.append(\"*.\"); //$NON-NLS-1$", "-\t\tbuffer.append(selector);", "+\t\toutput.append(selector);", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append('(');", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "+\toutput.append('(');", "-\t\tbuffer.append(\"...\"); //$NON-NLS-1$", "+\t\toutput.append(\"...\"); //$NON-NLS-1$", "-\t\t\tif (i > 0) buffer.append(\", \"); //$NON-NLS-1$", "-\t\t\tif (parameterQualifications[i] != null) buffer.append(parameterQualifications[i]).append('.');", "-\t\t\tif (parameterSimpleNames[i] == null) buffer.append('*'); else buffer.append(parameterSimpleNames[i]);", "+\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\tif (parameterQualifications[i] != null) output.append(parameterQualifications[i]).append('.');", "+\t\t\tif (parameterSimpleNames[i] == null) output.append('*'); else output.append(parameterSimpleNames[i]);", "-\tbuffer.append(')');", "+\toutput.append(')');", "-\t\tbuffer.append(\" --> \").append(returnQualification).append('.'); //$NON-NLS-1$", "+\t\toutput.append(\" --> \").append(returnQualification).append('.'); //$NON-NLS-1$", "-\t\tbuffer.append(\" --> \"); //$NON-NLS-1$", "+\t\toutput.append(\" --> \"); //$NON-NLS-1$", "-\t\tbuffer.append(returnSimpleName);", "+\t\toutput.append(returnSimpleName);", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append(\", \"); //$NON-NLS-1$", "-\tswitch(getMatchMode()) {", "-\t\tcase R_EXACT_MATCH : ", "-\t\t\tbuffer.append(\"exact match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PREFIX_MATCH :", "-\t\t\tbuffer.append(\"prefix match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PATTERN_MATCH :", "-\t\t\tbuffer.append(\"pattern match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t}", "-\tbuffer.append(isCaseSensitive() ? \"case sensitive\" : \"case insensitive\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\treturn buffer.toString();", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "+\treturn super.print(output);"]}], "num": 55585}
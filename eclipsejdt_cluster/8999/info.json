{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dee0d6221c519f024fd044f888730bcf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28fbca3f223f0b47f51a902cb3b999e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "diff": ["-\t\t\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;", "+\t\t\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMEL_CASE_MATCH) != 0;", "-\t\t\tif (isCamelCase && matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName)) {", "-\t\t\t\treturn true;", "+\t\t\tif (isCamelCase) {", "+\t\t\t\tif (matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, (matchRule & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tif (isCaseSensitive) return false;", "-\t\t\t\t\tif (!isCamelCase) {", "-\t\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);", "-\t\t\t\t\t}", "-\t\t\t\t\t// fall through next case to match as prefix if camel case failed", "+\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97d8293d0ab5334d276187007b33a57c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected int matchNameValue(char[] pattern, char[] name)", "signatureAfterChange": " protected int matchNameValue(char[] pattern, char[] name)", "diff": ["-\tif (this.isCamelCase && matchFirstChar && CharOperation.camelCaseMatch(pattern, name)) {", "-\t\treturn POSSIBLE_MATCH;", "+\tif (this.isCamelCase) {", "+\t\tif (matchFirstChar && CharOperation.camelCaseMatch(pattern, name, (this.matchMode & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\t\t\treturn POSSIBLE_MATCH;", "+\t\t}", "+\t\tif (this.isCaseSensitive) return IMPOSSIBLE_MATCH;", "-\t\t\tif (!this.isCamelCase) {", "-\t\t\t\tif (sameLength && matchFirstChar && CharOperation.equals(pattern, name, this.isCaseSensitive)) {", "-\t\t\t\t\treturn POSSIBLE_MATCH | EXACT_FLAVOR;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\tif (sameLength && matchFirstChar && CharOperation.equals(pattern, name, this.isCaseSensitive)) {", "+\t\t\t\treturn POSSIBLE_MATCH | EXACT_FLAVOR;", "-\t\t\t// fall through next case to match as prefix if camel case failed", "+\t\t\tbreak;", "+\t\t\t// TODO_PERFS (frederic) Not sure this lowercase is necessary"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d05fa4a043402680eafa1c5027ac76bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected int matchLevelForTokens(char[][] tokens)", "signatureAfterChange": " protected int matchLevelForTokens(char[][] tokens)", "diff": ["-\t\tif (CharOperation.camelCaseMatch(this.pattern.pkgName, packageName)) {", "+\t\tif (CharOperation.camelCaseMatch(this.pattern.pkgName, packageName, (this.matchMode & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\t\tif (this.isCaseSensitive) return IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c8d617c5022465ae4130d30bf91a75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected int matchLevel(ImportReference importRef)", "signatureAfterChange": "  protected int matchLevel(ImportReference importRef)", "diff": ["-\t\tif (this.isCamelCase && matchFirstChar && CharOperation.camelCaseMatch(qualifiedPattern, qualifiedTypeName)) {", "-\t\t\treturn POSSIBLE_MATCH;", "+\t\tif (this.isCamelCase) {", "+\t\t\tif (matchFirstChar && CharOperation.camelCaseMatch(qualifiedPattern, qualifiedTypeName, (this.matchMode & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\t\t\t\treturn POSSIBLE_MATCH;", "+\t\t\t}", "+\t\t\tif (this.isCaseSensitive) return IMPOSSIBLE_MATCH;"]}], "num": 8999}
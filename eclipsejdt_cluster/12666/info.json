{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07495d96fb0b40f0998a76d4aa0bbeef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ddc67cae7ac220d7eb878fdc06c84b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "ca8fb243a14b09056e967ca015224e113dbf2acb", "commitAfterChange": "fcf41d3b46ba97e9e4d60c5ee97c3384b6432cf6", "methodNumberBeforeChange": 243, "methodNumberAfterChange": 243, "signatureBeforeChange": " \tpublic Map secondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic Map secondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\twhile (this.indexManager.awaitingJobsCount() > 0) {", "-\t\t\t\tif (monitor != null && monitor.isCanceled()) {", "-\t\t\t\t\treturn projectInfo.secondaryTypes;", "-\t\t\t\t}", "-\t\t\t\ttry {", "-\t\t\t\t\tThread.sleep(10);", "-\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\treturn projectInfo.secondaryTypes;", "-\t\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tthis.indexManager.performConcurrentJob(new IJob() {", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic boolean belongsTo(String jobFamily) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic void cancel() {", "+\t\t\t\t\t\t// job is cancelled through progress", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic void ensureReadyToRun() {", "+\t\t\t\t\t\t// always ready", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic boolean execute(IProgressMonitor progress) {", "+\t\t\t\t\t\treturn progress == null || !progress.isCanceled();", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic String getJobFamily() {", "+\t\t\t\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t}, IJob.WaitUntilReady, monitor);", "+\t\t\t} catch (OperationCanceledException oce) {", "+\t\t\t\treturn projectInfo.secondaryTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db8c7afa1573851ea0469ee59142f700", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "ca8fb243a14b09056e967ca015224e113dbf2acb", "commitAfterChange": "fcf41d3b46ba97e9e4d60c5ee97c3384b6432cf6", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void findConstructorDeclarations(char[] prefix, boolean camelCaseMatch, final ISearchRequestor storage, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic void findConstructorDeclarations(char[] prefix, boolean camelCaseMatch, final ISearchRequestor storage, IProgressMonitor monitor)", "diff": ["-\t\t\t\twhile (indexManager.awaitingJobsCount() > 0) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tThread.sleep(50); // indexes are not ready,  sleep 50ms...", "-\t\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\t\t// Do nothing", "+\t\t\t\t// Wait for the end of indexing or a cancel", "+\t\t\t\tindexManager.performConcurrentJob(new IJob() {", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic boolean belongsTo(String jobFamily) {", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\tif (monitor.isCanceled()) {", "-\t\t\t\t\t\tthrow new OperationCanceledException();", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic void cancel() {", "+\t\t\t\t\t\t// job is cancelled through progress", "-\t\t\t\t}", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic void ensureReadyToRun() {", "+\t\t\t\t\t\t// always ready", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic boolean execute(IProgressMonitor progress) {", "+\t\t\t\t\t\treturn progress == null || !progress.isCanceled();", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t@Override", "+\t\t\t\t\tpublic String getJobFamily() {", "+\t\t\t\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t}, IJob.WaitUntilReady, monitor);"]}], "num": 12666}
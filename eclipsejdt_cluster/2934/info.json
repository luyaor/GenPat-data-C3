{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11386696ee12d15c30f66d5f65d2a58e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c0a6719a2d104115b6e48312c8f6b5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionElementNotifier.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tprotected void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration, TypeDeclaration declaringType, ImportReference currentPackage)", "diff": ["-\tprotected void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration) {", "+\tprotected void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration, TypeDeclaration declaringType, ImportReference currentPackage) {", "-\t\tsuper.notifySourceElementRequestor(methodDeclaration);", "+\t\tsuper.notifySourceElementRequestor(methodDeclaration, declaringType, currentPackage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed8e9bd61911d58fdb9fe53adecbc67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EmptyStatement.java", "commitBeforeChange": "0bb8dba3efca9a5500b67c37770710de86a06c2e", "commitAfterChange": "6726a5eb1723cea7dfdb4d1905ca215391f75d8e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int complaintLevel)", "signatureAfterChange": " \tpublic int complainIfUnreachable(FlowInfo flowInfo, FlowContext flowContext, BlockScope scope, int complaintLevel, boolean endOfBlock)", "diff": ["-\tpublic int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int complaintLevel) {", "+\tpublic int complainIfUnreachable(FlowInfo flowInfo, FlowContext flowContext, BlockScope scope, int complaintLevel, boolean endOfBlock) {", "-\t\treturn super.complainIfUnreachable(flowInfo, scope, complaintLevel);", "+\t\treturn super.complainIfUnreachable(flowInfo, flowContext, scope, complaintLevel, endOfBlock);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee5176507404ca82c8ee8ac0a216ab30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EmptyStatement.java", "commitBeforeChange": "054ef716f5c2a57e4e4c8e790ba134b6404d4f2a", "commitAfterChange": "1bf30b93f1c2f17c02d0cecfa43e877f00d01800", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int complaintLevel)", "signatureAfterChange": " \tpublic int complainIfUnreachable(FlowInfo flowInfo, FlowContext flowContext, BlockScope scope, int complaintLevel, boolean endOfBlock)", "diff": ["-\tpublic int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int complaintLevel) {", "+\tpublic int complainIfUnreachable(FlowInfo flowInfo, FlowContext flowContext, BlockScope scope, int complaintLevel, boolean endOfBlock) {", "-\t\treturn super.complainIfUnreachable(flowInfo, scope, complaintLevel);", "+\t\treturn super.complainIfUnreachable(flowInfo, flowContext, scope, complaintLevel, endOfBlock);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7be5179d296758ca4b885fcebe0780", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic IClasspathEntry[] getExpandedClasspath( \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError) throws JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getExpandedClasspath( \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tboolean generateMarkerOnError) throws JavaModelException {", "+\t\tboolean generateMarkerOnError,", "+\t\tMap preferredClasspaths,", "+\t\tMap preferredOutputs) throws JavaModelException {", "-\t\tcomputeExpandedClasspath(this, ignoreUnresolvedVariable, generateMarkerOnError, new HashSet(5), accumulatedEntries);", "+\t\tcomputeExpandedClasspath(this, ignoreUnresolvedVariable, generateMarkerOnError, new HashSet(5), accumulatedEntries, preferredClasspaths, preferredOutputs);"]}], "num": 2934}
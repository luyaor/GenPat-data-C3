{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b035c9efa2a08167a729ef4143e2e7d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "018a9b7e90318363753fbaee008bdc2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "e73037ff248454bfb7965c3990814d5ef5cb4620", "commitAfterChange": "cafb328a42240bc62f70f6b130384a29f0e8d16a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-\t\t\tcase K_OPERATOR :", "-//\t\t\t\tif(expressionPtr > 0) {", "-//\t\t\t\t\tExpression operatorExpression;", "-//\t\t\t\t\tswitch (info) {", "-//\t\t\t\t\t\tcase AND_AND :", "-//\t\t\t\t\t\t\toperatorExpression = new AND_AND_Expression(this.expressionStack[expressionPtr-1], expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase OR_OR :", "-//\t\t\t\t\t\t\toperatorExpression = new OR_OR_Expression(this.expressionStack[expressionPtr-1], expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase PLUS_PLUS :", "-//\t\t\t\t\t\tcase MINUS_MINUS :", "-//\t\t\t\t\t\t\toperatorExpression = new PrefixExpression(expression,IntLiteral.One,info, expression.sourceStart); ;", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase TWIDDLE:", "-//\t\t\t\t\t\tcase NOT:", "-//\t\t\t\t\t\t\toperatorExpression = new UnaryExpression(expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase PLUS:", "-//\t\t\t\t\t\tcase MINUS:", "-//\t\t\t\t\t\t\t", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tdefault :", "-//\t\t\t\t\t\t\toperatorExpression = new BinaryExpression(this.expressionStack[expressionPtr-1], expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t}", "-//\t\t\t\t\tassistNodeParent = operatorExpression;", "-//\t\t\t\t}", "+\t\t\tcase K_UNARY_OPERATOR :", "+\t\t\t\tif(expressionPtr > -1) {", "+\t\t\t\t\tExpression operatorExpression = null;", "+\t\t\t\t\tswitch (info) {", "+\t\t\t\t\t\tcase PLUS_PLUS :", "+\t\t\t\t\t\t\toperatorExpression = new PrefixExpression(expression,IntLiteral.One, PLUS, expression.sourceStart);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase MINUS_MINUS :", "+\t\t\t\t\t\t\toperatorExpression = new PrefixExpression(expression,IntLiteral.One, MINUS, expression.sourceStart);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\toperatorExpression = new UnaryExpression(expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif(operatorExpression != null) {", "+\t\t\t\t\t\tassistNodeParent = operatorExpression;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_BINARY_OPERATOR :", "+\t\t\t\tif(expressionPtr > 0) {", "+\t\t\t\t\tExpression operatorExpression = null;", "+\t\t\t\t\tswitch (info) {", "+\t\t\t\t\t\tcase AND_AND :", "+\t\t\t\t\t\t\toperatorExpression = new AND_AND_Expression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase OR_OR :", "+\t\t\t\t\t\t\toperatorExpression = new OR_OR_Expression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase EQUAL_EQUAL :", "+\t\t\t\t\t\tcase NOT_EQUAL :", "+\t\t\t\t\t\t\toperatorExpression = new EqualExpression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase INSTANCEOF :", "+\t\t\t\t\t\t\t// should never occur", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\toperatorExpression = new BinaryExpression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif(operatorExpression != null) {", "+\t\t\t\t\t\tassistNodeParent = operatorExpression;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42594cbe2caf135880240474578e036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "33e03339ed2881c9f793c3a49497633bbac5c8a8", "commitAfterChange": "09c3f545375b31028657f0b8044c5cbcb5324abc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["+\t\t\tcase K_BETWEEN_IF_AND_RIGHT_PAREN :", "+\t\t\t\tIfStatement ifStatement = new IfStatement(expression, new EmptyStatement(expression.sourceEnd, expression.sourceEnd), expression.sourceStart, expression.sourceEnd);", "+\t\t\t\tassistNodeParent = ifStatement;", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_BETWEEN_WHILE_AND_RIGHT_PAREN :", "+\t\t\t\tWhileStatement whileStatement = new WhileStatement(expression, new EmptyStatement(expression.sourceEnd, expression.sourceEnd), expression.sourceStart, expression.sourceEnd);", "+\t\t\t\tassistNodeParent = whileStatement;", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_BETWEEN_SWITCH_AND_RIGHT_PAREN:", "+\t\t\t\tSwitchStatement switchStatement = new SwitchStatement();", "+\t\t\t\tswitchStatement.expression = expression;", "+\t\t\t\tswitchStatement.statements = new Statement[0];", "+\t\t\t\tassistNodeParent = switchStatement;", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN :", "+\t\t\t\tSynchronizedStatement synchronizedStatement = new SynchronizedStatement(expression, new Block(0), expression.sourceStart, expression.sourceEnd);", "+\t\t\t\tassistNodeParent = synchronizedStatement;", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_INSIDE_THROW_STATEMENT:", "+\t\t\t\tif(info == bracketDepth) {", "+\t\t\t\t\tThrowStatement throwStatement = new ThrowStatement(expression, expression.sourceStart, expression.sourceEnd);", "+\t\t\t\t\tassistNodeParent = throwStatement;", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_INSIDE_ASSERT_STATEMENT:", "+\t\t\t\tif(info == bracketDepth) {", "+\t\t\t\t\tAssertStatement assertStatement = new AssertStatement(expression, expression.sourceStart);", "+\t\t\t\t\tassistNodeParent = assertStatement;", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_INSIDE_ASSERT_EXCEPTION:", "+\t\t\t\tif(info == bracketDepth) {", "+\t\t\t\t\tAssertStatement assertStatement = new AssertStatement(expression, new TrueLiteral(expression.sourceStart, expression.sourceStart), expression.sourceStart);", "+\t\t\t\t\tassistNodeParent = assertStatement;", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;"]}], "num": 68607}
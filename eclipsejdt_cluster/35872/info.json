{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4925b3e2e148b4528cd99191c243ddd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1c8537b055f23226b4a60f18e5176e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "7074c59308dc8c330e55b938db8ab604500cf9cc", "commitAfterChange": "969ab36cc555c2b725d4ca76526de3c9dab44ded", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\tswitch (record.typeSuffix) {", "-\t\t\t\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptInterface(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) hack to get enum while getting all type names...", "-\t\t\t\t\t\t\tnameRequestor.acceptEnum(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) hack to get annotation while getting all type names...", "-\t\t\t\t\t\t\tnameRequestor.acceptAnnotation(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\tnameRequestor.acceptType(record.modifiers, record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\t\tswitch(kind) {", "-\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tswitch(typeDeclaration.kind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\tswitch(memberTypeDeclaration.kind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "915bd2d162a67bc91777d51e0688c45b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "1ae96290ff9d5086a80a696651460f471e94afd0", "commitAfterChange": "2f33963a4d62a9b6a301ebc4423055606c51d81b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void searchAllTypeNames( \tIWorkspace workspace, \tchar[] packageName,  \tchar[] typeName, \tint matchMode,  \tboolean isCaseSensitive, \tint searchFor,  \tIJavaSearchScope scope,  \tfinal ITypeNameRequestor nameRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " public void searchAllTypeNames( \tIWorkspace workspace, \tchar[] packageName,  \tchar[] typeName, \tint matchMode,  \tboolean isCaseSensitive, \tint searchFor,  \tIJavaSearchScope scope,  \tfinal ITypeNameRequestor nameRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\tString path = workingCopy.getPath().toString();", "-\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "-\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "-\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "-\t\t\t\t\tIType type = allTypes[j];", "-\t\t\t\t\tIJavaElement parent = type.getParent();", "-\t\t\t\t\tchar[][] enclosingTypeNames;", "-\t\t\t\t\tif (parent instanceof IType) {", "-\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "-\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\tfinal String path = workingCopy.getPath().toString();", "+\t\t\t\tfinal char[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "+\t\t\t\tif (workingCopy.isConsistent()) {", "+\t\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "+\t\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "+\t\t\t\t\t\tIType type = allTypes[j];", "+\t\t\t\t\t\tIJavaElement parent = type.getParent();", "+\t\t\t\t\t\tchar[][] enclosingTypeNames;", "+\t\t\t\t\t\tif (parent instanceof IType) {", "+\t\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "+\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (type.isClass()) {", "+\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, type.getElementName().toCharArray(), enclosingTypeNames, path);", "+\t\t\t\t} else {", "+\t\t\t\t\tParser basicParser = getParser();", "+\t\t\t\t\tfinal char[] contents = workingCopy.getBuffer().getCharacters();", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit unit = new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "+\t\t\t\t\t\tpublic char[] getContents() {", "+\t\t\t\t\t\t\treturn contents;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic char[] getMainTypeName() {", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic char[][] getPackageName() {", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic char[] getFileName() {", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t};", "+\t\t\t\t\tCompilationResult compilationUnitResult = new CompilationResult(unit, 0, 0, this.compilerOptions.maxProblemsPerUnit);", "+\t\t\t\t\tCompilationUnitDeclaration parsedUnit = basicParser.dietParse(unit, compilationUnitResult);", "+\t\t\t\t\tif (parsedUnit != null) {", "+\t\t\t\t\t\tclass AllTypeDeclarationsVisitor extends AbstractSyntaxTreeVisitorAdapter {", "+\t\t\t\t\t\t\tpublic boolean visit(LocalTypeDeclaration typeDeclaration, BlockScope blockScope) {", "+\t\t\t\t\t\t\t\treturn false; // no local type", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic boolean visit(AnonymousLocalTypeDeclaration typeDeclaration, BlockScope blockScope) {", "+\t\t\t\t\t\t\t\treturn false; // no anonymous type", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope compilationUnitScope) {", "+\t\t\t\t\t\t\t\tif (!typeDeclaration.isInterface()) {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic boolean visit(MemberTypeDeclaration memberTypeDeclaration, ClassScope classScope) {", "+\t\t\t\t\t\t\t\t// compute encloising type names", "+\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "+\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\t\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "+\t\t\t\t\t\t\t\t\tif (enclosing instanceof MemberTypeDeclaration) {", "+\t\t\t\t\t\t\t\t\t\tenclosing = ((MemberTypeDeclaration)enclosing).enclosingType;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tenclosing = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// report", "+\t\t\t\t\t\t\t\tif (!memberTypeDeclaration.isInterface()) {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tparsedUnit.traverse(new AllTypeDeclarationsVisitor(), parsedUnit.scope);"]}], "num": 35872}
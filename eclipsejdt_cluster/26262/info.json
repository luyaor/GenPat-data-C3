{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "100d8217a073419414dc42ad1270f31c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc09e46d8acbd8d105d93b6f73becb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/StringOperation.java", "commitBeforeChange": "b6fd2c615e414d37bbd7ba470be1d1cc457ea9be", "commitAfterChange": "6229af420f5c019348b9ffb68a81a8354a64aa8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static final int[] getPatternMatchingRegions( \tString pattern, \tint patternStart, \tint patternEnd, \tString name, \tint nameStart, \tint nameEnd, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final int[] getPatternMatchingRegions( \tString pattern, \tint patternStart, \tint patternEnd, \tString name, \tint nameStart, \tint nameEnd, \tboolean isCaseSensitive)", "diff": ["-\t\tif (iPattern > 0) {", "+\t\tif (iPattern > 0 && previous != '?') {", "+\tint previousCount = count;", "+\t\tpreviousCount = count;", "-\t\t\t\tif (previous == '?') count -= 2;", "+\t\t\t\tcount = previousCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6f6dab32efa74649cca6688bc33c9b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "e70a97840585a3ede400b971666912929897851b", "commitAfterChange": "f5104ea8b01f4418b9868445123db4c689077583", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public static void searchAllPossibleSubTypes( \tIWorkspace workbench, \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException, CoreException", "signatureAfterChange": "  public static void searchAllPossibleSubTypes( \tIWorkspace workbench, \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException, CoreException", "diff": ["-\tint ticks = 50;", "+\tint ticks = 0;", "+\tint maxTicks = 500;", "-\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, ticks));", "+\t\t\t(progressMonitor == null || ++ticks > maxTicks) ? null : new SubProgressMonitor(progressMonitor, 1));", "-\t\tticks = ticks / 2;"]}], "num": 26262}
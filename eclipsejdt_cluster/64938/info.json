{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47a6e033be6f68be4e481b1b49056039", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c5ccba0386f4e895f1817152ee60d41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "9456595afc670e8654daae0a909865ea194d6315", "commitAfterChange": "5d18de268cbd515fc918349a3ab2520e4b59a2c9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas()", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas()", "diff": ["+\t\t\t\t\t\t} else if (oldRestriction == null) {", "+\t\t\t\t\t\t\tneedToUpdateDependents |= newRestriction != null; // access restriction was added", "-\t\t\t\t\t\t\tneedToUpdateDependents |= !oldRestriction.equals(newRestriction); // access restriction has changed", "+\t\t\t\t\t\t\tneedToUpdateDependents |= !oldRestriction.equals(newRestriction); // access restriction has changed or has been removed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d24d94b120228fd538e756fbcc9e062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": " \tprivate void secondaryTypesRemoving(Hashtable secondaryTypesMap, IFile file)", "signatureAfterChange": " \tprivate void secondaryTypesRemoving(Hashtable secondaryTypesMap, IFile file)", "diff": ["-\t\t\t\tfor (int i=0; i<removedNamesCount; i++) {", "-\t\t\t\t\ttypes.remove(removedNames[i]);", "+\t\t\t\tif (removedNames != null) {", "+\t\t\t\t\tfor (int i=0; i<removedNamesCount; i++) {", "+\t\t\t\t\t\ttypes.remove(removedNames[i]);", "+\t\t\t\t\t}", "-\t\tfor (int i=0; i<removedPackagesCount; i++) {", "-\t\t\tsecondaryTypesMap.remove(removedPackages[i]);", "+\t\tif (removedPackages != null) {", "+\t\t\tfor (int i=0; i<removedPackagesCount; i++) {", "+\t\t\t\tsecondaryTypesMap.remove(removedPackages[i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd0db9bc2fb765d9181aba36503204aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b5a77485d9f402d8e9320bc140c7dcd6fc18b9c8", "commitAfterChange": "168f2cd311cda9055baec08babe652e5b9c3fb27", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\tif (level != null) { // ensure that the reference has not been already reported while visiting", "+\t\t\t\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, null, method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\tif (level != null) { // ensure that the reference has not been already reported while visiting", "+\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, null, method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9f6692547d0aed62c6a14486ec92d98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "02d9adf4bf42c3560bb2981a7f17f487294d13a2", "commitAfterChange": "52ebc27bf9158df2a67f83ecba784386abd2092e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "+\t\t\tif (javaHome != null) {", "+\t\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tendorsedDirClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "+\t\t\tif (javaHome != null) {", "+\t\t\t\tendorsedDirClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbda4caedbf78ee05aad4217d2f7b600", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "diff": ["-\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "-\t\t\t\t\t\t\tchar[] typeName;", "-\t\t\t\t\t\t\tif (j == 0 && firstIsSynthetic) {", "-\t\t\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? j - 1 : j].type;", "-\t\t\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "-\t\t\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "-\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\t\tif (arguments != null) {", "+\t\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "+\t\t\t\t\t\t\t\tchar[] typeName;", "+\t\t\t\t\t\t\t\tif (j == 0 && firstIsSynthetic) {", "+\t\t\t\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? j - 1 : j].type;", "+\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "+\t\t\t\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "+\t\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "+\t\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "-\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\tfor (int i = 0; i < argCount; i++) {", "-\t\tTypeReference typeRef = arguments[i].type;", "-\t\tchar[] typeName = CharOperation.concatWith(typeRef.getParameterizedTypeName(), '.');", "-//\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "-//\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "-\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\tTypeReference typeRef = arguments[i].type;", "+\t\t\tchar[] typeName = CharOperation.concatWith(typeRef.getParameterizedTypeName(), '.');", "+//\t\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "+//\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6aab23c2a6ed9a492c689436906672", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0b27b465378d2c4de912ede755b716ec1bc3271b", "commitAfterChange": "e8b8473542c4e4cb01bff6dc692097c4a3eca5c6", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic synchronized boolean containsWorkingCopyMapEntriesForParent( IFile f )", "signatureAfterChange": " \tpublic synchronized boolean containsWorkingCopyMapEntriesForParent( IFile f )", "diff": ["-\t\tfor( Set<IFile> s : parentSets )", "+\t\tif ( parentSets != null )", "-\t\t\tif ( s.contains( f ) )", "-\t\t\t\treturn true;", "+\t\t\tfor( Set<IFile> s : parentSets )", "+\t\t\t{", "+\t\t\t\tif ( s.contains( f ) )", "+\t\t\t\t\treturn true;", "+\t\t\t}", "-\t\tfor ( IFile gf : generatedFiles )", "+\t\tif ( generatedFiles != null )", "-\t\t\tICompilationUnit cu = _generatedFile2WorkingCopy.get( gf );", "-\t\t\tif ( cu != null )", "+\t\t\tfor ( IFile gf : generatedFiles )", "-\t\t\t\tSet<IFile> parents = _generatedWorkingCopy2OpenParentFiles.get( cu );", "-\t\t\t\tif ( parents.contains( cu ) || parents.size() == 0 )", "-\t\t\t\t\treturn true;", "+\t\t\t\tICompilationUnit cu = _generatedFile2WorkingCopy.get( gf );", "+\t\t\t\tif ( cu != null )", "+\t\t\t\t{", "+\t\t\t\t\tSet<IFile> parents = _generatedWorkingCopy2OpenParentFiles.get( cu );", "+\t\t\t\t\tif ( parents.contains( cu ) || parents.size() == 0 )", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}"]}], "num": 64938}
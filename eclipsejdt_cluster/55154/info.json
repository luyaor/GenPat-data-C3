{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e44afe97383330fecf701659041e7d48", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2989b9c378f056987acf80f3d9b774c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a8ed5c9ce2b125913ea11ffa5f66b79c1153133a", "commitAfterChange": "aff037e4075d974a1198e8a25c9e7f07acc35fc1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\tif (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\tCompilerOptions options = this.environment.globalOptions;", "+\tif (options.isAnnotationBasedNullAnalysisEnabled ", "+\t\t\t&& (currentMethod.tagBits & TagBits.IsNullnessKnown) == 0)", "+\t{", "+\t\t// if annotations are inherited these have been checked during STB.resolveTypesFor() (for methods explicit in this.type)", "+\t\tAbstractMethodDeclaration srcMethod = null;", "+\t\tif (this.type.equals(currentMethod.declaringClass)) // is currentMethod from the current type?", "+\t\t\tsrcMethod = currentMethod.sourceMethod();", "+\t\tboolean hasNonNullDefault = currentMethod.hasNonNullDefault();", "-\t\t\t\tcheckNullSpecInheritance(currentMethod, methods[i]);", "+\t\t\t\tcheckNullSpecInheritance(currentMethod, srcMethod, hasNonNullDefault, true, methods[i], this.type.scope, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9443d8ba9077648960d7121d7526045", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "8542678e2ceb736a9d19d031551da2cab5ea4a72", "commitAfterChange": "4ac6f89083748b9c4fc37b738ed82ea1a7c9c63b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\tif (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\tCompilerOptions options = this.environment.globalOptions;", "+\tif (options.isAnnotationBasedNullAnalysisEnabled ", "+\t\t\t&& (currentMethod.tagBits & TagBits.IsNullnessKnown) == 0)", "+\t{", "+\t\t// if annotations are inherited these have been checked during STB.resolveTypesFor() (for methods explicit in this.type)", "+\t\tAbstractMethodDeclaration srcMethod = null;", "+\t\tif (this.type.equals(currentMethod.declaringClass)) // is currentMethod from the current type?", "+\t\t\tsrcMethod = currentMethod.sourceMethod();", "+\t\tboolean hasNonNullDefault = currentMethod.hasNonNullDefault();", "-\t\t\t\tcheckNullSpecInheritance(currentMethod, methods[i]);", "+\t\t\t\tcheckNullSpecInheritance(currentMethod, srcMethod, hasNonNullDefault, true, methods[i], this.type.scope, null);"]}], "num": 55154}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7426901e4e8764df9f34a64a06db0c2b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35ecf2d5c15921f8fa16d200230a440c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ea1fe8ed052821b2b1ca5a7ad0079411db5ede64", "commitAfterChange": "a2a0577109951f3af96b6ee7e6f23d457b52d52d", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t} else {", "+\t\t\t} else if (typeReference instanceof UnionTypeReference){", "+\t\t\t} else if (typeReference instanceof IntersectionCastTypeReference) {", "+\t\t\t\tTypeReference[] typeReferences = ((IntersectionCastTypeReference) typeReference).typeReferences;", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\t\tcase AST.JLS3_INTERNAL :", "+\t\t\t\t\tcase AST.JLS4_INTERNAL :", "+\t\t\t\t\t\ttype = this.convertType(typeReferences[0]);", "+\t\t\t\t\t\tint start = typeReference.sourceStart;", "+\t\t\t\t\t\tint endPosition = typeReference.sourceEnd;", "+\t\t\t\t\t\tlength = endPosition - start + 1;", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\t// intersection type reference", "+\t\t\t\t\t\tfinal IntersectionType castType = new IntersectionType(this.ast);", "+\t\t\t\t\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "+\t\t\t\t\t\t\tcastType.types().add(this.convertType(typeReferences[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttype = castType;", "+\t\t\t\t\t\tList types = castType.types();", "+\t\t\t\t\t\tint size = types.size();", "+\t\t\t\t\t\tstart = ((Type) types.get(0)).getStartPosition();", "+\t\t\t\t\t\tType lastType = (Type) types.get(size - 1);", "+\t\t\t\t\t\tendPosition = lastType.getStartPosition() + lastType.getLength();", "+\t\t\t\t\t\tlength = endPosition - start;", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea20ac501e5fc515ac2c3c8db85a3e3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 416, "methodNumberAfterChange": 503, "signatureBeforeChange": " \tASTNode oneOfEach(AST target)", "signatureAfterChange": " \tASTNode oneOfEach(AST target)", "diff": ["-\t", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tEnumDeclaration ed = target.newEnumDeclaration();", "+\t\t\ttd.bodyDeclarations().add(ed);\t", "+\t\t\tEnumConstantDeclaration ec = target.newEnumConstantDeclaration();", "+\t\t\ted.bodyDeclarations().add(ec);\t", "+\t\t}", "+\t\t", "-\t\tvariableDeclarationFragment.setInitializer(qn);", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tSimpleType st = target.newSimpleType(qn);", "+\t\t\tQualifiedType qt = target.newQualifiedType(st, target.newSimpleName(\"x\")); //$NON-NLS-1$", "+\t\t\tWildcardType wt = target.newWildcardType();", "+\t\t\tParameterizedType pmt = target.newParameterizedType(target.newSimpleName(\"y\")); //$NON-NLS-1$", "+\t\t\tpmt.typeArguments().add(wt);", "+\t\t\tpmt.typeArguments().add(qt);", "+\t\t\tmd.setReturnType2(pmt);", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tEnhancedForStatement foreachStatement = target.newEnhancedForStatement();", "+\t\t\tb.statements().add(foreachStatement);", "+\t\t}", "+\t\t// annotations", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tAnnotationTypeDeclaration atd = target.newAnnotationTypeDeclaration();", "+\t\t\tcu.types().add(atd);", "+\t\t\tatd.bodyDeclarations().add(target.newAnnotationTypeMemberDeclaration());", "+\t\t\ttd.modifiers().add(target.newMarkerAnnotation());", "+\t\t\ttd.modifiers().add(target.newSingleMemberAnnotation());", "+\t\t\tNormalAnnotation an0 = target.newNormalAnnotation();", "+\t\t\ttd.modifiers().add(an0);", "+\t\t\tan0.values().add(target.newMemberValuePair());", "+\t\t\ttd.modifiers().add(target.newModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD));", "+\t\t}"]}], "num": 27735}
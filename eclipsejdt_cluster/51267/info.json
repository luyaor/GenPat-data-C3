{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70b92bb0dd9a76d2e792121690fde7d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16db4277dc0bd0a57f96754962f4c83c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3639dc175801e2c9b679b76a5a58c78d31a121fb", "commitAfterChange": "d376f3738e131d90e211985a40fdbdae44710f60", "methodNumberBeforeChange": 1005, "methodNumberAfterChange": 1005, "signatureBeforeChange": " public void test0996()", "signatureAfterChange": " public void test0996()", "diff": ["-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"  /**\\n\" + ", "-\t\t\t\t\"   * @param pArgs\\n\" + ", "-\t\t\t\t\"   */\\n\" + ", "-\t\t\t\t\"    final List<X<?>> l2 = castList(l1, X.class);\\n\" + ", "-\t\t\t\t\"    System.exit(0);\\n\" + ", "+\t\t\t\t\"    final List<X<?>> l2 = castList(l1, List.class);\\n\" + ", "+\t\t\t\t\"    \\n\" + ", "+\t\t\t\t\"    List<X> l3 = l2;\\n\" + ", "+\t\t\t\t\"    List<X<String>> l4 = null;\\n\" + ", "+\t\t\t\t\"    l3 = l4;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 25)\\n\" + ", "-\t\t\t\"\tfinal List<X<?>> l2 = castList(l1, X.class);\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from List<X> to List<X<?>>\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tfinal List<X<?>> l2 = castList(l1, List.class);\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<List> to List<X<?>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tList<X> l3 = l2;\\n\" + ", "+\t\t\t\"\t     ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tList<X> l3 = l2;\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<X<?>> to List<X>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tl3 = l4;\\n\" + ", "+\t\t\t\"\t     ^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<X<String>> to List<X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187cdbfc0969f890450a7171d1ba78ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "fc25b1b826e7fad7f1da04ab9d452bc350b24919", "commitAfterChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["+        \" Null annotation options:\\n\" +", "+\t\t\"    -nullAnnotations:<suboptions>\\n\" +", "+\t\t\"                      enable use of annotations for specifying null contracts;\\n\" +", "+\t\t\"                      <suboptions> is a non-empty, comma-separated list of:\\n\" +", "+\t\t\"        nullable=<typename>\\n\" +", "+\t\t\"                      specifies the fully qualified name of an annotation type\\n\" +", "+\t\t\"                      to be used for marking types whose values include null\\n\" +", "+\t\t\"        nonnull=<typename>\\n\" +", "+\t\t\"                      specifies the fully qualified name of an annotation type\\n\" +", "+\t\t\"                      to be used for marking types whose values cannot be null\\n\" +", "+\t\t\"        emulate       tells the compiler to emulate the above annotation types\\n\" +", "+\t\t\"                      although they do not exist on the classpath\\n\" +", "+\t\t\"        import        tells the compiler to import the above annotation types\\n\" +", "+\t\t\"                      without specific mention in the sources such that their\\n\" +", "+\t\t\"                      simple names can be used without explicit imports\\n\" +", "+\t\t\" \\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43ca8a8cd1c9e41fd45e1cc52ba2e181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \" Ignored options:\\n\" + ", "-        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "-        \"    -X<option>         specify non-standard option (ignored\\n\" + ", "-        \"                       except for -Xemacs)\\n\" + ", "-        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "-        \"    -O                 optimize for execution time (ignored)\\n\" + ", "+        \" Annotation processing options:\\n\" + ", "+        \"   These options are meaningful only in a 1.6 environment.\\n\" + ", "+        \"    -Akey[=value]        annotation processors options that are made to\\n\" + ", "+        \"                         annotation processors. key are identifiers separated\\n\" + ", "+        \"                         by ..\\n\" + ", "+        \"    -processorpath <directories and zip/jar files separated by ;>\\n\" + ", "+        \"                         specify locations where to find annotation processors\\n\" + ", "+        \"                         If this option is not used, the classpath will be\\n\" + ", "+        \"                         searched for processors.\\n\" + ", "+        \"    -processor <class1[,class2,...]>\\n\" + ", "+        \"                         Qualified names of the annotation processors to run.\\n\" + ", "+        \"                         This bypasses the default annotation discovery process\\n\" + ", "+        \"    -proc:only           run annotation processors, but do not compile\\n\" + ", "+        \"    -proc:none           perform compilation but do not run annotation\\n\" + ", "+        \"                         processors\\n\" + ", "+        \"    -s <dir>             specify a directory where to put the generated source\\n\" + ", "+        \"                         files\\n\" + ", "+        \"    -XprintProcessorInfo print information about which annotations and which\\n\" + ", "+        \"                         elements a processor is asked to process\\n\" + ", "+        \"    -XprintRounds        print information about annotation processing rounds.\\n\" + ", "+        \" \\n\" + ", "+        \" Ignored options:\\n\" + ", "+        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "+        \"    -X<option>         specify non-standard option (ignored\\n\" + ", "+        \"                       except for listed -X options)\\n\" + ", "+        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "+        \"    -O                 optimize for execution time (ignored)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b490106b428f4ece2b2bd71af9ce950", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 196, "methodNumberAfterChange": 196, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"1. ERROR in Errors.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in Errors.java (at line 5)\\n\" + ", "+\t\t\t\"\tex.five(\\\"eclipse\\\");\\n\" + ", "+\t\t\t\"\t   ^^^^\\n\" + ", "+\t\t\t\"The method five(String) is ambiguous for the type Ex<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Errors.java (at line 6)\\n\" + ", "-\t\t\t\"2. WARNING in Errors.java (at line 7)\\n\" + ", "+\t\t\t\"3. WARNING in Errors.java (at line 7)\\n\" + ", "-\t\t\t\"3. WARNING in Errors.java (at line 9)\\n\" + ", "+\t\t\t\"4. ERROR in Errors.java (at line 9)\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method five(Object) belongs to the raw type Ex. References to generic type Ex<C> should be parameterized\\n\" + ", "+\t\t\t\"\t    ^^^^\\n\" + ", "+\t\t\t\"The method five(Object) is ambiguous for the type Ex\\n\" + ", "-\t\t\t\"4. ERROR in Errors.java (at line 10)\\n\" + ", "+\t\t\t\"5. ERROR in Errors.java (at line 10)\\n\" + ", "-\t\t\t\"5. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"6. ERROR in Errors.java (at line 20)\\n\" + ", "+\t\t\t\"\t@Override void five(C cEx) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method five(C) of type Ex<C> has the same erasure as five(TC) of type Top<TC> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in Errors.java (at line 20)\\n\" + ", "+\t\t\t\"\t@Override void five(C cEx) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\tmustOverrideMessage(\"five(C)\", \"Ex<C>\") + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t\"6. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"9. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t// we disagree about the ambiguous errors on lines 5, 9 & 20, see the message sends to proof()", "-\t\t\t// 9: warning: [unchecked] unchecked call to <TM>five(TC) as a member of the raw type Top", "+\t\t\t// **** 9: warning: [unchecked] unchecked call to <TM>five(TC) as a member of the raw type Top", "-\t\t\t// 10: warning: [unchecked] unchecked call to six(TC) as a member of the raw type Top", "+\t\t\t// **** 10: warning: [unchecked] unchecked call to six(TC) as a member of the raw type Top"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6395a239a903d8b861bec9e0512c57a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/LambdaExpressionSyntaxTest.java", "commitBeforeChange": "8af48aa5660e72584abef914d9f2b32173f50c99", "commitAfterChange": "3f60c9b8b6041548c5cf76290845b4be1c2aa43b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test0018() throws IOException", "signatureAfterChange": " \tpublic void test0018() throws IOException", "diff": ["-\t// Reference expression - super:: form, without type arguments. ", "-\tpublic void test0018() throws IOException {", "-\t\tString source = ", "-\t\t\t\t\"interface I {\\n\" +", "-\t\t\t\t\"    void foo(int x);\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"public class X extends Y {\\n\" +", "-\t\t\t\t\"    public static void main(String [] args) {\\n\" +", "-\t\t\t\t\"\tnew X().doit();\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"    void doit() {\\n\" +", "-\t\t\t\t\"        I i = super::foo;\\n\" +", "-\t\t\t\t\"        i.foo(10); \\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y {\\n\" +", "-\t\t\t\t\"    public void foo(int x) {\\n\" +", "-\t\t\t\t\"\tSystem.out.println(x);\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\tString expectedUnitToString = ", "-\t\t\t\t\"interface I {\\n\" + ", "-\t\t\t\t\"  void foo(int x);\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"  public X() {\\n\" + ", "-\t\t\t\t\"    super();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"    new X().doit();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  void doit() {\\n\" + ", "-\t\t\t\t\"    I i = super::foo;\\n\" + ", "-\t\t\t\t\"    i.foo(10);\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class Y {\\n\" + ", "-\t\t\t\t\"  Y() {\\n\" + ", "-\t\t\t\t\"    super();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  public void foo(int x) {\\n\" + ", "-\t\t\t\t\"    System.out.println(x);\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\";", "-\t\tcheckParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), null, \"test0018\", expectedUnitToString);", "-\t}", "+\tpublic void test0018() throws IOException {", "+\t\t\t\t\"  J j1 = () -> 0;\\n\" + ", "+\t\tcheckParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), null, \"test0018\", expectedUnitToString);"]}], "num": 51267}
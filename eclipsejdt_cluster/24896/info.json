{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79d937c91ccf48ad8b391c65abd33b5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a01c628e00613ff0c3d159787496089", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "commitAfterChange": "e02893535f42359d54aa8b408faa8e8269b32442", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void recordInitializationStartPC(int pc)", "signatureAfterChange": "  \tpublic void recordInitializationStartPC(int pc)", "diff": ["-\t\t// optimize cases where reopening a contiguous interval", "-\t\tif ((initializationCount > 0) && (initializationPCs[ ((initializationCount - 1) << 1) + 1] == pc)) {", "-\t\t\tinitializationPCs[ ((initializationCount - 1) << 1) + 1] = -1; // reuse previous interval (its range will be augmented)", "-\t\t} else {", "-\t\t\tint index = initializationCount << 1;", "-\t\t\tif (index == initializationPCs.length) {", "-\t\t\t\tSystem.arraycopy(initializationPCs, 0, (initializationPCs = new int[initializationCount << 2]), 0, index);", "+\t\tif (initializationCount > 0) {", "+\t\t\tint previousEndPC = initializationPCs[ ((initializationCount - 1) << 1) + 1];", "+\t\t\t // interval still open, keep using it (108180)", "+\t\t\tif (previousEndPC == -1) {", "+\t\t\t\treturn;", "-\t\t\tinitializationPCs[index] = pc;", "-\t\t\tinitializationPCs[index + 1] = -1;", "-\t\t\tinitializationCount++;", "+\t\t\t// optimize cases where reopening a contiguous interval", "+\t\t\tif (previousEndPC == pc) {", "+\t\t\t\tinitializationPCs[ ((initializationCount - 1) << 1) + 1] = -1; // reuse previous interval (its range will be augmented)", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\tint index = initializationCount << 1;", "+\t\tif (index == initializationPCs.length) {", "+\t\t\tSystem.arraycopy(initializationPCs, 0, (initializationPCs = new int[initializationCount << 2]), 0, index);", "+\t\t}", "+\t\tinitializationPCs[index] = pc;", "+\t\tinitializationPCs[index + 1] = -1;", "+\t\tinitializationCount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39a3c1829b14bea0af87d60b212306d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bb7b9521196186c5be108c1f350a453c12233137", "commitAfterChange": "871cac4ba4cecfc6322ce0af5777177652a514a9", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \r \t@Override\r \tpublic boolean visit(Block node)", "signatureAfterChange": "\r \r \t@Override\r \tpublic boolean visit(Block node)", "diff": ["-\t\t\tif (closeBraceIndex + 1 < this.tm.size()\r", "-\t\t\t\t\t&& this.tm.get(closeBraceIndex + 1).tokenType != TokenNameSEMICOLON)\r", "-\t\t\t\tthis.tm.get(closeBraceIndex).spaceAfter();\r", "+\t\t\tif (closeBraceIndex + 1 < this.tm.size()) {\r", "+\t\t\t\tint nextToken = this.tm.get(closeBraceIndex + 1).tokenType;\r", "+\t\t\t\tif (nextToken != TokenNameSEMICOLON && nextToken != TokenNameRPAREN)\r", "+\t\t\t\t\tthis.tm.get(closeBraceIndex).spaceAfter();\r", "+\t\t\t}\r"]}], "num": 24896}
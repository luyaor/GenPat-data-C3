{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc9e3963cb0c648e7b14a444d5595958", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1778f10034affb4475993554c9d72c82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "48b439005b4e27b9edf7ac75008df6663dca3609", "commitAfterChange": "db94ada762c25cbafb7604978ccc4fc3df281550", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["+\t// Display time measures", "+\tStringBuffer buffer1 = new StringBuffer();", "+\tbuffer1.append(\"Time measures:\").append(LINE_SEPARATOR);", "+\tbuffer1.append(\"\t- first format:\").append(LINE_SEPARATOR);", "+\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[0])).append(LINE_SEPARATOR);", "+\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[0]).append(LINE_SEPARATOR);", "+\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[0]).append(LINE_SEPARATOR);", "+\tbuffer1.append(\"\t- repeated format:\").append(LINE_SEPARATOR);", "+\tfor (int i=1; i<FORMAT_REPEAT; i++) {", "+\t\tbuffer1.append(\"\t   n\ufffd \"+(i+1)).append(LINE_SEPARATOR);", "+\t\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[i])).append(LINE_SEPARATOR);", "+\t\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[i]).append(LINE_SEPARATOR);", "+\t\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[i]).append(LINE_SEPARATOR);", "+\t}", "+\tbuffer1.append(LINE_SEPARATOR);", "+", "-\tStringBuffer buffer = new StringBuffer(LINE_SEPARATOR);", "-\t\t\tbuffer.append(size);", "-\t\t\tbuffer.append(\" file\");", "+\t\t\tbuffer1.append(size);", "+\t\t\tbuffer1.append(\" file\");", "-\t\t\t\tbuffer.append(\" has \");", "+\t\t\t\tbuffer1.append(\" has \");", "-\t\t\t\tbuffer.append(\"s have \");", "+\t\t\t\tbuffer1.append(\"s have \");", "-\t\t\tbuffer.append(FAILURES[i]);", "-\t\t\tbuffer.append('!');", "-\t\t\tbuffer.append(LINE_SEPARATOR);", "+\t\t\tbuffer1.append(FAILURES[i]);", "+\t\t\tbuffer1.append('!');", "+\t\t\tbuffer1.append(LINE_SEPARATOR);", "-\tbuffer.append(LINE_SEPARATOR);", "+\tbuffer1.append(LINE_SEPARATOR);", "+\tStringBuffer buffer2 = new StringBuffer(LINE_SEPARATOR);", "-\t\t\tbuffer.append(\"List of file(s) with \");", "-\t\t\tbuffer.append(FAILURES[i]);", "-\t\t\tbuffer.append(':');", "-\t\t\tbuffer.append(LINE_SEPARATOR);", "+\t\t\tbuffer2.append(\"List of file(s) with \");", "+\t\t\tbuffer2.append(FAILURES[i]);", "+\t\t\tbuffer2.append(':');", "+\t\t\tbuffer2.append(LINE_SEPARATOR);", "-\t\t\t\tbuffer.append(\"\t- \");", "-\t\t\t\tbuffer.append(failures.get(j));", "-\t\t\t\tbuffer.append(LINE_SEPARATOR);", "+\t\t\t\tbuffer2.append(\"\t- \");", "+\t\t\t\tbuffer2.append(failures.get(j));", "+\t\t\t\tbuffer2.append(LINE_SEPARATOR);", "+\tSystem.out.println(buffer1.toString());", "-\t\tSystem.out.println(buffer.toString());", "+\t\tSystem.out.println(buffer2.toString());", "-\t\tLOG_STREAM.print(buffer.toString());", "+\t\tLOG_STREAM.print(buffer1.toString());", "+\t\tLOG_STREAM.print(buffer2.toString());", "+//\tLOG_BUFFER.append(buffer1.toString());", "+//\tLOG_BUFFER.append(buffer2.toString());", "+//\tInputStream stream= new InputStream() {", "+//\t\tprivate Reader reader= new StringReader(LOG_BUFFER.toString());", "+//\t\tpublic int read() throws IOException {", "+//\t\t\treturn this.reader.read();", "+//\t\t}", "+//\t};", "+//\tif (LOG_RESOURCE.exists()) {", "+//\t\tLOG_RESOURCE.setContents(", "+//\t\t\tstream,", "+//\t\t\tIResource.FORCE | IResource.KEEP_HISTORY,", "+//\t\t\tnull);", "+//\t} else {", "+//\t\tLOG_RESOURCE.create(stream, IResource.FORCE, null);", "+//\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d2a2d56010453f14ff24dfc25be8cae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BuildNotifier.java", "commitBeforeChange": "54ba66d9d78ab42f826307bbdbfd4052bc565f16", "commitAfterChange": "3badf84171cbba8161f3e622b35064462f96fa86", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected String problemsMessage()", "signatureAfterChange": " protected String problemsMessage()", "diff": ["-\tif (newErrorCount == 0 && fixedErrorCount == 0) return \"\"; //$NON-NLS-1$", "-\tif (fixedErrorCount == 0)", "-\t\treturn '(' + (newErrorCount == 1", "-\t\t\t? Util.bind(\"build.oneErrorFound\") //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.errorsFound\", String.valueOf(newErrorCount))) + ')'; //$NON-NLS-1$", "-\tif (newErrorCount == 0)", "-\t\treturn '(' + (fixedErrorCount == 1", "-\t\t\t? Util.bind(\"build.oneErrorFixed\") //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.errorsFixed\", String.valueOf(fixedErrorCount))) + ')'; //$NON-NLS-1$", "-\treturn", "-\t\t'(' + (fixedErrorCount == 1", "-\t\t\t? Util.bind(\"build.oneErrorFixed\") //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.errorsFixed\", String.valueOf(fixedErrorCount))) //$NON-NLS-1$", "-\t\t+ \", \" //$NON-NLS-1$", "-\t\t+ (newErrorCount == 1", "-\t\t\t? Util.bind(\"build.oneErrorFound\") //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.errorsFound\", String.valueOf(newErrorCount))) + ')'; //$NON-NLS-1$", "+\tint numNew = newErrorCount + newWarningCount;", "+\tint numFixed = fixedErrorCount + fixedWarningCount;", "+\tif (numNew == 0 && numFixed == 0) return \"\"; //$NON-NLS-1$", "+", "+\tStringBuffer buffer = new StringBuffer();", "+\tbuffer.append('(');", "+\tif (numNew == 0) {", "+\t\t// (Fixed: x errors, y warnings)", "+\t\tbuffer.append(Util.bind(\"build.fixedHeader\")); //$NON-NLS-1$", "+\t\tbuffer.append(' ');", "+\t\tif (fixedErrorCount > 0) {", "+\t\t\tif (fixedErrorCount == 1)", "+\t\t\t\tbuffer.append(Util.bind(\"build.oneError\")); //$NON-NLS-1$", "+\t\t\telse", "+\t\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", String.valueOf(fixedErrorCount))); //$NON-NLS-1$", "+\t\t\tif (fixedWarningCount > 0)", "+\t\t\t\tbuffer.append(',').append(' ');", "+\t\t}", "+\t\tif (fixedWarningCount > 0) {", "+\t\t\tif (fixedWarningCount == 1)", "+\t\t\t\tbuffer.append(Util.bind(\"build.oneWarning\")); //$NON-NLS-1$", "+\t\t\telse", "+\t\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", String.valueOf(fixedWarningCount))); //$NON-NLS-1$", "+\t\t}", "+\t} else if (numFixed == 0) {", "+\t\t// (Found: x errors, y warnings)", "+\t\tbuffer.append(Util.bind(\"build.foundHeader\")); //$NON-NLS-1$", "+\t\tbuffer.append(' ');", "+\t\tif (newErrorCount > 0) {", "+\t\t\tif (newErrorCount == 1)", "+\t\t\t\tbuffer.append(Util.bind(\"build.oneError\")); //$NON-NLS-1$", "+\t\t\telse", "+\t\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", String.valueOf(newErrorCount))); //$NON-NLS-1$", "+\t\t\tif (newWarningCount > 0)", "+\t\t\t\tbuffer.append(',').append(' ');", "+\t\t}", "+\t\tif (newWarningCount > 0) {", "+\t\t\tif (newWarningCount == 1)", "+\t\t\t\tbuffer.append(Util.bind(\"build.oneWarning\")); //$NON-NLS-1$", "+\t\t\telse", "+\t\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", String.valueOf(newWarningCount))); //$NON-NLS-1$", "+\t\t}", "+\t} else {", "+\t\t// (Found/fixed: x/y errors, x/y warnings)", "+\t\tbuffer.append(Util.bind(\"build.foundFixedHeader\")); //$NON-NLS-1$", "+\t\tbuffer.append(' ');", "+", "+\t\tif (newErrorCount > 0 || fixedErrorCount > 0) {", "+\t\t\tString plusMinus = String.valueOf(newErrorCount) + \"/\" + String.valueOf(fixedErrorCount); //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", plusMinus)); //$NON-NLS-1$", "+\t\t\tif (fixedWarningCount > 0 || newWarningCount > 0)", "+\t\t\t\tbuffer.append(',').append(' ');", "+\t\t}", "+\t\tif (newWarningCount > 0 || fixedWarningCount > 0) {", "+\t\t\tString plusMinus = String.valueOf(newWarningCount) + \"/\" + String.valueOf(fixedWarningCount); //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", plusMinus)); //$NON-NLS-1$", "+\t\t}", "+\t}", "+\tbuffer.append(')');", "+\treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b781318878d95faaf90932b107bbf11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "9357aeb22ce7f7b62f42472f1ba9defaa31953c5", "commitAfterChange": "2beca67c12b6708d00577783b2092953170491c0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2)", "signatureAfterChange": "  \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "diff": ["-\t */", "-\tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2) {", "+\tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables) {", "-\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "-\t\t\t\t&& (referenceBinding.isParameterizedType() == referenceBinding2.isParameterizedType())", "-\t\t\t\t&& (referenceBinding.isWildcard() == referenceBinding2.isWildcard())", "-\t\t\t\t&& (referenceBinding.isGenericType() == referenceBinding2.isGenericType())", "-\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "-\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers);", "+\t\t\tif (referenceBinding.isParameterizedType()) {", "+\t\t\t\tif (!referenceBinding2.isParameterizedType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) referenceBinding;", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding2 = (ParameterizedTypeBinding) referenceBinding2;", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "+\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "+\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "+\t\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers)", "+\t\t\t\t\t&& isEqual(parameterizedTypeBinding.arguments, parameterizedTypeBinding2.arguments);", "+\t\t\t} else if (referenceBinding.isWildcard()) {", "+\t\t\t\tif (!referenceBinding2.isWildcard()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) referenceBinding;", "+\t\t\t\tWildcardBinding wildcardBinding2 = (WildcardBinding) referenceBinding2;", "+\t\t\t\treturn isEqual(wildcardBinding.bound, wildcardBinding2.bound)", "+\t\t\t\t\t&& wildcardBinding.kind == wildcardBinding2.kind;", "+\t\t\t} else if (referenceBinding.isGenericType()) {", "+\t\t\t\tif (!referenceBinding2.isGenericType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (checkTypeVariables) {", "+\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables())) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.isGenericType() == referenceBinding2.isGenericType())", "+\t\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "+\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "+\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "+\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "+\t\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers);", "+\t\t\t} else {", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "+\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "+\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "+\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "+\t\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers);", "+\t\t\t}"]}], "num": 37063}
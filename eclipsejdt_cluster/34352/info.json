{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61526c42e1fb04091459fd90b1e73e41", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "081fce693994eb3a3617ba4173da753d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "signatureAfterChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "diff": ["-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_message_send);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "-\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "+\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\t\t\tif (j > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\t\tif (j > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_messagesend_arguments);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_message_send);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "-\t\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\t\t\t\t\tif (j > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\t\t\t\tif (j > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation);", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_messagesend_arguments);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "093c9d0e706797ec18822653a546b81b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic boolean visit(Assignment node)", "signatureAfterChange": "  \tpublic boolean visit(Assignment node)", "diff": ["-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\tAssignment.Operator operator = node.getOperator();", "+\t\tif (operator == Assignment.Operator.ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.MINUS_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMINUS_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.PLUS_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamePLUS_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.TIMES_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMULTIPLY_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.DIVIDE_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDIVIDE_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.REMAINDER_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameREMAINDER_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.LEFT_SHIFT_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLEFT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.RIGHT_SHIFT_SIGNED_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRIGHT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.RIGHT_SHIFT_UNSIGNED_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.BIT_AND_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAND_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.BIT_OR_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameOR_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameXOR_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1df7e9c4c27cd58d55e54768984844fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameLBRACE, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACE, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "-\t\t\t\t\t\t\"expressions\",//$NON-NLS-1$", "+\t\t\t\t\t\t\"array_initializer\",//$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\tif (expressionsLength == 1) {", "+\t\t\t\t\tif (isComma()) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\texpressions[i].traverse(this, scope);", "+\t\t\t\t\t\tif (i == expressionsLength - 1) {", "+\t\t\t\t\t\t\tif (isComma()) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\t}", "-\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACE, this.preferences.insert_space_before_closing_brace_in_array_initializer, true); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_before_closing_brace_in_array_initializer, true); ", "-\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACE, this.preferences.insert_space_between_empty_array_initializer, true);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_array_initializer, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432dd0d0506c6cca81782020bff850d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic boolean visit( \t\tExplicitConstructorCall explicitConstructor, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tExplicitConstructorCall explicitConstructor, \t\tBlockScope scope)", "diff": ["-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_message_send);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "-\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "-\t\t\t\t\tthis.preferences.explicit_constructor_arguments_alignment,", "+\t\t\t\t\tthis.preferences.alignment_for_arguments_in_explicit_constructor_call,", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_explicitconstructorcall_arguments);", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_explicit_constructor_call_arguments);", "-\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_explicitconstructorcall_arguments) {", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_explicit_constructor_call_arguments) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_messagesend_arguments); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "669ea27afc5e31be327b04ebddd950a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "signatureAfterChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "diff": ["-\t\tString array_initializer_brace_position = this.preferences.array_initializer_brace_position;", "+\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "-\t\t\tif (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "+\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "-\t\t\t\t\t\tthis.preferences.array_initializer_expressions_alignment,", "+\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "-\t\t\t\t\t\tthis.preferences.array_initializer_continuation_indentation,", "+\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "-\t\t\t\tif (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t}", "-\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "+\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\tif (expressionsLength == 1) {", "-\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tif (isComma()) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t}", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.unIndent();", "-\t\t} else if (this.preferences.insert_space_between_empty_array_initializer) {", "+\t\t} else if (this.preferences.insert_space_between_empty_braces_in_array_initializer) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a95ac9d21d993eb5b0d912170f70e087", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "signatureAfterChange": "  \tprivate void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "diff": ["-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_message_send);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "-\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "-\t\t\t\t\t\tthis.preferences.message_send_arguments_alignment,", "+\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_messagesend_arguments);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18be99ad4415533a9b1bf98ca08e429", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "74d059b3fbdc00070c70bee76509a44ccad7fb4d", "commitAfterChange": "31d2b0bac7c9b032f1ad8765fd4577eaff8d79fd", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 86, "signatureBeforeChange": "  \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": "  \tpublic boolean visit(TypeDeclaration node)", "diff": ["-        if (node.isInterface()) {", "+        final boolean isInterface = node.isInterface();", "+\t\tif (isInterface) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameextends, true);", "-\t\t\t\t\tfor (int i = 0; i < superInterfacesLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);", "-\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i+1);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_superinterfaces) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t((Type) superInterfaces.get(i)).accept(this);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i+1);", "+\t\t\t\t\tif (isInterface) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameextends, true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, 1);", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t((Type) superInterfaces.get(0)).accept(this);", "+\t\t\t\t\tfor (int i = 1; i < superInterfacesLength; i++) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);", "+\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i+1);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_superinterfaces) {", "-\t\t\t\t\t\t\t((Type) superInterfaces.get(i)).accept(this);", "+\t\t\t\t\t\t((Type) superInterfaces.get(i)).accept(this);", "-\t\tformatTypeMembers(bodyDeclarations);", "+\t\tformatTypeMembers(bodyDeclarations, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadb5152c6cb99b114cc555315e3f4e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "3f4d5d2136631e9cf63e2a32bd9868cec640bf4a", "commitAfterChange": "e72ce28100309ddf8def791ea7002ecc7cb95b9e", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic boolean visit( \t\tConditionalExpression conditionalExpression, \t\tBlockScope scope)", "signatureAfterChange": "     public boolean visit(     \tConditionalExpression conditionalExpression,     \tBlockScope scope)", "diff": ["-\t */", "-\tpublic boolean visit(", "-\t\tConditionalExpression conditionalExpression,", "-\t\tBlockScope scope) {", "-", "-\t\tfinal int numberOfParens = (conditionalExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(conditionalExpression, numberOfParens);", "-\t\t}", "-\t\tconditionalExpression.condition.traverse(this, scope);", "-", "-\t\tboolean placeSpaceImmediately = this.preferences.insert_space_before_question_in_conditional", "-\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_INDENT_ON_COLUMN) != 0)", "-\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_NEXT_PER_LINE_SPLIT) != 0);", "-\t\tif (placeSpaceImmediately) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\t", "-\t\tAlignment conditionalExpressionAlignment =this.scribe.createAlignment(", "-\t\t\t\t\"conditionalExpression\", //$NON-NLS-1$", "-\t\t\t\tthis.preferences.conditional_expression_alignment,", "-\t\t\t\t2,", "-\t\t\t\tthis.scribe.scanner.currentPosition);", "-", "-\t\tthis.scribe.enterAlignment(conditionalExpressionAlignment);", "-\t\tboolean ok = false;", "-\t\tdo {", "-\t\t\ttry {", "-\t\t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 0);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, !placeSpaceImmediately && this.preferences.insert_space_before_question_in_conditional);", "-", "-\t\t\t\tif (this.preferences.insert_space_after_question_in_conditional) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tconditionalExpression.valueIfTrue.traverse(this, scope);", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 1);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_conditional);", "-", "-\t\t\t\tif (this.preferences.insert_space_after_colon_in_conditional) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tconditionalExpression.valueIfFalse.traverse(this, scope);", "-", "-\t\t\t\tok = true;", "-\t\t\t} catch (AlignmentException e) {", "-\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t}", "-\t\t} while (!ok);", "-\t\tthis.scribe.exitAlignment(conditionalExpressionAlignment, true);", "-\t\t\t", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(conditionalExpression, numberOfParens);", "-\t\t}", "-\t\treturn false;\t", "-\t}", "+     */", "+    public boolean visit(", "+    \tConditionalExpression conditionalExpression,", "+    \tBlockScope scope) {", "+    ", "+    \tfinal int numberOfParens = (conditionalExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+    \tif (numberOfParens > 0) {", "+    \t\tmanageOpeningParenthesizedExpression(conditionalExpression, numberOfParens);", "+    \t}", "+    \tconditionalExpression.condition.traverse(this, scope);", "+    ", "+    \tAlignment conditionalExpressionAlignment =this.scribe.createAlignment(", "+    \t\t\t\"conditionalExpression\", //$NON-NLS-1$", "+    \t\t\tthis.preferences.conditional_expression_alignment,", "+    \t\t\t2,", "+    \t\t\tthis.scribe.scanner.currentPosition);", "+    ", "+    \tthis.scribe.enterAlignment(conditionalExpressionAlignment);", "+    \tboolean ok = false;", "+    \tdo {", "+    \t\ttry {", "+    \t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 0);", "+    \t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, this.preferences.insert_space_before_question_in_conditional);", "+    ", "+    \t\t\tif (this.preferences.insert_space_after_question_in_conditional) {", "+    \t\t\t\tthis.scribe.space();", "+    \t\t\t}", "+    \t\t\tconditionalExpression.valueIfTrue.traverse(this, scope);", "+    \t\t\tthis.scribe.printTrailingComment();", "+    \t\t\tthis.scribe.alignFragment(conditionalExpressionAlignment, 1);", "+    \t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_conditional);", "+    ", "+    \t\t\tif (this.preferences.insert_space_after_colon_in_conditional) {", "+    \t\t\t\tthis.scribe.space();", "+    \t\t\t}", "+    \t\t\tconditionalExpression.valueIfFalse.traverse(this, scope);", "+    ", "+    \t\t\tok = true;", "+    \t\t} catch (AlignmentException e) {", "+    \t\t\tthis.scribe.redoAlignment(e);", "+    \t\t}", "+    \t} while (!ok);", "+    \tthis.scribe.exitAlignment(conditionalExpressionAlignment, true);", "+    \t\t", "+    \tif (numberOfParens > 0) {", "+    \t\tmanageClosingParenthesizedExpression(conditionalExpression, numberOfParens);", "+    \t}", "+    \treturn false;\t", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9a46a52c3ebc7d4bac571c644abe17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f4680a34e1f2039b2a192d0a537b3157d981aa26", "commitAfterChange": "41f0eedac440a5a7408e664ba09866184ebddd55", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\t", "-\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACE, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "-\t\t", "-\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "-\t\tif (expressions != null) {", "-\t\t\tint expressionsLength = expressions.length;", "-\t\t\tif (expressionsLength > 1) {", "-\t\t\t\tAlignment arrayInitializerAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\t\"array_initializer\",//$NON-NLS-1$", "-\t\t\t\t\t\tthis.preferences.array_initializer_expressions_alignment,", "-\t\t\t\t\t\tAlignment.R_OUTERMOST,", "-\t\t\t\t\t\texpressionsLength,", "-\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "-\t\t\t\t\t\ttrue);", "-\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "-\t\t\t\tboolean ok = false;", "-\t\t\t\tdo {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "-\t\t\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tok = true;", "-\t\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t}", "-\t\t\t\t} while (!ok);", "-\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "-\t\t\t} else {", "-\t\t\t\t// we don't need to use an alignment", "-\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\tif (expressionsLength == 1) {", "-\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_before_closing_brace_in_array_initializer, true); ", "-\t\t} else {", "-\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_array_initializer, true);", "-\t\t}", "-\t", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "+\t\tformatArrayInitializer(arrayInitializer, scope, this.preferences.insert_space_before_opening_brace_in_array_initializer || this.preferences.insert_space_after_assignment_operators);"]}], "num": 34352}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a28ebdc2ddfdea0c265e497c2d08e5a6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b463e548c46691e61b14e4910b42e609", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "254df1aa95b16790be4f99cde7a9a4aae8f9ade1", "commitAfterChange": "8715eeccf865a33f86687c2ed1edfa7db42faeec", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate void runAPTInMixedMode(final BuildEnv processorEnv)", "signatureAfterChange": " \tprivate void runAPTInMixedMode(final BuildEnv processorEnv)", "diff": ["-\t\t\tnew HashMap<BuildContext, Set<AnnotationTypeDeclaration>>(cpResults.length * 4/3 + 1);", "+\t\t\tnew HashMap<>(cpResults.length * 4/3 + 1);", "-\t\t\tnew HashMap<AnnotationProcessorFactory, Set<AnnotationTypeDeclaration>>( _factories.size() * 4/3 + 1 );", "+\t\t\tnew HashMap<>( _factories.size() * 4/3 + 1 );", "-\t\t\tnew HashMap<AnnotationProcessorFactory, Set<AnnotationTypeDeclaration>>( _factories.size() * 4/3 + 1 );\t\t", "+\t\t\tnew HashMap<>( _factories.size() * 4/3 + 1 );", "-\t\t\t\t\tannotationTypes = new HashSet<AnnotationTypeDeclaration>(annotationDecls.values());", "+\t\t\t\t\tannotationTypes = new HashSet<>(annotationDecls.values());", "-\t\t\t\t_currentDispatchBatchFactories = new LinkedHashSet<AnnotationProcessorFactory>();", "+\t\t\t\t_currentDispatchBatchFactories = new LinkedHashSet<>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d45f95ad05f5feddee78375c96112954", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "66aac02937f04c170f8d05dba872c2c7a8d764e4", "commitAfterChange": "3b57f5996dff6544e66ddb7b77d5128efa826542", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": "  \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\t\t\t\tfinal AnnotationProcessorFactory factory = (AnnotationProcessorFactory) factories", "-\t\t\t\t\t\t.get(i);", "-\t\t\t\tfinal Set<AnnotationTypeDeclaration> factoryDecls = getAnnotations(", "-\t\t\t\t\t\tfactory, annotationDecls);", "-", "+\t\t\t\tfinal AnnotationProcessorFactory factory = (AnnotationProcessorFactory) factories.get(i);", "+\t\t\t\tSet<AnnotationTypeDeclaration> factoryDecls = getAnnotations(factory, annotationDecls);", "+\t\t\t\tboolean done = false;", "+\t\t\t\tif( factoryDecls != null ){", "+\t\t\t\t\tif(factoryDecls.size() == 0 ){", "+\t\t\t\t\t\tdone = true;", "+\t\t\t\t\t\tfactoryDecls = new HashSet(annotationDecls.values());", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tif (annotationDecls.isEmpty())", "+\t\t\t\tif (annotationDecls.isEmpty() || done)"]}], "num": 48419}
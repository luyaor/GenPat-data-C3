{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36e1a2fb617d6a3b877a20b1783a56bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ba43f4a90917c36bea48617dd4527c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "b60a608dbabf8b5f04fae21c808d5a97597a41f6", "commitAfterChange": "0812715fc31639c278d6b4cb2dea448517c247bf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate String resultForInvalidTagsReferencesClassOrField(int visibility)", "signatureAfterChange": "  \tprivate String resultForInvalidTagsClassOrField(int visibility)", "diff": ["-\tprivate String resultForInvalidTagsReferencesClassOrField(int visibility) {", "-\t\tString result = \"----------\\n\";", "-\t\tfor (int i=0; i<=visibility; i++) {", "-\t\t\tresult += resultForInvalidTagsReferencesClassOrField[i];", "+\tprivate String resultForInvalidTagsClassOrField(int visibility) {", "+\t\tif (reportInvalidJavadocTagsDeprecatedRef == null && reportInvalidJavadocTagsNotVisibleRef == null) {", "+\t\t\tString result = \"----------\\n\";", "+\t\t\tfor (int i=0; i<=visibility; i++) {", "+\t\t\t\tresult += resultForInvalidTagsClassOrField[i];", "+\t\t\t}", "+\t\t\treturn result;", "-\t\treturn result;", "+\t\tStringBuffer result = new StringBuffer(\"----------\\n\");", "+\t\tfor (int i=0, count=1; i<= visibility; i++) {", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(resultForInvalidTagsClassOrField[i], \"\\n\");", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\tStringBuffer error = new StringBuffer();", "+\t\t\t\tboolean add = true;", "+\t\t\t\tfor (int j=0; j<5; j++) {", "+\t\t\t\t\tString line = tokenizer.nextToken();", "+\t\t\t\t\tswitch (j) {", "+\t\t\t\t\t\tcase 0:", "+\t\t\t\t\t\t\terror.append(count);", "+\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\tif (CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsDeprecatedRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (add && CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsNotVisibleRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\terror.append(line);", "+\t\t\t\t\t}", "+\t\t\t\t\terror.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tif (add) {", "+\t\t\t\t\tcount++;", "+\t\t\t\t\tresult.append(error);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn result.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2460db385be4f0210a8dcdbb9ff8bf1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "08a9fdc71afa0132ac39c0b0527fded03b0bf377", "commitAfterChange": "41212d6ccde0d1bea3d4ddbc47774cebd313e943", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\t\tIPath path = resolvedEntry.getPath();", "-\t\t\t\t\tif ((index = indexOfMatchingPath(resolvedEntry.getPath(), outputLocations, outputCount)) != -1){", "+\t\t\t\t\tif ((index = indexOfMatchingPath(path, outputLocations, outputCount)) != -1){", "-\t\t\t\t\thasLibFolder |= !org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedEntry.getPath().lastSegment());", "-\t\t\t\t\tif ((index = indexOfMatchingPath(resolvedEntry.getPath(), outputLocations, outputCount)) != -1){", "+\t\t\t\t\thasLibFolder |= !org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(path.lastSegment());", "+\t\t\t\t\tif ((index = indexOfMatchingPath(path, outputLocations, outputCount)) != -1){", "-\t", "-\t", "+\t\t// ensure that no output is coincidating with another source folder (only allowed if matching current source folder)", "+\t\t// perform one separate iteration so as to not take precedence over previously checked scenarii (in particular should", "+\t\t// diagnose nesting source folder issue before this one, e.g. [src]\"Project/\", [src]\"Project/source/\" and output=\"Project/\" should", "+\t\t// first complain about missing exclusion pattern", "+\t\tfor (int i = 0 ; i < length; i++) {", "+\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\tif (entry == null) continue;", "+\t\t\tIPath entryPath = entry.getPath();", "+\t\t\tint kind = entry.getEntryKind();", "+", "+\t\t\tif (kind == IClasspathEntry.CPE_SOURCE) {", "+\t\t\t\tIPath output = entry.getOutputLocation();", "+\t\t\t\tif (output == null) output = projectOutputLocation; // if no specific output, still need to check using default output", "+\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\tIClasspathEntry otherEntry = classpath[j];", "+\t\t\t\t\tif (otherEntry == entry) continue;", "+\t\t\t\t\tswitch (otherEntry.getEntryKind()) {", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "+\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output)) {", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseDistinctSourceFolderAsOutput\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "+\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output)) {", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseLibraryAsOutput\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3924d795315d3335d26538920d3f09bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "b60a608dbabf8b5f04fae21c808d5a97597a41f6", "commitAfterChange": "0812715fc31639c278d6b4cb2dea448517c247bf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate String resultForInvalidTagsReferencesMethodOrConstructor(int visibility)", "signatureAfterChange": "  \tprivate String resultForInvalidTagsMethodOrConstructor(int visibility)", "diff": ["-\tprivate String resultForInvalidTagsReferencesMethodOrConstructor(int visibility) {", "-\t\tString result = \"----------\\n\";", "-\t\tfor (int i=0; i<=visibility; i++) {", "-\t\t\tresult += resultForInvalidTagsReferencesMethodOrConstructor[i];", "+\tprivate String resultForInvalidTagsMethodOrConstructor(int visibility) {", "+\t\tif (reportInvalidJavadocTagsDeprecatedRef == null && reportInvalidJavadocTagsNotVisibleRef == null) {", "+\t\t\tString result = \"----------\\n\";", "+\t\t\tfor (int i=0; i<=visibility; i++) {", "+\t\t\t\tresult += resultForInvalidTagsMethodOrConstructor[i];", "+\t\t\t}", "+\t\t\treturn result;", "-\t\treturn result;", "+\t\tStringBuffer result = new StringBuffer(\"----------\\n\");", "+\t\tfor (int i=0, count=1; i<= visibility; i++) {", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(resultForInvalidTagsMethodOrConstructor[i], \"\\n\");", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\tStringBuffer error = new StringBuffer();", "+\t\t\t\tboolean add = true;", "+\t\t\t\tfor (int j=0; j<5; j++) {", "+\t\t\t\t\tString line = tokenizer.nextToken();", "+\t\t\t\t\tswitch (j) {", "+\t\t\t\t\t\tcase 0:", "+\t\t\t\t\t\t\terror.append(count);", "+\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\tif (CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsDeprecatedRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (add && CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsNotVisibleRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\terror.append(line);", "+\t\t\t\t\t}", "+\t\t\t\t\terror.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tif (add) {", "+\t\t\t\t\tcount++;", "+\t\t\t\t\tresult.append(error);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn result.toString();"]}], "num": 16172}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e77a30b806c08a5d85dddd13586a393", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d62899a06fd03c7ad860d0d075c79ae8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding var, int nullStatus, Expression reference)", "signatureAfterChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding local, int nullStatus, Expression reference)", "diff": ["-\tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding var, int nullStatus, Expression reference) {", "+\tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding local, int nullStatus, Expression reference) {", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,", "-\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNull(var); // from thereon it is set", "-\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNonNull(var); // from thereon it is set", "+\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNull(local); // from thereon it is set", "+\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNonNull(local); // from thereon it is set", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,", "-\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(var); // from thereon it is set", "-\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNull(var); // from thereon it is set", "+\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(local); // from thereon it is set", "+\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNull(local); // from thereon it is set", "-\t\t\t\t\tflowInfo.markedAsNullOrNonNullInAssertExpression(var);", "+\t\t\t\t\tflowInfo.markedAsNullOrNonNullInAssertExpression(local);", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,", "-\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(var); // from thereon it is set", "+\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(local); // from thereon it is set", "-\t\t\t\t\t\tinitsWhenTrue.markedAsNullOrNonNullInAssertExpression(var);", "+\t\t\t\t\t\tinitsWhenTrue.markedAsNullOrNonNullInAssertExpression(local);", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5fb07259b749c3559dbbc354248403f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding local, int nullStatus, Expression reference)", "signatureAfterChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding var, int nullStatus, Expression reference)", "diff": ["-\tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding local, int nullStatus, Expression reference) {", "+\tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, VariableBinding var, int nullStatus, Expression reference) {", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,", "-\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNull(local); // from thereon it is set", "-\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNonNull(local); // from thereon it is set", "+\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNull(var); // from thereon it is set", "+\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNonNull(var); // from thereon it is set", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,", "-\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(local); // from thereon it is set", "-\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNull(local); // from thereon it is set", "+\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(var); // from thereon it is set", "+\t\t\t\t\tinitsWhenFalse.markAsComparedEqualToNull(var); // from thereon it is set", "-\t\t\t\t\tflowInfo.markedAsNullOrNonNullInAssertExpression(local);", "+\t\t\t\t\tflowInfo.markedAsNullOrNonNullInAssertExpression(var);", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,", "-\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(local); // from thereon it is set", "+\t\t\t\t\tinitsWhenTrue.markAsComparedEqualToNonNull(var); // from thereon it is set", "-\t\t\t\t\t\tinitsWhenTrue.markedAsNullOrNonNullInAssertExpression(local);", "+\t\t\t\t\t\tinitsWhenTrue.markedAsNullOrNonNullInAssertExpression(var);", "-\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference,", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, var, reference,"]}], "num": 70203}
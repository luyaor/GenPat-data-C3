{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "040bd96a2b73d880e23332083de6f103", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e5589e8ea170cf9618685a348b70bb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "signatureAfterChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "diff": ["-\t\t\t\t\tif (level != SearchPattern.IMPOSSIBLE_MATCH) {\r", "-\t\t\t\t\t\tIMethod methodHandle = \r", "-\t\t\t\t\t\t\tbinaryType.getMethod(\r", "-\t\t\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),\r", "-\t\t\t\t\t\t\t\tSignature.getParameterTypes(new String(method.signature()).replace('/', '.'))\r", "-\t\t\t\t\t\t\t);\r", "-\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "-\t\t\t\t\t\t\tmethodHandle, \r", "-\t\t\t\t\t\t\tinfo, \r", "-\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r", "+\t\t\t\t\tswitch (level) {\r", "+\t\t\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:\r", "+\t\t\t\t\t\tcase SearchPattern.INACCURATE_MATCH:\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\t\tIMethod methodHandle = \r", "+\t\t\t\t\t\t\t\tbinaryType.getMethod(\r", "+\t\t\t\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),\r", "+\t\t\t\t\t\t\t\t\tSignature.getParameterTypes(new String(method.signature()).replace('/', '.'))\r", "+\t\t\t\t\t\t\t\t);\r", "+\t\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "+\t\t\t\t\t\t\t\tmethodHandle, \r", "+\t\t\t\t\t\t\t\tinfo, \r", "+\t\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r", "-\t\t\t\t\tif (level != SearchPattern.IMPOSSIBLE_MATCH) {\r", "-\t\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));\r", "-\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "-\t\t\t\t\t\t\tfieldHandle, \r", "-\t\t\t\t\t\t\tinfo, \r", "-\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r", "+\t\t\t\t\tswitch (level) {\r", "+\t\t\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:\r", "+\t\t\t\t\t\tcase SearchPattern.INACCURATE_MATCH:\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));\r", "+\t\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "+\t\t\t\t\t\t\t\tfieldHandle, \r", "+\t\t\t\t\t\t\t\tinfo, \r", "+\t\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71c6acef0abf7c9da5a28038f390cfd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "49cde0388e8672fe5bf364d83a34c7c55eefbde8", "commitAfterChange": "4bdd5764d1b87352c8aac7d9562e7eb039140198", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "signatureAfterChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "diff": ["-\t\t\t\t\t\tif (previousToken == -1) { // space before reference", "-\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (previousToken == TerminalTokens.TokenNameCOMMA) { // space between method arguments", "-\t\t\t\t\t\t\tspacePosition = buffer.length();", "-\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\tthis.column++; // space before reference", "+\t\t\t\t\t\tswitch (previousToken) {", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY :", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:\t// space between method arguments", "+\t\t\t\t\t\t\t\tspacePosition = buffer.length();", "+\t\t\t\t\t\t\t\t// fall through next case", "+\t\t\t\t\t\t\tcase -1:", "+\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd985c4c1329a8a322088657207937f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "5158f4f499166dbc52302f8195c73110e357532f", "commitAfterChange": "d656b5c8e5701277aa9c2918799a60289bc10084", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public IJavaProject getJavaProject(IResource resource)", "signatureAfterChange": " public IJavaProject getJavaProject(IResource resource)", "diff": ["-\tif (resource.getType() == IResource.FOLDER) {", "-\t\treturn new JavaProject(((IFolder)resource).getProject(), this);", "-\t} else if (resource.getType() == IResource.FILE) {", "-\t\treturn new JavaProject(((IFile)resource).getProject(), this);", "-\t} else if (resource.getType() == IResource.PROJECT) {", "-\t\treturn new JavaProject((IProject)resource, this);", "-\t} else {", "-\t\tthrow new IllegalArgumentException(Util.bind(\"element.invalidResourceForProject\")); //$NON-NLS-1$", "+\tswitch(resource.getType()){", "+\t\tcase IResource.FOLDER:", "+\t\t\treturn new JavaProject(((IFolder)resource).getProject(), this);", "+\t\tcase IResource.FILE:", "+\t\t\treturn new JavaProject(((IFile)resource).getProject(), this);", "+\t\tcase IResource.PROJECT:", "+\t\t\treturn new JavaProject((IProject)resource, this);", "+\t\tdefault:", "+\t\t\tthrow new IllegalArgumentException(Util.bind(\"element.invalidResourceForProject\")); //$NON-NLS-1$"]}], "num": 63799}
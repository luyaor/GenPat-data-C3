{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b50489aee0dfecdb407d74169e65b60c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12f3f48f83da41534ec377f0ca084d88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c98abd1679793c741445024ae2ee115b37f6fe95", "commitAfterChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "diff": ["-\t */", "-\tpublic boolean visit(ForStatement forStatement, BlockScope scope) {", "-\t", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNamefor);", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameLPAREN, this.preferences.insert_space_before_for_paren);", "-\t\t", "-\t\tif (this.preferences.insert_space_in_for_parens) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\tfinal Statement[] initializations = forStatement.initializations;", "-\t\tif (initializations != null) {", "-\t\t\tint length = initializations.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tinitializations[i].traverse(this, scope);", "-\t\t\t\tif (i >= 0 && (i < length - 1) && !(initializations[i] instanceof LocalDeclaration)) {", "-\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_inits);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_for_inits) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\tif (this.preferences.insert_space_after_semicolon_in_for) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\tfinal Expression condition = forStatement.condition;", "-\t\tif (condition != null) {", "-\t\t\tcondition.traverse(this, scope);", "-\t\t}", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\tif (this.preferences.insert_space_after_semicolon_in_for) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\tfinal Statement[] increments = forStatement.increments;", "-\t\tif (increments != null) {", "-\t\t\tfor (int i = 0, length = increments.length; i < length; i++) {", "-\t\t\t\tincrements[i].traverse(this, scope);", "-\t\t\t\tif (i != length - 1) {", "-\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_increments);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_for_increments) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameRPAREN, this.preferences.insert_space_in_for_parens);", "-\t\t", "-\t\tfinal Statement action = forStatement.action;", "-\t\tif (action != null) {", "-\t\t\tif (action instanceof Block) {", "-\t\t\t\taction.traverse(this, scope);", "-\t\t\t} else {", "-\t\t\t\tthis.scribe.indent();", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\taction.traverse(this, scope);", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t\tif (action instanceof Expression) {", "-\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t} else if (action instanceof Block && this.preferences.insert_new_line_in_control_statements) {", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.scribe.indent();", "-\t\t\t/*", "-\t\t\t * This is an empty statement", "-\t\t\t */", "-\t\t\tformatEmptyStatement(); ", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t */", "+\tpublic boolean visit(ForStatement forStatement, BlockScope scope) {", "+\t", "+\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNamefor);", "+\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameLPAREN, this.preferences.insert_space_before_for_paren);", "+\t\t", "+\t\tif (this.preferences.insert_space_in_for_parens) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tfinal Statement[] initializations = forStatement.initializations;", "+\t\tif (initializations != null) {", "+\t\t\tint length = initializations.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tinitializations[i].traverse(this, scope);", "+\t\t\t\tif (i >= 0 && (i < length - 1) && !(initializations[i] instanceof LocalDeclaration)) {", "+\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_inits);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_for_inits) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t}", "+\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\tif (this.preferences.insert_space_after_semicolon_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tfinal Expression condition = forStatement.condition;", "+\t\tif (condition != null) {", "+\t\t\tcondition.traverse(this, scope);", "+\t\t}", "+\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\tif (this.preferences.insert_space_after_semicolon_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tfinal Statement[] increments = forStatement.increments;", "+\t\tif (increments != null) {", "+\t\t\tfor (int i = 0, length = increments.length; i < length; i++) {", "+\t\t\t\tincrements[i].traverse(this, scope);", "+\t\t\t\tif (i != length - 1) {", "+\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_increments);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_for_increments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameRPAREN, this.preferences.insert_space_in_for_parens);", "+\t\t", "+\t\tfinal Statement action = forStatement.action;", "+\t\tif (action != null) {", "+\t\t\tif (action instanceof Block) {", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t} else {", "+\t\t\t\tthis.scribe.indent();", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\tif (action instanceof Expression) {", "+\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t} else if (action instanceof Block && this.preferences.insert_new_line_in_control_statements) {", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.scribe.indent();", "+\t\t\t/*", "+\t\t\t * This is an empty statement", "+\t\t\t */", "+\t\t\tformatEmptyStatement(); ", "+\t\t\tthis.scribe.unIndent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e41633b8360484700b5f83d702134fb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "54beaf9a0ac7e8e91c308765e4aff36ce5749605", "commitAfterChange": "2ad8f0c7463e2025ec9e28003dc9e376c4e0c20f", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "diff": ["-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        int line = this.scribe.line;", "-", "-        this.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "-", "-\t\tif (this.scribe.line > line) {", "-        \t// annotations introduced new line, but this is not a line wrapping", "-\t\t\t// see 158267", "-\t\t\tline = this.scribe.line;", "-\t\t}", "-\t\tthis.scribe.space();", "-", "-\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "-\t\tif (typeParameters != null) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "-\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tint length = typeParameters.length;", "-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "-\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "-\t\t\tif (isClosingGenericToken()) {", "-\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t}", "-", "-\t\t * Print the method return type", "+\t\t * Print comments to get proper line number", "-\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\tthis.scribe.printComment();", "+\t\tint line = this.scribe.line;", "+", "+\t\t// Create alignment", "+\t\tAlignment methodDeclAlignment = this.scribe.createAlignment(", "+\t\t\t\t\"methodDeclaration\",//$NON-NLS-1$", "+\t\t\t\tthis.preferences.alignment_for_method_declaration,", "+\t\t\t\tAlignment.R_INNERMOST,", "+\t\t\t\t3,", "+\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\tthis.scribe.enterAlignment(methodDeclAlignment);", "+\t\tboolean ok = false;", "+\t\tdo {", "+\t\t\ttry {", "-\t\tif (returnType != null) {", "-\t\t\treturnType.traverse(this, methodDeclarationScope);", "-\t\t}", "-\t\t/*", "-\t\t * Print the method name", "-\t\t */", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+\t\t\t\tthis.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "+\t\t\t\tint fragmentIndex = 0;", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, fragmentIndex);", "-\t\tformatMethodArguments(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+\t\t\t\tif (this.scribe.line > line) {", "+\t\t\t\t\t// annotations introduced new line, but this is not a line wrapping", "+\t\t\t\t\t// see 158267", "+\t\t\t\t\tline = this.scribe.line;", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.space();", "-\t\t/*", "-\t\t * Check for extra dimensions", "-\t\t */", "-\t\tint extraDimensions = getDimensions();", "-\t\tif (extraDimensions != 0) {", "-\t\t\t for (int i = 0; i < extraDimensions; i++) {", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t }", "-\t\t}", "+\t\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "+\t\t\t\tif (typeParameters != null) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "+\t\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tint length = typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+\t\t\t\t}", "-\t\tformatThrowsClause(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\t/*", "+\t\t\t\t * Print the method return type", "+\t\t\t\t */", "+\t\t\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\t", "+\t\t\t\tif (returnType != null) {", "+\t\t\t\t\treturnType.traverse(this, methodDeclarationScope);", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Print the method name", "+\t\t\t\t */", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+", "+\t\t\t\t// Format arguments", "+\t\t\t\tformatMethodArguments(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Check for extra dimensions", "+\t\t\t\t */", "+\t\t\t\tint extraDimensions = getDimensions();", "+\t\t\t\tif (extraDimensions != 0) {", "+\t\t\t\t\t for (int i = 0; i < extraDimensions; i++) {", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t\t }", "+\t\t\t\t}", "+", "+\t\t\t\t// Format throws", "+\t\t\t\tformatThrowsClause(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\tok = true;", "+\t\t\t} catch (AlignmentException e) {", "+\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t}", "+\t\t} while (!ok);", "+\t\tthis.scribe.exitAlignment(methodDeclAlignment, true);"]}], "num": 6088}
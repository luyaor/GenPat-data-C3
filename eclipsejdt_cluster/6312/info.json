{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "459c9550d2431d2301efdafad4a3872f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d076b3c9f6710321eb65cc7646d6e0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " \tpublic void test0237() throws JavaModelException", "signatureAfterChange": " \tpublic void test0237() throws JavaModelException", "diff": ["-\t\tassertEquals(\"wrong size\", 1, methodBindings.length);", "-\t\tassertFalse(\"Method is not the method foo\", \"foo\".equals(methodBindings[0].getName()));", "-\t\tassertNotNull(\"No return type\", methodBindings[0].getReturnType());", "+\t\tassertEquals(\"wrong size\", 2, methodBindings.length);", "+\t\tassertEquals(\"Ltest0237/X;.()V\", methodBindings[0].getKey());", "+\t\tassertEquals(\"Ltest0237/X;.foo()LZork;\", methodBindings[1].getKey());", "+\t\tassertFalse(\"#foo() should not be flagged as recovered\", methodBindings[1].isRecovered());", "+\t\tassertTrue(\"Zork should be flagged as recovered\", methodBindings[1].getReturnType().isRecovered());\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c77c43eddf93b5423729fe23d396ccda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void test0095() throws JavaModelException", "signatureAfterChange": " \tpublic void test0095() throws JavaModelException", "diff": ["-\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "-\t\tassertEquals(", "-\t\t\tnull,", "-\t\t\tbinding);", "+\t\tIMethodBinding methodBinding = ((MethodDeclaration) node).resolveBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tassertEquals(\"LX;.foo<T:Ljava/lang/Object;>(LNonExisting;)V\", methodBinding.getKey());", "+\t\tassertFalse(\"Method should not be flagged as recovered\", methodBinding.isRecovered());", "+\t\tassertTrue(\"Method argument type should be flagged as recovered\", methodBinding.getParameterTypes()[0].isRecovered());\t\t\t\t"]}], "num": 6312}
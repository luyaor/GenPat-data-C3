{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65cfc59176105f075f88e7893659ef5b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ae76745b98722e8c94ead01b7c66658", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\tif (parameterCompatibilityLevel(method, arguments) > NOT_COMPATIBLE)", "+\t\tif (parameterCompatibilityLevel(method, arguments) > NOT_COMPATIBLE) {", "+\t\t\tif ((method.tagBits & TagBits.AnnotationPolymorphicSignature) != 0) {", "+\t\t\t\t// generate polymorphic method", "+\t\t\t\treturn this.environment().createPolymorphicMethod(method, arguments);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f48fb0cdd6ea95962ea3b84f71e971", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "166bb18dfc5a3ebc7bd8aa135b74b0c874fa431d", "commitAfterChange": "93f7bdc9db07b3d133a0d0cb74ca50592e6517b1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t\t\t\t// computeCompatibleMethod(..) will return a PolymorphicMethodBinding if needed", "+\t\t\t\t} else if ((exactMethod.tagBits & TagBits.AnnotationPolymorphicSignature) != 0) {", "+\t\t\t\t\t// generate polymorphic method", "+\t\t\t\t\treturn this.environment().createPolymorphicMethod(exactMethod, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b477ce552d31cb0e8e8da38747fec5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "77c4fc99b77799252d5be9c7606ffbaa714b3d5d", "commitAfterChange": "28af1b381fbe3ba1e0381f77621ff65d497927e0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t\t\t\t// computeCompatibleMethod(..) will return a PolymorphicMethodBinding if needed", "+\t\t\t\t} else if ((exactMethod.tagBits & TagBits.AnnotationPolymorphicSignature) != 0) {", "+\t\t\t\t\t// generate polymorphic method", "+\t\t\t\t\treturn this.environment().createPolymorphicMethod(exactMethod, argumentTypes);"]}], "num": 62845}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ea20106312c696fc29e7377fbc7f95f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87dcd88072f32d0783cbc9bd3c7aa2a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "183f54b68364b226246fe663acdbcbf6f6f1dd9e", "commitAfterChange": "42389b5a6a8ef8c4646bcecf0b3ebcc0d07e69ed", "methodNumberBeforeChange": 409, "methodNumberAfterChange": 410, "signatureBeforeChange": " \tpublic void test407()", "signatureAfterChange": " \tpublic void test408()", "diff": ["-\t// 78008", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.*;\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"    public Integer[] getTypes() {\\n\" + ", "-\t\t\t\t\"        List<Integer> list = new ArrayList<Integer>();\\n\" + ", "-\t\t\t\t\"        return list == null \\n\" + ", "-\t\t\t\t\"            ? new Integer[0] \\n\" + ", "-\t\t\t\t\"            : list.toArray(new Integer[list.size()]);\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"        Class clazz = null;\\n\" + ", "-\t\t\t\t\"        try {\\n\" + ", "-\t\t\t\t\"            clazz = Class.forName(\\\"X\\\");\\n\" + ", "-\t\t\t\t\"\t\t\t System.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\t\t\"        } catch (Throwable e) {\\n\" + ", "-\t\t\t\t\"            e.printStackTrace();\\n\" + ", "-\t\t\t\t\"        }\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t},", "-\t\t\t\"SUCCESS\");\t", "-\t}\t\t\t", "+\t// 78008", "+\tpublic void test408() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.*;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"    public Integer[] getTypes() {\\n\" + ", "+\t\t\t\t\"        List<Integer> list = new ArrayList<Integer>();\\n\" + ", "+\t\t\t\t\"        return list == null \\n\" + ", "+\t\t\t\t\"            ? new Integer[0] \\n\" + ", "+\t\t\t\t\"            : list.toArray(new Integer[list.size()]);\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"        Class clazz = null;\\n\" + ", "+\t\t\t\t\"        try {\\n\" + ", "+\t\t\t\t\"            clazz = Class.forName(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"    \t     System.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"        } catch (Throwable e) {\\n\" + ", "+\t\t\t\t\"            e.printStackTrace();\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"SUCCESS\");\t", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdf21a7fec1f72191ccb0c46e89e92dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "a61562d7e56bcf68476db5393ae43445e5aee116", "commitAfterChange": "73e230db98e1a65780b6160021e4c8063d2276e3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\t\"Y.java\",", "-\t\t\t\"class X<T extends Object> {\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"public class Y<V extends String> extends X<V> {\\n\" +", "-\t\t\t\"  public static <W extends String> Y<W> make(Class<W> clazz) {\\n\" +", "-\t\t\t\"    System.out.print(true);\\n\" +", "-\t\t\t\"    return new Y<W>();\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"  public static <U extends Object> X<U> make(Class<U> clazz) {\\n\" +", "-\t\t\t\"    System.out.print(false);\\n\" +", "-\t\t\t\"    return new X<U>();\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"  public static void main(String[] args) throws Exception {\\n\" +", "-\t\t\t\"    Y.make(getClazz());\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"  public static Class getClazz() {\\n\" +", "-\t\t\t\"    return String.class;\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"}\"", "-\t\t},", "-\t\t\"true\");", "+\t\t// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6182950", "+\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"Y.java\",", "+\t\t\t\t\"class X<T extends Object> {\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"public class Y<V extends String> extends X<V> {\\n\" +", "+\t\t\t\t\"  public static <W extends String> Y<W> make(Class<W> clazz) {\\n\" +", "+\t\t\t\t\"    System.out.print(true);\\n\" +", "+\t\t\t\t\"    return new Y<W>();\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static <U extends Object> X<U> make(Class<U> clazz) {\\n\" +", "+\t\t\t\t\"    System.out.print(false);\\n\" +", "+\t\t\t\t\"    return new X<U>();\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static void main(String[] args) throws Exception {\\n\" +", "+\t\t\t\t\"    Y.make(getClazz());\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static Class getClazz() {\\n\" +", "+\t\t\t\t\"    return String.class;\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"true\");"]}], "num": 22220}
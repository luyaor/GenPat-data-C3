{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd0a8ad809a596363047c3fcdde48bb5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb8ed1589fc4a6f388d5ea6624798ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "269987b22b1df921e21c67a56b711a3bfe74424a", "commitAfterChange": "5ccb7b97d272a881f0a05817c513091dfe86591d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void testPackageFragmentRootRawEntry() throws CoreException", "signatureAfterChange": " public void testPackageFragmentRootRawEntry() throws CoreException, IOException", "diff": ["-public void testPackageFragmentRootRawEntry() throws CoreException {", "+public void testPackageFragmentRootRawEntry() throws CoreException, IOException {", "+\tFile libDir = null;", "-\t\tJavaCore.setClasspathVariable(\"MyVar\", new Path(\"/P/lib\"), null);", "+\t\tString libPath = EXTERNAL_JAR_DIR_PATH + File.separator + \"lib\";", "+\t\tJavaCore.setClasspathVariable(\"MyVar\", new Path(libPath), null);", "-\t\tthis.createFolder(\"/P/lib\");", "-\t\tfinal int length = 500;", "+\t\tlibDir = new File(libPath);", "+\t\tlibDir.mkdirs();", "+\t\tfinal int length = 200;", "-\t\t\tthis.createFile(\"/P/lib/lib\"+i+\".jar\", \"\");", "+\t\t\tFile libJar = new File(libDir, \"lib\"+i+\".jar\");", "+\t\t\tlibJar.createNewFile();", "+\t\tif (libDir != null) {", "+\t\t\tString[] libJars = libDir.list();", "+\t\t\tif (libJars != null) {", "+\t\t\t\tfor (int i = 0, length = libJars.length; i < length; i++) {", "+\t\t\t\t\tnew File(libDir, libJars[i]).delete();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlibDir.delete();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50f64de25be610d9ba8882bd5587f4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t// Expected types for javadoc", "+\t\t} else if (parent instanceof Javadoc) {", "+\t\t\tif (scope.kind == Scope.METHOD_SCOPE) {", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "+\t\t\t\tAbstractMethodDeclaration methodDecl = methodScope.referenceMethod();", "+\t\t\t\tif (methodDecl != null && methodDecl.binding != null) {", "+\t\t\t\t\tReferenceBinding[] exceptions = methodDecl.binding.thrownExceptions;", "+\t\t\t\t\tif (exceptions != null) {", "+\t\t\t\t\t\tfor (int i = 0; i < exceptions.length; i++) {", "+\t\t\t\t\t\t\taddExpectedType(exceptions[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 58496}
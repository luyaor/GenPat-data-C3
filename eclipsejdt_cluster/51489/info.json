{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65b159ec96796f7064510d65a0252976", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85704ad57451a0264ff13d364f3c68f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["-\t\tflushAnnotationsDefinedPriorTo(endStatementPosition); // discard obsolete comments", "+\t\tflushAnnotationsDefinedPriorTo(endStatementPosition); // discard obsolete comments during recovery", "-\tboolean deprecated = false;", "-\tboolean checkDeprecated = false;", "-\tint lastAnnotationIndex = -1;", "-", "-\t//since jdk1.2 look only in the last java doc comment...", "-\tnextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){", "-\t\t//look for @deprecated into the first javadoc comment preceeding the declaration", "-\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "-\t\t// javadoc only (non javadoc comment have negative end positions.)", "-\t\tif (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {", "-\t\t\tcontinue nextComment;", "+\t", "+\tint lastComment = this.scanner.commentPtr;", "+\t", "+\tif (this.modifiersSourceStart >= 0) {", "+\t\t// eliminate comments located after modifierSourceStart if positionned", "+\t\twhile (lastComment >= 0 && this.scanner.commentStarts[lastComment] > modifiersSourceStart) lastComment--;", "+\t}", "+\tif (lastComment >= 0) {", "+\t\t// consider all remaining leading comments to be part of current declaration", "+\t\tthis.modifiersSourceStart = scanner.commentStarts[0]; ", "+\t", "+\t\t// check deprecation in last comment if javadoc \t", "+\t\tif (this.scanner.commentStops[lastComment] > 0) { \t// non javadoc comment have negative end positions", "+\t\t\tif (checkDeprecation(", "+\t\t\t\t\tthis.scanner.commentStarts[lastComment],", "+\t\t\t\t\tthis.scanner.commentStops[lastComment] - 1, //stop is one over,", "+\t\t\t\t\tthis.scanner.source)) {", "+\t\t\t\tcheckAndSetModifiers(AccDeprecated);", "+\t\t\t}", "-\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "-\t\t\tcontinue nextComment;", "-\t\t}", "-\t\tcheckDeprecated = true;", "-\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over", "-\t\tchar[] comment = scanner.source;", "-", "-\t\tdeprecated =", "-\t\t\tcheckDeprecation(", "-\t\t\t\tcommentSourceStart,", "-\t\t\t\tcommentSourceEnd,", "-\t\t\t\tcomment);", "-\t\tbreak nextComment;", "-\t}", "-\tif (deprecated) {", "-\t\tcheckAndSetModifiers(AccDeprecated);", "-\t}", "-\t// modify the modifier source start to point at the first comment", "-\tif (lastAnnotationIndex >= 0 && checkDeprecated) {", "-\t\tmodifiersSourceStart = scanner.commentStarts[lastAnnotationIndex]; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0cb7d5ee68796cd1dc83e7d576c9be0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a2c7422a98f9fe97d80f79f81662377c27d5775b", "commitAfterChange": "dc94927bfc82d6d86b8d7e3196266d1ecd1abb77", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\tsuper.checkComment();", "+\t// discard obsolete comments while inside methods or fields initializer (see bug 74369)", "+\tif (!(this.diet && this.dietInt==0) && this.scanner.commentPtr >= 0) {", "+\t\tflushCommentsDefinedPriorTo(this.endStatementPosition);", "+\t}", "+\t", "+\tint lastComment = this.scanner.commentPtr;", "+\t", "+\tif (this.modifiersSourceStart >= 0) {", "+\t\t// eliminate comments located after modifierSourceStart if positionned", "+\t\twhile (lastComment >= 0 && Math.abs(this.scanner.commentStarts[lastComment]) > this.modifiersSourceStart) lastComment--;", "+\t}", "+\tif (lastComment >= 0) {", "+\t\t// consider all remaining leading comments to be part of current declaration", "+\t\tthis.modifiersSourceStart = Math.abs(this.scanner.commentStarts[0]); ", "+\t", "+\t\t// check deprecation in last comment if javadoc (can be followed by non-javadoc comments which are simply ignored)\t", "+\t\twhile (lastComment >= 0 && this.scanner.commentStops[lastComment] < 0) lastComment--; // non javadoc comment have negative end positions", "+\t\tif (lastComment >= 0 && this.javadocParser != null) {", "+\t\t\tint commentEnd = this.scanner.commentStops[lastComment] - 1; //stop is one over,", "+\t\t\t// do not report problem before last parsed comment while recovering code...", "+\t\t\tthis.javadocParser.reportProblems = this.currentElement == null || commentEnd > this.lastJavadocEnd;", "+\t\t\tif (this.javadocParser.checkDeprecation(lastComment)) {", "+\t\t\t\tcheckAndSetModifiers(ClassFileConstants.AccDeprecated);", "+\t\t\t}", "+\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated", "+\t\t\tif (currentElement == null) this.lastJavadocEnd = commentEnd;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f60e8b9a49d5979b7cfce709fb35bf5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "699215793f6c771df4f6c05d0fd6d408e6e8ea25", "commitAfterChange": "7c75b71dc761335a5b43def3cb4225bee0fd73f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t// discard obsolete comments while inside methods or fields initializer (see bug 74369)", "-\tif (!(this.diet && this.dietInt==0) && this.scanner.commentPtr >= 0) {", "-\t\tflushCommentsDefinedPriorTo(this.endStatementPosition);", "-\t}", "-\t", "-\tint lastComment = this.scanner.commentPtr;", "-\t", "-\tif (this.modifiersSourceStart >= 0) {", "-\t\t// eliminate comments located after modifierSourceStart if positionned", "-\t\twhile (lastComment >= 0 && Math.abs(this.scanner.commentStarts[lastComment]) > this.modifiersSourceStart) lastComment--;", "-\t}", "-\tif (lastComment >= 0) {", "-\t\t// consider all remaining leading comments to be part of current declaration", "-\t\tthis.modifiersSourceStart = Math.abs(this.scanner.commentStarts[0]); ", "-\t", "-\t\t// check deprecation in last comment if javadoc (can be followed by non-javadoc comments which are simply ignored)\t", "-\t\twhile (lastComment >= 0 && this.scanner.commentStops[lastComment] < 0) lastComment--; // non javadoc comment have negative end positions", "-\t\tif (lastComment >= 0 && this.javadocParser != null) {", "-\t\t\tint commentEnd = this.scanner.commentStops[lastComment] - 1; //stop is one over,", "-\t\t\t// do not report problem before last parsed comment while recovering code...", "-\t\t\tthis.javadocParser.reportProblems = this.currentElement == null || commentEnd > this.lastJavadocEnd;", "-\t\t\tif (this.javadocParser.checkDeprecation(lastComment)) {", "-\t\t\t\tcheckAndSetModifiers(ClassFileConstants.AccDeprecated);", "-\t\t\t}", "-\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated", "-\t\t\tif (currentElement == null) this.lastJavadocEnd = commentEnd;", "-\t\t}", "-\t}", "+\tsuper.checkComment();"]}], "num": 51489}
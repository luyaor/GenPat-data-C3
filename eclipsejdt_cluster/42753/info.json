{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef7a7ec2c0a94631c819ef328bf3e831", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33c2c8bbe131fcd484716d1d3437f779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "fd230c4ee1ceefd6a4812ebc7de0e734ce8df73c", "commitAfterChange": "e752367433ca417806253a6753c55772428a8bf6", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "signatureAfterChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "diff": ["+// A P I", "+\tif(referenceContext instanceof MethodDeclaration) {", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) referenceContext;", "+\t\tif(methodDeclaration.errorInSignature){", "+\t\t\treturn;", "+\t\t}", "+\t}", "-\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, isDietParse, oldFirstToken);", "-\tdiagnoseParser.diagnoseParse();", "+\tint start = scanner.initialPosition;", "+\tint end = scanner.eofPosition <= Integer.MAX_VALUE ? scanner.eofPosition - 1 : scanner.eofPosition;", "+\tif(isDietParse) {", "+\t\tTypeDeclaration[] types = this.compilationUnit.types;", "+\t\t", "+\t\tint[][] intervalToSkip = org.eclipse.jdt.internal.compiler.parser.diagnose.Util.computeDietRange(types);", "+\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end, intervalToSkip[0], intervalToSkip[1], intervalToSkip[2]);", "+\t\tdiagnoseParser.diagnoseParse();", "+\t\t", "+\t\treportSyntaxErrorsForSkippedMethod(types);", "+\t\tscanner.resetTo(start, end);", "+\t} else {", "+\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end);", "+\t\tdiagnoseParser.diagnoseParse();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22555ae1caac46c7d0d15a0dcb32ac0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "63048f05f8ad7ef929a641d2f1b8bb0eaa24f28d", "commitAfterChange": "0aa7dea4bc76da1cfdaf2ad3978817e9aac1014f", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 143, "signatureBeforeChange": " \t\t \t\tprotected void updateIndent(int prevMark, int originalOffset, int nodeIndex, TextEditGroup editGroup)", "signatureAfterChange": " \t\t \t\tprotected void updateIndent(int prevMark, int originalOffset, int nodeIndex, TextEditGroup editGroup)", "diff": ["+\t\t\t// Do not change indent if the previous non removed node is on the same line", "+\t\t\tint previousNonRemovedNodeIndex = nodeIndex - 1;", "+\t\t\twhile (previousNonRemovedNodeIndex >= 0 && this.list[previousNonRemovedNodeIndex].getChangeKind() == RewriteEvent.REMOVED) {", "+\t\t\t\tpreviousNonRemovedNodeIndex--;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (previousNonRemovedNodeIndex > -1) {", "+\t\t\t\tLineInformation lineInformation = getLineInformation();", "+\t\t\t\t", "+\t\t\t\tRewriteEvent prevEvent = this.list[previousNonRemovedNodeIndex];", "+\t\t\t\tint prevKind = prevEvent.getChangeKind();", "+\t\t\t\tif (prevKind == RewriteEvent.UNCHANGED || prevKind == RewriteEvent.REPLACED) {", "+\t\t\t\t\tASTNode prevNode = (ASTNode) this.list[previousNonRemovedNodeIndex].getOriginalValue();", "+\t\t\t\t\tint prevEndPosition = prevNode.getStartPosition() + prevNode.getLength();", "+\t\t\t\t\tint prevLine = lineInformation.getLineOfOffset(prevEndPosition);", "+\t\t\t\t\tint line = lineInformation.getLineOfOffset(originalOffset);", "+\t\t\t\t\t", "+\t\t\t\t\tif (prevLine == line) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}], "num": 42753}
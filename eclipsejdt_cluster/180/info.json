{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76271000ab4f5028b9b416949f9ed6c1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e9f2237c4171b1c176d692f2dc7bfc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (compilerOptions.complianceLevel <= ClassFileConstants.JDK1_6", "+\t\t\t&& this.binding.isPolymorphic()) {", "+\t\tscope.problemReporter().polymorphicMethodNotBelow17(this);", "+\t\treturn null;", "+\t}", "+", "+\tif (((this.bits & ASTNode.InsideExpressionStatement) != 0)", "+\t\t\t&& this.binding.isPolymorphic()) {", "+\t\t// we only set the return type to be void if this method invocation is used inside an expression statement", "+\t\tthis.binding = scope.environment().updatePolymorphicMethodReturnType((PolymorphicMethodBinding) this.binding, TypeBinding.VOID);", "+\t}", "-\tfinal CompilerOptions compilerOptions = scope.compilerOptions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c460eb7147e2b78e949f740e401ba5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "76a2ec884825e9edb380555c61500f23750ece32", "commitAfterChange": "0dc9f4a7cc769fd0c2e397d6cc32c352b61f03b4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\tif (this.typeArguments != null && this.binding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this.binding, this.genericTypeArguments, this.typeArguments);", "+\t\t\t\t}\t\t\t\t", "+\t\tif (this.typeArguments != null && inheritedBinding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(inheritedBinding, this.genericTypeArguments, this.typeArguments);", "+\t\t}\t\t"]}], "num": 180}
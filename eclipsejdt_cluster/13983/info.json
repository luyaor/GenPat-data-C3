{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8194391f9991bc4c3d45dd1f0a5b186f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf160130c5b44a77a1f2a263a885d1f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "3c3434f490300265d1803bf154bf41e9119283a7", "commitAfterChange": "d67f0fa5a702eab1b39fa58dfc152f40cf3c46e2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected void consumeMethodHeaderExtendedDims()", "signatureAfterChange": " protected void consumeMethodHeaderExtendedDims()", "diff": ["-\t\tint baseType;", "-\t\tif ((baseType = identifierLengthStack[identifierLengthPtr + 1]) < 0) {", "-\t\t\t//it was a baseType", "-\t\t\tint sourceStart = returnType.sourceStart;", "-\t\t\tint sourceEnd = returnType.sourceEnd;", "-\t\t\treturnType = TypeReference.baseTypeReference(-baseType, dims);", "-\t\t\treturnType.sourceStart = sourceStart;", "-\t\t\treturnType.sourceEnd = sourceEnd;", "-\t\t\tmd.returnType = returnType;", "-\t\t} else {", "-\t\t\tmd.returnType = this.copyDims(md.returnType, dims);", "-\t\t}", "+\t\tmd.returnType = this.copyDims(returnType, dims);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22fb01dd0498075d54b5ea002964c14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "272d365c8c794b76444b3643d2b9ddaaf32b6191", "commitAfterChange": "6c8b6c70bde19844df9a948acbc4f151c3d9aa74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "diff": ["-\t\t// we accept to report match of static field on static import", "-\t\tint level = resolveLevel(binding);", "-\t\tif (level >= INACCURATE_MATCH) {", "-\t\t\tint accuracy = level == ACCURATE_MATCH", "-\t\t\t\t? SearchMatch.A_ACCURATE", "-\t\t\t\t: SearchMatch.A_INACCURATE;", "-\t\t\tSearchMatch match = locator.newFieldReferenceMatch(locator.createImportHandle(importRef), accuracy, importRef.sourceStart, importRef.sourceEnd-importRef.sourceStart+1, importRef);", "-\t\t\tlocator.report(match);", "-\t\t}", "+\t\tsuper.matchLevelAndReportImportRef(importRef, binding, locator);"]}], "num": 13983}
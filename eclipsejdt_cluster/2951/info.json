{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c70e4b355365fc3e489ff490529c2fc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4338b86b04df6c0df3c0b556f58ee582", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "commitAfterChange": "e6d8789df9b4566a0124edc04d16cdf543582e67", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (compilerOptions.isAnyEnabled(IrritantSet.UNLIKELY_ARGUMENT_TYPE) && this.binding.isValidBinding()) {", "-\t\tTypeBinding[] signatureReplacement = detectAndReplaceDangerousSignature(currentScope);", "-\t\tif (signatureReplacement != null) {", "-\t\t\tint len = this.argumentTypes.length;", "-\t\t\tfor (int i = 0; i < len; i++) {", "-\t\t\t\tTypeBinding expectedArgumentType = signatureReplacement[i];", "-\t\t\t\tTypeBinding argumentType = this.argumentTypes[i];", "-\t\t\t\tif (argumentType.isBaseType())", "-\t\t\t\t\targumentType = currentScope.boxing(argumentType);", "-\t\t\t\tif (!argumentType.isCompatibleWith(expectedArgumentType, currentScope)) {", "-\t\t\t\t\tboolean castable = checkCastTypesCompatibility(currentScope, expectedArgumentType, argumentType, this.arguments[i]);", "-\t\t\t\t\tcurrentScope.problemReporter().discouragedInvocationIncompatibleArgument(this.binding, this.arguments[i],", "-\t\t\t\t\t\t\t\texpectedArgumentType, signatureReplacement[len], castable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8a2fb4383157f20b968a02d5664a2f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "14d447e9b3a680ded3744f07910de88768216ea3", "commitAfterChange": "689526016f6ab442680e718d2760fc44e79dd9b5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (compilerOptions.isAnyEnabled(IrritantSet.UNLIKELY_ARGUMENT_TYPE) && this.binding.isValidBinding()) {", "+\t\tTypeBinding[] signatureReplacement = detectAndReplaceDangerousSignature(currentScope);", "+\t\tif (signatureReplacement != null) {", "+\t\t\tint len = this.argumentTypes.length;", "+\t\t\tfor (int i = 0; i < len; i++) {", "+\t\t\t\tTypeBinding expectedArgumentType = signatureReplacement[i];", "+\t\t\t\tTypeBinding argumentType = this.argumentTypes[i];", "+\t\t\t\tif (argumentType.isBaseType())", "+\t\t\t\t\targumentType = currentScope.boxing(argumentType);", "+\t\t\t\tif (!argumentType.isCompatibleWith(expectedArgumentType, currentScope)) {", "+\t\t\t\t\tboolean castable = checkCastTypesCompatibility(currentScope, expectedArgumentType, argumentType, this.arguments[i]);", "+\t\t\t\t\tcurrentScope.problemReporter().discouragedInvocationIncompatibleArgument(this.binding, this.arguments[i],", "+\t\t\t\t\t\t\t\texpectedArgumentType, signatureReplacement[len], castable);"]}], "num": 2951}
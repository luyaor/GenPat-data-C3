{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4160a9678551c074cbef71727a5c95aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0495b5a070b3c45fec278aadef4e1a17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tboolean argsContainCast = false; ", "-\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null){", "+\t\t\tExpression argument = arguments[i];", "+\t\t\tif (argument instanceof CastExpression) {", "+\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\targsContainCast = true;", "+\t\t\t}", "+\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\tif (argHasError){", "+\t\tif (argHasError) {", "-\tif (arguments != null)", "-\t\tfor (int i = 0; i < arguments.length; i++)", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < arguments.length; i++) {", "-", "+\t\t}", "+\t\tif (argsContainCast) {", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, this.receiver, (ReferenceBinding)receiverType, binding, this.arguments, argumentTypes, this);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c49ec7775b3bde7ca1d4a6e6a5272cb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "d78b8094daf355f9dfeb37d82fffda46614be5da", "commitAfterChange": "5903b5532387cc7ed73791cbff2d52e4ceee6d52", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void resetEnclosingMethodStaticFlag()", "signatureAfterChange": " public void resetEnclosingMethodStaticFlag()", "diff": ["+ */", "+\tif (methodScope != null) {", "+\t\tif (methodScope.referenceContext instanceof MethodDeclaration) {", "+\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;", "+\t\t\tmethodDeclaration.bits &= ~ASTNode.CanBeStatic;", "+\t\t} else if (methodScope.referenceContext instanceof TypeDeclaration) {", "+\t\t\t// anonymous type, find enclosing method", "+\t\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t\t\tif (methodScope != null && methodScope.referenceContext instanceof MethodDeclaration) {", "+\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;", "+\t\t\t\tmethodDeclaration.bits &= ~ASTNode.CanBeStatic;", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "-\t\tMethodDeclaration methodDeclaration= (MethodDeclaration) methodScope.referenceContext;", "-\t\t\tmethodScope = enclosingClassScope.methodScope();", "-\t\t} else {", "-\t\t\tbreak;"]}], "num": 14328}
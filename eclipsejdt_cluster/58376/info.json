{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ca4c89cdb622e183bcb060e9df631a1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df8c5a0186eabe02dd06a633c2afe495", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic boolean condition18_5_2_bullet_3_3_1(InferenceVariable alpha, TypeBinding targetType)", "signatureAfterChange": " \tpublic boolean condition18_5_2_bullet_3_3_1(InferenceVariable alpha, TypeBinding targetType)", "diff": ["-\t\t\t\t\tif (supers != null && !TypeBinding.equalsEquals(supers[0], supers[1]))", "-\t\t\t\t\t\treturn true;", "+\t\t\t\t\tif (supers != null) {", "+\t\t\t\t\t\t/* HashMap<K#8,V#9> and HashMap<K#8,ArrayList<T>> with an instantiation for V9 = ArrayList<T> already in the ", "+\t\t\t\t\t\t   bound set should not be seen as two different parameterizations of the same generic class or interface.", "+\t\t\t\t\t\t   See https://bugs.eclipse.org/bugs/show_bug.cgi?id=432626 for a test that triggers this condition.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tsupers[0] = applyInstantiations(supers[0]);", "+\t\t\t\t\t\tsupers[1] = applyInstantiations(supers[1]);", "+\t\t\t\t\t\tif (!TypeBinding.equalsEquals(supers[0], supers[1]))", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e19150b1cea905f735cc7480bf5917", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1506469481618d8067bbb63674f18ebbb39136a0", "commitAfterChange": "064fba9c050a78dc20cd8d00c3c9fff7c6c39d29", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+\t\t\t\t\t\t} else if (length == TAG_DOC_ROOT_LENGTH && CharOperation.equals(TAG_DOC_ROOT, tagName)) {", "+\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "+\t\t\t\t\t\t\t// identify @docRoot tag as a base tag that does not expect any argument", "+\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_DOC_ROOT_VALUE;", "+\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "-\t\t\t\t\t\t\t// no argument expected for @inheritedDoc", "+\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "+\t\t\t\t\t\t\t// no argument expected for @inheritedDoc tag", "+\t\t\t\t\t\t\talreadyParsedTag = true;"]}], "num": 58376}
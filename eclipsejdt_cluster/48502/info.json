{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f1319d9158405a24a06618b81a0c29e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb0d7a60a0952601899fc118ae436e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a52f17f8883dd812875c341ff752527a9011d961", "commitAfterChange": "b79c86afbec252e4061e220059353bed4588479c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t\tif (invocationSite instanceof ReferenceExpression)", "-\t\t\t\t\t((ReferenceExpression) invocationSite).inferenceKind = infCtx18.inferenceKind;", "+\t\t\t\t\telse if (invocationSite instanceof ReferenceExpression)", "+\t\t\t\t\t\t((ReferenceExpression) invocationSite).registerInferenceContext(methodSubstitute, infCtx18); // keep context so we can finish later"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece71cfe6e7a54252465a11d30a39b30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, \t\t\tInvocationSite invocationSite, int inferenceLevel)", "signatureAfterChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, \t\t\tInvocationSite invocationSite, int inferenceLevel)", "diff": ["+\t\t\t\tif (infCtx18 == null)", "+\t\t\t\t\treturn originalMethod;", "+\t\t\t\t\t\t\tif (invocationSite instanceof ReferenceExpression)", "+\t\t\t\t\t\t\t\t((ReferenceExpression) invocationSite).inferenceKind = infCtx18.inferenceKind;", "-\t\t\t\t\t\t\t\treturn methodSubstitute.boundCheck18(scope, arguments);", "+\t\t\t\t\t\t\t\tMethodBinding problemMethod = methodSubstitute.boundCheck18(scope, arguments);", "+\t\t\t\t\t\t\t\tif (problemMethod != null)", "+\t\t\t\t\t\t\t\t\treturn problemMethod;", "-\t\t\t\t\t\t\t\treturn methodSubstitute;", "+\t\t\t\t\t\t\treturn methodSubstitute;"]}], "num": 48502}
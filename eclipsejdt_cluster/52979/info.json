{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3c9c2f72ca3c600c2e507118f0c23fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da2785a587bcc2dcc14671841a89967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/APIDocumentationTests.java", "commitBeforeChange": "9892e22e3cda97844e8704bc9ff3072e4e043b62", "commitAfterChange": "fe412add93d4cfbb83d610f46ca1de0e6d064ca7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "signatureAfterChange": " public void testJavaCoreAPI() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "diff": ["-public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException {", "+public void testJavaCoreAPI() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException {", "+", "+", "+\t// 1. attempt: workspace relative location in project org.eclipse.jdt.core:", "-System.err.println(\"Bundle URL = \"+url);", "-System.err.println(\"Bundle path = \"+path);", "-\tpath = path.removeLastSegments(1).append(\"org.eclipse.jdt.core\");", "-System.err.println(\"jdt.core path = \"+path);", "-\tString stringPath = path.toString() + \"/model/org/eclipse/jdt/core/JavaCore.java\"; ", "+\tpath = path.removeLastSegments(1).append(ORG_ECLIPSE_JDT_CORE);", "+\tString stringPath = path.toString() + \"/model/\" + PATH_JAVA_CORE_JAVA; ", "-System.err.println(\"JavaCore.java = \"+javaCoreSourceFile+\" exists? \"+javaCoreSourceFile.exists());", "-\t\tsourceChars = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(javaCoreSourceFile, null);", "+\t\tsourceChars = Util.getFileCharContent(javaCoreSourceFile, null);", "-\t\t// experimental Q&D tweak: try to find the source bundle by manipulating the file name of the regular bundle's location:", "-\t\t@SuppressWarnings(\"deprecation\")Bundle[] sourceBundles = org.eclipse.jdt.core.tests.Activator.getPackageAdmin().getBundles(\"org.eclipse.jdt.core\", null);", "+\t\t// 2. attempt: locate org.eclipse.jdt.core.source jar next to org.eclipse.jdt.core jar:", "+\t\t@SuppressWarnings(\"deprecation\")Bundle[] sourceBundles =", "+\t\t\t\torg.eclipse.jdt.core.tests.Activator.getPackageAdmin().getBundles(ORG_ECLIPSE_JDT_CORE, null);", "-System.err.println(\"Source Bundle = \"+bundle);", "-System.err.println(\"Bundle Location = \"+stringPath);", "-\t\t\tif (stringPath.startsWith(\"reference:file:\"))", "-\t\t\t\tstringPath = stringPath.substring(\"reference:file:\".length());", "-\t\t\tstringPath = stringPath.replace(\"org.eclipse.jdt.core\", \"org.eclipse.jdt.core.source\");", "-System.err.println(\"Source Bundle Location = \"+stringPath);", "+\t\t\tif (stringPath.startsWith(REFERENCE_FILE_SCHEMA))", "+\t\t\t\tstringPath = stringPath.substring(REFERENCE_FILE_SCHEMA.length());", "+\t\t\tstringPath = stringPath.replace(ORG_ECLIPSE_JDT_CORE, ORG_ECLIPSE_JDT_CORE_SOURCE);", "-System.err.println(\"Jar File = \"+jarFile+\" exists? \"+jarFile.exists());", "-\t\t\t\t\tZipEntry entry = zipFile.getEntry(\"org/eclipse/jdt/core/JavaCore.java\");", "-System.err.println(\"Zip Entry = \"+entry);", "-System.err.println(\"Zip Entry Size = \"+entry.getSize());", "+\t\t\t\t\tZipEntry entry = zipFile.getEntry(PATH_JAVA_CORE_JAVA);", "-\t\t\t\t\t\tsourceChars = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(inputStream, (int)entry.getSize(), null);", "+\t\t\t\t\t\tsourceChars = Util.getInputStreamAsCharArray(inputStream, (int)entry.getSize(), null);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6640bf3a9de8ae240dd2434302893cbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/APIDocumentationTests.java", "commitBeforeChange": "e6318e91d47d996a26fddc5c2b231b9a9ef774b2", "commitAfterChange": "f2edf9ba686cfe4ee8301f7995d717a549acb9e1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "signatureAfterChange": " public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "diff": ["-System.err.println(\"JavaCore.java = \"+javaCoreSourceFile+\" exists?\"+javaCoreSourceFile.exists());", "+System.err.println(\"JavaCore.java = \"+javaCoreSourceFile+\" exists? \"+javaCoreSourceFile.exists());", "+\tchar[] sourceChars = null;", "+\t\tsourceChars = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(javaCoreSourceFile, null);", "+\t} else {", "+\t\t// experimental Q&D tweak: try to find the source bundle by manipulating the file name of the regular bundle's location:", "+\t\t@SuppressWarnings(\"deprecation\")Bundle[] sourceBundles = org.eclipse.jdt.core.tests.Activator.getPackageAdmin().getBundles(\"org.eclipse.jdt.core\", null);", "+\t\tif (sourceBundles != null && sourceBundles.length > 0) {", "+\t\t\tbundle = sourceBundles[0];", "+System.err.println(\"Source Bundle = \"+bundle);", "+\t\t\tstringPath = bundle.getLocation();", "+System.err.println(\"Bundle Location = \"+stringPath);", "+\t\t\tif (stringPath.startsWith(\"reference:file:\"))", "+\t\t\t\tstringPath = stringPath.substring(\"reference:file:\".length());", "+\t\t\tstringPath = stringPath.replace(\"org.eclipse.jdt.core\", \"org.eclipse.jdt.core.source\");", "+System.err.println(\"Source Bundle Location = \"+stringPath);", "+\t\t\tif (stringPath.endsWith(\".jar\")) {", "+\t\t\t\tFile jarFile = new File(stringPath);", "+System.err.println(\"Jar File = \"+jarFile+\" exists? \"+jarFile.exists());", "+\t\t\t\ttry (ZipFile zipFile = new ZipFile(jarFile)) {", "+\t\t\t\t\tZipEntry entry = zipFile.getEntry(\"org/eclipse/jdt/core/JavaCore.java\");", "+System.err.println(\"Zip Entry = \"+entry);", "+System.err.println(\"Zip Entry Size = \"+entry.getSize());", "+\t\t\t\t\ttry (InputStream inputStream = zipFile.getInputStream(entry)) {", "+\t\t\t\t\t\tsourceChars = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(inputStream, (int)entry.getSize(), null);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (sourceChars != null) {", "-\t\tparser.setSource(org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(javaCoreSourceFile, null));", "+\t\tparser.setSource(sourceChars);"]}], "num": 52979}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6554e242134855cdb50e9c8a84c64e12", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ce99e6f4fc4256e2b5e428b4836c4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "commitAfterChange": "2bb908fe4c4bec3f1e5a84b7bbc8c64b4eaa7704", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["+\t\t\tProcessorEnvImpl env,", "-\t\t\tif( contentsDiffer )", "+\t\t\tif( contentsDiffer ){", "+\t\t\t}", "-\t\t\tif( unit == null ) {", "+\t\t\tif( unit == null ) {\t\t\t\t", "+\t\t\t\tif( contentsDiffer ){\t\t", "+\t\t\t\t\t// make sure the change is commited to disk. ", "+\t\t\t\t\tif( unit.isWorkingCopy() )\t\t\t", "+\t\t\t\t\t\tunit.commitWorkingCopy(true, progressMonitor);\t\t\t", "+\t\t\t\t\telse\t\t\t", "+\t\t\t\t\t\tunit.save(progressMonitor, true);", "+\t\t\t\t}", "-\t\t\t\tif( parentFile != null )", "+\t\t\t\tif( parentFile != null ){", "+\t\t\t\t\t// generating self with the same contents. No-op.", "+\t\t\t\t\t// Will return null to avoid spining. Buzilla #110888 ", "+\t\t\t\t\tif( parentFile.equals(file) && !contentsDiffer )", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t", "+\t\t\t\t}", "+\t\t\te.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29a326b6e89a9aecc5fe378873701fa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 227, "signatureBeforeChange": "  \tprotected void setUpProjectCompliance(IJavaProject javaProject, String compliance) throws JavaModelException, IOException", "signatureAfterChange": " \tprotected void setUpProjectCompliance(IJavaProject javaProject, String compliance, boolean useFullJCL) throws JavaModelException, IOException", "diff": ["-", "+\t}", "+\tprotected void setUpProjectCompliance(IJavaProject javaProject, String compliance, boolean useFullJCL) throws JavaModelException, IOException {", "-\t\tsetUpJCLClasspathVariables(compliance);", "+\t\tsetUpJCLClasspathVariables(compliance, useFullJCL);", "-\t\t\tif (path.equals(jclLib) || (compliance18Plus && path.equals(jcl5Lib)) || (!compliance18Plus && path.equals(jcl8Lib))) {", "+\t\t\tif (useFullJCL) {", "-\t\t\t\t\t\tnew Path(newJclLibString),", "+\t\t\t\t\t\tnew Path(\"JCL18_FULL\"),", "+\t\t\t} else if (path.equals(jclLib) || (compliance18Plus && path.equals(jcl5Lib)) || (!compliance18Plus && path.equals(jcl8Lib))) {", "+\t\t\t\t\tclasspath[i] = JavaCore.newVariableEntry(", "+\t\t\t\t\t\t\tnew Path(newJclLibString),", "+\t\t\t\t\t\t\tnew Path(newJclSrcString),", "+\t\t\t\t\t\t\tentry.getSourceAttachmentRootPath(),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tnew IClasspathAttribute[0],", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a94fcc8929487457a18a64584c09268e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 438, "signatureBeforeChange": " private String typesAsString(MethodBinding methodBinding, TypeBinding[] parameters, boolean makeShort)", "signatureAfterChange": " private String typesAsString(MethodBinding methodBinding, TypeBinding[] parameters, boolean makeShort, boolean showNullAnnotations)", "diff": ["+}", "+private String typesAsString(MethodBinding methodBinding, TypeBinding[] parameters, boolean makeShort, boolean showNullAnnotations) {", "-\t\t\tbuffer.append(new String(makeShort ? type.shortReadableName() : type.readableName()));", "+\t\t\tif (showNullAnnotations)", "+\t\t\t\tbuffer.append(new String(type.nullAnnotatedReadableName(this.options, makeShort)));", "+\t\t\telse", "+\t\t\t\tbuffer.append(new String(makeShort ? type.shortReadableName() : type.readableName()));", "-\t\tbuffer.append(new String(makeShort ? type.shortReadableName() : type.readableName()));", "+\t\tif (showNullAnnotations)", "+\t\t\tbuffer.append(new String(type.nullAnnotatedReadableName(this.options, makeShort)));", "+\t\telse", "+\t\t\tbuffer.append(new String(makeShort ? type.shortReadableName() : type.readableName()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0e7fbb21b9e9ec6db42014812d884d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": " public final char[] signature()", "signatureAfterChange": " public final char[] signature()", "diff": ["-\tboolean considerSynthetics = isConstructorRelated() && declaringClass.isNestedType();", "-\tif (considerSynthetics) {", "-\t\t", "+\tboolean isConstructor = isConstructor();", "+\tif (isConstructor && declaringClass.isEnum()) { // insert String name,int ordinal ", "+\t\tbuffer.append(QualifiedNamesConstants.JavaLangStringSignature);", "+\t\tbuffer.append(BaseTypes.IntBinding.signature());", "+\t}", "+\tboolean needSynthetics = isConstructor && declaringClass.isNestedType();", "+\tif (needSynthetics) {", "-\t\tif (this instanceof SyntheticAccessMethodBinding) {", "-\t\t\ttargetParameters = ((SyntheticAccessMethodBinding)this).targetMethod.parameters;", "+\t\tif (this instanceof SyntheticMethodBinding) {", "+\t\t\ttargetParameters = ((SyntheticMethodBinding)this).targetMethod.parameters;", "-\tif (considerSynthetics) {", "+\tif (needSynthetics) {"]}], "num": 57271}
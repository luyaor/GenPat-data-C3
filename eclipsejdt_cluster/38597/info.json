{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c32b1002d3ec364dfac460221f735843", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26f29471a35a2df21cc2d3e0ac469e43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "6acdb4510909317e02bb4ba566a6d0b5f09916da", "commitAfterChange": "9b7b19bdcdbcea831580c60277f290356f5e2da7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void set(Map optionsMap)", "signatureAfterChange": "  \tpublic void set(Map<String, String> optionsMap)", "diff": ["-\tpublic void set(Map optionsMap) {", "-\t\tObject optionValue;", "+\tpublic void set(Map<String, String> optionsMap) {", "+\t\tString optionValue;", "-\t\t\tif (optionValue instanceof String) {", "-\t\t\t\tthis.defaultEncoding = null;", "-\t\t\t\tString stringValue = (String) optionValue;", "-\t\t\t\tif (stringValue.length() > 0){", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), stringValue);", "-\t\t\t\t\t\tthis.defaultEncoding = stringValue;", "-\t\t\t\t\t} catch(UnsupportedEncodingException e){", "-\t\t\t\t\t\t// ignore unsupported encoding", "-\t\t\t\t\t}", "+\t\t\tthis.defaultEncoding = null;", "+\t\t\tString stringValue = optionValue;", "+\t\t\tif (stringValue.length() > 0){", "+\t\t\t\ttry {", "+\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), stringValue);", "+\t\t\t\t\tthis.defaultEncoding = stringValue;", "+\t\t\t\t} catch(UnsupportedEncodingException e){", "+\t\t\t\t\t// ignore unsupported encoding", "-\t\t\tif (optionValue instanceof String) {", "-\t\t\t\tString stringValue = (String) optionValue;", "-\t\t\t\ttry {", "-\t\t\t\t\tint val = Integer.parseInt(stringValue);", "-\t\t\t\t\tif (val >= 0) this.maxProblemsPerUnit = val;", "-\t\t\t\t} catch(NumberFormatException e){", "-\t\t\t\t\t// ignore ill-formatted limit", "-\t\t\t\t}", "+\t\t\tString stringValue = optionValue;", "+\t\t\ttry {", "+\t\t\t\tint val = Integer.parseInt(stringValue);", "+\t\t\t\tif (val >= 0) this.maxProblemsPerUnit = val;", "+\t\t\t} catch(NumberFormatException e){", "+\t\t\t\t// ignore ill-formatted limit", "-\t\t\tif (optionValue instanceof String) {", "-\t\t\t\tString stringValue = (String) optionValue;", "-\t\t\t\tif (stringValue.length() == 0) {", "-\t\t\t\t\tthis.taskTags = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.taskTags = CharOperation.splitAndTrimOn(',', stringValue.toCharArray());", "-\t\t\t\t}", "+\t\t\tString stringValue = optionValue;", "+\t\t\tif (stringValue.length() == 0) {", "+\t\t\t\tthis.taskTags = null;", "+\t\t\t} else {", "+\t\t\t\tthis.taskTags = CharOperation.splitAndTrimOn(',', stringValue.toCharArray());", "-\t\t\tif (optionValue instanceof String) {", "-\t\t\t\tString stringValue = (String) optionValue;", "-\t\t\t\tif (stringValue.length() == 0) {", "-\t\t\t\t\tthis.taskPriorities = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.taskPriorities = CharOperation.splitAndTrimOn(',', stringValue.toCharArray());", "-\t\t\t\t}", "+\t\t\tString stringValue = optionValue;", "+\t\t\tif (stringValue.length() == 0) {", "+\t\t\t\tthis.taskPriorities = null;", "+\t\t\t} else {", "+\t\t\t\tthis.taskPriorities = CharOperation.splitAndTrimOn(',', stringValue.toCharArray());", "-\t\t\t\tthis.nullableAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t\t\tthis.nullableAnnotationName = CharOperation.splitAndTrimOn('.', optionValue.toCharArray());", "-\t\t\t\tthis.nonNullAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t\t\tthis.nonNullAnnotationName = CharOperation.splitAndTrimOn('.', optionValue.toCharArray());", "-\t\t\t\tthis.nonNullByDefaultAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t\t\tthis.nonNullByDefaultAnnotationName = CharOperation.splitAndTrimOn('.', optionValue.toCharArray());", "-\t\t\tthis.reportMissingJavadocTagDescription = (String) optionValue;", "+\t\t\tthis.reportMissingJavadocTagDescription = optionValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c574d17fa892143c4d6bf2fa837d8e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue)", "signatureAfterChange": " private IAnnotation[] getStandardAnnotations(long tagBits)", "diff": ["-protected Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue) {", "-\tif (binaryValue instanceof Constant) {", "-\t\treturn Util.getAnnotationMemberValue(memberValuePair, (Constant) binaryValue);", "-\t} else if (binaryValue instanceof IBinaryAnnotation) {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_ANNOTATION;", "-\t\treturn getAnnotation((IBinaryAnnotation) binaryValue);", "-\t} else if (binaryValue instanceof ClassSignature) {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_CLASS;", "-\t\tchar[] className = Signature.toCharArray(CharOperation.replaceOnCopy(((ClassSignature) binaryValue).getTypeName(), '/', '.'));", "-\t\treturn new String(className);", "-\t} else if (binaryValue instanceof EnumConstantSignature) {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_QUALIFIED_NAME;", "-\t\tEnumConstantSignature enumConstant = (EnumConstantSignature) binaryValue;", "-\t\tchar[] enumName = Signature.toCharArray(CharOperation.replaceOnCopy(enumConstant.getTypeName(), '/', '.'));", "-\t\tchar[] qualifiedName = CharOperation.concat(enumName, enumConstant.getEnumConstantName(), '.');", "-\t\treturn new String(qualifiedName);", "-\t} else if (binaryValue instanceof Object[]) {", "-\t\tmemberValuePair.valueKind = -1; // modified below by the first call to getMemberValue(...)", "-\t\tObject[] binaryValues = (Object[]) binaryValue;", "-\t\tint length = binaryValues.length;", "-\t\tObject[] values = new Object[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tint previousValueKind = memberValuePair.valueKind;", "-\t\t\tObject value = getMemberValue(memberValuePair, binaryValues[i]);", "-\t\t\tif (previousValueKind != -1 && memberValuePair.valueKind != previousValueKind) {", "-\t\t\t\t// values are heterogeneous, value kind is thus unknown", "-\t\t\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "-\t\t\t}", "-\t\t\tvalues[i] = value;", "-\t\t}", "-\t\tif (memberValuePair.valueKind == -1)", "-\t\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "-\t\treturn values;", "-\t} else {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "-\t\treturn null;", "+private IAnnotation[] getStandardAnnotations(long tagBits) {", "+\tif ((tagBits & TagBits.AllStandardAnnotationsMask) == 0)", "+\t\treturn Annotation.NO_ANNOTATIONS;", "+\tArrayList annotations = new ArrayList();", "+", "+\tif ((tagBits & TagBits.AnnotationTargetMASK) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_TARGET));", "+\tif ((tagBits & TagBits.AnnotationRetentionMASK) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_RETENTION));", "+\t}", "+\tif ((tagBits & TagBits.AnnotationDeprecated) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_DEPRECATED));", "+\t}", "+\tif ((tagBits & TagBits.AnnotationDocumented) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED));", "+\t}", "+\tif ((tagBits & TagBits.AnnotationInherited) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED));", "+\t}", "+\t// note that JAVA_LANG_SUPPRESSWARNINGS and JAVA_LANG_OVERRIDE cannot appear in binaries", "+\treturn (IAnnotation[]) annotations.toArray(new IAnnotation[annotations.size()]);"]}], "num": 38597}
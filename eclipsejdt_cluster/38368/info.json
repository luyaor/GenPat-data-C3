{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcf196fbfb896134069098415a4185a4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e85b7944137eb567abe295e872cbf6f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4bfbcab36fb89b16cf210b2b9fb5423da164ca27", "commitAfterChange": "f8d11ef45ee47eccac4f4a1fef52a70287187d6c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void setDeprecatedOptions(Map settings)", "signatureAfterChange": " \tprivate void setDeprecatedOptions(Map settings)", "diff": ["+\t\t", "-\t\tif (insertNewLineAfterAnnotationOption != null) { // check if deprecated 3.1 option was used", "-\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "-\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_parameter = insert;", "-\t\t\tthis.insert_new_line_after_annotation_on_local_variable = insert;", "-\t\t} else {", "-\t\t\tfinal Object insertNewLineAfterAnnotationOnMemberOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER);", "-\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) { // check if deprecated 3.4 option was used", "+\t\t", "+\t\tfinal Object insertNewLineAfterAnnotationOnMemberOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER);", "+\t\tfinal Object insertNewLineAfterAnnotationOnTypeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE);", "+\t\tfinal Object insertNewLineAfterAnnotationOnFieldOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD);", "+\t\tfinal Object insertNewLineAfterAnnotationOnMethodOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD);", "+\t\tfinal Object insertNewLineAfterAnnotationOnPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE);", "+\t\t", "+\t\tfinal Object insertNewLineAfterAnnotationOnParameterOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER);", "+\t\tfinal Object insertNewLineAfterAnnotationOnLocalVariableOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE);", "+", "+\t\tif (insertNewLineAfterAnnotationOnTypeOption == null", "+\t\t\t\t&& insertNewLineAfterAnnotationOnFieldOption == null", "+\t\t\t\t&& insertNewLineAfterAnnotationOnMethodOption == null", "+\t\t\t\t&& insertNewLineAfterAnnotationOnPackageOption == null) {", "+\t\t\t// if none of the new 3.7 options is used, fall back to the deprecated 3.4 option", "+\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) {", "-\t\t\t} else { // otherwise use new options", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnTypeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnTypeOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_type = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnTypeOption);", "+\t\t\t\t", "+\t\t\t\t// and use the other 3.4 options if available", "+\t\t\t\tif (insertNewLineAfterAnnotationOnParameterOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_parameter = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnParameterOption);", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnFieldOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnFieldOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_field = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnFieldOption);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnLocalVariableOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_local_variable = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnLocalVariableOption);", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnMethodOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnMethodOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_method = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMethodOption);", "-\t\t\t\t}", "-\t\t\t\tfinal Object insertNewLineAfterAnnotationOnPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE);", "-\t\t\t\tif (insertNewLineAfterAnnotationOnPackageOption != null) {", "-\t\t\t\t\tthis.insert_new_line_after_annotation_on_package = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnPackageOption);", "+\t\t\t\t", "+\t\t\t} else if (insertNewLineAfterAnnotationOnParameterOption == null", "+\t\t\t\t\t&& insertNewLineAfterAnnotationOnLocalVariableOption == null) {", "+\t\t\t\t// if none of the new 3.4 options is used, fall back to the deprecated 3.1 option", "+\t\t\t\tif (insertNewLineAfterAnnotationOption != null) {", "+\t\t\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_parameter = insert;", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_local_variable = insert;", "-\t\t\tfinal Object insertNewLineAfterAnnotationOnParameterOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER);", "+\t\t} else { // otherwise use new 3.7 options if available", "+\t\t\tif (insertNewLineAfterAnnotationOnTypeOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_type = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnTypeOption);", "+\t\t\t}", "+\t\t\tif (insertNewLineAfterAnnotationOnFieldOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_field = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnFieldOption);", "+\t\t\t}", "+\t\t\tif (insertNewLineAfterAnnotationOnMethodOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_method = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMethodOption);", "+\t\t\t}", "+\t\t\tif (insertNewLineAfterAnnotationOnPackageOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_package = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnPackageOption);", "+\t\t\t}", "+\t\t\t// and the other 3.4 options if available", "-\t\t\tfinal Object insertNewLineAfterAnnotationOnLocalVariableOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87912d489bd2e0172f321334e7c73f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "6e620c90299ecbe2ea4d151a9b603737c382128e", "commitAfterChange": "f78a80d2602a4819c65d70ccd2f80a6802bed489", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\t}", "+\t\tfinal Object convertOldToNewOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_CONVERT_OLD_TO_NEW);", "+\t\tif (convertOldToNewOption != null) {", "+\t\t\tthis.convert_old_to_new = DefaultCodeFormatterConstants.TRUE.equals(convertOldToNewOption);", "-\t\tfinal Object clearBlankLines = settings.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "-\t\tif (clearBlankLines != null) {", "-\t\t\tif (JavaCore.CLEAR_ALL.equals(clearBlankLines)) {", "-\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "-\t\t\t} else if (JavaCore.PRESERVE_ONE.equals(clearBlankLines)) {", "-\t\t\t\tthis.number_of_empty_lines_to_preserve = 1;", "-\t\t\t} else {", "-\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.MAX_VALUE;", "+\t\tif (this.convert_old_to_new) {", "+\t\t\tfinal Object clearBlankLines = settings.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "+\t\t\tif (clearBlankLines != null) {", "+\t\t\t\tif (JavaCore.CLEAR_ALL.equals(clearBlankLines)) {", "+\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "+\t\t\t\t} else if (JavaCore.PRESERVE_ONE.equals(clearBlankLines)) {", "+\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 1;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.MAX_VALUE;", "+\t\t\t\t}", "-\t\t}", "-\t\tfinal Object compactAssignment = settings.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "-\t\tif (compactAssignment != null) {", "-\t\t\tthis.insert_space_before_assignment_operators = JavaCore.NORMAL.equals(compactAssignment);", "-\t\t}", "-\t\tfinal Object newLineOpenBrace = settings.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "-\t\tif(newLineOpenBrace != null){", "-\t\t\tif (JavaCore.INSERT.equals(newLineOpenBrace)) {", "-\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t} else {", "-\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\tfinal Object compactAssignment = settings.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "+\t\t\tif (compactAssignment != null) {", "+\t\t\t\tthis.insert_space_before_assignment_operators = JavaCore.NORMAL.equals(compactAssignment);", "-\t\t}", "-\t\tfinal Object newLineControl = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "-\t\tif (newLineControl != null) {", "-\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(newLineControl);", "-\t\t}", "-\t\tfinal Object newLineElseIf  = settings.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF);", "-\t\tif (newLineElseIf != null) {", "-\t\t\tthis.compact_else_if = JavaCore.DO_NOT_INSERT.equals(newLineElseIf);", "-\t\t}", "-\t\tfinal Object newLineEmptyBlock  = settings.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "-\t\tif (newLineEmptyBlock != null) {", "-\t\t\tif (JavaCore.INSERT.equals(newLineEmptyBlock)) {", "-\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = true;", "-\t\t\t\tthis.insert_new_line_in_empty_type_declaration = true;", "-\t\t\t\tthis.insert_new_line_in_empty_method_body = true;", "-\t\t\t\tthis.insert_new_line_in_empty_block = true;", "-\t\t\t} else {", "-\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = false;", "-\t\t\t\tthis.insert_new_line_in_empty_type_declaration = false;", "-\t\t\t\tthis.insert_new_line_in_empty_method_body = false;", "-\t\t\t\tthis.insert_new_line_in_empty_block = false;", "+\t\t\tfinal Object newLineOpenBrace = settings.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "+\t\t\tif(newLineOpenBrace != null){", "+\t\t\t\tif (JavaCore.INSERT.equals(newLineOpenBrace)) {", "+\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t}", "-\t\t}", "-\t\tfinal Object castExpression = settings.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION);", "-\t\tif (castExpression != null) {", "-\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(castExpression);", "+\t\t\tfinal Object newLineControl = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "+\t\t\tif (newLineControl != null) {", "+\t\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(newLineControl);", "+\t\t\t}", "+\t\t\tfinal Object newLineElseIf  = settings.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF);", "+\t\t\tif (newLineElseIf != null) {", "+\t\t\t\tthis.compact_else_if = JavaCore.DO_NOT_INSERT.equals(newLineElseIf);", "+\t\t\t}", "+\t\t\tfinal Object newLineEmptyBlock  = settings.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "+\t\t\tif (newLineEmptyBlock != null) {", "+\t\t\t\tif (JavaCore.INSERT.equals(newLineEmptyBlock)) {", "+\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = true;", "+\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = true;", "+\t\t\t\t\tthis.insert_new_line_in_empty_method_body = true;", "+\t\t\t\t\tthis.insert_new_line_in_empty_block = true;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = false;", "+\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = false;", "+\t\t\t\t\tthis.insert_new_line_in_empty_method_body = false;", "+\t\t\t\t\tthis.insert_new_line_in_empty_block = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfinal Object castExpression = settings.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION);", "+\t\t\tif (castExpression != null) {", "+\t\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(castExpression);", "+\t\t\t}"]}], "num": 38368}
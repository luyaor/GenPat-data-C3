{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c42462fac9b02086ce9c5a69073105d9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54be163336afdce2f4ed2a0665529a37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "commitAfterChange": "32d18ce9895194535a7aa2bea48bdebf445f909f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": "  \tboolean match(char patternTypeSuffix, int modifiers)", "diff": ["+\tboolean match(char patternTypeSuffix, int modifiers) {", "+\t\tswitch(patternTypeSuffix) {", "+\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "+\t\t\t\treturn (modifiers & (Flags.AccAnnotation | Flags.AccInterface | Flags.AccEnum)) == 0;", "+\t\t\tcase IIndexConstants.CLASS_AND_INTERFACE_SUFFIX:", "+\t\t\t\treturn (modifiers & (Flags.AccAnnotation | Flags.AccEnum)) == 0;", "+\t\t\tcase IIndexConstants.CLASS_AND_ENUM_SUFFIX:", "+\t\t\t\treturn (modifiers & (Flags.AccAnnotation | Flags.AccInterface)) == 0;", "+\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "+\t\t\t\treturn (modifiers & Flags.AccInterface) != 0;", "+\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "+\t\t\t\treturn (modifiers & Flags.AccEnum) != 0;", "+\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "+\t\t\t\treturn (modifiers & Flags.AccAnnotation) != 0;", "+\t\t}", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57edbf901bd0f4316d13ec99f566d1fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 23, "signatureBeforeChange": " public static char[][] getParameterTypes(char[] methodSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getParameterTypes(char[] methodSignature) throws IllegalArgumentException", "diff": ["-\t\tif (count == 0)", "+\t\tif (count == 0) {", "-\t\tint i = CharOperation.indexOf(C_PARAM_START, methodSignature) + 1;", "-\t\tcount = 0;", "-\t\tint start = i;", "+\t\t}", "+\t\tint i = CharOperation.indexOf(C_PARAM_START, methodSignature);", "+\t\tif (i < 0) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t} else {", "+\t\t\ti++;", "+\t\t}", "+\t\tint t = 0;", "-\t\t\tchar c = methodSignature[i++];", "-\t\t\tswitch (c) {", "-\t\t\t\tcase C_ARRAY :", "-\t\t\t\t\t// array depth is i - start;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_BOOLEAN :", "-\t\t\t\tcase C_BYTE :", "-\t\t\t\tcase C_CHAR :", "-\t\t\t\tcase C_DOUBLE :", "-\t\t\t\tcase C_FLOAT :", "-\t\t\t\tcase C_INT :", "-\t\t\t\tcase C_LONG :", "-\t\t\t\tcase C_SHORT :", "-\t\t\t\tcase C_VOID :", "-\t\t\t\t\t// common case of base types", "-\t\t\t\t\tif (i - start == 1) {", "-\t\t\t\t\t\tswitch (c) {", "-\t\t\t\t\t\t\tcase C_BOOLEAN :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_BOOLEAN};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_BYTE :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_BYTE};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_CHAR :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_CHAR};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_DOUBLE :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_DOUBLE};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_FLOAT :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_FLOAT};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_INT :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_INT};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_LONG :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_LONG};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_SHORT :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_SHORT};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase C_VOID :", "-\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_VOID};", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tresult[count++] = CharOperation.subarray(methodSignature, start, i);", "-\t\t\t\t\t}", "-\t\t\t\t\tstart = i;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_TYPE_VARIABLE :", "-\t\t\t\tcase C_RESOLVED :", "-\t\t\t\tcase C_UNRESOLVED :", "-\t\t\t\t\t// TODO (jeem) - rework to handle type arguments like QList<QString;>;", "-\t\t\t\t\ti = CharOperation.indexOf(C_SEMICOLON, methodSignature, i) + 1;", "-\t\t\t\t\tif (i == 0)", "-\t\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\tresult[count++] = CharOperation.subarray(methodSignature, start, i);", "-\t\t\t\t\tstart = i;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_PARAM_END:", "-\t\t\t\t\treturn result;", "-\t\t\t\tdefault :", "-\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\tif (methodSignature[i] == C_PARAM_END) {", "+\t\t\t\treturn result;", "+\t\t\tint e = scanTypeSignature(methodSignature, i);", "+\t\t\tif (e < 0) {", "+\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t}", "+\t\t\tresult[t] = CharOperation.subarray(methodSignature, i, e + 1);", "+\t\t\tt++;", "+\t\t\ti = e + 1;"]}], "num": 45774}
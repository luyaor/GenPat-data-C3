{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef64244a9de25beea8b731e269a24c56", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0266ad1faeb411ebd87cd5b0ea938d85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-\t\tfor (int i = 0; i < argsLength; i++) {", "-\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "+\t\t// Disable filter on argument syntax to allow generic type search.", "+\t\t// (see  bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990)", "+\t\tif (!this.pattern.mustResolveGeneric) {", "+\t\t\tfor (int i = 0; i < argsLength; i++) {", "+\t\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcd8dcdc8b8b05e7caec3dd3ffc0d395", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected int matchMethod(MethodBinding method)", "signatureAfterChange": " protected int matchMethod(MethodBinding method, boolean skipImpossibleArg)", "diff": ["-protected int matchMethod(MethodBinding method) {", "+protected int matchMethod(MethodBinding method, boolean skipImpossibleArg) {", "-//\t\t\t\t\tif (isErasureMatch) {", "-//\t\t\t\t\t\treturn ERASURE_MATCH;", "-//\t\t\t\t\t}", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t\tif (skipImpossibleArg) {", "+\t\t\t\t\t\t// Do not consider match as impossible while finding declarations and source level >= 1.5", "+\t\t\t\t\t \t// (see  bugs https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990, 96761, 96763)", "+\t\t\t\t\t\tnewLevel = level;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t\t}", "-}"]}], "num": 66746}
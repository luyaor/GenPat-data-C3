{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd7bf105f2d1eab8bebc4e64ae659b60", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095593a20d87a15ebac7b6eeeadad510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6c797406271c70e354dc360e4e2b55dc743bf914", "commitAfterChange": "6bb034ac24fec033a91d15d668c7ba33f5039fc9", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["-\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) {", "-\t\treturn;", "-\t}", "-//\tboolean insideDefaultConstructor = ", "-//\t\t(this.referenceContext instanceof ConstructorDeclaration)", "-//\t\t\t&& ((ConstructorDeclaration)this.referenceContext).isDefaultConstructor();", "-//\tboolean insideImplicitConstructorCall =", "-//\t\t(statement instanceof ExplicitConstructorCall)", "-//\t\t\t&& (((ExplicitConstructorCall) statement).accessMode == ExplicitConstructorCall.ImplicitSuper);", "-", "+\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) return;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocUndefinedConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocUndefinedConstructor;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocNotVisibleConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocNotVisibleConstructor;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.AmbiguousConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.AmbiguousConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocAmbiguousConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocAmbiguousConstructor;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a50358d7757958e6d35cd1b74e7e474", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "65cbeb2496deccdd52152aae0a9c394928b06b10", "commitAfterChange": "1f4e18c70ad91633e199bda8d9aad7893b74f3bc", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void indirectAccessToStaticField(QualifiedNameReference qualifiedNameReference, FieldBinding field)", "signatureAfterChange": " public void indirectAccessToStaticField(QualifiedNameReference qualifiedNameReference, FieldBinding field)", "diff": ["-\tif (indexOfFirstFieldBinding >= 1) {", "+\tif (indexOfFirstFieldBinding >= 1)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0019a7a94c1dbdb1f26d3283df5f96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8c12a1560b5b16e626f09d83b170c60e0f7d623a", "commitAfterChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic final boolean isDefinedInType(ReferenceBinding type)", "signatureAfterChange": " \tpublic final boolean isDefinedInType(ReferenceBinding type)", "diff": ["-\t\t\t\tif (((ClassScope) scope).referenceContext.binding == type){", "+\t\t\t\tif (((ClassScope) scope).referenceContext.binding == type)", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71aa71ec47f3f11ac37d97b56e62979e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "26246adf380e69c31de951eed4c0173edaa96dd1", "commitAfterChange": "2c076bc353a2d83c198fbf8764d9fb723677890e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public void cleanup()", "signatureAfterChange": "\r public void cleanup()", "diff": ["+public void cleanup() {\r", "+\tfor (int i = 0, max = classpaths.length; i < max; i++)\r", "+\t\tclasspaths[i].reset();\r", "-\r", "-public void cleanup() {\r", "-\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "-\t\tclasspaths[i].reset();\r", "-\t}\r", "-}\r"]}], "num": 62860}
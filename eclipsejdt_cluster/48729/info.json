{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e11607b80048d67431832e808ba5997", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131b7ac2cb928a09524c83f9c1d52cd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "5053d930a1699a7a249c68442b6dfc52c4208d0b", "commitAfterChange": "a5491224670be0cb02afb8b7794366fa0f54180b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private static SearchPattern createConstructorPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createConstructorPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\t\t\t\tif (parameterTypeQualifications[i].length == 1 && parameterTypeQualifications[i][0] == '*') parameterTypeQualifications[i] = null;\r", "+\t\t\t\tif (parameterTypeQualifications[i].length == 1 && parameterTypeQualifications[i][0] == '*') {\r", "+\t\t\t\t\tparameterTypeQualifications[i] = null;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// prefix with a '*' as the full qualification could be bigger \r", "+\t\t\t\t\t// (i.e. because of an import)\r", "+\t\t\t\t\tparameterTypeQualifications[i] = CharOperation.concat(ONE_STAR, parameterTypeQualifications[i]);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30a79ec0299747911ea6e60a00693d78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "5053d930a1699a7a249c68442b6dfc52c4208d0b", "commitAfterChange": "a5491224670be0cb02afb8b7794366fa0f54180b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\t\t\t\tif (parameterTypeQualifications[i].length == 1 && parameterTypeQualifications[i][0] == '*') parameterTypeQualifications[i] = null;\r", "+\t\t\t\tif (parameterTypeQualifications[i].length == 1 && parameterTypeQualifications[i][0] == '*') {\r", "+\t\t\t\t\tparameterTypeQualifications[i] = null;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// prefix with a '*' as the full qualification could be bigger \r", "+\t\t\t\t\t// (i.e. because of an import)\r", "+\t\t\t\t\tparameterTypeQualifications[i] = CharOperation.concat(ONE_STAR, parameterTypeQualifications[i]);\r", "+\t\t\t\t}\r", "-\t\t\tif (returnTypeQualification.length == 1 && returnTypeQualification[0] == '*') returnTypeQualification = null;\r", "+\t\t\tif (returnTypeQualification.length == 1 && returnTypeQualification[0] == '*') {\r", "+\t\t\t\treturnTypeQualification = null;\r", "+\t\t\t} else {\r", "+\t\t\t\t// (i.e. because of an import)\r", "+\t\t\t\treturnTypeQualification = CharOperation.concat(ONE_STAR, returnTypeQualification);\r", "+\t\t\t}\t\t\t\r"]}], "num": 48729}
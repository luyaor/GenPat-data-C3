{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f13ee76e75ec63b5dc2bf2042abcd228", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e1657ccc2d44712db4438ae31c01c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "signatureAfterChange": " public MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[iarg], argumentTypes[iarg]))", "-\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[iarg], argumentTypes[iarg]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13998c7f8c3dab367394c45ebc56053f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static void checkNeedForEnclosingInstanceCast(BlockScope scope, Expression enclosingInstance, TypeBinding enclosingInstanceType, TypeBinding memberType)", "signatureAfterChange": " public static void checkNeedForEnclosingInstanceCast(BlockScope scope, Expression enclosingInstance, TypeBinding enclosingInstanceType, TypeBinding memberType)", "diff": ["-\tif (castedExpressionType == enclosingInstanceType) {", "+\tif (TypeBinding.equalsEquals(castedExpressionType, enclosingInstanceType)) {", "-\t\tif (memberType == scope.getMemberType(memberType.sourceName(), (ReferenceBinding) alternateEnclosingInstanceType)) {", "+\t\tif (TypeBinding.equalsEquals(memberType, scope.getMemberType(memberType.sourceName(), (ReferenceBinding) alternateEnclosingInstanceType))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "193b918176407662692fe8b000aaa603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " \tprivate void findLocalMethodsFromFavorites( \t\t\tchar[] methodName, \t\t\tMethodBinding[] methods, \t\t\tScope scope, \t\t\tObjectVector methodsFound, \t\t\tObjectVector methodsFoundFromFavorites, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "signatureAfterChange": " \tprivate void findLocalMethodsFromFavorites( \t\t\tchar[] methodName, \t\t\tMethodBinding[] methods, \t\t\tScope scope, \t\t\tObjectVector methodsFound, \t\t\tObjectVector methodsFoundFromFavorites, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "diff": ["-\t\t\t\t\t\tif (otherMethod.declaringClass == method.declaringClass &&", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(otherMethod.declaringClass, method.declaringClass) &&", "-\t\t\t\tif (method.declaringClass != superTypeWithSameErasure) {", "+\t\t\t\tif (TypeBinding.notEquals(method.declaringClass, superTypeWithSameErasure)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1951f687f75e4157e976693b8274c08b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "25ceba4552ce4df8b00117185ea4a4cf292544fd", "commitAfterChange": "e31e89499c545f3404d7787f4d333516631375ec", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t            if (this.type != otherParamType.type)", "+\t            if (TypeBinding.notEquals(this.type, otherParamType.type)) ", "-\t\t\t\t\t\t\tif (enclosing != otherEnclosing) return false;", "+\t\t\t\t\t\t\tif (TypeBinding.notEquals(enclosing, otherEnclosing)) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1faea02522da61bd2beee53d4c413c78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tstatic boolean areTypesEqual(TypeBinding one, TypeBinding two)", "signatureAfterChange": " \tstatic boolean areTypesEqual(TypeBinding one, TypeBinding two)", "diff": ["-\t\t\t\t\t\tif (one == two.erasure())", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(one, two.erasure()))", "-\t\t\t\t\t\tif (one.erasure() == two)", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(one.erasure(), two))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206efc53a84754def4ff7aa4faa9bf1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (rightType.isArrayType() && ((ArrayBinding) rightType).elementsType() == TypeBinding.CHAR) {", "+\t\t\tif (rightType.isArrayType() && TypeBinding.equalsEquals(((ArrayBinding) rightType).elementsType(), TypeBinding.CHAR)) {", "-\t\t\tif (leftType.isArrayType() && ((ArrayBinding) leftType).elementsType() == TypeBinding.CHAR) {", "+\t\t\tif (leftType.isArrayType() && TypeBinding.equalsEquals(((ArrayBinding) leftType).elementsType(), TypeBinding.CHAR)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21e0cd4b32bbe39390c31e6a5f09741d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " void computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "signatureAfterChange": " void computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "diff": ["-\t\t\t\tif ((local.type == TypeBinding.LONG) || (local.type == TypeBinding.DOUBLE)) {", "+\t\t\t\tif ((TypeBinding.equalsEquals(local.type, TypeBinding.LONG)) || (TypeBinding.equalsEquals(local.type, TypeBinding.DOUBLE))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "253ec016005bcc6f6a11cbaded863545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tReferenceBinding resolve()", "signatureAfterChange": " \tReferenceBinding resolve()", "diff": ["-\t\t\tif (this.firstBound == oldSuperclass) {", "+\t\t\tif (TypeBinding.equalsEquals(this.firstBound, oldSuperclass)) {", "-\t\t\t} else if (this.firstBound == oldFirstInterface) {", "+\t\t\t} else if (TypeBinding.equalsEquals(this.firstBound, oldFirstInterface)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29763787b0685346ffbd0aba6c4ef712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\t\tif (codegenBinding.isPrivate() && enclosingSourceType != (allocatedType = codegenBinding.declaringClass)) {", "+\t\t\tif (codegenBinding.isPrivate() && TypeBinding.notEquals(enclosingSourceType, (allocatedType = codegenBinding.declaringClass))) {", "-\t\t\tif (enclosingSourceType != codegenBinding.declaringClass){", "+\t\t\tif (TypeBinding.notEquals(enclosingSourceType, codegenBinding.declaringClass)){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d7fe92709afdef5632832887e9de98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": " private String parameterBoundAsString(TypeVariableBinding typeVariable, boolean makeShort)", "signatureAfterChange": " private String parameterBoundAsString(TypeVariableBinding typeVariable, boolean makeShort)", "diff": ["-    if (typeVariable.firstBound == typeVariable.superclass) {", "+    if (TypeBinding.equalsEquals(typeVariable.firstBound, typeVariable.superclass)) {", "-\t        if (i > 0 || typeVariable.firstBound == typeVariable.superclass) nameBuffer.append(\" & \"); //$NON-NLS-1$", "+\t        if (i > 0 || TypeBinding.equalsEquals(typeVariable.firstBound, typeVariable.superclass)) nameBuffer.append(\" & \"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b8fd9aa5c56ce38ed5e96e4fc44cc08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "signatureAfterChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "diff": ["-\t\t&& (inheritedMethod.returnType == existingMethod.returnType\t// need to keep around to produce bridge methods? ...", "-\t\t\t|| (this.type != existingMethod.declaringClass \t\t\t// ... not if inheriting the bridge situation from a superclass", "+\t\t&& (TypeBinding.equalsEquals(inheritedMethod.returnType, existingMethod.returnType)\t// need to keep around to produce bridge methods? ...", "+\t\t\t|| (TypeBinding.notEquals(this.type, existingMethod.declaringClass) \t\t\t// ... not if inheriting the bridge situation from a superclass"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2da287eac59eba0041c42ad2c34e1818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean areParameterErasuresEqual(MethodBinding method)", "signatureAfterChange": " public final boolean areParameterErasuresEqual(MethodBinding method)", "diff": ["-\t\tif (this.parameters[i] != args[i] && this.parameters[i].erasure() != args[i].erasure())", "+\t\tif (TypeBinding.notEquals(this.parameters[i], args[i]) && TypeBinding.notEquals(this.parameters[i].erasure(), args[i].erasure()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30d6c46acb0b98cb6b7bff111bb51032", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t            return erasure() == otherType.erasure();", "+\t            return TypeBinding.equalsEquals(erasure(), otherType.erasure());", "-\t    if (erasure() == otherType) {", "+\t    if (TypeBinding.equalsEquals(erasure(), otherType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d357ff0eeb5788382719e1b0f4e156f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "signatureAfterChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "diff": ["-\t\t\t\t\t\t\tif (equalSubstitute == current) {", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(equalSubstitute, current)) {", "-\t\t\t\t\t\t\t\t\tif (equalSubstitute != current && equalSubstitute != null) {", "+\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(equalSubstitute, current) && equalSubstitute != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eefa781ab789e1cf24434a79774c26b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 501, "methodNumberAfterChange": 501, "signatureBeforeChange": " public void varargsConflict(MethodBinding method1, MethodBinding method2, SourceTypeBinding type)", "signatureAfterChange": " public void varargsConflict(MethodBinding method1, MethodBinding method2, SourceTypeBinding type)", "diff": ["-\t\tmethod1.declaringClass == type ? method1.sourceStart() : type.sourceStart(),", "-\t\tmethod1.declaringClass == type ? method1.sourceEnd() : type.sourceEnd());", "+\t\tTypeBinding.equalsEquals(method1.declaringClass, type) ? method1.sourceStart() : type.sourceStart(),", "+\t\tTypeBinding.equalsEquals(method1.declaringClass, type) ? method1.sourceEnd() : type.sourceEnd());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "435aa3d5bbbbf0b2e6573939d15c18a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[iarg], argumentTypes[iarg]))", "-\t\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "+\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[p], argumentTypes[p]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48eb4b4be9bb4c94fb0c8359d138d5c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "signatureAfterChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "diff": ["-\t\t\t\tif (allocationType.arguments[i] != expected.arguments[i])", "+\t\t\t\tif (TypeBinding.notEquals(allocationType.arguments[i], expected.arguments[i]))", "-\t\tif (inferredTypes[i] != allocationType.arguments[i])", "+\t\tif (TypeBinding.notEquals(inferredTypes[i], allocationType.arguments[i]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53ca988d5288c40d4f5fde5989525162", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 194, "signatureBeforeChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "signatureAfterChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "diff": ["-\t\t\t\t\tsourceType != outerInvocationType) {", "+\t\t\t\t\tTypeBinding.notEquals(sourceType, outerInvocationType)) {", "-\t\t\t\t\tif (sourceType == otherType) continue next;", "+\t\t\t\t\tif (TypeBinding.equalsEquals(sourceType, otherType)) continue next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5579e3590d38b711222845c98c2e8e8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[iarg], argumentTypes[iarg]))", "-\t\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "+\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[p], argumentTypes[p]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a509dc0b1096b50ccb7eb1fbcd97ccd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\t\t\tif (params[p] == arg) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(params[p], arg)) {", "-\t\t\t\t\t\t\t\t\t|| (candidate.declaringClass == otherCandidate.declaringClass && candidate.areParametersEqual(otherCandidate))) {", "+\t\t\t\t\t\t\t\t\t|| (TypeBinding.equalsEquals(candidate.declaringClass, otherCandidate.declaringClass) && candidate.areParametersEqual(otherCandidate))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d54aa8c7a4e1ffc8bd70654d0493862", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic boolean isErasureBoundTo(TypeBinding type)", "signatureAfterChange": " \tpublic boolean isErasureBoundTo(TypeBinding type)", "diff": ["-\t\tif (this.superclass.erasure() == type)", "+\t\tif (TypeBinding.equalsEquals(this.superclass.erasure(), type))", "-\t\t\tif (this.superInterfaces[i].erasure() == type)", "+\t\t\tif (TypeBinding.equalsEquals(this.superInterfaces[i].erasure(), type))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "610d081376febe82c2e315ae4c638fd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " boolean detectInheritedNameClash(MethodBinding inherited, MethodBinding otherInherited)", "signatureAfterChange": " boolean detectInheritedNameClash(MethodBinding inherited, MethodBinding otherInherited)", "diff": ["-\tif (inherited.returnType.erasure() != otherInherited.returnType.erasure())", "+\tif (TypeBinding.notEquals(inherited.returnType.erasure(), otherInherited.returnType.erasure()))", "-\tif (inherited.declaringClass.erasure() != otherInherited.declaringClass.erasure()) {", "+\tif (TypeBinding.notEquals(inherited.declaringClass.erasure(), otherInherited.declaringClass.erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dd5353d72d20f3f9c101308e30632b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void nonRecursiveResolveTypeUpwards(BlockScope scope)", "signatureAfterChange": " void nonRecursiveResolveTypeUpwards(BlockScope scope)", "diff": ["-\t\t\tif (rightType.isArrayType() && ((ArrayBinding) rightType).elementsType() == TypeBinding.CHAR) {", "+\t\t\tif (rightType.isArrayType() && TypeBinding.equalsEquals(((ArrayBinding) rightType).elementsType(), TypeBinding.CHAR)) {", "-\t\t\tif (leftType.isArrayType() && ((ArrayBinding) leftType).elementsType() == TypeBinding.CHAR) {", "+\t\t\tif (leftType.isArrayType() && TypeBinding.equalsEquals(((ArrayBinding) leftType).elementsType(), TypeBinding.CHAR)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67da49c49f106e5209884703b19f2abb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "    public void resolve()", "signatureAfterChange": "    public void resolve()", "diff": ["-\t\t\t\t\t\t\t\t&& TypeBinding.LONG == fieldBinding.type) {", "+\t\t\t\t\t\t\t\t&& TypeBinding.equalsEquals(TypeBinding.LONG, fieldBinding.type)) {", "-\t\t\t\t\tif (superclassBinding == javaxRmiCorbaStub) {", "+\t\t\t\t\tif (TypeBinding.equalsEquals(superclassBinding, javaxRmiCorbaStub)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73484aaa3ec1a013424859dd1632a179", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprivate void addExpectedType(TypeBinding type, Scope scope)", "signatureAfterChange": " \tprivate void addExpectedType(TypeBinding type, Scope scope)", "diff": ["-\t\t\tif (this.expectedTypes[i] == type) return;", "+\t\t\tif (TypeBinding.equalsEquals(this.expectedTypes[i], type)) return;", "-\t\tif(type == scope.getJavaLangObject()) {", "+\t\tif(TypeBinding.equalsEquals(type, scope.getJavaLangObject())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79cf550778254bfbc0d8b940c574be78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\t\t\t\tif (enclosingType != null && enclosingType.erasure() != qualifiedType.erasure()) {", "+\t\t\t\tif (enclosingType != null && TypeBinding.notEquals(enclosingType.erasure(), qualifiedType.erasure())) {", "-\t\t\t\t} else if ((rawQualified || qualifiedType.isParameterizedType()) && qualifiedType.erasure() == currentType.enclosingType().erasure()) {", "+\t\t\t\t} else if ((rawQualified || qualifiedType.isParameterizedType()) && TypeBinding.equalsEquals(qualifiedType.erasure(), currentType.enclosingType().erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84abc2e102269e99bcb2c0991929b596", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int[] findOverriddenInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": "  int[] findOverriddenInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\t\twhile (declaringClass == declaringClass2) {", "+\t\twhile (TypeBinding.equalsEquals(declaringClass, declaringClass2)) {", "-\t\t\tif (declaringClass == declaringClass2) continue;", "+\t\t\tif (TypeBinding.equalsEquals(declaringClass, declaringClass2)) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b13a75ad21274e3e53afe739186ea60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "25ceba4552ce4df8b00117185ea4a4cf292544fd", "commitAfterChange": "e31e89499c545f3404d7787f4d333516631375ec", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "diff": ["-\tif (otherType == this)", "+\tif (TypeBinding.equalsEquals(otherType, this))", "-\t\t\t\t\tif (erasure() == otherType.erasure())", "+\t\t\t\t\tif (TypeBinding.equalsEquals(erasure(), otherType.erasure())) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d20e75a6e95c477a15b811ef1c293e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public final boolean areTypeVariableErasuresEqual(MethodBinding method)", "signatureAfterChange": " public final boolean areTypeVariableErasuresEqual(MethodBinding method)", "diff": ["-\t\tif (this.typeVariables[i] != vars[i] && this.typeVariables[i].erasure() != vars[i].erasure())", "+\t\tif (TypeBinding.notEquals(this.typeVariables[i], vars[i]) && TypeBinding.notEquals(this.typeVariables[i].erasure(), vars[i].erasure()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb434afc487c82666c8f5e73615d2e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "signatureAfterChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["-\t\t\t\t\t\tif (checkForErasedCandidateCollisions && typeVariable.firstBound == typeVariable.superclass) {", "+\t\t\t\t\t\tif (checkForErasedCandidateCollisions && TypeBinding.equalsEquals(typeVariable.firstBound, typeVariable.superclass)) {", "-\t\t\t\t\t\t\tif (previousInterface == superRefType) {", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(previousInterface, superRefType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f494d64b97af2da8e3e4cc4df7047a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t\t\t\t&& lastArgType != varargsType", "-\t\t\t\t\t\t\t\t\t\t&& lastArgType.leafComponentType().erasure() != varargsType.leafComponentType.erasure()", "+\t\t\t\t\t\t\t\t\t\t&& TypeBinding.notEquals(lastArgType, varargsType)", "+\t\t\t\t\t\t\t\t\t\t&& TypeBinding.notEquals(lastArgType.leafComponentType().erasure(), varargsType.leafComponentType.erasure())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90a26a24a319862b142f9e41338d01d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\tif (this == otherType) return true;", "+\t", "+\tif (TypeBinding.equalsEquals(this, otherType)) return true;", "-\t\t\treturn otherType.erasure() == this;", "+\t\t\treturn TypeBinding.equalsEquals(otherType.erasure(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9513edea55e22828196d68c3bc531ef2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate TypeReference findBound(TypeBinding bound, TypeParameter parameter)", "signatureAfterChange": " \tprivate TypeReference findBound(TypeBinding bound, TypeParameter parameter)", "diff": ["-\t\tif (parameter.type != null && parameter.type.resolvedType == bound)", "+\t\tif (parameter.type != null && TypeBinding.equalsEquals(parameter.type.resolvedType, bound))", "-\t\t\t\tif (bounds[i].resolvedType == bound)", "+\t\t\t\tif (TypeBinding.equalsEquals(bounds[i].resolvedType, bound))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aec1b1c2b345ebdd9e3986376bf8689", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "a170a70f9fd89b9996c94f318397ff4dca1db782", "commitAfterChange": "25c55f5a3b95044fb71ce56ee0bb0a797b58daa1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\tif (expressionType == castType) {", "+\t\t\tif (TypeBinding.equalsEquals(expressionType, castType)) {", "-\t\t\tif (castType == expressionType) {", "+\t\t\tif (TypeBinding.equalsEquals(castType, expressionType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fc9844b5767c6edf4c4668f592d2712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\tif ((codegenBinding.type == TypeBinding.LONG) || (codegenBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\tif ((TypeBinding.equalsEquals(codegenBinding.type, TypeBinding.LONG)) || (TypeBinding.equalsEquals(codegenBinding.type, TypeBinding.DOUBLE))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff1166205398914f6c301f5dfd35b8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-\t\tif (originalInherited.returnType != concreteMethod.returnType)", "+\t\tif (TypeBinding.notEquals(originalInherited.returnType, concreteMethod.returnType))", "-\t\t\tif ((concreteMethod.declaringClass == this.type.superclass && this.type.superclass.isParameterizedType() && !areMethodsCompatible(concreteMethod, originalInherited))", "+\t\t\tif ((TypeBinding.equalsEquals(concreteMethod.declaringClass, this.type.superclass) && this.type.superclass.isParameterizedType() && !areMethodsCompatible(concreteMethod, originalInherited))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a67c81060ae2855bcc2449742dd3f3cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public final boolean canBeSeenBy(InvocationSite invocationSite, Scope scope)", "signatureAfterChange": "  public final boolean canBeSeenBy(InvocationSite invocationSite, Scope scope)", "diff": ["-\tif (invocationType == this.declaringClass) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass)) return true;", "-\t\treturn outerInvocationType == outerDeclaringClass;", "+\t\treturn TypeBinding.equalsEquals(outerInvocationType, outerDeclaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad8b77a589069f3e57c26c5f4096e20a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public final boolean canBeSeenByForCodeSnippet(ReferenceBinding referenceBinding, ReferenceBinding receiverType)", "signatureAfterChange": "  public final boolean canBeSeenByForCodeSnippet(ReferenceBinding referenceBinding, ReferenceBinding receiverType)", "diff": ["-\tif (receiverType == referenceBinding) return true;", "+\tif (TypeBinding.equalsEquals(receiverType, referenceBinding)) return true;", "-\t\treturn outerInvocationType == outerDeclaringClass;", "+\t\treturn TypeBinding.equalsEquals(outerInvocationType, outerDeclaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b01c546cc2ef15206e8ef235d280117e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[iarg], argumentTypes[iarg]))", "-\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\tif (TypeBinding.notEquals(toMatch[iarg], argumentTypes[iarg]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b1d866f9b6455c88630a28d70123e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\tif (castElementType == exprElementType) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(castElementType, exprElementType)) {", "-\t\t\t\t\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t\t\tif ((TypeBinding.notEquals(castTypeMethods[i].returnType, expressionTypeMethods[j].returnType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b84655a37a1bb9b2de46cc1cea4a76df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\t\t\tif (paramMethodBinding.parameters[i] != argumentTypes[i] &&", "-\t\t\t\t\t\t\tparamMethodBinding.parameters[i].erasure() != argumentTypes[i].erasure()) {", "+\t\t\t\t\tif (TypeBinding.notEquals(paramMethodBinding.parameters[i], argumentTypes[i]) &&", "+\t\t\t\t\t\t\tTypeBinding.notEquals(paramMethodBinding.parameters[i].erasure(), argumentTypes[i].erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b92237c692bccd42a120a82f3d6c4143", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "82adc87bce1ed4088802638154568eeec8ab8e88", "commitAfterChange": "b1c69f20f23ddb575225e5b5cb5d470714f41aad", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tprivate ConstraintTypeFormula combineSuperAndSub(TypeBound boundS, TypeBound boundT)", "signatureAfterChange": "  \tprivate ConstraintTypeFormula combineSuperAndSub(TypeBound boundS, TypeBound boundT)", "diff": ["-\t\tif (alpha == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable", "+\t\tif (TypeBinding.equalsEquals(alpha, boundT.left))", "-\t\t\tif (alpha == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable", "+\t\t\tif (TypeBinding.equalsEquals(alpha, boundT.right))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beabcdbd8e141928890b69fb2d7f2cdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PolymorphicMethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic boolean matches(TypeBinding[] matchingParameters, TypeBinding matchingReturnType)", "signatureAfterChange": "  \tpublic boolean matches(TypeBinding[] matchingParameters, TypeBinding matchingReturnType)", "diff": ["-\t\t\tif (this.parameters[j] != matchingParameters[j]) {", "+\t\t\tif (TypeBinding.notEquals(this.parameters[j], matchingParameters[j])) {", "-\t\t} else if (matchingReturnType != cachedReturnType) {", "+\t\t} else if (TypeBinding.notEquals(matchingReturnType, cachedReturnType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c30789d196fedf5c3951736e3fccdd1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "82adc87bce1ed4088802638154568eeec8ab8e88", "commitAfterChange": "b1c69f20f23ddb575225e5b5cb5d470714f41aad", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tprivate ConstraintTypeFormula combineEqualSupers(TypeBound boundS, TypeBound boundT)", "signatureAfterChange": " \t \tprivate ConstraintTypeFormula combineEqualSupers(TypeBound boundS, TypeBound boundT)", "diff": ["-\t\tif (boundS.left == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable", "+\t\tif (TypeBinding.equalsEquals(boundS.left, boundT.right))", "-\t\tif (boundS.right == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable", "+\t\tif (TypeBinding.equalsEquals(boundS.right, boundT.left))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c618d35055951a5bcb09fe6cddebe64f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\t\t\t\t\tif (superType != null && superType.original() != methDecl.binding.declaringClass && CharOperation.equals(messageSend.selector, methDecl.selector)) {", "+\t\t\t\t\t\t\tif (superType != null && TypeBinding.notEquals(superType.original(), methDecl.binding.declaringClass) && CharOperation.equals(messageSend.selector, methDecl.selector)) {", "-\t\t\t\t\t\tif (superType != null && superType.original() != methDecl.binding.declaringClass) {", "+\t\t\t\t\t\tif (superType != null && TypeBinding.notEquals(superType.original(), methDecl.binding.declaringClass)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddca86fe1ddf9a9573dfdd7eacc9e617", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " private int checkAndRecordImportBinding( \t\tBinding importBinding,  \t\tHashtableOfType typesBySimpleNames,  \t\tImportReference importReference, \t\tchar[][] compoundName)", "signatureAfterChange": " private int checkAndRecordImportBinding( \t\tBinding importBinding,  \t\tHashtableOfType typesBySimpleNames,  \t\tImportReference importReference, \t\tchar[][] compoundName)", "diff": ["-\t\t\tif (existingType == referenceBinding) {", "+\t\t\tif (TypeBinding.equalsEquals(existingType, referenceBinding)) {", "-\t\t\t\t\t\tif (importConflictBinding.conflictingTypeBinding == referenceBinding) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(importConflictBinding.conflictingTypeBinding, referenceBinding)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e361c52087e5e321b6219ae91936d1c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "diff": ["-\t\t\t\t\t\t\t\tif (bindings[j] == param.resolvedType) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(bindings[j], param.resolvedType)) {", "-\t\t\t\t\t\tif (parameter.binding == bindings[j]) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(parameter.binding, bindings[j])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaeb8ed9fe931d16d72577ea81d1a0eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tif ((lastFieldBinding.type == TypeBinding.LONG) || (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\tif ((TypeBinding.equalsEquals(lastFieldBinding.type, TypeBinding.LONG)) || (TypeBinding.equalsEquals(lastFieldBinding.type, TypeBinding.DOUBLE))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaede9e516b206ed7e45054577c92784", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": " public TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\tif (expectedType == TypeBinding.BOOLEAN", "-\t\t\t&& lhsType == TypeBinding.BOOLEAN", "+\tif (TypeBinding.equalsEquals(expectedType, TypeBinding.BOOLEAN)", "+\t\t\t&& TypeBinding.equalsEquals(lhsType, TypeBinding.BOOLEAN)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbdf2b3eab07ee1b07e99d85097eed8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "diff": ["-\t\t\t\tif (parameters[j] != parameters2[j] && parameters[j].erasure() != parameters2[j].erasure()) {", "+\t\t\t\tif (TypeBinding.notEquals(parameters[j], parameters2[j]) && TypeBinding.notEquals(parameters[j].erasure(), parameters2[j].erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbe298dcfd23ab4c4fef5b7bada2db85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "25ceba4552ce4df8b00117185ea4a4cf292544fd", "commitAfterChange": "e31e89499c545f3404d7787f4d333516631375ec", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["-\tif (this == otherType)", "+\tif (TypeBinding.equalsEquals(this, otherType))", "-\t\t\t\t\tif (otherBound == this)", "+\t\t\t\t\tif (TypeBinding.equalsEquals(otherBound, this))"]}], "num": 9767}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21c0bed5396c1421478dead5e6f0d151", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e0321e3b0a2bf18ae87a0bd7937c551", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void computeConversions(BlockScope scope, TypeBinding targetType)", "signatureAfterChange": "  \tprotected boolean computeConversions(BlockScope scope, TypeBinding targetType)", "diff": ["-\tprotected void computeConversions(BlockScope scope, TypeBinding targetType) {", "+\tprotected boolean computeConversions(BlockScope scope, TypeBinding targetType) {", "+\t\tboolean ok = true;", "+\t\t\t\tok = false;", "+\t\t\t\tok = false;", "+\t\treturn ok;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6af7795b07609137f325cabdf91d863c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "9ea1cdb7f6499dc7c1092eeaa0da392a32816565", "commitAfterChange": "fb03590c09a39a7f190240bf883ad18bc23e5222", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tprivate void _createBatchClassLoader(Map<FactoryContainer, FactoryPath.Attributes> containers, \t\t\tIJavaProject p)", "signatureAfterChange": " \tprivate ClassLoader _createBatchClassLoader(Map<FactoryContainer, FactoryPath.Attributes> containers, \t\t\tIJavaProject p)", "diff": ["-\tprivate void _createBatchClassLoader(Map<FactoryContainer, FactoryPath.Attributes> containers,", "-\t\t\tIJavaProject p) ", "-\t{", "-\t\t", "+\t */", "+\tprivate ClassLoader _createBatchClassLoader(Map<FactoryContainer, FactoryPath.Attributes> containers,", "+\t\t\tIJavaProject p) {\t\t", "+\t\tClassLoader result = null;", "-\t\tClassLoader parentCL = _iterativeLoaders.get(p);", "-\t\tif (parentCL == null) {", "-\t\t\tparentCL = AnnotationProcessorFactoryLoader.class.getClassLoader();", "+\t\tsynchronized (cacheMutex) {", "+\t\t\tClassLoader parentCL = _iterativeLoaders.get(p);", "+\t\t\tif (parentCL == null) {", "+\t\t\t\tparentCL = AnnotationProcessorFactoryLoader.class.getClassLoader();", "+\t\t\t}", "+\t\t\t", "+\t\t\tif ( fileList.size() > 0 ) {", "+\t\t\t\tresult = createClassLoader( fileList, parentCL);", "+\t\t\t\t_batchLoaders.put(p, result);", "+\t\t\t}", "-\t\t", "-\t\tif ( fileList.size() > 0 ) {", "-\t\t\t_batchLoaders.put(p,createClassLoader( fileList, parentCL));", "-\t\t}", "+\t\treturn result;"]}], "num": 22934}
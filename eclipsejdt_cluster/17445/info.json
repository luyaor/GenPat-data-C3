{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "304c4f7846d6efe444824b28b9649841", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5fdc7a6775efcdfeedfbe579cf93d80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tif (progressMonitor != null){", "-\t\t\tif (progressMonitor.isCanceled()) return;", "-\t\t\tprogressMonitor.beginTask(Util.bind(\"element.reconciling\"), 10); //$NON-NLS-1$", "+\t\tif (this.progressMonitor != null){", "+\t\t\tif (this.progressMonitor.isCanceled()) return;", "+\t\t\tthis.progressMonitor.beginTask(Util.bind(\"element.reconciling\"), 2); //$NON-NLS-1$", "-\t\tJavaElementDeltaBuilder deltaBuilder = null;", "-\t", "-\t\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\t\tif (!wasConsistent){", "-\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "+\t\t\tif (!wasConsistent) {", "+\t\t\t\t// create the delta builder (this remembers the current content of the cu)", "+\t\t\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "-\t\t\t\tworkingCopy.makeConsistent(progressMonitor);", "+\t\t\t\tthis.ast = workingCopy.makeConsistent(this.createAST, this.progressMonitor);", "-\t\t", "-\t\t\t}", "-\t", "-\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "+", "+\t\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "-\t\t\t// force problem detection? - if structure was consistent", "-\t\t\tif (forceProblemDetection && wasConsistent){", "-\t\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return;", "-\t\t", "-\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "-\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "-\t\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\t\tCompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, progressMonitor);", "-\t\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// register the deltas", "-\t\t\tif (deltaBuilder != null){", "+\t\t\t\t// register the deltas", "+\t\t\t} else {", "+\t\t\t\t// force problem detection? - if structure was consistent", "+\t\t\t\tif (forceProblemDetection) {", "+\t\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "+\t\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "+\t\t\t\t\t\tproblemRequestor.beginReporting();", "+\t\t\t\t\t\tCompilationUnitDeclaration unit = CompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, this.progressMonitor);", "+\t\t\t\t\t\tproblemRequestor.endReporting();", "+\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "+\t\t\t\t\t\tif (this.createAST && unit != null) {", "+\t\t\t\t\t\t\tchar[] contents = workingCopy.getContents();", "+\t\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "+\t\t\t\t\t\t\tthis.ast = AST.convertCompilationUnit(unit, contents, options, this.progressMonitor);", "+\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e610fc79691484d14cf03fd2cfb81b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "a9fc88e66080e1f53be7d1d3e6e899cec4143f11", "commitAfterChange": "df511f7d8700bc6fecb763badf839262e3c7877a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IMarker[] reconcile() throws JavaModelException", "signatureAfterChange": " \r public IMarker[] reconcile() throws JavaModelException", "diff": ["- */\r", "+ */ \r", "-\tthis.reconcile(null);\r", "-\t// report syntax problems\r", "-\treturn null;\r", "-/* DISABLED because of 1GAJJ3A: ITPJUI:WINNT - Deadlock in Java Editor\r", "-\ttry {\r", "-\t\tWorkingCopyElementInfo info = (WorkingCopyElementInfo)JavaModelManager.getJavaModelManager().getInfo(this);\r", "-\t\tIProblem[] problems = info.problems;\r", "-\t\tint length; \r", "-\t\tIResource resource = getOriginalElement().getUnderlyingResource();\r", "-\t\t\r", "-\t\t// flush previous markers first\r", "-\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.TRANSIENT_PROBLEM, true,  IResource.DEPTH_ONE);\r", "-\t\tresource.getWorkspace().deleteMarkers(markers);\r", "+\t// create the delta builder (this remembers the current content of the cu)\r", "+\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(this);\r", "-\t\t// create markers if needed\r", "-\t\tif (problems == null || (length = problems.length) == 0) return null;\r", "-\t\tmarkers = new IMarker[length];\r", "-\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\tIProblem problem = problems[i];\r", "-\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.TRANSIENT_PROBLEM);\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.ID, problem.getID());\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.CHAR_START, problem.getSourceStart());\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.CHAR_END, problem.getSourceEnd() + 1);\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.LINE_NUMBER, problem.getSourceLineNumber());\r", "-\t\t\tmarker.setAttribute(IMarker.LOCATION, \"#\" + problem.getSourceLineNumber());\r", "-\t\t\tmarker.setAttribute(IMarker.MESSAGE, problem.getMessage());\r", "-\t\t\tmarker.setAttribute(IMarker.PRIORITY, (problem.isWarning() ? IMarker.PRIORITY_LOW : IMarker.PRIORITY_HIGH));\r", "-\t\t\tmarkers[i] = marker;\r", "+\t// update the element infos with the content of the working copy\r", "+\tif (this.problemRequestor != null) this.problemRequestor.clear();\r", "+\tthis.makeConsistent(this.problemRequestor, this.problemRequestor != null, null);\r", "+\t//if (this.problemRequestor != null) this.problemRequestor.done();\r", "+\r", "+\t// build the deltas\r", "+\tdeltaBuilder.buildDeltas();\r", "+\t\r", "+\t// fire the deltas\r", "+\tboolean shouldFire = false;\r", "+\tJavaModelManager manager = null;\r", "+\tif (deltaBuilder.delta != null) {\r", "+\t\tmanager = (JavaModelManager)JavaModelManager.getJavaModelManager();\r", "+\t\tif (deltaBuilder.delta.getAffectedChildren().length > 0) {\r", "+\t\t\tmanager.registerJavaModelDelta(deltaBuilder.delta);\r", "+\t\t\tshouldFire = true;\r", "-\t\treturn markers;\r", "-\t} catch (CoreException e) {\r", "-\t\tthrow new JavaModelException(e);\r", "-*/\r", "+\tif (shouldFire) manager.fire();\r", "+\r", "+\treturn null;\r"]}], "num": 17445}
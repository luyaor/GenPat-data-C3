{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91b7a05f15eeda904da072618914c969", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "364f1aec4eaee59b5a0e483116261e70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "e8dcb35615461f6a094496cfd7d96ef4f177fce5", "commitAfterChange": "93de56b29d808bccb957df4ffa2902903a4c6151", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testSeekPackageFragments() throws CoreException", "signatureAfterChange": " public void testSeekPackageFragments() throws CoreException", "diff": ["+\t\tif (i == 0) {", "+\t\t\tint size = requestor.pkgs.size();", "+\t\t\tIJavaElement[] result = new IJavaElement[size];", "+\t\t\trequestor.pkgs.toArray(result);", "+\t\t\tassertElementsEqual(", "+\t\t\t\t\"Unexpected packages\",", "+\t\t\t\t\"org.eclipse.jdt.core.tests78.performance5 [in src78 [in \"+BIG_PROJECT_NAME+\"]]\",", "+\t\t\t\tresult", "+\t\t\t);", "+\t\t}", "-\tint size = requestor.pkgs.size();", "-\tIJavaElement[] result = new IJavaElement[size];", "-\trequestor.pkgs.toArray(result);", "-\tassertElementsEqual(", "-\t\t\"Unexpected packages\",", "-\t\t\"org.eclipse.jdt.core.tests78.performance5 [in src78 [in \"+BIG_PROJECT_NAME+\"]]\",", "-\t\tresult", "-\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c78d923cf2663cb41b17a05d57ba01b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "f3c33fcf9812c391ba41d170d6821b82285978bf", "commitAfterChange": "823f8cf519ce992bfb17971d3e63306334609bad", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnit unitElement, \t\tSourceElementParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration process( \t\t\tCompilationUnit unitElement, \t\t\tSourceElementParser parser, \t\t\tWorkingCopyOwner workingCopyOwner, \t\t\tHashMap problems, \t\t\tboolean creatingAST, \t\t\tint reconcileFlags, \t\t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["+\t */", "-\t\tCompilationUnit unitElement,", "-\t\tSourceElementParser parser,", "-\t\tWorkingCopyOwner workingCopyOwner,", "-\t\tHashMap problems,", "-\t\tboolean creatingAST,", "-\t\tint reconcileFlags,", "-\t\tIProgressMonitor monitor)", "+\t\t\tCompilationUnit unitElement,", "+\t\t\tSourceElementParser parser,", "+\t\t\tWorkingCopyOwner workingCopyOwner,", "+\t\t\tHashMap problems,", "+\t\t\tboolean creatingAST,", "+\t\t\tint reconcileFlags,", "+\t\t\tIProgressMonitor monitor)", "+\t\tCompilationUnitDeclaration unit = null;", "-\t\t\tCompilationUnitDeclaration unit = null;", "-\t\t\tif (parser != null) {", "-\t\t\t\tproblemFinder.parser = parser;", "-\t\t\t\ttry {", "+\t\t\ttry {", "+\t\t\t\tif (parser != null) {", "+\t\t\t\t\tproblemFinder.parser = parser;", "-\t\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t\tproblemFinder.handleInternalException(e, unit);", "+\t\t\t\t} else {", "+\t\t\t\t\tunit =", "+\t\t\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\t\t\tunitElement,", "+\t\t\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\t\t\tanalyzeAndGenerateCode, // analyze code", "+\t\t\t\t\t\t\tanalyzeAndGenerateCode); // generate code", "-\t\t\t} else {", "-\t\t\t\tunit =", "-\t\t\t\t\tproblemFinder.resolve(", "-\t\t\t\t\t\tunitElement,", "-\t\t\t\t\t\ttrue, // verify methods", "-\t\t\t\t\t\tanalyzeAndGenerateCode, // analyze code", "-\t\t\t\t\t\tanalyzeAndGenerateCode); // generate code", "+\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\tproblemFinder.handleInternalException(e, unit);", "-\t\t\tCompilationResult unitResult = unit.compilationResult;", "-\t\t\tCategorizedProblem[] unitProblems = unitResult.getProblems();", "-\t\t\tint length = unitProblems == null ? 0 : unitProblems.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "-\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "-\t\t\t\tproblems.put(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, categorizedProblems);", "+\t\t\tif (unit != null) {", "+\t\t\t\tCompilationResult unitResult = unit.compilationResult;", "+\t\t\t\tCategorizedProblem[] unitProblems = unitResult.getProblems();", "+\t\t\t\tint length = unitProblems == null ? 0 : unitProblems.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "+\t\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "+\t\t\t\t\tproblems.put(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, categorizedProblems);", "+\t\t\t\t}", "+\t\t\t\tunitProblems = unitResult.getTasks();", "+\t\t\t\tlength = unitProblems == null ? 0 : unitProblems.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "+\t\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "+\t\t\t\t\tproblems.put(IJavaModelMarker.TASK_MARKER, categorizedProblems);", "+\t\t\t\t}", "+\t\t\t\tif (NameLookup.VERBOSE) {", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "-\t\t\tunitProblems = unitResult.getTasks();", "-\t\t\tlength = unitProblems == null ? 0 : unitProblems.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tCategorizedProblem[] categorizedProblems = new CategorizedProblem[length];", "-\t\t\t\tSystem.arraycopy(unitProblems, 0, categorizedProblems, 0, length);", "-\t\t\t\tproblems.put(IJavaModelMarker.TASK_MARKER, categorizedProblems);", "-\t\t\t}", "-\t\t\tif (NameLookup.VERBOSE) {", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t\treturn unit;", "+\t\treturn unit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "561a86a8ff72a6a345bcaaa420f0ce4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "15dcf1c47322fd1abf8ecc7d7c8332878ffa2ca4", "commitAfterChange": "82a0f3c12838ccee831a07a711dbd532d22679fb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException", "signatureAfterChange": "  \tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException", "diff": ["-\t\tchar[] cuSource = getSource();", "-\t\tint recordedAnnotations = 0;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tISourceRange positions = annotations[i].getSourceRange();", "-\t\t\tint start = positions.getOffset();", "-\t\t\tint end = start + positions.getLength();", "-\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end);", "-\t\t\tif (annotationSource != null) {", "-    \t\t\tExpression expression = parseMemberValue(annotationSource);", "-    \t\t\t/*", "-    \t\t\t * expression can be null or not an annotation if the source has changed between", "-    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "-    \t\t\t * this parsing occurred.", "-    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "-    \t\t\t */", "-    \t\t\tif (expression instanceof Annotation) {", "-    \t\t\t\tastAnnotations[recordedAnnotations++] = (Annotation) expression;", "-    \t\t\t}", "+\t\tif (length > 0) {", "+\t\t\tchar[] cuSource = getSource();", "+\t\t\tint recordedAnnotations = 0;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tISourceRange positions = annotations[i].getSourceRange();", "+\t\t\t\tint start = positions.getOffset();", "+\t\t\t\tint end = start + positions.getLength();", "+\t\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end);", "+\t\t\t\tif (annotationSource != null) {", "+\t    \t\t\tExpression expression = parseMemberValue(annotationSource);", "+\t    \t\t\t/*", "+\t    \t\t\t * expression can be null or not an annotation if the source has changed between", "+\t    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "+\t    \t\t\t * this parsing occurred.", "+\t    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "+\t    \t\t\t */", "+\t    \t\t\tif (expression instanceof Annotation) {", "+\t    \t\t\t\tastAnnotations[recordedAnnotations++] = (Annotation) expression;", "+\t    \t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\tif (length != recordedAnnotations) {", "-\t\t\t// resize to remove null annotations", "-\t\t\tSystem.arraycopy(astAnnotations, 0, (astAnnotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "+\t\t\tif (length != recordedAnnotations) {", "+\t\t\t\t// resize to remove null annotations", "+\t\t\t\tSystem.arraycopy(astAnnotations, 0, (astAnnotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57a7d9d121143773511d75b7331d9d75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "44bc8bb24de374506385d6361730798867bd9b35", "commitAfterChange": "4eb272881c87b1bea3aa02e641fb6fc8190374ff", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic String createIndentationString(final int indentationLevel)", "signatureAfterChange": "  \tpublic String createIndentationString(final int indentationLevel)", "diff": ["-\t\t\t\tint spaceEquivalents = indentationLevel * this.preferences.indentation_size;", "-\t\t\t\ttabs = spaceEquivalents / tabSize;", "-\t\t\t\tspaces = spaceEquivalents % tabSize;", "+\t\t\t\tif (tabSize != 0) {", "+\t\t\t\t\tint spaceEquivalents = indentationLevel * this.preferences.indentation_size;", "+\t\t\t\t\ttabs = spaceEquivalents / tabSize;", "+\t\t\t\t\tspaces = spaceEquivalents % tabSize;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85396a15b0d50d34ba831d92669e1b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7f7148c3b7ae3451b296c63ec6faa42df92b750d", "commitAfterChange": "e562014fc7f6276a90541f6d031954413a725f91", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected void reportAccurateTypeReference(SearchMatch match, ASTNode typeRef, char[] name) throws CoreException", "signatureAfterChange": " protected void reportAccurateTypeReference(SearchMatch match, ASTNode typeRef, char[] name) throws CoreException", "diff": ["-\t", "-\t// Compute source positions of the qualified reference ", "+", "-\tScanner scanner = this.parser.scanner;", "-\tscanner.setSource(this.currentPossibleMatch.getContents());", "-\tscanner.resetTo(sourceStart, sourceEnd);", "+\t", "+\t// Compute source positions of the qualified reference ", "+\tif (name != null) {", "+\t\tScanner scanner = this.parser.scanner;", "+\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "+\t\tscanner.resetTo(sourceStart, sourceEnd);", "-\tint token = -1;", "-\tint currentPosition;", "-\tdo {", "-\t\tcurrentPosition = scanner.currentPosition;", "-\t\ttry {", "-\t\t\ttoken = scanner.getNextToken();", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\tif (token == TerminalTokens.TokenNameIdentifier && this.pattern.matchesName(name, scanner.getCurrentTokenSource())) {", "-\t\t\tint length = scanner.currentPosition-currentPosition;", "-\t\t\tmatch.setOffset(currentPosition);", "-\t\t\tmatch.setLength(length);", "-\t\t\treport(match);", "-\t\t\treturn;", "-\t\t}", "-\t} while (token != TerminalTokens.TokenNameEOF);", "+\t\tint token = -1;", "+\t\tint currentPosition;", "+\t\tdo {", "+\t\t\tcurrentPosition = scanner.currentPosition;", "+\t\t\ttry {", "+\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\tif (token == TerminalTokens.TokenNameIdentifier && this.pattern.matchesName(name, scanner.getCurrentTokenSource())) {", "+\t\t\t\tint length = scanner.currentPosition-currentPosition;", "+\t\t\t\tmatch.setOffset(currentPosition);", "+\t\t\t\tmatch.setLength(length);", "+\t\t\t\treport(match);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t} while (token != TerminalTokens.TokenNameEOF);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18f90848bb5d0ab705d132beda1ad34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t} else if (this.resolvedType.isMemberType()) { // inner class constructor reference must be qualified", "+\t\t} else if (this.resolvedType.isMemberType()) {", "-\t\t\tReferenceBinding enclosingTypeBinding = allocationType;", "-\t\t\tif (type instanceof JavadocQualifiedTypeReference && (((JavadocQualifiedTypeReference)type).tokens.length != length)) {", "-\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(this.memberStart+1, this.sourceEnd, scope.getDeclarationModifiers());", "-\t\t\t} else {", "-\t\t\t\tint idx = length;", "-\t\t\t\twhile (idx > 0 && CharOperation.equals(qualification[--idx], enclosingTypeBinding.sourceName) && (enclosingTypeBinding = enclosingTypeBinding.enclosingType()) != null) {", "-\t\t\t\t\t// verify that each qualification token matches enclosing types", "-\t\t\t\t}", "-\t\t\t\tif (idx > 0 || enclosingTypeBinding != null) {", "+\t\t\tif (length > 1) { // accept qualified member class constructor reference => see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=103304", "+\t\t\t\tReferenceBinding enclosingTypeBinding = allocationType;", "+\t\t\t\tif (type instanceof JavadocQualifiedTypeReference && ((JavadocQualifiedTypeReference)type).tokens.length != length) {", "+\t\t\t\t} else {", "+\t\t\t\t\tint idx = length;", "+\t\t\t\t\twhile (idx > 0 && CharOperation.equals(qualification[--idx], enclosingTypeBinding.sourceName) && (enclosingTypeBinding = enclosingTypeBinding.enclosingType()) != null) {", "+\t\t\t\t\t\t// verify that each qualification token matches enclosing types", "+\t\t\t\t\t}", "+\t\t\t\t\tif (idx > 0 || enclosingTypeBinding != null) {", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(this.memberStart+1, this.sourceEnd, scope.getDeclarationModifiers());", "+\t\t\t\t\t}"]}], "num": 53063}
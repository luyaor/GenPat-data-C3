{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f3ae219697da2f7108a5d12d4ebb3e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47f4e6bafd2885b00b79b7dde7abcff8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 133, "signatureBeforeChange": " \t\t \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "signatureAfterChange": " \t\t \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "diff": ["-\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tint constructorRelevance = relevance + computeRelevanceForConstructor();", "-\t\t\t\t\t\t\t\ttypeProposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\ttypeProposal.setRelevance(constructorRelevance);", "-\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(constructorRelevance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2f3f32480b41ca89e1fa21abf88ee73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "ba10f45041825dbf68cbcdf31a0ebf684627c110", "commitAfterChange": "02eaea91c32c7f6f2f7d5c5c521c03ffb22cea04", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t\tpublic void logProblemsSummary(int globalProblemsCount, \t\t\tint globalErrorsCount, int globalWarningsCount, int globalTasksCount)", "signatureAfterChange": " \t\tpublic void logProblemsSummary(int globalProblemsCount, \t\t\tint globalErrorsCount, int globalWarningsCount, int globalTasksCount)", "diff": ["-\t\t\t\tparameters.put(NUMBER_OF_WARNINGS, new Integer(globalWarningsCount - globalTasksCount));", "+\t\t\t\tparameters.put(NUMBER_OF_WARNINGS, new Integer(globalWarningsCount));", "-\t\t\t\tif (globalWarningsCount > 0) {", "-\t\t\t\t\tif (globalWarningsCount == 1) {", "+\t\t\t\tint warningsNumber = globalWarningsCount + globalTasksCount;", "+\t\t\t\tif (warningsNumber > 0) {", "+\t\t\t\t\tif (warningsNumber == 1) {", "-\t\t\t\t\t\twarningMessage = Main.bind(\"compile.severalWarnings\", String.valueOf(globalWarningsCount)); //$NON-NLS-1$", "+\t\t\t\t\t\twarningMessage = Main.bind(\"compile.severalWarnings\", String.valueOf(warningsNumber)); //$NON-NLS-1$"]}], "num": 21102}
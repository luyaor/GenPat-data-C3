{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0be012a014a395ae159fed6dec1a15b2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "121b39ccc961f85da01e2fbadfac7951", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testGetParameterCount()", "signatureAfterChange": " public void testGetParameterCount()", "diff": ["-\tassertTrue(\"Signature#getParameterCount is not correct1\", Signature.getParameterCount(methodSig) == 3);", "+\tassertEquals(\"Signature#getParameterCount is not correct1\", 3,", "+\t\t\tSignature.getParameterCount(methodSig));", "-\tassertTrue(\"Signature#getParameterCount is not correct3\", Signature.getParameterCount(methodSig) == 3);", "-//\tmethodSig = \"<X:Qlist<Qstring;>;>(Ilist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "-//\tassertTrue(\"Signature#getParameterCount is not correct4\", Signature.getParameterCount(methodSig) == 3);", "+\tassertEquals(\"Signature#getParameterCount is not correct3\", 3,", "+\t\t\tSignature.getParameterCount(methodSig));", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+\tassertEquals(\"Signature#getParameterCount is not correct4\", 3,", "+\t\t\tSignature.getParameterCount(methodSig));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5871bfb69c54c596bffae841340233e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["+\t\tassertTrue(\"Signature#getParameterTypes is not correct: exception\", false);", "-\t\treturn;", "+\t\t// do nothing", "-\tassertTrue(\"Signature#getParameterTypes is not correct: exception\", false);", "+", "+\t// tests with 1.5-specific elements", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "+\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "+\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "+\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "+//\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+//\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4baabda9d05ca13c8720430c93140c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "9506ae8fe4d60e3a32e2b276be442609d9dc9308", "commitAfterChange": "c1dc1d2bc5993046e3d691c95b58812d1c93dfb9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testGetParameterCount()", "signatureAfterChange": " public void testGetParameterCount()", "diff": ["-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<++Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\t", "+\tmethodSig= \"foo(LA<++Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));", "-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<--Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\tmethodSig= \"foo(LA<--Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));", "-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<+-Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\tmethodSig= \"foo(LA<+-Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));"]}], "num": 52414}
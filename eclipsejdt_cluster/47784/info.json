{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71bd3eebcd5d3759aeb4869ac2ec4e18", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e2425eeff6d4104bfb58b2d9b7d585", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, boolean needSignature, String typeSignature, int limitTo, int matchRule)", "signatureAfterChange": "  \tprivate static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, String typeSignature, IType type, int limitTo, int matchRule)", "diff": ["-\tprivate static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, boolean needSignature, String typeSignature, int limitTo, int matchRule) {", "+", "+\tprivate static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, String typeSignature, IType type, int limitTo, int matchRule) {", "-\t\t\t\tif (needSignature && typeSignature == null) return null;", "+\t\t\t\tif (type != null) {", "+\t\t\t\t\treturn new TypeReferencePattern(", "+\t\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), ", "+\t\t\t\t\t\tsimpleName,", "+\t\t\t\t\t\ttype,", "+\t\t\t\t\t\tmatchRule);", "+\t\t\t\t}", "-\t\t\t\t\tnew TypeReferencePattern(", "-\t\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), ", "-\t\t\t\t\t\tsimpleName,", "-\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\tmatchRule));", "+\t\t\t\t\t(type != null)", "+\t\t\t\t\t\t? new TypeReferencePattern(", "+\t\t\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), ", "+\t\t\t\t\t\t\tsimpleName,", "+\t\t\t\t\t\t\ttype,", "+\t\t\t\t\t\t\tmatchRule)", "+\t\t\t\t\t\t: new TypeReferencePattern(", "+\t\t\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), ", "+\t\t\t\t\t\t\tsimpleName,", "+\t\t\t\t\t\t\ttypeSignature,", "+\t\t\t\t\t\t\tmatchRule)", "+\t\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6df72219b6e5fbfdbd4a09b570455b9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tvoid replaceChild(ASTNode oldChild, ASTNode newChild, boolean cycleCheck)", "signatureAfterChange": "  \tfinal void preReplaceChild(ASTNode oldChild, ASTNode newChild, ChildPropertyDescriptor property)", "diff": ["-\tvoid replaceChild(ASTNode oldChild, ASTNode newChild, boolean cycleCheck) {", "-\t\tif (newChild != null) {", "-\t\t\tcheckNewChild(this, newChild, cycleCheck, null);", "-\t\t// delink old child from parent", "-\t\tif (oldChild != null) {", "-\t\t\toldChild.setParent(null);", "-\t\t// link new child to parent", "-\t\tif (newChild != null) {", "-\t\t\tnewChild.setParent(this);", "+\t */ ", "+\tfinal void preReplaceChild(ASTNode oldChild, ASTNode newChild, ChildPropertyDescriptor property) {", "+\t\tif ((this.flags & PROTECT) != 0) {", "+\t\t\t// this node is protected => cannot gain or lose children", "+\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (newChild != null) {", "+\t\t\tcheckNewChild(this, newChild, property.cycleRisk, null);", "+\t\t}", "+\t\t// delink old child from parent", "+\t\tif (oldChild != null) {", "+\t\t\tif ((oldChild.flags & PROTECT) != 0) {", "+\t\t\t\t// old child node is protected => cannot be unparented", "+\t\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tthis.ast.preRemoveChildEvent(this, oldChild, property);", "+\t\t\toldChild.setParent(null, null);", "+\t\t}", "+\t\t// link new child to parent", "+\t\tif (newChild != null) {", "+\t\t\tnewChild.setParent(this, property);", "+\t\t\t// cannot notify postAddChildEvent until parent is linked to child too", "+\t\t}", "+\t}"]}], "num": 47784}
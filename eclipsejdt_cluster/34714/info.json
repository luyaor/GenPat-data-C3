{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dcbc231f134009a278540db76f49a9d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ee0a52c78a02bf1ad27088827dbe53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "da5be92848053087506e3795d2b7a39a9d351430", "commitAfterChange": "c96ea754cbc1843e6373572c9a41527df8e971a2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void _test016()", "signatureAfterChange": "  \tpublic void _test016()", "diff": ["-\t// cannot have 2 methods with compatible return types like Object & String so how is this legal?", "-\tpublic void _test016() { // 77228", "+\tpublic void _test016() { // 73971 and 77228", "+\t\t\t\t\"class X {\\n\" + ", "+\t\t\t\t\"\tstatic <E extends A> void m(E e) { System.out.print(\\\"A=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tstatic <E extends B> void m(E e) { System.out.print(\\\"B=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tm(new A());\\n\" + ", "+\t\t\t\t\"\t\tm(new B());\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\"", "+\t\t\t},", "+\t\t\t\"A=AB=B\"", "+\t\t);", "+\t\tthis.runConformTest(\t// cannot have 2 methods with compatible return types like Object & String so how is this legal?", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a7e7913f9c48fbf33c8a7da1011e247", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "27fcbc8377d5279cf55f4f3363243a669638c60f", "commitAfterChange": "72dd2259c6b0bf873e52961aeda8ec4762bdb50b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void test016()", "signatureAfterChange": "  \tpublic void test016()", "diff": ["+\t\t\t\t\"\t<E extends A> void m(E e) { System.out.print(\\\"A=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\t<E extends B> void m(E e) { System.out.print(\\\"B=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tnew X().m(new A());\\n\" +", "+\t\t\t\t\"\t\tnew X().m(new B());\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\"", "+\t\t\t},", "+\t\t\t\"A=class AB=class B\"", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + "]}], "num": 34714}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d81914c16f30b0f481a9defb6f36790d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c574d17fa892143c4d6bf2fa837d8e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue)", "signatureAfterChange": " private IAnnotation[] getStandardAnnotations(long tagBits)", "diff": ["-protected Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue) {", "-\tif (binaryValue instanceof Constant) {", "-\t\treturn Util.getAnnotationMemberValue(memberValuePair, (Constant) binaryValue);", "-\t} else if (binaryValue instanceof IBinaryAnnotation) {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_ANNOTATION;", "-\t\treturn getAnnotation((IBinaryAnnotation) binaryValue);", "-\t} else if (binaryValue instanceof ClassSignature) {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_CLASS;", "-\t\tchar[] className = Signature.toCharArray(CharOperation.replaceOnCopy(((ClassSignature) binaryValue).getTypeName(), '/', '.'));", "-\t\treturn new String(className);", "-\t} else if (binaryValue instanceof EnumConstantSignature) {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_QUALIFIED_NAME;", "-\t\tEnumConstantSignature enumConstant = (EnumConstantSignature) binaryValue;", "-\t\tchar[] enumName = Signature.toCharArray(CharOperation.replaceOnCopy(enumConstant.getTypeName(), '/', '.'));", "-\t\tchar[] qualifiedName = CharOperation.concat(enumName, enumConstant.getEnumConstantName(), '.');", "-\t\treturn new String(qualifiedName);", "-\t} else if (binaryValue instanceof Object[]) {", "-\t\tmemberValuePair.valueKind = -1; // modified below by the first call to getMemberValue(...)", "-\t\tObject[] binaryValues = (Object[]) binaryValue;", "-\t\tint length = binaryValues.length;", "-\t\tObject[] values = new Object[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tint previousValueKind = memberValuePair.valueKind;", "-\t\t\tObject value = getMemberValue(memberValuePair, binaryValues[i]);", "-\t\t\tif (previousValueKind != -1 && memberValuePair.valueKind != previousValueKind) {", "-\t\t\t\t// values are heterogeneous, value kind is thus unknown", "-\t\t\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "-\t\t\t}", "-\t\t\tvalues[i] = value;", "-\t\t}", "-\t\tif (memberValuePair.valueKind == -1)", "-\t\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "-\t\treturn values;", "-\t} else {", "-\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "-\t\treturn null;", "+private IAnnotation[] getStandardAnnotations(long tagBits) {", "+\tif ((tagBits & TagBits.AllStandardAnnotationsMask) == 0)", "+\t\treturn Annotation.NO_ANNOTATIONS;", "+\tArrayList annotations = new ArrayList();", "+", "+\tif ((tagBits & TagBits.AnnotationTargetMASK) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_TARGET));", "+\tif ((tagBits & TagBits.AnnotationRetentionMASK) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_RETENTION));", "+\t}", "+\tif ((tagBits & TagBits.AnnotationDeprecated) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_DEPRECATED));", "+\t}", "+\tif ((tagBits & TagBits.AnnotationDocumented) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED));", "+\t}", "+\tif ((tagBits & TagBits.AnnotationInherited) != 0) {", "+\t\tannotations.add(getAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED));", "+\t}", "+\t// note that JAVA_LANG_SUPPRESSWARNINGS and JAVA_LANG_OVERRIDE cannot appear in binaries", "+\treturn (IAnnotation[]) annotations.toArray(new IAnnotation[annotations.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e9a9bf001740723de106d0d75f8f89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3c339caa1e7b5ca6c56cf03ac002e58b4380b89e", "commitAfterChange": "51917a0c83743a82a23c6f16badda9326a65b40d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tIJavaProject currentProject, \t\tIPath currentOutput, \t\tint outputTraverseMode)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputInfo outputInfo)", "diff": ["-\t\tIJavaProject currentProject,", "-\t\tIPath currentOutput,", "-\t\tint outputTraverseMode) {", "+\t\tRootInfo rootInfo,", "+\t\tOutputInfo outputInfo) {", "+\t", "+\t\t// set stack of elements", "+\t\tif (this.currentElement == null && rootInfo != null) {", "+\t\t\tthis.currentElement = (Openable)rootInfo.project;", "+\t\t}", "-\t\tif (currentProject != null || res instanceof IProject) {", "-\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "-\t\t\t\t// force the currentProject to be used", "-\t\t\t\tthis.currentElement = (Openable)currentProject;", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// non java resource or invalid project", "-\t\t\t\treturn false;", "-\t\t\t}", "+\t\tif (rootInfo != null || res instanceof IProject) {", "+\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, rootInfo);", "-\t\t// get the project's output location", "-\t\tif (currentOutput == null) {", "-\t\t\ttry {", "-\t\t\t\tIJavaProject proj =", "-\t\t\t\t\tcurrentProject == null ?", "-\t\t\t\t\t\t(IJavaProject)this.createElement(res.getProject(), IJavaElement.JAVA_PROJECT, null) :", "-\t\t\t\t\t\tcurrentProject;", "-\t\t\t\tif (proj != null) {", "-\t\t\t\t\tcurrentOutput = proj.getOutputLocation();", "-\t\t\t\t\tif (proj.getProject().getFullPath().equals(currentOutput)){ // case of proj==bin==src", "-\t\t\t\t\t\toutputTraverseMode = SOURCE;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// check case of src==bin", "-\t\t\t\t\t\tIClasspathEntry[] classpath = proj.getResolvedClasspath(true);", "-\t\t\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {", "-\t\t\t\t\t\t\tIClasspathEntry entry = classpath[i];", "-\t\t\t\t\t\t\tif (entry.getPath().equals(currentOutput)) {", "-\t\t\t\t\t\t\t\toutputTraverseMode = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t}", "-", "+\t\t// get the project's output location and traverse mode", "+\t\tif (outputInfo == null) outputInfo = this.outputInfo(rootInfo, res);", "+\t", "-", "+\t", "-\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(childPath);", "-\t\t\t\tboolean isPkgFragmentRoot = ", "-\t\t\t\t\tprojectOfRoot != null ", "-\t\t\t\t\t&& (projectOfRoot.getProject().getFullPath().isPrefixOf(childPath));", "+\t\t\t\tRootInfo childInfo = rootInfo == null ? (RootInfo)this.roots.get(childPath) : null;", "+\t\t\t\tif (childInfo != null && !childInfo.project.getProject().getFullPath().isPrefixOf(childPath)) {", "+\t\t\t\t\t// package fragment root of another project (dealt with later)", "+\t\t\t\t\tchildInfo = null;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// compute child type", "-\t\t\t\t\t\tisPkgFragmentRoot);", "+\t\t\t\t\t\trootInfo == null ? childInfo : rootInfo", "+\t\t\t\t\t);", "-\t\t\t\tif (isPkgFragmentRoot) {", "-\t\t\t\t\tthis.currentExclusionPatterns = (char[][])this.exclusionPatterns.get(childPath);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// filter out changes in output location", "-\t\t\t\tboolean outputIsFiltered = false;", "-\t\t\t\tif (currentOutput != null && currentOutput.isPrefixOf(childPath)) {", "-\t\t\t\t\tif (outputTraverseMode != IGNORE) {", "-\t\t\t\t\t\t// case of bin=src", "-\t\t\t\t\t\tif (outputTraverseMode == SOURCE && childType == IJavaElement.CLASS_FILE) {", "-\t\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// case of .class file under project and no source folder", "-\t\t\t\t\t\t\t// proj=bin", "-\t\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT ", "-\t\t\t\t\t\t\t\t\t&& childRes instanceof IFile ", "-\t\t\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {", "-\t\t\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t// are changes in output location filtered out ?", "+\t\t\t\tboolean outputIsFiltered = this.isOutputFiltered(outputInfo, childRes, childType);", "-\t\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {", "+\t\t\t\t\t\t|| !this.traverseDelta(child, childType, rootInfo == null ? childInfo : rootInfo, outputInfo)) {", "-\t\t\t\t\t\t\tif (currentProject != null) {", "+\t\t\t\t\t\t\tif (rootInfo != null) {", "-\t\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "+\t\t\t\t\t\t\t\t\tif (this.currentElement == null ", "+\t\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "-\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && res instanceof IProject)) { ", "+\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "+\t\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "-\t\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);", "+\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "-\t\t\t\t// if child is a package fragment root of another project, traverse delta too", "-\t\t\t\tif (projectOfRoot != null && !isPkgFragmentRoot) {", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, IGNORE); // binary output of projectOfRoot cannot be this root", "+\t\t\t\t// if child was not a package fragment root of the current project", "+\t\t\t\t// but it is a package fragment root of another project, traverse delta too", "+\t\t\t\tif (childInfo == null && (childInfo = (RootInfo)this.roots.get(childPath)) != null) {", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childInfo, null); // binary output of childInfo.project cannot be this root", "-\t\t\t\t", "+\t", "-\t\t\t\tHashSet set;", "-\t\t\t\tif ((set = (HashSet)this.otherRoots.get(childPath)) != null) {", "-\t\t\t\t\tIPackageFragmentRoot currentRoot = ", "-\t\t\t\t\t\t(currentProject == null ? ", "-\t\t\t\t\t\t\tprojectOfRoot : ", "-\t\t\t\t\t\t\tcurrentProject).getPackageFragmentRoot(childRes);", "-\t\t\t\t\tIterator iterator = set.iterator();", "+\t\t\t\tArrayList rootList;", "+\t\t\t\tif ((rootList = (ArrayList)this.otherRoots.get(childPath)) != null) {", "+\t\t\t\t\tIterator iterator = rootList.iterator();", "-\t\t\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();", "-\t\t\t\t\t\tthis.cloneCurrentDelta(project, currentRoot);", "+\t\t\t\t\t\tchildInfo = (RootInfo) iterator.next();", "+\t\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childInfo, null); // binary output of childInfo.project cannot be this root", "-\t\t\treturn isValidParent && (currentProject != null || oneChildOnClasspath);", "+\t\t\treturn isValidParent && (rootInfo != null || oneChildOnClasspath);", "-\t\t\treturn currentProject != null && elementType != -1;", "+\t\t\treturn rootInfo != null && elementType != -1;"]}], "num": 56457}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5124e27b8140c83fb5b0ccc534af2d7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f82c566d6b8fba8aa3a851b5bd7e2c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "d4c834daaadbd8c680a6fcccd31170f229344d7e", "commitAfterChange": "9afcaef5b1b73c3a14828e7dccbe0110d44ea231", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject) throws CoreException", "signatureAfterChange": "  private void computeClasspathLocations( \tIWorkspaceRoot workspaceRoot, \tJavaProject javaProject) throws CoreException", "diff": ["-\tIWorkspaceRoot root,", "+\tIWorkspaceRoot workspaceRoot,", "-", "-\tIClasspathEntry[] classpath = javaProject.getExpandedClasspath(true/*ignore unresolved variables*/);", "-\tint length = classpath.length;", "-\tArrayList locations = new ArrayList(length);", "-\tnextEntry : for (int i = 0; i < length; i++) {", "-\t\tIClasspathEntry entry = classpath[i];", "-\t\tIPath path = entry.getPath();", "-\t\tObject target = JavaModel.getTarget(root, path, true);", "-\t\tif (target == null) continue nextEntry;", "-", "-\t\tswitch(entry.getEntryKind()) {", "-\t\t\tcase IClasspathEntry.CPE_SOURCE :", "-\t\t\t\tif (!(target instanceof IContainer)) continue nextEntry;", "+\tIPackageFragmentRoot[] roots = javaProject.getAllPackageFragmentRoots();", "+\tint length = roots.length;", "+\tClasspathLocation[] locations = new ClasspathLocation[length];", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\tfor (int i = 0; i < length; i++) {", "+\t\tIPackageFragmentRoot root = roots[i];", "+\t\tIPath path = root.getPath();", "+\t\tif (root.isArchive()) {", "+\t\t\tZipFile zipFile = manager.getZipFile(path);", "+\t\t\tlocations[i] = new ClasspathJar(zipFile);", "+\t\t} else {", "+\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "+\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\tlocations.add(new ClasspathSourceDirectory((IContainer)target, encoding));", "-\t\t\t\tcontinue nextEntry;", "-", "-\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "-\t\t\t\tif (target instanceof IResource) {", "-\t\t\t\t\tIResource resource = (IResource) target;", "-\t\t\t\t\tClasspathLocation location = null;", "-\t\t\t\t\tif (resource instanceof IFile) {", "-\t\t\t\t\t\tString fileName = path.lastSegment();", "-\t\t\t\t\t\tif (!Util.isArchiveFileName(fileName)) continue nextEntry;", "-\t\t\t\t\t\tlocation = getClasspathJar((IFile)resource);", "-\t\t\t\t\t} else if (resource instanceof IContainer) {", "-\t\t\t\t\t\tlocation = ClasspathLocation.forBinaryFolder((IContainer) target, false); // is library folder not output folder", "-\t\t\t\t\t}", "-\t\t\t\t\tlocations.add(location);", "-\t\t\t\t} else if (target instanceof File) {", "-\t\t\t\t\tString fileName = path.lastSegment();", "-\t\t\t\t\tif (!Util.isArchiveFileName(fileName)) continue nextEntry;", "-\t\t\t\t\tlocations.add(getClasspathJar(path.toOSString()));", "-\t\t\t\t}", "-\t\t\t\tcontinue nextEntry;", "+\t\t\t\tlocations[i] = new ClasspathSourceDirectory((IContainer)target, encoding);", "+\t\t\t} else {", "+\t\t\t\tlocations[i] = ClasspathLocation.forBinaryFolder((IContainer) target, false);", "+\t\t\t}", "-", "-\tthis.locations = new ClasspathLocation[locations.size()];", "-\tlocations.toArray(this.locations);", "+\tthis.locations = locations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8246b088297e5850e28519544848535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r     private Object getReflectionValue(final Expression expr, final Class targetType)\r         throws Throwable", "signatureAfterChange": "      private Object getReflectionValue(final Object value, final Class targetType)         throws Throwable", "diff": ["-\r", "-    private Object getReflectionValue(final Expression expr, final Class targetType)\r", "-        throws Throwable\r", "-    {\r", "-        if( expr == null ) return null;\r", "-\t\tfinal Object constantValue = expr.resolveConstantExpressionValue();\r", "-\t\tif( constantValue != null ) return constantValue;\r", "-        switch(expr.getNodeType())\r", "-        {\r", "-        case ASTNode.SIMPLE_NAME:\r", "-        case ASTNode.QUALIFIED_NAME:\r", "-            final Name name = (Name)expr;\r", "-            final IBinding nameBinding = name.resolveBinding();\r", "-            if( nameBinding.getKind() == IBinding.VARIABLE ) {\r", "-                final IVariableBinding varBinding = (IVariableBinding)nameBinding;\r", "-                final ITypeBinding declaringClass = varBinding.getDeclaringClass();\r", "-                if( declaringClass != null ){\r", "-                    final String className = new String( declaringClass.getBinaryName() );\r", "-                    final Class clazz = expr.getClass().getClassLoader().loadClass( className );\r", "-                    final Field returnedField = clazz.getField( varBinding.getName() );\r", "-                    if( returnedField.getType() != targetType )\r", "-                        throw new ClassCastException( targetType.getName() );\r", "-                    return returnedField.get(null);\r", "-                }\r", "-            }\r", "-            break;\r", "-        case ASTNode.ARRAY_INITIALIZER:\r", "-            assert targetType.isArray();\r", "-            final Class componentType = targetType.getComponentType();\r", "-            final char componentTypeName = componentType.getName().charAt(0);\r", "-            final ArrayInitializer arrayInit = (ArrayInitializer)expr;\r", "-            final List<Expression> exprs = arrayInit.expressions();\r", "-            final int length = exprs == null ? 0 : exprs.size();\r", "-            final Object array = Array.newInstance(componentType, length);\r", "-            if( length == 0) return array;\r", "-\r", "-            for( int i=0; i<length; i++ ){\r", "-                final Expression element = exprs.get(i);\r", "-                final Object returnObj = getReflectionValue( element, componentType );\r", "-                // fill in the array.\r", "-                // If it is an array of some primitive type, we will need to unwrap it.\r", "-                if( componentType.isPrimitive() ){\r", "-                    if( componentType == boolean.class ){\r", "-                        final Boolean bool = (Boolean)returnObj;\r", "-                        Array.setBoolean( array, i, bool.booleanValue());\r", "-                    }\r", "-                    else if( componentType == byte.class ){\r", "-                        final Byte b = (Byte)returnObj;\r", "-                        Array.setByte( array, i, b.byteValue() );\r", "-                    }\r", "-                    else if( componentType == char.class ){\r", "-                        final Character c = (Character)returnObj;\r", "-                        Array.setChar( array, i, c.charValue() );\r", "-                    }\r", "-                    else if( componentType == double.class ){\r", "-                        final Double d = (Double)returnObj;\r", "-                        Array.setDouble( array, i, d.doubleValue() );\r", "-                    }\r", "-                    else if( componentType == float.class ){\r", "-                        final Float f = (Float)returnObj;\r", "-                        Array.setFloat( array, i, f.floatValue() );\r", "-                    }\r", "-                    else if( componentType == int.class ){\r", "-                        final Integer integer = (Integer)returnObj;\r", "-                        Array.setInt( array, i, integer.intValue() );\r", "-                    }\r", "-                    else if( componentType == long.class ){\r", "-                        final Long l = (Long)returnObj;\r", "-                        Array.setLong( array, i, l.longValue() );\r", "-                    }\r", "-                    else if( componentType == short.class ){\r", "-                        final Short s = (Short)returnObj;\r", "-                        Array.setShort( array, i, s.shortValue() );\r", "-                    }\r", "-                    else {\r", "-                        throw new IllegalStateException(\"unrecognized primitive type: \"  + componentType );\r", "-                    }\r", "-                }\r", "-                else{\r", "-                    Array.set( array, i, returnObj );\r", "-                }\r", "-            }\r", "-            return array;\r", "-        case ASTNode.NORMAL_ANNOTATION:\r", "-        case ASTNode.MARKER_ANNOTATION:\r", "-        case ASTNode.SINGLE_MEMBER_ANNOTATION:\r", "-            return Factory.createAnnotationMirror((Annotation)expr, _annotated, _env);        \r", "-        case ASTNode.TYPE_LITERAL:\r", "-            throw new IllegalStateException(\"illegal expression \" + expr);     \r", "-        }\r", "-\r", "-        return null;\r", "-    }\r", "+", "+    private Object getReflectionValue(final Object value, final Class targetType)", "+        throws Throwable", "+    {", "+        if( value == null ) return null;", "+        else if(value instanceof Boolean   ||", "+\t\t\t\tvalue instanceof Byte      ||", "+\t\t\t\tvalue instanceof Character ||", "+\t\t\t\tvalue instanceof Double    || ", "+\t\t\t\tvalue instanceof Float     ||", "+\t\t\t\tvalue instanceof Integer   ||", "+\t\t\t\tvalue instanceof Long      ||", "+\t\t\t\tvalue instanceof Short     ||", "+\t\t\t\tvalue instanceof String ) ", "+\t\t\treturn value;", "+        else if( value instanceof IVariableBinding )", "+\t\t{", "+\t\t\tfinal IVariableBinding varBinding = (IVariableBinding)value;", "+            final ITypeBinding declaringClass = varBinding.getDeclaringClass();", "+            if( declaringClass != null ){", "+                final String className = new String( declaringClass.getBinaryName() );", "+                final Class clazz = value.getClass().getClassLoader().loadClass( className );", "+                final Field returnedField = clazz.getField( varBinding.getName() );", "+                if( returnedField.getType() != targetType )", "+                    throw new ClassCastException( targetType.getName() );", "+                return returnedField.get(null);", "+            }", "+\t\t}", "+        else if (value instanceof Object[])", "+\t\t{", "+\t\t\tfinal Object[] elements = (Object[])value;", "+\t\t\tassert targetType.isArray();", "+            final Class componentType = targetType.getComponentType();", "+            final char componentTypeName = componentType.getName().charAt(0);", "+            final int length = elements.length;;", "+            final Object array = Array.newInstance(componentType, length);", "+            if( length == 0) return array;", "+", "+            for( int i=0; i<length; i++ ){                ", "+                final Object returnObj = getReflectionValue( elements[i], componentType );", "+                // fill in the array.", "+                // If it is an array of some primitive type, we will need to unwrap it.", "+                if( componentType.isPrimitive() ){", "+                    if( componentType == boolean.class ){", "+                        final Boolean bool = (Boolean)returnObj;", "+                        Array.setBoolean( array, i, bool.booleanValue());", "+                    }", "+                    else if( componentType == byte.class ){", "+                        final Byte b = (Byte)returnObj;", "+                        Array.setByte( array, i, b.byteValue() );", "+                    }", "+                    else if( componentType == char.class ){", "+                        final Character c = (Character)returnObj;", "+                        Array.setChar( array, i, c.charValue() );", "+                    }", "+                    else if( componentType == double.class ){", "+                        final Double d = (Double)returnObj;", "+                        Array.setDouble( array, i, d.doubleValue() );", "+                    }", "+                    else if( componentType == float.class ){", "+                        final Float f = (Float)returnObj;", "+                        Array.setFloat( array, i, f.floatValue() );", "+                    }", "+                    else if( componentType == int.class ){", "+                        final Integer integer = (Integer)returnObj;", "+                        Array.setInt( array, i, integer.intValue() );", "+                    }", "+                    else if( componentType == long.class ){", "+                        final Long l = (Long)returnObj;", "+                        Array.setLong( array, i, l.longValue() );", "+                    }", "+                    else if( componentType == short.class ){", "+                        final Short s = (Short)returnObj;", "+                        Array.setShort( array, i, s.shortValue() );", "+                    }", "+                    else {", "+                        throw new IllegalStateException(\"unrecognized primitive type: \"  + componentType );", "+                    }", "+                }", "+                else{", "+                    Array.set( array, i, returnObj );", "+                }", "+            }", "+\t\t}", "+\t\t// caller should have caught this case.", "+        else if( value instanceof ITypeBinding )", "+\t\t\tthrow new IllegalStateException();", "+\t\t", "+        else if( value instanceof IResolvedAnnotation )", "+\t\t{", "+\t\t\treturn Factory.createAnnotationMirror((IResolvedAnnotation)value, _annotated, _env);", "+\t\t}", "+", "+        return null;", "+    }"]}], "num": 26999}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9b325df51a2457fc270a613353717ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "695cb0616cfce234550dbaa02e6088e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "commitAfterChange": "0768a01c46bf55c1ad1aefdbfa14c12019b43872", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "signatureAfterChange": " \tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "diff": ["-\t\tArrayList infos = new ArrayList();", "-\t\tMarkerInfo markerInfo;", "-\t\tint markerIndex = 0;", "-\t\twhile (contents.indexOf(\"/*start\" + ++markerIndex + \"*/\") != -1) {", "-\t\t\tmarkerInfo = new MarkerInfo(contents, markerIndex);", "-\t\t\tinfos.add(markerInfo);", "-\t\t\tcontents = markerInfo.source;", "-\t\t}", "-\t\tif (contents.indexOf(\"/*start*/\") != -1 || infos.size() == 0) {", "-\t\t\tmarkerInfo = new MarkerInfo(contents);", "-\t\t\tinfos.add(markerInfo);", "-\t\t\tcontents = markerInfo.source;", "-\t\t}", "+\t\tMarkerInfo markerInfo = new MarkerInfo(contents);", "+\t\tcontents = markerInfo.source;", "-\t\tint length = infos.size();", "-\t\tASTNode[] nodes = new ASTNode[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tMarkerInfo info = (MarkerInfo) infos.get(i);", "-\t\t\tnodes[i] = findNode(unit, info);", "-\t\t}", "-\t\t", "+\t\tASTNode[] nodes = findNodes(unit, markerInfo);", "+\t\tif (nodes.length == 0)", "+\t\t\treturn new ASTNode[] {unit};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8231df3a1404ae64e4d8012595492d91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "105a4ca655d44213ffe23400e85e9364ac7516e4", "commitAfterChange": "3e28b00b3ff1ea2877f4a4e8b245ac6023e86b59", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate ASTNode buildAST(String contents) throws JavaModelException", "signatureAfterChange": " \tprivate ASTNode buildAST(String contents) throws JavaModelException", "diff": ["-\t\tString markerStart = \"/*start*/\";", "-\t\tString markerEnd = \"/*end*/\";", "-\t\tfinal int astStart = contents.indexOf(markerStart); // start of AST inclusive", "-\t\tcontents = new String(CharOperation.replace(contents.toCharArray(), markerStart.toCharArray(), CharOperation.NO_CHAR));", "-\t\tfinal int astEnd = contents.indexOf(markerEnd); // end of AST exclusive", "-\t\tcontents = new String(CharOperation.replace(contents.toCharArray(), markerEnd.toCharArray(), CharOperation.NO_CHAR));", "+\t\tMarkerInfo markerInfo = new MarkerInfo(contents);", "+\t\tcontents = markerInfo.source;", "-\t\tclass EndVisit extends RuntimeException {", "-\t\t\tprivate static final long serialVersionUID = 1L;", "-\t\t}", "-\t\tclass Visitor extends ASTVisitor {", "-\t\t\tASTNode found;", "-\t\t\tpublic void preVisit(ASTNode node) {", "-\t\t\t\tif (node instanceof CompilationUnit) return;", "-\t\t\t\tif (node.getStartPosition() == astStart && node.getStartPosition() + node.getLength() == astEnd) {", "-\t\t\t\t\tthis.found = node;", "-\t\t\t\t\tthrow new EndVisit();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tVisitor visitor = new Visitor();", "-\t\ttry {", "-\t\t\tunit.accept(visitor);", "-\t\t} catch (EndVisit e) {", "-\t\t\treturn visitor.found;", "-\t\t}", "-\t\treturn null;", "+\t\treturn findNode(unit, markerInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f08952f4e08243862b0ba0b3046a9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 51, "signatureBeforeChange": " \t \t \tprivate void assertNoOverlap(CopySourceInfo copySource)", "signatureAfterChange": " \t \t \tprivate void assertNoOverlap(ListRewriteEvent listEvent, int indexFirst, int indexLast, List innerList)", "diff": ["-\t", "-\tprivate void assertNoOverlap(CopySourceInfo copySource) {", "-\t\tASTNode parent= copySource.parent;", "-\t\tStructuralPropertyDescriptor childProperty= copySource.childProperty;", "-\t\tASTNode first= copySource.getStartNode();", "-\t\tASTNode last= copySource.getEndNode();", "-\t\tif (this.rangeCopySources != null) {", "-\t\t\tfor (Iterator iter= this.rangeCopySources.iterator(); iter.hasNext();) {", "-\t\t\t\tCopySourceInfo info= (CopySourceInfo) iter.next();", "-\t\t\t\tif (info.parent == parent && info.childProperty == childProperty) {", "-\t\t\t\t\tint currStart= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "-\t\t\t\t\tint currEnd= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "-\t\t\t\t\tif (currStart < indexFirst && currEnd < indexLast && currEnd >= indexFirst", "-\t\t\t\t\t\t\t|| currStart > indexFirst && currStart <= currEnd && currEnd > indexLast) {", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"Range overlapps with an existing copy or move range\"); //$NON-NLS-1$ ", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t", "+\tprivate void assertNoOverlap(ListRewriteEvent listEvent, int indexFirst, int indexLast, List innerList) {", "+\t\tfor (Iterator iter= innerList.iterator(); iter.hasNext();) {", "+\t\t\tNodeRangeInfo curr= (NodeRangeInfo) iter.next();", "+\t\t\tint currStart= listEvent.getIndex(curr.getStartNode(), ListRewriteEvent.BOTH);", "+\t\t\tint currEnd= listEvent.getIndex(curr.getEndNode(), ListRewriteEvent.BOTH);", "+\t\t\tif (currStart < indexFirst && currEnd < indexLast && currEnd >= indexFirst", "+\t\t\t\t\t|| currStart > indexFirst && currStart <= currEnd && currEnd > indexLast) {", "+\t\t\t\tthrow new IllegalArgumentException(\"Range overlapps with an existing copy or move range\"); //$NON-NLS-1$ "]}], "num": 46585}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d060047a8e2b29b0c786cbe1ae4fea47", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da02220617780610138550f21d0e79c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic ArrayCreation convert(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression expression)", "signatureAfterChange": "  \tpublic ArrayCreation convert(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression expression)", "diff": ["+\t\t\tif (expression.annotationsOnDimensions != null) {", "+\t\t\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\t\t\tarrayType.setFlags(arrayType.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t} else {", "+\t\t\t\t\tsetArrayTypeAnnotationsAndSource(arrayType, expression.annotationsOnDimensions);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tarrayType = this.ast.newArrayType(type, dimensionsLength);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\tcompleteRecord(arrayType, expression);", "-\t\t\t}", "-\t\t\tint start = type.getStartPosition();", "-\t\t\tint end = type.getStartPosition() + type.getLength();", "-\t\t\tint previousSearchStart = end - 1;", "-\t\t\tArrayType componentType = (ArrayType) type.getParent();", "-\t\t\tfor (int i = 0; i < dimensionsLength; i++) {", "-\t\t\t\tpreviousSearchStart = retrieveRightBracketPosition(previousSearchStart + 1, this.compilationUnitSourceLength);", "-\t\t\t\tcomponentType.setSourceRange(start, previousSearchStart - start + 1);", "-\t\t\t\tcomponentType = (ArrayType) componentType.getParent();", "-\t\t\t}", "-\t\t}", "-\t\tif (expression.annotationsOnDimensions != null) {", "-\t\t\tannotateType(arrayType, expression.annotationsOnDimensions);", "+\t\t\tarrayType = convertToArray(type, type.getStartPosition(), -1, dimensionsLength, expression.annotationsOnDimensions);", "-\t\t\trecordNodes(arrayType, expression);", "+\t\t\tcompleteRecord(arrayType, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b327277719ed97bbbb15c5ad25b13318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "f82e4d05a4f1b95dab4840ba12da04e4c98e8e79", "commitAfterChange": "8cef40b9e9d49dc2a5309d2fd231e8381ea450b1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["+", "-\tIMarker[] markers =", "-\t\tcurrentProject.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE);", "-\tboolean buildPathHasError = false;", "-\tIClasspathEntry[] classpath = null;", "-\tif (javaProject != null && (classpath = javaProject.getRawClasspath()) == JavaProject.INVALID_CLASSPATH) {", "-\t\t// the .classpath file could not be read", "-\t\tbuildPathHasError = true;", "-\t} else {", "-\t\tfor (int i = 0, l = markers.length; i < l; i++) {", "-\t\t\tIMarker marker = markers[i];", "-\t\t\tif (((Integer)marker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_ERROR) {", "-\t\t\t\tbuildPathHasError = true;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (buildPathHasError) {", "+\tIClasspathEntry[] classpath = javaProject.getRawClasspath();", "+\tif (isClasspathBroken(classpath, currentProject)) {", "-\t\t\tif (prereq.getRawClasspath() != JavaProject.INVALID_CLASSPATH)", "+\t\t\tIClasspathEntry[] prereqClasspath = prereq.getRawClasspath();", "+\t\t\tif (prereqClasspath != JavaProject.INVALID_CLASSPATH)", "-\t\t\tmarker.setAttribute(IMarker.MESSAGE, Util.bind(\"build.prereqProjectWasNotBuilt\", p.getName())); //$NON-NLS-1$", "+\t\t\tmarker.setAttribute(IMarker.MESSAGE,", "+\t\t\t\tisClasspathBroken(prereqClasspath, p)", "+\t\t\t\t\t? Util.bind(\"build.prereqProjectHasClasspathProblems\", p.getName())", "+\t\t\t\t\t: Util.bind(\"build.prereqProjectMustBeRebuilt\", p.getName())); //$NON-NLS-1$"]}], "num": 38147}
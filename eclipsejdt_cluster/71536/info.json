{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "013e02ebd4d7fdc7a6c1e7d907002bed", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc078371cb222c88fc1ef274e61f753", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "26bbc0f1d79a90c550f0bbb95cc6eeae2aa4e3bf", "commitAfterChange": "3b79f63e00cbebb1fe326313cd6905bd51bae92d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void enterInitializer( \tint declarationSourceStart, \tint modifiers)", "signatureAfterChange": " public void enterInitializer(int declarationSourceStart, int modifiers)", "diff": ["-public void enterInitializer(", "-\tint declarationSourceStart,", "-\tint modifiers) {", "-\t\tJavaElementInfo parentInfo = (JavaElementInfo) this.infoStack.peek();", "-\t\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "-\t\tInitializer handle = null;", "+public void enterInitializer(int declarationSourceStart, int modifiers) {", "+\tObject parentInfo = this.infoStack.peek();", "+\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "+\tInitializer handle = null;", "-\t\tif (parentHandle.getElementType() == IJavaElement.TYPE) {", "-\t\t\thandle = createInitializer(parentHandle);", "-\t\t}", "-\t\telse {", "-\t\t\tAssert.isTrue(false); // Should not happen", "-\t\t}", "-\t\tresolveDuplicates(handle);", "+\tif (parentHandle.getElementType() == IJavaElement.TYPE) {", "+\t\thandle = createInitializer(parentHandle);", "+\t}", "+\telse {", "+\t\tAssert.isTrue(false); // Should not happen", "+\t}", "+\tresolveDuplicates(handle);", "+\t", "+\taddToChildren(parentInfo, handle);", "-\t\tInitializerElementInfo info = new InitializerElementInfo();", "-\t\tinfo.setSourceRangeStart(declarationSourceStart);", "-\t\tinfo.setFlags(modifiers);", "-", "-\t\taddToChildren(parentInfo, handle);", "-\t\tthis.newElements.put(handle, info);", "-", "-\t\tthis.infoStack.push(info);", "-\t\tthis.handleStack.push(handle);", "+\tthis.infoStack.push(new int[] {declarationSourceStart, modifiers});", "+\tthis.handleStack.push(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953a94e054f7369e2961b6ba72586ed8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void enterMethod( \tint declarationStart, \tint modifiers, \tchar[] returnType, \tchar[] name, \tint nameSourceStart, \tint nameSourceEnd, \tchar[][] parameterTypes, \tchar[][] parameterNames, \tchar[][] exceptionTypes)", "signatureAfterChange": " public void enterMethod(MethodInfo methodInfo)", "diff": ["-public void enterMethod(", "-\tint declarationStart,", "-\tint modifiers,", "-\tchar[] returnType,", "-\tchar[] name,", "-\tint nameSourceStart,", "-\tint nameSourceEnd,", "-\tchar[][] parameterTypes,", "-\tchar[][] parameterNames,", "-\tchar[][] exceptionTypes) {", "+public void enterMethod(MethodInfo methodInfo) {", "-\t\tenterMethod(declarationStart, modifiers, returnType, name, nameSourceStart,", "-\t\t\tnameSourceEnd, parameterTypes, parameterNames, exceptionTypes, false);", "-}", "+\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) this.infoStack.peek();", "+\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "+\tSourceMethod handle = null;", "+\t// translate nulls to empty arrays", "+\tif (methodInfo.parameterTypes == null) {", "+\t\tmethodInfo.parameterTypes= CharOperation.NO_CHAR_CHAR;", "+\t}", "+\tif (methodInfo.parameterNames == null) {", "+\t\tmethodInfo.parameterNames= CharOperation.NO_CHAR_CHAR;", "+\t}", "+\tif (methodInfo.exceptionTypes == null) {", "+\t\tmethodInfo.exceptionTypes= CharOperation.NO_CHAR_CHAR;", "+\t}", "+\t", "+\tString[] parameterTypeSigs = convertTypeNamesToSigs(methodInfo.parameterTypes);", "+\tif (parentHandle.getElementType() == IJavaElement.TYPE) {", "+\t\thandle = new SourceMethod(parentHandle, new String(methodInfo.name), parameterTypeSigs);", "+\t}", "+\telse {", "+\t\tAssert.isTrue(false); // Should not happen", "+\t}", "+\tresolveDuplicates(handle);", "+\t", "+\tSourceMethodElementInfo info = new SourceMethodElementInfo();", "+\tinfo.setSourceRangeStart(methodInfo.declarationStart);", "+\tint flags = methodInfo.modifiers;", "+\tinfo.selector = methodInfo.name;", "+\tinfo.setNameSourceStart(methodInfo.nameSourceStart);", "+\tinfo.setNameSourceEnd(methodInfo.nameSourceEnd);", "+\tinfo.setConstructor(methodInfo.isConstructor);", "+\tinfo.setFlags(flags);", "+\tinfo.setArgumentNames(methodInfo.parameterNames);", "+\tinfo.setArgumentTypeNames(methodInfo.parameterTypes);", "+\tinfo.setReturnType(methodInfo.returnType == null ? new char[]{'v', 'o','i', 'd'} : methodInfo.returnType);", "+\tinfo.setExceptionTypeNames(methodInfo.exceptionTypes);", "+\tparentInfo.addChild(handle);", "+\tthis.newElements.put(handle, info);", "+\tthis.infoStack.push(info);", "+\tthis.handleStack.push(handle);", "+\tif (methodInfo.typeParameters != null) {", "+\t\tfor (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {", "+\t\t\tTypeParameterInfo typeParameterInfo = methodInfo.typeParameters[i];", "+\t\t\tenterTypeParameter(typeParameterInfo);", "+\t\t\texitMember(typeParameterInfo.declarationEnd);", "+\t}"]}], "num": 71536}
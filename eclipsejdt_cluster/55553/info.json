{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd4d0c70bdc552981d12d2ec5548010a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a6a1efe13a3ce61b16b9705fcde97c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void complainOnDeferredChecks(BlockScope scope, FlowInfo flowInfo)", "signatureAfterChange": " public void complainOnDeferredFinalChecks(BlockScope scope, FlowInfo flowInfo)", "diff": ["-\t", "-\tpublic void complainOnDeferredChecks(BlockScope scope, FlowInfo flowInfo) {", "-\t\t", "-\t\t// complain on final assignments in loops", "-\t\tfor (int i = 0; i < assignCount; i++) {", "-\t\t\tVariableBinding variable = finalVariables[i];", "-\t\t\tif (variable == null) continue;", "-\t\t\tboolean complained = false; // remember if have complained on this final assignment", "-\t\t\tif (variable instanceof FieldBinding) {", "-\t\t\t\tif (flowInfo.isPotentiallyAssigned((FieldBinding) variable)) {", "-\t\t\t\t\tcomplained = true;", "-\t\t\t\t\tscope.problemReporter().duplicateInitializationOfBlankFinalField(", "-\t\t\t\t\t\t(FieldBinding) variable,", "-\t\t\t\t\t\tfinalAssignments[i]);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (flowInfo.isPotentiallyAssigned((LocalVariableBinding) variable)) {", "-\t\t\t\t\tcomplained = true;", "-\t\t\t\t\tscope.problemReporter().duplicateInitializationOfFinalLocal(", "-\t\t\t\t\t\t(LocalVariableBinding) variable,", "-\t\t\t\t\t\tfinalAssignments[i]);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// any reference reported at this level is removed from the parent context where it ", "-\t\t\t// could also be reported again", "-\t\t\tif (complained) {", "-\t\t\t\tFlowContext context = parent;", "-\t\t\t\twhile (context != null) {", "-\t\t\t\t\tcontext.removeFinalAssignmentIfAny(finalAssignments[i]);", "-\t\t\t\t\tcontext = context.parent;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// check inconsistent null checks", "-\t\tfor (int i = 0; i < nullCount; i++) {", "-\t\t\tExpression expression = nullReferences[i];", "-\t\t\tif (expression == null) continue;", "-\t\t\t// final local variable", "-\t\t\tLocalVariableBinding local = expression.localVariableBinding();", "-\t\t\tswitch (nullStatus[i]) {", "-\t\t\t\tcase FlowInfo.NULL :", "-\t\t\t\t\tif (flowInfo.isDefinitelyNull(local)) {", "-\t\t\t\t\t\tnullReferences[i] = null;", "-\t\t\t\t\t\tthis.parent.recordUsingNullReference(scope, local, expression, nullStatus[i], flowInfo);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase FlowInfo.NON_NULL :", "-\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(local)) {", "-\t\t\t\t\t\tnullReferences[i] = null;", "-\t\t\t\t\t\tthis.parent.recordUsingNullReference(scope, local, expression, nullStatus[i], flowInfo);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}\t\t", "+ */", "+public void complainOnDeferredFinalChecks(BlockScope scope, FlowInfo flowInfo) {", "+\t// complain on final assignments in loops", "+\tfor (int i = 0; i < assignCount; i++) {", "+\t\tVariableBinding variable = finalVariables[i];", "+\t\tif (variable == null) continue;", "+\t\tboolean complained = false; // remember if have complained on this final assignment", "+\t\tif (variable instanceof FieldBinding) {", "+\t\t\tif (flowInfo.isPotentiallyAssigned((FieldBinding) variable)) {", "+\t\t\t\tcomplained = true;", "+\t\t\t\tscope.problemReporter().duplicateInitializationOfBlankFinalField(", "+\t\t\t\t\t(FieldBinding) variable,", "+\t\t\t\t\tfinalAssignments[i]);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (flowInfo.isPotentiallyAssigned((LocalVariableBinding) variable)) {", "+\t\t\t\tcomplained = true;", "+\t\t\t\tscope.problemReporter().duplicateInitializationOfFinalLocal(", "+\t\t\t\t\t(LocalVariableBinding) variable,", "+\t\t\t\t\tfinalAssignments[i]);", "+\t\t\t}", "+\t\t}", "+\t\t// any reference reported at this level is removed from the parent context where it ", "+\t\t// could also be reported again", "+\t\tif (complained) {", "+\t\t\tFlowContext context = parent;", "+\t\t\twhile (context != null) {", "+\t\t\t\tcontext.removeFinalAssignmentIfAny(finalAssignments[i]);", "+\t\t\t\tcontext = context.parent;", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "868d025bca437e26f34b82cc48772598", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public final String getLocalizedMessage(int id, String[] problemArguments)", "signatureAfterChange": " public final String getLocalizedMessage(int id, String[] problemArguments)", "diff": ["-", "-\t// dequalify problem arguments, using following heuristic:", "-\t// - if no segment is uppercased, then keep it all", "-\t// - if one segment is uppercased, then only preserve the trailing portion, starting from this segment", "-\t// e.g. \tjava.lang.Object --> Object", "-\t// \t\tint --> int", "-\t//\t\t\tjava.lang --> java.lang", "-\t//\t\t\tp.X.Y --> X.Y", "-\tfor (int i = 0; i < problemArguments.length; i++){", "-\t\tString problemArgument = problemArguments[i];", "-\t\tint length = problemArgument.length();", "-\t\t", "-\t\tif (length > 0 && Character.isLowerCase(problemArgument.charAt(0))) {", "-\t\t\tint start = 0;", "-\t\t\twhile (start < length) {", "-\t\t\t\tint index = problemArgument.indexOf('.', start);", "-\t\t\t\tif (index == -1) break;", "-\t\t\t\tif (index < length && Character.isUpperCase(problemArgument.charAt(index+1))){", "-\t\t\t\t\tproblemArguments[i] = problemArgument.substring(index+1);", "-\t\t\t\t}", "-\t\t\t\tstart = index+1;", "-\t\t\t}", "-\t\t}", "-\t}"]}], "num": 55553}
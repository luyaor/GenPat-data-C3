{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23b599d4abb0a517d68dc23364bc0ad1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3cdc049a72348c1b4bb388f8dbbb7d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  \tpublic boolean visit(SuperMethodInvocation node)", "signatureAfterChange": "  \tpublic boolean visit(SuperMethodInvocation node)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn super.visit(node);", "+\t\tfinal Name qualifier = node.getQualifier();", "+\t\tif (qualifier != null) {", "+\t\t\tqualifier.accept(this);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamesuper);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "+", "+\t\tfinal List arguments = node.arguments();", "+\t\tfinal int argumentsLength = arguments.size();", "+\t\tif (argumentsLength != 0) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tif (argumentsLength > 1) {", "+\t\t\t\tAlignment2 argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "+\t\t\t\t\t\targumentsLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "+\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "+\t\t} else {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "+\t\t}\t\t\t", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55aaf7a818ce04d6df86868e577716f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-\t\tif (typeDeclaration.isInterface()) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameinterface, true); ", "-\t\t} else {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameclass, true); ", "-\t\t}", "+        switch(typeDeclaration.getKind()) {", "+        \tcase IGenericType.CLASS :", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameclass, true); ", "+        \t\tbreak;", "+        \tcase IGenericType.INTERFACE :", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameinterface, true); ", "+        \t\tbreak;", "+        \tcase IGenericType.ENUM :", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameenum, true); ", "+        \t\tbreak;", "+        \tcase IGenericType.ANNOTATION_TYPE :", "+        \t\t// TODO (olivier) need to be merged with format(AnnotationTypeDecl)", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAT, this.preferences.insert_space_before_at_in_annotation_type_declaration);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameinterface, this.preferences.insert_space_after_at_in_annotation_type_declaration); ", "+        \t\tbreak;", "+        }", "-\t\t\t", "+\t\t\tint alignment_for_superinterfaces;", "+\t\t\tswitch(typeDeclaration.getKind()) {", "+\t\t\t\tcase IGenericType.ENUM :", "+\t\t\t\t\talignment_for_superinterfaces = this.preferences.alignment_for_superinterfaces_in_enum_declaration;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\talignment_for_superinterfaces = this.preferences.alignment_for_superinterfaces_in_type_declaration;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-\t\t\t\t\tthis.preferences.alignment_for_superinterfaces_in_type_declaration,", "+\t\t\t\t\talignment_for_superinterfaces,", "-\t\t\t\t\tif (typeDeclaration.isInterface()) {", "+\t\t\t\t\tif (typeDeclaration.getKind() == IGenericType.INTERFACE) {", "-\t\tString class_declaration_brace = this.preferences.brace_position_for_type_declaration;", "-", "+\t\tString class_declaration_brace;", "+\t\tboolean space_before_opening_brace;", "+\t\tswitch(typeDeclaration.getKind()) {", "+\t\t\tcase IGenericType.ENUM :", "+\t\t\t\tclass_declaration_brace = this.preferences.brace_position_for_enum_declaration;", "+\t\t\t\tspace_before_opening_brace = this.preferences.insert_space_before_opening_brace_in_enum_declaration;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tclass_declaration_brace = this.preferences.brace_position_for_type_declaration;", "+\t\t\t\tspace_before_opening_brace = this.preferences.insert_space_before_opening_brace_in_type_declaration;", "+\t\t\t\tbreak;", "+\t\t}", "-\t\tformatTypeOpeningBrace(class_declaration_brace, this.preferences.insert_space_before_opening_brace_in_type_declaration, typeDeclaration);", "+\t\tformatTypeOpeningBrace(class_declaration_brace, space_before_opening_brace, typeDeclaration);", "-\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "+\t\t", "+\t\tboolean indent_body_declarations_compare_to_header;", "+\t\tswitch(typeDeclaration.getKind()) {", "+\t\t\tcase IGenericType.ENUM :", "+\t\t\t\tindent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_enum_declaration_header;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tindent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_type_header;", "+\t\t\t\tbreak;", "+\t\t}\t\t", "+\t\tif (indent_body_declarations_compare_to_header) {", "+\t\t}", "+\t\t", "+\t\tif (typeDeclaration.getKind() == IGenericType.ENUM) {", "+\t\t\tFieldDeclaration[] fieldDeclarations = typeDeclaration.fields;", "+\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\tint length = fieldDeclarations.length;", "+\t\t\t\tloop: for (int i = 0; i < length; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDeclaration.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (i < length) {", "+\t\t\t\t\t\tfieldDeclaration.traverse(this, typeDeclaration.initializerScope);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t\tif (isNextToken(TerminalTokens.TokenNameSEMICOLON)) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t}", "-\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "+\t\tif (indent_body_declarations_compare_to_header) {"]}], "num": 11373}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49a4dd5f05760f868ec3650cb7eafdb1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac83e3eb8d22352cbd2548e2c966ada5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/WorkingCopyCleanupListener.java", "commitBeforeChange": "4a9dbcb223c65a26348db68f3ba0775c9668cb28", "commitAfterChange": "ea8e63f616ba93be45fa6f7194a531b08059ef99", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate void processElementDelta( IJavaElementDelta delta )", "signatureAfterChange": " \t \tprivate void processElementDelta( IJavaElementDelta delta )", "diff": ["-\t\t\t//", "-\t\t\t// cu.isWorkingCopy() doesn't work here.  For back-compat reasons, that always returns ", "-\t\t\t// true for non-primary working copies, so we use the following test to see if a working copy", "-\t\t\t// has been discarded.", "-\t\t\t//", "-\t\t\t// TODO:  remove reference to jdt-internal class", "-\t\t\t//", "-\t\t\torg.eclipse.jdt.internal.core.CompilationUnit cu2 = (org.eclipse.jdt.internal.core.CompilationUnit)cu;\t\t\t", "-\t\t\tboolean workingCopyDiscarded = cu2.isPrimary() ? !cu.isWorkingCopy() : cu2.getPerWorkingCopyInfo() == null;", "-", "+\t\t\tboolean workingCopyDiscarded = ", "+\t\t\t\tcu.getOwner() == null ? !cu.isWorkingCopy() : !cu.exists();", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6102da971c6e218407e322a0a353c13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/ElementChangedListener.java", "commitBeforeChange": "0b27b465378d2c4de912ede755b716ec1bc3271b", "commitAfterChange": "e8b8473542c4e4cb01bff6dc692097c4a3eca5c6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate void processElementDelta( IJavaElementDelta delta )", "signatureAfterChange": " \t \tprivate void processElementDelta( IJavaElementDelta delta )", "diff": ["+\t\t\t//", "+\t\t\t// handle case where a working copy is discarded (e.g., an editor is closed).  If an editor ", "+\t\t\t// is noopen, then the compilation unit's isWorkingCopy() will return false.", "+\t\t\t//", "+\t\t\t", "-\t\t\t\t", "-\t\t\t// handle case where a parent editor is closed.  If an editor is open, then ", "-\t\t\t// the compilation unit's isWorkingCopy() will return false.", "-\t\t\tif ( ! cu.isWorkingCopy() )", "+", "+\t\t\t//", "+\t\t\t// cu.isWorkingCopy() doesn't work here.  For back-compat reasons, that always returns ", "+\t\t\t// true for non-primary working copies, so we use the following test to see if a working copy", "+\t\t\t// has been discarded.", "+\t\t\t//", "+\t\t\t// TODO:  remove reference to jdt-internal class", "+\t\t\t//", "+\t\t\torg.eclipse.jdt.internal.core.CompilationUnit cu2 = (org.eclipse.jdt.internal.core.CompilationUnit)cu;\t\t\t", "+\t\t\tboolean workingCopyDiscarded = cu2.isPrimary() ? !cu.isWorkingCopy() : cu2.getPerWorkingCopyInfo() == null;", "+", "+\t\t\tif ( workingCopyDiscarded )"]}], "num": 2748}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a56b33af3e4c1f1ffa9fcd81fc8df9a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1be7265644a30c789926d0aca97bc801", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 402, "methodNumberAfterChange": 429, "signatureBeforeChange": " protected boolean resumeAfterRecovery()", "signatureAfterChange": " protected boolean resumeAfterRecovery()", "diff": ["-", "-\t// reset internal stacks ", "-\tthis.resetStacks();", "-\tthis.resetModifiers();", "+\tif(!this.methodRecoveryActivated && !this.statementRecoveryActivated) {", "+\t\t", "+\t\t// reset internal stacks ", "+\t\tthis.resetStacks();", "+\t\tthis.resetModifiers();", "+\t\t", "+\t\t/* attempt to move checkpoint location */", "+\t\tif (!this.moveRecoveryCheckpoint()) {", "+\t\t\treturn false;", "+\t\t}", "-\t/* attempt to move checkpoint location */", "-\tif (!this.moveRecoveryCheckpoint()) {", "+\t\t// only look for headers", "+\t\tif (this.referenceContext instanceof CompilationUnitDeclaration){", "+\t\t\tgoForHeaders();", "+\t\t\tthis.diet = true; // passed this point, will not consider method bodies", "+\t\t\treturn true;", "+\t\t}", "+\t\t", "+\t\t// does not know how to restart", "+\t\treturn false;", "+\t} else if(!this.statementRecoveryActivated) {", "+\t\t", "+\t\t// reset internal stacks ", "+\t\tthis.resetStacks();", "+\t\tthis.resetModifiers();", "+\t\t", "+\t\t/* attempt to move checkpoint location */", "+\t\tif (!this.moveRecoveryCheckpoint()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t// only look for headers", "+\t\tgoForHeaders();", "+\t\treturn true;", "+\t} else {", "-", "-\t// only look for headers", "-\tif (this.referenceContext instanceof CompilationUnitDeclaration){", "-\t\tgoForHeaders();", "-\t\tthis.diet = true; // passed this point, will not consider method bodies", "-\t\treturn true;", "-\t}", "-\t// does not know how to restart", "-\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f155a5fa9294a59ee6ba65870cd0f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "commitAfterChange": "a460dab1d90a50493c5778c6266a2505ebe8bca6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean equals(Object object)", "signatureAfterChange": " \tpublic boolean equals(Object object)", "diff": ["+\t\t\t\treturn false;", "+", "+\t\t\tif (this.isCleaningOutputLocation != otherEntry.isCleaningOutputLocation())", "+\t\t\t", "+\t\t\totherPath = otherEntry.getOutputLocation();", "+\t\t\tif (this.specificOutputLocation == null) {", "+\t\t\t\tif (otherPath != null)", "+\t\t\t\t\treturn false;", "+\t\t\t} else {", "+\t\t\t\tif (!this.specificOutputLocation.equals(otherPath))", "+\t\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3194165e905d8b2a34881e49d1766cf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "commitAfterChange": "f45c88f3e7a99f05a0822482d3d6807236a1c216", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic boolean equals(Object object)", "signatureAfterChange": " \tpublic boolean equals(Object object)", "diff": ["+\t\t\tif (!equalPatterns(this.accessibleFiles, otherEntry.getAccessibleFiles()))", "+\t\t\t\treturn false;", "+\t\t\tif (!equalPatterns(this.nonAccessibleFiles, otherEntry.getNonAccessibleFiles()))", "+\t\t\t\treturn false;", "+\t\t\tif (!equalAttributes(this.extraAttributes, otherEntry.getExtraAttributes()))", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "380ec860e135af140ad22f7c7656a576", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "8376377bee92e0d16cfa404c8d1e948dcf5be147", "commitAfterChange": "0a6cb9139841c5f6143bc94201bfcbd6024601de", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "signatureAfterChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "diff": ["+\t\t\t\t\t// check custom outputs", "+\t\t\t\t\tIPath entryOutput = entry.getOutputLocation();", "+\t\t\t\t\tIPath otherOutput = other.getOutputLocation();", "+\t\t\t\t\tif (entryOutput == null) {", "+\t\t\t\t\t\tif (otherOutput != null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (!entryOutput.equals(otherOutput))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// check exclusion patterns"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f806a9b77228286e8e00a2ce599948c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "commitAfterChange": "eba08540864c5a072bab6eda44e20e08ad2dd7a0", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "diff": ["+\t\tif (level >= AST.JLS8) {", "+\t\t\tif (!safeSubtreeMatch(node.getReceiverType(), o.getReceiverType())) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (!safeSubtreeMatch(node.getReceiverQualifier(), o.getReceiverQualifier())) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89f6a13ef40b22f5d677afb731eb8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "756bb6bed26516f6a7f37d505e2052383d6cc457", "commitAfterChange": "4859598654fee7e1f981761dd77f16f864bb4009", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean isEqualTo(IBinding other)", "signatureAfterChange": " \tpublic boolean isEqualTo(IBinding other)", "diff": ["-\t\t\treturn BindingComparator.isEqual(this.binding, otherBinding);", "+\t\t\tif (BindingComparator.isEqual(this.binding, otherBinding)) {", "+\t\t\t\tIMethodBinding declaringMethod = this.getDeclaringMethod();", "+\t\t\t\tIMethodBinding otherDeclaringMethod = ((VariableBinding) other).getDeclaringMethod();", "+\t\t\t\tif (declaringMethod == null) {", "+\t\t\t\t\tif (otherDeclaringMethod != null) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\treturn declaringMethod.isEqualTo(otherDeclaringMethod);", "+\t\t\t}", "+\t\t\treturn false;"]}], "num": 61495}
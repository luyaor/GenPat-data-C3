{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea4ab4df5f05c5a0f6c1915791cbbaf0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10bc4b67e3fa6f09edc375f10edc972f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "10d0299472db75b0d2601fb1ed8fd13d430fef5a", "commitAfterChange": "1d1bcfc5dd72fdf22291e7342487bb93d58df5c4", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 102, "signatureBeforeChange": "  \tprivate void findParameterizedType(TypeReference ref, Scope scope)", "signatureAfterChange": "  \tprivate void findParameterizedType(TypeReference ref, Scope scope)", "diff": ["-\t\t\t\tcreateTypeProposal(refBinding, refBinding.qualifiedSourceName(), IAccessRule.K_ACCESSIBLE, CharOperation.NO_CHAR, relevance);", "+\t\t\t\tcreateTypeProposal(", "+\t\t\t\t\t\trefBinding,", "+\t\t\t\t\t\trefBinding.qualifiedSourceName(),", "+\t\t\t\t\t\tIAccessRule.K_ACCESSIBLE,", "+\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\trelevance,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tfalse);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a08300ef120154f94726925b702ae512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1d3824feb74dac2cd72f42f67996821e25271c63", "commitAfterChange": "9f02272e8245618968be36ae4ecb54a3d73ce22b", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly, \t\tboolean staticFieldsAndMethodOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tScope scope)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly, \t\tboolean staticFieldsAndMethodOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tScope scope)", "diff": ["-\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\tcreateTypeProposal(memberType, memberType.qualifiedSourceName(), IAccessRule.K_ACCESSIBLE, completionName, relevance);", "-\t\t\t}", "+\t\t\tcreateTypeProposal(memberType, memberType.qualifiedSourceName(), IAccessRule.K_ACCESSIBLE, completionName, relevance);"]}], "num": 5550}
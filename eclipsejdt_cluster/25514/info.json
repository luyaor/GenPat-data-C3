{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "154f443868bc91b8badd6f385298bd10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6accfd7d524a08915dfd7135b4f0d9b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "a6b76fc7d7890cbbcb2fc001b8031466dd0ad995", "commitAfterChange": "8c05bff0d88a6a537ed2accc1c62c5430e927aee", "methodNumberBeforeChange": 348, "methodNumberAfterChange": 348, "signatureBeforeChange": " public void typeHiding(TypeParameter typeParam, Binding hidden)", "signatureAfterChange": " public void typeHiding(TypeDeclaration typeDecl, TypeVariableBinding hiddenTypeParameter)", "diff": ["+}", "+public void typeHiding(TypeDeclaration typeDecl, TypeVariableBinding hiddenTypeParameter) {", "+\tint severity = computeSeverity(IProblem.TypeHidingTypeParameterFromType);", "+\tif (severity == ProblemSeverities.Ignore) return;", "+\tif (hiddenTypeParameter.declaringElement instanceof TypeBinding) {", "+\t\tTypeBinding declaringType = (TypeBinding) hiddenTypeParameter.declaringElement;", "+\t\tthis.handle(", "+\t\t\tIProblem.TypeHidingTypeParameterFromType,", "+\t\t\tnew String[] { new String(typeDecl.name) , new String(hiddenTypeParameter.readableName()), new String(declaringType.readableName())  },", "+\t\t\tnew String[] { new String(typeDecl.name) , new String(hiddenTypeParameter.shortReadableName()), new String(declaringType.shortReadableName()) },", "+\t\t\tseverity,", "+\t\t\ttypeDecl.sourceStart,", "+\t\t\ttypeDecl.sourceEnd);", "+\t} else {", "+\t\t// type parameter of generic method", "+\t\tMethodBinding declaringMethod = (MethodBinding) hiddenTypeParameter.declaringElement;", "+\t\tthis.handle(", "+\t\t\t\tIProblem.TypeHidingTypeParameterFromMethod,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t\t\tnew String(typeDecl.name), ", "+\t\t\t\t\t\tnew String(hiddenTypeParameter.readableName()),", "+\t\t\t\t\t\tnew String(declaringMethod.selector),", "+\t\t\t\t\t\ttypesAsString(declaringMethod.isVarargs(), declaringMethod.parameters, false),", "+\t\t\t\t\t\tnew String(declaringMethod.declaringClass.readableName()),\t\t\t\t\t\t", "+\t\t\t\t},", "+\t\t\t\tnew String[] { ", "+\t\t\t\t\t\tnew String(typeDecl.name),", "+\t\t\t\t\t\tnew String(hiddenTypeParameter.shortReadableName()),", "+\t\t\t\t\t\tnew String(declaringMethod.selector),", "+\t\t\t\t\t\ttypesAsString(declaringMethod.isVarargs(), declaringMethod.parameters, true),", "+\t\t\t\t\t\tnew String(declaringMethod.declaringClass.shortReadableName()),\t\t\t\t\t\t", "+\t\t\t\t},", "+\t\t\t\tseverity,", "+\t\t\t\ttypeDecl.sourceStart,", "+\t\t\t\ttypeDecl.sourceEnd);", "+\t}", "+}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d19b6a34972d4c315f109aa3e829be7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void discardWorkingCopies(ICompilationUnit[][] workingCopyBatches) throws JavaModelException", "signatureAfterChange": " \tprivate void assertBindingCreated(final String expectedKey) throws JavaModelException", "diff": ["+\t */", "+\tprivate void assertBindingCreated(final String expectedKey) throws JavaModelException {", "+\t\tclass Requestor extends TestASTRequestor {", "+\t\t\tString createdBindingKey;", "+\t\t\tpublic void acceptAST(CompilationUnit cu, ICompilationUnit source) {", "+\t\t\t\tsuper.acceptAST(cu, source);", "+\t\t\t\tIBinding[] bindings = createBindings(new String[] {expectedKey});", "+\t\t\t\tif (bindings != null && bindings.length > 0 && bindings[0] != null)", "+\t\t\t\t\tthis.createdBindingKey = bindings[0].getKey();", "+\t\t\t}", "+\t\t};", "+\t\tRequestor requestor = new Requestor();", "+\t\tICompilationUnit[] workingCopies = null;", "+\t\ttry {", "+\t\t\tworkingCopies = createWorkingCopies(new String[] {", "+\t\t\t\t\"/P/Test.java\",", "+\t\t\t\t\"public class Test {\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t});", "+\t\t\tresolveASTs(workingCopies, new String[] {}, requestor);", "+\t\t} finally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t\t", "+\t\tif (!expectedKey.equals(requestor.createdBindingKey))", "+\t\t\tSystem.out.println(Util.displayString(expectedKey, 3));", "+\t\tassertEquals(\"Unexpected created binding\", expectedKey, requestor.createdBindingKey);", "+\t}", "-\tprivate void discardWorkingCopies(ICompilationUnit[][] workingCopyBatches) throws JavaModelException {", "-\t\tif (workingCopyBatches == null) return;", "-\t\tfor (int i = 0, length = workingCopyBatches.length; i < length; i++)", "-\t\t\tdiscardWorkingCopies(workingCopyBatches[i]);"]}], "num": 25514}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed6b2a294980d554fcb7ec8dc1e6c140", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b7e77885635e0c9a355801c1e971ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "c0f9d8b84abc89ce64134386f4c44ab56579df25", "commitAfterChange": "9ba8652d2cebf2117416af5e39a70e172556117b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " private static int appendClassTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "signatureAfterChange": " private static int appendClassTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "diff": ["-\t\tif (c == C_SEMICOLON) {", "-\t\t\t// all done", "-\t\t\treturn p;", "-\t\t} else if (c == C_GENERIC_START) {", "-\t\t\tint e = appendTypeArgumentSignatures(string, p, fullyQualifyTypeNames, buffer);", "-\t\t\t// once we hit type arguments there are no more package prefixes", "-\t\t\tremovePackageQualifiers = false;", "-\t\t\tp = e;", "-\t\t} else if (c == C_DOT || c == '/') {", "-\t\t\tif (removePackageQualifiers) {", "-\t\t\t\t// erase package prefix", "-\t\t\t\tbuffer.setLength(checkpoint);", "-\t\t\t} else {", "-\t\t\t\tbuffer.append('.');", "-\t\t\t}", "-\t\t} else if (c == C_DOLLAR && resolved) {", "-\t\t\t// once we hit \"$\" there are no more package prefixes", "-\t\t\tremovePackageQualifiers = false;", "-\t\t\t/**", "-\t\t\t * Convert '$' in resolved type signatures into '.'.", "-\t\t\t * NOTE: This assumes that the type signature is an inner type", "-\t\t\t * signature. This is true in most cases, but someone can define a", "-\t\t\t * non-inner type name containing a '$'.", "-\t\t\t */", "-\t\t\tbuffer.append('.');", "-\t\t} else {", "-\t\t\tbuffer.append(c);", "+\t\tswitch(c) {", "+\t\t\tcase C_SEMICOLON :", "+\t\t\t\t// all done", "+\t\t\t\treturn p;", "+\t\t\tcase C_GENERIC_START :", "+\t\t\t\tint e = appendTypeArgumentSignatures(string, p, fullyQualifyTypeNames, buffer);", "+\t\t\t\t// once we hit type arguments there are no more package prefixes", "+\t\t\t\tremovePackageQualifiers = false;", "+\t\t\t\tp = e;", "+\t\t\t\tbreak;", "+\t\t\tcase C_DOT :", "+\t\t\t\tif (removePackageQualifiers) {", "+\t\t\t\t\t// erase package prefix", "+\t\t\t\t\tbuffer.setLength(checkpoint);", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append('.');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t case '/' :", "+\t\t\t\tif (removePackageQualifiers) {", "+\t\t\t\t\t// erase package prefix", "+\t\t\t\t\tbuffer.setLength(checkpoint);", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append('/');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t case C_DOLLAR :", "+\t\t\t \tif (resolved) {", "+\t\t\t\t\t// once we hit \"$\" there are no more package prefixes", "+\t\t\t\t\tremovePackageQualifiers = false;", "+\t\t\t\t\t/**", "+\t\t\t\t\t * Convert '$' in resolved type signatures into '.'.", "+\t\t\t\t\t * NOTE: This assumes that the type signature is an inner type", "+\t\t\t\t\t * signature. This is true in most cases, but someone can define a", "+\t\t\t\t\t * non-inner type name containing a '$'.", "+\t\t\t\t\t */", "+\t\t\t\t\tbuffer.append('.');", "+\t\t\t \t}", "+\t\t\t \tbreak;", "+\t\t\t default :", "+\t\t\t\tbuffer.append(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82edbb86b925983e17411bb2882b0df6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "3b5e3bffb50578beec025e97315d017361527518", "commitAfterChange": "5c86bd5e83cfca7ff5f98996f0b172644cacbee7", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r public static String toString(String signature) throws IllegalArgumentException", "signatureAfterChange": "\r public static String toString(String signature) throws IllegalArgumentException", "diff": ["-\ttry {\r", "-\t\tif (signature.charAt(0) == C_PARAM_START) {\r", "-\t\t\treturn toString(signature, \"\", null, true, true); //$NON-NLS-1$\r", "-\t\t}\r", "-\t\tint arrayCount = getArrayCount(signature);\r", "-\t\tswitch (signature.charAt(arrayCount)) {\r", "-\t\t\tcase C_BOOLEAN :\r", "-\t\t\t\treturn arrayIfy(\"boolean\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_BYTE :\r", "-\t\t\t\treturn arrayIfy(\"byte\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_CHAR :\r", "-\t\t\t\treturn arrayIfy(\"char\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_DOUBLE :\r", "-\t\t\t\treturn arrayIfy(\"double\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_FLOAT :\r", "-\t\t\t\treturn arrayIfy(\"float\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_INT :\r", "-\t\t\t\treturn arrayIfy(\"int\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_LONG :\r", "-\t\t\t\treturn arrayIfy(\"long\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_SHORT :\r", "-\t\t\t\treturn arrayIfy(\"short\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_VOID :\r", "-\t\t\t\treturn arrayIfy(\"void\", arrayCount); //$NON-NLS-1$\r", "-\t\t\tcase C_RESOLVED :\r", "-\t\t\tcase C_UNRESOLVED :\r", "-\t\t\t\tint semi = signature.indexOf(C_SEMICOLON, arrayCount + 1);\r", "-\t\t\t\tif (semi == -1)\r", "-\t\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\t\t\t\t\r", "-\t\t\t\t/**\r", "-\t\t\t\t * Converts '$' separated type signatures into '.' separated type signature.\r", "-\t\t\t\t * NOTE: This assumes that the type signature is an inner type signature.\r", "-\t\t\t\t *       This is true in most cases, but someone can define a non-inner type \r", "-\t\t\t\t *       name containing a '$'. However to tell the difference, we would have\r", "-\t\t\t\t *       to resolve the signature, which cannot be done at this point.\r", "-\t\t\t\t */\r", "-\t\t\t\tString qualifiedTypeName = signature.substring(arrayCount+1, semi).replace(C_DOLLAR, C_DOT);\r", "-\t\t\t\t\r", "-\t\t\t\treturn arrayIfy(qualifiedTypeName, arrayCount);\r", "-\t\t\tdefault :\r", "-\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\t}\r", "-\t} catch (StringIndexOutOfBoundsException e) {\r", "-\t\tthrow new IllegalArgumentException();\r", "-\t}\r", "+\treturn new String(toCharArray(signature.toCharArray()));\r"]}], "num": 27922}
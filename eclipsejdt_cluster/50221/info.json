{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f36c2a34d8e5c087b138bec650cb0948", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626041d0f3f70d9fc4f7f9325907659c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void add(String relativePath, String containerPath, boolean withSubFolders, AccessRuleSet access)", "signatureAfterChange": " private void add(String relativePath, String containerPath, boolean isPackage, AccessRuleSet access)", "diff": ["-private void add(String relativePath, String containerPath, boolean withSubFolders, AccessRuleSet access) {", "-\tint index = (containerPath.hashCode() & 0x7FFFFFFF) % this.paths.length;", "-\tString currentPath, currentContainerPath;", "-\twhile ((currentPath = this.paths[index]) != null && (currentContainerPath = this.containerPaths[index]) != null) {", "-\t\tif (currentPath.equals(relativePath) && currentContainerPath.equals(containerPath))", "+private void add(String relativePath, String containerPath, boolean isPackage, AccessRuleSet access) {", "+\t// normalize containerPath and relativePath", "+\tcontainerPath = normalize(containerPath);", "+\trelativePath = normalize(relativePath);", "+", "+\tint index = (containerPath.hashCode() & 0x7FFFFFFF) % this.containerPaths.length;", "+\tString currentRelativePath, currentContainerPath;", "+\twhile ((currentRelativePath = this.relativePaths[index]) != null && (currentContainerPath = this.containerPaths[index]) != null) {", "+\t\tif (currentRelativePath.equals(relativePath) && currentContainerPath.equals(containerPath))", "-\t\tindex = (index + 1) % this.paths.length;", "+\t\tindex = (index + 1) % this.relativePaths.length;", "-\tthis.paths[index] = relativePath;", "+\tthis.relativePaths[index] = relativePath;", "-\tthis.pathWithSubFolders[index] = withSubFolders;", "+\tthis.isPkgPath[index] = isPackage;", "-\t\tthis.pathRestrictions = new AccessRuleSet[this.paths.length];", "+\t\tthis.pathRestrictions = new AccessRuleSet[this.relativePaths.length];", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b910c3a83078dc25b03d54c82393a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "4582114353aa3904268b70cdd42dc3781becfb01", "commitAfterChange": "7b316625d96d66e552d608c4488c77581168d213", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate static int verifyPatternMatchRule(String stringPattern, int matchRule)", "signatureAfterChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "diff": ["-\t */", "-\tprivate static int verifyPatternMatchRule(String stringPattern, int matchRule) {", "-\t", "-\t\t// Verify Regexp match rule", "-\t\tif ((matchRule & R_REGEXP_MATCH) != 0) {", "-\t\t\tif ((matchRule & R_PATTERN_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t\treturn -1;", "-\t\t}", "-\t", "-\t\t// Verify Pattern match rule", "-\t\tif ((matchRule & R_PATTERN_MATCH) != 0) {", "-\t\t\tif ((matchRule & R_REGEXP_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0) {", "-\t\t\t\treturn -1;", "-\t\t\t}", "-\t\t\tint starIndex = stringPattern.indexOf('*');", "-\t\t\tint questionIndex = stringPattern.indexOf('?');", "-\t\t\tif (starIndex < 0 && questionIndex < 0) {", "-\t\t\t\t// No need to have pattern match", "-\t\t\t\tmatchRule &= ~R_PATTERN_MATCH;", "-\t\t\t\t// Remove Camel Case match when there's '*' or '?' characters", "-\t\t\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\t}", "-\t\t// Verify Camel Case match rule", "-\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t// Verify sting pattern compatibility", "-\t\t\tint length = stringPattern.length();", "-\t\t\tif (length > 1) {", "-\t\t\t\tint idx = 0;", "-\t\t\t\tchar ch = stringPattern.charAt(idx++);", "-\t\t\t\tif (Character.isJavaIdentifierStart(ch)) {", "-\t\t\t\t\tch = stringPattern.charAt(idx++);", "-\t\t\t\t\tif (Character.isUpperCase(ch)) {", "-\t\t\t\t\t\twhile (idx<length && Character.isUpperCase(stringPattern.charAt(idx))) {", "-\t\t\t\t\t\t\tidx++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\twhile (idx<length && (!Character.isUpperCase(ch=stringPattern.charAt(idx)) && Character.isJavaIdentifierPart(ch))) {", "-\t\t\t\t\t\t\tidx++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (idx != length) {", "-\t\t\t\t\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\t\t\t\t\t\tmatchRule |= R_PREFIX_MATCH;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t// Verify bits compatibility", "-\t\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t\tif (matchRule == R_CAMELCASE_MATCH) {", "-\t\t\t\t\tmatchRule |= R_CASE_SENSITIVE;", "-\t\t\t\t} else if ((matchRule & R_PREFIX_MATCH) != 0) {", "-\t\t\t\t\tif ((matchRule & R_CASE_SENSITIVE) != 0) {", "-\t\t\t\t\t\t// This is equivalent to Camel Case match rule", "-\t\t\t\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "-\t\t\t\t\t\tmatchRule &= ~R_CASE_SENSITIVE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\treturn matchRule;", "+ */", "+public static int validateMatchRule(String stringPattern, int matchRule) {", "+", "+\t// Verify Regexp match rule", "+\tif ((matchRule & R_REGEXP_MATCH) != 0) {", "+\t\tif ((matchRule & R_PATTERN_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t\treturn -1;", "+\t\t}", "+\t// Verify Pattern match rule", "+\tif ((matchRule & R_PATTERN_MATCH) != 0) {", "+\t\tif ((matchRule & R_PREFIX_MATCH) != 0) {", "+\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t}", "+\t\tint starIndex = stringPattern.indexOf('*');", "+\t\tint questionIndex = stringPattern.indexOf('?');", "+\t\tif (starIndex < 0 && questionIndex < 0) {", "+\t\t\t// No need to have pattern match", "+\t\t\tmatchRule &= ~R_PATTERN_MATCH;", "+\t\t} else {", "+\t\t\t// Remove Camel Case match when there's '*' or '?' characters", "+\t\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "+\t\t\t}", "+\t\t}", "+", "+\t// Verify Camel Case match rule", "+\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t// Verify sting pattern validity", "+\t\tint length = stringPattern.length();", "+\t\tboolean validCamelCase = false;", "+\t\tif (length > 1) {", "+\t\t\tint idx = 0;", "+\t\t\tchar ch = stringPattern.charAt(idx++);", "+\t\t\tif (Character.isJavaIdentifierStart(ch)) {", "+\t\t\t\tch = stringPattern.charAt(idx++);", "+\t\t\t\tif (Character.isUpperCase(ch)) {", "+\t\t\t\t\twhile (idx<length && Character.isUpperCase(stringPattern.charAt(idx))) {", "+\t\t\t\t\t\tidx++;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (idx<length && (!Character.isUpperCase(ch=stringPattern.charAt(idx)) && Character.isJavaIdentifierPart(ch))) {", "+\t\t\t\t\t\tidx++;", "+\t\t\t\t\t}", "+\t\t\t\t\tvalidCamelCase = idx == length;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// Verify bits compatibility", "+\t\tif (validCamelCase) {", "+\t\t\tif ((matchRule & R_PREFIX_MATCH) != 0) {", "+\t\t\t\tif ((matchRule & R_CASE_SENSITIVE) != 0) {", "+\t\t\t\t\t// This is equivalent to Camel Case match rule", "+\t\t\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t\t\t\tmatchRule &= ~R_CASE_SENSITIVE;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "+\t\t\tif ((matchRule & R_PREFIX_MATCH) == 0) {", "+\t\t\t\tmatchRule |= R_PREFIX_MATCH;", "+\t\t\t\tmatchRule |= R_CASE_SENSITIVE;", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn matchRule;", "+}"]}], "num": 50221}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef5ec50058e956ebd8c928f9a418a99d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8892f85f0b6abafbe5e199420dddee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "d7a2176a086ffe5cc9f82c35abb4d496e220561a", "commitAfterChange": "583238ffeb9a97546ad084c6e7cea427e3752805", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\t\tTypeBinding receiverErasure = type.erasure();", "-\t\t\t\tif (receiverErasure instanceof ReferenceBinding) {", "-\t\t\t\t\tif (receiverErasure.findSuperTypeOriginatingFrom(field.declaringClass) == null) {", "-\t\t\t\t\t\tfieldReceiverType = field.declaringClass; // handle indirect inheritance thru variable secondary bound", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tTypeBinding oldReceiverType = fieldReceiverType;", "+\t\t\t\tfieldReceiverType = fieldReceiverType.getErasureCompatibleType(field.declaringClass);// handle indirect inheritance thru variable secondary bound", "-\t\t\t    if (originalBinding.type.leafComponentType().isTypeVariable()) {", "+\t\t\t\tif (fieldReceiverType != oldReceiverType || originalBinding.type.leafComponentType().isTypeVariable()) { // record need for explicit cast at codegen", "-\t\t\t    }", "+\t\t\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0505c1d9515866e082f5357039b660", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "d7a2176a086ffe5cc9f82c35abb4d496e220561a", "commitAfterChange": "583238ffeb9a97546ad084c6e7cea427e3752805", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t// handle indirect inheritance thru variable secondary bound", "+\t\t\t// receiver may receive generic cast, as part of implicit conversion", "+\t\t\tTypeBinding oldReceiverType = this.actualReceiverType;", "+\t\t\tthis.actualReceiverType = this.actualReceiverType.getErasureCompatibleType(this.binding.declaringClass);", "-\t\t\t// compute generic cast if necessary", "-\t\t\tTypeBinding receiverErasure = this.actualReceiverType.erasure();", "-\t\t\tif (receiverErasure instanceof ReferenceBinding) {", "-\t\t\t\tif (receiverErasure.findSuperTypeOriginatingFrom(this.binding.declaringClass) == null) {", "-\t\t\t\t\tthis.receiverGenericCast = this.binding.declaringClass; // handle indirect inheritance thru variable secondary bound", "-\t\t\t\t}", "+\t\t\tif (this.actualReceiverType != oldReceiverType && this.receiver.postConversionType(scope) != this.actualReceiverType) { // record need for explicit cast at codegen since receiver could not handle it", "+\t\t\t\tthis.bits |= NeedReceiverGenericCast;"]}], "num": 17429}
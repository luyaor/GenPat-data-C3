{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ef15c345e6f9394f795b021c4d3ef84", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caaffb1e3609d36de1aea5de7385e61a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 612, "methodNumberAfterChange": 612, "signatureBeforeChange": " public void testCompletionImportedType1() throws JavaModelException", "signatureAfterChange": " public void testCompletionImportedType1() throws JavaModelException", "diff": ["-    ICompilationUnit aType = null;", "-    try {", "-    \taType = getWorkingCopy(", "-\t            \"/Completion/src/test/imported/ZZZZ.java\",", "-\t            \"package test.imported;\"+", "-\t            \"public class ZZZZ {\\n\"+", "-\t            \"  \\n\"+", "-\t            \"}\");", "-    \t", "-    \tthis.wc = getWorkingCopy(", "-            \"/Completion/src/test/CompletionImportedType1.java\",", "-            \"package test;\"+", "-            \"public class CompletionImportedType1 {\"+", "-            \"  ZZZ\\n\"+", "-            \"}\");", "-\t", "-\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\t    String str = this.wc.getSource();", "-\t    String completeBehind = \"ZZZ\";", "-\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "-\t", "-\t\tassertResults(", "-\t\t\t\t\"ZZZ[POTENTIAL_METHOD_DECLARATION]{ZZZ, Ltest.CompletionImportedType1;, ()V, ZZZ, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"ZZZZ[TYPE_REF]{test.imported.ZZZZ, test.imported, Ltest.imported.ZZZZ;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "-\t\t\t\trequestor.getResults());", "-\t} finally {", "-\t\tif(aType != null) {", "-\t\t\taType.discardWorkingCopy();", "-\t\t}", "-\t}", "+    this.workingCopies = new ICompilationUnit[2];", "+    this.workingCopies[0] = getWorkingCopy(", "+\t\t\"/Completion/src/test/imported/ZZZZ.java\",", "+\t\t\"package test.imported;\"+", "+\t\t\"public class ZZZZ {\\n\"+", "+\t\t\"  \\n\"+", "+\t\t\"}\");", "+\t\t", "+\tthis.workingCopies[1] = getWorkingCopy(", "+\t\t\t\"/Completion/src/test/CompletionImportedType1.java\",", "+\t\t\t\"package test;\"+", "+\t\t\t\"public class CompletionImportedType1 {\"+", "+\t\t\t\"  ZZZ\\n\"+", "+\t\t\t\"}\");", "+", "+\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\tString str = this.workingCopies[1].getSource();", "+\tString completeBehind = \"ZZZ\";", "+\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\tthis.workingCopies[1].codeComplete(cursorLocation, requestor, this.wcOwner);", "+", "+\tassertResults(", "+\t\t\t\"ZZZ[POTENTIAL_METHOD_DECLARATION]{ZZZ, Ltest.CompletionImportedType1;, ()V, ZZZ, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"ZZZZ[TYPE_REF]{test.imported.ZZZZ, test.imported, Ltest.imported.ZZZZ;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\trequestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbbded1af9f7b5b0033706836028db60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean pushParamName()", "signatureAfterChange": " \tprotected boolean pushParamName(boolean isTypeParam)", "diff": ["-\tprotected boolean pushParamName() {", "-\t\t// Create name reference", "-\t\tJavadocSingleNameReference nameRef = new JavadocSingleNameReference(this.scanner.getCurrentIdentifierSource(),", "-\t\t\t\tthis.scanner.getCurrentTokenStartPosition(),", "-\t\t\t\tthis.scanner.getCurrentTokenEndPosition());", "-\t\tnameRef.tagSourceStart = this.tagSourceStart;", "-\t\tnameRef.tagSourceEnd = this.tagSourceEnd;", "+\tprotected boolean pushParamName(boolean isTypeParam) {", "+\t\t// Create param reference", "+\t\tASTNode nameRef = null;", "+\t\tif (isTypeParam) {", "+\t\t\tJavadocSingleTypeReference ref = new JavadocSingleTypeReference(this.identifierStack[0],", "+\t\t\t\tthis.identifierPositionStack[0],", "+\t\t\t\tthis.tagSourceStart,", "+\t\t\t\tthis.tagSourceEnd);", "+\t\t\tnameRef = ref;", "+\t\t} else {", "+\t\t\tJavadocSingleNameReference ref = new JavadocSingleNameReference(this.identifierStack[0],", "+\t\t\t\tthis.identifierPositionStack[0],", "+\t\t\t\tthis.tagSourceStart,", "+\t\t\t\tthis.tagSourceEnd);", "+\t\t\tnameRef = ref;", "+\t\t}", "-\t\t\tfor (int i=THROWS_TAG_EXPECTED_ORDER; i<=this.astLengthPtr; i+=ORDERED_TAGS_NUMBER) {", "-\t\t\t\tif (this.astLengthStack[i] != 0) {", "-\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51600", "-\t\t\t\t\t// store invalid param references in specific array", "-\t\t\t\t\tif (this.invalidParamReferencesPtr == -1l) {", "-\t\t\t\t\t\tthis.invalidParamReferencesStack = new JavadocSingleNameReference[10];", "+\t\t\tif (!isTypeParam) { // do not verify for type parameters as @throws may be invalid tag (when declared in class)", "+\t\t\t\tfor (int i=THROWS_TAG_EXPECTED_ORDER; i<=this.astLengthPtr; i+=ORDERED_TAGS_NUMBER) {", "+\t\t\t\t\tif (this.astLengthStack[i] != 0) {", "+\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51600", "+\t\t\t\t\t\t// store invalid param references in specific array", "+\t\t\t\t\t\tif (this.invalidParamReferencesPtr == -1l) {", "+\t\t\t\t\t\t\tthis.invalidParamReferencesStack = new JavadocSingleNameReference[10];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint stackLength = this.invalidParamReferencesStack.length;", "+\t\t\t\t\t\tif (++this.invalidParamReferencesPtr >= stackLength) {", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tthis.invalidParamReferencesStack, 0,", "+\t\t\t\t\t\t\t\tthis.invalidParamReferencesStack = new JavadocSingleNameReference[stackLength + AstStackIncrement], 0,", "+\t\t\t\t\t\t\t\tstackLength);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.invalidParamReferencesStack[this.invalidParamReferencesPtr] = nameRef;", "+\t\t\t\t\t\treturn false;", "-\t\t\t\t\tint stackLength = this.invalidParamReferencesStack.length;", "-\t\t\t\t\tif (++this.invalidParamReferencesPtr >= stackLength) {", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.invalidParamReferencesStack, 0,", "-\t\t\t\t\t\t\tthis.invalidParamReferencesStack = new JavadocSingleNameReference[stackLength + AstStackIncrement], 0,", "-\t\t\t\t\t\t\tstackLength);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.invalidParamReferencesStack[this.invalidParamReferencesPtr] = nameRef;", "-\t\t\t\t\treturn false;"]}], "num": 16513}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ac90cc7aa0e3aa3783c7d6e12775203", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e76590ed108e7c02291d77887a8fdeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": " protected void pushIdentifier()", "signatureAfterChange": " protected void pushIdentifier()", "diff": ["-\t\tidentifierStack[++identifierPtr] = scanner.getCurrentIdentifierSource();", "-\t\tidentifierPositionStack[identifierPtr] = ", "-\t\t\t(((long) scanner.startPosition) << 32) + (scanner.currentPosition - 1); ", "+\t\tthis.identifierStack[++this.identifierPtr] = this.scanner.getCurrentIdentifierSource();", "+\t\tthis.identifierPositionStack[this.identifierPtr] = ", "+\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1); ", "-\t\t/*---stack reallaocation (identifierPtr is correct)---*/", "-\t\tint oldStackLength = identifierStack.length;", "-\t\tchar[][] oldStack = identifierStack;", "-\t\tidentifierStack = new char[oldStackLength + 20][];", "-\t\tSystem.arraycopy(oldStack, 0, identifierStack, 0, oldStackLength);", "-\t\tidentifierStack[identifierPtr] = scanner.getCurrentTokenSource();", "+\t\t/*---stack reallaocation (this.identifierPtr is correct)---*/", "+\t\tint oldStackLength = this.identifierStack.length;", "+\t\tchar[][] oldStack = this.identifierStack;", "+\t\tthis.identifierStack = new char[oldStackLength + 20][];", "+\t\tSystem.arraycopy(oldStack, 0, this.identifierStack, 0, oldStackLength);", "+\t\tthis.identifierStack[this.identifierPtr] = this.scanner.getCurrentTokenSource();", "-\t\tlong[] oldPos = identifierPositionStack;", "-\t\tidentifierPositionStack = new long[oldStackLength + 20];", "-\t\tSystem.arraycopy(oldPos, 0, identifierPositionStack, 0, oldStackLength);", "-\t\tidentifierPositionStack[identifierPtr] = ", "-\t\t\t(((long) scanner.startPosition) << 32) + (scanner.currentPosition - 1); ", "+\t\tlong[] oldPos = this.identifierPositionStack;", "+\t\tthis.identifierPositionStack = new long[oldStackLength + 20];", "+\t\tSystem.arraycopy(oldPos, 0, this.identifierPositionStack, 0, oldStackLength);", "+\t\tthis.identifierPositionStack[this.identifierPtr] = ", "+\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1); ", "-\t\tidentifierLengthStack[++identifierLengthPtr] = 1;", "+\t\tthis.identifierLengthStack[++this.identifierLengthPtr] = 1;", "-\t\t/*---stack reallocation (identifierLengthPtr is correct)---*/", "-\t\tint oldStackLength = identifierLengthStack.length;", "-\t\tint oldStack[] = identifierLengthStack;", "-\t\tidentifierLengthStack = new int[oldStackLength + 10];", "-\t\tSystem.arraycopy(oldStack, 0, identifierLengthStack, 0, oldStackLength);", "-\t\tidentifierLengthStack[identifierLengthPtr] = 1;", "+\t\t/*---stack reallocation (this.identifierLengthPtr is correct)---*/", "+\t\tint oldStackLength = this.identifierLengthStack.length;", "+\t\tint oldStack[] = this.identifierLengthStack;", "+\t\tthis.identifierLengthStack = new int[oldStackLength + 10];", "+\t\tSystem.arraycopy(oldStack, 0, this.identifierLengthStack, 0, oldStackLength);", "+\t\tthis.identifierLengthStack[this.identifierLengthPtr] = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895be80da000500a2a9b3e741645e5da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\texpressionPtr--;", "-\texpressionLengthPtr--;", "+\tthis.expressionPtr--;", "+\tthis.expressionLengthPtr--;", "-\t\texpressionStack[expressionPtr] = ", "+\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\texpressionStack[expressionPtr], ", "-\t\t\t\texpressionStack[expressionPtr + 1], ", "+\t\t\t\tthis.expressionStack[this.expressionPtr], ", "+\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "-\t\t\texpressionStack[expressionPtr] = ", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\texpressionStack[expressionPtr], ", "-\t\t\t\t\texpressionStack[expressionPtr + 1], ", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "-\t\t\tif ((op == PLUS) && optimizeStringLiterals) {", "+\t\t\tif ((op == PLUS) && this.optimizeStringLiterals) {", "-\t\t\t\texpr1 = expressionStack[expressionPtr];", "-\t\t\t\texpr2 = expressionStack[expressionPtr + 1];", "+\t\t\t\texpr1 = this.expressionStack[this.expressionPtr];", "+\t\t\t\texpr2 = this.expressionStack[this.expressionPtr + 1];", "-\t\t\t\t\t\texpressionStack[expressionPtr] = ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\texpressionStack[expressionPtr] = ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\texpressionStack[expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t\t\texpressionStack[expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t\texpressionStack[expressionPtr] = ", "+\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\texpressionStack[expressionPtr], ", "-\t\t\t\t\t\texpressionStack[expressionPtr + 1], ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], "]}], "num": 37937}
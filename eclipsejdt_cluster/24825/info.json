{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6b5be8342eb4ae98b64df2d1946c352", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "491b58b2e155694f9a313a8523e94067", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "commitAfterChange": "fe8f03030c996e7f3abaa101bf62fc6c88122090", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tloopbackFlowInfo.mergedWith(condInfo.initsWhenTrue().unconditionalCopy());", "+\t\t// loopback | (loopback + action + condition):", "+\t\tloopbackFlowInfo = loopbackFlowInfo.mergedWith(loopbackFlowInfo.unconditionalCopy().addNullInfoFrom(condInfo.initsWhenTrue()).unconditionalInits());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfe3881f5f5d8766c188eb50794cb14b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t// don't report issues concerning this local, since by returning", "-\t\t\t// the method passes the responsibility to the caller:", "-\t\t\tcurrentScope.removeTrackingVar(trackingVariable);", "+\t\t\t// by returning the method passes the responsibility to the caller:", "+\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.expression, flowInfo, true);"]}], "num": 24825}
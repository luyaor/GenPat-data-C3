{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0bbd14e8803128ec3173f07c5ab4ffc3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464dd3cba13a4c12c3f2ffed99250036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "e09428ece4109f2ed53a5b654918b21f327e1ef3", "commitAfterChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList visited,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet alreadyTraversed)", "signatureAfterChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList prereqChain,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet alreadyTraversed)", "diff": ["-\t\t\tArrayList visited, ", "+\t\t\tArrayList prereqChain, ", "-\t\tvisited.add(this);", "+\t\tprereqChain.add(this);", "-\t\t\t\t\t\tint index = visited.indexOf(project);", "-\t\t\t\t\t\tif (index == -1 && cycleParticipants.contains(project))", "-\t\t\t\t\t\t\tindex = visited.indexOf(this); // another loop in the cycle exists", "-\t\t\t\t\t\tif (index >= 0) { // only consider direct participants inside the cycle", "-\t\t\t\t\t\t\tfor (int size = visited.size(); index < size; index++)", "-\t\t\t\t\t\t\t\tcycleParticipants.add(visited.get(index)); ", "+\t\t\t\t\t\tint index = cycleParticipants.contains(project) ? 0 : prereqChain.indexOf(project);", "+\t\t\t\t\t\tif (index >= 0) { // refer to cycle, or in cycle itself", "+\t\t\t\t\t\t\tfor (int size = prereqChain.size(); index < size; index++) {", "+\t\t\t\t\t\t\t\tcycleParticipants.add(prereqChain.get(index)); ", "+\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\tif (!alreadyTraversed.contains(project)) {", "-\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, visited, cycleParticipants, workspaceRoot, alreadyTraversed);", "-//\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!alreadyTraversed.contains(project)) {", "+\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, alreadyTraversed);", "+\t\t\t\t\t\t\t}", "-\t\tvisited.remove(this);", "-//\t\talreadyTraversed.add(this);", "+\t\tprereqChain.remove(this);", "+\t\talreadyTraversed.add(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fc105a1257d62fb9592d279b97f9ad7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c143533d344835eae9053a7d384648906ed40cff", "commitAfterChange": "6abf8e1881c12c9c3a3eab104c63d4f76b1fb73b", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList prereqChain,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet alreadyTraversed)", "signatureAfterChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList prereqChain,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet traversed)", "diff": ["-\t\t\tHashSet alreadyTraversed){", "-\t\t\t\t", "-\t\tprereqChain.add(this);", "+\t\t\tHashSet traversed){", "+", "+\t\tIPath path = this.getPath();", "+\t\tprereqChain.add(path);", "+\t\ttraversed.add(path);", "-\t\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\t\tIResource member = workspaceRoot.findMember(entryPath);", "-\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){", "-\t\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create((IProject)member);", "-\t\t\t\t\t\tint index = cycleParticipants.contains(project) ? 0 : prereqChain.indexOf(project);", "-\t\t\t\t\t\tif (index >= 0) { // refer to cycle, or in cycle itself", "-\t\t\t\t\t\t\tfor (int size = prereqChain.size(); index < size; index++) {", "-\t\t\t\t\t\t\t\tcycleParticipants.add(prereqChain.get(index)); ", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (!alreadyTraversed.contains(project)) {", "-\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, alreadyTraversed);", "+\t\t\t\t\tIPath prereqProjectPath = entry.getPath();", "+\t\t\t\t\tint index = cycleParticipants.contains(prereqProjectPath) ? 0 : prereqChain.indexOf(prereqProjectPath);", "+\t\t\t\t\tif (index >= 0) { // refer to cycle, or in cycle itself", "+\t\t\t\t\t\tfor (int size = prereqChain.size(); index < size; index++) {", "+\t\t\t\t\t\t\tcycleParticipants.add(prereqChain.get(index)); ", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (!traversed.contains(prereqProjectPath)) {", "+\t\t\t\t\t\t\tIResource member = workspaceRoot.findMember(prereqProjectPath);", "+\t\t\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){", "+\t\t\t\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create((IProject)member);", "+\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed);", "-\t\tprereqChain.remove(this);", "-\t\talreadyTraversed.add(this);", "+\t\tprereqChain.remove(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dd865991618fc977220e59ad69b5706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7eeebb70e2ff491ab9bcb9989009c102bc6dce17", "commitAfterChange": "922a8f2234ba62b5ea80c3fa8e1983d8481a3bfb", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "signatureAfterChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "diff": ["-\t\t\t\t\tString projectName = entry.getPath().lastSegment();", "-\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create(workspaceRoot.getProject(projectName));", "-\t\t\t\t\tint index = visited.indexOf(project);", "-\t\t\t\t\tif (index == -1 && cycleParticipants.contains(project))", "-\t\t\t\t\t\tindex = visited.indexOf(this); // another loop in the cycle exists", "-\t\t\t\t\tif (index >= 0) { // only consider direct participants inside the cycle", "-\t\t\t\t\t\tfor (int size = visited.size(); index < size; index++)", "-\t\t\t\t\t\t\tcycleParticipants.add(visited.get(index)); ", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tproject.updateCycleParticipants(null, visited, cycleParticipants, workspaceRoot);", "+\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\tIResource member = workspaceRoot.findMember(entryPath);", "+\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){", "+\t\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create((IProject)member);", "+\t\t\t\t\t\tint index = visited.indexOf(project);", "+\t\t\t\t\t\tif (index == -1 && cycleParticipants.contains(project))", "+\t\t\t\t\t\t\tindex = visited.indexOf(this); // another loop in the cycle exists", "+\t\t\t\t\t\tif (index >= 0) { // only consider direct participants inside the cycle", "+\t\t\t\t\t\t\tfor (int size = visited.size(); index < size; index++)", "+\t\t\t\t\t\t\t\tcycleParticipants.add(visited.get(index)); ", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tproject.updateCycleParticipants(null, visited, cycleParticipants, workspaceRoot);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aba2e339113f89c593da85519a7e3513", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "21007a361f44cd3fd67e6cfde4f3050b918604ad", "commitAfterChange": "6521890902ffb79c05c99ec170c12e840bf5ba20", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "signatureAfterChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "diff": ["-", "-\t\tint index = visited.indexOf(this);", "-\t\tif (index >= 0){", "-\t\t\t// only consider direct participants inside the cycle", "-\t\t\tfor (int i = index, size = visited.size(); i < size; i++){", "-\t\t\t\tcycleParticipants.add(visited.get(i)); ", "-\t\t\t}", "-\t\t\treturn;", "-\t\t} else {", "-\t\t\tvisited.add(this);", "-\t\t}", "-\t\t", "+\t\tvisited.add(this);", "-\t\t\tIClasspathEntry[] classpath;", "-\t\t\tif (preferredClasspath == null) {", "-\t\t\t\tclasspath = getResolvedClasspath(true);", "-\t\t\t} else {", "-\t\t\t\tclasspath = preferredClasspath;", "-\t\t\t}", "+\t\t\tIClasspathEntry[] classpath = preferredClasspath == null ? getResolvedClasspath(true) : preferredClasspath;", "-\t\t\t\t\tif (!cycleParticipants.contains(this) || !cycleParticipants.contains(project)) // skip if both are already part of cycle", "+\t\t\t\t\tint index = visited.indexOf(project);", "+\t\t\t\t\tif (index == -1 && cycleParticipants.contains(project))", "+\t\t\t\t\t\tindex = visited.indexOf(this); // another loop in the cycle exists", "+\t\t\t\t\tif (index >= 0) { // only consider direct participants inside the cycle", "+\t\t\t\t\t\tfor (int size = visited.size(); index < size; index++)", "+\t\t\t\t\t\t\tcycleParticipants.add(visited.get(index)); ", "+\t\t\t\t\t} else {", "+\t\t\t\t\t}"]}], "num": 3017}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31eb54826bdcf6da0a77c67820619c80", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c26477c3e7a9c59919bbf8cf4719c57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "12c4e4b205989aa55133649370c2e394e8cb1f2a", "commitAfterChange": "4a3b8d7f66c815bfc252f4ffc29a63c010eff917", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tprivate void generateMissingTypesAttribute()", "signatureAfterChange": "  \tprivate void generateMissingTypesAttribute()", "diff": ["-\t\tnext : for (int i = 0; i < initialSize; i++) {", "+\t\tif (initialSize > 1) {", "+\t\t\tCollections.sort(this.missingTypes, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\tTypeBinding typeBinding1 = (TypeBinding) o1;", "+\t\t\t\t\tTypeBinding typeBinding2 = (TypeBinding) o2;", "+\t\t\t\t\treturn CharOperation.compareTo(typeBinding1.constantPoolName(), typeBinding2.constantPoolName());", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\tint previousIndex = 0;", "+\t\tnext: for (int i = 0; i < initialSize; i++) {", "-\t\t\tfor (int j = 0; j < numberOfMissingTypes; j++)", "-\t\t\t\tif (missingTypesIndexes[j] == missingTypeIndex)", "-\t\t\t\t\tcontinue next;", "+\t\t\tif (previousIndex == missingTypeIndex) {", "+\t\t\t\tcontinue next;", "+\t\t\t}", "+\t\t\tpreviousIndex = missingTypeIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddc0d6b9e311c5cba85652cd37843088", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "432a9d5974b55509eb3dfbf8ecd190ef7ce8af61", "commitAfterChange": "6babe48369a471c3e35e8fc01b1af25fdd70c8bf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["-\t\t// Inner class attribute", "-\t\tif (numberOfInnerClasses != 0) {", "-\t\t\t// Generate the inner class attribute", "-\t\t\tint exSize = 8 * numberOfInnerClasses + 8;", "-\t\t\tif (exSize + contentsOffset >= this.contents.length) {", "-\t\t\t\tresizeContents(exSize);", "-\t\t\t}", "-\t\t\t// Now we now the size of the attribute and the number of entries", "-\t\t\t// attribute name", "-\t\t\tint attributeNameIndex =", "-\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.InnerClassName);", "-\t\t\tcontents[contentsOffset++] = (byte) (attributeNameIndex >> 8);", "-\t\t\tcontents[contentsOffset++] = (byte) attributeNameIndex;", "-\t\t\tint value = (numberOfInnerClasses << 3) + 2;", "-\t\t\tcontents[contentsOffset++] = (byte) (value >> 24);", "-\t\t\tcontents[contentsOffset++] = (byte) (value >> 16);", "-\t\t\tcontents[contentsOffset++] = (byte) (value >> 8);", "-\t\t\tcontents[contentsOffset++] = (byte) value;", "-\t\t\tcontents[contentsOffset++] = (byte) (numberOfInnerClasses >> 8);", "-\t\t\tcontents[contentsOffset++] = (byte) numberOfInnerClasses;", "-\t\t\tfor (int i = 0; i < numberOfInnerClasses; i++) {", "-\t\t\t\tReferenceBinding innerClass = innerClassesBindings[i];", "-\t\t\t\tint accessFlags = innerClass.getAccessFlags();", "-\t\t\t\tint innerClassIndex = constantPool.literalIndexForType(innerClass.constantPoolName());", "-\t\t\t\t// inner class index", "-\t\t\t\tcontents[contentsOffset++] = (byte) (innerClassIndex >> 8);", "-\t\t\t\tcontents[contentsOffset++] = (byte) innerClassIndex;", "-\t\t\t\t// outer class index: anonymous and local have no outer class index", "-\t\t\t\tif (innerClass.isMemberType()) {", "-\t\t\t\t\t// member or member of local", "-\t\t\t\t\tint outerClassIndex = constantPool.literalIndexForType(innerClass.enclosingType().constantPoolName());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (outerClassIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) outerClassIndex;", "-\t\t\t\t} else {", "-\t\t\t\t\t// equals to 0 if the innerClass is not a member type", "-\t\t\t\t\tcontents[contentsOffset++] = 0;", "-\t\t\t\t\tcontents[contentsOffset++] = 0;", "-\t\t\t\t}", "-\t\t\t\t// name index", "-\t\t\t\tif (!innerClass.isAnonymousType()) {", "-\t\t\t\t\tint nameIndex = constantPool.literalIndex(innerClass.sourceName());", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) (nameIndex >> 8);", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) nameIndex;", "-\t\t\t\t} else {", "-\t\t\t\t\t// equals to 0 if the innerClass is an anonymous type", "-\t\t\t\t\tcontents[contentsOffset++] = 0;", "-\t\t\t\t\tcontents[contentsOffset++] = 0;", "-\t\t\t\t}", "-\t\t\t\t// access flag", "-\t\t\t\tif (innerClass.isAnonymousType()) {", "-\t\t\t\t\taccessFlags &= ~ClassFileConstants.AccFinal;", "-\t\t\t\t} else if (innerClass.isMemberType() && innerClass.isInterface()) {", "-\t\t\t\t\taccessFlags |= ClassFileConstants.AccStatic; // implicitely static", "-\t\t\t\t}", "-\t\t\t\tcontents[contentsOffset++] = (byte) (accessFlags >> 8);", "-\t\t\t\tcontents[contentsOffset++] = (byte) accessFlags;", "-\t\t\t}", "-\t\t\tattributeNumber++;", "-\t\t}", "-\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForNameAndType(methodBinding.selector, methodBinding.signature());", "+\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForNameAndType(methodBinding.selector, methodBinding.signature(this));", "+\t\t\tattributeNumber++;", "+\t\t}", "+\t\t// Inner class attribute", "+\t\tint numberOfInnerClasses = this.innerClassesBindings == null ? 0 : this.innerClassesBindings.size();", "+\t\tif (numberOfInnerClasses != 0) {", "+\t\t\tReferenceBinding[] innerClasses = new ReferenceBinding[numberOfInnerClasses];", "+\t\t\tthis.innerClassesBindings.toArray(innerClasses);", "+\t\t\tArrays.sort(innerClasses, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\tTypeBinding binding1 = (TypeBinding) o1;", "+\t\t\t\t\tTypeBinding binding2 = (TypeBinding) o2;", "+\t\t\t\t\treturn CharOperation.compareTo(binding1.constantPoolName(), binding2.constantPoolName());", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t// Generate the inner class attribute", "+\t\t\tint exSize = 8 * numberOfInnerClasses + 8;", "+\t\t\tif (exSize + contentsOffset >= this.contents.length) {", "+\t\t\t\tresizeContents(exSize);", "+\t\t\t}", "+\t\t\t// Now we now the size of the attribute and the number of entries", "+\t\t\t// attribute name", "+\t\t\tint attributeNameIndex =", "+\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.InnerClassName);", "+\t\t\tcontents[contentsOffset++] = (byte) (attributeNameIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) attributeNameIndex;", "+\t\t\tint value = (numberOfInnerClasses << 3) + 2;", "+\t\t\tcontents[contentsOffset++] = (byte) (value >> 24);", "+\t\t\tcontents[contentsOffset++] = (byte) (value >> 16);", "+\t\t\tcontents[contentsOffset++] = (byte) (value >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) value;", "+\t\t\tcontents[contentsOffset++] = (byte) (numberOfInnerClasses >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) numberOfInnerClasses;", "+\t\t\tfor (int i = 0; i < numberOfInnerClasses; i++) {", "+\t\t\t\tReferenceBinding innerClass = innerClasses[i];", "+\t\t\t\tint accessFlags = innerClass.getAccessFlags();", "+\t\t\t\tint innerClassIndex = constantPool.literalIndexForType(innerClass.constantPoolName());", "+\t\t\t\t// inner class index", "+\t\t\t\tcontents[contentsOffset++] = (byte) (innerClassIndex >> 8);", "+\t\t\t\tcontents[contentsOffset++] = (byte) innerClassIndex;", "+\t\t\t\t// outer class index: anonymous and local have no outer class index", "+\t\t\t\tif (innerClass.isMemberType()) {", "+\t\t\t\t\t// member or member of local", "+\t\t\t\t\tint outerClassIndex = constantPool.literalIndexForType(innerClass.enclosingType().constantPoolName());", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) (outerClassIndex >> 8);", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) outerClassIndex;", "+\t\t\t\t} else {", "+\t\t\t\t\t// equals to 0 if the innerClass is not a member type", "+\t\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\t}", "+\t\t\t\t// name index", "+\t\t\t\tif (!innerClass.isAnonymousType()) {", "+\t\t\t\t\tint nameIndex = constantPool.literalIndex(innerClass.sourceName());", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\tcontents[contentsOffset++] = (byte) nameIndex;", "+\t\t\t\t} else {", "+\t\t\t\t\t// equals to 0 if the innerClass is an anonymous type", "+\t\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\t}", "+\t\t\t\t// access flag", "+\t\t\t\tif (innerClass.isAnonymousType()) {", "+\t\t\t\t\taccessFlags &= ~ClassFileConstants.AccFinal;", "+\t\t\t\t} else if (innerClass.isMemberType() && innerClass.isInterface()) {", "+\t\t\t\t\taccessFlags |= ClassFileConstants.AccStatic; // implicitely static", "+\t\t\t\t}", "+\t\t\t\tcontents[contentsOffset++] = (byte) (accessFlags >> 8);", "+\t\t\t\tcontents[contentsOffset++] = (byte) accessFlags;", "+\t\t\t}"]}], "num": 5603}
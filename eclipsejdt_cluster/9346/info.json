{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c169b52b2a3f13ea8ce2596128d9986b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a4f071c99071b126b7194cfd2a284e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "72dc1c57c42de4a3dfb21c97d6b1a9b41be72bce", "commitAfterChange": "9c226b64259ee6df08f388fdda3107eca6334b58", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["+\t\tString jreLibPath = JavaCore.getClasspathVariable(\"JRE_LIB\").toOSString();", "+\t\tint jdkEntriesCount = 0;", "-\t\t\tjdkEntries[i] = JavaCore.newLibraryEntry(new Path(jdkLibs[i]), null, null);", "+\t\t\tif (!jdkLibs[i].equals(jreLibPath)) { // do not include JRE_LIB in additional JDK entries", "+\t\t\t\tjdkEntries[jdkEntriesCount++] = JavaCore.newLibraryEntry(new Path(jdkLibs[i]), null, null);", "+\t\t\t}", "-\t\t\tif (!entries[0].equals(jdkEntries[0])) {", "-\t\t\t\tSystem.arraycopy(entries, 0, entries = new IClasspathEntry[jdkLibsLength+entriesLength], jdkLibsLength, entriesLength);", "-\t\t\t\tSystem.arraycopy(jdkEntries, 0, entries, 0, jdkLibsLength);", "+\t\t\tif (!entries[entriesLength-1].equals(jdkEntries[jdkEntriesCount-1])) {", "+\t\t\t\tSystem.arraycopy(entries, 0, entries = new IClasspathEntry[jdkEntriesCount+entriesLength], 0, entriesLength);", "+\t\t\t\tSystem.arraycopy(jdkEntries, 0, entries, entriesLength, jdkEntriesCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e8a80878c1784a75325b5e6cfcd10bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "eafcb978f25b6d2c659d032995509b61e74e13f5", "commitAfterChange": "7ecaef5de16e38a10853a04df519c7ec4f9241fc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["+\t\tSystem.out.print(\"Create lib entries for the JDKs...\");", "+\t\tstart = System.currentTimeMillis();", "+\t\tSystem.out.println(jdkLibsLength+\" found (\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t\t\t", "+", "-\t\t\tSystem.arraycopy(entries, 0, entries = new IClasspathEntry[jdkLibsLength+entriesLength], jdkLibsLength, entriesLength);", "-\t\t\tSystem.arraycopy(jdkEntries, 0, entries, 0, jdkLibsLength);", "-\t\t\tALL_PROJECTS[i].setRawClasspath(entries, null);", "+\t\t\tif (!entries[0].equals(jdkEntries[0])) {", "+\t\t\t\tSystem.arraycopy(entries, 0, entries = new IClasspathEntry[jdkLibsLength+entriesLength], jdkLibsLength, entriesLength);", "+\t\t\t\tSystem.arraycopy(jdkEntries, 0, entries, 0, jdkLibsLength);", "+\t\t\t\tALL_PROJECTS[i].setRawClasspath(entries, null);", "+\t\t\t}"]}], "num": 9346}
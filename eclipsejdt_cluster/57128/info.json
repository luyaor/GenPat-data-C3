{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe8c3b64d333a66c05bbf57dc75eb073", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1492f1756cfbe48eaad59be9cb0d637b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " public void javadocNotVisibleReference(int sourceStart, int sourceEnd, int modifiers)", "signatureAfterChange": " public void javadocHiddenReference(int sourceStart, int sourceEnd, Scope scope, int modifiers)", "diff": ["-public void javadocNotVisibleReference(int sourceStart, int sourceEnd, int modifiers) {", "-\tif (javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers))", "-\t\tthis.handle(IProblem.JavadocNotVisibleReference, NoArgument, NoArgument, sourceStart, sourceEnd);", "+public void javadocHiddenReference(int sourceStart, int sourceEnd, Scope scope, int modifiers) {", "+\tScope currentScope = scope;", "+\twhile (currentScope.parent.kind != Scope.COMPILATION_UNIT_SCOPE ) {", "+\t\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, currentScope.getDeclarationModifiers())) {", "+\t\t\treturn;", "+\t\t}", "+\t\tcurrentScope = currentScope.parent;", "+\t}", "+\tString[] arguments = new String[] { this.options.getVisibilityString(this.options.reportInvalidJavadocTagsVisibility), this.options.getVisibilityString(modifiers) };", "+\tthis.handle(IProblem.JavadocHiddenReference, arguments, arguments, sourceStart, sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed4c875c2441b2cb2779e8bc119bcb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "\t \t \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\tpublic TypeBinding getTypeBinding(Scope scope) {", "+\tprotected TypeBinding getTypeBinding(Scope scope) {", "-\t\treturn scope.createArray(scope.getType(tokens), dimensions);", "+\t\ttry {", "+\t\t\tTypeBinding leafComponentType = scope.getType(this.tokens, this.tokens.length);", "+\t\t\tif (leafComponentType.isParameterizedType()) {", "+\t\t\t    scope.problemReporter().illegalArrayOfParameterizedType(leafComponentType, this);", "+\t\t\t}", "+\t\t\treturn scope.createArrayType(leafComponentType, dimensions);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\te.updateContext(this, scope.referenceCompilationUnit().compilationResult);", "+\t\t\tthrow e;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7860f3a008f96607b8d57133d0b1bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 336, "signatureBeforeChange": " public void unsafeCast(CastExpression castExpression)", "signatureAfterChange": " public void unsafeCast(CastExpression castExpression, Scope scope)", "diff": ["-public void unsafeCast(CastExpression castExpression) {", "+public void unsafeCast(CastExpression castExpression, Scope scope) {", "+\tTypeBinding erasedCastType = castExpression.resolvedType.erasure();", "+\tif (erasedCastType.isGenericType()) erasedCastType = scope.environment().createRawType((ReferenceBinding)erasedCastType, erasedCastType.enclosingType());", "-\t\tnew String[]{ new String(castedExpressionType.readableName()), new String(castExpression.resolvedType.readableName())},", "-\t\tnew String[]{ new String(castedExpressionType.shortReadableName()), new String(castExpression.resolvedType.shortReadableName())},", "+\t\tnew String[]{ ", "+\t\t\tnew String(castedExpressionType.readableName()), ", "+\t\t\tnew String(castExpression.resolvedType.readableName()),", "+\t\t\tnew String(erasedCastType.readableName()),", "+\t\t},", "+\t\tnew String[]{ ", "+\t\t\tnew String(castedExpressionType.shortReadableName()), ", "+\t\t\tnew String(castExpression.resolvedType.shortReadableName()),", "+\t\t\tnew String(erasedCastType.shortReadableName()),", "+\t\t},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee53cbb573ad81a73316c2be85876d2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "edc23e66dbb95c3af3ddd76b4ae7b813c6ef35a5", "commitAfterChange": "8873795d3456fd4eb978570ebf0c2587e004407c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic IJavaElement[] getVisibleElements(String typeSignature)", "signatureAfterChange": "  \tpublic IJavaElement[] getVisibleElements(String typeSignature)", "diff": ["-\t\t\t\tLocalVariableBinding binding = (LocalVariableBinding) this.visibleLocalVariables.elementAt(i);", "-\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "-\t\t\t\tJavaElement localVariable = getJavaElement(binding);", "-\t\t\t\tif (localVariable != null) result[elementCount++] = localVariable;", "+\t\t\t\ttry {", "+\t\t\t\t\tLocalVariableBinding binding = (LocalVariableBinding) this.visibleLocalVariables.elementAt(i);", "+\t\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "+\t\t\t\t\tJavaElement localVariable = getJavaElement(binding);", "+\t\t\t\t\tif (localVariable != null) result[elementCount++] = localVariable;", "+\t\t\t\t} catch(AbortCompilation e) {", "+\t\t\t\t\t// log the exception and proceed", "+\t\t\t\t\tUtil.logRepeatedMessage(e.getKey(), e);", "+\t\t\t\t}", "-\t\t\t\tFieldBinding binding = (FieldBinding) this.visibleFields.elementAt(i);", "-\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "-\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "-\t\t\t\t\tJavaElement field = getJavaElementOfCompilationUnit(binding);", "-\t\t\t\t\tif (field != null) result[elementCount++] = field;", "-\t\t\t\t} else {", "-\t\t\t\t\tJavaElement field = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "-\t\t\t\t\tif (field != null) result[elementCount++] = field.resolved(binding);", "+\t\t\t\ttry {", "+\t\t\t\t\tFieldBinding binding = (FieldBinding) this.visibleFields.elementAt(i);", "+\t\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "+\t\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "+\t\t\t\t\t\tJavaElement field = getJavaElementOfCompilationUnit(binding);", "+\t\t\t\t\t\tif (field != null) result[elementCount++] = field;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tJavaElement field = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "+\t\t\t\t\t\tif (field != null) result[elementCount++] = field.resolved(binding);", "+\t\t\t\t\t}", "+\t\t\t\t} catch(AbortCompilation e) {", "+\t\t\t\t\t// log the exception and proceed", "+\t\t\t\t\tUtil.logRepeatedMessage(e.getKey(), e);", "-\t\t\t\tMethodBinding binding = (MethodBinding) this.visibleMethods.elementAt(i);", "-\t\t\t\tif (assignableTypeBinding != null && !binding.returnType.isCompatibleWith(assignableTypeBinding)) continue next;", "-\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "-\t\t\t\t\tJavaElement method = getJavaElementOfCompilationUnit(binding);", "-\t\t\t\t\tif (method != null) result[elementCount++] = method;", "-\t\t\t\t} else {", "-\t\t\t\t\tJavaElement method = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "-\t\t\t\t\tif (method != null) result[elementCount++] = method.resolved(binding);", "+\t\t\t\ttry {", "+\t\t\t\t\tMethodBinding binding = (MethodBinding) this.visibleMethods.elementAt(i);", "+\t\t\t\t\tif (assignableTypeBinding != null && !binding.returnType.isCompatibleWith(assignableTypeBinding)) continue next;", "+\t\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "+\t\t\t\t\t\tJavaElement method = getJavaElementOfCompilationUnit(binding);", "+\t\t\t\t\t\tif (method != null) result[elementCount++] = method;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tJavaElement method = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "+\t\t\t\t\t\tif (method != null) result[elementCount++] = method.resolved(binding);", "+\t\t\t\t\t}", "+\t\t\t\t} catch(AbortCompilation e) {", "+\t\t\t\t\t// log the exception and proceed", "+\t\t\t\t\tUtil.logRepeatedMessage(e.getKey(), e);", "-"]}], "num": 57128}
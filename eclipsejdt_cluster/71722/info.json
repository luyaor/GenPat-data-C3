{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12e30e4f6afc7391f040eb37979db9a2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fd6ef0d94b6df8679824db923169097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope unused)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "diff": ["-\tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope unused) {", "+\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused) {", "-\t\t\tString simpleName = \"\"; //$NON-NLS-1$", "+\t\t\tString simpleName;", "+\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "+\t\t\t\tsimpleName = \"\"; //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tsimpleName = new String(typeDeclaration.name);", "+\t\t\t}", "-\t\t\tif (occurrenceCount == null)", "+\t\t\tif (occurrenceCount == null) {", "-\t\t\telse", "+\t\t\t} else {", "+\t\t\t}", "-\t\t\treportMatching(anonymousTypeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount.intValue());", "-\t\t\treturn false; // don't visit members as this was done during reportMatching(...)", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new WrappedCoreException(e);", "-\t\t}", "-\t}", "+\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "+\t\t\t\treportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount.intValue());", "+\t\t\t} else {", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeDeclaration);", "+\t\t\t\treportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount.intValue());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "482172717291834c3eb7372eb79e0a95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "1c1d418ad63ddf8e8c36736ccc520ce9790f3c20", "commitAfterChange": "253db1ad159947db401a053aab34e948bedb1e92", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "diff": ["-\tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda) {", "+\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda) {", "+\t\tif (this.ast.apiLevel < AST.JLS8) {", "+\t\t\tif (this.referenceContext != null) {", "+\t\t\t\tthis.referenceContext.setFlags(this.referenceContext.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "+\t\t\tNullLiteral nullLiteral = new NullLiteral(this.ast);", "+\t\t\tnullLiteral.setFlags(nullLiteral.getFlags() | ASTNode.MALFORMED);", "+\t\t\tnullLiteral.setSourceRange(lambda.sourceStart, lambda.sourceEnd - lambda.sourceStart + 1);", "+\t\t\treturn nullLiteral;\t\t", "+\t\t}"]}], "num": 71722}
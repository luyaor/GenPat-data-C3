{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "656b9ca27744aef03b7577032c2ecf9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86db3c79eb131083c9735e1795ac8737", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "db331d5badcb0b35069c87387ccad89f9c226a52", "commitAfterChange": "30b862416cba759ca39b029e0f535018291e11dc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void initializeIndexLocations()", "signatureAfterChange": " private void initializeIndexLocations()", "diff": ["+\t\t\t// See whether the state builder might be used to reduce the number of index locations", "+\t\t\tboolean isAutoBuilding = ResourcesPlugin.getWorkspace().getDescription().isAutoBuilding();", "+\t\t\tchar[][] focusQualifiedName = null;", "+\t\t\tif (isAutoBuilding && focus instanceof IJavaProject) {", "+\t\t\t\tIJavaElement javaElement = this.pattern.focus;", "+\t\t\t\twhile (javaElement != null && !(javaElement instanceof ICompilationUnit) && !(javaElement instanceof IClassFile)) {", "+\t\t\t\t\tjavaElement = javaElement.getParent();", "+\t\t\t\t}", "+\t\t\t\tif (javaElement != null) {", "+\t\t\t\t\tICompilationUnit compilationUnit = (ICompilationUnit) javaElement;", "+\t\t\t\t\tchar[][] qualifiedName = CharOperation.splitOn('.', compilationUnit.findPrimaryType().getFullyQualifiedName().toCharArray());", "+\t\t\t\t\tchar[][][] qualifiedNames = ReferenceCollection.internQualifiedNames(new char[][][] {qualifiedName});", "+\t\t\t\t\tfocusQualifiedName = qualifiedNames[0];", "+\t\t\t\t}", "+\t\t\t}", "+", "-\t\t\t\t\tif (canSeeFocus(focuses, project)) {", "+\t\t\t\t\tif (canSeeFocus(focuses, project, focusQualifiedName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb4a7e2d315369580c329e7d7a7433e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "87d4fd7980451e90652820b5860e6399b708ef2c", "commitAfterChange": "913656a5a76e9163d25332c6a9aeee51291ec413", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object disableTagOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_DISABLING_TAG);", "+\t\tif (disableTagOption != null) {", "+\t\t\tif (disableTagOption instanceof String) {", "+\t\t\t\tString stringValue = (String) disableTagOption;", "+\t\t\t\tif (stringValue.trim().length() == 0) {", "+\t\t\t\t\tthis.disabling_tag = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.disabling_tag = stringValue.toCharArray();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object enableTagOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_ENABLING_TAG);", "+\t\tif (enableTagOption != null) {", "+\t\t\tif (enableTagOption instanceof String) {", "+\t\t\t\tString stringValue = (String) enableTagOption;", "+\t\t\t\tif (stringValue.trim().length() == 0) {", "+\t\t\t\t\tthis.enabling_tag = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.enabling_tag = stringValue.toCharArray();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c65086304672346bb7737fcf0af3b344", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 137, "signatureBeforeChange": " public void invalidType(ASTNode location, TypeBinding type)", "signatureAfterChange": " public void invalidType(ASTNode location, TypeBinding type)", "diff": ["-}", "+\t\tcase NonStaticReferenceInStaticContext :", "+\t\t\tid = IProblem.TypeVariableReferenceFromStaticContext;", "+\t\t    break;", "+\t\tcase IllegalSuperTypeVariable : ", "+\t\t    id = IProblem.IllegalTypeVariableSuperReference;", "+\t\t    break;", "+\t} else if (location instanceof QualifiedTypeReference) {", "+\t\tQualifiedTypeReference ref = (QualifiedTypeReference) location;", "+\t\tif (type instanceof ReferenceBinding) {", "+\t\t\tchar[][] name = ((ReferenceBinding) type).compoundName;", "+\t\t\tend = (int) ref.sourcePositions[name.length - 1];", "+\t\t}", "+\t} else if (location instanceof ImportReference) {", "+\t\tImportReference ref = (ImportReference) location;", "+\t\tif (type instanceof ReferenceBinding) {", "+\t\t\tchar[][] name = ((ReferenceBinding) type).compoundName;", "+\t\t\tend = (int) ref.sourcePositions[name.length - 1];", "+\t\t}", "-\t\tnew String[] {new String(type.readableName())},", "+\t\tnew String[] {new String(type.readableName()) },\t", "+}"]}], "num": 7923}
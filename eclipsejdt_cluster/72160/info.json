{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86682a93dff14a30e48e550a95310060", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02190abe15b0f24d163f5e6b27964371", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": "     public TypeBinding substitute(TypeBinding originalType)", "diff": ["-    \t        ParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "-    \t        TypeBinding[] originalArguments = originalParameterizedType.arguments;", "-    \t        if (originalArguments != null) {", "-\t    \t        TypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t    \t        if (substitutedArguments != originalArguments) {", "-\t\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\t\tlength = originalVariables.length;", "-\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t\t}    \t        \t", "-\t    \t            return this.environment.createParameterizedType(", "-\t    \t                    originalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType());", "-\t        \t    } ", "-    \t        }", "-    \t        break;", "+\t\t\t\tParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "+\t\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "+\t\t\t\tReferenceBinding substitutedEnclosing = originalEnclosing;", "+\t\t\t\tif (originalEnclosing != null) {", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) this.substitute(originalEnclosing);", "+\t\t\t\t}", "+\t\t\t\tTypeBinding[] originalArguments = originalParameterizedType.arguments;", "+\t\t\t\tTypeBinding[] substitutedArguments = originalArguments;", "+\t\t\t\tif (originalArguments != null) {", "+\t\t\t\t\tsubstitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\t}", "+\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "+\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;", "+\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+\t\t\t\t\t\tlength = originalVariables.length;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn originalParameterizedType.type;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn this.environment.createParameterizedType(", "+\t\t\t\t\t\t\toriginalParameterizedType.type, substitutedArguments, substitutedEnclosing);", "+\t\t\t\t}", "+\t\t\t\tbreak;   \t\t        ", "+", "+\t\t\t\toriginalEnclosing = originalType.enclosingType();", "+\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "+\t\t\t\tif (originalEnclosing != null) {", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) this.substitute(originalEnclosing);", "+\t\t\t\t}", "-\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\t\tif (substitutedArguments != originalArguments) {", "+\t\t\t\tsubstitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "-\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "+\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, substitutedEnclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f559131cddad64f014e81d11529fc2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "diff": ["+\t\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "+\t\t\t\tReferenceBinding substitutedEnclosing = originalEnclosing;", "+\t\t\t\tif (originalEnclosing != null) {", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) this.substitute(originalEnclosing);", "+\t\t\t\t}", "+\t\t\t\tTypeBinding[] substitutedArguments = originalArguments;", "-\t\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\t\t\tif (substitutedArguments != originalArguments) {", "-\t\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "-\t\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn originalParameterizedType.type;", "+\t\t\t\t\tsubstitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\t}", "+\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "+\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;", "+\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "+\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\treturn this.environment.createParameterizedType(", "-\t\t\t\t\t\t\t\toriginalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType);", "-\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\treturn originalParameterizedType.type;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn this.environment.createParameterizedType(", "+\t\t\t\t\t\t\toriginalParameterizedType.type, substitutedArguments, substitutedEnclosing);", "+\t\t\t\toriginalEnclosing = originalType.enclosingType();", "+\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "+\t\t\t\tif (originalEnclosing != null) {", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) this.substitute(originalEnclosing);", "+\t\t\t\t}", "-\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\t\tif (substitutedArguments != originalArguments) {", "+\t\t\t\tsubstitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "-\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "+\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, substitutedEnclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79331ebfc87177a56893efb312178021", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\tif (substitutedEnclosing != null) {", "-\t\t\t\t\t\t\t//if (!(substitutedEnclosing instanceof SourceTypeBinding)) break identicalVariables;", "-\t\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (originalParameterizedType.type.isBinaryBinding()) break identicalVariables; // generic binary is never used as is, see 85262", "-\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t}", "+//\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+//\t\t\t\t\t\tif (substitutedEnclosing != null) {", "+//\t\t\t\t\t\t\t//if (!(substitutedEnclosing instanceof SourceTypeBinding)) break identicalVariables;", "+//\t\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;\t\t\t\t\t\t", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tif (originalParameterizedType.type.isBinaryBinding()) break identicalVariables; // generic binary is never used as is, see 85262", "+//\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+//\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "+//\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\treturn originalParameterizedType.type;", "+//\t\t\t\t\t}", "-\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "-\t\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+//\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "+\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);", "+//\t\t\t\t}", "+//\t\t\t\tbreak;"]}], "num": 72160}
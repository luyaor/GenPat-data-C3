{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca4471d09f2484167ec142978045223c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004f469c55c6cfa77f6a1c3831f26d1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocFlattener.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public boolean visit(ArrayType node)", "signatureAfterChange": " public boolean visit(ArrayType node)", "diff": ["-\tnode.getComponentType().accept(this);", "-\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\tif (node.getAST().apiLevel() < AST.JLS8) {", "+\t\tcomponentType(node).accept(this);", "+\t\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\t} else {", "+\t\tnode.getElementType().accept(this);", "+\t\tfor (int i = 0;  i < node.getDimensions(); ++i) {", "+\t\t\t((ExtraDimension) node.dimensions().get(i)).accept(this);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "149c9d9782af5d0ad1255373186d693b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic ArrayType newArrayType(Type componentType)", "signatureAfterChange": " \tpublic ArrayType newArrayType(Type type)", "diff": ["-\tpublic ArrayType newArrayType(Type componentType) {", "-\t\tArrayType result = new ArrayType(this);", "-\t\tresult.setComponentType(componentType);", "+\tpublic ArrayType newArrayType(Type type) {", "+\t\tArrayType result;", "+\t\tif (this.apiLevel < AST.JLS8) {", "+\t\t\tresult = new ArrayType(this);", "+\t\t\tsetArrayComponentType(result, type);", "+\t\t\treturn result;", "+\t\t}", "+\t\tif (type.isArrayType()) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tresult = new ArrayType(this);", "+\t\tresult.setElementType(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4336a1e04e84cd7506851e807f8c6ffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/CompilationUnitSorter.java", "commitBeforeChange": "c270ff57e75841606a99505b6ccf3e93c595f397", "commitAfterChange": "9d28ff91378f9bfbe6756ae0331a10fbb52d3dba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static void sort(ICompilationUnit[] compilationUnits, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void sort(IJavaElement[] workingCopies, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic static void sort(ICompilationUnit[] compilationUnits, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws CoreException {", "-\t\tif (comparator == null || compilationUnits == null) {", "-\t\t\treturn;", "+\tpublic static void sort(IJavaElement[] workingCopies, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException {", "+\t\tif (comparator == null || workingCopies == null) {", "+\t\t\tthrow new IllegalArgumentException();", "-\t\tSortElementsOperation operation = new SortElementsOperation(compilationUnits , positions, comparator);", "-\t\tJavaCore.run(operation, monitor);", "+\t\tif (positions != null && positions.length != workingCopies.length) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tSortElementsOperation operation = new SortElementsOperation(workingCopies , positions, comparator);", "+\t\ttry {", "+\t\t\tJavaCore.run(operation, monitor);", "+\t\t} catch(CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77c9265fefd3758e9a7b092dd937c889", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic ArrayType newArrayType(Type elementType, int dimensions)", "signatureAfterChange": " \tpublic ArrayType newArrayType(Type elementType, int dimensions)", "diff": ["-\t\tArrayType result = new ArrayType(this);", "-\t\tresult.setComponentType(elementType);", "-\t\tfor (int i = 2; i <= dimensions; i++) {", "-\t\t\tresult = newArrayType(result);", "+\t\tArrayType result;", "+\t\tif (this.apiLevel < AST.JLS8) {", "+\t\t\tresult = new ArrayType(this);", "+\t\t\tsetArrayComponentType(result, elementType);", "+\t\t\tfor (int i = 2; i <= dimensions; i++) {", "+\t\t\t\tresult = newArrayType(result);", "+\t\t\t}", "+\t\t\treturn result;", "+\t\t}", "+\t\t//level >= JLS8", "+\t\tif (elementType.isArrayType()) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tresult = new ArrayType(this);", "+\t\tresult.setElementType(elementType);", "+\t\t// index starting from 1 since there is a dimension already available by default.", "+\t\tfor (int i = 1; i < dimensions; ++i) {", "+\t\t\tresult.dimensions().add(new ExtraDimension(this));"]}], "num": 18827}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af2f353fc29be49e00c2e1c659441494", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a45537ba6c4d134d0e976c5448b307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic int getModifiers()", "signatureAfterChange": " \tpublic int getModifiers()", "diff": ["+\t\t} else if (isAnnotation()) {", "+\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "+\t\t\tfinal int accessFlags = referenceBinding.getAccessFlags() & VALID_MODIFIERS;", "+\t\t\t// clear the AccAbstract, AccAnnotation and the AccInterface bits", "+\t\t\treturn accessFlags & ~(IConstants.AccAbstract | IConstants.AccInterface | IConstants.AccAnnotation);\t\t\t", "-\t\t} else if (isAnnotation()) {", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "-\t\t\tfinal int accessFlags = referenceBinding.getAccessFlags() & VALID_MODIFIERS;", "-\t\t\t// clear the AccAbstract, AccAnnotation and the AccInterface bits", "-\t\t\treturn accessFlags & ~(IConstants.AccAbstract | IConstants.AccInterface | IConstants.AccAnnotation);\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50930938f6692c5c589ab3477f2108cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "982919179fe30a93d64a2d590bdb7ee6c337517e", "commitAfterChange": "2e116c3e018660ef5b20120d1f6bee149cdcd47d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.CLASS_DECL;", "-\t\t\t\t\t\t\t} else if (type.isInterface()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE_DECL;", "-\t\t\t\t\t\t\t} else if (type.isEnum()) {", "+\t\t\t\t\t\t\tif (type.isEnum()) {", "-\t\t\t\t\t\t\t} else /*if (type.isAnnotation())*/ {", "+\t\t\t\t\t\t\t} else if (type.isAnnotation()) {", "+\t\t\t\t\t\t\t}\telse if (type.isClass()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.CLASS_DECL;", "+\t\t\t\t\t\t\t} else /*if (type.isInterface())*/ {", "+\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE_DECL;"]}], "num": 51283}
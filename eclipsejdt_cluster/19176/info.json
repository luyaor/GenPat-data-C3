{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16865740978fe33d0137a62fbd09bef5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "285c3ad5bdb8d298c22dd326f64cff91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void resolveStatements(ClassScope upperScope)", "signatureAfterChange": " \tpublic void resolveStatements(ClassScope upperScope)", "diff": ["-/*", "-\t\t// checking for recursive constructor call (protection)", "-\t\tif (!ignoreFurtherInvestigation && constructorCall == null){", "-\t\t\tconstructorCall = new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);", "-\t\t\tconstructorCall.sourceStart = sourceStart;", "-\t\t\tconstructorCall.sourceEnd = sourceEnd;", "-\t\t}", "-*/", "+", "-\t\tif (constructorCall != null) {", "+\t\tif (this.constructorCall != null) {", "-\t\t\tif (binding != null", "-\t\t\t\t&& binding.declaringClass.id == T_Object", "-\t\t\t\t&& constructorCall.accessMode != ExplicitConstructorCall.This) {", "-\t\t\t\t\tif (constructorCall.accessMode == ExplicitConstructorCall.Super) {", "-\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(constructorCall);", "+\t\t\tif (this.binding != null", "+\t\t\t\t&& this.binding.declaringClass.id == T_Object", "+\t\t\t\t&& this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "+\t\t\t\t\tif (this.constructorCall.accessMode == ExplicitConstructorCall.Super) {", "+\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\t\t\tconstructorCall = null;", "+\t\t\t\t\tthis.constructorCall = null;", "-\t\t\t\tconstructorCall.resolve(scope);", "+\t\t\t\tthis.constructorCall.resolve(this.scope);", "-", "-\t\t// indirect reference: increment target constructor reference count", "-\t\tif (constructorCall != null){", "-\t\t\tif (constructorCall.binding != null", "-\t\t\t\t&& !constructorCall.isSuperAccess()", "-\t\t\t\t&& constructorCall.binding.isValidBinding()) {", "-\t\t\t\t((ConstructorDeclaration)", "-\t\t\t\t\t\t(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55485e77b4465e22071e6a80543b6c46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "76b6aef868544c4d2f6d21575e84412f247472ae", "commitAfterChange": "406d61c9a16be8f709e407a59600ccbf947335dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tpublic void resolve(ClassScope upperScope)", "signatureAfterChange": "\r \tpublic void resolveStatements(ClassScope upperScope)", "diff": ["-\tpublic void resolve(ClassScope upperScope) {\r", "-\r", "-\t\tif (binding == null) {\r", "-\t\t\tignoreFurtherInvestigation = true;\r", "-\t\t}\r", "-\r", "+\tpublic void resolveStatements(ClassScope upperScope) {\r", "+/*\r", "+*/\r", "+\t\tif (!CharOperation.equals(scope.enclosingSourceType().sourceName, selector)){\r", "+\t\t\tscope.problemReporter().missingReturnType(this);\r", "+\t\t}\r", "-\t\tsuper.resolve(upperScope);\r", "-\r", "-\t\ttry {\r", "-\t\t\t// indirect reference: increment target constructor reference count\r", "-\t\t\tif (constructorCall != null){\r", "-\t\t\t\tif (constructorCall.binding != null\r", "-\t\t\t\t\t&& !constructorCall.isSuperAccess()\r", "-\t\t\t\t\t&& constructorCall.binding.isValidBinding()) {\r", "-\t\t\t\t\t((ConstructorDeclaration)\r", "-\t\t\t\t\t\t\t(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;\r", "-\t\t\t\t}\r", "+\t\t// if null ==> an error has occurs at parsing time ....\r", "+\t\tif (constructorCall != null) {\r", "+\t\t\t// e.g. using super() in java.lang.Object\r", "+\t\t\tif (binding != null\r", "+\t\t\t\t&& binding.declaringClass.id == T_Object\r", "+\t\t\t\t&& constructorCall.accessMode != ExplicitConstructorCall.This) {\r", "+\t\t\t\t\tif (constructorCall.accessMode == ExplicitConstructorCall.Super) {\r", "+\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(constructorCall);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tconstructorCall = null;\r", "+\t\t\t} else {\r", "+\t\t\t\tconstructorCall.resolve(scope);\r", "-\t\t} catch (AbortMethod e) {\r", "-\t\t\tthis.ignoreFurtherInvestigation = true;\r", "+\t\t}\r", "+\t\t\r", "+\t\tsuper.resolveStatements(upperScope);\r", "+\r", "+\t\t// indirect reference: increment target constructor reference count\r", "+\t\tif (constructorCall != null){\r", "+\t\t\tif (constructorCall.binding != null\r", "+\t\t\t\t&& !constructorCall.isSuperAccess()\r", "+\t\t\t\t&& constructorCall.binding.isValidBinding()) {\r", "+\t\t\t\t((ConstructorDeclaration)\r", "+\t\t\t\t\t\t(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;\r", "+\t\t\t}\r"]}], "num": 19176}
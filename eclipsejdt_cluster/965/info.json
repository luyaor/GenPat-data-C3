{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c526a94c87bc63e9c2a9b49c36474f22", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b100bb23b39825ce12861db390f3fd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant condConstant = this.condition.constant;", "+\t\tConstant cst = this.condition.constant;", "+\t\tboolean isConditionTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionFalse = cst != NotAConstant && cst.booleanValue() == false;", "+", "+\t\tcst = this.condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+\t\tFlowInfo actionInfo;", "-\t\t\tif ((condConstant != NotAConstant) && (condConstant.booleanValue() == true)) {", "-\t\t\t\treturn FlowInfo.DeadEnd;", "+\t\t\tif (isConditionTrue) {", "+\t\t\t\treturn FlowInfo.DEAD_END;", "+\t\t\t\tif (isConditionOptimizedTrue){", "+\t\t\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t}", "-\t\t\tFlowInfo actionInfo = // TODO: shouldn't it use optimized constant here?", "-\t\t\t\t((condConstant != Constant.NotAConstant) && (condConstant.booleanValue() == false))", "-\t\t\t\t\t? FlowInfo.DeadEnd", "-\t\t\t\t\t: postCondInfo.initsWhenTrue().copy();", "+\t\t\tif (isConditionFalse) {", "+\t\t\t\tactionInfo = FlowInfo.DEAD_END;", "+\t\t\t} else {", "+\t\t\t\tactionInfo = postCondInfo.initsWhenTrue().copy();", "+\t\t\t\tif (isConditionOptimizedFalse){", "+\t\t\t\t\tactionInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tif (((actionInfo == FlowInfo.DeadEnd) || actionInfo.isFakeReachable())", "-\t\t\t\t&& ((loopingContext.initsOnContinue == FlowInfo.DeadEnd)", "-\t\t\t\t\t|| loopingContext.initsOnContinue.isFakeReachable())) {", "+\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "-\t\tif ((condConstant != Constant.NotAConstant) && (condConstant.booleanValue() == true)) {", "+\t\tif (isConditionTrue) {", "+\t\tif (isConditionOptimizedTrue && continueLabel == null){", "+\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e97847ec9d9417914715c022c5be0b67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tboolean conditionIsInlinedToTrue = ", "-\t\t\tcondition == null || (condition.constant != NotAConstant && condition.constant.booleanValue() == true);", "-\t\tboolean conditionIsInlinedToFalse = ", "-\t\t\t! conditionIsInlinedToTrue && (condition.constant != NotAConstant && condition.constant.booleanValue() == false);", "+\t\tConstant cst = this.condition == null ? null : this.condition.constant;", "+\t\tboolean isConditionTrue = cst == null || (cst != NotAConstant && cst.booleanValue() == true);", "+\t\tboolean isConditionFalse = cst != null && (cst != NotAConstant && cst.booleanValue() == false);", "+", "+\t\tcst = this.condition == null ? null : this.condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst == null ||  (cst != NotAConstant && cst.booleanValue() == true);", "+\t\tboolean isConditionOptimizedFalse = cst != null && (cst != NotAConstant && cst.booleanValue() == false);", "-\t\t\tif (!conditionIsInlinedToTrue) {", "+\t\t\tif (!isConditionTrue) {", "-\t\t\tif (conditionIsInlinedToTrue) {", "-\t\t\t\treturn FlowInfo.DeadEnd;", "+\t\t\tif (isConditionTrue) {", "+\t\t\t\treturn FlowInfo.DEAD_END;", "-\t\t\t\tif (conditionIsInlinedToFalse){", "+\t\t\t\tif (isConditionFalse){", "-\t\t\t\tactionInfo = conditionIsInlinedToFalse", "-\t\t\t\t\t? FlowInfo.DeadEnd  // unreachable when condition inlined to false", "-\t\t\t\t\t: initsWhenTrue.copy();", "+\t\t\t\tif (isConditionFalse) {", "+\t\t\t\t\tactionInfo = FlowInfo.DEAD_END;", "+\t\t\t\t} else {", "+\t\t\t\t\tactionInfo = initsWhenTrue.copy();", "+\t\t\t\t\tif (isConditionOptimizedFalse){", "+\t\t\t\t\t\tactionInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (((actionInfo == FlowInfo.DeadEnd) || actionInfo.isFakeReachable())", "-\t\t\t\t&& ((loopingContext.initsOnContinue == FlowInfo.DeadEnd)", "-\t\t\t\t\t|| loopingContext.initsOnContinue.isFakeReachable())) {", "+\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "-\t\tif (conditionIsInlinedToTrue) {", "+\t\tif (isConditionTrue) {", "+\t\tif (isConditionOptimizedTrue && continueLabel == null){", "+\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t}"]}], "num": 965}
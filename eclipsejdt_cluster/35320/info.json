{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aedffa3ad72bfb0124cd708b212eac8a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e23cd41bcb004e65c728e3abdb97249", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private int indexOf(String path)", "signatureAfterChange": " private int indexOf(String path, String containerPath)", "diff": ["-private int indexOf(String path) {", "-\tfor (int i = 0; i < this.pathsCount; i++) {", "-\t\tif (this.pathWithSubFolders[i]) {", "-\t\t\tif (path.startsWith(this.paths[i])) {", "-\t\t\t\treturn i;", "+private int indexOf(String path, String containerPath) {", "+\tif (containerPath != null) {", "+\t\t// if container path is known, use the hash to get faster comparison", "+\t\tint index = (containerPath.hashCode()& 0x7FFFFFFF) % this.paths.length;", "+\t\tString currentContainerPath;", "+\t\twhile ((currentContainerPath = this.containerPaths[index]) != null) {", "+\t\t\tif (currentContainerPath.equals(containerPath)) {", "+\t\t\t\tString scopePath = this.paths[index];", "+\t\t\t\tif (encloses(scopePath, path, index))", "+\t\t\t\t\treturn index;", "-\t\t} else {", "-\t\t\t// if not looking at subfolders, this scope encloses the given path ", "-\t\t\t// if this path is a direct child of the scope's ressource", "-\t\t\t// or if this path is the scope's resource (see bug 13919 Declaration for package not found if scope is not project)", "-\t\t\tString scopePath = this.paths[i];", "-\t\t\tif (path.startsWith(scopePath) ", "-\t\t\t\t&& ((scopePath.length() == path.lastIndexOf('/'))", "-\t\t\t\t\t|| (scopePath.length() == path.length()))) {", "-\t\t\t\treturn i;", "-\t\t\t}", "+\t\t\tindex = (index + 1) % this.paths.length;", "+\t\treturn -1;", "+\t}", "+\t", "+\t// fallback to sequentially look at all known paths", "+\tfor (int i = 0, length = this.paths.length; i < length; i++) {", "+\t\tString scopePath = this.paths[i];", "+\t\tif (scopePath == null) continue;", "+\t\tif (encloses(scopePath, path, i))", "+\t\t\treturn i;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c78679ed94a68dbfdd89315379e5f32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "1f25db82a90d7dfb41e186c23361a31470988684", "commitAfterChange": "9cd1ab49783c2213611dcbe2939a387e78b83c79", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth)", "signatureAfterChange": " \tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth, int indentWidth)", "diff": ["-\tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth) {", "+\tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth, int indentWidth) {", "-\t\t\t", "+", "+\t\tfinal int spaceEquivalentsToRemove= indentsToRemove * indentWidth;", "+\t\t", "-\t\tint indents= 0;", "-\t\tint blanks= 0;", "+\t\tint spaceEquivalents= 0;", "+\t\tString prefix= null;", "-\t\t\t\tindents++;", "-\t\t\t\tblanks= 0;", "+\t\t\t\tint remainder= spaceEquivalents % tabWidth;", "+\t\t\t\tspaceEquivalents += tabWidth - remainder;", "-\t\t\t\t\tblanks++;", "-\t\t\t\t\tif (blanks == tabWidth) {", "-\t\t\t\t\t\tindents++;", "-\t\t\t\t\t\tblanks= 0;", "-\t\t\t\t\t}", "+\t\t\t\tspaceEquivalents++;", "-\t\t\tif (indents == indentsToRemove) {", "+\t\t\tif (spaceEquivalents == spaceEquivalentsToRemove) {", "-\t\t\t}\t", "+\t\t\t}", "+\t\t\tif (spaceEquivalents > spaceEquivalentsToRemove) {", "+\t\t\t\t// can happen if tabSize > indentSize, e.g tabsize==8, indent==4, indentsToRemove==1, line prefixed with one tab", "+\t\t\t\t// this implements the third option", "+\t\t\t\tstart= i + 1; // remove the tab", "+\t\t\t\t// and add the missing spaces", "+\t\t\t\tchar[] missing= new char[spaceEquivalents - spaceEquivalentsToRemove];", "+\t\t\t\tArrays.fill(missing, ' ');", "+\t\t\t\tprefix= new String(missing);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\tString trimmed;", "-\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\t\ttrimmed= \"\"; //$NON-NLS-1$", "-\t\t\treturn line.substring(start);", "+\t\t\ttrimmed= line.substring(start);", "+\t\t", "+\t\tif (prefix == null)", "+\t\t\treturn trimmed;", "+\t\treturn prefix + trimmed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9673772937b5b1a212bf7c916f11f204", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "3c5f4a72fa40d161c5df0c986d4c60e32d52f863", "commitAfterChange": "98204916425a6241634af08472ba583f090f0116", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth)", "signatureAfterChange": " \tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth, int indentWidth)", "diff": ["-\tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth) {", "+\tpublic static String trimIndent(String line, int indentsToRemove, int tabWidth, int indentWidth) {", "-\t\t\t", "+", "+\t\tfinal int spaceEquivalentsToRemove= indentsToRemove * indentWidth;", "+\t\t", "-\t\tint indents= 0;", "-\t\tint blanks= 0;", "+\t\tint spaceEquivalents= 0;", "+\t\tString prefix= null;", "-\t\t\t\tindents++;", "-\t\t\t\tblanks= 0;", "+\t\t\t\tint remainder= spaceEquivalents % tabWidth;", "+\t\t\t\tspaceEquivalents += tabWidth - remainder;", "-\t\t\t\t\tblanks++;", "-\t\t\t\t\tif (blanks == tabWidth) {", "-\t\t\t\t\t\tindents++;", "-\t\t\t\t\t\tblanks= 0;", "-\t\t\t\t\t}", "+\t\t\t\tspaceEquivalents++;", "-\t\t\tif (indents == indentsToRemove) {", "+\t\t\tif (spaceEquivalents == spaceEquivalentsToRemove) {", "-\t\t\t}\t", "+\t\t\t}", "+\t\t\tif (spaceEquivalents > spaceEquivalentsToRemove) {", "+\t\t\t\t// can happen if tabSize > indentSize, e.g tabsize==8, indent==4, indentsToRemove==1, line prefixed with one tab", "+\t\t\t\t// this implements the third option", "+\t\t\t\tstart= i + 1; // remove the tab", "+\t\t\t\t// and add the missing spaces", "+\t\t\t\tchar[] missing= new char[spaceEquivalents - spaceEquivalentsToRemove];", "+\t\t\t\tArrays.fill(missing, ' ');", "+\t\t\t\tprefix= new String(missing);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\tString trimmed;", "-\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\t\ttrimmed= \"\"; //$NON-NLS-1$", "-\t\t\treturn line.substring(start);", "+\t\t\ttrimmed= line.substring(start);", "+\t\t", "+\t\tif (prefix == null)", "+\t\t\treturn trimmed;", "+\t\treturn prefix + trimmed;"]}], "num": 35320}
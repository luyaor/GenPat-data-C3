{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "756cbbe40b6d319214cc04785461d677", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847f8a2b5037e727d2649f8ed33c0cc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "990743369489693dca5f5fa68483b66fb1bdecda", "commitAfterChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "signatureAfterChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "diff": ["-\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient) {", "-\t\tAnnotationBinding[] instances = null;", "-\t\tint length = annotations == null ? 0 : annotations.length;", "+\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient) {", "+\t\tAnnotationBinding[] annotations = null;", "+\t\tint length = sourceAnnotations == null ? 0 : sourceAnnotations.length;", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\ttype.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\ttype.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tmethod.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tmethod.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tfield.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tfield.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tlocal.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tlocal.setAnnotations(annotations);", "-\t\tif (annotations == null)", "+\t\tif (sourceAnnotations == null)", "-\t\tTypeBinding[] annotationTypes = new TypeBinding[length];", "-\t\t\tAnnotation annotation = annotations[i];", "+\t\t\tAnnotation annotation = sourceAnnotations[i];", "-\t\t\t\tif (instances != null) {", "+\t\t\t\tif (annotations != null) {", "-\t\t\t\t\tinstances[0] = annotation.getCompilerAnnotation();", "+\t\t\t\t\tannotations[0] = annotation.getCompilerAnnotation();", "-\t\t\t\t\t\tAnnotation annot = annotations[j];", "-\t\t\t\t\t\tinstances[j] = annot.getCompilerAnnotation();", "+\t\t\t\t\t\tAnnotation annot = sourceAnnotations[j];", "+\t\t\t\t\t\tannotations[j] = annot.getCompilerAnnotation();", "-\t\t\t\tannotationTypes[i] = annotation.resolveType(scope);", "+\t\t\t\tannotation.resolveType(scope);", "-\t\t\t\tif (instances != null) {", "-\t\t\t\t\tinstances[i] = annotation.getCompilerAnnotation();", "+\t\t\t\tif (annotations != null) {", "+\t\t\t\t\tannotations[i] = annotation.getCompilerAnnotation();", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tTypeBinding annotationType = annotationTypes[i];", "-\t\t\tif (annotationType == null) continue;", "-\t\t\tboolean foundDuplicate = false;", "-\t\t\tfor (int j = i+1; j < length; j++) {", "-\t\t\t\tif (annotationTypes[j] == annotationType) {", "-\t\t\t\t\tfoundDuplicate = true;", "-\t\t\t\t\tannotationTypes[j] = null; // report it only once", "-\t\t\t\t\tscope.problemReporter().duplicateAnnotation(annotations[j]);", "+\t\tif (annotations != null) {", "+\t\t\tAnnotationBinding[] distinctAnnotations = annotations; // only copy after 1st duplicate is detected", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAnnotationBinding annotation = distinctAnnotations[i];", "+\t\t\t\tif (annotation == null) continue;", "+\t\t\t\tTypeBinding annotationType = annotation.getAnnotationType();", "+\t\t\t\tboolean foundDuplicate = false;", "+\t\t\t\tfor (int j = i+1; j < length; j++) {", "+\t\t\t\t\tif (distinctAnnotations[j].getAnnotationType() == annotationType) {", "+\t\t\t\t\t\tfoundDuplicate = true;", "+\t\t\t\t\t\tif (distinctAnnotations == annotations) {", "+\t\t\t\t\t\t\tSystem.arraycopy(distinctAnnotations, 0, distinctAnnotations = new AnnotationBinding[length], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdistinctAnnotations[j] = null; // report it only once", "+\t\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[j]);", "+\t\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (foundDuplicate) {", "-\t\t\t\tscope.problemReporter().duplicateAnnotation(annotations[i]);", "+\t\t\t\tif (foundDuplicate) {", "+\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[i]);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87e0636b975b47e7884a001613c7784d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "d9032a87dfcb69e19b4c3aae869d4a786d1fb149", "commitAfterChange": "eee6512d26cd1c50a9b02d1b4b78531f507d95fc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprivate char[] getQualifiedName()", "signatureAfterChange": "\r \tprivate char[] getQualifiedName()", "diff": ["+\t */\r", "-\t\t} else if (this.openable instanceof org.eclipse.jdt.internal.core.ClassFile) {\r", "-\t\t\torg.eclipse.jdt.internal.core.ClassFile classFile = (org.eclipse.jdt.internal.core.ClassFile)this.openable;\r", "-\t\t\ttry {\r", "-\t\t\t\tIType type = MatchingOpenable.getTopLevelType(classFile.getType());\r", "-\t\t\t\treturn type.getFullyQualifiedName().toCharArray();\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\treturn null; // nothing we can do here\r", "+\t\t} else if (this.openable instanceof ClassFile) {\r", "+\t\t\tString sourceFileName = getSourceFileName();\r", "+\t\t\tif (sourceFileName == NO_SOURCE_FILE_NAME) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\treturn ((ClassFile)this.openable).getType().getFullyQualifiedName('.').toCharArray();\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\treturn null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tString simpleName = sourceFileName.substring(0, sourceFileName.length()-5); // length-\".java\".length()\r", "+\t\t\tString pkgName = this.openable.getParent().getElementName();\r", "+\t\t\tif (pkgName.length() == 0) {\r", "+\t\t\t\treturn simpleName.toCharArray();\r", "+\t\t\t} else {\r", "+\t\t\t\treturn (pkgName + '.' + simpleName).toCharArray();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba65a210ae5e4e2795cdc0ff0cd8d6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b080f0d7bae3add3e26aca56768f25b351884bac", "commitAfterChange": "f0aaa159cf03f4e96f0cf3cc5eba450308b5c3af", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "diff": ["+\t\t\t\tboolean wasSuccessful = false; // flag recording if .classpath file change got reflected", "-\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t\t\t} catch (Assert.AssertionFailedException e) { // failed creating CP entries from file", "+\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", project.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// if reach that far, the classpath file change got absorbed", "+\t\t\t\t\twasSuccessful = true;", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t// happens if the .classpath could not be written to disk", "+\t\t\t\t} catch (JavaModelException e) { // CP failed validation", "-\t\t\t\t\t\tUtil.log(e, \"Could not set classpath for \"+ project.getPath()); //$NON-NLS-1$", "+\t\t\t\t\t\t// TODO: (jbl) need to distinguish scenario where .classpath file couldn't be written out", "+\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", project.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error\t\t\t\t\t", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (!wasSuccessful){ ", "+\t\t\t\t\t\t// TODO: (jbl) rename the .classpath file into .classpath_invalid", "+\t\t\t\t\t}"]}], "num": 31466}
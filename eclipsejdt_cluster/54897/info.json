{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d822554665d6a5d6203e4ef7f89017bb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f012e88ad158521e824993452dc9ca40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "d9dd3f3b4344311765aa43bd0ec69a035e3c1a0f", "commitAfterChange": "8d87ecb9a70373c09b0bb1a42f7860870a18b529", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t/**", "-\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=13233", "-\t\t * This handles cases where the parser built nodes with invalid modifiers.", "-\t\t */", "-\t\ttry {", "-\t\t\t// if Modifier.VOLATILE is set, setModifiers is not allowed, but the code has no syntax error.", "-\t\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);", "-\t\t} catch(IllegalArgumentException e) {", "-\t\t\tint legalModifiers =", "-\t\t\t\tModifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED", "-\t\t\t\t| Modifier.STATIC | Modifier.FINAL | Modifier.SYNCHRONIZED", "-\t\t\t\t| Modifier.NATIVE | Modifier.ABSTRACT | Modifier.STRICTFP;", "-\t\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & legalModifiers);", "-\t\t\tmethodDecl.setFlags(ASTNode.MALFORMED);", "-\t\t}", "+\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fedc65181505cd7011488635558ba8be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "d9dd3f3b4344311765aa43bd0ec69a035e3c1a0f", "commitAfterChange": "8d87ecb9a70373c09b0bb1a42f7860870a18b529", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "  \tprivate FieldDeclaration convertToFieldDeclaration(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl)", "signatureAfterChange": "  \tprivate FieldDeclaration convertToFieldDeclaration(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl)", "diff": ["-\t\t/**", "-\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=13233", "-\t\t * This handles cases where the parser built nodes with invalid modifiers.", "-\t\t */", "-\t\ttry {", "-\t\t\tfieldDeclaration.setModifiers(fieldDecl.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);", "-\t\t} catch(IllegalArgumentException e) {", "-\t\t\tint legalModifiers = ", "-\t\t\t\tModifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED", "-\t\t\t\t| Modifier.STATIC | Modifier.FINAL | Modifier.VOLATILE", "-\t\t\t\t| Modifier.TRANSIENT;", "-\t\t\tfieldDeclaration.setModifiers(fieldDecl.modifiers & legalModifiers);", "-\t\t\tfieldDeclaration.setFlags(ASTNode.MALFORMED);", "-\t\t}", "-\t\t// The javadoc comment is now got from list store in compilation unit declaration", "-//\t\tsetJavaDocComment(fieldDeclaration);", "-//\t\tfieldDeclaration.setJavadoc(convert(fieldDecl.javadoc));", "+\t\tfieldDeclaration.setModifiers(fieldDecl.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);"]}], "num": 54897}
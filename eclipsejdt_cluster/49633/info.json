{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f04939ae5432b1e224838860270edf06", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02d084fe0289c4257cda160076121e28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+ */\r", "+public IJavaModelStatus verify() {\r", "+\tIJavaModelStatus status = super.verify();\r", "+\tif (!status.isOK()) {\r", "+\t\treturn status;\r", "+\t}\r", "+\tIJavaProject javaProject = (IJavaProject)getElementToProcess();\r", "-\t */\r", "-\tpublic IJavaModelStatus verify() {\r", "-\t\tIJavaModelStatus status = super.verify();\r", "-\t\tif (!status.isOK()) {\r", "-\t\t\treturn status;\r", "-\t\t}\r", "-\t\tIClasspathEntry[] cp = this.newRawPath;\r", "-\t\tIJavaProject javaProject = (IJavaProject) getElementToProcess();\r", "-\t\tIPath projectPath = javaProject.getProject().getFullPath();\r", "-\r", "-\t\tIPath outputLocation;\r", "-\t\ttry {\r", "-\t\t\toutputLocation = javaProject.getOutputLocation();\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\treturn e.getJavaModelStatus();\r", "-\t\t}\r", "-\t\tfor (int i = 0; i < cp.length; i++) {\r", "-\t\t\tif (cp[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) {\r", "-\t\t\t\tIPath entry = cp[i].getPath();\r", "-\t\t\t\tif (!entry.equals(projectPath)\r", "-\t\t\t\t\t&& !entry.equals(outputLocation)\r", "-\t\t\t\t\t&& (outputLocation.isPrefixOf(entry) || entry.isPrefixOf(outputLocation))) {\r", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entry);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn JavaModelStatus.VERIFIED_OK;\r", "+\t// retrieve output location\r", "+\tIPath outputLocation;\r", "+\ttry {\r", "+\t\toutputLocation = javaProject.getOutputLocation();\r", "+\t} catch(JavaModelException e){\r", "+\t\treturn e.getJavaModelStatus();\r", "+\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f0c65a757367a677b1e5bde0e9fd6dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "0df57fb5e3c8ba23a5c9637624ca9064d6362105", "commitAfterChange": "ec347031cf50724e26089d866fc7a0e2b977eae3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void deleteIndexFiles(SimpleSet pathsToKeep)", "signatureAfterChange": " public void deleteIndexFiles()", "diff": ["+public void deleteIndexFiles() {", "+\tthis.savedIndexNamesFile.delete(); // forget saved indexes & delete each index file", "+\tdeleteIndexFiles(null);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a999b6f863ba9bb0cd188abdcf59ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "f7e03b51cbcdb65febacaecaf401f7cd7093398d", "commitAfterChange": "b41a5de95343375633384e6b1b331ea9265a7fc6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["+}", "-\t\t// must check each parameter pair to see if you have raw to parameterized conversions", "-\t\tTypeBinding[] currentArgs = currentMethod.parameters;", "-\t\tTypeBinding[] inheritedArgs = inheritedMethod.parameters;", "-\t\tif (currentArgs != inheritedArgs) {", "-\t\t\tfor (int j = 0, k = currentArgs.length; j < k; j++) {", "-\t\t\t\tTypeBinding currentArg = currentArgs[j].leafComponentType();", "-\t\t\t\tTypeBinding inheritedArg = inheritedArgs[j].leafComponentType();", "-\t\t\t\tif (currentArg != inheritedArg) {", "-\t\t\t\t\tif (currentArg.isParameterizedType() && hasBoundedParameters((ParameterizedTypeBinding) currentArg)) {", "-\t\t\t\t\t\tif (inheritedArg.isRawType()) {", "-//\t\t\t\t\t\tif (inheritedArg.isRawType() || !inheritedArg.isEquivalentTo(currentArg)) {", "-\t\t\t\t\t\t\tthis.problemReporter(currentMethod).methodNameClash(currentMethod, inheritedMethod);", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif (checkForNameClash(currentMethod, inheritedMethod)) {", "+\t\t\tthis.problemReporter(currentMethod).methodNameClash(currentMethod, inheritedMethod);", "+\t\t\tcontinue nextMethod;"]}], "num": 49633}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b14250c01504719f7316adbe72c76a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c66f0987b009d5115eba64b1bdde860", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic String toStringExpression(int tab)", "signatureAfterChange": " \t \tpublic String toStringExpression()", "diff": ["+\t", "+\tpublic String toStringExpression() {", "+\t\treturn this.toStringExpression(0);", "+\t}", "-\t\ts += super.toStringExpression(tab);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81530c1af22bb76b899f245082ec83cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "006840496c634605eabe839d601b387cc5a67afc", "commitAfterChange": "141f925aec4c96ac1d9b6f8adc8864f93d5076e0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tIMethodBinding resolveMethod(MethodInvocation method)", "signatureAfterChange": " \tIMethodBinding resolveMethod(MethodInvocation method)", "diff": ["-\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(messageSend.binding);", "-\t\t\t\tif (methodBinding == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, method);", "-\t\t\t\tString key = methodBinding.getKey();", "-\t\t\t\tif (key != null) {", "-\t\t\t\t\tthis.bindingKeysToAstNodes.put(key, method);\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\treturn methodBinding;", "+\t\t\t\treturn this.getMethodBinding(messageSend.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e67d11fca181a7574dcc7cc1458fa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "006840496c634605eabe839d601b387cc5a67afc", "commitAfterChange": "141f925aec4c96ac1d9b6f8adc8864f93d5076e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tIMethodBinding resolveMethod(SuperMethodInvocation method)", "signatureAfterChange": " \tIMethodBinding resolveMethod(SuperMethodInvocation method)", "diff": ["-\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(messageSend.binding);", "-\t\t\t\tif (methodBinding == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, method);", "-\t\t\t\tString key = methodBinding.getKey();", "-\t\t\t\tif (key != null) {", "-\t\t\t\t\tthis.bindingKeysToAstNodes.put(key, method);\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\treturn methodBinding;", "+\t\t\t\treturn this.getMethodBinding(messageSend.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93b847d5f7e7307aefe07d1494fee6dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "1e3dfe1b9cf4ad1efe64071cceead18151239ca4", "commitAfterChange": "83202a3eb8c5a069490467f042bef2dbf139e317", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tsynchronized IMethodBinding resolveMethod(MethodReference methodReference)", "signatureAfterChange": " \tsynchronized IMethodBinding resolveMethod(MethodReference methodReference)", "diff": ["-\t\t\tthis.bindingsToAstNodes.put(methodBinding, methodReference);", "-\t\t\tString key = methodBinding.getKey();", "-\t\t\tif (key != null) {", "-\t\t\t\tthis.bindingTables.bindingKeysToBindings.put(key, methodBinding);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af80945738a539b8ecf1e13305105f22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "2ac0aa4bf93dce0d81781574b4b1c063e1707137", "commitAfterChange": "4a0c1b5f816aa399f6a19f5020194c8d888d64ee", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "  \tpublic void updateUserLibrary(String libName, String encodedUserLibrary)", "diff": ["-\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "-\t\tString key = event.getKey();", "-\t\tif (key.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "-\t\t\tString libName = key.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "-\t\t\ttry {", "-\t\t\t\t// find affected projects", "-\t\t\t\tIPath containerPath = new Path(JavaCore.USER_LIBRARY_CONTAINER_ID).append(libName);", "-\t\t\t\tIJavaProject[] allJavaProjects = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProjects();", "-\t\t\t\tArrayList affectedProjects = new ArrayList();", "-\t\t\t\tfor (int i= 0; i < allJavaProjects.length; i++) {", "-\t\t\t\t\tIJavaProject javaProject = allJavaProjects[i];", "-\t\t\t\t\tIClasspathEntry[] entries= javaProject.getRawClasspath();", "-\t\t\t\t\tfor (int j= 0; j < entries.length; j++) {", "-\t\t\t\t\t\tIClasspathEntry entry = entries[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {", "-\t\t\t\t\t\t\tif (containerPath.equals(entry.getPath())) {", "-\t\t\t\t\t\t\t\taffectedProjects.add(javaProject);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t\t\t}", "+\tpublic void updateUserLibrary(String libName, String encodedUserLibrary) {", "+\t\ttry {", "+\t\t\t// find affected projects", "+\t\t\tIPath containerPath = new Path(JavaCore.USER_LIBRARY_CONTAINER_ID).append(libName);", "+\t\t\tIJavaProject[] allJavaProjects = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProjects();", "+\t\t\tArrayList affectedProjects = new ArrayList();", "+\t\t\tfor (int i= 0; i < allJavaProjects.length; i++) {", "+\t\t\t\tIJavaProject javaProject = allJavaProjects[i];", "+\t\t\t\tIClasspathEntry[] entries= javaProject.getRawClasspath();", "+\t\t\t\tfor (int j= 0; j < entries.length; j++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {", "+\t\t\t\t\t\tif (containerPath.equals(entry.getPath())) {", "+\t\t\t\t\t\t\taffectedProjects.add(javaProject);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t", "-\t\t\t\t// decode user library", "-\t\t\t\tString encodedUserLibrary = (String) event.getNewValue();", "-\t\t\t\tUserLibrary userLibrary = encodedUserLibrary == null ? null : UserLibrary.createFromString(new StringReader(encodedUserLibrary));", "-\t\t\t\t", "-\t\t\t\t// update user libraries map", "-\t\t\t\tif (userLibrary != null) {", "-\t\t\t\t\tthis.userLibraries.put(libName, userLibrary);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.userLibraries.remove(libName);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// update affected projects", "-\t\t\t\tint length = affectedProjects.size();", "-\t\t\t\tif (length == 0)", "-\t\t\t\t\treturn;", "-\t\t\t\tIJavaProject[] projects = new IJavaProject[length];", "-\t\t\t\taffectedProjects.toArray(projects);", "-\t\t\t\tIClasspathContainer[] containers = new IClasspathContainer[length];", "-\t\t\t\tif (userLibrary != null) {", "-\t\t\t\t\tUserLibraryClasspathContainer container = new UserLibraryClasspathContainer(libName);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tcontainers[i] = container;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tJavaCore.setClasspathContainer(containerPath, projects, containers, null);", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tUtil.log(e, \"Exception while decoding user library '\"+ libName +\"'.\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\tUtil.log(e, \"Exception while setting user library '\"+ libName +\"'.\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t", "+\t\t\t// decode user library", "+\t\t\tUserLibrary userLibrary = encodedUserLibrary == null ? null : UserLibrary.createFromString(new StringReader(encodedUserLibrary));", "+\t\t\t", "+\t\t\t// update user libraries map", "+\t\t\tif (userLibrary != null) {", "+\t\t\t\tthis.userLibraries.put(libName, userLibrary);", "+\t\t\t} else {", "+\t\t\t\tthis.userLibraries.remove(libName);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// update affected projects", "+\t\t\tint length = affectedProjects.size();", "+\t\t\tif (length == 0)", "+\t\t\t\treturn;", "+\t\t\tIJavaProject[] projects = new IJavaProject[length];", "+\t\t\taffectedProjects.toArray(projects);", "+\t\t\tIClasspathContainer[] containers = new IClasspathContainer[length];", "+\t\t\tif (userLibrary != null) {", "+\t\t\t\tUserLibraryClasspathContainer container = new UserLibraryClasspathContainer(libName);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tcontainers[i] = container;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tJavaCore.setClasspathContainer(containerPath, projects, containers, null);", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while decoding user library '\"+ libName +\"'.\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t} catch (JavaModelException e) {", "+\t\t\tUtil.log(e, \"Exception while setting user library '\"+ libName +\"'.\"); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4c1ca03fa5cf695ebdb2202ee3d1cfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "commitAfterChange": "24134b187b46ea16212a45107324227f46ba3e4a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tsynchronized ITypeBinding getTypeBinding(RecoveredTypeBinding recoveredTypeBinding)", "signatureAfterChange": " \tsynchronized ITypeBinding getTypeBinding(RecoveredTypeBinding recoveredTypeBinding, int dimensions)", "diff": ["-\tsynchronized ITypeBinding getTypeBinding(RecoveredTypeBinding recoveredTypeBinding) {", "+\tsynchronized ITypeBinding getTypeBinding(RecoveredTypeBinding recoveredTypeBinding, int dimensions) {", "-\t\tITypeBinding binding = (ITypeBinding) this.bindingTables.compilerBindingsToASTBindings.get(recoveredTypeBinding);", "-\t\tif (binding != null) {", "-\t\t\treturn binding;", "-\t\t}", "-\t\tbinding = new RecoveredTypeBinding(this, recoveredTypeBinding);", "-\t\tthis.bindingTables.compilerBindingsToASTBindings.put(recoveredTypeBinding, binding);", "-\t\treturn binding;", "+\t\treturn new RecoveredTypeBinding(this, recoveredTypeBinding, dimensions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf9c83e52ed29b49938c0e11d90441e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "ea1c8b8993d94a4a2825823d6fa38985fe017c12", "commitAfterChange": "888e470c7f7a7ee8a22b2b1b1e2107e435c5dd95", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t\tpublic void logOptions(Map options)", "signatureAfterChange": " \t\tpublic void logOptions(Map options)", "diff": ["-\t\t\t\t\tString label = getLabel(key);", "-\t\t\t\t\tif (label != null) {", "-\t\t\t\t\t\tthis.parameters.put(Logger.LABEL, label);", "-\t\t\t\t\t}", "-\t\t\t\t\tString categoryID = getCategoryID(key);", "-\t\t\t\t\tif (categoryID != null) {", "-\t\t\t\t\t\tthis.parameters.put(Logger.CATEGORY_ID, categoryID);", "-\t\t\t\t\t}"]}], "num": 8839}
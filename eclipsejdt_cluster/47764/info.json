{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd43bd23e068b5b0b37488ed69c28681", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea6528c0febee7b359584d873703dd21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations17Test.java", "commitBeforeChange": "83aa074d1edc1431b30e3bdffeaa5b8dd0bf1353", "commitAfterChange": "10d9ee7d6cd7cd29aebe50986af8fcc7cd9d4e32", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testBogusAnnotationFile1() throws Exception", "signatureAfterChange": " \tpublic void testBogusAnnotationFile1() throws Exception", "diff": ["-\t\tmyCreateJavaProject(\"TestLibs\");", "-\t\tString lib1Content = ", "-\t\t\t\t\"package libs;\\n\" + ", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public interface Lib1<T> {\\n\" +", "-\t\t\t\t\"\tpublic Lib1<T> getLib();\\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\taddLibraryWithExternalAnnotations(this.project, \"lib1.jar\", \"annots\", new String[] {", "-\t\t\t\t\"/UnannotatedLib/libs/Lib1.java\",", "-\t\t\t\tlib1Content", "-\t\t\t}, null);", "-\t\tcreateFileInProject(\"annots/libs\", \"Lib1.eea\", ", "-\t\t\t\t\"\");", "+\t\tLogListener listener = new LogListener();", "+\t\ttry {", "+\t\t\tPlatform.addLogListener(listener);", "-\t\t// type check sources:", "-\t\tIPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment(\"tests\", true, null);", "-\t\tICompilationUnit cu = fragment.createCompilationUnit(\"Test1.java\",", "-\t\t\t\t\"package tests;\\n\" + ", "-\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"import libs.Lib1;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public class Test1 {\\n\" + ", "-\t\t\t\t\"\t@NonNull Lib1<String> test0(Lib1<String> stringLib) {\\n\" + ", "-\t\t\t\t\"\t\treturn stringLib.getLib();\\n\" + ", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\",", "-\t\t\t\ttrue, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());", "-\t\tCompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());", "-\t\tIProblem[] problems = reconciled.getProblems();", "-\t\tassertProblems(problems, new String[] {", "-\t\t\t\t\"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'\",", "-\t\t}, new int[] { 8 });", "+\t\t\tmyCreateJavaProject(\"TestLibs\");", "+\t\t\tString lib1Content = ", "+\t\t\t\t\t\"package libs;\\n\" + ", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"public interface Lib1<T> {\\n\" +", "+\t\t\t\t\t\"\tpublic Lib1<T> getLib();\\n\" +", "+\t\t\t\t\t\"}\\n\";", "+\t\t\taddLibraryWithExternalAnnotations(this.project, \"lib1.jar\", \"annots\", new String[] {", "+\t\t\t\t\t\"/UnannotatedLib/libs/Lib1.java\",", "+\t\t\t\t\tlib1Content", "+\t\t\t\t}, null);", "+\t\t\tcreateFileInProject(\"annots/libs\", \"Lib1.eea\", ", "+\t\t\t\t\t\"\");", "+\t", "+\t\t\t// type check sources:", "+\t\t\tIPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment(\"tests\", true, null);", "+\t\t\tICompilationUnit cu = fragment.createCompilationUnit(\"Test1.java\",", "+\t\t\t\t\t\"package tests;\\n\" + ", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"import libs.Lib1;\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"public class Test1 {\\n\" + ", "+\t\t\t\t\t\"\t@NonNull Lib1<String> test0(Lib1<String> stringLib) {\\n\" + ", "+\t\t\t\t\t\"\t\treturn stringLib.getLib();\\n\" + ", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\ttrue, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());", "+\t\t\tCompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());", "+\t\t\tIProblem[] problems = reconciled.getProblems();", "+\t\t\tassertProblems(problems, new String[] {", "+\t\t\t\t\t\"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'\",", "+\t\t\t}, new int[] { 8 });", "+\t\t\t", "+\t\t\tassertEquals(\"number of log entries\", 1, listener.loggedStatus.size());", "+\t\t\tfinal Throwable exception = listener.loggedStatus.get(0).getException();", "+\t\t\tassertEquals(\"logged message\", \"missing class header in annotation file\", exception.getMessage());", "+\t\t} finally {", "+\t\t\tPlatform.removeLogListener(listener);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f67befc4a8f12de57c64ec5fd156c62c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations17Test.java", "commitBeforeChange": "83aa074d1edc1431b30e3bdffeaa5b8dd0bf1353", "commitAfterChange": "10d9ee7d6cd7cd29aebe50986af8fcc7cd9d4e32", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testBogusAnnotationFile2() throws Exception", "signatureAfterChange": " \tpublic void testBogusAnnotationFile2() throws Exception", "diff": ["-\t\tmyCreateJavaProject(\"TestLibs\");", "-\t\tString lib1Content = ", "-\t\t\t\t\"package libs;\\n\" + ", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public interface Lib1<T> {\\n\" +", "-\t\t\t\t\"\tpublic Lib1<T> getLib();\\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\taddLibraryWithExternalAnnotations(this.project, \"lib1.jar\", \"annots\", new String[] {", "-\t\t\t\t\"/UnannotatedLib/libs/Lib1.java\",", "-\t\t\t\tlib1Content", "-\t\t\t}, null);", "-\t\tcreateFileInProject(\"annots/libs\", \"Lib1.eea\", ", "-\t\t\t\t\"type Lib1\\n\");", "+\t\tLogListener listener = new LogListener();", "+\t\ttry {", "+\t\t\tPlatform.addLogListener(listener);", "-\t\t// type check sources:", "-\t\tIPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment(\"tests\", true, null);", "-\t\tICompilationUnit cu = fragment.createCompilationUnit(\"Test1.java\",", "-\t\t\t\t\"package tests;\\n\" + ", "-\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"import libs.Lib1;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public class Test1 {\\n\" + ", "-\t\t\t\t\"\t@NonNull Lib1<String> test0(Lib1<String> stringLib) {\\n\" + ", "-\t\t\t\t\"\t\treturn stringLib.getLib();\\n\" + ", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\",", "-\t\t\t\ttrue, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());", "-\t\tCompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());", "-\t\tIProblem[] problems = reconciled.getProblems();", "-\t\tassertProblems(problems, new String[] {", "-\t\t\t\t\"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'\",", "-\t\t}, new int[] { 8 });", "+\t\t\tmyCreateJavaProject(\"TestLibs\");", "+\t\t\tString lib1Content = ", "+\t\t\t\t\t\"package libs;\\n\" + ", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"public interface Lib1<T> {\\n\" +", "+\t\t\t\t\t\"\tpublic Lib1<T> getLib();\\n\" +", "+\t\t\t\t\t\"}\\n\";", "+\t\t\taddLibraryWithExternalAnnotations(this.project, \"lib1.jar\", \"annots\", new String[] {", "+\t\t\t\t\t\"/UnannotatedLib/libs/Lib1.java\",", "+\t\t\t\t\tlib1Content", "+\t\t\t\t}, null);", "+\t\t\tcreateFileInProject(\"annots/libs\", \"Lib1.eea\", ", "+\t\t\t\t\t\"type Lib1\\n\");", "+\t", "+\t\t\t// type check sources:", "+\t\t\tIPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment(\"tests\", true, null);", "+\t\t\tICompilationUnit cu = fragment.createCompilationUnit(\"Test1.java\",", "+\t\t\t\t\t\"package tests;\\n\" + ", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"import libs.Lib1;\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"public class Test1 {\\n\" + ", "+\t\t\t\t\t\"\t@NonNull Lib1<String> test0(Lib1<String> stringLib) {\\n\" + ", "+\t\t\t\t\t\"\t\treturn stringLib.getLib();\\n\" + ", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\ttrue, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());", "+\t\t\tCompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());", "+\t\t\tIProblem[] problems = reconciled.getProblems();", "+\t\t\tassertProblems(problems, new String[] {", "+\t\t\t\t\t\"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'\",", "+\t\t\t}, new int[] { 8 });", "+", "+\t\t\tassertEquals(\"number of log entries\", 1, listener.loggedStatus.size());", "+\t\t\tfinal Throwable exception = listener.loggedStatus.get(0).getException();", "+\t\t\tassertEquals(\"logged message\", \"missing class header in annotation file\", exception.getMessage());", "+\t\t} finally {", "+\t\t\tPlatform.removeLogListener(listener);", "+\t\t}"]}], "num": 47764}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3b3fc093bb39dc964f537dac80a1265", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be64eb995001698f34bb82261a29729", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "b3f55df3c0ef9c0b0b05657a3bc24ac74a8339f3", "commitAfterChange": "27981506f2756dff04c50e8b59d9c147159c1382", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["+\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "+\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "+\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (constructor.arguments != null) {", "+\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "+\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "+\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "+\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea988ce59c8fc5d1ee80a8988d2c88c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4f7bc7ed550fb18b593380689460147b32682704", "commitAfterChange": "67127a55a3347cdaa557fc79db09229324829608", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["+\t", "+\t// report the type parameters", "+\tif (type.typeParameters != null) {", "+\t\tfor (int i=0, l=type.typeParameters.length; i<l; i++) {", "+\t\t\tTypeParameter typeParameter = type.typeParameters[i];", "+\t\t\tif (typeParameter != null) {", "+\t\t\t\tif (typeParameter.type != null) {", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);", "+\t\t\t\t\tif (level != null && matchedClassContainer) {", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (typeParameter.bounds != null) {", "+\t\t\t\t\tfor (int j=0, b=typeParameter.bounds.length; j<b; j++) {", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);", "+\t\t\t\t\t\tif (level != null && matchedClassContainer) {", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+"]}], "num": 68832}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8aef78d847ac31842be2e6f169d4413", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f525e7da50a43ddbf62227612b07bff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void _test0100_if_else()", "signatureAfterChange": " public void test0300_if_else()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0100_if_else() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"  public void foo() {\\n\" + \t\t\t\t", "-\t\t\t\t\"\t\t Object o = null;\\n\" + ", "-\t\t\t\t\"\t\t if (false) {\\n\" + ", "-\t\t\t\t\"\t\t\t o = new Object();\\n\" + // skipped ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t if (true) {\\n\" + ", "-\t\t\t\t\"\t\t\t //\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t else {\\n\" + ", "-\t\t\t\t\"\t\t\t o = new Object();\\n\" + // skipped", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t o.toString();\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"\to.toString();\\n\" + ", "-\t\t\t\"\t^\\n\" + ", "-\t\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\t\"----------\\n\"  ", "-\t\t);", "-\t}", "+// {code...} volontary code exclusion pattern)", "+public void test0300_if_else() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  public void foo() {\\n\" +         ", "+\t\t\t\"    Object o = null;\\n\" + ", "+\t\t\t\"    if (false) {\\n\" + ", "+\t\t\t\"      o = new Object();\\n\" + // skipped ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    if (true) {\\n\" + ", "+\t\t\t\"      //\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    else {\\n\" + ", "+\t\t\t\"      o = new Object();\\n\" + // skipped", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"\to.toString();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b0de6574c9cab68ce466c6474a92095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 208, "signatureBeforeChange": " \tpublic void test0240_for_continue_break()", "signatureAfterChange": " public void test0720_for_continue_break()", "diff": ["-\t// null analysis -- for", "-\tpublic void test0240_for_continue_break() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t   Object o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t for (int i = 0; i < 10; i++) {\\n\" + ", "-\t\t\t\t\"\t\t   if (o == null) {\\n\" + // complain: o cannot be null", "-\t\t\t\t\"\t\t     continue;\\n\" + ", "-\t\t\t\t\"\t\t   }\\n\" + ", "-\t\t\t\t\"\t\t   o = null;\\n\" + ", "-\t\t\t\t\"\t\t   break;\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t}", "+// null analysis -- for", "+public void test0720_for_continue_break() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t  \"public class X {\\n\" + ", "+\t\t\t  \"  void foo() {\\n\" + ", "+\t\t\t  \"    Object o = new Object();\\n\" + ", "+\t\t\t  \"    for (int i = 0; i < 10; i++) {\\n\" + ", "+\t\t\t  \"      if (o == null) {\\n\" + // complain: o cannot be null", "+\t\t\t  \"        continue;\\n\" + ", "+\t\t\t  \"      }\\n\" + ", "+\t\t\t  \"      o = null;\\n\" + ", "+\t\t\t  \"      break;\\n\" + ", "+\t\t\t  \"    }\\n\" + ", "+\t\t\t  \"  }\\n\" + ", "+\t\t\t  \"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tif (o == null) {\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}], "num": 64327}
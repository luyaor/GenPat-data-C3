{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49fa79fb758339df9a601a58c606ed5a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e83036ce1ef327917304b64c5939d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "43a229f8875bdbbd2ef36ab2eab7bb78009757b0", "commitAfterChange": "aed8ca051e93307e5096d0b341a609525b181cbd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\t\t        this.genericCast = originalBinding.type.genericCast(scope.boxing(runtimeTimeType)); // runtimeType could be base type in boxing case", "+\t\t\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) ", "+\t\t\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "+\t\t\t    \t\t: runtimeTimeType;", "+\t\t\t        this.genericCast = originalBinding.type.genericCast(scope.boxing(targetType));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73fea817a1607f75c9f0d59e45fa5b99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "17779d5ac854865d5dee787e9306c521177ce339", "commitAfterChange": "a3b7d0e9e94ba58105b62c9837c79e89fcdbbb64", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["-\t\t\t\tsubstitutedVariable.superclass = (ReferenceBinding) Scope.substitute(substitution, originalVariable.superclass);", "+\t\t\t\tTypeBinding substitutedSuperclass = Scope.substitute(substitution, originalVariable.superclass);", "+\t\t\t\tsubstitutedVariable.superclass = (ReferenceBinding) (substitutedSuperclass.isArrayType() ", "+\t\t\t\t\t\t\t? parameterizedDeclaringClass.environment.getType(JAVA_LANG_OBJECT)", "+\t\t\t\t\t\t\t: substitutedSuperclass);", "-\t\t\t\t\t\t? substitutedVariable.superclass", "+\t\t\t\t\t\t? substitutedSuperclass // could be array type"]}], "num": 27390}
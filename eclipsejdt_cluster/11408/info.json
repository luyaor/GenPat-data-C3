{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4905a86dc1511356812c901acb3d6c83", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c4327858aef99b5cdafc8f97df6a2a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "75afdf2996a1c8ae6b0b5be7d9f9b9919d6b66a0", "commitAfterChange": "25cb9ce2b0a42eaaa079306fa88b8294a5b0343f", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprotected String getURLContents(URL baseLoc, String docUrlValue) throws JavaModelException", "signatureAfterChange": "  \tprotected String getURLContents(URL baseLoc, String docUrlValue) throws JavaModelException", "diff": ["-\t */", "-\t\t\tURL docUrl = new URL(docUrlValue);", "-\t\t\tURLConnection connection = docUrl.openConnection();", "-\t\t\tClass[] parameterTypes = new Class[]{int.class};", "-\t\t\tInteger timeoutVal = new Integer(10000);", "-\t\t\t// set the connect and read timeouts using reflection since these methods are not available in java 1.4", "-\t\t\tClass URLClass = connection.getClass();", "-\t\t\ttry {", "-\t\t\t\tMethod connectTimeoutMethod = URLClass.getDeclaredMethod(\"setConnectTimeout\", parameterTypes); //$NON-NLS-1$", "-\t\t\t\tMethod readTimeoutMethod = URLClass.getDeclaredMethod(\"setReadTimeout\", parameterTypes); //$NON-NLS-1$", "-\t\t\t\tconnectTimeoutMethod.invoke(connection, new Object[]{timeoutVal});", "-\t\t\t\treadTimeoutMethod.invoke(connection, new Object[]{timeoutVal});", "-\t\t\t} catch (SecurityException e) {", "-\t\t\t\t// ignore", "-\t\t\t} catch (IllegalArgumentException e) {", "-\t\t\t\t// ignore", "-\t\t\t} catch (NoSuchMethodException e) {", "-\t\t\t\t// ignore", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\t// ignore", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\t// ignore", "+\t\t\tURL docUrl = null;", "+\t\t\tURLConnection connection = null;", "+\t\t\tredirect: for (int i= 0; i < 5; i++) { // avoid endless redirects...", "+\t\t\t\tdocUrl = new URL(docUrlValue);", "+\t\t\t\tconnection = docUrl.openConnection();", "+\t\t\t\t", "+\t\t\t\tint timeoutVal = 10000;", "+\t\t\t\tconnection.setConnectTimeout(timeoutVal);", "+\t\t\t\tconnection.setReadTimeout(timeoutVal);", "+\t\t\t\t", "+\t\t\t\tif (connection instanceof HttpURLConnection) {", "+\t\t\t\t\t// HttpURLConnection doesn't redirect from http to https, see https://bugs.eclipse.org/450684", "+\t\t\t\t\tHttpURLConnection httpCon = (HttpURLConnection) connection;", "+\t\t\t\t\tif (httpCon.getResponseCode() == 301) {", "+\t\t\t\t\t\tdocUrlValue = httpCon.getHeaderField(\"location\"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (docUrlValue != null) {", "+\t\t\t\t\t\t\tcontinue redirect;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (connection instanceof JarURLConnection) {", "+\t\t\t\t\tconnection2 = (JarURLConnection) connection;", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=156307", "+\t\t\t\t\tconnection.setUseCaches(false);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tif (connection instanceof JarURLConnection) {", "-\t\t\t\tconnection2 = (JarURLConnection) connection;", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=156307", "-\t\t\t\tconnection.setUseCaches(false);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9d1dacfde5b92735b3863e6353827fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "2f4a4896a43542edbc3219399755cb58107d11c0", "commitAfterChange": "1b94558fa757b767854d14340a754f8fb18540c3", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\t\t\tString timeoutVal = \"10000\"; //$NON-NLS-1$", "-\t\t\tSystem.setProperty(\"sun.net.client.defaultConnectTimeout\", timeoutVal);  //$NON-NLS-1$", "-\t\t\tSystem.setProperty(\"sun.net.client.defaultReadTimeout\", timeoutVal); //$NON-NLS-1$", "+\t\t\tClass[] parameterTypes = new Class[]{int.class};", "+\t\t\tInteger timeoutVal = new Integer(10000);", "+\t\t\t// set the connect and read timeouts using reflection since these methods are not available in java 1.4", "+\t\t\tClass URLClass = connection.getClass();", "+\t\t\ttry {", "+\t\t\t\tMethod connectTimeoutMethod = URLClass.getDeclaredMethod(\"setConnectTimeout\", parameterTypes); //$NON-NLS-1$", "+\t\t\t\tMethod readTimeoutMethod = URLClass.getDeclaredMethod(\"setReadTimeout\", parameterTypes); //$NON-NLS-1$", "+\t\t\t\tconnectTimeoutMethod.invoke(connection, new Object[]{timeoutVal});", "+\t\t\t\treadTimeoutMethod.invoke(connection, new Object[]{timeoutVal});", "+\t\t\t} catch (SecurityException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\t"]}], "num": 11408}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "897c661169eda004e5e011c9fbfee068", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1349294d11442b5940908d27db6511c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e3beff3ddcf0f1da8ef71b6358fa3af7711e703f", "commitAfterChange": "6b8881c9416240b1f58c929f9746f01644e60deb", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " protected void reportMatching(TypeParameter[] typeParameters, IJavaElement enclosingElement, IJavaElement parent, Binding binding, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeParameter[] typeParameters, IJavaElement enclosingElement, IJavaElement parent, Binding binding, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "-\t\t\t\t\t\t\t\tif (level != null) {", "-\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "-\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "-\t\t\t\t\t\t\t\t}", "+\t                            if (wildcardBound != null) {", "+\t\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "+\t\t\t\t\t\t\t\t\tif (level != null) {", "+\t\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "+\t\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "+\t\t\t\t\t\t\t\t\t}", "+\t                            }", "-\t\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "-\t\t\t\t\t\t\t\t\tif (level != null) {", "-\t\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "-\t\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t                            if (wildcardBound != null) {", "+\t\t\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "+\t\t\t\t\t\t\t\t\t\tif (level != null) {", "+\t\t\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "+\t\t\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t                            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d7970efc389d8fe3c71f6cd57134639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "bbfd6abe2f4d57b10264c574b936bd7028ec5f17", "commitAfterChange": "fdc1a95914ad55bbfb8c709b84d743d5d21781f2", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\t\t\t\t} else {", "+\t\t\t\t\t} else if (astNode instanceof AllocationExpression) {", "-\t\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "+\t\t\t\t\tif (literal != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bef9e18045be7882a9d48885eca23cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "753d6a0ebf6c471f5abc3f7b84f5e9fd7d55bf9e", "commitAfterChange": "0f2486f3f34027c8ea6eadc698cc2470fccb1ae9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\t\tPrintWriter sourceFileWriter;", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tString fileName = OUTPUT_DIR + File.separator + testFiles[i];", "-\t\t\t\tFile file = new File(fileName), innerOutputDirectory = file", "-\t\t\t\t\t\t.getParentFile();", "-\t\t\t\tif (!innerOutputDirectory.isDirectory()) {", "-\t\t\t\t\tinnerOutputDirectory.mkdirs();", "+\t\t\tif (testFiles != null) {", "+\t\t\t\tPrintWriter sourceFileWriter;", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tString fileName = OUTPUT_DIR + File.separator + testFiles[i];", "+\t\t\t\t\tFile file = new File(fileName), innerOutputDirectory = file", "+\t\t\t\t\t\t\t.getParentFile();", "+\t\t\t\t\tif (!innerOutputDirectory.isDirectory()) {", "+\t\t\t\t\t\tinnerOutputDirectory.mkdirs();", "+\t\t\t\t\t}", "+\t\t\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "+\t\t\t\t\tsourceFileWriter.write(testFiles[i + 1]);", "+\t\t\t\t\tsourceFileWriter.close();", "-\t\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "-\t\t\t\tsourceFileWriter.write(testFiles[i + 1]);", "-\t\t\t\tsourceFileWriter.close();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\");", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\");", "+\t\t\tif (testFiles != null) {", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\tSystem.out.println(\" [\");", "+\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\tSystem.out.println(\"]\");", "+\t\t\t\t}"]}], "num": 50066}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30dc4871409d7b70afdc934d500e1abc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ced864f3a81007bcf69ac0ae3390cbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java", "commitBeforeChange": "697c6f52ed873e1d18816e7b9bdd345c15d550cf", "commitAfterChange": "8d866d91b7e6bec6081cd0b0a2b4eec25b579319", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public Block updatedBlock()", "signatureAfterChange": " public Block updatedBlock()", "diff": ["+\t", "+\t// may need to update the end of the last statement", "+\tRecoveredStatement lastStatement = statements[statementCount - 1];", "+\tRecoveredMethod enclosingMethod = this.enclosingMethod();", "+\tRecoveredInitializer enclosingIntializer = this.enclosingInitializer();", "+\tint bodyEndValue = 0;", "+\tif(enclosingMethod != null) {", "+\t\tbodyEndValue = enclosingMethod.methodDeclaration.bodyEnd;", "+\t\tif(enclosingIntializer != null && enclosingMethod.methodDeclaration.sourceStart < enclosingIntializer.fieldDeclaration.sourceStart) {", "+\t\t\tbodyEndValue = enclosingIntializer.fieldDeclaration.declarationSourceEnd;", "+\t\t}", "+\t} else if(enclosingIntializer != null) {", "+\t\tbodyEndValue = enclosingIntializer.fieldDeclaration.declarationSourceEnd;", "+\t} else {", "+\t\tbodyEndValue = this.blockDeclaration.sourceEnd - 1;", "+\t}", "+\t", "+\tif(lastStatement instanceof RecoveredLocalVariable) {", "+\t\tRecoveredLocalVariable lastLocalVariable = (RecoveredLocalVariable) lastStatement;", "+\t\tif(lastLocalVariable.localDeclaration.declarationSourceEnd == 0) {", "+\t\t\tlastLocalVariable.localDeclaration.declarationSourceEnd = bodyEndValue;", "+\t\t\tlastLocalVariable.localDeclaration.declarationEnd = bodyEndValue;", "+\t\t}", "+\t} else if(lastStatement instanceof RecoveredBlock) {", "+\t\tRecoveredBlock lastBlock = (RecoveredBlock) lastStatement;", "+\t\tif(lastBlock.blockDeclaration.sourceEnd == 0) {", "+\t\t\tlastBlock.blockDeclaration.sourceEnd = bodyEndValue;", "+\t\t}", "+\t} else if(!(lastStatement instanceof RecoveredType)){", "+\t\tif(lastStatement.statement.sourceEnd == 0) {", "+\t\t\tlastStatement.statement.sourceEnd = bodyEndValue;", "+\t\t}", "+\t}", "+\t", "+\tint lastEnd = blockDeclaration.sourceStart;", "+\t", "+\t\t\t", "+\t\t\tif (updatedStatement instanceof LocalDeclaration) {", "+\t\t\t\tLocalDeclaration localDeclaration = (LocalDeclaration) updatedStatement;", "+\t\t\t\tif(localDeclaration.declarationSourceEnd > lastEnd) {", "+\t\t\t\t\tlastEnd = localDeclaration.declarationSourceEnd;", "+\t\t\t\t}", "+\t\t\t} else if (updatedStatement instanceof TypeDeclaration) {", "+\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) updatedStatement;", "+\t\t\t\tif(typeDeclaration.declarationSourceEnd > lastEnd) {", "+\t\t\t\t\tlastEnd = typeDeclaration.declarationSourceEnd;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (updatedStatement.sourceEnd > lastEnd) {", "+\t\t\t\t\tlastEnd = updatedStatement.sourceEnd;", "+\t\t\t\t}", "+\t\t\t}", "+\tif (this.blockDeclaration.sourceEnd == 0) {", "+\t\tthis.blockDeclaration.sourceEnd = lastEnd;", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f109e3ca5fd745c9d859fe2bf26d6cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "3aa835135283a2acadb61b0aae182c129f17ffab", "commitAfterChange": "a9c15bae1087a65c1bc60140ceb7a5a5416fd8a8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "\r public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["+\r", "+\t// range check\r", "+\tboolean isInRange = \r", "+\t\t\t\tscanner.initialPosition <= methodDeclaration.declarationSourceStart\r", "+\t\t\t\t&& scanner.eofPosition >= methodDeclaration.declarationSourceEnd;\r", "+\r", "-\t\tif (scanner.initialPosition <= methodDeclaration.declarationSourceStart) {\r", "+\t\tif (isInRange){\r", "-\t\t\tif (reportReferenceInfo) {\r", "-\t\t\t\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) methodDeclaration;\r", "-\t\t\t\tExplicitConstructorCall constructorCall = constructorDeclaration.constructorCall;\r", "-\t\t\t\tif (constructorCall != null) {\r", "-\t\t\t\t\tswitch(constructorCall.accessMode) {\r", "-\t\t\t\t\t\tcase ExplicitConstructorCall.This :\r", "-\t\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "-\t\t\t\t\t\t\t\ttypeNames[nestedTypeIndex-1],\r", "-\t\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "-\t\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcase ExplicitConstructorCall.Super :\r", "-\t\t\t\t\t\tcase ExplicitConstructorCall.ImplicitSuper :\r", "-\t\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "-\t\t\t\t\t\t\t\tsuperTypeNames[nestedTypeIndex-1],\r", "-\t\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "-\t\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "+\t\t}\r", "+\t\tif (reportReferenceInfo) {\r", "+\t\t\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) methodDeclaration;\r", "+\t\t\tExplicitConstructorCall constructorCall = constructorDeclaration.constructorCall;\r", "+\t\t\tif (constructorCall != null) {\r", "+\t\t\t\tswitch(constructorCall.accessMode) {\r", "+\t\t\t\t\tcase ExplicitConstructorCall.This :\r", "+\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "+\t\t\t\t\t\t\ttypeNames[nestedTypeIndex-1],\r", "+\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "+\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase ExplicitConstructorCall.Super :\r", "+\t\t\t\t\tcase ExplicitConstructorCall.ImplicitSuper :\r", "+\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "+\t\t\t\t\t\t\tsuperTypeNames[nestedTypeIndex-1],\r", "+\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "+\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "+\t\t\t\t\t\tbreak;\r", "-\t\tif (scanner.eofPosition >= methodDeclaration.declarationSourceEnd) {\r", "+\t\tif (isInRange){\r", "-\trequestor.enterMethod(\r", "-\t\tmethodDeclaration.declarationSourceStart, \r", "-\t\tmethodDeclaration.modifiers & AccJustFlag, \r", "-\t\treturnTypeName(((MethodDeclaration) methodDeclaration).returnType), \r", "-\t\tmethodDeclaration.selector, \r", "-\t\tmethodDeclaration.sourceStart, \r", "-\t\tselectorSourceEnd, \r", "-\t\targumentTypes, \r", "-\t\targumentNames, \r", "-\t\tthrownExceptionTypes); \r", "-\t\t\r", "+\tif (isInRange){\r", "+\t\trequestor.enterMethod(\r", "+\t\t\tmethodDeclaration.declarationSourceStart, \r", "+\t\t\tmethodDeclaration.modifiers & AccJustFlag, \r", "+\t\t\treturnTypeName(((MethodDeclaration) methodDeclaration).returnType), \r", "+\t\t\tmethodDeclaration.selector, \r", "+\t\t\tmethodDeclaration.sourceStart, \r", "+\t\t\tselectorSourceEnd, \r", "+\t\t\targumentTypes, \r", "+\t\t\targumentNames, \r", "+\t\t\tthrownExceptionTypes); \r", "+\t}\t\t\r", "-\t\r", "-\trequestor.exitMethod(methodDeclaration.declarationSourceEnd);\r", "+\r", "+\tif (isInRange){\t\r", "+\t\trequestor.exitMethod(methodDeclaration.declarationSourceEnd);\r", "+\t}\r"]}], "num": 54926}
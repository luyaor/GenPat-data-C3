{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56c49d2a5baf3b6198feadbe9ef29ef7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc345a2f1164cb8224412815a5a5e34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tprotected void toStringInfo(int tab, StringBuffer buffer, Object info)", "signatureAfterChange": "\r protected void toStringInfo(int tab, StringBuffer buffer, Object info)", "diff": ["+ */\r", "+protected void toStringInfo(int tab, StringBuffer buffer, Object info) {\r", "+\tif (info == null) {\r", "+\t\tbuffer.append(getElementName());\r", "+\t\tbuffer.append(\" (not open)\"/*nonNLS*/);\r", "+\t} else {\r", "+\t\ttry {\r", "+\t\t\tif (Flags.isStatic(this.getFlags())) {\r", "+\t\t\t\tbuffer.append(\"static \"/*nonNLS*/);\r", "+\t\t\tif (!this.isConstructor()) {\r", "+\t\t\t\tbuffer.append(Signature.toString(this.getReturnType()));\r", "+\t\t\t\tbuffer.append(' ');\r", "+\t\t\t}\r", "+\t\t\tbuffer.append(this.getElementName());\r", "+\t\t\tbuffer.append('(');\r", "+\t\t\tString[] parameterTypes = this.getParameterTypes();\r", "+\t\t\tint length;\r", "+\t\t\tif (parameterTypes != null && (length = parameterTypes.length) > 0) {\r", "+\t\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\t\tbuffer.append(Signature.toString(parameterTypes[i]));\r", "+\t\t\t\t\tif (i < length - 1) {\r", "+\t\t\t\t\t\tbuffer.append(\", \"/*nonNLS*/);\r", "-\t */\r", "-\tprotected void toStringInfo(int tab, StringBuffer buffer, Object info) {\r", "-\t\tif (info == null) {\r", "-\t\t\tbuffer.append(getElementName());\r", "-\t\t\tbuffer.append(\" (not open)\");\r", "-\t\t} else {\r", "-\t\t\ttry {\r", "-\t\t\t\tif (Flags.isStatic(this.getFlags())) {\r", "-\t\t\t\t\tbuffer.append(\"static \");\r", "-\t\t\t\t}\r", "-\t\t\t\tif (!this.isConstructor()) {\r", "-\t\t\t\t\tbuffer.append(Signature.toString(this.getReturnType()));\r", "-\t\t\t\t\tbuffer.append(\" \");\r", "-\t\t\t\t}\r", "-\t\t\t\tbuffer.append(this.getElementName());\r", "-\t\t\t\tbuffer.append(\"(\");\r", "-\t\t\t\tString[] parameterTypes = this.getParameterTypes();\r", "-\t\t\t\tint length;\r", "-\t\t\t\tif (parameterTypes != null && (length = parameterTypes.length) > 0) {\r", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\t\t\tbuffer.append(Signature.toString(parameterTypes[i]));\r", "-\t\t\t\t\t\tif (i < length - 1) {\r", "-\t\t\t\t\t\t\tbuffer.append(\", \");\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tbuffer.append(\")\");\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\tbuffer.append(\"<JavaModelException in toString of \" + getElementName());\r", "-\t\t\t}\r", "+\t\t\tbuffer.append(')');\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\tbuffer.append(\"<JavaModelException in toString of \"/*nonNLS*/ + getElementName());\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2f0725f9fb764c106ca84a41a7d720", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic String readableName()", "signatureAfterChange": "\r public String readableName()", "diff": ["+ */\r", "+public String readableName() {\r", "+\r", "+\tStringBuffer buffer = new StringBuffer(super.readableName());\r", "+\tbuffer.append('(');\r", "+\tString[] parameterTypes = this.getParameterTypes();\r", "+\tint length;\r", "+\tif (parameterTypes != null && (length = parameterTypes.length) > 0) {\r", "+\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\tbuffer.append(Signature.toString(parameterTypes[i]));\r", "+\t\t\tif (i < length - 1) {\r", "+\t\t\t\tbuffer.append(\", \"/*nonNLS*/);\r", "+\t\t\t}\r", "+\t}\r", "+\tbuffer.append(')');\r", "+\treturn buffer.toString();\r", "+}\r", "-\t */\r", "-\tpublic String readableName() {\r", "-\r", "-\t\tStringBuffer buffer = new StringBuffer(super.readableName());\r", "-\t\tbuffer.append(\"(\");\r", "-\t\tString[] parameterTypes = this.getParameterTypes();\r", "-\t\tint length;\r", "-\t\tif (parameterTypes != null && (length = parameterTypes.length) > 0) {\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\tbuffer.append(Signature.toString(parameterTypes[i]));\r", "-\t\t\t\tif (i < length - 1) {\r", "-\t\t\t\t\tbuffer.append(\", \");\r", "-\t\tbuffer.append(\")\");\r", "-\t\treturn buffer.toString();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cdfb691d81e6a194abb212ae1cd228a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBinaryType.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public char[] getGenericSignature()", "signatureAfterChange": " public char[] getGenericSignature()", "diff": ["-\treturn null;", "+\tif (this.typeParameterSignatures != null && this.genericSignature == null) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tbuffer.append('<');", "+\t\tfor (int i = 0, length = this.typeParameterSignatures.length; i < length; i++) {", "+\t\t\tbuffer.append(this.typeParameterSignatures[i]);", "+\t\t\tif (i != length-1)", "+\t\t\t\tbuffer.append(',');", "+\t\t}", "+\t\tbuffer.append('>');", "+\t\tif (this.superclass == null)", "+\t\t\tbuffer.append(Signature.createTypeSignature(\"java.lang.Object\", true/*resolved*/)); //$NON-NLS-1$", "+\t\telse", "+\t\t\tbuffer.append(Signature.createTypeSignature(this.superclass, true/*resolved*/));", "+\t\tif (this.superInterfaces != null) ", "+\t\t\tfor (int i = 0, length = this.superInterfaces.length; i < length; i++)", "+\t\t\t\tbuffer.append(Signature.createTypeSignature(this.superInterfaces[i], true/*resolved*/));", "+\t\tthis.genericSignature = buffer.toString().toCharArray();", "+\t\tCharOperation.replace(this.genericSignature, '.', '/');", "+\t}", "+\treturn this.genericSignature;"]}], "num": 3415}
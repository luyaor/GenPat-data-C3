{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef20754a0f48d057d48ba888465b147a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4462307de9320b9b38c21f6e250605ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t// always return BooleanBinding", "+", "+\tif (left instanceof CastExpression) left.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+", "+\tif (right instanceof CastExpression) right.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+", "+\t// always return BooleanBinding", "-\t\t// (cast)  left   == (cast)  rigth --> result", "+\t\t// (cast)  left   == (cast)  right --> result", "+\t\t// check need for operand cast", "+\t\tboolean unnecessaryLeftCast = (left.bits & UnnecessaryCastMask) != 0;", "+\t\tboolean unnecessaryRightCast = (right.bits & UnnecessaryCastMask) != 0;", "+\t\tif (unnecessaryLeftCast || unnecessaryRightCast) {", "+\t\t\tint alternateLeftId = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType.id : leftType.id;", "+\t\t\tint alternateRightId = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType.id : rightType.id;", "+\t\t\tint alternateResult = ResolveTypeTables[EQUAL_EQUAL][(alternateLeftId << 4) + alternateRightId];", "+\t\t\t// (cast)  left   Op (cast)  right --> result", "+\t\t\t//  1111   0000       1111   0000     1111", "+\t\t\t//  <<16   <<12       <<8    <<4       <<0", "+\t\t\tfinal int CompareMASK = (0xF<<16) + (0xF<<8) + 0xF; // mask hiding compile-time types", "+\t\t\tif ((result & CompareMASK) == (alternateResult & CompareMASK)) { // same promotions and result", "+\t\t\t\tif (unnecessaryLeftCast) scope.problemReporter().unnecessaryCast((CastExpression)left); ", "+\t\t\t\tif (unnecessaryRightCast) scope.problemReporter().unnecessaryCast((CastExpression)right);", "+\t\t\t}", "+\t\t}\t\t", "-\t\tthis.resolvedType = BooleanBinding;", "-\t\treturn BooleanBinding;", "+\t\treturn this.resolvedType = BooleanBinding;", "-\t\tif ((rightType.id == T_String) && (leftType.id == T_String))", "+\t\tif ((rightType.id == T_String) && (leftType.id == T_String)) {", "-\t\telse", "+\t\t} else {", "-\t\tif (rightType.id == T_String)", "+\t\t}", "+\t\tif (rightType.id == T_String) {", "-\t\tif (leftType.id == T_String)", "+\t\t}", "+\t\tif (leftType.id == T_String) {", "-\t\tthis.resolvedType = BooleanBinding;", "-\t\treturn BooleanBinding;", "+\t\t}", "+\t\t// check need for operand cast", "+\t\tboolean unnecessaryLeftCast = (left.bits & UnnecessaryCastMask) != 0;", "+\t\tboolean unnecessaryRightCast = (right.bits & UnnecessaryCastMask) != 0;", "+\t\tif (unnecessaryLeftCast || unnecessaryRightCast) {", "+\t\t\tTypeBinding alternateLeftType = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType : leftType;", "+\t\t\tTypeBinding alternateRightType = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType : rightType;", "+\t\t\tif (areTypesCastCompatible(scope, alternateLeftType, alternateRightType)", "+\t\t\t\t\t|| areTypesCastCompatible(scope, alternateRightType, alternateLeftType)) {", "+\t\t\t\tif (unnecessaryLeftCast) scope.problemReporter().unnecessaryCast((CastExpression)left); ", "+\t\t\t\tif (unnecessaryRightCast) scope.problemReporter().unnecessaryCast((CastExpression)right);", "+\t\t\t}", "+\t\t}", "+\t\treturn this.resolvedType = BooleanBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56e81e19b23d1a16f1f75cbebe57fee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "fdc78eae04c092b433b059502afa80612c96fda8", "commitAfterChange": "0649403520900cba3eb046b6b617ad20a9f6b022", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, Expression right, int rightTypeId)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["-\tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, Expression right, int rightTypeId) {", "+\tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast) {", "-\t\t// check need for operand cast", "-\t\tboolean unnecessaryLeftCast = (left.bits & UnnecessaryCastMask) != 0;", "-\t\tint alternateLeftTypeId = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType.id : leftTypeId;", "-\t\tif (unnecessaryLeftCast && alternateLeftTypeId == leftTypeId) {", "-\t\t\t// obvious identity cast", "-\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)left); ", "-\t\t\tunnecessaryLeftCast = false;", "+\t\t// check need for left operand cast", "+\t\tint alternateLeftTypeId;", "+\t\tif (leftIsCast) {", "+\t\t\talternateLeftTypeId = ((CastExpression)left).expression.resolvedType.id;", "+\t\t\tif (alternateLeftTypeId == leftTypeId) { // obvious identity cast", "+\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)left); ", "+\t\t\t\tleftIsCast = false;", "+\t\t\t}\t", "+\t\t} else {", "+\t\t\talternateLeftTypeId = leftTypeId;", "-\t\tboolean unnecessaryRightCast = (right.bits & UnnecessaryCastMask) != 0;", "-\t\tint alternateRightTypeId = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType.id : rightTypeId;", "-\t\tif (unnecessaryRightCast && alternateRightTypeId == rightTypeId) {", "-\t\t\t// obvious identity cast", "-\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)right); ", "-\t\t\tunnecessaryRightCast = false;", "+\t\t// check need for right operand cast", "+\t\tint alternateRightTypeId;", "+\t\tif (rightIsCast) {", "+\t\t\talternateRightTypeId = ((CastExpression)right).expression.resolvedType.id;", "+\t\t\tif (alternateRightTypeId == rightTypeId) { // obvious identity cast", "+\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)right); ", "+\t\t\t\trightIsCast = false;", "+\t\t\t}\t", "+\t\t} else {", "+\t\t\talternateRightTypeId = rightTypeId;", "-\t\tif (unnecessaryLeftCast || unnecessaryRightCast) {", "+\t\tif (leftIsCast || rightIsCast) {", "-\t\t\t\tif (unnecessaryLeftCast) scope.problemReporter().unnecessaryCastForArgument((CastExpression)left,  TypeBinding.wellKnownType(scope, left.implicitConversion >> 4)); ", "-\t\t\t\tif (unnecessaryRightCast) scope.problemReporter().unnecessaryCastForArgument((CastExpression)right, TypeBinding.wellKnownType(scope,  right.implicitConversion >> 4));", "+\t\t\t\tif (leftIsCast) scope.problemReporter().unnecessaryCastForArgument((CastExpression)left,  TypeBinding.wellKnownType(scope, left.implicitConversion >> 4)); ", "+\t\t\t\tif (rightIsCast) scope.problemReporter().unnecessaryCastForArgument((CastExpression)right, TypeBinding.wellKnownType(scope,  right.implicitConversion >> 4));"]}], "num": 59629}
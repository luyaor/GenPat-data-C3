{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0aafccf15bdd3199706da5b86457b446", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73df79c0f656d9135c18efaa86182c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "signatureAfterChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "diff": ["-\t\tBindingKey key;", "-\t\tif (type.isResolved() && ((key = new BindingKey(type.getKey())).isParameterizedType() || key.isRawType())) {", "-\t\t\tString signature = key.toSignature();", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);", "-\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t\t} else {", "-\t\t\t// Scan hierachy to store type arguments at each level", "-\t\t\tchar[][][] typeParameters = new char[10][][];", "-\t\t\tint ptr = -1;", "-\t\t\tboolean hasParameters = false;", "-\t\t\ttry {", "-\t\t\t\tIJavaElement parent = type;", "-\t\t\t\tITypeParameter[] parameters = null;", "-\t\t\t\twhile (parent != null && parent.getElementType() == IJavaElement.TYPE) {", "-\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t}", "-\t\t\t\t\tIType parentType = (IType) parent;", "-\t\t\t\t\tparameters = parentType.getTypeParameters();", "-\t\t\t\t\tif (parameters !=null) {", "-\t\t\t\t\t\tint length = parameters.length;", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\thasParameters = true;", "-\t\t\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "-\t\t\t\t\t\t\tfor (int i=0; i<length; i++)", "-\t\t\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tparent = parent.getParent();", "+\t\tif (type.isResolved()) {", "+\t\t\tBindingKey bindingKey = new BindingKey(type.getKey());", "+\t\t\tif (bindingKey.isParameterizedType() || bindingKey.isRawType()) {", "+\t\t\t\tString signature = bindingKey.toSignature();", "+\t\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);", "+\t\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Scan hierarchy to store type arguments at each level", "+\t\tchar[][][] typeParameters = new char[10][][];", "+\t\tint ptr = -1;", "+\t\tboolean hasParameters = false;", "+\t\ttry {", "+\t\t\tIJavaElement parent = type;", "+\t\t\tITypeParameter[] parameters = null;", "+\t\t\twhile (parent != null && parent.getElementType() == IJavaElement.TYPE) {", "+\t\t\t\tif (++ptr > typeParameters.length) {", "+\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "+\t\t\t\tIType parentType = (IType) parent;", "+\t\t\t\tparameters = parentType.getTypeParameters();", "+\t\t\t\tif (parameters !=null) {", "+\t\t\t\t\tint length = parameters.length;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\thasParameters = true;", "+\t\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "+\t\t\t\t\t\tfor (int i=0; i<length; i++)", "+\t\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tparent = parent.getParent();", "-\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\t// Store type arguments if any", "-\t\t\tif (hasParameters) {", "-\t\t\t\tif (++ptr < typeParameters.length)", "-\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "-\t\t\t\tsetTypeArguments(typeParameters);", "-\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Store type arguments if any", "+\t\tif (hasParameters) {", "+\t\t\tif (++ptr < typeParameters.length)", "+\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "+\t\t\tsetTypeArguments(typeParameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe05d244e29505f0ee4880382af417c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "324863400f4389e9f875d1a388b059a798fc9b0e", "commitAfterChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate char[][][] typeParameterNames(IType type)", "signatureAfterChange": " private char[][][] typeParameterNames(IType type)", "diff": ["-\t */", "-\tprivate char[][][] typeParameterNames(IType type) {", "-\t\tchar[][][] typeParameters = new char[10][][];", "-\t\tint ptr = -1;", "-\t\ttry {", "-\t\t\tIJavaElement parent = type;", "-\t\t\tITypeParameter[] parameters = null;", "-\t\t\twhile (parent != null) {", "-\t\t\t\tswitch(parent.getElementType()) {", "-\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tparameters = ((BinaryType) parent).getTypeParameters();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.TYPE:", "-\t\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tparameters = ((SourceType) parent).getTypeParameters();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tif (ptr <0) return null;", "-\t\t\t\t\t\tif (++ptr < typeParameters.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "-\t\t\t\t\t\treturn typeParameters;", "-\t\t\t\t}", "-\t\t\t\tint length = parameters==null ? 0 : parameters.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "-\t\t\t\t\tfor (int i=0; i<length; i++)", "-\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t}", "-\t\t\t\tparent = parent.getParent();", "+ */", "+private char[][][] typeParameterNames(IType type) {", "+\tchar[][][] typeParameters = new char[10][][];", "+\tint ptr = -1;", "+\ttry {", "+\t\tIJavaElement parent = type;", "+\t\tITypeParameter[] parameters = null;", "+\t\tboolean hasParameters = false;", "+\t\twhile (parent != null) {", "+\t\t\tif (parent.getElementType() != IJavaElement.TYPE) {", "+\t\t\t\tif (!hasParameters) return null;", "+\t\t\t\tif (++ptr < typeParameters.length)", "+\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "+\t\t\t\treturn typeParameters;", "+\t\t\tif (++ptr > typeParameters.length) {", "+\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "+\t\t\t}", "+\t\t\tIType parentType = (IType) parent;", "+\t\t\tif (parentType.isBinary()) {", "+\t\t\t\tparameters = ((BinaryType) parent).getTypeParameters();", "+\t\t\t} else {", "+\t\t\t\tparameters = ((SourceType) parent).getTypeParameters();", "+\t\t\t}", "+\t\t\tint length = parameters==null ? 0 : parameters.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\thasParameters = true;", "+\t\t\t\ttypeParameters[ptr] = new char[length][];", "+\t\t\t\tfor (int i=0; i<length; i++)", "+\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t}", "+\t\t\tparent = parent.getParent();", "-\t\tcatch (JavaModelException jme) {", "-\t\t\treturn null;", "-\t\t}", "-\t\treturn typeParameters;", "+\tcatch (JavaModelException jme) {", "+\t\treturn null;", "+\t}", "+\treturn typeParameters;", "+}"]}], "num": 23018}
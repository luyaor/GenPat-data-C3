{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b3a0461659bf30bf325b7cbf375808a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "623ea911fd1d436f9aad4d6987379ac2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "46b62da526fe2a6ffd79b0ba880e83b9b19218e9", "commitAfterChange": "b86d8384eaf8c819d0430387f9f109e2adf4cb49", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic char[] genericTypeSignature()", "signatureAfterChange": " \tpublic char[] genericTypeSignature()", "diff": ["-\t\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b328576741b9f5b60753146fea934fb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "46b62da526fe2a6ffd79b0ba880e83b9b19218e9", "commitAfterChange": "b86d8384eaf8c819d0430387f9f109e2adf4cb49", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "signatureAfterChange": "  public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "diff": ["-\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "-\t    \tsig.append(typeSig[i]);", "-\t    }", "+\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "-\t    \tsig.append(typeSig[i]);", "-\t    }", "+\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon"]}], "num": 63721}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "931a2923cf03099fbb8ef8c863a9d00d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d83ff19bb4a9f30725d0f169b2942292", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "747c1eb91c4c0949e5f9ce17bdd2a765ef496fa4", "commitAfterChange": "f657f893ed970d58ce4565eab2924c903044ce31", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private final static void buildFileForName(String filename, String contents) throws java.io.IOException", "signatureAfterChange": " private final static String[] buildFileForName(String filename, String contents) throws java.io.IOException", "diff": ["-private final static void buildFileForName(String filename, String contents) throws java.io.IOException {", "+private final static String[] buildFileForName(String filename, String contents) throws java.io.IOException {", "+\tString[] result = new String[contents.length()];", "+\tresult[0] = null;", "+\tint resultCount = 1;", "+\t", "+\tStringBuffer currentToken = new StringBuffer();", "+\t\t\t\t\tresult[resultCount++] = currentToken.toString();", "+\t\t\t\t\tcurrentToken = new StringBuffer();", "+\t\t\t\tcurrentToken.append(token);", "-", "+\tif(currentToken.length() > 0) {", "+\t\tresult[resultCount++] = currentToken.toString();", "+\t}", "+\t", "+\t", "+\tSystem.arraycopy(result, 0, result = new String[resultCount], 0, resultCount);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d0f78fd46c88009da1337bbbde9ac1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "89d67345e9cc0e1f7b41a5c3ebe790ece5a2e718", "commitAfterChange": "4188bcd12cf75d1e13b09a6ac22e1c9dad829ea6", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "signatureAfterChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "diff": ["-\t\tif (argumentsString == null) return null;", "+\t\tif (argumentsString == null) {", "+\t\t\treturn null;", "+\t\t}", "-\t\tint numberOfArg;", "+\t\tint numberOfArg = 0;", "-\t\tString[] args = new String[length];", "-\t\tint count = 0;", "+\t\treturn decodeArgumentString(numberOfArg, argumentsString);", "+\t}", "-\t\tStringTokenizer tokenizer = new StringTokenizer(argumentsString, ARGUMENTS_DELIMITER);", "-\t\twhile(tokenizer.hasMoreTokens()) {", "-\t\t\tString argument = tokenizer.nextToken();", "-\t\t\tif(argument.equals(EMPTY_ARGUMENT))", "-\t\t\t\targument = \"\";  //$NON-NLS-1$", "-\t\t\targs[count++] = argument;", "-", "-\t\tif(count != numberOfArg)", "-", "-\t\tSystem.arraycopy(args, 0, args = new String[count], 0, count);", "-\t\treturn args;"]}], "num": 67971}
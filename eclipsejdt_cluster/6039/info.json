{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8611f3e153abc98ccd4f616b48a099a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40b4928b1bba49302e1eff8f68b2ab77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void checkAndSetModifiers()", "signatureAfterChange": " \t \tprivate void checkAndSetModifiers()", "diff": ["-\t\tif ((modifiers & AccAlternateModifierProblem) != 0)", "+\t\tif ((modifiers & ExtraCompilerModifiers.AccAlternateModifierProblem) != 0)", "-\t\t\tmodifiers |= (enclosingType.modifiers & (AccGenericSignature|AccStrictfp));", "+\t\t\tmodifiers |= (enclosingType.modifiers & (ExtraCompilerModifiers.AccGenericSignature|ClassFileConstants.AccStrictfp));", "-\t\t\t\tmodifiers |= AccPublic;", "+\t\t\t\tmodifiers |= ClassFileConstants.AccPublic;", "-\t\t\t\t\tmodifiers |= AccStatic;", "+\t\t\t\t\tmodifiers |= ClassFileConstants.AccStatic;", "-\t\t\t    modifiers |= AccFinal;", "+\t\t\t    modifiers |= ClassFileConstants.AccFinal;", "-\t\t\t    \tmodifiers |= AccEnum;", "+\t\t\t    \tmodifiers |= ClassFileConstants.AccEnum;", "-\t\t\t\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\t\t\t\t\t\t\t\tmodifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "-\t\t\t\t\t\t\t\t\tmodifiers |= AccStrictfp;", "+\t\t\t\t\t\t\t\t\tmodifiers |= ClassFileConstants.AccStrictfp;", "-\t\t\t\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\t\t\t\t\t\t\t\tmodifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "-\t\t\t\t\t\t\t\t\tmodifiers |= AccStrictfp;", "+\t\t\t\t\t\t\t\t\tmodifiers |= ClassFileConstants.AccStrictfp;", "-\t\t\t\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\t\t\t\t\t\t\t\tmodifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "-\t\t\t\t\t\t\tmodifiers |= AccStrictfp;", "+\t\t\t\t\t\t\tmodifiers |= ClassFileConstants.AccStrictfp;", "-\t\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;", "+\t\t\t\t\t\t\tmodifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "-\t\tint realModifiers = modifiers & AccJustFlag;", "+\t\tint realModifiers = modifiers & ExtraCompilerModifiers.AccJustFlag;", "-\t\tif ((realModifiers & AccInterface) != 0) { // interface and annotation type", "+\t\tif ((realModifiers & ClassFileConstants.AccInterface) != 0) { // interface and annotation type", "-\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccInterface | AccStrictfp | AccAnnotation);", "+\t\t\t\t\t~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected | ClassFileConstants.AccStatic | ClassFileConstants.AccAbstract | ClassFileConstants.AccInterface | ClassFileConstants.AccStrictfp | ClassFileConstants.AccAnnotation);", "-\t\t\t\t\tif ((realModifiers & AccAnnotation) != 0)", "+\t\t\t\t\tif ((realModifiers & ClassFileConstants.AccAnnotation) != 0)", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccInterface | AccStrictfp | AccAnnotation);", "+\t\t\t\tint unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract | ClassFileConstants.AccInterface | ClassFileConstants.AccStrictfp | ClassFileConstants.AccAnnotation);", "-\t\t\t\t\tif ((realModifiers & AccAnnotation) != 0)", "+\t\t\t\t\tif ((realModifiers & ClassFileConstants.AccAnnotation) != 0)", "-\t\t\tmodifiers |= AccAbstract;", "-\t\t} else if ((realModifiers & AccEnum) != 0) {", "+\t\t\tmodifiers |= ClassFileConstants.AccAbstract;", "+\t\t} else if ((realModifiers & ClassFileConstants.AccEnum) != 0) {", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccStatic | AccStrictfp | AccEnum);", "+\t\t\t\tint unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected | ClassFileConstants.AccStatic | ClassFileConstants.AccStrictfp | ClassFileConstants.AccEnum);", "-\t\t\t\tint unexpectedModifiers = ~(AccStrictfp | AccFinal | AccEnum); // add final since implicitly set for anonymous type", "+\t\t\t\tint unexpectedModifiers = ~(ClassFileConstants.AccStrictfp | ClassFileConstants.AccFinal | ClassFileConstants.AccEnum); // add final since implicitly set for anonymous type", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccStrictfp | AccEnum);", "+\t\t\t\tint unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccStrictfp | ClassFileConstants.AccEnum);", "-\t\t\t\tmodifiers |= AccAbstract;", "+\t\t\t\tmodifiers |= ClassFileConstants.AccAbstract;", "-\t\t\t\t\tmodifiers |= AccAbstract;", "+\t\t\t\t\tmodifiers |= ClassFileConstants.AccAbstract;", "-\t\t\tmodifiers |= AccFinal;", "+\t\t\tmodifiers |= ClassFileConstants.AccFinal;", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccFinal | AccStrictfp);", "+\t\t\t\tint unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected | ClassFileConstants.AccStatic | ClassFileConstants.AccAbstract | ClassFileConstants.AccFinal | ClassFileConstants.AccStrictfp);", "-\t\t\t\tint unexpectedModifiers = ~(AccAbstract | AccFinal | AccStrictfp);", "+\t\t\t\tint unexpectedModifiers = ~(ClassFileConstants.AccAbstract | ClassFileConstants.AccFinal | ClassFileConstants.AccStrictfp);", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccFinal | AccStrictfp);", "+\t\t\t\tint unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract | ClassFileConstants.AccFinal | ClassFileConstants.AccStrictfp);", "-\t\t\tif ((realModifiers & (AccFinal | AccAbstract)) == (AccFinal | AccAbstract))", "+\t\t\tif ((realModifiers & (ClassFileConstants.AccFinal | ClassFileConstants.AccAbstract)) == (ClassFileConstants.AccFinal | ClassFileConstants.AccAbstract))", "-\t\t\t\tif ((realModifiers & (AccProtected | AccPrivate)) != 0) {", "+\t\t\t\tif ((realModifiers & (ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate)) != 0) {", "-\t\t\t\t\tif ((realModifiers & AccProtected) != 0)", "-\t\t\t\t\t\tmodifiers &= ~AccProtected;", "-\t\t\t\t\tif ((realModifiers & AccPrivate) != 0)", "-\t\t\t\t\t\tmodifiers &= ~AccPrivate;", "+\t\t\t\t\tif ((realModifiers & ClassFileConstants.AccProtected) != 0)", "+\t\t\t\t\t\tmodifiers &= ~ClassFileConstants.AccProtected;", "+\t\t\t\t\tif ((realModifiers & ClassFileConstants.AccPrivate) != 0)", "+\t\t\t\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;", "-\t\t\t\tint accessorBits = realModifiers & (AccPublic | AccProtected | AccPrivate);", "+\t\t\t\tint accessorBits = realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);", "-\t\t\t\t\tif ((accessorBits & AccPublic) != 0) {", "-\t\t\t\t\t\tif ((accessorBits & AccProtected) != 0)", "-\t\t\t\t\t\t\tmodifiers &= ~AccProtected;", "-\t\t\t\t\t\tif ((accessorBits & AccPrivate) != 0)", "-\t\t\t\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\t\t\t} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {", "-\t\t\t\t\t\tmodifiers &= ~AccPrivate;", "+\t\t\t\t\tif ((accessorBits & ClassFileConstants.AccPublic) != 0) {", "+\t\t\t\t\t\tif ((accessorBits & ClassFileConstants.AccProtected) != 0)", "+\t\t\t\t\t\t\tmodifiers &= ~ClassFileConstants.AccProtected;", "+\t\t\t\t\t\tif ((accessorBits & ClassFileConstants.AccPrivate) != 0)", "+\t\t\t\t\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;", "+\t\t\t\t\t} else if ((accessorBits & ClassFileConstants.AccProtected) != 0 && (accessorBits & ClassFileConstants.AccPrivate) != 0) {", "+\t\t\t\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;", "-\t\t\tif ((realModifiers & AccStatic) == 0) {", "+\t\t\tif ((realModifiers & ClassFileConstants.AccStatic) == 0) {", "-\t\t\t\t\tmodifiers |= AccStatic;", "+\t\t\t\t\tmodifiers |= ClassFileConstants.AccStatic;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "458f5c189a5be9272ba652a0bfec3a30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void computeId()", "signatureAfterChange": " public void computeId()", "diff": ["-\t\t\tif (!CharOperation.equals(JAVA, compoundName[0]))", "+\t\t\tif (!CharOperation.equals(TypeConstants.JAVA, compoundName[0]))", "-\t\t\tif (!CharOperation.equals(LANG, compoundName[1])) {", "-\t\t\t\tif (CharOperation.equals(JAVA_IO_PRINTSTREAM, compoundName))", "-\t\t\t\t\tid = T_JavaIoPrintStream;", "-\t\t\t\telse if (CharOperation.equals(JAVA_UTIL_ITERATOR, compoundName))", "-\t\t\t\t\tid = T_JavaUtilIterator;", "-\t\t\t\telse if (CharOperation.equals(JAVA_IO_SERIALIZABLE, compoundName))", "-\t\t\t\t    id = T_JavaIoSerializable;", "+\t\t\tif (!CharOperation.equals(TypeConstants.LANG, compoundName[1])) {", "+\t\t\t\tif (CharOperation.equals(TypeConstants.JAVA_IO_PRINTSTREAM, compoundName))", "+\t\t\t\t\tid = TypeIds.T_JavaIoPrintStream;", "+\t\t\t\telse if (CharOperation.equals(TypeConstants.JAVA_UTIL_ITERATOR, compoundName))", "+\t\t\t\t\tid = TypeIds.T_JavaUtilIterator;", "+\t\t\t\telse if (CharOperation.equals(TypeConstants.JAVA_IO_SERIALIZABLE, compoundName))", "+\t\t\t\t    id = TypeIds.T_JavaIoSerializable;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ASSERTIONERROR[2]))", "-\t\t\t\t\t\tid = T_JavaLangAssertionError;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ASSERTIONERROR[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangAssertionError;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_BOOLEAN[2]))", "-\t\t\t\t\t\tid = T_JavaLangBoolean;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_BYTE[2]))", "-\t\t\t\t\t\tid = T_JavaLangByte;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_BOOLEAN[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangBoolean;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_BYTE[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangByte;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_CHARACTER[2]))", "-\t\t\t\t\t\tid = T_JavaLangCharacter;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLASS[2]))", "-\t\t\t\t\t\tid = T_JavaLangClass;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLASSNOTFOUNDEXCEPTION[2]))", "-\t\t\t\t\t\tid = T_JavaLangClassNotFoundException;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLONEABLE[2]))", "-\t\t\t\t\t    id = T_JavaLangCloneable;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_CHARACTER[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangCharacter;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_CLASS[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangClass;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_CLASSNOTFOUNDEXCEPTION[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangClassNotFoundException;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_CLONEABLE[2]))", "+\t\t\t\t\t    id = TypeIds.T_JavaLangCloneable;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_DOUBLE[2]))", "-\t\t\t\t\t\tid = T_JavaLangDouble;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_DEPRECATED[2]))", "-\t\t\t\t\t\tid = T_JavaLangDeprecated;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_DOUBLE[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangDouble;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_DEPRECATED[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangDeprecated;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ERROR[2]))", "-\t\t\t\t\t\tid = T_JavaLangError;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_EXCEPTION[2]))", "-\t\t\t\t\t\tid = T_JavaLangException;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ENUM[2]))", "-\t\t\t\t\t\tid = T_JavaLangEnum;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ERROR[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangError;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_EXCEPTION[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangException;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ENUM[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangEnum;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_FLOAT[2]))", "-\t\t\t\t\t\tid = T_JavaLangFloat;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_FLOAT[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangFloat;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_INTEGER[2]))", "-\t\t\t\t\t\tid = T_JavaLangInteger;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ITERABLE[2]))", "-\t\t\t\t\t\tid = T_JavaLangIterable;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ILLEGALARGUMENTEXCEPTION[2]))", "-\t\t\t\t\t\tid = T_JavaLangIllegalArgumentException;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_INTEGER[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangInteger;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ITERABLE[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangIterable;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ILLEGALARGUMENTEXCEPTION[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangIllegalArgumentException;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_LONG[2]))", "-\t\t\t\t\t\tid = T_JavaLangLong;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_LONG[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangLong;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_NOCLASSDEFERROR[2]))", "-\t\t\t\t\t\tid = T_JavaLangNoClassDefError;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_NOCLASSDEFERROR[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangNoClassDefError;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_OBJECT[2]))", "-\t\t\t\t\t\tid = T_JavaLangObject;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_OVERRIDE[2]))", "-\t\t\t\t\t\tid = T_JavaLangOverride;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_OBJECT[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangObject;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_OVERRIDE[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangOverride;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_RUNTIMEEXCEPTION[2]))", "-\t\t\t\t\t\tid = \tT_JavaLangRuntimeException;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_RUNTIMEEXCEPTION[2]))", "+\t\t\t\t\t\tid = \tTypeIds.T_JavaLangRuntimeException;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_STRING[2]))", "-\t\t\t\t\t\tid = T_JavaLangString;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_STRINGBUFFER[2]))", "-\t\t\t\t\t\tid = T_JavaLangStringBuffer;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_STRINGBUILDER[2])) ", "-\t\t\t\t\t\tid = T_JavaLangStringBuilder;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SYSTEM[2]))", "-\t\t\t\t\t\tid = T_JavaLangSystem;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SHORT[2]))", "-\t\t\t\t\t\tid = T_JavaLangShort;", "-\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SUPPRESSWARNINGS[2]))", "-\t\t\t\t\t\tid = T_JavaLangSuppressWarnings;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_STRING[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangString;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_STRINGBUFFER[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangStringBuffer;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_STRINGBUILDER[2])) ", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangStringBuilder;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_SYSTEM[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangSystem;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_SHORT[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangShort;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_SUPPRESSWARNINGS[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangSuppressWarnings;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_THROWABLE[2]))", "-\t\t\t\t\t\tid = T_JavaLangThrowable;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_THROWABLE[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangThrowable;", "-\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_VOID[2]))", "-\t\t\t\t\t\tid = T_JavaLangVoid;", "+\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_VOID[2]))", "+\t\t\t\t\t\tid = TypeIds.T_JavaLangVoid;", "-\t\t\tif (!CharOperation.equals(JAVA, compoundName[0]))", "+\t\t\tif (!CharOperation.equals(TypeConstants.JAVA, compoundName[0]))", "-\t\t\tif (!CharOperation.equals(LANG, compoundName[1]))", "+\t\t\tif (!CharOperation.equals(TypeConstants.LANG, compoundName[1]))", "-\t\t\tif (CharOperation.equals(packageName, REFLECT)) {", "-\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_REFLECT_CONSTRUCTOR[3]))", "-\t\t\t\t\tid = T_JavaLangReflectConstructor;", "+\t\t\tif (CharOperation.equals(packageName, TypeConstants.REFLECT)) {", "+\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_REFLECT_CONSTRUCTOR[3]))", "+\t\t\t\t\tid = TypeIds.T_JavaLangReflectConstructor;", "-\t\t\t} else if (CharOperation.equals(packageName, ANNOTATION)) {", "+\t\t\t} else if (CharOperation.equals(packageName, TypeConstants.ANNOTATION)) {", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_ANNOTATION[3]))", "-\t\t\t\t\t\t\tid = T_JavaLangAnnotationAnnotation;", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ANNOTATION_ANNOTATION[3]))", "+\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationAnnotation;", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_DOCUMENTED[3]))", "-\t\t\t\t\t\t\tid = T_JavaLangAnnotationDocumented;", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED[3]))", "+\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationDocumented;", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_ELEMENTTYPE[3]))", "-\t\t\t\t\t\t\tid = T_JavaLangAnnotationElementType;", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE[3]))", "+\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationElementType;", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_INHERITED[3]))", "-\t\t\t\t\t\t\tid = T_JavaLangAnnotationInherited;", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ANNOTATION_INHERITED[3]))", "+\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationInherited;", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_RETENTION[3]))", "-\t\t\t\t\t\t\tid = T_JavaLangAnnotationRetention;", "-\t\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_RETENTIONPOLICY[3]))", "-\t\t\t\t\t\t\tid = T_JavaLangAnnotationRetentionPolicy;", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ANNOTATION_RETENTION[3]))", "+\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationRetention;", "+\t\t\t\t\t\telse if (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ANNOTATION_RETENTIONPOLICY[3]))", "+\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationRetentionPolicy;", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_TARGET[3]))", "-\t\t\t\t\t\t\tid = T_JavaLangAnnotationTarget;", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, TypeConstants.JAVA_LANG_ANNOTATION_TARGET[3]))", "+\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationTarget;"]}], "num": 6039}
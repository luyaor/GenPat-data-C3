{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b47b935a1bf3bafefe59455eb1c576c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a57cacc92473aa4f8eebe23a3a09f175", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void completeCodeAttributeForClinit( \t\tint codeAttributeOffset, \t\tint problemLine)", "signatureAfterChange": " \tpublic void completeCodeAttributeForClinit( \t\tint codeAttributeOffset, \t\tint problemLine)", "diff": ["-\t\t\tint numberOfFrames = ((StackMapFrameCodeStream) codeStream).framesCounter;", "-\t\t\tif (numberOfFrames >=2) {", "+\t\t\tfinal Set framesPositions = ((StackMapFrameCodeStream) codeStream).framePositions;", "+\t\t\tfinal int framesPositionsSize = framesPositions.size();", "+\t\t\tint numberOfFrames = framesPositionsSize - 1; // -1 because last return doesn't count", "+\t\t\tif (numberOfFrames > 0) {", "+\t\t\t\tArrayList framePositions = new ArrayList(framesPositionsSize);", "+\t\t\t\tframePositions.addAll(framesPositions);", "+\t\t\t\tCollections.sort(framePositions);", "-\t\t\t\tStackMapFrame currentFrame = ((StackMapFrameCodeStream) codeStream).frames;", "-\t\t\t\twhile (currentFrame.prevFrame != null) {", "-\t\t\t\t\tcurrentFrame = currentFrame.prevFrame;", "-\t\t\t\t}", "-\t\t\t\tcurrentFrame = currentFrame.nextFrame;", "-\t\t\t\twhile (currentFrame != null && currentFrame.pc < code_length) {", "+\t\t\t\tArrayList frames = ((StackMapFrameCodeStream) codeStream).frames;", "+\t\t\t\tStackMapFrame currentFrame = (StackMapFrame) frames.get(0);", "+\t\t\t\tStackMapFrame prevFrame = null;", "+\t\t\t\tint framesSize = frames.size();", "+\t\t\t\tint frameIndex = 0;", "+\t\t\t\tfor (int j = 0; j < framesPositionsSize && ((Integer) framePositions.get(j)).intValue() < code_length; j++) {", "+\t\t\t\t\t// select next frame", "+\t\t\t\t\tprevFrame = currentFrame;", "+\t\t\t\t\tcurrentFrame = null;", "+\t\t\t\t\tfor (; frameIndex < framesSize; frameIndex++) {", "+\t\t\t\t\t\tcurrentFrame = (StackMapFrame) frames.get(frameIndex);", "+\t\t\t\t\t\tif (currentFrame.pc == ((Integer) framePositions.get(j)).intValue()) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (currentFrame == null) break;", "-\t\t\t\t\tint offsetDelta = currentFrame.getOffsetDelta();", "-\t\t\t\t\tswitch (currentFrame.getFrameType()) {", "+\t\t\t\t\tint offsetDelta = currentFrame.getOffsetDelta(prevFrame);", "+\t\t\t\t\tswitch (currentFrame.getFrameType(prevFrame)) {", "-\t\t\t\t\t\t\tint numberOfDifferentLocals = currentFrame.numberOfDifferentLocals();", "+\t\t\t\t\t\t\tint numberOfDifferentLocals = currentFrame.numberOfDifferentLocals(prevFrame);", "-\t\t\t\t\t\t\tnumberOfDifferentLocals = -currentFrame.numberOfDifferentLocals();", "+\t\t\t\t\t\t\tnumberOfDifferentLocals = -currentFrame.numberOfDifferentLocals(prevFrame);", "-\t\t\t\t\tcurrentFrame = currentFrame.nextFrame;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eba668b50afc792b39bf2e171690e816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void completeCodeAttributeForMissingAbstractProblemMethod( \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "signatureAfterChange": " \tpublic void completeCodeAttributeForMissingAbstractProblemMethod( \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "diff": ["-\t\t\tint numberOfFrames = ((StackMapFrameCodeStream) codeStream).framesCounter;", "-\t\t\tif (numberOfFrames >=2) {", "+\t\t\tfinal Set framesPositions = ((StackMapFrameCodeStream) codeStream).framePositions;", "+\t\t\tfinal int framesPositionsSize = framesPositions.size();", "+\t\t\tint numberOfFrames = framesPositionsSize - 1; // -1 because last return doesn't count", "+\t\t\tif (numberOfFrames > 0) {", "+\t\t\t\tArrayList framePositions = new ArrayList(framesPositionsSize);", "+\t\t\t\tframePositions.addAll(framesPositions);", "+\t\t\t\tCollections.sort(framePositions);", "-\t\t\t\tStackMapFrame currentFrame = ((StackMapFrameCodeStream) codeStream).frames;", "-\t\t\t\twhile (currentFrame.prevFrame != null) {", "-\t\t\t\t\tcurrentFrame = currentFrame.prevFrame;", "-\t\t\t\t}", "-\t\t\t\tcurrentFrame = currentFrame.nextFrame;", "-\t\t\t\twhile (currentFrame != null && currentFrame.pc < code_length) {", "-\t\t\t\t\t// generate current frame", "-\t\t\t\t\t// need to find differences between the current frame and the previous frame", "+\t\t\t\tArrayList frames = ((StackMapFrameCodeStream) codeStream).frames;", "+\t\t\t\tStackMapFrame currentFrame = (StackMapFrame) frames.get(0);", "+\t\t\t\tStackMapFrame prevFrame = null;", "+\t\t\t\tint framesSize = frames.size();", "+\t\t\t\tint frameIndex = 0;", "+\t\t\t\tfor (int j = 0; j < framesPositionsSize && ((Integer) framePositions.get(j)).intValue() < code_length; j++) {", "+\t\t\t\t\t// select next frame", "+\t\t\t\t\tprevFrame = currentFrame;", "+\t\t\t\t\tcurrentFrame = null;", "+\t\t\t\t\tfor (; frameIndex < framesSize; frameIndex++) {", "+\t\t\t\t\t\tcurrentFrame = (StackMapFrame) frames.get(frameIndex);", "+\t\t\t\t\t\tif (currentFrame.pc == ((Integer) framePositions.get(j)).intValue()) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (currentFrame == null) break;", "-\t\t\t\t\tint offsetDelta = currentFrame.getOffsetDelta();", "-\t\t\t\t\tswitch (currentFrame.getFrameType()) {", "+\t\t\t\t\tint offsetDelta = currentFrame.getOffsetDelta(prevFrame);", "+\t\t\t\t\tswitch (currentFrame.getFrameType(prevFrame)) {", "-\t\t\t\t\t\t\tint numberOfDifferentLocals = currentFrame.numberOfDifferentLocals();", "+\t\t\t\t\t\t\tint numberOfDifferentLocals = currentFrame.numberOfDifferentLocals(prevFrame);", "-\t\t\t\t\t\t\tnumberOfDifferentLocals = -currentFrame.numberOfDifferentLocals();", "+\t\t\t\t\t\t\tnumberOfDifferentLocals = -currentFrame.numberOfDifferentLocals(prevFrame);", "-\t\t\t\t\tcurrentFrame = currentFrame.nextFrame;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4735b57b63e1d2db4eea1b3de01aaba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void completeCodeAttributeForProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "signatureAfterChange": " \tpublic void completeCodeAttributeForProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "diff": ["-\t\t\tint numberOfFrames = ((StackMapFrameCodeStream) codeStream).framesCounter;", "-\t\t\tif (numberOfFrames >=2) {", "+\t\t\tfinal Set framesPositions = ((StackMapFrameCodeStream) codeStream).framePositions;", "+\t\t\tfinal int framesPositionsSize = framesPositions.size();", "+\t\t\tint numberOfFrames = framesPositionsSize - 1; // -1 because last return doesn't count", "+\t\t\tif (numberOfFrames > 0) {", "+\t\t\t\tArrayList framePositions = new ArrayList(framesPositionsSize);", "+\t\t\t\tframePositions.addAll(framesPositions);", "+\t\t\t\tCollections.sort(framePositions);", "-\t\t\t\tStackMapFrame currentFrame = ((StackMapFrameCodeStream) codeStream).frames;", "-\t\t\t\twhile (currentFrame.prevFrame != null) {", "-\t\t\t\t\tcurrentFrame = currentFrame.prevFrame;", "-\t\t\t\t}", "-\t\t\t\tcurrentFrame = currentFrame.nextFrame;", "-\t\t\t\twhile (currentFrame != null && currentFrame.pc < code_length) {", "-\t\t\t\t\t// generate current frame", "-\t\t\t\t\t// need to find differences between the current frame and the previous frame", "+\t\t\t\tArrayList frames = ((StackMapFrameCodeStream) codeStream).frames;", "+\t\t\t\tStackMapFrame currentFrame = (StackMapFrame) frames.get(0);", "+\t\t\t\tStackMapFrame prevFrame = null;", "+\t\t\t\tint framesSize = frames.size();", "+\t\t\t\tint frameIndex = 0;", "+\t\t\t\tfor (int j = 0; j < framesPositionsSize && ((Integer) framePositions.get(j)).intValue() < code_length; j++) {", "+\t\t\t\t\t// select next frame", "+\t\t\t\t\tprevFrame = currentFrame;", "+\t\t\t\t\tcurrentFrame = null;", "+\t\t\t\t\tfor (; frameIndex < framesSize; frameIndex++) {", "+\t\t\t\t\t\tcurrentFrame = (StackMapFrame) frames.get(frameIndex);", "+\t\t\t\t\t\tif (currentFrame.pc == ((Integer) framePositions.get(j)).intValue()) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (currentFrame == null) break;", "-\t\t\t\t\tint offsetDelta = currentFrame.getOffsetDelta();", "-\t\t\t\t\tswitch (currentFrame.getFrameType()) {", "+\t\t\t\t\tint offsetDelta = currentFrame.getOffsetDelta(prevFrame);", "+\t\t\t\t\tswitch (currentFrame.getFrameType(prevFrame)) {", "-\t\t\t\t\t\t\tint numberOfDifferentLocals = currentFrame.numberOfDifferentLocals();", "+\t\t\t\t\t\t\tint numberOfDifferentLocals = currentFrame.numberOfDifferentLocals(prevFrame);", "-\t\t\t\t\t\t\tnumberOfDifferentLocals = -currentFrame.numberOfDifferentLocals();", "+\t\t\t\t\t\t\tnumberOfDifferentLocals = -currentFrame.numberOfDifferentLocals(prevFrame);", "-\t\t\t\t\tcurrentFrame = currentFrame.nextFrame;"]}], "num": 11451}